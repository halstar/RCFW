
RCFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e2d0  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001484  0800e4b8  0800e4b8  0001e4b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f93c  0800f93c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800f93c  0800f93c  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f93c  0800f93c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f93c  0800f93c  0001f93c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f940  0800f940  0001f940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800f944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009d0  200001ec  0800fb30  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bbc  0800fb30  00020bbc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b957  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004049  00000000  00000000  0003bb6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014d8  00000000  00000000  0003fbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001310  00000000  00000000  00041090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f07c  00000000  00000000  000423a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c7b0  00000000  00000000  0006141c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6923  00000000  00000000  0007dbcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001244ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000679c  00000000  00000000  00124544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001ec 	.word	0x200001ec
 8000204:	00000000 	.word	0x00000000
 8000208:	0800e4a0 	.word	0x0800e4a0

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001f0 	.word	0x200001f0
 8000224:	0800e4a0 	.word	0x0800e4a0

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_frsub>:
 8000b60:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b64:	e002      	b.n	8000b6c <__addsf3>
 8000b66:	bf00      	nop

08000b68 <__aeabi_fsub>:
 8000b68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b6c <__addsf3>:
 8000b6c:	0042      	lsls	r2, r0, #1
 8000b6e:	bf1f      	itttt	ne
 8000b70:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b74:	ea92 0f03 	teqne	r2, r3
 8000b78:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b7c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b80:	d06a      	beq.n	8000c58 <__addsf3+0xec>
 8000b82:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b86:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8a:	bfc1      	itttt	gt
 8000b8c:	18d2      	addgt	r2, r2, r3
 8000b8e:	4041      	eorgt	r1, r0
 8000b90:	4048      	eorgt	r0, r1
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	bfb8      	it	lt
 8000b96:	425b      	neglt	r3, r3
 8000b98:	2b19      	cmp	r3, #25
 8000b9a:	bf88      	it	hi
 8000b9c:	4770      	bxhi	lr
 8000b9e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bb6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bba:	bf18      	it	ne
 8000bbc:	4249      	negne	r1, r1
 8000bbe:	ea92 0f03 	teq	r2, r3
 8000bc2:	d03f      	beq.n	8000c44 <__addsf3+0xd8>
 8000bc4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bcc:	eb10 000c 	adds.w	r0, r0, ip
 8000bd0:	f1c3 0320 	rsb	r3, r3, #32
 8000bd4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bdc:	d502      	bpl.n	8000be4 <__addsf3+0x78>
 8000bde:	4249      	negs	r1, r1
 8000be0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be8:	d313      	bcc.n	8000c12 <__addsf3+0xa6>
 8000bea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bee:	d306      	bcc.n	8000bfe <__addsf3+0x92>
 8000bf0:	0840      	lsrs	r0, r0, #1
 8000bf2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bf6:	f102 0201 	add.w	r2, r2, #1
 8000bfa:	2afe      	cmp	r2, #254	; 0xfe
 8000bfc:	d251      	bcs.n	8000ca2 <__addsf3+0x136>
 8000bfe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	ea40 0003 	orr.w	r0, r0, r3
 8000c10:	4770      	bx	lr
 8000c12:	0049      	lsls	r1, r1, #1
 8000c14:	eb40 0000 	adc.w	r0, r0, r0
 8000c18:	3a01      	subs	r2, #1
 8000c1a:	bf28      	it	cs
 8000c1c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c20:	d2ed      	bcs.n	8000bfe <__addsf3+0x92>
 8000c22:	fab0 fc80 	clz	ip, r0
 8000c26:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c2e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c32:	bfaa      	itet	ge
 8000c34:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c38:	4252      	neglt	r2, r2
 8000c3a:	4318      	orrge	r0, r3
 8000c3c:	bfbc      	itt	lt
 8000c3e:	40d0      	lsrlt	r0, r2
 8000c40:	4318      	orrlt	r0, r3
 8000c42:	4770      	bx	lr
 8000c44:	f092 0f00 	teq	r2, #0
 8000c48:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c4c:	bf06      	itte	eq
 8000c4e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c52:	3201      	addeq	r2, #1
 8000c54:	3b01      	subne	r3, #1
 8000c56:	e7b5      	b.n	8000bc4 <__addsf3+0x58>
 8000c58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c60:	bf18      	it	ne
 8000c62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c66:	d021      	beq.n	8000cac <__addsf3+0x140>
 8000c68:	ea92 0f03 	teq	r2, r3
 8000c6c:	d004      	beq.n	8000c78 <__addsf3+0x10c>
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	bf08      	it	eq
 8000c74:	4608      	moveq	r0, r1
 8000c76:	4770      	bx	lr
 8000c78:	ea90 0f01 	teq	r0, r1
 8000c7c:	bf1c      	itt	ne
 8000c7e:	2000      	movne	r0, #0
 8000c80:	4770      	bxne	lr
 8000c82:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c86:	d104      	bne.n	8000c92 <__addsf3+0x126>
 8000c88:	0040      	lsls	r0, r0, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c90:	4770      	bx	lr
 8000c92:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c96:	bf3c      	itt	cc
 8000c98:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bxcc	lr
 8000c9e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ca6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000caa:	4770      	bx	lr
 8000cac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb0:	bf16      	itet	ne
 8000cb2:	4608      	movne	r0, r1
 8000cb4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb8:	4601      	movne	r1, r0
 8000cba:	0242      	lsls	r2, r0, #9
 8000cbc:	bf06      	itte	eq
 8000cbe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc2:	ea90 0f01 	teqeq	r0, r1
 8000cc6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_ui2f>:
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e004      	b.n	8000cdc <__aeabi_i2f+0x8>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_i2f>:
 8000cd4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	bf48      	it	mi
 8000cda:	4240      	negmi	r0, r0
 8000cdc:	ea5f 0c00 	movs.w	ip, r0
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce8:	4601      	mov	r1, r0
 8000cea:	f04f 0000 	mov.w	r0, #0
 8000cee:	e01c      	b.n	8000d2a <__aeabi_l2f+0x2a>

08000cf0 <__aeabi_ul2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	e00a      	b.n	8000d14 <__aeabi_l2f+0x14>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_l2f>:
 8000d00:	ea50 0201 	orrs.w	r2, r0, r1
 8000d04:	bf08      	it	eq
 8000d06:	4770      	bxeq	lr
 8000d08:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__aeabi_l2f+0x14>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	ea5f 0c01 	movs.w	ip, r1
 8000d18:	bf02      	ittt	eq
 8000d1a:	4684      	moveq	ip, r0
 8000d1c:	4601      	moveq	r1, r0
 8000d1e:	2000      	moveq	r0, #0
 8000d20:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d24:	bf08      	it	eq
 8000d26:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d2e:	fabc f28c 	clz	r2, ip
 8000d32:	3a08      	subs	r2, #8
 8000d34:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d38:	db10      	blt.n	8000d5c <__aeabi_l2f+0x5c>
 8000d3a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3e:	4463      	add	r3, ip
 8000d40:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d44:	f1c2 0220 	rsb	r2, r2, #32
 8000d48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d50:	eb43 0002 	adc.w	r0, r3, r2
 8000d54:	bf08      	it	eq
 8000d56:	f020 0001 	biceq.w	r0, r0, #1
 8000d5a:	4770      	bx	lr
 8000d5c:	f102 0220 	add.w	r2, r2, #32
 8000d60:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d64:	f1c2 0220 	rsb	r2, r2, #32
 8000d68:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d6c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d70:	eb43 0002 	adc.w	r0, r3, r2
 8000d74:	bf08      	it	eq
 8000d76:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7a:	4770      	bx	lr

08000d7c <__aeabi_fmul>:
 8000d7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d84:	bf1e      	ittt	ne
 8000d86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8a:	ea92 0f0c 	teqne	r2, ip
 8000d8e:	ea93 0f0c 	teqne	r3, ip
 8000d92:	d06f      	beq.n	8000e74 <__aeabi_fmul+0xf8>
 8000d94:	441a      	add	r2, r3
 8000d96:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9a:	0240      	lsls	r0, r0, #9
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da2:	d01e      	beq.n	8000de2 <__aeabi_fmul+0x66>
 8000da4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db0:	fba0 3101 	umull	r3, r1, r0, r1
 8000db4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dbc:	bf3e      	ittt	cc
 8000dbe:	0049      	lslcc	r1, r1, #1
 8000dc0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc4:	005b      	lslcc	r3, r3, #1
 8000dc6:	ea40 0001 	orr.w	r0, r0, r1
 8000dca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dce:	2afd      	cmp	r2, #253	; 0xfd
 8000dd0:	d81d      	bhi.n	8000e0e <__aeabi_fmul+0x92>
 8000dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dda:	bf08      	it	eq
 8000ddc:	f020 0001 	biceq.w	r0, r0, #1
 8000de0:	4770      	bx	lr
 8000de2:	f090 0f00 	teq	r0, #0
 8000de6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dea:	bf08      	it	eq
 8000dec:	0249      	lsleq	r1, r1, #9
 8000dee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000df6:	3a7f      	subs	r2, #127	; 0x7f
 8000df8:	bfc2      	ittt	gt
 8000dfa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dfe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e02:	4770      	bxgt	lr
 8000e04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e08:	f04f 0300 	mov.w	r3, #0
 8000e0c:	3a01      	subs	r2, #1
 8000e0e:	dc5d      	bgt.n	8000ecc <__aeabi_fmul+0x150>
 8000e10:	f112 0f19 	cmn.w	r2, #25
 8000e14:	bfdc      	itt	le
 8000e16:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1a:	4770      	bxle	lr
 8000e1c:	f1c2 0200 	rsb	r2, r2, #0
 8000e20:	0041      	lsls	r1, r0, #1
 8000e22:	fa21 f102 	lsr.w	r1, r1, r2
 8000e26:	f1c2 0220 	rsb	r2, r2, #32
 8000e2a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e32:	f140 0000 	adc.w	r0, r0, #0
 8000e36:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3a:	bf08      	it	eq
 8000e3c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e40:	4770      	bx	lr
 8000e42:	f092 0f00 	teq	r2, #0
 8000e46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0040      	lsleq	r0, r0, #1
 8000e4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e52:	3a01      	subeq	r2, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fmul+0xce>
 8000e56:	ea40 000c 	orr.w	r0, r0, ip
 8000e5a:	f093 0f00 	teq	r3, #0
 8000e5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0049      	lsleq	r1, r1, #1
 8000e66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6a:	3b01      	subeq	r3, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fmul+0xe6>
 8000e6e:	ea41 010c 	orr.w	r1, r1, ip
 8000e72:	e78f      	b.n	8000d94 <__aeabi_fmul+0x18>
 8000e74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	bf18      	it	ne
 8000e7e:	ea93 0f0c 	teqne	r3, ip
 8000e82:	d00a      	beq.n	8000e9a <__aeabi_fmul+0x11e>
 8000e84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e88:	bf18      	it	ne
 8000e8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e8e:	d1d8      	bne.n	8000e42 <__aeabi_fmul+0xc6>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	4770      	bx	lr
 8000e9a:	f090 0f00 	teq	r0, #0
 8000e9e:	bf17      	itett	ne
 8000ea0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea4:	4608      	moveq	r0, r1
 8000ea6:	f091 0f00 	teqne	r1, #0
 8000eaa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eae:	d014      	beq.n	8000eda <__aeabi_fmul+0x15e>
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	d101      	bne.n	8000eba <__aeabi_fmul+0x13e>
 8000eb6:	0242      	lsls	r2, r0, #9
 8000eb8:	d10f      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000eba:	ea93 0f0c 	teq	r3, ip
 8000ebe:	d103      	bne.n	8000ec8 <__aeabi_fmul+0x14c>
 8000ec0:	024b      	lsls	r3, r1, #9
 8000ec2:	bf18      	it	ne
 8000ec4:	4608      	movne	r0, r1
 8000ec6:	d108      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed8:	4770      	bx	lr
 8000eda:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ede:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_fdiv>:
 8000ee4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eec:	bf1e      	ittt	ne
 8000eee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef2:	ea92 0f0c 	teqne	r2, ip
 8000ef6:	ea93 0f0c 	teqne	r3, ip
 8000efa:	d069      	beq.n	8000fd0 <__aeabi_fdiv+0xec>
 8000efc:	eba2 0203 	sub.w	r2, r2, r3
 8000f00:	ea80 0c01 	eor.w	ip, r0, r1
 8000f04:	0249      	lsls	r1, r1, #9
 8000f06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0a:	d037      	beq.n	8000f7c <__aeabi_fdiv+0x98>
 8000f0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	bf38      	it	cc
 8000f20:	005b      	lslcc	r3, r3, #1
 8000f22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	bf24      	itt	cs
 8000f2e:	1a5b      	subcs	r3, r3, r1
 8000f30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f38:	bf24      	itt	cs
 8000f3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f46:	bf24      	itt	cs
 8000f48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	bf18      	it	ne
 8000f62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f66:	d1e0      	bne.n	8000f2a <__aeabi_fdiv+0x46>
 8000f68:	2afd      	cmp	r2, #253	; 0xfd
 8000f6a:	f63f af50 	bhi.w	8000e0e <__aeabi_fmul+0x92>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f74:	bf08      	it	eq
 8000f76:	f020 0001 	biceq.w	r0, r0, #1
 8000f7a:	4770      	bx	lr
 8000f7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f84:	327f      	adds	r2, #127	; 0x7f
 8000f86:	bfc2      	ittt	gt
 8000f88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f90:	4770      	bxgt	lr
 8000f92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	3a01      	subs	r2, #1
 8000f9c:	e737      	b.n	8000e0e <__aeabi_fmul+0x92>
 8000f9e:	f092 0f00 	teq	r2, #0
 8000fa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fa6:	bf02      	ittt	eq
 8000fa8:	0040      	lsleq	r0, r0, #1
 8000faa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fae:	3a01      	subeq	r2, #1
 8000fb0:	d0f9      	beq.n	8000fa6 <__aeabi_fdiv+0xc2>
 8000fb2:	ea40 000c 	orr.w	r0, r0, ip
 8000fb6:	f093 0f00 	teq	r3, #0
 8000fba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	bf02      	ittt	eq
 8000fc0:	0049      	lsleq	r1, r1, #1
 8000fc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fc6:	3b01      	subeq	r3, #1
 8000fc8:	d0f9      	beq.n	8000fbe <__aeabi_fdiv+0xda>
 8000fca:	ea41 010c 	orr.w	r1, r1, ip
 8000fce:	e795      	b.n	8000efc <__aeabi_fdiv+0x18>
 8000fd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd4:	ea92 0f0c 	teq	r2, ip
 8000fd8:	d108      	bne.n	8000fec <__aeabi_fdiv+0x108>
 8000fda:	0242      	lsls	r2, r0, #9
 8000fdc:	f47f af7d 	bne.w	8000eda <__aeabi_fmul+0x15e>
 8000fe0:	ea93 0f0c 	teq	r3, ip
 8000fe4:	f47f af70 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e776      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000fec:	ea93 0f0c 	teq	r3, ip
 8000ff0:	d104      	bne.n	8000ffc <__aeabi_fdiv+0x118>
 8000ff2:	024b      	lsls	r3, r1, #9
 8000ff4:	f43f af4c 	beq.w	8000e90 <__aeabi_fmul+0x114>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	e76e      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000ffc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001000:	bf18      	it	ne
 8001002:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001006:	d1ca      	bne.n	8000f9e <__aeabi_fdiv+0xba>
 8001008:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800100c:	f47f af5c 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8001010:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001014:	f47f af3c 	bne.w	8000e90 <__aeabi_fmul+0x114>
 8001018:	e75f      	b.n	8000eda <__aeabi_fmul+0x15e>
 800101a:	bf00      	nop

0800101c <__aeabi_f2iz>:
 800101c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001020:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001024:	d30f      	bcc.n	8001046 <__aeabi_f2iz+0x2a>
 8001026:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800102a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800102e:	d90d      	bls.n	800104c <__aeabi_f2iz+0x30>
 8001030:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001034:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001038:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800103c:	fa23 f002 	lsr.w	r0, r3, r2
 8001040:	bf18      	it	ne
 8001042:	4240      	negne	r0, r0
 8001044:	4770      	bx	lr
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	4770      	bx	lr
 800104c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001050:	d101      	bne.n	8001056 <__aeabi_f2iz+0x3a>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	d105      	bne.n	8001062 <__aeabi_f2iz+0x46>
 8001056:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800105a:	bf08      	it	eq
 800105c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001060:	4770      	bx	lr
 8001062:	f04f 0000 	mov.w	r0, #0
 8001066:	4770      	bx	lr

08001068 <__aeabi_f2uiz>:
 8001068:	0042      	lsls	r2, r0, #1
 800106a:	d20e      	bcs.n	800108a <__aeabi_f2uiz+0x22>
 800106c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001070:	d30b      	bcc.n	800108a <__aeabi_f2uiz+0x22>
 8001072:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001076:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800107a:	d409      	bmi.n	8001090 <__aeabi_f2uiz+0x28>
 800107c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001080:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001084:	fa23 f002 	lsr.w	r0, r3, r2
 8001088:	4770      	bx	lr
 800108a:	f04f 0000 	mov.w	r0, #0
 800108e:	4770      	bx	lr
 8001090:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001094:	d101      	bne.n	800109a <__aeabi_f2uiz+0x32>
 8001096:	0242      	lsls	r2, r0, #9
 8001098:	d102      	bne.n	80010a0 <__aeabi_f2uiz+0x38>
 800109a:	f04f 30ff 	mov.w	r0, #4294967295
 800109e:	4770      	bx	lr
 80010a0:	f04f 0000 	mov.w	r0, #0
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <MAIN_displayRcfwBanner>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void MAIN_displayRcfwBanner(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* Used ASCII art generator from https://patorjk.com with font called "Colossal" */
  LOG_info("");
 80010ac:	4914      	ldr	r1, [pc, #80]	; (8001100 <MAIN_displayRcfwBanner+0x58>)
 80010ae:	2001      	movs	r0, #1
 80010b0:	f009 fc46 	bl	800a940 <LOG_log>
  LOG_info("    8888888b.        .d8888b.       8888888888      888       888"  );
 80010b4:	4913      	ldr	r1, [pc, #76]	; (8001104 <MAIN_displayRcfwBanner+0x5c>)
 80010b6:	2001      	movs	r0, #1
 80010b8:	f009 fc42 	bl	800a940 <LOG_log>
  LOG_info("    888   Y88b      d88P  Y88b      888             888   o   888"  );
 80010bc:	4912      	ldr	r1, [pc, #72]	; (8001108 <MAIN_displayRcfwBanner+0x60>)
 80010be:	2001      	movs	r0, #1
 80010c0:	f009 fc3e 	bl	800a940 <LOG_log>
  LOG_info("    888    888      888    888      888             888  d8b  888"  );
 80010c4:	4911      	ldr	r1, [pc, #68]	; (800110c <MAIN_displayRcfwBanner+0x64>)
 80010c6:	2001      	movs	r0, #1
 80010c8:	f009 fc3a 	bl	800a940 <LOG_log>
  LOG_info("    888   d88P      888             8888888         888 d888b 888"  );
 80010cc:	4910      	ldr	r1, [pc, #64]	; (8001110 <MAIN_displayRcfwBanner+0x68>)
 80010ce:	2001      	movs	r0, #1
 80010d0:	f009 fc36 	bl	800a940 <LOG_log>
  LOG_info("    8888888P\"       888             888             888d88888b888" );
 80010d4:	490f      	ldr	r1, [pc, #60]	; (8001114 <MAIN_displayRcfwBanner+0x6c>)
 80010d6:	2001      	movs	r0, #1
 80010d8:	f009 fc32 	bl	800a940 <LOG_log>
  LOG_info("    888 T88b        888    888      888             88888P Y88888"  );
 80010dc:	490e      	ldr	r1, [pc, #56]	; (8001118 <MAIN_displayRcfwBanner+0x70>)
 80010de:	2001      	movs	r0, #1
 80010e0:	f009 fc2e 	bl	800a940 <LOG_log>
  LOG_info("    888  T88b       Y88b  d88P      888             8888P   Y8888"  );
 80010e4:	490d      	ldr	r1, [pc, #52]	; (800111c <MAIN_displayRcfwBanner+0x74>)
 80010e6:	2001      	movs	r0, #1
 80010e8:	f009 fc2a 	bl	800a940 <LOG_log>
  LOG_info("    888   T88b       \"Y8888P\"       888             888P     Y888");
 80010ec:	490c      	ldr	r1, [pc, #48]	; (8001120 <MAIN_displayRcfwBanner+0x78>)
 80010ee:	2001      	movs	r0, #1
 80010f0:	f009 fc26 	bl	800a940 <LOG_log>
  LOG_info("");
 80010f4:	4902      	ldr	r1, [pc, #8]	; (8001100 <MAIN_displayRcfwBanner+0x58>)
 80010f6:	2001      	movs	r0, #1
 80010f8:	f009 fc22 	bl	800a940 <LOG_log>

  return;
 80010fc:	bf00      	nop
}
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	0800e4b8 	.word	0x0800e4b8
 8001104:	0800e4bc 	.word	0x0800e4bc
 8001108:	0800e500 	.word	0x0800e500
 800110c:	0800e544 	.word	0x0800e544
 8001110:	0800e588 	.word	0x0800e588
 8001114:	0800e5cc 	.word	0x0800e5cc
 8001118:	0800e610 	.word	0x0800e610
 800111c:	0800e654 	.word	0x0800e654
 8001120:	0800e698 	.word	0x0800e698

08001124 <MAIN_togglePrintOutput>:

static void MAIN_togglePrintOutput(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  if (g_MAIN_printOutput == MAIN_PRINT_OUTPUT_TO_CONSOLE)
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <MAIN_togglePrintOutput+0x30>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d107      	bne.n	8001140 <MAIN_togglePrintOutput+0x1c>
  {
    LOG_info("Directing print to MASTER");
 8001130:	4909      	ldr	r1, [pc, #36]	; (8001158 <MAIN_togglePrintOutput+0x34>)
 8001132:	2001      	movs	r0, #1
 8001134:	f009 fc04 	bl	800a940 <LOG_log>

    g_MAIN_printOutput = MAIN_PRINT_OUTPUT_TO_MASTER;
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <MAIN_togglePrintOutput+0x30>)
 800113a:	2201      	movs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
    LOG_info("Directing print to CONSOLE");

    g_MAIN_printOutput = MAIN_PRINT_OUTPUT_TO_CONSOLE;
  }

  return;
 800113e:	e007      	b.n	8001150 <MAIN_togglePrintOutput+0x2c>
    LOG_info("Directing print to CONSOLE");
 8001140:	4906      	ldr	r1, [pc, #24]	; (800115c <MAIN_togglePrintOutput+0x38>)
 8001142:	2001      	movs	r0, #1
 8001144:	f009 fbfc 	bl	800a940 <LOG_log>
    g_MAIN_printOutput = MAIN_PRINT_OUTPUT_TO_CONSOLE;
 8001148:	4b02      	ldr	r3, [pc, #8]	; (8001154 <MAIN_togglePrintOutput+0x30>)
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]
  return;
 800114e:	bf00      	nop
}
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200009c8 	.word	0x200009c8
 8001158:	0800e6dc 	.word	0x0800e6dc
 800115c:	0800e6f8 	.word	0x0800e6f8

08001160 <MAIN_updateSwReset>:

static void MAIN_updateSwReset(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
  GPIO_PinState l_pinState;

  l_pinState = HAL_GPIO_ReadPin(SW_RESET_GPIO_Port, SW_RESET_Pin);
 8001166:	2101      	movs	r1, #1
 8001168:	4813      	ldr	r0, [pc, #76]	; (80011b8 <MAIN_updateSwReset+0x58>)
 800116a:	f002 fdf9 	bl	8003d60 <HAL_GPIO_ReadPin>
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]

  if (l_pinState == GPIO_PIN_SET)
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d01a      	beq.n	80011ae <MAIN_updateSwReset+0x4e>
  {
    ; /* Nothing to do */
  }
  else
  {
    LOG_info("SW reset will be triggered in 3s");
 8001178:	4910      	ldr	r1, [pc, #64]	; (80011bc <MAIN_updateSwReset+0x5c>)
 800117a:	2001      	movs	r0, #1
 800117c:	f009 fbe0 	bl	800a940 <LOG_log>
    HAL_Delay(1000);
 8001180:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001184:	f001 fcc4 	bl	8002b10 <HAL_Delay>
    LOG_info("SW reset will be triggered in 2s");
 8001188:	490d      	ldr	r1, [pc, #52]	; (80011c0 <MAIN_updateSwReset+0x60>)
 800118a:	2001      	movs	r0, #1
 800118c:	f009 fbd8 	bl	800a940 <LOG_log>
    HAL_Delay(1000);
 8001190:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001194:	f001 fcbc 	bl	8002b10 <HAL_Delay>
    LOG_info("SW reset will be triggered in 1s");
 8001198:	490a      	ldr	r1, [pc, #40]	; (80011c4 <MAIN_updateSwReset+0x64>)
 800119a:	2001      	movs	r0, #1
 800119c:	f009 fbd0 	bl	800a940 <LOG_log>
    HAL_Delay(1000);
 80011a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011a4:	f001 fcb4 	bl	8002b10 <HAL_Delay>

    HAL_NVIC_SystemReset();
 80011a8:	f002 f9f4 	bl	8003594 <HAL_NVIC_SystemReset>
  }

  return;
 80011ac:	bf00      	nop
 80011ae:	bf00      	nop
}
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40011000 	.word	0x40011000
 80011bc:	0800e714 	.word	0x0800e714
 80011c0:	0800e738 	.word	0x0800e738
 80011c4:	0800e75c 	.word	0x0800e75c

080011c8 <MAIN_updateLogSetup>:

static void MAIN_updateLogSetup(T_BLU_Data *p_data, uint32_t p_timeInS)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  switch (p_data->button)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	7c1b      	ldrb	r3, [r3, #16]
 80011d6:	3b05      	subs	r3, #5
 80011d8:	2b03      	cmp	r3, #3
 80011da:	d85b      	bhi.n	8001294 <MAIN_updateLogSetup+0xcc>
 80011dc:	a201      	add	r2, pc, #4	; (adr r2, 80011e4 <MAIN_updateLogSetup+0x1c>)
 80011de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e2:	bf00      	nop
 80011e4:	080011f5 	.word	0x080011f5
 80011e8:	0800126d 	.word	0x0800126d
 80011ec:	0800121d 	.word	0x0800121d
 80011f0:	08001245 	.word	0x08001245
  {
    case BLU_BUTTON_PAD_UP:
      if (g_MAIN_padUpPressedStartTimeInS == 0)
 80011f4:	4b35      	ldr	r3, [pc, #212]	; (80012cc <MAIN_updateLogSetup+0x104>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d105      	bne.n	8001208 <MAIN_updateLogSetup+0x40>
      {
        g_MAIN_padUpPressedStartTimeInS = p_timeInS;
 80011fc:	4a33      	ldr	r2, [pc, #204]	; (80012cc <MAIN_updateLogSetup+0x104>)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	6013      	str	r3, [r2, #0]

        LOG_increaseLevel();
 8001202:	f009 fb6d 	bl	800a8e0 <LOG_increaseLevel>
      }
      else
      {
        g_MAIN_padUpPressedStartTimeInS = 0;
      }
      break;
 8001206:	e047      	b.n	8001298 <MAIN_updateLogSetup+0xd0>
      else if (p_timeInS - g_MAIN_padUpPressedStartTimeInS < STP_PAD_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 8001208:	4b30      	ldr	r3, [pc, #192]	; (80012cc <MAIN_updateLogSetup+0x104>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b01      	cmp	r3, #1
 8001212:	d941      	bls.n	8001298 <MAIN_updateLogSetup+0xd0>
        g_MAIN_padUpPressedStartTimeInS = 0;
 8001214:	4b2d      	ldr	r3, [pc, #180]	; (80012cc <MAIN_updateLogSetup+0x104>)
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
      break;
 800121a:	e03d      	b.n	8001298 <MAIN_updateLogSetup+0xd0>

    case BLU_BUTTON_PAD_DOWN:
      if (g_MAIN_padDownPressedStartTimeInS == 0)
 800121c:	4b2c      	ldr	r3, [pc, #176]	; (80012d0 <MAIN_updateLogSetup+0x108>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d105      	bne.n	8001230 <MAIN_updateLogSetup+0x68>
      {
        g_MAIN_padDownPressedStartTimeInS = p_timeInS;
 8001224:	4a2a      	ldr	r2, [pc, #168]	; (80012d0 <MAIN_updateLogSetup+0x108>)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	6013      	str	r3, [r2, #0]

        LOG_decreaseLevel();
 800122a:	f009 fb71 	bl	800a910 <LOG_decreaseLevel>
      }
      else
      {
        g_MAIN_padDownPressedStartTimeInS = 0;
      }
      break;
 800122e:	e035      	b.n	800129c <MAIN_updateLogSetup+0xd4>
      else if (p_timeInS - g_MAIN_padDownPressedStartTimeInS < STP_PAD_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 8001230:	4b27      	ldr	r3, [pc, #156]	; (80012d0 <MAIN_updateLogSetup+0x108>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	683a      	ldr	r2, [r7, #0]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b01      	cmp	r3, #1
 800123a:	d92f      	bls.n	800129c <MAIN_updateLogSetup+0xd4>
        g_MAIN_padDownPressedStartTimeInS = 0;
 800123c:	4b24      	ldr	r3, [pc, #144]	; (80012d0 <MAIN_updateLogSetup+0x108>)
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
      break;
 8001242:	e02b      	b.n	800129c <MAIN_updateLogSetup+0xd4>

    case BLU_BUTTON_PAD_LEFT:
      if (g_MAIN_padLeftPressedStartTimeInS == 0)
 8001244:	4b23      	ldr	r3, [pc, #140]	; (80012d4 <MAIN_updateLogSetup+0x10c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d105      	bne.n	8001258 <MAIN_updateLogSetup+0x90>
      {
        g_MAIN_padLeftPressedStartTimeInS = p_timeInS;
 800124c:	4a21      	ldr	r2, [pc, #132]	; (80012d4 <MAIN_updateLogSetup+0x10c>)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	6013      	str	r3, [r2, #0]

        LOG_toggleOnOff();
 8001252:	f009 fb17 	bl	800a884 <LOG_toggleOnOff>
      }
      else
      {
        g_MAIN_padLeftPressedStartTimeInS = 0;
      }
      break;
 8001256:	e023      	b.n	80012a0 <MAIN_updateLogSetup+0xd8>
      else if (p_timeInS - g_MAIN_padLeftPressedStartTimeInS < STP_PAD_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 8001258:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <MAIN_updateLogSetup+0x10c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	2b01      	cmp	r3, #1
 8001262:	d91d      	bls.n	80012a0 <MAIN_updateLogSetup+0xd8>
        g_MAIN_padLeftPressedStartTimeInS = 0;
 8001264:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <MAIN_updateLogSetup+0x10c>)
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
      break;
 800126a:	e019      	b.n	80012a0 <MAIN_updateLogSetup+0xd8>

    case BLU_BUTTON_PAD_RIGHT:
      if (g_MAIN_padRightPressedStartTimeInS == 0)
 800126c:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <MAIN_updateLogSetup+0x110>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d105      	bne.n	8001280 <MAIN_updateLogSetup+0xb8>
      {
        g_MAIN_padRightPressedStartTimeInS = p_timeInS;
 8001274:	4a18      	ldr	r2, [pc, #96]	; (80012d8 <MAIN_updateLogSetup+0x110>)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	6013      	str	r3, [r2, #0]

        MAIN_togglePrintOutput();
 800127a:	f7ff ff53 	bl	8001124 <MAIN_togglePrintOutput>
      }
      else
      {
        g_MAIN_padRightPressedStartTimeInS = 0;
      }
      break;
 800127e:	e011      	b.n	80012a4 <MAIN_updateLogSetup+0xdc>
      else if (p_timeInS - g_MAIN_padRightPressedStartTimeInS < STP_PAD_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 8001280:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <MAIN_updateLogSetup+0x110>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b01      	cmp	r3, #1
 800128a:	d90b      	bls.n	80012a4 <MAIN_updateLogSetup+0xdc>
        g_MAIN_padRightPressedStartTimeInS = 0;
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <MAIN_updateLogSetup+0x110>)
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
      break;
 8001292:	e007      	b.n	80012a4 <MAIN_updateLogSetup+0xdc>

    default:
      ; /* Nothing to do */;
      break;
 8001294:	bf00      	nop
 8001296:	e006      	b.n	80012a6 <MAIN_updateLogSetup+0xde>
      break;
 8001298:	bf00      	nop
 800129a:	e004      	b.n	80012a6 <MAIN_updateLogSetup+0xde>
      break;
 800129c:	bf00      	nop
 800129e:	e002      	b.n	80012a6 <MAIN_updateLogSetup+0xde>
      break;
 80012a0:	bf00      	nop
 80012a2:	e000      	b.n	80012a6 <MAIN_updateLogSetup+0xde>
      break;
 80012a4:	bf00      	nop
  }

  if ((p_data->button != BLU_BUTTON_PAD_UP) && (p_data->button != BLU_BUTTON_PAD_DOWN))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	7c1b      	ldrb	r3, [r3, #16]
 80012aa:	2b05      	cmp	r3, #5
 80012ac:	d00a      	beq.n	80012c4 <MAIN_updateLogSetup+0xfc>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	7c1b      	ldrb	r3, [r3, #16]
 80012b2:	2b07      	cmp	r3, #7
 80012b4:	d006      	beq.n	80012c4 <MAIN_updateLogSetup+0xfc>
  {
    g_MAIN_padUpPressedStartTimeInS   = 0;
 80012b6:	4b05      	ldr	r3, [pc, #20]	; (80012cc <MAIN_updateLogSetup+0x104>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
    g_MAIN_padDownPressedStartTimeInS = 0;
 80012bc:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <MAIN_updateLogSetup+0x108>)
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */;
  }

  return;
 80012c2:	bf00      	nop
 80012c4:	bf00      	nop
}
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000208 	.word	0x20000208
 80012d0:	2000020c 	.word	0x2000020c
 80012d4:	20000210 	.word	0x20000210
 80012d8:	20000214 	.word	0x20000214

080012dc <MAIN_updateLedMode>:

static void MAIN_updateLedMode(T_DRV_MODE p_driveMode, uint32_t p_voltageInMv)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	6039      	str	r1, [r7, #0]
 80012e6:	71fb      	strb	r3, [r7, #7]
  /* Regarding LED mode, battery check is prioritary on user requests. */
  /* Ignore 0 value as we could get it at startup or while debugging.  */
  if ((p_voltageInMv != 0) && (p_voltageInMv < MAIN_MIN_BATTERY_LEVEL_IN_MV))
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d00d      	beq.n	800130a <MAIN_updateLedMode+0x2e>
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	f242 720f 	movw	r2, #9999	; 0x270f
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d808      	bhi.n	800130a <MAIN_updateLedMode+0x2e>
  {
    LOG_warning("Battery is getting low: %u mV", p_voltageInMv);
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	4911      	ldr	r1, [pc, #68]	; (8001340 <MAIN_updateLedMode+0x64>)
 80012fc:	2002      	movs	r0, #2
 80012fe:	f009 fb1f 	bl	800a940 <LOG_log>

    LED_setMode(LED_MODE_FORCED_OFF);
 8001302:	2000      	movs	r0, #0
 8001304:	f009 f9fc 	bl	800a700 <LED_setMode>
 8001308:	e016      	b.n	8001338 <MAIN_updateLedMode+0x5c>
  }
  else
  {
    switch (p_driveMode)
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	2b02      	cmp	r3, #2
 800130e:	d00e      	beq.n	800132e <MAIN_updateLedMode+0x52>
 8001310:	2b02      	cmp	r3, #2
 8001312:	dc10      	bgt.n	8001336 <MAIN_updateLedMode+0x5a>
 8001314:	2b00      	cmp	r3, #0
 8001316:	d002      	beq.n	800131e <MAIN_updateLedMode+0x42>
 8001318:	2b01      	cmp	r3, #1
 800131a:	d004      	beq.n	8001326 <MAIN_updateLedMode+0x4a>
        LED_setMode(LED_MODE_BLINK_FAST);
        break;

      default:
        ; /* Nothing to do */
        break;
 800131c:	e00b      	b.n	8001336 <MAIN_updateLedMode+0x5a>
        LED_setMode(LED_MODE_BLINK_SLOW);
 800131e:	2002      	movs	r0, #2
 8001320:	f009 f9ee 	bl	800a700 <LED_setMode>
        break;
 8001324:	e008      	b.n	8001338 <MAIN_updateLedMode+0x5c>
        LED_setMode(LED_MODE_BLINK_MEDIUM);
 8001326:	2003      	movs	r0, #3
 8001328:	f009 f9ea 	bl	800a700 <LED_setMode>
        break;
 800132c:	e004      	b.n	8001338 <MAIN_updateLedMode+0x5c>
        LED_setMode(LED_MODE_BLINK_FAST);
 800132e:	2004      	movs	r0, #4
 8001330:	f009 f9e6 	bl	800a700 <LED_setMode>
        break;
 8001334:	e000      	b.n	8001338 <MAIN_updateLedMode+0x5c>
        break;
 8001336:	bf00      	nop
    }
  }

  return;
 8001338:	bf00      	nop
}
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	0800e780 	.word	0x0800e780

08001344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b092      	sub	sp, #72	; 0x48
 8001348:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800134a:	f001 fb7f 	bl	8002a4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800134e:	f000 f9f5 	bl	800173c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001352:	f000 fdf7 	bl	8001f44 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001356:	f000 fad1 	bl	80018fc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800135a:	f000 fdc9 	bl	8001ef0 <MX_USART1_UART_Init>
  MX_UART4_Init();
 800135e:	f000 fd9d 	bl	8001e9c <MX_UART4_Init>
  MX_ADC1_Init();
 8001362:	f000 fa43 	bl	80017ec <MX_ADC1_Init>
  MX_TIM8_Init();
 8001366:	f000 fcd5 	bl	8001d14 <MX_TIM8_Init>
  MX_RTC_Init();
 800136a:	f000 fa7d 	bl	8001868 <MX_RTC_Init>
  MX_TIM7_Init();
 800136e:	f000 fc9b 	bl	8001ca8 <MX_TIM7_Init>
  MX_TIM2_Init();
 8001372:	f000 fb13 	bl	800199c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001376:	f000 fb65 	bl	8001a44 <MX_TIM3_Init>
  MX_TIM4_Init();
 800137a:	f000 fbb7 	bl	8001aec <MX_TIM4_Init>
  MX_TIM5_Init();
 800137e:	f000 fc09 	bl	8001b94 <MX_TIM5_Init>
  MX_TIM6_Init();
 8001382:	f000 fc5b 	bl	8001c3c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* Setup global variables */
  g_MAIN_padUpPressedStartTimeInS      = 0;
 8001386:	4bcb      	ldr	r3, [pc, #812]	; (80016b4 <main+0x370>)
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
  g_MAIN_padDownPressedStartTimeInS    = 0;
 800138c:	4bca      	ldr	r3, [pc, #808]	; (80016b8 <main+0x374>)
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
  g_MAIN_padLeftPressedStartTimeInS    = 0;
 8001392:	4bca      	ldr	r3, [pc, #808]	; (80016bc <main+0x378>)
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
  g_MAIN_padRightPressedStartTimeInS   = 0;
 8001398:	4bc9      	ldr	r3, [pc, #804]	; (80016c0 <main+0x37c>)
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
  g_MAIN_swResetPollinglastReadTimeInS = 0;
 800139e:	4bc9      	ldr	r3, [pc, #804]	; (80016c4 <main+0x380>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
  g_MAIN_batteryPollinglastReadTimeInS = 0;
 80013a4:	4bc8      	ldr	r3, [pc, #800]	; (80016c8 <main+0x384>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
  g_MAIN_printOutput                   = MAIN_PRINT_OUTPUT_TO_CONSOLE;
 80013aa:	4bc8      	ldr	r3, [pc, #800]	; (80016cc <main+0x388>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]

  /* Initialize commands string FIFO */
  SFO_init(&l_commandsFifo);
 80013b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b4:	4618      	mov	r0, r3
 80013b6:	f009 feb1 	bl	800b11c <SFO_init>

  /* Setup console */
  CON_init(&huart1);
 80013ba:	48c5      	ldr	r0, [pc, #788]	; (80016d0 <main+0x38c>)
 80013bc:	f007 ff16 	bl	80091ec <CON_init>

  /* Setup master connection */
  MAS_init(&huart4);
 80013c0:	48c4      	ldr	r0, [pc, #784]	; (80016d4 <main+0x390>)
 80013c2:	f009 fb4f 	bl	800aa64 <MAS_init>
//  {
//    HAL_Delay(1000);
//  }

  /* Setup and start using logs */
  LOG_init    (&hrtc, STP_DEFAULT_IS_LOG_ON);
 80013c6:	2101      	movs	r1, #1
 80013c8:	48c3      	ldr	r0, [pc, #780]	; (80016d8 <main+0x394>)
 80013ca:	f009 fa41 	bl	800a850 <LOG_init>
  LOG_setLevel(STP_DEFAULT_LOG_LEVEL       );
 80013ce:	2000      	movs	r0, #0
 80013d0:	f009 fa76 	bl	800a8c0 <LOG_setLevel>
  LOG_info    ("Starting RCFW"             );
 80013d4:	49c1      	ldr	r1, [pc, #772]	; (80016dc <main+0x398>)
 80013d6:	2001      	movs	r0, #1
 80013d8:	f009 fab2 	bl	800a940 <LOG_log>

  /* Display RCFW banner */
  MAIN_displayRcfwBanner();
 80013dc:	f7ff fe64 	bl	80010a8 <MAIN_displayRcfwBanner>

  /* Initialize Timer 6 */
  l_halReturnCode = HAL_TIM_Base_Start(&htim6);
 80013e0:	48bf      	ldr	r0, [pc, #764]	; (80016e0 <main+0x39c>)
 80013e2:	f004 fc9f 	bl	8005d24 <HAL_TIM_Base_Start>
 80013e6:	4603      	mov	r3, r0
 80013e8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

  if (l_halReturnCode != HAL_OK)
 80013ec:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d007      	beq.n	8001404 <main+0xc0>
  {
    LOG_error("HAL_TIM_Base_Start(&htim6) returned an error code: %d", l_halReturnCode);
 80013f4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80013f8:	461a      	mov	r2, r3
 80013fa:	49ba      	ldr	r1, [pc, #744]	; (80016e4 <main+0x3a0>)
 80013fc:	2003      	movs	r0, #3
 80013fe:	f009 fa9f 	bl	800a940 <LOG_log>
 8001402:	e003      	b.n	800140c <main+0xc8>
  }
  else
  {
    LOG_info("Started TIMER 6 (time measurement)");
 8001404:	49b8      	ldr	r1, [pc, #736]	; (80016e8 <main+0x3a4>)
 8001406:	2001      	movs	r0, #1
 8001408:	f009 fa9a 	bl	800a940 <LOG_log>
  }

  /* Initialize Timer 7 and delay function in utilities */
  UTI_init(&htim7);
 800140c:	48b7      	ldr	r0, [pc, #732]	; (80016ec <main+0x3a8>)
 800140e:	f009 ff85 	bl	800b31c <UTI_init>

  l_halReturnCode = HAL_TIM_Base_Start_IT(&htim7);
 8001412:	48b6      	ldr	r0, [pc, #728]	; (80016ec <main+0x3a8>)
 8001414:	f004 fd10 	bl	8005e38 <HAL_TIM_Base_Start_IT>
 8001418:	4603      	mov	r3, r0
 800141a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

  if (l_halReturnCode != HAL_OK)
 800141e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001422:	2b00      	cmp	r3, #0
 8001424:	d007      	beq.n	8001436 <main+0xf2>
  {
    LOG_error("HAL_TIM_Base_Start_IT(&htim7) returned an error code: %d", l_halReturnCode);
 8001426:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800142a:	461a      	mov	r2, r3
 800142c:	49b0      	ldr	r1, [pc, #704]	; (80016f0 <main+0x3ac>)
 800142e:	2003      	movs	r0, #3
 8001430:	f009 fa86 	bl	800a940 <LOG_log>
 8001434:	e003      	b.n	800143e <main+0xfa>
  }
  else
  {
    LOG_info("Started TIMER 7 (utilities/delay)");
 8001436:	49af      	ldr	r1, [pc, #700]	; (80016f4 <main+0x3b0>)
 8001438:	2001      	movs	r0, #1
 800143a:	f009 fa81 	bl	800a940 <LOG_log>
  }

  /* Initialize Timer 1 & green LED */
  LED_setMode(LED_MODE_BLINK_FAST);
 800143e:	2004      	movs	r0, #4
 8001440:	f009 f95e 	bl	800a700 <LED_setMode>

  l_halReturnCode = HAL_TIM_Base_Start_IT(&htim1);
 8001444:	48ac      	ldr	r0, [pc, #688]	; (80016f8 <main+0x3b4>)
 8001446:	f004 fcf7 	bl	8005e38 <HAL_TIM_Base_Start_IT>
 800144a:	4603      	mov	r3, r0
 800144c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

  if (l_halReturnCode != HAL_OK)
 8001450:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001454:	2b00      	cmp	r3, #0
 8001456:	d007      	beq.n	8001468 <main+0x124>
  {
    LOG_error("HAL_TIM_Base_Start_IT(&htim1) returned an error code: %d", l_halReturnCode);
 8001458:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800145c:	461a      	mov	r2, r3
 800145e:	49a7      	ldr	r1, [pc, #668]	; (80016fc <main+0x3b8>)
 8001460:	2003      	movs	r0, #3
 8001462:	f009 fa6d 	bl	800a940 <LOG_log>
 8001466:	e003      	b.n	8001470 <main+0x12c>
  }
  else
  {
    LOG_info("Started TIMER 1 (green LED)");
 8001468:	49a5      	ldr	r1, [pc, #660]	; (8001700 <main+0x3bc>)
 800146a:	2001      	movs	r0, #1
 800146c:	f009 fa68 	bl	800a940 <LOG_log>
  }

  /* Initialize Timers 2, 3, 4 & 5 */
  l_halReturnCode  = HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8001470:	213c      	movs	r1, #60	; 0x3c
 8001472:	48a4      	ldr	r0, [pc, #656]	; (8001704 <main+0x3c0>)
 8001474:	f005 f918 	bl	80066a8 <HAL_TIM_Encoder_Start_IT>
 8001478:	4603      	mov	r3, r0
 800147a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 800147e:	213c      	movs	r1, #60	; 0x3c
 8001480:	48a1      	ldr	r0, [pc, #644]	; (8001708 <main+0x3c4>)
 8001482:	f005 f911 	bl	80066a8 <HAL_TIM_Encoder_Start_IT>
 8001486:	4603      	mov	r3, r0
 8001488:	461a      	mov	r2, r3
 800148a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800148e:	4313      	orrs	r3, r2
 8001490:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8001494:	213c      	movs	r1, #60	; 0x3c
 8001496:	489d      	ldr	r0, [pc, #628]	; (800170c <main+0x3c8>)
 8001498:	f005 f906 	bl	80066a8 <HAL_TIM_Encoder_Start_IT>
 800149c:	4603      	mov	r3, r0
 800149e:	461a      	mov	r2, r3
 80014a0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80014a4:	4313      	orrs	r3, r2
 80014a6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 80014aa:	213c      	movs	r1, #60	; 0x3c
 80014ac:	4898      	ldr	r0, [pc, #608]	; (8001710 <main+0x3cc>)
 80014ae:	f005 f8fb 	bl	80066a8 <HAL_TIM_Encoder_Start_IT>
 80014b2:	4603      	mov	r3, r0
 80014b4:	461a      	mov	r2, r3
 80014b6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80014ba:	4313      	orrs	r3, r2
 80014bc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

  if (l_halReturnCode != HAL_OK)
 80014c0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d007      	beq.n	80014d8 <main+0x194>
  {
    LOG_error("HAL_TIM_Encoder_Start_IT(&htimX) returned error code(s): %d", l_halReturnCode);
 80014c8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80014cc:	461a      	mov	r2, r3
 80014ce:	4991      	ldr	r1, [pc, #580]	; (8001714 <main+0x3d0>)
 80014d0:	2003      	movs	r0, #3
 80014d2:	f009 fa35 	bl	800a940 <LOG_log>
 80014d6:	e003      	b.n	80014e0 <main+0x19c>
  }
  else
  {
    LOG_info("Started TIMER 2, 3, 4, 5 (encoders)");
 80014d8:	498f      	ldr	r1, [pc, #572]	; (8001718 <main+0x3d4>)
 80014da:	2001      	movs	r0, #1
 80014dc:	f009 fa30 	bl	800a940 <LOG_log>
  }

  /* Initialize Timer 8 */
  l_halReturnCode = HAL_TIM_Base_Start(&htim8);
 80014e0:	488e      	ldr	r0, [pc, #568]	; (800171c <main+0x3d8>)
 80014e2:	f004 fc1f 	bl	8005d24 <HAL_TIM_Base_Start>
 80014e6:	4603      	mov	r3, r0
 80014e8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

  if (l_halReturnCode != HAL_OK)
 80014ec:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d007      	beq.n	8001504 <main+0x1c0>
  {
    LOG_error("HAL_TIM_Base_Start(&htim8) returned an error code: %d", l_halReturnCode);
 80014f4:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80014f8:	461a      	mov	r2, r3
 80014fa:	4989      	ldr	r1, [pc, #548]	; (8001720 <main+0x3dc>)
 80014fc:	2003      	movs	r0, #3
 80014fe:	f009 fa1f 	bl	800a940 <LOG_log>
 8001502:	e003      	b.n	800150c <main+0x1c8>
  }
  else
  {
    LOG_info("Started TIMER 8 (PWM channels)");
 8001504:	4987      	ldr	r1, [pc, #540]	; (8001724 <main+0x3e0>)
 8001506:	2001      	movs	r0, #1
 8001508:	f009 fa1a 	bl	800a940 <LOG_log>
  }

  /* Initialize battery monitor */
  BAT_init(&hadc1);
 800150c:	4886      	ldr	r0, [pc, #536]	; (8001728 <main+0x3e4>)
 800150e:	f007 fbdf 	bl	8008cd0 <BAT_init>

  /* Initialize PWM channels */
  l_halReturnCode  = HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001512:	2100      	movs	r1, #0
 8001514:	4881      	ldr	r0, [pc, #516]	; (800171c <main+0x3d8>)
 8001516:	f004 fdfd 	bl	8006114 <HAL_TIM_PWM_Start>
 800151a:	4603      	mov	r3, r0
 800151c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  l_halReturnCode |= HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001520:	2104      	movs	r1, #4
 8001522:	487e      	ldr	r0, [pc, #504]	; (800171c <main+0x3d8>)
 8001524:	f004 fdf6 	bl	8006114 <HAL_TIM_PWM_Start>
 8001528:	4603      	mov	r3, r0
 800152a:	461a      	mov	r2, r3
 800152c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001530:	4313      	orrs	r3, r2
 8001532:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  l_halReturnCode |= HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001536:	2108      	movs	r1, #8
 8001538:	4878      	ldr	r0, [pc, #480]	; (800171c <main+0x3d8>)
 800153a:	f004 fdeb 	bl	8006114 <HAL_TIM_PWM_Start>
 800153e:	4603      	mov	r3, r0
 8001540:	461a      	mov	r2, r3
 8001542:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001546:	4313      	orrs	r3, r2
 8001548:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  l_halReturnCode |= HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 800154c:	210c      	movs	r1, #12
 800154e:	4873      	ldr	r0, [pc, #460]	; (800171c <main+0x3d8>)
 8001550:	f004 fde0 	bl	8006114 <HAL_TIM_PWM_Start>
 8001554:	4603      	mov	r3, r0
 8001556:	461a      	mov	r2, r3
 8001558:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800155c:	4313      	orrs	r3, r2
 800155e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

  if (l_halReturnCode != HAL_OK)
 8001562:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001566:	2b00      	cmp	r3, #0
 8001568:	d007      	beq.n	800157a <main+0x236>
  {
    LOG_error("HAL_TIM_PWM_Start(&htim8) returned error code(s): %d", l_halReturnCode);
 800156a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800156e:	461a      	mov	r2, r3
 8001570:	496e      	ldr	r1, [pc, #440]	; (800172c <main+0x3e8>)
 8001572:	2003      	movs	r0, #3
 8001574:	f009 f9e4 	bl	800a940 <LOG_log>
 8001578:	e003      	b.n	8001582 <main+0x23e>
  }
  else
  {
    LOG_info("Started PWM channels");
 800157a:	496d      	ldr	r1, [pc, #436]	; (8001730 <main+0x3ec>)
 800157c:	2001      	movs	r0, #1
 800157e:	f009 f9df 	bl	800a940 <LOG_log>
  }

  /* Initialize bluetooth control and data */
  BLU_init    ();
 8001582:	f007 fce3 	bl	8008f4c <BLU_init>
  BLU_initData(&l_bluetoothData);
 8001586:	f107 0310 	add.w	r3, r7, #16
 800158a:	4618      	mov	r0, r3
 800158c:	f007 fcee 	bl	8008f6c <BLU_initData>

  /* Initialize driving module */
  DRV_init(&htim8, &htim4, &htim5, &htim2, &htim3);
 8001590:	4b5d      	ldr	r3, [pc, #372]	; (8001708 <main+0x3c4>)
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	4b5b      	ldr	r3, [pc, #364]	; (8001704 <main+0x3c0>)
 8001596:	4a5e      	ldr	r2, [pc, #376]	; (8001710 <main+0x3cc>)
 8001598:	495c      	ldr	r1, [pc, #368]	; (800170c <main+0x3c8>)
 800159a:	4860      	ldr	r0, [pc, #384]	; (800171c <main+0x3d8>)
 800159c:	f007 feb6 	bl	800930c <DRV_init>

  DRV_logInfo();
 80015a0:	f008 fc72 	bl	8009e88 <DRV_logInfo>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  /* Initialize time measurement for master board control */
  l_lastTimeInMs = __HAL_TIM_GET_COUNTER(&htim6);
 80015a4:	4b4e      	ldr	r3, [pc, #312]	; (80016e0 <main+0x39c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015aa:	87fb      	strh	r3, [r7, #62]	; 0x3e

  while (1)
  {
    l_halReturnCode = HAL_RTC_GetTime(&hrtc, &l_rtcTime, RTC_FORMAT_BCD);
 80015ac:	f107 030c 	add.w	r3, r7, #12
 80015b0:	2201      	movs	r2, #1
 80015b2:	4619      	mov	r1, r3
 80015b4:	4848      	ldr	r0, [pc, #288]	; (80016d8 <main+0x394>)
 80015b6:	f003 fddb 	bl	8005170 <HAL_RTC_GetTime>
 80015ba:	4603      	mov	r3, r0
 80015bc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

    if (l_halReturnCode != HAL_OK)
 80015c0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d006      	beq.n	80015d6 <main+0x292>
    {
      LOG_error("HAL_RTC_GetTime() returned an error code: %d", l_halReturnCode);
 80015c8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80015cc:	461a      	mov	r2, r3
 80015ce:	4959      	ldr	r1, [pc, #356]	; (8001734 <main+0x3f0>)
 80015d0:	2003      	movs	r0, #3
 80015d2:	f009 f9b5 	bl	800a940 <LOG_log>
    else
    {
      ; /* Nothing to to */
    }

    l_halReturnCode = HAL_RTC_GetDate(&hrtc, &l_rtcDate, RTC_FORMAT_BCD);
 80015d6:	f107 0308 	add.w	r3, r7, #8
 80015da:	2201      	movs	r2, #1
 80015dc:	4619      	mov	r1, r3
 80015de:	483e      	ldr	r0, [pc, #248]	; (80016d8 <main+0x394>)
 80015e0:	f003 ffca 	bl	8005578 <HAL_RTC_GetDate>
 80015e4:	4603      	mov	r3, r0
 80015e6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

    if (l_halReturnCode != HAL_OK)
 80015ea:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d006      	beq.n	8001600 <main+0x2bc>
    {
      LOG_error("HAL_RTC_GetDate() returned an error code: %d", l_halReturnCode);
 80015f2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80015f6:	461a      	mov	r2, r3
 80015f8:	494f      	ldr	r1, [pc, #316]	; (8001738 <main+0x3f4>)
 80015fa:	2003      	movs	r0, #3
 80015fc:	f009 f9a0 	bl	800a940 <LOG_log>
    else
    {
      ; /* Nothing to to */
    }

    l_currentTimeInS = UTI_turnRtcTimeToSeconds(&l_rtcTime);
 8001600:	f107 030c 	add.w	r3, r7, #12
 8001604:	4618      	mov	r0, r3
 8001606:	f009 fede 	bl	800b3c6 <UTI_turnRtcTimeToSeconds>
 800160a:	63b8      	str	r0, [r7, #56]	; 0x38

    if (l_currentTimeInS - g_MAIN_swResetPollinglastReadTimeInS >= STP_SW_RESET_POLLING_PERIOD_IN_S)
 800160c:	4b2d      	ldr	r3, [pc, #180]	; (80016c4 <main+0x380>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001612:	429a      	cmp	r2, r3
 8001614:	d004      	beq.n	8001620 <main+0x2dc>
    {
      MAIN_updateSwReset();
 8001616:	f7ff fda3 	bl	8001160 <MAIN_updateSwReset>

      g_MAIN_swResetPollinglastReadTimeInS = l_currentTimeInS;
 800161a:	4a2a      	ldr	r2, [pc, #168]	; (80016c4 <main+0x380>)
 800161c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800161e:	6013      	str	r3, [r2, #0]
    else
    {
      ; /* Nothing to do */
    }

    if (l_currentTimeInS - g_MAIN_batteryPollinglastReadTimeInS >= STP_BATTERY_POLLING_PERIOD_IN_S)
 8001620:	4b29      	ldr	r3, [pc, #164]	; (80016c8 <main+0x384>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b09      	cmp	r3, #9
 800162a:	d906      	bls.n	800163a <main+0x2f6>
    {
      BAT_update(&l_voltageInMv);
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	4618      	mov	r0, r3
 8001630:	f007 fb62 	bl	8008cf8 <BAT_update>

      g_MAIN_batteryPollinglastReadTimeInS = l_currentTimeInS;
 8001634:	4a24      	ldr	r2, [pc, #144]	; (80016c8 <main+0x384>)
 8001636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001638:	6013      	str	r3, [r2, #0]
    else
    {
      ; /* Nothing to do */
    }

    BLU_receiveData        (&l_bluetoothData);
 800163a:	f107 0310 	add.w	r3, r7, #16
 800163e:	4618      	mov	r0, r3
 8001640:	f007 fcac 	bl	8008f9c <BLU_receiveData>
    DRV_updateFromBluetooth(&l_bluetoothData);
 8001644:	f107 0310 	add.w	r3, r7, #16
 8001648:	4618      	mov	r0, r3
 800164a:	f007 ff9b 	bl	8009584 <DRV_updateFromBluetooth>

    l_driveMode = DRV_getMode();
 800164e:	f008 fc11 	bl	8009e74 <DRV_getMode>
 8001652:	4603      	mov	r3, r0
 8001654:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    MAIN_updateLedMode (l_driveMode     , l_voltageInMv   );
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800165e:	4611      	mov	r1, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff fe3b 	bl	80012dc <MAIN_updateLedMode>
    MAIN_updateLogSetup(&l_bluetoothData, l_currentTimeInS);
 8001666:	f107 0310 	add.w	r3, r7, #16
 800166a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fdab 	bl	80011c8 <MAIN_updateLogSetup>

    UTI_delayUs(MAIN_LOOP_DELAY_IN_MS);
 8001672:	f242 7010 	movw	r0, #10000	; 0x2710
 8001676:	f009 fe65 	bl	800b344 <UTI_delayUs>

    CON_updateFifo(&l_commandsFifo);
 800167a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167e:	4618      	mov	r0, r3
 8001680:	f007 fe0c 	bl	800929c <CON_updateFifo>
    MAS_updateFifo(&l_commandsFifo);
 8001684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001688:	4618      	mov	r0, r3
 800168a:	f009 fa43 	bl	800ab14 <MAS_updateFifo>

    l_currentTimeInMs = __HAL_TIM_GET_COUNTER(&htim6);
 800168e:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <main+0x39c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	86bb      	strh	r3, [r7, #52]	; 0x34
    l_deltaTimeInMs   = l_lastTimeInMs - l_currentTimeInMs;
 8001696:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001698:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	867b      	strh	r3, [r7, #50]	; 0x32
    l_lastTimeInMs    = l_currentTimeInMs;
 800169e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80016a0:	87fb      	strh	r3, [r7, #62]	; 0x3e

    DRV_updateFromMaster(&l_commandsFifo, l_deltaTimeInMs);
 80016a2:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80016a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a8:	4611      	mov	r1, r2
 80016aa:	4618      	mov	r0, r3
 80016ac:	f008 f8aa 	bl	8009804 <DRV_updateFromMaster>
    l_halReturnCode = HAL_RTC_GetTime(&hrtc, &l_rtcTime, RTC_FORMAT_BCD);
 80016b0:	e77c      	b.n	80015ac <main+0x268>
 80016b2:	bf00      	nop
 80016b4:	20000208 	.word	0x20000208
 80016b8:	2000020c 	.word	0x2000020c
 80016bc:	20000210 	.word	0x20000210
 80016c0:	20000214 	.word	0x20000214
 80016c4:	20000218 	.word	0x20000218
 80016c8:	2000021c 	.word	0x2000021c
 80016cc:	200009c8 	.word	0x200009c8
 80016d0:	200007d8 	.word	0x200007d8
 80016d4:	200009cc 	.word	0x200009cc
 80016d8:	2000084c 	.word	0x2000084c
 80016dc:	0800e7a0 	.word	0x0800e7a0
 80016e0:	20000860 	.word	0x20000860
 80016e4:	0800e7b0 	.word	0x0800e7b0
 80016e8:	0800e7e8 	.word	0x0800e7e8
 80016ec:	20000af4 	.word	0x20000af4
 80016f0:	0800e80c 	.word	0x0800e80c
 80016f4:	0800e848 	.word	0x0800e848
 80016f8:	20000914 	.word	0x20000914
 80016fc:	0800e86c 	.word	0x0800e86c
 8001700:	0800e8a8 	.word	0x0800e8a8
 8001704:	20000a40 	.word	0x20000a40
 8001708:	200006f4 	.word	0x200006f4
 800170c:	2000058c 	.word	0x2000058c
 8001710:	20000640 	.word	0x20000640
 8001714:	0800e8c4 	.word	0x0800e8c4
 8001718:	0800e900 	.word	0x0800e900
 800171c:	200004d8 	.word	0x200004d8
 8001720:	0800e924 	.word	0x0800e924
 8001724:	0800e95c 	.word	0x0800e95c
 8001728:	200007a8 	.word	0x200007a8
 800172c:	0800e97c 	.word	0x0800e97c
 8001730:	0800e9b4 	.word	0x0800e9b4
 8001734:	0800e9cc 	.word	0x0800e9cc
 8001738:	0800e9fc 	.word	0x0800e9fc

0800173c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b096      	sub	sp, #88	; 0x58
 8001740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001742:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001746:	2228      	movs	r2, #40	; 0x28
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f009 ff0c 	bl	800b568 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001750:	f107 031c 	add.w	r3, r7, #28
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
 800176c:	611a      	str	r2, [r3, #16]
 800176e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001770:	230a      	movs	r3, #10
 8001772:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001774:	2301      	movs	r3, #1
 8001776:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001778:	2310      	movs	r3, #16
 800177a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800177c:	2301      	movs	r3, #1
 800177e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001780:	2300      	movs	r3, #0
 8001782:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001784:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001788:	4618      	mov	r0, r3
 800178a:	f002 fb75 	bl	8003e78 <HAL_RCC_OscConfig>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001794:	f000 fcd6 	bl	8002144 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001798:	230f      	movs	r3, #15
 800179a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800179c:	2300      	movs	r3, #0
 800179e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a0:	2300      	movs	r3, #0
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017a8:	2300      	movs	r3, #0
 80017aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017ac:	f107 031c 	add.w	r3, r7, #28
 80017b0:	2100      	movs	r1, #0
 80017b2:	4618      	mov	r0, r3
 80017b4:	f002 fed0 	bl	8004558 <HAL_RCC_ClockConfig>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80017be:	f000 fcc1 	bl	8002144 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80017c2:	2303      	movs	r3, #3
 80017c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80017c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017ca:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	4618      	mov	r0, r3
 80017d4:	f003 f900 	bl	80049d8 <HAL_RCCEx_PeriphCLKConfig>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80017de:	f000 fcb1 	bl	8002144 <Error_Handler>
  }
}
 80017e2:	bf00      	nop
 80017e4:	3758      	adds	r7, #88	; 0x58
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80017fc:	4b18      	ldr	r3, [pc, #96]	; (8001860 <MX_ADC1_Init+0x74>)
 80017fe:	4a19      	ldr	r2, [pc, #100]	; (8001864 <MX_ADC1_Init+0x78>)
 8001800:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001802:	4b17      	ldr	r3, [pc, #92]	; (8001860 <MX_ADC1_Init+0x74>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001808:	4b15      	ldr	r3, [pc, #84]	; (8001860 <MX_ADC1_Init+0x74>)
 800180a:	2200      	movs	r2, #0
 800180c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800180e:	4b14      	ldr	r3, [pc, #80]	; (8001860 <MX_ADC1_Init+0x74>)
 8001810:	2200      	movs	r2, #0
 8001812:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <MX_ADC1_Init+0x74>)
 8001816:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800181a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800181c:	4b10      	ldr	r3, [pc, #64]	; (8001860 <MX_ADC1_Init+0x74>)
 800181e:	2200      	movs	r2, #0
 8001820:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001822:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <MX_ADC1_Init+0x74>)
 8001824:	2201      	movs	r2, #1
 8001826:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001828:	480d      	ldr	r0, [pc, #52]	; (8001860 <MX_ADC1_Init+0x74>)
 800182a:	f001 f995 	bl	8002b58 <HAL_ADC_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001834:	f000 fc86 	bl	8002144 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001838:	2305      	movs	r3, #5
 800183a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800183c:	2301      	movs	r3, #1
 800183e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001844:	1d3b      	adds	r3, r7, #4
 8001846:	4619      	mov	r1, r3
 8001848:	4805      	ldr	r0, [pc, #20]	; (8001860 <MX_ADC1_Init+0x74>)
 800184a:	f001 fb4f 	bl	8002eec <HAL_ADC_ConfigChannel>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001854:	f000 fc76 	bl	8002144 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001858:	bf00      	nop
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	200007a8 	.word	0x200007a8
 8001864:	40012400 	.word	0x40012400

08001868 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	2100      	movs	r1, #0
 8001872:	460a      	mov	r2, r1
 8001874:	801a      	strh	r2, [r3, #0]
 8001876:	460a      	mov	r2, r1
 8001878:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800187a:	2300      	movs	r3, #0
 800187c:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800187e:	4b1d      	ldr	r3, [pc, #116]	; (80018f4 <MX_RTC_Init+0x8c>)
 8001880:	4a1d      	ldr	r2, [pc, #116]	; (80018f8 <MX_RTC_Init+0x90>)
 8001882:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001884:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <MX_RTC_Init+0x8c>)
 8001886:	f04f 32ff 	mov.w	r2, #4294967295
 800188a:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 800188c:	4b19      	ldr	r3, [pc, #100]	; (80018f4 <MX_RTC_Init+0x8c>)
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001892:	4818      	ldr	r0, [pc, #96]	; (80018f4 <MX_RTC_Init+0x8c>)
 8001894:	f003 fabc 	bl	8004e10 <HAL_RTC_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 800189e:	f000 fc51 	bl	8002144 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	2201      	movs	r2, #1
 80018b2:	4619      	mov	r1, r3
 80018b4:	480f      	ldr	r0, [pc, #60]	; (80018f4 <MX_RTC_Init+0x8c>)
 80018b6:	f003 fb75 	bl	8004fa4 <HAL_RTC_SetTime>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 80018c0:	f000 fc40 	bl	8002144 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80018c4:	2301      	movs	r3, #1
 80018c6:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80018c8:	2301      	movs	r3, #1
 80018ca:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 80018cc:	2301      	movs	r3, #1
 80018ce:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80018d4:	463b      	mov	r3, r7
 80018d6:	2201      	movs	r2, #1
 80018d8:	4619      	mov	r1, r3
 80018da:	4806      	ldr	r0, [pc, #24]	; (80018f4 <MX_RTC_Init+0x8c>)
 80018dc:	f003 fd2e 	bl	800533c <HAL_RTC_SetDate>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80018e6:	f000 fc2d 	bl	8002144 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	2000084c 	.word	0x2000084c
 80018f8:	40002800 	.word	0x40002800

080018fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001902:	f107 0308 	add.w	r3, r7, #8
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001910:	463b      	mov	r3, r7
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001918:	4b1e      	ldr	r3, [pc, #120]	; (8001994 <MX_TIM1_Init+0x98>)
 800191a:	4a1f      	ldr	r2, [pc, #124]	; (8001998 <MX_TIM1_Init+0x9c>)
 800191c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 800191e:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <MX_TIM1_Init+0x98>)
 8001920:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001924:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001926:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <MX_TIM1_Init+0x98>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 800192c:	4b19      	ldr	r3, [pc, #100]	; (8001994 <MX_TIM1_Init+0x98>)
 800192e:	22f9      	movs	r2, #249	; 0xf9
 8001930:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001932:	4b18      	ldr	r3, [pc, #96]	; (8001994 <MX_TIM1_Init+0x98>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001938:	4b16      	ldr	r3, [pc, #88]	; (8001994 <MX_TIM1_Init+0x98>)
 800193a:	2200      	movs	r2, #0
 800193c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800193e:	4b15      	ldr	r3, [pc, #84]	; (8001994 <MX_TIM1_Init+0x98>)
 8001940:	2280      	movs	r2, #128	; 0x80
 8001942:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001944:	4813      	ldr	r0, [pc, #76]	; (8001994 <MX_TIM1_Init+0x98>)
 8001946:	f004 f91b 	bl	8005b80 <HAL_TIM_Base_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001950:	f000 fbf8 	bl	8002144 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001958:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800195a:	f107 0308 	add.w	r3, r7, #8
 800195e:	4619      	mov	r1, r3
 8001960:	480c      	ldr	r0, [pc, #48]	; (8001994 <MX_TIM1_Init+0x98>)
 8001962:	f005 fa45 	bl	8006df0 <HAL_TIM_ConfigClockSource>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800196c:	f000 fbea 	bl	8002144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001970:	2300      	movs	r3, #0
 8001972:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001974:	2300      	movs	r3, #0
 8001976:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001978:	463b      	mov	r3, r7
 800197a:	4619      	mov	r1, r3
 800197c:	4805      	ldr	r0, [pc, #20]	; (8001994 <MX_TIM1_Init+0x98>)
 800197e:	f006 f993 	bl	8007ca8 <HAL_TIMEx_MasterConfigSynchronization>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001988:	f000 fbdc 	bl	8002144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800198c:	bf00      	nop
 800198e:	3718      	adds	r7, #24
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000914 	.word	0x20000914
 8001998:	40012c00 	.word	0x40012c00

0800199c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08c      	sub	sp, #48	; 0x30
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019a2:	f107 030c 	add.w	r3, r7, #12
 80019a6:	2224      	movs	r2, #36	; 0x24
 80019a8:	2100      	movs	r1, #0
 80019aa:	4618      	mov	r0, r3
 80019ac:	f009 fddc 	bl	800b568 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019b8:	4b21      	ldr	r3, [pc, #132]	; (8001a40 <MX_TIM2_Init+0xa4>)
 80019ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019c0:	4b1f      	ldr	r3, [pc, #124]	; (8001a40 <MX_TIM2_Init+0xa4>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c6:	4b1e      	ldr	r3, [pc, #120]	; (8001a40 <MX_TIM2_Init+0xa4>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80019cc:	4b1c      	ldr	r3, [pc, #112]	; (8001a40 <MX_TIM2_Init+0xa4>)
 80019ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d4:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <MX_TIM2_Init+0xa4>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019da:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <MX_TIM2_Init+0xa4>)
 80019dc:	2280      	movs	r2, #128	; 0x80
 80019de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019e0:	2303      	movs	r3, #3
 80019e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019e4:	2300      	movs	r3, #0
 80019e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019e8:	2301      	movs	r3, #1
 80019ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019ec:	2300      	movs	r3, #0
 80019ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80019f0:	230a      	movs	r3, #10
 80019f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019f4:	2300      	movs	r3, #0
 80019f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019f8:	2301      	movs	r3, #1
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019fc:	2300      	movs	r3, #0
 80019fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001a04:	f107 030c 	add.w	r3, r7, #12
 8001a08:	4619      	mov	r1, r3
 8001a0a:	480d      	ldr	r0, [pc, #52]	; (8001a40 <MX_TIM2_Init+0xa4>)
 8001a0c:	f004 fcaa 	bl	8006364 <HAL_TIM_Encoder_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001a16:	f000 fb95 	bl	8002144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	4619      	mov	r1, r3
 8001a26:	4806      	ldr	r0, [pc, #24]	; (8001a40 <MX_TIM2_Init+0xa4>)
 8001a28:	f006 f93e 	bl	8007ca8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001a32:	f000 fb87 	bl	8002144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a36:	bf00      	nop
 8001a38:	3730      	adds	r7, #48	; 0x30
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000a40 	.word	0x20000a40

08001a44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08c      	sub	sp, #48	; 0x30
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a4a:	f107 030c 	add.w	r3, r7, #12
 8001a4e:	2224      	movs	r2, #36	; 0x24
 8001a50:	2100      	movs	r1, #0
 8001a52:	4618      	mov	r0, r3
 8001a54:	f009 fd88 	bl	800b568 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a60:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <MX_TIM3_Init+0xa0>)
 8001a62:	4a21      	ldr	r2, [pc, #132]	; (8001ae8 <MX_TIM3_Init+0xa4>)
 8001a64:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a66:	4b1f      	ldr	r3, [pc, #124]	; (8001ae4 <MX_TIM3_Init+0xa0>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <MX_TIM3_Init+0xa0>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a72:	4b1c      	ldr	r3, [pc, #112]	; (8001ae4 <MX_TIM3_Init+0xa0>)
 8001a74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a78:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <MX_TIM3_Init+0xa0>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a80:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <MX_TIM3_Init+0xa0>)
 8001a82:	2280      	movs	r2, #128	; 0x80
 8001a84:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a86:	2303      	movs	r3, #3
 8001a88:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001a96:	230a      	movs	r3, #10
 8001a98:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001aaa:	f107 030c 	add.w	r3, r7, #12
 8001aae:	4619      	mov	r1, r3
 8001ab0:	480c      	ldr	r0, [pc, #48]	; (8001ae4 <MX_TIM3_Init+0xa0>)
 8001ab2:	f004 fc57 	bl	8006364 <HAL_TIM_Encoder_Init>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001abc:	f000 fb42 	bl	8002144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	4619      	mov	r1, r3
 8001acc:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <MX_TIM3_Init+0xa0>)
 8001ace:	f006 f8eb 	bl	8007ca8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001ad8:	f000 fb34 	bl	8002144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001adc:	bf00      	nop
 8001ade:	3730      	adds	r7, #48	; 0x30
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	200006f4 	.word	0x200006f4
 8001ae8:	40000400 	.word	0x40000400

08001aec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08c      	sub	sp, #48	; 0x30
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001af2:	f107 030c 	add.w	r3, r7, #12
 8001af6:	2224      	movs	r2, #36	; 0x24
 8001af8:	2100      	movs	r1, #0
 8001afa:	4618      	mov	r0, r3
 8001afc:	f009 fd34 	bl	800b568 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b00:	1d3b      	adds	r3, r7, #4
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b08:	4b20      	ldr	r3, [pc, #128]	; (8001b8c <MX_TIM4_Init+0xa0>)
 8001b0a:	4a21      	ldr	r2, [pc, #132]	; (8001b90 <MX_TIM4_Init+0xa4>)
 8001b0c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001b0e:	4b1f      	ldr	r3, [pc, #124]	; (8001b8c <MX_TIM4_Init+0xa0>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b14:	4b1d      	ldr	r3, [pc, #116]	; (8001b8c <MX_TIM4_Init+0xa0>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001b1a:	4b1c      	ldr	r3, [pc, #112]	; (8001b8c <MX_TIM4_Init+0xa0>)
 8001b1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b20:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b22:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <MX_TIM4_Init+0xa0>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b28:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <MX_TIM4_Init+0xa0>)
 8001b2a:	2280      	movs	r2, #128	; 0x80
 8001b2c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b36:	2301      	movs	r3, #1
 8001b38:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001b3e:	230a      	movs	r3, #10
 8001b40:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b42:	2300      	movs	r3, #0
 8001b44:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b46:	2301      	movs	r3, #1
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001b52:	f107 030c 	add.w	r3, r7, #12
 8001b56:	4619      	mov	r1, r3
 8001b58:	480c      	ldr	r0, [pc, #48]	; (8001b8c <MX_TIM4_Init+0xa0>)
 8001b5a:	f004 fc03 	bl	8006364 <HAL_TIM_Encoder_Init>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001b64:	f000 faee 	bl	8002144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b70:	1d3b      	adds	r3, r7, #4
 8001b72:	4619      	mov	r1, r3
 8001b74:	4805      	ldr	r0, [pc, #20]	; (8001b8c <MX_TIM4_Init+0xa0>)
 8001b76:	f006 f897 	bl	8007ca8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001b80:	f000 fae0 	bl	8002144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b84:	bf00      	nop
 8001b86:	3730      	adds	r7, #48	; 0x30
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	2000058c 	.word	0x2000058c
 8001b90:	40000800 	.word	0x40000800

08001b94 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08c      	sub	sp, #48	; 0x30
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b9a:	f107 030c 	add.w	r3, r7, #12
 8001b9e:	2224      	movs	r2, #36	; 0x24
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f009 fce0 	bl	800b568 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001bb0:	4b20      	ldr	r3, [pc, #128]	; (8001c34 <MX_TIM5_Init+0xa0>)
 8001bb2:	4a21      	ldr	r2, [pc, #132]	; (8001c38 <MX_TIM5_Init+0xa4>)
 8001bb4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001bb6:	4b1f      	ldr	r3, [pc, #124]	; (8001c34 <MX_TIM5_Init+0xa0>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bbc:	4b1d      	ldr	r3, [pc, #116]	; (8001c34 <MX_TIM5_Init+0xa0>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001bc2:	4b1c      	ldr	r3, [pc, #112]	; (8001c34 <MX_TIM5_Init+0xa0>)
 8001bc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bc8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bca:	4b1a      	ldr	r3, [pc, #104]	; (8001c34 <MX_TIM5_Init+0xa0>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bd0:	4b18      	ldr	r3, [pc, #96]	; (8001c34 <MX_TIM5_Init+0xa0>)
 8001bd2:	2280      	movs	r2, #128	; 0x80
 8001bd4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bde:	2301      	movs	r3, #1
 8001be0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001be6:	230a      	movs	r3, #10
 8001be8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bea:	2300      	movs	r3, #0
 8001bec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001bfa:	f107 030c 	add.w	r3, r7, #12
 8001bfe:	4619      	mov	r1, r3
 8001c00:	480c      	ldr	r0, [pc, #48]	; (8001c34 <MX_TIM5_Init+0xa0>)
 8001c02:	f004 fbaf 	bl	8006364 <HAL_TIM_Encoder_Init>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001c0c:	f000 fa9a 	bl	8002144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c10:	2300      	movs	r3, #0
 8001c12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c18:	1d3b      	adds	r3, r7, #4
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4805      	ldr	r0, [pc, #20]	; (8001c34 <MX_TIM5_Init+0xa0>)
 8001c1e:	f006 f843 	bl	8007ca8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001c28:	f000 fa8c 	bl	8002144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001c2c:	bf00      	nop
 8001c2e:	3730      	adds	r7, #48	; 0x30
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000640 	.word	0x20000640
 8001c38:	40000c00 	.word	0x40000c00

08001c3c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c42:	463b      	mov	r3, r7
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c4a:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <MX_TIM6_Init+0x64>)
 8001c4c:	4a15      	ldr	r2, [pc, #84]	; (8001ca4 <MX_TIM6_Init+0x68>)
 8001c4e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7;
 8001c50:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <MX_TIM6_Init+0x64>)
 8001c52:	2207      	movs	r2, #7
 8001c54:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c56:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <MX_TIM6_Init+0x64>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001c5c:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <MX_TIM6_Init+0x64>)
 8001c5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c62:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c64:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <MX_TIM6_Init+0x64>)
 8001c66:	2280      	movs	r2, #128	; 0x80
 8001c68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c6a:	480d      	ldr	r0, [pc, #52]	; (8001ca0 <MX_TIM6_Init+0x64>)
 8001c6c:	f003 ff88 	bl	8005b80 <HAL_TIM_Base_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001c76:	f000 fa65 	bl	8002144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c82:	463b      	mov	r3, r7
 8001c84:	4619      	mov	r1, r3
 8001c86:	4806      	ldr	r0, [pc, #24]	; (8001ca0 <MX_TIM6_Init+0x64>)
 8001c88:	f006 f80e 	bl	8007ca8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001c92:	f000 fa57 	bl	8002144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000860 	.word	0x20000860
 8001ca4:	40001000 	.word	0x40001000

08001ca8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cae:	463b      	mov	r3, r7
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001cb6:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <MX_TIM7_Init+0x64>)
 8001cb8:	4a15      	ldr	r2, [pc, #84]	; (8001d10 <MX_TIM7_Init+0x68>)
 8001cba:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7;
 8001cbc:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <MX_TIM7_Init+0x64>)
 8001cbe:	2207      	movs	r2, #7
 8001cc0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc2:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <MX_TIM7_Init+0x64>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001cc8:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <MX_TIM7_Init+0x64>)
 8001cca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cce:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cd0:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <MX_TIM7_Init+0x64>)
 8001cd2:	2280      	movs	r2, #128	; 0x80
 8001cd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001cd6:	480d      	ldr	r0, [pc, #52]	; (8001d0c <MX_TIM7_Init+0x64>)
 8001cd8:	f003 ff52 	bl	8005b80 <HAL_TIM_Base_Init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001ce2:	f000 fa2f 	bl	8002144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001cee:	463b      	mov	r3, r7
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4806      	ldr	r0, [pc, #24]	; (8001d0c <MX_TIM7_Init+0x64>)
 8001cf4:	f005 ffd8 	bl	8007ca8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001cfe:	f000 fa21 	bl	8002144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000af4 	.word	0x20000af4
 8001d10:	40001400 	.word	0x40001400

08001d14 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b096      	sub	sp, #88	; 0x58
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d1a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	605a      	str	r2, [r3, #4]
 8001d3c:	609a      	str	r2, [r3, #8]
 8001d3e:	60da      	str	r2, [r3, #12]
 8001d40:	611a      	str	r2, [r3, #16]
 8001d42:	615a      	str	r2, [r3, #20]
 8001d44:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	2220      	movs	r2, #32
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f009 fc0b 	bl	800b568 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001d52:	4b50      	ldr	r3, [pc, #320]	; (8001e94 <MX_TIM8_Init+0x180>)
 8001d54:	4a50      	ldr	r2, [pc, #320]	; (8001e98 <MX_TIM8_Init+0x184>)
 8001d56:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7;
 8001d58:	4b4e      	ldr	r3, [pc, #312]	; (8001e94 <MX_TIM8_Init+0x180>)
 8001d5a:	2207      	movs	r2, #7
 8001d5c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d5e:	4b4d      	ldr	r3, [pc, #308]	; (8001e94 <MX_TIM8_Init+0x180>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100;
 8001d64:	4b4b      	ldr	r3, [pc, #300]	; (8001e94 <MX_TIM8_Init+0x180>)
 8001d66:	2264      	movs	r2, #100	; 0x64
 8001d68:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d6a:	4b4a      	ldr	r3, [pc, #296]	; (8001e94 <MX_TIM8_Init+0x180>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001d70:	4b48      	ldr	r3, [pc, #288]	; (8001e94 <MX_TIM8_Init+0x180>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d76:	4b47      	ldr	r3, [pc, #284]	; (8001e94 <MX_TIM8_Init+0x180>)
 8001d78:	2280      	movs	r2, #128	; 0x80
 8001d7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001d7c:	4845      	ldr	r0, [pc, #276]	; (8001e94 <MX_TIM8_Init+0x180>)
 8001d7e:	f003 feff 	bl	8005b80 <HAL_TIM_Base_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001d88:	f000 f9dc 	bl	8002144 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d90:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001d92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001d96:	4619      	mov	r1, r3
 8001d98:	483e      	ldr	r0, [pc, #248]	; (8001e94 <MX_TIM8_Init+0x180>)
 8001d9a:	f005 f829 	bl	8006df0 <HAL_TIM_ConfigClockSource>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001da4:	f000 f9ce 	bl	8002144 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001da8:	483a      	ldr	r0, [pc, #232]	; (8001e94 <MX_TIM8_Init+0x180>)
 8001daa:	f004 f8d7 	bl	8005f5c <HAL_TIM_PWM_Init>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001db4:	f000 f9c6 	bl	8002144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001db8:	2300      	movs	r3, #0
 8001dba:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001dc0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4833      	ldr	r0, [pc, #204]	; (8001e94 <MX_TIM8_Init+0x180>)
 8001dc8:	f005 ff6e 	bl	8007ca8 <HAL_TIMEx_MasterConfigSynchronization>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8001dd2:	f000 f9b7 	bl	8002144 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dd6:	2360      	movs	r3, #96	; 0x60
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dde:	2300      	movs	r3, #0
 8001de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001de2:	2300      	movs	r3, #0
 8001de4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001de6:	2300      	movs	r3, #0
 8001de8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001dea:	2300      	movs	r3, #0
 8001dec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001dee:	2300      	movs	r3, #0
 8001df0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df6:	2200      	movs	r2, #0
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4826      	ldr	r0, [pc, #152]	; (8001e94 <MX_TIM8_Init+0x180>)
 8001dfc:	f004 fe5a 	bl	8006ab4 <HAL_TIM_PWM_ConfigChannel>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8001e06:	f000 f99d 	bl	8002144 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e0e:	2204      	movs	r2, #4
 8001e10:	4619      	mov	r1, r3
 8001e12:	4820      	ldr	r0, [pc, #128]	; (8001e94 <MX_TIM8_Init+0x180>)
 8001e14:	f004 fe4e 	bl	8006ab4 <HAL_TIM_PWM_ConfigChannel>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8001e1e:	f000 f991 	bl	8002144 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e26:	2208      	movs	r2, #8
 8001e28:	4619      	mov	r1, r3
 8001e2a:	481a      	ldr	r0, [pc, #104]	; (8001e94 <MX_TIM8_Init+0x180>)
 8001e2c:	f004 fe42 	bl	8006ab4 <HAL_TIM_PWM_ConfigChannel>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8001e36:	f000 f985 	bl	8002144 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e3e:	220c      	movs	r2, #12
 8001e40:	4619      	mov	r1, r3
 8001e42:	4814      	ldr	r0, [pc, #80]	; (8001e94 <MX_TIM8_Init+0x180>)
 8001e44:	f004 fe36 	bl	8006ab4 <HAL_TIM_PWM_ConfigChannel>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8001e4e:	f000 f979 	bl	8002144 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e56:	2300      	movs	r3, #0
 8001e58:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e6a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001e70:	1d3b      	adds	r3, r7, #4
 8001e72:	4619      	mov	r1, r3
 8001e74:	4807      	ldr	r0, [pc, #28]	; (8001e94 <MX_TIM8_Init+0x180>)
 8001e76:	f005 ffe7 	bl	8007e48 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_TIM8_Init+0x170>
  {
    Error_Handler();
 8001e80:	f000 f960 	bl	8002144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001e84:	4803      	ldr	r0, [pc, #12]	; (8001e94 <MX_TIM8_Init+0x180>)
 8001e86:	f000 fb7f 	bl	8002588 <HAL_TIM_MspPostInit>

}
 8001e8a:	bf00      	nop
 8001e8c:	3758      	adds	r7, #88	; 0x58
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	200004d8 	.word	0x200004d8
 8001e98:	40013400 	.word	0x40013400

08001e9c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001ea0:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <MX_UART4_Init+0x4c>)
 8001ea2:	4a12      	ldr	r2, [pc, #72]	; (8001eec <MX_UART4_Init+0x50>)
 8001ea4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001ea6:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <MX_UART4_Init+0x4c>)
 8001ea8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001eac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001eae:	4b0e      	ldr	r3, [pc, #56]	; (8001ee8 <MX_UART4_Init+0x4c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <MX_UART4_Init+0x4c>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001eba:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <MX_UART4_Init+0x4c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001ec0:	4b09      	ldr	r3, [pc, #36]	; (8001ee8 <MX_UART4_Init+0x4c>)
 8001ec2:	220c      	movs	r2, #12
 8001ec4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ec6:	4b08      	ldr	r3, [pc, #32]	; (8001ee8 <MX_UART4_Init+0x4c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ecc:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <MX_UART4_Init+0x4c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001ed2:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <MX_UART4_Init+0x4c>)
 8001ed4:	f006 f8a0 	bl	8008018 <HAL_UART_Init>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001ede:	f000 f931 	bl	8002144 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	200009cc 	.word	0x200009cc
 8001eec:	40004c00 	.word	0x40004c00

08001ef0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ef4:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <MX_USART1_UART_Init+0x4c>)
 8001ef6:	4a12      	ldr	r2, [pc, #72]	; (8001f40 <MX_USART1_UART_Init+0x50>)
 8001ef8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001efa:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <MX_USART1_UART_Init+0x4c>)
 8001efc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f02:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <MX_USART1_UART_Init+0x4c>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f08:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <MX_USART1_UART_Init+0x4c>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f0e:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <MX_USART1_UART_Init+0x4c>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f14:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <MX_USART1_UART_Init+0x4c>)
 8001f16:	220c      	movs	r2, #12
 8001f18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f1a:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <MX_USART1_UART_Init+0x4c>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <MX_USART1_UART_Init+0x4c>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f26:	4805      	ldr	r0, [pc, #20]	; (8001f3c <MX_USART1_UART_Init+0x4c>)
 8001f28:	f006 f876 	bl	8008018 <HAL_UART_Init>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f32:	f000 f907 	bl	8002144 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	200007d8 	.word	0x200007d8
 8001f40:	40013800 	.word	0x40013800

08001f44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4a:	f107 0310 	add.w	r3, r7, #16
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	609a      	str	r2, [r3, #8]
 8001f56:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f58:	4b4e      	ldr	r3, [pc, #312]	; (8002094 <MX_GPIO_Init+0x150>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	4a4d      	ldr	r2, [pc, #308]	; (8002094 <MX_GPIO_Init+0x150>)
 8001f5e:	f043 0310 	orr.w	r3, r3, #16
 8001f62:	6193      	str	r3, [r2, #24]
 8001f64:	4b4b      	ldr	r3, [pc, #300]	; (8002094 <MX_GPIO_Init+0x150>)
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	f003 0310 	and.w	r3, r3, #16
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f70:	4b48      	ldr	r3, [pc, #288]	; (8002094 <MX_GPIO_Init+0x150>)
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	4a47      	ldr	r2, [pc, #284]	; (8002094 <MX_GPIO_Init+0x150>)
 8001f76:	f043 0304 	orr.w	r3, r3, #4
 8001f7a:	6193      	str	r3, [r2, #24]
 8001f7c:	4b45      	ldr	r3, [pc, #276]	; (8002094 <MX_GPIO_Init+0x150>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f88:	4b42      	ldr	r3, [pc, #264]	; (8002094 <MX_GPIO_Init+0x150>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	4a41      	ldr	r2, [pc, #260]	; (8002094 <MX_GPIO_Init+0x150>)
 8001f8e:	f043 0308 	orr.w	r3, r3, #8
 8001f92:	6193      	str	r3, [r2, #24]
 8001f94:	4b3f      	ldr	r3, [pc, #252]	; (8002094 <MX_GPIO_Init+0x150>)
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	f003 0308 	and.w	r3, r3, #8
 8001f9c:	607b      	str	r3, [r7, #4]
 8001f9e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fa0:	4b3c      	ldr	r3, [pc, #240]	; (8002094 <MX_GPIO_Init+0x150>)
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	4a3b      	ldr	r2, [pc, #236]	; (8002094 <MX_GPIO_Init+0x150>)
 8001fa6:	f043 0320 	orr.w	r3, r3, #32
 8001faa:	6193      	str	r3, [r2, #24]
 8001fac:	4b39      	ldr	r3, [pc, #228]	; (8002094 <MX_GPIO_Init+0x150>)
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	f003 0320 	and.w	r3, r3, #32
 8001fb4:	603b      	str	r3, [r7, #0]
 8001fb6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BLUE_LED_Pin|BLUETOOTH_SPI_CMD_Pin|BLUETOOTH_SPI_CS_Pin|MOTOR_REAR_LEFT_OUT_1_Pin
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f243 013a 	movw	r1, #12346	; 0x303a
 8001fbe:	4836      	ldr	r0, [pc, #216]	; (8002098 <MX_GPIO_Init+0x154>)
 8001fc0:	f001 fef4 	bl	8003dac <HAL_GPIO_WritePin>
                          |MOTOR_REAR_LEFT_OUT_2_Pin|MOTOR_FRONT_RIGHT_OUT_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUETOOTH_SPI_CLK_GPIO_Port, BLUETOOTH_SPI_CLK_Pin, GPIO_PIN_RESET);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2110      	movs	r1, #16
 8001fc8:	4834      	ldr	r0, [pc, #208]	; (800209c <MX_GPIO_Init+0x158>)
 8001fca:	f001 feef 	bl	8003dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_REAR_RIGHT_OUT_1_Pin|MOTOR_REAR_RIGHT_OUT_2_Pin|MOTOR_FRONT_LEFT_OUT_2_Pin|MOTOR_FRONT_LEFT_OUT_1_Pin, GPIO_PIN_RESET);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2133      	movs	r1, #51	; 0x33
 8001fd2:	4833      	ldr	r0, [pc, #204]	; (80020a0 <MX_GPIO_Init+0x15c>)
 8001fd4:	f001 feea 	bl	8003dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_FRONT_RIGHT_OUT_1_GPIO_Port, MOTOR_FRONT_RIGHT_OUT_1_Pin, GPIO_PIN_RESET);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2104      	movs	r1, #4
 8001fdc:	4831      	ldr	r0, [pc, #196]	; (80020a4 <MX_GPIO_Init+0x160>)
 8001fde:	f001 fee5 	bl	8003dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8001fe2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fe6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8001ff4:	f107 0310 	add.w	r3, r7, #16
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4827      	ldr	r0, [pc, #156]	; (8002098 <MX_GPIO_Init+0x154>)
 8001ffc:	f001 fc1c 	bl	8003838 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_RESET_Pin BLUETOOTH_SPI_DAT_Pin */
  GPIO_InitStruct.Pin = SW_RESET_Pin|BLUETOOTH_SPI_DAT_Pin;
 8002000:	2305      	movs	r3, #5
 8002002:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800200c:	f107 0310 	add.w	r3, r7, #16
 8002010:	4619      	mov	r1, r3
 8002012:	4821      	ldr	r0, [pc, #132]	; (8002098 <MX_GPIO_Init+0x154>)
 8002014:	f001 fc10 	bl	8003838 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLUETOOTH_SPI_CMD_Pin BLUETOOTH_SPI_CS_Pin MOTOR_REAR_LEFT_OUT_1_Pin MOTOR_REAR_LEFT_OUT_2_Pin
                           MOTOR_FRONT_RIGHT_OUT_2_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_CMD_Pin|BLUETOOTH_SPI_CS_Pin|MOTOR_REAR_LEFT_OUT_1_Pin|MOTOR_REAR_LEFT_OUT_2_Pin
 8002018:	f241 033a 	movw	r3, #4154	; 0x103a
 800201c:	613b      	str	r3, [r7, #16]
                          |MOTOR_FRONT_RIGHT_OUT_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800201e:	2301      	movs	r3, #1
 8002020:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002026:	2303      	movs	r3, #3
 8002028:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800202a:	f107 0310 	add.w	r3, r7, #16
 800202e:	4619      	mov	r1, r3
 8002030:	4819      	ldr	r0, [pc, #100]	; (8002098 <MX_GPIO_Init+0x154>)
 8002032:	f001 fc01 	bl	8003838 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUETOOTH_SPI_CLK_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_CLK_Pin;
 8002036:	2310      	movs	r3, #16
 8002038:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800203a:	2301      	movs	r3, #1
 800203c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002042:	2303      	movs	r3, #3
 8002044:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUETOOTH_SPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8002046:	f107 0310 	add.w	r3, r7, #16
 800204a:	4619      	mov	r1, r3
 800204c:	4813      	ldr	r0, [pc, #76]	; (800209c <MX_GPIO_Init+0x158>)
 800204e:	f001 fbf3 	bl	8003838 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_REAR_RIGHT_OUT_1_Pin MOTOR_REAR_RIGHT_OUT_2_Pin MOTOR_FRONT_LEFT_OUT_2_Pin MOTOR_FRONT_LEFT_OUT_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_REAR_RIGHT_OUT_1_Pin|MOTOR_REAR_RIGHT_OUT_2_Pin|MOTOR_FRONT_LEFT_OUT_2_Pin|MOTOR_FRONT_LEFT_OUT_1_Pin;
 8002052:	2333      	movs	r3, #51	; 0x33
 8002054:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002056:	2301      	movs	r3, #1
 8002058:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800205e:	2303      	movs	r3, #3
 8002060:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002062:	f107 0310 	add.w	r3, r7, #16
 8002066:	4619      	mov	r1, r3
 8002068:	480d      	ldr	r0, [pc, #52]	; (80020a0 <MX_GPIO_Init+0x15c>)
 800206a:	f001 fbe5 	bl	8003838 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_FRONT_RIGHT_OUT_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_FRONT_RIGHT_OUT_1_Pin;
 800206e:	2304      	movs	r3, #4
 8002070:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002072:	2301      	movs	r3, #1
 8002074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800207a:	2303      	movs	r3, #3
 800207c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MOTOR_FRONT_RIGHT_OUT_1_GPIO_Port, &GPIO_InitStruct);
 800207e:	f107 0310 	add.w	r3, r7, #16
 8002082:	4619      	mov	r1, r3
 8002084:	4807      	ldr	r0, [pc, #28]	; (80020a4 <MX_GPIO_Init+0x160>)
 8002086:	f001 fbd7 	bl	8003838 <HAL_GPIO_Init>

}
 800208a:	bf00      	nop
 800208c:	3720      	adds	r7, #32
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40021000 	.word	0x40021000
 8002098:	40011000 	.word	0x40011000
 800209c:	40010800 	.word	0x40010800
 80020a0:	40010c00 	.word	0x40010c00
 80020a4:	40011400 	.word	0x40011400

080020a8 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  if ((htim == &htim2) || (htim == &htim3) || (htim == &htim4) || (htim == &htim5))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a0b      	ldr	r2, [pc, #44]	; (80020e0 <HAL_TIM_IC_CaptureCallback+0x38>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d00b      	beq.n	80020d0 <HAL_TIM_IC_CaptureCallback+0x28>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a0a      	ldr	r2, [pc, #40]	; (80020e4 <HAL_TIM_IC_CaptureCallback+0x3c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d007      	beq.n	80020d0 <HAL_TIM_IC_CaptureCallback+0x28>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a09      	ldr	r2, [pc, #36]	; (80020e8 <HAL_TIM_IC_CaptureCallback+0x40>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d003      	beq.n	80020d0 <HAL_TIM_IC_CaptureCallback+0x28>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a08      	ldr	r2, [pc, #32]	; (80020ec <HAL_TIM_IC_CaptureCallback+0x44>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d103      	bne.n	80020d8 <HAL_TIM_IC_CaptureCallback+0x30>
  {
    DRV_updateEncoder(htim);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f007 fa13 	bl	80094fc <DRV_updateEncoder>
  else
  {
    ; /* Nothing to do */
  }

  return;
 80020d6:	bf00      	nop
 80020d8:	bf00      	nop
}
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	20000a40 	.word	0x20000a40
 80020e4:	200006f4 	.word	0x200006f4
 80020e8:	2000058c 	.word	0x2000058c
 80020ec:	20000640 	.word	0x20000640

080020f0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Check the handle of the timer triggering this callback and update LED */
  if (htim == &htim1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a04      	ldr	r2, [pc, #16]	; (800210c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d101      	bne.n	8002104 <HAL_TIM_PeriodElapsedCallback+0x14>
  {
    LED_update();
 8002100:	f008 fb46 	bl	800a790 <LED_update>
  }
  else
  {
    ; /* Nothing to do */
  }
}
 8002104:	bf00      	nop
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20000914 	.word	0x20000914

08002110 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Check the handle of the UART triggering this callback and actually receive date */
  if (huart == &huart1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a08      	ldr	r2, [pc, #32]	; (800213c <HAL_UART_RxCpltCallback+0x2c>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d102      	bne.n	8002126 <HAL_UART_RxCpltCallback+0x16>
  {
    CON_receiveData();
 8002120:	f007 f890 	bl	8009244 <CON_receiveData>
  }
  else
  {
    ; /* Nothing to do */
  }
}
 8002124:	e005      	b.n	8002132 <HAL_UART_RxCpltCallback+0x22>
  else if (huart == &huart4)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a05      	ldr	r2, [pc, #20]	; (8002140 <HAL_UART_RxCpltCallback+0x30>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d101      	bne.n	8002132 <HAL_UART_RxCpltCallback+0x22>
    MAS_receiveData();
 800212e:	f008 fcc5 	bl	800aabc <MAS_receiveData>
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	200007d8 	.word	0x200007d8
 8002140:	200009cc 	.word	0x200009cc

08002144 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002148:	b672      	cpsid	i
}
 800214a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  LOG_error("Error_Handler() triggered");
 800214c:	4902      	ldr	r1, [pc, #8]	; (8002158 <Error_Handler+0x14>)
 800214e:	2003      	movs	r0, #3
 8002150:	f008 fbf6 	bl	800a940 <LOG_log>

  while (1)
 8002154:	e7fe      	b.n	8002154 <Error_Handler+0x10>
 8002156:	bf00      	nop
 8002158:	0800ea2c 	.word	0x0800ea2c

0800215c <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
     LOG_error("Wrong parameters: %s@%d", file, line);
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	4904      	ldr	r1, [pc, #16]	; (800217c <assert_failed+0x20>)
 800216c:	2003      	movs	r0, #3
 800216e:	f008 fbe7 	bl	800a940 <LOG_log>

    return;
 8002172:	bf00      	nop
  /* USER CODE END 6 */
}
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	0800ea48 	.word	0x0800ea48

08002180 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002186:	4b15      	ldr	r3, [pc, #84]	; (80021dc <HAL_MspInit+0x5c>)
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	4a14      	ldr	r2, [pc, #80]	; (80021dc <HAL_MspInit+0x5c>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6193      	str	r3, [r2, #24]
 8002192:	4b12      	ldr	r3, [pc, #72]	; (80021dc <HAL_MspInit+0x5c>)
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	60bb      	str	r3, [r7, #8]
 800219c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800219e:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <HAL_MspInit+0x5c>)
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	4a0e      	ldr	r2, [pc, #56]	; (80021dc <HAL_MspInit+0x5c>)
 80021a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a8:	61d3      	str	r3, [r2, #28]
 80021aa:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <HAL_MspInit+0x5c>)
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b2:	607b      	str	r3, [r7, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80021b6:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <HAL_MspInit+0x60>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	4a04      	ldr	r2, [pc, #16]	; (80021e0 <HAL_MspInit+0x60>)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021d2:	bf00      	nop
 80021d4:	3714      	adds	r7, #20
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40010000 	.word	0x40010000

080021e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b088      	sub	sp, #32
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ec:	f107 0310 	add.w	r3, r7, #16
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a14      	ldr	r2, [pc, #80]	; (8002250 <HAL_ADC_MspInit+0x6c>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d121      	bne.n	8002248 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002204:	4b13      	ldr	r3, [pc, #76]	; (8002254 <HAL_ADC_MspInit+0x70>)
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	4a12      	ldr	r2, [pc, #72]	; (8002254 <HAL_ADC_MspInit+0x70>)
 800220a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800220e:	6193      	str	r3, [r2, #24]
 8002210:	4b10      	ldr	r3, [pc, #64]	; (8002254 <HAL_ADC_MspInit+0x70>)
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221c:	4b0d      	ldr	r3, [pc, #52]	; (8002254 <HAL_ADC_MspInit+0x70>)
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	4a0c      	ldr	r2, [pc, #48]	; (8002254 <HAL_ADC_MspInit+0x70>)
 8002222:	f043 0304 	orr.w	r3, r3, #4
 8002226:	6193      	str	r3, [r2, #24]
 8002228:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <HAL_ADC_MspInit+0x70>)
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = BATTERY_ADC_Pin;
 8002234:	2320      	movs	r3, #32
 8002236:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002238:	2303      	movs	r3, #3
 800223a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATTERY_ADC_GPIO_Port, &GPIO_InitStruct);
 800223c:	f107 0310 	add.w	r3, r7, #16
 8002240:	4619      	mov	r1, r3
 8002242:	4805      	ldr	r0, [pc, #20]	; (8002258 <HAL_ADC_MspInit+0x74>)
 8002244:	f001 faf8 	bl	8003838 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002248:	bf00      	nop
 800224a:	3720      	adds	r7, #32
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40012400 	.word	0x40012400
 8002254:	40021000 	.word	0x40021000
 8002258:	40010800 	.word	0x40010800

0800225c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a0b      	ldr	r2, [pc, #44]	; (8002298 <HAL_RTC_MspInit+0x3c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d110      	bne.n	8002290 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800226e:	f001 fdf7 	bl	8003e60 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8002272:	4b0a      	ldr	r3, [pc, #40]	; (800229c <HAL_RTC_MspInit+0x40>)
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	4a09      	ldr	r2, [pc, #36]	; (800229c <HAL_RTC_MspInit+0x40>)
 8002278:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800227c:	61d3      	str	r3, [r2, #28]
 800227e:	4b07      	ldr	r3, [pc, #28]	; (800229c <HAL_RTC_MspInit+0x40>)
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800228a:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <HAL_RTC_MspInit+0x44>)
 800228c:	2201      	movs	r2, #1
 800228e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002290:	bf00      	nop
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40002800 	.word	0x40002800
 800229c:	40021000 	.word	0x40021000
 80022a0:	4242043c 	.word	0x4242043c

080022a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a28      	ldr	r2, [pc, #160]	; (8002354 <HAL_TIM_Base_MspInit+0xb0>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d114      	bne.n	80022e0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022b6:	4b28      	ldr	r3, [pc, #160]	; (8002358 <HAL_TIM_Base_MspInit+0xb4>)
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	4a27      	ldr	r2, [pc, #156]	; (8002358 <HAL_TIM_Base_MspInit+0xb4>)
 80022bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022c0:	6193      	str	r3, [r2, #24]
 80022c2:	4b25      	ldr	r3, [pc, #148]	; (8002358 <HAL_TIM_Base_MspInit+0xb4>)
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 6, 0);
 80022ce:	2200      	movs	r2, #0
 80022d0:	2106      	movs	r1, #6
 80022d2:	2019      	movs	r0, #25
 80022d4:	f001 f91a 	bl	800350c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80022d8:	2019      	movs	r0, #25
 80022da:	f001 f943 	bl	8003564 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80022de:	e034      	b.n	800234a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM6)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a1d      	ldr	r2, [pc, #116]	; (800235c <HAL_TIM_Base_MspInit+0xb8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d10c      	bne.n	8002304 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80022ea:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <HAL_TIM_Base_MspInit+0xb4>)
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	4a1a      	ldr	r2, [pc, #104]	; (8002358 <HAL_TIM_Base_MspInit+0xb4>)
 80022f0:	f043 0310 	orr.w	r3, r3, #16
 80022f4:	61d3      	str	r3, [r2, #28]
 80022f6:	4b18      	ldr	r3, [pc, #96]	; (8002358 <HAL_TIM_Base_MspInit+0xb4>)
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	f003 0310 	and.w	r3, r3, #16
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	693b      	ldr	r3, [r7, #16]
}
 8002302:	e022      	b.n	800234a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM7)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a15      	ldr	r2, [pc, #84]	; (8002360 <HAL_TIM_Base_MspInit+0xbc>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d10c      	bne.n	8002328 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800230e:	4b12      	ldr	r3, [pc, #72]	; (8002358 <HAL_TIM_Base_MspInit+0xb4>)
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	4a11      	ldr	r2, [pc, #68]	; (8002358 <HAL_TIM_Base_MspInit+0xb4>)
 8002314:	f043 0320 	orr.w	r3, r3, #32
 8002318:	61d3      	str	r3, [r2, #28]
 800231a:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <HAL_TIM_Base_MspInit+0xb4>)
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	f003 0320 	and.w	r3, r3, #32
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
}
 8002326:	e010      	b.n	800234a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM8)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a0d      	ldr	r2, [pc, #52]	; (8002364 <HAL_TIM_Base_MspInit+0xc0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d10b      	bne.n	800234a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002332:	4b09      	ldr	r3, [pc, #36]	; (8002358 <HAL_TIM_Base_MspInit+0xb4>)
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	4a08      	ldr	r2, [pc, #32]	; (8002358 <HAL_TIM_Base_MspInit+0xb4>)
 8002338:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800233c:	6193      	str	r3, [r2, #24]
 800233e:	4b06      	ldr	r3, [pc, #24]	; (8002358 <HAL_TIM_Base_MspInit+0xb4>)
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002346:	60bb      	str	r3, [r7, #8]
 8002348:	68bb      	ldr	r3, [r7, #8]
}
 800234a:	bf00      	nop
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40012c00 	.word	0x40012c00
 8002358:	40021000 	.word	0x40021000
 800235c:	40001000 	.word	0x40001000
 8002360:	40001400 	.word	0x40001400
 8002364:	40013400 	.word	0x40013400

08002368 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b090      	sub	sp, #64	; 0x40
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002370:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002386:	d157      	bne.n	8002438 <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002388:	4b78      	ldr	r3, [pc, #480]	; (800256c <HAL_TIM_Encoder_MspInit+0x204>)
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	4a77      	ldr	r2, [pc, #476]	; (800256c <HAL_TIM_Encoder_MspInit+0x204>)
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	61d3      	str	r3, [r2, #28]
 8002394:	4b75      	ldr	r3, [pc, #468]	; (800256c <HAL_TIM_Encoder_MspInit+0x204>)
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	62bb      	str	r3, [r7, #40]	; 0x28
 800239e:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023a0:	4b72      	ldr	r3, [pc, #456]	; (800256c <HAL_TIM_Encoder_MspInit+0x204>)
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	4a71      	ldr	r2, [pc, #452]	; (800256c <HAL_TIM_Encoder_MspInit+0x204>)
 80023a6:	f043 0304 	orr.w	r3, r3, #4
 80023aa:	6193      	str	r3, [r2, #24]
 80023ac:	4b6f      	ldr	r3, [pc, #444]	; (800256c <HAL_TIM_Encoder_MspInit+0x204>)
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023b8:	4b6c      	ldr	r3, [pc, #432]	; (800256c <HAL_TIM_Encoder_MspInit+0x204>)
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	4a6b      	ldr	r2, [pc, #428]	; (800256c <HAL_TIM_Encoder_MspInit+0x204>)
 80023be:	f043 0308 	orr.w	r3, r3, #8
 80023c2:	6193      	str	r3, [r2, #24]
 80023c4:	4b69      	ldr	r3, [pc, #420]	; (800256c <HAL_TIM_Encoder_MspInit+0x204>)
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	623b      	str	r3, [r7, #32]
 80023ce:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_FRONT_RIGHT_IN_1_Pin;
 80023d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023d6:	2300      	movs	r3, #0
 80023d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENCODER_FRONT_RIGHT_IN_1_GPIO_Port, &GPIO_InitStruct);
 80023de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023e2:	4619      	mov	r1, r3
 80023e4:	4862      	ldr	r0, [pc, #392]	; (8002570 <HAL_TIM_Encoder_MspInit+0x208>)
 80023e6:	f001 fa27 	bl	8003838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER_FRONT_RIGHT_IN_2_Pin;
 80023ea:	2308      	movs	r3, #8
 80023ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ee:	2300      	movs	r3, #0
 80023f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f2:	2300      	movs	r3, #0
 80023f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENCODER_FRONT_RIGHT_IN_2_GPIO_Port, &GPIO_InitStruct);
 80023f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023fa:	4619      	mov	r1, r3
 80023fc:	485d      	ldr	r0, [pc, #372]	; (8002574 <HAL_TIM_Encoder_MspInit+0x20c>)
 80023fe:	f001 fa1b 	bl	8003838 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002402:	4b5d      	ldr	r3, [pc, #372]	; (8002578 <HAL_TIM_Encoder_MspInit+0x210>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800240a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800240e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002412:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002416:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800241a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800241e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002420:	4a55      	ldr	r2, [pc, #340]	; (8002578 <HAL_TIM_Encoder_MspInit+0x210>)
 8002422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002424:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8002426:	2200      	movs	r2, #0
 8002428:	2104      	movs	r1, #4
 800242a:	201c      	movs	r0, #28
 800242c:	f001 f86e 	bl	800350c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002430:	201c      	movs	r0, #28
 8002432:	f001 f897 	bl	8003564 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002436:	e094      	b.n	8002562 <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM3)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a4f      	ldr	r2, [pc, #316]	; (800257c <HAL_TIM_Encoder_MspInit+0x214>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d12c      	bne.n	800249c <HAL_TIM_Encoder_MspInit+0x134>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002442:	4b4a      	ldr	r3, [pc, #296]	; (800256c <HAL_TIM_Encoder_MspInit+0x204>)
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	4a49      	ldr	r2, [pc, #292]	; (800256c <HAL_TIM_Encoder_MspInit+0x204>)
 8002448:	f043 0302 	orr.w	r3, r3, #2
 800244c:	61d3      	str	r3, [r2, #28]
 800244e:	4b47      	ldr	r3, [pc, #284]	; (800256c <HAL_TIM_Encoder_MspInit+0x204>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	61fb      	str	r3, [r7, #28]
 8002458:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800245a:	4b44      	ldr	r3, [pc, #272]	; (800256c <HAL_TIM_Encoder_MspInit+0x204>)
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	4a43      	ldr	r2, [pc, #268]	; (800256c <HAL_TIM_Encoder_MspInit+0x204>)
 8002460:	f043 0304 	orr.w	r3, r3, #4
 8002464:	6193      	str	r3, [r2, #24]
 8002466:	4b41      	ldr	r3, [pc, #260]	; (800256c <HAL_TIM_Encoder_MspInit+0x204>)
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	61bb      	str	r3, [r7, #24]
 8002470:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENCODER_FRONT_LEFT_IN_1_Pin|ENCODER_FRONT_LEFT_IN_2_Pin;
 8002472:	23c0      	movs	r3, #192	; 0xc0
 8002474:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002476:	2300      	movs	r3, #0
 8002478:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	2300      	movs	r3, #0
 800247c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800247e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002482:	4619      	mov	r1, r3
 8002484:	483a      	ldr	r0, [pc, #232]	; (8002570 <HAL_TIM_Encoder_MspInit+0x208>)
 8002486:	f001 f9d7 	bl	8003838 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 4, 0);
 800248a:	2200      	movs	r2, #0
 800248c:	2104      	movs	r1, #4
 800248e:	201d      	movs	r0, #29
 8002490:	f001 f83c 	bl	800350c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002494:	201d      	movs	r0, #29
 8002496:	f001 f865 	bl	8003564 <HAL_NVIC_EnableIRQ>
}
 800249a:	e062      	b.n	8002562 <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM4)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a37      	ldr	r2, [pc, #220]	; (8002580 <HAL_TIM_Encoder_MspInit+0x218>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d12c      	bne.n	8002500 <HAL_TIM_Encoder_MspInit+0x198>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024a6:	4b31      	ldr	r3, [pc, #196]	; (800256c <HAL_TIM_Encoder_MspInit+0x204>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	4a30      	ldr	r2, [pc, #192]	; (800256c <HAL_TIM_Encoder_MspInit+0x204>)
 80024ac:	f043 0304 	orr.w	r3, r3, #4
 80024b0:	61d3      	str	r3, [r2, #28]
 80024b2:	4b2e      	ldr	r3, [pc, #184]	; (800256c <HAL_TIM_Encoder_MspInit+0x204>)
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	f003 0304 	and.w	r3, r3, #4
 80024ba:	617b      	str	r3, [r7, #20]
 80024bc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024be:	4b2b      	ldr	r3, [pc, #172]	; (800256c <HAL_TIM_Encoder_MspInit+0x204>)
 80024c0:	699b      	ldr	r3, [r3, #24]
 80024c2:	4a2a      	ldr	r2, [pc, #168]	; (800256c <HAL_TIM_Encoder_MspInit+0x204>)
 80024c4:	f043 0308 	orr.w	r3, r3, #8
 80024c8:	6193      	str	r3, [r2, #24]
 80024ca:	4b28      	ldr	r3, [pc, #160]	; (800256c <HAL_TIM_Encoder_MspInit+0x204>)
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	613b      	str	r3, [r7, #16]
 80024d4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENCODER_REAR_LEFT_IN_1_Pin|ENCODER_REAR_LEFT_IN_2_Pin;
 80024d6:	23c0      	movs	r3, #192	; 0xc0
 80024d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024da:	2300      	movs	r3, #0
 80024dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024e6:	4619      	mov	r1, r3
 80024e8:	4822      	ldr	r0, [pc, #136]	; (8002574 <HAL_TIM_Encoder_MspInit+0x20c>)
 80024ea:	f001 f9a5 	bl	8003838 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 4, 0);
 80024ee:	2200      	movs	r2, #0
 80024f0:	2104      	movs	r1, #4
 80024f2:	201e      	movs	r0, #30
 80024f4:	f001 f80a 	bl	800350c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80024f8:	201e      	movs	r0, #30
 80024fa:	f001 f833 	bl	8003564 <HAL_NVIC_EnableIRQ>
}
 80024fe:	e030      	b.n	8002562 <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM5)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a1f      	ldr	r2, [pc, #124]	; (8002584 <HAL_TIM_Encoder_MspInit+0x21c>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d12b      	bne.n	8002562 <HAL_TIM_Encoder_MspInit+0x1fa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800250a:	4b18      	ldr	r3, [pc, #96]	; (800256c <HAL_TIM_Encoder_MspInit+0x204>)
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	4a17      	ldr	r2, [pc, #92]	; (800256c <HAL_TIM_Encoder_MspInit+0x204>)
 8002510:	f043 0308 	orr.w	r3, r3, #8
 8002514:	61d3      	str	r3, [r2, #28]
 8002516:	4b15      	ldr	r3, [pc, #84]	; (800256c <HAL_TIM_Encoder_MspInit+0x204>)
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002522:	4b12      	ldr	r3, [pc, #72]	; (800256c <HAL_TIM_Encoder_MspInit+0x204>)
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	4a11      	ldr	r2, [pc, #68]	; (800256c <HAL_TIM_Encoder_MspInit+0x204>)
 8002528:	f043 0304 	orr.w	r3, r3, #4
 800252c:	6193      	str	r3, [r2, #24]
 800252e:	4b0f      	ldr	r3, [pc, #60]	; (800256c <HAL_TIM_Encoder_MspInit+0x204>)
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	60bb      	str	r3, [r7, #8]
 8002538:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_REAR_RIGHT_IN_1_Pin|ENCODER_REAR_RIGHT_IN_2_Pin;
 800253a:	2303      	movs	r3, #3
 800253c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800253e:	2300      	movs	r3, #0
 8002540:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002542:	2300      	movs	r3, #0
 8002544:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002546:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800254a:	4619      	mov	r1, r3
 800254c:	4808      	ldr	r0, [pc, #32]	; (8002570 <HAL_TIM_Encoder_MspInit+0x208>)
 800254e:	f001 f973 	bl	8003838 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 4, 0);
 8002552:	2200      	movs	r2, #0
 8002554:	2104      	movs	r1, #4
 8002556:	2032      	movs	r0, #50	; 0x32
 8002558:	f000 ffd8 	bl	800350c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800255c:	2032      	movs	r0, #50	; 0x32
 800255e:	f001 f801 	bl	8003564 <HAL_NVIC_EnableIRQ>
}
 8002562:	bf00      	nop
 8002564:	3740      	adds	r7, #64	; 0x40
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40021000 	.word	0x40021000
 8002570:	40010800 	.word	0x40010800
 8002574:	40010c00 	.word	0x40010c00
 8002578:	40010000 	.word	0x40010000
 800257c:	40000400 	.word	0x40000400
 8002580:	40000800 	.word	0x40000800
 8002584:	40000c00 	.word	0x40000c00

08002588 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002590:	f107 0310 	add.w	r3, r7, #16
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM8)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a10      	ldr	r2, [pc, #64]	; (80025e4 <HAL_TIM_MspPostInit+0x5c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d118      	bne.n	80025da <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025a8:	4b0f      	ldr	r3, [pc, #60]	; (80025e8 <HAL_TIM_MspPostInit+0x60>)
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	4a0e      	ldr	r2, [pc, #56]	; (80025e8 <HAL_TIM_MspPostInit+0x60>)
 80025ae:	f043 0310 	orr.w	r3, r3, #16
 80025b2:	6193      	str	r3, [r2, #24]
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <HAL_TIM_MspPostInit+0x60>)
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	f003 0310 	and.w	r3, r3, #16
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	68fb      	ldr	r3, [r7, #12]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_REAR_RIGHT_PWM_Pin|MOTOR_REAR_LEFT_PWM_Pin|MOTOR_FRONT_RIGHT_PWM_Pin|MOTOR_FRONT_LEFT_PWM_Pin;
 80025c0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80025c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c6:	2302      	movs	r3, #2
 80025c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025ca:	2303      	movs	r3, #3
 80025cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ce:	f107 0310 	add.w	r3, r7, #16
 80025d2:	4619      	mov	r1, r3
 80025d4:	4805      	ldr	r0, [pc, #20]	; (80025ec <HAL_TIM_MspPostInit+0x64>)
 80025d6:	f001 f92f 	bl	8003838 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80025da:	bf00      	nop
 80025dc:	3720      	adds	r7, #32
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40013400 	.word	0x40013400
 80025e8:	40021000 	.word	0x40021000
 80025ec:	40011000 	.word	0x40011000

080025f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08a      	sub	sp, #40	; 0x28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f8:	f107 0318 	add.w	r3, r7, #24
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	605a      	str	r2, [r3, #4]
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a40      	ldr	r2, [pc, #256]	; (800270c <HAL_UART_MspInit+0x11c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d13a      	bne.n	8002686 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002610:	4b3f      	ldr	r3, [pc, #252]	; (8002710 <HAL_UART_MspInit+0x120>)
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	4a3e      	ldr	r2, [pc, #248]	; (8002710 <HAL_UART_MspInit+0x120>)
 8002616:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800261a:	61d3      	str	r3, [r2, #28]
 800261c:	4b3c      	ldr	r3, [pc, #240]	; (8002710 <HAL_UART_MspInit+0x120>)
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002628:	4b39      	ldr	r3, [pc, #228]	; (8002710 <HAL_UART_MspInit+0x120>)
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	4a38      	ldr	r2, [pc, #224]	; (8002710 <HAL_UART_MspInit+0x120>)
 800262e:	f043 0310 	orr.w	r3, r3, #16
 8002632:	6193      	str	r3, [r2, #24]
 8002634:	4b36      	ldr	r3, [pc, #216]	; (8002710 <HAL_UART_MspInit+0x120>)
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	f003 0310 	and.w	r3, r3, #16
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = MASTER_USART_TX_Pin;
 8002640:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002646:	2302      	movs	r3, #2
 8002648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800264a:	2303      	movs	r3, #3
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MASTER_USART_TX_GPIO_Port, &GPIO_InitStruct);
 800264e:	f107 0318 	add.w	r3, r7, #24
 8002652:	4619      	mov	r1, r3
 8002654:	482f      	ldr	r0, [pc, #188]	; (8002714 <HAL_UART_MspInit+0x124>)
 8002656:	f001 f8ef 	bl	8003838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MASTER_USART_RX_Pin;
 800265a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800265e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002660:	2300      	movs	r3, #0
 8002662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002664:	2300      	movs	r3, #0
 8002666:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MASTER_USART_RX_GPIO_Port, &GPIO_InitStruct);
 8002668:	f107 0318 	add.w	r3, r7, #24
 800266c:	4619      	mov	r1, r3
 800266e:	4829      	ldr	r0, [pc, #164]	; (8002714 <HAL_UART_MspInit+0x124>)
 8002670:	f001 f8e2 	bl	8003838 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002674:	2200      	movs	r2, #0
 8002676:	2105      	movs	r1, #5
 8002678:	2034      	movs	r0, #52	; 0x34
 800267a:	f000 ff47 	bl	800350c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800267e:	2034      	movs	r0, #52	; 0x34
 8002680:	f000 ff70 	bl	8003564 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002684:	e03e      	b.n	8002704 <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART1)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a23      	ldr	r2, [pc, #140]	; (8002718 <HAL_UART_MspInit+0x128>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d139      	bne.n	8002704 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002690:	4b1f      	ldr	r3, [pc, #124]	; (8002710 <HAL_UART_MspInit+0x120>)
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	4a1e      	ldr	r2, [pc, #120]	; (8002710 <HAL_UART_MspInit+0x120>)
 8002696:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800269a:	6193      	str	r3, [r2, #24]
 800269c:	4b1c      	ldr	r3, [pc, #112]	; (8002710 <HAL_UART_MspInit+0x120>)
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a8:	4b19      	ldr	r3, [pc, #100]	; (8002710 <HAL_UART_MspInit+0x120>)
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	4a18      	ldr	r2, [pc, #96]	; (8002710 <HAL_UART_MspInit+0x120>)
 80026ae:	f043 0304 	orr.w	r3, r3, #4
 80026b2:	6193      	str	r3, [r2, #24]
 80026b4:	4b16      	ldr	r3, [pc, #88]	; (8002710 <HAL_UART_MspInit+0x120>)
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	60bb      	str	r3, [r7, #8]
 80026be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CONSOLE_USART_TX_Pin;
 80026c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c6:	2302      	movs	r3, #2
 80026c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026ca:	2303      	movs	r3, #3
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CONSOLE_USART_TX_GPIO_Port, &GPIO_InitStruct);
 80026ce:	f107 0318 	add.w	r3, r7, #24
 80026d2:	4619      	mov	r1, r3
 80026d4:	4811      	ldr	r0, [pc, #68]	; (800271c <HAL_UART_MspInit+0x12c>)
 80026d6:	f001 f8af 	bl	8003838 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CONSOLE_USART_RX_Pin;
 80026da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(CONSOLE_USART_RX_GPIO_Port, &GPIO_InitStruct);
 80026e8:	f107 0318 	add.w	r3, r7, #24
 80026ec:	4619      	mov	r1, r3
 80026ee:	480b      	ldr	r0, [pc, #44]	; (800271c <HAL_UART_MspInit+0x12c>)
 80026f0:	f001 f8a2 	bl	8003838 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80026f4:	2200      	movs	r2, #0
 80026f6:	2105      	movs	r1, #5
 80026f8:	2025      	movs	r0, #37	; 0x25
 80026fa:	f000 ff07 	bl	800350c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026fe:	2025      	movs	r0, #37	; 0x25
 8002700:	f000 ff30 	bl	8003564 <HAL_NVIC_EnableIRQ>
}
 8002704:	bf00      	nop
 8002706:	3728      	adds	r7, #40	; 0x28
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40004c00 	.word	0x40004c00
 8002710:	40021000 	.word	0x40021000
 8002714:	40011000 	.word	0x40011000
 8002718:	40013800 	.word	0x40013800
 800271c:	40010800 	.word	0x40010800

08002720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  LOG_error("NMI_Handler() triggered");
 8002724:	4902      	ldr	r1, [pc, #8]	; (8002730 <NMI_Handler+0x10>)
 8002726:	2003      	movs	r0, #3
 8002728:	f008 f90a 	bl	800a940 <LOG_log>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800272c:	e7fe      	b.n	800272c <NMI_Handler+0xc>
 800272e:	bf00      	nop
 8002730:	0800ea60 	.word	0x0800ea60

08002734 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  LOG_error("HardFault_Handler() triggered");
 8002738:	4902      	ldr	r1, [pc, #8]	; (8002744 <HardFault_Handler+0x10>)
 800273a:	2003      	movs	r0, #3
 800273c:	f008 f900 	bl	800a940 <LOG_log>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002740:	e7fe      	b.n	8002740 <HardFault_Handler+0xc>
 8002742:	bf00      	nop
 8002744:	0800ea78 	.word	0x0800ea78

08002748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  LOG_error("MemManage_Handler() triggered");
 800274c:	4902      	ldr	r1, [pc, #8]	; (8002758 <MemManage_Handler+0x10>)
 800274e:	2003      	movs	r0, #3
 8002750:	f008 f8f6 	bl	800a940 <LOG_log>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002754:	e7fe      	b.n	8002754 <MemManage_Handler+0xc>
 8002756:	bf00      	nop
 8002758:	0800ea98 	.word	0x0800ea98

0800275c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  LOG_error("BusFault_Handler() triggered");
 8002760:	4902      	ldr	r1, [pc, #8]	; (800276c <BusFault_Handler+0x10>)
 8002762:	2003      	movs	r0, #3
 8002764:	f008 f8ec 	bl	800a940 <LOG_log>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002768:	e7fe      	b.n	8002768 <BusFault_Handler+0xc>
 800276a:	bf00      	nop
 800276c:	0800eab8 	.word	0x0800eab8

08002770 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  LOG_error("UsageFault_Handler() triggered");
 8002774:	4902      	ldr	r1, [pc, #8]	; (8002780 <UsageFault_Handler+0x10>)
 8002776:	2003      	movs	r0, #3
 8002778:	f008 f8e2 	bl	800a940 <LOG_log>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800277c:	e7fe      	b.n	800277c <UsageFault_Handler+0xc>
 800277e:	bf00      	nop
 8002780:	0800ead8 	.word	0x0800ead8

08002784 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
  LOG_error("SVC_Handler() triggered");
 8002788:	4902      	ldr	r1, [pc, #8]	; (8002794 <SVC_Handler+0x10>)
 800278a:	2003      	movs	r0, #3
 800278c:	f008 f8d8 	bl	800a940 <LOG_log>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002790:	bf00      	nop
 8002792:	bd80      	pop	{r7, pc}
 8002794:	0800eaf8 	.word	0x0800eaf8

08002798 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  LOG_error("DebugMon_Handler() triggered");
 800279c:	4902      	ldr	r1, [pc, #8]	; (80027a8 <DebugMon_Handler+0x10>)
 800279e:	2003      	movs	r0, #3
 80027a0:	f008 f8ce 	bl	800a940 <LOG_log>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027a4:	bf00      	nop
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	0800eb10 	.word	0x0800eb10

080027ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  LOG_error("PendSV_Handler() triggered");
 80027b0:	4902      	ldr	r1, [pc, #8]	; (80027bc <PendSV_Handler+0x10>)
 80027b2:	2003      	movs	r0, #3
 80027b4:	f008 f8c4 	bl	800a940 <LOG_log>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027b8:	bf00      	nop
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	0800eb30 	.word	0x0800eb30

080027c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027c4:	f000 f988 	bl	8002ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027c8:	bf00      	nop
 80027ca:	bd80      	pop	{r7, pc}

080027cc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80027d0:	4802      	ldr	r0, [pc, #8]	; (80027dc <TIM1_UP_IRQHandler+0x10>)
 80027d2:	f004 f847 	bl	8006864 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20000914 	.word	0x20000914

080027e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027e4:	4802      	ldr	r0, [pc, #8]	; (80027f0 <TIM2_IRQHandler+0x10>)
 80027e6:	f004 f83d 	bl	8006864 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20000a40 	.word	0x20000a40

080027f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80027f8:	4802      	ldr	r0, [pc, #8]	; (8002804 <TIM3_IRQHandler+0x10>)
 80027fa:	f004 f833 	bl	8006864 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	200006f4 	.word	0x200006f4

08002808 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800280c:	4802      	ldr	r0, [pc, #8]	; (8002818 <TIM4_IRQHandler+0x10>)
 800280e:	f004 f829 	bl	8006864 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	2000058c 	.word	0x2000058c

0800281c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002820:	4802      	ldr	r0, [pc, #8]	; (800282c <USART1_IRQHandler+0x10>)
 8002822:	f005 fd7f 	bl	8008324 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	200007d8 	.word	0x200007d8

08002830 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002834:	4802      	ldr	r0, [pc, #8]	; (8002840 <TIM5_IRQHandler+0x10>)
 8002836:	f004 f815 	bl	8006864 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	20000640 	.word	0x20000640

08002844 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002848:	4802      	ldr	r0, [pc, #8]	; (8002854 <UART4_IRQHandler+0x10>)
 800284a:	f005 fd6b 	bl	8008324 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	200009cc 	.word	0x200009cc

08002858 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
	return 1;
 800285c:	2301      	movs	r3, #1
}
 800285e:	4618      	mov	r0, r3
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <_kill>:

int _kill(int pid, int sig)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b082      	sub	sp, #8
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002870:	f008 fe40 	bl	800b4f4 <__errno>
 8002874:	4603      	mov	r3, r0
 8002876:	2216      	movs	r2, #22
 8002878:	601a      	str	r2, [r3, #0]
	return -1;
 800287a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <_exit>:

void _exit (int status)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b082      	sub	sp, #8
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800288e:	f04f 31ff 	mov.w	r1, #4294967295
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff ffe7 	bl	8002866 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002898:	e7fe      	b.n	8002898 <_exit+0x12>

0800289a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b086      	sub	sp, #24
 800289e:	af00      	add	r7, sp, #0
 80028a0:	60f8      	str	r0, [r7, #12]
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	e00a      	b.n	80028c2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80028ac:	f3af 8000 	nop.w
 80028b0:	4601      	mov	r1, r0
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	60ba      	str	r2, [r7, #8]
 80028b8:	b2ca      	uxtb	r2, r1
 80028ba:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	3301      	adds	r3, #1
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	dbf0      	blt.n	80028ac <_read+0x12>
	}

return len;
 80028ca:	687b      	ldr	r3, [r7, #4]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3718      	adds	r7, #24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
  if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d00a      	beq.n	80028fc <_write+0x28>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d007      	beq.n	80028fc <_write+0x28>
  {
    errno = EBADF;
 80028ec:	f008 fe02 	bl	800b4f4 <__errno>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2209      	movs	r2, #9
 80028f4:	601a      	str	r2, [r3, #0]
    return -1;
 80028f6:	f04f 33ff 	mov.w	r3, #4294967295
 80028fa:	e00f      	b.n	800291c <_write+0x48>
  }

  if (g_MAIN_printOutput == MAIN_PRINT_OUTPUT_TO_CONSOLE)
 80028fc:	4b09      	ldr	r3, [pc, #36]	; (8002924 <_write+0x50>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d105      	bne.n	8002910 <_write+0x3c>
  {
    CON_sendString(ptr, len);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4619      	mov	r1, r3
 8002908:	68b8      	ldr	r0, [r7, #8]
 800290a:	f006 fceb 	bl	80092e4 <CON_sendString>
 800290e:	e004      	b.n	800291a <_write+0x46>
  }
  else
  {
    MAS_sendString(ptr, len);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4619      	mov	r1, r3
 8002914:	68b8      	ldr	r0, [r7, #8]
 8002916:	f008 f921 	bl	800ab5c <MAS_sendString>
  }

  return len;
 800291a:	687b      	ldr	r3, [r7, #4]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	200009c8 	.word	0x200009c8

08002928 <_close>:

int _close(int file)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
	return -1;
 8002930:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002934:	4618      	mov	r0, r3
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr

0800293e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
 8002946:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800294e:	605a      	str	r2, [r3, #4]
	return 0;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr

0800295c <_isatty>:

int _isatty(int file)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
	return 1;
 8002964:	2301      	movs	r3, #1
}
 8002966:	4618      	mov	r0, r3
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr

08002970 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
	return 0;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr

08002988 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002990:	4a14      	ldr	r2, [pc, #80]	; (80029e4 <_sbrk+0x5c>)
 8002992:	4b15      	ldr	r3, [pc, #84]	; (80029e8 <_sbrk+0x60>)
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800299c:	4b13      	ldr	r3, [pc, #76]	; (80029ec <_sbrk+0x64>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d102      	bne.n	80029aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029a4:	4b11      	ldr	r3, [pc, #68]	; (80029ec <_sbrk+0x64>)
 80029a6:	4a12      	ldr	r2, [pc, #72]	; (80029f0 <_sbrk+0x68>)
 80029a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029aa:	4b10      	ldr	r3, [pc, #64]	; (80029ec <_sbrk+0x64>)
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4413      	add	r3, r2
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d207      	bcs.n	80029c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029b8:	f008 fd9c 	bl	800b4f4 <__errno>
 80029bc:	4603      	mov	r3, r0
 80029be:	220c      	movs	r2, #12
 80029c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029c2:	f04f 33ff 	mov.w	r3, #4294967295
 80029c6:	e009      	b.n	80029dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029c8:	4b08      	ldr	r3, [pc, #32]	; (80029ec <_sbrk+0x64>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029ce:	4b07      	ldr	r3, [pc, #28]	; (80029ec <_sbrk+0x64>)
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4413      	add	r3, r2
 80029d6:	4a05      	ldr	r2, [pc, #20]	; (80029ec <_sbrk+0x64>)
 80029d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029da:	68fb      	ldr	r3, [r7, #12]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3718      	adds	r7, #24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	2000c000 	.word	0x2000c000
 80029e8:	00000400 	.word	0x00000400
 80029ec:	20000220 	.word	0x20000220
 80029f0:	20000bc0 	.word	0x20000bc0

080029f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029f8:	bf00      	nop
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a00:	480c      	ldr	r0, [pc, #48]	; (8002a34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a02:	490d      	ldr	r1, [pc, #52]	; (8002a38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a04:	4a0d      	ldr	r2, [pc, #52]	; (8002a3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a08:	e002      	b.n	8002a10 <LoopCopyDataInit>

08002a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a0e:	3304      	adds	r3, #4

08002a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a14:	d3f9      	bcc.n	8002a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a16:	4a0a      	ldr	r2, [pc, #40]	; (8002a40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a18:	4c0a      	ldr	r4, [pc, #40]	; (8002a44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a1c:	e001      	b.n	8002a22 <LoopFillZerobss>

08002a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a20:	3204      	adds	r2, #4

08002a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a24:	d3fb      	bcc.n	8002a1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a26:	f7ff ffe5 	bl	80029f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a2a:	f008 fd69 	bl	800b500 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002a2e:	f7fe fc89 	bl	8001344 <main>
  bx lr
 8002a32:	4770      	bx	lr
  ldr r0, =_sdata
 8002a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a38:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002a3c:	0800f944 	.word	0x0800f944
  ldr r2, =_sbss
 8002a40:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002a44:	20000bbc 	.word	0x20000bbc

08002a48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a48:	e7fe      	b.n	8002a48 <ADC1_2_IRQHandler>
	...

08002a4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a50:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <HAL_Init+0x28>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a07      	ldr	r2, [pc, #28]	; (8002a74 <HAL_Init+0x28>)
 8002a56:	f043 0310 	orr.w	r3, r3, #16
 8002a5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a5c:	2003      	movs	r0, #3
 8002a5e:	f000 fd35 	bl	80034cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a62:	2000      	movs	r0, #0
 8002a64:	f000 f808 	bl	8002a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a68:	f7ff fb8a 	bl	8002180 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40022000 	.word	0x40022000

08002a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a80:	4b12      	ldr	r3, [pc, #72]	; (8002acc <HAL_InitTick+0x54>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <HAL_InitTick+0x58>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	4619      	mov	r1, r3
 8002a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 fd80 	bl	800359c <HAL_SYSTICK_Config>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e00e      	b.n	8002ac4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b0f      	cmp	r3, #15
 8002aaa:	d80a      	bhi.n	8002ac2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aac:	2200      	movs	r2, #0
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab4:	f000 fd2a 	bl	800350c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ab8:	4a06      	ldr	r2, [pc, #24]	; (8002ad4 <HAL_InitTick+0x5c>)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	e000      	b.n	8002ac4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	20000000 	.word	0x20000000
 8002ad0:	20000008 	.word	0x20000008
 8002ad4:	20000004 	.word	0x20000004

08002ad8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002adc:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <HAL_IncTick+0x1c>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <HAL_IncTick+0x20>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	4a03      	ldr	r2, [pc, #12]	; (8002af8 <HAL_IncTick+0x20>)
 8002aea:	6013      	str	r3, [r2, #0]
}
 8002aec:	bf00      	nop
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr
 8002af4:	20000008 	.word	0x20000008
 8002af8:	20000ba8 	.word	0x20000ba8

08002afc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  return uwTick;
 8002b00:	4b02      	ldr	r3, [pc, #8]	; (8002b0c <HAL_GetTick+0x10>)
 8002b02:	681b      	ldr	r3, [r3, #0]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr
 8002b0c:	20000ba8 	.word	0x20000ba8

08002b10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b18:	f7ff fff0 	bl	8002afc <HAL_GetTick>
 8002b1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b28:	d005      	beq.n	8002b36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b2a:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <HAL_Delay+0x44>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	461a      	mov	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	4413      	add	r3, r2
 8002b34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b36:	bf00      	nop
 8002b38:	f7ff ffe0 	bl	8002afc <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d8f7      	bhi.n	8002b38 <HAL_Delay+0x28>
  {
  }
}
 8002b48:	bf00      	nop
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20000008 	.word	0x20000008

08002b58 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b60:	2300      	movs	r3, #0
 8002b62:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e188      	b.n	8002e8c <HAL_ADC_Init+0x334>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a8c      	ldr	r2, [pc, #560]	; (8002db0 <HAL_ADC_Init+0x258>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d00e      	beq.n	8002ba2 <HAL_ADC_Init+0x4a>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a8a      	ldr	r2, [pc, #552]	; (8002db4 <HAL_ADC_Init+0x25c>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d009      	beq.n	8002ba2 <HAL_ADC_Init+0x4a>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a89      	ldr	r2, [pc, #548]	; (8002db8 <HAL_ADC_Init+0x260>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d004      	beq.n	8002ba2 <HAL_ADC_Init+0x4a>
 8002b98:	f240 11b3 	movw	r1, #435	; 0x1b3
 8002b9c:	4887      	ldr	r0, [pc, #540]	; (8002dbc <HAL_ADC_Init+0x264>)
 8002b9e:	f7ff fadd 	bl	800215c <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d009      	beq.n	8002bbe <HAL_ADC_Init+0x66>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bb2:	d004      	beq.n	8002bbe <HAL_ADC_Init+0x66>
 8002bb4:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8002bb8:	4880      	ldr	r0, [pc, #512]	; (8002dbc <HAL_ADC_Init+0x264>)
 8002bba:	f7ff facf 	bl	800215c <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d009      	beq.n	8002bda <HAL_ADC_Init+0x82>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bce:	d004      	beq.n	8002bda <HAL_ADC_Init+0x82>
 8002bd0:	f240 11b5 	movw	r1, #437	; 0x1b5
 8002bd4:	4879      	ldr	r0, [pc, #484]	; (8002dbc <HAL_ADC_Init+0x264>)
 8002bd6:	f7ff fac1 	bl	800215c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	7b1b      	ldrb	r3, [r3, #12]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d008      	beq.n	8002bf4 <HAL_ADC_Init+0x9c>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	7b1b      	ldrb	r3, [r3, #12]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d004      	beq.n	8002bf4 <HAL_ADC_Init+0x9c>
 8002bea:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8002bee:	4873      	ldr	r0, [pc, #460]	; (8002dbc <HAL_ADC_Init+0x264>)
 8002bf0:	f7ff fab4 	bl	800215c <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d044      	beq.n	8002c86 <HAL_ADC_Init+0x12e>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c04:	d03f      	beq.n	8002c86 <HAL_ADC_Init+0x12e>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69db      	ldr	r3, [r3, #28]
 8002c0a:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8002c0e:	d03a      	beq.n	8002c86 <HAL_ADC_Init+0x12e>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	69db      	ldr	r3, [r3, #28]
 8002c14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c18:	d035      	beq.n	8002c86 <HAL_ADC_Init+0x12e>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8002c22:	d030      	beq.n	8002c86 <HAL_ADC_Init+0x12e>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	69db      	ldr	r3, [r3, #28]
 8002c28:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002c2c:	d02b      	beq.n	8002c86 <HAL_ADC_Init+0x12e>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d027      	beq.n	8002c86 <HAL_ADC_Init+0x12e>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c3e:	d022      	beq.n	8002c86 <HAL_ADC_Init+0x12e>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	69db      	ldr	r3, [r3, #28]
 8002c44:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8002c48:	d01d      	beq.n	8002c86 <HAL_ADC_Init+0x12e>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8002c52:	d018      	beq.n	8002c86 <HAL_ADC_Init+0x12e>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002c5c:	d013      	beq.n	8002c86 <HAL_ADC_Init+0x12e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c66:	d00e      	beq.n	8002c86 <HAL_ADC_Init+0x12e>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002c70:	d009      	beq.n	8002c86 <HAL_ADC_Init+0x12e>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002c7a:	d004      	beq.n	8002c86 <HAL_ADC_Init+0x12e>
 8002c7c:	f240 11b7 	movw	r1, #439	; 0x1b7
 8002c80:	484e      	ldr	r0, [pc, #312]	; (8002dbc <HAL_ADC_Init+0x264>)
 8002c82:	f7ff fa6b 	bl	800215c <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d02a      	beq.n	8002ce4 <HAL_ADC_Init+0x18c>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_ADC_Init+0x146>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	2b10      	cmp	r3, #16
 8002c9c:	d904      	bls.n	8002ca8 <HAL_ADC_Init+0x150>
 8002c9e:	f240 11bb 	movw	r1, #443	; 0x1bb
 8002ca2:	4846      	ldr	r0, [pc, #280]	; (8002dbc <HAL_ADC_Init+0x264>)
 8002ca4:	f7ff fa5a 	bl	800215c <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	7d1b      	ldrb	r3, [r3, #20]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d008      	beq.n	8002cc2 <HAL_ADC_Init+0x16a>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	7d1b      	ldrb	r3, [r3, #20]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d004      	beq.n	8002cc2 <HAL_ADC_Init+0x16a>
 8002cb8:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8002cbc:	483f      	ldr	r0, [pc, #252]	; (8002dbc <HAL_ADC_Init+0x264>)
 8002cbe:	f7ff fa4d 	bl	800215c <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	7d1b      	ldrb	r3, [r3, #20]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00c      	beq.n	8002ce4 <HAL_ADC_Init+0x18c>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_ADC_Init+0x182>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d904      	bls.n	8002ce4 <HAL_ADC_Init+0x18c>
 8002cda:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002cde:	4837      	ldr	r0, [pc, #220]	; (8002dbc <HAL_ADC_Init+0x264>)
 8002ce0:	f7ff fa3c 	bl	800215c <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d109      	bne.n	8002d00 <HAL_ADC_Init+0x1a8>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7ff fa72 	bl	80021e4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 fabf 	bl	8003284 <ADC_ConversionStop_Disable>
 8002d06:	4603      	mov	r3, r0
 8002d08:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0e:	f003 0310 	and.w	r3, r3, #16
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f040 80b1 	bne.w	8002e7a <HAL_ADC_Init+0x322>
 8002d18:	7dfb      	ldrb	r3, [r7, #23]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f040 80ad 	bne.w	8002e7a <HAL_ADC_Init+0x322>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d24:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d28:	f023 0302 	bic.w	r3, r3, #2
 8002d2c:	f043 0202 	orr.w	r2, r3, #2
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	491e      	ldr	r1, [pc, #120]	; (8002db8 <HAL_ADC_Init+0x260>)
 8002d3e:	428b      	cmp	r3, r1
 8002d40:	d10a      	bne.n	8002d58 <HAL_ADC_Init+0x200>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002d4a:	d002      	beq.n	8002d52 <HAL_ADC_Init+0x1fa>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	e004      	b.n	8002d5c <HAL_ADC_Init+0x204>
 8002d52:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002d56:	e001      	b.n	8002d5c <HAL_ADC_Init+0x204>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d5c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	7b1b      	ldrb	r3, [r3, #12]
 8002d62:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002d64:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d74:	d003      	beq.n	8002d7e <HAL_ADC_Init+0x226>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d102      	bne.n	8002d84 <HAL_ADC_Init+0x22c>
 8002d7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d82:	e000      	b.n	8002d86 <HAL_ADC_Init+0x22e>
 8002d84:	2300      	movs	r3, #0
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	7d1b      	ldrb	r3, [r3, #20]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d121      	bne.n	8002dd8 <HAL_ADC_Init+0x280>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	7b1b      	ldrb	r3, [r3, #12]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d111      	bne.n	8002dc0 <HAL_ADC_Init+0x268>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	3b01      	subs	r3, #1
 8002da2:	035a      	lsls	r2, r3, #13
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	e013      	b.n	8002dd8 <HAL_ADC_Init+0x280>
 8002db0:	40012400 	.word	0x40012400
 8002db4:	40012800 	.word	0x40012800
 8002db8:	40013c00 	.word	0x40013c00
 8002dbc:	0800eb4c 	.word	0x0800eb4c
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc4:	f043 0220 	orr.w	r2, r3, #32
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd0:	f043 0201 	orr.w	r2, r3, #1
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	4b28      	ldr	r3, [pc, #160]	; (8002e94 <HAL_ADC_Init+0x33c>)
 8002df4:	4013      	ands	r3, r2
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6812      	ldr	r2, [r2, #0]
 8002dfa:	68b9      	ldr	r1, [r7, #8]
 8002dfc:	430b      	orrs	r3, r1
 8002dfe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e08:	d003      	beq.n	8002e12 <HAL_ADC_Init+0x2ba>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d104      	bne.n	8002e1c <HAL_ADC_Init+0x2c4>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	3b01      	subs	r3, #1
 8002e18:	051b      	lsls	r3, r3, #20
 8002e1a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e22:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	4b18      	ldr	r3, [pc, #96]	; (8002e98 <HAL_ADC_Init+0x340>)
 8002e38:	4013      	ands	r3, r2
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d10b      	bne.n	8002e58 <HAL_ADC_Init+0x300>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e4a:	f023 0303 	bic.w	r3, r3, #3
 8002e4e:	f043 0201 	orr.w	r2, r3, #1
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e56:	e018      	b.n	8002e8a <HAL_ADC_Init+0x332>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5c:	f023 0312 	bic.w	r3, r3, #18
 8002e60:	f043 0210 	orr.w	r2, r3, #16
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6c:	f043 0201 	orr.w	r2, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002e78:	e007      	b.n	8002e8a <HAL_ADC_Init+0x332>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7e:	f043 0210 	orr.w	r2, r3, #16
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	ffe1f7fd 	.word	0xffe1f7fd
 8002e98:	ff1f0efe 	.word	0xff1f0efe

08002e9c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a0c      	ldr	r2, [pc, #48]	; (8002edc <HAL_ADC_GetValue+0x40>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d00e      	beq.n	8002ecc <HAL_ADC_GetValue+0x30>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a0b      	ldr	r2, [pc, #44]	; (8002ee0 <HAL_ADC_GetValue+0x44>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d009      	beq.n	8002ecc <HAL_ADC_GetValue+0x30>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a09      	ldr	r2, [pc, #36]	; (8002ee4 <HAL_ADC_GetValue+0x48>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d004      	beq.n	8002ecc <HAL_ADC_GetValue+0x30>
 8002ec2:	f240 61ef 	movw	r1, #1775	; 0x6ef
 8002ec6:	4808      	ldr	r0, [pc, #32]	; (8002ee8 <HAL_ADC_GetValue+0x4c>)
 8002ec8:	f7ff f948 	bl	800215c <assert_failed>

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40012400 	.word	0x40012400
 8002ee0:	40012800 	.word	0x40012800
 8002ee4:	40013c00 	.word	0x40013c00
 8002ee8:	0800eb4c 	.word	0x0800eb4c

08002eec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002efa:	2300      	movs	r3, #0
 8002efc:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a8b      	ldr	r2, [pc, #556]	; (8003130 <HAL_ADC_ConfigChannel+0x244>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d00e      	beq.n	8002f26 <HAL_ADC_ConfigChannel+0x3a>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a89      	ldr	r2, [pc, #548]	; (8003134 <HAL_ADC_ConfigChannel+0x248>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d009      	beq.n	8002f26 <HAL_ADC_ConfigChannel+0x3a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a88      	ldr	r2, [pc, #544]	; (8003138 <HAL_ADC_ConfigChannel+0x24c>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d004      	beq.n	8002f26 <HAL_ADC_ConfigChannel+0x3a>
 8002f1c:	f240 71dd 	movw	r1, #2013	; 0x7dd
 8002f20:	4886      	ldr	r0, [pc, #536]	; (800313c <HAL_ADC_ConfigChannel+0x250>)
 8002f22:	f7ff f91b 	bl	800215c <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d048      	beq.n	8002fc0 <HAL_ADC_ConfigChannel+0xd4>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d044      	beq.n	8002fc0 <HAL_ADC_ConfigChannel+0xd4>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d040      	beq.n	8002fc0 <HAL_ADC_ConfigChannel+0xd4>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d03c      	beq.n	8002fc0 <HAL_ADC_ConfigChannel+0xd4>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d038      	beq.n	8002fc0 <HAL_ADC_ConfigChannel+0xd4>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b05      	cmp	r3, #5
 8002f54:	d034      	beq.n	8002fc0 <HAL_ADC_ConfigChannel+0xd4>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2b06      	cmp	r3, #6
 8002f5c:	d030      	beq.n	8002fc0 <HAL_ADC_ConfigChannel+0xd4>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2b07      	cmp	r3, #7
 8002f64:	d02c      	beq.n	8002fc0 <HAL_ADC_ConfigChannel+0xd4>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b08      	cmp	r3, #8
 8002f6c:	d028      	beq.n	8002fc0 <HAL_ADC_ConfigChannel+0xd4>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b09      	cmp	r3, #9
 8002f74:	d024      	beq.n	8002fc0 <HAL_ADC_ConfigChannel+0xd4>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2b0a      	cmp	r3, #10
 8002f7c:	d020      	beq.n	8002fc0 <HAL_ADC_ConfigChannel+0xd4>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b0b      	cmp	r3, #11
 8002f84:	d01c      	beq.n	8002fc0 <HAL_ADC_ConfigChannel+0xd4>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b0c      	cmp	r3, #12
 8002f8c:	d018      	beq.n	8002fc0 <HAL_ADC_ConfigChannel+0xd4>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2b0d      	cmp	r3, #13
 8002f94:	d014      	beq.n	8002fc0 <HAL_ADC_ConfigChannel+0xd4>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b0e      	cmp	r3, #14
 8002f9c:	d010      	beq.n	8002fc0 <HAL_ADC_ConfigChannel+0xd4>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b0f      	cmp	r3, #15
 8002fa4:	d00c      	beq.n	8002fc0 <HAL_ADC_ConfigChannel+0xd4>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2b10      	cmp	r3, #16
 8002fac:	d008      	beq.n	8002fc0 <HAL_ADC_ConfigChannel+0xd4>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2b11      	cmp	r3, #17
 8002fb4:	d004      	beq.n	8002fc0 <HAL_ADC_ConfigChannel+0xd4>
 8002fb6:	f240 71de 	movw	r1, #2014	; 0x7de
 8002fba:	4860      	ldr	r0, [pc, #384]	; (800313c <HAL_ADC_ConfigChannel+0x250>)
 8002fbc:	f7ff f8ce 	bl	800215c <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d040      	beq.n	800304a <HAL_ADC_ConfigChannel+0x15e>
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d03c      	beq.n	800304a <HAL_ADC_ConfigChannel+0x15e>
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b03      	cmp	r3, #3
 8002fd6:	d038      	beq.n	800304a <HAL_ADC_ConfigChannel+0x15e>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b04      	cmp	r3, #4
 8002fde:	d034      	beq.n	800304a <HAL_ADC_ConfigChannel+0x15e>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	2b05      	cmp	r3, #5
 8002fe6:	d030      	beq.n	800304a <HAL_ADC_ConfigChannel+0x15e>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b06      	cmp	r3, #6
 8002fee:	d02c      	beq.n	800304a <HAL_ADC_ConfigChannel+0x15e>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2b07      	cmp	r3, #7
 8002ff6:	d028      	beq.n	800304a <HAL_ADC_ConfigChannel+0x15e>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	d024      	beq.n	800304a <HAL_ADC_ConfigChannel+0x15e>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b09      	cmp	r3, #9
 8003006:	d020      	beq.n	800304a <HAL_ADC_ConfigChannel+0x15e>
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	2b0a      	cmp	r3, #10
 800300e:	d01c      	beq.n	800304a <HAL_ADC_ConfigChannel+0x15e>
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b0b      	cmp	r3, #11
 8003016:	d018      	beq.n	800304a <HAL_ADC_ConfigChannel+0x15e>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b0c      	cmp	r3, #12
 800301e:	d014      	beq.n	800304a <HAL_ADC_ConfigChannel+0x15e>
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2b0d      	cmp	r3, #13
 8003026:	d010      	beq.n	800304a <HAL_ADC_ConfigChannel+0x15e>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b0e      	cmp	r3, #14
 800302e:	d00c      	beq.n	800304a <HAL_ADC_ConfigChannel+0x15e>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b0f      	cmp	r3, #15
 8003036:	d008      	beq.n	800304a <HAL_ADC_ConfigChannel+0x15e>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b10      	cmp	r3, #16
 800303e:	d004      	beq.n	800304a <HAL_ADC_ConfigChannel+0x15e>
 8003040:	f240 71df 	movw	r1, #2015	; 0x7df
 8003044:	483d      	ldr	r0, [pc, #244]	; (800313c <HAL_ADC_ConfigChannel+0x250>)
 8003046:	f7ff f889 	bl	800215c <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d020      	beq.n	8003094 <HAL_ADC_ConfigChannel+0x1a8>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d01c      	beq.n	8003094 <HAL_ADC_ConfigChannel+0x1a8>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b02      	cmp	r3, #2
 8003060:	d018      	beq.n	8003094 <HAL_ADC_ConfigChannel+0x1a8>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2b03      	cmp	r3, #3
 8003068:	d014      	beq.n	8003094 <HAL_ADC_ConfigChannel+0x1a8>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	2b04      	cmp	r3, #4
 8003070:	d010      	beq.n	8003094 <HAL_ADC_ConfigChannel+0x1a8>
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	2b05      	cmp	r3, #5
 8003078:	d00c      	beq.n	8003094 <HAL_ADC_ConfigChannel+0x1a8>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	2b06      	cmp	r3, #6
 8003080:	d008      	beq.n	8003094 <HAL_ADC_ConfigChannel+0x1a8>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	2b07      	cmp	r3, #7
 8003088:	d004      	beq.n	8003094 <HAL_ADC_ConfigChannel+0x1a8>
 800308a:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 800308e:	482b      	ldr	r0, [pc, #172]	; (800313c <HAL_ADC_ConfigChannel+0x250>)
 8003090:	f7ff f864 	bl	800215c <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800309a:	2b01      	cmp	r3, #1
 800309c:	d101      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x1b6>
 800309e:	2302      	movs	r3, #2
 80030a0:	e0e5      	b.n	800326e <HAL_ADC_ConfigChannel+0x382>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b06      	cmp	r3, #6
 80030b0:	d81c      	bhi.n	80030ec <HAL_ADC_ConfigChannel+0x200>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	3b05      	subs	r3, #5
 80030c4:	221f      	movs	r2, #31
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	43db      	mvns	r3, r3
 80030cc:	4019      	ands	r1, r3
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	3b05      	subs	r3, #5
 80030de:	fa00 f203 	lsl.w	r2, r0, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	635a      	str	r2, [r3, #52]	; 0x34
 80030ea:	e045      	b.n	8003178 <HAL_ADC_ConfigChannel+0x28c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b0c      	cmp	r3, #12
 80030f2:	d825      	bhi.n	8003140 <HAL_ADC_ConfigChannel+0x254>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	4613      	mov	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	3b23      	subs	r3, #35	; 0x23
 8003106:	221f      	movs	r2, #31
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	4019      	ands	r1, r3
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	6818      	ldr	r0, [r3, #0]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	3b23      	subs	r3, #35	; 0x23
 8003120:	fa00 f203 	lsl.w	r2, r0, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	631a      	str	r2, [r3, #48]	; 0x30
 800312c:	e024      	b.n	8003178 <HAL_ADC_ConfigChannel+0x28c>
 800312e:	bf00      	nop
 8003130:	40012400 	.word	0x40012400
 8003134:	40012800 	.word	0x40012800
 8003138:	40013c00 	.word	0x40013c00
 800313c:	0800eb4c 	.word	0x0800eb4c
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	3b41      	subs	r3, #65	; 0x41
 8003152:	221f      	movs	r2, #31
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	43db      	mvns	r3, r3
 800315a:	4019      	ands	r1, r3
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	6818      	ldr	r0, [r3, #0]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685a      	ldr	r2, [r3, #4]
 8003164:	4613      	mov	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	3b41      	subs	r3, #65	; 0x41
 800316c:	fa00 f203 	lsl.w	r2, r0, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2b09      	cmp	r3, #9
 800317e:	d91c      	bls.n	80031ba <HAL_ADC_ConfigChannel+0x2ce>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68d9      	ldr	r1, [r3, #12]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	4613      	mov	r3, r2
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	4413      	add	r3, r2
 8003190:	3b1e      	subs	r3, #30
 8003192:	2207      	movs	r2, #7
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	43db      	mvns	r3, r3
 800319a:	4019      	ands	r1, r3
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	6898      	ldr	r0, [r3, #8]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	4613      	mov	r3, r2
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	4413      	add	r3, r2
 80031aa:	3b1e      	subs	r3, #30
 80031ac:	fa00 f203 	lsl.w	r2, r0, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	60da      	str	r2, [r3, #12]
 80031b8:	e019      	b.n	80031ee <HAL_ADC_ConfigChannel+0x302>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6919      	ldr	r1, [r3, #16]
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	4613      	mov	r3, r2
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	4413      	add	r3, r2
 80031ca:	2207      	movs	r2, #7
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	43db      	mvns	r3, r3
 80031d2:	4019      	ands	r1, r3
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	6898      	ldr	r0, [r3, #8]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	4613      	mov	r3, r2
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	4413      	add	r3, r2
 80031e2:	fa00 f203 	lsl.w	r2, r0, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b10      	cmp	r3, #16
 80031f4:	d003      	beq.n	80031fe <HAL_ADC_ConfigChannel+0x312>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80031fa:	2b11      	cmp	r3, #17
 80031fc:	d132      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x378>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a1d      	ldr	r2, [pc, #116]	; (8003278 <HAL_ADC_ConfigChannel+0x38c>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d125      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x368>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d126      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x378>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689a      	ldr	r2, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003224:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b10      	cmp	r3, #16
 800322c:	d11a      	bne.n	8003264 <HAL_ADC_ConfigChannel+0x378>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800322e:	4b13      	ldr	r3, [pc, #76]	; (800327c <HAL_ADC_ConfigChannel+0x390>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a13      	ldr	r2, [pc, #76]	; (8003280 <HAL_ADC_ConfigChannel+0x394>)
 8003234:	fba2 2303 	umull	r2, r3, r2, r3
 8003238:	0c9a      	lsrs	r2, r3, #18
 800323a:	4613      	mov	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003244:	e002      	b.n	800324c <HAL_ADC_ConfigChannel+0x360>
          {
            wait_loop_index--;
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	3b01      	subs	r3, #1
 800324a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1f9      	bne.n	8003246 <HAL_ADC_ConfigChannel+0x35a>
 8003252:	e007      	b.n	8003264 <HAL_ADC_ConfigChannel+0x378>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003258:	f043 0220 	orr.w	r2, r3, #32
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800326c:	7bfb      	ldrb	r3, [r7, #15]
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40012400 	.word	0x40012400
 800327c:	20000000 	.word	0x20000000
 8003280:	431bde83 	.word	0x431bde83

08003284 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b01      	cmp	r3, #1
 800329c:	d12e      	bne.n	80032fc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0201 	bic.w	r2, r2, #1
 80032ac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032ae:	f7ff fc25 	bl	8002afc <HAL_GetTick>
 80032b2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80032b4:	e01b      	b.n	80032ee <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032b6:	f7ff fc21 	bl	8002afc <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d914      	bls.n	80032ee <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d10d      	bne.n	80032ee <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d6:	f043 0210 	orr.w	r2, r3, #16
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e2:	f043 0201 	orr.w	r2, r3, #1
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e007      	b.n	80032fe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d0dc      	beq.n	80032b6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003318:	4b0c      	ldr	r3, [pc, #48]	; (800334c <__NVIC_SetPriorityGrouping+0x44>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003324:	4013      	ands	r3, r2
 8003326:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003330:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800333a:	4a04      	ldr	r2, [pc, #16]	; (800334c <__NVIC_SetPriorityGrouping+0x44>)
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	60d3      	str	r3, [r2, #12]
}
 8003340:	bf00      	nop
 8003342:	3714      	adds	r7, #20
 8003344:	46bd      	mov	sp, r7
 8003346:	bc80      	pop	{r7}
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	e000ed00 	.word	0xe000ed00

08003350 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003354:	4b04      	ldr	r3, [pc, #16]	; (8003368 <__NVIC_GetPriorityGrouping+0x18>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	0a1b      	lsrs	r3, r3, #8
 800335a:	f003 0307 	and.w	r3, r3, #7
}
 800335e:	4618      	mov	r0, r3
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	e000ed00 	.word	0xe000ed00

0800336c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	4603      	mov	r3, r0
 8003374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337a:	2b00      	cmp	r3, #0
 800337c:	db0b      	blt.n	8003396 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800337e:	79fb      	ldrb	r3, [r7, #7]
 8003380:	f003 021f 	and.w	r2, r3, #31
 8003384:	4906      	ldr	r1, [pc, #24]	; (80033a0 <__NVIC_EnableIRQ+0x34>)
 8003386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338a:	095b      	lsrs	r3, r3, #5
 800338c:	2001      	movs	r0, #1
 800338e:	fa00 f202 	lsl.w	r2, r0, r2
 8003392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr
 80033a0:	e000e100 	.word	0xe000e100

080033a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	4603      	mov	r3, r0
 80033ac:	6039      	str	r1, [r7, #0]
 80033ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	db0a      	blt.n	80033ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	490c      	ldr	r1, [pc, #48]	; (80033f0 <__NVIC_SetPriority+0x4c>)
 80033be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c2:	0112      	lsls	r2, r2, #4
 80033c4:	b2d2      	uxtb	r2, r2
 80033c6:	440b      	add	r3, r1
 80033c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033cc:	e00a      	b.n	80033e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	4908      	ldr	r1, [pc, #32]	; (80033f4 <__NVIC_SetPriority+0x50>)
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	3b04      	subs	r3, #4
 80033dc:	0112      	lsls	r2, r2, #4
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	440b      	add	r3, r1
 80033e2:	761a      	strb	r2, [r3, #24]
}
 80033e4:	bf00      	nop
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bc80      	pop	{r7}
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	e000e100 	.word	0xe000e100
 80033f4:	e000ed00 	.word	0xe000ed00

080033f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b089      	sub	sp, #36	; 0x24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f1c3 0307 	rsb	r3, r3, #7
 8003412:	2b04      	cmp	r3, #4
 8003414:	bf28      	it	cs
 8003416:	2304      	movcs	r3, #4
 8003418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	3304      	adds	r3, #4
 800341e:	2b06      	cmp	r3, #6
 8003420:	d902      	bls.n	8003428 <NVIC_EncodePriority+0x30>
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	3b03      	subs	r3, #3
 8003426:	e000      	b.n	800342a <NVIC_EncodePriority+0x32>
 8003428:	2300      	movs	r3, #0
 800342a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800342c:	f04f 32ff 	mov.w	r2, #4294967295
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	43da      	mvns	r2, r3
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	401a      	ands	r2, r3
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003440:	f04f 31ff 	mov.w	r1, #4294967295
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	fa01 f303 	lsl.w	r3, r1, r3
 800344a:	43d9      	mvns	r1, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003450:	4313      	orrs	r3, r2
         );
}
 8003452:	4618      	mov	r0, r3
 8003454:	3724      	adds	r7, #36	; 0x24
 8003456:	46bd      	mov	sp, r7
 8003458:	bc80      	pop	{r7}
 800345a:	4770      	bx	lr

0800345c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003460:	f3bf 8f4f 	dsb	sy
}
 8003464:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003466:	4b06      	ldr	r3, [pc, #24]	; (8003480 <__NVIC_SystemReset+0x24>)
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800346e:	4904      	ldr	r1, [pc, #16]	; (8003480 <__NVIC_SystemReset+0x24>)
 8003470:	4b04      	ldr	r3, [pc, #16]	; (8003484 <__NVIC_SystemReset+0x28>)
 8003472:	4313      	orrs	r3, r2
 8003474:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003476:	f3bf 8f4f 	dsb	sy
}
 800347a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800347c:	bf00      	nop
 800347e:	e7fd      	b.n	800347c <__NVIC_SystemReset+0x20>
 8003480:	e000ed00 	.word	0xe000ed00
 8003484:	05fa0004 	.word	0x05fa0004

08003488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3b01      	subs	r3, #1
 8003494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003498:	d301      	bcc.n	800349e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800349a:	2301      	movs	r3, #1
 800349c:	e00f      	b.n	80034be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800349e:	4a0a      	ldr	r2, [pc, #40]	; (80034c8 <SysTick_Config+0x40>)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034a6:	210f      	movs	r1, #15
 80034a8:	f04f 30ff 	mov.w	r0, #4294967295
 80034ac:	f7ff ff7a 	bl	80033a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034b0:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <SysTick_Config+0x40>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034b6:	4b04      	ldr	r3, [pc, #16]	; (80034c8 <SysTick_Config+0x40>)
 80034b8:	2207      	movs	r2, #7
 80034ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	e000e010 	.word	0xe000e010

080034cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b07      	cmp	r3, #7
 80034d8:	d00f      	beq.n	80034fa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b06      	cmp	r3, #6
 80034de:	d00c      	beq.n	80034fa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b05      	cmp	r3, #5
 80034e4:	d009      	beq.n	80034fa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d006      	beq.n	80034fa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	d003      	beq.n	80034fa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80034f2:	2192      	movs	r1, #146	; 0x92
 80034f4:	4804      	ldr	r0, [pc, #16]	; (8003508 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80034f6:	f7fe fe31 	bl	800215c <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f7ff ff04 	bl	8003308 <__NVIC_SetPriorityGrouping>
}
 8003500:	bf00      	nop
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	0800eb84 	.word	0x0800eb84

0800350c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	4603      	mov	r3, r0
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
 8003518:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800351a:	2300      	movs	r3, #0
 800351c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b0f      	cmp	r3, #15
 8003522:	d903      	bls.n	800352c <HAL_NVIC_SetPriority+0x20>
 8003524:	21aa      	movs	r1, #170	; 0xaa
 8003526:	480e      	ldr	r0, [pc, #56]	; (8003560 <HAL_NVIC_SetPriority+0x54>)
 8003528:	f7fe fe18 	bl	800215c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	2b0f      	cmp	r3, #15
 8003530:	d903      	bls.n	800353a <HAL_NVIC_SetPriority+0x2e>
 8003532:	21ab      	movs	r1, #171	; 0xab
 8003534:	480a      	ldr	r0, [pc, #40]	; (8003560 <HAL_NVIC_SetPriority+0x54>)
 8003536:	f7fe fe11 	bl	800215c <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800353a:	f7ff ff09 	bl	8003350 <__NVIC_GetPriorityGrouping>
 800353e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	68b9      	ldr	r1, [r7, #8]
 8003544:	6978      	ldr	r0, [r7, #20]
 8003546:	f7ff ff57 	bl	80033f8 <NVIC_EncodePriority>
 800354a:	4602      	mov	r2, r0
 800354c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003550:	4611      	mov	r1, r2
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff ff26 	bl	80033a4 <__NVIC_SetPriority>
}
 8003558:	bf00      	nop
 800355a:	3718      	adds	r7, #24
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	0800eb84 	.word	0x0800eb84

08003564 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	4603      	mov	r3, r0
 800356c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800356e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003572:	2b00      	cmp	r3, #0
 8003574:	da03      	bge.n	800357e <HAL_NVIC_EnableIRQ+0x1a>
 8003576:	21be      	movs	r1, #190	; 0xbe
 8003578:	4805      	ldr	r0, [pc, #20]	; (8003590 <HAL_NVIC_EnableIRQ+0x2c>)
 800357a:	f7fe fdef 	bl	800215c <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800357e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff fef2 	bl	800336c <__NVIC_EnableIRQ>
}
 8003588:	bf00      	nop
 800358a:	3708      	adds	r7, #8
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	0800eb84 	.word	0x0800eb84

08003594 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003598:	f7ff ff60 	bl	800345c <__NVIC_SystemReset>

0800359c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7ff ff6f 	bl	8003488 <SysTick_Config>
 80035aa:	4603      	mov	r3, r0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035bc:	2300      	movs	r3, #0
 80035be:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d008      	beq.n	80035dc <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2204      	movs	r2, #4
 80035ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e020      	b.n	800361e <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 020e 	bic.w	r2, r2, #14
 80035ea:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 0201 	bic.w	r2, r2, #1
 80035fa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003604:	2101      	movs	r1, #1
 8003606:	fa01 f202 	lsl.w	r2, r1, r2
 800360a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800361c:	7bfb      	ldrb	r3, [r7, #15]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	bc80      	pop	{r7}
 8003626:	4770      	bx	lr

08003628 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003630:	2300      	movs	r3, #0
 8003632:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800363a:	2b02      	cmp	r3, #2
 800363c:	d005      	beq.n	800364a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2204      	movs	r2, #4
 8003642:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	73fb      	strb	r3, [r7, #15]
 8003648:	e0d6      	b.n	80037f8 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 020e 	bic.w	r2, r2, #14
 8003658:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0201 	bic.w	r2, r2, #1
 8003668:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	461a      	mov	r2, r3
 8003670:	4b64      	ldr	r3, [pc, #400]	; (8003804 <HAL_DMA_Abort_IT+0x1dc>)
 8003672:	429a      	cmp	r2, r3
 8003674:	d958      	bls.n	8003728 <HAL_DMA_Abort_IT+0x100>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a63      	ldr	r2, [pc, #396]	; (8003808 <HAL_DMA_Abort_IT+0x1e0>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d04f      	beq.n	8003720 <HAL_DMA_Abort_IT+0xf8>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a61      	ldr	r2, [pc, #388]	; (800380c <HAL_DMA_Abort_IT+0x1e4>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d048      	beq.n	800371c <HAL_DMA_Abort_IT+0xf4>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a60      	ldr	r2, [pc, #384]	; (8003810 <HAL_DMA_Abort_IT+0x1e8>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d040      	beq.n	8003716 <HAL_DMA_Abort_IT+0xee>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a5e      	ldr	r2, [pc, #376]	; (8003814 <HAL_DMA_Abort_IT+0x1ec>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d038      	beq.n	8003710 <HAL_DMA_Abort_IT+0xe8>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a5d      	ldr	r2, [pc, #372]	; (8003818 <HAL_DMA_Abort_IT+0x1f0>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d030      	beq.n	800370a <HAL_DMA_Abort_IT+0xe2>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a5b      	ldr	r2, [pc, #364]	; (800381c <HAL_DMA_Abort_IT+0x1f4>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d028      	beq.n	8003704 <HAL_DMA_Abort_IT+0xdc>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a53      	ldr	r2, [pc, #332]	; (8003804 <HAL_DMA_Abort_IT+0x1dc>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d020      	beq.n	80036fe <HAL_DMA_Abort_IT+0xd6>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a57      	ldr	r2, [pc, #348]	; (8003820 <HAL_DMA_Abort_IT+0x1f8>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d019      	beq.n	80036fa <HAL_DMA_Abort_IT+0xd2>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a56      	ldr	r2, [pc, #344]	; (8003824 <HAL_DMA_Abort_IT+0x1fc>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d012      	beq.n	80036f6 <HAL_DMA_Abort_IT+0xce>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a54      	ldr	r2, [pc, #336]	; (8003828 <HAL_DMA_Abort_IT+0x200>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d00a      	beq.n	80036f0 <HAL_DMA_Abort_IT+0xc8>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a53      	ldr	r2, [pc, #332]	; (800382c <HAL_DMA_Abort_IT+0x204>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d102      	bne.n	80036ea <HAL_DMA_Abort_IT+0xc2>
 80036e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036e8:	e01b      	b.n	8003722 <HAL_DMA_Abort_IT+0xfa>
 80036ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036ee:	e018      	b.n	8003722 <HAL_DMA_Abort_IT+0xfa>
 80036f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036f4:	e015      	b.n	8003722 <HAL_DMA_Abort_IT+0xfa>
 80036f6:	2310      	movs	r3, #16
 80036f8:	e013      	b.n	8003722 <HAL_DMA_Abort_IT+0xfa>
 80036fa:	2301      	movs	r3, #1
 80036fc:	e011      	b.n	8003722 <HAL_DMA_Abort_IT+0xfa>
 80036fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003702:	e00e      	b.n	8003722 <HAL_DMA_Abort_IT+0xfa>
 8003704:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003708:	e00b      	b.n	8003722 <HAL_DMA_Abort_IT+0xfa>
 800370a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800370e:	e008      	b.n	8003722 <HAL_DMA_Abort_IT+0xfa>
 8003710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003714:	e005      	b.n	8003722 <HAL_DMA_Abort_IT+0xfa>
 8003716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800371a:	e002      	b.n	8003722 <HAL_DMA_Abort_IT+0xfa>
 800371c:	2310      	movs	r3, #16
 800371e:	e000      	b.n	8003722 <HAL_DMA_Abort_IT+0xfa>
 8003720:	2301      	movs	r3, #1
 8003722:	4a43      	ldr	r2, [pc, #268]	; (8003830 <HAL_DMA_Abort_IT+0x208>)
 8003724:	6053      	str	r3, [r2, #4]
 8003726:	e057      	b.n	80037d8 <HAL_DMA_Abort_IT+0x1b0>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a36      	ldr	r2, [pc, #216]	; (8003808 <HAL_DMA_Abort_IT+0x1e0>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d04f      	beq.n	80037d2 <HAL_DMA_Abort_IT+0x1aa>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a35      	ldr	r2, [pc, #212]	; (800380c <HAL_DMA_Abort_IT+0x1e4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d048      	beq.n	80037ce <HAL_DMA_Abort_IT+0x1a6>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a33      	ldr	r2, [pc, #204]	; (8003810 <HAL_DMA_Abort_IT+0x1e8>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d040      	beq.n	80037c8 <HAL_DMA_Abort_IT+0x1a0>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a32      	ldr	r2, [pc, #200]	; (8003814 <HAL_DMA_Abort_IT+0x1ec>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d038      	beq.n	80037c2 <HAL_DMA_Abort_IT+0x19a>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a30      	ldr	r2, [pc, #192]	; (8003818 <HAL_DMA_Abort_IT+0x1f0>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d030      	beq.n	80037bc <HAL_DMA_Abort_IT+0x194>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a2f      	ldr	r2, [pc, #188]	; (800381c <HAL_DMA_Abort_IT+0x1f4>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d028      	beq.n	80037b6 <HAL_DMA_Abort_IT+0x18e>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a26      	ldr	r2, [pc, #152]	; (8003804 <HAL_DMA_Abort_IT+0x1dc>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d020      	beq.n	80037b0 <HAL_DMA_Abort_IT+0x188>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a2b      	ldr	r2, [pc, #172]	; (8003820 <HAL_DMA_Abort_IT+0x1f8>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d019      	beq.n	80037ac <HAL_DMA_Abort_IT+0x184>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a29      	ldr	r2, [pc, #164]	; (8003824 <HAL_DMA_Abort_IT+0x1fc>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d012      	beq.n	80037a8 <HAL_DMA_Abort_IT+0x180>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a28      	ldr	r2, [pc, #160]	; (8003828 <HAL_DMA_Abort_IT+0x200>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d00a      	beq.n	80037a2 <HAL_DMA_Abort_IT+0x17a>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a26      	ldr	r2, [pc, #152]	; (800382c <HAL_DMA_Abort_IT+0x204>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d102      	bne.n	800379c <HAL_DMA_Abort_IT+0x174>
 8003796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800379a:	e01b      	b.n	80037d4 <HAL_DMA_Abort_IT+0x1ac>
 800379c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037a0:	e018      	b.n	80037d4 <HAL_DMA_Abort_IT+0x1ac>
 80037a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037a6:	e015      	b.n	80037d4 <HAL_DMA_Abort_IT+0x1ac>
 80037a8:	2310      	movs	r3, #16
 80037aa:	e013      	b.n	80037d4 <HAL_DMA_Abort_IT+0x1ac>
 80037ac:	2301      	movs	r3, #1
 80037ae:	e011      	b.n	80037d4 <HAL_DMA_Abort_IT+0x1ac>
 80037b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037b4:	e00e      	b.n	80037d4 <HAL_DMA_Abort_IT+0x1ac>
 80037b6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80037ba:	e00b      	b.n	80037d4 <HAL_DMA_Abort_IT+0x1ac>
 80037bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037c0:	e008      	b.n	80037d4 <HAL_DMA_Abort_IT+0x1ac>
 80037c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037c6:	e005      	b.n	80037d4 <HAL_DMA_Abort_IT+0x1ac>
 80037c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037cc:	e002      	b.n	80037d4 <HAL_DMA_Abort_IT+0x1ac>
 80037ce:	2310      	movs	r3, #16
 80037d0:	e000      	b.n	80037d4 <HAL_DMA_Abort_IT+0x1ac>
 80037d2:	2301      	movs	r3, #1
 80037d4:	4a17      	ldr	r2, [pc, #92]	; (8003834 <HAL_DMA_Abort_IT+0x20c>)
 80037d6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	4798      	blx	r3
    } 
  }
  return status;
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40020080 	.word	0x40020080
 8003808:	40020008 	.word	0x40020008
 800380c:	4002001c 	.word	0x4002001c
 8003810:	40020030 	.word	0x40020030
 8003814:	40020044 	.word	0x40020044
 8003818:	40020058 	.word	0x40020058
 800381c:	4002006c 	.word	0x4002006c
 8003820:	40020408 	.word	0x40020408
 8003824:	4002041c 	.word	0x4002041c
 8003828:	40020430 	.word	0x40020430
 800382c:	40020444 	.word	0x40020444
 8003830:	40020400 	.word	0x40020400
 8003834:	40020000 	.word	0x40020000

08003838 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08a      	sub	sp, #40	; 0x28
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003842:	2300      	movs	r3, #0
 8003844:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003846:	2300      	movs	r3, #0
 8003848:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4aa9      	ldr	r2, [pc, #676]	; (8003af4 <HAL_GPIO_Init+0x2bc>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d01b      	beq.n	800388a <HAL_GPIO_Init+0x52>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4aa8      	ldr	r2, [pc, #672]	; (8003af8 <HAL_GPIO_Init+0x2c0>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d017      	beq.n	800388a <HAL_GPIO_Init+0x52>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4aa7      	ldr	r2, [pc, #668]	; (8003afc <HAL_GPIO_Init+0x2c4>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d013      	beq.n	800388a <HAL_GPIO_Init+0x52>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4aa6      	ldr	r2, [pc, #664]	; (8003b00 <HAL_GPIO_Init+0x2c8>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d00f      	beq.n	800388a <HAL_GPIO_Init+0x52>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4aa5      	ldr	r2, [pc, #660]	; (8003b04 <HAL_GPIO_Init+0x2cc>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d00b      	beq.n	800388a <HAL_GPIO_Init+0x52>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4aa4      	ldr	r2, [pc, #656]	; (8003b08 <HAL_GPIO_Init+0x2d0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d007      	beq.n	800388a <HAL_GPIO_Init+0x52>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4aa3      	ldr	r2, [pc, #652]	; (8003b0c <HAL_GPIO_Init+0x2d4>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d003      	beq.n	800388a <HAL_GPIO_Init+0x52>
 8003882:	21bd      	movs	r1, #189	; 0xbd
 8003884:	48a2      	ldr	r0, [pc, #648]	; (8003b10 <HAL_GPIO_Init+0x2d8>)
 8003886:	f7fe fc69 	bl	800215c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	b29b      	uxth	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	d005      	beq.n	80038a0 <HAL_GPIO_Init+0x68>
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	0c1b      	lsrs	r3, r3, #16
 800389a:	041b      	lsls	r3, r3, #16
 800389c:	2b00      	cmp	r3, #0
 800389e:	d003      	beq.n	80038a8 <HAL_GPIO_Init+0x70>
 80038a0:	21be      	movs	r1, #190	; 0xbe
 80038a2:	489b      	ldr	r0, [pc, #620]	; (8003b10 <HAL_GPIO_Init+0x2d8>)
 80038a4:	f7fe fc5a 	bl	800215c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 8235 	beq.w	8003d1c <HAL_GPIO_Init+0x4e4>
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	f000 8230 	beq.w	8003d1c <HAL_GPIO_Init+0x4e4>
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	2b11      	cmp	r3, #17
 80038c2:	f000 822b 	beq.w	8003d1c <HAL_GPIO_Init+0x4e4>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	f000 8226 	beq.w	8003d1c <HAL_GPIO_Init+0x4e4>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2b12      	cmp	r3, #18
 80038d6:	f000 8221 	beq.w	8003d1c <HAL_GPIO_Init+0x4e4>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	4a8d      	ldr	r2, [pc, #564]	; (8003b14 <HAL_GPIO_Init+0x2dc>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	f000 821b 	beq.w	8003d1c <HAL_GPIO_Init+0x4e4>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	4a8b      	ldr	r2, [pc, #556]	; (8003b18 <HAL_GPIO_Init+0x2e0>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	f000 8215 	beq.w	8003d1c <HAL_GPIO_Init+0x4e4>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	4a89      	ldr	r2, [pc, #548]	; (8003b1c <HAL_GPIO_Init+0x2e4>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	f000 820f 	beq.w	8003d1c <HAL_GPIO_Init+0x4e4>
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	4a87      	ldr	r2, [pc, #540]	; (8003b20 <HAL_GPIO_Init+0x2e8>)
 8003904:	4293      	cmp	r3, r2
 8003906:	f000 8209 	beq.w	8003d1c <HAL_GPIO_Init+0x4e4>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	4a85      	ldr	r2, [pc, #532]	; (8003b24 <HAL_GPIO_Init+0x2ec>)
 8003910:	4293      	cmp	r3, r2
 8003912:	f000 8203 	beq.w	8003d1c <HAL_GPIO_Init+0x4e4>
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	4a83      	ldr	r2, [pc, #524]	; (8003b28 <HAL_GPIO_Init+0x2f0>)
 800391c:	4293      	cmp	r3, r2
 800391e:	f000 81fd 	beq.w	8003d1c <HAL_GPIO_Init+0x4e4>
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2b03      	cmp	r3, #3
 8003928:	f000 81f8 	beq.w	8003d1c <HAL_GPIO_Init+0x4e4>
 800392c:	21bf      	movs	r1, #191	; 0xbf
 800392e:	4878      	ldr	r0, [pc, #480]	; (8003b10 <HAL_GPIO_Init+0x2d8>)
 8003930:	f7fe fc14 	bl	800215c <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003934:	e1f2      	b.n	8003d1c <HAL_GPIO_Init+0x4e4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003936:	2201      	movs	r2, #1
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	69fa      	ldr	r2, [r7, #28]
 8003946:	4013      	ands	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	429a      	cmp	r2, r3
 8003950:	f040 81e1 	bne.w	8003d16 <HAL_GPIO_Init+0x4de>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a67      	ldr	r2, [pc, #412]	; (8003af4 <HAL_GPIO_Init+0x2bc>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d01b      	beq.n	8003994 <HAL_GPIO_Init+0x15c>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a66      	ldr	r2, [pc, #408]	; (8003af8 <HAL_GPIO_Init+0x2c0>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d017      	beq.n	8003994 <HAL_GPIO_Init+0x15c>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a65      	ldr	r2, [pc, #404]	; (8003afc <HAL_GPIO_Init+0x2c4>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d013      	beq.n	8003994 <HAL_GPIO_Init+0x15c>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a64      	ldr	r2, [pc, #400]	; (8003b00 <HAL_GPIO_Init+0x2c8>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d00f      	beq.n	8003994 <HAL_GPIO_Init+0x15c>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a63      	ldr	r2, [pc, #396]	; (8003b04 <HAL_GPIO_Init+0x2cc>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d00b      	beq.n	8003994 <HAL_GPIO_Init+0x15c>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a62      	ldr	r2, [pc, #392]	; (8003b08 <HAL_GPIO_Init+0x2d0>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d007      	beq.n	8003994 <HAL_GPIO_Init+0x15c>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a61      	ldr	r2, [pc, #388]	; (8003b0c <HAL_GPIO_Init+0x2d4>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d003      	beq.n	8003994 <HAL_GPIO_Init+0x15c>
 800398c:	21cd      	movs	r1, #205	; 0xcd
 800398e:	4860      	ldr	r0, [pc, #384]	; (8003b10 <HAL_GPIO_Init+0x2d8>)
 8003990:	f7fe fbe4 	bl	800215c <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	4a63      	ldr	r2, [pc, #396]	; (8003b28 <HAL_GPIO_Init+0x2f0>)
 800399a:	4293      	cmp	r3, r2
 800399c:	f000 80c6 	beq.w	8003b2c <HAL_GPIO_Init+0x2f4>
 80039a0:	4a61      	ldr	r2, [pc, #388]	; (8003b28 <HAL_GPIO_Init+0x2f0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	f200 80ec 	bhi.w	8003b80 <HAL_GPIO_Init+0x348>
 80039a8:	4a5c      	ldr	r2, [pc, #368]	; (8003b1c <HAL_GPIO_Init+0x2e4>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	f000 80be 	beq.w	8003b2c <HAL_GPIO_Init+0x2f4>
 80039b0:	4a5a      	ldr	r2, [pc, #360]	; (8003b1c <HAL_GPIO_Init+0x2e4>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	f200 80e4 	bhi.w	8003b80 <HAL_GPIO_Init+0x348>
 80039b8:	4a5a      	ldr	r2, [pc, #360]	; (8003b24 <HAL_GPIO_Init+0x2ec>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	f000 80b6 	beq.w	8003b2c <HAL_GPIO_Init+0x2f4>
 80039c0:	4a58      	ldr	r2, [pc, #352]	; (8003b24 <HAL_GPIO_Init+0x2ec>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	f200 80dc 	bhi.w	8003b80 <HAL_GPIO_Init+0x348>
 80039c8:	4a53      	ldr	r2, [pc, #332]	; (8003b18 <HAL_GPIO_Init+0x2e0>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	f000 80ae 	beq.w	8003b2c <HAL_GPIO_Init+0x2f4>
 80039d0:	4a51      	ldr	r2, [pc, #324]	; (8003b18 <HAL_GPIO_Init+0x2e0>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	f200 80d4 	bhi.w	8003b80 <HAL_GPIO_Init+0x348>
 80039d8:	4a51      	ldr	r2, [pc, #324]	; (8003b20 <HAL_GPIO_Init+0x2e8>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	f000 80a6 	beq.w	8003b2c <HAL_GPIO_Init+0x2f4>
 80039e0:	4a4f      	ldr	r2, [pc, #316]	; (8003b20 <HAL_GPIO_Init+0x2e8>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	f200 80cc 	bhi.w	8003b80 <HAL_GPIO_Init+0x348>
 80039e8:	2b12      	cmp	r3, #18
 80039ea:	d82b      	bhi.n	8003a44 <HAL_GPIO_Init+0x20c>
 80039ec:	2b12      	cmp	r3, #18
 80039ee:	f200 80c7 	bhi.w	8003b80 <HAL_GPIO_Init+0x348>
 80039f2:	a201      	add	r2, pc, #4	; (adr r2, 80039f8 <HAL_GPIO_Init+0x1c0>)
 80039f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f8:	08003b2d 	.word	0x08003b2d
 80039fc:	08003a4d 	.word	0x08003a4d
 8003a00:	08003a9f 	.word	0x08003a9f
 8003a04:	08003b7b 	.word	0x08003b7b
 8003a08:	08003b81 	.word	0x08003b81
 8003a0c:	08003b81 	.word	0x08003b81
 8003a10:	08003b81 	.word	0x08003b81
 8003a14:	08003b81 	.word	0x08003b81
 8003a18:	08003b81 	.word	0x08003b81
 8003a1c:	08003b81 	.word	0x08003b81
 8003a20:	08003b81 	.word	0x08003b81
 8003a24:	08003b81 	.word	0x08003b81
 8003a28:	08003b81 	.word	0x08003b81
 8003a2c:	08003b81 	.word	0x08003b81
 8003a30:	08003b81 	.word	0x08003b81
 8003a34:	08003b81 	.word	0x08003b81
 8003a38:	08003b81 	.word	0x08003b81
 8003a3c:	08003a75 	.word	0x08003a75
 8003a40:	08003ac9 	.word	0x08003ac9
 8003a44:	4a33      	ldr	r2, [pc, #204]	; (8003b14 <HAL_GPIO_Init+0x2dc>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d070      	beq.n	8003b2c <HAL_GPIO_Init+0x2f4>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003a4a:	e099      	b.n	8003b80 <HAL_GPIO_Init+0x348>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d00b      	beq.n	8003a6c <HAL_GPIO_Init+0x234>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d007      	beq.n	8003a6c <HAL_GPIO_Init+0x234>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	2b03      	cmp	r3, #3
 8003a62:	d003      	beq.n	8003a6c <HAL_GPIO_Init+0x234>
 8003a64:	21d5      	movs	r1, #213	; 0xd5
 8003a66:	482a      	ldr	r0, [pc, #168]	; (8003b10 <HAL_GPIO_Init+0x2d8>)
 8003a68:	f7fe fb78 	bl	800215c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	623b      	str	r3, [r7, #32]
          break;
 8003a72:	e086      	b.n	8003b82 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d00b      	beq.n	8003a94 <HAL_GPIO_Init+0x25c>
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d007      	beq.n	8003a94 <HAL_GPIO_Init+0x25c>
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	2b03      	cmp	r3, #3
 8003a8a:	d003      	beq.n	8003a94 <HAL_GPIO_Init+0x25c>
 8003a8c:	21dc      	movs	r1, #220	; 0xdc
 8003a8e:	4820      	ldr	r0, [pc, #128]	; (8003b10 <HAL_GPIO_Init+0x2d8>)
 8003a90:	f7fe fb64 	bl	800215c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	623b      	str	r3, [r7, #32]
          break;
 8003a9c:	e071      	b.n	8003b82 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d00b      	beq.n	8003abe <HAL_GPIO_Init+0x286>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d007      	beq.n	8003abe <HAL_GPIO_Init+0x286>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	2b03      	cmp	r3, #3
 8003ab4:	d003      	beq.n	8003abe <HAL_GPIO_Init+0x286>
 8003ab6:	21e3      	movs	r1, #227	; 0xe3
 8003ab8:	4815      	ldr	r0, [pc, #84]	; (8003b10 <HAL_GPIO_Init+0x2d8>)
 8003aba:	f7fe fb4f 	bl	800215c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	3308      	adds	r3, #8
 8003ac4:	623b      	str	r3, [r7, #32]
          break;
 8003ac6:	e05c      	b.n	8003b82 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d00b      	beq.n	8003ae8 <HAL_GPIO_Init+0x2b0>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d007      	beq.n	8003ae8 <HAL_GPIO_Init+0x2b0>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	2b03      	cmp	r3, #3
 8003ade:	d003      	beq.n	8003ae8 <HAL_GPIO_Init+0x2b0>
 8003ae0:	21ea      	movs	r1, #234	; 0xea
 8003ae2:	480b      	ldr	r0, [pc, #44]	; (8003b10 <HAL_GPIO_Init+0x2d8>)
 8003ae4:	f7fe fb3a 	bl	800215c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	330c      	adds	r3, #12
 8003aee:	623b      	str	r3, [r7, #32]
          break;
 8003af0:	e047      	b.n	8003b82 <HAL_GPIO_Init+0x34a>
 8003af2:	bf00      	nop
 8003af4:	40010800 	.word	0x40010800
 8003af8:	40010c00 	.word	0x40010c00
 8003afc:	40011000 	.word	0x40011000
 8003b00:	40011400 	.word	0x40011400
 8003b04:	40011800 	.word	0x40011800
 8003b08:	40011c00 	.word	0x40011c00
 8003b0c:	40012000 	.word	0x40012000
 8003b10:	0800ebc0 	.word	0x0800ebc0
 8003b14:	10110000 	.word	0x10110000
 8003b18:	10210000 	.word	0x10210000
 8003b1c:	10310000 	.word	0x10310000
 8003b20:	10120000 	.word	0x10120000
 8003b24:	10220000 	.word	0x10220000
 8003b28:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00b      	beq.n	8003b4c <HAL_GPIO_Init+0x314>
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d007      	beq.n	8003b4c <HAL_GPIO_Init+0x314>
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d003      	beq.n	8003b4c <HAL_GPIO_Init+0x314>
 8003b44:	21f7      	movs	r1, #247	; 0xf7
 8003b46:	487c      	ldr	r0, [pc, #496]	; (8003d38 <HAL_GPIO_Init+0x500>)
 8003b48:	f7fe fb08 	bl	800215c <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d102      	bne.n	8003b5a <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003b54:	2304      	movs	r3, #4
 8003b56:	623b      	str	r3, [r7, #32]
          break;
 8003b58:	e013      	b.n	8003b82 <HAL_GPIO_Init+0x34a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d105      	bne.n	8003b6e <HAL_GPIO_Init+0x336>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b62:	2308      	movs	r3, #8
 8003b64:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	69fa      	ldr	r2, [r7, #28]
 8003b6a:	611a      	str	r2, [r3, #16]
          break;
 8003b6c:	e009      	b.n	8003b82 <HAL_GPIO_Init+0x34a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003b6e:	2308      	movs	r3, #8
 8003b70:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69fa      	ldr	r2, [r7, #28]
 8003b76:	615a      	str	r2, [r3, #20]
          break;
 8003b78:	e003      	b.n	8003b82 <HAL_GPIO_Init+0x34a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	623b      	str	r3, [r7, #32]
          break;
 8003b7e:	e000      	b.n	8003b82 <HAL_GPIO_Init+0x34a>
          break;
 8003b80:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	2bff      	cmp	r3, #255	; 0xff
 8003b86:	d801      	bhi.n	8003b8c <HAL_GPIO_Init+0x354>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	e001      	b.n	8003b90 <HAL_GPIO_Init+0x358>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3304      	adds	r3, #4
 8003b90:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	2bff      	cmp	r3, #255	; 0xff
 8003b96:	d802      	bhi.n	8003b9e <HAL_GPIO_Init+0x366>
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	e002      	b.n	8003ba4 <HAL_GPIO_Init+0x36c>
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	3b08      	subs	r3, #8
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	210f      	movs	r1, #15
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb2:	43db      	mvns	r3, r3
 8003bb4:	401a      	ands	r2, r3
 8003bb6:	6a39      	ldr	r1, [r7, #32]
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	fa01 f303 	lsl.w	r3, r1, r3
 8003bbe:	431a      	orrs	r2, r3
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 80a2 	beq.w	8003d16 <HAL_GPIO_Init+0x4de>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003bd2:	4b5a      	ldr	r3, [pc, #360]	; (8003d3c <HAL_GPIO_Init+0x504>)
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	4a59      	ldr	r2, [pc, #356]	; (8003d3c <HAL_GPIO_Init+0x504>)
 8003bd8:	f043 0301 	orr.w	r3, r3, #1
 8003bdc:	6193      	str	r3, [r2, #24]
 8003bde:	4b57      	ldr	r3, [pc, #348]	; (8003d3c <HAL_GPIO_Init+0x504>)
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	60bb      	str	r3, [r7, #8]
 8003be8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003bea:	4a55      	ldr	r2, [pc, #340]	; (8003d40 <HAL_GPIO_Init+0x508>)
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	089b      	lsrs	r3, r3, #2
 8003bf0:	3302      	adds	r3, #2
 8003bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	220f      	movs	r2, #15
 8003c02:	fa02 f303 	lsl.w	r3, r2, r3
 8003c06:	43db      	mvns	r3, r3
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a4c      	ldr	r2, [pc, #304]	; (8003d44 <HAL_GPIO_Init+0x50c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d01f      	beq.n	8003c56 <HAL_GPIO_Init+0x41e>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a4b      	ldr	r2, [pc, #300]	; (8003d48 <HAL_GPIO_Init+0x510>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d019      	beq.n	8003c52 <HAL_GPIO_Init+0x41a>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a4a      	ldr	r2, [pc, #296]	; (8003d4c <HAL_GPIO_Init+0x514>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d013      	beq.n	8003c4e <HAL_GPIO_Init+0x416>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	4a49      	ldr	r2, [pc, #292]	; (8003d50 <HAL_GPIO_Init+0x518>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d00d      	beq.n	8003c4a <HAL_GPIO_Init+0x412>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a48      	ldr	r2, [pc, #288]	; (8003d54 <HAL_GPIO_Init+0x51c>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d007      	beq.n	8003c46 <HAL_GPIO_Init+0x40e>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a47      	ldr	r2, [pc, #284]	; (8003d58 <HAL_GPIO_Init+0x520>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d101      	bne.n	8003c42 <HAL_GPIO_Init+0x40a>
 8003c3e:	2305      	movs	r3, #5
 8003c40:	e00a      	b.n	8003c58 <HAL_GPIO_Init+0x420>
 8003c42:	2306      	movs	r3, #6
 8003c44:	e008      	b.n	8003c58 <HAL_GPIO_Init+0x420>
 8003c46:	2304      	movs	r3, #4
 8003c48:	e006      	b.n	8003c58 <HAL_GPIO_Init+0x420>
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e004      	b.n	8003c58 <HAL_GPIO_Init+0x420>
 8003c4e:	2302      	movs	r3, #2
 8003c50:	e002      	b.n	8003c58 <HAL_GPIO_Init+0x420>
 8003c52:	2301      	movs	r3, #1
 8003c54:	e000      	b.n	8003c58 <HAL_GPIO_Init+0x420>
 8003c56:	2300      	movs	r3, #0
 8003c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c5a:	f002 0203 	and.w	r2, r2, #3
 8003c5e:	0092      	lsls	r2, r2, #2
 8003c60:	4093      	lsls	r3, r2
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003c68:	4935      	ldr	r1, [pc, #212]	; (8003d40 <HAL_GPIO_Init+0x508>)
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	089b      	lsrs	r3, r3, #2
 8003c6e:	3302      	adds	r3, #2
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d006      	beq.n	8003c90 <HAL_GPIO_Init+0x458>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c82:	4b36      	ldr	r3, [pc, #216]	; (8003d5c <HAL_GPIO_Init+0x524>)
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	4935      	ldr	r1, [pc, #212]	; (8003d5c <HAL_GPIO_Init+0x524>)
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	600b      	str	r3, [r1, #0]
 8003c8e:	e006      	b.n	8003c9e <HAL_GPIO_Init+0x466>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003c90:	4b32      	ldr	r3, [pc, #200]	; (8003d5c <HAL_GPIO_Init+0x524>)
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	43db      	mvns	r3, r3
 8003c98:	4930      	ldr	r1, [pc, #192]	; (8003d5c <HAL_GPIO_Init+0x524>)
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d006      	beq.n	8003cb8 <HAL_GPIO_Init+0x480>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003caa:	4b2c      	ldr	r3, [pc, #176]	; (8003d5c <HAL_GPIO_Init+0x524>)
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	492b      	ldr	r1, [pc, #172]	; (8003d5c <HAL_GPIO_Init+0x524>)
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	604b      	str	r3, [r1, #4]
 8003cb6:	e006      	b.n	8003cc6 <HAL_GPIO_Init+0x48e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003cb8:	4b28      	ldr	r3, [pc, #160]	; (8003d5c <HAL_GPIO_Init+0x524>)
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	43db      	mvns	r3, r3
 8003cc0:	4926      	ldr	r1, [pc, #152]	; (8003d5c <HAL_GPIO_Init+0x524>)
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d006      	beq.n	8003ce0 <HAL_GPIO_Init+0x4a8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003cd2:	4b22      	ldr	r3, [pc, #136]	; (8003d5c <HAL_GPIO_Init+0x524>)
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	4921      	ldr	r1, [pc, #132]	; (8003d5c <HAL_GPIO_Init+0x524>)
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	608b      	str	r3, [r1, #8]
 8003cde:	e006      	b.n	8003cee <HAL_GPIO_Init+0x4b6>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003ce0:	4b1e      	ldr	r3, [pc, #120]	; (8003d5c <HAL_GPIO_Init+0x524>)
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	43db      	mvns	r3, r3
 8003ce8:	491c      	ldr	r1, [pc, #112]	; (8003d5c <HAL_GPIO_Init+0x524>)
 8003cea:	4013      	ands	r3, r2
 8003cec:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d006      	beq.n	8003d08 <HAL_GPIO_Init+0x4d0>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003cfa:	4b18      	ldr	r3, [pc, #96]	; (8003d5c <HAL_GPIO_Init+0x524>)
 8003cfc:	68da      	ldr	r2, [r3, #12]
 8003cfe:	4917      	ldr	r1, [pc, #92]	; (8003d5c <HAL_GPIO_Init+0x524>)
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60cb      	str	r3, [r1, #12]
 8003d06:	e006      	b.n	8003d16 <HAL_GPIO_Init+0x4de>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003d08:	4b14      	ldr	r3, [pc, #80]	; (8003d5c <HAL_GPIO_Init+0x524>)
 8003d0a:	68da      	ldr	r2, [r3, #12]
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	4912      	ldr	r1, [pc, #72]	; (8003d5c <HAL_GPIO_Init+0x524>)
 8003d12:	4013      	ands	r3, r2
 8003d14:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	3301      	adds	r3, #1
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	fa22 f303 	lsr.w	r3, r2, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f47f ae05 	bne.w	8003936 <HAL_GPIO_Init+0xfe>
  }
}
 8003d2c:	bf00      	nop
 8003d2e:	bf00      	nop
 8003d30:	3728      	adds	r7, #40	; 0x28
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	0800ebc0 	.word	0x0800ebc0
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	40010000 	.word	0x40010000
 8003d44:	40010800 	.word	0x40010800
 8003d48:	40010c00 	.word	0x40010c00
 8003d4c:	40011000 	.word	0x40011000
 8003d50:	40011400 	.word	0x40011400
 8003d54:	40011800 	.word	0x40011800
 8003d58:	40011c00 	.word	0x40011c00
 8003d5c:	40010400 	.word	0x40010400

08003d60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003d6c:	887b      	ldrh	r3, [r7, #2]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d004      	beq.n	8003d7c <HAL_GPIO_ReadPin+0x1c>
 8003d72:	887b      	ldrh	r3, [r7, #2]
 8003d74:	0c1b      	lsrs	r3, r3, #16
 8003d76:	041b      	lsls	r3, r3, #16
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d004      	beq.n	8003d86 <HAL_GPIO_ReadPin+0x26>
 8003d7c:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8003d80:	4809      	ldr	r0, [pc, #36]	; (8003da8 <HAL_GPIO_ReadPin+0x48>)
 8003d82:	f7fe f9eb 	bl	800215c <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	887b      	ldrh	r3, [r7, #2]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d002      	beq.n	8003d98 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8003d92:	2301      	movs	r3, #1
 8003d94:	73fb      	strb	r3, [r7, #15]
 8003d96:	e001      	b.n	8003d9c <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	0800ebc0 	.word	0x0800ebc0

08003dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	460b      	mov	r3, r1
 8003db6:	807b      	strh	r3, [r7, #2]
 8003db8:	4613      	mov	r3, r2
 8003dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003dbc:	887b      	ldrh	r3, [r7, #2]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d004      	beq.n	8003dcc <HAL_GPIO_WritePin+0x20>
 8003dc2:	887b      	ldrh	r3, [r7, #2]
 8003dc4:	0c1b      	lsrs	r3, r3, #16
 8003dc6:	041b      	lsls	r3, r3, #16
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d004      	beq.n	8003dd6 <HAL_GPIO_WritePin+0x2a>
 8003dcc:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8003dd0:	480e      	ldr	r0, [pc, #56]	; (8003e0c <HAL_GPIO_WritePin+0x60>)
 8003dd2:	f7fe f9c3 	bl	800215c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003dd6:	787b      	ldrb	r3, [r7, #1]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d007      	beq.n	8003dec <HAL_GPIO_WritePin+0x40>
 8003ddc:	787b      	ldrb	r3, [r7, #1]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d004      	beq.n	8003dec <HAL_GPIO_WritePin+0x40>
 8003de2:	f240 11d5 	movw	r1, #469	; 0x1d5
 8003de6:	4809      	ldr	r0, [pc, #36]	; (8003e0c <HAL_GPIO_WritePin+0x60>)
 8003de8:	f7fe f9b8 	bl	800215c <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8003dec:	787b      	ldrb	r3, [r7, #1]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003df2:	887a      	ldrh	r2, [r7, #2]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003df8:	e003      	b.n	8003e02 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003dfa:	887b      	ldrh	r3, [r7, #2]
 8003dfc:	041a      	lsls	r2, r3, #16
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	611a      	str	r2, [r3, #16]
}
 8003e02:	bf00      	nop
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	0800ebc0 	.word	0x0800ebc0

08003e10 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	460b      	mov	r3, r1
 8003e1a:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003e1c:	887b      	ldrh	r3, [r7, #2]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d004      	beq.n	8003e2c <HAL_GPIO_TogglePin+0x1c>
 8003e22:	887b      	ldrh	r3, [r7, #2]
 8003e24:	0c1b      	lsrs	r3, r3, #16
 8003e26:	041b      	lsls	r3, r3, #16
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d004      	beq.n	8003e36 <HAL_GPIO_TogglePin+0x26>
 8003e2c:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8003e30:	480a      	ldr	r0, [pc, #40]	; (8003e5c <HAL_GPIO_TogglePin+0x4c>)
 8003e32:	f7fe f993 	bl	800215c <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e3c:	887a      	ldrh	r2, [r7, #2]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	4013      	ands	r3, r2
 8003e42:	041a      	lsls	r2, r3, #16
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	43d9      	mvns	r1, r3
 8003e48:	887b      	ldrh	r3, [r7, #2]
 8003e4a:	400b      	ands	r3, r1
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	611a      	str	r2, [r3, #16]
}
 8003e52:	bf00      	nop
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	0800ebc0 	.word	0x0800ebc0

08003e60 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003e64:	4b03      	ldr	r3, [pc, #12]	; (8003e74 <HAL_PWR_EnableBkUpAccess+0x14>)
 8003e66:	2201      	movs	r2, #1
 8003e68:	601a      	str	r2, [r3, #0]
}
 8003e6a:	bf00      	nop
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bc80      	pop	{r7}
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	420e0020 	.word	0x420e0020

08003e78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e35c      	b.n	8004544 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d01c      	beq.n	8003ecc <HAL_RCC_OscConfig+0x54>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d116      	bne.n	8003ecc <HAL_RCC_OscConfig+0x54>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d110      	bne.n	8003ecc <HAL_RCC_OscConfig+0x54>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0308 	and.w	r3, r3, #8
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10a      	bne.n	8003ecc <HAL_RCC_OscConfig+0x54>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0304 	and.w	r3, r3, #4
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d104      	bne.n	8003ecc <HAL_RCC_OscConfig+0x54>
 8003ec2:	f240 1167 	movw	r1, #359	; 0x167
 8003ec6:	48a5      	ldr	r0, [pc, #660]	; (800415c <HAL_RCC_OscConfig+0x2e4>)
 8003ec8:	f7fe f948 	bl	800215c <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	f000 809a 	beq.w	800400e <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00e      	beq.n	8003f00 <HAL_RCC_OscConfig+0x88>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eea:	d009      	beq.n	8003f00 <HAL_RCC_OscConfig+0x88>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ef4:	d004      	beq.n	8003f00 <HAL_RCC_OscConfig+0x88>
 8003ef6:	f240 116d 	movw	r1, #365	; 0x16d
 8003efa:	4898      	ldr	r0, [pc, #608]	; (800415c <HAL_RCC_OscConfig+0x2e4>)
 8003efc:	f7fe f92e 	bl	800215c <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f00:	4b97      	ldr	r3, [pc, #604]	; (8004160 <HAL_RCC_OscConfig+0x2e8>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f003 030c 	and.w	r3, r3, #12
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	d00c      	beq.n	8003f26 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f0c:	4b94      	ldr	r3, [pc, #592]	; (8004160 <HAL_RCC_OscConfig+0x2e8>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f003 030c 	and.w	r3, r3, #12
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d112      	bne.n	8003f3e <HAL_RCC_OscConfig+0xc6>
 8003f18:	4b91      	ldr	r3, [pc, #580]	; (8004160 <HAL_RCC_OscConfig+0x2e8>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f24:	d10b      	bne.n	8003f3e <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f26:	4b8e      	ldr	r3, [pc, #568]	; (8004160 <HAL_RCC_OscConfig+0x2e8>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d06c      	beq.n	800400c <HAL_RCC_OscConfig+0x194>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d168      	bne.n	800400c <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e302      	b.n	8004544 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f46:	d106      	bne.n	8003f56 <HAL_RCC_OscConfig+0xde>
 8003f48:	4b85      	ldr	r3, [pc, #532]	; (8004160 <HAL_RCC_OscConfig+0x2e8>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a84      	ldr	r2, [pc, #528]	; (8004160 <HAL_RCC_OscConfig+0x2e8>)
 8003f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f52:	6013      	str	r3, [r2, #0]
 8003f54:	e02e      	b.n	8003fb4 <HAL_RCC_OscConfig+0x13c>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10c      	bne.n	8003f78 <HAL_RCC_OscConfig+0x100>
 8003f5e:	4b80      	ldr	r3, [pc, #512]	; (8004160 <HAL_RCC_OscConfig+0x2e8>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a7f      	ldr	r2, [pc, #508]	; (8004160 <HAL_RCC_OscConfig+0x2e8>)
 8003f64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f68:	6013      	str	r3, [r2, #0]
 8003f6a:	4b7d      	ldr	r3, [pc, #500]	; (8004160 <HAL_RCC_OscConfig+0x2e8>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a7c      	ldr	r2, [pc, #496]	; (8004160 <HAL_RCC_OscConfig+0x2e8>)
 8003f70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f74:	6013      	str	r3, [r2, #0]
 8003f76:	e01d      	b.n	8003fb4 <HAL_RCC_OscConfig+0x13c>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f80:	d10c      	bne.n	8003f9c <HAL_RCC_OscConfig+0x124>
 8003f82:	4b77      	ldr	r3, [pc, #476]	; (8004160 <HAL_RCC_OscConfig+0x2e8>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a76      	ldr	r2, [pc, #472]	; (8004160 <HAL_RCC_OscConfig+0x2e8>)
 8003f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f8c:	6013      	str	r3, [r2, #0]
 8003f8e:	4b74      	ldr	r3, [pc, #464]	; (8004160 <HAL_RCC_OscConfig+0x2e8>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a73      	ldr	r2, [pc, #460]	; (8004160 <HAL_RCC_OscConfig+0x2e8>)
 8003f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f98:	6013      	str	r3, [r2, #0]
 8003f9a:	e00b      	b.n	8003fb4 <HAL_RCC_OscConfig+0x13c>
 8003f9c:	4b70      	ldr	r3, [pc, #448]	; (8004160 <HAL_RCC_OscConfig+0x2e8>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a6f      	ldr	r2, [pc, #444]	; (8004160 <HAL_RCC_OscConfig+0x2e8>)
 8003fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fa6:	6013      	str	r3, [r2, #0]
 8003fa8:	4b6d      	ldr	r3, [pc, #436]	; (8004160 <HAL_RCC_OscConfig+0x2e8>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a6c      	ldr	r2, [pc, #432]	; (8004160 <HAL_RCC_OscConfig+0x2e8>)
 8003fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fb2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d013      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fbc:	f7fe fd9e 	bl	8002afc <HAL_GetTick>
 8003fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc2:	e008      	b.n	8003fd6 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fc4:	f7fe fd9a 	bl	8002afc <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b64      	cmp	r3, #100	; 0x64
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e2b6      	b.n	8004544 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fd6:	4b62      	ldr	r3, [pc, #392]	; (8004160 <HAL_RCC_OscConfig+0x2e8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d0f0      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x14c>
 8003fe2:	e014      	b.n	800400e <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe4:	f7fe fd8a 	bl	8002afc <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fec:	f7fe fd86 	bl	8002afc <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b64      	cmp	r3, #100	; 0x64
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e2a2      	b.n	8004544 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ffe:	4b58      	ldr	r3, [pc, #352]	; (8004160 <HAL_RCC_OscConfig+0x2e8>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1f0      	bne.n	8003fec <HAL_RCC_OscConfig+0x174>
 800400a:	e000      	b.n	800400e <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800400c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d079      	beq.n	800410e <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d008      	beq.n	8004034 <HAL_RCC_OscConfig+0x1bc>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d004      	beq.n	8004034 <HAL_RCC_OscConfig+0x1bc>
 800402a:	f240 11a1 	movw	r1, #417	; 0x1a1
 800402e:	484b      	ldr	r0, [pc, #300]	; (800415c <HAL_RCC_OscConfig+0x2e4>)
 8004030:	f7fe f894 	bl	800215c <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	2b1f      	cmp	r3, #31
 800403a:	d904      	bls.n	8004046 <HAL_RCC_OscConfig+0x1ce>
 800403c:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8004040:	4846      	ldr	r0, [pc, #280]	; (800415c <HAL_RCC_OscConfig+0x2e4>)
 8004042:	f7fe f88b 	bl	800215c <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004046:	4b46      	ldr	r3, [pc, #280]	; (8004160 <HAL_RCC_OscConfig+0x2e8>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f003 030c 	and.w	r3, r3, #12
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00b      	beq.n	800406a <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004052:	4b43      	ldr	r3, [pc, #268]	; (8004160 <HAL_RCC_OscConfig+0x2e8>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f003 030c 	and.w	r3, r3, #12
 800405a:	2b08      	cmp	r3, #8
 800405c:	d11c      	bne.n	8004098 <HAL_RCC_OscConfig+0x220>
 800405e:	4b40      	ldr	r3, [pc, #256]	; (8004160 <HAL_RCC_OscConfig+0x2e8>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d116      	bne.n	8004098 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800406a:	4b3d      	ldr	r3, [pc, #244]	; (8004160 <HAL_RCC_OscConfig+0x2e8>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d005      	beq.n	8004082 <HAL_RCC_OscConfig+0x20a>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d001      	beq.n	8004082 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e260      	b.n	8004544 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004082:	4b37      	ldr	r3, [pc, #220]	; (8004160 <HAL_RCC_OscConfig+0x2e8>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	4933      	ldr	r1, [pc, #204]	; (8004160 <HAL_RCC_OscConfig+0x2e8>)
 8004092:	4313      	orrs	r3, r2
 8004094:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004096:	e03a      	b.n	800410e <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d020      	beq.n	80040e2 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040a0:	4b30      	ldr	r3, [pc, #192]	; (8004164 <HAL_RCC_OscConfig+0x2ec>)
 80040a2:	2201      	movs	r2, #1
 80040a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a6:	f7fe fd29 	bl	8002afc <HAL_GetTick>
 80040aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ac:	e008      	b.n	80040c0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ae:	f7fe fd25 	bl	8002afc <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e241      	b.n	8004544 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c0:	4b27      	ldr	r3, [pc, #156]	; (8004160 <HAL_RCC_OscConfig+0x2e8>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d0f0      	beq.n	80040ae <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040cc:	4b24      	ldr	r3, [pc, #144]	; (8004160 <HAL_RCC_OscConfig+0x2e8>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	4921      	ldr	r1, [pc, #132]	; (8004160 <HAL_RCC_OscConfig+0x2e8>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	600b      	str	r3, [r1, #0]
 80040e0:	e015      	b.n	800410e <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040e2:	4b20      	ldr	r3, [pc, #128]	; (8004164 <HAL_RCC_OscConfig+0x2ec>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e8:	f7fe fd08 	bl	8002afc <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040f0:	f7fe fd04 	bl	8002afc <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e220      	b.n	8004544 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004102:	4b17      	ldr	r3, [pc, #92]	; (8004160 <HAL_RCC_OscConfig+0x2e8>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1f0      	bne.n	80040f0 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0308 	and.w	r3, r3, #8
 8004116:	2b00      	cmp	r3, #0
 8004118:	d048      	beq.n	80041ac <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d008      	beq.n	8004134 <HAL_RCC_OscConfig+0x2bc>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d004      	beq.n	8004134 <HAL_RCC_OscConfig+0x2bc>
 800412a:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800412e:	480b      	ldr	r0, [pc, #44]	; (800415c <HAL_RCC_OscConfig+0x2e4>)
 8004130:	f7fe f814 	bl	800215c <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d021      	beq.n	8004180 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800413c:	4b0a      	ldr	r3, [pc, #40]	; (8004168 <HAL_RCC_OscConfig+0x2f0>)
 800413e:	2201      	movs	r2, #1
 8004140:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004142:	f7fe fcdb 	bl	8002afc <HAL_GetTick>
 8004146:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004148:	e010      	b.n	800416c <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800414a:	f7fe fcd7 	bl	8002afc <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d909      	bls.n	800416c <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e1f3      	b.n	8004544 <HAL_RCC_OscConfig+0x6cc>
 800415c:	0800ebfc 	.word	0x0800ebfc
 8004160:	40021000 	.word	0x40021000
 8004164:	42420000 	.word	0x42420000
 8004168:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800416c:	4b67      	ldr	r3, [pc, #412]	; (800430c <HAL_RCC_OscConfig+0x494>)
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0e8      	beq.n	800414a <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004178:	2001      	movs	r0, #1
 800417a:	f000 fc0f 	bl	800499c <RCC_Delay>
 800417e:	e015      	b.n	80041ac <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004180:	4b63      	ldr	r3, [pc, #396]	; (8004310 <HAL_RCC_OscConfig+0x498>)
 8004182:	2200      	movs	r2, #0
 8004184:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004186:	f7fe fcb9 	bl	8002afc <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800418e:	f7fe fcb5 	bl	8002afc <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e1d1      	b.n	8004544 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041a0:	4b5a      	ldr	r3, [pc, #360]	; (800430c <HAL_RCC_OscConfig+0x494>)
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1f0      	bne.n	800418e <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 80c0 	beq.w	800433a <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ba:	2300      	movs	r3, #0
 80041bc:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00c      	beq.n	80041e0 <HAL_RCC_OscConfig+0x368>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d008      	beq.n	80041e0 <HAL_RCC_OscConfig+0x368>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	2b05      	cmp	r3, #5
 80041d4:	d004      	beq.n	80041e0 <HAL_RCC_OscConfig+0x368>
 80041d6:	f240 2111 	movw	r1, #529	; 0x211
 80041da:	484e      	ldr	r0, [pc, #312]	; (8004314 <HAL_RCC_OscConfig+0x49c>)
 80041dc:	f7fd ffbe 	bl	800215c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041e0:	4b4a      	ldr	r3, [pc, #296]	; (800430c <HAL_RCC_OscConfig+0x494>)
 80041e2:	69db      	ldr	r3, [r3, #28]
 80041e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10d      	bne.n	8004208 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ec:	4b47      	ldr	r3, [pc, #284]	; (800430c <HAL_RCC_OscConfig+0x494>)
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	4a46      	ldr	r2, [pc, #280]	; (800430c <HAL_RCC_OscConfig+0x494>)
 80041f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041f6:	61d3      	str	r3, [r2, #28]
 80041f8:	4b44      	ldr	r3, [pc, #272]	; (800430c <HAL_RCC_OscConfig+0x494>)
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004200:	60bb      	str	r3, [r7, #8]
 8004202:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004204:	2301      	movs	r3, #1
 8004206:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004208:	4b43      	ldr	r3, [pc, #268]	; (8004318 <HAL_RCC_OscConfig+0x4a0>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004210:	2b00      	cmp	r3, #0
 8004212:	d118      	bne.n	8004246 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004214:	4b40      	ldr	r3, [pc, #256]	; (8004318 <HAL_RCC_OscConfig+0x4a0>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a3f      	ldr	r2, [pc, #252]	; (8004318 <HAL_RCC_OscConfig+0x4a0>)
 800421a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800421e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004220:	f7fe fc6c 	bl	8002afc <HAL_GetTick>
 8004224:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004226:	e008      	b.n	800423a <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004228:	f7fe fc68 	bl	8002afc <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b64      	cmp	r3, #100	; 0x64
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e184      	b.n	8004544 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800423a:	4b37      	ldr	r3, [pc, #220]	; (8004318 <HAL_RCC_OscConfig+0x4a0>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0f0      	beq.n	8004228 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d106      	bne.n	800425c <HAL_RCC_OscConfig+0x3e4>
 800424e:	4b2f      	ldr	r3, [pc, #188]	; (800430c <HAL_RCC_OscConfig+0x494>)
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	4a2e      	ldr	r2, [pc, #184]	; (800430c <HAL_RCC_OscConfig+0x494>)
 8004254:	f043 0301 	orr.w	r3, r3, #1
 8004258:	6213      	str	r3, [r2, #32]
 800425a:	e02d      	b.n	80042b8 <HAL_RCC_OscConfig+0x440>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10c      	bne.n	800427e <HAL_RCC_OscConfig+0x406>
 8004264:	4b29      	ldr	r3, [pc, #164]	; (800430c <HAL_RCC_OscConfig+0x494>)
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	4a28      	ldr	r2, [pc, #160]	; (800430c <HAL_RCC_OscConfig+0x494>)
 800426a:	f023 0301 	bic.w	r3, r3, #1
 800426e:	6213      	str	r3, [r2, #32]
 8004270:	4b26      	ldr	r3, [pc, #152]	; (800430c <HAL_RCC_OscConfig+0x494>)
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	4a25      	ldr	r2, [pc, #148]	; (800430c <HAL_RCC_OscConfig+0x494>)
 8004276:	f023 0304 	bic.w	r3, r3, #4
 800427a:	6213      	str	r3, [r2, #32]
 800427c:	e01c      	b.n	80042b8 <HAL_RCC_OscConfig+0x440>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	2b05      	cmp	r3, #5
 8004284:	d10c      	bne.n	80042a0 <HAL_RCC_OscConfig+0x428>
 8004286:	4b21      	ldr	r3, [pc, #132]	; (800430c <HAL_RCC_OscConfig+0x494>)
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	4a20      	ldr	r2, [pc, #128]	; (800430c <HAL_RCC_OscConfig+0x494>)
 800428c:	f043 0304 	orr.w	r3, r3, #4
 8004290:	6213      	str	r3, [r2, #32]
 8004292:	4b1e      	ldr	r3, [pc, #120]	; (800430c <HAL_RCC_OscConfig+0x494>)
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	4a1d      	ldr	r2, [pc, #116]	; (800430c <HAL_RCC_OscConfig+0x494>)
 8004298:	f043 0301 	orr.w	r3, r3, #1
 800429c:	6213      	str	r3, [r2, #32]
 800429e:	e00b      	b.n	80042b8 <HAL_RCC_OscConfig+0x440>
 80042a0:	4b1a      	ldr	r3, [pc, #104]	; (800430c <HAL_RCC_OscConfig+0x494>)
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	4a19      	ldr	r2, [pc, #100]	; (800430c <HAL_RCC_OscConfig+0x494>)
 80042a6:	f023 0301 	bic.w	r3, r3, #1
 80042aa:	6213      	str	r3, [r2, #32]
 80042ac:	4b17      	ldr	r3, [pc, #92]	; (800430c <HAL_RCC_OscConfig+0x494>)
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	4a16      	ldr	r2, [pc, #88]	; (800430c <HAL_RCC_OscConfig+0x494>)
 80042b2:	f023 0304 	bic.w	r3, r3, #4
 80042b6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d015      	beq.n	80042ec <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042c0:	f7fe fc1c 	bl	8002afc <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c6:	e00a      	b.n	80042de <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042c8:	f7fe fc18 	bl	8002afc <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e132      	b.n	8004544 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042de:	4b0b      	ldr	r3, [pc, #44]	; (800430c <HAL_RCC_OscConfig+0x494>)
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0ee      	beq.n	80042c8 <HAL_RCC_OscConfig+0x450>
 80042ea:	e01d      	b.n	8004328 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ec:	f7fe fc06 	bl	8002afc <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042f2:	e013      	b.n	800431c <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042f4:	f7fe fc02 	bl	8002afc <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004302:	4293      	cmp	r3, r2
 8004304:	d90a      	bls.n	800431c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e11c      	b.n	8004544 <HAL_RCC_OscConfig+0x6cc>
 800430a:	bf00      	nop
 800430c:	40021000 	.word	0x40021000
 8004310:	42420480 	.word	0x42420480
 8004314:	0800ebfc 	.word	0x0800ebfc
 8004318:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800431c:	4b8b      	ldr	r3, [pc, #556]	; (800454c <HAL_RCC_OscConfig+0x6d4>)
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1e5      	bne.n	80042f4 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004328:	7dfb      	ldrb	r3, [r7, #23]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d105      	bne.n	800433a <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800432e:	4b87      	ldr	r3, [pc, #540]	; (800454c <HAL_RCC_OscConfig+0x6d4>)
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	4a86      	ldr	r2, [pc, #536]	; (800454c <HAL_RCC_OscConfig+0x6d4>)
 8004334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004338:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00c      	beq.n	800435c <HAL_RCC_OscConfig+0x4e4>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d008      	beq.n	800435c <HAL_RCC_OscConfig+0x4e4>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	2b02      	cmp	r3, #2
 8004350:	d004      	beq.n	800435c <HAL_RCC_OscConfig+0x4e4>
 8004352:	f240 21af 	movw	r1, #687	; 0x2af
 8004356:	487e      	ldr	r0, [pc, #504]	; (8004550 <HAL_RCC_OscConfig+0x6d8>)
 8004358:	f7fd ff00 	bl	800215c <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	69db      	ldr	r3, [r3, #28]
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 80ee 	beq.w	8004542 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004366:	4b79      	ldr	r3, [pc, #484]	; (800454c <HAL_RCC_OscConfig+0x6d4>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f003 030c 	and.w	r3, r3, #12
 800436e:	2b08      	cmp	r3, #8
 8004370:	f000 80ce 	beq.w	8004510 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	69db      	ldr	r3, [r3, #28]
 8004378:	2b02      	cmp	r3, #2
 800437a:	f040 80b2 	bne.w	80044e2 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d009      	beq.n	800439a <HAL_RCC_OscConfig+0x522>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800438e:	d004      	beq.n	800439a <HAL_RCC_OscConfig+0x522>
 8004390:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8004394:	486e      	ldr	r0, [pc, #440]	; (8004550 <HAL_RCC_OscConfig+0x6d8>)
 8004396:	f7fd fee1 	bl	800215c <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d04a      	beq.n	8004438 <HAL_RCC_OscConfig+0x5c0>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043aa:	d045      	beq.n	8004438 <HAL_RCC_OscConfig+0x5c0>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80043b4:	d040      	beq.n	8004438 <HAL_RCC_OscConfig+0x5c0>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80043be:	d03b      	beq.n	8004438 <HAL_RCC_OscConfig+0x5c0>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043c8:	d036      	beq.n	8004438 <HAL_RCC_OscConfig+0x5c0>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ce:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80043d2:	d031      	beq.n	8004438 <HAL_RCC_OscConfig+0x5c0>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80043dc:	d02c      	beq.n	8004438 <HAL_RCC_OscConfig+0x5c0>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80043e6:	d027      	beq.n	8004438 <HAL_RCC_OscConfig+0x5c0>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043f0:	d022      	beq.n	8004438 <HAL_RCC_OscConfig+0x5c0>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80043fa:	d01d      	beq.n	8004438 <HAL_RCC_OscConfig+0x5c0>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004404:	d018      	beq.n	8004438 <HAL_RCC_OscConfig+0x5c0>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800440e:	d013      	beq.n	8004438 <HAL_RCC_OscConfig+0x5c0>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004418:	d00e      	beq.n	8004438 <HAL_RCC_OscConfig+0x5c0>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441e:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8004422:	d009      	beq.n	8004438 <HAL_RCC_OscConfig+0x5c0>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800442c:	d004      	beq.n	8004438 <HAL_RCC_OscConfig+0x5c0>
 800442e:	f240 21b9 	movw	r1, #697	; 0x2b9
 8004432:	4847      	ldr	r0, [pc, #284]	; (8004550 <HAL_RCC_OscConfig+0x6d8>)
 8004434:	f7fd fe92 	bl	800215c <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004438:	4b46      	ldr	r3, [pc, #280]	; (8004554 <HAL_RCC_OscConfig+0x6dc>)
 800443a:	2200      	movs	r2, #0
 800443c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443e:	f7fe fb5d 	bl	8002afc <HAL_GetTick>
 8004442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004444:	e008      	b.n	8004458 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004446:	f7fe fb59 	bl	8002afc <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e075      	b.n	8004544 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004458:	4b3c      	ldr	r3, [pc, #240]	; (800454c <HAL_RCC_OscConfig+0x6d4>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1f0      	bne.n	8004446 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800446c:	d116      	bne.n	800449c <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d009      	beq.n	800448a <HAL_RCC_OscConfig+0x612>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800447e:	d004      	beq.n	800448a <HAL_RCC_OscConfig+0x612>
 8004480:	f240 21cf 	movw	r1, #719	; 0x2cf
 8004484:	4832      	ldr	r0, [pc, #200]	; (8004550 <HAL_RCC_OscConfig+0x6d8>)
 8004486:	f7fd fe69 	bl	800215c <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800448a:	4b30      	ldr	r3, [pc, #192]	; (800454c <HAL_RCC_OscConfig+0x6d4>)
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	492d      	ldr	r1, [pc, #180]	; (800454c <HAL_RCC_OscConfig+0x6d4>)
 8004498:	4313      	orrs	r3, r2
 800449a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800449c:	4b2b      	ldr	r3, [pc, #172]	; (800454c <HAL_RCC_OscConfig+0x6d4>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a19      	ldr	r1, [r3, #32]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	430b      	orrs	r3, r1
 80044ae:	4927      	ldr	r1, [pc, #156]	; (800454c <HAL_RCC_OscConfig+0x6d4>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044b4:	4b27      	ldr	r3, [pc, #156]	; (8004554 <HAL_RCC_OscConfig+0x6dc>)
 80044b6:	2201      	movs	r2, #1
 80044b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ba:	f7fe fb1f 	bl	8002afc <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c2:	f7fe fb1b 	bl	8002afc <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e037      	b.n	8004544 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044d4:	4b1d      	ldr	r3, [pc, #116]	; (800454c <HAL_RCC_OscConfig+0x6d4>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0f0      	beq.n	80044c2 <HAL_RCC_OscConfig+0x64a>
 80044e0:	e02f      	b.n	8004542 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044e2:	4b1c      	ldr	r3, [pc, #112]	; (8004554 <HAL_RCC_OscConfig+0x6dc>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e8:	f7fe fb08 	bl	8002afc <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f0:	f7fe fb04 	bl	8002afc <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e020      	b.n	8004544 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004502:	4b12      	ldr	r3, [pc, #72]	; (800454c <HAL_RCC_OscConfig+0x6d4>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1f0      	bne.n	80044f0 <HAL_RCC_OscConfig+0x678>
 800450e:	e018      	b.n	8004542 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	69db      	ldr	r3, [r3, #28]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d101      	bne.n	800451c <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e013      	b.n	8004544 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800451c:	4b0b      	ldr	r3, [pc, #44]	; (800454c <HAL_RCC_OscConfig+0x6d4>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	429a      	cmp	r2, r3
 800452e:	d106      	bne.n	800453e <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800453a:	429a      	cmp	r2, r3
 800453c:	d001      	beq.n	8004542 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3718      	adds	r7, #24
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40021000 	.word	0x40021000
 8004550:	0800ebfc 	.word	0x0800ebfc
 8004554:	42420060 	.word	0x42420060

08004558 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e176      	b.n	800485a <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b00      	cmp	r3, #0
 8004576:	d116      	bne.n	80045a6 <HAL_RCC_ClockConfig+0x4e>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d110      	bne.n	80045a6 <HAL_RCC_ClockConfig+0x4e>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10a      	bne.n	80045a6 <HAL_RCC_ClockConfig+0x4e>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0308 	and.w	r3, r3, #8
 8004598:	2b00      	cmp	r3, #0
 800459a:	d104      	bne.n	80045a6 <HAL_RCC_ClockConfig+0x4e>
 800459c:	f44f 714e 	mov.w	r1, #824	; 0x338
 80045a0:	4874      	ldr	r0, [pc, #464]	; (8004774 <HAL_RCC_ClockConfig+0x21c>)
 80045a2:	f7fd fddb 	bl	800215c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00a      	beq.n	80045c2 <HAL_RCC_ClockConfig+0x6a>
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d007      	beq.n	80045c2 <HAL_RCC_ClockConfig+0x6a>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d004      	beq.n	80045c2 <HAL_RCC_ClockConfig+0x6a>
 80045b8:	f240 3139 	movw	r1, #825	; 0x339
 80045bc:	486d      	ldr	r0, [pc, #436]	; (8004774 <HAL_RCC_ClockConfig+0x21c>)
 80045be:	f7fd fdcd 	bl	800215c <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045c2:	4b6d      	ldr	r3, [pc, #436]	; (8004778 <HAL_RCC_ClockConfig+0x220>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0307 	and.w	r3, r3, #7
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d910      	bls.n	80045f2 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045d0:	4b69      	ldr	r3, [pc, #420]	; (8004778 <HAL_RCC_ClockConfig+0x220>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f023 0207 	bic.w	r2, r3, #7
 80045d8:	4967      	ldr	r1, [pc, #412]	; (8004778 <HAL_RCC_ClockConfig+0x220>)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	4313      	orrs	r3, r2
 80045de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045e0:	4b65      	ldr	r3, [pc, #404]	; (8004778 <HAL_RCC_ClockConfig+0x220>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d001      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e133      	b.n	800485a <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d049      	beq.n	8004692 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0304 	and.w	r3, r3, #4
 8004606:	2b00      	cmp	r3, #0
 8004608:	d005      	beq.n	8004616 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800460a:	4b5c      	ldr	r3, [pc, #368]	; (800477c <HAL_RCC_ClockConfig+0x224>)
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	4a5b      	ldr	r2, [pc, #364]	; (800477c <HAL_RCC_ClockConfig+0x224>)
 8004610:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004614:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0308 	and.w	r3, r3, #8
 800461e:	2b00      	cmp	r3, #0
 8004620:	d005      	beq.n	800462e <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004622:	4b56      	ldr	r3, [pc, #344]	; (800477c <HAL_RCC_ClockConfig+0x224>)
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	4a55      	ldr	r2, [pc, #340]	; (800477c <HAL_RCC_ClockConfig+0x224>)
 8004628:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800462c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d024      	beq.n	8004680 <HAL_RCC_ClockConfig+0x128>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	2b80      	cmp	r3, #128	; 0x80
 800463c:	d020      	beq.n	8004680 <HAL_RCC_ClockConfig+0x128>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	2b90      	cmp	r3, #144	; 0x90
 8004644:	d01c      	beq.n	8004680 <HAL_RCC_ClockConfig+0x128>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	2ba0      	cmp	r3, #160	; 0xa0
 800464c:	d018      	beq.n	8004680 <HAL_RCC_ClockConfig+0x128>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	2bb0      	cmp	r3, #176	; 0xb0
 8004654:	d014      	beq.n	8004680 <HAL_RCC_ClockConfig+0x128>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	2bc0      	cmp	r3, #192	; 0xc0
 800465c:	d010      	beq.n	8004680 <HAL_RCC_ClockConfig+0x128>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	2bd0      	cmp	r3, #208	; 0xd0
 8004664:	d00c      	beq.n	8004680 <HAL_RCC_ClockConfig+0x128>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	2be0      	cmp	r3, #224	; 0xe0
 800466c:	d008      	beq.n	8004680 <HAL_RCC_ClockConfig+0x128>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	2bf0      	cmp	r3, #240	; 0xf0
 8004674:	d004      	beq.n	8004680 <HAL_RCC_ClockConfig+0x128>
 8004676:	f240 315f 	movw	r1, #863	; 0x35f
 800467a:	483e      	ldr	r0, [pc, #248]	; (8004774 <HAL_RCC_ClockConfig+0x21c>)
 800467c:	f7fd fd6e 	bl	800215c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004680:	4b3e      	ldr	r3, [pc, #248]	; (800477c <HAL_RCC_ClockConfig+0x224>)
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	493b      	ldr	r1, [pc, #236]	; (800477c <HAL_RCC_ClockConfig+0x224>)
 800468e:	4313      	orrs	r3, r2
 8004690:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	d051      	beq.n	8004742 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00c      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x168>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d008      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x168>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d004      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x168>
 80046b6:	f240 3166 	movw	r1, #870	; 0x366
 80046ba:	482e      	ldr	r0, [pc, #184]	; (8004774 <HAL_RCC_ClockConfig+0x21c>)
 80046bc:	f7fd fd4e 	bl	800215c <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d107      	bne.n	80046d8 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046c8:	4b2c      	ldr	r3, [pc, #176]	; (800477c <HAL_RCC_ClockConfig+0x224>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d115      	bne.n	8004700 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e0c0      	b.n	800485a <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d107      	bne.n	80046f0 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046e0:	4b26      	ldr	r3, [pc, #152]	; (800477c <HAL_RCC_ClockConfig+0x224>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d109      	bne.n	8004700 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e0b4      	b.n	800485a <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f0:	4b22      	ldr	r3, [pc, #136]	; (800477c <HAL_RCC_ClockConfig+0x224>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e0ac      	b.n	800485a <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004700:	4b1e      	ldr	r3, [pc, #120]	; (800477c <HAL_RCC_ClockConfig+0x224>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f023 0203 	bic.w	r2, r3, #3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	491b      	ldr	r1, [pc, #108]	; (800477c <HAL_RCC_ClockConfig+0x224>)
 800470e:	4313      	orrs	r3, r2
 8004710:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004712:	f7fe f9f3 	bl	8002afc <HAL_GetTick>
 8004716:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004718:	e00a      	b.n	8004730 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800471a:	f7fe f9ef 	bl	8002afc <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	f241 3288 	movw	r2, #5000	; 0x1388
 8004728:	4293      	cmp	r3, r2
 800472a:	d901      	bls.n	8004730 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e094      	b.n	800485a <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004730:	4b12      	ldr	r3, [pc, #72]	; (800477c <HAL_RCC_ClockConfig+0x224>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f003 020c 	and.w	r2, r3, #12
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	429a      	cmp	r2, r3
 8004740:	d1eb      	bne.n	800471a <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004742:	4b0d      	ldr	r3, [pc, #52]	; (8004778 <HAL_RCC_ClockConfig+0x220>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	429a      	cmp	r2, r3
 800474e:	d217      	bcs.n	8004780 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004750:	4b09      	ldr	r3, [pc, #36]	; (8004778 <HAL_RCC_ClockConfig+0x220>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f023 0207 	bic.w	r2, r3, #7
 8004758:	4907      	ldr	r1, [pc, #28]	; (8004778 <HAL_RCC_ClockConfig+0x220>)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	4313      	orrs	r3, r2
 800475e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004760:	4b05      	ldr	r3, [pc, #20]	; (8004778 <HAL_RCC_ClockConfig+0x220>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0307 	and.w	r3, r3, #7
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	429a      	cmp	r2, r3
 800476c:	d008      	beq.n	8004780 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e073      	b.n	800485a <HAL_RCC_ClockConfig+0x302>
 8004772:	bf00      	nop
 8004774:	0800ebfc 	.word	0x0800ebfc
 8004778:	40022000 	.word	0x40022000
 800477c:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	d025      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d018      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x26e>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800479c:	d013      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x26e>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80047a6:	d00e      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x26e>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80047b0:	d009      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x26e>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80047ba:	d004      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x26e>
 80047bc:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 80047c0:	4828      	ldr	r0, [pc, #160]	; (8004864 <HAL_RCC_ClockConfig+0x30c>)
 80047c2:	f7fd fccb 	bl	800215c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047c6:	4b28      	ldr	r3, [pc, #160]	; (8004868 <HAL_RCC_ClockConfig+0x310>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	4925      	ldr	r1, [pc, #148]	; (8004868 <HAL_RCC_ClockConfig+0x310>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0308 	and.w	r3, r3, #8
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d026      	beq.n	8004832 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d018      	beq.n	800481e <HAL_RCC_ClockConfig+0x2c6>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f4:	d013      	beq.n	800481e <HAL_RCC_ClockConfig+0x2c6>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80047fe:	d00e      	beq.n	800481e <HAL_RCC_ClockConfig+0x2c6>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004808:	d009      	beq.n	800481e <HAL_RCC_ClockConfig+0x2c6>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004812:	d004      	beq.n	800481e <HAL_RCC_ClockConfig+0x2c6>
 8004814:	f240 31ab 	movw	r1, #939	; 0x3ab
 8004818:	4812      	ldr	r0, [pc, #72]	; (8004864 <HAL_RCC_ClockConfig+0x30c>)
 800481a:	f7fd fc9f 	bl	800215c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800481e:	4b12      	ldr	r3, [pc, #72]	; (8004868 <HAL_RCC_ClockConfig+0x310>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	490e      	ldr	r1, [pc, #56]	; (8004868 <HAL_RCC_ClockConfig+0x310>)
 800482e:	4313      	orrs	r3, r2
 8004830:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004832:	f000 f821 	bl	8004878 <HAL_RCC_GetSysClockFreq>
 8004836:	4602      	mov	r2, r0
 8004838:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <HAL_RCC_ClockConfig+0x310>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	091b      	lsrs	r3, r3, #4
 800483e:	f003 030f 	and.w	r3, r3, #15
 8004842:	490a      	ldr	r1, [pc, #40]	; (800486c <HAL_RCC_ClockConfig+0x314>)
 8004844:	5ccb      	ldrb	r3, [r1, r3]
 8004846:	fa22 f303 	lsr.w	r3, r2, r3
 800484a:	4a09      	ldr	r2, [pc, #36]	; (8004870 <HAL_RCC_ClockConfig+0x318>)
 800484c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800484e:	4b09      	ldr	r3, [pc, #36]	; (8004874 <HAL_RCC_ClockConfig+0x31c>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f7fe f910 	bl	8002a78 <HAL_InitTick>

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	0800ebfc 	.word	0x0800ebfc
 8004868:	40021000 	.word	0x40021000
 800486c:	0800f540 	.word	0x0800f540
 8004870:	20000000 	.word	0x20000000
 8004874:	20000004 	.word	0x20000004

08004878 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004878:	b490      	push	{r4, r7}
 800487a:	b08a      	sub	sp, #40	; 0x28
 800487c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800487e:	4b2a      	ldr	r3, [pc, #168]	; (8004928 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004880:	1d3c      	adds	r4, r7, #4
 8004882:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004884:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004888:	f240 2301 	movw	r3, #513	; 0x201
 800488c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800488e:	2300      	movs	r3, #0
 8004890:	61fb      	str	r3, [r7, #28]
 8004892:	2300      	movs	r3, #0
 8004894:	61bb      	str	r3, [r7, #24]
 8004896:	2300      	movs	r3, #0
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
 800489a:	2300      	movs	r3, #0
 800489c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80048a2:	4b22      	ldr	r3, [pc, #136]	; (800492c <HAL_RCC_GetSysClockFreq+0xb4>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	f003 030c 	and.w	r3, r3, #12
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	d002      	beq.n	80048b8 <HAL_RCC_GetSysClockFreq+0x40>
 80048b2:	2b08      	cmp	r3, #8
 80048b4:	d003      	beq.n	80048be <HAL_RCC_GetSysClockFreq+0x46>
 80048b6:	e02d      	b.n	8004914 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80048b8:	4b1d      	ldr	r3, [pc, #116]	; (8004930 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048ba:	623b      	str	r3, [r7, #32]
      break;
 80048bc:	e02d      	b.n	800491a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	0c9b      	lsrs	r3, r3, #18
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80048ca:	4413      	add	r3, r2
 80048cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80048d0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d013      	beq.n	8004904 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048dc:	4b13      	ldr	r3, [pc, #76]	; (800492c <HAL_RCC_GetSysClockFreq+0xb4>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	0c5b      	lsrs	r3, r3, #17
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80048ea:	4413      	add	r3, r2
 80048ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80048f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	4a0e      	ldr	r2, [pc, #56]	; (8004930 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048f6:	fb02 f203 	mul.w	r2, r2, r3
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004900:	627b      	str	r3, [r7, #36]	; 0x24
 8004902:	e004      	b.n	800490e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	4a0b      	ldr	r2, [pc, #44]	; (8004934 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004908:	fb02 f303 	mul.w	r3, r2, r3
 800490c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800490e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004910:	623b      	str	r3, [r7, #32]
      break;
 8004912:	e002      	b.n	800491a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004914:	4b06      	ldr	r3, [pc, #24]	; (8004930 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004916:	623b      	str	r3, [r7, #32]
      break;
 8004918:	bf00      	nop
    }
  }
  return sysclockfreq;
 800491a:	6a3b      	ldr	r3, [r7, #32]
}
 800491c:	4618      	mov	r0, r3
 800491e:	3728      	adds	r7, #40	; 0x28
 8004920:	46bd      	mov	sp, r7
 8004922:	bc90      	pop	{r4, r7}
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	0800ec34 	.word	0x0800ec34
 800492c:	40021000 	.word	0x40021000
 8004930:	007a1200 	.word	0x007a1200
 8004934:	003d0900 	.word	0x003d0900

08004938 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004938:	b480      	push	{r7}
 800493a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800493c:	4b02      	ldr	r3, [pc, #8]	; (8004948 <HAL_RCC_GetHCLKFreq+0x10>)
 800493e:	681b      	ldr	r3, [r3, #0]
}
 8004940:	4618      	mov	r0, r3
 8004942:	46bd      	mov	sp, r7
 8004944:	bc80      	pop	{r7}
 8004946:	4770      	bx	lr
 8004948:	20000000 	.word	0x20000000

0800494c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004950:	f7ff fff2 	bl	8004938 <HAL_RCC_GetHCLKFreq>
 8004954:	4602      	mov	r2, r0
 8004956:	4b05      	ldr	r3, [pc, #20]	; (800496c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	0a1b      	lsrs	r3, r3, #8
 800495c:	f003 0307 	and.w	r3, r3, #7
 8004960:	4903      	ldr	r1, [pc, #12]	; (8004970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004962:	5ccb      	ldrb	r3, [r1, r3]
 8004964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004968:	4618      	mov	r0, r3
 800496a:	bd80      	pop	{r7, pc}
 800496c:	40021000 	.word	0x40021000
 8004970:	0800f550 	.word	0x0800f550

08004974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004978:	f7ff ffde 	bl	8004938 <HAL_RCC_GetHCLKFreq>
 800497c:	4602      	mov	r2, r0
 800497e:	4b05      	ldr	r3, [pc, #20]	; (8004994 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	0adb      	lsrs	r3, r3, #11
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	4903      	ldr	r1, [pc, #12]	; (8004998 <HAL_RCC_GetPCLK2Freq+0x24>)
 800498a:	5ccb      	ldrb	r3, [r1, r3]
 800498c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004990:	4618      	mov	r0, r3
 8004992:	bd80      	pop	{r7, pc}
 8004994:	40021000 	.word	0x40021000
 8004998:	0800f550 	.word	0x0800f550

0800499c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80049a4:	4b0a      	ldr	r3, [pc, #40]	; (80049d0 <RCC_Delay+0x34>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a0a      	ldr	r2, [pc, #40]	; (80049d4 <RCC_Delay+0x38>)
 80049aa:	fba2 2303 	umull	r2, r3, r2, r3
 80049ae:	0a5b      	lsrs	r3, r3, #9
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	fb02 f303 	mul.w	r3, r2, r3
 80049b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80049b8:	bf00      	nop
  }
  while (Delay --);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	1e5a      	subs	r2, r3, #1
 80049be:	60fa      	str	r2, [r7, #12]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1f9      	bne.n	80049b8 <RCC_Delay+0x1c>
}
 80049c4:	bf00      	nop
 80049c6:	bf00      	nop
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bc80      	pop	{r7}
 80049ce:	4770      	bx	lr
 80049d0:	20000000 	.word	0x20000000
 80049d4:	10624dd3 	.word	0x10624dd3

080049d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	613b      	str	r3, [r7, #16]
 80049e4:	2300      	movs	r3, #0
 80049e6:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0301 	and.w	r3, r3, #1
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d11b      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x54>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d115      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0304 	and.w	r3, r3, #4
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d10f      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0308 	and.w	r3, r3, #8
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d109      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0310 	and.w	r3, r3, #16
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d103      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004a24:	216c      	movs	r1, #108	; 0x6c
 8004a26:	4873      	ldr	r0, [pc, #460]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004a28:	f7fd fb98 	bl	800215c <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0301 	and.w	r3, r3, #1
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 8095 	beq.w	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    FlagStatus pwrclkchanged = RESET;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	75fb      	strb	r3, [r7, #23]

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d012      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a4e:	d00d      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a58:	d008      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a62:	d003      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004a64:	2174      	movs	r1, #116	; 0x74
 8004a66:	4863      	ldr	r0, [pc, #396]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004a68:	f7fd fb78 	bl	800215c <assert_failed>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a6c:	4b62      	ldr	r3, [pc, #392]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004a6e:	69db      	ldr	r3, [r3, #28]
 8004a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10d      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a78:	4b5f      	ldr	r3, [pc, #380]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004a7a:	69db      	ldr	r3, [r3, #28]
 8004a7c:	4a5e      	ldr	r2, [pc, #376]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a82:	61d3      	str	r3, [r2, #28]
 8004a84:	4b5c      	ldr	r3, [pc, #368]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004a86:	69db      	ldr	r3, [r3, #28]
 8004a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a8c:	60bb      	str	r3, [r7, #8]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a90:	2301      	movs	r3, #1
 8004a92:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a94:	4b59      	ldr	r3, [pc, #356]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d118      	bne.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004aa0:	4b56      	ldr	r3, [pc, #344]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a55      	ldr	r2, [pc, #340]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aaa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aac:	f7fe f826 	bl	8002afc <HAL_GetTick>
 8004ab0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0xee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ab4:	f7fe f822 	bl	8002afc <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b64      	cmp	r3, #100	; 0x64
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0xee>
        {
          return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e092      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x214>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ac6:	4b4d      	ldr	r3, [pc, #308]	; (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d0f0      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ad2:	4b49      	ldr	r3, [pc, #292]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ada:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d02e      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d027      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004af0:	4b41      	ldr	r3, [pc, #260]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004af2:	6a1b      	ldr	r3, [r3, #32]
 8004af4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004af8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004afa:	4b41      	ldr	r3, [pc, #260]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004afc:	2201      	movs	r2, #1
 8004afe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b00:	4b3f      	ldr	r3, [pc, #252]	; (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b06:	4a3c      	ldr	r2, [pc, #240]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d014      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b16:	f7fd fff1 	bl	8002afc <HAL_GetTick>
 8004b1a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b1c:	e00a      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x15c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b1e:	f7fd ffed 	bl	8002afc <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d901      	bls.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          {
            return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e05b      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x214>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b34:	4b30      	ldr	r3, [pc, #192]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004b36:	6a1b      	ldr	r3, [r3, #32]
 8004b38:	f003 0302 	and.w	r3, r3, #2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d0ee      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x146>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b40:	4b2d      	ldr	r3, [pc, #180]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	492a      	ldr	r1, [pc, #168]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b52:	7dfb      	ldrb	r3, [r7, #23]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d105      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b58:	4b27      	ldr	r3, [pc, #156]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	4a26      	ldr	r2, [pc, #152]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004b5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b62:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d01f      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d012      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b80:	d00d      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b8a:	d008      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004b94:	d003      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004b96:	21b9      	movs	r1, #185	; 0xb9
 8004b98:	4816      	ldr	r0, [pc, #88]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004b9a:	f7fd fadf 	bl	800215c <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b9e:	4b16      	ldr	r3, [pc, #88]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	4913      	ldr	r1, [pc, #76]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 0310 	and.w	r3, r3, #16
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d016      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bc4:	d008      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d004      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004bce:	f240 1115 	movw	r1, #277	; 0x115
 8004bd2:	4808      	ldr	r0, [pc, #32]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004bd4:	f7fd fac2 	bl	800215c <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bd8:	4b07      	ldr	r3, [pc, #28]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	4904      	ldr	r1, [pc, #16]	; (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3718      	adds	r7, #24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	0800ec44 	.word	0x0800ec44
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	40007000 	.word	0x40007000
 8004c00:	42420440 	.word	0x42420440

08004c04 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004c04:	b590      	push	{r4, r7, lr}
 8004c06:	b08d      	sub	sp, #52	; 0x34
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004c0c:	4b7a      	ldr	r3, [pc, #488]	; (8004df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>)
 8004c0e:	f107 040c 	add.w	r4, r7, #12
 8004c12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004c18:	f240 2301 	movw	r3, #513	; 0x201
 8004c1c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	627b      	str	r3, [r7, #36]	; 0x24
 8004c22:	2300      	movs	r3, #0
 8004c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c26:	2300      	movs	r3, #0
 8004c28:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	61fb      	str	r3, [r7, #28]
 8004c2e:	2300      	movs	r3, #0
 8004c30:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d118      	bne.n	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d113      	bne.n	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f003 0304 	and.w	r3, r3, #4
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10e      	bne.n	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f003 0308 	and.w	r3, r3, #8
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d109      	bne.n	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f003 0310 	and.w	r3, r3, #16
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d104      	bne.n	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004c64:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8004c68:	4864      	ldr	r0, [pc, #400]	; (8004dfc <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>)
 8004c6a:	f7fd fa77 	bl	800215c <assert_failed>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	3b01      	subs	r3, #1
 8004c72:	2b0f      	cmp	r3, #15
 8004c74:	f200 80b6 	bhi.w	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8004c78:	a201      	add	r2, pc, #4	; (adr r2, 8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>)
 8004c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7e:	bf00      	nop
 8004c80:	08004d63 	.word	0x08004d63
 8004c84:	08004dc9 	.word	0x08004dc9
 8004c88:	08004de5 	.word	0x08004de5
 8004c8c:	08004d53 	.word	0x08004d53
 8004c90:	08004de5 	.word	0x08004de5
 8004c94:	08004de5 	.word	0x08004de5
 8004c98:	08004de5 	.word	0x08004de5
 8004c9c:	08004d5b 	.word	0x08004d5b
 8004ca0:	08004de5 	.word	0x08004de5
 8004ca4:	08004de5 	.word	0x08004de5
 8004ca8:	08004de5 	.word	0x08004de5
 8004cac:	08004de5 	.word	0x08004de5
 8004cb0:	08004de5 	.word	0x08004de5
 8004cb4:	08004de5 	.word	0x08004de5
 8004cb8:	08004de5 	.word	0x08004de5
 8004cbc:	08004cc1 	.word	0x08004cc1
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8004cc0:	4b4f      	ldr	r3, [pc, #316]	; (8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004cc6:	4b4e      	ldr	r3, [pc, #312]	; (8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f000 808a 	beq.w	8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	0c9b      	lsrs	r3, r3, #18
 8004cd8:	f003 030f 	and.w	r3, r3, #15
 8004cdc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004ce0:	4413      	add	r3, r2
 8004ce2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004ce6:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d018      	beq.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004cf2:	4b43      	ldr	r3, [pc, #268]	; (8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	0c5b      	lsrs	r3, r3, #17
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004d00:	4413      	add	r3, r2
 8004d02:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004d06:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00d      	beq.n	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004d12:	4a3c      	ldr	r2, [pc, #240]	; (8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0x200>)
 8004d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d16:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d1a:	6a3b      	ldr	r3, [r7, #32]
 8004d1c:	fb02 f303 	mul.w	r3, r2, r3
 8004d20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d22:	e004      	b.n	8004d2e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d24:	6a3b      	ldr	r3, [r7, #32]
 8004d26:	4a38      	ldr	r2, [pc, #224]	; (8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8004d28:	fb02 f303 	mul.w	r3, r2, r3
 8004d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004d2e:	4b34      	ldr	r3, [pc, #208]	; (8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d3a:	d102      	bne.n	8004d42 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8004d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3e:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8004d40:	e052      	b.n	8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          frequency = (pllclk * 2) / 3;
 8004d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d44:	005b      	lsls	r3, r3, #1
 8004d46:	4a31      	ldr	r2, [pc, #196]	; (8004e0c <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8004d48:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4c:	085b      	lsrs	r3, r3, #1
 8004d4e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004d50:	e04a      	b.n	8004de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8004d52:	f7ff fd91 	bl	8004878 <HAL_RCC_GetSysClockFreq>
 8004d56:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004d58:	e049      	b.n	8004dee <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8004d5a:	f7ff fd8d 	bl	8004878 <HAL_RCC_GetSysClockFreq>
 8004d5e:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004d60:	e045      	b.n	8004dee <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8004d62:	4b27      	ldr	r3, [pc, #156]	; (8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d72:	d108      	bne.n	8004d86 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        frequency = LSE_VALUE;
 8004d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d82:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d84:	e01f      	b.n	8004dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d90:	d109      	bne.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8004d92:	4b1b      	ldr	r3, [pc, #108]	; (8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d003      	beq.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
      {
        frequency = LSI_VALUE;
 8004d9e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004da2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004da4:	e00f      	b.n	8004dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004db0:	d11c      	bne.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 8004db2:	4b13      	ldr	r3, [pc, #76]	; (8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d016      	beq.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
      {
        frequency = HSE_VALUE / 128U;
 8004dbe:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004dc2:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8004dc4:	e012      	b.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 8004dc6:	e011      	b.n	8004dec <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004dc8:	f7ff fdd4 	bl	8004974 <HAL_RCC_GetPCLK2Freq>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	4b0c      	ldr	r3, [pc, #48]	; (8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	0b9b      	lsrs	r3, r3, #14
 8004dd4:	f003 0303 	and.w	r3, r3, #3
 8004dd8:	3301      	adds	r3, #1
 8004dda:	005b      	lsls	r3, r3, #1
 8004ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004de2:	e004      	b.n	8004dee <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
    default:
    {
      break;
 8004de4:	bf00      	nop
 8004de6:	e002      	b.n	8004dee <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
      break;
 8004de8:	bf00      	nop
 8004dea:	e000      	b.n	8004dee <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
      break;
 8004dec:	bf00      	nop
    }
  }
  return (frequency);
 8004dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3734      	adds	r7, #52	; 0x34
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd90      	pop	{r4, r7, pc}
 8004df8:	0800ec80 	.word	0x0800ec80
 8004dfc:	0800ec44 	.word	0x0800ec44
 8004e00:	40021000 	.word	0x40021000
 8004e04:	007a1200 	.word	0x007a1200
 8004e08:	003d0900 	.word	0x003d0900
 8004e0c:	aaaaaaab 	.word	0xaaaaaaab

08004e10 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e0b4      	b.n	8004f90 <HAL_RTC_Init+0x180>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a5b      	ldr	r2, [pc, #364]	; (8004f98 <HAL_RTC_Init+0x188>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d004      	beq.n	8004e3a <HAL_RTC_Init+0x2a>
 8004e30:	f240 111d 	movw	r1, #285	; 0x11d
 8004e34:	4859      	ldr	r0, [pc, #356]	; (8004f9c <HAL_RTC_Init+0x18c>)
 8004e36:	f7fd f991 	bl	800215c <assert_failed>
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d012      	beq.n	8004e68 <HAL_RTC_Init+0x58>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	2b80      	cmp	r3, #128	; 0x80
 8004e48:	d00e      	beq.n	8004e68 <HAL_RTC_Init+0x58>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e52:	d009      	beq.n	8004e68 <HAL_RTC_Init+0x58>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e5c:	d004      	beq.n	8004e68 <HAL_RTC_Init+0x58>
 8004e5e:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004e62:	484e      	ldr	r0, [pc, #312]	; (8004f9c <HAL_RTC_Init+0x18c>)
 8004e64:	f7fd f97a 	bl	800215c <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e70:	d309      	bcc.n	8004e86 <HAL_RTC_Init+0x76>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7a:	d004      	beq.n	8004e86 <HAL_RTC_Init+0x76>
 8004e7c:	f240 111f 	movw	r1, #287	; 0x11f
 8004e80:	4846      	ldr	r0, [pc, #280]	; (8004f9c <HAL_RTC_Init+0x18c>)
 8004e82:	f7fd f96b 	bl	800215c <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	7c5b      	ldrb	r3, [r3, #17]
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d105      	bne.n	8004e9c <HAL_RTC_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f7fd f9e0 	bl	800225c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 fbca 	bl	800563c <HAL_RTC_WaitForSynchro>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d004      	beq.n	8004eb8 <HAL_RTC_Init+0xa8>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2204      	movs	r2, #4
 8004eb2:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e06b      	b.n	8004f90 <HAL_RTC_Init+0x180>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 fc83 	bl	80057c4 <RTC_EnterInitMode>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d004      	beq.n	8004ece <HAL_RTC_Init+0xbe>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2204      	movs	r2, #4
 8004ec8:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e060      	b.n	8004f90 <HAL_RTC_Init+0x180>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	685a      	ldr	r2, [r3, #4]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 0207 	bic.w	r2, r2, #7
 8004edc:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d005      	beq.n	8004ef2 <HAL_RTC_Init+0xe2>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004ee6:	4b2e      	ldr	r3, [pc, #184]	; (8004fa0 <HAL_RTC_Init+0x190>)
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eea:	4a2d      	ldr	r2, [pc, #180]	; (8004fa0 <HAL_RTC_Init+0x190>)
 8004eec:	f023 0301 	bic.w	r3, r3, #1
 8004ef0:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004ef2:	4b2b      	ldr	r3, [pc, #172]	; (8004fa0 <HAL_RTC_Init+0x190>)
 8004ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef6:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	4928      	ldr	r1, [pc, #160]	; (8004fa0 <HAL_RTC_Init+0x190>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0c:	d003      	beq.n	8004f16 <HAL_RTC_Init+0x106>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	60fb      	str	r3, [r7, #12]
 8004f14:	e00e      	b.n	8004f34 <HAL_RTC_Init+0x124>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004f16:	2001      	movs	r0, #1
 8004f18:	f7ff fe74 	bl	8004c04 <HAL_RCCEx_GetPeriphCLKFreq>
 8004f1c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d104      	bne.n	8004f2e <HAL_RTC_Init+0x11e>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2204      	movs	r2, #4
 8004f28:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e030      	b.n	8004f90 <HAL_RTC_Init+0x180>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	3b01      	subs	r3, #1
 8004f32:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f023 010f 	bic.w	r1, r3, #15
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	0c1a      	lsrs	r2, r3, #16
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	0c1b      	lsrs	r3, r3, #16
 8004f52:	041b      	lsls	r3, r3, #16
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	b291      	uxth	r1, r2
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	6812      	ldr	r2, [r2, #0]
 8004f5c:	430b      	orrs	r3, r1
 8004f5e:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 fc57 	bl	8005814 <RTC_ExitInitMode>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d004      	beq.n	8004f76 <HAL_RTC_Init+0x166>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2204      	movs	r2, #4
 8004f70:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e00c      	b.n	8004f90 <HAL_RTC_Init+0x180>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
  }
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	40002800 	.word	0x40002800
 8004f9c:	0800ec90 	.word	0x0800ec90
 8004fa0:	40006c00 	.word	0x40006c00

08004fa4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004fa4:	b590      	push	{r4, r7, lr}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	617b      	str	r3, [r7, #20]
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d002      	beq.n	8004fc4 <HAL_RTC_SetTime+0x20>
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e0cd      	b.n	8005164 <HAL_RTC_SetTime+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d007      	beq.n	8004fde <HAL_RTC_SetTime+0x3a>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d004      	beq.n	8004fde <HAL_RTC_SetTime+0x3a>
 8004fd4:	f240 21ca 	movw	r1, #714	; 0x2ca
 8004fd8:	4864      	ldr	r0, [pc, #400]	; (800516c <HAL_RTC_SetTime+0x1c8>)
 8004fda:	f7fd f8bf 	bl	800215c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	7c1b      	ldrb	r3, [r3, #16]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d101      	bne.n	8004fea <HAL_RTC_SetTime+0x46>
 8004fe6:	2302      	movs	r3, #2
 8004fe8:	e0bc      	b.n	8005164 <HAL_RTC_SetTime+0x1c0>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2201      	movs	r2, #1
 8004fee:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d12e      	bne.n	800505a <HAL_RTC_SetTime+0xb6>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	2b17      	cmp	r3, #23
 8005002:	d904      	bls.n	800500e <HAL_RTC_SetTime+0x6a>
 8005004:	f240 21d3 	movw	r1, #723	; 0x2d3
 8005008:	4858      	ldr	r0, [pc, #352]	; (800516c <HAL_RTC_SetTime+0x1c8>)
 800500a:	f7fd f8a7 	bl	800215c <assert_failed>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	785b      	ldrb	r3, [r3, #1]
 8005012:	2b3b      	cmp	r3, #59	; 0x3b
 8005014:	d904      	bls.n	8005020 <HAL_RTC_SetTime+0x7c>
 8005016:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 800501a:	4854      	ldr	r0, [pc, #336]	; (800516c <HAL_RTC_SetTime+0x1c8>)
 800501c:	f7fd f89e 	bl	800215c <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	789b      	ldrb	r3, [r3, #2]
 8005024:	2b3b      	cmp	r3, #59	; 0x3b
 8005026:	d904      	bls.n	8005032 <HAL_RTC_SetTime+0x8e>
 8005028:	f240 21d5 	movw	r1, #725	; 0x2d5
 800502c:	484f      	ldr	r0, [pc, #316]	; (800516c <HAL_RTC_SetTime+0x1c8>)
 800502e:	f7fd f895 	bl	800215c <assert_failed>

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	461a      	mov	r2, r3
 8005038:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800503c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	785b      	ldrb	r3, [r3, #1]
 8005044:	4619      	mov	r1, r3
 8005046:	460b      	mov	r3, r1
 8005048:	011b      	lsls	r3, r3, #4
 800504a:	1a5b      	subs	r3, r3, r1
 800504c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800504e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005054:	4413      	add	r3, r2
 8005056:	617b      	str	r3, [r7, #20]
 8005058:	e045      	b.n	80050e6 <HAL_RTC_SetTime+0x142>
  }
  else
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	4618      	mov	r0, r3
 8005060:	f000 fc1d 	bl	800589e <RTC_Bcd2ToByte>
 8005064:	4603      	mov	r3, r0
 8005066:	2b17      	cmp	r3, #23
 8005068:	d904      	bls.n	8005074 <HAL_RTC_SetTime+0xd0>
 800506a:	f240 21dd 	movw	r1, #733	; 0x2dd
 800506e:	483f      	ldr	r0, [pc, #252]	; (800516c <HAL_RTC_SetTime+0x1c8>)
 8005070:	f7fd f874 	bl	800215c <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	785b      	ldrb	r3, [r3, #1]
 8005078:	4618      	mov	r0, r3
 800507a:	f000 fc10 	bl	800589e <RTC_Bcd2ToByte>
 800507e:	4603      	mov	r3, r0
 8005080:	2b3b      	cmp	r3, #59	; 0x3b
 8005082:	d904      	bls.n	800508e <HAL_RTC_SetTime+0xea>
 8005084:	f240 21de 	movw	r1, #734	; 0x2de
 8005088:	4838      	ldr	r0, [pc, #224]	; (800516c <HAL_RTC_SetTime+0x1c8>)
 800508a:	f7fd f867 	bl	800215c <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	789b      	ldrb	r3, [r3, #2]
 8005092:	4618      	mov	r0, r3
 8005094:	f000 fc03 	bl	800589e <RTC_Bcd2ToByte>
 8005098:	4603      	mov	r3, r0
 800509a:	2b3b      	cmp	r3, #59	; 0x3b
 800509c:	d904      	bls.n	80050a8 <HAL_RTC_SetTime+0x104>
 800509e:	f240 21df 	movw	r1, #735	; 0x2df
 80050a2:	4832      	ldr	r0, [pc, #200]	; (800516c <HAL_RTC_SetTime+0x1c8>)
 80050a4:	f7fd f85a 	bl	800215c <assert_failed>

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	781b      	ldrb	r3, [r3, #0]
 80050ac:	4618      	mov	r0, r3
 80050ae:	f000 fbf6 	bl	800589e <RTC_Bcd2ToByte>
 80050b2:	4603      	mov	r3, r0
 80050b4:	461a      	mov	r2, r3
 80050b6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80050ba:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	785b      	ldrb	r3, [r3, #1]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 fbeb 	bl	800589e <RTC_Bcd2ToByte>
 80050c8:	4603      	mov	r3, r0
 80050ca:	461a      	mov	r2, r3
 80050cc:	4613      	mov	r3, r2
 80050ce:	011b      	lsls	r3, r3, #4
 80050d0:	1a9b      	subs	r3, r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80050d4:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	789b      	ldrb	r3, [r3, #2]
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 fbdf 	bl	800589e <RTC_Bcd2ToByte>
 80050e0:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80050e2:	4423      	add	r3, r4
 80050e4:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80050e6:	6979      	ldr	r1, [r7, #20]
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f000 fb04 	bl	80056f6 <RTC_WriteTimeCounter>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d007      	beq.n	8005104 <HAL_RTC_SetTime+0x160>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2204      	movs	r2, #4
 80050f8:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e02f      	b.n	8005164 <HAL_RTC_SetTime+0x1c0>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f022 0205 	bic.w	r2, r2, #5
 8005112:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005114:	68f8      	ldr	r0, [r7, #12]
 8005116:	f000 fb15 	bl	8005744 <RTC_ReadAlarmCounter>
 800511a:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005122:	d018      	beq.n	8005156 <HAL_RTC_SetTime+0x1b2>
    {
      if (counter_alarm < counter_time)
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	429a      	cmp	r2, r3
 800512a:	d214      	bcs.n	8005156 <HAL_RTC_SetTime+0x1b2>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005132:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005136:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005138:	6939      	ldr	r1, [r7, #16]
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f000 fb1b 	bl	8005776 <RTC_WriteAlarmCounter>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d007      	beq.n	8005156 <HAL_RTC_SetTime+0x1b2>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2204      	movs	r2, #4
 800514a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2200      	movs	r2, #0
 8005150:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e006      	b.n	8005164 <HAL_RTC_SetTime+0x1c0>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2201      	movs	r2, #1
 800515a:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8005162:	2300      	movs	r3, #0
  }
}
 8005164:	4618      	mov	r0, r3
 8005166:	371c      	adds	r7, #28
 8005168:	46bd      	mov	sp, r7
 800516a:	bd90      	pop	{r4, r7, pc}
 800516c:	0800ec90 	.word	0x0800ec90

08005170 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b088      	sub	sp, #32
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 800517c:	2300      	movs	r3, #0
 800517e:	61bb      	str	r3, [r7, #24]
 8005180:	2300      	movs	r3, #0
 8005182:	61fb      	str	r3, [r7, #28]
 8005184:	2300      	movs	r3, #0
 8005186:	617b      	str	r3, [r7, #20]
 8005188:	2300      	movs	r3, #0
 800518a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d002      	beq.n	8005198 <HAL_RTC_GetTime+0x28>
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e0c0      	b.n	800531e <HAL_RTC_GetTime+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d007      	beq.n	80051b2 <HAL_RTC_GetTime+0x42>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d004      	beq.n	80051b2 <HAL_RTC_GetTime+0x42>
 80051a8:	f240 312d 	movw	r1, #813	; 0x32d
 80051ac:	485e      	ldr	r0, [pc, #376]	; (8005328 <HAL_RTC_GetTime+0x1b8>)
 80051ae:	f7fc ffd5 	bl	800215c <assert_failed>

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f003 0304 	and.w	r3, r3, #4
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d001      	beq.n	80051c4 <HAL_RTC_GetTime+0x54>
  {
    return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e0ac      	b.n	800531e <HAL_RTC_GetTime+0x1ae>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f000 fa66 	bl	8005696 <RTC_ReadTimeCounter>
 80051ca:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	4a57      	ldr	r2, [pc, #348]	; (800532c <HAL_RTC_GetTime+0x1bc>)
 80051d0:	fba2 2303 	umull	r2, r3, r2, r3
 80051d4:	0adb      	lsrs	r3, r3, #11
 80051d6:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80051d8:	69ba      	ldr	r2, [r7, #24]
 80051da:	4b54      	ldr	r3, [pc, #336]	; (800532c <HAL_RTC_GetTime+0x1bc>)
 80051dc:	fba3 1302 	umull	r1, r3, r3, r2
 80051e0:	0adb      	lsrs	r3, r3, #11
 80051e2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80051e6:	fb01 f303 	mul.w	r3, r1, r3
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	4a50      	ldr	r2, [pc, #320]	; (8005330 <HAL_RTC_GetTime+0x1c0>)
 80051ee:	fba2 2303 	umull	r2, r3, r2, r3
 80051f2:	095b      	lsrs	r3, r3, #5
 80051f4:	b2da      	uxtb	r2, r3
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	4a4b      	ldr	r2, [pc, #300]	; (800532c <HAL_RTC_GetTime+0x1bc>)
 80051fe:	fba2 1203 	umull	r1, r2, r2, r3
 8005202:	0ad2      	lsrs	r2, r2, #11
 8005204:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005208:	fb01 f202 	mul.w	r2, r1, r2
 800520c:	1a9a      	subs	r2, r3, r2
 800520e:	4b48      	ldr	r3, [pc, #288]	; (8005330 <HAL_RTC_GetTime+0x1c0>)
 8005210:	fba3 1302 	umull	r1, r3, r3, r2
 8005214:	0959      	lsrs	r1, r3, #5
 8005216:	460b      	mov	r3, r1
 8005218:	011b      	lsls	r3, r3, #4
 800521a:	1a5b      	subs	r3, r3, r1
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	1ad1      	subs	r1, r2, r3
 8005220:	b2ca      	uxtb	r2, r1
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	2b17      	cmp	r3, #23
 800522a:	d955      	bls.n	80052d8 <HAL_RTC_GetTime+0x168>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	4a41      	ldr	r2, [pc, #260]	; (8005334 <HAL_RTC_GetTime+0x1c4>)
 8005230:	fba2 2303 	umull	r2, r3, r2, r3
 8005234:	091b      	lsrs	r3, r3, #4
 8005236:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8005238:	6939      	ldr	r1, [r7, #16]
 800523a:	4b3e      	ldr	r3, [pc, #248]	; (8005334 <HAL_RTC_GetTime+0x1c4>)
 800523c:	fba3 2301 	umull	r2, r3, r3, r1
 8005240:	091a      	lsrs	r2, r3, #4
 8005242:	4613      	mov	r3, r2
 8005244:	005b      	lsls	r3, r3, #1
 8005246:	4413      	add	r3, r2
 8005248:	00db      	lsls	r3, r3, #3
 800524a:	1aca      	subs	r2, r1, r3
 800524c:	b2d2      	uxtb	r2, r2
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005252:	68f8      	ldr	r0, [r7, #12]
 8005254:	f000 fa76 	bl	8005744 <RTC_ReadAlarmCounter>
 8005258:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005260:	d008      	beq.n	8005274 <HAL_RTC_GetTime+0x104>
 8005262:	69fa      	ldr	r2, [r7, #28]
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	429a      	cmp	r2, r3
 8005268:	d904      	bls.n	8005274 <HAL_RTC_GetTime+0x104>
    {
      counter_alarm -= counter_time;
 800526a:	69fa      	ldr	r2, [r7, #28]
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	61fb      	str	r3, [r7, #28]
 8005272:	e002      	b.n	800527a <HAL_RTC_GetTime+0x10a>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8005274:	f04f 33ff 	mov.w	r3, #4294967295
 8005278:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	4a2e      	ldr	r2, [pc, #184]	; (8005338 <HAL_RTC_GetTime+0x1c8>)
 800527e:	fb02 f303 	mul.w	r3, r2, r3
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005288:	69b9      	ldr	r1, [r7, #24]
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f000 fa33 	bl	80056f6 <RTC_WriteTimeCounter>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d001      	beq.n	800529a <HAL_RTC_GetTime+0x12a>
    {
      return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e041      	b.n	800531e <HAL_RTC_GetTime+0x1ae>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a0:	d00c      	beq.n	80052bc <HAL_RTC_GetTime+0x14c>
    {
      counter_alarm += counter_time;
 80052a2:	69fa      	ldr	r2, [r7, #28]
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	4413      	add	r3, r2
 80052a8:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80052aa:	69f9      	ldr	r1, [r7, #28]
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f000 fa62 	bl	8005776 <RTC_WriteAlarmCounter>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00a      	beq.n	80052ce <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e030      	b.n	800531e <HAL_RTC_GetTime+0x1ae>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80052bc:	69f9      	ldr	r1, [r7, #28]
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 fa59 	bl	8005776 <RTC_WriteAlarmCounter>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e027      	b.n	800531e <HAL_RTC_GetTime+0x1ae>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80052ce:	6979      	ldr	r1, [r7, #20]
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f000 fb01 	bl	80058d8 <RTC_DateUpdate>
 80052d6:	e003      	b.n	80052e0 <HAL_RTC_GetTime+0x170>
  }
  else
  {
    sTime->Hours = hours;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	b2da      	uxtb	r2, r3
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d01a      	beq.n	800531c <HAL_RTC_GetTime+0x1ac>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 faba 	bl	8005864 <RTC_ByteToBcd2>
 80052f0:	4603      	mov	r3, r0
 80052f2:	461a      	mov	r2, r3
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	785b      	ldrb	r3, [r3, #1]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 fab1 	bl	8005864 <RTC_ByteToBcd2>
 8005302:	4603      	mov	r3, r0
 8005304:	461a      	mov	r2, r3
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	789b      	ldrb	r3, [r3, #2]
 800530e:	4618      	mov	r0, r3
 8005310:	f000 faa8 	bl	8005864 <RTC_ByteToBcd2>
 8005314:	4603      	mov	r3, r0
 8005316:	461a      	mov	r2, r3
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3720      	adds	r7, #32
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	0800ec90 	.word	0x0800ec90
 800532c:	91a2b3c5 	.word	0x91a2b3c5
 8005330:	88888889 	.word	0x88888889
 8005334:	aaaaaaab 	.word	0xaaaaaaab
 8005338:	00015180 	.word	0x00015180

0800533c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b088      	sub	sp, #32
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8005348:	2300      	movs	r3, #0
 800534a:	61fb      	str	r3, [r7, #28]
 800534c:	2300      	movs	r3, #0
 800534e:	61bb      	str	r3, [r7, #24]
 8005350:	2300      	movs	r3, #0
 8005352:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d002      	beq.n	8005360 <HAL_RTC_SetDate+0x24>
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d101      	bne.n	8005364 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e0fc      	b.n	800555e <HAL_RTC_SetDate+0x222>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d007      	beq.n	800537a <HAL_RTC_SetDate+0x3e>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d004      	beq.n	800537a <HAL_RTC_SetDate+0x3e>
 8005370:	f44f 7167 	mov.w	r1, #924	; 0x39c
 8005374:	487c      	ldr	r0, [pc, #496]	; (8005568 <HAL_RTC_SetDate+0x22c>)
 8005376:	f7fc fef1 	bl	800215c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	7c1b      	ldrb	r3, [r3, #16]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d101      	bne.n	8005386 <HAL_RTC_SetDate+0x4a>
 8005382:	2302      	movs	r3, #2
 8005384:	e0eb      	b.n	800555e <HAL_RTC_SetDate+0x222>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2201      	movs	r2, #1
 800538a:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2202      	movs	r2, #2
 8005390:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d12f      	bne.n	80053f8 <HAL_RTC_SetDate+0xbc>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	78db      	ldrb	r3, [r3, #3]
 800539c:	2b63      	cmp	r3, #99	; 0x63
 800539e:	d904      	bls.n	80053aa <HAL_RTC_SetDate+0x6e>
 80053a0:	f240 31a5 	movw	r1, #933	; 0x3a5
 80053a4:	4870      	ldr	r0, [pc, #448]	; (8005568 <HAL_RTC_SetDate+0x22c>)
 80053a6:	f7fc fed9 	bl	800215c <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	785b      	ldrb	r3, [r3, #1]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d003      	beq.n	80053ba <HAL_RTC_SetDate+0x7e>
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	785b      	ldrb	r3, [r3, #1]
 80053b6:	2b0c      	cmp	r3, #12
 80053b8:	d904      	bls.n	80053c4 <HAL_RTC_SetDate+0x88>
 80053ba:	f240 31a6 	movw	r1, #934	; 0x3a6
 80053be:	486a      	ldr	r0, [pc, #424]	; (8005568 <HAL_RTC_SetDate+0x22c>)
 80053c0:	f7fc fecc 	bl	800215c <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	789b      	ldrb	r3, [r3, #2]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d003      	beq.n	80053d4 <HAL_RTC_SetDate+0x98>
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	789b      	ldrb	r3, [r3, #2]
 80053d0:	2b1f      	cmp	r3, #31
 80053d2:	d904      	bls.n	80053de <HAL_RTC_SetDate+0xa2>
 80053d4:	f240 31a7 	movw	r1, #935	; 0x3a7
 80053d8:	4863      	ldr	r0, [pc, #396]	; (8005568 <HAL_RTC_SetDate+0x22c>)
 80053da:	f7fc febf 	bl	800215c <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	78da      	ldrb	r2, [r3, #3]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	785a      	ldrb	r2, [r3, #1]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	789a      	ldrb	r2, [r3, #2]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	739a      	strb	r2, [r3, #14]
 80053f6:	e051      	b.n	800549c <HAL_RTC_SetDate+0x160>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	78db      	ldrb	r3, [r3, #3]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 fa4e 	bl	800589e <RTC_Bcd2ToByte>
 8005402:	4603      	mov	r3, r0
 8005404:	2b63      	cmp	r3, #99	; 0x63
 8005406:	d904      	bls.n	8005412 <HAL_RTC_SetDate+0xd6>
 8005408:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 800540c:	4856      	ldr	r0, [pc, #344]	; (8005568 <HAL_RTC_SetDate+0x22c>)
 800540e:	f7fc fea5 	bl	800215c <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	785b      	ldrb	r3, [r3, #1]
 8005416:	4618      	mov	r0, r3
 8005418:	f000 fa41 	bl	800589e <RTC_Bcd2ToByte>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d007      	beq.n	8005432 <HAL_RTC_SetDate+0xf6>
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	785b      	ldrb	r3, [r3, #1]
 8005426:	4618      	mov	r0, r3
 8005428:	f000 fa39 	bl	800589e <RTC_Bcd2ToByte>
 800542c:	4603      	mov	r3, r0
 800542e:	2b0c      	cmp	r3, #12
 8005430:	d904      	bls.n	800543c <HAL_RTC_SetDate+0x100>
 8005432:	f240 31b1 	movw	r1, #945	; 0x3b1
 8005436:	484c      	ldr	r0, [pc, #304]	; (8005568 <HAL_RTC_SetDate+0x22c>)
 8005438:	f7fc fe90 	bl	800215c <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	789b      	ldrb	r3, [r3, #2]
 8005440:	4618      	mov	r0, r3
 8005442:	f000 fa2c 	bl	800589e <RTC_Bcd2ToByte>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d007      	beq.n	800545c <HAL_RTC_SetDate+0x120>
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	789b      	ldrb	r3, [r3, #2]
 8005450:	4618      	mov	r0, r3
 8005452:	f000 fa24 	bl	800589e <RTC_Bcd2ToByte>
 8005456:	4603      	mov	r3, r0
 8005458:	2b1f      	cmp	r3, #31
 800545a:	d904      	bls.n	8005466 <HAL_RTC_SetDate+0x12a>
 800545c:	f240 31b2 	movw	r1, #946	; 0x3b2
 8005460:	4841      	ldr	r0, [pc, #260]	; (8005568 <HAL_RTC_SetDate+0x22c>)
 8005462:	f7fc fe7b 	bl	800215c <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	78db      	ldrb	r3, [r3, #3]
 800546a:	4618      	mov	r0, r3
 800546c:	f000 fa17 	bl	800589e <RTC_Bcd2ToByte>
 8005470:	4603      	mov	r3, r0
 8005472:	461a      	mov	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	785b      	ldrb	r3, [r3, #1]
 800547c:	4618      	mov	r0, r3
 800547e:	f000 fa0e 	bl	800589e <RTC_Bcd2ToByte>
 8005482:	4603      	mov	r3, r0
 8005484:	461a      	mov	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	789b      	ldrb	r3, [r3, #2]
 800548e:	4618      	mov	r0, r3
 8005490:	f000 fa05 	bl	800589e <RTC_Bcd2ToByte>
 8005494:	4603      	mov	r3, r0
 8005496:	461a      	mov	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	7bdb      	ldrb	r3, [r3, #15]
 80054a0:	4618      	mov	r0, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	7b59      	ldrb	r1, [r3, #13]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	7b9b      	ldrb	r3, [r3, #14]
 80054aa:	461a      	mov	r2, r3
 80054ac:	f000 faf0 	bl	8005a90 <RTC_WeekDayNum>
 80054b0:	4603      	mov	r3, r0
 80054b2:	461a      	mov	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	7b1a      	ldrb	r2, [r3, #12]
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	f000 f8e8 	bl	8005696 <RTC_ReadTimeCounter>
 80054c6:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	4a28      	ldr	r2, [pc, #160]	; (800556c <HAL_RTC_SetDate+0x230>)
 80054cc:	fba2 2303 	umull	r2, r3, r2, r3
 80054d0:	0adb      	lsrs	r3, r3, #11
 80054d2:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	2b18      	cmp	r3, #24
 80054d8:	d93a      	bls.n	8005550 <HAL_RTC_SetDate+0x214>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	4a24      	ldr	r2, [pc, #144]	; (8005570 <HAL_RTC_SetDate+0x234>)
 80054de:	fba2 2303 	umull	r2, r3, r2, r3
 80054e2:	091b      	lsrs	r3, r3, #4
 80054e4:	4a23      	ldr	r2, [pc, #140]	; (8005574 <HAL_RTC_SetDate+0x238>)
 80054e6:	fb02 f303 	mul.w	r3, r2, r3
 80054ea:	69fa      	ldr	r2, [r7, #28]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80054f0:	69f9      	ldr	r1, [r7, #28]
 80054f2:	68f8      	ldr	r0, [r7, #12]
 80054f4:	f000 f8ff 	bl	80056f6 <RTC_WriteTimeCounter>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d007      	beq.n	800550e <HAL_RTC_SetDate+0x1d2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2204      	movs	r2, #4
 8005502:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2200      	movs	r2, #0
 8005508:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e027      	b.n	800555e <HAL_RTC_SetDate+0x222>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f000 f918 	bl	8005744 <RTC_ReadAlarmCounter>
 8005514:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551c:	d018      	beq.n	8005550 <HAL_RTC_SetDate+0x214>
    {
      if (counter_alarm < counter_time)
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	429a      	cmp	r2, r3
 8005524:	d214      	bcs.n	8005550 <HAL_RTC_SetDate+0x214>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800552c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005530:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005532:	69b9      	ldr	r1, [r7, #24]
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f000 f91e 	bl	8005776 <RTC_WriteAlarmCounter>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d007      	beq.n	8005550 <HAL_RTC_SetDate+0x214>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2204      	movs	r2, #4
 8005544:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e006      	b.n	800555e <HAL_RTC_SetDate+0x222>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2201      	movs	r2, #1
 8005554:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3720      	adds	r7, #32
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	0800ec90 	.word	0x0800ec90
 800556c:	91a2b3c5 	.word	0x91a2b3c5
 8005570:	aaaaaaab 	.word	0xaaaaaaab
 8005574:	00015180 	.word	0x00015180

08005578 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8005584:	f107 0314 	add.w	r3, r7, #20
 8005588:	2100      	movs	r1, #0
 800558a:	460a      	mov	r2, r1
 800558c:	801a      	strh	r2, [r3, #0]
 800558e:	460a      	mov	r2, r1
 8005590:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <HAL_RTC_GetDate+0x26>
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e045      	b.n	800562e <HAL_RTC_GetDate+0xb6>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d007      	beq.n	80055b8 <HAL_RTC_GetDate+0x40>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d004      	beq.n	80055b8 <HAL_RTC_GetDate+0x40>
 80055ae:	f240 410e 	movw	r1, #1038	; 0x40e
 80055b2:	4821      	ldr	r0, [pc, #132]	; (8005638 <HAL_RTC_GetDate+0xc0>)
 80055b4:	f7fc fdd2 	bl	800215c <assert_failed>

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80055b8:	f107 0314 	add.w	r3, r7, #20
 80055bc:	2200      	movs	r2, #0
 80055be:	4619      	mov	r1, r3
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f7ff fdd5 	bl	8005170 <HAL_RTC_GetTime>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <HAL_RTC_GetDate+0x58>
  {
    return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e02e      	b.n	800562e <HAL_RTC_GetDate+0xb6>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	7b1a      	ldrb	r2, [r3, #12]
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	7bda      	ldrb	r2, [r3, #15]
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	7b5a      	ldrb	r2, [r3, #13]
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	7b9a      	ldrb	r2, [r3, #14]
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d01a      	beq.n	800562c <HAL_RTC_GetDate+0xb4>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	78db      	ldrb	r3, [r3, #3]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 f932 	bl	8005864 <RTC_ByteToBcd2>
 8005600:	4603      	mov	r3, r0
 8005602:	461a      	mov	r2, r3
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	785b      	ldrb	r3, [r3, #1]
 800560c:	4618      	mov	r0, r3
 800560e:	f000 f929 	bl	8005864 <RTC_ByteToBcd2>
 8005612:	4603      	mov	r3, r0
 8005614:	461a      	mov	r2, r3
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	789b      	ldrb	r3, [r3, #2]
 800561e:	4618      	mov	r0, r3
 8005620:	f000 f920 	bl	8005864 <RTC_ByteToBcd2>
 8005624:	4603      	mov	r3, r0
 8005626:	461a      	mov	r2, r3
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3718      	adds	r7, #24
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	0800ec90 	.word	0x0800ec90

0800563c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005644:	2300      	movs	r3, #0
 8005646:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e01d      	b.n	800568e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	685a      	ldr	r2, [r3, #4]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f022 0208 	bic.w	r2, r2, #8
 8005660:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005662:	f7fd fa4b 	bl	8002afc <HAL_GetTick>
 8005666:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005668:	e009      	b.n	800567e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800566a:	f7fd fa47 	bl	8002afc <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005678:	d901      	bls.n	800567e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e007      	b.n	800568e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f003 0308 	and.w	r3, r3, #8
 8005688:	2b00      	cmp	r3, #0
 800568a:	d0ee      	beq.n	800566a <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8005696:	b480      	push	{r7}
 8005698:	b087      	sub	sp, #28
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	827b      	strh	r3, [r7, #18]
 80056a2:	2300      	movs	r3, #0
 80056a4:	823b      	strh	r3, [r7, #16]
 80056a6:	2300      	movs	r3, #0
 80056a8:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80056aa:	2300      	movs	r3, #0
 80056ac:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	69db      	ldr	r3, [r3, #28]
 80056bc:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	699b      	ldr	r3, [r3, #24]
 80056c4:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80056c6:	8a7a      	ldrh	r2, [r7, #18]
 80056c8:	8a3b      	ldrh	r3, [r7, #16]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d008      	beq.n	80056e0 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80056ce:	8a3b      	ldrh	r3, [r7, #16]
 80056d0:	041a      	lsls	r2, r3, #16
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	69db      	ldr	r3, [r3, #28]
 80056d8:	b29b      	uxth	r3, r3
 80056da:	4313      	orrs	r3, r2
 80056dc:	617b      	str	r3, [r7, #20]
 80056de:	e004      	b.n	80056ea <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80056e0:	8a7b      	ldrh	r3, [r7, #18]
 80056e2:	041a      	lsls	r2, r3, #16
 80056e4:	89fb      	ldrh	r3, [r7, #14]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80056ea:	697b      	ldr	r3, [r7, #20]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	371c      	adds	r7, #28
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bc80      	pop	{r7}
 80056f4:	4770      	bx	lr

080056f6 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b084      	sub	sp, #16
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
 80056fe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005700:	2300      	movs	r3, #0
 8005702:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 f85d 	bl	80057c4 <RTC_EnterInitMode>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d002      	beq.n	8005716 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	73fb      	strb	r3, [r7, #15]
 8005714:	e011      	b.n	800573a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	683a      	ldr	r2, [r7, #0]
 800571c:	0c12      	lsrs	r2, r2, #16
 800571e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	b292      	uxth	r2, r2
 8005728:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f872 	bl	8005814 <RTC_ExitInitMode>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800573a:	7bfb      	ldrb	r3, [r7, #15]
}
 800573c:	4618      	mov	r0, r3
 800573e:	3710      	adds	r7, #16
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 800574c:	2300      	movs	r3, #0
 800574e:	81fb      	strh	r3, [r7, #14]
 8005750:	2300      	movs	r3, #0
 8005752:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005762:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005764:	89fb      	ldrh	r3, [r7, #14]
 8005766:	041a      	lsls	r2, r3, #16
 8005768:	89bb      	ldrh	r3, [r7, #12]
 800576a:	4313      	orrs	r3, r2
}
 800576c:	4618      	mov	r0, r3
 800576e:	3714      	adds	r7, #20
 8005770:	46bd      	mov	sp, r7
 8005772:	bc80      	pop	{r7}
 8005774:	4770      	bx	lr

08005776 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b084      	sub	sp, #16
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
 800577e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005780:	2300      	movs	r3, #0
 8005782:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 f81d 	bl	80057c4 <RTC_EnterInitMode>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d002      	beq.n	8005796 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	73fb      	strb	r3, [r7, #15]
 8005794:	e011      	b.n	80057ba <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	683a      	ldr	r2, [r7, #0]
 800579c:	0c12      	lsrs	r2, r2, #16
 800579e:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	b292      	uxth	r2, r2
 80057a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f832 	bl	8005814 <RTC_ExitInitMode>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80057ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057cc:	2300      	movs	r3, #0
 80057ce:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80057d0:	f7fd f994 	bl	8002afc <HAL_GetTick>
 80057d4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80057d6:	e009      	b.n	80057ec <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80057d8:	f7fd f990 	bl	8002afc <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057e6:	d901      	bls.n	80057ec <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e00f      	b.n	800580c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f003 0320 	and.w	r3, r3, #32
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d0ee      	beq.n	80057d8 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685a      	ldr	r2, [r3, #4]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f042 0210 	orr.w	r2, r2, #16
 8005808:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800581c:	2300      	movs	r3, #0
 800581e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685a      	ldr	r2, [r3, #4]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f022 0210 	bic.w	r2, r2, #16
 800582e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005830:	f7fd f964 	bl	8002afc <HAL_GetTick>
 8005834:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005836:	e009      	b.n	800584c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005838:	f7fd f960 	bl	8002afc <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005846:	d901      	bls.n	800584c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8005848:	2303      	movs	r3, #3
 800584a:	e007      	b.n	800585c <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	f003 0320 	and.w	r3, r3, #32
 8005856:	2b00      	cmp	r3, #0
 8005858:	d0ee      	beq.n	8005838 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	4603      	mov	r3, r0
 800586c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005872:	e005      	b.n	8005880 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	3301      	adds	r3, #1
 8005878:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800587a:	79fb      	ldrb	r3, [r7, #7]
 800587c:	3b0a      	subs	r3, #10
 800587e:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005880:	79fb      	ldrb	r3, [r7, #7]
 8005882:	2b09      	cmp	r3, #9
 8005884:	d8f6      	bhi.n	8005874 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	b2db      	uxtb	r3, r3
 800588a:	011b      	lsls	r3, r3, #4
 800588c:	b2da      	uxtb	r2, r3
 800588e:	79fb      	ldrb	r3, [r7, #7]
 8005890:	4313      	orrs	r3, r2
 8005892:	b2db      	uxtb	r3, r3
}
 8005894:	4618      	mov	r0, r3
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	bc80      	pop	{r7}
 800589c:	4770      	bx	lr

0800589e <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800589e:	b480      	push	{r7}
 80058a0:	b085      	sub	sp, #20
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	4603      	mov	r3, r0
 80058a6:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80058a8:	2300      	movs	r3, #0
 80058aa:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80058ac:	79fb      	ldrb	r3, [r7, #7]
 80058ae:	091b      	lsrs	r3, r3, #4
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	461a      	mov	r2, r3
 80058b4:	4613      	mov	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	005b      	lsls	r3, r3, #1
 80058bc:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80058be:	79fb      	ldrb	r3, [r7, #7]
 80058c0:	f003 030f 	and.w	r3, r3, #15
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	4413      	add	r3, r2
 80058cc:	b2db      	uxtb	r3, r3
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bc80      	pop	{r7}
 80058d6:	4770      	bx	lr

080058d8 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80058e2:	2300      	movs	r3, #0
 80058e4:	617b      	str	r3, [r7, #20]
 80058e6:	2300      	movs	r3, #0
 80058e8:	613b      	str	r3, [r7, #16]
 80058ea:	2300      	movs	r3, #0
 80058ec:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80058ee:	2300      	movs	r3, #0
 80058f0:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	7bdb      	ldrb	r3, [r3, #15]
 80058f6:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	7b5b      	ldrb	r3, [r3, #13]
 80058fc:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	7b9b      	ldrb	r3, [r3, #14]
 8005902:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8005904:	2300      	movs	r3, #0
 8005906:	60bb      	str	r3, [r7, #8]
 8005908:	e06f      	b.n	80059ea <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d011      	beq.n	8005934 <RTC_DateUpdate+0x5c>
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	2b03      	cmp	r3, #3
 8005914:	d00e      	beq.n	8005934 <RTC_DateUpdate+0x5c>
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	2b05      	cmp	r3, #5
 800591a:	d00b      	beq.n	8005934 <RTC_DateUpdate+0x5c>
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	2b07      	cmp	r3, #7
 8005920:	d008      	beq.n	8005934 <RTC_DateUpdate+0x5c>
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	2b08      	cmp	r3, #8
 8005926:	d005      	beq.n	8005934 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	2b0a      	cmp	r3, #10
 800592c:	d002      	beq.n	8005934 <RTC_DateUpdate+0x5c>
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	2b0c      	cmp	r3, #12
 8005932:	d117      	bne.n	8005964 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2b1e      	cmp	r3, #30
 8005938:	d803      	bhi.n	8005942 <RTC_DateUpdate+0x6a>
      {
        day++;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	3301      	adds	r3, #1
 800593e:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005940:	e050      	b.n	80059e4 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	2b0c      	cmp	r3, #12
 8005946:	d005      	beq.n	8005954 <RTC_DateUpdate+0x7c>
        {
          month++;
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	3301      	adds	r3, #1
 800594c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800594e:	2301      	movs	r3, #1
 8005950:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005952:	e047      	b.n	80059e4 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8005954:	2301      	movs	r3, #1
 8005956:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005958:	2301      	movs	r3, #1
 800595a:	60fb      	str	r3, [r7, #12]
          year++;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	3301      	adds	r3, #1
 8005960:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8005962:	e03f      	b.n	80059e4 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	2b04      	cmp	r3, #4
 8005968:	d008      	beq.n	800597c <RTC_DateUpdate+0xa4>
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	2b06      	cmp	r3, #6
 800596e:	d005      	beq.n	800597c <RTC_DateUpdate+0xa4>
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	2b09      	cmp	r3, #9
 8005974:	d002      	beq.n	800597c <RTC_DateUpdate+0xa4>
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	2b0b      	cmp	r3, #11
 800597a:	d10c      	bne.n	8005996 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2b1d      	cmp	r3, #29
 8005980:	d803      	bhi.n	800598a <RTC_DateUpdate+0xb2>
      {
        day++;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	3301      	adds	r3, #1
 8005986:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005988:	e02c      	b.n	80059e4 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	3301      	adds	r3, #1
 800598e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005990:	2301      	movs	r3, #1
 8005992:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005994:	e026      	b.n	80059e4 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	2b02      	cmp	r3, #2
 800599a:	d123      	bne.n	80059e4 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2b1b      	cmp	r3, #27
 80059a0:	d803      	bhi.n	80059aa <RTC_DateUpdate+0xd2>
      {
        day++;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	3301      	adds	r3, #1
 80059a6:	60fb      	str	r3, [r7, #12]
 80059a8:	e01c      	b.n	80059e4 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2b1c      	cmp	r3, #28
 80059ae:	d111      	bne.n	80059d4 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	4618      	mov	r0, r3
 80059b6:	f000 f839 	bl	8005a2c <RTC_IsLeapYear>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <RTC_DateUpdate+0xf0>
        {
          day++;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	3301      	adds	r3, #1
 80059c4:	60fb      	str	r3, [r7, #12]
 80059c6:	e00d      	b.n	80059e4 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	3301      	adds	r3, #1
 80059cc:	613b      	str	r3, [r7, #16]
          day = 1U;
 80059ce:	2301      	movs	r3, #1
 80059d0:	60fb      	str	r3, [r7, #12]
 80059d2:	e007      	b.n	80059e4 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2b1d      	cmp	r3, #29
 80059d8:	d104      	bne.n	80059e4 <RTC_DateUpdate+0x10c>
      {
        month++;
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	3301      	adds	r3, #1
 80059de:	613b      	str	r3, [r7, #16]
        day = 1U;
 80059e0:	2301      	movs	r3, #1
 80059e2:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	3301      	adds	r3, #1
 80059e8:	60bb      	str	r3, [r7, #8]
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d38b      	bcc.n	800590a <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	b2da      	uxtb	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	b2da      	uxtb	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	b2da      	uxtb	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	b2d2      	uxtb	r2, r2
 8005a12:	4619      	mov	r1, r3
 8005a14:	6978      	ldr	r0, [r7, #20]
 8005a16:	f000 f83b 	bl	8005a90 <RTC_WeekDayNum>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	731a      	strb	r2, [r3, #12]
}
 8005a22:	bf00      	nop
 8005a24:	3718      	adds	r7, #24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
	...

08005a2c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	4603      	mov	r3, r0
 8005a34:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8005a36:	88fb      	ldrh	r3, [r7, #6]
 8005a38:	f003 0303 	and.w	r3, r3, #3
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8005a42:	2300      	movs	r3, #0
 8005a44:	e01d      	b.n	8005a82 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8005a46:	88fb      	ldrh	r3, [r7, #6]
 8005a48:	4a10      	ldr	r2, [pc, #64]	; (8005a8c <RTC_IsLeapYear+0x60>)
 8005a4a:	fba2 1203 	umull	r1, r2, r2, r3
 8005a4e:	0952      	lsrs	r2, r2, #5
 8005a50:	2164      	movs	r1, #100	; 0x64
 8005a52:	fb01 f202 	mul.w	r2, r1, r2
 8005a56:	1a9b      	subs	r3, r3, r2
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e00f      	b.n	8005a82 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8005a62:	88fb      	ldrh	r3, [r7, #6]
 8005a64:	4a09      	ldr	r2, [pc, #36]	; (8005a8c <RTC_IsLeapYear+0x60>)
 8005a66:	fba2 1203 	umull	r1, r2, r2, r3
 8005a6a:	09d2      	lsrs	r2, r2, #7
 8005a6c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005a70:	fb01 f202 	mul.w	r2, r1, r2
 8005a74:	1a9b      	subs	r3, r3, r2
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e000      	b.n	8005a82 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8005a80:	2300      	movs	r3, #0
  }
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bc80      	pop	{r7}
 8005a8a:	4770      	bx	lr
 8005a8c:	51eb851f 	.word	0x51eb851f

08005a90 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	70fb      	strb	r3, [r7, #3]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	60bb      	str	r3, [r7, #8]
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005aae:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005ab0:	78fb      	ldrb	r3, [r7, #3]
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d82d      	bhi.n	8005b12 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8005ab6:	78fa      	ldrb	r2, [r7, #3]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	005b      	lsls	r3, r3, #1
 8005abc:	4413      	add	r3, r2
 8005abe:	00db      	lsls	r3, r3, #3
 8005ac0:	1a9b      	subs	r3, r3, r2
 8005ac2:	4a2c      	ldr	r2, [pc, #176]	; (8005b74 <RTC_WeekDayNum+0xe4>)
 8005ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac8:	085a      	lsrs	r2, r3, #1
 8005aca:	78bb      	ldrb	r3, [r7, #2]
 8005acc:	441a      	add	r2, r3
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	441a      	add	r2, r3
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	089b      	lsrs	r3, r3, #2
 8005ad8:	441a      	add	r2, r3
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	3b01      	subs	r3, #1
 8005ade:	4926      	ldr	r1, [pc, #152]	; (8005b78 <RTC_WeekDayNum+0xe8>)
 8005ae0:	fba1 1303 	umull	r1, r3, r1, r3
 8005ae4:	095b      	lsrs	r3, r3, #5
 8005ae6:	1ad2      	subs	r2, r2, r3
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	3b01      	subs	r3, #1
 8005aec:	4922      	ldr	r1, [pc, #136]	; (8005b78 <RTC_WeekDayNum+0xe8>)
 8005aee:	fba1 1303 	umull	r1, r3, r1, r3
 8005af2:	09db      	lsrs	r3, r3, #7
 8005af4:	4413      	add	r3, r2
 8005af6:	1d1a      	adds	r2, r3, #4
 8005af8:	4b20      	ldr	r3, [pc, #128]	; (8005b7c <RTC_WeekDayNum+0xec>)
 8005afa:	fba3 1302 	umull	r1, r3, r3, r2
 8005afe:	1ad1      	subs	r1, r2, r3
 8005b00:	0849      	lsrs	r1, r1, #1
 8005b02:	440b      	add	r3, r1
 8005b04:	0899      	lsrs	r1, r3, #2
 8005b06:	460b      	mov	r3, r1
 8005b08:	00db      	lsls	r3, r3, #3
 8005b0a:	1a5b      	subs	r3, r3, r1
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	60fb      	str	r3, [r7, #12]
 8005b10:	e029      	b.n	8005b66 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8005b12:	78fa      	ldrb	r2, [r7, #3]
 8005b14:	4613      	mov	r3, r2
 8005b16:	005b      	lsls	r3, r3, #1
 8005b18:	4413      	add	r3, r2
 8005b1a:	00db      	lsls	r3, r3, #3
 8005b1c:	1a9b      	subs	r3, r3, r2
 8005b1e:	4a15      	ldr	r2, [pc, #84]	; (8005b74 <RTC_WeekDayNum+0xe4>)
 8005b20:	fba2 2303 	umull	r2, r3, r2, r3
 8005b24:	085a      	lsrs	r2, r3, #1
 8005b26:	78bb      	ldrb	r3, [r7, #2]
 8005b28:	441a      	add	r2, r3
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	441a      	add	r2, r3
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	089b      	lsrs	r3, r3, #2
 8005b32:	441a      	add	r2, r3
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	4910      	ldr	r1, [pc, #64]	; (8005b78 <RTC_WeekDayNum+0xe8>)
 8005b38:	fba1 1303 	umull	r1, r3, r1, r3
 8005b3c:	095b      	lsrs	r3, r3, #5
 8005b3e:	1ad2      	subs	r2, r2, r3
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	490d      	ldr	r1, [pc, #52]	; (8005b78 <RTC_WeekDayNum+0xe8>)
 8005b44:	fba1 1303 	umull	r1, r3, r1, r3
 8005b48:	09db      	lsrs	r3, r3, #7
 8005b4a:	4413      	add	r3, r2
 8005b4c:	1c9a      	adds	r2, r3, #2
 8005b4e:	4b0b      	ldr	r3, [pc, #44]	; (8005b7c <RTC_WeekDayNum+0xec>)
 8005b50:	fba3 1302 	umull	r1, r3, r3, r2
 8005b54:	1ad1      	subs	r1, r2, r3
 8005b56:	0849      	lsrs	r1, r1, #1
 8005b58:	440b      	add	r3, r1
 8005b5a:	0899      	lsrs	r1, r3, #2
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	00db      	lsls	r3, r3, #3
 8005b60:	1a5b      	subs	r3, r3, r1
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	b2db      	uxtb	r3, r3
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bc80      	pop	{r7}
 8005b72:	4770      	bx	lr
 8005b74:	38e38e39 	.word	0x38e38e39
 8005b78:	51eb851f 	.word	0x51eb851f
 8005b7c:	24924925 	.word	0x24924925

08005b80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d101      	bne.n	8005b92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e0b2      	b.n	8005cf8 <HAL_TIM_Base_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a5a      	ldr	r2, [pc, #360]	; (8005d00 <HAL_TIM_Base_Init+0x180>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d027      	beq.n	8005bec <HAL_TIM_Base_Init+0x6c>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a58      	ldr	r2, [pc, #352]	; (8005d04 <HAL_TIM_Base_Init+0x184>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d022      	beq.n	8005bec <HAL_TIM_Base_Init+0x6c>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bae:	d01d      	beq.n	8005bec <HAL_TIM_Base_Init+0x6c>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a54      	ldr	r2, [pc, #336]	; (8005d08 <HAL_TIM_Base_Init+0x188>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d018      	beq.n	8005bec <HAL_TIM_Base_Init+0x6c>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a53      	ldr	r2, [pc, #332]	; (8005d0c <HAL_TIM_Base_Init+0x18c>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d013      	beq.n	8005bec <HAL_TIM_Base_Init+0x6c>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a51      	ldr	r2, [pc, #324]	; (8005d10 <HAL_TIM_Base_Init+0x190>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d00e      	beq.n	8005bec <HAL_TIM_Base_Init+0x6c>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a50      	ldr	r2, [pc, #320]	; (8005d14 <HAL_TIM_Base_Init+0x194>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d009      	beq.n	8005bec <HAL_TIM_Base_Init+0x6c>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a4e      	ldr	r2, [pc, #312]	; (8005d18 <HAL_TIM_Base_Init+0x198>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d004      	beq.n	8005bec <HAL_TIM_Base_Init+0x6c>
 8005be2:	f240 1113 	movw	r1, #275	; 0x113
 8005be6:	484d      	ldr	r0, [pc, #308]	; (8005d1c <HAL_TIM_Base_Init+0x19c>)
 8005be8:	f7fc fab8 	bl	800215c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d014      	beq.n	8005c1e <HAL_TIM_Base_Init+0x9e>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	2b10      	cmp	r3, #16
 8005bfa:	d010      	beq.n	8005c1e <HAL_TIM_Base_Init+0x9e>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	2b20      	cmp	r3, #32
 8005c02:	d00c      	beq.n	8005c1e <HAL_TIM_Base_Init+0x9e>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	2b40      	cmp	r3, #64	; 0x40
 8005c0a:	d008      	beq.n	8005c1e <HAL_TIM_Base_Init+0x9e>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	2b60      	cmp	r3, #96	; 0x60
 8005c12:	d004      	beq.n	8005c1e <HAL_TIM_Base_Init+0x9e>
 8005c14:	f44f 718a 	mov.w	r1, #276	; 0x114
 8005c18:	4840      	ldr	r0, [pc, #256]	; (8005d1c <HAL_TIM_Base_Init+0x19c>)
 8005c1a:	f7fc fa9f 	bl	800215c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00e      	beq.n	8005c44 <HAL_TIM_Base_Init+0xc4>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c2e:	d009      	beq.n	8005c44 <HAL_TIM_Base_Init+0xc4>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c38:	d004      	beq.n	8005c44 <HAL_TIM_Base_Init+0xc4>
 8005c3a:	f240 1115 	movw	r1, #277	; 0x115
 8005c3e:	4837      	ldr	r0, [pc, #220]	; (8005d1c <HAL_TIM_Base_Init+0x19c>)
 8005c40:	f7fc fa8c 	bl	800215c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d008      	beq.n	8005c5e <HAL_TIM_Base_Init+0xde>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	2b80      	cmp	r3, #128	; 0x80
 8005c52:	d004      	beq.n	8005c5e <HAL_TIM_Base_Init+0xde>
 8005c54:	f44f 718b 	mov.w	r1, #278	; 0x116
 8005c58:	4830      	ldr	r0, [pc, #192]	; (8005d1c <HAL_TIM_Base_Init+0x19c>)
 8005c5a:	f7fc fa7f 	bl	800215c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d111      	bne.n	8005c8e <HAL_TIM_Base_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f001 ffc0 	bl	8007bf8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d102      	bne.n	8005c86 <HAL_TIM_Base_Init+0x106>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a27      	ldr	r2, [pc, #156]	; (8005d20 <HAL_TIM_Base_Init+0x1a0>)
 8005c84:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2202      	movs	r2, #2
 8005c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	3304      	adds	r3, #4
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	4610      	mov	r0, r2
 8005ca2:	f001 fbff 	bl	80074a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3708      	adds	r7, #8
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	40012c00 	.word	0x40012c00
 8005d04:	40013400 	.word	0x40013400
 8005d08:	40000400 	.word	0x40000400
 8005d0c:	40000800 	.word	0x40000800
 8005d10:	40000c00 	.word	0x40000c00
 8005d14:	40001000 	.word	0x40001000
 8005d18:	40001400 	.word	0x40001400
 8005d1c:	0800ecc8 	.word	0x0800ecc8
 8005d20:	080022a5 	.word	0x080022a5

08005d24 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a39      	ldr	r2, [pc, #228]	; (8005e18 <HAL_TIM_Base_Start+0xf4>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d027      	beq.n	8005d86 <HAL_TIM_Base_Start+0x62>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a38      	ldr	r2, [pc, #224]	; (8005e1c <HAL_TIM_Base_Start+0xf8>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d022      	beq.n	8005d86 <HAL_TIM_Base_Start+0x62>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d48:	d01d      	beq.n	8005d86 <HAL_TIM_Base_Start+0x62>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a34      	ldr	r2, [pc, #208]	; (8005e20 <HAL_TIM_Base_Start+0xfc>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d018      	beq.n	8005d86 <HAL_TIM_Base_Start+0x62>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a32      	ldr	r2, [pc, #200]	; (8005e24 <HAL_TIM_Base_Start+0x100>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d013      	beq.n	8005d86 <HAL_TIM_Base_Start+0x62>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a31      	ldr	r2, [pc, #196]	; (8005e28 <HAL_TIM_Base_Start+0x104>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d00e      	beq.n	8005d86 <HAL_TIM_Base_Start+0x62>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a2f      	ldr	r2, [pc, #188]	; (8005e2c <HAL_TIM_Base_Start+0x108>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d009      	beq.n	8005d86 <HAL_TIM_Base_Start+0x62>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a2e      	ldr	r2, [pc, #184]	; (8005e30 <HAL_TIM_Base_Start+0x10c>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d004      	beq.n	8005d86 <HAL_TIM_Base_Start+0x62>
 8005d7c:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8005d80:	482c      	ldr	r0, [pc, #176]	; (8005e34 <HAL_TIM_Base_Start+0x110>)
 8005d82:	f7fc f9eb 	bl	800215c <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d001      	beq.n	8005d96 <HAL_TIM_Base_Start+0x72>
  {
    return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e03c      	b.n	8005e10 <HAL_TIM_Base_Start+0xec>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2202      	movs	r2, #2
 8005d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a1d      	ldr	r2, [pc, #116]	; (8005e18 <HAL_TIM_Base_Start+0xf4>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d018      	beq.n	8005dda <HAL_TIM_Base_Start+0xb6>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a1b      	ldr	r2, [pc, #108]	; (8005e1c <HAL_TIM_Base_Start+0xf8>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d013      	beq.n	8005dda <HAL_TIM_Base_Start+0xb6>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dba:	d00e      	beq.n	8005dda <HAL_TIM_Base_Start+0xb6>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a17      	ldr	r2, [pc, #92]	; (8005e20 <HAL_TIM_Base_Start+0xfc>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d009      	beq.n	8005dda <HAL_TIM_Base_Start+0xb6>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a16      	ldr	r2, [pc, #88]	; (8005e24 <HAL_TIM_Base_Start+0x100>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d004      	beq.n	8005dda <HAL_TIM_Base_Start+0xb6>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a14      	ldr	r2, [pc, #80]	; (8005e28 <HAL_TIM_Base_Start+0x104>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d111      	bne.n	8005dfe <HAL_TIM_Base_Start+0xda>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f003 0307 	and.w	r3, r3, #7
 8005de4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2b06      	cmp	r3, #6
 8005dea:	d010      	beq.n	8005e0e <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f042 0201 	orr.w	r2, r2, #1
 8005dfa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dfc:	e007      	b.n	8005e0e <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f042 0201 	orr.w	r2, r2, #1
 8005e0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	40012c00 	.word	0x40012c00
 8005e1c:	40013400 	.word	0x40013400
 8005e20:	40000400 	.word	0x40000400
 8005e24:	40000800 	.word	0x40000800
 8005e28:	40000c00 	.word	0x40000c00
 8005e2c:	40001000 	.word	0x40001000
 8005e30:	40001400 	.word	0x40001400
 8005e34:	0800ecc8 	.word	0x0800ecc8

08005e38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a3d      	ldr	r2, [pc, #244]	; (8005f3c <HAL_TIM_Base_Start_IT+0x104>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d027      	beq.n	8005e9a <HAL_TIM_Base_Start_IT+0x62>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a3c      	ldr	r2, [pc, #240]	; (8005f40 <HAL_TIM_Base_Start_IT+0x108>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d022      	beq.n	8005e9a <HAL_TIM_Base_Start_IT+0x62>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e5c:	d01d      	beq.n	8005e9a <HAL_TIM_Base_Start_IT+0x62>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a38      	ldr	r2, [pc, #224]	; (8005f44 <HAL_TIM_Base_Start_IT+0x10c>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d018      	beq.n	8005e9a <HAL_TIM_Base_Start_IT+0x62>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a36      	ldr	r2, [pc, #216]	; (8005f48 <HAL_TIM_Base_Start_IT+0x110>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d013      	beq.n	8005e9a <HAL_TIM_Base_Start_IT+0x62>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a35      	ldr	r2, [pc, #212]	; (8005f4c <HAL_TIM_Base_Start_IT+0x114>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d00e      	beq.n	8005e9a <HAL_TIM_Base_Start_IT+0x62>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a33      	ldr	r2, [pc, #204]	; (8005f50 <HAL_TIM_Base_Start_IT+0x118>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d009      	beq.n	8005e9a <HAL_TIM_Base_Start_IT+0x62>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a32      	ldr	r2, [pc, #200]	; (8005f54 <HAL_TIM_Base_Start_IT+0x11c>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d004      	beq.n	8005e9a <HAL_TIM_Base_Start_IT+0x62>
 8005e90:	f240 11cf 	movw	r1, #463	; 0x1cf
 8005e94:	4830      	ldr	r0, [pc, #192]	; (8005f58 <HAL_TIM_Base_Start_IT+0x120>)
 8005e96:	f7fc f961 	bl	800215c <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d001      	beq.n	8005eaa <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e044      	b.n	8005f34 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2202      	movs	r2, #2
 8005eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68da      	ldr	r2, [r3, #12]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f042 0201 	orr.w	r2, r2, #1
 8005ec0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a1d      	ldr	r2, [pc, #116]	; (8005f3c <HAL_TIM_Base_Start_IT+0x104>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d018      	beq.n	8005efe <HAL_TIM_Base_Start_IT+0xc6>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a1b      	ldr	r2, [pc, #108]	; (8005f40 <HAL_TIM_Base_Start_IT+0x108>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d013      	beq.n	8005efe <HAL_TIM_Base_Start_IT+0xc6>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ede:	d00e      	beq.n	8005efe <HAL_TIM_Base_Start_IT+0xc6>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a17      	ldr	r2, [pc, #92]	; (8005f44 <HAL_TIM_Base_Start_IT+0x10c>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d009      	beq.n	8005efe <HAL_TIM_Base_Start_IT+0xc6>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a16      	ldr	r2, [pc, #88]	; (8005f48 <HAL_TIM_Base_Start_IT+0x110>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d004      	beq.n	8005efe <HAL_TIM_Base_Start_IT+0xc6>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a14      	ldr	r2, [pc, #80]	; (8005f4c <HAL_TIM_Base_Start_IT+0x114>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d111      	bne.n	8005f22 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f003 0307 	and.w	r3, r3, #7
 8005f08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2b06      	cmp	r3, #6
 8005f0e:	d010      	beq.n	8005f32 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f042 0201 	orr.w	r2, r2, #1
 8005f1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f20:	e007      	b.n	8005f32 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f042 0201 	orr.w	r2, r2, #1
 8005f30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	40012c00 	.word	0x40012c00
 8005f40:	40013400 	.word	0x40013400
 8005f44:	40000400 	.word	0x40000400
 8005f48:	40000800 	.word	0x40000800
 8005f4c:	40000c00 	.word	0x40000c00
 8005f50:	40001000 	.word	0x40001000
 8005f54:	40001400 	.word	0x40001400
 8005f58:	0800ecc8 	.word	0x0800ecc8

08005f5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e0b2      	b.n	80060d4 <HAL_TIM_PWM_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a5a      	ldr	r2, [pc, #360]	; (80060dc <HAL_TIM_PWM_Init+0x180>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d027      	beq.n	8005fc8 <HAL_TIM_PWM_Init+0x6c>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a58      	ldr	r2, [pc, #352]	; (80060e0 <HAL_TIM_PWM_Init+0x184>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d022      	beq.n	8005fc8 <HAL_TIM_PWM_Init+0x6c>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f8a:	d01d      	beq.n	8005fc8 <HAL_TIM_PWM_Init+0x6c>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a54      	ldr	r2, [pc, #336]	; (80060e4 <HAL_TIM_PWM_Init+0x188>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d018      	beq.n	8005fc8 <HAL_TIM_PWM_Init+0x6c>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a53      	ldr	r2, [pc, #332]	; (80060e8 <HAL_TIM_PWM_Init+0x18c>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d013      	beq.n	8005fc8 <HAL_TIM_PWM_Init+0x6c>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a51      	ldr	r2, [pc, #324]	; (80060ec <HAL_TIM_PWM_Init+0x190>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d00e      	beq.n	8005fc8 <HAL_TIM_PWM_Init+0x6c>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a50      	ldr	r2, [pc, #320]	; (80060f0 <HAL_TIM_PWM_Init+0x194>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d009      	beq.n	8005fc8 <HAL_TIM_PWM_Init+0x6c>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a4e      	ldr	r2, [pc, #312]	; (80060f4 <HAL_TIM_PWM_Init+0x198>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d004      	beq.n	8005fc8 <HAL_TIM_PWM_Init+0x6c>
 8005fbe:	f240 5113 	movw	r1, #1299	; 0x513
 8005fc2:	484d      	ldr	r0, [pc, #308]	; (80060f8 <HAL_TIM_PWM_Init+0x19c>)
 8005fc4:	f7fc f8ca 	bl	800215c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d014      	beq.n	8005ffa <HAL_TIM_PWM_Init+0x9e>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	2b10      	cmp	r3, #16
 8005fd6:	d010      	beq.n	8005ffa <HAL_TIM_PWM_Init+0x9e>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	2b20      	cmp	r3, #32
 8005fde:	d00c      	beq.n	8005ffa <HAL_TIM_PWM_Init+0x9e>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	2b40      	cmp	r3, #64	; 0x40
 8005fe6:	d008      	beq.n	8005ffa <HAL_TIM_PWM_Init+0x9e>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	2b60      	cmp	r3, #96	; 0x60
 8005fee:	d004      	beq.n	8005ffa <HAL_TIM_PWM_Init+0x9e>
 8005ff0:	f240 5114 	movw	r1, #1300	; 0x514
 8005ff4:	4840      	ldr	r0, [pc, #256]	; (80060f8 <HAL_TIM_PWM_Init+0x19c>)
 8005ff6:	f7fc f8b1 	bl	800215c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00e      	beq.n	8006020 <HAL_TIM_PWM_Init+0xc4>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800600a:	d009      	beq.n	8006020 <HAL_TIM_PWM_Init+0xc4>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006014:	d004      	beq.n	8006020 <HAL_TIM_PWM_Init+0xc4>
 8006016:	f240 5115 	movw	r1, #1301	; 0x515
 800601a:	4837      	ldr	r0, [pc, #220]	; (80060f8 <HAL_TIM_PWM_Init+0x19c>)
 800601c:	f7fc f89e 	bl	800215c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d008      	beq.n	800603a <HAL_TIM_PWM_Init+0xde>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	2b80      	cmp	r3, #128	; 0x80
 800602e:	d004      	beq.n	800603a <HAL_TIM_PWM_Init+0xde>
 8006030:	f240 5116 	movw	r1, #1302	; 0x516
 8006034:	4830      	ldr	r0, [pc, #192]	; (80060f8 <HAL_TIM_PWM_Init+0x19c>)
 8006036:	f7fc f891 	bl	800215c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b00      	cmp	r3, #0
 8006044:	d111      	bne.n	800606a <HAL_TIM_PWM_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f001 fdd2 	bl	8007bf8 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006058:	2b00      	cmp	r3, #0
 800605a:	d102      	bne.n	8006062 <HAL_TIM_PWM_Init+0x106>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a27      	ldr	r2, [pc, #156]	; (80060fc <HAL_TIM_PWM_Init+0x1a0>)
 8006060:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2202      	movs	r2, #2
 800606e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	3304      	adds	r3, #4
 800607a:	4619      	mov	r1, r3
 800607c:	4610      	mov	r0, r2
 800607e:	f001 fa11 	bl	80074a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2201      	movs	r2, #1
 8006096:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3708      	adds	r7, #8
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	40012c00 	.word	0x40012c00
 80060e0:	40013400 	.word	0x40013400
 80060e4:	40000400 	.word	0x40000400
 80060e8:	40000800 	.word	0x40000800
 80060ec:	40000c00 	.word	0x40000c00
 80060f0:	40001000 	.word	0x40001000
 80060f4:	40001400 	.word	0x40001400
 80060f8:	0800ecc8 	.word	0x0800ecc8
 80060fc:	08006101 	.word	0x08006101

08006100 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	bc80      	pop	{r7}
 8006110:	4770      	bx	lr
	...

08006114 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a8a      	ldr	r2, [pc, #552]	; (800634c <HAL_TIM_PWM_Start+0x238>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d10b      	bne.n	8006140 <HAL_TIM_PWM_Start+0x2c>
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d062      	beq.n	80061f4 <HAL_TIM_PWM_Start+0xe0>
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2b04      	cmp	r3, #4
 8006132:	d05f      	beq.n	80061f4 <HAL_TIM_PWM_Start+0xe0>
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	2b08      	cmp	r3, #8
 8006138:	d05c      	beq.n	80061f4 <HAL_TIM_PWM_Start+0xe0>
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	2b0c      	cmp	r3, #12
 800613e:	d059      	beq.n	80061f4 <HAL_TIM_PWM_Start+0xe0>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a82      	ldr	r2, [pc, #520]	; (8006350 <HAL_TIM_PWM_Start+0x23c>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d10b      	bne.n	8006162 <HAL_TIM_PWM_Start+0x4e>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d051      	beq.n	80061f4 <HAL_TIM_PWM_Start+0xe0>
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	2b04      	cmp	r3, #4
 8006154:	d04e      	beq.n	80061f4 <HAL_TIM_PWM_Start+0xe0>
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	2b08      	cmp	r3, #8
 800615a:	d04b      	beq.n	80061f4 <HAL_TIM_PWM_Start+0xe0>
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	2b0c      	cmp	r3, #12
 8006160:	d048      	beq.n	80061f4 <HAL_TIM_PWM_Start+0xe0>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800616a:	d10b      	bne.n	8006184 <HAL_TIM_PWM_Start+0x70>
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d040      	beq.n	80061f4 <HAL_TIM_PWM_Start+0xe0>
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	2b04      	cmp	r3, #4
 8006176:	d03d      	beq.n	80061f4 <HAL_TIM_PWM_Start+0xe0>
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	2b08      	cmp	r3, #8
 800617c:	d03a      	beq.n	80061f4 <HAL_TIM_PWM_Start+0xe0>
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	2b0c      	cmp	r3, #12
 8006182:	d037      	beq.n	80061f4 <HAL_TIM_PWM_Start+0xe0>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a72      	ldr	r2, [pc, #456]	; (8006354 <HAL_TIM_PWM_Start+0x240>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d10b      	bne.n	80061a6 <HAL_TIM_PWM_Start+0x92>
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d02f      	beq.n	80061f4 <HAL_TIM_PWM_Start+0xe0>
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	2b04      	cmp	r3, #4
 8006198:	d02c      	beq.n	80061f4 <HAL_TIM_PWM_Start+0xe0>
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	2b08      	cmp	r3, #8
 800619e:	d029      	beq.n	80061f4 <HAL_TIM_PWM_Start+0xe0>
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	2b0c      	cmp	r3, #12
 80061a4:	d026      	beq.n	80061f4 <HAL_TIM_PWM_Start+0xe0>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a6b      	ldr	r2, [pc, #428]	; (8006358 <HAL_TIM_PWM_Start+0x244>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d10b      	bne.n	80061c8 <HAL_TIM_PWM_Start+0xb4>
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d01e      	beq.n	80061f4 <HAL_TIM_PWM_Start+0xe0>
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	2b04      	cmp	r3, #4
 80061ba:	d01b      	beq.n	80061f4 <HAL_TIM_PWM_Start+0xe0>
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	2b08      	cmp	r3, #8
 80061c0:	d018      	beq.n	80061f4 <HAL_TIM_PWM_Start+0xe0>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b0c      	cmp	r3, #12
 80061c6:	d015      	beq.n	80061f4 <HAL_TIM_PWM_Start+0xe0>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a63      	ldr	r2, [pc, #396]	; (800635c <HAL_TIM_PWM_Start+0x248>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d10b      	bne.n	80061ea <HAL_TIM_PWM_Start+0xd6>
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00d      	beq.n	80061f4 <HAL_TIM_PWM_Start+0xe0>
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	2b04      	cmp	r3, #4
 80061dc:	d00a      	beq.n	80061f4 <HAL_TIM_PWM_Start+0xe0>
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2b08      	cmp	r3, #8
 80061e2:	d007      	beq.n	80061f4 <HAL_TIM_PWM_Start+0xe0>
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	2b0c      	cmp	r3, #12
 80061e8:	d004      	beq.n	80061f4 <HAL_TIM_PWM_Start+0xe0>
 80061ea:	f240 5199 	movw	r1, #1433	; 0x599
 80061ee:	485c      	ldr	r0, [pc, #368]	; (8006360 <HAL_TIM_PWM_Start+0x24c>)
 80061f0:	f7fb ffb4 	bl	800215c <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d109      	bne.n	800620e <HAL_TIM_PWM_Start+0xfa>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b01      	cmp	r3, #1
 8006204:	bf14      	ite	ne
 8006206:	2301      	movne	r3, #1
 8006208:	2300      	moveq	r3, #0
 800620a:	b2db      	uxtb	r3, r3
 800620c:	e022      	b.n	8006254 <HAL_TIM_PWM_Start+0x140>
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2b04      	cmp	r3, #4
 8006212:	d109      	bne.n	8006228 <HAL_TIM_PWM_Start+0x114>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800621a:	b2db      	uxtb	r3, r3
 800621c:	2b01      	cmp	r3, #1
 800621e:	bf14      	ite	ne
 8006220:	2301      	movne	r3, #1
 8006222:	2300      	moveq	r3, #0
 8006224:	b2db      	uxtb	r3, r3
 8006226:	e015      	b.n	8006254 <HAL_TIM_PWM_Start+0x140>
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	2b08      	cmp	r3, #8
 800622c:	d109      	bne.n	8006242 <HAL_TIM_PWM_Start+0x12e>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006234:	b2db      	uxtb	r3, r3
 8006236:	2b01      	cmp	r3, #1
 8006238:	bf14      	ite	ne
 800623a:	2301      	movne	r3, #1
 800623c:	2300      	moveq	r3, #0
 800623e:	b2db      	uxtb	r3, r3
 8006240:	e008      	b.n	8006254 <HAL_TIM_PWM_Start+0x140>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2b01      	cmp	r3, #1
 800624c:	bf14      	ite	ne
 800624e:	2301      	movne	r3, #1
 8006250:	2300      	moveq	r3, #0
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b00      	cmp	r3, #0
 8006256:	d001      	beq.n	800625c <HAL_TIM_PWM_Start+0x148>
  {
    return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e072      	b.n	8006342 <HAL_TIM_PWM_Start+0x22e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d104      	bne.n	800626c <HAL_TIM_PWM_Start+0x158>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2202      	movs	r2, #2
 8006266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800626a:	e013      	b.n	8006294 <HAL_TIM_PWM_Start+0x180>
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	2b04      	cmp	r3, #4
 8006270:	d104      	bne.n	800627c <HAL_TIM_PWM_Start+0x168>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2202      	movs	r2, #2
 8006276:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800627a:	e00b      	b.n	8006294 <HAL_TIM_PWM_Start+0x180>
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	2b08      	cmp	r3, #8
 8006280:	d104      	bne.n	800628c <HAL_TIM_PWM_Start+0x178>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2202      	movs	r2, #2
 8006286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800628a:	e003      	b.n	8006294 <HAL_TIM_PWM_Start+0x180>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2202      	movs	r2, #2
 8006290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2201      	movs	r2, #1
 800629a:	6839      	ldr	r1, [r7, #0]
 800629c:	4618      	mov	r0, r3
 800629e:	f001 fc4b 	bl	8007b38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a29      	ldr	r2, [pc, #164]	; (800634c <HAL_TIM_PWM_Start+0x238>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d004      	beq.n	80062b6 <HAL_TIM_PWM_Start+0x1a2>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a27      	ldr	r2, [pc, #156]	; (8006350 <HAL_TIM_PWM_Start+0x23c>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d101      	bne.n	80062ba <HAL_TIM_PWM_Start+0x1a6>
 80062b6:	2301      	movs	r3, #1
 80062b8:	e000      	b.n	80062bc <HAL_TIM_PWM_Start+0x1a8>
 80062ba:	2300      	movs	r3, #0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d007      	beq.n	80062d0 <HAL_TIM_PWM_Start+0x1bc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062ce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a1d      	ldr	r2, [pc, #116]	; (800634c <HAL_TIM_PWM_Start+0x238>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d018      	beq.n	800630c <HAL_TIM_PWM_Start+0x1f8>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a1c      	ldr	r2, [pc, #112]	; (8006350 <HAL_TIM_PWM_Start+0x23c>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d013      	beq.n	800630c <HAL_TIM_PWM_Start+0x1f8>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ec:	d00e      	beq.n	800630c <HAL_TIM_PWM_Start+0x1f8>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a18      	ldr	r2, [pc, #96]	; (8006354 <HAL_TIM_PWM_Start+0x240>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d009      	beq.n	800630c <HAL_TIM_PWM_Start+0x1f8>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a16      	ldr	r2, [pc, #88]	; (8006358 <HAL_TIM_PWM_Start+0x244>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d004      	beq.n	800630c <HAL_TIM_PWM_Start+0x1f8>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a15      	ldr	r2, [pc, #84]	; (800635c <HAL_TIM_PWM_Start+0x248>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d111      	bne.n	8006330 <HAL_TIM_PWM_Start+0x21c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f003 0307 	and.w	r3, r3, #7
 8006316:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2b06      	cmp	r3, #6
 800631c:	d010      	beq.n	8006340 <HAL_TIM_PWM_Start+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f042 0201 	orr.w	r2, r2, #1
 800632c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800632e:	e007      	b.n	8006340 <HAL_TIM_PWM_Start+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f042 0201 	orr.w	r2, r2, #1
 800633e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006340:	2300      	movs	r3, #0
}
 8006342:	4618      	mov	r0, r3
 8006344:	3710      	adds	r7, #16
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	40012c00 	.word	0x40012c00
 8006350:	40013400 	.word	0x40013400
 8006354:	40000400 	.word	0x40000400
 8006358:	40000800 	.word	0x40000800
 800635c:	40000c00 	.word	0x40000c00
 8006360:	0800ecc8 	.word	0x0800ecc8

08006364 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b086      	sub	sp, #24
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d101      	bne.n	8006378 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e192      	b.n	800669e <HAL_TIM_Encoder_Init+0x33a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a7d      	ldr	r2, [pc, #500]	; (8006574 <HAL_TIM_Encoder_Init+0x210>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d01d      	beq.n	80063be <HAL_TIM_Encoder_Init+0x5a>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a7c      	ldr	r2, [pc, #496]	; (8006578 <HAL_TIM_Encoder_Init+0x214>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d018      	beq.n	80063be <HAL_TIM_Encoder_Init+0x5a>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006394:	d013      	beq.n	80063be <HAL_TIM_Encoder_Init+0x5a>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a78      	ldr	r2, [pc, #480]	; (800657c <HAL_TIM_Encoder_Init+0x218>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d00e      	beq.n	80063be <HAL_TIM_Encoder_Init+0x5a>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a76      	ldr	r2, [pc, #472]	; (8006580 <HAL_TIM_Encoder_Init+0x21c>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d009      	beq.n	80063be <HAL_TIM_Encoder_Init+0x5a>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a75      	ldr	r2, [pc, #468]	; (8006584 <HAL_TIM_Encoder_Init+0x220>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d004      	beq.n	80063be <HAL_TIM_Encoder_Init+0x5a>
 80063b4:	f640 318e 	movw	r1, #2958	; 0xb8e
 80063b8:	4873      	ldr	r0, [pc, #460]	; (8006588 <HAL_TIM_Encoder_Init+0x224>)
 80063ba:	f7fb fecf 	bl	800215c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d014      	beq.n	80063f0 <HAL_TIM_Encoder_Init+0x8c>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	2b10      	cmp	r3, #16
 80063cc:	d010      	beq.n	80063f0 <HAL_TIM_Encoder_Init+0x8c>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	2b20      	cmp	r3, #32
 80063d4:	d00c      	beq.n	80063f0 <HAL_TIM_Encoder_Init+0x8c>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	2b40      	cmp	r3, #64	; 0x40
 80063dc:	d008      	beq.n	80063f0 <HAL_TIM_Encoder_Init+0x8c>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	2b60      	cmp	r3, #96	; 0x60
 80063e4:	d004      	beq.n	80063f0 <HAL_TIM_Encoder_Init+0x8c>
 80063e6:	f640 318f 	movw	r1, #2959	; 0xb8f
 80063ea:	4867      	ldr	r0, [pc, #412]	; (8006588 <HAL_TIM_Encoder_Init+0x224>)
 80063ec:	f7fb feb6 	bl	800215c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00e      	beq.n	8006416 <HAL_TIM_Encoder_Init+0xb2>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006400:	d009      	beq.n	8006416 <HAL_TIM_Encoder_Init+0xb2>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800640a:	d004      	beq.n	8006416 <HAL_TIM_Encoder_Init+0xb2>
 800640c:	f44f 6139 	mov.w	r1, #2960	; 0xb90
 8006410:	485d      	ldr	r0, [pc, #372]	; (8006588 <HAL_TIM_Encoder_Init+0x224>)
 8006412:	f7fb fea3 	bl	800215c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d008      	beq.n	8006430 <HAL_TIM_Encoder_Init+0xcc>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	699b      	ldr	r3, [r3, #24]
 8006422:	2b80      	cmp	r3, #128	; 0x80
 8006424:	d004      	beq.n	8006430 <HAL_TIM_Encoder_Init+0xcc>
 8006426:	f640 3191 	movw	r1, #2961	; 0xb91
 800642a:	4857      	ldr	r0, [pc, #348]	; (8006588 <HAL_TIM_Encoder_Init+0x224>)
 800642c:	f7fb fe96 	bl	800215c <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d00c      	beq.n	8006452 <HAL_TIM_Encoder_Init+0xee>
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	2b02      	cmp	r3, #2
 800643e:	d008      	beq.n	8006452 <HAL_TIM_Encoder_Init+0xee>
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2b03      	cmp	r3, #3
 8006446:	d004      	beq.n	8006452 <HAL_TIM_Encoder_Init+0xee>
 8006448:	f640 3192 	movw	r1, #2962	; 0xb92
 800644c:	484e      	ldr	r0, [pc, #312]	; (8006588 <HAL_TIM_Encoder_Init+0x224>)
 800644e:	f7fb fe85 	bl	800215c <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	2b01      	cmp	r3, #1
 8006458:	d00c      	beq.n	8006474 <HAL_TIM_Encoder_Init+0x110>
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	2b02      	cmp	r3, #2
 8006460:	d008      	beq.n	8006474 <HAL_TIM_Encoder_Init+0x110>
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	2b03      	cmp	r3, #3
 8006468:	d004      	beq.n	8006474 <HAL_TIM_Encoder_Init+0x110>
 800646a:	f640 3193 	movw	r1, #2963	; 0xb93
 800646e:	4846      	ldr	r0, [pc, #280]	; (8006588 <HAL_TIM_Encoder_Init+0x224>)
 8006470:	f7fb fe74 	bl	800215c <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	699b      	ldr	r3, [r3, #24]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d00c      	beq.n	8006496 <HAL_TIM_Encoder_Init+0x132>
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	2b02      	cmp	r3, #2
 8006482:	d008      	beq.n	8006496 <HAL_TIM_Encoder_Init+0x132>
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	2b03      	cmp	r3, #3
 800648a:	d004      	beq.n	8006496 <HAL_TIM_Encoder_Init+0x132>
 800648c:	f640 3194 	movw	r1, #2964	; 0xb94
 8006490:	483d      	ldr	r0, [pc, #244]	; (8006588 <HAL_TIM_Encoder_Init+0x224>)
 8006492:	f7fb fe63 	bl	800215c <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d008      	beq.n	80064b0 <HAL_TIM_Encoder_Init+0x14c>
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d004      	beq.n	80064b0 <HAL_TIM_Encoder_Init+0x14c>
 80064a6:	f640 3195 	movw	r1, #2965	; 0xb95
 80064aa:	4837      	ldr	r0, [pc, #220]	; (8006588 <HAL_TIM_Encoder_Init+0x224>)
 80064ac:	f7fb fe56 	bl	800215c <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	695b      	ldr	r3, [r3, #20]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d008      	beq.n	80064ca <HAL_TIM_Encoder_Init+0x166>
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	695b      	ldr	r3, [r3, #20]
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d004      	beq.n	80064ca <HAL_TIM_Encoder_Init+0x166>
 80064c0:	f640 3196 	movw	r1, #2966	; 0xb96
 80064c4:	4830      	ldr	r0, [pc, #192]	; (8006588 <HAL_TIM_Encoder_Init+0x224>)
 80064c6:	f7fb fe49 	bl	800215c <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d010      	beq.n	80064f4 <HAL_TIM_Encoder_Init+0x190>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	2b04      	cmp	r3, #4
 80064d8:	d00c      	beq.n	80064f4 <HAL_TIM_Encoder_Init+0x190>
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	2b08      	cmp	r3, #8
 80064e0:	d008      	beq.n	80064f4 <HAL_TIM_Encoder_Init+0x190>
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	2b0c      	cmp	r3, #12
 80064e8:	d004      	beq.n	80064f4 <HAL_TIM_Encoder_Init+0x190>
 80064ea:	f640 3197 	movw	r1, #2967	; 0xb97
 80064ee:	4826      	ldr	r0, [pc, #152]	; (8006588 <HAL_TIM_Encoder_Init+0x224>)
 80064f0:	f7fb fe34 	bl	800215c <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	69db      	ldr	r3, [r3, #28]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d010      	beq.n	800651e <HAL_TIM_Encoder_Init+0x1ba>
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	69db      	ldr	r3, [r3, #28]
 8006500:	2b04      	cmp	r3, #4
 8006502:	d00c      	beq.n	800651e <HAL_TIM_Encoder_Init+0x1ba>
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	69db      	ldr	r3, [r3, #28]
 8006508:	2b08      	cmp	r3, #8
 800650a:	d008      	beq.n	800651e <HAL_TIM_Encoder_Init+0x1ba>
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	69db      	ldr	r3, [r3, #28]
 8006510:	2b0c      	cmp	r3, #12
 8006512:	d004      	beq.n	800651e <HAL_TIM_Encoder_Init+0x1ba>
 8006514:	f640 3198 	movw	r1, #2968	; 0xb98
 8006518:	481b      	ldr	r0, [pc, #108]	; (8006588 <HAL_TIM_Encoder_Init+0x224>)
 800651a:	f7fb fe1f 	bl	800215c <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	2b0f      	cmp	r3, #15
 8006524:	d904      	bls.n	8006530 <HAL_TIM_Encoder_Init+0x1cc>
 8006526:	f640 3199 	movw	r1, #2969	; 0xb99
 800652a:	4817      	ldr	r0, [pc, #92]	; (8006588 <HAL_TIM_Encoder_Init+0x224>)
 800652c:	f7fb fe16 	bl	800215c <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	6a1b      	ldr	r3, [r3, #32]
 8006534:	2b0f      	cmp	r3, #15
 8006536:	d904      	bls.n	8006542 <HAL_TIM_Encoder_Init+0x1de>
 8006538:	f640 319a 	movw	r1, #2970	; 0xb9a
 800653c:	4812      	ldr	r0, [pc, #72]	; (8006588 <HAL_TIM_Encoder_Init+0x224>)
 800653e:	f7fb fe0d 	bl	800215c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006548:	b2db      	uxtb	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d120      	bne.n	8006590 <HAL_TIM_Encoder_Init+0x22c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f001 fb4e 	bl	8007bf8 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006560:	2b00      	cmp	r3, #0
 8006562:	d102      	bne.n	800656a <HAL_TIM_Encoder_Init+0x206>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a09      	ldr	r2, [pc, #36]	; (800658c <HAL_TIM_Encoder_Init+0x228>)
 8006568:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	4798      	blx	r3
 8006572:	e00d      	b.n	8006590 <HAL_TIM_Encoder_Init+0x22c>
 8006574:	40012c00 	.word	0x40012c00
 8006578:	40013400 	.word	0x40013400
 800657c:	40000400 	.word	0x40000400
 8006580:	40000800 	.word	0x40000800
 8006584:	40000c00 	.word	0x40000c00
 8006588:	0800ecc8 	.word	0x0800ecc8
 800658c:	08002369 	.word	0x08002369
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2202      	movs	r2, #2
 8006594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	6812      	ldr	r2, [r2, #0]
 80065a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065a6:	f023 0307 	bic.w	r3, r3, #7
 80065aa:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	3304      	adds	r3, #4
 80065b4:	4619      	mov	r1, r3
 80065b6:	4610      	mov	r0, r2
 80065b8:	f000 ff74 	bl	80074a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	697a      	ldr	r2, [r7, #20]
 80065da:	4313      	orrs	r3, r2
 80065dc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065e4:	f023 0303 	bic.w	r3, r3, #3
 80065e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	689a      	ldr	r2, [r3, #8]
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	021b      	lsls	r3, r3, #8
 80065f4:	4313      	orrs	r3, r2
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006602:	f023 030c 	bic.w	r3, r3, #12
 8006606:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800660e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006612:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	68da      	ldr	r2, [r3, #12]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	69db      	ldr	r3, [r3, #28]
 800661c:	021b      	lsls	r3, r3, #8
 800661e:	4313      	orrs	r3, r2
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	4313      	orrs	r3, r2
 8006624:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	011a      	lsls	r2, r3, #4
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	6a1b      	ldr	r3, [r3, #32]
 8006630:	031b      	lsls	r3, r3, #12
 8006632:	4313      	orrs	r3, r2
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	4313      	orrs	r3, r2
 8006638:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006640:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	685a      	ldr	r2, [r3, #4]
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	011b      	lsls	r3, r3, #4
 800664c:	4313      	orrs	r3, r2
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	4313      	orrs	r3, r2
 8006652:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3718      	adds	r7, #24
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop

080066a8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066b8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80066c0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80066c8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80066d0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a5d      	ldr	r2, [pc, #372]	; (800684c <HAL_TIM_Encoder_Start_IT+0x1a4>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d01d      	beq.n	8006718 <HAL_TIM_Encoder_Start_IT+0x70>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a5b      	ldr	r2, [pc, #364]	; (8006850 <HAL_TIM_Encoder_Start_IT+0x1a8>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d018      	beq.n	8006718 <HAL_TIM_Encoder_Start_IT+0x70>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066ee:	d013      	beq.n	8006718 <HAL_TIM_Encoder_Start_IT+0x70>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a57      	ldr	r2, [pc, #348]	; (8006854 <HAL_TIM_Encoder_Start_IT+0x1ac>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d00e      	beq.n	8006718 <HAL_TIM_Encoder_Start_IT+0x70>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a56      	ldr	r2, [pc, #344]	; (8006858 <HAL_TIM_Encoder_Start_IT+0x1b0>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d009      	beq.n	8006718 <HAL_TIM_Encoder_Start_IT+0x70>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a54      	ldr	r2, [pc, #336]	; (800685c <HAL_TIM_Encoder_Start_IT+0x1b4>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d004      	beq.n	8006718 <HAL_TIM_Encoder_Start_IT+0x70>
 800670e:	f640 41e4 	movw	r1, #3300	; 0xce4
 8006712:	4853      	ldr	r0, [pc, #332]	; (8006860 <HAL_TIM_Encoder_Start_IT+0x1b8>)
 8006714:	f7fb fd22 	bl	800215c <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d110      	bne.n	8006740 <HAL_TIM_Encoder_Start_IT+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800671e:	7bfb      	ldrb	r3, [r7, #15]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d102      	bne.n	800672a <HAL_TIM_Encoder_Start_IT+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006724:	7b7b      	ldrb	r3, [r7, #13]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d001      	beq.n	800672e <HAL_TIM_Encoder_Start_IT+0x86>
    {
      return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e089      	b.n	8006842 <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2202      	movs	r2, #2
 8006732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2202      	movs	r2, #2
 800673a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800673e:	e031      	b.n	80067a4 <HAL_TIM_Encoder_Start_IT+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	2b04      	cmp	r3, #4
 8006744:	d110      	bne.n	8006768 <HAL_TIM_Encoder_Start_IT+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006746:	7bbb      	ldrb	r3, [r7, #14]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d102      	bne.n	8006752 <HAL_TIM_Encoder_Start_IT+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800674c:	7b3b      	ldrb	r3, [r7, #12]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d001      	beq.n	8006756 <HAL_TIM_Encoder_Start_IT+0xae>
    {
      return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e075      	b.n	8006842 <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2202      	movs	r2, #2
 800675a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2202      	movs	r2, #2
 8006762:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006766:	e01d      	b.n	80067a4 <HAL_TIM_Encoder_Start_IT+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006768:	7bfb      	ldrb	r3, [r7, #15]
 800676a:	2b01      	cmp	r3, #1
 800676c:	d108      	bne.n	8006780 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800676e:	7bbb      	ldrb	r3, [r7, #14]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d105      	bne.n	8006780 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006774:	7b7b      	ldrb	r3, [r7, #13]
 8006776:	2b01      	cmp	r3, #1
 8006778:	d102      	bne.n	8006780 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800677a:	7b3b      	ldrb	r3, [r7, #12]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d001      	beq.n	8006784 <HAL_TIM_Encoder_Start_IT+0xdc>
    {
      return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e05e      	b.n	8006842 <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2202      	movs	r2, #2
 8006788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2202      	movs	r2, #2
 8006790:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2202      	movs	r2, #2
 8006798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2202      	movs	r2, #2
 80067a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <HAL_TIM_Encoder_Start_IT+0x10a>
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	2b04      	cmp	r3, #4
 80067ae:	d010      	beq.n	80067d2 <HAL_TIM_Encoder_Start_IT+0x12a>
 80067b0:	e01f      	b.n	80067f2 <HAL_TIM_Encoder_Start_IT+0x14a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2201      	movs	r2, #1
 80067b8:	2100      	movs	r1, #0
 80067ba:	4618      	mov	r0, r3
 80067bc:	f001 f9bc 	bl	8007b38 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68da      	ldr	r2, [r3, #12]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f042 0202 	orr.w	r2, r2, #2
 80067ce:	60da      	str	r2, [r3, #12]
      break;
 80067d0:	e02e      	b.n	8006830 <HAL_TIM_Encoder_Start_IT+0x188>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2201      	movs	r2, #1
 80067d8:	2104      	movs	r1, #4
 80067da:	4618      	mov	r0, r3
 80067dc:	f001 f9ac 	bl	8007b38 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68da      	ldr	r2, [r3, #12]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f042 0204 	orr.w	r2, r2, #4
 80067ee:	60da      	str	r2, [r3, #12]
      break;
 80067f0:	e01e      	b.n	8006830 <HAL_TIM_Encoder_Start_IT+0x188>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2201      	movs	r2, #1
 80067f8:	2100      	movs	r1, #0
 80067fa:	4618      	mov	r0, r3
 80067fc:	f001 f99c 	bl	8007b38 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2201      	movs	r2, #1
 8006806:	2104      	movs	r1, #4
 8006808:	4618      	mov	r0, r3
 800680a:	f001 f995 	bl	8007b38 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68da      	ldr	r2, [r3, #12]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f042 0202 	orr.w	r2, r2, #2
 800681c:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68da      	ldr	r2, [r3, #12]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f042 0204 	orr.w	r2, r2, #4
 800682c:	60da      	str	r2, [r3, #12]
      break;
 800682e:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f042 0201 	orr.w	r2, r2, #1
 800683e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	40012c00 	.word	0x40012c00
 8006850:	40013400 	.word	0x40013400
 8006854:	40000400 	.word	0x40000400
 8006858:	40000800 	.word	0x40000800
 800685c:	40000c00 	.word	0x40000c00
 8006860:	0800ecc8 	.word	0x0800ecc8

08006864 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	f003 0302 	and.w	r3, r3, #2
 8006876:	2b02      	cmp	r3, #2
 8006878:	d128      	bne.n	80068cc <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	f003 0302 	and.w	r3, r3, #2
 8006884:	2b02      	cmp	r3, #2
 8006886:	d121      	bne.n	80068cc <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f06f 0202 	mvn.w	r2, #2
 8006890:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	f003 0303 	and.w	r3, r3, #3
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d005      	beq.n	80068b2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	4798      	blx	r3
 80068b0:	e009      	b.n	80068c6 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	f003 0304 	and.w	r3, r3, #4
 80068d6:	2b04      	cmp	r3, #4
 80068d8:	d128      	bne.n	800692c <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	f003 0304 	and.w	r3, r3, #4
 80068e4:	2b04      	cmp	r3, #4
 80068e6:	d121      	bne.n	800692c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f06f 0204 	mvn.w	r2, #4
 80068f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2202      	movs	r2, #2
 80068f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006902:	2b00      	cmp	r3, #0
 8006904:	d005      	beq.n	8006912 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	4798      	blx	r3
 8006910:	e009      	b.n	8006926 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	f003 0308 	and.w	r3, r3, #8
 8006936:	2b08      	cmp	r3, #8
 8006938:	d128      	bne.n	800698c <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	f003 0308 	and.w	r3, r3, #8
 8006944:	2b08      	cmp	r3, #8
 8006946:	d121      	bne.n	800698c <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f06f 0208 	mvn.w	r2, #8
 8006950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2204      	movs	r2, #4
 8006956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	69db      	ldr	r3, [r3, #28]
 800695e:	f003 0303 	and.w	r3, r3, #3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d005      	beq.n	8006972 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	4798      	blx	r3
 8006970:	e009      	b.n	8006986 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	f003 0310 	and.w	r3, r3, #16
 8006996:	2b10      	cmp	r3, #16
 8006998:	d128      	bne.n	80069ec <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	f003 0310 	and.w	r3, r3, #16
 80069a4:	2b10      	cmp	r3, #16
 80069a6:	d121      	bne.n	80069ec <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f06f 0210 	mvn.w	r2, #16
 80069b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2208      	movs	r2, #8
 80069b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	69db      	ldr	r3, [r3, #28]
 80069be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d005      	beq.n	80069d2 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	4798      	blx	r3
 80069d0:	e009      	b.n	80069e6 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d110      	bne.n	8006a1c <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	f003 0301 	and.w	r3, r3, #1
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	d109      	bne.n	8006a1c <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f06f 0201 	mvn.w	r2, #1
 8006a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a26:	2b80      	cmp	r3, #128	; 0x80
 8006a28:	d110      	bne.n	8006a4c <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a34:	2b80      	cmp	r3, #128	; 0x80
 8006a36:	d109      	bne.n	8006a4c <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a56:	2b40      	cmp	r3, #64	; 0x40
 8006a58:	d110      	bne.n	8006a7c <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a64:	2b40      	cmp	r3, #64	; 0x40
 8006a66:	d109      	bne.n	8006a7c <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	f003 0320 	and.w	r3, r3, #32
 8006a86:	2b20      	cmp	r3, #32
 8006a88:	d110      	bne.n	8006aac <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	f003 0320 	and.w	r3, r3, #32
 8006a94:	2b20      	cmp	r3, #32
 8006a96:	d109      	bne.n	8006aac <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f06f 0220 	mvn.w	r2, #32
 8006aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006aac:	bf00      	nop
 8006aae:	3708      	adds	r7, #8
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d010      	beq.n	8006ae8 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2b04      	cmp	r3, #4
 8006aca:	d00d      	beq.n	8006ae8 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2b08      	cmp	r3, #8
 8006ad0:	d00a      	beq.n	8006ae8 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2b0c      	cmp	r3, #12
 8006ad6:	d007      	beq.n	8006ae8 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2b3c      	cmp	r3, #60	; 0x3c
 8006adc:	d004      	beq.n	8006ae8 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006ade:	f241 0127 	movw	r1, #4135	; 0x1027
 8006ae2:	4890      	ldr	r0, [pc, #576]	; (8006d24 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006ae4:	f7fb fb3a 	bl	800215c <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2b60      	cmp	r3, #96	; 0x60
 8006aee:	d008      	beq.n	8006b02 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b70      	cmp	r3, #112	; 0x70
 8006af6:	d004      	beq.n	8006b02 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8006af8:	f241 0128 	movw	r1, #4136	; 0x1028
 8006afc:	4889      	ldr	r0, [pc, #548]	; (8006d24 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006afe:	f7fb fb2d 	bl	800215c <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d008      	beq.n	8006b1c <HAL_TIM_PWM_ConfigChannel+0x68>
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d004      	beq.n	8006b1c <HAL_TIM_PWM_ConfigChannel+0x68>
 8006b12:	f241 0129 	movw	r1, #4137	; 0x1029
 8006b16:	4883      	ldr	r0, [pc, #524]	; (8006d24 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006b18:	f7fb fb20 	bl	800215c <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d008      	beq.n	8006b36 <HAL_TIM_PWM_ConfigChannel+0x82>
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	2b04      	cmp	r3, #4
 8006b2a:	d004      	beq.n	8006b36 <HAL_TIM_PWM_ConfigChannel+0x82>
 8006b2c:	f241 012a 	movw	r1, #4138	; 0x102a
 8006b30:	487c      	ldr	r0, [pc, #496]	; (8006d24 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006b32:	f7fb fb13 	bl	800215c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d101      	bne.n	8006b44 <HAL_TIM_PWM_ConfigChannel+0x90>
 8006b40:	2302      	movs	r3, #2
 8006b42:	e145      	b.n	8006dd0 <HAL_TIM_PWM_ConfigChannel+0x31c>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b0c      	cmp	r3, #12
 8006b50:	f200 8138 	bhi.w	8006dc4 <HAL_TIM_PWM_ConfigChannel+0x310>
 8006b54:	a201      	add	r2, pc, #4	; (adr r2, 8006b5c <HAL_TIM_PWM_ConfigChannel+0xa8>)
 8006b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5a:	bf00      	nop
 8006b5c:	08006b91 	.word	0x08006b91
 8006b60:	08006dc5 	.word	0x08006dc5
 8006b64:	08006dc5 	.word	0x08006dc5
 8006b68:	08006dc5 	.word	0x08006dc5
 8006b6c:	08006c17 	.word	0x08006c17
 8006b70:	08006dc5 	.word	0x08006dc5
 8006b74:	08006dc5 	.word	0x08006dc5
 8006b78:	08006dc5 	.word	0x08006dc5
 8006b7c:	08006c9f 	.word	0x08006c9f
 8006b80:	08006dc5 	.word	0x08006dc5
 8006b84:	08006dc5 	.word	0x08006dc5
 8006b88:	08006dc5 	.word	0x08006dc5
 8006b8c:	08006d3d 	.word	0x08006d3d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a64      	ldr	r2, [pc, #400]	; (8006d28 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d01d      	beq.n	8006bd6 <HAL_TIM_PWM_ConfigChannel+0x122>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a63      	ldr	r2, [pc, #396]	; (8006d2c <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d018      	beq.n	8006bd6 <HAL_TIM_PWM_ConfigChannel+0x122>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bac:	d013      	beq.n	8006bd6 <HAL_TIM_PWM_ConfigChannel+0x122>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a5f      	ldr	r2, [pc, #380]	; (8006d30 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d00e      	beq.n	8006bd6 <HAL_TIM_PWM_ConfigChannel+0x122>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a5d      	ldr	r2, [pc, #372]	; (8006d34 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d009      	beq.n	8006bd6 <HAL_TIM_PWM_ConfigChannel+0x122>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a5c      	ldr	r2, [pc, #368]	; (8006d38 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d004      	beq.n	8006bd6 <HAL_TIM_PWM_ConfigChannel+0x122>
 8006bcc:	f241 0134 	movw	r1, #4148	; 0x1034
 8006bd0:	4854      	ldr	r0, [pc, #336]	; (8006d24 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006bd2:	f7fb fac3 	bl	800215c <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68b9      	ldr	r1, [r7, #8]
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f000 fcdb 	bl	8007598 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	699a      	ldr	r2, [r3, #24]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f042 0208 	orr.w	r2, r2, #8
 8006bf0:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	699a      	ldr	r2, [r3, #24]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f022 0204 	bic.w	r2, r2, #4
 8006c00:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	6999      	ldr	r1, [r3, #24]
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	691a      	ldr	r2, [r3, #16]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	430a      	orrs	r2, r1
 8006c12:	619a      	str	r2, [r3, #24]
      break;
 8006c14:	e0d7      	b.n	8006dc6 <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a43      	ldr	r2, [pc, #268]	; (8006d28 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d01d      	beq.n	8006c5c <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a41      	ldr	r2, [pc, #260]	; (8006d2c <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d018      	beq.n	8006c5c <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c32:	d013      	beq.n	8006c5c <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a3d      	ldr	r2, [pc, #244]	; (8006d30 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d00e      	beq.n	8006c5c <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a3c      	ldr	r2, [pc, #240]	; (8006d34 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d009      	beq.n	8006c5c <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a3a      	ldr	r2, [pc, #232]	; (8006d38 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d004      	beq.n	8006c5c <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006c52:	f241 0145 	movw	r1, #4165	; 0x1045
 8006c56:	4833      	ldr	r0, [pc, #204]	; (8006d24 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006c58:	f7fb fa80 	bl	800215c <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68b9      	ldr	r1, [r7, #8]
 8006c62:	4618      	mov	r0, r3
 8006c64:	f000 fd32 	bl	80076cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	699a      	ldr	r2, [r3, #24]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	699a      	ldr	r2, [r3, #24]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6999      	ldr	r1, [r3, #24]
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	021a      	lsls	r2, r3, #8
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	430a      	orrs	r2, r1
 8006c9a:	619a      	str	r2, [r3, #24]
      break;
 8006c9c:	e093      	b.n	8006dc6 <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a21      	ldr	r2, [pc, #132]	; (8006d28 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d01d      	beq.n	8006ce4 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a1f      	ldr	r2, [pc, #124]	; (8006d2c <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d018      	beq.n	8006ce4 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cba:	d013      	beq.n	8006ce4 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a1b      	ldr	r2, [pc, #108]	; (8006d30 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d00e      	beq.n	8006ce4 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a1a      	ldr	r2, [pc, #104]	; (8006d34 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d009      	beq.n	8006ce4 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a18      	ldr	r2, [pc, #96]	; (8006d38 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d004      	beq.n	8006ce4 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006cda:	f241 0156 	movw	r1, #4182	; 0x1056
 8006cde:	4811      	ldr	r0, [pc, #68]	; (8006d24 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006ce0:	f7fb fa3c 	bl	800215c <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68b9      	ldr	r1, [r7, #8]
 8006cea:	4618      	mov	r0, r3
 8006cec:	f000 fd8c 	bl	8007808 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	69da      	ldr	r2, [r3, #28]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f042 0208 	orr.w	r2, r2, #8
 8006cfe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	69da      	ldr	r2, [r3, #28]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f022 0204 	bic.w	r2, r2, #4
 8006d0e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	69d9      	ldr	r1, [r3, #28]
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	691a      	ldr	r2, [r3, #16]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	430a      	orrs	r2, r1
 8006d20:	61da      	str	r2, [r3, #28]
      break;
 8006d22:	e050      	b.n	8006dc6 <HAL_TIM_PWM_ConfigChannel+0x312>
 8006d24:	0800ecc8 	.word	0x0800ecc8
 8006d28:	40012c00 	.word	0x40012c00
 8006d2c:	40013400 	.word	0x40013400
 8006d30:	40000400 	.word	0x40000400
 8006d34:	40000800 	.word	0x40000800
 8006d38:	40000c00 	.word	0x40000c00
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a25      	ldr	r2, [pc, #148]	; (8006dd8 <HAL_TIM_PWM_ConfigChannel+0x324>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d01d      	beq.n	8006d82 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a24      	ldr	r2, [pc, #144]	; (8006ddc <HAL_TIM_PWM_ConfigChannel+0x328>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d018      	beq.n	8006d82 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d58:	d013      	beq.n	8006d82 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a20      	ldr	r2, [pc, #128]	; (8006de0 <HAL_TIM_PWM_ConfigChannel+0x32c>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d00e      	beq.n	8006d82 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a1e      	ldr	r2, [pc, #120]	; (8006de4 <HAL_TIM_PWM_ConfigChannel+0x330>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d009      	beq.n	8006d82 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a1d      	ldr	r2, [pc, #116]	; (8006de8 <HAL_TIM_PWM_ConfigChannel+0x334>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d004      	beq.n	8006d82 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006d78:	f241 0167 	movw	r1, #4199	; 0x1067
 8006d7c:	481b      	ldr	r0, [pc, #108]	; (8006dec <HAL_TIM_PWM_ConfigChannel+0x338>)
 8006d7e:	f7fb f9ed 	bl	800215c <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68b9      	ldr	r1, [r7, #8]
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f000 fddb 	bl	8007944 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	69da      	ldr	r2, [r3, #28]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	69da      	ldr	r2, [r3, #28]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	69d9      	ldr	r1, [r3, #28]
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	021a      	lsls	r2, r3, #8
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	61da      	str	r2, [r3, #28]
      break;
 8006dc2:	e000      	b.n	8006dc6 <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    default:
      break;
 8006dc4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	40012c00 	.word	0x40012c00
 8006ddc:	40013400 	.word	0x40013400
 8006de0:	40000400 	.word	0x40000400
 8006de4:	40000800 	.word	0x40000800
 8006de8:	40000c00 	.word	0x40000c00
 8006dec:	0800ecc8 	.word	0x0800ecc8

08006df0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d101      	bne.n	8006e08 <HAL_TIM_ConfigClockSource+0x18>
 8006e04:	2302      	movs	r3, #2
 8006e06:	e2f5      	b.n	80073f4 <HAL_TIM_ConfigClockSource+0x604>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2202      	movs	r2, #2
 8006e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e20:	d029      	beq.n	8006e76 <HAL_TIM_ConfigClockSource+0x86>
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e2a:	d024      	beq.n	8006e76 <HAL_TIM_ConfigClockSource+0x86>
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d020      	beq.n	8006e76 <HAL_TIM_ConfigClockSource+0x86>
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	2b10      	cmp	r3, #16
 8006e3a:	d01c      	beq.n	8006e76 <HAL_TIM_ConfigClockSource+0x86>
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	2b20      	cmp	r3, #32
 8006e42:	d018      	beq.n	8006e76 <HAL_TIM_ConfigClockSource+0x86>
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2b30      	cmp	r3, #48	; 0x30
 8006e4a:	d014      	beq.n	8006e76 <HAL_TIM_ConfigClockSource+0x86>
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2b40      	cmp	r3, #64	; 0x40
 8006e52:	d010      	beq.n	8006e76 <HAL_TIM_ConfigClockSource+0x86>
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2b50      	cmp	r3, #80	; 0x50
 8006e5a:	d00c      	beq.n	8006e76 <HAL_TIM_ConfigClockSource+0x86>
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2b60      	cmp	r3, #96	; 0x60
 8006e62:	d008      	beq.n	8006e76 <HAL_TIM_ConfigClockSource+0x86>
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2b70      	cmp	r3, #112	; 0x70
 8006e6a:	d004      	beq.n	8006e76 <HAL_TIM_ConfigClockSource+0x86>
 8006e6c:	f241 4132 	movw	r1, #5170	; 0x1432
 8006e70:	487c      	ldr	r0, [pc, #496]	; (8007064 <HAL_TIM_ConfigClockSource+0x274>)
 8006e72:	f7fb f973 	bl	800215c <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e84:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e8c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68fa      	ldr	r2, [r7, #12]
 8006e94:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e9e:	f000 80f1 	beq.w	8007084 <HAL_TIM_ConfigClockSource+0x294>
 8006ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ea6:	f200 8299 	bhi.w	80073dc <HAL_TIM_ConfigClockSource+0x5ec>
 8006eaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eae:	d02d      	beq.n	8006f0c <HAL_TIM_ConfigClockSource+0x11c>
 8006eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eb4:	f200 8292 	bhi.w	80073dc <HAL_TIM_ConfigClockSource+0x5ec>
 8006eb8:	2b70      	cmp	r3, #112	; 0x70
 8006eba:	d05d      	beq.n	8006f78 <HAL_TIM_ConfigClockSource+0x188>
 8006ebc:	2b70      	cmp	r3, #112	; 0x70
 8006ebe:	f200 828d 	bhi.w	80073dc <HAL_TIM_ConfigClockSource+0x5ec>
 8006ec2:	2b60      	cmp	r3, #96	; 0x60
 8006ec4:	f000 81a5 	beq.w	8007212 <HAL_TIM_ConfigClockSource+0x422>
 8006ec8:	2b60      	cmp	r3, #96	; 0x60
 8006eca:	f200 8287 	bhi.w	80073dc <HAL_TIM_ConfigClockSource+0x5ec>
 8006ece:	2b50      	cmp	r3, #80	; 0x50
 8006ed0:	f000 8149 	beq.w	8007166 <HAL_TIM_ConfigClockSource+0x376>
 8006ed4:	2b50      	cmp	r3, #80	; 0x50
 8006ed6:	f200 8281 	bhi.w	80073dc <HAL_TIM_ConfigClockSource+0x5ec>
 8006eda:	2b40      	cmp	r3, #64	; 0x40
 8006edc:	f000 81fc 	beq.w	80072d8 <HAL_TIM_ConfigClockSource+0x4e8>
 8006ee0:	2b40      	cmp	r3, #64	; 0x40
 8006ee2:	f200 827b 	bhi.w	80073dc <HAL_TIM_ConfigClockSource+0x5ec>
 8006ee6:	2b30      	cmp	r3, #48	; 0x30
 8006ee8:	f000 824c 	beq.w	8007384 <HAL_TIM_ConfigClockSource+0x594>
 8006eec:	2b30      	cmp	r3, #48	; 0x30
 8006eee:	f200 8275 	bhi.w	80073dc <HAL_TIM_ConfigClockSource+0x5ec>
 8006ef2:	2b20      	cmp	r3, #32
 8006ef4:	f000 8246 	beq.w	8007384 <HAL_TIM_ConfigClockSource+0x594>
 8006ef8:	2b20      	cmp	r3, #32
 8006efa:	f200 826f 	bhi.w	80073dc <HAL_TIM_ConfigClockSource+0x5ec>
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f000 8240 	beq.w	8007384 <HAL_TIM_ConfigClockSource+0x594>
 8006f04:	2b10      	cmp	r3, #16
 8006f06:	f000 823d 	beq.w	8007384 <HAL_TIM_ConfigClockSource+0x594>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006f0a:	e267      	b.n	80073dc <HAL_TIM_ConfigClockSource+0x5ec>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a55      	ldr	r2, [pc, #340]	; (8007068 <HAL_TIM_ConfigClockSource+0x278>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	f000 8264 	beq.w	80073e0 <HAL_TIM_ConfigClockSource+0x5f0>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a53      	ldr	r2, [pc, #332]	; (800706c <HAL_TIM_ConfigClockSource+0x27c>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	f000 825e 	beq.w	80073e0 <HAL_TIM_ConfigClockSource+0x5f0>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f2c:	f000 8258 	beq.w	80073e0 <HAL_TIM_ConfigClockSource+0x5f0>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a4e      	ldr	r2, [pc, #312]	; (8007070 <HAL_TIM_ConfigClockSource+0x280>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	f000 8252 	beq.w	80073e0 <HAL_TIM_ConfigClockSource+0x5f0>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a4c      	ldr	r2, [pc, #304]	; (8007074 <HAL_TIM_ConfigClockSource+0x284>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	f000 824c 	beq.w	80073e0 <HAL_TIM_ConfigClockSource+0x5f0>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a4a      	ldr	r2, [pc, #296]	; (8007078 <HAL_TIM_ConfigClockSource+0x288>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	f000 8246 	beq.w	80073e0 <HAL_TIM_ConfigClockSource+0x5f0>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a48      	ldr	r2, [pc, #288]	; (800707c <HAL_TIM_ConfigClockSource+0x28c>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	f000 8240 	beq.w	80073e0 <HAL_TIM_ConfigClockSource+0x5f0>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a46      	ldr	r2, [pc, #280]	; (8007080 <HAL_TIM_ConfigClockSource+0x290>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	f000 823a 	beq.w	80073e0 <HAL_TIM_ConfigClockSource+0x5f0>
 8006f6c:	f241 413e 	movw	r1, #5182	; 0x143e
 8006f70:	483c      	ldr	r0, [pc, #240]	; (8007064 <HAL_TIM_ConfigClockSource+0x274>)
 8006f72:	f7fb f8f3 	bl	800215c <assert_failed>
      break;
 8006f76:	e233      	b.n	80073e0 <HAL_TIM_ConfigClockSource+0x5f0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a3a      	ldr	r2, [pc, #232]	; (8007068 <HAL_TIM_ConfigClockSource+0x278>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d01d      	beq.n	8006fbe <HAL_TIM_ConfigClockSource+0x1ce>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a39      	ldr	r2, [pc, #228]	; (800706c <HAL_TIM_ConfigClockSource+0x27c>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d018      	beq.n	8006fbe <HAL_TIM_ConfigClockSource+0x1ce>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f94:	d013      	beq.n	8006fbe <HAL_TIM_ConfigClockSource+0x1ce>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a35      	ldr	r2, [pc, #212]	; (8007070 <HAL_TIM_ConfigClockSource+0x280>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d00e      	beq.n	8006fbe <HAL_TIM_ConfigClockSource+0x1ce>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a33      	ldr	r2, [pc, #204]	; (8007074 <HAL_TIM_ConfigClockSource+0x284>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d009      	beq.n	8006fbe <HAL_TIM_ConfigClockSource+0x1ce>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a32      	ldr	r2, [pc, #200]	; (8007078 <HAL_TIM_ConfigClockSource+0x288>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d004      	beq.n	8006fbe <HAL_TIM_ConfigClockSource+0x1ce>
 8006fb4:	f241 4145 	movw	r1, #5189	; 0x1445
 8006fb8:	482a      	ldr	r0, [pc, #168]	; (8007064 <HAL_TIM_ConfigClockSource+0x274>)
 8006fba:	f7fb f8cf 	bl	800215c <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d013      	beq.n	8006fee <HAL_TIM_ConfigClockSource+0x1fe>
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fce:	d00e      	beq.n	8006fee <HAL_TIM_ConfigClockSource+0x1fe>
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fd8:	d009      	beq.n	8006fee <HAL_TIM_ConfigClockSource+0x1fe>
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006fe2:	d004      	beq.n	8006fee <HAL_TIM_ConfigClockSource+0x1fe>
 8006fe4:	f241 4148 	movw	r1, #5192	; 0x1448
 8006fe8:	481e      	ldr	r0, [pc, #120]	; (8007064 <HAL_TIM_ConfigClockSource+0x274>)
 8006fea:	f7fb f8b7 	bl	800215c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ff6:	d014      	beq.n	8007022 <HAL_TIM_ConfigClockSource+0x232>
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d010      	beq.n	8007022 <HAL_TIM_ConfigClockSource+0x232>
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00c      	beq.n	8007022 <HAL_TIM_ConfigClockSource+0x232>
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	2b02      	cmp	r3, #2
 800700e:	d008      	beq.n	8007022 <HAL_TIM_ConfigClockSource+0x232>
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	2b0a      	cmp	r3, #10
 8007016:	d004      	beq.n	8007022 <HAL_TIM_ConfigClockSource+0x232>
 8007018:	f241 4149 	movw	r1, #5193	; 0x1449
 800701c:	4811      	ldr	r0, [pc, #68]	; (8007064 <HAL_TIM_ConfigClockSource+0x274>)
 800701e:	f7fb f89d 	bl	800215c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	2b0f      	cmp	r3, #15
 8007028:	d904      	bls.n	8007034 <HAL_TIM_ConfigClockSource+0x244>
 800702a:	f241 414a 	movw	r1, #5194	; 0x144a
 800702e:	480d      	ldr	r0, [pc, #52]	; (8007064 <HAL_TIM_ConfigClockSource+0x274>)
 8007030:	f7fb f894 	bl	800215c <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6818      	ldr	r0, [r3, #0]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	6899      	ldr	r1, [r3, #8]
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	f000 fd59 	bl	8007afa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007056:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	609a      	str	r2, [r3, #8]
      break;
 8007060:	e1bf      	b.n	80073e2 <HAL_TIM_ConfigClockSource+0x5f2>
 8007062:	bf00      	nop
 8007064:	0800ecc8 	.word	0x0800ecc8
 8007068:	40012c00 	.word	0x40012c00
 800706c:	40013400 	.word	0x40013400
 8007070:	40000400 	.word	0x40000400
 8007074:	40000800 	.word	0x40000800
 8007078:	40000c00 	.word	0x40000c00
 800707c:	40001000 	.word	0x40001000
 8007080:	40001400 	.word	0x40001400
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a8d      	ldr	r2, [pc, #564]	; (80072c0 <HAL_TIM_ConfigClockSource+0x4d0>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d01d      	beq.n	80070ca <HAL_TIM_ConfigClockSource+0x2da>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a8c      	ldr	r2, [pc, #560]	; (80072c4 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d018      	beq.n	80070ca <HAL_TIM_ConfigClockSource+0x2da>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070a0:	d013      	beq.n	80070ca <HAL_TIM_ConfigClockSource+0x2da>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a88      	ldr	r2, [pc, #544]	; (80072c8 <HAL_TIM_ConfigClockSource+0x4d8>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d00e      	beq.n	80070ca <HAL_TIM_ConfigClockSource+0x2da>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a86      	ldr	r2, [pc, #536]	; (80072cc <HAL_TIM_ConfigClockSource+0x4dc>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d009      	beq.n	80070ca <HAL_TIM_ConfigClockSource+0x2da>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a85      	ldr	r2, [pc, #532]	; (80072d0 <HAL_TIM_ConfigClockSource+0x4e0>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d004      	beq.n	80070ca <HAL_TIM_ConfigClockSource+0x2da>
 80070c0:	f241 415d 	movw	r1, #5213	; 0x145d
 80070c4:	4883      	ldr	r0, [pc, #524]	; (80072d4 <HAL_TIM_ConfigClockSource+0x4e4>)
 80070c6:	f7fb f849 	bl	800215c <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d013      	beq.n	80070fa <HAL_TIM_ConfigClockSource+0x30a>
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070da:	d00e      	beq.n	80070fa <HAL_TIM_ConfigClockSource+0x30a>
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070e4:	d009      	beq.n	80070fa <HAL_TIM_ConfigClockSource+0x30a>
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070ee:	d004      	beq.n	80070fa <HAL_TIM_ConfigClockSource+0x30a>
 80070f0:	f44f 51a3 	mov.w	r1, #5216	; 0x1460
 80070f4:	4877      	ldr	r0, [pc, #476]	; (80072d4 <HAL_TIM_ConfigClockSource+0x4e4>)
 80070f6:	f7fb f831 	bl	800215c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007102:	d014      	beq.n	800712e <HAL_TIM_ConfigClockSource+0x33e>
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d010      	beq.n	800712e <HAL_TIM_ConfigClockSource+0x33e>
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00c      	beq.n	800712e <HAL_TIM_ConfigClockSource+0x33e>
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	2b02      	cmp	r3, #2
 800711a:	d008      	beq.n	800712e <HAL_TIM_ConfigClockSource+0x33e>
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	2b0a      	cmp	r3, #10
 8007122:	d004      	beq.n	800712e <HAL_TIM_ConfigClockSource+0x33e>
 8007124:	f241 4161 	movw	r1, #5217	; 0x1461
 8007128:	486a      	ldr	r0, [pc, #424]	; (80072d4 <HAL_TIM_ConfigClockSource+0x4e4>)
 800712a:	f7fb f817 	bl	800215c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	2b0f      	cmp	r3, #15
 8007134:	d904      	bls.n	8007140 <HAL_TIM_ConfigClockSource+0x350>
 8007136:	f241 4162 	movw	r1, #5218	; 0x1462
 800713a:	4866      	ldr	r0, [pc, #408]	; (80072d4 <HAL_TIM_ConfigClockSource+0x4e4>)
 800713c:	f7fb f80e 	bl	800215c <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6818      	ldr	r0, [r3, #0]
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	6899      	ldr	r1, [r3, #8]
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	685a      	ldr	r2, [r3, #4]
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	f000 fcd3 	bl	8007afa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	689a      	ldr	r2, [r3, #8]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007162:	609a      	str	r2, [r3, #8]
      break;
 8007164:	e13d      	b.n	80073e2 <HAL_TIM_ConfigClockSource+0x5f2>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a55      	ldr	r2, [pc, #340]	; (80072c0 <HAL_TIM_ConfigClockSource+0x4d0>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d01d      	beq.n	80071ac <HAL_TIM_ConfigClockSource+0x3bc>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a53      	ldr	r2, [pc, #332]	; (80072c4 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d018      	beq.n	80071ac <HAL_TIM_ConfigClockSource+0x3bc>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007182:	d013      	beq.n	80071ac <HAL_TIM_ConfigClockSource+0x3bc>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a4f      	ldr	r2, [pc, #316]	; (80072c8 <HAL_TIM_ConfigClockSource+0x4d8>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d00e      	beq.n	80071ac <HAL_TIM_ConfigClockSource+0x3bc>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a4e      	ldr	r2, [pc, #312]	; (80072cc <HAL_TIM_ConfigClockSource+0x4dc>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d009      	beq.n	80071ac <HAL_TIM_ConfigClockSource+0x3bc>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a4c      	ldr	r2, [pc, #304]	; (80072d0 <HAL_TIM_ConfigClockSource+0x4e0>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d004      	beq.n	80071ac <HAL_TIM_ConfigClockSource+0x3bc>
 80071a2:	f241 4171 	movw	r1, #5233	; 0x1471
 80071a6:	484b      	ldr	r0, [pc, #300]	; (80072d4 <HAL_TIM_ConfigClockSource+0x4e4>)
 80071a8:	f7fa ffd8 	bl	800215c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071b4:	d014      	beq.n	80071e0 <HAL_TIM_ConfigClockSource+0x3f0>
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d010      	beq.n	80071e0 <HAL_TIM_ConfigClockSource+0x3f0>
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00c      	beq.n	80071e0 <HAL_TIM_ConfigClockSource+0x3f0>
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d008      	beq.n	80071e0 <HAL_TIM_ConfigClockSource+0x3f0>
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	2b0a      	cmp	r3, #10
 80071d4:	d004      	beq.n	80071e0 <HAL_TIM_ConfigClockSource+0x3f0>
 80071d6:	f241 4174 	movw	r1, #5236	; 0x1474
 80071da:	483e      	ldr	r0, [pc, #248]	; (80072d4 <HAL_TIM_ConfigClockSource+0x4e4>)
 80071dc:	f7fa ffbe 	bl	800215c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	2b0f      	cmp	r3, #15
 80071e6:	d904      	bls.n	80071f2 <HAL_TIM_ConfigClockSource+0x402>
 80071e8:	f241 4175 	movw	r1, #5237	; 0x1475
 80071ec:	4839      	ldr	r0, [pc, #228]	; (80072d4 <HAL_TIM_ConfigClockSource+0x4e4>)
 80071ee:	f7fa ffb5 	bl	800215c <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6818      	ldr	r0, [r3, #0]
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	6859      	ldr	r1, [r3, #4]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	461a      	mov	r2, r3
 8007200:	f000 fc04 	bl	8007a0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2150      	movs	r1, #80	; 0x50
 800720a:	4618      	mov	r0, r3
 800720c:	f000 fc5b 	bl	8007ac6 <TIM_ITRx_SetConfig>
      break;
 8007210:	e0e7      	b.n	80073e2 <HAL_TIM_ConfigClockSource+0x5f2>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a2a      	ldr	r2, [pc, #168]	; (80072c0 <HAL_TIM_ConfigClockSource+0x4d0>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d01d      	beq.n	8007258 <HAL_TIM_ConfigClockSource+0x468>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a28      	ldr	r2, [pc, #160]	; (80072c4 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d018      	beq.n	8007258 <HAL_TIM_ConfigClockSource+0x468>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800722e:	d013      	beq.n	8007258 <HAL_TIM_ConfigClockSource+0x468>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a24      	ldr	r2, [pc, #144]	; (80072c8 <HAL_TIM_ConfigClockSource+0x4d8>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d00e      	beq.n	8007258 <HAL_TIM_ConfigClockSource+0x468>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a23      	ldr	r2, [pc, #140]	; (80072cc <HAL_TIM_ConfigClockSource+0x4dc>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d009      	beq.n	8007258 <HAL_TIM_ConfigClockSource+0x468>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a21      	ldr	r2, [pc, #132]	; (80072d0 <HAL_TIM_ConfigClockSource+0x4e0>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d004      	beq.n	8007258 <HAL_TIM_ConfigClockSource+0x468>
 800724e:	f241 4181 	movw	r1, #5249	; 0x1481
 8007252:	4820      	ldr	r0, [pc, #128]	; (80072d4 <HAL_TIM_ConfigClockSource+0x4e4>)
 8007254:	f7fa ff82 	bl	800215c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007260:	d014      	beq.n	800728c <HAL_TIM_ConfigClockSource+0x49c>
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d010      	beq.n	800728c <HAL_TIM_ConfigClockSource+0x49c>
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00c      	beq.n	800728c <HAL_TIM_ConfigClockSource+0x49c>
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	2b02      	cmp	r3, #2
 8007278:	d008      	beq.n	800728c <HAL_TIM_ConfigClockSource+0x49c>
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	2b0a      	cmp	r3, #10
 8007280:	d004      	beq.n	800728c <HAL_TIM_ConfigClockSource+0x49c>
 8007282:	f241 4184 	movw	r1, #5252	; 0x1484
 8007286:	4813      	ldr	r0, [pc, #76]	; (80072d4 <HAL_TIM_ConfigClockSource+0x4e4>)
 8007288:	f7fa ff68 	bl	800215c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	2b0f      	cmp	r3, #15
 8007292:	d904      	bls.n	800729e <HAL_TIM_ConfigClockSource+0x4ae>
 8007294:	f241 4185 	movw	r1, #5253	; 0x1485
 8007298:	480e      	ldr	r0, [pc, #56]	; (80072d4 <HAL_TIM_ConfigClockSource+0x4e4>)
 800729a:	f7fa ff5f 	bl	800215c <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6818      	ldr	r0, [r3, #0]
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	6859      	ldr	r1, [r3, #4]
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	461a      	mov	r2, r3
 80072ac:	f000 fbdc 	bl	8007a68 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2160      	movs	r1, #96	; 0x60
 80072b6:	4618      	mov	r0, r3
 80072b8:	f000 fc05 	bl	8007ac6 <TIM_ITRx_SetConfig>
      break;
 80072bc:	e091      	b.n	80073e2 <HAL_TIM_ConfigClockSource+0x5f2>
 80072be:	bf00      	nop
 80072c0:	40012c00 	.word	0x40012c00
 80072c4:	40013400 	.word	0x40013400
 80072c8:	40000400 	.word	0x40000400
 80072cc:	40000800 	.word	0x40000800
 80072d0:	40000c00 	.word	0x40000c00
 80072d4:	0800ecc8 	.word	0x0800ecc8
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a47      	ldr	r2, [pc, #284]	; (80073fc <HAL_TIM_ConfigClockSource+0x60c>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d01d      	beq.n	800731e <HAL_TIM_ConfigClockSource+0x52e>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a46      	ldr	r2, [pc, #280]	; (8007400 <HAL_TIM_ConfigClockSource+0x610>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d018      	beq.n	800731e <HAL_TIM_ConfigClockSource+0x52e>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072f4:	d013      	beq.n	800731e <HAL_TIM_ConfigClockSource+0x52e>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a42      	ldr	r2, [pc, #264]	; (8007404 <HAL_TIM_ConfigClockSource+0x614>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d00e      	beq.n	800731e <HAL_TIM_ConfigClockSource+0x52e>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a40      	ldr	r2, [pc, #256]	; (8007408 <HAL_TIM_ConfigClockSource+0x618>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d009      	beq.n	800731e <HAL_TIM_ConfigClockSource+0x52e>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a3f      	ldr	r2, [pc, #252]	; (800740c <HAL_TIM_ConfigClockSource+0x61c>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d004      	beq.n	800731e <HAL_TIM_ConfigClockSource+0x52e>
 8007314:	f241 4191 	movw	r1, #5265	; 0x1491
 8007318:	483d      	ldr	r0, [pc, #244]	; (8007410 <HAL_TIM_ConfigClockSource+0x620>)
 800731a:	f7fa ff1f 	bl	800215c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007326:	d014      	beq.n	8007352 <HAL_TIM_ConfigClockSource+0x562>
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d010      	beq.n	8007352 <HAL_TIM_ConfigClockSource+0x562>
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00c      	beq.n	8007352 <HAL_TIM_ConfigClockSource+0x562>
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	2b02      	cmp	r3, #2
 800733e:	d008      	beq.n	8007352 <HAL_TIM_ConfigClockSource+0x562>
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	2b0a      	cmp	r3, #10
 8007346:	d004      	beq.n	8007352 <HAL_TIM_ConfigClockSource+0x562>
 8007348:	f241 4194 	movw	r1, #5268	; 0x1494
 800734c:	4830      	ldr	r0, [pc, #192]	; (8007410 <HAL_TIM_ConfigClockSource+0x620>)
 800734e:	f7fa ff05 	bl	800215c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	2b0f      	cmp	r3, #15
 8007358:	d904      	bls.n	8007364 <HAL_TIM_ConfigClockSource+0x574>
 800735a:	f241 4195 	movw	r1, #5269	; 0x1495
 800735e:	482c      	ldr	r0, [pc, #176]	; (8007410 <HAL_TIM_ConfigClockSource+0x620>)
 8007360:	f7fa fefc 	bl	800215c <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6818      	ldr	r0, [r3, #0]
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	6859      	ldr	r1, [r3, #4]
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	461a      	mov	r2, r3
 8007372:	f000 fb4b 	bl	8007a0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2140      	movs	r1, #64	; 0x40
 800737c:	4618      	mov	r0, r3
 800737e:	f000 fba2 	bl	8007ac6 <TIM_ITRx_SetConfig>
      break;
 8007382:	e02e      	b.n	80073e2 <HAL_TIM_ConfigClockSource+0x5f2>
        assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a1c      	ldr	r2, [pc, #112]	; (80073fc <HAL_TIM_ConfigClockSource+0x60c>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d01d      	beq.n	80073ca <HAL_TIM_ConfigClockSource+0x5da>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a1b      	ldr	r2, [pc, #108]	; (8007400 <HAL_TIM_ConfigClockSource+0x610>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d018      	beq.n	80073ca <HAL_TIM_ConfigClockSource+0x5da>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073a0:	d013      	beq.n	80073ca <HAL_TIM_ConfigClockSource+0x5da>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a17      	ldr	r2, [pc, #92]	; (8007404 <HAL_TIM_ConfigClockSource+0x614>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d00e      	beq.n	80073ca <HAL_TIM_ConfigClockSource+0x5da>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a15      	ldr	r2, [pc, #84]	; (8007408 <HAL_TIM_ConfigClockSource+0x618>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d009      	beq.n	80073ca <HAL_TIM_ConfigClockSource+0x5da>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a14      	ldr	r2, [pc, #80]	; (800740c <HAL_TIM_ConfigClockSource+0x61c>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d004      	beq.n	80073ca <HAL_TIM_ConfigClockSource+0x5da>
 80073c0:	f241 41a4 	movw	r1, #5284	; 0x14a4
 80073c4:	4812      	ldr	r0, [pc, #72]	; (8007410 <HAL_TIM_ConfigClockSource+0x620>)
 80073c6:	f7fa fec9 	bl	800215c <assert_failed>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4619      	mov	r1, r3
 80073d4:	4610      	mov	r0, r2
 80073d6:	f000 fb76 	bl	8007ac6 <TIM_ITRx_SetConfig>
        break;
 80073da:	e002      	b.n	80073e2 <HAL_TIM_ConfigClockSource+0x5f2>
      break;
 80073dc:	bf00      	nop
 80073de:	e000      	b.n	80073e2 <HAL_TIM_ConfigClockSource+0x5f2>
      break;
 80073e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2201      	movs	r2, #1
 80073e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	40012c00 	.word	0x40012c00
 8007400:	40013400 	.word	0x40013400
 8007404:	40000400 	.word	0x40000400
 8007408:	40000800 	.word	0x40000800
 800740c:	40000c00 	.word	0x40000c00
 8007410:	0800ecc8 	.word	0x0800ecc8

08007414 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800741c:	bf00      	nop
 800741e:	370c      	adds	r7, #12
 8007420:	46bd      	mov	sp, r7
 8007422:	bc80      	pop	{r7}
 8007424:	4770      	bx	lr

08007426 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007426:	b480      	push	{r7}
 8007428:	b083      	sub	sp, #12
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800742e:	bf00      	nop
 8007430:	370c      	adds	r7, #12
 8007432:	46bd      	mov	sp, r7
 8007434:	bc80      	pop	{r7}
 8007436:	4770      	bx	lr

08007438 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	bc80      	pop	{r7}
 8007448:	4770      	bx	lr

0800744a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800744a:	b480      	push	{r7}
 800744c:	b083      	sub	sp, #12
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007452:	bf00      	nop
 8007454:	370c      	adds	r7, #12
 8007456:	46bd      	mov	sp, r7
 8007458:	bc80      	pop	{r7}
 800745a:	4770      	bx	lr

0800745c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007464:	bf00      	nop
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	bc80      	pop	{r7}
 800746c:	4770      	bx	lr

0800746e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800746e:	b480      	push	{r7}
 8007470:	b083      	sub	sp, #12
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007476:	bf00      	nop
 8007478:	370c      	adds	r7, #12
 800747a:	46bd      	mov	sp, r7
 800747c:	bc80      	pop	{r7}
 800747e:	4770      	bx	lr

08007480 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	bc80      	pop	{r7}
 8007490:	4770      	bx	lr

08007492 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007492:	b480      	push	{r7}
 8007494:	b083      	sub	sp, #12
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800749a:	bf00      	nop
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	bc80      	pop	{r7}
 80074a2:	4770      	bx	lr

080074a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a33      	ldr	r2, [pc, #204]	; (8007584 <TIM_Base_SetConfig+0xe0>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d013      	beq.n	80074e4 <TIM_Base_SetConfig+0x40>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a32      	ldr	r2, [pc, #200]	; (8007588 <TIM_Base_SetConfig+0xe4>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d00f      	beq.n	80074e4 <TIM_Base_SetConfig+0x40>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074ca:	d00b      	beq.n	80074e4 <TIM_Base_SetConfig+0x40>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a2f      	ldr	r2, [pc, #188]	; (800758c <TIM_Base_SetConfig+0xe8>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d007      	beq.n	80074e4 <TIM_Base_SetConfig+0x40>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	4a2e      	ldr	r2, [pc, #184]	; (8007590 <TIM_Base_SetConfig+0xec>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d003      	beq.n	80074e4 <TIM_Base_SetConfig+0x40>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a2d      	ldr	r2, [pc, #180]	; (8007594 <TIM_Base_SetConfig+0xf0>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d108      	bne.n	80074f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	68fa      	ldr	r2, [r7, #12]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a22      	ldr	r2, [pc, #136]	; (8007584 <TIM_Base_SetConfig+0xe0>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d013      	beq.n	8007526 <TIM_Base_SetConfig+0x82>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a21      	ldr	r2, [pc, #132]	; (8007588 <TIM_Base_SetConfig+0xe4>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d00f      	beq.n	8007526 <TIM_Base_SetConfig+0x82>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800750c:	d00b      	beq.n	8007526 <TIM_Base_SetConfig+0x82>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a1e      	ldr	r2, [pc, #120]	; (800758c <TIM_Base_SetConfig+0xe8>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d007      	beq.n	8007526 <TIM_Base_SetConfig+0x82>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a1d      	ldr	r2, [pc, #116]	; (8007590 <TIM_Base_SetConfig+0xec>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d003      	beq.n	8007526 <TIM_Base_SetConfig+0x82>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a1c      	ldr	r2, [pc, #112]	; (8007594 <TIM_Base_SetConfig+0xf0>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d108      	bne.n	8007538 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800752c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	68fa      	ldr	r2, [r7, #12]
 8007534:	4313      	orrs	r3, r2
 8007536:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	695b      	ldr	r3, [r3, #20]
 8007542:	4313      	orrs	r3, r2
 8007544:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	689a      	ldr	r2, [r3, #8]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a09      	ldr	r2, [pc, #36]	; (8007584 <TIM_Base_SetConfig+0xe0>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d003      	beq.n	800756c <TIM_Base_SetConfig+0xc8>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a08      	ldr	r2, [pc, #32]	; (8007588 <TIM_Base_SetConfig+0xe4>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d103      	bne.n	8007574 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	691a      	ldr	r2, [r3, #16]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	615a      	str	r2, [r3, #20]
}
 800757a:	bf00      	nop
 800757c:	3714      	adds	r7, #20
 800757e:	46bd      	mov	sp, r7
 8007580:	bc80      	pop	{r7}
 8007582:	4770      	bx	lr
 8007584:	40012c00 	.word	0x40012c00
 8007588:	40013400 	.word	0x40013400
 800758c:	40000400 	.word	0x40000400
 8007590:	40000800 	.word	0x40000800
 8007594:	40000c00 	.word	0x40000c00

08007598 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b086      	sub	sp, #24
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a1b      	ldr	r3, [r3, #32]
 80075a6:	f023 0201 	bic.w	r2, r3, #1
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6a1b      	ldr	r3, [r3, #32]
 80075b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	699b      	ldr	r3, [r3, #24]
 80075be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f023 0303 	bic.w	r3, r3, #3
 80075ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	f023 0302 	bic.w	r3, r3, #2
 80075e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	697a      	ldr	r2, [r7, #20]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a34      	ldr	r2, [pc, #208]	; (80076c0 <TIM_OC1_SetConfig+0x128>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d003      	beq.n	80075fc <TIM_OC1_SetConfig+0x64>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a33      	ldr	r2, [pc, #204]	; (80076c4 <TIM_OC1_SetConfig+0x12c>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d119      	bne.n	8007630 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d008      	beq.n	8007616 <TIM_OC1_SetConfig+0x7e>
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	2b08      	cmp	r3, #8
 800760a:	d004      	beq.n	8007616 <TIM_OC1_SetConfig+0x7e>
 800760c:	f641 2141 	movw	r1, #6721	; 0x1a41
 8007610:	482d      	ldr	r0, [pc, #180]	; (80076c8 <TIM_OC1_SetConfig+0x130>)
 8007612:	f7fa fda3 	bl	800215c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	f023 0308 	bic.w	r3, r3, #8
 800761c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	697a      	ldr	r2, [r7, #20]
 8007624:	4313      	orrs	r3, r2
 8007626:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	f023 0304 	bic.w	r3, r3, #4
 800762e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a23      	ldr	r2, [pc, #140]	; (80076c0 <TIM_OC1_SetConfig+0x128>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d003      	beq.n	8007640 <TIM_OC1_SetConfig+0xa8>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a22      	ldr	r2, [pc, #136]	; (80076c4 <TIM_OC1_SetConfig+0x12c>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d12d      	bne.n	800769c <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	699b      	ldr	r3, [r3, #24]
 8007644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007648:	d008      	beq.n	800765c <TIM_OC1_SetConfig+0xc4>
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	699b      	ldr	r3, [r3, #24]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d004      	beq.n	800765c <TIM_OC1_SetConfig+0xc4>
 8007652:	f641 214e 	movw	r1, #6734	; 0x1a4e
 8007656:	481c      	ldr	r0, [pc, #112]	; (80076c8 <TIM_OC1_SetConfig+0x130>)
 8007658:	f7fa fd80 	bl	800215c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	695b      	ldr	r3, [r3, #20]
 8007660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007664:	d008      	beq.n	8007678 <TIM_OC1_SetConfig+0xe0>
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	695b      	ldr	r3, [r3, #20]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d004      	beq.n	8007678 <TIM_OC1_SetConfig+0xe0>
 800766e:	f641 214f 	movw	r1, #6735	; 0x1a4f
 8007672:	4815      	ldr	r0, [pc, #84]	; (80076c8 <TIM_OC1_SetConfig+0x130>)
 8007674:	f7fa fd72 	bl	800215c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800767e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007686:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	695b      	ldr	r3, [r3, #20]
 800768c:	693a      	ldr	r2, [r7, #16]
 800768e:	4313      	orrs	r3, r2
 8007690:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	699b      	ldr	r3, [r3, #24]
 8007696:	693a      	ldr	r2, [r7, #16]
 8007698:	4313      	orrs	r3, r2
 800769a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	693a      	ldr	r2, [r7, #16]
 80076a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	685a      	ldr	r2, [r3, #4]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	621a      	str	r2, [r3, #32]
}
 80076b6:	bf00      	nop
 80076b8:	3718      	adds	r7, #24
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	40012c00 	.word	0x40012c00
 80076c4:	40013400 	.word	0x40013400
 80076c8:	0800ecc8 	.word	0x0800ecc8

080076cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b086      	sub	sp, #24
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a1b      	ldr	r3, [r3, #32]
 80076da:	f023 0210 	bic.w	r2, r3, #16
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a1b      	ldr	r3, [r3, #32]
 80076e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	699b      	ldr	r3, [r3, #24]
 80076f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	021b      	lsls	r3, r3, #8
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	4313      	orrs	r3, r2
 800770e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	f023 0320 	bic.w	r3, r3, #32
 8007716:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	011b      	lsls	r3, r3, #4
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	4313      	orrs	r3, r2
 8007722:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a35      	ldr	r2, [pc, #212]	; (80077fc <TIM_OC2_SetConfig+0x130>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d003      	beq.n	8007734 <TIM_OC2_SetConfig+0x68>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4a34      	ldr	r2, [pc, #208]	; (8007800 <TIM_OC2_SetConfig+0x134>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d11a      	bne.n	800776a <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d008      	beq.n	800774e <TIM_OC2_SetConfig+0x82>
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	2b08      	cmp	r3, #8
 8007742:	d004      	beq.n	800774e <TIM_OC2_SetConfig+0x82>
 8007744:	f641 218c 	movw	r1, #6796	; 0x1a8c
 8007748:	482e      	ldr	r0, [pc, #184]	; (8007804 <TIM_OC2_SetConfig+0x138>)
 800774a:	f7fa fd07 	bl	800215c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007754:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	011b      	lsls	r3, r3, #4
 800775c:	697a      	ldr	r2, [r7, #20]
 800775e:	4313      	orrs	r3, r2
 8007760:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007768:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a23      	ldr	r2, [pc, #140]	; (80077fc <TIM_OC2_SetConfig+0x130>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d003      	beq.n	800777a <TIM_OC2_SetConfig+0xae>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a22      	ldr	r2, [pc, #136]	; (8007800 <TIM_OC2_SetConfig+0x134>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d12f      	bne.n	80077da <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	699b      	ldr	r3, [r3, #24]
 800777e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007782:	d008      	beq.n	8007796 <TIM_OC2_SetConfig+0xca>
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d004      	beq.n	8007796 <TIM_OC2_SetConfig+0xca>
 800778c:	f641 219a 	movw	r1, #6810	; 0x1a9a
 8007790:	481c      	ldr	r0, [pc, #112]	; (8007804 <TIM_OC2_SetConfig+0x138>)
 8007792:	f7fa fce3 	bl	800215c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800779e:	d008      	beq.n	80077b2 <TIM_OC2_SetConfig+0xe6>
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	695b      	ldr	r3, [r3, #20]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d004      	beq.n	80077b2 <TIM_OC2_SetConfig+0xe6>
 80077a8:	f641 219b 	movw	r1, #6811	; 0x1a9b
 80077ac:	4815      	ldr	r0, [pc, #84]	; (8007804 <TIM_OC2_SetConfig+0x138>)
 80077ae:	f7fa fcd5 	bl	800215c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	695b      	ldr	r3, [r3, #20]
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	693a      	ldr	r2, [r7, #16]
 80077ca:	4313      	orrs	r3, r2
 80077cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	699b      	ldr	r3, [r3, #24]
 80077d2:	009b      	lsls	r3, r3, #2
 80077d4:	693a      	ldr	r2, [r7, #16]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	693a      	ldr	r2, [r7, #16]
 80077de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	685a      	ldr	r2, [r3, #4]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	697a      	ldr	r2, [r7, #20]
 80077f2:	621a      	str	r2, [r3, #32]
}
 80077f4:	bf00      	nop
 80077f6:	3718      	adds	r7, #24
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	40012c00 	.word	0x40012c00
 8007800:	40013400 	.word	0x40013400
 8007804:	0800ecc8 	.word	0x0800ecc8

08007808 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b086      	sub	sp, #24
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6a1b      	ldr	r3, [r3, #32]
 8007816:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6a1b      	ldr	r3, [r3, #32]
 8007822:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	69db      	ldr	r3, [r3, #28]
 800782e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f023 0303 	bic.w	r3, r3, #3
 800783e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	4313      	orrs	r3, r2
 8007848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007850:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	021b      	lsls	r3, r3, #8
 8007858:	697a      	ldr	r2, [r7, #20]
 800785a:	4313      	orrs	r3, r2
 800785c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4a35      	ldr	r2, [pc, #212]	; (8007938 <TIM_OC3_SetConfig+0x130>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d003      	beq.n	800786e <TIM_OC3_SetConfig+0x66>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	4a34      	ldr	r2, [pc, #208]	; (800793c <TIM_OC3_SetConfig+0x134>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d11a      	bne.n	80078a4 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d008      	beq.n	8007888 <TIM_OC3_SetConfig+0x80>
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	2b08      	cmp	r3, #8
 800787c:	d004      	beq.n	8007888 <TIM_OC3_SetConfig+0x80>
 800787e:	f641 21d7 	movw	r1, #6871	; 0x1ad7
 8007882:	482f      	ldr	r0, [pc, #188]	; (8007940 <TIM_OC3_SetConfig+0x138>)
 8007884:	f7fa fc6a 	bl	800215c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800788e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	021b      	lsls	r3, r3, #8
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	4313      	orrs	r3, r2
 800789a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	4a24      	ldr	r2, [pc, #144]	; (8007938 <TIM_OC3_SetConfig+0x130>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d003      	beq.n	80078b4 <TIM_OC3_SetConfig+0xac>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4a23      	ldr	r2, [pc, #140]	; (800793c <TIM_OC3_SetConfig+0x134>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d12f      	bne.n	8007914 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078bc:	d008      	beq.n	80078d0 <TIM_OC3_SetConfig+0xc8>
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	699b      	ldr	r3, [r3, #24]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d004      	beq.n	80078d0 <TIM_OC3_SetConfig+0xc8>
 80078c6:	f641 21e4 	movw	r1, #6884	; 0x1ae4
 80078ca:	481d      	ldr	r0, [pc, #116]	; (8007940 <TIM_OC3_SetConfig+0x138>)
 80078cc:	f7fa fc46 	bl	800215c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	695b      	ldr	r3, [r3, #20]
 80078d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078d8:	d008      	beq.n	80078ec <TIM_OC3_SetConfig+0xe4>
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	695b      	ldr	r3, [r3, #20]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d004      	beq.n	80078ec <TIM_OC3_SetConfig+0xe4>
 80078e2:	f641 21e5 	movw	r1, #6885	; 0x1ae5
 80078e6:	4816      	ldr	r0, [pc, #88]	; (8007940 <TIM_OC3_SetConfig+0x138>)
 80078e8:	f7fa fc38 	bl	800215c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	695b      	ldr	r3, [r3, #20]
 8007900:	011b      	lsls	r3, r3, #4
 8007902:	693a      	ldr	r2, [r7, #16]
 8007904:	4313      	orrs	r3, r2
 8007906:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	011b      	lsls	r3, r3, #4
 800790e:	693a      	ldr	r2, [r7, #16]
 8007910:	4313      	orrs	r3, r2
 8007912:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	693a      	ldr	r2, [r7, #16]
 8007918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	685a      	ldr	r2, [r3, #4]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	697a      	ldr	r2, [r7, #20]
 800792c:	621a      	str	r2, [r3, #32]
}
 800792e:	bf00      	nop
 8007930:	3718      	adds	r7, #24
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	40012c00 	.word	0x40012c00
 800793c:	40013400 	.word	0x40013400
 8007940:	0800ecc8 	.word	0x0800ecc8

08007944 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b086      	sub	sp, #24
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a1b      	ldr	r3, [r3, #32]
 8007952:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a1b      	ldr	r3, [r3, #32]
 800795e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	69db      	ldr	r3, [r3, #28]
 800796a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800797a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	021b      	lsls	r3, r3, #8
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	4313      	orrs	r3, r2
 8007986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800798e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	031b      	lsls	r3, r3, #12
 8007996:	693a      	ldr	r2, [r7, #16]
 8007998:	4313      	orrs	r3, r2
 800799a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a18      	ldr	r2, [pc, #96]	; (8007a00 <TIM_OC4_SetConfig+0xbc>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d003      	beq.n	80079ac <TIM_OC4_SetConfig+0x68>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a17      	ldr	r2, [pc, #92]	; (8007a04 <TIM_OC4_SetConfig+0xc0>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d117      	bne.n	80079dc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	695b      	ldr	r3, [r3, #20]
 80079b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079b4:	d008      	beq.n	80079c8 <TIM_OC4_SetConfig+0x84>
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	695b      	ldr	r3, [r3, #20]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d004      	beq.n	80079c8 <TIM_OC4_SetConfig+0x84>
 80079be:	f641 3123 	movw	r1, #6947	; 0x1b23
 80079c2:	4811      	ldr	r0, [pc, #68]	; (8007a08 <TIM_OC4_SetConfig+0xc4>)
 80079c4:	f7fa fbca 	bl	800215c <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	695b      	ldr	r3, [r3, #20]
 80079d4:	019b      	lsls	r3, r3, #6
 80079d6:	697a      	ldr	r2, [r7, #20]
 80079d8:	4313      	orrs	r3, r2
 80079da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	697a      	ldr	r2, [r7, #20]
 80079e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	685a      	ldr	r2, [r3, #4]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	693a      	ldr	r2, [r7, #16]
 80079f4:	621a      	str	r2, [r3, #32]
}
 80079f6:	bf00      	nop
 80079f8:	3718      	adds	r7, #24
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	40012c00 	.word	0x40012c00
 8007a04:	40013400 	.word	0x40013400
 8007a08:	0800ecc8 	.word	0x0800ecc8

08007a0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b087      	sub	sp, #28
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6a1b      	ldr	r3, [r3, #32]
 8007a1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	f023 0201 	bic.w	r2, r3, #1
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	699b      	ldr	r3, [r3, #24]
 8007a2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	011b      	lsls	r3, r3, #4
 8007a3c:	693a      	ldr	r2, [r7, #16]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	f023 030a 	bic.w	r3, r3, #10
 8007a48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a4a:	697a      	ldr	r2, [r7, #20]
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	693a      	ldr	r2, [r7, #16]
 8007a56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	697a      	ldr	r2, [r7, #20]
 8007a5c:	621a      	str	r2, [r3, #32]
}
 8007a5e:	bf00      	nop
 8007a60:	371c      	adds	r7, #28
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bc80      	pop	{r7}
 8007a66:	4770      	bx	lr

08007a68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b087      	sub	sp, #28
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	6a1b      	ldr	r3, [r3, #32]
 8007a78:	f023 0210 	bic.w	r2, r3, #16
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6a1b      	ldr	r3, [r3, #32]
 8007a8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a92:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	031b      	lsls	r3, r3, #12
 8007a98:	697a      	ldr	r2, [r7, #20]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007aa4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	011b      	lsls	r3, r3, #4
 8007aaa:	693a      	ldr	r2, [r7, #16]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	697a      	ldr	r2, [r7, #20]
 8007ab4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	693a      	ldr	r2, [r7, #16]
 8007aba:	621a      	str	r2, [r3, #32]
}
 8007abc:	bf00      	nop
 8007abe:	371c      	adds	r7, #28
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bc80      	pop	{r7}
 8007ac4:	4770      	bx	lr

08007ac6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ac6:	b480      	push	{r7}
 8007ac8:	b085      	sub	sp, #20
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007adc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ade:	683a      	ldr	r2, [r7, #0]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	f043 0307 	orr.w	r3, r3, #7
 8007ae8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	609a      	str	r2, [r3, #8]
}
 8007af0:	bf00      	nop
 8007af2:	3714      	adds	r7, #20
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bc80      	pop	{r7}
 8007af8:	4770      	bx	lr

08007afa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007afa:	b480      	push	{r7}
 8007afc:	b087      	sub	sp, #28
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	60f8      	str	r0, [r7, #12]
 8007b02:	60b9      	str	r1, [r7, #8]
 8007b04:	607a      	str	r2, [r7, #4]
 8007b06:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b14:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	021a      	lsls	r2, r3, #8
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	431a      	orrs	r2, r3
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	697a      	ldr	r2, [r7, #20]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	697a      	ldr	r2, [r7, #20]
 8007b2c:	609a      	str	r2, [r3, #8]
}
 8007b2e:	bf00      	nop
 8007b30:	371c      	adds	r7, #28
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bc80      	pop	{r7}
 8007b36:	4770      	bx	lr

08007b38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b086      	sub	sp, #24
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	4a26      	ldr	r2, [pc, #152]	; (8007be0 <TIM_CCxChannelCmd+0xa8>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d018      	beq.n	8007b7e <TIM_CCxChannelCmd+0x46>
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	4a25      	ldr	r2, [pc, #148]	; (8007be4 <TIM_CCxChannelCmd+0xac>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d014      	beq.n	8007b7e <TIM_CCxChannelCmd+0x46>
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b5a:	d010      	beq.n	8007b7e <TIM_CCxChannelCmd+0x46>
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	4a22      	ldr	r2, [pc, #136]	; (8007be8 <TIM_CCxChannelCmd+0xb0>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d00c      	beq.n	8007b7e <TIM_CCxChannelCmd+0x46>
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	4a21      	ldr	r2, [pc, #132]	; (8007bec <TIM_CCxChannelCmd+0xb4>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d008      	beq.n	8007b7e <TIM_CCxChannelCmd+0x46>
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	4a20      	ldr	r2, [pc, #128]	; (8007bf0 <TIM_CCxChannelCmd+0xb8>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d004      	beq.n	8007b7e <TIM_CCxChannelCmd+0x46>
 8007b74:	f641 5109 	movw	r1, #7433	; 0x1d09
 8007b78:	481e      	ldr	r0, [pc, #120]	; (8007bf4 <TIM_CCxChannelCmd+0xbc>)
 8007b7a:	f7fa faef 	bl	800215c <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d010      	beq.n	8007ba6 <TIM_CCxChannelCmd+0x6e>
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	2b04      	cmp	r3, #4
 8007b88:	d00d      	beq.n	8007ba6 <TIM_CCxChannelCmd+0x6e>
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	2b08      	cmp	r3, #8
 8007b8e:	d00a      	beq.n	8007ba6 <TIM_CCxChannelCmd+0x6e>
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	2b0c      	cmp	r3, #12
 8007b94:	d007      	beq.n	8007ba6 <TIM_CCxChannelCmd+0x6e>
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	2b3c      	cmp	r3, #60	; 0x3c
 8007b9a:	d004      	beq.n	8007ba6 <TIM_CCxChannelCmd+0x6e>
 8007b9c:	f641 510a 	movw	r1, #7434	; 0x1d0a
 8007ba0:	4814      	ldr	r0, [pc, #80]	; (8007bf4 <TIM_CCxChannelCmd+0xbc>)
 8007ba2:	f7fa fadb 	bl	800215c <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	f003 031f 	and.w	r3, r3, #31
 8007bac:	2201      	movs	r2, #1
 8007bae:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6a1a      	ldr	r2, [r3, #32]
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	43db      	mvns	r3, r3
 8007bbc:	401a      	ands	r2, r3
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6a1a      	ldr	r2, [r3, #32]
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	f003 031f 	and.w	r3, r3, #31
 8007bcc:	6879      	ldr	r1, [r7, #4]
 8007bce:	fa01 f303 	lsl.w	r3, r1, r3
 8007bd2:	431a      	orrs	r2, r3
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	621a      	str	r2, [r3, #32]
}
 8007bd8:	bf00      	nop
 8007bda:	3718      	adds	r7, #24
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	40012c00 	.word	0x40012c00
 8007be4:	40013400 	.word	0x40013400
 8007be8:	40000400 	.word	0x40000400
 8007bec:	40000800 	.word	0x40000800
 8007bf0:	40000c00 	.word	0x40000c00
 8007bf4:	0800ecc8 	.word	0x0800ecc8

08007bf8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4a1c      	ldr	r2, [pc, #112]	; (8007c74 <TIM_ResetCallback+0x7c>)
 8007c04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a1b      	ldr	r2, [pc, #108]	; (8007c78 <TIM_ResetCallback+0x80>)
 8007c0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4a1a      	ldr	r2, [pc, #104]	; (8007c7c <TIM_ResetCallback+0x84>)
 8007c14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	4a19      	ldr	r2, [pc, #100]	; (8007c80 <TIM_ResetCallback+0x88>)
 8007c1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	4a18      	ldr	r2, [pc, #96]	; (8007c84 <TIM_ResetCallback+0x8c>)
 8007c24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4a17      	ldr	r2, [pc, #92]	; (8007c88 <TIM_ResetCallback+0x90>)
 8007c2c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4a16      	ldr	r2, [pc, #88]	; (8007c8c <TIM_ResetCallback+0x94>)
 8007c34:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4a15      	ldr	r2, [pc, #84]	; (8007c90 <TIM_ResetCallback+0x98>)
 8007c3c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4a14      	ldr	r2, [pc, #80]	; (8007c94 <TIM_ResetCallback+0x9c>)
 8007c44:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4a13      	ldr	r2, [pc, #76]	; (8007c98 <TIM_ResetCallback+0xa0>)
 8007c4c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4a12      	ldr	r2, [pc, #72]	; (8007c9c <TIM_ResetCallback+0xa4>)
 8007c54:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a11      	ldr	r2, [pc, #68]	; (8007ca0 <TIM_ResetCallback+0xa8>)
 8007c5c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a10      	ldr	r2, [pc, #64]	; (8007ca4 <TIM_ResetCallback+0xac>)
 8007c64:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bc80      	pop	{r7}
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	080020f1 	.word	0x080020f1
 8007c78:	08007415 	.word	0x08007415
 8007c7c:	0800746f 	.word	0x0800746f
 8007c80:	08007481 	.word	0x08007481
 8007c84:	080020a9 	.word	0x080020a9
 8007c88:	08007439 	.word	0x08007439
 8007c8c:	08007427 	.word	0x08007427
 8007c90:	0800744b 	.word	0x0800744b
 8007c94:	0800745d 	.word	0x0800745d
 8007c98:	08007493 	.word	0x08007493
 8007c9c:	08007fe1 	.word	0x08007fe1
 8007ca0:	08007ff3 	.word	0x08007ff3
 8007ca4:	08008005 	.word	0x08008005

08007ca8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a5c      	ldr	r2, [pc, #368]	; (8007e28 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d027      	beq.n	8007d0c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a5a      	ldr	r2, [pc, #360]	; (8007e2c <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d022      	beq.n	8007d0c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cce:	d01d      	beq.n	8007d0c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a56      	ldr	r2, [pc, #344]	; (8007e30 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d018      	beq.n	8007d0c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a55      	ldr	r2, [pc, #340]	; (8007e34 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d013      	beq.n	8007d0c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a53      	ldr	r2, [pc, #332]	; (8007e38 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d00e      	beq.n	8007d0c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a52      	ldr	r2, [pc, #328]	; (8007e3c <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d009      	beq.n	8007d0c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a50      	ldr	r2, [pc, #320]	; (8007e40 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d004      	beq.n	8007d0c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007d02:	f240 7186 	movw	r1, #1926	; 0x786
 8007d06:	484f      	ldr	r0, [pc, #316]	; (8007e44 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8007d08:	f7fa fa28 	bl	800215c <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d020      	beq.n	8007d56 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2b10      	cmp	r3, #16
 8007d1a:	d01c      	beq.n	8007d56 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2b20      	cmp	r3, #32
 8007d22:	d018      	beq.n	8007d56 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2b30      	cmp	r3, #48	; 0x30
 8007d2a:	d014      	beq.n	8007d56 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2b40      	cmp	r3, #64	; 0x40
 8007d32:	d010      	beq.n	8007d56 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2b50      	cmp	r3, #80	; 0x50
 8007d3a:	d00c      	beq.n	8007d56 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2b60      	cmp	r3, #96	; 0x60
 8007d42:	d008      	beq.n	8007d56 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2b70      	cmp	r3, #112	; 0x70
 8007d4a:	d004      	beq.n	8007d56 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007d4c:	f240 7187 	movw	r1, #1927	; 0x787
 8007d50:	483c      	ldr	r0, [pc, #240]	; (8007e44 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8007d52:	f7fa fa03 	bl	800215c <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	2b80      	cmp	r3, #128	; 0x80
 8007d5c:	d008      	beq.n	8007d70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d004      	beq.n	8007d70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d66:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 8007d6a:	4836      	ldr	r0, [pc, #216]	; (8007e44 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8007d6c:	f7fa f9f6 	bl	800215c <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d101      	bne.n	8007d7e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d7a:	2302      	movs	r3, #2
 8007d7c:	e050      	b.n	8007e20 <HAL_TIMEx_MasterConfigSynchronization+0x178>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2201      	movs	r2, #1
 8007d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2202      	movs	r2, #2
 8007d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007da4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a1a      	ldr	r2, [pc, #104]	; (8007e28 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d018      	beq.n	8007df4 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a19      	ldr	r2, [pc, #100]	; (8007e2c <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d013      	beq.n	8007df4 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dd4:	d00e      	beq.n	8007df4 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a15      	ldr	r2, [pc, #84]	; (8007e30 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d009      	beq.n	8007df4 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a13      	ldr	r2, [pc, #76]	; (8007e34 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d004      	beq.n	8007df4 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a12      	ldr	r2, [pc, #72]	; (8007e38 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d10c      	bne.n	8007e0e <HAL_TIMEx_MasterConfigSynchronization+0x166>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dfa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	68ba      	ldr	r2, [r7, #8]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	68ba      	ldr	r2, [r7, #8]
 8007e0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2201      	movs	r2, #1
 8007e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3710      	adds	r7, #16
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	40012c00 	.word	0x40012c00
 8007e2c:	40013400 	.word	0x40013400
 8007e30:	40000400 	.word	0x40000400
 8007e34:	40000800 	.word	0x40000800
 8007e38:	40000c00 	.word	0x40000c00
 8007e3c:	40001000 	.word	0x40001000
 8007e40:	40001400 	.word	0x40001400
 8007e44:	0800ed00 	.word	0x0800ed00

08007e48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007e52:	2300      	movs	r3, #0
 8007e54:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a5e      	ldr	r2, [pc, #376]	; (8007fd4 <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d009      	beq.n	8007e74 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a5c      	ldr	r2, [pc, #368]	; (8007fd8 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d004      	beq.n	8007e74 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8007e6a:	f240 71c3 	movw	r1, #1987	; 0x7c3
 8007e6e:	485b      	ldr	r0, [pc, #364]	; (8007fdc <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007e70:	f7fa f974 	bl	800215c <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e7c:	d008      	beq.n	8007e90 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d004      	beq.n	8007e90 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 8007e86:	f240 71c4 	movw	r1, #1988	; 0x7c4
 8007e8a:	4854      	ldr	r0, [pc, #336]	; (8007fdc <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007e8c:	f7fa f966 	bl	800215c <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e98:	d008      	beq.n	8007eac <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d004      	beq.n	8007eac <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8007ea2:	f240 71c5 	movw	r1, #1989	; 0x7c5
 8007ea6:	484d      	ldr	r0, [pc, #308]	; (8007fdc <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007ea8:	f7fa f958 	bl	800215c <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d013      	beq.n	8007edc <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ebc:	d00e      	beq.n	8007edc <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ec6:	d009      	beq.n	8007edc <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ed0:	d004      	beq.n	8007edc <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8007ed2:	f240 71c6 	movw	r1, #1990	; 0x7c6
 8007ed6:	4841      	ldr	r0, [pc, #260]	; (8007fdc <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007ed8:	f7fa f940 	bl	800215c <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	2bff      	cmp	r3, #255	; 0xff
 8007ee2:	d904      	bls.n	8007eee <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8007ee4:	f240 71c7 	movw	r1, #1991	; 0x7c7
 8007ee8:	483c      	ldr	r0, [pc, #240]	; (8007fdc <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007eea:	f7fa f937 	bl	800215c <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	691b      	ldr	r3, [r3, #16]
 8007ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ef6:	d008      	beq.n	8007f0a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	691b      	ldr	r3, [r3, #16]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d004      	beq.n	8007f0a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007f00:	f44f 61f9 	mov.w	r1, #1992	; 0x7c8
 8007f04:	4835      	ldr	r0, [pc, #212]	; (8007fdc <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007f06:	f7fa f929 	bl	800215c <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	695b      	ldr	r3, [r3, #20]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d009      	beq.n	8007f26 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	695b      	ldr	r3, [r3, #20]
 8007f16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f1a:	d004      	beq.n	8007f26 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007f1c:	f240 71c9 	movw	r1, #1993	; 0x7c9
 8007f20:	482e      	ldr	r0, [pc, #184]	; (8007fdc <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007f22:	f7fa f91b 	bl	800215c <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	69db      	ldr	r3, [r3, #28]
 8007f2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f2e:	d008      	beq.n	8007f42 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	69db      	ldr	r3, [r3, #28]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d004      	beq.n	8007f42 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8007f38:	f240 71ca 	movw	r1, #1994	; 0x7ca
 8007f3c:	4827      	ldr	r0, [pc, #156]	; (8007fdc <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007f3e:	f7fa f90d 	bl	800215c <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f48:	2b01      	cmp	r3, #1
 8007f4a:	d101      	bne.n	8007f50 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 8007f4c:	2302      	movs	r3, #2
 8007f4e:	e03d      	b.n	8007fcc <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	691b      	ldr	r3, [r3, #16]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	695b      	ldr	r3, [r3, #20]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	69db      	ldr	r3, [r3, #28]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3710      	adds	r7, #16
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	40012c00 	.word	0x40012c00
 8007fd8:	40013400 	.word	0x40013400
 8007fdc:	0800ed00 	.word	0x0800ed00

08007fe0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007fe8:	bf00      	nop
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bc80      	pop	{r7}
 8007ff0:	4770      	bx	lr

08007ff2 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	b083      	sub	sp, #12
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8007ffa:	bf00      	nop
 8007ffc:	370c      	adds	r7, #12
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bc80      	pop	{r7}
 8008002:	4770      	bx	lr

08008004 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800800c:	bf00      	nop
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	bc80      	pop	{r7}
 8008014:	4770      	bx	lr
	...

08008018 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d101      	bne.n	800802a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	e0a7      	b.n	800817a <HAL_UART_Init+0x162>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	699b      	ldr	r3, [r3, #24]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d02c      	beq.n	800808c <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a53      	ldr	r2, [pc, #332]	; (8008184 <HAL_UART_Init+0x16c>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d00e      	beq.n	800805a <HAL_UART_Init+0x42>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a51      	ldr	r2, [pc, #324]	; (8008188 <HAL_UART_Init+0x170>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d009      	beq.n	800805a <HAL_UART_Init+0x42>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a50      	ldr	r2, [pc, #320]	; (800818c <HAL_UART_Init+0x174>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d004      	beq.n	800805a <HAL_UART_Init+0x42>
 8008050:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8008054:	484e      	ldr	r0, [pc, #312]	; (8008190 <HAL_UART_Init+0x178>)
 8008056:	f7fa f881 	bl	800215c <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	699b      	ldr	r3, [r3, #24]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d032      	beq.n	80080c8 <HAL_UART_Init+0xb0>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	699b      	ldr	r3, [r3, #24]
 8008066:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800806a:	d02d      	beq.n	80080c8 <HAL_UART_Init+0xb0>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	699b      	ldr	r3, [r3, #24]
 8008070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008074:	d028      	beq.n	80080c8 <HAL_UART_Init+0xb0>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	699b      	ldr	r3, [r3, #24]
 800807a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800807e:	d023      	beq.n	80080c8 <HAL_UART_Init+0xb0>
 8008080:	f240 116d 	movw	r1, #365	; 0x16d
 8008084:	4842      	ldr	r0, [pc, #264]	; (8008190 <HAL_UART_Init+0x178>)
 8008086:	f7fa f869 	bl	800215c <assert_failed>
 800808a:	e01d      	b.n	80080c8 <HAL_UART_Init+0xb0>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a3c      	ldr	r2, [pc, #240]	; (8008184 <HAL_UART_Init+0x16c>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d018      	beq.n	80080c8 <HAL_UART_Init+0xb0>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a3b      	ldr	r2, [pc, #236]	; (8008188 <HAL_UART_Init+0x170>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d013      	beq.n	80080c8 <HAL_UART_Init+0xb0>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a39      	ldr	r2, [pc, #228]	; (800818c <HAL_UART_Init+0x174>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d00e      	beq.n	80080c8 <HAL_UART_Init+0xb0>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a39      	ldr	r2, [pc, #228]	; (8008194 <HAL_UART_Init+0x17c>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d009      	beq.n	80080c8 <HAL_UART_Init+0xb0>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a37      	ldr	r2, [pc, #220]	; (8008198 <HAL_UART_Init+0x180>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d004      	beq.n	80080c8 <HAL_UART_Init+0xb0>
 80080be:	f240 1171 	movw	r1, #369	; 0x171
 80080c2:	4833      	ldr	r0, [pc, #204]	; (8008190 <HAL_UART_Init+0x178>)
 80080c4:	f7fa f84a 	bl	800215c <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d009      	beq.n	80080e4 <HAL_UART_Init+0xcc>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080d8:	d004      	beq.n	80080e4 <HAL_UART_Init+0xcc>
 80080da:	f240 1173 	movw	r1, #371	; 0x173
 80080de:	482c      	ldr	r0, [pc, #176]	; (8008190 <HAL_UART_Init+0x178>)
 80080e0:	f7fa f83c 	bl	800215c <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d111      	bne.n	8008114 <HAL_UART_Init+0xfc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 fb0d 	bl	8008718 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008102:	2b00      	cmp	r3, #0
 8008104:	d102      	bne.n	800810c <HAL_UART_Init+0xf4>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a24      	ldr	r2, [pc, #144]	; (800819c <HAL_UART_Init+0x184>)
 800810a:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2224      	movs	r2, #36	; 0x24
 8008118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	68da      	ldr	r2, [r3, #12]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800812a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 fd01 	bl	8008b34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	691a      	ldr	r2, [r3, #16]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008140:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	695a      	ldr	r2, [r3, #20]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008150:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68da      	ldr	r2, [r3, #12]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008160:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2220      	movs	r2, #32
 800816c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2220      	movs	r2, #32
 8008174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008178:	2300      	movs	r3, #0
}
 800817a:	4618      	mov	r0, r3
 800817c:	3708      	adds	r7, #8
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	40013800 	.word	0x40013800
 8008188:	40004400 	.word	0x40004400
 800818c:	40004800 	.word	0x40004800
 8008190:	0800ed3c 	.word	0x0800ed3c
 8008194:	40004c00 	.word	0x40004c00
 8008198:	40005000 	.word	0x40005000
 800819c:	080025f1 	.word	0x080025f1

080081a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b08a      	sub	sp, #40	; 0x28
 80081a4:	af02      	add	r7, sp, #8
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	603b      	str	r3, [r7, #0]
 80081ac:	4613      	mov	r3, r2
 80081ae:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80081b0:	2300      	movs	r3, #0
 80081b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	2b20      	cmp	r3, #32
 80081be:	d17c      	bne.n	80082ba <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d002      	beq.n	80081cc <HAL_UART_Transmit+0x2c>
 80081c6:	88fb      	ldrh	r3, [r7, #6]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d101      	bne.n	80081d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	e075      	b.n	80082bc <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081d6:	2b01      	cmp	r3, #1
 80081d8:	d101      	bne.n	80081de <HAL_UART_Transmit+0x3e>
 80081da:	2302      	movs	r3, #2
 80081dc:	e06e      	b.n	80082bc <HAL_UART_Transmit+0x11c>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2201      	movs	r2, #1
 80081e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2221      	movs	r2, #33	; 0x21
 80081f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80081f4:	f7fa fc82 	bl	8002afc <HAL_GetTick>
 80081f8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	88fa      	ldrh	r2, [r7, #6]
 80081fe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	88fa      	ldrh	r2, [r7, #6]
 8008204:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800820e:	d108      	bne.n	8008222 <HAL_UART_Transmit+0x82>
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d104      	bne.n	8008222 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008218:	2300      	movs	r3, #0
 800821a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	61bb      	str	r3, [r7, #24]
 8008220:	e003      	b.n	800822a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008226:	2300      	movs	r3, #0
 8008228:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008232:	e02a      	b.n	800828a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	2200      	movs	r2, #0
 800823c:	2180      	movs	r1, #128	; 0x80
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f000 faa0 	bl	8008784 <UART_WaitOnFlagUntilTimeout>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d001      	beq.n	800824e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	e036      	b.n	80082bc <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800824e:	69fb      	ldr	r3, [r7, #28]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d10b      	bne.n	800826c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008254:	69bb      	ldr	r3, [r7, #24]
 8008256:	881b      	ldrh	r3, [r3, #0]
 8008258:	461a      	mov	r2, r3
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008262:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	3302      	adds	r3, #2
 8008268:	61bb      	str	r3, [r7, #24]
 800826a:	e007      	b.n	800827c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800826c:	69fb      	ldr	r3, [r7, #28]
 800826e:	781a      	ldrb	r2, [r3, #0]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	3301      	adds	r3, #1
 800827a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008280:	b29b      	uxth	r3, r3
 8008282:	3b01      	subs	r3, #1
 8008284:	b29a      	uxth	r2, r3
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800828e:	b29b      	uxth	r3, r3
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1cf      	bne.n	8008234 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	9300      	str	r3, [sp, #0]
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	2200      	movs	r2, #0
 800829c:	2140      	movs	r1, #64	; 0x40
 800829e:	68f8      	ldr	r0, [r7, #12]
 80082a0:	f000 fa70 	bl	8008784 <UART_WaitOnFlagUntilTimeout>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d001      	beq.n	80082ae <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80082aa:	2303      	movs	r3, #3
 80082ac:	e006      	b.n	80082bc <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2220      	movs	r2, #32
 80082b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80082b6:	2300      	movs	r3, #0
 80082b8:	e000      	b.n	80082bc <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80082ba:	2302      	movs	r3, #2
  }
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3720      	adds	r7, #32
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	4613      	mov	r3, r2
 80082d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	2b20      	cmp	r3, #32
 80082dc:	d11d      	bne.n	800831a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d002      	beq.n	80082ea <HAL_UART_Receive_IT+0x26>
 80082e4:	88fb      	ldrh	r3, [r7, #6]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d101      	bne.n	80082ee <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e016      	b.n	800831c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d101      	bne.n	80082fc <HAL_UART_Receive_IT+0x38>
 80082f8:	2302      	movs	r3, #2
 80082fa:	e00f      	b.n	800831c <HAL_UART_Receive_IT+0x58>
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2200      	movs	r2, #0
 8008308:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800830a:	88fb      	ldrh	r3, [r7, #6]
 800830c:	461a      	mov	r2, r3
 800830e:	68b9      	ldr	r1, [r7, #8]
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f000 fa81 	bl	8008818 <UART_Start_Receive_IT>
 8008316:	4603      	mov	r3, r0
 8008318:	e000      	b.n	800831c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800831a:	2302      	movs	r3, #2
  }
}
 800831c:	4618      	mov	r0, r3
 800831e:	3710      	adds	r7, #16
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b08a      	sub	sp, #40	; 0x28
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	695b      	ldr	r3, [r3, #20]
 8008342:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8008344:	2300      	movs	r3, #0
 8008346:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8008348:	2300      	movs	r3, #0
 800834a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800834c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834e:	f003 030f 	and.w	r3, r3, #15
 8008352:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8008354:	69bb      	ldr	r3, [r7, #24]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d10d      	bne.n	8008376 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800835a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835c:	f003 0320 	and.w	r3, r3, #32
 8008360:	2b00      	cmp	r3, #0
 8008362:	d008      	beq.n	8008376 <HAL_UART_IRQHandler+0x52>
 8008364:	6a3b      	ldr	r3, [r7, #32]
 8008366:	f003 0320 	and.w	r3, r3, #32
 800836a:	2b00      	cmp	r3, #0
 800836c:	d003      	beq.n	8008376 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fb34 	bl	80089dc <UART_Receive_IT>
      return;
 8008374:	e180      	b.n	8008678 <HAL_UART_IRQHandler+0x354>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	2b00      	cmp	r3, #0
 800837a:	f000 80b4 	beq.w	80084e6 <HAL_UART_IRQHandler+0x1c2>
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	f003 0301 	and.w	r3, r3, #1
 8008384:	2b00      	cmp	r3, #0
 8008386:	d105      	bne.n	8008394 <HAL_UART_IRQHandler+0x70>
 8008388:	6a3b      	ldr	r3, [r7, #32]
 800838a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800838e:	2b00      	cmp	r3, #0
 8008390:	f000 80a9 	beq.w	80084e6 <HAL_UART_IRQHandler+0x1c2>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008396:	f003 0301 	and.w	r3, r3, #1
 800839a:	2b00      	cmp	r3, #0
 800839c:	d00a      	beq.n	80083b4 <HAL_UART_IRQHandler+0x90>
 800839e:	6a3b      	ldr	r3, [r7, #32]
 80083a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d005      	beq.n	80083b4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ac:	f043 0201 	orr.w	r2, r3, #1
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80083b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b6:	f003 0304 	and.w	r3, r3, #4
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00a      	beq.n	80083d4 <HAL_UART_IRQHandler+0xb0>
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	f003 0301 	and.w	r3, r3, #1
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d005      	beq.n	80083d4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083cc:	f043 0202 	orr.w	r2, r3, #2
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80083d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d6:	f003 0302 	and.w	r3, r3, #2
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00a      	beq.n	80083f4 <HAL_UART_IRQHandler+0xd0>
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	f003 0301 	and.w	r3, r3, #1
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d005      	beq.n	80083f4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ec:	f043 0204 	orr.w	r2, r3, #4
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80083f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f6:	f003 0308 	and.w	r3, r3, #8
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d00f      	beq.n	800841e <HAL_UART_IRQHandler+0xfa>
 80083fe:	6a3b      	ldr	r3, [r7, #32]
 8008400:	f003 0320 	and.w	r3, r3, #32
 8008404:	2b00      	cmp	r3, #0
 8008406:	d104      	bne.n	8008412 <HAL_UART_IRQHandler+0xee>
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	f003 0301 	and.w	r3, r3, #1
 800840e:	2b00      	cmp	r3, #0
 8008410:	d005      	beq.n	800841e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008416:	f043 0208 	orr.w	r2, r3, #8
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008422:	2b00      	cmp	r3, #0
 8008424:	f000 8123 	beq.w	800866e <HAL_UART_IRQHandler+0x34a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842a:	f003 0320 	and.w	r3, r3, #32
 800842e:	2b00      	cmp	r3, #0
 8008430:	d007      	beq.n	8008442 <HAL_UART_IRQHandler+0x11e>
 8008432:	6a3b      	ldr	r3, [r7, #32]
 8008434:	f003 0320 	and.w	r3, r3, #32
 8008438:	2b00      	cmp	r3, #0
 800843a:	d002      	beq.n	8008442 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 facd 	bl	80089dc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	695b      	ldr	r3, [r3, #20]
 8008448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800844c:	2b00      	cmp	r3, #0
 800844e:	bf14      	ite	ne
 8008450:	2301      	movne	r3, #1
 8008452:	2300      	moveq	r3, #0
 8008454:	b2db      	uxtb	r3, r3
 8008456:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800845c:	f003 0308 	and.w	r3, r3, #8
 8008460:	2b00      	cmp	r3, #0
 8008462:	d102      	bne.n	800846a <HAL_UART_IRQHandler+0x146>
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d033      	beq.n	80084d2 <HAL_UART_IRQHandler+0x1ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fa0d 	bl	800888a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	695b      	ldr	r3, [r3, #20]
 8008476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800847a:	2b00      	cmp	r3, #0
 800847c:	d024      	beq.n	80084c8 <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	695a      	ldr	r2, [r3, #20]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800848c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008492:	2b00      	cmp	r3, #0
 8008494:	d013      	beq.n	80084be <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800849a:	4a79      	ldr	r2, [pc, #484]	; (8008680 <HAL_UART_IRQHandler+0x35c>)
 800849c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7fb f8c0 	bl	8003628 <HAL_DMA_Abort_IT>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d019      	beq.n	80084e2 <HAL_UART_IRQHandler+0x1be>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80084b8:	4610      	mov	r0, r2
 80084ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084bc:	e011      	b.n	80084e2 <HAL_UART_IRQHandler+0x1be>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084c6:	e00c      	b.n	80084e2 <HAL_UART_IRQHandler+0x1be>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084d0:	e007      	b.n	80084e2 <HAL_UART_IRQHandler+0x1be>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2200      	movs	r2, #0
 80084de:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80084e0:	e0c5      	b.n	800866e <HAL_UART_IRQHandler+0x34a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084e2:	bf00      	nop
    return;
 80084e4:	e0c3      	b.n	800866e <HAL_UART_IRQHandler+0x34a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	f040 80a3 	bne.w	8008636 <HAL_UART_IRQHandler+0x312>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80084f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f2:	f003 0310 	and.w	r3, r3, #16
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	f000 809d 	beq.w	8008636 <HAL_UART_IRQHandler+0x312>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80084fc:	6a3b      	ldr	r3, [r7, #32]
 80084fe:	f003 0310 	and.w	r3, r3, #16
 8008502:	2b00      	cmp	r3, #0
 8008504:	f000 8097 	beq.w	8008636 <HAL_UART_IRQHandler+0x312>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008508:	2300      	movs	r3, #0
 800850a:	60fb      	str	r3, [r7, #12]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	60fb      	str	r3, [r7, #12]
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	60fb      	str	r3, [r7, #12]
 800851c:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	695b      	ldr	r3, [r3, #20]
 8008524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008528:	2b00      	cmp	r3, #0
 800852a:	d04f      	beq.n	80085cc <HAL_UART_IRQHandler+0x2a8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8008536:	8a3b      	ldrh	r3, [r7, #16]
 8008538:	2b00      	cmp	r3, #0
 800853a:	f000 809a 	beq.w	8008672 <HAL_UART_IRQHandler+0x34e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008542:	8a3a      	ldrh	r2, [r7, #16]
 8008544:	429a      	cmp	r2, r3
 8008546:	f080 8094 	bcs.w	8008672 <HAL_UART_IRQHandler+0x34e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	8a3a      	ldrh	r2, [r7, #16]
 800854e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008554:	699b      	ldr	r3, [r3, #24]
 8008556:	2b20      	cmp	r3, #32
 8008558:	d02b      	beq.n	80085b2 <HAL_UART_IRQHandler+0x28e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	68da      	ldr	r2, [r3, #12]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008568:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	695a      	ldr	r2, [r3, #20]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f022 0201 	bic.w	r2, r2, #1
 8008578:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	695a      	ldr	r2, [r3, #20]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008588:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2220      	movs	r2, #32
 800858e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	68da      	ldr	r2, [r3, #12]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f022 0210 	bic.w	r2, r2, #16
 80085a6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ac:	4618      	mov	r0, r3
 80085ae:	f7fb f801 	bl	80035b4 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80085be:	b292      	uxth	r2, r2
 80085c0:	1a8a      	subs	r2, r1, r2
 80085c2:	b292      	uxth	r2, r2
 80085c4:	4611      	mov	r1, r2
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
      return;
 80085ca:	e052      	b.n	8008672 <HAL_UART_IRQHandler+0x34e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	1ad3      	subs	r3, r2, r3
 80085d8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80085de:	b29b      	uxth	r3, r3
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d048      	beq.n	8008676 <HAL_UART_IRQHandler+0x352>
          &&(nb_rx_data > 0U) )
 80085e4:	8a7b      	ldrh	r3, [r7, #18]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d045      	beq.n	8008676 <HAL_UART_IRQHandler+0x352>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	68da      	ldr	r2, [r3, #12]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80085f8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	695a      	ldr	r2, [r3, #20]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f022 0201 	bic.w	r2, r2, #1
 8008608:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2220      	movs	r2, #32
 800860e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	68da      	ldr	r2, [r3, #12]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f022 0210 	bic.w	r2, r2, #16
 8008626:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800862c:	8a7a      	ldrh	r2, [r7, #18]
 800862e:	4611      	mov	r1, r2
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
      return;
 8008634:	e01f      	b.n	8008676 <HAL_UART_IRQHandler+0x352>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800863c:	2b00      	cmp	r3, #0
 800863e:	d008      	beq.n	8008652 <HAL_UART_IRQHandler+0x32e>
 8008640:	6a3b      	ldr	r3, [r7, #32]
 8008642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008646:	2b00      	cmp	r3, #0
 8008648:	d003      	beq.n	8008652 <HAL_UART_IRQHandler+0x32e>
  {
    UART_Transmit_IT(huart);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 f95e 	bl	800890c <UART_Transmit_IT>
    return;
 8008650:	e012      	b.n	8008678 <HAL_UART_IRQHandler+0x354>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00d      	beq.n	8008678 <HAL_UART_IRQHandler+0x354>
 800865c:	6a3b      	ldr	r3, [r7, #32]
 800865e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008662:	2b00      	cmp	r3, #0
 8008664:	d008      	beq.n	8008678 <HAL_UART_IRQHandler+0x354>
  {
    UART_EndTransmit_IT(huart);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 f99f 	bl	80089aa <UART_EndTransmit_IT>
    return;
 800866c:	e004      	b.n	8008678 <HAL_UART_IRQHandler+0x354>
    return;
 800866e:	bf00      	nop
 8008670:	e002      	b.n	8008678 <HAL_UART_IRQHandler+0x354>
      return;
 8008672:	bf00      	nop
 8008674:	e000      	b.n	8008678 <HAL_UART_IRQHandler+0x354>
      return;
 8008676:	bf00      	nop
  }
}
 8008678:	3728      	adds	r7, #40	; 0x28
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	080088e3 	.word	0x080088e3

08008684 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800868c:	bf00      	nop
 800868e:	370c      	adds	r7, #12
 8008690:	46bd      	mov	sp, r7
 8008692:	bc80      	pop	{r7}
 8008694:	4770      	bx	lr

08008696 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008696:	b480      	push	{r7}
 8008698:	b083      	sub	sp, #12
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800869e:	bf00      	nop
 80086a0:	370c      	adds	r7, #12
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bc80      	pop	{r7}
 80086a6:	4770      	bx	lr

080086a8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80086b0:	bf00      	nop
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bc80      	pop	{r7}
 80086b8:	4770      	bx	lr

080086ba <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086ba:	b480      	push	{r7}
 80086bc:	b083      	sub	sp, #12
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80086c2:	bf00      	nop
 80086c4:	370c      	adds	r7, #12
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bc80      	pop	{r7}
 80086ca:	4770      	bx	lr

080086cc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80086d4:	bf00      	nop
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	bc80      	pop	{r7}
 80086dc:	4770      	bx	lr

080086de <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80086de:	b480      	push	{r7}
 80086e0:	b083      	sub	sp, #12
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80086e6:	bf00      	nop
 80086e8:	370c      	adds	r7, #12
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bc80      	pop	{r7}
 80086ee:	4770      	bx	lr

080086f0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80086f8:	bf00      	nop
 80086fa:	370c      	adds	r7, #12
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bc80      	pop	{r7}
 8008700:	4770      	bx	lr

08008702 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008702:	b480      	push	{r7}
 8008704:	b083      	sub	sp, #12
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
 800870a:	460b      	mov	r3, r1
 800870c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800870e:	bf00      	nop
 8008710:	370c      	adds	r7, #12
 8008712:	46bd      	mov	sp, r7
 8008714:	bc80      	pop	{r7}
 8008716:	4770      	bx	lr

08008718 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4a0f      	ldr	r2, [pc, #60]	; (8008760 <UART_InitCallbacksToDefault+0x48>)
 8008724:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a0e      	ldr	r2, [pc, #56]	; (8008764 <UART_InitCallbacksToDefault+0x4c>)
 800872a:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a0e      	ldr	r2, [pc, #56]	; (8008768 <UART_InitCallbacksToDefault+0x50>)
 8008730:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a0d      	ldr	r2, [pc, #52]	; (800876c <UART_InitCallbacksToDefault+0x54>)
 8008736:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4a0d      	ldr	r2, [pc, #52]	; (8008770 <UART_InitCallbacksToDefault+0x58>)
 800873c:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	4a0c      	ldr	r2, [pc, #48]	; (8008774 <UART_InitCallbacksToDefault+0x5c>)
 8008742:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	4a0c      	ldr	r2, [pc, #48]	; (8008778 <UART_InitCallbacksToDefault+0x60>)
 8008748:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4a0b      	ldr	r2, [pc, #44]	; (800877c <UART_InitCallbacksToDefault+0x64>)
 800874e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a0b      	ldr	r2, [pc, #44]	; (8008780 <UART_InitCallbacksToDefault+0x68>)
 8008754:	669a      	str	r2, [r3, #104]	; 0x68

}
 8008756:	bf00      	nop
 8008758:	370c      	adds	r7, #12
 800875a:	46bd      	mov	sp, r7
 800875c:	bc80      	pop	{r7}
 800875e:	4770      	bx	lr
 8008760:	08008697 	.word	0x08008697
 8008764:	08008685 	.word	0x08008685
 8008768:	080086a9 	.word	0x080086a9
 800876c:	08002111 	.word	0x08002111
 8008770:	080086bb 	.word	0x080086bb
 8008774:	080086cd 	.word	0x080086cd
 8008778:	080086df 	.word	0x080086df
 800877c:	080086f1 	.word	0x080086f1
 8008780:	08008703 	.word	0x08008703

08008784 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	603b      	str	r3, [r7, #0]
 8008790:	4613      	mov	r3, r2
 8008792:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008794:	e02c      	b.n	80087f0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800879c:	d028      	beq.n	80087f0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d007      	beq.n	80087b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80087a4:	f7fa f9aa 	bl	8002afc <HAL_GetTick>
 80087a8:	4602      	mov	r2, r0
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	1ad3      	subs	r3, r2, r3
 80087ae:	69ba      	ldr	r2, [r7, #24]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d21d      	bcs.n	80087f0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	68da      	ldr	r2, [r3, #12]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80087c2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	695a      	ldr	r2, [r3, #20]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f022 0201 	bic.w	r2, r2, #1
 80087d2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2220      	movs	r2, #32
 80087d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2220      	movs	r2, #32
 80087e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80087ec:	2303      	movs	r3, #3
 80087ee:	e00f      	b.n	8008810 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	4013      	ands	r3, r2
 80087fa:	68ba      	ldr	r2, [r7, #8]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	bf0c      	ite	eq
 8008800:	2301      	moveq	r3, #1
 8008802:	2300      	movne	r3, #0
 8008804:	b2db      	uxtb	r3, r3
 8008806:	461a      	mov	r2, r3
 8008808:	79fb      	ldrb	r3, [r7, #7]
 800880a:	429a      	cmp	r2, r3
 800880c:	d0c3      	beq.n	8008796 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800880e:	2300      	movs	r3, #0
}
 8008810:	4618      	mov	r0, r3
 8008812:	3710      	adds	r7, #16
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	4613      	mov	r3, r2
 8008824:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	68ba      	ldr	r2, [r7, #8]
 800882a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	88fa      	ldrh	r2, [r7, #6]
 8008830:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	88fa      	ldrh	r2, [r7, #6]
 8008836:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2200      	movs	r2, #0
 800883c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2222      	movs	r2, #34	; 0x22
 8008842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2200      	movs	r2, #0
 800884a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68da      	ldr	r2, [r3, #12]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800885c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	695a      	ldr	r2, [r3, #20]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f042 0201 	orr.w	r2, r2, #1
 800886c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	68da      	ldr	r2, [r3, #12]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f042 0220 	orr.w	r2, r2, #32
 800887c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3714      	adds	r7, #20
 8008884:	46bd      	mov	sp, r7
 8008886:	bc80      	pop	{r7}
 8008888:	4770      	bx	lr

0800888a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800888a:	b480      	push	{r7}
 800888c:	b083      	sub	sp, #12
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68da      	ldr	r2, [r3, #12]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80088a0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	695a      	ldr	r2, [r3, #20]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f022 0201 	bic.w	r2, r2, #1
 80088b0:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d107      	bne.n	80088ca <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68da      	ldr	r2, [r3, #12]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f022 0210 	bic.w	r2, r2, #16
 80088c8:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2220      	movs	r2, #32
 80088ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80088d8:	bf00      	nop
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	bc80      	pop	{r7}
 80088e0:	4770      	bx	lr

080088e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b084      	sub	sp, #16
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2200      	movs	r2, #0
 80088f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2200      	movs	r2, #0
 80088fa:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008904:	bf00      	nop
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800891a:	b2db      	uxtb	r3, r3
 800891c:	2b21      	cmp	r3, #33	; 0x21
 800891e:	d13e      	bne.n	800899e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008928:	d114      	bne.n	8008954 <UART_Transmit_IT+0x48>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	691b      	ldr	r3, [r3, #16]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d110      	bne.n	8008954 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a1b      	ldr	r3, [r3, #32]
 8008936:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	881b      	ldrh	r3, [r3, #0]
 800893c:	461a      	mov	r2, r3
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008946:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6a1b      	ldr	r3, [r3, #32]
 800894c:	1c9a      	adds	r2, r3, #2
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	621a      	str	r2, [r3, #32]
 8008952:	e008      	b.n	8008966 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6a1b      	ldr	r3, [r3, #32]
 8008958:	1c59      	adds	r1, r3, #1
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	6211      	str	r1, [r2, #32]
 800895e:	781a      	ldrb	r2, [r3, #0]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800896a:	b29b      	uxth	r3, r3
 800896c:	3b01      	subs	r3, #1
 800896e:	b29b      	uxth	r3, r3
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	4619      	mov	r1, r3
 8008974:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008976:	2b00      	cmp	r3, #0
 8008978:	d10f      	bne.n	800899a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	68da      	ldr	r2, [r3, #12]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008988:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68da      	ldr	r2, [r3, #12]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008998:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800899a:	2300      	movs	r3, #0
 800899c:	e000      	b.n	80089a0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800899e:	2302      	movs	r3, #2
  }
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3714      	adds	r7, #20
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bc80      	pop	{r7}
 80089a8:	4770      	bx	lr

080089aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b082      	sub	sp, #8
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	68da      	ldr	r2, [r3, #12]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2220      	movs	r2, #32
 80089c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80089d2:	2300      	movs	r3, #0
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3708      	adds	r7, #8
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b086      	sub	sp, #24
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	2b22      	cmp	r3, #34	; 0x22
 80089ee:	f040 809b 	bne.w	8008b28 <UART_Receive_IT+0x14c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089fa:	d117      	bne.n	8008a2c <UART_Receive_IT+0x50>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d113      	bne.n	8008a2c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008a04:	2300      	movs	r3, #0
 8008a06:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a0c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a1a:	b29a      	uxth	r2, r3
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a24:	1c9a      	adds	r2, r3, #2
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	629a      	str	r2, [r3, #40]	; 0x28
 8008a2a:	e026      	b.n	8008a7a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a30:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8008a32:	2300      	movs	r3, #0
 8008a34:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a3e:	d007      	beq.n	8008a50 <UART_Receive_IT+0x74>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d10a      	bne.n	8008a5e <UART_Receive_IT+0x82>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d106      	bne.n	8008a5e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	b2da      	uxtb	r2, r3
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	701a      	strb	r2, [r3, #0]
 8008a5c:	e008      	b.n	8008a70 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a6a:	b2da      	uxtb	r2, r3
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a74:	1c5a      	adds	r2, r3, #1
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	3b01      	subs	r3, #1
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	687a      	ldr	r2, [r7, #4]
 8008a86:	4619      	mov	r1, r3
 8008a88:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d14a      	bne.n	8008b24 <UART_Receive_IT+0x148>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	68da      	ldr	r2, [r3, #12]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f022 0220 	bic.w	r2, r2, #32
 8008a9c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	68da      	ldr	r2, [r3, #12]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008aac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	695a      	ldr	r2, [r3, #20]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f022 0201 	bic.w	r2, r2, #1
 8008abc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2220      	movs	r2, #32
 8008ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d124      	bne.n	8008b18 <UART_Receive_IT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	68da      	ldr	r2, [r3, #12]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f022 0210 	bic.w	r2, r2, #16
 8008ae2:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f003 0310 	and.w	r3, r3, #16
 8008aee:	2b10      	cmp	r3, #16
 8008af0:	d10a      	bne.n	8008b08 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008af2:	2300      	movs	r3, #0
 8008af4:	60fb      	str	r3, [r7, #12]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	60fb      	str	r3, [r7, #12]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	60fb      	str	r3, [r7, #12]
 8008b06:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8008b10:	4611      	mov	r1, r2
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	4798      	blx	r3
 8008b16:	e003      	b.n	8008b20 <UART_Receive_IT+0x144>
      else
      {
       /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	4798      	blx	r3
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008b20:	2300      	movs	r3, #0
 8008b22:	e002      	b.n	8008b2a <UART_Receive_IT+0x14e>
    }
    return HAL_OK;
 8008b24:	2300      	movs	r3, #0
 8008b26:	e000      	b.n	8008b2a <UART_Receive_IT+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8008b28:	2302      	movs	r3, #2
  }
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3718      	adds	r7, #24
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
	...

08008b34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	4a5f      	ldr	r2, [pc, #380]	; (8008cc0 <UART_SetConfig+0x18c>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d904      	bls.n	8008b50 <UART_SetConfig+0x1c>
 8008b46:	f640 6153 	movw	r1, #3667	; 0xe53
 8008b4a:	485e      	ldr	r0, [pc, #376]	; (8008cc4 <UART_SetConfig+0x190>)
 8008b4c:	f7f9 fb06 	bl	800215c <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d009      	beq.n	8008b6c <UART_SetConfig+0x38>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b60:	d004      	beq.n	8008b6c <UART_SetConfig+0x38>
 8008b62:	f640 6154 	movw	r1, #3668	; 0xe54
 8008b66:	4857      	ldr	r0, [pc, #348]	; (8008cc4 <UART_SetConfig+0x190>)
 8008b68:	f7f9 faf8 	bl	800215c <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d00e      	beq.n	8008b92 <UART_SetConfig+0x5e>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b7c:	d009      	beq.n	8008b92 <UART_SetConfig+0x5e>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	691b      	ldr	r3, [r3, #16]
 8008b82:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008b86:	d004      	beq.n	8008b92 <UART_SetConfig+0x5e>
 8008b88:	f640 6155 	movw	r1, #3669	; 0xe55
 8008b8c:	484d      	ldr	r0, [pc, #308]	; (8008cc4 <UART_SetConfig+0x190>)
 8008b8e:	f7f9 fae5 	bl	800215c <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	695a      	ldr	r2, [r3, #20]
 8008b96:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8008b9a:	4013      	ands	r3, r2
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d103      	bne.n	8008ba8 <UART_SetConfig+0x74>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	695b      	ldr	r3, [r3, #20]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d104      	bne.n	8008bb2 <UART_SetConfig+0x7e>
 8008ba8:	f640 6156 	movw	r1, #3670	; 0xe56
 8008bac:	4845      	ldr	r0, [pc, #276]	; (8008cc4 <UART_SetConfig+0x190>)
 8008bae:	f7f9 fad5 	bl	800215c <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	691b      	ldr	r3, [r3, #16]
 8008bb8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	68da      	ldr	r2, [r3, #12]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	430a      	orrs	r2, r1
 8008bc6:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	689a      	ldr	r2, [r3, #8]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	691b      	ldr	r3, [r3, #16]
 8008bd0:	431a      	orrs	r2, r3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	695b      	ldr	r3, [r3, #20]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008be4:	f023 030c 	bic.w	r3, r3, #12
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	6812      	ldr	r2, [r2, #0]
 8008bec:	68b9      	ldr	r1, [r7, #8]
 8008bee:	430b      	orrs	r3, r1
 8008bf0:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	695b      	ldr	r3, [r3, #20]
 8008bf8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	699a      	ldr	r2, [r3, #24]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	430a      	orrs	r2, r1
 8008c06:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a2e      	ldr	r2, [pc, #184]	; (8008cc8 <UART_SetConfig+0x194>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d103      	bne.n	8008c1a <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008c12:	f7fb feaf 	bl	8004974 <HAL_RCC_GetPCLK2Freq>
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	e002      	b.n	8008c20 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008c1a:	f7fb fe97 	bl	800494c <HAL_RCC_GetPCLK1Freq>
 8008c1e:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008c20:	68fa      	ldr	r2, [r7, #12]
 8008c22:	4613      	mov	r3, r2
 8008c24:	009b      	lsls	r3, r3, #2
 8008c26:	4413      	add	r3, r2
 8008c28:	009a      	lsls	r2, r3, #2
 8008c2a:	441a      	add	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c36:	4a25      	ldr	r2, [pc, #148]	; (8008ccc <UART_SetConfig+0x198>)
 8008c38:	fba2 2303 	umull	r2, r3, r2, r3
 8008c3c:	095b      	lsrs	r3, r3, #5
 8008c3e:	0119      	lsls	r1, r3, #4
 8008c40:	68fa      	ldr	r2, [r7, #12]
 8008c42:	4613      	mov	r3, r2
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	4413      	add	r3, r2
 8008c48:	009a      	lsls	r2, r3, #2
 8008c4a:	441a      	add	r2, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	009b      	lsls	r3, r3, #2
 8008c52:	fbb2 f2f3 	udiv	r2, r2, r3
 8008c56:	4b1d      	ldr	r3, [pc, #116]	; (8008ccc <UART_SetConfig+0x198>)
 8008c58:	fba3 0302 	umull	r0, r3, r3, r2
 8008c5c:	095b      	lsrs	r3, r3, #5
 8008c5e:	2064      	movs	r0, #100	; 0x64
 8008c60:	fb00 f303 	mul.w	r3, r0, r3
 8008c64:	1ad3      	subs	r3, r2, r3
 8008c66:	011b      	lsls	r3, r3, #4
 8008c68:	3332      	adds	r3, #50	; 0x32
 8008c6a:	4a18      	ldr	r2, [pc, #96]	; (8008ccc <UART_SetConfig+0x198>)
 8008c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8008c70:	095b      	lsrs	r3, r3, #5
 8008c72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c76:	4419      	add	r1, r3
 8008c78:	68fa      	ldr	r2, [r7, #12]
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	4413      	add	r3, r2
 8008c80:	009a      	lsls	r2, r3, #2
 8008c82:	441a      	add	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8008c8e:	4b0f      	ldr	r3, [pc, #60]	; (8008ccc <UART_SetConfig+0x198>)
 8008c90:	fba3 0302 	umull	r0, r3, r3, r2
 8008c94:	095b      	lsrs	r3, r3, #5
 8008c96:	2064      	movs	r0, #100	; 0x64
 8008c98:	fb00 f303 	mul.w	r3, r0, r3
 8008c9c:	1ad3      	subs	r3, r2, r3
 8008c9e:	011b      	lsls	r3, r3, #4
 8008ca0:	3332      	adds	r3, #50	; 0x32
 8008ca2:	4a0a      	ldr	r2, [pc, #40]	; (8008ccc <UART_SetConfig+0x198>)
 8008ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ca8:	095b      	lsrs	r3, r3, #5
 8008caa:	f003 020f 	and.w	r2, r3, #15
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	440a      	add	r2, r1
 8008cb4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008cb6:	bf00      	nop
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	0044aa20 	.word	0x0044aa20
 8008cc4:	0800ed3c 	.word	0x0800ed3c
 8008cc8:	40013800 	.word	0x40013800
 8008ccc:	51eb851f 	.word	0x51eb851f

08008cd0 <BAT_init>:
#include "log.h"

static ADC_HandleTypeDef *g_BAT_adcHandle;

void BAT_init(ADC_HandleTypeDef *p_adcHandle)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing battery check");
 8008cd8:	4905      	ldr	r1, [pc, #20]	; (8008cf0 <BAT_init+0x20>)
 8008cda:	2001      	movs	r0, #1
 8008cdc:	f001 fe30 	bl	800a940 <LOG_log>

  g_BAT_adcHandle = p_adcHandle;
 8008ce0:	4a04      	ldr	r2, [pc, #16]	; (8008cf4 <BAT_init+0x24>)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6013      	str	r3, [r2, #0]

  return;
 8008ce6:	bf00      	nop
}
 8008ce8:	3708      	adds	r7, #8
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop
 8008cf0:	0800ed78 	.word	0x0800ed78
 8008cf4:	20000224 	.word	0x20000224

08008cf8 <BAT_update>:

void BAT_update(uint32_t *p_voltageInMv)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  uint32_t l_adcRawData;
  float    l_voltageInV;

  l_adcRawData = HAL_ADC_GetValue(g_BAT_adcHandle);
 8008d00:	4b18      	ldr	r3, [pc, #96]	; (8008d64 <BAT_update+0x6c>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4618      	mov	r0, r3
 8008d06:	f7fa f8c9 	bl	8002e9c <HAL_ADC_GetValue>
 8008d0a:	60f8      	str	r0, [r7, #12]

  /* Apply conversion based on STM32 reference voltage & resolution */
  l_voltageInV  = (l_adcRawData * 3.30f ) / 4096.0f;
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f7f7 ffdd 	bl	8000ccc <__aeabi_ui2f>
 8008d12:	4603      	mov	r3, r0
 8008d14:	4914      	ldr	r1, [pc, #80]	; (8008d68 <BAT_update+0x70>)
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7f8 f830 	bl	8000d7c <__aeabi_fmul>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7f8 f8de 	bl	8000ee4 <__aeabi_fdiv>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	60bb      	str	r3, [r7, #8]

  /* Consider voltage divider used between the battery & the ADC input */
  l_voltageInV *= 11.0f;
 8008d2c:	490f      	ldr	r1, [pc, #60]	; (8008d6c <BAT_update+0x74>)
 8008d2e:	68b8      	ldr	r0, [r7, #8]
 8008d30:	f7f8 f824 	bl	8000d7c <__aeabi_fmul>
 8008d34:	4603      	mov	r3, r0
 8008d36:	60bb      	str	r3, [r7, #8]

  *p_voltageInMv = (uint32_t)(l_voltageInV * 1000.0f);
 8008d38:	490d      	ldr	r1, [pc, #52]	; (8008d70 <BAT_update+0x78>)
 8008d3a:	68b8      	ldr	r0, [r7, #8]
 8008d3c:	f7f8 f81e 	bl	8000d7c <__aeabi_fmul>
 8008d40:	4603      	mov	r3, r0
 8008d42:	4618      	mov	r0, r3
 8008d44:	f7f8 f990 	bl	8001068 <__aeabi_f2uiz>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	601a      	str	r2, [r3, #0]

  LOG_debug("Battery level: %u mV", *p_voltageInMv);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	461a      	mov	r2, r3
 8008d54:	4907      	ldr	r1, [pc, #28]	; (8008d74 <BAT_update+0x7c>)
 8008d56:	2000      	movs	r0, #0
 8008d58:	f001 fdf2 	bl	800a940 <LOG_log>

  return;
 8008d5c:	bf00      	nop
}
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	20000224 	.word	0x20000224
 8008d68:	40533333 	.word	0x40533333
 8008d6c:	41300000 	.word	0x41300000
 8008d70:	447a0000 	.word	0x447a0000
 8008d74:	0800ed94 	.word	0x0800ed94

08008d78 <BLU_sendCommand>:
static void         BLU_sendCommand(uint8_t  p_command);
static void         BLU_readData   (uint8_t *p_buffer );
static T_BLU_BUTTON BLU_getButton  (uint8_t *p_buffer );

static void BLU_sendCommand(uint8_t p_command)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	4603      	mov	r3, r0
 8008d80:	71fb      	strb	r3, [r7, #7]
  volatile uint16_t l_bitValue;

  for (l_bitValue = 0x01; l_bitValue < 0x0100; l_bitValue <<= 1)
 8008d82:	2301      	movs	r3, #1
 8008d84:	81fb      	strh	r3, [r7, #14]
 8008d86:	e030      	b.n	8008dea <BLU_sendCommand+0x72>
  {
    if ((l_bitValue & p_command) != 0)
 8008d88:	89fb      	ldrh	r3, [r7, #14]
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	79fb      	ldrb	r3, [r7, #7]
 8008d90:	4013      	ands	r3, r2
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d006      	beq.n	8008da4 <BLU_sendCommand+0x2c>
    {
      SET_BIT(GPIOC->ODR, BLUETOOTH_SPI_CMD_Pin);
 8008d96:	4b1a      	ldr	r3, [pc, #104]	; (8008e00 <BLU_sendCommand+0x88>)
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	4a19      	ldr	r2, [pc, #100]	; (8008e00 <BLU_sendCommand+0x88>)
 8008d9c:	f043 0302 	orr.w	r3, r3, #2
 8008da0:	60d3      	str	r3, [r2, #12]
 8008da2:	e005      	b.n	8008db0 <BLU_sendCommand+0x38>
    }
    else
    {
      CLEAR_BIT(GPIOC->ODR, BLUETOOTH_SPI_CMD_Pin);
 8008da4:	4b16      	ldr	r3, [pc, #88]	; (8008e00 <BLU_sendCommand+0x88>)
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	4a15      	ldr	r2, [pc, #84]	; (8008e00 <BLU_sendCommand+0x88>)
 8008daa:	f023 0302 	bic.w	r3, r3, #2
 8008dae:	60d3      	str	r3, [r2, #12]
    }

    SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 8008db0:	4b14      	ldr	r3, [pc, #80]	; (8008e04 <BLU_sendCommand+0x8c>)
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	4a13      	ldr	r2, [pc, #76]	; (8008e04 <BLU_sendCommand+0x8c>)
 8008db6:	f043 0310 	orr.w	r3, r3, #16
 8008dba:	60d3      	str	r3, [r2, #12]
    UTI_delayUs(5);
 8008dbc:	2005      	movs	r0, #5
 8008dbe:	f002 fac1 	bl	800b344 <UTI_delayUs>
    CLEAR_BIT(GPIOA->ODR, BLUETOOTH_SPI_CLK_Pin);
 8008dc2:	4b10      	ldr	r3, [pc, #64]	; (8008e04 <BLU_sendCommand+0x8c>)
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	4a0f      	ldr	r2, [pc, #60]	; (8008e04 <BLU_sendCommand+0x8c>)
 8008dc8:	f023 0310 	bic.w	r3, r3, #16
 8008dcc:	60d3      	str	r3, [r2, #12]
    UTI_delayUs(5);
 8008dce:	2005      	movs	r0, #5
 8008dd0:	f002 fab8 	bl	800b344 <UTI_delayUs>
    SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 8008dd4:	4b0b      	ldr	r3, [pc, #44]	; (8008e04 <BLU_sendCommand+0x8c>)
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	4a0a      	ldr	r2, [pc, #40]	; (8008e04 <BLU_sendCommand+0x8c>)
 8008dda:	f043 0310 	orr.w	r3, r3, #16
 8008dde:	60d3      	str	r3, [r2, #12]
  for (l_bitValue = 0x01; l_bitValue < 0x0100; l_bitValue <<= 1)
 8008de0:	89fb      	ldrh	r3, [r7, #14]
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	005b      	lsls	r3, r3, #1
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	81fb      	strh	r3, [r7, #14]
 8008dea:	89fb      	ldrh	r3, [r7, #14]
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	2bff      	cmp	r3, #255	; 0xff
 8008df0:	d9ca      	bls.n	8008d88 <BLU_sendCommand+0x10>
  }
  UTI_delayUs(16);
 8008df2:	2010      	movs	r0, #16
 8008df4:	f002 faa6 	bl	800b344 <UTI_delayUs>

  return;
 8008df8:	bf00      	nop
}
 8008dfa:	3710      	adds	r7, #16
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}
 8008e00:	40011000 	.word	0x40011000
 8008e04:	40010800 	.word	0x40010800

08008e08 <BLU_readData>:

static void BLU_readData(uint8_t *p_buffer)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  volatile uint8_t  l_index;
  volatile uint16_t l_bitValue;

  /* Reset buffer */
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 8008e10:	2300      	movs	r3, #0
 8008e12:	73fb      	strb	r3, [r7, #15]
 8008e14:	e00b      	b.n	8008e2e <BLU_readData+0x26>
  {
    p_buffer[l_index] = 0x00;
 8008e16:	7bfb      	ldrb	r3, [r7, #15]
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4413      	add	r3, r2
 8008e20:	2200      	movs	r2, #0
 8008e22:	701a      	strb	r2, [r3, #0]
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 8008e24:	7bfb      	ldrb	r3, [r7, #15]
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	3301      	adds	r3, #1
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	73fb      	strb	r3, [r7, #15]
 8008e2e:	7bfb      	ldrb	r3, [r7, #15]
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	2b06      	cmp	r3, #6
 8008e34:	d9ef      	bls.n	8008e16 <BLU_readData+0xe>
  }

  CLEAR_BIT(GPIOC->ODR, BLUETOOTH_SPI_CS_Pin);
 8008e36:	4b2e      	ldr	r3, [pc, #184]	; (8008ef0 <BLU_readData+0xe8>)
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	4a2d      	ldr	r2, [pc, #180]	; (8008ef0 <BLU_readData+0xe8>)
 8008e3c:	f023 0308 	bic.w	r3, r3, #8
 8008e40:	60d3      	str	r3, [r2, #12]

  BLU_sendCommand(0x01);
 8008e42:	2001      	movs	r0, #1
 8008e44:	f7ff ff98 	bl	8008d78 <BLU_sendCommand>
  BLU_sendCommand(0x42);
 8008e48:	2042      	movs	r0, #66	; 0x42
 8008e4a:	f7ff ff95 	bl	8008d78 <BLU_sendCommand>

  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 8008e4e:	2300      	movs	r3, #0
 8008e50:	73fb      	strb	r3, [r7, #15]
 8008e52:	e03f      	b.n	8008ed4 <BLU_readData+0xcc>
  {
    for (l_bitValue = 0x01; l_bitValue < 0x100; l_bitValue <<= 1)
 8008e54:	2301      	movs	r3, #1
 8008e56:	81bb      	strh	r3, [r7, #12]
 8008e58:	e030      	b.n	8008ebc <BLU_readData+0xb4>
    {
      SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 8008e5a:	4b26      	ldr	r3, [pc, #152]	; (8008ef4 <BLU_readData+0xec>)
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	4a25      	ldr	r2, [pc, #148]	; (8008ef4 <BLU_readData+0xec>)
 8008e60:	f043 0310 	orr.w	r3, r3, #16
 8008e64:	60d3      	str	r3, [r2, #12]
      UTI_delayUs(5);
 8008e66:	2005      	movs	r0, #5
 8008e68:	f002 fa6c 	bl	800b344 <UTI_delayUs>
      CLEAR_BIT(GPIOA->ODR, BLUETOOTH_SPI_CLK_Pin);
 8008e6c:	4b21      	ldr	r3, [pc, #132]	; (8008ef4 <BLU_readData+0xec>)
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	4a20      	ldr	r2, [pc, #128]	; (8008ef4 <BLU_readData+0xec>)
 8008e72:	f023 0310 	bic.w	r3, r3, #16
 8008e76:	60d3      	str	r3, [r2, #12]
      UTI_delayUs(5);
 8008e78:	2005      	movs	r0, #5
 8008e7a:	f002 fa63 	bl	800b344 <UTI_delayUs>
      SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 8008e7e:	4b1d      	ldr	r3, [pc, #116]	; (8008ef4 <BLU_readData+0xec>)
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	4a1c      	ldr	r2, [pc, #112]	; (8008ef4 <BLU_readData+0xec>)
 8008e84:	f043 0310 	orr.w	r3, r3, #16
 8008e88:	60d3      	str	r3, [r2, #12]

      if (READ_BIT(GPIOC->IDR, BLUETOOTH_SPI_DAT_Pin) != GPIO_PIN_RESET)
 8008e8a:	4b19      	ldr	r3, [pc, #100]	; (8008ef0 <BLU_readData+0xe8>)
 8008e8c:	689b      	ldr	r3, [r3, #8]
 8008e8e:	f003 0304 	and.w	r3, r3, #4
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00d      	beq.n	8008eb2 <BLU_readData+0xaa>
      {
        p_buffer[l_index] |= l_bitValue;
 8008e96:	89bb      	ldrh	r3, [r7, #12]
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	7bfb      	ldrb	r3, [r7, #15]
 8008e9c:	b2d8      	uxtb	r0, r3
 8008e9e:	4601      	mov	r1, r0
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	440b      	add	r3, r1
 8008ea4:	7819      	ldrb	r1, [r3, #0]
 8008ea6:	b2d2      	uxtb	r2, r2
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4403      	add	r3, r0
 8008eac:	430a      	orrs	r2, r1
 8008eae:	b2d2      	uxtb	r2, r2
 8008eb0:	701a      	strb	r2, [r3, #0]
    for (l_bitValue = 0x01; l_bitValue < 0x100; l_bitValue <<= 1)
 8008eb2:	89bb      	ldrh	r3, [r7, #12]
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	005b      	lsls	r3, r3, #1
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	81bb      	strh	r3, [r7, #12]
 8008ebc:	89bb      	ldrh	r3, [r7, #12]
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	2bff      	cmp	r3, #255	; 0xff
 8008ec2:	d9ca      	bls.n	8008e5a <BLU_readData+0x52>
      else
      {
        ; /* Nothing to do */
      }
    }
      UTI_delayUs(16);
 8008ec4:	2010      	movs	r0, #16
 8008ec6:	f002 fa3d 	bl	800b344 <UTI_delayUs>
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 8008eca:	7bfb      	ldrb	r3, [r7, #15]
 8008ecc:	b2db      	uxtb	r3, r3
 8008ece:	3301      	adds	r3, #1
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	73fb      	strb	r3, [r7, #15]
 8008ed4:	7bfb      	ldrb	r3, [r7, #15]
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	2b06      	cmp	r3, #6
 8008eda:	d9bb      	bls.n	8008e54 <BLU_readData+0x4c>
  }

  SET_BIT(GPIOC->ODR, BLUETOOTH_SPI_CS_Pin);
 8008edc:	4b04      	ldr	r3, [pc, #16]	; (8008ef0 <BLU_readData+0xe8>)
 8008ede:	68db      	ldr	r3, [r3, #12]
 8008ee0:	4a03      	ldr	r2, [pc, #12]	; (8008ef0 <BLU_readData+0xe8>)
 8008ee2:	f043 0308 	orr.w	r3, r3, #8
 8008ee6:	60d3      	str	r3, [r2, #12]

  return;
 8008ee8:	bf00      	nop
}
 8008eea:	3710      	adds	r7, #16
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	40011000 	.word	0x40011000
 8008ef4:	40010800 	.word	0x40010800

08008ef8 <BLU_getButton>:

static T_BLU_BUTTON BLU_getButton(uint8_t *p_buffer)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b085      	sub	sp, #20
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  uint16_t l_buttonRawValue;
  uint8_t  l_index;

  l_buttonRawValue = (p_buffer[BLU_BUTTON_HIGH_OFFSET] << 8) | p_buffer[BLU_BUTTON_LOW_OFFSET];
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	3302      	adds	r3, #2
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	021b      	lsls	r3, r3, #8
 8008f08:	b21a      	sxth	r2, r3
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	b21b      	sxth	r3, r3
 8008f12:	4313      	orrs	r3, r2
 8008f14:	b21b      	sxth	r3, r3
 8008f16:	81bb      	strh	r3, [r7, #12]

  /* Ignore BLU_BUTTON_NONE value as it is not directly coded in raw data */
  for (l_index = BLU_BUTTON_SELECT; l_index < BLU_BUTTON_COUNT_VALUE; l_index++)
 8008f18:	2301      	movs	r3, #1
 8008f1a:	73fb      	strb	r3, [r7, #15]
 8008f1c:	e00d      	b.n	8008f3a <BLU_getButton+0x42>
  {
    /* Stop decoding button data on 1st match (do not deal with multiple presses case) */
    if ((l_buttonRawValue & (1 << (l_index - 1))) == 0)
 8008f1e:	89ba      	ldrh	r2, [r7, #12]
 8008f20:	7bfb      	ldrb	r3, [r7, #15]
 8008f22:	3b01      	subs	r3, #1
 8008f24:	fa42 f303 	asr.w	r3, r2, r3
 8008f28:	f003 0301 	and.w	r3, r3, #1
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d101      	bne.n	8008f34 <BLU_getButton+0x3c>
    {
      return l_index;
 8008f30:	7bfb      	ldrb	r3, [r7, #15]
 8008f32:	e006      	b.n	8008f42 <BLU_getButton+0x4a>
  for (l_index = BLU_BUTTON_SELECT; l_index < BLU_BUTTON_COUNT_VALUE; l_index++)
 8008f34:	7bfb      	ldrb	r3, [r7, #15]
 8008f36:	3301      	adds	r3, #1
 8008f38:	73fb      	strb	r3, [r7, #15]
 8008f3a:	7bfb      	ldrb	r3, [r7, #15]
 8008f3c:	2b10      	cmp	r3, #16
 8008f3e:	d9ee      	bls.n	8008f1e <BLU_getButton+0x26>
    {
      ; /* Nothing to do */
    }
  }

  return BLU_BUTTON_NONE;
 8008f40:	2300      	movs	r3, #0
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3714      	adds	r7, #20
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bc80      	pop	{r7}
 8008f4a:	4770      	bx	lr

08008f4c <BLU_init>:

void BLU_init(void)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	af00      	add	r7, sp, #0
  LOG_info("Initializing bluetooth control");
 8008f50:	4904      	ldr	r1, [pc, #16]	; (8008f64 <BLU_init+0x18>)
 8008f52:	2001      	movs	r0, #1
 8008f54:	f001 fcf4 	bl	800a940 <LOG_log>

  BLU_initData(&g_BLU_lastData);
 8008f58:	4803      	ldr	r0, [pc, #12]	; (8008f68 <BLU_init+0x1c>)
 8008f5a:	f000 f807 	bl	8008f6c <BLU_initData>

  return;
 8008f5e:	bf00      	nop
}
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	0800edac 	.word	0x0800edac
 8008f68:	20000228 	.word	0x20000228

08008f6c <BLU_initData>:

void BLU_initData(T_BLU_Data *p_data)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  p_data->leftX  = BLU_DATA_DEFAUT_DIRECTION;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2280      	movs	r2, #128	; 0x80
 8008f78:	601a      	str	r2, [r3, #0]
  p_data->leftY  = BLU_DATA_DEFAUT_DIRECTION;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2280      	movs	r2, #128	; 0x80
 8008f7e:	605a      	str	r2, [r3, #4]
  p_data->rightX = BLU_DATA_DEFAUT_DIRECTION;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2280      	movs	r2, #128	; 0x80
 8008f84:	609a      	str	r2, [r3, #8]
  p_data->rightY = BLU_DATA_DEFAUT_DIRECTION;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2280      	movs	r2, #128	; 0x80
 8008f8a:	60da      	str	r2, [r3, #12]
  p_data->button = BLU_BUTTON_NONE;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	741a      	strb	r2, [r3, #16]

  return;
 8008f92:	bf00      	nop
}
 8008f94:	370c      	adds	r7, #12
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bc80      	pop	{r7}
 8008f9a:	4770      	bx	lr

08008f9c <BLU_receiveData>:

void BLU_receiveData(T_BLU_Data *p_data)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b08c      	sub	sp, #48	; 0x30
 8008fa0:	af02      	add	r7, sp, #8
 8008fa2:	6078      	str	r0, [r7, #4]
  uint8_t    l_buffer[BLU_DATA_BUFFER_LENGTH];
  T_BLU_Data l_readData;

  /* Read raw data */
  BLU_readData(l_buffer);
 8008fa4:	f107 0320 	add.w	r3, r7, #32
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f7ff ff2d 	bl	8008e08 <BLU_readData>

  /* Start and decode raw data */
  l_readData.leftX  = l_buffer[BLU_LEFT_X_OFFSET ];
 8008fae:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008fb2:	60fb      	str	r3, [r7, #12]
  l_readData.leftY  = l_buffer[BLU_LEFT_Y_OFFSET ];
 8008fb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008fb8:	613b      	str	r3, [r7, #16]
  l_readData.rightX = l_buffer[BLU_RIGHT_X_OFFSET];
 8008fba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008fbe:	617b      	str	r3, [r7, #20]
  l_readData.rightY = l_buffer[BLU_RIGHT_Y_OFFSET];
 8008fc0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008fc4:	61bb      	str	r3, [r7, #24]
  l_readData.button = BLU_getButton(l_buffer);
 8008fc6:	f107 0320 	add.w	r3, r7, #32
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7ff ff94 	bl	8008ef8 <BLU_getButton>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	773b      	strb	r3, [r7, #28]

  /* Deal with startup condition, while read data is not valid yet */
  if  ((l_readData.leftX == 255 && l_readData.leftY == 255 && l_readData.rightX == 255 && l_readData.rightY ==255)
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2bff      	cmp	r3, #255	; 0xff
 8008fd8:	d108      	bne.n	8008fec <BLU_receiveData+0x50>
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	2bff      	cmp	r3, #255	; 0xff
 8008fde:	d105      	bne.n	8008fec <BLU_receiveData+0x50>
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	2bff      	cmp	r3, #255	; 0xff
 8008fe4:	d102      	bne.n	8008fec <BLU_receiveData+0x50>
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	2bff      	cmp	r3, #255	; 0xff
 8008fea:	d00b      	beq.n	8009004 <BLU_receiveData+0x68>
    || (l_readData.leftX ==   0 && l_readData.leftY ==   0 && l_readData.rightX ==   0 && l_readData.rightY ==  0))
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d10e      	bne.n	8009010 <BLU_receiveData+0x74>
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d10b      	bne.n	8009010 <BLU_receiveData+0x74>
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d108      	bne.n	8009010 <BLU_receiveData+0x74>
 8008ffe:	69bb      	ldr	r3, [r7, #24]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d105      	bne.n	8009010 <BLU_receiveData+0x74>
  {
    BLU_initData(&l_readData);
 8009004:	f107 030c 	add.w	r3, r7, #12
 8009008:	4618      	mov	r0, r3
 800900a:	f7ff ffaf 	bl	8008f6c <BLU_initData>
 800900e:	e053      	b.n	80090b8 <BLU_receiveData+0x11c>
  }
  /* Use a confirmation mechanism, on 2 cycles, as glitches are observed */
  else if ((l_readData.leftX  == g_BLU_lastData.leftX) &&
 8009010:	68fa      	ldr	r2, [r7, #12]
 8009012:	4b33      	ldr	r3, [pc, #204]	; (80090e0 <BLU_receiveData+0x144>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	429a      	cmp	r2, r3
 8009018:	d14e      	bne.n	80090b8 <BLU_receiveData+0x11c>
           (l_readData.leftY  == g_BLU_lastData.leftY) &&
 800901a:	693a      	ldr	r2, [r7, #16]
 800901c:	4b30      	ldr	r3, [pc, #192]	; (80090e0 <BLU_receiveData+0x144>)
 800901e:	685b      	ldr	r3, [r3, #4]
  else if ((l_readData.leftX  == g_BLU_lastData.leftX) &&
 8009020:	429a      	cmp	r2, r3
 8009022:	d149      	bne.n	80090b8 <BLU_receiveData+0x11c>
           (l_readData.rightX == g_BLU_lastData.rightX) &&
 8009024:	697a      	ldr	r2, [r7, #20]
 8009026:	4b2e      	ldr	r3, [pc, #184]	; (80090e0 <BLU_receiveData+0x144>)
 8009028:	689b      	ldr	r3, [r3, #8]
           (l_readData.leftY  == g_BLU_lastData.leftY) &&
 800902a:	429a      	cmp	r2, r3
 800902c:	d144      	bne.n	80090b8 <BLU_receiveData+0x11c>
           (l_readData.rightY == g_BLU_lastData.rightY) &&
 800902e:	69ba      	ldr	r2, [r7, #24]
 8009030:	4b2b      	ldr	r3, [pc, #172]	; (80090e0 <BLU_receiveData+0x144>)
 8009032:	68db      	ldr	r3, [r3, #12]
           (l_readData.rightX == g_BLU_lastData.rightX) &&
 8009034:	429a      	cmp	r2, r3
 8009036:	d13f      	bne.n	80090b8 <BLU_receiveData+0x11c>
           (l_readData.button == g_BLU_lastData.button))
 8009038:	7f3a      	ldrb	r2, [r7, #28]
 800903a:	4b29      	ldr	r3, [pc, #164]	; (80090e0 <BLU_receiveData+0x144>)
 800903c:	7c1b      	ldrb	r3, [r3, #16]
           (l_readData.rightY == g_BLU_lastData.rightY) &&
 800903e:	429a      	cmp	r2, r3
 8009040:	d13a      	bne.n	80090b8 <BLU_receiveData+0x11c>
  {
    /* Normalize directions data in range [-MAX..MAX] */
    p_data->leftX  = UTI_normalizeIntValue(l_readData.leftX , 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, false);
 8009042:	68f8      	ldr	r0, [r7, #12]
 8009044:	2300      	movs	r3, #0
 8009046:	9301      	str	r3, [sp, #4]
 8009048:	2328      	movs	r3, #40	; 0x28
 800904a:	9300      	str	r3, [sp, #0]
 800904c:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8009050:	22ff      	movs	r2, #255	; 0xff
 8009052:	2100      	movs	r1, #0
 8009054:	f002 f9fb 	bl	800b44e <UTI_normalizeIntValue>
 8009058:	4602      	mov	r2, r0
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	601a      	str	r2, [r3, #0]
    p_data->leftY  = UTI_normalizeIntValue(l_readData.leftY , 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, true );
 800905e:	6938      	ldr	r0, [r7, #16]
 8009060:	2301      	movs	r3, #1
 8009062:	9301      	str	r3, [sp, #4]
 8009064:	2328      	movs	r3, #40	; 0x28
 8009066:	9300      	str	r3, [sp, #0]
 8009068:	f06f 0327 	mvn.w	r3, #39	; 0x27
 800906c:	22ff      	movs	r2, #255	; 0xff
 800906e:	2100      	movs	r1, #0
 8009070:	f002 f9ed 	bl	800b44e <UTI_normalizeIntValue>
 8009074:	4602      	mov	r2, r0
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	605a      	str	r2, [r3, #4]
    p_data->rightX = UTI_normalizeIntValue(l_readData.rightX, 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, false);
 800907a:	6978      	ldr	r0, [r7, #20]
 800907c:	2300      	movs	r3, #0
 800907e:	9301      	str	r3, [sp, #4]
 8009080:	2328      	movs	r3, #40	; 0x28
 8009082:	9300      	str	r3, [sp, #0]
 8009084:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8009088:	22ff      	movs	r2, #255	; 0xff
 800908a:	2100      	movs	r1, #0
 800908c:	f002 f9df 	bl	800b44e <UTI_normalizeIntValue>
 8009090:	4602      	mov	r2, r0
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	609a      	str	r2, [r3, #8]
    p_data->rightY = UTI_normalizeIntValue(l_readData.rightY, 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, true );
 8009096:	69b8      	ldr	r0, [r7, #24]
 8009098:	2301      	movs	r3, #1
 800909a:	9301      	str	r3, [sp, #4]
 800909c:	2328      	movs	r3, #40	; 0x28
 800909e:	9300      	str	r3, [sp, #0]
 80090a0:	f06f 0327 	mvn.w	r3, #39	; 0x27
 80090a4:	22ff      	movs	r2, #255	; 0xff
 80090a6:	2100      	movs	r1, #0
 80090a8:	f002 f9d1 	bl	800b44e <UTI_normalizeIntValue>
 80090ac:	4602      	mov	r2, r0
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	60da      	str	r2, [r3, #12]
    p_data->button = l_readData.button;
 80090b2:	7f3a      	ldrb	r2, [r7, #28]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	741a      	strb	r2, [r3, #16]
  {
    ; /* Nothing to do */
  }

  /* Saved received data for later use in confirmation mechanism */
  g_BLU_lastData.leftX  = l_readData.leftX;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	4a09      	ldr	r2, [pc, #36]	; (80090e0 <BLU_receiveData+0x144>)
 80090bc:	6013      	str	r3, [r2, #0]
  g_BLU_lastData.leftY  = l_readData.leftY;
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	4a07      	ldr	r2, [pc, #28]	; (80090e0 <BLU_receiveData+0x144>)
 80090c2:	6053      	str	r3, [r2, #4]
  g_BLU_lastData.rightX = l_readData.rightX;
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	4a06      	ldr	r2, [pc, #24]	; (80090e0 <BLU_receiveData+0x144>)
 80090c8:	6093      	str	r3, [r2, #8]
  g_BLU_lastData.rightY = l_readData.rightY;
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	4a04      	ldr	r2, [pc, #16]	; (80090e0 <BLU_receiveData+0x144>)
 80090ce:	60d3      	str	r3, [r2, #12]
  g_BLU_lastData.button = l_readData.button;
 80090d0:	7f3a      	ldrb	r2, [r7, #28]
 80090d2:	4b03      	ldr	r3, [pc, #12]	; (80090e0 <BLU_receiveData+0x144>)
 80090d4:	741a      	strb	r2, [r3, #16]

  return;
 80090d6:	bf00      	nop
}
 80090d8:	3728      	adds	r7, #40	; 0x28
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	20000228 	.word	0x20000228

080090e4 <CBU_init>:
#include "circular_buffer.h"

#include "log.h"

void CBU_init(T_CBU_Context *p_buffer)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  uint32_t l_index;

  LOG_debug("Initializing circular buffer");
 80090ec:	490e      	ldr	r1, [pc, #56]	; (8009128 <CBU_init+0x44>)
 80090ee:	2000      	movs	r0, #0
 80090f0:	f001 fc26 	bl	800a940 <LOG_log>

  for (l_index = 0; l_index < CST_CIRCULAR_BUFFER_MAX_ELEMENTS; l_index++)
 80090f4:	2300      	movs	r3, #0
 80090f6:	60fb      	str	r3, [r7, #12]
 80090f8:	e008      	b.n	800910c <CBU_init+0x28>
  {
    p_buffer->elements[l_index] = 0.0f;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	68fa      	ldr	r2, [r7, #12]
 80090fe:	f04f 0100 	mov.w	r1, #0
 8009102:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (l_index = 0; l_index < CST_CIRCULAR_BUFFER_MAX_ELEMENTS; l_index++)
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	3301      	adds	r3, #1
 800910a:	60fb      	str	r3, [r7, #12]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2b09      	cmp	r3, #9
 8009110:	d9f3      	bls.n	80090fa <CBU_init+0x16>
  }

  p_buffer->count = 0;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	62da      	str	r2, [r3, #44]	; 0x2c
  p_buffer->index = 0;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	629a      	str	r2, [r3, #40]	; 0x28

  return;
 800911e:	bf00      	nop
}
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	0800edcc 	.word	0x0800edcc

0800912c <CBU_push>:

void CBU_push(T_CBU_Context *p_buffer, float p_element)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
  if (p_buffer->index == CST_CIRCULAR_BUFFER_MAX_ELEMENTS - 1)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800913a:	2b09      	cmp	r3, #9
 800913c:	d103      	bne.n	8009146 <CBU_push+0x1a>
  {
    p_buffer->index = 0;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	629a      	str	r2, [r3, #40]	; 0x28
 8009144:	e004      	b.n	8009150 <CBU_push+0x24>
  }
  else
  {
    p_buffer->index++;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800914a:	1c5a      	adds	r2, r3, #1
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  p_buffer->elements[p_buffer->index] = p_element;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6839      	ldr	r1, [r7, #0]
 8009158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  if (p_buffer->count < CST_CIRCULAR_BUFFER_MAX_ELEMENTS)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009160:	2b09      	cmp	r3, #9
 8009162:	d805      	bhi.n	8009170 <CBU_push+0x44>
  {
    p_buffer->count++;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009168:	1c5a      	adds	r2, r3, #1
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	62da      	str	r2, [r3, #44]	; 0x2c
  else
  {
    ; /* Nothing to do */
  }

  return;
 800916e:	bf00      	nop
 8009170:	bf00      	nop
}
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	bc80      	pop	{r7}
 8009178:	4770      	bx	lr

0800917a <CBU_getAverage>:
{
  return p_buffer->count;
}

float CBU_getAverage(T_CBU_Context *p_buffer)
{
 800917a:	b580      	push	{r7, lr}
 800917c:	b086      	sub	sp, #24
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
  uint32_t l_index;
  uint32_t l_count;
  float    l_average;

  l_index   = p_buffer->index;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009186:	617b      	str	r3, [r7, #20]
  l_count   = 0;
 8009188:	2300      	movs	r3, #0
 800918a:	613b      	str	r3, [r7, #16]
  l_average = 0.0f;
 800918c:	f04f 0300 	mov.w	r3, #0
 8009190:	60fb      	str	r3, [r7, #12]

  while (l_count < p_buffer->count)
 8009192:	e015      	b.n	80091c0 <CBU_getAverage+0x46>
  {
    l_average += p_buffer->elements[l_index];
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	697a      	ldr	r2, [r7, #20]
 8009198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800919c:	4619      	mov	r1, r3
 800919e:	68f8      	ldr	r0, [r7, #12]
 80091a0:	f7f7 fce4 	bl	8000b6c <__addsf3>
 80091a4:	4603      	mov	r3, r0
 80091a6:	60fb      	str	r3, [r7, #12]

    if (l_index == CST_CIRCULAR_BUFFER_MAX_ELEMENTS - 1)
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	2b09      	cmp	r3, #9
 80091ac:	d102      	bne.n	80091b4 <CBU_getAverage+0x3a>
    {
      l_index = 0;
 80091ae:	2300      	movs	r3, #0
 80091b0:	617b      	str	r3, [r7, #20]
 80091b2:	e002      	b.n	80091ba <CBU_getAverage+0x40>
    }
    else
    {
      l_index++;
 80091b4:	697b      	ldr	r3, [r7, #20]
 80091b6:	3301      	adds	r3, #1
 80091b8:	617b      	str	r3, [r7, #20]
    }

    l_count++;
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	3301      	adds	r3, #1
 80091be:	613b      	str	r3, [r7, #16]
  while (l_count < p_buffer->count)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c4:	693a      	ldr	r2, [r7, #16]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d3e4      	bcc.n	8009194 <CBU_getAverage+0x1a>
  }

  l_average /= (float)p_buffer->count;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7f7 fd7c 	bl	8000ccc <__aeabi_ui2f>
 80091d4:	4603      	mov	r3, r0
 80091d6:	4619      	mov	r1, r3
 80091d8:	68f8      	ldr	r0, [r7, #12]
 80091da:	f7f7 fe83 	bl	8000ee4 <__aeabi_fdiv>
 80091de:	4603      	mov	r3, r0
 80091e0:	60fb      	str	r3, [r7, #12]

  return l_average;
 80091e2:	68fb      	ldr	r3, [r7, #12]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3718      	adds	r7, #24
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <CON_init>:
static T_SFO_data          g_CON_data;
static uint32_t            g_CON_dataSize;
static bool                g_CON_isDataComplete;

void CON_init(UART_HandleTypeDef *p_uartHandle)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing console");
 80091f4:	490d      	ldr	r1, [pc, #52]	; (800922c <CON_init+0x40>)
 80091f6:	2001      	movs	r0, #1
 80091f8:	f001 fba2 	bl	800a940 <LOG_log>

  g_CON_uartHandle     = p_uartHandle;
 80091fc:	4a0c      	ldr	r2, [pc, #48]	; (8009230 <CON_init+0x44>)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6013      	str	r3, [r2, #0]
  g_CON_dataSize       = 0;
 8009202:	4b0c      	ldr	r3, [pc, #48]	; (8009234 <CON_init+0x48>)
 8009204:	2200      	movs	r2, #0
 8009206:	601a      	str	r2, [r3, #0]
  g_CON_isDataComplete = false;
 8009208:	4b0b      	ldr	r3, [pc, #44]	; (8009238 <CON_init+0x4c>)
 800920a:	2200      	movs	r2, #0
 800920c:	701a      	strb	r2, [r3, #0]

  SFO_initData(&g_CON_data);
 800920e:	480b      	ldr	r0, [pc, #44]	; (800923c <CON_init+0x50>)
 8009210:	f001 ff76 	bl	800b100 <SFO_initData>

  HAL_UART_Receive_IT(g_CON_uartHandle, &g_CON_datum, 1);
 8009214:	4b06      	ldr	r3, [pc, #24]	; (8009230 <CON_init+0x44>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2201      	movs	r2, #1
 800921a:	4909      	ldr	r1, [pc, #36]	; (8009240 <CON_init+0x54>)
 800921c:	4618      	mov	r0, r3
 800921e:	f7ff f851 	bl	80082c4 <HAL_UART_Receive_IT>

  return;
 8009222:	bf00      	nop
}
 8009224:	3708      	adds	r7, #8
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	0800ee30 	.word	0x0800ee30
 8009230:	2000023c 	.word	0x2000023c
 8009234:	20000254 	.word	0x20000254
 8009238:	20000258 	.word	0x20000258
 800923c:	20000244 	.word	0x20000244
 8009240:	20000240 	.word	0x20000240

08009244 <CON_receiveData>:

void CON_receiveData(void)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	af00      	add	r7, sp, #0
  /* If previous command was not processed yet, drop datum, */
  /* which will lead to an error, showing a design issue... */
  if (g_CON_isDataComplete == true)
 8009248:	4b0f      	ldr	r3, [pc, #60]	; (8009288 <CON_receiveData+0x44>)
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d112      	bne.n	8009276 <CON_receiveData+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (g_CON_datum == '\r')
 8009250:	4b0e      	ldr	r3, [pc, #56]	; (800928c <CON_receiveData+0x48>)
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	2b0d      	cmp	r3, #13
 8009256:	d103      	bne.n	8009260 <CON_receiveData+0x1c>
    {
      g_CON_isDataComplete = true;
 8009258:	4b0b      	ldr	r3, [pc, #44]	; (8009288 <CON_receiveData+0x44>)
 800925a:	2201      	movs	r2, #1
 800925c:	701a      	strb	r2, [r3, #0]
 800925e:	e00a      	b.n	8009276 <CON_receiveData+0x32>
    }
    else
    {
      g_CON_data[g_CON_dataSize] = g_CON_datum;
 8009260:	4b0b      	ldr	r3, [pc, #44]	; (8009290 <CON_receiveData+0x4c>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a09      	ldr	r2, [pc, #36]	; (800928c <CON_receiveData+0x48>)
 8009266:	7811      	ldrb	r1, [r2, #0]
 8009268:	4a0a      	ldr	r2, [pc, #40]	; (8009294 <CON_receiveData+0x50>)
 800926a:	54d1      	strb	r1, [r2, r3]
      g_CON_dataSize++;
 800926c:	4b08      	ldr	r3, [pc, #32]	; (8009290 <CON_receiveData+0x4c>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	3301      	adds	r3, #1
 8009272:	4a07      	ldr	r2, [pc, #28]	; (8009290 <CON_receiveData+0x4c>)
 8009274:	6013      	str	r3, [r2, #0]
    }
  }

  HAL_UART_Receive_IT(g_CON_uartHandle, &g_CON_datum, 1);
 8009276:	4b08      	ldr	r3, [pc, #32]	; (8009298 <CON_receiveData+0x54>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	2201      	movs	r2, #1
 800927c:	4903      	ldr	r1, [pc, #12]	; (800928c <CON_receiveData+0x48>)
 800927e:	4618      	mov	r0, r3
 8009280:	f7ff f820 	bl	80082c4 <HAL_UART_Receive_IT>

  return;
 8009284:	bf00      	nop
}
 8009286:	bd80      	pop	{r7, pc}
 8009288:	20000258 	.word	0x20000258
 800928c:	20000240 	.word	0x20000240
 8009290:	20000254 	.word	0x20000254
 8009294:	20000244 	.word	0x20000244
 8009298:	2000023c 	.word	0x2000023c

0800929c <CON_updateFifo>:

void CON_updateFifo(T_SFO_Context *p_fifo)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  if (g_CON_isDataComplete == false)
 80092a4:	4b0c      	ldr	r3, [pc, #48]	; (80092d8 <CON_updateFifo+0x3c>)
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	f083 0301 	eor.w	r3, r3, #1
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d10d      	bne.n	80092ce <CON_updateFifo+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    SFO_push    (p_fifo, &g_CON_data);
 80092b2:	490a      	ldr	r1, [pc, #40]	; (80092dc <CON_updateFifo+0x40>)
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f001 ff49 	bl	800b14c <SFO_push>
    SFO_initData(&g_CON_data);
 80092ba:	4808      	ldr	r0, [pc, #32]	; (80092dc <CON_updateFifo+0x40>)
 80092bc:	f001 ff20 	bl	800b100 <SFO_initData>

    g_CON_dataSize       = 0;
 80092c0:	4b07      	ldr	r3, [pc, #28]	; (80092e0 <CON_updateFifo+0x44>)
 80092c2:	2200      	movs	r2, #0
 80092c4:	601a      	str	r2, [r3, #0]
    g_CON_isDataComplete = false;
 80092c6:	4b04      	ldr	r3, [pc, #16]	; (80092d8 <CON_updateFifo+0x3c>)
 80092c8:	2200      	movs	r2, #0
 80092ca:	701a      	strb	r2, [r3, #0]
  }

  return;
 80092cc:	bf00      	nop
 80092ce:	bf00      	nop
}
 80092d0:	3708      	adds	r7, #8
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	20000258 	.word	0x20000258
 80092dc:	20000244 	.word	0x20000244
 80092e0:	20000254 	.word	0x20000254

080092e4 <CON_sendString>:

void CON_sendString(char *p_string, uint32_t p_length)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
  /* As this method is using for logging/debug, we will not deal with failure cases */
  (void)HAL_UART_Transmit(g_CON_uartHandle,
 80092ee:	4b06      	ldr	r3, [pc, #24]	; (8009308 <CON_sendString+0x24>)
 80092f0:	6818      	ldr	r0, [r3, #0]
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	b29a      	uxth	r2, r3
 80092f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80092fa:	6879      	ldr	r1, [r7, #4]
 80092fc:	f7fe ff50 	bl	80081a0 <HAL_UART_Transmit>
               (uint8_t *)p_string,
                          p_length,
                          CST_UART_TRANSMIT_TIMEOUT_IN_MS);

  return;
 8009300:	bf00      	nop
}
 8009302:	3708      	adds	r7, #8
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}
 8009308:	2000023c 	.word	0x2000023c

0800930c <DRV_init>:
void DRV_init(TIM_HandleTypeDef *p_pwmTimerHandle,
              TIM_HandleTypeDef *p_rearLeftEncoderTimerHandle,
              TIM_HandleTypeDef *p_rearRightEncoderTimerHandle,
              TIM_HandleTypeDef *p_frontRightEncoderTimerHandle,
              TIM_HandleTypeDef *p_frontLeftEncoderTimerHandle)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b088      	sub	sp, #32
 8009310:	af04      	add	r7, sp, #16
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	607a      	str	r2, [r7, #4]
 8009318:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing Drive module");
 800931a:	495d      	ldr	r1, [pc, #372]	; (8009490 <DRV_init+0x184>)
 800931c:	2001      	movs	r0, #1
 800931e:	f001 fb0f 	bl	800a940 <LOG_log>

  /* Setup PIDs with a target speed to 0 */
  PID_init(&g_DRV_pidFrontRight, STP_DRIVE_PID_P_FACTOR, STP_DRIVE_PID_I_FACTOR, STP_DRIVE_PID_D_FACTOR, 0, STP_DRIVE_MIN_SPEED, STP_DRIVE_MAX_SPEED, STP_DRIVE_PID_ANTI_WIND_UP_FACTOR);
 8009322:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8009326:	9303      	str	r3, [sp, #12]
 8009328:	4b5a      	ldr	r3, [pc, #360]	; (8009494 <DRV_init+0x188>)
 800932a:	9302      	str	r3, [sp, #8]
 800932c:	f04f 0300 	mov.w	r3, #0
 8009330:	9301      	str	r3, [sp, #4]
 8009332:	f04f 0300 	mov.w	r3, #0
 8009336:	9300      	str	r3, [sp, #0]
 8009338:	f04f 0300 	mov.w	r3, #0
 800933c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009340:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009344:	4854      	ldr	r0, [pc, #336]	; (8009498 <DRV_init+0x18c>)
 8009346:	f001 fd0f 	bl	800ad68 <PID_init>
  PID_init(&g_DRV_pidFrontLeft , STP_DRIVE_PID_P_FACTOR, STP_DRIVE_PID_I_FACTOR, STP_DRIVE_PID_D_FACTOR, 0, STP_DRIVE_MIN_SPEED, STP_DRIVE_MAX_SPEED, STP_DRIVE_PID_ANTI_WIND_UP_FACTOR);
 800934a:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 800934e:	9303      	str	r3, [sp, #12]
 8009350:	4b50      	ldr	r3, [pc, #320]	; (8009494 <DRV_init+0x188>)
 8009352:	9302      	str	r3, [sp, #8]
 8009354:	f04f 0300 	mov.w	r3, #0
 8009358:	9301      	str	r3, [sp, #4]
 800935a:	f04f 0300 	mov.w	r3, #0
 800935e:	9300      	str	r3, [sp, #0]
 8009360:	f04f 0300 	mov.w	r3, #0
 8009364:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009368:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800936c:	484b      	ldr	r0, [pc, #300]	; (800949c <DRV_init+0x190>)
 800936e:	f001 fcfb 	bl	800ad68 <PID_init>
  PID_init(&g_DRV_pidRearLeft  , STP_DRIVE_PID_P_FACTOR, STP_DRIVE_PID_I_FACTOR, STP_DRIVE_PID_D_FACTOR, 0, STP_DRIVE_MIN_SPEED, STP_DRIVE_MAX_SPEED, STP_DRIVE_PID_ANTI_WIND_UP_FACTOR);
 8009372:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 8009376:	9303      	str	r3, [sp, #12]
 8009378:	4b46      	ldr	r3, [pc, #280]	; (8009494 <DRV_init+0x188>)
 800937a:	9302      	str	r3, [sp, #8]
 800937c:	f04f 0300 	mov.w	r3, #0
 8009380:	9301      	str	r3, [sp, #4]
 8009382:	f04f 0300 	mov.w	r3, #0
 8009386:	9300      	str	r3, [sp, #0]
 8009388:	f04f 0300 	mov.w	r3, #0
 800938c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009390:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8009394:	4842      	ldr	r0, [pc, #264]	; (80094a0 <DRV_init+0x194>)
 8009396:	f001 fce7 	bl	800ad68 <PID_init>
  PID_init(&g_DRV_pidRearRight , STP_DRIVE_PID_P_FACTOR, STP_DRIVE_PID_I_FACTOR, STP_DRIVE_PID_D_FACTOR, 0, STP_DRIVE_MIN_SPEED, STP_DRIVE_MAX_SPEED, STP_DRIVE_PID_ANTI_WIND_UP_FACTOR);
 800939a:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 800939e:	9303      	str	r3, [sp, #12]
 80093a0:	4b3c      	ldr	r3, [pc, #240]	; (8009494 <DRV_init+0x188>)
 80093a2:	9302      	str	r3, [sp, #8]
 80093a4:	f04f 0300 	mov.w	r3, #0
 80093a8:	9301      	str	r3, [sp, #4]
 80093aa:	f04f 0300 	mov.w	r3, #0
 80093ae:	9300      	str	r3, [sp, #0]
 80093b0:	f04f 0300 	mov.w	r3, #0
 80093b4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80093b8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80093bc:	4839      	ldr	r0, [pc, #228]	; (80094a4 <DRV_init+0x198>)
 80093be:	f001 fcd3 	bl	800ad68 <PID_init>

  /* Setup motors (with a 0 speed & stopped direction, at this point) */
  MTR_init(&g_DRV_motorFrontRight,
 80093c2:	230c      	movs	r3, #12
 80093c4:	9303      	str	r3, [sp, #12]
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	9302      	str	r3, [sp, #8]
 80093ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093ce:	9301      	str	r3, [sp, #4]
 80093d0:	4b35      	ldr	r3, [pc, #212]	; (80094a8 <DRV_init+0x19c>)
 80093d2:	9300      	str	r3, [sp, #0]
 80093d4:	2304      	movs	r3, #4
 80093d6:	4a35      	ldr	r2, [pc, #212]	; (80094ac <DRV_init+0x1a0>)
 80093d8:	4935      	ldr	r1, [pc, #212]	; (80094b0 <DRV_init+0x1a4>)
 80093da:	4836      	ldr	r0, [pc, #216]	; (80094b4 <DRV_init+0x1a8>)
 80093dc:	f001 fbd2 	bl	800ab84 <MTR_init>
           MOTOR_FRONT_RIGHT_OUT_2_GPIO_Port,
           MOTOR_FRONT_RIGHT_OUT_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_4);

  MTR_init(&g_DRV_motorFrontLeft,
 80093e0:	2308      	movs	r3, #8
 80093e2:	9303      	str	r3, [sp, #12]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	9302      	str	r3, [sp, #8]
 80093e8:	2310      	movs	r3, #16
 80093ea:	9301      	str	r3, [sp, #4]
 80093ec:	4b32      	ldr	r3, [pc, #200]	; (80094b8 <DRV_init+0x1ac>)
 80093ee:	9300      	str	r3, [sp, #0]
 80093f0:	2320      	movs	r3, #32
 80093f2:	4a31      	ldr	r2, [pc, #196]	; (80094b8 <DRV_init+0x1ac>)
 80093f4:	4931      	ldr	r1, [pc, #196]	; (80094bc <DRV_init+0x1b0>)
 80093f6:	4832      	ldr	r0, [pc, #200]	; (80094c0 <DRV_init+0x1b4>)
 80093f8:	f001 fbc4 	bl	800ab84 <MTR_init>
           MOTOR_FRONT_LEFT_OUT_2_GPIO_Port,
           MOTOR_FRONT_LEFT_OUT_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_3);

  MTR_init(&g_DRV_motorRearLeft,
 80093fc:	2304      	movs	r3, #4
 80093fe:	9303      	str	r3, [sp, #12]
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	9302      	str	r3, [sp, #8]
 8009404:	2320      	movs	r3, #32
 8009406:	9301      	str	r3, [sp, #4]
 8009408:	4b27      	ldr	r3, [pc, #156]	; (80094a8 <DRV_init+0x19c>)
 800940a:	9300      	str	r3, [sp, #0]
 800940c:	2310      	movs	r3, #16
 800940e:	4a26      	ldr	r2, [pc, #152]	; (80094a8 <DRV_init+0x19c>)
 8009410:	492c      	ldr	r1, [pc, #176]	; (80094c4 <DRV_init+0x1b8>)
 8009412:	482d      	ldr	r0, [pc, #180]	; (80094c8 <DRV_init+0x1bc>)
 8009414:	f001 fbb6 	bl	800ab84 <MTR_init>
           MOTOR_REAR_LEFT_OUT_2_GPIO_Port,
           MOTOR_REAR_LEFT_OUT_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_2);

  MTR_init(&g_DRV_motorRearRight,
 8009418:	2300      	movs	r3, #0
 800941a:	9303      	str	r3, [sp, #12]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	9302      	str	r3, [sp, #8]
 8009420:	2302      	movs	r3, #2
 8009422:	9301      	str	r3, [sp, #4]
 8009424:	4b24      	ldr	r3, [pc, #144]	; (80094b8 <DRV_init+0x1ac>)
 8009426:	9300      	str	r3, [sp, #0]
 8009428:	2301      	movs	r3, #1
 800942a:	4a23      	ldr	r2, [pc, #140]	; (80094b8 <DRV_init+0x1ac>)
 800942c:	4927      	ldr	r1, [pc, #156]	; (80094cc <DRV_init+0x1c0>)
 800942e:	4828      	ldr	r0, [pc, #160]	; (80094d0 <DRV_init+0x1c4>)
 8009430:	f001 fba8 	bl	800ab84 <MTR_init>
           MOTOR_REAR_RIGHT_OUT_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_1);

  /* Setup encoders */
  ENC_init(&g_DRV_encoderFrontRight, CST_FRONT_RIGHT_MOTOR_NAME, true , p_frontRightEncoderTimerHandle);
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	2201      	movs	r2, #1
 8009438:	491d      	ldr	r1, [pc, #116]	; (80094b0 <DRV_init+0x1a4>)
 800943a:	4826      	ldr	r0, [pc, #152]	; (80094d4 <DRV_init+0x1c8>)
 800943c:	f001 f902 	bl	800a644 <ENC_init>
  ENC_init(&g_DRV_encoderFrontLeft , CST_FRONT_LEFT_MOTOR_NAME , false, p_frontLeftEncoderTimerHandle );
 8009440:	69bb      	ldr	r3, [r7, #24]
 8009442:	2200      	movs	r2, #0
 8009444:	491d      	ldr	r1, [pc, #116]	; (80094bc <DRV_init+0x1b0>)
 8009446:	4824      	ldr	r0, [pc, #144]	; (80094d8 <DRV_init+0x1cc>)
 8009448:	f001 f8fc 	bl	800a644 <ENC_init>
  ENC_init(&g_DRV_encoderRearLeft  , CST_REAR_LEFT_MOTOR_NAME  , false, p_rearLeftEncoderTimerHandle  );
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	2200      	movs	r2, #0
 8009450:	491c      	ldr	r1, [pc, #112]	; (80094c4 <DRV_init+0x1b8>)
 8009452:	4822      	ldr	r0, [pc, #136]	; (80094dc <DRV_init+0x1d0>)
 8009454:	f001 f8f6 	bl	800a644 <ENC_init>
  ENC_init(&g_DRV_encoderRearRight , CST_REAR_RIGHT_MOTOR_NAME , true , p_rearRightEncoderTimerHandle );
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2201      	movs	r2, #1
 800945c:	491b      	ldr	r1, [pc, #108]	; (80094cc <DRV_init+0x1c0>)
 800945e:	4820      	ldr	r0, [pc, #128]	; (80094e0 <DRV_init+0x1d4>)
 8009460:	f001 f8f0 	bl	800a644 <ENC_init>

  /* Setup speed buffers */
  CBU_init(&g_DRV_speedBufferFrontRight);
 8009464:	481f      	ldr	r0, [pc, #124]	; (80094e4 <DRV_init+0x1d8>)
 8009466:	f7ff fe3d 	bl	80090e4 <CBU_init>
  CBU_init(&g_DRV_speedBufferFrontLeft );
 800946a:	481f      	ldr	r0, [pc, #124]	; (80094e8 <DRV_init+0x1dc>)
 800946c:	f7ff fe3a 	bl	80090e4 <CBU_init>
  CBU_init(&g_DRV_speedBufferRearLeft  );
 8009470:	481e      	ldr	r0, [pc, #120]	; (80094ec <DRV_init+0x1e0>)
 8009472:	f7ff fe37 	bl	80090e4 <CBU_init>
  CBU_init(&g_DRV_speedBufferRearRight );
 8009476:	481e      	ldr	r0, [pc, #120]	; (80094f0 <DRV_init+0x1e4>)
 8009478:	f7ff fe34 	bl	80090e4 <CBU_init>

  /* Activate motors by default (de-activating them is used for debug)  */
  g_DRV_areMotorsOn = true;
 800947c:	4b1d      	ldr	r3, [pc, #116]	; (80094f4 <DRV_init+0x1e8>)
 800947e:	2201      	movs	r2, #1
 8009480:	701a      	strb	r2, [r3, #0]

  /* Start with master board control mode */
  g_DRV_mode = DRV_MODE_MASTER_BOARD_CONTROL;
 8009482:	4b1d      	ldr	r3, [pc, #116]	; (80094f8 <DRV_init+0x1ec>)
 8009484:	2202      	movs	r2, #2
 8009486:	701a      	strb	r2, [r3, #0]

  return;
 8009488:	bf00      	nop
}
 800948a:	3710      	adds	r7, #16
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}
 8009490:	0800ee48 	.word	0x0800ee48
 8009494:	42200000 	.word	0x42200000
 8009498:	2000025c 	.word	0x2000025c
 800949c:	2000028c 	.word	0x2000028c
 80094a0:	200002bc 	.word	0x200002bc
 80094a4:	200002ec 	.word	0x200002ec
 80094a8:	40011000 	.word	0x40011000
 80094ac:	40011400 	.word	0x40011400
 80094b0:	0800ee64 	.word	0x0800ee64
 80094b4:	2000031c 	.word	0x2000031c
 80094b8:	40010c00 	.word	0x40010c00
 80094bc:	0800ee70 	.word	0x0800ee70
 80094c0:	20000340 	.word	0x20000340
 80094c4:	0800ee7c 	.word	0x0800ee7c
 80094c8:	20000364 	.word	0x20000364
 80094cc:	0800ee88 	.word	0x0800ee88
 80094d0:	20000388 	.word	0x20000388
 80094d4:	200003ac 	.word	0x200003ac
 80094d8:	200003b8 	.word	0x200003b8
 80094dc:	200003c4 	.word	0x200003c4
 80094e0:	200003d0 	.word	0x200003d0
 80094e4:	200003dc 	.word	0x200003dc
 80094e8:	2000040c 	.word	0x2000040c
 80094ec:	2000043c 	.word	0x2000043c
 80094f0:	2000046c 	.word	0x2000046c
 80094f4:	20000259 	.word	0x20000259
 80094f8:	2000025a 	.word	0x2000025a

080094fc <DRV_updateEncoder>:

void DRV_updateEncoder(TIM_HandleTypeDef *p_encoderTimerHandle)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
  int16_t l_count;

  l_count = __HAL_TIM_GET_COUNTER(p_encoderTimerHandle);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950a:	81fb      	strh	r3, [r7, #14]

  /* Check the handle of the triggering timer and update encoder accordingly */
  if (p_encoderTimerHandle == g_DRV_encoderRearLeft.timerHandle)
 800950c:	4b19      	ldr	r3, [pc, #100]	; (8009574 <DRV_updateEncoder+0x78>)
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	687a      	ldr	r2, [r7, #4]
 8009512:	429a      	cmp	r2, r3
 8009514:	d106      	bne.n	8009524 <DRV_updateEncoder+0x28>
  {
    ENC_update(&g_DRV_encoderRearLeft, l_count);
 8009516:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800951a:	4619      	mov	r1, r3
 800951c:	4815      	ldr	r0, [pc, #84]	; (8009574 <DRV_updateEncoder+0x78>)
 800951e:	f001 f8c2 	bl	800a6a6 <ENC_update>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8009522:	e023      	b.n	800956c <DRV_updateEncoder+0x70>
  else if (p_encoderTimerHandle == g_DRV_encoderRearRight.timerHandle)
 8009524:	4b14      	ldr	r3, [pc, #80]	; (8009578 <DRV_updateEncoder+0x7c>)
 8009526:	689b      	ldr	r3, [r3, #8]
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	429a      	cmp	r2, r3
 800952c:	d106      	bne.n	800953c <DRV_updateEncoder+0x40>
    ENC_update(&g_DRV_encoderRearRight, l_count);
 800952e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009532:	4619      	mov	r1, r3
 8009534:	4810      	ldr	r0, [pc, #64]	; (8009578 <DRV_updateEncoder+0x7c>)
 8009536:	f001 f8b6 	bl	800a6a6 <ENC_update>
  return;
 800953a:	e017      	b.n	800956c <DRV_updateEncoder+0x70>
  else if (p_encoderTimerHandle == g_DRV_encoderFrontRight.timerHandle)
 800953c:	4b0f      	ldr	r3, [pc, #60]	; (800957c <DRV_updateEncoder+0x80>)
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	429a      	cmp	r2, r3
 8009544:	d106      	bne.n	8009554 <DRV_updateEncoder+0x58>
    ENC_update(&g_DRV_encoderFrontRight, l_count);
 8009546:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800954a:	4619      	mov	r1, r3
 800954c:	480b      	ldr	r0, [pc, #44]	; (800957c <DRV_updateEncoder+0x80>)
 800954e:	f001 f8aa 	bl	800a6a6 <ENC_update>
  return;
 8009552:	e00b      	b.n	800956c <DRV_updateEncoder+0x70>
  else if (p_encoderTimerHandle == g_DRV_encoderFrontLeft.timerHandle)
 8009554:	4b0a      	ldr	r3, [pc, #40]	; (8009580 <DRV_updateEncoder+0x84>)
 8009556:	689b      	ldr	r3, [r3, #8]
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	429a      	cmp	r2, r3
 800955c:	d106      	bne.n	800956c <DRV_updateEncoder+0x70>
    ENC_update(&g_DRV_encoderFrontLeft, l_count);
 800955e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009562:	4619      	mov	r1, r3
 8009564:	4806      	ldr	r0, [pc, #24]	; (8009580 <DRV_updateEncoder+0x84>)
 8009566:	f001 f89e 	bl	800a6a6 <ENC_update>
  return;
 800956a:	bf00      	nop
 800956c:	bf00      	nop
}
 800956e:	3710      	adds	r7, #16
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}
 8009574:	200003c4 	.word	0x200003c4
 8009578:	200003d0 	.word	0x200003d0
 800957c:	200003ac 	.word	0x200003ac
 8009580:	200003b8 	.word	0x200003b8

08009584 <DRV_updateFromBluetooth>:

void DRV_updateFromBluetooth(T_BLU_Data *p_bluetoothData)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  uint32_t l_speed;

  /* Check possible requested mode change */
  switch (p_bluetoothData->button)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	7c1b      	ldrb	r3, [r3, #16]
 8009590:	3b01      	subs	r3, #1
 8009592:	2b0f      	cmp	r3, #15
 8009594:	d861      	bhi.n	800965a <DRV_updateFromBluetooth+0xd6>
 8009596:	a201      	add	r2, pc, #4	; (adr r2, 800959c <DRV_updateFromBluetooth+0x18>)
 8009598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800959c:	08009625 	.word	0x08009625
 80095a0:	0800965b 	.word	0x0800965b
 80095a4:	0800965b 	.word	0x0800965b
 80095a8:	0800963d 	.word	0x0800963d
 80095ac:	0800965b 	.word	0x0800965b
 80095b0:	0800965b 	.word	0x0800965b
 80095b4:	0800965b 	.word	0x0800965b
 80095b8:	0800965b 	.word	0x0800965b
 80095bc:	0800965b 	.word	0x0800965b
 80095c0:	0800965b 	.word	0x0800965b
 80095c4:	0800965b 	.word	0x0800965b
 80095c8:	0800965b 	.word	0x0800965b
 80095cc:	0800965b 	.word	0x0800965b
 80095d0:	0800960d 	.word	0x0800960d
 80095d4:	080095f5 	.word	0x080095f5
 80095d8:	080095dd 	.word	0x080095dd
  {
    case BLU_BUTTON_PINK_SQUARE:
      if (g_DRV_mode != DRV_MODE_MANUAL_FIXED_SPEED)
 80095dc:	4b82      	ldr	r3, [pc, #520]	; (80097e8 <DRV_updateFromBluetooth+0x264>)
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d03c      	beq.n	800965e <DRV_updateFromBluetooth+0xda>
      {
        LOG_info("Drive mode now DRV_MODE_MANUAL_FIXED_SPEED");
 80095e4:	4981      	ldr	r1, [pc, #516]	; (80097ec <DRV_updateFromBluetooth+0x268>)
 80095e6:	2001      	movs	r0, #1
 80095e8:	f001 f9aa 	bl	800a940 <LOG_log>
        g_DRV_mode = DRV_MODE_MANUAL_FIXED_SPEED;
 80095ec:	4b7e      	ldr	r3, [pc, #504]	; (80097e8 <DRV_updateFromBluetooth+0x264>)
 80095ee:	2200      	movs	r2, #0
 80095f0:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 80095f2:	e034      	b.n	800965e <DRV_updateFromBluetooth+0xda>

    case BLU_BUTTON_BLUE_CROSS:
      if (g_DRV_mode != DRV_MODE_MANUAL_VARIABLE_SPEED)
 80095f4:	4b7c      	ldr	r3, [pc, #496]	; (80097e8 <DRV_updateFromBluetooth+0x264>)
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d032      	beq.n	8009662 <DRV_updateFromBluetooth+0xde>
      {
        LOG_info("Drive mode now DRV_MODE_MANUAL_VARIABLE_SPEED");
 80095fc:	497c      	ldr	r1, [pc, #496]	; (80097f0 <DRV_updateFromBluetooth+0x26c>)
 80095fe:	2001      	movs	r0, #1
 8009600:	f001 f99e 	bl	800a940 <LOG_log>
        g_DRV_mode = DRV_MODE_MANUAL_VARIABLE_SPEED;
 8009604:	4b78      	ldr	r3, [pc, #480]	; (80097e8 <DRV_updateFromBluetooth+0x264>)
 8009606:	2201      	movs	r2, #1
 8009608:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 800960a:	e02a      	b.n	8009662 <DRV_updateFromBluetooth+0xde>

    case BLU_BUTTON_RED_CIRCLE:
      if (g_DRV_mode != DRV_MODE_MASTER_BOARD_CONTROL)
 800960c:	4b76      	ldr	r3, [pc, #472]	; (80097e8 <DRV_updateFromBluetooth+0x264>)
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	2b02      	cmp	r3, #2
 8009612:	d028      	beq.n	8009666 <DRV_updateFromBluetooth+0xe2>
      {
        LOG_info("Drive mode now DRV_MODE_MASTER_BOARD_CONTROL");
 8009614:	4977      	ldr	r1, [pc, #476]	; (80097f4 <DRV_updateFromBluetooth+0x270>)
 8009616:	2001      	movs	r0, #1
 8009618:	f001 f992 	bl	800a940 <LOG_log>
        g_DRV_mode = DRV_MODE_MASTER_BOARD_CONTROL;
 800961c:	4b72      	ldr	r3, [pc, #456]	; (80097e8 <DRV_updateFromBluetooth+0x264>)
 800961e:	2202      	movs	r2, #2
 8009620:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8009622:	e020      	b.n	8009666 <DRV_updateFromBluetooth+0xe2>

    case BLU_BUTTON_SELECT:
      if (g_DRV_areMotorsOn == true)
 8009624:	4b74      	ldr	r3, [pc, #464]	; (80097f8 <DRV_updateFromBluetooth+0x274>)
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d01e      	beq.n	800966a <DRV_updateFromBluetooth+0xe6>
      {
        LOG_info("Drive turning motor OFF");
 800962c:	4973      	ldr	r1, [pc, #460]	; (80097fc <DRV_updateFromBluetooth+0x278>)
 800962e:	2001      	movs	r0, #1
 8009630:	f001 f986 	bl	800a940 <LOG_log>
        g_DRV_areMotorsOn = false;
 8009634:	4b70      	ldr	r3, [pc, #448]	; (80097f8 <DRV_updateFromBluetooth+0x274>)
 8009636:	2200      	movs	r2, #0
 8009638:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 800963a:	e016      	b.n	800966a <DRV_updateFromBluetooth+0xe6>

    case BLU_BUTTON_START:
      if (g_DRV_areMotorsOn == false)
 800963c:	4b6e      	ldr	r3, [pc, #440]	; (80097f8 <DRV_updateFromBluetooth+0x274>)
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	f083 0301 	eor.w	r3, r3, #1
 8009644:	b2db      	uxtb	r3, r3
 8009646:	2b00      	cmp	r3, #0
 8009648:	d011      	beq.n	800966e <DRV_updateFromBluetooth+0xea>
      {
        LOG_info("Drive turning motors ON");
 800964a:	496d      	ldr	r1, [pc, #436]	; (8009800 <DRV_updateFromBluetooth+0x27c>)
 800964c:	2001      	movs	r0, #1
 800964e:	f001 f977 	bl	800a940 <LOG_log>
        g_DRV_areMotorsOn = true;
 8009652:	4b69      	ldr	r3, [pc, #420]	; (80097f8 <DRV_updateFromBluetooth+0x274>)
 8009654:	2201      	movs	r2, #1
 8009656:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8009658:	e009      	b.n	800966e <DRV_updateFromBluetooth+0xea>

    case BLU_BUTTON_NONE:
    default:
      ; /* Nothing to do */
      break;
 800965a:	bf00      	nop
 800965c:	e008      	b.n	8009670 <DRV_updateFromBluetooth+0xec>
      break;
 800965e:	bf00      	nop
 8009660:	e006      	b.n	8009670 <DRV_updateFromBluetooth+0xec>
      break;
 8009662:	bf00      	nop
 8009664:	e004      	b.n	8009670 <DRV_updateFromBluetooth+0xec>
      break;
 8009666:	bf00      	nop
 8009668:	e002      	b.n	8009670 <DRV_updateFromBluetooth+0xec>
      break;
 800966a:	bf00      	nop
 800966c:	e000      	b.n	8009670 <DRV_updateFromBluetooth+0xec>
      break;
 800966e:	bf00      	nop
  }

  /* Master board control mode is an automated mode, so that we will */
  /* ignore any direction/button press received via bluetooth.       */
  if (g_DRV_mode == DRV_MODE_MASTER_BOARD_CONTROL)
 8009670:	4b5d      	ldr	r3, [pc, #372]	; (80097e8 <DRV_updateFromBluetooth+0x264>)
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	2b02      	cmp	r3, #2
 8009676:	f000 80b3 	beq.w	80097e0 <DRV_updateFromBluetooth+0x25c>
    ; /* Nothing to do */
  }
  /* Manual mode, applying directions received by bluetooth */
  else
  {
    if (p_bluetoothData->leftY > STP_JOYSTICKS_THRESHOLD)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	2b0a      	cmp	r3, #10
 8009680:	dd0c      	ble.n	800969c <DRV_updateFromBluetooth+0x118>
    {
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : p_bluetoothData->leftY;
 8009682:	4b59      	ldr	r3, [pc, #356]	; (80097e8 <DRV_updateFromBluetooth+0x264>)
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d002      	beq.n	8009690 <DRV_updateFromBluetooth+0x10c>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	e000      	b.n	8009692 <DRV_updateFromBluetooth+0x10e>
 8009690:	2314      	movs	r3, #20
 8009692:	60fb      	str	r3, [r7, #12]

      DRV_moveForward(l_speed);
 8009694:	68f8      	ldr	r0, [r7, #12]
 8009696:	f000 fdb9 	bl	800a20c <DRV_moveForward>
      /* Most of the time, we will get here */
      DRV_stop();
    }
  }

  return;
 800969a:	e0a1      	b.n	80097e0 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightY > STP_JOYSTICKS_THRESHOLD)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	68db      	ldr	r3, [r3, #12]
 80096a0:	2b0a      	cmp	r3, #10
 80096a2:	dd0c      	ble.n	80096be <DRV_updateFromBluetooth+0x13a>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : p_bluetoothData->rightY;
 80096a4:	4b50      	ldr	r3, [pc, #320]	; (80097e8 <DRV_updateFromBluetooth+0x264>)
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d002      	beq.n	80096b2 <DRV_updateFromBluetooth+0x12e>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	e000      	b.n	80096b4 <DRV_updateFromBluetooth+0x130>
 80096b2:	2314      	movs	r3, #20
 80096b4:	60fb      	str	r3, [r7, #12]
      DRV_moveForward(l_speed);
 80096b6:	68f8      	ldr	r0, [r7, #12]
 80096b8:	f000 fda8 	bl	800a20c <DRV_moveForward>
  return;
 80096bc:	e090      	b.n	80097e0 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->leftY < -STP_JOYSTICKS_THRESHOLD)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	f113 0f0a 	cmn.w	r3, #10
 80096c6:	da0d      	bge.n	80096e4 <DRV_updateFromBluetooth+0x160>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->leftY;
 80096c8:	4b47      	ldr	r3, [pc, #284]	; (80097e8 <DRV_updateFromBluetooth+0x264>)
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d003      	beq.n	80096d8 <DRV_updateFromBluetooth+0x154>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	685b      	ldr	r3, [r3, #4]
 80096d4:	425b      	negs	r3, r3
 80096d6:	e000      	b.n	80096da <DRV_updateFromBluetooth+0x156>
 80096d8:	2314      	movs	r3, #20
 80096da:	60fb      	str	r3, [r7, #12]
      DRV_moveBackward(l_speed);
 80096dc:	68f8      	ldr	r0, [r7, #12]
 80096de:	f000 fdcb 	bl	800a278 <DRV_moveBackward>
  return;
 80096e2:	e07d      	b.n	80097e0 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightY < -STP_JOYSTICKS_THRESHOLD)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	f113 0f0a 	cmn.w	r3, #10
 80096ec:	da0d      	bge.n	800970a <DRV_updateFromBluetooth+0x186>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->rightY;
 80096ee:	4b3e      	ldr	r3, [pc, #248]	; (80097e8 <DRV_updateFromBluetooth+0x264>)
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d003      	beq.n	80096fe <DRV_updateFromBluetooth+0x17a>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	425b      	negs	r3, r3
 80096fc:	e000      	b.n	8009700 <DRV_updateFromBluetooth+0x17c>
 80096fe:	2314      	movs	r3, #20
 8009700:	60fb      	str	r3, [r7, #12]
      DRV_moveBackward(l_speed);
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	f000 fdb8 	bl	800a278 <DRV_moveBackward>
  return;
 8009708:	e06a      	b.n	80097e0 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->leftX < -STP_JOYSTICKS_THRESHOLD)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f113 0f0a 	cmn.w	r3, #10
 8009712:	da0d      	bge.n	8009730 <DRV_updateFromBluetooth+0x1ac>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->leftX;
 8009714:	4b34      	ldr	r3, [pc, #208]	; (80097e8 <DRV_updateFromBluetooth+0x264>)
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d003      	beq.n	8009724 <DRV_updateFromBluetooth+0x1a0>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	425b      	negs	r3, r3
 8009722:	e000      	b.n	8009726 <DRV_updateFromBluetooth+0x1a2>
 8009724:	2314      	movs	r3, #20
 8009726:	60fb      	str	r3, [r7, #12]
      DRV_turnLeft(l_speed);
 8009728:	68f8      	ldr	r0, [r7, #12]
 800972a:	f000 feb3 	bl	800a494 <DRV_turnLeft>
  return;
 800972e:	e057      	b.n	80097e0 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->leftX > STP_JOYSTICKS_THRESHOLD)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	2b0a      	cmp	r3, #10
 8009736:	dd0c      	ble.n	8009752 <DRV_updateFromBluetooth+0x1ce>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : p_bluetoothData->leftX;
 8009738:	4b2b      	ldr	r3, [pc, #172]	; (80097e8 <DRV_updateFromBluetooth+0x264>)
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d002      	beq.n	8009746 <DRV_updateFromBluetooth+0x1c2>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	e000      	b.n	8009748 <DRV_updateFromBluetooth+0x1c4>
 8009746:	2314      	movs	r3, #20
 8009748:	60fb      	str	r3, [r7, #12]
      DRV_turnRight(l_speed);
 800974a:	68f8      	ldr	r0, [r7, #12]
 800974c:	f000 fed8 	bl	800a500 <DRV_turnRight>
  return;
 8009750:	e046      	b.n	80097e0 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightX < -STP_JOYSTICKS_THRESHOLD)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	f113 0f0a 	cmn.w	r3, #10
 800975a:	da0d      	bge.n	8009778 <DRV_updateFromBluetooth+0x1f4>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->rightX;
 800975c:	4b22      	ldr	r3, [pc, #136]	; (80097e8 <DRV_updateFromBluetooth+0x264>)
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d003      	beq.n	800976c <DRV_updateFromBluetooth+0x1e8>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	425b      	negs	r3, r3
 800976a:	e000      	b.n	800976e <DRV_updateFromBluetooth+0x1ea>
 800976c:	2314      	movs	r3, #20
 800976e:	60fb      	str	r3, [r7, #12]
      DRV_translateLeft(l_speed);
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f000 fefb 	bl	800a56c <DRV_translateLeft>
  return;
 8009776:	e033      	b.n	80097e0 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightX > STP_JOYSTICKS_THRESHOLD)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	689b      	ldr	r3, [r3, #8]
 800977c:	2b0a      	cmp	r3, #10
 800977e:	dd0c      	ble.n	800979a <DRV_updateFromBluetooth+0x216>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : p_bluetoothData->rightX;
 8009780:	4b19      	ldr	r3, [pc, #100]	; (80097e8 <DRV_updateFromBluetooth+0x264>)
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d002      	beq.n	800978e <DRV_updateFromBluetooth+0x20a>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	e000      	b.n	8009790 <DRV_updateFromBluetooth+0x20c>
 800978e:	2314      	movs	r3, #20
 8009790:	60fb      	str	r3, [r7, #12]
      DRV_translateRight(l_speed);
 8009792:	68f8      	ldr	r0, [r7, #12]
 8009794:	f000 ff20 	bl	800a5d8 <DRV_translateRight>
  return;
 8009798:	e022      	b.n	80097e0 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_L1)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	7c1b      	ldrb	r3, [r3, #16]
 800979e:	2b0b      	cmp	r3, #11
 80097a0:	d103      	bne.n	80097aa <DRV_updateFromBluetooth+0x226>
      DRV_moveForwardLeft(STP_BUTTONS_FIXED_SPEED);
 80097a2:	2028      	movs	r0, #40	; 0x28
 80097a4:	f000 fdd4 	bl	800a350 <DRV_moveForwardLeft>
  return;
 80097a8:	e01a      	b.n	80097e0 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_L2)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	7c1b      	ldrb	r3, [r3, #16]
 80097ae:	2b09      	cmp	r3, #9
 80097b0:	d103      	bne.n	80097ba <DRV_updateFromBluetooth+0x236>
      DRV_moveBackwardRight(STP_BUTTONS_FIXED_SPEED);
 80097b2:	2028      	movs	r0, #40	; 0x28
 80097b4:	f000 fe02 	bl	800a3bc <DRV_moveBackwardRight>
  return;
 80097b8:	e012      	b.n	80097e0 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_R1)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	7c1b      	ldrb	r3, [r3, #16]
 80097be:	2b0c      	cmp	r3, #12
 80097c0:	d103      	bne.n	80097ca <DRV_updateFromBluetooth+0x246>
      DRV_moveForwardRight(STP_BUTTONS_FIXED_SPEED);
 80097c2:	2028      	movs	r0, #40	; 0x28
 80097c4:	f000 fd8e 	bl	800a2e4 <DRV_moveForwardRight>
  return;
 80097c8:	e00a      	b.n	80097e0 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_R2)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	7c1b      	ldrb	r3, [r3, #16]
 80097ce:	2b0a      	cmp	r3, #10
 80097d0:	d103      	bne.n	80097da <DRV_updateFromBluetooth+0x256>
      DRV_moveBackwardLeft(STP_BUTTONS_FIXED_SPEED);
 80097d2:	2028      	movs	r0, #40	; 0x28
 80097d4:	f000 fe28 	bl	800a428 <DRV_moveBackwardLeft>
  return;
 80097d8:	e002      	b.n	80097e0 <DRV_updateFromBluetooth+0x25c>
      DRV_stop();
 80097da:	f000 fcf9 	bl	800a1d0 <DRV_stop>
  return;
 80097de:	bf00      	nop
 80097e0:	bf00      	nop
}
 80097e2:	3710      	adds	r7, #16
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}
 80097e8:	2000025a 	.word	0x2000025a
 80097ec:	0800ee94 	.word	0x0800ee94
 80097f0:	0800eec0 	.word	0x0800eec0
 80097f4:	0800eef0 	.word	0x0800eef0
 80097f8:	20000259 	.word	0x20000259
 80097fc:	0800ef20 	.word	0x0800ef20
 8009800:	0800ef38 	.word	0x0800ef38

08009804 <DRV_updateFromMaster>:

void DRV_updateFromMaster(T_SFO_Context *p_commandsFifo, uint16_t p_deltaTime)
{
 8009804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009806:	b099      	sub	sp, #100	; 0x64
 8009808:	af02      	add	r7, sp, #8
 800980a:	6078      	str	r0, [r7, #4]
 800980c:	460b      	mov	r3, r1
 800980e:	807b      	strh	r3, [r7, #2]
  RTC_TimeTypeDef   l_time;
  RTC_DateTypeDef   l_date;
  static RTC_TimeTypeDef   l_lastTime;

  /* Ignore master board data only whenever a manual mode is selected */
  if (g_DRV_mode != DRV_MODE_MASTER_BOARD_CONTROL)
 8009810:	4ba6      	ldr	r3, [pc, #664]	; (8009aac <DRV_updateFromMaster+0x2a8>)
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	2b02      	cmp	r3, #2
 8009816:	f040 82fd 	bne.w	8009e14 <DRV_updateFromMaster+0x610>
  }
  else
  {
    /* Deal with only one command per cycle. If a FIFO overflow occurs, */
    /* FIFO string will report an error, showing us a design issue...   */
    if (SFO_getCount(p_commandsFifo) != 0)
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f001 fd14 	bl	800b248 <SFO_getCount>
 8009820:	4603      	mov	r3, r0
 8009822:	2b00      	cmp	r3, #0
 8009824:	f000 81eb 	beq.w	8009bfe <DRV_updateFromMaster+0x3fa>
    {
      SFO_logInfo(p_commandsFifo);
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f001 fd19 	bl	800b260 <SFO_logInfo>
      SFO_pop    (p_commandsFifo         , &l_command);
 800982e:	f107 0314 	add.w	r3, r7, #20
 8009832:	4619      	mov	r1, r3
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f001 fcc7 	bl	800b1c8 <SFO_pop>
      LOG_info   ("Drive got command: %s",  l_command);
 800983a:	f107 0314 	add.w	r3, r7, #20
 800983e:	461a      	mov	r2, r3
 8009840:	499b      	ldr	r1, [pc, #620]	; (8009ab0 <DRV_updateFromMaster+0x2ac>)
 8009842:	2001      	movs	r0, #1
 8009844:	f001 f87c 	bl	800a940 <LOG_log>

      l_speed = atoi(&l_command[2]);
 8009848:	f107 0314 	add.w	r3, r7, #20
 800984c:	3302      	adds	r3, #2
 800984e:	4618      	mov	r0, r3
 8009850:	f001 fe4c 	bl	800b4ec <atoi>
 8009854:	6578      	str	r0, [r7, #84]	; 0x54

      /* Check that speed is in allowed range */
      if ((l_speed < STP_MASTER_MIN_SPEED) || (l_speed > STP_MASTER_MAX_SPEED))
 8009856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009858:	2b00      	cmp	r3, #0
 800985a:	db02      	blt.n	8009862 <DRV_updateFromMaster+0x5e>
 800985c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800985e:	2b64      	cmp	r3, #100	; 0x64
 8009860:	dd05      	ble.n	800986e <DRV_updateFromMaster+0x6a>
      {
        LOG_error("Drive got out of range speed: %d", l_speed);
 8009862:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009864:	4993      	ldr	r1, [pc, #588]	; (8009ab4 <DRV_updateFromMaster+0x2b0>)
 8009866:	2003      	movs	r0, #3
 8009868:	f001 f86a 	bl	800a940 <LOG_log>
 800986c:	e1c7      	b.n	8009bfe <DRV_updateFromMaster+0x3fa>
      }
      else
      {
        l_speed = UTI_normalizeIntValue(l_speed ,
 800986e:	2300      	movs	r3, #0
 8009870:	9301      	str	r3, [sp, #4]
 8009872:	2328      	movs	r3, #40	; 0x28
 8009874:	9300      	str	r3, [sp, #0]
 8009876:	2300      	movs	r3, #0
 8009878:	2264      	movs	r2, #100	; 0x64
 800987a:	2100      	movs	r1, #0
 800987c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800987e:	f001 fde6 	bl	800b44e <UTI_normalizeIntValue>
 8009882:	6578      	str	r0, [r7, #84]	; 0x54
                                        STP_DRIVE_MIN_SPEED,
                                        STP_DRIVE_MAX_SPEED,
                                        false);

        /* Stop */
        if ((l_command[0] == 'S') && (l_command[1] == 'T'))
 8009884:	7d3b      	ldrb	r3, [r7, #20]
 8009886:	2b53      	cmp	r3, #83	; 0x53
 8009888:	d119      	bne.n	80098be <DRV_updateFromMaster+0xba>
 800988a:	7d7b      	ldrb	r3, [r7, #21]
 800988c:	2b54      	cmp	r3, #84	; 0x54
 800988e:	d116      	bne.n	80098be <DRV_updateFromMaster+0xba>
        {
          DRV_setDirectionsStop();
 8009890:	f000 fb9a 	bl	8009fc8 <DRV_setDirectionsStop>

          PID_setTargetValue(&g_DRV_pidFrontRight, 0);
 8009894:	f04f 0100 	mov.w	r1, #0
 8009898:	4887      	ldr	r0, [pc, #540]	; (8009ab8 <DRV_updateFromMaster+0x2b4>)
 800989a:	f001 fae4 	bl	800ae66 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft , 0);
 800989e:	f04f 0100 	mov.w	r1, #0
 80098a2:	4886      	ldr	r0, [pc, #536]	; (8009abc <DRV_updateFromMaster+0x2b8>)
 80098a4:	f001 fadf 	bl	800ae66 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight , 0);
 80098a8:	f04f 0100 	mov.w	r1, #0
 80098ac:	4884      	ldr	r0, [pc, #528]	; (8009ac0 <DRV_updateFromMaster+0x2bc>)
 80098ae:	f001 fada 	bl	800ae66 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  , 0);
 80098b2:	f04f 0100 	mov.w	r1, #0
 80098b6:	4883      	ldr	r0, [pc, #524]	; (8009ac4 <DRV_updateFromMaster+0x2c0>)
 80098b8:	f001 fad5 	bl	800ae66 <PID_setTargetValue>
 80098bc:	e19f      	b.n	8009bfe <DRV_updateFromMaster+0x3fa>
        }
        /* Forward Straight */
        else if ((l_command[0] == 'F') && (l_command[1] == 'S'))
 80098be:	7d3b      	ldrb	r3, [r7, #20]
 80098c0:	2b46      	cmp	r3, #70	; 0x46
 80098c2:	d125      	bne.n	8009910 <DRV_updateFromMaster+0x10c>
 80098c4:	7d7b      	ldrb	r3, [r7, #21]
 80098c6:	2b53      	cmp	r3, #83	; 0x53
 80098c8:	d122      	bne.n	8009910 <DRV_updateFromMaster+0x10c>
        {
          DRV_setDirectionsForward();
 80098ca:	f000 fb99 	bl	800a000 <DRV_setDirectionsForward>

          PID_setTargetValue(&g_DRV_pidFrontRight, l_speed);
 80098ce:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80098d0:	f7f7 fa00 	bl	8000cd4 <__aeabi_i2f>
 80098d4:	4603      	mov	r3, r0
 80098d6:	4619      	mov	r1, r3
 80098d8:	4877      	ldr	r0, [pc, #476]	; (8009ab8 <DRV_updateFromMaster+0x2b4>)
 80098da:	f001 fac4 	bl	800ae66 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft , l_speed);
 80098de:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80098e0:	f7f7 f9f8 	bl	8000cd4 <__aeabi_i2f>
 80098e4:	4603      	mov	r3, r0
 80098e6:	4619      	mov	r1, r3
 80098e8:	4874      	ldr	r0, [pc, #464]	; (8009abc <DRV_updateFromMaster+0x2b8>)
 80098ea:	f001 fabc 	bl	800ae66 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight , l_speed);
 80098ee:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80098f0:	f7f7 f9f0 	bl	8000cd4 <__aeabi_i2f>
 80098f4:	4603      	mov	r3, r0
 80098f6:	4619      	mov	r1, r3
 80098f8:	4871      	ldr	r0, [pc, #452]	; (8009ac0 <DRV_updateFromMaster+0x2bc>)
 80098fa:	f001 fab4 	bl	800ae66 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  , l_speed);
 80098fe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009900:	f7f7 f9e8 	bl	8000cd4 <__aeabi_i2f>
 8009904:	4603      	mov	r3, r0
 8009906:	4619      	mov	r1, r3
 8009908:	486e      	ldr	r0, [pc, #440]	; (8009ac4 <DRV_updateFromMaster+0x2c0>)
 800990a:	f001 faac 	bl	800ae66 <PID_setTargetValue>
 800990e:	e176      	b.n	8009bfe <DRV_updateFromMaster+0x3fa>
        }
        /* Move Backward */
        else if ((l_command[0] == 'B') && (l_command[1] == 'S'))
 8009910:	7d3b      	ldrb	r3, [r7, #20]
 8009912:	2b42      	cmp	r3, #66	; 0x42
 8009914:	d125      	bne.n	8009962 <DRV_updateFromMaster+0x15e>
 8009916:	7d7b      	ldrb	r3, [r7, #21]
 8009918:	2b53      	cmp	r3, #83	; 0x53
 800991a:	d122      	bne.n	8009962 <DRV_updateFromMaster+0x15e>
        {
          DRV_setDirectionsBackward();
 800991c:	f000 fb8c 	bl	800a038 <DRV_setDirectionsBackward>

          PID_setTargetValue(&g_DRV_pidFrontRight, l_speed);
 8009920:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009922:	f7f7 f9d7 	bl	8000cd4 <__aeabi_i2f>
 8009926:	4603      	mov	r3, r0
 8009928:	4619      	mov	r1, r3
 800992a:	4863      	ldr	r0, [pc, #396]	; (8009ab8 <DRV_updateFromMaster+0x2b4>)
 800992c:	f001 fa9b 	bl	800ae66 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft , l_speed);
 8009930:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009932:	f7f7 f9cf 	bl	8000cd4 <__aeabi_i2f>
 8009936:	4603      	mov	r3, r0
 8009938:	4619      	mov	r1, r3
 800993a:	4860      	ldr	r0, [pc, #384]	; (8009abc <DRV_updateFromMaster+0x2b8>)
 800993c:	f001 fa93 	bl	800ae66 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight , l_speed);
 8009940:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009942:	f7f7 f9c7 	bl	8000cd4 <__aeabi_i2f>
 8009946:	4603      	mov	r3, r0
 8009948:	4619      	mov	r1, r3
 800994a:	485d      	ldr	r0, [pc, #372]	; (8009ac0 <DRV_updateFromMaster+0x2bc>)
 800994c:	f001 fa8b 	bl	800ae66 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  , l_speed);
 8009950:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009952:	f7f7 f9bf 	bl	8000cd4 <__aeabi_i2f>
 8009956:	4603      	mov	r3, r0
 8009958:	4619      	mov	r1, r3
 800995a:	485a      	ldr	r0, [pc, #360]	; (8009ac4 <DRV_updateFromMaster+0x2c0>)
 800995c:	f001 fa83 	bl	800ae66 <PID_setTargetValue>
 8009960:	e14d      	b.n	8009bfe <DRV_updateFromMaster+0x3fa>
        }
        /* TurN (i.e. Rotate) Left */
        else if ((l_command[0] == 'R') && (l_command[1] == 'L'))
 8009962:	7d3b      	ldrb	r3, [r7, #20]
 8009964:	2b52      	cmp	r3, #82	; 0x52
 8009966:	d125      	bne.n	80099b4 <DRV_updateFromMaster+0x1b0>
 8009968:	7d7b      	ldrb	r3, [r7, #21]
 800996a:	2b4c      	cmp	r3, #76	; 0x4c
 800996c:	d122      	bne.n	80099b4 <DRV_updateFromMaster+0x1b0>
        {
          DRV_setDirectionsTurnLeft();
 800996e:	f000 fbbf 	bl	800a0f0 <DRV_setDirectionsTurnLeft>

          PID_setTargetValue(&g_DRV_pidFrontRight, l_speed);
 8009972:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009974:	f7f7 f9ae 	bl	8000cd4 <__aeabi_i2f>
 8009978:	4603      	mov	r3, r0
 800997a:	4619      	mov	r1, r3
 800997c:	484e      	ldr	r0, [pc, #312]	; (8009ab8 <DRV_updateFromMaster+0x2b4>)
 800997e:	f001 fa72 	bl	800ae66 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft , l_speed);
 8009982:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009984:	f7f7 f9a6 	bl	8000cd4 <__aeabi_i2f>
 8009988:	4603      	mov	r3, r0
 800998a:	4619      	mov	r1, r3
 800998c:	484b      	ldr	r0, [pc, #300]	; (8009abc <DRV_updateFromMaster+0x2b8>)
 800998e:	f001 fa6a 	bl	800ae66 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight , l_speed);
 8009992:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009994:	f7f7 f99e 	bl	8000cd4 <__aeabi_i2f>
 8009998:	4603      	mov	r3, r0
 800999a:	4619      	mov	r1, r3
 800999c:	4848      	ldr	r0, [pc, #288]	; (8009ac0 <DRV_updateFromMaster+0x2bc>)
 800999e:	f001 fa62 	bl	800ae66 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  , l_speed);
 80099a2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80099a4:	f7f7 f996 	bl	8000cd4 <__aeabi_i2f>
 80099a8:	4603      	mov	r3, r0
 80099aa:	4619      	mov	r1, r3
 80099ac:	4845      	ldr	r0, [pc, #276]	; (8009ac4 <DRV_updateFromMaster+0x2c0>)
 80099ae:	f001 fa5a 	bl	800ae66 <PID_setTargetValue>
 80099b2:	e124      	b.n	8009bfe <DRV_updateFromMaster+0x3fa>
        }
        /* TurN (i.e. Rotate) Right */
        else if ((l_command[0] == 'R') && (l_command[1] == 'R'))
 80099b4:	7d3b      	ldrb	r3, [r7, #20]
 80099b6:	2b52      	cmp	r3, #82	; 0x52
 80099b8:	d125      	bne.n	8009a06 <DRV_updateFromMaster+0x202>
 80099ba:	7d7b      	ldrb	r3, [r7, #21]
 80099bc:	2b52      	cmp	r3, #82	; 0x52
 80099be:	d122      	bne.n	8009a06 <DRV_updateFromMaster+0x202>
        {
          DRV_setDirectionsTurnRight();
 80099c0:	f000 fbb2 	bl	800a128 <DRV_setDirectionsTurnRight>

          PID_setTargetValue(&g_DRV_pidFrontRight, l_speed);
 80099c4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80099c6:	f7f7 f985 	bl	8000cd4 <__aeabi_i2f>
 80099ca:	4603      	mov	r3, r0
 80099cc:	4619      	mov	r1, r3
 80099ce:	483a      	ldr	r0, [pc, #232]	; (8009ab8 <DRV_updateFromMaster+0x2b4>)
 80099d0:	f001 fa49 	bl	800ae66 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft , l_speed);
 80099d4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80099d6:	f7f7 f97d 	bl	8000cd4 <__aeabi_i2f>
 80099da:	4603      	mov	r3, r0
 80099dc:	4619      	mov	r1, r3
 80099de:	4837      	ldr	r0, [pc, #220]	; (8009abc <DRV_updateFromMaster+0x2b8>)
 80099e0:	f001 fa41 	bl	800ae66 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight , l_speed);
 80099e4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80099e6:	f7f7 f975 	bl	8000cd4 <__aeabi_i2f>
 80099ea:	4603      	mov	r3, r0
 80099ec:	4619      	mov	r1, r3
 80099ee:	4834      	ldr	r0, [pc, #208]	; (8009ac0 <DRV_updateFromMaster+0x2bc>)
 80099f0:	f001 fa39 	bl	800ae66 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  , l_speed);
 80099f4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80099f6:	f7f7 f96d 	bl	8000cd4 <__aeabi_i2f>
 80099fa:	4603      	mov	r3, r0
 80099fc:	4619      	mov	r1, r3
 80099fe:	4831      	ldr	r0, [pc, #196]	; (8009ac4 <DRV_updateFromMaster+0x2c0>)
 8009a00:	f001 fa31 	bl	800ae66 <PID_setTargetValue>
 8009a04:	e0fb      	b.n	8009bfe <DRV_updateFromMaster+0x3fa>
        }
        /* Translate Left */
        else if ((l_command[0] == 'T') && (l_command[1] == 'L'))
 8009a06:	7d3b      	ldrb	r3, [r7, #20]
 8009a08:	2b54      	cmp	r3, #84	; 0x54
 8009a0a:	d125      	bne.n	8009a58 <DRV_updateFromMaster+0x254>
 8009a0c:	7d7b      	ldrb	r3, [r7, #21]
 8009a0e:	2b4c      	cmp	r3, #76	; 0x4c
 8009a10:	d122      	bne.n	8009a58 <DRV_updateFromMaster+0x254>
        {
          DRV_setDirectionsTranslateLeft();
 8009a12:	f000 fba5 	bl	800a160 <DRV_setDirectionsTranslateLeft>

          PID_setTargetValue(&g_DRV_pidFrontRight, l_speed);
 8009a16:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009a18:	f7f7 f95c 	bl	8000cd4 <__aeabi_i2f>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	4619      	mov	r1, r3
 8009a20:	4825      	ldr	r0, [pc, #148]	; (8009ab8 <DRV_updateFromMaster+0x2b4>)
 8009a22:	f001 fa20 	bl	800ae66 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft , l_speed);
 8009a26:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009a28:	f7f7 f954 	bl	8000cd4 <__aeabi_i2f>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	4619      	mov	r1, r3
 8009a30:	4822      	ldr	r0, [pc, #136]	; (8009abc <DRV_updateFromMaster+0x2b8>)
 8009a32:	f001 fa18 	bl	800ae66 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight , l_speed);
 8009a36:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009a38:	f7f7 f94c 	bl	8000cd4 <__aeabi_i2f>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	4619      	mov	r1, r3
 8009a40:	481f      	ldr	r0, [pc, #124]	; (8009ac0 <DRV_updateFromMaster+0x2bc>)
 8009a42:	f001 fa10 	bl	800ae66 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  , l_speed);
 8009a46:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009a48:	f7f7 f944 	bl	8000cd4 <__aeabi_i2f>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	4619      	mov	r1, r3
 8009a50:	481c      	ldr	r0, [pc, #112]	; (8009ac4 <DRV_updateFromMaster+0x2c0>)
 8009a52:	f001 fa08 	bl	800ae66 <PID_setTargetValue>
 8009a56:	e0d2      	b.n	8009bfe <DRV_updateFromMaster+0x3fa>
        }
        /* Translate Right */
        else if ((l_command[0] == 'T') && (l_command[1] == 'R'))
 8009a58:	7d3b      	ldrb	r3, [r7, #20]
 8009a5a:	2b54      	cmp	r3, #84	; 0x54
 8009a5c:	d134      	bne.n	8009ac8 <DRV_updateFromMaster+0x2c4>
 8009a5e:	7d7b      	ldrb	r3, [r7, #21]
 8009a60:	2b52      	cmp	r3, #82	; 0x52
 8009a62:	d131      	bne.n	8009ac8 <DRV_updateFromMaster+0x2c4>
        {
          DRV_setDirectionsTranslateRight();
 8009a64:	f000 fb98 	bl	800a198 <DRV_setDirectionsTranslateRight>

          PID_setTargetValue(&g_DRV_pidFrontRight, l_speed);
 8009a68:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009a6a:	f7f7 f933 	bl	8000cd4 <__aeabi_i2f>
 8009a6e:	4603      	mov	r3, r0
 8009a70:	4619      	mov	r1, r3
 8009a72:	4811      	ldr	r0, [pc, #68]	; (8009ab8 <DRV_updateFromMaster+0x2b4>)
 8009a74:	f001 f9f7 	bl	800ae66 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft , l_speed);
 8009a78:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009a7a:	f7f7 f92b 	bl	8000cd4 <__aeabi_i2f>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	4619      	mov	r1, r3
 8009a82:	480e      	ldr	r0, [pc, #56]	; (8009abc <DRV_updateFromMaster+0x2b8>)
 8009a84:	f001 f9ef 	bl	800ae66 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight , l_speed);
 8009a88:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009a8a:	f7f7 f923 	bl	8000cd4 <__aeabi_i2f>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	4619      	mov	r1, r3
 8009a92:	480b      	ldr	r0, [pc, #44]	; (8009ac0 <DRV_updateFromMaster+0x2bc>)
 8009a94:	f001 f9e7 	bl	800ae66 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  , l_speed);
 8009a98:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009a9a:	f7f7 f91b 	bl	8000cd4 <__aeabi_i2f>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	4808      	ldr	r0, [pc, #32]	; (8009ac4 <DRV_updateFromMaster+0x2c0>)
 8009aa4:	f001 f9df 	bl	800ae66 <PID_setTargetValue>
 8009aa8:	e0a9      	b.n	8009bfe <DRV_updateFromMaster+0x3fa>
 8009aaa:	bf00      	nop
 8009aac:	2000025a 	.word	0x2000025a
 8009ab0:	0800ef50 	.word	0x0800ef50
 8009ab4:	0800ef68 	.word	0x0800ef68
 8009ab8:	2000025c 	.word	0x2000025c
 8009abc:	2000028c 	.word	0x2000028c
 8009ac0:	200002ec 	.word	0x200002ec
 8009ac4:	200002bc 	.word	0x200002bc
        }
        /* Forward Left */
        else if ((l_command[0] == 'F') && (l_command[1] == 'L'))
 8009ac8:	7d3b      	ldrb	r3, [r7, #20]
 8009aca:	2b46      	cmp	r3, #70	; 0x46
 8009acc:	d11f      	bne.n	8009b0e <DRV_updateFromMaster+0x30a>
 8009ace:	7d7b      	ldrb	r3, [r7, #21]
 8009ad0:	2b4c      	cmp	r3, #76	; 0x4c
 8009ad2:	d11c      	bne.n	8009b0e <DRV_updateFromMaster+0x30a>
        {
          DRV_setDirectionsForwardLeft();
 8009ad4:	f000 fadc 	bl	800a090 <DRV_setDirectionsForwardLeft>

          PID_setTargetValue(&g_DRV_pidFrontRight, l_speed);
 8009ad8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009ada:	f7f7 f8fb 	bl	8000cd4 <__aeabi_i2f>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	483f      	ldr	r0, [pc, #252]	; (8009be0 <DRV_updateFromMaster+0x3dc>)
 8009ae4:	f001 f9bf 	bl	800ae66 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft ,       0);
 8009ae8:	f04f 0100 	mov.w	r1, #0
 8009aec:	483d      	ldr	r0, [pc, #244]	; (8009be4 <DRV_updateFromMaster+0x3e0>)
 8009aee:	f001 f9ba 	bl	800ae66 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight ,       0);
 8009af2:	f04f 0100 	mov.w	r1, #0
 8009af6:	483c      	ldr	r0, [pc, #240]	; (8009be8 <DRV_updateFromMaster+0x3e4>)
 8009af8:	f001 f9b5 	bl	800ae66 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  , l_speed);
 8009afc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009afe:	f7f7 f8e9 	bl	8000cd4 <__aeabi_i2f>
 8009b02:	4603      	mov	r3, r0
 8009b04:	4619      	mov	r1, r3
 8009b06:	4839      	ldr	r0, [pc, #228]	; (8009bec <DRV_updateFromMaster+0x3e8>)
 8009b08:	f001 f9ad 	bl	800ae66 <PID_setTargetValue>
 8009b0c:	e077      	b.n	8009bfe <DRV_updateFromMaster+0x3fa>
        }
        /* Forward Right */
        else if ((l_command[0] == 'F') && (l_command[1] == 'R'))
 8009b0e:	7d3b      	ldrb	r3, [r7, #20]
 8009b10:	2b46      	cmp	r3, #70	; 0x46
 8009b12:	d11f      	bne.n	8009b54 <DRV_updateFromMaster+0x350>
 8009b14:	7d7b      	ldrb	r3, [r7, #21]
 8009b16:	2b52      	cmp	r3, #82	; 0x52
 8009b18:	d11c      	bne.n	8009b54 <DRV_updateFromMaster+0x350>
        {
          DRV_setDirectionsForwardRight();
 8009b1a:	f000 faa9 	bl	800a070 <DRV_setDirectionsForwardRight>

          PID_setTargetValue(&g_DRV_pidFrontRight,       0);
 8009b1e:	f04f 0100 	mov.w	r1, #0
 8009b22:	482f      	ldr	r0, [pc, #188]	; (8009be0 <DRV_updateFromMaster+0x3dc>)
 8009b24:	f001 f99f 	bl	800ae66 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft , l_speed);
 8009b28:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009b2a:	f7f7 f8d3 	bl	8000cd4 <__aeabi_i2f>
 8009b2e:	4603      	mov	r3, r0
 8009b30:	4619      	mov	r1, r3
 8009b32:	482c      	ldr	r0, [pc, #176]	; (8009be4 <DRV_updateFromMaster+0x3e0>)
 8009b34:	f001 f997 	bl	800ae66 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight , l_speed);
 8009b38:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009b3a:	f7f7 f8cb 	bl	8000cd4 <__aeabi_i2f>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	4619      	mov	r1, r3
 8009b42:	4829      	ldr	r0, [pc, #164]	; (8009be8 <DRV_updateFromMaster+0x3e4>)
 8009b44:	f001 f98f 	bl	800ae66 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  ,       0);
 8009b48:	f04f 0100 	mov.w	r1, #0
 8009b4c:	4827      	ldr	r0, [pc, #156]	; (8009bec <DRV_updateFromMaster+0x3e8>)
 8009b4e:	f001 f98a 	bl	800ae66 <PID_setTargetValue>
 8009b52:	e054      	b.n	8009bfe <DRV_updateFromMaster+0x3fa>
        }
        /* Backward Left */
        else if ((l_command[0] == 'B') && (l_command[1] == 'L'))
 8009b54:	7d3b      	ldrb	r3, [r7, #20]
 8009b56:	2b42      	cmp	r3, #66	; 0x42
 8009b58:	d11f      	bne.n	8009b9a <DRV_updateFromMaster+0x396>
 8009b5a:	7d7b      	ldrb	r3, [r7, #21]
 8009b5c:	2b4c      	cmp	r3, #76	; 0x4c
 8009b5e:	d11c      	bne.n	8009b9a <DRV_updateFromMaster+0x396>
        {
          DRV_setDirectionsBackwardLeft();
 8009b60:	f000 fab6 	bl	800a0d0 <DRV_setDirectionsBackwardLeft>

          PID_setTargetValue(&g_DRV_pidFrontRight,       0);
 8009b64:	f04f 0100 	mov.w	r1, #0
 8009b68:	481d      	ldr	r0, [pc, #116]	; (8009be0 <DRV_updateFromMaster+0x3dc>)
 8009b6a:	f001 f97c 	bl	800ae66 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft , l_speed);
 8009b6e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009b70:	f7f7 f8b0 	bl	8000cd4 <__aeabi_i2f>
 8009b74:	4603      	mov	r3, r0
 8009b76:	4619      	mov	r1, r3
 8009b78:	481a      	ldr	r0, [pc, #104]	; (8009be4 <DRV_updateFromMaster+0x3e0>)
 8009b7a:	f001 f974 	bl	800ae66 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight , l_speed);
 8009b7e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009b80:	f7f7 f8a8 	bl	8000cd4 <__aeabi_i2f>
 8009b84:	4603      	mov	r3, r0
 8009b86:	4619      	mov	r1, r3
 8009b88:	4817      	ldr	r0, [pc, #92]	; (8009be8 <DRV_updateFromMaster+0x3e4>)
 8009b8a:	f001 f96c 	bl	800ae66 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  ,       0);
 8009b8e:	f04f 0100 	mov.w	r1, #0
 8009b92:	4816      	ldr	r0, [pc, #88]	; (8009bec <DRV_updateFromMaster+0x3e8>)
 8009b94:	f001 f967 	bl	800ae66 <PID_setTargetValue>
 8009b98:	e031      	b.n	8009bfe <DRV_updateFromMaster+0x3fa>
        }
        /* Forward Right */
        else if ((l_command[0] == 'B') && (l_command[1] == 'R'))
 8009b9a:	7d3b      	ldrb	r3, [r7, #20]
 8009b9c:	2b42      	cmp	r3, #66	; 0x42
 8009b9e:	d127      	bne.n	8009bf0 <DRV_updateFromMaster+0x3ec>
 8009ba0:	7d7b      	ldrb	r3, [r7, #21]
 8009ba2:	2b52      	cmp	r3, #82	; 0x52
 8009ba4:	d124      	bne.n	8009bf0 <DRV_updateFromMaster+0x3ec>
        {
          DRV_setDirectionsBackwardRight();
 8009ba6:	f000 fa83 	bl	800a0b0 <DRV_setDirectionsBackwardRight>

          PID_setTargetValue(&g_DRV_pidFrontRight, l_speed);
 8009baa:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009bac:	f7f7 f892 	bl	8000cd4 <__aeabi_i2f>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	480a      	ldr	r0, [pc, #40]	; (8009be0 <DRV_updateFromMaster+0x3dc>)
 8009bb6:	f001 f956 	bl	800ae66 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidFrontLeft ,       0);
 8009bba:	f04f 0100 	mov.w	r1, #0
 8009bbe:	4809      	ldr	r0, [pc, #36]	; (8009be4 <DRV_updateFromMaster+0x3e0>)
 8009bc0:	f001 f951 	bl	800ae66 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearRight ,       0);
 8009bc4:	f04f 0100 	mov.w	r1, #0
 8009bc8:	4807      	ldr	r0, [pc, #28]	; (8009be8 <DRV_updateFromMaster+0x3e4>)
 8009bca:	f001 f94c 	bl	800ae66 <PID_setTargetValue>
          PID_setTargetValue(&g_DRV_pidRearLeft  , l_speed);
 8009bce:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009bd0:	f7f7 f880 	bl	8000cd4 <__aeabi_i2f>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	4804      	ldr	r0, [pc, #16]	; (8009bec <DRV_updateFromMaster+0x3e8>)
 8009bda:	f001 f944 	bl	800ae66 <PID_setTargetValue>
 8009bde:	e00e      	b.n	8009bfe <DRV_updateFromMaster+0x3fa>
 8009be0:	2000025c 	.word	0x2000025c
 8009be4:	2000028c 	.word	0x2000028c
 8009be8:	200002ec 	.word	0x200002ec
 8009bec:	200002bc 	.word	0x200002bc
        }
        else
        {
          LOG_error("Drive got unsupported command: '%s'", l_command);
 8009bf0:	f107 0314 	add.w	r3, r7, #20
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	4989      	ldr	r1, [pc, #548]	; (8009e1c <DRV_updateFromMaster+0x618>)
 8009bf8:	2003      	movs	r0, #3
 8009bfa:	f000 fea1 	bl	800a940 <LOG_log>
        }
      }
    }

    /* Get measurements */
    l_measuredSpeedFrontRight = fabs((float)ENC_getCount(&g_DRV_encoderFrontRight) / (float)p_deltaTime * STP_DRIVE_PID_ENCODER_TO_SPEED_FACTOR);
 8009bfe:	4888      	ldr	r0, [pc, #544]	; (8009e20 <DRV_updateFromMaster+0x61c>)
 8009c00:	f000 fd6d 	bl	800a6de <ENC_getCount>
 8009c04:	4603      	mov	r3, r0
 8009c06:	4618      	mov	r0, r3
 8009c08:	f7f7 f864 	bl	8000cd4 <__aeabi_i2f>
 8009c0c:	4604      	mov	r4, r0
 8009c0e:	887b      	ldrh	r3, [r7, #2]
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7f7 f85b 	bl	8000ccc <__aeabi_ui2f>
 8009c16:	4603      	mov	r3, r0
 8009c18:	4619      	mov	r1, r3
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	f7f7 f962 	bl	8000ee4 <__aeabi_fdiv>
 8009c20:	4603      	mov	r3, r0
 8009c22:	4980      	ldr	r1, [pc, #512]	; (8009e24 <DRV_updateFromMaster+0x620>)
 8009c24:	4618      	mov	r0, r3
 8009c26:	f7f7 f8a9 	bl	8000d7c <__aeabi_fmul>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c30:	653b      	str	r3, [r7, #80]	; 0x50
    l_measuredSpeedFrontLeft  = fabs((float)ENC_getCount(&g_DRV_encoderFrontLeft ) / (float)p_deltaTime * STP_DRIVE_PID_ENCODER_TO_SPEED_FACTOR);
 8009c32:	487d      	ldr	r0, [pc, #500]	; (8009e28 <DRV_updateFromMaster+0x624>)
 8009c34:	f000 fd53 	bl	800a6de <ENC_getCount>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7f7 f84a 	bl	8000cd4 <__aeabi_i2f>
 8009c40:	4604      	mov	r4, r0
 8009c42:	887b      	ldrh	r3, [r7, #2]
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7f7 f841 	bl	8000ccc <__aeabi_ui2f>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	4620      	mov	r0, r4
 8009c50:	f7f7 f948 	bl	8000ee4 <__aeabi_fdiv>
 8009c54:	4603      	mov	r3, r0
 8009c56:	4973      	ldr	r1, [pc, #460]	; (8009e24 <DRV_updateFromMaster+0x620>)
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7f7 f88f 	bl	8000d7c <__aeabi_fmul>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c64:	64fb      	str	r3, [r7, #76]	; 0x4c
    l_measuredSpeedRearRight  = fabs((float)ENC_getCount(&g_DRV_encoderRearRight ) / (float)p_deltaTime * STP_DRIVE_PID_ENCODER_TO_SPEED_FACTOR);
 8009c66:	4871      	ldr	r0, [pc, #452]	; (8009e2c <DRV_updateFromMaster+0x628>)
 8009c68:	f000 fd39 	bl	800a6de <ENC_getCount>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7f7 f830 	bl	8000cd4 <__aeabi_i2f>
 8009c74:	4604      	mov	r4, r0
 8009c76:	887b      	ldrh	r3, [r7, #2]
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7f7 f827 	bl	8000ccc <__aeabi_ui2f>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	4619      	mov	r1, r3
 8009c82:	4620      	mov	r0, r4
 8009c84:	f7f7 f92e 	bl	8000ee4 <__aeabi_fdiv>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	4966      	ldr	r1, [pc, #408]	; (8009e24 <DRV_updateFromMaster+0x620>)
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f7f7 f875 	bl	8000d7c <__aeabi_fmul>
 8009c92:	4603      	mov	r3, r0
 8009c94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c98:	64bb      	str	r3, [r7, #72]	; 0x48
    l_measuredSpeedRearLeft   = fabs((float)ENC_getCount(&g_DRV_encoderRearLeft  ) / (float)p_deltaTime * STP_DRIVE_PID_ENCODER_TO_SPEED_FACTOR);
 8009c9a:	4865      	ldr	r0, [pc, #404]	; (8009e30 <DRV_updateFromMaster+0x62c>)
 8009c9c:	f000 fd1f 	bl	800a6de <ENC_getCount>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7f7 f816 	bl	8000cd4 <__aeabi_i2f>
 8009ca8:	4604      	mov	r4, r0
 8009caa:	887b      	ldrh	r3, [r7, #2]
 8009cac:	4618      	mov	r0, r3
 8009cae:	f7f7 f80d 	bl	8000ccc <__aeabi_ui2f>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	f7f7 f914 	bl	8000ee4 <__aeabi_fdiv>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	4959      	ldr	r1, [pc, #356]	; (8009e24 <DRV_updateFromMaster+0x620>)
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f7f7 f85b 	bl	8000d7c <__aeabi_fmul>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ccc:	647b      	str	r3, [r7, #68]	; 0x44

    CBU_push(&g_DRV_speedBufferFrontRight, l_measuredSpeedFrontRight);
 8009cce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009cd0:	4858      	ldr	r0, [pc, #352]	; (8009e34 <DRV_updateFromMaster+0x630>)
 8009cd2:	f7ff fa2b 	bl	800912c <CBU_push>
    CBU_push(&g_DRV_speedBufferFrontLeft , l_measuredSpeedFrontLeft );
 8009cd6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009cd8:	4857      	ldr	r0, [pc, #348]	; (8009e38 <DRV_updateFromMaster+0x634>)
 8009cda:	f7ff fa27 	bl	800912c <CBU_push>
    CBU_push(&g_DRV_speedBufferRearRight , l_measuredSpeedRearRight );
 8009cde:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009ce0:	4856      	ldr	r0, [pc, #344]	; (8009e3c <DRV_updateFromMaster+0x638>)
 8009ce2:	f7ff fa23 	bl	800912c <CBU_push>
    CBU_push(&g_DRV_speedBufferRearLeft  , l_measuredSpeedRearLeft  );
 8009ce6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009ce8:	4855      	ldr	r0, [pc, #340]	; (8009e40 <DRV_updateFromMaster+0x63c>)
 8009cea:	f7ff fa1f 	bl	800912c <CBU_push>

    l_averageSpeedFrontRight = CBU_getAverage(&g_DRV_speedBufferFrontRight);
 8009cee:	4851      	ldr	r0, [pc, #324]	; (8009e34 <DRV_updateFromMaster+0x630>)
 8009cf0:	f7ff fa43 	bl	800917a <CBU_getAverage>
 8009cf4:	6438      	str	r0, [r7, #64]	; 0x40
    l_averageSpeedFrontLeft  = CBU_getAverage(&g_DRV_speedBufferFrontLeft );
 8009cf6:	4850      	ldr	r0, [pc, #320]	; (8009e38 <DRV_updateFromMaster+0x634>)
 8009cf8:	f7ff fa3f 	bl	800917a <CBU_getAverage>
 8009cfc:	63f8      	str	r0, [r7, #60]	; 0x3c
    l_averageSpeedRearRight  = CBU_getAverage(&g_DRV_speedBufferRearRight );
 8009cfe:	484f      	ldr	r0, [pc, #316]	; (8009e3c <DRV_updateFromMaster+0x638>)
 8009d00:	f7ff fa3b 	bl	800917a <CBU_getAverage>
 8009d04:	63b8      	str	r0, [r7, #56]	; 0x38
    l_averageSpeedRearLeft   = CBU_getAverage(&g_DRV_speedBufferRearLeft  );
 8009d06:	484e      	ldr	r0, [pc, #312]	; (8009e40 <DRV_updateFromMaster+0x63c>)
 8009d08:	f7ff fa37 	bl	800917a <CBU_getAverage>
 8009d0c:	6378      	str	r0, [r7, #52]	; 0x34

    HAL_RTC_GetTime(&hrtc, &l_time, RTC_FORMAT_BCD);
 8009d0e:	f107 0310 	add.w	r3, r7, #16
 8009d12:	2201      	movs	r2, #1
 8009d14:	4619      	mov	r1, r3
 8009d16:	484b      	ldr	r0, [pc, #300]	; (8009e44 <DRV_updateFromMaster+0x640>)
 8009d18:	f7fb fa2a 	bl	8005170 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &l_date, RTC_FORMAT_BCD);
 8009d1c:	f107 030c 	add.w	r3, r7, #12
 8009d20:	2201      	movs	r2, #1
 8009d22:	4619      	mov	r1, r3
 8009d24:	4847      	ldr	r0, [pc, #284]	; (8009e44 <DRV_updateFromMaster+0x640>)
 8009d26:	f7fb fc27 	bl	8005578 <HAL_RTC_GetDate>

    if (UTI_turnRtcTimeToSeconds(&l_time) - UTI_turnRtcTimeToSeconds(&l_lastTime) >= 3)
 8009d2a:	f107 0310 	add.w	r3, r7, #16
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f001 fb49 	bl	800b3c6 <UTI_turnRtcTimeToSeconds>
 8009d34:	4604      	mov	r4, r0
 8009d36:	4844      	ldr	r0, [pc, #272]	; (8009e48 <DRV_updateFromMaster+0x644>)
 8009d38:	f001 fb45 	bl	800b3c6 <UTI_turnRtcTimeToSeconds>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	1ae3      	subs	r3, r4, r3
 8009d40:	2b02      	cmp	r3, #2
 8009d42:	d923      	bls.n	8009d8c <DRV_updateFromMaster+0x588>
    {
      l_lastTime = l_time;
 8009d44:	4b40      	ldr	r3, [pc, #256]	; (8009e48 <DRV_updateFromMaster+0x644>)
 8009d46:	f107 0210 	add.w	r2, r7, #16
 8009d4a:	6812      	ldr	r2, [r2, #0]
 8009d4c:	4611      	mov	r1, r2
 8009d4e:	8019      	strh	r1, [r3, #0]
 8009d50:	3302      	adds	r3, #2
 8009d52:	0c12      	lsrs	r2, r2, #16
 8009d54:	701a      	strb	r2, [r3, #0]
      PID_logInfo(&g_DRV_pidFrontRight);
 8009d56:	483d      	ldr	r0, [pc, #244]	; (8009e4c <DRV_updateFromMaster+0x648>)
 8009d58:	f001 f94c 	bl	800aff4 <PID_logInfo>
      LOG_info("%d, %d, %d, %d",
 8009d5c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009d5e:	f7f7 f95d 	bl	800101c <__aeabi_f2iz>
 8009d62:	4605      	mov	r5, r0
 8009d64:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009d66:	f7f7 f959 	bl	800101c <__aeabi_f2iz>
 8009d6a:	4606      	mov	r6, r0
 8009d6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009d6e:	f7f7 f955 	bl	800101c <__aeabi_f2iz>
 8009d72:	4604      	mov	r4, r0
 8009d74:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009d76:	f7f7 f951 	bl	800101c <__aeabi_f2iz>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	9301      	str	r3, [sp, #4]
 8009d7e:	9400      	str	r4, [sp, #0]
 8009d80:	4633      	mov	r3, r6
 8009d82:	462a      	mov	r2, r5
 8009d84:	4932      	ldr	r1, [pc, #200]	; (8009e50 <DRV_updateFromMaster+0x64c>)
 8009d86:	2001      	movs	r0, #1
 8009d88:	f000 fdda 	bl	800a940 <LOG_log>
               (int32_t)l_averageSpeedRearRight,
               (int32_t)l_averageSpeedRearLeft);
    }

    /* Update PIDs */
    l_pidSpeedFrontRight = PID_update(&g_DRV_pidFrontRight, l_averageSpeedFrontRight, p_deltaTime);
 8009d8c:	887b      	ldrh	r3, [r7, #2]
 8009d8e:	461a      	mov	r2, r3
 8009d90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009d92:	482e      	ldr	r0, [pc, #184]	; (8009e4c <DRV_updateFromMaster+0x648>)
 8009d94:	f001 f874 	bl	800ae80 <PID_update>
 8009d98:	6338      	str	r0, [r7, #48]	; 0x30
    l_pidSpeedFrontLeft  = PID_update(&g_DRV_pidFrontLeft , l_averageSpeedFrontLeft , p_deltaTime);
 8009d9a:	887b      	ldrh	r3, [r7, #2]
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009da0:	482c      	ldr	r0, [pc, #176]	; (8009e54 <DRV_updateFromMaster+0x650>)
 8009da2:	f001 f86d 	bl	800ae80 <PID_update>
 8009da6:	62f8      	str	r0, [r7, #44]	; 0x2c
    l_pidSpeedRearRight  = PID_update(&g_DRV_pidRearRight , l_averageSpeedRearRight , p_deltaTime);
 8009da8:	887b      	ldrh	r3, [r7, #2]
 8009daa:	461a      	mov	r2, r3
 8009dac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009dae:	482a      	ldr	r0, [pc, #168]	; (8009e58 <DRV_updateFromMaster+0x654>)
 8009db0:	f001 f866 	bl	800ae80 <PID_update>
 8009db4:	62b8      	str	r0, [r7, #40]	; 0x28
    l_pidSpeedRearLeft   = PID_update(&g_DRV_pidRearLeft  , l_averageSpeedRearLeft  , p_deltaTime);
 8009db6:	887b      	ldrh	r3, [r7, #2]
 8009db8:	461a      	mov	r2, r3
 8009dba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009dbc:	4827      	ldr	r0, [pc, #156]	; (8009e5c <DRV_updateFromMaster+0x658>)
 8009dbe:	f001 f85f 	bl	800ae80 <PID_update>
 8009dc2:	6278      	str	r0, [r7, #36]	; 0x24

    if (g_DRV_areMotorsOn == false)
 8009dc4:	4b26      	ldr	r3, [pc, #152]	; (8009e60 <DRV_updateFromMaster+0x65c>)
 8009dc6:	781b      	ldrb	r3, [r3, #0]
 8009dc8:	f083 0301 	eor.w	r3, r3, #1
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d120      	bne.n	8009e14 <DRV_updateFromMaster+0x610>
      ; /* Nothing to do */
    }
    else
    {
      /* Update motors */
      MTR_setSpeed(&g_DRV_motorFrontRight, l_pidSpeedFrontRight);
 8009dd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009dd4:	f7f7 f948 	bl	8001068 <__aeabi_f2uiz>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	4619      	mov	r1, r3
 8009ddc:	4821      	ldr	r0, [pc, #132]	; (8009e64 <DRV_updateFromMaster+0x660>)
 8009dde:	f000 ff79 	bl	800acd4 <MTR_setSpeed>
      MTR_setSpeed(&g_DRV_motorFrontLeft , l_pidSpeedFrontLeft );
 8009de2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009de4:	f7f7 f940 	bl	8001068 <__aeabi_f2uiz>
 8009de8:	4603      	mov	r3, r0
 8009dea:	4619      	mov	r1, r3
 8009dec:	481e      	ldr	r0, [pc, #120]	; (8009e68 <DRV_updateFromMaster+0x664>)
 8009dee:	f000 ff71 	bl	800acd4 <MTR_setSpeed>
      MTR_setSpeed(&g_DRV_motorRearRight , l_pidSpeedRearRight );
 8009df2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009df4:	f7f7 f938 	bl	8001068 <__aeabi_f2uiz>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	481b      	ldr	r0, [pc, #108]	; (8009e6c <DRV_updateFromMaster+0x668>)
 8009dfe:	f000 ff69 	bl	800acd4 <MTR_setSpeed>
      MTR_setSpeed(&g_DRV_motorRearLeft  , l_pidSpeedRearLeft  );
 8009e02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009e04:	f7f7 f930 	bl	8001068 <__aeabi_f2uiz>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	4818      	ldr	r0, [pc, #96]	; (8009e70 <DRV_updateFromMaster+0x66c>)
 8009e0e:	f000 ff61 	bl	800acd4 <MTR_setSpeed>
    }
  }

  return;
 8009e12:	bf00      	nop
 8009e14:	bf00      	nop
}
 8009e16:	375c      	adds	r7, #92	; 0x5c
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e1c:	0800ef8c 	.word	0x0800ef8c
 8009e20:	200003ac 	.word	0x200003ac
 8009e24:	47927c00 	.word	0x47927c00
 8009e28:	200003b8 	.word	0x200003b8
 8009e2c:	200003d0 	.word	0x200003d0
 8009e30:	200003c4 	.word	0x200003c4
 8009e34:	200003dc 	.word	0x200003dc
 8009e38:	2000040c 	.word	0x2000040c
 8009e3c:	2000046c 	.word	0x2000046c
 8009e40:	2000043c 	.word	0x2000043c
 8009e44:	2000084c 	.word	0x2000084c
 8009e48:	2000049c 	.word	0x2000049c
 8009e4c:	2000025c 	.word	0x2000025c
 8009e50:	0800efb0 	.word	0x0800efb0
 8009e54:	2000028c 	.word	0x2000028c
 8009e58:	200002ec 	.word	0x200002ec
 8009e5c:	200002bc 	.word	0x200002bc
 8009e60:	20000259 	.word	0x20000259
 8009e64:	2000031c 	.word	0x2000031c
 8009e68:	20000340 	.word	0x20000340
 8009e6c:	20000388 	.word	0x20000388
 8009e70:	20000364 	.word	0x20000364

08009e74 <DRV_getMode>:

T_DRV_MODE DRV_getMode(void)
{
 8009e74:	b480      	push	{r7}
 8009e76:	af00      	add	r7, sp, #0
  return g_DRV_mode;
 8009e78:	4b02      	ldr	r3, [pc, #8]	; (8009e84 <DRV_getMode+0x10>)
 8009e7a:	781b      	ldrb	r3, [r3, #0]
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bc80      	pop	{r7}
 8009e82:	4770      	bx	lr
 8009e84:	2000025a 	.word	0x2000025a

08009e88 <DRV_logInfo>:

void DRV_logInfo(void)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af02      	add	r7, sp, #8
  T_MTR_DIRECTION l_direction;
  uint32_t        l_speed;

  if (g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED)
 8009e8e:	4b3d      	ldr	r3, [pc, #244]	; (8009f84 <DRV_logInfo+0xfc>)
 8009e90:	781b      	ldrb	r3, [r3, #0]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d104      	bne.n	8009ea0 <DRV_logInfo+0x18>
  {
    LOG_info("Mode  : MANUAL FIXED SPEED");
 8009e96:	493c      	ldr	r1, [pc, #240]	; (8009f88 <DRV_logInfo+0x100>)
 8009e98:	2001      	movs	r0, #1
 8009e9a:	f000 fd51 	bl	800a940 <LOG_log>
 8009e9e:	e018      	b.n	8009ed2 <DRV_logInfo+0x4a>
  }
  else if (g_DRV_mode == DRV_MODE_MANUAL_VARIABLE_SPEED)
 8009ea0:	4b38      	ldr	r3, [pc, #224]	; (8009f84 <DRV_logInfo+0xfc>)
 8009ea2:	781b      	ldrb	r3, [r3, #0]
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d104      	bne.n	8009eb2 <DRV_logInfo+0x2a>
  {
    LOG_info("Mode  : MANUAL VARIABLE SPEED");
 8009ea8:	4938      	ldr	r1, [pc, #224]	; (8009f8c <DRV_logInfo+0x104>)
 8009eaa:	2001      	movs	r0, #1
 8009eac:	f000 fd48 	bl	800a940 <LOG_log>
 8009eb0:	e00f      	b.n	8009ed2 <DRV_logInfo+0x4a>
  }
  else if (g_DRV_mode == DRV_MODE_MASTER_BOARD_CONTROL)
 8009eb2:	4b34      	ldr	r3, [pc, #208]	; (8009f84 <DRV_logInfo+0xfc>)
 8009eb4:	781b      	ldrb	r3, [r3, #0]
 8009eb6:	2b02      	cmp	r3, #2
 8009eb8:	d104      	bne.n	8009ec4 <DRV_logInfo+0x3c>
  {
    LOG_info("Mode  : MASTER BOARD CONTROL");
 8009eba:	4935      	ldr	r1, [pc, #212]	; (8009f90 <DRV_logInfo+0x108>)
 8009ebc:	2001      	movs	r0, #1
 8009ebe:	f000 fd3f 	bl	800a940 <LOG_log>
 8009ec2:	e006      	b.n	8009ed2 <DRV_logInfo+0x4a>
  }
  else
  {
    LOG_error("Unsupported drive mode: %u", g_DRV_mode);
 8009ec4:	4b2f      	ldr	r3, [pc, #188]	; (8009f84 <DRV_logInfo+0xfc>)
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	461a      	mov	r2, r3
 8009eca:	4932      	ldr	r1, [pc, #200]	; (8009f94 <DRV_logInfo+0x10c>)
 8009ecc:	2003      	movs	r0, #3
 8009ece:	f000 fd37 	bl	800a940 <LOG_log>
  }

  if (g_DRV_areMotorsOn == true)
 8009ed2:	4b31      	ldr	r3, [pc, #196]	; (8009f98 <DRV_logInfo+0x110>)
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d004      	beq.n	8009ee4 <DRV_logInfo+0x5c>
  {
    LOG_info("Motors: ON");
 8009eda:	4930      	ldr	r1, [pc, #192]	; (8009f9c <DRV_logInfo+0x114>)
 8009edc:	2001      	movs	r0, #1
 8009ede:	f000 fd2f 	bl	800a940 <LOG_log>
 8009ee2:	e003      	b.n	8009eec <DRV_logInfo+0x64>
  }
  else
  {
    LOG_info("Motors: OFF");
 8009ee4:	492e      	ldr	r1, [pc, #184]	; (8009fa0 <DRV_logInfo+0x118>)
 8009ee6:	2001      	movs	r0, #1
 8009ee8:	f000 fd2a 	bl	800a940 <LOG_log>
  }

  l_direction = MTR_getDirection(&g_DRV_motorFrontLeft);
 8009eec:	482d      	ldr	r0, [pc, #180]	; (8009fa4 <DRV_logInfo+0x11c>)
 8009eee:	f000 fee5 	bl	800acbc <MTR_getDirection>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	71fb      	strb	r3, [r7, #7]
  l_speed     = MTR_getSpeed    (&g_DRV_motorFrontLeft);
 8009ef6:	482b      	ldr	r0, [pc, #172]	; (8009fa4 <DRV_logInfo+0x11c>)
 8009ef8:	f000 ff2a 	bl	800ad50 <MTR_getSpeed>
 8009efc:	6038      	str	r0, [r7, #0]

  LOG_info("%s motor direction/speed: %u/%u", CST_FRONT_LEFT_MOTOR_NAME, l_direction, l_speed);
 8009efe:	79fa      	ldrb	r2, [r7, #7]
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	9300      	str	r3, [sp, #0]
 8009f04:	4613      	mov	r3, r2
 8009f06:	4a28      	ldr	r2, [pc, #160]	; (8009fa8 <DRV_logInfo+0x120>)
 8009f08:	4928      	ldr	r1, [pc, #160]	; (8009fac <DRV_logInfo+0x124>)
 8009f0a:	2001      	movs	r0, #1
 8009f0c:	f000 fd18 	bl	800a940 <LOG_log>

  l_direction = MTR_getDirection(&g_DRV_motorFrontRight);
 8009f10:	4827      	ldr	r0, [pc, #156]	; (8009fb0 <DRV_logInfo+0x128>)
 8009f12:	f000 fed3 	bl	800acbc <MTR_getDirection>
 8009f16:	4603      	mov	r3, r0
 8009f18:	71fb      	strb	r3, [r7, #7]
  l_speed     = MTR_getSpeed    (&g_DRV_motorFrontRight);
 8009f1a:	4825      	ldr	r0, [pc, #148]	; (8009fb0 <DRV_logInfo+0x128>)
 8009f1c:	f000 ff18 	bl	800ad50 <MTR_getSpeed>
 8009f20:	6038      	str	r0, [r7, #0]

  LOG_info("%s motor direction/speed: %u/%u", CST_FRONT_RIGHT_MOTOR_NAME, l_direction, l_speed);
 8009f22:	79fa      	ldrb	r2, [r7, #7]
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	9300      	str	r3, [sp, #0]
 8009f28:	4613      	mov	r3, r2
 8009f2a:	4a22      	ldr	r2, [pc, #136]	; (8009fb4 <DRV_logInfo+0x12c>)
 8009f2c:	491f      	ldr	r1, [pc, #124]	; (8009fac <DRV_logInfo+0x124>)
 8009f2e:	2001      	movs	r0, #1
 8009f30:	f000 fd06 	bl	800a940 <LOG_log>

  l_direction = MTR_getDirection(&g_DRV_motorRearLeft);
 8009f34:	4820      	ldr	r0, [pc, #128]	; (8009fb8 <DRV_logInfo+0x130>)
 8009f36:	f000 fec1 	bl	800acbc <MTR_getDirection>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	71fb      	strb	r3, [r7, #7]
  l_speed     = MTR_getSpeed    (&g_DRV_motorRearLeft);
 8009f3e:	481e      	ldr	r0, [pc, #120]	; (8009fb8 <DRV_logInfo+0x130>)
 8009f40:	f000 ff06 	bl	800ad50 <MTR_getSpeed>
 8009f44:	6038      	str	r0, [r7, #0]

  LOG_info("%s motor direction/speed: %u/%u", CST_REAR_LEFT_MOTOR_NAME, l_direction, l_speed);
 8009f46:	79fa      	ldrb	r2, [r7, #7]
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	9300      	str	r3, [sp, #0]
 8009f4c:	4613      	mov	r3, r2
 8009f4e:	4a1b      	ldr	r2, [pc, #108]	; (8009fbc <DRV_logInfo+0x134>)
 8009f50:	4916      	ldr	r1, [pc, #88]	; (8009fac <DRV_logInfo+0x124>)
 8009f52:	2001      	movs	r0, #1
 8009f54:	f000 fcf4 	bl	800a940 <LOG_log>

  l_direction = MTR_getDirection(&g_DRV_motorRearRight);
 8009f58:	4819      	ldr	r0, [pc, #100]	; (8009fc0 <DRV_logInfo+0x138>)
 8009f5a:	f000 feaf 	bl	800acbc <MTR_getDirection>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	71fb      	strb	r3, [r7, #7]
  l_speed     = MTR_getSpeed    (&g_DRV_motorRearRight);
 8009f62:	4817      	ldr	r0, [pc, #92]	; (8009fc0 <DRV_logInfo+0x138>)
 8009f64:	f000 fef4 	bl	800ad50 <MTR_getSpeed>
 8009f68:	6038      	str	r0, [r7, #0]

  LOG_info("%s motor direction/speed: %u/%u", CST_REAR_RIGHT_MOTOR_NAME, l_direction, l_speed);
 8009f6a:	79fa      	ldrb	r2, [r7, #7]
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	9300      	str	r3, [sp, #0]
 8009f70:	4613      	mov	r3, r2
 8009f72:	4a14      	ldr	r2, [pc, #80]	; (8009fc4 <DRV_logInfo+0x13c>)
 8009f74:	490d      	ldr	r1, [pc, #52]	; (8009fac <DRV_logInfo+0x124>)
 8009f76:	2001      	movs	r0, #1
 8009f78:	f000 fce2 	bl	800a940 <LOG_log>

  return;
 8009f7c:	bf00      	nop
}
 8009f7e:	3708      	adds	r7, #8
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}
 8009f84:	2000025a 	.word	0x2000025a
 8009f88:	0800efc0 	.word	0x0800efc0
 8009f8c:	0800efdc 	.word	0x0800efdc
 8009f90:	0800effc 	.word	0x0800effc
 8009f94:	0800f01c 	.word	0x0800f01c
 8009f98:	20000259 	.word	0x20000259
 8009f9c:	0800f038 	.word	0x0800f038
 8009fa0:	0800f044 	.word	0x0800f044
 8009fa4:	20000340 	.word	0x20000340
 8009fa8:	0800ee70 	.word	0x0800ee70
 8009fac:	0800f050 	.word	0x0800f050
 8009fb0:	2000031c 	.word	0x2000031c
 8009fb4:	0800ee64 	.word	0x0800ee64
 8009fb8:	20000364 	.word	0x20000364
 8009fbc:	0800ee7c 	.word	0x0800ee7c
 8009fc0:	20000388 	.word	0x20000388
 8009fc4:	0800ee88 	.word	0x0800ee88

08009fc8 <DRV_setDirectionsStop>:

static void DRV_setDirectionsStop(void)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_STOP);
 8009fcc:	2100      	movs	r1, #0
 8009fce:	4808      	ldr	r0, [pc, #32]	; (8009ff0 <DRV_setDirectionsStop+0x28>)
 8009fd0:	f000 fe08 	bl	800abe4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_STOP);
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	4807      	ldr	r0, [pc, #28]	; (8009ff4 <DRV_setDirectionsStop+0x2c>)
 8009fd8:	f000 fe04 	bl	800abe4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_STOP);
 8009fdc:	2100      	movs	r1, #0
 8009fde:	4806      	ldr	r0, [pc, #24]	; (8009ff8 <DRV_setDirectionsStop+0x30>)
 8009fe0:	f000 fe00 	bl	800abe4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_STOP);
 8009fe4:	2100      	movs	r1, #0
 8009fe6:	4805      	ldr	r0, [pc, #20]	; (8009ffc <DRV_setDirectionsStop+0x34>)
 8009fe8:	f000 fdfc 	bl	800abe4 <MTR_setDirection>

  return;
 8009fec:	bf00      	nop
}
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	2000031c 	.word	0x2000031c
 8009ff4:	20000340 	.word	0x20000340
 8009ff8:	20000388 	.word	0x20000388
 8009ffc:	20000364 	.word	0x20000364

0800a000 <DRV_setDirectionsForward>:

static void DRV_setDirectionsForward(void)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD);
 800a004:	2101      	movs	r1, #1
 800a006:	4808      	ldr	r0, [pc, #32]	; (800a028 <DRV_setDirectionsForward+0x28>)
 800a008:	f000 fdec 	bl	800abe4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD);
 800a00c:	2101      	movs	r1, #1
 800a00e:	4807      	ldr	r0, [pc, #28]	; (800a02c <DRV_setDirectionsForward+0x2c>)
 800a010:	f000 fde8 	bl	800abe4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD);
 800a014:	2101      	movs	r1, #1
 800a016:	4806      	ldr	r0, [pc, #24]	; (800a030 <DRV_setDirectionsForward+0x30>)
 800a018:	f000 fde4 	bl	800abe4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD);
 800a01c:	2101      	movs	r1, #1
 800a01e:	4805      	ldr	r0, [pc, #20]	; (800a034 <DRV_setDirectionsForward+0x34>)
 800a020:	f000 fde0 	bl	800abe4 <MTR_setDirection>

  return;
 800a024:	bf00      	nop
}
 800a026:	bd80      	pop	{r7, pc}
 800a028:	2000031c 	.word	0x2000031c
 800a02c:	20000340 	.word	0x20000340
 800a030:	20000388 	.word	0x20000388
 800a034:	20000364 	.word	0x20000364

0800a038 <DRV_setDirectionsBackward>:

static void DRV_setDirectionsBackward(void)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 800a03c:	2102      	movs	r1, #2
 800a03e:	4808      	ldr	r0, [pc, #32]	; (800a060 <DRV_setDirectionsBackward+0x28>)
 800a040:	f000 fdd0 	bl	800abe4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 800a044:	2102      	movs	r1, #2
 800a046:	4807      	ldr	r0, [pc, #28]	; (800a064 <DRV_setDirectionsBackward+0x2c>)
 800a048:	f000 fdcc 	bl	800abe4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 800a04c:	2102      	movs	r1, #2
 800a04e:	4806      	ldr	r0, [pc, #24]	; (800a068 <DRV_setDirectionsBackward+0x30>)
 800a050:	f000 fdc8 	bl	800abe4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 800a054:	2102      	movs	r1, #2
 800a056:	4805      	ldr	r0, [pc, #20]	; (800a06c <DRV_setDirectionsBackward+0x34>)
 800a058:	f000 fdc4 	bl	800abe4 <MTR_setDirection>

  return;
 800a05c:	bf00      	nop
}
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	2000031c 	.word	0x2000031c
 800a064:	20000340 	.word	0x20000340
 800a068:	20000388 	.word	0x20000388
 800a06c:	20000364 	.word	0x20000364

0800a070 <DRV_setDirectionsForwardRight>:

static void DRV_setDirectionsForwardRight(void)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontLeft, MTR_DIRECTION_FORWARD);
 800a074:	2101      	movs	r1, #1
 800a076:	4804      	ldr	r0, [pc, #16]	; (800a088 <DRV_setDirectionsForwardRight+0x18>)
 800a078:	f000 fdb4 	bl	800abe4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight, MTR_DIRECTION_FORWARD);
 800a07c:	2101      	movs	r1, #1
 800a07e:	4803      	ldr	r0, [pc, #12]	; (800a08c <DRV_setDirectionsForwardRight+0x1c>)
 800a080:	f000 fdb0 	bl	800abe4 <MTR_setDirection>

  return;
 800a084:	bf00      	nop
}
 800a086:	bd80      	pop	{r7, pc}
 800a088:	20000340 	.word	0x20000340
 800a08c:	20000388 	.word	0x20000388

0800a090 <DRV_setDirectionsForwardLeft>:

static void DRV_setDirectionsForwardLeft(void)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD);
 800a094:	2101      	movs	r1, #1
 800a096:	4804      	ldr	r0, [pc, #16]	; (800a0a8 <DRV_setDirectionsForwardLeft+0x18>)
 800a098:	f000 fda4 	bl	800abe4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD);
 800a09c:	2101      	movs	r1, #1
 800a09e:	4803      	ldr	r0, [pc, #12]	; (800a0ac <DRV_setDirectionsForwardLeft+0x1c>)
 800a0a0:	f000 fda0 	bl	800abe4 <MTR_setDirection>

  return;
 800a0a4:	bf00      	nop
}
 800a0a6:	bd80      	pop	{r7, pc}
 800a0a8:	2000031c 	.word	0x2000031c
 800a0ac:	20000364 	.word	0x20000364

0800a0b0 <DRV_setDirectionsBackwardRight>:

static void DRV_setDirectionsBackwardRight(void)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 800a0b4:	2102      	movs	r1, #2
 800a0b6:	4804      	ldr	r0, [pc, #16]	; (800a0c8 <DRV_setDirectionsBackwardRight+0x18>)
 800a0b8:	f000 fd94 	bl	800abe4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 800a0bc:	2102      	movs	r1, #2
 800a0be:	4803      	ldr	r0, [pc, #12]	; (800a0cc <DRV_setDirectionsBackwardRight+0x1c>)
 800a0c0:	f000 fd90 	bl	800abe4 <MTR_setDirection>

  return;
 800a0c4:	bf00      	nop
}
 800a0c6:	bd80      	pop	{r7, pc}
 800a0c8:	2000031c 	.word	0x2000031c
 800a0cc:	20000364 	.word	0x20000364

0800a0d0 <DRV_setDirectionsBackwardLeft>:

static void DRV_setDirectionsBackwardLeft(void)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontLeft, MTR_DIRECTION_BACKWARD);
 800a0d4:	2102      	movs	r1, #2
 800a0d6:	4804      	ldr	r0, [pc, #16]	; (800a0e8 <DRV_setDirectionsBackwardLeft+0x18>)
 800a0d8:	f000 fd84 	bl	800abe4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight, MTR_DIRECTION_BACKWARD);
 800a0dc:	2102      	movs	r1, #2
 800a0de:	4803      	ldr	r0, [pc, #12]	; (800a0ec <DRV_setDirectionsBackwardLeft+0x1c>)
 800a0e0:	f000 fd80 	bl	800abe4 <MTR_setDirection>

  return;
 800a0e4:	bf00      	nop
}
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	20000340 	.word	0x20000340
 800a0ec:	20000388 	.word	0x20000388

0800a0f0 <DRV_setDirectionsTurnLeft>:

static void DRV_setDirectionsTurnLeft(void)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD );
 800a0f4:	2101      	movs	r1, #1
 800a0f6:	4808      	ldr	r0, [pc, #32]	; (800a118 <DRV_setDirectionsTurnLeft+0x28>)
 800a0f8:	f000 fd74 	bl	800abe4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 800a0fc:	2102      	movs	r1, #2
 800a0fe:	4807      	ldr	r0, [pc, #28]	; (800a11c <DRV_setDirectionsTurnLeft+0x2c>)
 800a100:	f000 fd70 	bl	800abe4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD );
 800a104:	2101      	movs	r1, #1
 800a106:	4806      	ldr	r0, [pc, #24]	; (800a120 <DRV_setDirectionsTurnLeft+0x30>)
 800a108:	f000 fd6c 	bl	800abe4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 800a10c:	2102      	movs	r1, #2
 800a10e:	4805      	ldr	r0, [pc, #20]	; (800a124 <DRV_setDirectionsTurnLeft+0x34>)
 800a110:	f000 fd68 	bl	800abe4 <MTR_setDirection>

  return;
 800a114:	bf00      	nop
}
 800a116:	bd80      	pop	{r7, pc}
 800a118:	2000031c 	.word	0x2000031c
 800a11c:	20000340 	.word	0x20000340
 800a120:	20000388 	.word	0x20000388
 800a124:	20000364 	.word	0x20000364

0800a128 <DRV_setDirectionsTurnRight>:

static void DRV_setDirectionsTurnRight(void)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 800a12c:	2102      	movs	r1, #2
 800a12e:	4808      	ldr	r0, [pc, #32]	; (800a150 <DRV_setDirectionsTurnRight+0x28>)
 800a130:	f000 fd58 	bl	800abe4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD );
 800a134:	2101      	movs	r1, #1
 800a136:	4807      	ldr	r0, [pc, #28]	; (800a154 <DRV_setDirectionsTurnRight+0x2c>)
 800a138:	f000 fd54 	bl	800abe4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 800a13c:	2102      	movs	r1, #2
 800a13e:	4806      	ldr	r0, [pc, #24]	; (800a158 <DRV_setDirectionsTurnRight+0x30>)
 800a140:	f000 fd50 	bl	800abe4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD );
 800a144:	2101      	movs	r1, #1
 800a146:	4805      	ldr	r0, [pc, #20]	; (800a15c <DRV_setDirectionsTurnRight+0x34>)
 800a148:	f000 fd4c 	bl	800abe4 <MTR_setDirection>

  return;
 800a14c:	bf00      	nop
}
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	2000031c 	.word	0x2000031c
 800a154:	20000340 	.word	0x20000340
 800a158:	20000388 	.word	0x20000388
 800a15c:	20000364 	.word	0x20000364

0800a160 <DRV_setDirectionsTranslateLeft>:

static void DRV_setDirectionsTranslateLeft(void)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD );
 800a164:	2101      	movs	r1, #1
 800a166:	4808      	ldr	r0, [pc, #32]	; (800a188 <DRV_setDirectionsTranslateLeft+0x28>)
 800a168:	f000 fd3c 	bl	800abe4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 800a16c:	2102      	movs	r1, #2
 800a16e:	4807      	ldr	r0, [pc, #28]	; (800a18c <DRV_setDirectionsTranslateLeft+0x2c>)
 800a170:	f000 fd38 	bl	800abe4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 800a174:	2102      	movs	r1, #2
 800a176:	4806      	ldr	r0, [pc, #24]	; (800a190 <DRV_setDirectionsTranslateLeft+0x30>)
 800a178:	f000 fd34 	bl	800abe4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD );
 800a17c:	2101      	movs	r1, #1
 800a17e:	4805      	ldr	r0, [pc, #20]	; (800a194 <DRV_setDirectionsTranslateLeft+0x34>)
 800a180:	f000 fd30 	bl	800abe4 <MTR_setDirection>

  return;
 800a184:	bf00      	nop
}
 800a186:	bd80      	pop	{r7, pc}
 800a188:	2000031c 	.word	0x2000031c
 800a18c:	20000340 	.word	0x20000340
 800a190:	20000388 	.word	0x20000388
 800a194:	20000364 	.word	0x20000364

0800a198 <DRV_setDirectionsTranslateRight>:

static void DRV_setDirectionsTranslateRight(void)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 800a19c:	2102      	movs	r1, #2
 800a19e:	4808      	ldr	r0, [pc, #32]	; (800a1c0 <DRV_setDirectionsTranslateRight+0x28>)
 800a1a0:	f000 fd20 	bl	800abe4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD );
 800a1a4:	2101      	movs	r1, #1
 800a1a6:	4807      	ldr	r0, [pc, #28]	; (800a1c4 <DRV_setDirectionsTranslateRight+0x2c>)
 800a1a8:	f000 fd1c 	bl	800abe4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD );
 800a1ac:	2101      	movs	r1, #1
 800a1ae:	4806      	ldr	r0, [pc, #24]	; (800a1c8 <DRV_setDirectionsTranslateRight+0x30>)
 800a1b0:	f000 fd18 	bl	800abe4 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 800a1b4:	2102      	movs	r1, #2
 800a1b6:	4805      	ldr	r0, [pc, #20]	; (800a1cc <DRV_setDirectionsTranslateRight+0x34>)
 800a1b8:	f000 fd14 	bl	800abe4 <MTR_setDirection>

  return;
 800a1bc:	bf00      	nop
}
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	2000031c 	.word	0x2000031c
 800a1c4:	20000340 	.word	0x20000340
 800a1c8:	20000388 	.word	0x20000388
 800a1cc:	20000364 	.word	0x20000364

0800a1d0 <DRV_stop>:

static void DRV_stop(void)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	af00      	add	r7, sp, #0
  DRV_setDirectionsStop();
 800a1d4:	f7ff fef8 	bl	8009fc8 <DRV_setDirectionsStop>

  MTR_setSpeed(&g_DRV_motorFrontRight, 0);
 800a1d8:	2100      	movs	r1, #0
 800a1da:	4808      	ldr	r0, [pc, #32]	; (800a1fc <DRV_stop+0x2c>)
 800a1dc:	f000 fd7a 	bl	800acd4 <MTR_setSpeed>
  MTR_setSpeed(&g_DRV_motorFrontLeft , 0);
 800a1e0:	2100      	movs	r1, #0
 800a1e2:	4807      	ldr	r0, [pc, #28]	; (800a200 <DRV_stop+0x30>)
 800a1e4:	f000 fd76 	bl	800acd4 <MTR_setSpeed>
  MTR_setSpeed(&g_DRV_motorRearRight , 0);
 800a1e8:	2100      	movs	r1, #0
 800a1ea:	4806      	ldr	r0, [pc, #24]	; (800a204 <DRV_stop+0x34>)
 800a1ec:	f000 fd72 	bl	800acd4 <MTR_setSpeed>
  MTR_setSpeed(&g_DRV_motorRearLeft  , 0);
 800a1f0:	2100      	movs	r1, #0
 800a1f2:	4805      	ldr	r0, [pc, #20]	; (800a208 <DRV_stop+0x38>)
 800a1f4:	f000 fd6e 	bl	800acd4 <MTR_setSpeed>

  return;
 800a1f8:	bf00      	nop
}
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	2000031c 	.word	0x2000031c
 800a200:	20000340 	.word	0x20000340
 800a204:	20000388 	.word	0x20000388
 800a208:	20000364 	.word	0x20000364

0800a20c <DRV_moveForward>:

static void DRV_moveForward(uint32_t p_speed)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b084      	sub	sp, #16
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward @%u", l_speed);
 800a218:	68fa      	ldr	r2, [r7, #12]
 800a21a:	4911      	ldr	r1, [pc, #68]	; (800a260 <DRV_moveForward+0x54>)
 800a21c:	2000      	movs	r0, #0
 800a21e:	f000 fb8f 	bl	800a940 <LOG_log>

  DRV_setDirectionsForward();
 800a222:	f7ff feed 	bl	800a000 <DRV_setDirectionsForward>

  if (g_DRV_areMotorsOn == false)
 800a226:	4b0f      	ldr	r3, [pc, #60]	; (800a264 <DRV_moveForward+0x58>)
 800a228:	781b      	ldrb	r3, [r3, #0]
 800a22a:	f083 0301 	eor.w	r3, r3, #1
 800a22e:	b2db      	uxtb	r3, r3
 800a230:	2b00      	cmp	r3, #0
 800a232:	d110      	bne.n	800a256 <DRV_moveForward+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800a234:	68f9      	ldr	r1, [r7, #12]
 800a236:	480c      	ldr	r0, [pc, #48]	; (800a268 <DRV_moveForward+0x5c>)
 800a238:	f000 fd4c 	bl	800acd4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800a23c:	68f9      	ldr	r1, [r7, #12]
 800a23e:	480b      	ldr	r0, [pc, #44]	; (800a26c <DRV_moveForward+0x60>)
 800a240:	f000 fd48 	bl	800acd4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800a244:	68f9      	ldr	r1, [r7, #12]
 800a246:	480a      	ldr	r0, [pc, #40]	; (800a270 <DRV_moveForward+0x64>)
 800a248:	f000 fd44 	bl	800acd4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800a24c:	68f9      	ldr	r1, [r7, #12]
 800a24e:	4809      	ldr	r0, [pc, #36]	; (800a274 <DRV_moveForward+0x68>)
 800a250:	f000 fd40 	bl	800acd4 <MTR_setSpeed>
  }

  return;
 800a254:	bf00      	nop
 800a256:	bf00      	nop
}
 800a258:	3710      	adds	r7, #16
 800a25a:	46bd      	mov	sp, r7
 800a25c:	bd80      	pop	{r7, pc}
 800a25e:	bf00      	nop
 800a260:	0800f070 	.word	0x0800f070
 800a264:	20000259 	.word	0x20000259
 800a268:	2000031c 	.word	0x2000031c
 800a26c:	20000340 	.word	0x20000340
 800a270:	20000388 	.word	0x20000388
 800a274:	20000364 	.word	0x20000364

0800a278 <DRV_moveBackward>:

static void DRV_moveBackward(uint32_t p_speed)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward @%u", l_speed);
 800a284:	68fa      	ldr	r2, [r7, #12]
 800a286:	4911      	ldr	r1, [pc, #68]	; (800a2cc <DRV_moveBackward+0x54>)
 800a288:	2000      	movs	r0, #0
 800a28a:	f000 fb59 	bl	800a940 <LOG_log>

  DRV_setDirectionsBackward();
 800a28e:	f7ff fed3 	bl	800a038 <DRV_setDirectionsBackward>

  if (g_DRV_areMotorsOn == false)
 800a292:	4b0f      	ldr	r3, [pc, #60]	; (800a2d0 <DRV_moveBackward+0x58>)
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	f083 0301 	eor.w	r3, r3, #1
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d110      	bne.n	800a2c2 <DRV_moveBackward+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800a2a0:	68f9      	ldr	r1, [r7, #12]
 800a2a2:	480c      	ldr	r0, [pc, #48]	; (800a2d4 <DRV_moveBackward+0x5c>)
 800a2a4:	f000 fd16 	bl	800acd4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800a2a8:	68f9      	ldr	r1, [r7, #12]
 800a2aa:	480b      	ldr	r0, [pc, #44]	; (800a2d8 <DRV_moveBackward+0x60>)
 800a2ac:	f000 fd12 	bl	800acd4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800a2b0:	68f9      	ldr	r1, [r7, #12]
 800a2b2:	480a      	ldr	r0, [pc, #40]	; (800a2dc <DRV_moveBackward+0x64>)
 800a2b4:	f000 fd0e 	bl	800acd4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800a2b8:	68f9      	ldr	r1, [r7, #12]
 800a2ba:	4809      	ldr	r0, [pc, #36]	; (800a2e0 <DRV_moveBackward+0x68>)
 800a2bc:	f000 fd0a 	bl	800acd4 <MTR_setSpeed>
  }

  return;
 800a2c0:	bf00      	nop
 800a2c2:	bf00      	nop
}
 800a2c4:	3710      	adds	r7, #16
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	bf00      	nop
 800a2cc:	0800f084 	.word	0x0800f084
 800a2d0:	20000259 	.word	0x20000259
 800a2d4:	2000031c 	.word	0x2000031c
 800a2d8:	20000340 	.word	0x20000340
 800a2dc:	20000388 	.word	0x20000388
 800a2e0:	20000364 	.word	0x20000364

0800a2e4 <DRV_moveForwardRight>:

static void DRV_moveForwardRight(uint32_t p_speed)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b084      	sub	sp, #16
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward-right @%u", l_speed);
 800a2f0:	68fa      	ldr	r2, [r7, #12]
 800a2f2:	4911      	ldr	r1, [pc, #68]	; (800a338 <DRV_moveForwardRight+0x54>)
 800a2f4:	2000      	movs	r0, #0
 800a2f6:	f000 fb23 	bl	800a940 <LOG_log>

  DRV_setDirectionsForwardRight();
 800a2fa:	f7ff feb9 	bl	800a070 <DRV_setDirectionsForwardRight>

  if (g_DRV_areMotorsOn == false)
 800a2fe:	4b0f      	ldr	r3, [pc, #60]	; (800a33c <DRV_moveForwardRight+0x58>)
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	f083 0301 	eor.w	r3, r3, #1
 800a306:	b2db      	uxtb	r3, r3
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d110      	bne.n	800a32e <DRV_moveForwardRight+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight,       0);
 800a30c:	2100      	movs	r1, #0
 800a30e:	480c      	ldr	r0, [pc, #48]	; (800a340 <DRV_moveForwardRight+0x5c>)
 800a310:	f000 fce0 	bl	800acd4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800a314:	68f9      	ldr	r1, [r7, #12]
 800a316:	480b      	ldr	r0, [pc, #44]	; (800a344 <DRV_moveForwardRight+0x60>)
 800a318:	f000 fcdc 	bl	800acd4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800a31c:	68f9      	ldr	r1, [r7, #12]
 800a31e:	480a      	ldr	r0, [pc, #40]	; (800a348 <DRV_moveForwardRight+0x64>)
 800a320:	f000 fcd8 	bl	800acd4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  ,       0);
 800a324:	2100      	movs	r1, #0
 800a326:	4809      	ldr	r0, [pc, #36]	; (800a34c <DRV_moveForwardRight+0x68>)
 800a328:	f000 fcd4 	bl	800acd4 <MTR_setSpeed>
  }

  return;
 800a32c:	bf00      	nop
 800a32e:	bf00      	nop
}
 800a330:	3710      	adds	r7, #16
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	0800f098 	.word	0x0800f098
 800a33c:	20000259 	.word	0x20000259
 800a340:	2000031c 	.word	0x2000031c
 800a344:	20000340 	.word	0x20000340
 800a348:	20000388 	.word	0x20000388
 800a34c:	20000364 	.word	0x20000364

0800a350 <DRV_moveForwardLeft>:

static void DRV_moveForwardLeft(uint32_t p_speed)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward-left @%u", l_speed);
 800a35c:	68fa      	ldr	r2, [r7, #12]
 800a35e:	4911      	ldr	r1, [pc, #68]	; (800a3a4 <DRV_moveForwardLeft+0x54>)
 800a360:	2000      	movs	r0, #0
 800a362:	f000 faed 	bl	800a940 <LOG_log>

  DRV_setDirectionsForwardLeft();
 800a366:	f7ff fe93 	bl	800a090 <DRV_setDirectionsForwardLeft>

  if (g_DRV_areMotorsOn == false)
 800a36a:	4b0f      	ldr	r3, [pc, #60]	; (800a3a8 <DRV_moveForwardLeft+0x58>)
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	f083 0301 	eor.w	r3, r3, #1
 800a372:	b2db      	uxtb	r3, r3
 800a374:	2b00      	cmp	r3, #0
 800a376:	d110      	bne.n	800a39a <DRV_moveForwardLeft+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800a378:	68f9      	ldr	r1, [r7, #12]
 800a37a:	480c      	ldr	r0, [pc, #48]	; (800a3ac <DRV_moveForwardLeft+0x5c>)
 800a37c:	f000 fcaa 	bl	800acd4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft ,       0);
 800a380:	2100      	movs	r1, #0
 800a382:	480b      	ldr	r0, [pc, #44]	; (800a3b0 <DRV_moveForwardLeft+0x60>)
 800a384:	f000 fca6 	bl	800acd4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight ,       0);
 800a388:	2100      	movs	r1, #0
 800a38a:	480a      	ldr	r0, [pc, #40]	; (800a3b4 <DRV_moveForwardLeft+0x64>)
 800a38c:	f000 fca2 	bl	800acd4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800a390:	68f9      	ldr	r1, [r7, #12]
 800a392:	4809      	ldr	r0, [pc, #36]	; (800a3b8 <DRV_moveForwardLeft+0x68>)
 800a394:	f000 fc9e 	bl	800acd4 <MTR_setSpeed>
  }

  return;
 800a398:	bf00      	nop
 800a39a:	bf00      	nop
}
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
 800a3a2:	bf00      	nop
 800a3a4:	0800f0b4 	.word	0x0800f0b4
 800a3a8:	20000259 	.word	0x20000259
 800a3ac:	2000031c 	.word	0x2000031c
 800a3b0:	20000340 	.word	0x20000340
 800a3b4:	20000388 	.word	0x20000388
 800a3b8:	20000364 	.word	0x20000364

0800a3bc <DRV_moveBackwardRight>:

static void DRV_moveBackwardRight(uint32_t p_speed)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward-right @%u", l_speed);
 800a3c8:	68fa      	ldr	r2, [r7, #12]
 800a3ca:	4911      	ldr	r1, [pc, #68]	; (800a410 <DRV_moveBackwardRight+0x54>)
 800a3cc:	2000      	movs	r0, #0
 800a3ce:	f000 fab7 	bl	800a940 <LOG_log>

  DRV_setDirectionsBackwardRight();
 800a3d2:	f7ff fe6d 	bl	800a0b0 <DRV_setDirectionsBackwardRight>

  if (g_DRV_areMotorsOn == false)
 800a3d6:	4b0f      	ldr	r3, [pc, #60]	; (800a414 <DRV_moveBackwardRight+0x58>)
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	f083 0301 	eor.w	r3, r3, #1
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d110      	bne.n	800a406 <DRV_moveBackwardRight+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800a3e4:	68f9      	ldr	r1, [r7, #12]
 800a3e6:	480c      	ldr	r0, [pc, #48]	; (800a418 <DRV_moveBackwardRight+0x5c>)
 800a3e8:	f000 fc74 	bl	800acd4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft ,       0);
 800a3ec:	2100      	movs	r1, #0
 800a3ee:	480b      	ldr	r0, [pc, #44]	; (800a41c <DRV_moveBackwardRight+0x60>)
 800a3f0:	f000 fc70 	bl	800acd4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight ,       0);
 800a3f4:	2100      	movs	r1, #0
 800a3f6:	480a      	ldr	r0, [pc, #40]	; (800a420 <DRV_moveBackwardRight+0x64>)
 800a3f8:	f000 fc6c 	bl	800acd4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800a3fc:	68f9      	ldr	r1, [r7, #12]
 800a3fe:	4809      	ldr	r0, [pc, #36]	; (800a424 <DRV_moveBackwardRight+0x68>)
 800a400:	f000 fc68 	bl	800acd4 <MTR_setSpeed>
  }

  return;
 800a404:	bf00      	nop
 800a406:	bf00      	nop
}
 800a408:	3710      	adds	r7, #16
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	0800f0cc 	.word	0x0800f0cc
 800a414:	20000259 	.word	0x20000259
 800a418:	2000031c 	.word	0x2000031c
 800a41c:	20000340 	.word	0x20000340
 800a420:	20000388 	.word	0x20000388
 800a424:	20000364 	.word	0x20000364

0800a428 <DRV_moveBackwardLeft>:

static void DRV_moveBackwardLeft(uint32_t p_speed)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b084      	sub	sp, #16
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward-left @%u", l_speed);
 800a434:	68fa      	ldr	r2, [r7, #12]
 800a436:	4911      	ldr	r1, [pc, #68]	; (800a47c <DRV_moveBackwardLeft+0x54>)
 800a438:	2000      	movs	r0, #0
 800a43a:	f000 fa81 	bl	800a940 <LOG_log>

  DRV_setDirectionsBackwardLeft();
 800a43e:	f7ff fe47 	bl	800a0d0 <DRV_setDirectionsBackwardLeft>

  if (g_DRV_areMotorsOn == false)
 800a442:	4b0f      	ldr	r3, [pc, #60]	; (800a480 <DRV_moveBackwardLeft+0x58>)
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	f083 0301 	eor.w	r3, r3, #1
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d110      	bne.n	800a472 <DRV_moveBackwardLeft+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight,       0);
 800a450:	2100      	movs	r1, #0
 800a452:	480c      	ldr	r0, [pc, #48]	; (800a484 <DRV_moveBackwardLeft+0x5c>)
 800a454:	f000 fc3e 	bl	800acd4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800a458:	68f9      	ldr	r1, [r7, #12]
 800a45a:	480b      	ldr	r0, [pc, #44]	; (800a488 <DRV_moveBackwardLeft+0x60>)
 800a45c:	f000 fc3a 	bl	800acd4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800a460:	68f9      	ldr	r1, [r7, #12]
 800a462:	480a      	ldr	r0, [pc, #40]	; (800a48c <DRV_moveBackwardLeft+0x64>)
 800a464:	f000 fc36 	bl	800acd4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  ,       0);
 800a468:	2100      	movs	r1, #0
 800a46a:	4809      	ldr	r0, [pc, #36]	; (800a490 <DRV_moveBackwardLeft+0x68>)
 800a46c:	f000 fc32 	bl	800acd4 <MTR_setSpeed>
  }

  return;
 800a470:	bf00      	nop
 800a472:	bf00      	nop
}
 800a474:	3710      	adds	r7, #16
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop
 800a47c:	0800f0e8 	.word	0x0800f0e8
 800a480:	20000259 	.word	0x20000259
 800a484:	2000031c 	.word	0x2000031c
 800a488:	20000340 	.word	0x20000340
 800a48c:	20000388 	.word	0x20000388
 800a490:	20000364 	.word	0x20000364

0800a494 <DRV_turnLeft>:

static void DRV_turnLeft(uint32_t p_speed)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	60fb      	str	r3, [r7, #12]

  LOG_debug("Turning left @%u", l_speed);
 800a4a0:	68fa      	ldr	r2, [r7, #12]
 800a4a2:	4911      	ldr	r1, [pc, #68]	; (800a4e8 <DRV_turnLeft+0x54>)
 800a4a4:	2000      	movs	r0, #0
 800a4a6:	f000 fa4b 	bl	800a940 <LOG_log>

  DRV_setDirectionsTurnLeft();
 800a4aa:	f7ff fe21 	bl	800a0f0 <DRV_setDirectionsTurnLeft>

  if (g_DRV_areMotorsOn == false)
 800a4ae:	4b0f      	ldr	r3, [pc, #60]	; (800a4ec <DRV_turnLeft+0x58>)
 800a4b0:	781b      	ldrb	r3, [r3, #0]
 800a4b2:	f083 0301 	eor.w	r3, r3, #1
 800a4b6:	b2db      	uxtb	r3, r3
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d110      	bne.n	800a4de <DRV_turnLeft+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800a4bc:	68f9      	ldr	r1, [r7, #12]
 800a4be:	480c      	ldr	r0, [pc, #48]	; (800a4f0 <DRV_turnLeft+0x5c>)
 800a4c0:	f000 fc08 	bl	800acd4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800a4c4:	68f9      	ldr	r1, [r7, #12]
 800a4c6:	480b      	ldr	r0, [pc, #44]	; (800a4f4 <DRV_turnLeft+0x60>)
 800a4c8:	f000 fc04 	bl	800acd4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800a4cc:	68f9      	ldr	r1, [r7, #12]
 800a4ce:	480a      	ldr	r0, [pc, #40]	; (800a4f8 <DRV_turnLeft+0x64>)
 800a4d0:	f000 fc00 	bl	800acd4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800a4d4:	68f9      	ldr	r1, [r7, #12]
 800a4d6:	4809      	ldr	r0, [pc, #36]	; (800a4fc <DRV_turnLeft+0x68>)
 800a4d8:	f000 fbfc 	bl	800acd4 <MTR_setSpeed>
  }

  return;
 800a4dc:	bf00      	nop
 800a4de:	bf00      	nop
}
 800a4e0:	3710      	adds	r7, #16
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	0800f104 	.word	0x0800f104
 800a4ec:	20000259 	.word	0x20000259
 800a4f0:	2000031c 	.word	0x2000031c
 800a4f4:	20000340 	.word	0x20000340
 800a4f8:	20000388 	.word	0x20000388
 800a4fc:	20000364 	.word	0x20000364

0800a500 <DRV_turnRight>:

static void DRV_turnRight(uint32_t p_speed)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	60fb      	str	r3, [r7, #12]

  LOG_debug("Turning right @%u", l_speed);
 800a50c:	68fa      	ldr	r2, [r7, #12]
 800a50e:	4911      	ldr	r1, [pc, #68]	; (800a554 <DRV_turnRight+0x54>)
 800a510:	2000      	movs	r0, #0
 800a512:	f000 fa15 	bl	800a940 <LOG_log>

  DRV_setDirectionsTurnRight();
 800a516:	f7ff fe07 	bl	800a128 <DRV_setDirectionsTurnRight>

  if (g_DRV_areMotorsOn == false)
 800a51a:	4b0f      	ldr	r3, [pc, #60]	; (800a558 <DRV_turnRight+0x58>)
 800a51c:	781b      	ldrb	r3, [r3, #0]
 800a51e:	f083 0301 	eor.w	r3, r3, #1
 800a522:	b2db      	uxtb	r3, r3
 800a524:	2b00      	cmp	r3, #0
 800a526:	d110      	bne.n	800a54a <DRV_turnRight+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800a528:	68f9      	ldr	r1, [r7, #12]
 800a52a:	480c      	ldr	r0, [pc, #48]	; (800a55c <DRV_turnRight+0x5c>)
 800a52c:	f000 fbd2 	bl	800acd4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800a530:	68f9      	ldr	r1, [r7, #12]
 800a532:	480b      	ldr	r0, [pc, #44]	; (800a560 <DRV_turnRight+0x60>)
 800a534:	f000 fbce 	bl	800acd4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800a538:	68f9      	ldr	r1, [r7, #12]
 800a53a:	480a      	ldr	r0, [pc, #40]	; (800a564 <DRV_turnRight+0x64>)
 800a53c:	f000 fbca 	bl	800acd4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800a540:	68f9      	ldr	r1, [r7, #12]
 800a542:	4809      	ldr	r0, [pc, #36]	; (800a568 <DRV_turnRight+0x68>)
 800a544:	f000 fbc6 	bl	800acd4 <MTR_setSpeed>
  }

  return;
 800a548:	bf00      	nop
 800a54a:	bf00      	nop
}
 800a54c:	3710      	adds	r7, #16
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	0800f118 	.word	0x0800f118
 800a558:	20000259 	.word	0x20000259
 800a55c:	2000031c 	.word	0x2000031c
 800a560:	20000340 	.word	0x20000340
 800a564:	20000388 	.word	0x20000388
 800a568:	20000364 	.word	0x20000364

0800a56c <DRV_translateLeft>:

static void DRV_translateLeft(uint32_t p_speed)
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b084      	sub	sp, #16
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	60fb      	str	r3, [r7, #12]

  LOG_debug("Translating left @%u", l_speed);
 800a578:	68fa      	ldr	r2, [r7, #12]
 800a57a:	4911      	ldr	r1, [pc, #68]	; (800a5c0 <DRV_translateLeft+0x54>)
 800a57c:	2000      	movs	r0, #0
 800a57e:	f000 f9df 	bl	800a940 <LOG_log>

  DRV_setDirectionsTranslateLeft();
 800a582:	f7ff fded 	bl	800a160 <DRV_setDirectionsTranslateLeft>

  if (g_DRV_areMotorsOn == false)
 800a586:	4b0f      	ldr	r3, [pc, #60]	; (800a5c4 <DRV_translateLeft+0x58>)
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	f083 0301 	eor.w	r3, r3, #1
 800a58e:	b2db      	uxtb	r3, r3
 800a590:	2b00      	cmp	r3, #0
 800a592:	d110      	bne.n	800a5b6 <DRV_translateLeft+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800a594:	68f9      	ldr	r1, [r7, #12]
 800a596:	480c      	ldr	r0, [pc, #48]	; (800a5c8 <DRV_translateLeft+0x5c>)
 800a598:	f000 fb9c 	bl	800acd4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800a59c:	68f9      	ldr	r1, [r7, #12]
 800a59e:	480b      	ldr	r0, [pc, #44]	; (800a5cc <DRV_translateLeft+0x60>)
 800a5a0:	f000 fb98 	bl	800acd4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800a5a4:	68f9      	ldr	r1, [r7, #12]
 800a5a6:	480a      	ldr	r0, [pc, #40]	; (800a5d0 <DRV_translateLeft+0x64>)
 800a5a8:	f000 fb94 	bl	800acd4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800a5ac:	68f9      	ldr	r1, [r7, #12]
 800a5ae:	4809      	ldr	r0, [pc, #36]	; (800a5d4 <DRV_translateLeft+0x68>)
 800a5b0:	f000 fb90 	bl	800acd4 <MTR_setSpeed>
  }

  return;
 800a5b4:	bf00      	nop
 800a5b6:	bf00      	nop
}
 800a5b8:	3710      	adds	r7, #16
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	0800f12c 	.word	0x0800f12c
 800a5c4:	20000259 	.word	0x20000259
 800a5c8:	2000031c 	.word	0x2000031c
 800a5cc:	20000340 	.word	0x20000340
 800a5d0:	20000388 	.word	0x20000388
 800a5d4:	20000364 	.word	0x20000364

0800a5d8 <DRV_translateRight>:

static void DRV_translateRight(uint32_t p_speed)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b084      	sub	sp, #16
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	60fb      	str	r3, [r7, #12]

  LOG_debug("Translating right @%u", l_speed);
 800a5e4:	68fa      	ldr	r2, [r7, #12]
 800a5e6:	4911      	ldr	r1, [pc, #68]	; (800a62c <DRV_translateRight+0x54>)
 800a5e8:	2000      	movs	r0, #0
 800a5ea:	f000 f9a9 	bl	800a940 <LOG_log>

  DRV_setDirectionsTranslateRight();
 800a5ee:	f7ff fdd3 	bl	800a198 <DRV_setDirectionsTranslateRight>

  if (g_DRV_areMotorsOn == false)
 800a5f2:	4b0f      	ldr	r3, [pc, #60]	; (800a630 <DRV_translateRight+0x58>)
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	f083 0301 	eor.w	r3, r3, #1
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d110      	bne.n	800a622 <DRV_translateRight+0x4a>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800a600:	68f9      	ldr	r1, [r7, #12]
 800a602:	480c      	ldr	r0, [pc, #48]	; (800a634 <DRV_translateRight+0x5c>)
 800a604:	f000 fb66 	bl	800acd4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800a608:	68f9      	ldr	r1, [r7, #12]
 800a60a:	480b      	ldr	r0, [pc, #44]	; (800a638 <DRV_translateRight+0x60>)
 800a60c:	f000 fb62 	bl	800acd4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800a610:	68f9      	ldr	r1, [r7, #12]
 800a612:	480a      	ldr	r0, [pc, #40]	; (800a63c <DRV_translateRight+0x64>)
 800a614:	f000 fb5e 	bl	800acd4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800a618:	68f9      	ldr	r1, [r7, #12]
 800a61a:	4809      	ldr	r0, [pc, #36]	; (800a640 <DRV_translateRight+0x68>)
 800a61c:	f000 fb5a 	bl	800acd4 <MTR_setSpeed>
  }

  return;
 800a620:	bf00      	nop
 800a622:	bf00      	nop
}
 800a624:	3710      	adds	r7, #16
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
 800a62a:	bf00      	nop
 800a62c:	0800f144 	.word	0x0800f144
 800a630:	20000259 	.word	0x20000259
 800a634:	2000031c 	.word	0x2000031c
 800a638:	20000340 	.word	0x20000340
 800a63c:	20000388 	.word	0x20000388
 800a640:	20000364 	.word	0x20000364

0800a644 <ENC_init>:
#include "encoder.h"

#include "log.h"

void ENC_init(T_ENC_Handle *p_handle, char *p_name, bool p_invertOnUpdate, TIM_HandleTypeDef *p_encoderTimerHandle)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b084      	sub	sp, #16
 800a648:	af00      	add	r7, sp, #0
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	60b9      	str	r1, [r7, #8]
 800a64e:	603b      	str	r3, [r7, #0]
 800a650:	4613      	mov	r3, r2
 800a652:	71fb      	strb	r3, [r7, #7]
  LOG_info("Initializing Encoder module for %s", p_name);
 800a654:	68ba      	ldr	r2, [r7, #8]
 800a656:	490a      	ldr	r1, [pc, #40]	; (800a680 <ENC_init+0x3c>)
 800a658:	2001      	movs	r0, #1
 800a65a:	f000 f971 	bl	800a940 <LOG_log>

  p_handle->name           = p_name;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	68ba      	ldr	r2, [r7, #8]
 800a662:	601a      	str	r2, [r3, #0]
  p_handle->invertOnUpdate = p_invertOnUpdate;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	79fa      	ldrb	r2, [r7, #7]
 800a668:	719a      	strb	r2, [r3, #6]
  p_handle->timerHandle    = p_encoderTimerHandle;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	683a      	ldr	r2, [r7, #0]
 800a66e:	609a      	str	r2, [r3, #8]

  ENC_reset(p_handle);
 800a670:	68f8      	ldr	r0, [r7, #12]
 800a672:	f000 f807 	bl	800a684 <ENC_reset>

  return;
 800a676:	bf00      	nop
}
 800a678:	3710      	adds	r7, #16
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	0800f15c 	.word	0x0800f15c

0800a684 <ENC_reset>:

void ENC_reset(T_ENC_Handle *p_handle)
{
 800a684:	b480      	push	{r7}
 800a686:	b083      	sub	sp, #12
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  p_handle->value = 0;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2200      	movs	r2, #0
 800a690:	809a      	strh	r2, [r3, #4]

  __HAL_TIM_SET_COUNTER(p_handle->timerHandle, 0);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	689b      	ldr	r3, [r3, #8]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	2200      	movs	r2, #0
 800a69a:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800a69c:	bf00      	nop
}
 800a69e:	370c      	adds	r7, #12
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bc80      	pop	{r7}
 800a6a4:	4770      	bx	lr

0800a6a6 <ENC_update>:

void ENC_update(T_ENC_Handle *p_handle, int16_t p_value)
{
 800a6a6:	b480      	push	{r7}
 800a6a8:	b083      	sub	sp, #12
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	6078      	str	r0, [r7, #4]
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	807b      	strh	r3, [r7, #2]
  if (p_handle->invertOnUpdate == false)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	799b      	ldrb	r3, [r3, #6]
 800a6b6:	f083 0301 	eor.w	r3, r3, #1
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d003      	beq.n	800a6c8 <ENC_update+0x22>
  {
    p_handle->value = p_value;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	887a      	ldrh	r2, [r7, #2]
 800a6c4:	809a      	strh	r2, [r3, #4]
  else
  {
    p_handle->value = -p_value;
  }

  return;
 800a6c6:	e006      	b.n	800a6d6 <ENC_update+0x30>
    p_handle->value = -p_value;
 800a6c8:	887b      	ldrh	r3, [r7, #2]
 800a6ca:	425b      	negs	r3, r3
 800a6cc:	b29b      	uxth	r3, r3
 800a6ce:	b21a      	sxth	r2, r3
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	809a      	strh	r2, [r3, #4]
  return;
 800a6d4:	bf00      	nop
}
 800a6d6:	370c      	adds	r7, #12
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bc80      	pop	{r7}
 800a6dc:	4770      	bx	lr

0800a6de <ENC_getCount>:

int16_t ENC_getCount(T_ENC_Handle *p_handle)
{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b084      	sub	sp, #16
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
  int16_t l_count;

  l_count = p_handle->value;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	889b      	ldrh	r3, [r3, #4]
 800a6ea:	81fb      	strh	r3, [r7, #14]

  ENC_reset(p_handle);
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f7ff ffc9 	bl	800a684 <ENC_reset>

  return l_count;
 800a6f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3710      	adds	r7, #16
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
	...

0800a700 <LED_setMode>:
#include "log.h"

static T_LED_MODE g_LED_mode = LED_MODE_BLINK_SLOW;

void LED_setMode(T_LED_MODE p_mode)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b082      	sub	sp, #8
 800a704:	af00      	add	r7, sp, #0
 800a706:	4603      	mov	r3, r0
 800a708:	71fb      	strb	r3, [r7, #7]
  if (p_mode != g_LED_mode)
 800a70a:	4b1b      	ldr	r3, [pc, #108]	; (800a778 <LED_setMode+0x78>)
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	79fa      	ldrb	r2, [r7, #7]
 800a710:	429a      	cmp	r2, r3
 800a712:	d02d      	beq.n	800a770 <LED_setMode+0x70>
  {
    switch (p_mode)
 800a714:	79fb      	ldrb	r3, [r7, #7]
 800a716:	2b04      	cmp	r3, #4
 800a718:	d825      	bhi.n	800a766 <LED_setMode+0x66>
 800a71a:	a201      	add	r2, pc, #4	; (adr r2, 800a720 <LED_setMode+0x20>)
 800a71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a720:	0800a735 	.word	0x0800a735
 800a724:	0800a73f 	.word	0x0800a73f
 800a728:	0800a749 	.word	0x0800a749
 800a72c:	0800a753 	.word	0x0800a753
 800a730:	0800a75d 	.word	0x0800a75d
    {
      case LED_MODE_FORCED_OFF:
        LOG_info("Turning LED OFF");
 800a734:	4911      	ldr	r1, [pc, #68]	; (800a77c <LED_setMode+0x7c>)
 800a736:	2001      	movs	r0, #1
 800a738:	f000 f902 	bl	800a940 <LOG_log>
        break;
 800a73c:	e014      	b.n	800a768 <LED_setMode+0x68>

      case LED_MODE_FORCED_ON:
        LOG_info("Turning LED ON");
 800a73e:	4910      	ldr	r1, [pc, #64]	; (800a780 <LED_setMode+0x80>)
 800a740:	2001      	movs	r0, #1
 800a742:	f000 f8fd 	bl	800a940 <LOG_log>
        break;
 800a746:	e00f      	b.n	800a768 <LED_setMode+0x68>

      case LED_MODE_BLINK_SLOW:
        LOG_info("Setting LED to blink slow");
 800a748:	490e      	ldr	r1, [pc, #56]	; (800a784 <LED_setMode+0x84>)
 800a74a:	2001      	movs	r0, #1
 800a74c:	f000 f8f8 	bl	800a940 <LOG_log>
        break;
 800a750:	e00a      	b.n	800a768 <LED_setMode+0x68>

      case LED_MODE_BLINK_MEDIUM:
        LOG_info("Setting LED to blink medium");
 800a752:	490d      	ldr	r1, [pc, #52]	; (800a788 <LED_setMode+0x88>)
 800a754:	2001      	movs	r0, #1
 800a756:	f000 f8f3 	bl	800a940 <LOG_log>
        break;
 800a75a:	e005      	b.n	800a768 <LED_setMode+0x68>

      case LED_MODE_BLINK_FAST:
        LOG_info("Setting LED to blink fast");
 800a75c:	490b      	ldr	r1, [pc, #44]	; (800a78c <LED_setMode+0x8c>)
 800a75e:	2001      	movs	r0, #1
 800a760:	f000 f8ee 	bl	800a940 <LOG_log>
        break;
 800a764:	e000      	b.n	800a768 <LED_setMode+0x68>

      default:
        ; /* Nothing to do */
        break;
 800a766:	bf00      	nop
    }

    g_LED_mode = p_mode;
 800a768:	4a03      	ldr	r2, [pc, #12]	; (800a778 <LED_setMode+0x78>)
 800a76a:	79fb      	ldrb	r3, [r7, #7]
 800a76c:	7013      	strb	r3, [r2, #0]
  else
  {
    ; /* Nothong to do */
  }

  return;
 800a76e:	bf00      	nop
 800a770:	bf00      	nop
}
 800a772:	3708      	adds	r7, #8
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}
 800a778:	20000009 	.word	0x20000009
 800a77c:	0800f180 	.word	0x0800f180
 800a780:	0800f190 	.word	0x0800f190
 800a784:	0800f1a0 	.word	0x0800f1a0
 800a788:	0800f1bc 	.word	0x0800f1bc
 800a78c:	0800f1d8 	.word	0x0800f1d8

0800a790 <LED_update>:
{
  return g_LED_mode;
}

void LED_update(void)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	af00      	add	r7, sp, #0
  static uint32_t l_blinkCounter = 0;

  switch (g_LED_mode)
 800a794:	4b2a      	ldr	r3, [pc, #168]	; (800a840 <LED_update+0xb0>)
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	2b04      	cmp	r3, #4
 800a79a:	d849      	bhi.n	800a830 <LED_update+0xa0>
 800a79c:	a201      	add	r2, pc, #4	; (adr r2, 800a7a4 <LED_update+0x14>)
 800a79e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a2:	bf00      	nop
 800a7a4:	0800a7b9 	.word	0x0800a7b9
 800a7a8:	0800a7c7 	.word	0x0800a7c7
 800a7ac:	0800a7d5 	.word	0x0800a7d5
 800a7b0:	0800a803 	.word	0x0800a803
 800a7b4:	0800a825 	.word	0x0800a825
  {
    case LED_MODE_FORCED_OFF:
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a7be:	4821      	ldr	r0, [pc, #132]	; (800a844 <LED_update+0xb4>)
 800a7c0:	f7f9 faf4 	bl	8003dac <HAL_GPIO_WritePin>
      break;
 800a7c4:	e039      	b.n	800a83a <LED_update+0xaa>

    case LED_MODE_FORCED_ON:
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a7cc:	481d      	ldr	r0, [pc, #116]	; (800a844 <LED_update+0xb4>)
 800a7ce:	f7f9 faed 	bl	8003dac <HAL_GPIO_WritePin>
      break;
 800a7d2:	e032      	b.n	800a83a <LED_update+0xaa>

    case LED_MODE_BLINK_SLOW:
      l_blinkCounter++;
 800a7d4:	4b1c      	ldr	r3, [pc, #112]	; (800a848 <LED_update+0xb8>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	3301      	adds	r3, #1
 800a7da:	4a1b      	ldr	r2, [pc, #108]	; (800a848 <LED_update+0xb8>)
 800a7dc:	6013      	str	r3, [r2, #0]
      if (l_blinkCounter % 5 == 0)
 800a7de:	4b1a      	ldr	r3, [pc, #104]	; (800a848 <LED_update+0xb8>)
 800a7e0:	6819      	ldr	r1, [r3, #0]
 800a7e2:	4b1a      	ldr	r3, [pc, #104]	; (800a84c <LED_update+0xbc>)
 800a7e4:	fba3 2301 	umull	r2, r3, r3, r1
 800a7e8:	089a      	lsrs	r2, r3, #2
 800a7ea:	4613      	mov	r3, r2
 800a7ec:	009b      	lsls	r3, r3, #2
 800a7ee:	4413      	add	r3, r2
 800a7f0:	1aca      	subs	r2, r1, r3
 800a7f2:	2a00      	cmp	r2, #0
 800a7f4:	d11e      	bne.n	800a834 <LED_update+0xa4>
      {
        HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 800a7f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a7fa:	4812      	ldr	r0, [pc, #72]	; (800a844 <LED_update+0xb4>)
 800a7fc:	f7f9 fb08 	bl	8003e10 <HAL_GPIO_TogglePin>
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 800a800:	e018      	b.n	800a834 <LED_update+0xa4>

    case LED_MODE_BLINK_MEDIUM:
      l_blinkCounter++;
 800a802:	4b11      	ldr	r3, [pc, #68]	; (800a848 <LED_update+0xb8>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	3301      	adds	r3, #1
 800a808:	4a0f      	ldr	r2, [pc, #60]	; (800a848 <LED_update+0xb8>)
 800a80a:	6013      	str	r3, [r2, #0]
      if (l_blinkCounter % 2 == 0)
 800a80c:	4b0e      	ldr	r3, [pc, #56]	; (800a848 <LED_update+0xb8>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f003 0301 	and.w	r3, r3, #1
 800a814:	2b00      	cmp	r3, #0
 800a816:	d10f      	bne.n	800a838 <LED_update+0xa8>
      {
        HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 800a818:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a81c:	4809      	ldr	r0, [pc, #36]	; (800a844 <LED_update+0xb4>)
 800a81e:	f7f9 faf7 	bl	8003e10 <HAL_GPIO_TogglePin>
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 800a822:	e009      	b.n	800a838 <LED_update+0xa8>

    case LED_MODE_BLINK_FAST:
      HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 800a824:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a828:	4806      	ldr	r0, [pc, #24]	; (800a844 <LED_update+0xb4>)
 800a82a:	f7f9 faf1 	bl	8003e10 <HAL_GPIO_TogglePin>
      break;
 800a82e:	e004      	b.n	800a83a <LED_update+0xaa>

    default:
      ; /* Nothing to do */
      break;
 800a830:	bf00      	nop
 800a832:	e002      	b.n	800a83a <LED_update+0xaa>
      break;
 800a834:	bf00      	nop
 800a836:	e000      	b.n	800a83a <LED_update+0xaa>
      break;
 800a838:	bf00      	nop
  }

  return;
 800a83a:	bf00      	nop
}
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	20000009 	.word	0x20000009
 800a844:	40011000 	.word	0x40011000
 800a848:	200004a0 	.word	0x200004a0
 800a84c:	cccccccd 	.word	0xcccccccd

0800a850 <LOG_init>:
{
  "DEBUG", "INFO", "WARNING", "ERROR"
};

void LOG_init(RTC_HandleTypeDef *p_rctHandle, bool p_isLogOn)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b082      	sub	sp, #8
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	460b      	mov	r3, r1
 800a85a:	70fb      	strb	r3, [r7, #3]
  g_LOG_isOn      = p_isLogOn;
 800a85c:	4a06      	ldr	r2, [pc, #24]	; (800a878 <LOG_init+0x28>)
 800a85e:	78fb      	ldrb	r3, [r7, #3]
 800a860:	7013      	strb	r3, [r2, #0]
  g_LOG_rtcHandle = p_rctHandle;
 800a862:	4a06      	ldr	r2, [pc, #24]	; (800a87c <LOG_init+0x2c>)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6013      	str	r3, [r2, #0]

  LOG_info("LOG initialized");
 800a868:	4905      	ldr	r1, [pc, #20]	; (800a880 <LOG_init+0x30>)
 800a86a:	2001      	movs	r0, #1
 800a86c:	f000 f868 	bl	800a940 <LOG_log>

  return;
 800a870:	bf00      	nop
}
 800a872:	3708      	adds	r7, #8
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}
 800a878:	200004a4 	.word	0x200004a4
 800a87c:	200004a8 	.word	0x200004a8
 800a880:	0800f214 	.word	0x0800f214

0800a884 <LOG_toggleOnOff>:

void LOG_toggleOnOff(void)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	af00      	add	r7, sp, #0
  if (g_LOG_isOn == true)
 800a888:	4b0a      	ldr	r3, [pc, #40]	; (800a8b4 <LOG_toggleOnOff+0x30>)
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d007      	beq.n	800a8a0 <LOG_toggleOnOff+0x1c>
  {
    LOG_info("Turning LOG OFF");
 800a890:	4909      	ldr	r1, [pc, #36]	; (800a8b8 <LOG_toggleOnOff+0x34>)
 800a892:	2001      	movs	r0, #1
 800a894:	f000 f854 	bl	800a940 <LOG_log>

    g_LOG_isOn = false;
 800a898:	4b06      	ldr	r3, [pc, #24]	; (800a8b4 <LOG_toggleOnOff+0x30>)
 800a89a:	2200      	movs	r2, #0
 800a89c:	701a      	strb	r2, [r3, #0]
    g_LOG_isOn = true;

    LOG_info("Turning LOG ON");
  }

  return;
 800a89e:	e007      	b.n	800a8b0 <LOG_toggleOnOff+0x2c>
    g_LOG_isOn = true;
 800a8a0:	4b04      	ldr	r3, [pc, #16]	; (800a8b4 <LOG_toggleOnOff+0x30>)
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	701a      	strb	r2, [r3, #0]
    LOG_info("Turning LOG ON");
 800a8a6:	4905      	ldr	r1, [pc, #20]	; (800a8bc <LOG_toggleOnOff+0x38>)
 800a8a8:	2001      	movs	r0, #1
 800a8aa:	f000 f849 	bl	800a940 <LOG_log>
  return;
 800a8ae:	bf00      	nop
}
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	bf00      	nop
 800a8b4:	200004a4 	.word	0x200004a4
 800a8b8:	0800f224 	.word	0x0800f224
 800a8bc:	0800f234 	.word	0x0800f234

0800a8c0 <LOG_setLevel>:

void LOG_setLevel(T_LOG_LEVEL p_level)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	71fb      	strb	r3, [r7, #7]
  g_LOG_level = p_level;
 800a8ca:	4a04      	ldr	r2, [pc, #16]	; (800a8dc <LOG_setLevel+0x1c>)
 800a8cc:	79fb      	ldrb	r3, [r7, #7]
 800a8ce:	7013      	strb	r3, [r2, #0]

  return;
 800a8d0:	bf00      	nop
}
 800a8d2:	370c      	adds	r7, #12
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bc80      	pop	{r7}
 800a8d8:	4770      	bx	lr
 800a8da:	bf00      	nop
 800a8dc:	200004a5 	.word	0x200004a5

0800a8e0 <LOG_increaseLevel>:

void LOG_increaseLevel(void)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	af00      	add	r7, sp, #0
  /* Display more detailed logs */
  if (g_LOG_level > LOG_LEVEL_DEBUG)
 800a8e4:	4b08      	ldr	r3, [pc, #32]	; (800a908 <LOG_increaseLevel+0x28>)
 800a8e6:	781b      	ldrb	r3, [r3, #0]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d00a      	beq.n	800a902 <LOG_increaseLevel+0x22>
  {
    LOG_info("Increasing LOG level");
 800a8ec:	4907      	ldr	r1, [pc, #28]	; (800a90c <LOG_increaseLevel+0x2c>)
 800a8ee:	2001      	movs	r0, #1
 800a8f0:	f000 f826 	bl	800a940 <LOG_log>

    g_LOG_level--;
 800a8f4:	4b04      	ldr	r3, [pc, #16]	; (800a908 <LOG_increaseLevel+0x28>)
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	3b01      	subs	r3, #1
 800a8fa:	b2da      	uxtb	r2, r3
 800a8fc:	4b02      	ldr	r3, [pc, #8]	; (800a908 <LOG_increaseLevel+0x28>)
 800a8fe:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 800a900:	bf00      	nop
 800a902:	bf00      	nop
}
 800a904:	bd80      	pop	{r7, pc}
 800a906:	bf00      	nop
 800a908:	200004a5 	.word	0x200004a5
 800a90c:	0800f244 	.word	0x0800f244

0800a910 <LOG_decreaseLevel>:

void LOG_decreaseLevel(void)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	af00      	add	r7, sp, #0
  /* Display less detailed logs */
  if (g_LOG_level < LOG_LEVEL_ERROR)
 800a914:	4b08      	ldr	r3, [pc, #32]	; (800a938 <LOG_decreaseLevel+0x28>)
 800a916:	781b      	ldrb	r3, [r3, #0]
 800a918:	2b02      	cmp	r3, #2
 800a91a:	d80a      	bhi.n	800a932 <LOG_decreaseLevel+0x22>
  {
    LOG_info("Decreasing LOG level");
 800a91c:	4907      	ldr	r1, [pc, #28]	; (800a93c <LOG_decreaseLevel+0x2c>)
 800a91e:	2001      	movs	r0, #1
 800a920:	f000 f80e 	bl	800a940 <LOG_log>

    g_LOG_level++;
 800a924:	4b04      	ldr	r3, [pc, #16]	; (800a938 <LOG_decreaseLevel+0x28>)
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	3301      	adds	r3, #1
 800a92a:	b2da      	uxtb	r2, r3
 800a92c:	4b02      	ldr	r3, [pc, #8]	; (800a938 <LOG_decreaseLevel+0x28>)
 800a92e:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 800a930:	bf00      	nop
 800a932:	bf00      	nop
}
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	200004a5 	.word	0x200004a5
 800a93c:	0800f25c 	.word	0x0800f25c

0800a940 <LOG_log>:

void LOG_log(T_LOG_LEVEL p_level, const char *p_format, ...)
{
 800a940:	b40e      	push	{r1, r2, r3}
 800a942:	b590      	push	{r4, r7, lr}
 800a944:	b0a8      	sub	sp, #160	; 0xa0
 800a946:	af02      	add	r7, sp, #8
 800a948:	4603      	mov	r3, r0
 800a94a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef l_halReturnCode;
  va_list           l_argumentsList;
  RTC_TimeTypeDef   l_time;
  RTC_DateTypeDef   l_date;

  if ((g_LOG_isOn == true) && (p_level >= g_LOG_level))
 800a94c:	4b3e      	ldr	r3, [pc, #248]	; (800aa48 <LOG_log+0x108>)
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d071      	beq.n	800aa38 <LOG_log+0xf8>
 800a954:	4b3d      	ldr	r3, [pc, #244]	; (800aa4c <LOG_log+0x10c>)
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	79fa      	ldrb	r2, [r7, #7]
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d36c      	bcc.n	800aa38 <LOG_log+0xf8>
  {
    l_halReturnCode = HAL_RTC_GetTime(g_LOG_rtcHandle, &l_time, RTC_FORMAT_BCD);
 800a95e:	4b3c      	ldr	r3, [pc, #240]	; (800aa50 <LOG_log+0x110>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f107 010c 	add.w	r1, r7, #12
 800a966:	2201      	movs	r2, #1
 800a968:	4618      	mov	r0, r3
 800a96a:	f7fa fc01 	bl	8005170 <HAL_RTC_GetTime>
 800a96e:	4603      	mov	r3, r0
 800a970:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

    if (l_halReturnCode != HAL_OK)
 800a974:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d004      	beq.n	800a986 <LOG_log+0x46>
    {
      /* As this method is for logging/debug, just reset time in case of failure */
      UTI_resetRtcTime(&l_time);
 800a97c:	f107 030c 	add.w	r3, r7, #12
 800a980:	4618      	mov	r0, r3
 800a982:	f000 fd0e 	bl	800b3a2 <UTI_resetRtcTime>
    else
    {
      ; /* Nothing to do */
    }

    l_halReturnCode = HAL_RTC_GetDate(g_LOG_rtcHandle, &l_date, RTC_FORMAT_BCD);
 800a986:	4b32      	ldr	r3, [pc, #200]	; (800aa50 <LOG_log+0x110>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f107 0108 	add.w	r1, r7, #8
 800a98e:	2201      	movs	r2, #1
 800a990:	4618      	mov	r0, r3
 800a992:	f7fa fdf1 	bl	8005578 <HAL_RTC_GetDate>
 800a996:	4603      	mov	r3, r0
 800a998:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

    if (l_halReturnCode != HAL_OK)
 800a99c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d004      	beq.n	800a9ae <LOG_log+0x6e>
    {
      /* As this method is for logging/debug, just reset date in case of failure */
      UTI_resetRtcDate(&l_date);
 800a9a4:	f107 0308 	add.w	r3, r7, #8
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f000 fce5 	bl	800b378 <UTI_resetRtcDate>
    else
    {
      ; /* Nothing to do */
    }

    va_start(l_argumentsList, p_format);
 800a9ae:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800a9b2:	613b      	str	r3, [r7, #16]

    (void)sprintf  ( l_buffer, "%-7s - %02x:%02x:%02x - ", g_LOG_levelStrings[p_level], l_time.Hours, l_time.Minutes, l_time.Seconds);
 800a9b4:	79fb      	ldrb	r3, [r7, #7]
 800a9b6:	4a27      	ldr	r2, [pc, #156]	; (800aa54 <LOG_log+0x114>)
 800a9b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a9bc:	7b3b      	ldrb	r3, [r7, #12]
 800a9be:	461c      	mov	r4, r3
 800a9c0:	7b7b      	ldrb	r3, [r7, #13]
 800a9c2:	7bb9      	ldrb	r1, [r7, #14]
 800a9c4:	f107 0014 	add.w	r0, r7, #20
 800a9c8:	9101      	str	r1, [sp, #4]
 800a9ca:	9300      	str	r3, [sp, #0]
 800a9cc:	4623      	mov	r3, r4
 800a9ce:	4922      	ldr	r1, [pc, #136]	; (800aa58 <LOG_log+0x118>)
 800a9d0:	f001 fb00 	bl	800bfd4 <siprintf>
    /* 21 is the length of string "%-7s - %02x:%02x:%02x - ". 2 is the length of string "\r\n". */
    /* So we start and write format right after the former and we keep space for the latter.    */
    (void)vsnprintf(&l_buffer[21], CST_CONSOLE_TX_MAX_STRING_LENGTH - 21 - 2, p_format, l_argumentsList);
 800a9d4:	f107 0314 	add.w	r3, r7, #20
 800a9d8:	f103 0015 	add.w	r0, r3, #21
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a9e2:	2169      	movs	r1, #105	; 0x69
 800a9e4:	f001 fbf2 	bl	800c1cc <vsniprintf>
    (void)strcat   ( l_buffer    , "\r\n");
 800a9e8:	f107 0314 	add.w	r3, r7, #20
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f7f5 fc1b 	bl	8000228 <strlen>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	461a      	mov	r2, r3
 800a9f6:	f107 0314 	add.w	r3, r7, #20
 800a9fa:	4413      	add	r3, r2
 800a9fc:	4a17      	ldr	r2, [pc, #92]	; (800aa5c <LOG_log+0x11c>)
 800a9fe:	8811      	ldrh	r1, [r2, #0]
 800aa00:	7892      	ldrb	r2, [r2, #2]
 800aa02:	8019      	strh	r1, [r3, #0]
 800aa04:	709a      	strb	r2, [r3, #2]

    /* -1 is there to consider the end/null character, which strnlen() does not count */
    if (strnlen(l_buffer, CST_CONSOLE_TX_MAX_STRING_LENGTH) == CST_CONSOLE_TX_MAX_STRING_LENGTH - 1)
 800aa06:	f107 0314 	add.w	r3, r7, #20
 800aa0a:	2180      	movs	r1, #128	; 0x80
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f001 fb14 	bl	800c03a <strnlen>
 800aa12:	4603      	mov	r3, r0
 800aa14:	2b7f      	cmp	r3, #127	; 0x7f
 800aa16:	d108      	bne.n	800aa2a <LOG_log+0xea>
    {
      /* At -1, we got the end/null character. At -2 & 3, we got "\r\n". */
      l_buffer[CST_CONSOLE_TX_MAX_STRING_LENGTH - 4] = '.';
 800aa18:	232e      	movs	r3, #46	; 0x2e
 800aa1a:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
      l_buffer[CST_CONSOLE_TX_MAX_STRING_LENGTH - 5] = '.';
 800aa1e:	232e      	movs	r3, #46	; 0x2e
 800aa20:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
      l_buffer[CST_CONSOLE_TX_MAX_STRING_LENGTH - 6] = '.';
 800aa24:	232e      	movs	r3, #46	; 0x2e
 800aa26:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
    else
    {
      ; /* Nothing to do */
    }

    (void)printf("%s", l_buffer);
 800aa2a:	f107 0314 	add.w	r3, r7, #20
 800aa2e:	4619      	mov	r1, r3
 800aa30:	480b      	ldr	r0, [pc, #44]	; (800aa60 <LOG_log+0x120>)
 800aa32:	f001 faa7 	bl	800bf84 <iprintf>
  else
  {
    ; /* Nothing to do */
  }

  return;
 800aa36:	bf00      	nop
 800aa38:	bf00      	nop
}
 800aa3a:	3798      	adds	r7, #152	; 0x98
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800aa42:	b003      	add	sp, #12
 800aa44:	4770      	bx	lr
 800aa46:	bf00      	nop
 800aa48:	200004a4 	.word	0x200004a4
 800aa4c:	200004a5 	.word	0x200004a5
 800aa50:	200004a8 	.word	0x200004a8
 800aa54:	2000000c 	.word	0x2000000c
 800aa58:	0800f274 	.word	0x0800f274
 800aa5c:	0800f290 	.word	0x0800f290
 800aa60:	0800f294 	.word	0x0800f294

0800aa64 <MAS_init>:
static T_SFO_data          g_MAS_data;
static uint32_t            g_MAS_dataSize;
static bool                g_MAS_isDataComplete;

void MAS_init(UART_HandleTypeDef *p_uartHandle)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b082      	sub	sp, #8
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing master connection");
 800aa6c:	490d      	ldr	r1, [pc, #52]	; (800aaa4 <MAS_init+0x40>)
 800aa6e:	2001      	movs	r0, #1
 800aa70:	f7ff ff66 	bl	800a940 <LOG_log>

  g_MAS_uartHandle     = p_uartHandle;
 800aa74:	4a0c      	ldr	r2, [pc, #48]	; (800aaa8 <MAS_init+0x44>)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6013      	str	r3, [r2, #0]
  g_MAS_dataSize       = 0;
 800aa7a:	4b0c      	ldr	r3, [pc, #48]	; (800aaac <MAS_init+0x48>)
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	601a      	str	r2, [r3, #0]
  g_MAS_isDataComplete = false;
 800aa80:	4b0b      	ldr	r3, [pc, #44]	; (800aab0 <MAS_init+0x4c>)
 800aa82:	2200      	movs	r2, #0
 800aa84:	701a      	strb	r2, [r3, #0]

  SFO_initData(&g_MAS_data);
 800aa86:	480b      	ldr	r0, [pc, #44]	; (800aab4 <MAS_init+0x50>)
 800aa88:	f000 fb3a 	bl	800b100 <SFO_initData>

  HAL_UART_Receive_IT(g_MAS_uartHandle, &g_MAS_datum, 1);
 800aa8c:	4b06      	ldr	r3, [pc, #24]	; (800aaa8 <MAS_init+0x44>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	2201      	movs	r2, #1
 800aa92:	4909      	ldr	r1, [pc, #36]	; (800aab8 <MAS_init+0x54>)
 800aa94:	4618      	mov	r0, r3
 800aa96:	f7fd fc15 	bl	80082c4 <HAL_UART_Receive_IT>

  return;
 800aa9a:	bf00      	nop
}
 800aa9c:	3708      	adds	r7, #8
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}
 800aaa2:	bf00      	nop
 800aaa4:	0800f298 	.word	0x0800f298
 800aaa8:	200004ac 	.word	0x200004ac
 800aaac:	200004c4 	.word	0x200004c4
 800aab0:	200004c8 	.word	0x200004c8
 800aab4:	200004b4 	.word	0x200004b4
 800aab8:	200004b0 	.word	0x200004b0

0800aabc <MAS_receiveData>:

void MAS_receiveData(void)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	af00      	add	r7, sp, #0
  /* If previous command was not processed yet, drop datum, */
  /* which will lead to an error, showing a design issue... */
  if (g_MAS_isDataComplete == true)
 800aac0:	4b0f      	ldr	r3, [pc, #60]	; (800ab00 <MAS_receiveData+0x44>)
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d112      	bne.n	800aaee <MAS_receiveData+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (g_MAS_datum == '\r')
 800aac8:	4b0e      	ldr	r3, [pc, #56]	; (800ab04 <MAS_receiveData+0x48>)
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	2b0d      	cmp	r3, #13
 800aace:	d103      	bne.n	800aad8 <MAS_receiveData+0x1c>
    {
      g_MAS_isDataComplete = true;
 800aad0:	4b0b      	ldr	r3, [pc, #44]	; (800ab00 <MAS_receiveData+0x44>)
 800aad2:	2201      	movs	r2, #1
 800aad4:	701a      	strb	r2, [r3, #0]
 800aad6:	e00a      	b.n	800aaee <MAS_receiveData+0x32>
    }
    else
    {
      g_MAS_data[g_MAS_dataSize] = g_MAS_datum;
 800aad8:	4b0b      	ldr	r3, [pc, #44]	; (800ab08 <MAS_receiveData+0x4c>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a09      	ldr	r2, [pc, #36]	; (800ab04 <MAS_receiveData+0x48>)
 800aade:	7811      	ldrb	r1, [r2, #0]
 800aae0:	4a0a      	ldr	r2, [pc, #40]	; (800ab0c <MAS_receiveData+0x50>)
 800aae2:	54d1      	strb	r1, [r2, r3]
      g_MAS_dataSize++;
 800aae4:	4b08      	ldr	r3, [pc, #32]	; (800ab08 <MAS_receiveData+0x4c>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	3301      	adds	r3, #1
 800aaea:	4a07      	ldr	r2, [pc, #28]	; (800ab08 <MAS_receiveData+0x4c>)
 800aaec:	6013      	str	r3, [r2, #0]
    }
  }

  HAL_UART_Receive_IT(g_MAS_uartHandle, &g_MAS_datum, 1);
 800aaee:	4b08      	ldr	r3, [pc, #32]	; (800ab10 <MAS_receiveData+0x54>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	4903      	ldr	r1, [pc, #12]	; (800ab04 <MAS_receiveData+0x48>)
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f7fd fbe4 	bl	80082c4 <HAL_UART_Receive_IT>

  return;
 800aafc:	bf00      	nop
}
 800aafe:	bd80      	pop	{r7, pc}
 800ab00:	200004c8 	.word	0x200004c8
 800ab04:	200004b0 	.word	0x200004b0
 800ab08:	200004c4 	.word	0x200004c4
 800ab0c:	200004b4 	.word	0x200004b4
 800ab10:	200004ac 	.word	0x200004ac

0800ab14 <MAS_updateFifo>:

void MAS_updateFifo(T_SFO_Context *p_fifo)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  if (g_MAS_isDataComplete == false)
 800ab1c:	4b0c      	ldr	r3, [pc, #48]	; (800ab50 <MAS_updateFifo+0x3c>)
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	f083 0301 	eor.w	r3, r3, #1
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d10d      	bne.n	800ab46 <MAS_updateFifo+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    SFO_push    (p_fifo, &g_MAS_data);
 800ab2a:	490a      	ldr	r1, [pc, #40]	; (800ab54 <MAS_updateFifo+0x40>)
 800ab2c:	6878      	ldr	r0, [r7, #4]
 800ab2e:	f000 fb0d 	bl	800b14c <SFO_push>
    SFO_initData(&g_MAS_data);
 800ab32:	4808      	ldr	r0, [pc, #32]	; (800ab54 <MAS_updateFifo+0x40>)
 800ab34:	f000 fae4 	bl	800b100 <SFO_initData>

    g_MAS_dataSize       = 0;
 800ab38:	4b07      	ldr	r3, [pc, #28]	; (800ab58 <MAS_updateFifo+0x44>)
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	601a      	str	r2, [r3, #0]
    g_MAS_isDataComplete = false;
 800ab3e:	4b04      	ldr	r3, [pc, #16]	; (800ab50 <MAS_updateFifo+0x3c>)
 800ab40:	2200      	movs	r2, #0
 800ab42:	701a      	strb	r2, [r3, #0]
  }

  return;
 800ab44:	bf00      	nop
 800ab46:	bf00      	nop
}
 800ab48:	3708      	adds	r7, #8
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	200004c8 	.word	0x200004c8
 800ab54:	200004b4 	.word	0x200004b4
 800ab58:	200004c4 	.word	0x200004c4

0800ab5c <MAS_sendString>:

void MAS_sendString(char *p_string, uint32_t p_length)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b082      	sub	sp, #8
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	6039      	str	r1, [r7, #0]
  /* As this method is using for logging/debug, we will not deal with failure cases */
 (void)HAL_UART_Transmit(g_MAS_uartHandle,
 800ab66:	4b06      	ldr	r3, [pc, #24]	; (800ab80 <MAS_sendString+0x24>)
 800ab68:	6818      	ldr	r0, [r3, #0]
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	b29a      	uxth	r2, r3
 800ab6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ab72:	6879      	ldr	r1, [r7, #4]
 800ab74:	f7fd fb14 	bl	80081a0 <HAL_UART_Transmit>
              (uint8_t *)p_string,
                         p_length,
                         CST_UART_TRANSMIT_TIMEOUT_IN_MS);

  return;
 800ab78:	bf00      	nop
}
 800ab7a:	3708      	adds	r7, #8
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	200004ac 	.word	0x200004ac

0800ab84 <MTR_init>:
              uint32_t           p_dirPin1,
              GPIO_TypeDef      *p_dirPin2Port,
              uint32_t           p_dirPin2,
              TIM_HandleTypeDef *p_pwmTimerHandle,
              uint32_t           p_pwmChannel)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	60f8      	str	r0, [r7, #12]
 800ab8c:	60b9      	str	r1, [r7, #8]
 800ab8e:	607a      	str	r2, [r7, #4]
 800ab90:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing Motor module for %s", p_name);
 800ab92:	68ba      	ldr	r2, [r7, #8]
 800ab94:	4912      	ldr	r1, [pc, #72]	; (800abe0 <MTR_init+0x5c>)
 800ab96:	2001      	movs	r0, #1
 800ab98:	f7ff fed2 	bl	800a940 <LOG_log>

  p_handle->name           = p_name;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	68ba      	ldr	r2, [r7, #8]
 800aba0:	601a      	str	r2, [r3, #0]
  p_handle->dirPin1Port    = p_dirPin1Port;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	687a      	ldr	r2, [r7, #4]
 800aba6:	605a      	str	r2, [r3, #4]
  p_handle->dirPin1        = p_dirPin1;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	683a      	ldr	r2, [r7, #0]
 800abac:	609a      	str	r2, [r3, #8]
  p_handle->dirPin2Port    = p_dirPin2Port;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	69ba      	ldr	r2, [r7, #24]
 800abb2:	60da      	str	r2, [r3, #12]
  p_handle->dirPin2        = p_dirPin2;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	69fa      	ldr	r2, [r7, #28]
 800abb8:	611a      	str	r2, [r3, #16]
  p_handle->pwmTimerHandle = p_pwmTimerHandle;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	6a3a      	ldr	r2, [r7, #32]
 800abbe:	61da      	str	r2, [r3, #28]
  p_handle->pwmChannel     = p_pwmChannel;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abc4:	621a      	str	r2, [r3, #32]

  MTR_setDirection(p_handle, MTR_DIRECTION_STOP);
 800abc6:	2100      	movs	r1, #0
 800abc8:	68f8      	ldr	r0, [r7, #12]
 800abca:	f000 f80b 	bl	800abe4 <MTR_setDirection>
  MTR_setSpeed    (p_handle, 0                 );
 800abce:	2100      	movs	r1, #0
 800abd0:	68f8      	ldr	r0, [r7, #12]
 800abd2:	f000 f87f 	bl	800acd4 <MTR_setSpeed>

  return;
 800abd6:	bf00      	nop
}
 800abd8:	3710      	adds	r7, #16
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
 800abde:	bf00      	nop
 800abe0:	0800f2b8 	.word	0x0800f2b8

0800abe4 <MTR_setDirection>:

void MTR_setDirection(T_MTR_Handle *p_handle, T_MTR_DIRECTION p_direction)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b082      	sub	sp, #8
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	460b      	mov	r3, r1
 800abee:	70fb      	strb	r3, [r7, #3]
  if (p_direction == p_handle->direction)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	7d1b      	ldrb	r3, [r3, #20]
 800abf4:	78fa      	ldrb	r2, [r7, #3]
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d056      	beq.n	800aca8 <MTR_setDirection+0xc4>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (p_direction == MTR_DIRECTION_STOP)
 800abfa:	78fb      	ldrb	r3, [r7, #3]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d119      	bne.n	800ac34 <MTR_setDirection+0x50>
    {
      LOG_debug("%s motor STOP", p_handle->name);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	461a      	mov	r2, r3
 800ac06:	492a      	ldr	r1, [pc, #168]	; (800acb0 <MTR_setDirection+0xcc>)
 800ac08:	2000      	movs	r0, #0
 800ac0a:	f7ff fe99 	bl	800a940 <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_RESET);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6858      	ldr	r0, [r3, #4]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	689b      	ldr	r3, [r3, #8]
 800ac16:	b29b      	uxth	r3, r3
 800ac18:	2200      	movs	r2, #0
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	f7f9 f8c6 	bl	8003dac <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_RESET);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	68d8      	ldr	r0, [r3, #12]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	691b      	ldr	r3, [r3, #16]
 800ac28:	b29b      	uxth	r3, r3
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	f7f9 f8bd 	bl	8003dac <HAL_GPIO_WritePin>
 800ac32:	e035      	b.n	800aca0 <MTR_setDirection+0xbc>
    }
    else if (p_direction == MTR_DIRECTION_FORWARD)
 800ac34:	78fb      	ldrb	r3, [r7, #3]
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	d119      	bne.n	800ac6e <MTR_setDirection+0x8a>
    {
      LOG_debug("%s motor go FORWARD", p_handle->name);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	461a      	mov	r2, r3
 800ac40:	491c      	ldr	r1, [pc, #112]	; (800acb4 <MTR_setDirection+0xd0>)
 800ac42:	2000      	movs	r0, #0
 800ac44:	f7ff fe7c 	bl	800a940 <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_SET  );
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6858      	ldr	r0, [r3, #4]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	689b      	ldr	r3, [r3, #8]
 800ac50:	b29b      	uxth	r3, r3
 800ac52:	2201      	movs	r2, #1
 800ac54:	4619      	mov	r1, r3
 800ac56:	f7f9 f8a9 	bl	8003dac <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_RESET);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	68d8      	ldr	r0, [r3, #12]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	691b      	ldr	r3, [r3, #16]
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	2200      	movs	r2, #0
 800ac66:	4619      	mov	r1, r3
 800ac68:	f7f9 f8a0 	bl	8003dac <HAL_GPIO_WritePin>
 800ac6c:	e018      	b.n	800aca0 <MTR_setDirection+0xbc>
    }
    else
    {
      LOG_debug("%s motor go BACKWARD", p_handle->name);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	461a      	mov	r2, r3
 800ac74:	4910      	ldr	r1, [pc, #64]	; (800acb8 <MTR_setDirection+0xd4>)
 800ac76:	2000      	movs	r0, #0
 800ac78:	f7ff fe62 	bl	800a940 <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_RESET);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6858      	ldr	r0, [r3, #4]
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	689b      	ldr	r3, [r3, #8]
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	2200      	movs	r2, #0
 800ac88:	4619      	mov	r1, r3
 800ac8a:	f7f9 f88f 	bl	8003dac <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_SET  );
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	68d8      	ldr	r0, [r3, #12]
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	691b      	ldr	r3, [r3, #16]
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	2201      	movs	r2, #1
 800ac9a:	4619      	mov	r1, r3
 800ac9c:	f7f9 f886 	bl	8003dac <HAL_GPIO_WritePin>
    }

    p_handle->direction = p_direction;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	78fa      	ldrb	r2, [r7, #3]
 800aca4:	751a      	strb	r2, [r3, #20]
  }

  return;
 800aca6:	bf00      	nop
 800aca8:	bf00      	nop
}
 800acaa:	3708      	adds	r7, #8
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}
 800acb0:	0800f2dc 	.word	0x0800f2dc
 800acb4:	0800f2ec 	.word	0x0800f2ec
 800acb8:	0800f300 	.word	0x0800f300

0800acbc <MTR_getDirection>:

T_MTR_DIRECTION MTR_getDirection(T_MTR_Handle *p_handle)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b083      	sub	sp, #12
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  return p_handle->direction;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	7d1b      	ldrb	r3, [r3, #20]
}
 800acc8:	4618      	mov	r0, r3
 800acca:	370c      	adds	r7, #12
 800accc:	46bd      	mov	sp, r7
 800acce:	bc80      	pop	{r7}
 800acd0:	4770      	bx	lr
	...

0800acd4 <MTR_setSpeed>:

void MTR_setSpeed(T_MTR_Handle *p_handle, uint32_t p_speed)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	6039      	str	r1, [r7, #0]
  if (p_speed == p_handle->speed)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	699b      	ldr	r3, [r3, #24]
 800ace2:	683a      	ldr	r2, [r7, #0]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d02d      	beq.n	800ad44 <MTR_setSpeed+0x70>
  {
    ; /* Nothing to do */
  }
  else
  {
    LOG_debug("Setting  %s motor p_speed to %u", p_handle->name, p_speed);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681a      	ldr	r2, [r3, #0]
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	4917      	ldr	r1, [pc, #92]	; (800ad4c <MTR_setSpeed+0x78>)
 800acf0:	2000      	movs	r0, #0
 800acf2:	f7ff fe25 	bl	800a940 <LOG_log>

    __HAL_TIM_SET_COMPARE(p_handle->pwmTimerHandle, p_handle->pwmChannel, p_speed);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6a1b      	ldr	r3, [r3, #32]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d105      	bne.n	800ad0a <MTR_setSpeed+0x36>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	69db      	ldr	r3, [r3, #28]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	683a      	ldr	r2, [r7, #0]
 800ad06:	635a      	str	r2, [r3, #52]	; 0x34
 800ad08:	e018      	b.n	800ad3c <MTR_setSpeed+0x68>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6a1b      	ldr	r3, [r3, #32]
 800ad0e:	2b04      	cmp	r3, #4
 800ad10:	d105      	bne.n	800ad1e <MTR_setSpeed+0x4a>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	69db      	ldr	r3, [r3, #28]
 800ad16:	681a      	ldr	r2, [r3, #0]
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	6393      	str	r3, [r2, #56]	; 0x38
 800ad1c:	e00e      	b.n	800ad3c <MTR_setSpeed+0x68>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6a1b      	ldr	r3, [r3, #32]
 800ad22:	2b08      	cmp	r3, #8
 800ad24:	d105      	bne.n	800ad32 <MTR_setSpeed+0x5e>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	69db      	ldr	r3, [r3, #28]
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	63d3      	str	r3, [r2, #60]	; 0x3c
 800ad30:	e004      	b.n	800ad3c <MTR_setSpeed+0x68>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	69db      	ldr	r3, [r3, #28]
 800ad36:	681a      	ldr	r2, [r3, #0]
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	6413      	str	r3, [r2, #64]	; 0x40

    p_handle->speed = p_speed;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	683a      	ldr	r2, [r7, #0]
 800ad40:	619a      	str	r2, [r3, #24]
  }

  return;
 800ad42:	bf00      	nop
 800ad44:	bf00      	nop
}
 800ad46:	3708      	adds	r7, #8
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	0800f318 	.word	0x0800f318

0800ad50 <MTR_getSpeed>:

uint32_t MTR_getSpeed(T_MTR_Handle *p_handle)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b083      	sub	sp, #12
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  return p_handle->speed;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	699b      	ldr	r3, [r3, #24]
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	370c      	adds	r7, #12
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bc80      	pop	{r7}
 800ad64:	4770      	bx	lr
	...

0800ad68 <PID_init>:

#include "utils.h"
#include "log.h"

void PID_init(T_PID_Handle *p_handle, float p_kp, float p_ki, float p_kd, float p_targetValue, float p_minValue, float p_maxValue, float p_antiWindUpFactor)
{
 800ad68:	b590      	push	{r4, r7, lr}
 800ad6a:	b085      	sub	sp, #20
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	60b9      	str	r1, [r7, #8]
 800ad72:	607a      	str	r2, [r7, #4]
 800ad74:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing PID");
 800ad76:	492c      	ldr	r1, [pc, #176]	; (800ae28 <PID_init+0xc0>)
 800ad78:	2001      	movs	r0, #1
 800ad7a:	f7ff fde1 	bl	800a940 <LOG_log>

  p_handle->kp              = p_kp;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	68ba      	ldr	r2, [r7, #8]
 800ad82:	601a      	str	r2, [r3, #0]
  p_handle->ki              = p_ki;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	687a      	ldr	r2, [r7, #4]
 800ad88:	605a      	str	r2, [r3, #4]
  p_handle->kd              = p_kd;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	683a      	ldr	r2, [r7, #0]
 800ad8e:	609a      	str	r2, [r3, #8]
  p_handle->targetValue     = p_targetValue;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	6a3a      	ldr	r2, [r7, #32]
 800ad94:	60da      	str	r2, [r3, #12]
  p_handle->minValue        = p_minValue;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad9a:	611a      	str	r2, [r3, #16]
  p_handle->maxValue        = p_maxValue;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ada0:	615a      	str	r2, [r3, #20]
  p_handle->antiWindUpValue = p_antiWindUpFactor * UTI_MAX(abs(p_handle->minValue), abs(p_handle->maxValue));
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	691b      	ldr	r3, [r3, #16]
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7f6 f938 	bl	800101c <__aeabi_f2iz>
 800adac:	4603      	mov	r3, r0
 800adae:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 800adb2:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	695b      	ldr	r3, [r3, #20]
 800adba:	4618      	mov	r0, r3
 800adbc:	f7f6 f92e 	bl	800101c <__aeabi_f2iz>
 800adc0:	4603      	mov	r3, r0
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	bfb8      	it	lt
 800adc6:	425b      	neglt	r3, r3
 800adc8:	429c      	cmp	r4, r3
 800adca:	dd0d      	ble.n	800ade8 <PID_init+0x80>
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	691b      	ldr	r3, [r3, #16]
 800add0:	4618      	mov	r0, r3
 800add2:	f7f6 f923 	bl	800101c <__aeabi_f2iz>
 800add6:	4603      	mov	r3, r0
 800add8:	2b00      	cmp	r3, #0
 800adda:	bfb8      	it	lt
 800addc:	425b      	neglt	r3, r3
 800adde:	4618      	mov	r0, r3
 800ade0:	f7f5 ff78 	bl	8000cd4 <__aeabi_i2f>
 800ade4:	4603      	mov	r3, r0
 800ade6:	e00c      	b.n	800ae02 <PID_init+0x9a>
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	695b      	ldr	r3, [r3, #20]
 800adec:	4618      	mov	r0, r3
 800adee:	f7f6 f915 	bl	800101c <__aeabi_f2iz>
 800adf2:	4603      	mov	r3, r0
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	bfb8      	it	lt
 800adf8:	425b      	neglt	r3, r3
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7f5 ff6a 	bl	8000cd4 <__aeabi_i2f>
 800ae00:	4603      	mov	r3, r0
 800ae02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae04:	4618      	mov	r0, r3
 800ae06:	f7f5 ffb9 	bl	8000d7c <__aeabi_fmul>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	461a      	mov	r2, r3
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	619a      	str	r2, [r3, #24]

  PID_reset  (p_handle);
 800ae12:	68f8      	ldr	r0, [r7, #12]
 800ae14:	f000 f80a 	bl	800ae2c <PID_reset>
  PID_logInfo(p_handle);
 800ae18:	68f8      	ldr	r0, [r7, #12]
 800ae1a:	f000 f8eb 	bl	800aff4 <PID_logInfo>

  return;
 800ae1e:	bf00      	nop
}
 800ae20:	3714      	adds	r7, #20
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd90      	pop	{r4, r7, pc}
 800ae26:	bf00      	nop
 800ae28:	0800f338 	.word	0x0800f338

0800ae2c <PID_reset>:

void PID_reset(T_PID_Handle *p_handle)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b083      	sub	sp, #12
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  p_handle->pValue        = 0.0f;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f04f 0200 	mov.w	r2, #0
 800ae3a:	61da      	str	r2, [r3, #28]
  p_handle->iValue        = 0.0f;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f04f 0200 	mov.w	r2, #0
 800ae42:	621a      	str	r2, [r3, #32]
  p_handle->dValue        = 0.0f;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f04f 0200 	mov.w	r2, #0
 800ae4a:	625a      	str	r2, [r3, #36]	; 0x24
  p_handle->computedValue = 0.0f;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f04f 0200 	mov.w	r2, #0
 800ae52:	629a      	str	r2, [r3, #40]	; 0x28
  p_handle->lastError     = 0.0f;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f04f 0200 	mov.w	r2, #0
 800ae5a:	62da      	str	r2, [r3, #44]	; 0x2c

  return;
 800ae5c:	bf00      	nop
}
 800ae5e:	370c      	adds	r7, #12
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bc80      	pop	{r7}
 800ae64:	4770      	bx	lr

0800ae66 <PID_setTargetValue>:

  return;
}

void PID_setTargetValue(T_PID_Handle *p_handle, float p_targetValue)
{
 800ae66:	b480      	push	{r7}
 800ae68:	b083      	sub	sp, #12
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
 800ae6e:	6039      	str	r1, [r7, #0]
  p_handle->targetValue = p_targetValue;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	683a      	ldr	r2, [r7, #0]
 800ae74:	60da      	str	r2, [r3, #12]

  return;
 800ae76:	bf00      	nop
}
 800ae78:	370c      	adds	r7, #12
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bc80      	pop	{r7}
 800ae7e:	4770      	bx	lr

0800ae80 <PID_update>:
{
  return p_handle->antiWindUpValue;
}

float PID_update(T_PID_Handle *p_handle, float p_currentValue, uint32_t p_timeDelta)
{
 800ae80:	b5b0      	push	{r4, r5, r7, lr}
 800ae82:	b088      	sub	sp, #32
 800ae84:	af02      	add	r7, sp, #8
 800ae86:	60f8      	str	r0, [r7, #12]
 800ae88:	60b9      	str	r1, [r7, #8]
 800ae8a:	607a      	str	r2, [r7, #4]
  int32_t l_currentError;

  l_currentError = p_handle->targetValue - p_currentValue;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	68b9      	ldr	r1, [r7, #8]
 800ae92:	4618      	mov	r0, r3
 800ae94:	f7f5 fe68 	bl	8000b68 <__aeabi_fsub>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f7f6 f8be 	bl	800101c <__aeabi_f2iz>
 800aea0:	4603      	mov	r3, r0
 800aea2:	617b      	str	r3, [r7, #20]

  p_handle->pValue    =  l_currentError;
 800aea4:	6978      	ldr	r0, [r7, #20]
 800aea6:	f7f5 ff15 	bl	8000cd4 <__aeabi_i2f>
 800aeaa:	4602      	mov	r2, r0
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	61da      	str	r2, [r3, #28]
  p_handle->iValue   +=  l_currentError * p_timeDelta;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	6a1c      	ldr	r4, [r3, #32]
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	fb02 f303 	mul.w	r3, r2, r3
 800aebc:	4618      	mov	r0, r3
 800aebe:	f7f5 ff05 	bl	8000ccc <__aeabi_ui2f>
 800aec2:	4603      	mov	r3, r0
 800aec4:	4619      	mov	r1, r3
 800aec6:	4620      	mov	r0, r4
 800aec8:	f7f5 fe50 	bl	8000b6c <__addsf3>
 800aecc:	4603      	mov	r3, r0
 800aece:	461a      	mov	r2, r3
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	621a      	str	r2, [r3, #32]
  p_handle->iValue    =  UTI_clampIntValue(p_handle->iValue, -p_handle->antiWindUpValue, p_handle->antiWindUpValue, true, 0);
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	6a1b      	ldr	r3, [r3, #32]
 800aed8:	4618      	mov	r0, r3
 800aeda:	f7f6 f89f 	bl	800101c <__aeabi_f2iz>
 800aede:	4604      	mov	r4, r0
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	699b      	ldr	r3, [r3, #24]
 800aee4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800aee8:	4618      	mov	r0, r3
 800aeea:	f7f6 f897 	bl	800101c <__aeabi_f2iz>
 800aeee:	4605      	mov	r5, r0
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	699b      	ldr	r3, [r3, #24]
 800aef4:	4618      	mov	r0, r3
 800aef6:	f7f6 f891 	bl	800101c <__aeabi_f2iz>
 800aefa:	4602      	mov	r2, r0
 800aefc:	2300      	movs	r3, #0
 800aefe:	9300      	str	r3, [sp, #0]
 800af00:	2301      	movs	r3, #1
 800af02:	4629      	mov	r1, r5
 800af04:	4620      	mov	r0, r4
 800af06:	f000 fa79 	bl	800b3fc <UTI_clampIntValue>
 800af0a:	4603      	mov	r3, r0
 800af0c:	4618      	mov	r0, r3
 800af0e:	f7f5 fee1 	bl	8000cd4 <__aeabi_i2f>
 800af12:	4602      	mov	r2, r0
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	621a      	str	r2, [r3, #32]
  p_handle->dValue    = (l_currentError - p_handle->lastError) / p_timeDelta;
 800af18:	6978      	ldr	r0, [r7, #20]
 800af1a:	f7f5 fedb 	bl	8000cd4 <__aeabi_i2f>
 800af1e:	4602      	mov	r2, r0
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af24:	4619      	mov	r1, r3
 800af26:	4610      	mov	r0, r2
 800af28:	f7f5 fe1e 	bl	8000b68 <__aeabi_fsub>
 800af2c:	4603      	mov	r3, r0
 800af2e:	461c      	mov	r4, r3
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f7f5 fecb 	bl	8000ccc <__aeabi_ui2f>
 800af36:	4603      	mov	r3, r0
 800af38:	4619      	mov	r1, r3
 800af3a:	4620      	mov	r0, r4
 800af3c:	f7f5 ffd2 	bl	8000ee4 <__aeabi_fdiv>
 800af40:	4603      	mov	r3, r0
 800af42:	461a      	mov	r2, r3
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	625a      	str	r2, [r3, #36]	; 0x24
  p_handle->lastError =  l_currentError;
 800af48:	6978      	ldr	r0, [r7, #20]
 800af4a:	f7f5 fec3 	bl	8000cd4 <__aeabi_i2f>
 800af4e:	4602      	mov	r2, r0
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	62da      	str	r2, [r3, #44]	; 0x2c

  p_handle->computedValue = p_handle->kp * p_handle->pValue + p_handle->ki * p_handle->iValue + p_handle->kd * p_handle->dValue;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681a      	ldr	r2, [r3, #0]
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	69db      	ldr	r3, [r3, #28]
 800af5c:	4619      	mov	r1, r3
 800af5e:	4610      	mov	r0, r2
 800af60:	f7f5 ff0c 	bl	8000d7c <__aeabi_fmul>
 800af64:	4603      	mov	r3, r0
 800af66:	461c      	mov	r4, r3
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	685a      	ldr	r2, [r3, #4]
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	6a1b      	ldr	r3, [r3, #32]
 800af70:	4619      	mov	r1, r3
 800af72:	4610      	mov	r0, r2
 800af74:	f7f5 ff02 	bl	8000d7c <__aeabi_fmul>
 800af78:	4603      	mov	r3, r0
 800af7a:	4619      	mov	r1, r3
 800af7c:	4620      	mov	r0, r4
 800af7e:	f7f5 fdf5 	bl	8000b6c <__addsf3>
 800af82:	4603      	mov	r3, r0
 800af84:	461c      	mov	r4, r3
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	689a      	ldr	r2, [r3, #8]
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af8e:	4619      	mov	r1, r3
 800af90:	4610      	mov	r0, r2
 800af92:	f7f5 fef3 	bl	8000d7c <__aeabi_fmul>
 800af96:	4603      	mov	r3, r0
 800af98:	4619      	mov	r1, r3
 800af9a:	4620      	mov	r0, r4
 800af9c:	f7f5 fde6 	bl	8000b6c <__addsf3>
 800afa0:	4603      	mov	r3, r0
 800afa2:	461a      	mov	r2, r3
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	629a      	str	r2, [r3, #40]	; 0x28
  p_handle->computedValue = UTI_clampIntValue(p_handle->computedValue, p_handle->minValue, p_handle->maxValue, true, 0);
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afac:	4618      	mov	r0, r3
 800afae:	f7f6 f835 	bl	800101c <__aeabi_f2iz>
 800afb2:	4604      	mov	r4, r0
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	691b      	ldr	r3, [r3, #16]
 800afb8:	4618      	mov	r0, r3
 800afba:	f7f6 f82f 	bl	800101c <__aeabi_f2iz>
 800afbe:	4605      	mov	r5, r0
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	695b      	ldr	r3, [r3, #20]
 800afc4:	4618      	mov	r0, r3
 800afc6:	f7f6 f829 	bl	800101c <__aeabi_f2iz>
 800afca:	4602      	mov	r2, r0
 800afcc:	2300      	movs	r3, #0
 800afce:	9300      	str	r3, [sp, #0]
 800afd0:	2301      	movs	r3, #1
 800afd2:	4629      	mov	r1, r5
 800afd4:	4620      	mov	r0, r4
 800afd6:	f000 fa11 	bl	800b3fc <UTI_clampIntValue>
 800afda:	4603      	mov	r3, r0
 800afdc:	4618      	mov	r0, r3
 800afde:	f7f5 fe79 	bl	8000cd4 <__aeabi_i2f>
 800afe2:	4602      	mov	r2, r0
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	629a      	str	r2, [r3, #40]	; 0x28

  return p_handle->computedValue;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800afec:	4618      	mov	r0, r3
 800afee:	3718      	adds	r7, #24
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bdb0      	pop	{r4, r5, r7, pc}

0800aff4 <PID_logInfo>:

void PID_logInfo(T_PID_Handle *p_handle)
{
 800aff4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800aff8:	b086      	sub	sp, #24
 800affa:	af04      	add	r7, sp, #16
 800affc:	6078      	str	r0, [r7, #4]
  LOG_info(" kp = %6.2f -  ki = %6.2f -     kd = %6.2f", p_handle->kp         , p_handle->ki      , p_handle->kd             );
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	4618      	mov	r0, r3
 800b004:	f7f5 fa7c 	bl	8000500 <__aeabi_f2d>
 800b008:	4680      	mov	r8, r0
 800b00a:	4689      	mov	r9, r1
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	4618      	mov	r0, r3
 800b012:	f7f5 fa75 	bl	8000500 <__aeabi_f2d>
 800b016:	4604      	mov	r4, r0
 800b018:	460d      	mov	r5, r1
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	689b      	ldr	r3, [r3, #8]
 800b01e:	4618      	mov	r0, r3
 800b020:	f7f5 fa6e 	bl	8000500 <__aeabi_f2d>
 800b024:	4602      	mov	r2, r0
 800b026:	460b      	mov	r3, r1
 800b028:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b02c:	e9cd 4500 	strd	r4, r5, [sp]
 800b030:	4642      	mov	r2, r8
 800b032:	464b      	mov	r3, r9
 800b034:	492e      	ldr	r1, [pc, #184]	; (800b0f0 <PID_logInfo+0xfc>)
 800b036:	2001      	movs	r0, #1
 800b038:	f7ff fc82 	bl	800a940 <LOG_log>
  LOG_info("  p = %6.2f -   i = %6.2f -      d = %6.2f", p_handle->pValue     , p_handle->iValue  , p_handle->dValue         );
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	69db      	ldr	r3, [r3, #28]
 800b040:	4618      	mov	r0, r3
 800b042:	f7f5 fa5d 	bl	8000500 <__aeabi_f2d>
 800b046:	4680      	mov	r8, r0
 800b048:	4689      	mov	r9, r1
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6a1b      	ldr	r3, [r3, #32]
 800b04e:	4618      	mov	r0, r3
 800b050:	f7f5 fa56 	bl	8000500 <__aeabi_f2d>
 800b054:	4604      	mov	r4, r0
 800b056:	460d      	mov	r5, r1
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b05c:	4618      	mov	r0, r3
 800b05e:	f7f5 fa4f 	bl	8000500 <__aeabi_f2d>
 800b062:	4602      	mov	r2, r0
 800b064:	460b      	mov	r3, r1
 800b066:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b06a:	e9cd 4500 	strd	r4, r5, [sp]
 800b06e:	4642      	mov	r2, r8
 800b070:	464b      	mov	r3, r9
 800b072:	4920      	ldr	r1, [pc, #128]	; (800b0f4 <PID_logInfo+0x100>)
 800b074:	2001      	movs	r0, #1
 800b076:	f7ff fc63 	bl	800a940 <LOG_log>
  LOG_info("min = %6.2f - max = %6.2f - a.w.up = %6.2f", p_handle->minValue   , p_handle->maxValue, p_handle->antiWindUpValue);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	691b      	ldr	r3, [r3, #16]
 800b07e:	4618      	mov	r0, r3
 800b080:	f7f5 fa3e 	bl	8000500 <__aeabi_f2d>
 800b084:	4680      	mov	r8, r0
 800b086:	4689      	mov	r9, r1
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	695b      	ldr	r3, [r3, #20]
 800b08c:	4618      	mov	r0, r3
 800b08e:	f7f5 fa37 	bl	8000500 <__aeabi_f2d>
 800b092:	4604      	mov	r4, r0
 800b094:	460d      	mov	r5, r1
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	699b      	ldr	r3, [r3, #24]
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7f5 fa30 	bl	8000500 <__aeabi_f2d>
 800b0a0:	4602      	mov	r2, r0
 800b0a2:	460b      	mov	r3, r1
 800b0a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b0a8:	e9cd 4500 	strd	r4, r5, [sp]
 800b0ac:	4642      	mov	r2, r8
 800b0ae:	464b      	mov	r3, r9
 800b0b0:	4911      	ldr	r1, [pc, #68]	; (800b0f8 <PID_logInfo+0x104>)
 800b0b2:	2001      	movs	r0, #1
 800b0b4:	f7ff fc44 	bl	800a940 <LOG_log>
  LOG_info("  t = %6.2f - val = %6.2f               ", p_handle->targetValue, p_handle->computedValue                      );
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	68db      	ldr	r3, [r3, #12]
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f7f5 fa1f 	bl	8000500 <__aeabi_f2d>
 800b0c2:	4604      	mov	r4, r0
 800b0c4:	460d      	mov	r5, r1
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f7f5 fa18 	bl	8000500 <__aeabi_f2d>
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	460b      	mov	r3, r1
 800b0d4:	e9cd 2300 	strd	r2, r3, [sp]
 800b0d8:	4622      	mov	r2, r4
 800b0da:	462b      	mov	r3, r5
 800b0dc:	4907      	ldr	r1, [pc, #28]	; (800b0fc <PID_logInfo+0x108>)
 800b0de:	2001      	movs	r0, #1
 800b0e0:	f7ff fc2e 	bl	800a940 <LOG_log>

  return;
 800b0e4:	bf00      	nop
}
 800b0e6:	3708      	adds	r7, #8
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b0ee:	bf00      	nop
 800b0f0:	0800f34c 	.word	0x0800f34c
 800b0f4:	0800f378 	.word	0x0800f378
 800b0f8:	0800f3a4 	.word	0x0800f3a4
 800b0fc:	0800f3d0 	.word	0x0800f3d0

0800b100 <SFO_initData>:

#include "log.h"


void SFO_initData(T_SFO_data *p_data)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b082      	sub	sp, #8
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  (void)memset(p_data, 0, CST_STRING_FIFO_MAX_STRING_LENGTH);
 800b108:	2210      	movs	r2, #16
 800b10a:	2100      	movs	r1, #0
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 fa2b 	bl	800b568 <memset>

  return;
 800b112:	bf00      	nop
}
 800b114:	3708      	adds	r7, #8
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
	...

0800b11c <SFO_init>:

void SFO_init(T_SFO_Context *p_fifo)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b082      	sub	sp, #8
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  LOG_debug("String FIFO now empty");
 800b124:	4908      	ldr	r1, [pc, #32]	; (800b148 <SFO_init+0x2c>)
 800b126:	2000      	movs	r0, #0
 800b128:	f7ff fc0a 	bl	800a940 <LOG_log>

  p_fifo->head  = NULL;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2200      	movs	r2, #0
 800b130:	601a      	str	r2, [r3, #0]
  p_fifo->tail  = NULL;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2200      	movs	r2, #0
 800b136:	605a      	str	r2, [r3, #4]
  p_fifo->count = 0;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	609a      	str	r2, [r3, #8]

  return;
 800b13e:	bf00      	nop
}
 800b140:	3708      	adds	r7, #8
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}
 800b146:	bf00      	nop
 800b148:	0800f3fc 	.word	0x0800f3fc

0800b14c <SFO_push>:

void SFO_push(T_SFO_Context *p_fifo, T_SFO_data *p_dataIn)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b084      	sub	sp, #16
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	6039      	str	r1, [r7, #0]
  T_SFO_Element *l_element;

  if (p_fifo->count == CST_STRING_FIFO_MAX_ELEMENTS)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	689b      	ldr	r3, [r3, #8]
 800b15a:	2b0a      	cmp	r3, #10
 800b15c:	d105      	bne.n	800b16a <SFO_push+0x1e>
  {
    LOG_error("SFO_push() failure - String FIFO is full (%u elements)", CST_STRING_FIFO_MAX_ELEMENTS);
 800b15e:	220a      	movs	r2, #10
 800b160:	4917      	ldr	r1, [pc, #92]	; (800b1c0 <SFO_push+0x74>)
 800b162:	2003      	movs	r0, #3
 800b164:	f7ff fbec 	bl	800a940 <LOG_log>

      p_fifo->count++;
    }
  }

  return;
 800b168:	e027      	b.n	800b1ba <SFO_push+0x6e>
    l_element = (T_SFO_Element *)malloc(sizeof(T_SFO_Element));
 800b16a:	2014      	movs	r0, #20
 800b16c:	f000 f9ec 	bl	800b548 <malloc>
 800b170:	4603      	mov	r3, r0
 800b172:	60fb      	str	r3, [r7, #12]
    if (l_element == NULL)
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d104      	bne.n	800b184 <SFO_push+0x38>
      LOG_error("SFO_push() failure - Could not allocate new memory");
 800b17a:	4912      	ldr	r1, [pc, #72]	; (800b1c4 <SFO_push+0x78>)
 800b17c:	2003      	movs	r0, #3
 800b17e:	f7ff fbdf 	bl	800a940 <LOG_log>
  return;
 800b182:	e01a      	b.n	800b1ba <SFO_push+0x6e>
      (void)strncpy(l_element->data, *p_dataIn, CST_STRING_FIFO_MAX_STRING_LENGTH);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2210      	movs	r2, #16
 800b188:	6839      	ldr	r1, [r7, #0]
 800b18a:	4618      	mov	r0, r3
 800b18c:	f000 ff42 	bl	800c014 <strncpy>
      l_element->nextElement = p_fifo->head;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681a      	ldr	r2, [r3, #0]
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	611a      	str	r2, [r3, #16]
      p_fifo->head           = l_element;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	68fa      	ldr	r2, [r7, #12]
 800b19c:	601a      	str	r2, [r3, #0]
      if (p_fifo->tail == NULL)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d103      	bne.n	800b1ae <SFO_push+0x62>
        p_fifo->tail = p_fifo->head;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681a      	ldr	r2, [r3, #0]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	605a      	str	r2, [r3, #4]
      p_fifo->count++;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	689b      	ldr	r3, [r3, #8]
 800b1b2:	1c5a      	adds	r2, r3, #1
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	609a      	str	r2, [r3, #8]
  return;
 800b1b8:	bf00      	nop
}
 800b1ba:	3710      	adds	r7, #16
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}
 800b1c0:	0800f414 	.word	0x0800f414
 800b1c4:	0800f44c 	.word	0x0800f44c

0800b1c8 <SFO_pop>:

void SFO_pop(T_SFO_Context *p_fifo, T_SFO_data *p_dataOut)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b084      	sub	sp, #16
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	6039      	str	r1, [r7, #0]
  T_SFO_Element *l_element;

  if (p_fifo->count == 0)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	689b      	ldr	r3, [r3, #8]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d104      	bne.n	800b1e4 <SFO_pop+0x1c>
  {
    LOG_error("SFO_pop() failure - String FIFO is empty");
 800b1da:	491a      	ldr	r1, [pc, #104]	; (800b244 <SFO_pop+0x7c>)
 800b1dc:	2003      	movs	r0, #3
 800b1de:	f7ff fbaf 	bl	800a940 <LOG_log>
    {
      SFO_init(p_fifo);
    }
  }

  return;
 800b1e2:	e02c      	b.n	800b23e <SFO_pop+0x76>
    (void)strncpy(*p_dataOut, p_fifo->tail->data, CST_STRING_FIFO_MAX_STRING_LENGTH);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	685b      	ldr	r3, [r3, #4]
 800b1e8:	2210      	movs	r2, #16
 800b1ea:	4619      	mov	r1, r3
 800b1ec:	6838      	ldr	r0, [r7, #0]
 800b1ee:	f000 ff11 	bl	800c014 <strncpy>
    free(p_fifo->tail);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f000 f9ae 	bl	800b558 <free>
    if (p_fifo->count > 1)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	689b      	ldr	r3, [r3, #8]
 800b200:	2b01      	cmp	r3, #1
 800b202:	d918      	bls.n	800b236 <SFO_pop+0x6e>
      l_element = p_fifo->head;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	60fb      	str	r3, [r7, #12]
      while (l_element->nextElement != p_fifo->tail)
 800b20a:	e002      	b.n	800b212 <SFO_pop+0x4a>
        l_element = l_element->nextElement;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	691b      	ldr	r3, [r3, #16]
 800b210:	60fb      	str	r3, [r7, #12]
      while (l_element->nextElement != p_fifo->tail)
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	691a      	ldr	r2, [r3, #16]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	685b      	ldr	r3, [r3, #4]
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d1f6      	bne.n	800b20c <SFO_pop+0x44>
      l_element->nextElement = NULL;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2200      	movs	r2, #0
 800b222:	611a      	str	r2, [r3, #16]
      p_fifo->tail           = l_element;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	68fa      	ldr	r2, [r7, #12]
 800b228:	605a      	str	r2, [r3, #4]
      p_fifo->count--;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	689b      	ldr	r3, [r3, #8]
 800b22e:	1e5a      	subs	r2, r3, #1
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	609a      	str	r2, [r3, #8]
  return;
 800b234:	e003      	b.n	800b23e <SFO_pop+0x76>
      SFO_init(p_fifo);
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f7ff ff70 	bl	800b11c <SFO_init>
  return;
 800b23c:	bf00      	nop
}
 800b23e:	3710      	adds	r7, #16
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}
 800b244:	0800f480 	.word	0x0800f480

0800b248 <SFO_getCount>:

uint32_t SFO_getCount(T_SFO_Context *p_fifo)
{
 800b248:	b480      	push	{r7}
 800b24a:	b083      	sub	sp, #12
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  return p_fifo->count;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	689b      	ldr	r3, [r3, #8]
}
 800b254:	4618      	mov	r0, r3
 800b256:	370c      	adds	r7, #12
 800b258:	46bd      	mov	sp, r7
 800b25a:	bc80      	pop	{r7}
 800b25c:	4770      	bx	lr
	...

0800b260 <SFO_logInfo>:

void SFO_logInfo(T_SFO_Context *p_fifo)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b084      	sub	sp, #16
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  T_SFO_Element *l_element;

  if (p_fifo->count == 0)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	689b      	ldr	r3, [r3, #8]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d104      	bne.n	800b27a <SFO_logInfo+0x1a>
  {
    LOG_info("String FIFO is empty");
 800b270:	4924      	ldr	r1, [pc, #144]	; (800b304 <SFO_logInfo+0xa4>)
 800b272:	2001      	movs	r0, #1
 800b274:	f7ff fb64 	bl	800a940 <LOG_log>

      l_element = l_element->nextElement;
    }
  }

  return;
 800b278:	e040      	b.n	800b2fc <SFO_logInfo+0x9c>
    LOG_info("String FIFO: %u element(s)", p_fifo->count);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	689b      	ldr	r3, [r3, #8]
 800b27e:	461a      	mov	r2, r3
 800b280:	4921      	ldr	r1, [pc, #132]	; (800b308 <SFO_logInfo+0xa8>)
 800b282:	2001      	movs	r0, #1
 800b284:	f7ff fb5c 	bl	800a940 <LOG_log>
    l_element = p_fifo->head;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	60fb      	str	r3, [r7, #12]
    while (l_element != NULL)
 800b28e:	e031      	b.n	800b2f4 <SFO_logInfo+0x94>
      if ((l_element == p_fifo->head) && (l_element == p_fifo->tail))
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	68fa      	ldr	r2, [r7, #12]
 800b296:	429a      	cmp	r2, r3
 800b298:	d10b      	bne.n	800b2b2 <SFO_logInfo+0x52>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	68fa      	ldr	r2, [r7, #12]
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	d106      	bne.n	800b2b2 <SFO_logInfo+0x52>
        LOG_info("HEAD -> '%s' <- TAIL", l_element->data);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	4918      	ldr	r1, [pc, #96]	; (800b30c <SFO_logInfo+0xac>)
 800b2aa:	2001      	movs	r0, #1
 800b2ac:	f7ff fb48 	bl	800a940 <LOG_log>
 800b2b0:	e01d      	b.n	800b2ee <SFO_logInfo+0x8e>
      else if (l_element == p_fifo->head)
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	68fa      	ldr	r2, [r7, #12]
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d106      	bne.n	800b2ca <SFO_logInfo+0x6a>
        LOG_info("HEAD -> '%s'", l_element->data);
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	461a      	mov	r2, r3
 800b2c0:	4913      	ldr	r1, [pc, #76]	; (800b310 <SFO_logInfo+0xb0>)
 800b2c2:	2001      	movs	r0, #1
 800b2c4:	f7ff fb3c 	bl	800a940 <LOG_log>
 800b2c8:	e011      	b.n	800b2ee <SFO_logInfo+0x8e>
      else if (l_element == p_fifo->tail)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	68fa      	ldr	r2, [r7, #12]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d106      	bne.n	800b2e2 <SFO_logInfo+0x82>
        LOG_info("TAIL -> '%s'", l_element->data);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	461a      	mov	r2, r3
 800b2d8:	490e      	ldr	r1, [pc, #56]	; (800b314 <SFO_logInfo+0xb4>)
 800b2da:	2001      	movs	r0, #1
 800b2dc:	f7ff fb30 	bl	800a940 <LOG_log>
 800b2e0:	e005      	b.n	800b2ee <SFO_logInfo+0x8e>
        LOG_info("        '%s'", l_element->data);
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	490c      	ldr	r1, [pc, #48]	; (800b318 <SFO_logInfo+0xb8>)
 800b2e8:	2001      	movs	r0, #1
 800b2ea:	f7ff fb29 	bl	800a940 <LOG_log>
      l_element = l_element->nextElement;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	691b      	ldr	r3, [r3, #16]
 800b2f2:	60fb      	str	r3, [r7, #12]
    while (l_element != NULL)
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d1ca      	bne.n	800b290 <SFO_logInfo+0x30>
  return;
 800b2fa:	bf00      	nop
}
 800b2fc:	3710      	adds	r7, #16
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}
 800b302:	bf00      	nop
 800b304:	0800f4ac 	.word	0x0800f4ac
 800b308:	0800f4c4 	.word	0x0800f4c4
 800b30c:	0800f4e0 	.word	0x0800f4e0
 800b310:	0800f4f8 	.word	0x0800f4f8
 800b314:	0800f508 	.word	0x0800f508
 800b318:	0800f518 	.word	0x0800f518

0800b31c <UTI_init>:
#include "log.h"

static TIM_HandleTypeDef *g_UTI_delayTimerHandle;

void UTI_init(TIM_HandleTypeDef *p_delayTimerHandle)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b082      	sub	sp, #8
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing utilities");
 800b324:	4905      	ldr	r1, [pc, #20]	; (800b33c <UTI_init+0x20>)
 800b326:	2001      	movs	r0, #1
 800b328:	f7ff fb0a 	bl	800a940 <LOG_log>

  g_UTI_delayTimerHandle = p_delayTimerHandle;
 800b32c:	4a04      	ldr	r2, [pc, #16]	; (800b340 <UTI_init+0x24>)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6013      	str	r3, [r2, #0]

  return;
 800b332:	bf00      	nop
}
 800b334:	3708      	adds	r7, #8
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
 800b33a:	bf00      	nop
 800b33c:	0800f528 	.word	0x0800f528
 800b340:	200004cc 	.word	0x200004cc

0800b344 <UTI_delayUs>:

void UTI_delayUs(uint16_t p_delay)
{
 800b344:	b480      	push	{r7}
 800b346:	b083      	sub	sp, #12
 800b348:	af00      	add	r7, sp, #0
 800b34a:	4603      	mov	r3, r0
 800b34c:	80fb      	strh	r3, [r7, #6]
  /* Reset the micro-seconds counter */
  __HAL_TIM_SET_COUNTER(g_UTI_delayTimerHandle, 0);
 800b34e:	4b09      	ldr	r3, [pc, #36]	; (800b374 <UTI_delayUs+0x30>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	2200      	movs	r2, #0
 800b356:	625a      	str	r2, [r3, #36]	; 0x24

  /* Wait for the counter to reach the input micro-seconds number */
  while (__HAL_TIM_GET_COUNTER(g_UTI_delayTimerHandle) < p_delay)
 800b358:	bf00      	nop
 800b35a:	4b06      	ldr	r3, [pc, #24]	; (800b374 <UTI_delayUs+0x30>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b362:	88fb      	ldrh	r3, [r7, #6]
 800b364:	429a      	cmp	r2, r3
 800b366:	d3f8      	bcc.n	800b35a <UTI_delayUs+0x16>
  {
    ; /* Nothing to do */
  }

  return;
 800b368:	bf00      	nop
}
 800b36a:	370c      	adds	r7, #12
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bc80      	pop	{r7}
 800b370:	4770      	bx	lr
 800b372:	bf00      	nop
 800b374:	200004cc 	.word	0x200004cc

0800b378 <UTI_resetRtcDate>:

void UTI_resetRtcDate(RTC_DateTypeDef *p_date)
{
 800b378:	b480      	push	{r7}
 800b37a:	b083      	sub	sp, #12
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  p_date->Date    = 0;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2200      	movs	r2, #0
 800b384:	709a      	strb	r2, [r3, #2]
  p_date->Month   = 0;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2200      	movs	r2, #0
 800b38a:	705a      	strb	r2, [r3, #1]
  p_date->WeekDay = 0;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2200      	movs	r2, #0
 800b390:	701a      	strb	r2, [r3, #0]
  p_date->Year    = 0;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2200      	movs	r2, #0
 800b396:	70da      	strb	r2, [r3, #3]

  return;
 800b398:	bf00      	nop
}
 800b39a:	370c      	adds	r7, #12
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bc80      	pop	{r7}
 800b3a0:	4770      	bx	lr

0800b3a2 <UTI_resetRtcTime>:


void UTI_resetRtcTime(RTC_TimeTypeDef *p_time)
{
 800b3a2:	b480      	push	{r7}
 800b3a4:	b083      	sub	sp, #12
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
  p_time->Hours   = 0;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	701a      	strb	r2, [r3, #0]
  p_time->Minutes = 0;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	705a      	strb	r2, [r3, #1]
  p_time->Seconds = 0;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	709a      	strb	r2, [r3, #2]

  return;
 800b3bc:	bf00      	nop
}
 800b3be:	370c      	adds	r7, #12
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bc80      	pop	{r7}
 800b3c4:	4770      	bx	lr

0800b3c6 <UTI_turnRtcTimeToSeconds>:

uint32_t UTI_turnRtcTimeToSeconds(RTC_TimeTypeDef *p_time)
{
 800b3c6:	b480      	push	{r7}
 800b3c8:	b083      	sub	sp, #12
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6078      	str	r0, [r7, #4]
  return p_time->Hours * 3600 + p_time->Minutes * 60 + p_time->Seconds;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800b3d8:	fb03 f202 	mul.w	r2, r3, r2
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	785b      	ldrb	r3, [r3, #1]
 800b3e0:	4619      	mov	r1, r3
 800b3e2:	460b      	mov	r3, r1
 800b3e4:	011b      	lsls	r3, r3, #4
 800b3e6:	1a5b      	subs	r3, r3, r1
 800b3e8:	009b      	lsls	r3, r3, #2
 800b3ea:	4413      	add	r3, r2
 800b3ec:	687a      	ldr	r2, [r7, #4]
 800b3ee:	7892      	ldrb	r2, [r2, #2]
 800b3f0:	4413      	add	r3, r2
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	370c      	adds	r7, #12
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bc80      	pop	{r7}
 800b3fa:	4770      	bx	lr

0800b3fc <UTI_clampIntValue>:

int32_t UTI_clampIntValue(int32_t p_value, int32_t p_minValue, int32_t p_maxValue, bool p_clampToNearest, int32_t p_clampValue)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b087      	sub	sp, #28
 800b400:	af00      	add	r7, sp, #0
 800b402:	60f8      	str	r0, [r7, #12]
 800b404:	60b9      	str	r1, [r7, #8]
 800b406:	607a      	str	r2, [r7, #4]
 800b408:	70fb      	strb	r3, [r7, #3]
  int32_t l_returnValue;

  if (p_value < p_minValue)
 800b40a:	68fa      	ldr	r2, [r7, #12]
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	429a      	cmp	r2, r3
 800b410:	da08      	bge.n	800b424 <UTI_clampIntValue+0x28>
  {
    if (p_clampToNearest == true)
 800b412:	78fb      	ldrb	r3, [r7, #3]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d002      	beq.n	800b41e <UTI_clampIntValue+0x22>
    {
      l_returnValue = p_minValue;
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	617b      	str	r3, [r7, #20]
 800b41c:	e011      	b.n	800b442 <UTI_clampIntValue+0x46>
    }
    else
    {
      l_returnValue = p_clampValue;
 800b41e:	6a3b      	ldr	r3, [r7, #32]
 800b420:	617b      	str	r3, [r7, #20]
 800b422:	e00e      	b.n	800b442 <UTI_clampIntValue+0x46>
    }
  }
  else if (p_value > p_maxValue)
 800b424:	68fa      	ldr	r2, [r7, #12]
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	429a      	cmp	r2, r3
 800b42a:	dd08      	ble.n	800b43e <UTI_clampIntValue+0x42>
  {
    if (p_clampToNearest == true)
 800b42c:	78fb      	ldrb	r3, [r7, #3]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d002      	beq.n	800b438 <UTI_clampIntValue+0x3c>
    {
      l_returnValue = p_maxValue;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	617b      	str	r3, [r7, #20]
 800b436:	e004      	b.n	800b442 <UTI_clampIntValue+0x46>
    }
    else
    {
      l_returnValue = p_clampValue;
 800b438:	6a3b      	ldr	r3, [r7, #32]
 800b43a:	617b      	str	r3, [r7, #20]
 800b43c:	e001      	b.n	800b442 <UTI_clampIntValue+0x46>
    }
  }
  else
  {
    l_returnValue = p_value;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	617b      	str	r3, [r7, #20]
  }

  return l_returnValue;
 800b442:	697b      	ldr	r3, [r7, #20]
}
 800b444:	4618      	mov	r0, r3
 800b446:	371c      	adds	r7, #28
 800b448:	46bd      	mov	sp, r7
 800b44a:	bc80      	pop	{r7}
 800b44c:	4770      	bx	lr

0800b44e <UTI_normalizeIntValue>:

  return l_returnValue;
}

int32_t UTI_normalizeIntValue(int32_t p_value, int32_t p_inMinValue, int32_t p_inMaxValue, int32_t p_outMinValue, int32_t p_outMaxValue, bool p_isInversionNeeded)
{
 800b44e:	b5b0      	push	{r4, r5, r7, lr}
 800b450:	b086      	sub	sp, #24
 800b452:	af00      	add	r7, sp, #0
 800b454:	60f8      	str	r0, [r7, #12]
 800b456:	60b9      	str	r1, [r7, #8]
 800b458:	607a      	str	r2, [r7, #4]
 800b45a:	603b      	str	r3, [r7, #0]
  float l_returnValue;
  float l_ratio;

  l_ratio       = ((float)p_outMaxValue - (float)p_outMinValue) / ((float)p_inMaxValue - (float)p_inMinValue);
 800b45c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b45e:	f7f5 fc39 	bl	8000cd4 <__aeabi_i2f>
 800b462:	4604      	mov	r4, r0
 800b464:	6838      	ldr	r0, [r7, #0]
 800b466:	f7f5 fc35 	bl	8000cd4 <__aeabi_i2f>
 800b46a:	4603      	mov	r3, r0
 800b46c:	4619      	mov	r1, r3
 800b46e:	4620      	mov	r0, r4
 800b470:	f7f5 fb7a 	bl	8000b68 <__aeabi_fsub>
 800b474:	4603      	mov	r3, r0
 800b476:	461d      	mov	r5, r3
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f7f5 fc2b 	bl	8000cd4 <__aeabi_i2f>
 800b47e:	4604      	mov	r4, r0
 800b480:	68b8      	ldr	r0, [r7, #8]
 800b482:	f7f5 fc27 	bl	8000cd4 <__aeabi_i2f>
 800b486:	4603      	mov	r3, r0
 800b488:	4619      	mov	r1, r3
 800b48a:	4620      	mov	r0, r4
 800b48c:	f7f5 fb6c 	bl	8000b68 <__aeabi_fsub>
 800b490:	4603      	mov	r3, r0
 800b492:	4619      	mov	r1, r3
 800b494:	4628      	mov	r0, r5
 800b496:	f7f5 fd25 	bl	8000ee4 <__aeabi_fdiv>
 800b49a:	4603      	mov	r3, r0
 800b49c:	613b      	str	r3, [r7, #16]
  l_returnValue =  (float)(p_value - p_inMinValue) * l_ratio + p_outMinValue;
 800b49e:	68fa      	ldr	r2, [r7, #12]
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	1ad3      	subs	r3, r2, r3
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f7f5 fc15 	bl	8000cd4 <__aeabi_i2f>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	6939      	ldr	r1, [r7, #16]
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7f5 fc64 	bl	8000d7c <__aeabi_fmul>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	461c      	mov	r4, r3
 800b4b8:	6838      	ldr	r0, [r7, #0]
 800b4ba:	f7f5 fc0b 	bl	8000cd4 <__aeabi_i2f>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	4620      	mov	r0, r4
 800b4c4:	f7f5 fb52 	bl	8000b6c <__addsf3>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	617b      	str	r3, [r7, #20]

  if (p_isInversionNeeded == true)
 800b4cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d003      	beq.n	800b4dc <UTI_normalizeIntValue+0x8e>
  {
    l_returnValue *= -1.0f;
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b4da:	617b      	str	r3, [r7, #20]
  else
  {
    ; /* Nothing to do */
  }

  return (int32_t)l_returnValue;
 800b4dc:	6978      	ldr	r0, [r7, #20]
 800b4de:	f7f5 fd9d 	bl	800101c <__aeabi_f2iz>
 800b4e2:	4603      	mov	r3, r0
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3718      	adds	r7, #24
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bdb0      	pop	{r4, r5, r7, pc}

0800b4ec <atoi>:
 800b4ec:	220a      	movs	r2, #10
 800b4ee:	2100      	movs	r1, #0
 800b4f0:	f000 be36 	b.w	800c160 <strtol>

0800b4f4 <__errno>:
 800b4f4:	4b01      	ldr	r3, [pc, #4]	; (800b4fc <__errno+0x8>)
 800b4f6:	6818      	ldr	r0, [r3, #0]
 800b4f8:	4770      	bx	lr
 800b4fa:	bf00      	nop
 800b4fc:	2000001c 	.word	0x2000001c

0800b500 <__libc_init_array>:
 800b500:	b570      	push	{r4, r5, r6, lr}
 800b502:	2600      	movs	r6, #0
 800b504:	4d0c      	ldr	r5, [pc, #48]	; (800b538 <__libc_init_array+0x38>)
 800b506:	4c0d      	ldr	r4, [pc, #52]	; (800b53c <__libc_init_array+0x3c>)
 800b508:	1b64      	subs	r4, r4, r5
 800b50a:	10a4      	asrs	r4, r4, #2
 800b50c:	42a6      	cmp	r6, r4
 800b50e:	d109      	bne.n	800b524 <__libc_init_array+0x24>
 800b510:	f002 ffc6 	bl	800e4a0 <_init>
 800b514:	2600      	movs	r6, #0
 800b516:	4d0a      	ldr	r5, [pc, #40]	; (800b540 <__libc_init_array+0x40>)
 800b518:	4c0a      	ldr	r4, [pc, #40]	; (800b544 <__libc_init_array+0x44>)
 800b51a:	1b64      	subs	r4, r4, r5
 800b51c:	10a4      	asrs	r4, r4, #2
 800b51e:	42a6      	cmp	r6, r4
 800b520:	d105      	bne.n	800b52e <__libc_init_array+0x2e>
 800b522:	bd70      	pop	{r4, r5, r6, pc}
 800b524:	f855 3b04 	ldr.w	r3, [r5], #4
 800b528:	4798      	blx	r3
 800b52a:	3601      	adds	r6, #1
 800b52c:	e7ee      	b.n	800b50c <__libc_init_array+0xc>
 800b52e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b532:	4798      	blx	r3
 800b534:	3601      	adds	r6, #1
 800b536:	e7f2      	b.n	800b51e <__libc_init_array+0x1e>
 800b538:	0800f93c 	.word	0x0800f93c
 800b53c:	0800f93c 	.word	0x0800f93c
 800b540:	0800f93c 	.word	0x0800f93c
 800b544:	0800f940 	.word	0x0800f940

0800b548 <malloc>:
 800b548:	4b02      	ldr	r3, [pc, #8]	; (800b554 <malloc+0xc>)
 800b54a:	4601      	mov	r1, r0
 800b54c:	6818      	ldr	r0, [r3, #0]
 800b54e:	f000 b85f 	b.w	800b610 <_malloc_r>
 800b552:	bf00      	nop
 800b554:	2000001c 	.word	0x2000001c

0800b558 <free>:
 800b558:	4b02      	ldr	r3, [pc, #8]	; (800b564 <free+0xc>)
 800b55a:	4601      	mov	r1, r0
 800b55c:	6818      	ldr	r0, [r3, #0]
 800b55e:	f000 b80b 	b.w	800b578 <_free_r>
 800b562:	bf00      	nop
 800b564:	2000001c 	.word	0x2000001c

0800b568 <memset>:
 800b568:	4603      	mov	r3, r0
 800b56a:	4402      	add	r2, r0
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d100      	bne.n	800b572 <memset+0xa>
 800b570:	4770      	bx	lr
 800b572:	f803 1b01 	strb.w	r1, [r3], #1
 800b576:	e7f9      	b.n	800b56c <memset+0x4>

0800b578 <_free_r>:
 800b578:	b538      	push	{r3, r4, r5, lr}
 800b57a:	4605      	mov	r5, r0
 800b57c:	2900      	cmp	r1, #0
 800b57e:	d043      	beq.n	800b608 <_free_r+0x90>
 800b580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b584:	1f0c      	subs	r4, r1, #4
 800b586:	2b00      	cmp	r3, #0
 800b588:	bfb8      	it	lt
 800b58a:	18e4      	addlt	r4, r4, r3
 800b58c:	f001 fdc4 	bl	800d118 <__malloc_lock>
 800b590:	4a1e      	ldr	r2, [pc, #120]	; (800b60c <_free_r+0x94>)
 800b592:	6813      	ldr	r3, [r2, #0]
 800b594:	4610      	mov	r0, r2
 800b596:	b933      	cbnz	r3, 800b5a6 <_free_r+0x2e>
 800b598:	6063      	str	r3, [r4, #4]
 800b59a:	6014      	str	r4, [r2, #0]
 800b59c:	4628      	mov	r0, r5
 800b59e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5a2:	f001 bdbf 	b.w	800d124 <__malloc_unlock>
 800b5a6:	42a3      	cmp	r3, r4
 800b5a8:	d90a      	bls.n	800b5c0 <_free_r+0x48>
 800b5aa:	6821      	ldr	r1, [r4, #0]
 800b5ac:	1862      	adds	r2, r4, r1
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	bf01      	itttt	eq
 800b5b2:	681a      	ldreq	r2, [r3, #0]
 800b5b4:	685b      	ldreq	r3, [r3, #4]
 800b5b6:	1852      	addeq	r2, r2, r1
 800b5b8:	6022      	streq	r2, [r4, #0]
 800b5ba:	6063      	str	r3, [r4, #4]
 800b5bc:	6004      	str	r4, [r0, #0]
 800b5be:	e7ed      	b.n	800b59c <_free_r+0x24>
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	b10b      	cbz	r3, 800b5ca <_free_r+0x52>
 800b5c6:	42a3      	cmp	r3, r4
 800b5c8:	d9fa      	bls.n	800b5c0 <_free_r+0x48>
 800b5ca:	6811      	ldr	r1, [r2, #0]
 800b5cc:	1850      	adds	r0, r2, r1
 800b5ce:	42a0      	cmp	r0, r4
 800b5d0:	d10b      	bne.n	800b5ea <_free_r+0x72>
 800b5d2:	6820      	ldr	r0, [r4, #0]
 800b5d4:	4401      	add	r1, r0
 800b5d6:	1850      	adds	r0, r2, r1
 800b5d8:	4283      	cmp	r3, r0
 800b5da:	6011      	str	r1, [r2, #0]
 800b5dc:	d1de      	bne.n	800b59c <_free_r+0x24>
 800b5de:	6818      	ldr	r0, [r3, #0]
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	4401      	add	r1, r0
 800b5e4:	6011      	str	r1, [r2, #0]
 800b5e6:	6053      	str	r3, [r2, #4]
 800b5e8:	e7d8      	b.n	800b59c <_free_r+0x24>
 800b5ea:	d902      	bls.n	800b5f2 <_free_r+0x7a>
 800b5ec:	230c      	movs	r3, #12
 800b5ee:	602b      	str	r3, [r5, #0]
 800b5f0:	e7d4      	b.n	800b59c <_free_r+0x24>
 800b5f2:	6820      	ldr	r0, [r4, #0]
 800b5f4:	1821      	adds	r1, r4, r0
 800b5f6:	428b      	cmp	r3, r1
 800b5f8:	bf01      	itttt	eq
 800b5fa:	6819      	ldreq	r1, [r3, #0]
 800b5fc:	685b      	ldreq	r3, [r3, #4]
 800b5fe:	1809      	addeq	r1, r1, r0
 800b600:	6021      	streq	r1, [r4, #0]
 800b602:	6063      	str	r3, [r4, #4]
 800b604:	6054      	str	r4, [r2, #4]
 800b606:	e7c9      	b.n	800b59c <_free_r+0x24>
 800b608:	bd38      	pop	{r3, r4, r5, pc}
 800b60a:	bf00      	nop
 800b60c:	200004d0 	.word	0x200004d0

0800b610 <_malloc_r>:
 800b610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b612:	1ccd      	adds	r5, r1, #3
 800b614:	f025 0503 	bic.w	r5, r5, #3
 800b618:	3508      	adds	r5, #8
 800b61a:	2d0c      	cmp	r5, #12
 800b61c:	bf38      	it	cc
 800b61e:	250c      	movcc	r5, #12
 800b620:	2d00      	cmp	r5, #0
 800b622:	4606      	mov	r6, r0
 800b624:	db01      	blt.n	800b62a <_malloc_r+0x1a>
 800b626:	42a9      	cmp	r1, r5
 800b628:	d903      	bls.n	800b632 <_malloc_r+0x22>
 800b62a:	230c      	movs	r3, #12
 800b62c:	6033      	str	r3, [r6, #0]
 800b62e:	2000      	movs	r0, #0
 800b630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b632:	f001 fd71 	bl	800d118 <__malloc_lock>
 800b636:	4921      	ldr	r1, [pc, #132]	; (800b6bc <_malloc_r+0xac>)
 800b638:	680a      	ldr	r2, [r1, #0]
 800b63a:	4614      	mov	r4, r2
 800b63c:	b99c      	cbnz	r4, 800b666 <_malloc_r+0x56>
 800b63e:	4f20      	ldr	r7, [pc, #128]	; (800b6c0 <_malloc_r+0xb0>)
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	b923      	cbnz	r3, 800b64e <_malloc_r+0x3e>
 800b644:	4621      	mov	r1, r4
 800b646:	4630      	mov	r0, r6
 800b648:	f000 fcb4 	bl	800bfb4 <_sbrk_r>
 800b64c:	6038      	str	r0, [r7, #0]
 800b64e:	4629      	mov	r1, r5
 800b650:	4630      	mov	r0, r6
 800b652:	f000 fcaf 	bl	800bfb4 <_sbrk_r>
 800b656:	1c43      	adds	r3, r0, #1
 800b658:	d123      	bne.n	800b6a2 <_malloc_r+0x92>
 800b65a:	230c      	movs	r3, #12
 800b65c:	4630      	mov	r0, r6
 800b65e:	6033      	str	r3, [r6, #0]
 800b660:	f001 fd60 	bl	800d124 <__malloc_unlock>
 800b664:	e7e3      	b.n	800b62e <_malloc_r+0x1e>
 800b666:	6823      	ldr	r3, [r4, #0]
 800b668:	1b5b      	subs	r3, r3, r5
 800b66a:	d417      	bmi.n	800b69c <_malloc_r+0x8c>
 800b66c:	2b0b      	cmp	r3, #11
 800b66e:	d903      	bls.n	800b678 <_malloc_r+0x68>
 800b670:	6023      	str	r3, [r4, #0]
 800b672:	441c      	add	r4, r3
 800b674:	6025      	str	r5, [r4, #0]
 800b676:	e004      	b.n	800b682 <_malloc_r+0x72>
 800b678:	6863      	ldr	r3, [r4, #4]
 800b67a:	42a2      	cmp	r2, r4
 800b67c:	bf0c      	ite	eq
 800b67e:	600b      	streq	r3, [r1, #0]
 800b680:	6053      	strne	r3, [r2, #4]
 800b682:	4630      	mov	r0, r6
 800b684:	f001 fd4e 	bl	800d124 <__malloc_unlock>
 800b688:	f104 000b 	add.w	r0, r4, #11
 800b68c:	1d23      	adds	r3, r4, #4
 800b68e:	f020 0007 	bic.w	r0, r0, #7
 800b692:	1ac2      	subs	r2, r0, r3
 800b694:	d0cc      	beq.n	800b630 <_malloc_r+0x20>
 800b696:	1a1b      	subs	r3, r3, r0
 800b698:	50a3      	str	r3, [r4, r2]
 800b69a:	e7c9      	b.n	800b630 <_malloc_r+0x20>
 800b69c:	4622      	mov	r2, r4
 800b69e:	6864      	ldr	r4, [r4, #4]
 800b6a0:	e7cc      	b.n	800b63c <_malloc_r+0x2c>
 800b6a2:	1cc4      	adds	r4, r0, #3
 800b6a4:	f024 0403 	bic.w	r4, r4, #3
 800b6a8:	42a0      	cmp	r0, r4
 800b6aa:	d0e3      	beq.n	800b674 <_malloc_r+0x64>
 800b6ac:	1a21      	subs	r1, r4, r0
 800b6ae:	4630      	mov	r0, r6
 800b6b0:	f000 fc80 	bl	800bfb4 <_sbrk_r>
 800b6b4:	3001      	adds	r0, #1
 800b6b6:	d1dd      	bne.n	800b674 <_malloc_r+0x64>
 800b6b8:	e7cf      	b.n	800b65a <_malloc_r+0x4a>
 800b6ba:	bf00      	nop
 800b6bc:	200004d0 	.word	0x200004d0
 800b6c0:	200004d4 	.word	0x200004d4

0800b6c4 <__cvt>:
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6ca:	461f      	mov	r7, r3
 800b6cc:	bfbb      	ittet	lt
 800b6ce:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800b6d2:	461f      	movlt	r7, r3
 800b6d4:	2300      	movge	r3, #0
 800b6d6:	232d      	movlt	r3, #45	; 0x2d
 800b6d8:	b088      	sub	sp, #32
 800b6da:	4614      	mov	r4, r2
 800b6dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b6de:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b6e0:	7013      	strb	r3, [r2, #0]
 800b6e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b6e4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800b6e8:	f023 0820 	bic.w	r8, r3, #32
 800b6ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b6f0:	d005      	beq.n	800b6fe <__cvt+0x3a>
 800b6f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b6f6:	d100      	bne.n	800b6fa <__cvt+0x36>
 800b6f8:	3501      	adds	r5, #1
 800b6fa:	2302      	movs	r3, #2
 800b6fc:	e000      	b.n	800b700 <__cvt+0x3c>
 800b6fe:	2303      	movs	r3, #3
 800b700:	aa07      	add	r2, sp, #28
 800b702:	9204      	str	r2, [sp, #16]
 800b704:	aa06      	add	r2, sp, #24
 800b706:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b70a:	e9cd 3500 	strd	r3, r5, [sp]
 800b70e:	4622      	mov	r2, r4
 800b710:	463b      	mov	r3, r7
 800b712:	f000 fdf9 	bl	800c308 <_dtoa_r>
 800b716:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b71a:	4606      	mov	r6, r0
 800b71c:	d102      	bne.n	800b724 <__cvt+0x60>
 800b71e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b720:	07db      	lsls	r3, r3, #31
 800b722:	d522      	bpl.n	800b76a <__cvt+0xa6>
 800b724:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b728:	eb06 0905 	add.w	r9, r6, r5
 800b72c:	d110      	bne.n	800b750 <__cvt+0x8c>
 800b72e:	7833      	ldrb	r3, [r6, #0]
 800b730:	2b30      	cmp	r3, #48	; 0x30
 800b732:	d10a      	bne.n	800b74a <__cvt+0x86>
 800b734:	2200      	movs	r2, #0
 800b736:	2300      	movs	r3, #0
 800b738:	4620      	mov	r0, r4
 800b73a:	4639      	mov	r1, r7
 800b73c:	f7f5 f9a0 	bl	8000a80 <__aeabi_dcmpeq>
 800b740:	b918      	cbnz	r0, 800b74a <__cvt+0x86>
 800b742:	f1c5 0501 	rsb	r5, r5, #1
 800b746:	f8ca 5000 	str.w	r5, [sl]
 800b74a:	f8da 3000 	ldr.w	r3, [sl]
 800b74e:	4499      	add	r9, r3
 800b750:	2200      	movs	r2, #0
 800b752:	2300      	movs	r3, #0
 800b754:	4620      	mov	r0, r4
 800b756:	4639      	mov	r1, r7
 800b758:	f7f5 f992 	bl	8000a80 <__aeabi_dcmpeq>
 800b75c:	b108      	cbz	r0, 800b762 <__cvt+0x9e>
 800b75e:	f8cd 901c 	str.w	r9, [sp, #28]
 800b762:	2230      	movs	r2, #48	; 0x30
 800b764:	9b07      	ldr	r3, [sp, #28]
 800b766:	454b      	cmp	r3, r9
 800b768:	d307      	bcc.n	800b77a <__cvt+0xb6>
 800b76a:	4630      	mov	r0, r6
 800b76c:	9b07      	ldr	r3, [sp, #28]
 800b76e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b770:	1b9b      	subs	r3, r3, r6
 800b772:	6013      	str	r3, [r2, #0]
 800b774:	b008      	add	sp, #32
 800b776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b77a:	1c59      	adds	r1, r3, #1
 800b77c:	9107      	str	r1, [sp, #28]
 800b77e:	701a      	strb	r2, [r3, #0]
 800b780:	e7f0      	b.n	800b764 <__cvt+0xa0>

0800b782 <__exponent>:
 800b782:	4603      	mov	r3, r0
 800b784:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b786:	2900      	cmp	r1, #0
 800b788:	f803 2b02 	strb.w	r2, [r3], #2
 800b78c:	bfb6      	itet	lt
 800b78e:	222d      	movlt	r2, #45	; 0x2d
 800b790:	222b      	movge	r2, #43	; 0x2b
 800b792:	4249      	neglt	r1, r1
 800b794:	2909      	cmp	r1, #9
 800b796:	7042      	strb	r2, [r0, #1]
 800b798:	dd2b      	ble.n	800b7f2 <__exponent+0x70>
 800b79a:	f10d 0407 	add.w	r4, sp, #7
 800b79e:	46a4      	mov	ip, r4
 800b7a0:	270a      	movs	r7, #10
 800b7a2:	fb91 f6f7 	sdiv	r6, r1, r7
 800b7a6:	460a      	mov	r2, r1
 800b7a8:	46a6      	mov	lr, r4
 800b7aa:	fb07 1516 	mls	r5, r7, r6, r1
 800b7ae:	2a63      	cmp	r2, #99	; 0x63
 800b7b0:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800b7b4:	4631      	mov	r1, r6
 800b7b6:	f104 34ff 	add.w	r4, r4, #4294967295
 800b7ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b7be:	dcf0      	bgt.n	800b7a2 <__exponent+0x20>
 800b7c0:	3130      	adds	r1, #48	; 0x30
 800b7c2:	f1ae 0502 	sub.w	r5, lr, #2
 800b7c6:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b7ca:	4629      	mov	r1, r5
 800b7cc:	1c44      	adds	r4, r0, #1
 800b7ce:	4561      	cmp	r1, ip
 800b7d0:	d30a      	bcc.n	800b7e8 <__exponent+0x66>
 800b7d2:	f10d 0209 	add.w	r2, sp, #9
 800b7d6:	eba2 020e 	sub.w	r2, r2, lr
 800b7da:	4565      	cmp	r5, ip
 800b7dc:	bf88      	it	hi
 800b7de:	2200      	movhi	r2, #0
 800b7e0:	4413      	add	r3, r2
 800b7e2:	1a18      	subs	r0, r3, r0
 800b7e4:	b003      	add	sp, #12
 800b7e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b7ec:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b7f0:	e7ed      	b.n	800b7ce <__exponent+0x4c>
 800b7f2:	2330      	movs	r3, #48	; 0x30
 800b7f4:	3130      	adds	r1, #48	; 0x30
 800b7f6:	7083      	strb	r3, [r0, #2]
 800b7f8:	70c1      	strb	r1, [r0, #3]
 800b7fa:	1d03      	adds	r3, r0, #4
 800b7fc:	e7f1      	b.n	800b7e2 <__exponent+0x60>
	...

0800b800 <_printf_float>:
 800b800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b804:	b091      	sub	sp, #68	; 0x44
 800b806:	460c      	mov	r4, r1
 800b808:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800b80c:	4616      	mov	r6, r2
 800b80e:	461f      	mov	r7, r3
 800b810:	4605      	mov	r5, r0
 800b812:	f001 fc5d 	bl	800d0d0 <_localeconv_r>
 800b816:	6803      	ldr	r3, [r0, #0]
 800b818:	4618      	mov	r0, r3
 800b81a:	9309      	str	r3, [sp, #36]	; 0x24
 800b81c:	f7f4 fd04 	bl	8000228 <strlen>
 800b820:	2300      	movs	r3, #0
 800b822:	930e      	str	r3, [sp, #56]	; 0x38
 800b824:	f8d8 3000 	ldr.w	r3, [r8]
 800b828:	900a      	str	r0, [sp, #40]	; 0x28
 800b82a:	3307      	adds	r3, #7
 800b82c:	f023 0307 	bic.w	r3, r3, #7
 800b830:	f103 0208 	add.w	r2, r3, #8
 800b834:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b838:	f8d4 b000 	ldr.w	fp, [r4]
 800b83c:	f8c8 2000 	str.w	r2, [r8]
 800b840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b844:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b848:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800b84c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800b850:	930b      	str	r3, [sp, #44]	; 0x2c
 800b852:	f04f 32ff 	mov.w	r2, #4294967295
 800b856:	4640      	mov	r0, r8
 800b858:	4b9c      	ldr	r3, [pc, #624]	; (800bacc <_printf_float+0x2cc>)
 800b85a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b85c:	f7f5 f942 	bl	8000ae4 <__aeabi_dcmpun>
 800b860:	bb70      	cbnz	r0, 800b8c0 <_printf_float+0xc0>
 800b862:	f04f 32ff 	mov.w	r2, #4294967295
 800b866:	4640      	mov	r0, r8
 800b868:	4b98      	ldr	r3, [pc, #608]	; (800bacc <_printf_float+0x2cc>)
 800b86a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b86c:	f7f5 f91c 	bl	8000aa8 <__aeabi_dcmple>
 800b870:	bb30      	cbnz	r0, 800b8c0 <_printf_float+0xc0>
 800b872:	2200      	movs	r2, #0
 800b874:	2300      	movs	r3, #0
 800b876:	4640      	mov	r0, r8
 800b878:	4651      	mov	r1, sl
 800b87a:	f7f5 f90b 	bl	8000a94 <__aeabi_dcmplt>
 800b87e:	b110      	cbz	r0, 800b886 <_printf_float+0x86>
 800b880:	232d      	movs	r3, #45	; 0x2d
 800b882:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b886:	4b92      	ldr	r3, [pc, #584]	; (800bad0 <_printf_float+0x2d0>)
 800b888:	4892      	ldr	r0, [pc, #584]	; (800bad4 <_printf_float+0x2d4>)
 800b88a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b88e:	bf94      	ite	ls
 800b890:	4698      	movls	r8, r3
 800b892:	4680      	movhi	r8, r0
 800b894:	2303      	movs	r3, #3
 800b896:	f04f 0a00 	mov.w	sl, #0
 800b89a:	6123      	str	r3, [r4, #16]
 800b89c:	f02b 0304 	bic.w	r3, fp, #4
 800b8a0:	6023      	str	r3, [r4, #0]
 800b8a2:	4633      	mov	r3, r6
 800b8a4:	4621      	mov	r1, r4
 800b8a6:	4628      	mov	r0, r5
 800b8a8:	9700      	str	r7, [sp, #0]
 800b8aa:	aa0f      	add	r2, sp, #60	; 0x3c
 800b8ac:	f000 f9d4 	bl	800bc58 <_printf_common>
 800b8b0:	3001      	adds	r0, #1
 800b8b2:	f040 8090 	bne.w	800b9d6 <_printf_float+0x1d6>
 800b8b6:	f04f 30ff 	mov.w	r0, #4294967295
 800b8ba:	b011      	add	sp, #68	; 0x44
 800b8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8c0:	4642      	mov	r2, r8
 800b8c2:	4653      	mov	r3, sl
 800b8c4:	4640      	mov	r0, r8
 800b8c6:	4651      	mov	r1, sl
 800b8c8:	f7f5 f90c 	bl	8000ae4 <__aeabi_dcmpun>
 800b8cc:	b148      	cbz	r0, 800b8e2 <_printf_float+0xe2>
 800b8ce:	f1ba 0f00 	cmp.w	sl, #0
 800b8d2:	bfb8      	it	lt
 800b8d4:	232d      	movlt	r3, #45	; 0x2d
 800b8d6:	4880      	ldr	r0, [pc, #512]	; (800bad8 <_printf_float+0x2d8>)
 800b8d8:	bfb8      	it	lt
 800b8da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b8de:	4b7f      	ldr	r3, [pc, #508]	; (800badc <_printf_float+0x2dc>)
 800b8e0:	e7d3      	b.n	800b88a <_printf_float+0x8a>
 800b8e2:	6863      	ldr	r3, [r4, #4]
 800b8e4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b8e8:	1c5a      	adds	r2, r3, #1
 800b8ea:	d142      	bne.n	800b972 <_printf_float+0x172>
 800b8ec:	2306      	movs	r3, #6
 800b8ee:	6063      	str	r3, [r4, #4]
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	9206      	str	r2, [sp, #24]
 800b8f4:	aa0e      	add	r2, sp, #56	; 0x38
 800b8f6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800b8fa:	aa0d      	add	r2, sp, #52	; 0x34
 800b8fc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800b900:	9203      	str	r2, [sp, #12]
 800b902:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800b906:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b90a:	6023      	str	r3, [r4, #0]
 800b90c:	6863      	ldr	r3, [r4, #4]
 800b90e:	4642      	mov	r2, r8
 800b910:	9300      	str	r3, [sp, #0]
 800b912:	4628      	mov	r0, r5
 800b914:	4653      	mov	r3, sl
 800b916:	910b      	str	r1, [sp, #44]	; 0x2c
 800b918:	f7ff fed4 	bl	800b6c4 <__cvt>
 800b91c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b91e:	4680      	mov	r8, r0
 800b920:	2947      	cmp	r1, #71	; 0x47
 800b922:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b924:	d108      	bne.n	800b938 <_printf_float+0x138>
 800b926:	1cc8      	adds	r0, r1, #3
 800b928:	db02      	blt.n	800b930 <_printf_float+0x130>
 800b92a:	6863      	ldr	r3, [r4, #4]
 800b92c:	4299      	cmp	r1, r3
 800b92e:	dd40      	ble.n	800b9b2 <_printf_float+0x1b2>
 800b930:	f1a9 0902 	sub.w	r9, r9, #2
 800b934:	fa5f f989 	uxtb.w	r9, r9
 800b938:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b93c:	d81f      	bhi.n	800b97e <_printf_float+0x17e>
 800b93e:	464a      	mov	r2, r9
 800b940:	3901      	subs	r1, #1
 800b942:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b946:	910d      	str	r1, [sp, #52]	; 0x34
 800b948:	f7ff ff1b 	bl	800b782 <__exponent>
 800b94c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b94e:	4682      	mov	sl, r0
 800b950:	1813      	adds	r3, r2, r0
 800b952:	2a01      	cmp	r2, #1
 800b954:	6123      	str	r3, [r4, #16]
 800b956:	dc02      	bgt.n	800b95e <_printf_float+0x15e>
 800b958:	6822      	ldr	r2, [r4, #0]
 800b95a:	07d2      	lsls	r2, r2, #31
 800b95c:	d501      	bpl.n	800b962 <_printf_float+0x162>
 800b95e:	3301      	adds	r3, #1
 800b960:	6123      	str	r3, [r4, #16]
 800b962:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800b966:	2b00      	cmp	r3, #0
 800b968:	d09b      	beq.n	800b8a2 <_printf_float+0xa2>
 800b96a:	232d      	movs	r3, #45	; 0x2d
 800b96c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b970:	e797      	b.n	800b8a2 <_printf_float+0xa2>
 800b972:	2947      	cmp	r1, #71	; 0x47
 800b974:	d1bc      	bne.n	800b8f0 <_printf_float+0xf0>
 800b976:	2b00      	cmp	r3, #0
 800b978:	d1ba      	bne.n	800b8f0 <_printf_float+0xf0>
 800b97a:	2301      	movs	r3, #1
 800b97c:	e7b7      	b.n	800b8ee <_printf_float+0xee>
 800b97e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b982:	d118      	bne.n	800b9b6 <_printf_float+0x1b6>
 800b984:	2900      	cmp	r1, #0
 800b986:	6863      	ldr	r3, [r4, #4]
 800b988:	dd0b      	ble.n	800b9a2 <_printf_float+0x1a2>
 800b98a:	6121      	str	r1, [r4, #16]
 800b98c:	b913      	cbnz	r3, 800b994 <_printf_float+0x194>
 800b98e:	6822      	ldr	r2, [r4, #0]
 800b990:	07d0      	lsls	r0, r2, #31
 800b992:	d502      	bpl.n	800b99a <_printf_float+0x19a>
 800b994:	3301      	adds	r3, #1
 800b996:	440b      	add	r3, r1
 800b998:	6123      	str	r3, [r4, #16]
 800b99a:	f04f 0a00 	mov.w	sl, #0
 800b99e:	65a1      	str	r1, [r4, #88]	; 0x58
 800b9a0:	e7df      	b.n	800b962 <_printf_float+0x162>
 800b9a2:	b913      	cbnz	r3, 800b9aa <_printf_float+0x1aa>
 800b9a4:	6822      	ldr	r2, [r4, #0]
 800b9a6:	07d2      	lsls	r2, r2, #31
 800b9a8:	d501      	bpl.n	800b9ae <_printf_float+0x1ae>
 800b9aa:	3302      	adds	r3, #2
 800b9ac:	e7f4      	b.n	800b998 <_printf_float+0x198>
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	e7f2      	b.n	800b998 <_printf_float+0x198>
 800b9b2:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b9b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9b8:	4299      	cmp	r1, r3
 800b9ba:	db05      	blt.n	800b9c8 <_printf_float+0x1c8>
 800b9bc:	6823      	ldr	r3, [r4, #0]
 800b9be:	6121      	str	r1, [r4, #16]
 800b9c0:	07d8      	lsls	r0, r3, #31
 800b9c2:	d5ea      	bpl.n	800b99a <_printf_float+0x19a>
 800b9c4:	1c4b      	adds	r3, r1, #1
 800b9c6:	e7e7      	b.n	800b998 <_printf_float+0x198>
 800b9c8:	2900      	cmp	r1, #0
 800b9ca:	bfcc      	ite	gt
 800b9cc:	2201      	movgt	r2, #1
 800b9ce:	f1c1 0202 	rsble	r2, r1, #2
 800b9d2:	4413      	add	r3, r2
 800b9d4:	e7e0      	b.n	800b998 <_printf_float+0x198>
 800b9d6:	6823      	ldr	r3, [r4, #0]
 800b9d8:	055a      	lsls	r2, r3, #21
 800b9da:	d407      	bmi.n	800b9ec <_printf_float+0x1ec>
 800b9dc:	6923      	ldr	r3, [r4, #16]
 800b9de:	4642      	mov	r2, r8
 800b9e0:	4631      	mov	r1, r6
 800b9e2:	4628      	mov	r0, r5
 800b9e4:	47b8      	blx	r7
 800b9e6:	3001      	adds	r0, #1
 800b9e8:	d12b      	bne.n	800ba42 <_printf_float+0x242>
 800b9ea:	e764      	b.n	800b8b6 <_printf_float+0xb6>
 800b9ec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b9f0:	f240 80dd 	bls.w	800bbae <_printf_float+0x3ae>
 800b9f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	f7f5 f840 	bl	8000a80 <__aeabi_dcmpeq>
 800ba00:	2800      	cmp	r0, #0
 800ba02:	d033      	beq.n	800ba6c <_printf_float+0x26c>
 800ba04:	2301      	movs	r3, #1
 800ba06:	4631      	mov	r1, r6
 800ba08:	4628      	mov	r0, r5
 800ba0a:	4a35      	ldr	r2, [pc, #212]	; (800bae0 <_printf_float+0x2e0>)
 800ba0c:	47b8      	blx	r7
 800ba0e:	3001      	adds	r0, #1
 800ba10:	f43f af51 	beq.w	800b8b6 <_printf_float+0xb6>
 800ba14:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	db02      	blt.n	800ba22 <_printf_float+0x222>
 800ba1c:	6823      	ldr	r3, [r4, #0]
 800ba1e:	07d8      	lsls	r0, r3, #31
 800ba20:	d50f      	bpl.n	800ba42 <_printf_float+0x242>
 800ba22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ba26:	4631      	mov	r1, r6
 800ba28:	4628      	mov	r0, r5
 800ba2a:	47b8      	blx	r7
 800ba2c:	3001      	adds	r0, #1
 800ba2e:	f43f af42 	beq.w	800b8b6 <_printf_float+0xb6>
 800ba32:	f04f 0800 	mov.w	r8, #0
 800ba36:	f104 091a 	add.w	r9, r4, #26
 800ba3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba3c:	3b01      	subs	r3, #1
 800ba3e:	4543      	cmp	r3, r8
 800ba40:	dc09      	bgt.n	800ba56 <_printf_float+0x256>
 800ba42:	6823      	ldr	r3, [r4, #0]
 800ba44:	079b      	lsls	r3, r3, #30
 800ba46:	f100 8102 	bmi.w	800bc4e <_printf_float+0x44e>
 800ba4a:	68e0      	ldr	r0, [r4, #12]
 800ba4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba4e:	4298      	cmp	r0, r3
 800ba50:	bfb8      	it	lt
 800ba52:	4618      	movlt	r0, r3
 800ba54:	e731      	b.n	800b8ba <_printf_float+0xba>
 800ba56:	2301      	movs	r3, #1
 800ba58:	464a      	mov	r2, r9
 800ba5a:	4631      	mov	r1, r6
 800ba5c:	4628      	mov	r0, r5
 800ba5e:	47b8      	blx	r7
 800ba60:	3001      	adds	r0, #1
 800ba62:	f43f af28 	beq.w	800b8b6 <_printf_float+0xb6>
 800ba66:	f108 0801 	add.w	r8, r8, #1
 800ba6a:	e7e6      	b.n	800ba3a <_printf_float+0x23a>
 800ba6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	dc38      	bgt.n	800bae4 <_printf_float+0x2e4>
 800ba72:	2301      	movs	r3, #1
 800ba74:	4631      	mov	r1, r6
 800ba76:	4628      	mov	r0, r5
 800ba78:	4a19      	ldr	r2, [pc, #100]	; (800bae0 <_printf_float+0x2e0>)
 800ba7a:	47b8      	blx	r7
 800ba7c:	3001      	adds	r0, #1
 800ba7e:	f43f af1a 	beq.w	800b8b6 <_printf_float+0xb6>
 800ba82:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ba86:	4313      	orrs	r3, r2
 800ba88:	d102      	bne.n	800ba90 <_printf_float+0x290>
 800ba8a:	6823      	ldr	r3, [r4, #0]
 800ba8c:	07d9      	lsls	r1, r3, #31
 800ba8e:	d5d8      	bpl.n	800ba42 <_printf_float+0x242>
 800ba90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ba94:	4631      	mov	r1, r6
 800ba96:	4628      	mov	r0, r5
 800ba98:	47b8      	blx	r7
 800ba9a:	3001      	adds	r0, #1
 800ba9c:	f43f af0b 	beq.w	800b8b6 <_printf_float+0xb6>
 800baa0:	f04f 0900 	mov.w	r9, #0
 800baa4:	f104 0a1a 	add.w	sl, r4, #26
 800baa8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800baaa:	425b      	negs	r3, r3
 800baac:	454b      	cmp	r3, r9
 800baae:	dc01      	bgt.n	800bab4 <_printf_float+0x2b4>
 800bab0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bab2:	e794      	b.n	800b9de <_printf_float+0x1de>
 800bab4:	2301      	movs	r3, #1
 800bab6:	4652      	mov	r2, sl
 800bab8:	4631      	mov	r1, r6
 800baba:	4628      	mov	r0, r5
 800babc:	47b8      	blx	r7
 800babe:	3001      	adds	r0, #1
 800bac0:	f43f aef9 	beq.w	800b8b6 <_printf_float+0xb6>
 800bac4:	f109 0901 	add.w	r9, r9, #1
 800bac8:	e7ee      	b.n	800baa8 <_printf_float+0x2a8>
 800baca:	bf00      	nop
 800bacc:	7fefffff 	.word	0x7fefffff
 800bad0:	0800f55c 	.word	0x0800f55c
 800bad4:	0800f560 	.word	0x0800f560
 800bad8:	0800f568 	.word	0x0800f568
 800badc:	0800f564 	.word	0x0800f564
 800bae0:	0800f56c 	.word	0x0800f56c
 800bae4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bae6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bae8:	429a      	cmp	r2, r3
 800baea:	bfa8      	it	ge
 800baec:	461a      	movge	r2, r3
 800baee:	2a00      	cmp	r2, #0
 800baf0:	4691      	mov	r9, r2
 800baf2:	dc37      	bgt.n	800bb64 <_printf_float+0x364>
 800baf4:	f04f 0b00 	mov.w	fp, #0
 800baf8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bafc:	f104 021a 	add.w	r2, r4, #26
 800bb00:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800bb04:	ebaa 0309 	sub.w	r3, sl, r9
 800bb08:	455b      	cmp	r3, fp
 800bb0a:	dc33      	bgt.n	800bb74 <_printf_float+0x374>
 800bb0c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bb10:	429a      	cmp	r2, r3
 800bb12:	db3b      	blt.n	800bb8c <_printf_float+0x38c>
 800bb14:	6823      	ldr	r3, [r4, #0]
 800bb16:	07da      	lsls	r2, r3, #31
 800bb18:	d438      	bmi.n	800bb8c <_printf_float+0x38c>
 800bb1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb1c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bb1e:	eba2 030a 	sub.w	r3, r2, sl
 800bb22:	eba2 0901 	sub.w	r9, r2, r1
 800bb26:	4599      	cmp	r9, r3
 800bb28:	bfa8      	it	ge
 800bb2a:	4699      	movge	r9, r3
 800bb2c:	f1b9 0f00 	cmp.w	r9, #0
 800bb30:	dc34      	bgt.n	800bb9c <_printf_float+0x39c>
 800bb32:	f04f 0800 	mov.w	r8, #0
 800bb36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb3a:	f104 0a1a 	add.w	sl, r4, #26
 800bb3e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bb42:	1a9b      	subs	r3, r3, r2
 800bb44:	eba3 0309 	sub.w	r3, r3, r9
 800bb48:	4543      	cmp	r3, r8
 800bb4a:	f77f af7a 	ble.w	800ba42 <_printf_float+0x242>
 800bb4e:	2301      	movs	r3, #1
 800bb50:	4652      	mov	r2, sl
 800bb52:	4631      	mov	r1, r6
 800bb54:	4628      	mov	r0, r5
 800bb56:	47b8      	blx	r7
 800bb58:	3001      	adds	r0, #1
 800bb5a:	f43f aeac 	beq.w	800b8b6 <_printf_float+0xb6>
 800bb5e:	f108 0801 	add.w	r8, r8, #1
 800bb62:	e7ec      	b.n	800bb3e <_printf_float+0x33e>
 800bb64:	4613      	mov	r3, r2
 800bb66:	4631      	mov	r1, r6
 800bb68:	4642      	mov	r2, r8
 800bb6a:	4628      	mov	r0, r5
 800bb6c:	47b8      	blx	r7
 800bb6e:	3001      	adds	r0, #1
 800bb70:	d1c0      	bne.n	800baf4 <_printf_float+0x2f4>
 800bb72:	e6a0      	b.n	800b8b6 <_printf_float+0xb6>
 800bb74:	2301      	movs	r3, #1
 800bb76:	4631      	mov	r1, r6
 800bb78:	4628      	mov	r0, r5
 800bb7a:	920b      	str	r2, [sp, #44]	; 0x2c
 800bb7c:	47b8      	blx	r7
 800bb7e:	3001      	adds	r0, #1
 800bb80:	f43f ae99 	beq.w	800b8b6 <_printf_float+0xb6>
 800bb84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bb86:	f10b 0b01 	add.w	fp, fp, #1
 800bb8a:	e7b9      	b.n	800bb00 <_printf_float+0x300>
 800bb8c:	4631      	mov	r1, r6
 800bb8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb92:	4628      	mov	r0, r5
 800bb94:	47b8      	blx	r7
 800bb96:	3001      	adds	r0, #1
 800bb98:	d1bf      	bne.n	800bb1a <_printf_float+0x31a>
 800bb9a:	e68c      	b.n	800b8b6 <_printf_float+0xb6>
 800bb9c:	464b      	mov	r3, r9
 800bb9e:	4631      	mov	r1, r6
 800bba0:	4628      	mov	r0, r5
 800bba2:	eb08 020a 	add.w	r2, r8, sl
 800bba6:	47b8      	blx	r7
 800bba8:	3001      	adds	r0, #1
 800bbaa:	d1c2      	bne.n	800bb32 <_printf_float+0x332>
 800bbac:	e683      	b.n	800b8b6 <_printf_float+0xb6>
 800bbae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bbb0:	2a01      	cmp	r2, #1
 800bbb2:	dc01      	bgt.n	800bbb8 <_printf_float+0x3b8>
 800bbb4:	07db      	lsls	r3, r3, #31
 800bbb6:	d537      	bpl.n	800bc28 <_printf_float+0x428>
 800bbb8:	2301      	movs	r3, #1
 800bbba:	4642      	mov	r2, r8
 800bbbc:	4631      	mov	r1, r6
 800bbbe:	4628      	mov	r0, r5
 800bbc0:	47b8      	blx	r7
 800bbc2:	3001      	adds	r0, #1
 800bbc4:	f43f ae77 	beq.w	800b8b6 <_printf_float+0xb6>
 800bbc8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bbcc:	4631      	mov	r1, r6
 800bbce:	4628      	mov	r0, r5
 800bbd0:	47b8      	blx	r7
 800bbd2:	3001      	adds	r0, #1
 800bbd4:	f43f ae6f 	beq.w	800b8b6 <_printf_float+0xb6>
 800bbd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bbdc:	2200      	movs	r2, #0
 800bbde:	2300      	movs	r3, #0
 800bbe0:	f7f4 ff4e 	bl	8000a80 <__aeabi_dcmpeq>
 800bbe4:	b9d8      	cbnz	r0, 800bc1e <_printf_float+0x41e>
 800bbe6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bbe8:	f108 0201 	add.w	r2, r8, #1
 800bbec:	3b01      	subs	r3, #1
 800bbee:	4631      	mov	r1, r6
 800bbf0:	4628      	mov	r0, r5
 800bbf2:	47b8      	blx	r7
 800bbf4:	3001      	adds	r0, #1
 800bbf6:	d10e      	bne.n	800bc16 <_printf_float+0x416>
 800bbf8:	e65d      	b.n	800b8b6 <_printf_float+0xb6>
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	464a      	mov	r2, r9
 800bbfe:	4631      	mov	r1, r6
 800bc00:	4628      	mov	r0, r5
 800bc02:	47b8      	blx	r7
 800bc04:	3001      	adds	r0, #1
 800bc06:	f43f ae56 	beq.w	800b8b6 <_printf_float+0xb6>
 800bc0a:	f108 0801 	add.w	r8, r8, #1
 800bc0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc10:	3b01      	subs	r3, #1
 800bc12:	4543      	cmp	r3, r8
 800bc14:	dcf1      	bgt.n	800bbfa <_printf_float+0x3fa>
 800bc16:	4653      	mov	r3, sl
 800bc18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bc1c:	e6e0      	b.n	800b9e0 <_printf_float+0x1e0>
 800bc1e:	f04f 0800 	mov.w	r8, #0
 800bc22:	f104 091a 	add.w	r9, r4, #26
 800bc26:	e7f2      	b.n	800bc0e <_printf_float+0x40e>
 800bc28:	2301      	movs	r3, #1
 800bc2a:	4642      	mov	r2, r8
 800bc2c:	e7df      	b.n	800bbee <_printf_float+0x3ee>
 800bc2e:	2301      	movs	r3, #1
 800bc30:	464a      	mov	r2, r9
 800bc32:	4631      	mov	r1, r6
 800bc34:	4628      	mov	r0, r5
 800bc36:	47b8      	blx	r7
 800bc38:	3001      	adds	r0, #1
 800bc3a:	f43f ae3c 	beq.w	800b8b6 <_printf_float+0xb6>
 800bc3e:	f108 0801 	add.w	r8, r8, #1
 800bc42:	68e3      	ldr	r3, [r4, #12]
 800bc44:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bc46:	1a5b      	subs	r3, r3, r1
 800bc48:	4543      	cmp	r3, r8
 800bc4a:	dcf0      	bgt.n	800bc2e <_printf_float+0x42e>
 800bc4c:	e6fd      	b.n	800ba4a <_printf_float+0x24a>
 800bc4e:	f04f 0800 	mov.w	r8, #0
 800bc52:	f104 0919 	add.w	r9, r4, #25
 800bc56:	e7f4      	b.n	800bc42 <_printf_float+0x442>

0800bc58 <_printf_common>:
 800bc58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc5c:	4616      	mov	r6, r2
 800bc5e:	4699      	mov	r9, r3
 800bc60:	688a      	ldr	r2, [r1, #8]
 800bc62:	690b      	ldr	r3, [r1, #16]
 800bc64:	4607      	mov	r7, r0
 800bc66:	4293      	cmp	r3, r2
 800bc68:	bfb8      	it	lt
 800bc6a:	4613      	movlt	r3, r2
 800bc6c:	6033      	str	r3, [r6, #0]
 800bc6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bc72:	460c      	mov	r4, r1
 800bc74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc78:	b10a      	cbz	r2, 800bc7e <_printf_common+0x26>
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	6033      	str	r3, [r6, #0]
 800bc7e:	6823      	ldr	r3, [r4, #0]
 800bc80:	0699      	lsls	r1, r3, #26
 800bc82:	bf42      	ittt	mi
 800bc84:	6833      	ldrmi	r3, [r6, #0]
 800bc86:	3302      	addmi	r3, #2
 800bc88:	6033      	strmi	r3, [r6, #0]
 800bc8a:	6825      	ldr	r5, [r4, #0]
 800bc8c:	f015 0506 	ands.w	r5, r5, #6
 800bc90:	d106      	bne.n	800bca0 <_printf_common+0x48>
 800bc92:	f104 0a19 	add.w	sl, r4, #25
 800bc96:	68e3      	ldr	r3, [r4, #12]
 800bc98:	6832      	ldr	r2, [r6, #0]
 800bc9a:	1a9b      	subs	r3, r3, r2
 800bc9c:	42ab      	cmp	r3, r5
 800bc9e:	dc28      	bgt.n	800bcf2 <_printf_common+0x9a>
 800bca0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bca4:	1e13      	subs	r3, r2, #0
 800bca6:	6822      	ldr	r2, [r4, #0]
 800bca8:	bf18      	it	ne
 800bcaa:	2301      	movne	r3, #1
 800bcac:	0692      	lsls	r2, r2, #26
 800bcae:	d42d      	bmi.n	800bd0c <_printf_common+0xb4>
 800bcb0:	4649      	mov	r1, r9
 800bcb2:	4638      	mov	r0, r7
 800bcb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bcb8:	47c0      	blx	r8
 800bcba:	3001      	adds	r0, #1
 800bcbc:	d020      	beq.n	800bd00 <_printf_common+0xa8>
 800bcbe:	6823      	ldr	r3, [r4, #0]
 800bcc0:	68e5      	ldr	r5, [r4, #12]
 800bcc2:	f003 0306 	and.w	r3, r3, #6
 800bcc6:	2b04      	cmp	r3, #4
 800bcc8:	bf18      	it	ne
 800bcca:	2500      	movne	r5, #0
 800bccc:	6832      	ldr	r2, [r6, #0]
 800bcce:	f04f 0600 	mov.w	r6, #0
 800bcd2:	68a3      	ldr	r3, [r4, #8]
 800bcd4:	bf08      	it	eq
 800bcd6:	1aad      	subeq	r5, r5, r2
 800bcd8:	6922      	ldr	r2, [r4, #16]
 800bcda:	bf08      	it	eq
 800bcdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bce0:	4293      	cmp	r3, r2
 800bce2:	bfc4      	itt	gt
 800bce4:	1a9b      	subgt	r3, r3, r2
 800bce6:	18ed      	addgt	r5, r5, r3
 800bce8:	341a      	adds	r4, #26
 800bcea:	42b5      	cmp	r5, r6
 800bcec:	d11a      	bne.n	800bd24 <_printf_common+0xcc>
 800bcee:	2000      	movs	r0, #0
 800bcf0:	e008      	b.n	800bd04 <_printf_common+0xac>
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	4652      	mov	r2, sl
 800bcf6:	4649      	mov	r1, r9
 800bcf8:	4638      	mov	r0, r7
 800bcfa:	47c0      	blx	r8
 800bcfc:	3001      	adds	r0, #1
 800bcfe:	d103      	bne.n	800bd08 <_printf_common+0xb0>
 800bd00:	f04f 30ff 	mov.w	r0, #4294967295
 800bd04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd08:	3501      	adds	r5, #1
 800bd0a:	e7c4      	b.n	800bc96 <_printf_common+0x3e>
 800bd0c:	2030      	movs	r0, #48	; 0x30
 800bd0e:	18e1      	adds	r1, r4, r3
 800bd10:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd14:	1c5a      	adds	r2, r3, #1
 800bd16:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd1a:	4422      	add	r2, r4
 800bd1c:	3302      	adds	r3, #2
 800bd1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bd22:	e7c5      	b.n	800bcb0 <_printf_common+0x58>
 800bd24:	2301      	movs	r3, #1
 800bd26:	4622      	mov	r2, r4
 800bd28:	4649      	mov	r1, r9
 800bd2a:	4638      	mov	r0, r7
 800bd2c:	47c0      	blx	r8
 800bd2e:	3001      	adds	r0, #1
 800bd30:	d0e6      	beq.n	800bd00 <_printf_common+0xa8>
 800bd32:	3601      	adds	r6, #1
 800bd34:	e7d9      	b.n	800bcea <_printf_common+0x92>
	...

0800bd38 <_printf_i>:
 800bd38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd3c:	460c      	mov	r4, r1
 800bd3e:	7e27      	ldrb	r7, [r4, #24]
 800bd40:	4691      	mov	r9, r2
 800bd42:	2f78      	cmp	r7, #120	; 0x78
 800bd44:	4680      	mov	r8, r0
 800bd46:	469a      	mov	sl, r3
 800bd48:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bd4a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd4e:	d807      	bhi.n	800bd60 <_printf_i+0x28>
 800bd50:	2f62      	cmp	r7, #98	; 0x62
 800bd52:	d80a      	bhi.n	800bd6a <_printf_i+0x32>
 800bd54:	2f00      	cmp	r7, #0
 800bd56:	f000 80d9 	beq.w	800bf0c <_printf_i+0x1d4>
 800bd5a:	2f58      	cmp	r7, #88	; 0x58
 800bd5c:	f000 80a4 	beq.w	800bea8 <_printf_i+0x170>
 800bd60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bd64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bd68:	e03a      	b.n	800bde0 <_printf_i+0xa8>
 800bd6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bd6e:	2b15      	cmp	r3, #21
 800bd70:	d8f6      	bhi.n	800bd60 <_printf_i+0x28>
 800bd72:	a001      	add	r0, pc, #4	; (adr r0, 800bd78 <_printf_i+0x40>)
 800bd74:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bd78:	0800bdd1 	.word	0x0800bdd1
 800bd7c:	0800bde5 	.word	0x0800bde5
 800bd80:	0800bd61 	.word	0x0800bd61
 800bd84:	0800bd61 	.word	0x0800bd61
 800bd88:	0800bd61 	.word	0x0800bd61
 800bd8c:	0800bd61 	.word	0x0800bd61
 800bd90:	0800bde5 	.word	0x0800bde5
 800bd94:	0800bd61 	.word	0x0800bd61
 800bd98:	0800bd61 	.word	0x0800bd61
 800bd9c:	0800bd61 	.word	0x0800bd61
 800bda0:	0800bd61 	.word	0x0800bd61
 800bda4:	0800bef3 	.word	0x0800bef3
 800bda8:	0800be15 	.word	0x0800be15
 800bdac:	0800bed5 	.word	0x0800bed5
 800bdb0:	0800bd61 	.word	0x0800bd61
 800bdb4:	0800bd61 	.word	0x0800bd61
 800bdb8:	0800bf15 	.word	0x0800bf15
 800bdbc:	0800bd61 	.word	0x0800bd61
 800bdc0:	0800be15 	.word	0x0800be15
 800bdc4:	0800bd61 	.word	0x0800bd61
 800bdc8:	0800bd61 	.word	0x0800bd61
 800bdcc:	0800bedd 	.word	0x0800bedd
 800bdd0:	680b      	ldr	r3, [r1, #0]
 800bdd2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bdd6:	1d1a      	adds	r2, r3, #4
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	600a      	str	r2, [r1, #0]
 800bddc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bde0:	2301      	movs	r3, #1
 800bde2:	e0a4      	b.n	800bf2e <_printf_i+0x1f6>
 800bde4:	6825      	ldr	r5, [r4, #0]
 800bde6:	6808      	ldr	r0, [r1, #0]
 800bde8:	062e      	lsls	r6, r5, #24
 800bdea:	f100 0304 	add.w	r3, r0, #4
 800bdee:	d50a      	bpl.n	800be06 <_printf_i+0xce>
 800bdf0:	6805      	ldr	r5, [r0, #0]
 800bdf2:	600b      	str	r3, [r1, #0]
 800bdf4:	2d00      	cmp	r5, #0
 800bdf6:	da03      	bge.n	800be00 <_printf_i+0xc8>
 800bdf8:	232d      	movs	r3, #45	; 0x2d
 800bdfa:	426d      	negs	r5, r5
 800bdfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be00:	230a      	movs	r3, #10
 800be02:	485e      	ldr	r0, [pc, #376]	; (800bf7c <_printf_i+0x244>)
 800be04:	e019      	b.n	800be3a <_printf_i+0x102>
 800be06:	f015 0f40 	tst.w	r5, #64	; 0x40
 800be0a:	6805      	ldr	r5, [r0, #0]
 800be0c:	600b      	str	r3, [r1, #0]
 800be0e:	bf18      	it	ne
 800be10:	b22d      	sxthne	r5, r5
 800be12:	e7ef      	b.n	800bdf4 <_printf_i+0xbc>
 800be14:	680b      	ldr	r3, [r1, #0]
 800be16:	6825      	ldr	r5, [r4, #0]
 800be18:	1d18      	adds	r0, r3, #4
 800be1a:	6008      	str	r0, [r1, #0]
 800be1c:	0628      	lsls	r0, r5, #24
 800be1e:	d501      	bpl.n	800be24 <_printf_i+0xec>
 800be20:	681d      	ldr	r5, [r3, #0]
 800be22:	e002      	b.n	800be2a <_printf_i+0xf2>
 800be24:	0669      	lsls	r1, r5, #25
 800be26:	d5fb      	bpl.n	800be20 <_printf_i+0xe8>
 800be28:	881d      	ldrh	r5, [r3, #0]
 800be2a:	2f6f      	cmp	r7, #111	; 0x6f
 800be2c:	bf0c      	ite	eq
 800be2e:	2308      	moveq	r3, #8
 800be30:	230a      	movne	r3, #10
 800be32:	4852      	ldr	r0, [pc, #328]	; (800bf7c <_printf_i+0x244>)
 800be34:	2100      	movs	r1, #0
 800be36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800be3a:	6866      	ldr	r6, [r4, #4]
 800be3c:	2e00      	cmp	r6, #0
 800be3e:	bfa8      	it	ge
 800be40:	6821      	ldrge	r1, [r4, #0]
 800be42:	60a6      	str	r6, [r4, #8]
 800be44:	bfa4      	itt	ge
 800be46:	f021 0104 	bicge.w	r1, r1, #4
 800be4a:	6021      	strge	r1, [r4, #0]
 800be4c:	b90d      	cbnz	r5, 800be52 <_printf_i+0x11a>
 800be4e:	2e00      	cmp	r6, #0
 800be50:	d04d      	beq.n	800beee <_printf_i+0x1b6>
 800be52:	4616      	mov	r6, r2
 800be54:	fbb5 f1f3 	udiv	r1, r5, r3
 800be58:	fb03 5711 	mls	r7, r3, r1, r5
 800be5c:	5dc7      	ldrb	r7, [r0, r7]
 800be5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800be62:	462f      	mov	r7, r5
 800be64:	42bb      	cmp	r3, r7
 800be66:	460d      	mov	r5, r1
 800be68:	d9f4      	bls.n	800be54 <_printf_i+0x11c>
 800be6a:	2b08      	cmp	r3, #8
 800be6c:	d10b      	bne.n	800be86 <_printf_i+0x14e>
 800be6e:	6823      	ldr	r3, [r4, #0]
 800be70:	07df      	lsls	r7, r3, #31
 800be72:	d508      	bpl.n	800be86 <_printf_i+0x14e>
 800be74:	6923      	ldr	r3, [r4, #16]
 800be76:	6861      	ldr	r1, [r4, #4]
 800be78:	4299      	cmp	r1, r3
 800be7a:	bfde      	ittt	le
 800be7c:	2330      	movle	r3, #48	; 0x30
 800be7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800be82:	f106 36ff 	addle.w	r6, r6, #4294967295
 800be86:	1b92      	subs	r2, r2, r6
 800be88:	6122      	str	r2, [r4, #16]
 800be8a:	464b      	mov	r3, r9
 800be8c:	4621      	mov	r1, r4
 800be8e:	4640      	mov	r0, r8
 800be90:	f8cd a000 	str.w	sl, [sp]
 800be94:	aa03      	add	r2, sp, #12
 800be96:	f7ff fedf 	bl	800bc58 <_printf_common>
 800be9a:	3001      	adds	r0, #1
 800be9c:	d14c      	bne.n	800bf38 <_printf_i+0x200>
 800be9e:	f04f 30ff 	mov.w	r0, #4294967295
 800bea2:	b004      	add	sp, #16
 800bea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bea8:	4834      	ldr	r0, [pc, #208]	; (800bf7c <_printf_i+0x244>)
 800beaa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800beae:	680e      	ldr	r6, [r1, #0]
 800beb0:	6823      	ldr	r3, [r4, #0]
 800beb2:	f856 5b04 	ldr.w	r5, [r6], #4
 800beb6:	061f      	lsls	r7, r3, #24
 800beb8:	600e      	str	r6, [r1, #0]
 800beba:	d514      	bpl.n	800bee6 <_printf_i+0x1ae>
 800bebc:	07d9      	lsls	r1, r3, #31
 800bebe:	bf44      	itt	mi
 800bec0:	f043 0320 	orrmi.w	r3, r3, #32
 800bec4:	6023      	strmi	r3, [r4, #0]
 800bec6:	b91d      	cbnz	r5, 800bed0 <_printf_i+0x198>
 800bec8:	6823      	ldr	r3, [r4, #0]
 800beca:	f023 0320 	bic.w	r3, r3, #32
 800bece:	6023      	str	r3, [r4, #0]
 800bed0:	2310      	movs	r3, #16
 800bed2:	e7af      	b.n	800be34 <_printf_i+0xfc>
 800bed4:	6823      	ldr	r3, [r4, #0]
 800bed6:	f043 0320 	orr.w	r3, r3, #32
 800beda:	6023      	str	r3, [r4, #0]
 800bedc:	2378      	movs	r3, #120	; 0x78
 800bede:	4828      	ldr	r0, [pc, #160]	; (800bf80 <_printf_i+0x248>)
 800bee0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bee4:	e7e3      	b.n	800beae <_printf_i+0x176>
 800bee6:	065e      	lsls	r6, r3, #25
 800bee8:	bf48      	it	mi
 800beea:	b2ad      	uxthmi	r5, r5
 800beec:	e7e6      	b.n	800bebc <_printf_i+0x184>
 800beee:	4616      	mov	r6, r2
 800bef0:	e7bb      	b.n	800be6a <_printf_i+0x132>
 800bef2:	680b      	ldr	r3, [r1, #0]
 800bef4:	6826      	ldr	r6, [r4, #0]
 800bef6:	1d1d      	adds	r5, r3, #4
 800bef8:	6960      	ldr	r0, [r4, #20]
 800befa:	600d      	str	r5, [r1, #0]
 800befc:	0635      	lsls	r5, r6, #24
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	d501      	bpl.n	800bf06 <_printf_i+0x1ce>
 800bf02:	6018      	str	r0, [r3, #0]
 800bf04:	e002      	b.n	800bf0c <_printf_i+0x1d4>
 800bf06:	0671      	lsls	r1, r6, #25
 800bf08:	d5fb      	bpl.n	800bf02 <_printf_i+0x1ca>
 800bf0a:	8018      	strh	r0, [r3, #0]
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	4616      	mov	r6, r2
 800bf10:	6123      	str	r3, [r4, #16]
 800bf12:	e7ba      	b.n	800be8a <_printf_i+0x152>
 800bf14:	680b      	ldr	r3, [r1, #0]
 800bf16:	1d1a      	adds	r2, r3, #4
 800bf18:	600a      	str	r2, [r1, #0]
 800bf1a:	681e      	ldr	r6, [r3, #0]
 800bf1c:	2100      	movs	r1, #0
 800bf1e:	4630      	mov	r0, r6
 800bf20:	6862      	ldr	r2, [r4, #4]
 800bf22:	f001 f8dc 	bl	800d0de <memchr>
 800bf26:	b108      	cbz	r0, 800bf2c <_printf_i+0x1f4>
 800bf28:	1b80      	subs	r0, r0, r6
 800bf2a:	6060      	str	r0, [r4, #4]
 800bf2c:	6863      	ldr	r3, [r4, #4]
 800bf2e:	6123      	str	r3, [r4, #16]
 800bf30:	2300      	movs	r3, #0
 800bf32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf36:	e7a8      	b.n	800be8a <_printf_i+0x152>
 800bf38:	4632      	mov	r2, r6
 800bf3a:	4649      	mov	r1, r9
 800bf3c:	4640      	mov	r0, r8
 800bf3e:	6923      	ldr	r3, [r4, #16]
 800bf40:	47d0      	blx	sl
 800bf42:	3001      	adds	r0, #1
 800bf44:	d0ab      	beq.n	800be9e <_printf_i+0x166>
 800bf46:	6823      	ldr	r3, [r4, #0]
 800bf48:	079b      	lsls	r3, r3, #30
 800bf4a:	d413      	bmi.n	800bf74 <_printf_i+0x23c>
 800bf4c:	68e0      	ldr	r0, [r4, #12]
 800bf4e:	9b03      	ldr	r3, [sp, #12]
 800bf50:	4298      	cmp	r0, r3
 800bf52:	bfb8      	it	lt
 800bf54:	4618      	movlt	r0, r3
 800bf56:	e7a4      	b.n	800bea2 <_printf_i+0x16a>
 800bf58:	2301      	movs	r3, #1
 800bf5a:	4632      	mov	r2, r6
 800bf5c:	4649      	mov	r1, r9
 800bf5e:	4640      	mov	r0, r8
 800bf60:	47d0      	blx	sl
 800bf62:	3001      	adds	r0, #1
 800bf64:	d09b      	beq.n	800be9e <_printf_i+0x166>
 800bf66:	3501      	adds	r5, #1
 800bf68:	68e3      	ldr	r3, [r4, #12]
 800bf6a:	9903      	ldr	r1, [sp, #12]
 800bf6c:	1a5b      	subs	r3, r3, r1
 800bf6e:	42ab      	cmp	r3, r5
 800bf70:	dcf2      	bgt.n	800bf58 <_printf_i+0x220>
 800bf72:	e7eb      	b.n	800bf4c <_printf_i+0x214>
 800bf74:	2500      	movs	r5, #0
 800bf76:	f104 0619 	add.w	r6, r4, #25
 800bf7a:	e7f5      	b.n	800bf68 <_printf_i+0x230>
 800bf7c:	0800f56e 	.word	0x0800f56e
 800bf80:	0800f57f 	.word	0x0800f57f

0800bf84 <iprintf>:
 800bf84:	b40f      	push	{r0, r1, r2, r3}
 800bf86:	4b0a      	ldr	r3, [pc, #40]	; (800bfb0 <iprintf+0x2c>)
 800bf88:	b513      	push	{r0, r1, r4, lr}
 800bf8a:	681c      	ldr	r4, [r3, #0]
 800bf8c:	b124      	cbz	r4, 800bf98 <iprintf+0x14>
 800bf8e:	69a3      	ldr	r3, [r4, #24]
 800bf90:	b913      	cbnz	r3, 800bf98 <iprintf+0x14>
 800bf92:	4620      	mov	r0, r4
 800bf94:	f000 fffe 	bl	800cf94 <__sinit>
 800bf98:	ab05      	add	r3, sp, #20
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	9a04      	ldr	r2, [sp, #16]
 800bf9e:	68a1      	ldr	r1, [r4, #8]
 800bfa0:	9301      	str	r3, [sp, #4]
 800bfa2:	f001 fdd9 	bl	800db58 <_vfiprintf_r>
 800bfa6:	b002      	add	sp, #8
 800bfa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfac:	b004      	add	sp, #16
 800bfae:	4770      	bx	lr
 800bfb0:	2000001c 	.word	0x2000001c

0800bfb4 <_sbrk_r>:
 800bfb4:	b538      	push	{r3, r4, r5, lr}
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	4d05      	ldr	r5, [pc, #20]	; (800bfd0 <_sbrk_r+0x1c>)
 800bfba:	4604      	mov	r4, r0
 800bfbc:	4608      	mov	r0, r1
 800bfbe:	602b      	str	r3, [r5, #0]
 800bfc0:	f7f6 fce2 	bl	8002988 <_sbrk>
 800bfc4:	1c43      	adds	r3, r0, #1
 800bfc6:	d102      	bne.n	800bfce <_sbrk_r+0x1a>
 800bfc8:	682b      	ldr	r3, [r5, #0]
 800bfca:	b103      	cbz	r3, 800bfce <_sbrk_r+0x1a>
 800bfcc:	6023      	str	r3, [r4, #0]
 800bfce:	bd38      	pop	{r3, r4, r5, pc}
 800bfd0:	20000bb8 	.word	0x20000bb8

0800bfd4 <siprintf>:
 800bfd4:	b40e      	push	{r1, r2, r3}
 800bfd6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bfda:	b500      	push	{lr}
 800bfdc:	b09c      	sub	sp, #112	; 0x70
 800bfde:	ab1d      	add	r3, sp, #116	; 0x74
 800bfe0:	9002      	str	r0, [sp, #8]
 800bfe2:	9006      	str	r0, [sp, #24]
 800bfe4:	9107      	str	r1, [sp, #28]
 800bfe6:	9104      	str	r1, [sp, #16]
 800bfe8:	4808      	ldr	r0, [pc, #32]	; (800c00c <siprintf+0x38>)
 800bfea:	4909      	ldr	r1, [pc, #36]	; (800c010 <siprintf+0x3c>)
 800bfec:	f853 2b04 	ldr.w	r2, [r3], #4
 800bff0:	9105      	str	r1, [sp, #20]
 800bff2:	6800      	ldr	r0, [r0, #0]
 800bff4:	a902      	add	r1, sp, #8
 800bff6:	9301      	str	r3, [sp, #4]
 800bff8:	f001 fc86 	bl	800d908 <_svfiprintf_r>
 800bffc:	2200      	movs	r2, #0
 800bffe:	9b02      	ldr	r3, [sp, #8]
 800c000:	701a      	strb	r2, [r3, #0]
 800c002:	b01c      	add	sp, #112	; 0x70
 800c004:	f85d eb04 	ldr.w	lr, [sp], #4
 800c008:	b003      	add	sp, #12
 800c00a:	4770      	bx	lr
 800c00c:	2000001c 	.word	0x2000001c
 800c010:	ffff0208 	.word	0xffff0208

0800c014 <strncpy>:
 800c014:	4603      	mov	r3, r0
 800c016:	b510      	push	{r4, lr}
 800c018:	3901      	subs	r1, #1
 800c01a:	b132      	cbz	r2, 800c02a <strncpy+0x16>
 800c01c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c020:	3a01      	subs	r2, #1
 800c022:	f803 4b01 	strb.w	r4, [r3], #1
 800c026:	2c00      	cmp	r4, #0
 800c028:	d1f7      	bne.n	800c01a <strncpy+0x6>
 800c02a:	2100      	movs	r1, #0
 800c02c:	441a      	add	r2, r3
 800c02e:	4293      	cmp	r3, r2
 800c030:	d100      	bne.n	800c034 <strncpy+0x20>
 800c032:	bd10      	pop	{r4, pc}
 800c034:	f803 1b01 	strb.w	r1, [r3], #1
 800c038:	e7f9      	b.n	800c02e <strncpy+0x1a>

0800c03a <strnlen>:
 800c03a:	4602      	mov	r2, r0
 800c03c:	b510      	push	{r4, lr}
 800c03e:	4401      	add	r1, r0
 800c040:	428a      	cmp	r2, r1
 800c042:	4613      	mov	r3, r2
 800c044:	d101      	bne.n	800c04a <strnlen+0x10>
 800c046:	1a18      	subs	r0, r3, r0
 800c048:	bd10      	pop	{r4, pc}
 800c04a:	781c      	ldrb	r4, [r3, #0]
 800c04c:	3201      	adds	r2, #1
 800c04e:	2c00      	cmp	r4, #0
 800c050:	d1f6      	bne.n	800c040 <strnlen+0x6>
 800c052:	e7f8      	b.n	800c046 <strnlen+0xc>

0800c054 <_strtol_l.isra.0>:
 800c054:	2b01      	cmp	r3, #1
 800c056:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c05a:	4686      	mov	lr, r0
 800c05c:	d001      	beq.n	800c062 <_strtol_l.isra.0+0xe>
 800c05e:	2b24      	cmp	r3, #36	; 0x24
 800c060:	d906      	bls.n	800c070 <_strtol_l.isra.0+0x1c>
 800c062:	f7ff fa47 	bl	800b4f4 <__errno>
 800c066:	2316      	movs	r3, #22
 800c068:	6003      	str	r3, [r0, #0]
 800c06a:	2000      	movs	r0, #0
 800c06c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c070:	468c      	mov	ip, r1
 800c072:	4e3a      	ldr	r6, [pc, #232]	; (800c15c <_strtol_l.isra.0+0x108>)
 800c074:	4660      	mov	r0, ip
 800c076:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c07a:	5da5      	ldrb	r5, [r4, r6]
 800c07c:	f015 0508 	ands.w	r5, r5, #8
 800c080:	d1f8      	bne.n	800c074 <_strtol_l.isra.0+0x20>
 800c082:	2c2d      	cmp	r4, #45	; 0x2d
 800c084:	d133      	bne.n	800c0ee <_strtol_l.isra.0+0x9a>
 800c086:	f04f 0801 	mov.w	r8, #1
 800c08a:	f89c 4000 	ldrb.w	r4, [ip]
 800c08e:	f100 0c02 	add.w	ip, r0, #2
 800c092:	2b00      	cmp	r3, #0
 800c094:	d05d      	beq.n	800c152 <_strtol_l.isra.0+0xfe>
 800c096:	2b10      	cmp	r3, #16
 800c098:	d10c      	bne.n	800c0b4 <_strtol_l.isra.0+0x60>
 800c09a:	2c30      	cmp	r4, #48	; 0x30
 800c09c:	d10a      	bne.n	800c0b4 <_strtol_l.isra.0+0x60>
 800c09e:	f89c 0000 	ldrb.w	r0, [ip]
 800c0a2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c0a6:	2858      	cmp	r0, #88	; 0x58
 800c0a8:	d14e      	bne.n	800c148 <_strtol_l.isra.0+0xf4>
 800c0aa:	2310      	movs	r3, #16
 800c0ac:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800c0b0:	f10c 0c02 	add.w	ip, ip, #2
 800c0b4:	2500      	movs	r5, #0
 800c0b6:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800c0ba:	3f01      	subs	r7, #1
 800c0bc:	fbb7 f9f3 	udiv	r9, r7, r3
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	fb03 7a19 	mls	sl, r3, r9, r7
 800c0c6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800c0ca:	2e09      	cmp	r6, #9
 800c0cc:	d818      	bhi.n	800c100 <_strtol_l.isra.0+0xac>
 800c0ce:	4634      	mov	r4, r6
 800c0d0:	42a3      	cmp	r3, r4
 800c0d2:	dd24      	ble.n	800c11e <_strtol_l.isra.0+0xca>
 800c0d4:	2d00      	cmp	r5, #0
 800c0d6:	db1f      	blt.n	800c118 <_strtol_l.isra.0+0xc4>
 800c0d8:	4581      	cmp	r9, r0
 800c0da:	d31d      	bcc.n	800c118 <_strtol_l.isra.0+0xc4>
 800c0dc:	d101      	bne.n	800c0e2 <_strtol_l.isra.0+0x8e>
 800c0de:	45a2      	cmp	sl, r4
 800c0e0:	db1a      	blt.n	800c118 <_strtol_l.isra.0+0xc4>
 800c0e2:	2501      	movs	r5, #1
 800c0e4:	fb00 4003 	mla	r0, r0, r3, r4
 800c0e8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c0ec:	e7eb      	b.n	800c0c6 <_strtol_l.isra.0+0x72>
 800c0ee:	2c2b      	cmp	r4, #43	; 0x2b
 800c0f0:	bf08      	it	eq
 800c0f2:	f89c 4000 	ldrbeq.w	r4, [ip]
 800c0f6:	46a8      	mov	r8, r5
 800c0f8:	bf08      	it	eq
 800c0fa:	f100 0c02 	addeq.w	ip, r0, #2
 800c0fe:	e7c8      	b.n	800c092 <_strtol_l.isra.0+0x3e>
 800c100:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800c104:	2e19      	cmp	r6, #25
 800c106:	d801      	bhi.n	800c10c <_strtol_l.isra.0+0xb8>
 800c108:	3c37      	subs	r4, #55	; 0x37
 800c10a:	e7e1      	b.n	800c0d0 <_strtol_l.isra.0+0x7c>
 800c10c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800c110:	2e19      	cmp	r6, #25
 800c112:	d804      	bhi.n	800c11e <_strtol_l.isra.0+0xca>
 800c114:	3c57      	subs	r4, #87	; 0x57
 800c116:	e7db      	b.n	800c0d0 <_strtol_l.isra.0+0x7c>
 800c118:	f04f 35ff 	mov.w	r5, #4294967295
 800c11c:	e7e4      	b.n	800c0e8 <_strtol_l.isra.0+0x94>
 800c11e:	2d00      	cmp	r5, #0
 800c120:	da08      	bge.n	800c134 <_strtol_l.isra.0+0xe0>
 800c122:	2322      	movs	r3, #34	; 0x22
 800c124:	4638      	mov	r0, r7
 800c126:	f8ce 3000 	str.w	r3, [lr]
 800c12a:	2a00      	cmp	r2, #0
 800c12c:	d09e      	beq.n	800c06c <_strtol_l.isra.0+0x18>
 800c12e:	f10c 31ff 	add.w	r1, ip, #4294967295
 800c132:	e007      	b.n	800c144 <_strtol_l.isra.0+0xf0>
 800c134:	f1b8 0f00 	cmp.w	r8, #0
 800c138:	d000      	beq.n	800c13c <_strtol_l.isra.0+0xe8>
 800c13a:	4240      	negs	r0, r0
 800c13c:	2a00      	cmp	r2, #0
 800c13e:	d095      	beq.n	800c06c <_strtol_l.isra.0+0x18>
 800c140:	2d00      	cmp	r5, #0
 800c142:	d1f4      	bne.n	800c12e <_strtol_l.isra.0+0xda>
 800c144:	6011      	str	r1, [r2, #0]
 800c146:	e791      	b.n	800c06c <_strtol_l.isra.0+0x18>
 800c148:	2430      	movs	r4, #48	; 0x30
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d1b2      	bne.n	800c0b4 <_strtol_l.isra.0+0x60>
 800c14e:	2308      	movs	r3, #8
 800c150:	e7b0      	b.n	800c0b4 <_strtol_l.isra.0+0x60>
 800c152:	2c30      	cmp	r4, #48	; 0x30
 800c154:	d0a3      	beq.n	800c09e <_strtol_l.isra.0+0x4a>
 800c156:	230a      	movs	r3, #10
 800c158:	e7ac      	b.n	800c0b4 <_strtol_l.isra.0+0x60>
 800c15a:	bf00      	nop
 800c15c:	0800f591 	.word	0x0800f591

0800c160 <strtol>:
 800c160:	4613      	mov	r3, r2
 800c162:	460a      	mov	r2, r1
 800c164:	4601      	mov	r1, r0
 800c166:	4802      	ldr	r0, [pc, #8]	; (800c170 <strtol+0x10>)
 800c168:	6800      	ldr	r0, [r0, #0]
 800c16a:	f7ff bf73 	b.w	800c054 <_strtol_l.isra.0>
 800c16e:	bf00      	nop
 800c170:	2000001c 	.word	0x2000001c

0800c174 <_vsniprintf_r>:
 800c174:	b530      	push	{r4, r5, lr}
 800c176:	1e14      	subs	r4, r2, #0
 800c178:	4605      	mov	r5, r0
 800c17a:	b09b      	sub	sp, #108	; 0x6c
 800c17c:	4618      	mov	r0, r3
 800c17e:	da05      	bge.n	800c18c <_vsniprintf_r+0x18>
 800c180:	238b      	movs	r3, #139	; 0x8b
 800c182:	f04f 30ff 	mov.w	r0, #4294967295
 800c186:	602b      	str	r3, [r5, #0]
 800c188:	b01b      	add	sp, #108	; 0x6c
 800c18a:	bd30      	pop	{r4, r5, pc}
 800c18c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c190:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c194:	bf0c      	ite	eq
 800c196:	4623      	moveq	r3, r4
 800c198:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c19c:	9302      	str	r3, [sp, #8]
 800c19e:	9305      	str	r3, [sp, #20]
 800c1a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c1a4:	4602      	mov	r2, r0
 800c1a6:	9100      	str	r1, [sp, #0]
 800c1a8:	9104      	str	r1, [sp, #16]
 800c1aa:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c1ae:	4669      	mov	r1, sp
 800c1b0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c1b2:	4628      	mov	r0, r5
 800c1b4:	f001 fba8 	bl	800d908 <_svfiprintf_r>
 800c1b8:	1c43      	adds	r3, r0, #1
 800c1ba:	bfbc      	itt	lt
 800c1bc:	238b      	movlt	r3, #139	; 0x8b
 800c1be:	602b      	strlt	r3, [r5, #0]
 800c1c0:	2c00      	cmp	r4, #0
 800c1c2:	d0e1      	beq.n	800c188 <_vsniprintf_r+0x14>
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	9b00      	ldr	r3, [sp, #0]
 800c1c8:	701a      	strb	r2, [r3, #0]
 800c1ca:	e7dd      	b.n	800c188 <_vsniprintf_r+0x14>

0800c1cc <vsniprintf>:
 800c1cc:	b507      	push	{r0, r1, r2, lr}
 800c1ce:	9300      	str	r3, [sp, #0]
 800c1d0:	4613      	mov	r3, r2
 800c1d2:	460a      	mov	r2, r1
 800c1d4:	4601      	mov	r1, r0
 800c1d6:	4803      	ldr	r0, [pc, #12]	; (800c1e4 <vsniprintf+0x18>)
 800c1d8:	6800      	ldr	r0, [r0, #0]
 800c1da:	f7ff ffcb 	bl	800c174 <_vsniprintf_r>
 800c1de:	b003      	add	sp, #12
 800c1e0:	f85d fb04 	ldr.w	pc, [sp], #4
 800c1e4:	2000001c 	.word	0x2000001c

0800c1e8 <quorem>:
 800c1e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1ec:	6903      	ldr	r3, [r0, #16]
 800c1ee:	690c      	ldr	r4, [r1, #16]
 800c1f0:	4607      	mov	r7, r0
 800c1f2:	42a3      	cmp	r3, r4
 800c1f4:	f2c0 8083 	blt.w	800c2fe <quorem+0x116>
 800c1f8:	3c01      	subs	r4, #1
 800c1fa:	f100 0514 	add.w	r5, r0, #20
 800c1fe:	f101 0814 	add.w	r8, r1, #20
 800c202:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c206:	9301      	str	r3, [sp, #4]
 800c208:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c20c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c210:	3301      	adds	r3, #1
 800c212:	429a      	cmp	r2, r3
 800c214:	fbb2 f6f3 	udiv	r6, r2, r3
 800c218:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c21c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c220:	d332      	bcc.n	800c288 <quorem+0xa0>
 800c222:	f04f 0e00 	mov.w	lr, #0
 800c226:	4640      	mov	r0, r8
 800c228:	46ac      	mov	ip, r5
 800c22a:	46f2      	mov	sl, lr
 800c22c:	f850 2b04 	ldr.w	r2, [r0], #4
 800c230:	b293      	uxth	r3, r2
 800c232:	fb06 e303 	mla	r3, r6, r3, lr
 800c236:	0c12      	lsrs	r2, r2, #16
 800c238:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c23c:	fb06 e202 	mla	r2, r6, r2, lr
 800c240:	b29b      	uxth	r3, r3
 800c242:	ebaa 0303 	sub.w	r3, sl, r3
 800c246:	f8dc a000 	ldr.w	sl, [ip]
 800c24a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c24e:	fa1f fa8a 	uxth.w	sl, sl
 800c252:	4453      	add	r3, sl
 800c254:	fa1f fa82 	uxth.w	sl, r2
 800c258:	f8dc 2000 	ldr.w	r2, [ip]
 800c25c:	4581      	cmp	r9, r0
 800c25e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c262:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c266:	b29b      	uxth	r3, r3
 800c268:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c26c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c270:	f84c 3b04 	str.w	r3, [ip], #4
 800c274:	d2da      	bcs.n	800c22c <quorem+0x44>
 800c276:	f855 300b 	ldr.w	r3, [r5, fp]
 800c27a:	b92b      	cbnz	r3, 800c288 <quorem+0xa0>
 800c27c:	9b01      	ldr	r3, [sp, #4]
 800c27e:	3b04      	subs	r3, #4
 800c280:	429d      	cmp	r5, r3
 800c282:	461a      	mov	r2, r3
 800c284:	d32f      	bcc.n	800c2e6 <quorem+0xfe>
 800c286:	613c      	str	r4, [r7, #16]
 800c288:	4638      	mov	r0, r7
 800c28a:	f001 f9cb 	bl	800d624 <__mcmp>
 800c28e:	2800      	cmp	r0, #0
 800c290:	db25      	blt.n	800c2de <quorem+0xf6>
 800c292:	4628      	mov	r0, r5
 800c294:	f04f 0c00 	mov.w	ip, #0
 800c298:	3601      	adds	r6, #1
 800c29a:	f858 1b04 	ldr.w	r1, [r8], #4
 800c29e:	f8d0 e000 	ldr.w	lr, [r0]
 800c2a2:	b28b      	uxth	r3, r1
 800c2a4:	ebac 0303 	sub.w	r3, ip, r3
 800c2a8:	fa1f f28e 	uxth.w	r2, lr
 800c2ac:	4413      	add	r3, r2
 800c2ae:	0c0a      	lsrs	r2, r1, #16
 800c2b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c2b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c2b8:	b29b      	uxth	r3, r3
 800c2ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c2be:	45c1      	cmp	r9, r8
 800c2c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c2c4:	f840 3b04 	str.w	r3, [r0], #4
 800c2c8:	d2e7      	bcs.n	800c29a <quorem+0xb2>
 800c2ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c2ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c2d2:	b922      	cbnz	r2, 800c2de <quorem+0xf6>
 800c2d4:	3b04      	subs	r3, #4
 800c2d6:	429d      	cmp	r5, r3
 800c2d8:	461a      	mov	r2, r3
 800c2da:	d30a      	bcc.n	800c2f2 <quorem+0x10a>
 800c2dc:	613c      	str	r4, [r7, #16]
 800c2de:	4630      	mov	r0, r6
 800c2e0:	b003      	add	sp, #12
 800c2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2e6:	6812      	ldr	r2, [r2, #0]
 800c2e8:	3b04      	subs	r3, #4
 800c2ea:	2a00      	cmp	r2, #0
 800c2ec:	d1cb      	bne.n	800c286 <quorem+0x9e>
 800c2ee:	3c01      	subs	r4, #1
 800c2f0:	e7c6      	b.n	800c280 <quorem+0x98>
 800c2f2:	6812      	ldr	r2, [r2, #0]
 800c2f4:	3b04      	subs	r3, #4
 800c2f6:	2a00      	cmp	r2, #0
 800c2f8:	d1f0      	bne.n	800c2dc <quorem+0xf4>
 800c2fa:	3c01      	subs	r4, #1
 800c2fc:	e7eb      	b.n	800c2d6 <quorem+0xee>
 800c2fe:	2000      	movs	r0, #0
 800c300:	e7ee      	b.n	800c2e0 <quorem+0xf8>
 800c302:	0000      	movs	r0, r0
 800c304:	0000      	movs	r0, r0
	...

0800c308 <_dtoa_r>:
 800c308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c30c:	4616      	mov	r6, r2
 800c30e:	461f      	mov	r7, r3
 800c310:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c312:	b099      	sub	sp, #100	; 0x64
 800c314:	4605      	mov	r5, r0
 800c316:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c31a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800c31e:	b974      	cbnz	r4, 800c33e <_dtoa_r+0x36>
 800c320:	2010      	movs	r0, #16
 800c322:	f7ff f911 	bl	800b548 <malloc>
 800c326:	4602      	mov	r2, r0
 800c328:	6268      	str	r0, [r5, #36]	; 0x24
 800c32a:	b920      	cbnz	r0, 800c336 <_dtoa_r+0x2e>
 800c32c:	21ea      	movs	r1, #234	; 0xea
 800c32e:	4bae      	ldr	r3, [pc, #696]	; (800c5e8 <_dtoa_r+0x2e0>)
 800c330:	48ae      	ldr	r0, [pc, #696]	; (800c5ec <_dtoa_r+0x2e4>)
 800c332:	f001 fe57 	bl	800dfe4 <__assert_func>
 800c336:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c33a:	6004      	str	r4, [r0, #0]
 800c33c:	60c4      	str	r4, [r0, #12]
 800c33e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c340:	6819      	ldr	r1, [r3, #0]
 800c342:	b151      	cbz	r1, 800c35a <_dtoa_r+0x52>
 800c344:	685a      	ldr	r2, [r3, #4]
 800c346:	2301      	movs	r3, #1
 800c348:	4093      	lsls	r3, r2
 800c34a:	604a      	str	r2, [r1, #4]
 800c34c:	608b      	str	r3, [r1, #8]
 800c34e:	4628      	mov	r0, r5
 800c350:	f000 ff2e 	bl	800d1b0 <_Bfree>
 800c354:	2200      	movs	r2, #0
 800c356:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c358:	601a      	str	r2, [r3, #0]
 800c35a:	1e3b      	subs	r3, r7, #0
 800c35c:	bfaf      	iteee	ge
 800c35e:	2300      	movge	r3, #0
 800c360:	2201      	movlt	r2, #1
 800c362:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c366:	9305      	strlt	r3, [sp, #20]
 800c368:	bfa8      	it	ge
 800c36a:	f8c8 3000 	strge.w	r3, [r8]
 800c36e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800c372:	4b9f      	ldr	r3, [pc, #636]	; (800c5f0 <_dtoa_r+0x2e8>)
 800c374:	bfb8      	it	lt
 800c376:	f8c8 2000 	strlt.w	r2, [r8]
 800c37a:	ea33 0309 	bics.w	r3, r3, r9
 800c37e:	d119      	bne.n	800c3b4 <_dtoa_r+0xac>
 800c380:	f242 730f 	movw	r3, #9999	; 0x270f
 800c384:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c386:	6013      	str	r3, [r2, #0]
 800c388:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c38c:	4333      	orrs	r3, r6
 800c38e:	f000 8580 	beq.w	800ce92 <_dtoa_r+0xb8a>
 800c392:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c394:	b953      	cbnz	r3, 800c3ac <_dtoa_r+0xa4>
 800c396:	4b97      	ldr	r3, [pc, #604]	; (800c5f4 <_dtoa_r+0x2ec>)
 800c398:	e022      	b.n	800c3e0 <_dtoa_r+0xd8>
 800c39a:	4b97      	ldr	r3, [pc, #604]	; (800c5f8 <_dtoa_r+0x2f0>)
 800c39c:	9308      	str	r3, [sp, #32]
 800c39e:	3308      	adds	r3, #8
 800c3a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c3a2:	6013      	str	r3, [r2, #0]
 800c3a4:	9808      	ldr	r0, [sp, #32]
 800c3a6:	b019      	add	sp, #100	; 0x64
 800c3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3ac:	4b91      	ldr	r3, [pc, #580]	; (800c5f4 <_dtoa_r+0x2ec>)
 800c3ae:	9308      	str	r3, [sp, #32]
 800c3b0:	3303      	adds	r3, #3
 800c3b2:	e7f5      	b.n	800c3a0 <_dtoa_r+0x98>
 800c3b4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c3b8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800c3bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	f7f4 fb5c 	bl	8000a80 <__aeabi_dcmpeq>
 800c3c8:	4680      	mov	r8, r0
 800c3ca:	b158      	cbz	r0, 800c3e4 <_dtoa_r+0xdc>
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c3d0:	6013      	str	r3, [r2, #0]
 800c3d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	f000 8559 	beq.w	800ce8c <_dtoa_r+0xb84>
 800c3da:	4888      	ldr	r0, [pc, #544]	; (800c5fc <_dtoa_r+0x2f4>)
 800c3dc:	6018      	str	r0, [r3, #0]
 800c3de:	1e43      	subs	r3, r0, #1
 800c3e0:	9308      	str	r3, [sp, #32]
 800c3e2:	e7df      	b.n	800c3a4 <_dtoa_r+0x9c>
 800c3e4:	ab16      	add	r3, sp, #88	; 0x58
 800c3e6:	9301      	str	r3, [sp, #4]
 800c3e8:	ab17      	add	r3, sp, #92	; 0x5c
 800c3ea:	9300      	str	r3, [sp, #0]
 800c3ec:	4628      	mov	r0, r5
 800c3ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c3f2:	f001 f9c3 	bl	800d77c <__d2b>
 800c3f6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c3fa:	4682      	mov	sl, r0
 800c3fc:	2c00      	cmp	r4, #0
 800c3fe:	d07e      	beq.n	800c4fe <_dtoa_r+0x1f6>
 800c400:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c404:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c406:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c40a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c40e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800c412:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800c416:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800c41a:	2200      	movs	r2, #0
 800c41c:	4b78      	ldr	r3, [pc, #480]	; (800c600 <_dtoa_r+0x2f8>)
 800c41e:	f7f3 ff0f 	bl	8000240 <__aeabi_dsub>
 800c422:	a36b      	add	r3, pc, #428	; (adr r3, 800c5d0 <_dtoa_r+0x2c8>)
 800c424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c428:	f7f4 f8c2 	bl	80005b0 <__aeabi_dmul>
 800c42c:	a36a      	add	r3, pc, #424	; (adr r3, 800c5d8 <_dtoa_r+0x2d0>)
 800c42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c432:	f7f3 ff07 	bl	8000244 <__adddf3>
 800c436:	4606      	mov	r6, r0
 800c438:	4620      	mov	r0, r4
 800c43a:	460f      	mov	r7, r1
 800c43c:	f7f4 f84e 	bl	80004dc <__aeabi_i2d>
 800c440:	a367      	add	r3, pc, #412	; (adr r3, 800c5e0 <_dtoa_r+0x2d8>)
 800c442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c446:	f7f4 f8b3 	bl	80005b0 <__aeabi_dmul>
 800c44a:	4602      	mov	r2, r0
 800c44c:	460b      	mov	r3, r1
 800c44e:	4630      	mov	r0, r6
 800c450:	4639      	mov	r1, r7
 800c452:	f7f3 fef7 	bl	8000244 <__adddf3>
 800c456:	4606      	mov	r6, r0
 800c458:	460f      	mov	r7, r1
 800c45a:	f7f4 fb59 	bl	8000b10 <__aeabi_d2iz>
 800c45e:	2200      	movs	r2, #0
 800c460:	4681      	mov	r9, r0
 800c462:	2300      	movs	r3, #0
 800c464:	4630      	mov	r0, r6
 800c466:	4639      	mov	r1, r7
 800c468:	f7f4 fb14 	bl	8000a94 <__aeabi_dcmplt>
 800c46c:	b148      	cbz	r0, 800c482 <_dtoa_r+0x17a>
 800c46e:	4648      	mov	r0, r9
 800c470:	f7f4 f834 	bl	80004dc <__aeabi_i2d>
 800c474:	4632      	mov	r2, r6
 800c476:	463b      	mov	r3, r7
 800c478:	f7f4 fb02 	bl	8000a80 <__aeabi_dcmpeq>
 800c47c:	b908      	cbnz	r0, 800c482 <_dtoa_r+0x17a>
 800c47e:	f109 39ff 	add.w	r9, r9, #4294967295
 800c482:	f1b9 0f16 	cmp.w	r9, #22
 800c486:	d857      	bhi.n	800c538 <_dtoa_r+0x230>
 800c488:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c48c:	4b5d      	ldr	r3, [pc, #372]	; (800c604 <_dtoa_r+0x2fc>)
 800c48e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800c492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c496:	f7f4 fafd 	bl	8000a94 <__aeabi_dcmplt>
 800c49a:	2800      	cmp	r0, #0
 800c49c:	d04e      	beq.n	800c53c <_dtoa_r+0x234>
 800c49e:	2300      	movs	r3, #0
 800c4a0:	f109 39ff 	add.w	r9, r9, #4294967295
 800c4a4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c4a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c4a8:	1b1c      	subs	r4, r3, r4
 800c4aa:	1e63      	subs	r3, r4, #1
 800c4ac:	9309      	str	r3, [sp, #36]	; 0x24
 800c4ae:	bf49      	itett	mi
 800c4b0:	f1c4 0301 	rsbmi	r3, r4, #1
 800c4b4:	2300      	movpl	r3, #0
 800c4b6:	9306      	strmi	r3, [sp, #24]
 800c4b8:	2300      	movmi	r3, #0
 800c4ba:	bf54      	ite	pl
 800c4bc:	9306      	strpl	r3, [sp, #24]
 800c4be:	9309      	strmi	r3, [sp, #36]	; 0x24
 800c4c0:	f1b9 0f00 	cmp.w	r9, #0
 800c4c4:	db3c      	blt.n	800c540 <_dtoa_r+0x238>
 800c4c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4c8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c4cc:	444b      	add	r3, r9
 800c4ce:	9309      	str	r3, [sp, #36]	; 0x24
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	930a      	str	r3, [sp, #40]	; 0x28
 800c4d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c4d6:	2b09      	cmp	r3, #9
 800c4d8:	d86c      	bhi.n	800c5b4 <_dtoa_r+0x2ac>
 800c4da:	2b05      	cmp	r3, #5
 800c4dc:	bfc4      	itt	gt
 800c4de:	3b04      	subgt	r3, #4
 800c4e0:	9322      	strgt	r3, [sp, #136]	; 0x88
 800c4e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c4e4:	bfc8      	it	gt
 800c4e6:	2400      	movgt	r4, #0
 800c4e8:	f1a3 0302 	sub.w	r3, r3, #2
 800c4ec:	bfd8      	it	le
 800c4ee:	2401      	movle	r4, #1
 800c4f0:	2b03      	cmp	r3, #3
 800c4f2:	f200 808b 	bhi.w	800c60c <_dtoa_r+0x304>
 800c4f6:	e8df f003 	tbb	[pc, r3]
 800c4fa:	4f2d      	.short	0x4f2d
 800c4fc:	5b4d      	.short	0x5b4d
 800c4fe:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800c502:	441c      	add	r4, r3
 800c504:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800c508:	2b20      	cmp	r3, #32
 800c50a:	bfc3      	ittte	gt
 800c50c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c510:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800c514:	fa09 f303 	lslgt.w	r3, r9, r3
 800c518:	f1c3 0320 	rsble	r3, r3, #32
 800c51c:	bfc6      	itte	gt
 800c51e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c522:	4318      	orrgt	r0, r3
 800c524:	fa06 f003 	lslle.w	r0, r6, r3
 800c528:	f7f3 ffc8 	bl	80004bc <__aeabi_ui2d>
 800c52c:	2301      	movs	r3, #1
 800c52e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800c532:	3c01      	subs	r4, #1
 800c534:	9313      	str	r3, [sp, #76]	; 0x4c
 800c536:	e770      	b.n	800c41a <_dtoa_r+0x112>
 800c538:	2301      	movs	r3, #1
 800c53a:	e7b3      	b.n	800c4a4 <_dtoa_r+0x19c>
 800c53c:	900f      	str	r0, [sp, #60]	; 0x3c
 800c53e:	e7b2      	b.n	800c4a6 <_dtoa_r+0x19e>
 800c540:	9b06      	ldr	r3, [sp, #24]
 800c542:	eba3 0309 	sub.w	r3, r3, r9
 800c546:	9306      	str	r3, [sp, #24]
 800c548:	f1c9 0300 	rsb	r3, r9, #0
 800c54c:	930a      	str	r3, [sp, #40]	; 0x28
 800c54e:	2300      	movs	r3, #0
 800c550:	930e      	str	r3, [sp, #56]	; 0x38
 800c552:	e7bf      	b.n	800c4d4 <_dtoa_r+0x1cc>
 800c554:	2300      	movs	r3, #0
 800c556:	930b      	str	r3, [sp, #44]	; 0x2c
 800c558:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	dc59      	bgt.n	800c612 <_dtoa_r+0x30a>
 800c55e:	f04f 0b01 	mov.w	fp, #1
 800c562:	465b      	mov	r3, fp
 800c564:	f8cd b008 	str.w	fp, [sp, #8]
 800c568:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800c56c:	2200      	movs	r2, #0
 800c56e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800c570:	6042      	str	r2, [r0, #4]
 800c572:	2204      	movs	r2, #4
 800c574:	f102 0614 	add.w	r6, r2, #20
 800c578:	429e      	cmp	r6, r3
 800c57a:	6841      	ldr	r1, [r0, #4]
 800c57c:	d94f      	bls.n	800c61e <_dtoa_r+0x316>
 800c57e:	4628      	mov	r0, r5
 800c580:	f000 fdd6 	bl	800d130 <_Balloc>
 800c584:	9008      	str	r0, [sp, #32]
 800c586:	2800      	cmp	r0, #0
 800c588:	d14d      	bne.n	800c626 <_dtoa_r+0x31e>
 800c58a:	4602      	mov	r2, r0
 800c58c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c590:	4b1d      	ldr	r3, [pc, #116]	; (800c608 <_dtoa_r+0x300>)
 800c592:	e6cd      	b.n	800c330 <_dtoa_r+0x28>
 800c594:	2301      	movs	r3, #1
 800c596:	e7de      	b.n	800c556 <_dtoa_r+0x24e>
 800c598:	2300      	movs	r3, #0
 800c59a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c59c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c59e:	eb09 0b03 	add.w	fp, r9, r3
 800c5a2:	f10b 0301 	add.w	r3, fp, #1
 800c5a6:	2b01      	cmp	r3, #1
 800c5a8:	9302      	str	r3, [sp, #8]
 800c5aa:	bfb8      	it	lt
 800c5ac:	2301      	movlt	r3, #1
 800c5ae:	e7dd      	b.n	800c56c <_dtoa_r+0x264>
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	e7f2      	b.n	800c59a <_dtoa_r+0x292>
 800c5b4:	2401      	movs	r4, #1
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	940b      	str	r4, [sp, #44]	; 0x2c
 800c5ba:	9322      	str	r3, [sp, #136]	; 0x88
 800c5bc:	f04f 3bff 	mov.w	fp, #4294967295
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	2312      	movs	r3, #18
 800c5c4:	f8cd b008 	str.w	fp, [sp, #8]
 800c5c8:	9223      	str	r2, [sp, #140]	; 0x8c
 800c5ca:	e7cf      	b.n	800c56c <_dtoa_r+0x264>
 800c5cc:	f3af 8000 	nop.w
 800c5d0:	636f4361 	.word	0x636f4361
 800c5d4:	3fd287a7 	.word	0x3fd287a7
 800c5d8:	8b60c8b3 	.word	0x8b60c8b3
 800c5dc:	3fc68a28 	.word	0x3fc68a28
 800c5e0:	509f79fb 	.word	0x509f79fb
 800c5e4:	3fd34413 	.word	0x3fd34413
 800c5e8:	0800f69e 	.word	0x0800f69e
 800c5ec:	0800f6b5 	.word	0x0800f6b5
 800c5f0:	7ff00000 	.word	0x7ff00000
 800c5f4:	0800f69a 	.word	0x0800f69a
 800c5f8:	0800f691 	.word	0x0800f691
 800c5fc:	0800f56d 	.word	0x0800f56d
 800c600:	3ff80000 	.word	0x3ff80000
 800c604:	0800f810 	.word	0x0800f810
 800c608:	0800f714 	.word	0x0800f714
 800c60c:	2301      	movs	r3, #1
 800c60e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c610:	e7d4      	b.n	800c5bc <_dtoa_r+0x2b4>
 800c612:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800c616:	465b      	mov	r3, fp
 800c618:	f8cd b008 	str.w	fp, [sp, #8]
 800c61c:	e7a6      	b.n	800c56c <_dtoa_r+0x264>
 800c61e:	3101      	adds	r1, #1
 800c620:	6041      	str	r1, [r0, #4]
 800c622:	0052      	lsls	r2, r2, #1
 800c624:	e7a6      	b.n	800c574 <_dtoa_r+0x26c>
 800c626:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c628:	9a08      	ldr	r2, [sp, #32]
 800c62a:	601a      	str	r2, [r3, #0]
 800c62c:	9b02      	ldr	r3, [sp, #8]
 800c62e:	2b0e      	cmp	r3, #14
 800c630:	f200 80a8 	bhi.w	800c784 <_dtoa_r+0x47c>
 800c634:	2c00      	cmp	r4, #0
 800c636:	f000 80a5 	beq.w	800c784 <_dtoa_r+0x47c>
 800c63a:	f1b9 0f00 	cmp.w	r9, #0
 800c63e:	dd34      	ble.n	800c6aa <_dtoa_r+0x3a2>
 800c640:	4a9a      	ldr	r2, [pc, #616]	; (800c8ac <_dtoa_r+0x5a4>)
 800c642:	f009 030f 	and.w	r3, r9, #15
 800c646:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c64a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800c64e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c652:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800c656:	ea4f 1429 	mov.w	r4, r9, asr #4
 800c65a:	d016      	beq.n	800c68a <_dtoa_r+0x382>
 800c65c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c660:	4b93      	ldr	r3, [pc, #588]	; (800c8b0 <_dtoa_r+0x5a8>)
 800c662:	2703      	movs	r7, #3
 800c664:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c668:	f7f4 f8cc 	bl	8000804 <__aeabi_ddiv>
 800c66c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c670:	f004 040f 	and.w	r4, r4, #15
 800c674:	4e8e      	ldr	r6, [pc, #568]	; (800c8b0 <_dtoa_r+0x5a8>)
 800c676:	b954      	cbnz	r4, 800c68e <_dtoa_r+0x386>
 800c678:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c67c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c680:	f7f4 f8c0 	bl	8000804 <__aeabi_ddiv>
 800c684:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c688:	e029      	b.n	800c6de <_dtoa_r+0x3d6>
 800c68a:	2702      	movs	r7, #2
 800c68c:	e7f2      	b.n	800c674 <_dtoa_r+0x36c>
 800c68e:	07e1      	lsls	r1, r4, #31
 800c690:	d508      	bpl.n	800c6a4 <_dtoa_r+0x39c>
 800c692:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c696:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c69a:	f7f3 ff89 	bl	80005b0 <__aeabi_dmul>
 800c69e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c6a2:	3701      	adds	r7, #1
 800c6a4:	1064      	asrs	r4, r4, #1
 800c6a6:	3608      	adds	r6, #8
 800c6a8:	e7e5      	b.n	800c676 <_dtoa_r+0x36e>
 800c6aa:	f000 80a5 	beq.w	800c7f8 <_dtoa_r+0x4f0>
 800c6ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c6b2:	f1c9 0400 	rsb	r4, r9, #0
 800c6b6:	4b7d      	ldr	r3, [pc, #500]	; (800c8ac <_dtoa_r+0x5a4>)
 800c6b8:	f004 020f 	and.w	r2, r4, #15
 800c6bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c4:	f7f3 ff74 	bl	80005b0 <__aeabi_dmul>
 800c6c8:	2702      	movs	r7, #2
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c6d0:	4e77      	ldr	r6, [pc, #476]	; (800c8b0 <_dtoa_r+0x5a8>)
 800c6d2:	1124      	asrs	r4, r4, #4
 800c6d4:	2c00      	cmp	r4, #0
 800c6d6:	f040 8084 	bne.w	800c7e2 <_dtoa_r+0x4da>
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d1d2      	bne.n	800c684 <_dtoa_r+0x37c>
 800c6de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	f000 808b 	beq.w	800c7fc <_dtoa_r+0x4f4>
 800c6e6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c6ea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800c6ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	4b6f      	ldr	r3, [pc, #444]	; (800c8b4 <_dtoa_r+0x5ac>)
 800c6f6:	f7f4 f9cd 	bl	8000a94 <__aeabi_dcmplt>
 800c6fa:	2800      	cmp	r0, #0
 800c6fc:	d07e      	beq.n	800c7fc <_dtoa_r+0x4f4>
 800c6fe:	9b02      	ldr	r3, [sp, #8]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d07b      	beq.n	800c7fc <_dtoa_r+0x4f4>
 800c704:	f1bb 0f00 	cmp.w	fp, #0
 800c708:	dd38      	ble.n	800c77c <_dtoa_r+0x474>
 800c70a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c70e:	2200      	movs	r2, #0
 800c710:	4b69      	ldr	r3, [pc, #420]	; (800c8b8 <_dtoa_r+0x5b0>)
 800c712:	f7f3 ff4d 	bl	80005b0 <__aeabi_dmul>
 800c716:	465c      	mov	r4, fp
 800c718:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c71c:	f109 38ff 	add.w	r8, r9, #4294967295
 800c720:	3701      	adds	r7, #1
 800c722:	4638      	mov	r0, r7
 800c724:	f7f3 feda 	bl	80004dc <__aeabi_i2d>
 800c728:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c72c:	f7f3 ff40 	bl	80005b0 <__aeabi_dmul>
 800c730:	2200      	movs	r2, #0
 800c732:	4b62      	ldr	r3, [pc, #392]	; (800c8bc <_dtoa_r+0x5b4>)
 800c734:	f7f3 fd86 	bl	8000244 <__adddf3>
 800c738:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c73c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c740:	9611      	str	r6, [sp, #68]	; 0x44
 800c742:	2c00      	cmp	r4, #0
 800c744:	d15d      	bne.n	800c802 <_dtoa_r+0x4fa>
 800c746:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c74a:	2200      	movs	r2, #0
 800c74c:	4b5c      	ldr	r3, [pc, #368]	; (800c8c0 <_dtoa_r+0x5b8>)
 800c74e:	f7f3 fd77 	bl	8000240 <__aeabi_dsub>
 800c752:	4602      	mov	r2, r0
 800c754:	460b      	mov	r3, r1
 800c756:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c75a:	4633      	mov	r3, r6
 800c75c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c75e:	f7f4 f9b7 	bl	8000ad0 <__aeabi_dcmpgt>
 800c762:	2800      	cmp	r0, #0
 800c764:	f040 829e 	bne.w	800cca4 <_dtoa_r+0x99c>
 800c768:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c76c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c76e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c772:	f7f4 f98f 	bl	8000a94 <__aeabi_dcmplt>
 800c776:	2800      	cmp	r0, #0
 800c778:	f040 8292 	bne.w	800cca0 <_dtoa_r+0x998>
 800c77c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800c780:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c784:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c786:	2b00      	cmp	r3, #0
 800c788:	f2c0 8153 	blt.w	800ca32 <_dtoa_r+0x72a>
 800c78c:	f1b9 0f0e 	cmp.w	r9, #14
 800c790:	f300 814f 	bgt.w	800ca32 <_dtoa_r+0x72a>
 800c794:	4b45      	ldr	r3, [pc, #276]	; (800c8ac <_dtoa_r+0x5a4>)
 800c796:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800c79a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c79e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800c7a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	f280 80db 	bge.w	800c960 <_dtoa_r+0x658>
 800c7aa:	9b02      	ldr	r3, [sp, #8]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	f300 80d7 	bgt.w	800c960 <_dtoa_r+0x658>
 800c7b2:	f040 8274 	bne.w	800cc9e <_dtoa_r+0x996>
 800c7b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	4b40      	ldr	r3, [pc, #256]	; (800c8c0 <_dtoa_r+0x5b8>)
 800c7be:	f7f3 fef7 	bl	80005b0 <__aeabi_dmul>
 800c7c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c7c6:	f7f4 f979 	bl	8000abc <__aeabi_dcmpge>
 800c7ca:	9c02      	ldr	r4, [sp, #8]
 800c7cc:	4626      	mov	r6, r4
 800c7ce:	2800      	cmp	r0, #0
 800c7d0:	f040 824a 	bne.w	800cc68 <_dtoa_r+0x960>
 800c7d4:	2331      	movs	r3, #49	; 0x31
 800c7d6:	9f08      	ldr	r7, [sp, #32]
 800c7d8:	f109 0901 	add.w	r9, r9, #1
 800c7dc:	f807 3b01 	strb.w	r3, [r7], #1
 800c7e0:	e246      	b.n	800cc70 <_dtoa_r+0x968>
 800c7e2:	07e2      	lsls	r2, r4, #31
 800c7e4:	d505      	bpl.n	800c7f2 <_dtoa_r+0x4ea>
 800c7e6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c7ea:	f7f3 fee1 	bl	80005b0 <__aeabi_dmul>
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	3701      	adds	r7, #1
 800c7f2:	1064      	asrs	r4, r4, #1
 800c7f4:	3608      	adds	r6, #8
 800c7f6:	e76d      	b.n	800c6d4 <_dtoa_r+0x3cc>
 800c7f8:	2702      	movs	r7, #2
 800c7fa:	e770      	b.n	800c6de <_dtoa_r+0x3d6>
 800c7fc:	46c8      	mov	r8, r9
 800c7fe:	9c02      	ldr	r4, [sp, #8]
 800c800:	e78f      	b.n	800c722 <_dtoa_r+0x41a>
 800c802:	9908      	ldr	r1, [sp, #32]
 800c804:	4b29      	ldr	r3, [pc, #164]	; (800c8ac <_dtoa_r+0x5a4>)
 800c806:	4421      	add	r1, r4
 800c808:	9112      	str	r1, [sp, #72]	; 0x48
 800c80a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c80c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c810:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800c814:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c818:	2900      	cmp	r1, #0
 800c81a:	d055      	beq.n	800c8c8 <_dtoa_r+0x5c0>
 800c81c:	2000      	movs	r0, #0
 800c81e:	4929      	ldr	r1, [pc, #164]	; (800c8c4 <_dtoa_r+0x5bc>)
 800c820:	f7f3 fff0 	bl	8000804 <__aeabi_ddiv>
 800c824:	463b      	mov	r3, r7
 800c826:	4632      	mov	r2, r6
 800c828:	f7f3 fd0a 	bl	8000240 <__aeabi_dsub>
 800c82c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c830:	9f08      	ldr	r7, [sp, #32]
 800c832:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c836:	f7f4 f96b 	bl	8000b10 <__aeabi_d2iz>
 800c83a:	4604      	mov	r4, r0
 800c83c:	f7f3 fe4e 	bl	80004dc <__aeabi_i2d>
 800c840:	4602      	mov	r2, r0
 800c842:	460b      	mov	r3, r1
 800c844:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c848:	f7f3 fcfa 	bl	8000240 <__aeabi_dsub>
 800c84c:	4602      	mov	r2, r0
 800c84e:	460b      	mov	r3, r1
 800c850:	3430      	adds	r4, #48	; 0x30
 800c852:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c856:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c85a:	f807 4b01 	strb.w	r4, [r7], #1
 800c85e:	f7f4 f919 	bl	8000a94 <__aeabi_dcmplt>
 800c862:	2800      	cmp	r0, #0
 800c864:	d174      	bne.n	800c950 <_dtoa_r+0x648>
 800c866:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c86a:	2000      	movs	r0, #0
 800c86c:	4911      	ldr	r1, [pc, #68]	; (800c8b4 <_dtoa_r+0x5ac>)
 800c86e:	f7f3 fce7 	bl	8000240 <__aeabi_dsub>
 800c872:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c876:	f7f4 f90d 	bl	8000a94 <__aeabi_dcmplt>
 800c87a:	2800      	cmp	r0, #0
 800c87c:	f040 80b6 	bne.w	800c9ec <_dtoa_r+0x6e4>
 800c880:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c882:	429f      	cmp	r7, r3
 800c884:	f43f af7a 	beq.w	800c77c <_dtoa_r+0x474>
 800c888:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c88c:	2200      	movs	r2, #0
 800c88e:	4b0a      	ldr	r3, [pc, #40]	; (800c8b8 <_dtoa_r+0x5b0>)
 800c890:	f7f3 fe8e 	bl	80005b0 <__aeabi_dmul>
 800c894:	2200      	movs	r2, #0
 800c896:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c89a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c89e:	4b06      	ldr	r3, [pc, #24]	; (800c8b8 <_dtoa_r+0x5b0>)
 800c8a0:	f7f3 fe86 	bl	80005b0 <__aeabi_dmul>
 800c8a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c8a8:	e7c3      	b.n	800c832 <_dtoa_r+0x52a>
 800c8aa:	bf00      	nop
 800c8ac:	0800f810 	.word	0x0800f810
 800c8b0:	0800f7e8 	.word	0x0800f7e8
 800c8b4:	3ff00000 	.word	0x3ff00000
 800c8b8:	40240000 	.word	0x40240000
 800c8bc:	401c0000 	.word	0x401c0000
 800c8c0:	40140000 	.word	0x40140000
 800c8c4:	3fe00000 	.word	0x3fe00000
 800c8c8:	4630      	mov	r0, r6
 800c8ca:	4639      	mov	r1, r7
 800c8cc:	f7f3 fe70 	bl	80005b0 <__aeabi_dmul>
 800c8d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c8d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c8d6:	9c08      	ldr	r4, [sp, #32]
 800c8d8:	9314      	str	r3, [sp, #80]	; 0x50
 800c8da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c8de:	f7f4 f917 	bl	8000b10 <__aeabi_d2iz>
 800c8e2:	9015      	str	r0, [sp, #84]	; 0x54
 800c8e4:	f7f3 fdfa 	bl	80004dc <__aeabi_i2d>
 800c8e8:	4602      	mov	r2, r0
 800c8ea:	460b      	mov	r3, r1
 800c8ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c8f0:	f7f3 fca6 	bl	8000240 <__aeabi_dsub>
 800c8f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c8f6:	4606      	mov	r6, r0
 800c8f8:	3330      	adds	r3, #48	; 0x30
 800c8fa:	f804 3b01 	strb.w	r3, [r4], #1
 800c8fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c900:	460f      	mov	r7, r1
 800c902:	429c      	cmp	r4, r3
 800c904:	f04f 0200 	mov.w	r2, #0
 800c908:	d124      	bne.n	800c954 <_dtoa_r+0x64c>
 800c90a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c90e:	4bb3      	ldr	r3, [pc, #716]	; (800cbdc <_dtoa_r+0x8d4>)
 800c910:	f7f3 fc98 	bl	8000244 <__adddf3>
 800c914:	4602      	mov	r2, r0
 800c916:	460b      	mov	r3, r1
 800c918:	4630      	mov	r0, r6
 800c91a:	4639      	mov	r1, r7
 800c91c:	f7f4 f8d8 	bl	8000ad0 <__aeabi_dcmpgt>
 800c920:	2800      	cmp	r0, #0
 800c922:	d162      	bne.n	800c9ea <_dtoa_r+0x6e2>
 800c924:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c928:	2000      	movs	r0, #0
 800c92a:	49ac      	ldr	r1, [pc, #688]	; (800cbdc <_dtoa_r+0x8d4>)
 800c92c:	f7f3 fc88 	bl	8000240 <__aeabi_dsub>
 800c930:	4602      	mov	r2, r0
 800c932:	460b      	mov	r3, r1
 800c934:	4630      	mov	r0, r6
 800c936:	4639      	mov	r1, r7
 800c938:	f7f4 f8ac 	bl	8000a94 <__aeabi_dcmplt>
 800c93c:	2800      	cmp	r0, #0
 800c93e:	f43f af1d 	beq.w	800c77c <_dtoa_r+0x474>
 800c942:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800c944:	1e7b      	subs	r3, r7, #1
 800c946:	9314      	str	r3, [sp, #80]	; 0x50
 800c948:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800c94c:	2b30      	cmp	r3, #48	; 0x30
 800c94e:	d0f8      	beq.n	800c942 <_dtoa_r+0x63a>
 800c950:	46c1      	mov	r9, r8
 800c952:	e03a      	b.n	800c9ca <_dtoa_r+0x6c2>
 800c954:	4ba2      	ldr	r3, [pc, #648]	; (800cbe0 <_dtoa_r+0x8d8>)
 800c956:	f7f3 fe2b 	bl	80005b0 <__aeabi_dmul>
 800c95a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c95e:	e7bc      	b.n	800c8da <_dtoa_r+0x5d2>
 800c960:	9f08      	ldr	r7, [sp, #32]
 800c962:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c966:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c96a:	f7f3 ff4b 	bl	8000804 <__aeabi_ddiv>
 800c96e:	f7f4 f8cf 	bl	8000b10 <__aeabi_d2iz>
 800c972:	4604      	mov	r4, r0
 800c974:	f7f3 fdb2 	bl	80004dc <__aeabi_i2d>
 800c978:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c97c:	f7f3 fe18 	bl	80005b0 <__aeabi_dmul>
 800c980:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800c984:	460b      	mov	r3, r1
 800c986:	4602      	mov	r2, r0
 800c988:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c98c:	f7f3 fc58 	bl	8000240 <__aeabi_dsub>
 800c990:	f807 6b01 	strb.w	r6, [r7], #1
 800c994:	9e08      	ldr	r6, [sp, #32]
 800c996:	9b02      	ldr	r3, [sp, #8]
 800c998:	1bbe      	subs	r6, r7, r6
 800c99a:	42b3      	cmp	r3, r6
 800c99c:	d13a      	bne.n	800ca14 <_dtoa_r+0x70c>
 800c99e:	4602      	mov	r2, r0
 800c9a0:	460b      	mov	r3, r1
 800c9a2:	f7f3 fc4f 	bl	8000244 <__adddf3>
 800c9a6:	4602      	mov	r2, r0
 800c9a8:	460b      	mov	r3, r1
 800c9aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c9ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c9b2:	f7f4 f88d 	bl	8000ad0 <__aeabi_dcmpgt>
 800c9b6:	bb58      	cbnz	r0, 800ca10 <_dtoa_r+0x708>
 800c9b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c9bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9c0:	f7f4 f85e 	bl	8000a80 <__aeabi_dcmpeq>
 800c9c4:	b108      	cbz	r0, 800c9ca <_dtoa_r+0x6c2>
 800c9c6:	07e1      	lsls	r1, r4, #31
 800c9c8:	d422      	bmi.n	800ca10 <_dtoa_r+0x708>
 800c9ca:	4628      	mov	r0, r5
 800c9cc:	4651      	mov	r1, sl
 800c9ce:	f000 fbef 	bl	800d1b0 <_Bfree>
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	703b      	strb	r3, [r7, #0]
 800c9d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c9d8:	f109 0001 	add.w	r0, r9, #1
 800c9dc:	6018      	str	r0, [r3, #0]
 800c9de:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	f43f acdf 	beq.w	800c3a4 <_dtoa_r+0x9c>
 800c9e6:	601f      	str	r7, [r3, #0]
 800c9e8:	e4dc      	b.n	800c3a4 <_dtoa_r+0x9c>
 800c9ea:	4627      	mov	r7, r4
 800c9ec:	463b      	mov	r3, r7
 800c9ee:	461f      	mov	r7, r3
 800c9f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c9f4:	2a39      	cmp	r2, #57	; 0x39
 800c9f6:	d107      	bne.n	800ca08 <_dtoa_r+0x700>
 800c9f8:	9a08      	ldr	r2, [sp, #32]
 800c9fa:	429a      	cmp	r2, r3
 800c9fc:	d1f7      	bne.n	800c9ee <_dtoa_r+0x6e6>
 800c9fe:	2230      	movs	r2, #48	; 0x30
 800ca00:	9908      	ldr	r1, [sp, #32]
 800ca02:	f108 0801 	add.w	r8, r8, #1
 800ca06:	700a      	strb	r2, [r1, #0]
 800ca08:	781a      	ldrb	r2, [r3, #0]
 800ca0a:	3201      	adds	r2, #1
 800ca0c:	701a      	strb	r2, [r3, #0]
 800ca0e:	e79f      	b.n	800c950 <_dtoa_r+0x648>
 800ca10:	46c8      	mov	r8, r9
 800ca12:	e7eb      	b.n	800c9ec <_dtoa_r+0x6e4>
 800ca14:	2200      	movs	r2, #0
 800ca16:	4b72      	ldr	r3, [pc, #456]	; (800cbe0 <_dtoa_r+0x8d8>)
 800ca18:	f7f3 fdca 	bl	80005b0 <__aeabi_dmul>
 800ca1c:	4602      	mov	r2, r0
 800ca1e:	460b      	mov	r3, r1
 800ca20:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ca24:	2200      	movs	r2, #0
 800ca26:	2300      	movs	r3, #0
 800ca28:	f7f4 f82a 	bl	8000a80 <__aeabi_dcmpeq>
 800ca2c:	2800      	cmp	r0, #0
 800ca2e:	d098      	beq.n	800c962 <_dtoa_r+0x65a>
 800ca30:	e7cb      	b.n	800c9ca <_dtoa_r+0x6c2>
 800ca32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ca34:	2a00      	cmp	r2, #0
 800ca36:	f000 80cd 	beq.w	800cbd4 <_dtoa_r+0x8cc>
 800ca3a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ca3c:	2a01      	cmp	r2, #1
 800ca3e:	f300 80af 	bgt.w	800cba0 <_dtoa_r+0x898>
 800ca42:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ca44:	2a00      	cmp	r2, #0
 800ca46:	f000 80a7 	beq.w	800cb98 <_dtoa_r+0x890>
 800ca4a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ca4e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ca50:	9f06      	ldr	r7, [sp, #24]
 800ca52:	9a06      	ldr	r2, [sp, #24]
 800ca54:	2101      	movs	r1, #1
 800ca56:	441a      	add	r2, r3
 800ca58:	9206      	str	r2, [sp, #24]
 800ca5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca5c:	4628      	mov	r0, r5
 800ca5e:	441a      	add	r2, r3
 800ca60:	9209      	str	r2, [sp, #36]	; 0x24
 800ca62:	f000 fc5f 	bl	800d324 <__i2b>
 800ca66:	4606      	mov	r6, r0
 800ca68:	2f00      	cmp	r7, #0
 800ca6a:	dd0c      	ble.n	800ca86 <_dtoa_r+0x77e>
 800ca6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	dd09      	ble.n	800ca86 <_dtoa_r+0x77e>
 800ca72:	42bb      	cmp	r3, r7
 800ca74:	bfa8      	it	ge
 800ca76:	463b      	movge	r3, r7
 800ca78:	9a06      	ldr	r2, [sp, #24]
 800ca7a:	1aff      	subs	r7, r7, r3
 800ca7c:	1ad2      	subs	r2, r2, r3
 800ca7e:	9206      	str	r2, [sp, #24]
 800ca80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca82:	1ad3      	subs	r3, r2, r3
 800ca84:	9309      	str	r3, [sp, #36]	; 0x24
 800ca86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca88:	b1f3      	cbz	r3, 800cac8 <_dtoa_r+0x7c0>
 800ca8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	f000 80a9 	beq.w	800cbe4 <_dtoa_r+0x8dc>
 800ca92:	2c00      	cmp	r4, #0
 800ca94:	dd10      	ble.n	800cab8 <_dtoa_r+0x7b0>
 800ca96:	4631      	mov	r1, r6
 800ca98:	4622      	mov	r2, r4
 800ca9a:	4628      	mov	r0, r5
 800ca9c:	f000 fcfc 	bl	800d498 <__pow5mult>
 800caa0:	4652      	mov	r2, sl
 800caa2:	4601      	mov	r1, r0
 800caa4:	4606      	mov	r6, r0
 800caa6:	4628      	mov	r0, r5
 800caa8:	f000 fc52 	bl	800d350 <__multiply>
 800caac:	4680      	mov	r8, r0
 800caae:	4651      	mov	r1, sl
 800cab0:	4628      	mov	r0, r5
 800cab2:	f000 fb7d 	bl	800d1b0 <_Bfree>
 800cab6:	46c2      	mov	sl, r8
 800cab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800caba:	1b1a      	subs	r2, r3, r4
 800cabc:	d004      	beq.n	800cac8 <_dtoa_r+0x7c0>
 800cabe:	4651      	mov	r1, sl
 800cac0:	4628      	mov	r0, r5
 800cac2:	f000 fce9 	bl	800d498 <__pow5mult>
 800cac6:	4682      	mov	sl, r0
 800cac8:	2101      	movs	r1, #1
 800caca:	4628      	mov	r0, r5
 800cacc:	f000 fc2a 	bl	800d324 <__i2b>
 800cad0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cad2:	4604      	mov	r4, r0
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	f340 8087 	ble.w	800cbe8 <_dtoa_r+0x8e0>
 800cada:	461a      	mov	r2, r3
 800cadc:	4601      	mov	r1, r0
 800cade:	4628      	mov	r0, r5
 800cae0:	f000 fcda 	bl	800d498 <__pow5mult>
 800cae4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cae6:	4604      	mov	r4, r0
 800cae8:	2b01      	cmp	r3, #1
 800caea:	f340 8080 	ble.w	800cbee <_dtoa_r+0x8e6>
 800caee:	f04f 0800 	mov.w	r8, #0
 800caf2:	6923      	ldr	r3, [r4, #16]
 800caf4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800caf8:	6918      	ldr	r0, [r3, #16]
 800cafa:	f000 fbc5 	bl	800d288 <__hi0bits>
 800cafe:	f1c0 0020 	rsb	r0, r0, #32
 800cb02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb04:	4418      	add	r0, r3
 800cb06:	f010 001f 	ands.w	r0, r0, #31
 800cb0a:	f000 8092 	beq.w	800cc32 <_dtoa_r+0x92a>
 800cb0e:	f1c0 0320 	rsb	r3, r0, #32
 800cb12:	2b04      	cmp	r3, #4
 800cb14:	f340 808a 	ble.w	800cc2c <_dtoa_r+0x924>
 800cb18:	f1c0 001c 	rsb	r0, r0, #28
 800cb1c:	9b06      	ldr	r3, [sp, #24]
 800cb1e:	4407      	add	r7, r0
 800cb20:	4403      	add	r3, r0
 800cb22:	9306      	str	r3, [sp, #24]
 800cb24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb26:	4403      	add	r3, r0
 800cb28:	9309      	str	r3, [sp, #36]	; 0x24
 800cb2a:	9b06      	ldr	r3, [sp, #24]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	dd05      	ble.n	800cb3c <_dtoa_r+0x834>
 800cb30:	4651      	mov	r1, sl
 800cb32:	461a      	mov	r2, r3
 800cb34:	4628      	mov	r0, r5
 800cb36:	f000 fd09 	bl	800d54c <__lshift>
 800cb3a:	4682      	mov	sl, r0
 800cb3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	dd05      	ble.n	800cb4e <_dtoa_r+0x846>
 800cb42:	4621      	mov	r1, r4
 800cb44:	461a      	mov	r2, r3
 800cb46:	4628      	mov	r0, r5
 800cb48:	f000 fd00 	bl	800d54c <__lshift>
 800cb4c:	4604      	mov	r4, r0
 800cb4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d070      	beq.n	800cc36 <_dtoa_r+0x92e>
 800cb54:	4621      	mov	r1, r4
 800cb56:	4650      	mov	r0, sl
 800cb58:	f000 fd64 	bl	800d624 <__mcmp>
 800cb5c:	2800      	cmp	r0, #0
 800cb5e:	da6a      	bge.n	800cc36 <_dtoa_r+0x92e>
 800cb60:	2300      	movs	r3, #0
 800cb62:	4651      	mov	r1, sl
 800cb64:	220a      	movs	r2, #10
 800cb66:	4628      	mov	r0, r5
 800cb68:	f000 fb44 	bl	800d1f4 <__multadd>
 800cb6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb6e:	4682      	mov	sl, r0
 800cb70:	f109 39ff 	add.w	r9, r9, #4294967295
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	f000 8193 	beq.w	800cea0 <_dtoa_r+0xb98>
 800cb7a:	4631      	mov	r1, r6
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	220a      	movs	r2, #10
 800cb80:	4628      	mov	r0, r5
 800cb82:	f000 fb37 	bl	800d1f4 <__multadd>
 800cb86:	f1bb 0f00 	cmp.w	fp, #0
 800cb8a:	4606      	mov	r6, r0
 800cb8c:	f300 8093 	bgt.w	800ccb6 <_dtoa_r+0x9ae>
 800cb90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cb92:	2b02      	cmp	r3, #2
 800cb94:	dc57      	bgt.n	800cc46 <_dtoa_r+0x93e>
 800cb96:	e08e      	b.n	800ccb6 <_dtoa_r+0x9ae>
 800cb98:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cb9a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cb9e:	e756      	b.n	800ca4e <_dtoa_r+0x746>
 800cba0:	9b02      	ldr	r3, [sp, #8]
 800cba2:	1e5c      	subs	r4, r3, #1
 800cba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cba6:	42a3      	cmp	r3, r4
 800cba8:	bfb7      	itett	lt
 800cbaa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cbac:	1b1c      	subge	r4, r3, r4
 800cbae:	1ae2      	sublt	r2, r4, r3
 800cbb0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800cbb2:	bfbe      	ittt	lt
 800cbb4:	940a      	strlt	r4, [sp, #40]	; 0x28
 800cbb6:	189b      	addlt	r3, r3, r2
 800cbb8:	930e      	strlt	r3, [sp, #56]	; 0x38
 800cbba:	9b02      	ldr	r3, [sp, #8]
 800cbbc:	bfb8      	it	lt
 800cbbe:	2400      	movlt	r4, #0
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	bfbb      	ittet	lt
 800cbc4:	9b06      	ldrlt	r3, [sp, #24]
 800cbc6:	9a02      	ldrlt	r2, [sp, #8]
 800cbc8:	9f06      	ldrge	r7, [sp, #24]
 800cbca:	1a9f      	sublt	r7, r3, r2
 800cbcc:	bfac      	ite	ge
 800cbce:	9b02      	ldrge	r3, [sp, #8]
 800cbd0:	2300      	movlt	r3, #0
 800cbd2:	e73e      	b.n	800ca52 <_dtoa_r+0x74a>
 800cbd4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800cbd6:	9f06      	ldr	r7, [sp, #24]
 800cbd8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800cbda:	e745      	b.n	800ca68 <_dtoa_r+0x760>
 800cbdc:	3fe00000 	.word	0x3fe00000
 800cbe0:	40240000 	.word	0x40240000
 800cbe4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cbe6:	e76a      	b.n	800cabe <_dtoa_r+0x7b6>
 800cbe8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cbea:	2b01      	cmp	r3, #1
 800cbec:	dc19      	bgt.n	800cc22 <_dtoa_r+0x91a>
 800cbee:	9b04      	ldr	r3, [sp, #16]
 800cbf0:	b9bb      	cbnz	r3, 800cc22 <_dtoa_r+0x91a>
 800cbf2:	9b05      	ldr	r3, [sp, #20]
 800cbf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cbf8:	b99b      	cbnz	r3, 800cc22 <_dtoa_r+0x91a>
 800cbfa:	9b05      	ldr	r3, [sp, #20]
 800cbfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cc00:	0d1b      	lsrs	r3, r3, #20
 800cc02:	051b      	lsls	r3, r3, #20
 800cc04:	b183      	cbz	r3, 800cc28 <_dtoa_r+0x920>
 800cc06:	f04f 0801 	mov.w	r8, #1
 800cc0a:	9b06      	ldr	r3, [sp, #24]
 800cc0c:	3301      	adds	r3, #1
 800cc0e:	9306      	str	r3, [sp, #24]
 800cc10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc12:	3301      	adds	r3, #1
 800cc14:	9309      	str	r3, [sp, #36]	; 0x24
 800cc16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	f47f af6a 	bne.w	800caf2 <_dtoa_r+0x7ea>
 800cc1e:	2001      	movs	r0, #1
 800cc20:	e76f      	b.n	800cb02 <_dtoa_r+0x7fa>
 800cc22:	f04f 0800 	mov.w	r8, #0
 800cc26:	e7f6      	b.n	800cc16 <_dtoa_r+0x90e>
 800cc28:	4698      	mov	r8, r3
 800cc2a:	e7f4      	b.n	800cc16 <_dtoa_r+0x90e>
 800cc2c:	f43f af7d 	beq.w	800cb2a <_dtoa_r+0x822>
 800cc30:	4618      	mov	r0, r3
 800cc32:	301c      	adds	r0, #28
 800cc34:	e772      	b.n	800cb1c <_dtoa_r+0x814>
 800cc36:	9b02      	ldr	r3, [sp, #8]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	dc36      	bgt.n	800ccaa <_dtoa_r+0x9a2>
 800cc3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cc3e:	2b02      	cmp	r3, #2
 800cc40:	dd33      	ble.n	800ccaa <_dtoa_r+0x9a2>
 800cc42:	f8dd b008 	ldr.w	fp, [sp, #8]
 800cc46:	f1bb 0f00 	cmp.w	fp, #0
 800cc4a:	d10d      	bne.n	800cc68 <_dtoa_r+0x960>
 800cc4c:	4621      	mov	r1, r4
 800cc4e:	465b      	mov	r3, fp
 800cc50:	2205      	movs	r2, #5
 800cc52:	4628      	mov	r0, r5
 800cc54:	f000 face 	bl	800d1f4 <__multadd>
 800cc58:	4601      	mov	r1, r0
 800cc5a:	4604      	mov	r4, r0
 800cc5c:	4650      	mov	r0, sl
 800cc5e:	f000 fce1 	bl	800d624 <__mcmp>
 800cc62:	2800      	cmp	r0, #0
 800cc64:	f73f adb6 	bgt.w	800c7d4 <_dtoa_r+0x4cc>
 800cc68:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800cc6a:	9f08      	ldr	r7, [sp, #32]
 800cc6c:	ea6f 0903 	mvn.w	r9, r3
 800cc70:	f04f 0800 	mov.w	r8, #0
 800cc74:	4621      	mov	r1, r4
 800cc76:	4628      	mov	r0, r5
 800cc78:	f000 fa9a 	bl	800d1b0 <_Bfree>
 800cc7c:	2e00      	cmp	r6, #0
 800cc7e:	f43f aea4 	beq.w	800c9ca <_dtoa_r+0x6c2>
 800cc82:	f1b8 0f00 	cmp.w	r8, #0
 800cc86:	d005      	beq.n	800cc94 <_dtoa_r+0x98c>
 800cc88:	45b0      	cmp	r8, r6
 800cc8a:	d003      	beq.n	800cc94 <_dtoa_r+0x98c>
 800cc8c:	4641      	mov	r1, r8
 800cc8e:	4628      	mov	r0, r5
 800cc90:	f000 fa8e 	bl	800d1b0 <_Bfree>
 800cc94:	4631      	mov	r1, r6
 800cc96:	4628      	mov	r0, r5
 800cc98:	f000 fa8a 	bl	800d1b0 <_Bfree>
 800cc9c:	e695      	b.n	800c9ca <_dtoa_r+0x6c2>
 800cc9e:	2400      	movs	r4, #0
 800cca0:	4626      	mov	r6, r4
 800cca2:	e7e1      	b.n	800cc68 <_dtoa_r+0x960>
 800cca4:	46c1      	mov	r9, r8
 800cca6:	4626      	mov	r6, r4
 800cca8:	e594      	b.n	800c7d4 <_dtoa_r+0x4cc>
 800ccaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ccac:	f8dd b008 	ldr.w	fp, [sp, #8]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	f000 80fc 	beq.w	800ceae <_dtoa_r+0xba6>
 800ccb6:	2f00      	cmp	r7, #0
 800ccb8:	dd05      	ble.n	800ccc6 <_dtoa_r+0x9be>
 800ccba:	4631      	mov	r1, r6
 800ccbc:	463a      	mov	r2, r7
 800ccbe:	4628      	mov	r0, r5
 800ccc0:	f000 fc44 	bl	800d54c <__lshift>
 800ccc4:	4606      	mov	r6, r0
 800ccc6:	f1b8 0f00 	cmp.w	r8, #0
 800ccca:	d05c      	beq.n	800cd86 <_dtoa_r+0xa7e>
 800cccc:	4628      	mov	r0, r5
 800ccce:	6871      	ldr	r1, [r6, #4]
 800ccd0:	f000 fa2e 	bl	800d130 <_Balloc>
 800ccd4:	4607      	mov	r7, r0
 800ccd6:	b928      	cbnz	r0, 800cce4 <_dtoa_r+0x9dc>
 800ccd8:	4602      	mov	r2, r0
 800ccda:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ccde:	4b7e      	ldr	r3, [pc, #504]	; (800ced8 <_dtoa_r+0xbd0>)
 800cce0:	f7ff bb26 	b.w	800c330 <_dtoa_r+0x28>
 800cce4:	6932      	ldr	r2, [r6, #16]
 800cce6:	f106 010c 	add.w	r1, r6, #12
 800ccea:	3202      	adds	r2, #2
 800ccec:	0092      	lsls	r2, r2, #2
 800ccee:	300c      	adds	r0, #12
 800ccf0:	f000 fa03 	bl	800d0fa <memcpy>
 800ccf4:	2201      	movs	r2, #1
 800ccf6:	4639      	mov	r1, r7
 800ccf8:	4628      	mov	r0, r5
 800ccfa:	f000 fc27 	bl	800d54c <__lshift>
 800ccfe:	46b0      	mov	r8, r6
 800cd00:	4606      	mov	r6, r0
 800cd02:	9b08      	ldr	r3, [sp, #32]
 800cd04:	3301      	adds	r3, #1
 800cd06:	9302      	str	r3, [sp, #8]
 800cd08:	9b08      	ldr	r3, [sp, #32]
 800cd0a:	445b      	add	r3, fp
 800cd0c:	930a      	str	r3, [sp, #40]	; 0x28
 800cd0e:	9b04      	ldr	r3, [sp, #16]
 800cd10:	f003 0301 	and.w	r3, r3, #1
 800cd14:	9309      	str	r3, [sp, #36]	; 0x24
 800cd16:	9b02      	ldr	r3, [sp, #8]
 800cd18:	4621      	mov	r1, r4
 800cd1a:	4650      	mov	r0, sl
 800cd1c:	f103 3bff 	add.w	fp, r3, #4294967295
 800cd20:	f7ff fa62 	bl	800c1e8 <quorem>
 800cd24:	4603      	mov	r3, r0
 800cd26:	4641      	mov	r1, r8
 800cd28:	3330      	adds	r3, #48	; 0x30
 800cd2a:	9004      	str	r0, [sp, #16]
 800cd2c:	4650      	mov	r0, sl
 800cd2e:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd30:	f000 fc78 	bl	800d624 <__mcmp>
 800cd34:	4632      	mov	r2, r6
 800cd36:	9006      	str	r0, [sp, #24]
 800cd38:	4621      	mov	r1, r4
 800cd3a:	4628      	mov	r0, r5
 800cd3c:	f000 fc8e 	bl	800d65c <__mdiff>
 800cd40:	68c2      	ldr	r2, [r0, #12]
 800cd42:	4607      	mov	r7, r0
 800cd44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd46:	bb02      	cbnz	r2, 800cd8a <_dtoa_r+0xa82>
 800cd48:	4601      	mov	r1, r0
 800cd4a:	4650      	mov	r0, sl
 800cd4c:	f000 fc6a 	bl	800d624 <__mcmp>
 800cd50:	4602      	mov	r2, r0
 800cd52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd54:	4639      	mov	r1, r7
 800cd56:	4628      	mov	r0, r5
 800cd58:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800cd5c:	f000 fa28 	bl	800d1b0 <_Bfree>
 800cd60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cd62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd64:	9f02      	ldr	r7, [sp, #8]
 800cd66:	ea43 0102 	orr.w	r1, r3, r2
 800cd6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd6c:	430b      	orrs	r3, r1
 800cd6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd70:	d10d      	bne.n	800cd8e <_dtoa_r+0xa86>
 800cd72:	2b39      	cmp	r3, #57	; 0x39
 800cd74:	d027      	beq.n	800cdc6 <_dtoa_r+0xabe>
 800cd76:	9a06      	ldr	r2, [sp, #24]
 800cd78:	2a00      	cmp	r2, #0
 800cd7a:	dd01      	ble.n	800cd80 <_dtoa_r+0xa78>
 800cd7c:	9b04      	ldr	r3, [sp, #16]
 800cd7e:	3331      	adds	r3, #49	; 0x31
 800cd80:	f88b 3000 	strb.w	r3, [fp]
 800cd84:	e776      	b.n	800cc74 <_dtoa_r+0x96c>
 800cd86:	4630      	mov	r0, r6
 800cd88:	e7b9      	b.n	800ccfe <_dtoa_r+0x9f6>
 800cd8a:	2201      	movs	r2, #1
 800cd8c:	e7e2      	b.n	800cd54 <_dtoa_r+0xa4c>
 800cd8e:	9906      	ldr	r1, [sp, #24]
 800cd90:	2900      	cmp	r1, #0
 800cd92:	db04      	blt.n	800cd9e <_dtoa_r+0xa96>
 800cd94:	9822      	ldr	r0, [sp, #136]	; 0x88
 800cd96:	4301      	orrs	r1, r0
 800cd98:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd9a:	4301      	orrs	r1, r0
 800cd9c:	d120      	bne.n	800cde0 <_dtoa_r+0xad8>
 800cd9e:	2a00      	cmp	r2, #0
 800cda0:	ddee      	ble.n	800cd80 <_dtoa_r+0xa78>
 800cda2:	4651      	mov	r1, sl
 800cda4:	2201      	movs	r2, #1
 800cda6:	4628      	mov	r0, r5
 800cda8:	9302      	str	r3, [sp, #8]
 800cdaa:	f000 fbcf 	bl	800d54c <__lshift>
 800cdae:	4621      	mov	r1, r4
 800cdb0:	4682      	mov	sl, r0
 800cdb2:	f000 fc37 	bl	800d624 <__mcmp>
 800cdb6:	2800      	cmp	r0, #0
 800cdb8:	9b02      	ldr	r3, [sp, #8]
 800cdba:	dc02      	bgt.n	800cdc2 <_dtoa_r+0xaba>
 800cdbc:	d1e0      	bne.n	800cd80 <_dtoa_r+0xa78>
 800cdbe:	07da      	lsls	r2, r3, #31
 800cdc0:	d5de      	bpl.n	800cd80 <_dtoa_r+0xa78>
 800cdc2:	2b39      	cmp	r3, #57	; 0x39
 800cdc4:	d1da      	bne.n	800cd7c <_dtoa_r+0xa74>
 800cdc6:	2339      	movs	r3, #57	; 0x39
 800cdc8:	f88b 3000 	strb.w	r3, [fp]
 800cdcc:	463b      	mov	r3, r7
 800cdce:	461f      	mov	r7, r3
 800cdd0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800cdd4:	3b01      	subs	r3, #1
 800cdd6:	2a39      	cmp	r2, #57	; 0x39
 800cdd8:	d050      	beq.n	800ce7c <_dtoa_r+0xb74>
 800cdda:	3201      	adds	r2, #1
 800cddc:	701a      	strb	r2, [r3, #0]
 800cdde:	e749      	b.n	800cc74 <_dtoa_r+0x96c>
 800cde0:	2a00      	cmp	r2, #0
 800cde2:	dd03      	ble.n	800cdec <_dtoa_r+0xae4>
 800cde4:	2b39      	cmp	r3, #57	; 0x39
 800cde6:	d0ee      	beq.n	800cdc6 <_dtoa_r+0xabe>
 800cde8:	3301      	adds	r3, #1
 800cdea:	e7c9      	b.n	800cd80 <_dtoa_r+0xa78>
 800cdec:	9a02      	ldr	r2, [sp, #8]
 800cdee:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cdf0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800cdf4:	428a      	cmp	r2, r1
 800cdf6:	d02a      	beq.n	800ce4e <_dtoa_r+0xb46>
 800cdf8:	4651      	mov	r1, sl
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	220a      	movs	r2, #10
 800cdfe:	4628      	mov	r0, r5
 800ce00:	f000 f9f8 	bl	800d1f4 <__multadd>
 800ce04:	45b0      	cmp	r8, r6
 800ce06:	4682      	mov	sl, r0
 800ce08:	f04f 0300 	mov.w	r3, #0
 800ce0c:	f04f 020a 	mov.w	r2, #10
 800ce10:	4641      	mov	r1, r8
 800ce12:	4628      	mov	r0, r5
 800ce14:	d107      	bne.n	800ce26 <_dtoa_r+0xb1e>
 800ce16:	f000 f9ed 	bl	800d1f4 <__multadd>
 800ce1a:	4680      	mov	r8, r0
 800ce1c:	4606      	mov	r6, r0
 800ce1e:	9b02      	ldr	r3, [sp, #8]
 800ce20:	3301      	adds	r3, #1
 800ce22:	9302      	str	r3, [sp, #8]
 800ce24:	e777      	b.n	800cd16 <_dtoa_r+0xa0e>
 800ce26:	f000 f9e5 	bl	800d1f4 <__multadd>
 800ce2a:	4631      	mov	r1, r6
 800ce2c:	4680      	mov	r8, r0
 800ce2e:	2300      	movs	r3, #0
 800ce30:	220a      	movs	r2, #10
 800ce32:	4628      	mov	r0, r5
 800ce34:	f000 f9de 	bl	800d1f4 <__multadd>
 800ce38:	4606      	mov	r6, r0
 800ce3a:	e7f0      	b.n	800ce1e <_dtoa_r+0xb16>
 800ce3c:	f1bb 0f00 	cmp.w	fp, #0
 800ce40:	bfcc      	ite	gt
 800ce42:	465f      	movgt	r7, fp
 800ce44:	2701      	movle	r7, #1
 800ce46:	f04f 0800 	mov.w	r8, #0
 800ce4a:	9a08      	ldr	r2, [sp, #32]
 800ce4c:	4417      	add	r7, r2
 800ce4e:	4651      	mov	r1, sl
 800ce50:	2201      	movs	r2, #1
 800ce52:	4628      	mov	r0, r5
 800ce54:	9302      	str	r3, [sp, #8]
 800ce56:	f000 fb79 	bl	800d54c <__lshift>
 800ce5a:	4621      	mov	r1, r4
 800ce5c:	4682      	mov	sl, r0
 800ce5e:	f000 fbe1 	bl	800d624 <__mcmp>
 800ce62:	2800      	cmp	r0, #0
 800ce64:	dcb2      	bgt.n	800cdcc <_dtoa_r+0xac4>
 800ce66:	d102      	bne.n	800ce6e <_dtoa_r+0xb66>
 800ce68:	9b02      	ldr	r3, [sp, #8]
 800ce6a:	07db      	lsls	r3, r3, #31
 800ce6c:	d4ae      	bmi.n	800cdcc <_dtoa_r+0xac4>
 800ce6e:	463b      	mov	r3, r7
 800ce70:	461f      	mov	r7, r3
 800ce72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ce76:	2a30      	cmp	r2, #48	; 0x30
 800ce78:	d0fa      	beq.n	800ce70 <_dtoa_r+0xb68>
 800ce7a:	e6fb      	b.n	800cc74 <_dtoa_r+0x96c>
 800ce7c:	9a08      	ldr	r2, [sp, #32]
 800ce7e:	429a      	cmp	r2, r3
 800ce80:	d1a5      	bne.n	800cdce <_dtoa_r+0xac6>
 800ce82:	2331      	movs	r3, #49	; 0x31
 800ce84:	f109 0901 	add.w	r9, r9, #1
 800ce88:	7013      	strb	r3, [r2, #0]
 800ce8a:	e6f3      	b.n	800cc74 <_dtoa_r+0x96c>
 800ce8c:	4b13      	ldr	r3, [pc, #76]	; (800cedc <_dtoa_r+0xbd4>)
 800ce8e:	f7ff baa7 	b.w	800c3e0 <_dtoa_r+0xd8>
 800ce92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	f47f aa80 	bne.w	800c39a <_dtoa_r+0x92>
 800ce9a:	4b11      	ldr	r3, [pc, #68]	; (800cee0 <_dtoa_r+0xbd8>)
 800ce9c:	f7ff baa0 	b.w	800c3e0 <_dtoa_r+0xd8>
 800cea0:	f1bb 0f00 	cmp.w	fp, #0
 800cea4:	dc03      	bgt.n	800ceae <_dtoa_r+0xba6>
 800cea6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cea8:	2b02      	cmp	r3, #2
 800ceaa:	f73f aecc 	bgt.w	800cc46 <_dtoa_r+0x93e>
 800ceae:	9f08      	ldr	r7, [sp, #32]
 800ceb0:	4621      	mov	r1, r4
 800ceb2:	4650      	mov	r0, sl
 800ceb4:	f7ff f998 	bl	800c1e8 <quorem>
 800ceb8:	9a08      	ldr	r2, [sp, #32]
 800ceba:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800cebe:	f807 3b01 	strb.w	r3, [r7], #1
 800cec2:	1aba      	subs	r2, r7, r2
 800cec4:	4593      	cmp	fp, r2
 800cec6:	ddb9      	ble.n	800ce3c <_dtoa_r+0xb34>
 800cec8:	4651      	mov	r1, sl
 800ceca:	2300      	movs	r3, #0
 800cecc:	220a      	movs	r2, #10
 800cece:	4628      	mov	r0, r5
 800ced0:	f000 f990 	bl	800d1f4 <__multadd>
 800ced4:	4682      	mov	sl, r0
 800ced6:	e7eb      	b.n	800ceb0 <_dtoa_r+0xba8>
 800ced8:	0800f714 	.word	0x0800f714
 800cedc:	0800f56c 	.word	0x0800f56c
 800cee0:	0800f691 	.word	0x0800f691

0800cee4 <std>:
 800cee4:	2300      	movs	r3, #0
 800cee6:	b510      	push	{r4, lr}
 800cee8:	4604      	mov	r4, r0
 800ceea:	e9c0 3300 	strd	r3, r3, [r0]
 800ceee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cef2:	6083      	str	r3, [r0, #8]
 800cef4:	8181      	strh	r1, [r0, #12]
 800cef6:	6643      	str	r3, [r0, #100]	; 0x64
 800cef8:	81c2      	strh	r2, [r0, #14]
 800cefa:	6183      	str	r3, [r0, #24]
 800cefc:	4619      	mov	r1, r3
 800cefe:	2208      	movs	r2, #8
 800cf00:	305c      	adds	r0, #92	; 0x5c
 800cf02:	f7fe fb31 	bl	800b568 <memset>
 800cf06:	4b05      	ldr	r3, [pc, #20]	; (800cf1c <std+0x38>)
 800cf08:	6224      	str	r4, [r4, #32]
 800cf0a:	6263      	str	r3, [r4, #36]	; 0x24
 800cf0c:	4b04      	ldr	r3, [pc, #16]	; (800cf20 <std+0x3c>)
 800cf0e:	62a3      	str	r3, [r4, #40]	; 0x28
 800cf10:	4b04      	ldr	r3, [pc, #16]	; (800cf24 <std+0x40>)
 800cf12:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cf14:	4b04      	ldr	r3, [pc, #16]	; (800cf28 <std+0x44>)
 800cf16:	6323      	str	r3, [r4, #48]	; 0x30
 800cf18:	bd10      	pop	{r4, pc}
 800cf1a:	bf00      	nop
 800cf1c:	0800ddb9 	.word	0x0800ddb9
 800cf20:	0800dddb 	.word	0x0800dddb
 800cf24:	0800de13 	.word	0x0800de13
 800cf28:	0800de37 	.word	0x0800de37

0800cf2c <_cleanup_r>:
 800cf2c:	4901      	ldr	r1, [pc, #4]	; (800cf34 <_cleanup_r+0x8>)
 800cf2e:	f000 b8af 	b.w	800d090 <_fwalk_reent>
 800cf32:	bf00      	nop
 800cf34:	0800e14d 	.word	0x0800e14d

0800cf38 <__sfmoreglue>:
 800cf38:	b570      	push	{r4, r5, r6, lr}
 800cf3a:	2568      	movs	r5, #104	; 0x68
 800cf3c:	1e4a      	subs	r2, r1, #1
 800cf3e:	4355      	muls	r5, r2
 800cf40:	460e      	mov	r6, r1
 800cf42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cf46:	f7fe fb63 	bl	800b610 <_malloc_r>
 800cf4a:	4604      	mov	r4, r0
 800cf4c:	b140      	cbz	r0, 800cf60 <__sfmoreglue+0x28>
 800cf4e:	2100      	movs	r1, #0
 800cf50:	e9c0 1600 	strd	r1, r6, [r0]
 800cf54:	300c      	adds	r0, #12
 800cf56:	60a0      	str	r0, [r4, #8]
 800cf58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cf5c:	f7fe fb04 	bl	800b568 <memset>
 800cf60:	4620      	mov	r0, r4
 800cf62:	bd70      	pop	{r4, r5, r6, pc}

0800cf64 <__sfp_lock_acquire>:
 800cf64:	4801      	ldr	r0, [pc, #4]	; (800cf6c <__sfp_lock_acquire+0x8>)
 800cf66:	f000 b8b8 	b.w	800d0da <__retarget_lock_acquire_recursive>
 800cf6a:	bf00      	nop
 800cf6c:	20000bb4 	.word	0x20000bb4

0800cf70 <__sfp_lock_release>:
 800cf70:	4801      	ldr	r0, [pc, #4]	; (800cf78 <__sfp_lock_release+0x8>)
 800cf72:	f000 b8b3 	b.w	800d0dc <__retarget_lock_release_recursive>
 800cf76:	bf00      	nop
 800cf78:	20000bb4 	.word	0x20000bb4

0800cf7c <__sinit_lock_acquire>:
 800cf7c:	4801      	ldr	r0, [pc, #4]	; (800cf84 <__sinit_lock_acquire+0x8>)
 800cf7e:	f000 b8ac 	b.w	800d0da <__retarget_lock_acquire_recursive>
 800cf82:	bf00      	nop
 800cf84:	20000baf 	.word	0x20000baf

0800cf88 <__sinit_lock_release>:
 800cf88:	4801      	ldr	r0, [pc, #4]	; (800cf90 <__sinit_lock_release+0x8>)
 800cf8a:	f000 b8a7 	b.w	800d0dc <__retarget_lock_release_recursive>
 800cf8e:	bf00      	nop
 800cf90:	20000baf 	.word	0x20000baf

0800cf94 <__sinit>:
 800cf94:	b510      	push	{r4, lr}
 800cf96:	4604      	mov	r4, r0
 800cf98:	f7ff fff0 	bl	800cf7c <__sinit_lock_acquire>
 800cf9c:	69a3      	ldr	r3, [r4, #24]
 800cf9e:	b11b      	cbz	r3, 800cfa8 <__sinit+0x14>
 800cfa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfa4:	f7ff bff0 	b.w	800cf88 <__sinit_lock_release>
 800cfa8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cfac:	6523      	str	r3, [r4, #80]	; 0x50
 800cfae:	4b13      	ldr	r3, [pc, #76]	; (800cffc <__sinit+0x68>)
 800cfb0:	4a13      	ldr	r2, [pc, #76]	; (800d000 <__sinit+0x6c>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	62a2      	str	r2, [r4, #40]	; 0x28
 800cfb6:	42a3      	cmp	r3, r4
 800cfb8:	bf08      	it	eq
 800cfba:	2301      	moveq	r3, #1
 800cfbc:	4620      	mov	r0, r4
 800cfbe:	bf08      	it	eq
 800cfc0:	61a3      	streq	r3, [r4, #24]
 800cfc2:	f000 f81f 	bl	800d004 <__sfp>
 800cfc6:	6060      	str	r0, [r4, #4]
 800cfc8:	4620      	mov	r0, r4
 800cfca:	f000 f81b 	bl	800d004 <__sfp>
 800cfce:	60a0      	str	r0, [r4, #8]
 800cfd0:	4620      	mov	r0, r4
 800cfd2:	f000 f817 	bl	800d004 <__sfp>
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	2104      	movs	r1, #4
 800cfda:	60e0      	str	r0, [r4, #12]
 800cfdc:	6860      	ldr	r0, [r4, #4]
 800cfde:	f7ff ff81 	bl	800cee4 <std>
 800cfe2:	2201      	movs	r2, #1
 800cfe4:	2109      	movs	r1, #9
 800cfe6:	68a0      	ldr	r0, [r4, #8]
 800cfe8:	f7ff ff7c 	bl	800cee4 <std>
 800cfec:	2202      	movs	r2, #2
 800cfee:	2112      	movs	r1, #18
 800cff0:	68e0      	ldr	r0, [r4, #12]
 800cff2:	f7ff ff77 	bl	800cee4 <std>
 800cff6:	2301      	movs	r3, #1
 800cff8:	61a3      	str	r3, [r4, #24]
 800cffa:	e7d1      	b.n	800cfa0 <__sinit+0xc>
 800cffc:	0800f558 	.word	0x0800f558
 800d000:	0800cf2d 	.word	0x0800cf2d

0800d004 <__sfp>:
 800d004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d006:	4607      	mov	r7, r0
 800d008:	f7ff ffac 	bl	800cf64 <__sfp_lock_acquire>
 800d00c:	4b1e      	ldr	r3, [pc, #120]	; (800d088 <__sfp+0x84>)
 800d00e:	681e      	ldr	r6, [r3, #0]
 800d010:	69b3      	ldr	r3, [r6, #24]
 800d012:	b913      	cbnz	r3, 800d01a <__sfp+0x16>
 800d014:	4630      	mov	r0, r6
 800d016:	f7ff ffbd 	bl	800cf94 <__sinit>
 800d01a:	3648      	adds	r6, #72	; 0x48
 800d01c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d020:	3b01      	subs	r3, #1
 800d022:	d503      	bpl.n	800d02c <__sfp+0x28>
 800d024:	6833      	ldr	r3, [r6, #0]
 800d026:	b30b      	cbz	r3, 800d06c <__sfp+0x68>
 800d028:	6836      	ldr	r6, [r6, #0]
 800d02a:	e7f7      	b.n	800d01c <__sfp+0x18>
 800d02c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d030:	b9d5      	cbnz	r5, 800d068 <__sfp+0x64>
 800d032:	4b16      	ldr	r3, [pc, #88]	; (800d08c <__sfp+0x88>)
 800d034:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d038:	60e3      	str	r3, [r4, #12]
 800d03a:	6665      	str	r5, [r4, #100]	; 0x64
 800d03c:	f000 f84c 	bl	800d0d8 <__retarget_lock_init_recursive>
 800d040:	f7ff ff96 	bl	800cf70 <__sfp_lock_release>
 800d044:	2208      	movs	r2, #8
 800d046:	4629      	mov	r1, r5
 800d048:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d04c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d050:	6025      	str	r5, [r4, #0]
 800d052:	61a5      	str	r5, [r4, #24]
 800d054:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d058:	f7fe fa86 	bl	800b568 <memset>
 800d05c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d060:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d064:	4620      	mov	r0, r4
 800d066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d068:	3468      	adds	r4, #104	; 0x68
 800d06a:	e7d9      	b.n	800d020 <__sfp+0x1c>
 800d06c:	2104      	movs	r1, #4
 800d06e:	4638      	mov	r0, r7
 800d070:	f7ff ff62 	bl	800cf38 <__sfmoreglue>
 800d074:	4604      	mov	r4, r0
 800d076:	6030      	str	r0, [r6, #0]
 800d078:	2800      	cmp	r0, #0
 800d07a:	d1d5      	bne.n	800d028 <__sfp+0x24>
 800d07c:	f7ff ff78 	bl	800cf70 <__sfp_lock_release>
 800d080:	230c      	movs	r3, #12
 800d082:	603b      	str	r3, [r7, #0]
 800d084:	e7ee      	b.n	800d064 <__sfp+0x60>
 800d086:	bf00      	nop
 800d088:	0800f558 	.word	0x0800f558
 800d08c:	ffff0001 	.word	0xffff0001

0800d090 <_fwalk_reent>:
 800d090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d094:	4606      	mov	r6, r0
 800d096:	4688      	mov	r8, r1
 800d098:	2700      	movs	r7, #0
 800d09a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d09e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d0a2:	f1b9 0901 	subs.w	r9, r9, #1
 800d0a6:	d505      	bpl.n	800d0b4 <_fwalk_reent+0x24>
 800d0a8:	6824      	ldr	r4, [r4, #0]
 800d0aa:	2c00      	cmp	r4, #0
 800d0ac:	d1f7      	bne.n	800d09e <_fwalk_reent+0xe>
 800d0ae:	4638      	mov	r0, r7
 800d0b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0b4:	89ab      	ldrh	r3, [r5, #12]
 800d0b6:	2b01      	cmp	r3, #1
 800d0b8:	d907      	bls.n	800d0ca <_fwalk_reent+0x3a>
 800d0ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d0be:	3301      	adds	r3, #1
 800d0c0:	d003      	beq.n	800d0ca <_fwalk_reent+0x3a>
 800d0c2:	4629      	mov	r1, r5
 800d0c4:	4630      	mov	r0, r6
 800d0c6:	47c0      	blx	r8
 800d0c8:	4307      	orrs	r7, r0
 800d0ca:	3568      	adds	r5, #104	; 0x68
 800d0cc:	e7e9      	b.n	800d0a2 <_fwalk_reent+0x12>
	...

0800d0d0 <_localeconv_r>:
 800d0d0:	4800      	ldr	r0, [pc, #0]	; (800d0d4 <_localeconv_r+0x4>)
 800d0d2:	4770      	bx	lr
 800d0d4:	20000170 	.word	0x20000170

0800d0d8 <__retarget_lock_init_recursive>:
 800d0d8:	4770      	bx	lr

0800d0da <__retarget_lock_acquire_recursive>:
 800d0da:	4770      	bx	lr

0800d0dc <__retarget_lock_release_recursive>:
 800d0dc:	4770      	bx	lr

0800d0de <memchr>:
 800d0de:	4603      	mov	r3, r0
 800d0e0:	b510      	push	{r4, lr}
 800d0e2:	b2c9      	uxtb	r1, r1
 800d0e4:	4402      	add	r2, r0
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	d101      	bne.n	800d0f0 <memchr+0x12>
 800d0ec:	2000      	movs	r0, #0
 800d0ee:	e003      	b.n	800d0f8 <memchr+0x1a>
 800d0f0:	7804      	ldrb	r4, [r0, #0]
 800d0f2:	3301      	adds	r3, #1
 800d0f4:	428c      	cmp	r4, r1
 800d0f6:	d1f6      	bne.n	800d0e6 <memchr+0x8>
 800d0f8:	bd10      	pop	{r4, pc}

0800d0fa <memcpy>:
 800d0fa:	440a      	add	r2, r1
 800d0fc:	4291      	cmp	r1, r2
 800d0fe:	f100 33ff 	add.w	r3, r0, #4294967295
 800d102:	d100      	bne.n	800d106 <memcpy+0xc>
 800d104:	4770      	bx	lr
 800d106:	b510      	push	{r4, lr}
 800d108:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d10c:	4291      	cmp	r1, r2
 800d10e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d112:	d1f9      	bne.n	800d108 <memcpy+0xe>
 800d114:	bd10      	pop	{r4, pc}
	...

0800d118 <__malloc_lock>:
 800d118:	4801      	ldr	r0, [pc, #4]	; (800d120 <__malloc_lock+0x8>)
 800d11a:	f7ff bfde 	b.w	800d0da <__retarget_lock_acquire_recursive>
 800d11e:	bf00      	nop
 800d120:	20000bb0 	.word	0x20000bb0

0800d124 <__malloc_unlock>:
 800d124:	4801      	ldr	r0, [pc, #4]	; (800d12c <__malloc_unlock+0x8>)
 800d126:	f7ff bfd9 	b.w	800d0dc <__retarget_lock_release_recursive>
 800d12a:	bf00      	nop
 800d12c:	20000bb0 	.word	0x20000bb0

0800d130 <_Balloc>:
 800d130:	b570      	push	{r4, r5, r6, lr}
 800d132:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d134:	4604      	mov	r4, r0
 800d136:	460d      	mov	r5, r1
 800d138:	b976      	cbnz	r6, 800d158 <_Balloc+0x28>
 800d13a:	2010      	movs	r0, #16
 800d13c:	f7fe fa04 	bl	800b548 <malloc>
 800d140:	4602      	mov	r2, r0
 800d142:	6260      	str	r0, [r4, #36]	; 0x24
 800d144:	b920      	cbnz	r0, 800d150 <_Balloc+0x20>
 800d146:	2166      	movs	r1, #102	; 0x66
 800d148:	4b17      	ldr	r3, [pc, #92]	; (800d1a8 <_Balloc+0x78>)
 800d14a:	4818      	ldr	r0, [pc, #96]	; (800d1ac <_Balloc+0x7c>)
 800d14c:	f000 ff4a 	bl	800dfe4 <__assert_func>
 800d150:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d154:	6006      	str	r6, [r0, #0]
 800d156:	60c6      	str	r6, [r0, #12]
 800d158:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d15a:	68f3      	ldr	r3, [r6, #12]
 800d15c:	b183      	cbz	r3, 800d180 <_Balloc+0x50>
 800d15e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d160:	68db      	ldr	r3, [r3, #12]
 800d162:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d166:	b9b8      	cbnz	r0, 800d198 <_Balloc+0x68>
 800d168:	2101      	movs	r1, #1
 800d16a:	fa01 f605 	lsl.w	r6, r1, r5
 800d16e:	1d72      	adds	r2, r6, #5
 800d170:	4620      	mov	r0, r4
 800d172:	0092      	lsls	r2, r2, #2
 800d174:	f000 fb5e 	bl	800d834 <_calloc_r>
 800d178:	b160      	cbz	r0, 800d194 <_Balloc+0x64>
 800d17a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d17e:	e00e      	b.n	800d19e <_Balloc+0x6e>
 800d180:	2221      	movs	r2, #33	; 0x21
 800d182:	2104      	movs	r1, #4
 800d184:	4620      	mov	r0, r4
 800d186:	f000 fb55 	bl	800d834 <_calloc_r>
 800d18a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d18c:	60f0      	str	r0, [r6, #12]
 800d18e:	68db      	ldr	r3, [r3, #12]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d1e4      	bne.n	800d15e <_Balloc+0x2e>
 800d194:	2000      	movs	r0, #0
 800d196:	bd70      	pop	{r4, r5, r6, pc}
 800d198:	6802      	ldr	r2, [r0, #0]
 800d19a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d19e:	2300      	movs	r3, #0
 800d1a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d1a4:	e7f7      	b.n	800d196 <_Balloc+0x66>
 800d1a6:	bf00      	nop
 800d1a8:	0800f69e 	.word	0x0800f69e
 800d1ac:	0800f788 	.word	0x0800f788

0800d1b0 <_Bfree>:
 800d1b0:	b570      	push	{r4, r5, r6, lr}
 800d1b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d1b4:	4605      	mov	r5, r0
 800d1b6:	460c      	mov	r4, r1
 800d1b8:	b976      	cbnz	r6, 800d1d8 <_Bfree+0x28>
 800d1ba:	2010      	movs	r0, #16
 800d1bc:	f7fe f9c4 	bl	800b548 <malloc>
 800d1c0:	4602      	mov	r2, r0
 800d1c2:	6268      	str	r0, [r5, #36]	; 0x24
 800d1c4:	b920      	cbnz	r0, 800d1d0 <_Bfree+0x20>
 800d1c6:	218a      	movs	r1, #138	; 0x8a
 800d1c8:	4b08      	ldr	r3, [pc, #32]	; (800d1ec <_Bfree+0x3c>)
 800d1ca:	4809      	ldr	r0, [pc, #36]	; (800d1f0 <_Bfree+0x40>)
 800d1cc:	f000 ff0a 	bl	800dfe4 <__assert_func>
 800d1d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d1d4:	6006      	str	r6, [r0, #0]
 800d1d6:	60c6      	str	r6, [r0, #12]
 800d1d8:	b13c      	cbz	r4, 800d1ea <_Bfree+0x3a>
 800d1da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d1dc:	6862      	ldr	r2, [r4, #4]
 800d1de:	68db      	ldr	r3, [r3, #12]
 800d1e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d1e4:	6021      	str	r1, [r4, #0]
 800d1e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d1ea:	bd70      	pop	{r4, r5, r6, pc}
 800d1ec:	0800f69e 	.word	0x0800f69e
 800d1f0:	0800f788 	.word	0x0800f788

0800d1f4 <__multadd>:
 800d1f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1f8:	4698      	mov	r8, r3
 800d1fa:	460c      	mov	r4, r1
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	690e      	ldr	r6, [r1, #16]
 800d200:	4607      	mov	r7, r0
 800d202:	f101 0014 	add.w	r0, r1, #20
 800d206:	6805      	ldr	r5, [r0, #0]
 800d208:	3301      	adds	r3, #1
 800d20a:	b2a9      	uxth	r1, r5
 800d20c:	fb02 8101 	mla	r1, r2, r1, r8
 800d210:	0c2d      	lsrs	r5, r5, #16
 800d212:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d216:	fb02 c505 	mla	r5, r2, r5, ip
 800d21a:	b289      	uxth	r1, r1
 800d21c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d220:	429e      	cmp	r6, r3
 800d222:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d226:	f840 1b04 	str.w	r1, [r0], #4
 800d22a:	dcec      	bgt.n	800d206 <__multadd+0x12>
 800d22c:	f1b8 0f00 	cmp.w	r8, #0
 800d230:	d022      	beq.n	800d278 <__multadd+0x84>
 800d232:	68a3      	ldr	r3, [r4, #8]
 800d234:	42b3      	cmp	r3, r6
 800d236:	dc19      	bgt.n	800d26c <__multadd+0x78>
 800d238:	6861      	ldr	r1, [r4, #4]
 800d23a:	4638      	mov	r0, r7
 800d23c:	3101      	adds	r1, #1
 800d23e:	f7ff ff77 	bl	800d130 <_Balloc>
 800d242:	4605      	mov	r5, r0
 800d244:	b928      	cbnz	r0, 800d252 <__multadd+0x5e>
 800d246:	4602      	mov	r2, r0
 800d248:	21b5      	movs	r1, #181	; 0xb5
 800d24a:	4b0d      	ldr	r3, [pc, #52]	; (800d280 <__multadd+0x8c>)
 800d24c:	480d      	ldr	r0, [pc, #52]	; (800d284 <__multadd+0x90>)
 800d24e:	f000 fec9 	bl	800dfe4 <__assert_func>
 800d252:	6922      	ldr	r2, [r4, #16]
 800d254:	f104 010c 	add.w	r1, r4, #12
 800d258:	3202      	adds	r2, #2
 800d25a:	0092      	lsls	r2, r2, #2
 800d25c:	300c      	adds	r0, #12
 800d25e:	f7ff ff4c 	bl	800d0fa <memcpy>
 800d262:	4621      	mov	r1, r4
 800d264:	4638      	mov	r0, r7
 800d266:	f7ff ffa3 	bl	800d1b0 <_Bfree>
 800d26a:	462c      	mov	r4, r5
 800d26c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d270:	3601      	adds	r6, #1
 800d272:	f8c3 8014 	str.w	r8, [r3, #20]
 800d276:	6126      	str	r6, [r4, #16]
 800d278:	4620      	mov	r0, r4
 800d27a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d27e:	bf00      	nop
 800d280:	0800f714 	.word	0x0800f714
 800d284:	0800f788 	.word	0x0800f788

0800d288 <__hi0bits>:
 800d288:	0c02      	lsrs	r2, r0, #16
 800d28a:	0412      	lsls	r2, r2, #16
 800d28c:	4603      	mov	r3, r0
 800d28e:	b9ca      	cbnz	r2, 800d2c4 <__hi0bits+0x3c>
 800d290:	0403      	lsls	r3, r0, #16
 800d292:	2010      	movs	r0, #16
 800d294:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d298:	bf04      	itt	eq
 800d29a:	021b      	lsleq	r3, r3, #8
 800d29c:	3008      	addeq	r0, #8
 800d29e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d2a2:	bf04      	itt	eq
 800d2a4:	011b      	lsleq	r3, r3, #4
 800d2a6:	3004      	addeq	r0, #4
 800d2a8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d2ac:	bf04      	itt	eq
 800d2ae:	009b      	lsleq	r3, r3, #2
 800d2b0:	3002      	addeq	r0, #2
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	db05      	blt.n	800d2c2 <__hi0bits+0x3a>
 800d2b6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800d2ba:	f100 0001 	add.w	r0, r0, #1
 800d2be:	bf08      	it	eq
 800d2c0:	2020      	moveq	r0, #32
 800d2c2:	4770      	bx	lr
 800d2c4:	2000      	movs	r0, #0
 800d2c6:	e7e5      	b.n	800d294 <__hi0bits+0xc>

0800d2c8 <__lo0bits>:
 800d2c8:	6803      	ldr	r3, [r0, #0]
 800d2ca:	4602      	mov	r2, r0
 800d2cc:	f013 0007 	ands.w	r0, r3, #7
 800d2d0:	d00b      	beq.n	800d2ea <__lo0bits+0x22>
 800d2d2:	07d9      	lsls	r1, r3, #31
 800d2d4:	d422      	bmi.n	800d31c <__lo0bits+0x54>
 800d2d6:	0798      	lsls	r0, r3, #30
 800d2d8:	bf49      	itett	mi
 800d2da:	085b      	lsrmi	r3, r3, #1
 800d2dc:	089b      	lsrpl	r3, r3, #2
 800d2de:	2001      	movmi	r0, #1
 800d2e0:	6013      	strmi	r3, [r2, #0]
 800d2e2:	bf5c      	itt	pl
 800d2e4:	2002      	movpl	r0, #2
 800d2e6:	6013      	strpl	r3, [r2, #0]
 800d2e8:	4770      	bx	lr
 800d2ea:	b299      	uxth	r1, r3
 800d2ec:	b909      	cbnz	r1, 800d2f2 <__lo0bits+0x2a>
 800d2ee:	2010      	movs	r0, #16
 800d2f0:	0c1b      	lsrs	r3, r3, #16
 800d2f2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d2f6:	bf04      	itt	eq
 800d2f8:	0a1b      	lsreq	r3, r3, #8
 800d2fa:	3008      	addeq	r0, #8
 800d2fc:	0719      	lsls	r1, r3, #28
 800d2fe:	bf04      	itt	eq
 800d300:	091b      	lsreq	r3, r3, #4
 800d302:	3004      	addeq	r0, #4
 800d304:	0799      	lsls	r1, r3, #30
 800d306:	bf04      	itt	eq
 800d308:	089b      	lsreq	r3, r3, #2
 800d30a:	3002      	addeq	r0, #2
 800d30c:	07d9      	lsls	r1, r3, #31
 800d30e:	d403      	bmi.n	800d318 <__lo0bits+0x50>
 800d310:	085b      	lsrs	r3, r3, #1
 800d312:	f100 0001 	add.w	r0, r0, #1
 800d316:	d003      	beq.n	800d320 <__lo0bits+0x58>
 800d318:	6013      	str	r3, [r2, #0]
 800d31a:	4770      	bx	lr
 800d31c:	2000      	movs	r0, #0
 800d31e:	4770      	bx	lr
 800d320:	2020      	movs	r0, #32
 800d322:	4770      	bx	lr

0800d324 <__i2b>:
 800d324:	b510      	push	{r4, lr}
 800d326:	460c      	mov	r4, r1
 800d328:	2101      	movs	r1, #1
 800d32a:	f7ff ff01 	bl	800d130 <_Balloc>
 800d32e:	4602      	mov	r2, r0
 800d330:	b928      	cbnz	r0, 800d33e <__i2b+0x1a>
 800d332:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d336:	4b04      	ldr	r3, [pc, #16]	; (800d348 <__i2b+0x24>)
 800d338:	4804      	ldr	r0, [pc, #16]	; (800d34c <__i2b+0x28>)
 800d33a:	f000 fe53 	bl	800dfe4 <__assert_func>
 800d33e:	2301      	movs	r3, #1
 800d340:	6144      	str	r4, [r0, #20]
 800d342:	6103      	str	r3, [r0, #16]
 800d344:	bd10      	pop	{r4, pc}
 800d346:	bf00      	nop
 800d348:	0800f714 	.word	0x0800f714
 800d34c:	0800f788 	.word	0x0800f788

0800d350 <__multiply>:
 800d350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d354:	4614      	mov	r4, r2
 800d356:	690a      	ldr	r2, [r1, #16]
 800d358:	6923      	ldr	r3, [r4, #16]
 800d35a:	460d      	mov	r5, r1
 800d35c:	429a      	cmp	r2, r3
 800d35e:	bfbe      	ittt	lt
 800d360:	460b      	movlt	r3, r1
 800d362:	4625      	movlt	r5, r4
 800d364:	461c      	movlt	r4, r3
 800d366:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d36a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d36e:	68ab      	ldr	r3, [r5, #8]
 800d370:	6869      	ldr	r1, [r5, #4]
 800d372:	eb0a 0709 	add.w	r7, sl, r9
 800d376:	42bb      	cmp	r3, r7
 800d378:	b085      	sub	sp, #20
 800d37a:	bfb8      	it	lt
 800d37c:	3101      	addlt	r1, #1
 800d37e:	f7ff fed7 	bl	800d130 <_Balloc>
 800d382:	b930      	cbnz	r0, 800d392 <__multiply+0x42>
 800d384:	4602      	mov	r2, r0
 800d386:	f240 115d 	movw	r1, #349	; 0x15d
 800d38a:	4b41      	ldr	r3, [pc, #260]	; (800d490 <__multiply+0x140>)
 800d38c:	4841      	ldr	r0, [pc, #260]	; (800d494 <__multiply+0x144>)
 800d38e:	f000 fe29 	bl	800dfe4 <__assert_func>
 800d392:	f100 0614 	add.w	r6, r0, #20
 800d396:	4633      	mov	r3, r6
 800d398:	2200      	movs	r2, #0
 800d39a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d39e:	4543      	cmp	r3, r8
 800d3a0:	d31e      	bcc.n	800d3e0 <__multiply+0x90>
 800d3a2:	f105 0c14 	add.w	ip, r5, #20
 800d3a6:	f104 0314 	add.w	r3, r4, #20
 800d3aa:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d3ae:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d3b2:	9202      	str	r2, [sp, #8]
 800d3b4:	ebac 0205 	sub.w	r2, ip, r5
 800d3b8:	3a15      	subs	r2, #21
 800d3ba:	f022 0203 	bic.w	r2, r2, #3
 800d3be:	3204      	adds	r2, #4
 800d3c0:	f105 0115 	add.w	r1, r5, #21
 800d3c4:	458c      	cmp	ip, r1
 800d3c6:	bf38      	it	cc
 800d3c8:	2204      	movcc	r2, #4
 800d3ca:	9201      	str	r2, [sp, #4]
 800d3cc:	9a02      	ldr	r2, [sp, #8]
 800d3ce:	9303      	str	r3, [sp, #12]
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	d808      	bhi.n	800d3e6 <__multiply+0x96>
 800d3d4:	2f00      	cmp	r7, #0
 800d3d6:	dc55      	bgt.n	800d484 <__multiply+0x134>
 800d3d8:	6107      	str	r7, [r0, #16]
 800d3da:	b005      	add	sp, #20
 800d3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3e0:	f843 2b04 	str.w	r2, [r3], #4
 800d3e4:	e7db      	b.n	800d39e <__multiply+0x4e>
 800d3e6:	f8b3 a000 	ldrh.w	sl, [r3]
 800d3ea:	f1ba 0f00 	cmp.w	sl, #0
 800d3ee:	d020      	beq.n	800d432 <__multiply+0xe2>
 800d3f0:	46b1      	mov	r9, r6
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	f105 0e14 	add.w	lr, r5, #20
 800d3f8:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d3fc:	f8d9 b000 	ldr.w	fp, [r9]
 800d400:	b2a1      	uxth	r1, r4
 800d402:	fa1f fb8b 	uxth.w	fp, fp
 800d406:	fb0a b101 	mla	r1, sl, r1, fp
 800d40a:	4411      	add	r1, r2
 800d40c:	f8d9 2000 	ldr.w	r2, [r9]
 800d410:	0c24      	lsrs	r4, r4, #16
 800d412:	0c12      	lsrs	r2, r2, #16
 800d414:	fb0a 2404 	mla	r4, sl, r4, r2
 800d418:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d41c:	b289      	uxth	r1, r1
 800d41e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d422:	45f4      	cmp	ip, lr
 800d424:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d428:	f849 1b04 	str.w	r1, [r9], #4
 800d42c:	d8e4      	bhi.n	800d3f8 <__multiply+0xa8>
 800d42e:	9901      	ldr	r1, [sp, #4]
 800d430:	5072      	str	r2, [r6, r1]
 800d432:	9a03      	ldr	r2, [sp, #12]
 800d434:	3304      	adds	r3, #4
 800d436:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d43a:	f1b9 0f00 	cmp.w	r9, #0
 800d43e:	d01f      	beq.n	800d480 <__multiply+0x130>
 800d440:	46b6      	mov	lr, r6
 800d442:	f04f 0a00 	mov.w	sl, #0
 800d446:	6834      	ldr	r4, [r6, #0]
 800d448:	f105 0114 	add.w	r1, r5, #20
 800d44c:	880a      	ldrh	r2, [r1, #0]
 800d44e:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d452:	b2a4      	uxth	r4, r4
 800d454:	fb09 b202 	mla	r2, r9, r2, fp
 800d458:	4492      	add	sl, r2
 800d45a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d45e:	f84e 4b04 	str.w	r4, [lr], #4
 800d462:	f851 4b04 	ldr.w	r4, [r1], #4
 800d466:	f8be 2000 	ldrh.w	r2, [lr]
 800d46a:	0c24      	lsrs	r4, r4, #16
 800d46c:	fb09 2404 	mla	r4, r9, r4, r2
 800d470:	458c      	cmp	ip, r1
 800d472:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d476:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d47a:	d8e7      	bhi.n	800d44c <__multiply+0xfc>
 800d47c:	9a01      	ldr	r2, [sp, #4]
 800d47e:	50b4      	str	r4, [r6, r2]
 800d480:	3604      	adds	r6, #4
 800d482:	e7a3      	b.n	800d3cc <__multiply+0x7c>
 800d484:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d1a5      	bne.n	800d3d8 <__multiply+0x88>
 800d48c:	3f01      	subs	r7, #1
 800d48e:	e7a1      	b.n	800d3d4 <__multiply+0x84>
 800d490:	0800f714 	.word	0x0800f714
 800d494:	0800f788 	.word	0x0800f788

0800d498 <__pow5mult>:
 800d498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d49c:	4615      	mov	r5, r2
 800d49e:	f012 0203 	ands.w	r2, r2, #3
 800d4a2:	4606      	mov	r6, r0
 800d4a4:	460f      	mov	r7, r1
 800d4a6:	d007      	beq.n	800d4b8 <__pow5mult+0x20>
 800d4a8:	4c25      	ldr	r4, [pc, #148]	; (800d540 <__pow5mult+0xa8>)
 800d4aa:	3a01      	subs	r2, #1
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d4b2:	f7ff fe9f 	bl	800d1f4 <__multadd>
 800d4b6:	4607      	mov	r7, r0
 800d4b8:	10ad      	asrs	r5, r5, #2
 800d4ba:	d03d      	beq.n	800d538 <__pow5mult+0xa0>
 800d4bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d4be:	b97c      	cbnz	r4, 800d4e0 <__pow5mult+0x48>
 800d4c0:	2010      	movs	r0, #16
 800d4c2:	f7fe f841 	bl	800b548 <malloc>
 800d4c6:	4602      	mov	r2, r0
 800d4c8:	6270      	str	r0, [r6, #36]	; 0x24
 800d4ca:	b928      	cbnz	r0, 800d4d8 <__pow5mult+0x40>
 800d4cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d4d0:	4b1c      	ldr	r3, [pc, #112]	; (800d544 <__pow5mult+0xac>)
 800d4d2:	481d      	ldr	r0, [pc, #116]	; (800d548 <__pow5mult+0xb0>)
 800d4d4:	f000 fd86 	bl	800dfe4 <__assert_func>
 800d4d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d4dc:	6004      	str	r4, [r0, #0]
 800d4de:	60c4      	str	r4, [r0, #12]
 800d4e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d4e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d4e8:	b94c      	cbnz	r4, 800d4fe <__pow5mult+0x66>
 800d4ea:	f240 2171 	movw	r1, #625	; 0x271
 800d4ee:	4630      	mov	r0, r6
 800d4f0:	f7ff ff18 	bl	800d324 <__i2b>
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	4604      	mov	r4, r0
 800d4f8:	f8c8 0008 	str.w	r0, [r8, #8]
 800d4fc:	6003      	str	r3, [r0, #0]
 800d4fe:	f04f 0900 	mov.w	r9, #0
 800d502:	07eb      	lsls	r3, r5, #31
 800d504:	d50a      	bpl.n	800d51c <__pow5mult+0x84>
 800d506:	4639      	mov	r1, r7
 800d508:	4622      	mov	r2, r4
 800d50a:	4630      	mov	r0, r6
 800d50c:	f7ff ff20 	bl	800d350 <__multiply>
 800d510:	4680      	mov	r8, r0
 800d512:	4639      	mov	r1, r7
 800d514:	4630      	mov	r0, r6
 800d516:	f7ff fe4b 	bl	800d1b0 <_Bfree>
 800d51a:	4647      	mov	r7, r8
 800d51c:	106d      	asrs	r5, r5, #1
 800d51e:	d00b      	beq.n	800d538 <__pow5mult+0xa0>
 800d520:	6820      	ldr	r0, [r4, #0]
 800d522:	b938      	cbnz	r0, 800d534 <__pow5mult+0x9c>
 800d524:	4622      	mov	r2, r4
 800d526:	4621      	mov	r1, r4
 800d528:	4630      	mov	r0, r6
 800d52a:	f7ff ff11 	bl	800d350 <__multiply>
 800d52e:	6020      	str	r0, [r4, #0]
 800d530:	f8c0 9000 	str.w	r9, [r0]
 800d534:	4604      	mov	r4, r0
 800d536:	e7e4      	b.n	800d502 <__pow5mult+0x6a>
 800d538:	4638      	mov	r0, r7
 800d53a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d53e:	bf00      	nop
 800d540:	0800f8d8 	.word	0x0800f8d8
 800d544:	0800f69e 	.word	0x0800f69e
 800d548:	0800f788 	.word	0x0800f788

0800d54c <__lshift>:
 800d54c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d550:	460c      	mov	r4, r1
 800d552:	4607      	mov	r7, r0
 800d554:	4691      	mov	r9, r2
 800d556:	6923      	ldr	r3, [r4, #16]
 800d558:	6849      	ldr	r1, [r1, #4]
 800d55a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d55e:	68a3      	ldr	r3, [r4, #8]
 800d560:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d564:	f108 0601 	add.w	r6, r8, #1
 800d568:	42b3      	cmp	r3, r6
 800d56a:	db0b      	blt.n	800d584 <__lshift+0x38>
 800d56c:	4638      	mov	r0, r7
 800d56e:	f7ff fddf 	bl	800d130 <_Balloc>
 800d572:	4605      	mov	r5, r0
 800d574:	b948      	cbnz	r0, 800d58a <__lshift+0x3e>
 800d576:	4602      	mov	r2, r0
 800d578:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d57c:	4b27      	ldr	r3, [pc, #156]	; (800d61c <__lshift+0xd0>)
 800d57e:	4828      	ldr	r0, [pc, #160]	; (800d620 <__lshift+0xd4>)
 800d580:	f000 fd30 	bl	800dfe4 <__assert_func>
 800d584:	3101      	adds	r1, #1
 800d586:	005b      	lsls	r3, r3, #1
 800d588:	e7ee      	b.n	800d568 <__lshift+0x1c>
 800d58a:	2300      	movs	r3, #0
 800d58c:	f100 0114 	add.w	r1, r0, #20
 800d590:	f100 0210 	add.w	r2, r0, #16
 800d594:	4618      	mov	r0, r3
 800d596:	4553      	cmp	r3, sl
 800d598:	db33      	blt.n	800d602 <__lshift+0xb6>
 800d59a:	6920      	ldr	r0, [r4, #16]
 800d59c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d5a0:	f104 0314 	add.w	r3, r4, #20
 800d5a4:	f019 091f 	ands.w	r9, r9, #31
 800d5a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d5ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d5b0:	d02b      	beq.n	800d60a <__lshift+0xbe>
 800d5b2:	468a      	mov	sl, r1
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	f1c9 0e20 	rsb	lr, r9, #32
 800d5ba:	6818      	ldr	r0, [r3, #0]
 800d5bc:	fa00 f009 	lsl.w	r0, r0, r9
 800d5c0:	4302      	orrs	r2, r0
 800d5c2:	f84a 2b04 	str.w	r2, [sl], #4
 800d5c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5ca:	459c      	cmp	ip, r3
 800d5cc:	fa22 f20e 	lsr.w	r2, r2, lr
 800d5d0:	d8f3      	bhi.n	800d5ba <__lshift+0x6e>
 800d5d2:	ebac 0304 	sub.w	r3, ip, r4
 800d5d6:	3b15      	subs	r3, #21
 800d5d8:	f023 0303 	bic.w	r3, r3, #3
 800d5dc:	3304      	adds	r3, #4
 800d5de:	f104 0015 	add.w	r0, r4, #21
 800d5e2:	4584      	cmp	ip, r0
 800d5e4:	bf38      	it	cc
 800d5e6:	2304      	movcc	r3, #4
 800d5e8:	50ca      	str	r2, [r1, r3]
 800d5ea:	b10a      	cbz	r2, 800d5f0 <__lshift+0xa4>
 800d5ec:	f108 0602 	add.w	r6, r8, #2
 800d5f0:	3e01      	subs	r6, #1
 800d5f2:	4638      	mov	r0, r7
 800d5f4:	4621      	mov	r1, r4
 800d5f6:	612e      	str	r6, [r5, #16]
 800d5f8:	f7ff fdda 	bl	800d1b0 <_Bfree>
 800d5fc:	4628      	mov	r0, r5
 800d5fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d602:	f842 0f04 	str.w	r0, [r2, #4]!
 800d606:	3301      	adds	r3, #1
 800d608:	e7c5      	b.n	800d596 <__lshift+0x4a>
 800d60a:	3904      	subs	r1, #4
 800d60c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d610:	459c      	cmp	ip, r3
 800d612:	f841 2f04 	str.w	r2, [r1, #4]!
 800d616:	d8f9      	bhi.n	800d60c <__lshift+0xc0>
 800d618:	e7ea      	b.n	800d5f0 <__lshift+0xa4>
 800d61a:	bf00      	nop
 800d61c:	0800f714 	.word	0x0800f714
 800d620:	0800f788 	.word	0x0800f788

0800d624 <__mcmp>:
 800d624:	4603      	mov	r3, r0
 800d626:	690a      	ldr	r2, [r1, #16]
 800d628:	6900      	ldr	r0, [r0, #16]
 800d62a:	b530      	push	{r4, r5, lr}
 800d62c:	1a80      	subs	r0, r0, r2
 800d62e:	d10d      	bne.n	800d64c <__mcmp+0x28>
 800d630:	3314      	adds	r3, #20
 800d632:	3114      	adds	r1, #20
 800d634:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d638:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d63c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d640:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d644:	4295      	cmp	r5, r2
 800d646:	d002      	beq.n	800d64e <__mcmp+0x2a>
 800d648:	d304      	bcc.n	800d654 <__mcmp+0x30>
 800d64a:	2001      	movs	r0, #1
 800d64c:	bd30      	pop	{r4, r5, pc}
 800d64e:	42a3      	cmp	r3, r4
 800d650:	d3f4      	bcc.n	800d63c <__mcmp+0x18>
 800d652:	e7fb      	b.n	800d64c <__mcmp+0x28>
 800d654:	f04f 30ff 	mov.w	r0, #4294967295
 800d658:	e7f8      	b.n	800d64c <__mcmp+0x28>
	...

0800d65c <__mdiff>:
 800d65c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d660:	460c      	mov	r4, r1
 800d662:	4606      	mov	r6, r0
 800d664:	4611      	mov	r1, r2
 800d666:	4620      	mov	r0, r4
 800d668:	4692      	mov	sl, r2
 800d66a:	f7ff ffdb 	bl	800d624 <__mcmp>
 800d66e:	1e05      	subs	r5, r0, #0
 800d670:	d111      	bne.n	800d696 <__mdiff+0x3a>
 800d672:	4629      	mov	r1, r5
 800d674:	4630      	mov	r0, r6
 800d676:	f7ff fd5b 	bl	800d130 <_Balloc>
 800d67a:	4602      	mov	r2, r0
 800d67c:	b928      	cbnz	r0, 800d68a <__mdiff+0x2e>
 800d67e:	f240 2132 	movw	r1, #562	; 0x232
 800d682:	4b3c      	ldr	r3, [pc, #240]	; (800d774 <__mdiff+0x118>)
 800d684:	483c      	ldr	r0, [pc, #240]	; (800d778 <__mdiff+0x11c>)
 800d686:	f000 fcad 	bl	800dfe4 <__assert_func>
 800d68a:	2301      	movs	r3, #1
 800d68c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d690:	4610      	mov	r0, r2
 800d692:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d696:	bfa4      	itt	ge
 800d698:	4653      	movge	r3, sl
 800d69a:	46a2      	movge	sl, r4
 800d69c:	4630      	mov	r0, r6
 800d69e:	f8da 1004 	ldr.w	r1, [sl, #4]
 800d6a2:	bfa6      	itte	ge
 800d6a4:	461c      	movge	r4, r3
 800d6a6:	2500      	movge	r5, #0
 800d6a8:	2501      	movlt	r5, #1
 800d6aa:	f7ff fd41 	bl	800d130 <_Balloc>
 800d6ae:	4602      	mov	r2, r0
 800d6b0:	b918      	cbnz	r0, 800d6ba <__mdiff+0x5e>
 800d6b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d6b6:	4b2f      	ldr	r3, [pc, #188]	; (800d774 <__mdiff+0x118>)
 800d6b8:	e7e4      	b.n	800d684 <__mdiff+0x28>
 800d6ba:	f100 0814 	add.w	r8, r0, #20
 800d6be:	f8da 7010 	ldr.w	r7, [sl, #16]
 800d6c2:	60c5      	str	r5, [r0, #12]
 800d6c4:	f04f 0c00 	mov.w	ip, #0
 800d6c8:	f10a 0514 	add.w	r5, sl, #20
 800d6cc:	f10a 0010 	add.w	r0, sl, #16
 800d6d0:	46c2      	mov	sl, r8
 800d6d2:	6926      	ldr	r6, [r4, #16]
 800d6d4:	f104 0914 	add.w	r9, r4, #20
 800d6d8:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800d6dc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d6e0:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800d6e4:	f859 3b04 	ldr.w	r3, [r9], #4
 800d6e8:	fa1f f18b 	uxth.w	r1, fp
 800d6ec:	4461      	add	r1, ip
 800d6ee:	fa1f fc83 	uxth.w	ip, r3
 800d6f2:	0c1b      	lsrs	r3, r3, #16
 800d6f4:	eba1 010c 	sub.w	r1, r1, ip
 800d6f8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d6fc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d700:	b289      	uxth	r1, r1
 800d702:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800d706:	454e      	cmp	r6, r9
 800d708:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d70c:	f84a 3b04 	str.w	r3, [sl], #4
 800d710:	d8e6      	bhi.n	800d6e0 <__mdiff+0x84>
 800d712:	1b33      	subs	r3, r6, r4
 800d714:	3b15      	subs	r3, #21
 800d716:	f023 0303 	bic.w	r3, r3, #3
 800d71a:	3415      	adds	r4, #21
 800d71c:	3304      	adds	r3, #4
 800d71e:	42a6      	cmp	r6, r4
 800d720:	bf38      	it	cc
 800d722:	2304      	movcc	r3, #4
 800d724:	441d      	add	r5, r3
 800d726:	4443      	add	r3, r8
 800d728:	461e      	mov	r6, r3
 800d72a:	462c      	mov	r4, r5
 800d72c:	4574      	cmp	r4, lr
 800d72e:	d30e      	bcc.n	800d74e <__mdiff+0xf2>
 800d730:	f10e 0103 	add.w	r1, lr, #3
 800d734:	1b49      	subs	r1, r1, r5
 800d736:	f021 0103 	bic.w	r1, r1, #3
 800d73a:	3d03      	subs	r5, #3
 800d73c:	45ae      	cmp	lr, r5
 800d73e:	bf38      	it	cc
 800d740:	2100      	movcc	r1, #0
 800d742:	4419      	add	r1, r3
 800d744:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800d748:	b18b      	cbz	r3, 800d76e <__mdiff+0x112>
 800d74a:	6117      	str	r7, [r2, #16]
 800d74c:	e7a0      	b.n	800d690 <__mdiff+0x34>
 800d74e:	f854 8b04 	ldr.w	r8, [r4], #4
 800d752:	fa1f f188 	uxth.w	r1, r8
 800d756:	4461      	add	r1, ip
 800d758:	1408      	asrs	r0, r1, #16
 800d75a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800d75e:	b289      	uxth	r1, r1
 800d760:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d764:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d768:	f846 1b04 	str.w	r1, [r6], #4
 800d76c:	e7de      	b.n	800d72c <__mdiff+0xd0>
 800d76e:	3f01      	subs	r7, #1
 800d770:	e7e8      	b.n	800d744 <__mdiff+0xe8>
 800d772:	bf00      	nop
 800d774:	0800f714 	.word	0x0800f714
 800d778:	0800f788 	.word	0x0800f788

0800d77c <__d2b>:
 800d77c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d780:	2101      	movs	r1, #1
 800d782:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800d786:	4690      	mov	r8, r2
 800d788:	461d      	mov	r5, r3
 800d78a:	f7ff fcd1 	bl	800d130 <_Balloc>
 800d78e:	4604      	mov	r4, r0
 800d790:	b930      	cbnz	r0, 800d7a0 <__d2b+0x24>
 800d792:	4602      	mov	r2, r0
 800d794:	f240 310a 	movw	r1, #778	; 0x30a
 800d798:	4b24      	ldr	r3, [pc, #144]	; (800d82c <__d2b+0xb0>)
 800d79a:	4825      	ldr	r0, [pc, #148]	; (800d830 <__d2b+0xb4>)
 800d79c:	f000 fc22 	bl	800dfe4 <__assert_func>
 800d7a0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800d7a4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800d7a8:	bb2d      	cbnz	r5, 800d7f6 <__d2b+0x7a>
 800d7aa:	9301      	str	r3, [sp, #4]
 800d7ac:	f1b8 0300 	subs.w	r3, r8, #0
 800d7b0:	d026      	beq.n	800d800 <__d2b+0x84>
 800d7b2:	4668      	mov	r0, sp
 800d7b4:	9300      	str	r3, [sp, #0]
 800d7b6:	f7ff fd87 	bl	800d2c8 <__lo0bits>
 800d7ba:	9900      	ldr	r1, [sp, #0]
 800d7bc:	b1f0      	cbz	r0, 800d7fc <__d2b+0x80>
 800d7be:	9a01      	ldr	r2, [sp, #4]
 800d7c0:	f1c0 0320 	rsb	r3, r0, #32
 800d7c4:	fa02 f303 	lsl.w	r3, r2, r3
 800d7c8:	430b      	orrs	r3, r1
 800d7ca:	40c2      	lsrs	r2, r0
 800d7cc:	6163      	str	r3, [r4, #20]
 800d7ce:	9201      	str	r2, [sp, #4]
 800d7d0:	9b01      	ldr	r3, [sp, #4]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	bf14      	ite	ne
 800d7d6:	2102      	movne	r1, #2
 800d7d8:	2101      	moveq	r1, #1
 800d7da:	61a3      	str	r3, [r4, #24]
 800d7dc:	6121      	str	r1, [r4, #16]
 800d7de:	b1c5      	cbz	r5, 800d812 <__d2b+0x96>
 800d7e0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d7e4:	4405      	add	r5, r0
 800d7e6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d7ea:	603d      	str	r5, [r7, #0]
 800d7ec:	6030      	str	r0, [r6, #0]
 800d7ee:	4620      	mov	r0, r4
 800d7f0:	b002      	add	sp, #8
 800d7f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d7fa:	e7d6      	b.n	800d7aa <__d2b+0x2e>
 800d7fc:	6161      	str	r1, [r4, #20]
 800d7fe:	e7e7      	b.n	800d7d0 <__d2b+0x54>
 800d800:	a801      	add	r0, sp, #4
 800d802:	f7ff fd61 	bl	800d2c8 <__lo0bits>
 800d806:	2101      	movs	r1, #1
 800d808:	9b01      	ldr	r3, [sp, #4]
 800d80a:	6121      	str	r1, [r4, #16]
 800d80c:	6163      	str	r3, [r4, #20]
 800d80e:	3020      	adds	r0, #32
 800d810:	e7e5      	b.n	800d7de <__d2b+0x62>
 800d812:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800d816:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d81a:	6038      	str	r0, [r7, #0]
 800d81c:	6918      	ldr	r0, [r3, #16]
 800d81e:	f7ff fd33 	bl	800d288 <__hi0bits>
 800d822:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800d826:	6031      	str	r1, [r6, #0]
 800d828:	e7e1      	b.n	800d7ee <__d2b+0x72>
 800d82a:	bf00      	nop
 800d82c:	0800f714 	.word	0x0800f714
 800d830:	0800f788 	.word	0x0800f788

0800d834 <_calloc_r>:
 800d834:	b538      	push	{r3, r4, r5, lr}
 800d836:	fb02 f501 	mul.w	r5, r2, r1
 800d83a:	4629      	mov	r1, r5
 800d83c:	f7fd fee8 	bl	800b610 <_malloc_r>
 800d840:	4604      	mov	r4, r0
 800d842:	b118      	cbz	r0, 800d84c <_calloc_r+0x18>
 800d844:	462a      	mov	r2, r5
 800d846:	2100      	movs	r1, #0
 800d848:	f7fd fe8e 	bl	800b568 <memset>
 800d84c:	4620      	mov	r0, r4
 800d84e:	bd38      	pop	{r3, r4, r5, pc}

0800d850 <__ssputs_r>:
 800d850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d854:	688e      	ldr	r6, [r1, #8]
 800d856:	4682      	mov	sl, r0
 800d858:	429e      	cmp	r6, r3
 800d85a:	460c      	mov	r4, r1
 800d85c:	4690      	mov	r8, r2
 800d85e:	461f      	mov	r7, r3
 800d860:	d838      	bhi.n	800d8d4 <__ssputs_r+0x84>
 800d862:	898a      	ldrh	r2, [r1, #12]
 800d864:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d868:	d032      	beq.n	800d8d0 <__ssputs_r+0x80>
 800d86a:	6825      	ldr	r5, [r4, #0]
 800d86c:	6909      	ldr	r1, [r1, #16]
 800d86e:	3301      	adds	r3, #1
 800d870:	eba5 0901 	sub.w	r9, r5, r1
 800d874:	6965      	ldr	r5, [r4, #20]
 800d876:	444b      	add	r3, r9
 800d878:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d87c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d880:	106d      	asrs	r5, r5, #1
 800d882:	429d      	cmp	r5, r3
 800d884:	bf38      	it	cc
 800d886:	461d      	movcc	r5, r3
 800d888:	0553      	lsls	r3, r2, #21
 800d88a:	d531      	bpl.n	800d8f0 <__ssputs_r+0xa0>
 800d88c:	4629      	mov	r1, r5
 800d88e:	f7fd febf 	bl	800b610 <_malloc_r>
 800d892:	4606      	mov	r6, r0
 800d894:	b950      	cbnz	r0, 800d8ac <__ssputs_r+0x5c>
 800d896:	230c      	movs	r3, #12
 800d898:	f04f 30ff 	mov.w	r0, #4294967295
 800d89c:	f8ca 3000 	str.w	r3, [sl]
 800d8a0:	89a3      	ldrh	r3, [r4, #12]
 800d8a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8a6:	81a3      	strh	r3, [r4, #12]
 800d8a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8ac:	464a      	mov	r2, r9
 800d8ae:	6921      	ldr	r1, [r4, #16]
 800d8b0:	f7ff fc23 	bl	800d0fa <memcpy>
 800d8b4:	89a3      	ldrh	r3, [r4, #12]
 800d8b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d8ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8be:	81a3      	strh	r3, [r4, #12]
 800d8c0:	6126      	str	r6, [r4, #16]
 800d8c2:	444e      	add	r6, r9
 800d8c4:	6026      	str	r6, [r4, #0]
 800d8c6:	463e      	mov	r6, r7
 800d8c8:	6165      	str	r5, [r4, #20]
 800d8ca:	eba5 0509 	sub.w	r5, r5, r9
 800d8ce:	60a5      	str	r5, [r4, #8]
 800d8d0:	42be      	cmp	r6, r7
 800d8d2:	d900      	bls.n	800d8d6 <__ssputs_r+0x86>
 800d8d4:	463e      	mov	r6, r7
 800d8d6:	4632      	mov	r2, r6
 800d8d8:	4641      	mov	r1, r8
 800d8da:	6820      	ldr	r0, [r4, #0]
 800d8dc:	f000 fd0c 	bl	800e2f8 <memmove>
 800d8e0:	68a3      	ldr	r3, [r4, #8]
 800d8e2:	6822      	ldr	r2, [r4, #0]
 800d8e4:	1b9b      	subs	r3, r3, r6
 800d8e6:	4432      	add	r2, r6
 800d8e8:	2000      	movs	r0, #0
 800d8ea:	60a3      	str	r3, [r4, #8]
 800d8ec:	6022      	str	r2, [r4, #0]
 800d8ee:	e7db      	b.n	800d8a8 <__ssputs_r+0x58>
 800d8f0:	462a      	mov	r2, r5
 800d8f2:	f000 fd1b 	bl	800e32c <_realloc_r>
 800d8f6:	4606      	mov	r6, r0
 800d8f8:	2800      	cmp	r0, #0
 800d8fa:	d1e1      	bne.n	800d8c0 <__ssputs_r+0x70>
 800d8fc:	4650      	mov	r0, sl
 800d8fe:	6921      	ldr	r1, [r4, #16]
 800d900:	f7fd fe3a 	bl	800b578 <_free_r>
 800d904:	e7c7      	b.n	800d896 <__ssputs_r+0x46>
	...

0800d908 <_svfiprintf_r>:
 800d908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d90c:	4698      	mov	r8, r3
 800d90e:	898b      	ldrh	r3, [r1, #12]
 800d910:	4607      	mov	r7, r0
 800d912:	061b      	lsls	r3, r3, #24
 800d914:	460d      	mov	r5, r1
 800d916:	4614      	mov	r4, r2
 800d918:	b09d      	sub	sp, #116	; 0x74
 800d91a:	d50e      	bpl.n	800d93a <_svfiprintf_r+0x32>
 800d91c:	690b      	ldr	r3, [r1, #16]
 800d91e:	b963      	cbnz	r3, 800d93a <_svfiprintf_r+0x32>
 800d920:	2140      	movs	r1, #64	; 0x40
 800d922:	f7fd fe75 	bl	800b610 <_malloc_r>
 800d926:	6028      	str	r0, [r5, #0]
 800d928:	6128      	str	r0, [r5, #16]
 800d92a:	b920      	cbnz	r0, 800d936 <_svfiprintf_r+0x2e>
 800d92c:	230c      	movs	r3, #12
 800d92e:	603b      	str	r3, [r7, #0]
 800d930:	f04f 30ff 	mov.w	r0, #4294967295
 800d934:	e0d1      	b.n	800dada <_svfiprintf_r+0x1d2>
 800d936:	2340      	movs	r3, #64	; 0x40
 800d938:	616b      	str	r3, [r5, #20]
 800d93a:	2300      	movs	r3, #0
 800d93c:	9309      	str	r3, [sp, #36]	; 0x24
 800d93e:	2320      	movs	r3, #32
 800d940:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d944:	2330      	movs	r3, #48	; 0x30
 800d946:	f04f 0901 	mov.w	r9, #1
 800d94a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d94e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800daf4 <_svfiprintf_r+0x1ec>
 800d952:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d956:	4623      	mov	r3, r4
 800d958:	469a      	mov	sl, r3
 800d95a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d95e:	b10a      	cbz	r2, 800d964 <_svfiprintf_r+0x5c>
 800d960:	2a25      	cmp	r2, #37	; 0x25
 800d962:	d1f9      	bne.n	800d958 <_svfiprintf_r+0x50>
 800d964:	ebba 0b04 	subs.w	fp, sl, r4
 800d968:	d00b      	beq.n	800d982 <_svfiprintf_r+0x7a>
 800d96a:	465b      	mov	r3, fp
 800d96c:	4622      	mov	r2, r4
 800d96e:	4629      	mov	r1, r5
 800d970:	4638      	mov	r0, r7
 800d972:	f7ff ff6d 	bl	800d850 <__ssputs_r>
 800d976:	3001      	adds	r0, #1
 800d978:	f000 80aa 	beq.w	800dad0 <_svfiprintf_r+0x1c8>
 800d97c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d97e:	445a      	add	r2, fp
 800d980:	9209      	str	r2, [sp, #36]	; 0x24
 800d982:	f89a 3000 	ldrb.w	r3, [sl]
 800d986:	2b00      	cmp	r3, #0
 800d988:	f000 80a2 	beq.w	800dad0 <_svfiprintf_r+0x1c8>
 800d98c:	2300      	movs	r3, #0
 800d98e:	f04f 32ff 	mov.w	r2, #4294967295
 800d992:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d996:	f10a 0a01 	add.w	sl, sl, #1
 800d99a:	9304      	str	r3, [sp, #16]
 800d99c:	9307      	str	r3, [sp, #28]
 800d99e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d9a2:	931a      	str	r3, [sp, #104]	; 0x68
 800d9a4:	4654      	mov	r4, sl
 800d9a6:	2205      	movs	r2, #5
 800d9a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9ac:	4851      	ldr	r0, [pc, #324]	; (800daf4 <_svfiprintf_r+0x1ec>)
 800d9ae:	f7ff fb96 	bl	800d0de <memchr>
 800d9b2:	9a04      	ldr	r2, [sp, #16]
 800d9b4:	b9d8      	cbnz	r0, 800d9ee <_svfiprintf_r+0xe6>
 800d9b6:	06d0      	lsls	r0, r2, #27
 800d9b8:	bf44      	itt	mi
 800d9ba:	2320      	movmi	r3, #32
 800d9bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9c0:	0711      	lsls	r1, r2, #28
 800d9c2:	bf44      	itt	mi
 800d9c4:	232b      	movmi	r3, #43	; 0x2b
 800d9c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d9ca:	f89a 3000 	ldrb.w	r3, [sl]
 800d9ce:	2b2a      	cmp	r3, #42	; 0x2a
 800d9d0:	d015      	beq.n	800d9fe <_svfiprintf_r+0xf6>
 800d9d2:	4654      	mov	r4, sl
 800d9d4:	2000      	movs	r0, #0
 800d9d6:	f04f 0c0a 	mov.w	ip, #10
 800d9da:	9a07      	ldr	r2, [sp, #28]
 800d9dc:	4621      	mov	r1, r4
 800d9de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d9e2:	3b30      	subs	r3, #48	; 0x30
 800d9e4:	2b09      	cmp	r3, #9
 800d9e6:	d94e      	bls.n	800da86 <_svfiprintf_r+0x17e>
 800d9e8:	b1b0      	cbz	r0, 800da18 <_svfiprintf_r+0x110>
 800d9ea:	9207      	str	r2, [sp, #28]
 800d9ec:	e014      	b.n	800da18 <_svfiprintf_r+0x110>
 800d9ee:	eba0 0308 	sub.w	r3, r0, r8
 800d9f2:	fa09 f303 	lsl.w	r3, r9, r3
 800d9f6:	4313      	orrs	r3, r2
 800d9f8:	46a2      	mov	sl, r4
 800d9fa:	9304      	str	r3, [sp, #16]
 800d9fc:	e7d2      	b.n	800d9a4 <_svfiprintf_r+0x9c>
 800d9fe:	9b03      	ldr	r3, [sp, #12]
 800da00:	1d19      	adds	r1, r3, #4
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	9103      	str	r1, [sp, #12]
 800da06:	2b00      	cmp	r3, #0
 800da08:	bfbb      	ittet	lt
 800da0a:	425b      	neglt	r3, r3
 800da0c:	f042 0202 	orrlt.w	r2, r2, #2
 800da10:	9307      	strge	r3, [sp, #28]
 800da12:	9307      	strlt	r3, [sp, #28]
 800da14:	bfb8      	it	lt
 800da16:	9204      	strlt	r2, [sp, #16]
 800da18:	7823      	ldrb	r3, [r4, #0]
 800da1a:	2b2e      	cmp	r3, #46	; 0x2e
 800da1c:	d10c      	bne.n	800da38 <_svfiprintf_r+0x130>
 800da1e:	7863      	ldrb	r3, [r4, #1]
 800da20:	2b2a      	cmp	r3, #42	; 0x2a
 800da22:	d135      	bne.n	800da90 <_svfiprintf_r+0x188>
 800da24:	9b03      	ldr	r3, [sp, #12]
 800da26:	3402      	adds	r4, #2
 800da28:	1d1a      	adds	r2, r3, #4
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	9203      	str	r2, [sp, #12]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	bfb8      	it	lt
 800da32:	f04f 33ff 	movlt.w	r3, #4294967295
 800da36:	9305      	str	r3, [sp, #20]
 800da38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800db04 <_svfiprintf_r+0x1fc>
 800da3c:	2203      	movs	r2, #3
 800da3e:	4650      	mov	r0, sl
 800da40:	7821      	ldrb	r1, [r4, #0]
 800da42:	f7ff fb4c 	bl	800d0de <memchr>
 800da46:	b140      	cbz	r0, 800da5a <_svfiprintf_r+0x152>
 800da48:	2340      	movs	r3, #64	; 0x40
 800da4a:	eba0 000a 	sub.w	r0, r0, sl
 800da4e:	fa03 f000 	lsl.w	r0, r3, r0
 800da52:	9b04      	ldr	r3, [sp, #16]
 800da54:	3401      	adds	r4, #1
 800da56:	4303      	orrs	r3, r0
 800da58:	9304      	str	r3, [sp, #16]
 800da5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da5e:	2206      	movs	r2, #6
 800da60:	4825      	ldr	r0, [pc, #148]	; (800daf8 <_svfiprintf_r+0x1f0>)
 800da62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da66:	f7ff fb3a 	bl	800d0de <memchr>
 800da6a:	2800      	cmp	r0, #0
 800da6c:	d038      	beq.n	800dae0 <_svfiprintf_r+0x1d8>
 800da6e:	4b23      	ldr	r3, [pc, #140]	; (800dafc <_svfiprintf_r+0x1f4>)
 800da70:	bb1b      	cbnz	r3, 800daba <_svfiprintf_r+0x1b2>
 800da72:	9b03      	ldr	r3, [sp, #12]
 800da74:	3307      	adds	r3, #7
 800da76:	f023 0307 	bic.w	r3, r3, #7
 800da7a:	3308      	adds	r3, #8
 800da7c:	9303      	str	r3, [sp, #12]
 800da7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da80:	4433      	add	r3, r6
 800da82:	9309      	str	r3, [sp, #36]	; 0x24
 800da84:	e767      	b.n	800d956 <_svfiprintf_r+0x4e>
 800da86:	460c      	mov	r4, r1
 800da88:	2001      	movs	r0, #1
 800da8a:	fb0c 3202 	mla	r2, ip, r2, r3
 800da8e:	e7a5      	b.n	800d9dc <_svfiprintf_r+0xd4>
 800da90:	2300      	movs	r3, #0
 800da92:	f04f 0c0a 	mov.w	ip, #10
 800da96:	4619      	mov	r1, r3
 800da98:	3401      	adds	r4, #1
 800da9a:	9305      	str	r3, [sp, #20]
 800da9c:	4620      	mov	r0, r4
 800da9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800daa2:	3a30      	subs	r2, #48	; 0x30
 800daa4:	2a09      	cmp	r2, #9
 800daa6:	d903      	bls.n	800dab0 <_svfiprintf_r+0x1a8>
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d0c5      	beq.n	800da38 <_svfiprintf_r+0x130>
 800daac:	9105      	str	r1, [sp, #20]
 800daae:	e7c3      	b.n	800da38 <_svfiprintf_r+0x130>
 800dab0:	4604      	mov	r4, r0
 800dab2:	2301      	movs	r3, #1
 800dab4:	fb0c 2101 	mla	r1, ip, r1, r2
 800dab8:	e7f0      	b.n	800da9c <_svfiprintf_r+0x194>
 800daba:	ab03      	add	r3, sp, #12
 800dabc:	9300      	str	r3, [sp, #0]
 800dabe:	462a      	mov	r2, r5
 800dac0:	4638      	mov	r0, r7
 800dac2:	4b0f      	ldr	r3, [pc, #60]	; (800db00 <_svfiprintf_r+0x1f8>)
 800dac4:	a904      	add	r1, sp, #16
 800dac6:	f7fd fe9b 	bl	800b800 <_printf_float>
 800daca:	1c42      	adds	r2, r0, #1
 800dacc:	4606      	mov	r6, r0
 800dace:	d1d6      	bne.n	800da7e <_svfiprintf_r+0x176>
 800dad0:	89ab      	ldrh	r3, [r5, #12]
 800dad2:	065b      	lsls	r3, r3, #25
 800dad4:	f53f af2c 	bmi.w	800d930 <_svfiprintf_r+0x28>
 800dad8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dada:	b01d      	add	sp, #116	; 0x74
 800dadc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dae0:	ab03      	add	r3, sp, #12
 800dae2:	9300      	str	r3, [sp, #0]
 800dae4:	462a      	mov	r2, r5
 800dae6:	4638      	mov	r0, r7
 800dae8:	4b05      	ldr	r3, [pc, #20]	; (800db00 <_svfiprintf_r+0x1f8>)
 800daea:	a904      	add	r1, sp, #16
 800daec:	f7fe f924 	bl	800bd38 <_printf_i>
 800daf0:	e7eb      	b.n	800daca <_svfiprintf_r+0x1c2>
 800daf2:	bf00      	nop
 800daf4:	0800f8e4 	.word	0x0800f8e4
 800daf8:	0800f8ee 	.word	0x0800f8ee
 800dafc:	0800b801 	.word	0x0800b801
 800db00:	0800d851 	.word	0x0800d851
 800db04:	0800f8ea 	.word	0x0800f8ea

0800db08 <__sfputc_r>:
 800db08:	6893      	ldr	r3, [r2, #8]
 800db0a:	b410      	push	{r4}
 800db0c:	3b01      	subs	r3, #1
 800db0e:	2b00      	cmp	r3, #0
 800db10:	6093      	str	r3, [r2, #8]
 800db12:	da07      	bge.n	800db24 <__sfputc_r+0x1c>
 800db14:	6994      	ldr	r4, [r2, #24]
 800db16:	42a3      	cmp	r3, r4
 800db18:	db01      	blt.n	800db1e <__sfputc_r+0x16>
 800db1a:	290a      	cmp	r1, #10
 800db1c:	d102      	bne.n	800db24 <__sfputc_r+0x1c>
 800db1e:	bc10      	pop	{r4}
 800db20:	f000 b98e 	b.w	800de40 <__swbuf_r>
 800db24:	6813      	ldr	r3, [r2, #0]
 800db26:	1c58      	adds	r0, r3, #1
 800db28:	6010      	str	r0, [r2, #0]
 800db2a:	7019      	strb	r1, [r3, #0]
 800db2c:	4608      	mov	r0, r1
 800db2e:	bc10      	pop	{r4}
 800db30:	4770      	bx	lr

0800db32 <__sfputs_r>:
 800db32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db34:	4606      	mov	r6, r0
 800db36:	460f      	mov	r7, r1
 800db38:	4614      	mov	r4, r2
 800db3a:	18d5      	adds	r5, r2, r3
 800db3c:	42ac      	cmp	r4, r5
 800db3e:	d101      	bne.n	800db44 <__sfputs_r+0x12>
 800db40:	2000      	movs	r0, #0
 800db42:	e007      	b.n	800db54 <__sfputs_r+0x22>
 800db44:	463a      	mov	r2, r7
 800db46:	4630      	mov	r0, r6
 800db48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db4c:	f7ff ffdc 	bl	800db08 <__sfputc_r>
 800db50:	1c43      	adds	r3, r0, #1
 800db52:	d1f3      	bne.n	800db3c <__sfputs_r+0xa>
 800db54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800db58 <_vfiprintf_r>:
 800db58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db5c:	460d      	mov	r5, r1
 800db5e:	4614      	mov	r4, r2
 800db60:	4698      	mov	r8, r3
 800db62:	4606      	mov	r6, r0
 800db64:	b09d      	sub	sp, #116	; 0x74
 800db66:	b118      	cbz	r0, 800db70 <_vfiprintf_r+0x18>
 800db68:	6983      	ldr	r3, [r0, #24]
 800db6a:	b90b      	cbnz	r3, 800db70 <_vfiprintf_r+0x18>
 800db6c:	f7ff fa12 	bl	800cf94 <__sinit>
 800db70:	4b89      	ldr	r3, [pc, #548]	; (800dd98 <_vfiprintf_r+0x240>)
 800db72:	429d      	cmp	r5, r3
 800db74:	d11b      	bne.n	800dbae <_vfiprintf_r+0x56>
 800db76:	6875      	ldr	r5, [r6, #4]
 800db78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800db7a:	07d9      	lsls	r1, r3, #31
 800db7c:	d405      	bmi.n	800db8a <_vfiprintf_r+0x32>
 800db7e:	89ab      	ldrh	r3, [r5, #12]
 800db80:	059a      	lsls	r2, r3, #22
 800db82:	d402      	bmi.n	800db8a <_vfiprintf_r+0x32>
 800db84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db86:	f7ff faa8 	bl	800d0da <__retarget_lock_acquire_recursive>
 800db8a:	89ab      	ldrh	r3, [r5, #12]
 800db8c:	071b      	lsls	r3, r3, #28
 800db8e:	d501      	bpl.n	800db94 <_vfiprintf_r+0x3c>
 800db90:	692b      	ldr	r3, [r5, #16]
 800db92:	b9eb      	cbnz	r3, 800dbd0 <_vfiprintf_r+0x78>
 800db94:	4629      	mov	r1, r5
 800db96:	4630      	mov	r0, r6
 800db98:	f000 f9b6 	bl	800df08 <__swsetup_r>
 800db9c:	b1c0      	cbz	r0, 800dbd0 <_vfiprintf_r+0x78>
 800db9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dba0:	07dc      	lsls	r4, r3, #31
 800dba2:	d50e      	bpl.n	800dbc2 <_vfiprintf_r+0x6a>
 800dba4:	f04f 30ff 	mov.w	r0, #4294967295
 800dba8:	b01d      	add	sp, #116	; 0x74
 800dbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbae:	4b7b      	ldr	r3, [pc, #492]	; (800dd9c <_vfiprintf_r+0x244>)
 800dbb0:	429d      	cmp	r5, r3
 800dbb2:	d101      	bne.n	800dbb8 <_vfiprintf_r+0x60>
 800dbb4:	68b5      	ldr	r5, [r6, #8]
 800dbb6:	e7df      	b.n	800db78 <_vfiprintf_r+0x20>
 800dbb8:	4b79      	ldr	r3, [pc, #484]	; (800dda0 <_vfiprintf_r+0x248>)
 800dbba:	429d      	cmp	r5, r3
 800dbbc:	bf08      	it	eq
 800dbbe:	68f5      	ldreq	r5, [r6, #12]
 800dbc0:	e7da      	b.n	800db78 <_vfiprintf_r+0x20>
 800dbc2:	89ab      	ldrh	r3, [r5, #12]
 800dbc4:	0598      	lsls	r0, r3, #22
 800dbc6:	d4ed      	bmi.n	800dba4 <_vfiprintf_r+0x4c>
 800dbc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dbca:	f7ff fa87 	bl	800d0dc <__retarget_lock_release_recursive>
 800dbce:	e7e9      	b.n	800dba4 <_vfiprintf_r+0x4c>
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	9309      	str	r3, [sp, #36]	; 0x24
 800dbd4:	2320      	movs	r3, #32
 800dbd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dbda:	2330      	movs	r3, #48	; 0x30
 800dbdc:	f04f 0901 	mov.w	r9, #1
 800dbe0:	f8cd 800c 	str.w	r8, [sp, #12]
 800dbe4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800dda4 <_vfiprintf_r+0x24c>
 800dbe8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dbec:	4623      	mov	r3, r4
 800dbee:	469a      	mov	sl, r3
 800dbf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbf4:	b10a      	cbz	r2, 800dbfa <_vfiprintf_r+0xa2>
 800dbf6:	2a25      	cmp	r2, #37	; 0x25
 800dbf8:	d1f9      	bne.n	800dbee <_vfiprintf_r+0x96>
 800dbfa:	ebba 0b04 	subs.w	fp, sl, r4
 800dbfe:	d00b      	beq.n	800dc18 <_vfiprintf_r+0xc0>
 800dc00:	465b      	mov	r3, fp
 800dc02:	4622      	mov	r2, r4
 800dc04:	4629      	mov	r1, r5
 800dc06:	4630      	mov	r0, r6
 800dc08:	f7ff ff93 	bl	800db32 <__sfputs_r>
 800dc0c:	3001      	adds	r0, #1
 800dc0e:	f000 80aa 	beq.w	800dd66 <_vfiprintf_r+0x20e>
 800dc12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc14:	445a      	add	r2, fp
 800dc16:	9209      	str	r2, [sp, #36]	; 0x24
 800dc18:	f89a 3000 	ldrb.w	r3, [sl]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	f000 80a2 	beq.w	800dd66 <_vfiprintf_r+0x20e>
 800dc22:	2300      	movs	r3, #0
 800dc24:	f04f 32ff 	mov.w	r2, #4294967295
 800dc28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc2c:	f10a 0a01 	add.w	sl, sl, #1
 800dc30:	9304      	str	r3, [sp, #16]
 800dc32:	9307      	str	r3, [sp, #28]
 800dc34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc38:	931a      	str	r3, [sp, #104]	; 0x68
 800dc3a:	4654      	mov	r4, sl
 800dc3c:	2205      	movs	r2, #5
 800dc3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc42:	4858      	ldr	r0, [pc, #352]	; (800dda4 <_vfiprintf_r+0x24c>)
 800dc44:	f7ff fa4b 	bl	800d0de <memchr>
 800dc48:	9a04      	ldr	r2, [sp, #16]
 800dc4a:	b9d8      	cbnz	r0, 800dc84 <_vfiprintf_r+0x12c>
 800dc4c:	06d1      	lsls	r1, r2, #27
 800dc4e:	bf44      	itt	mi
 800dc50:	2320      	movmi	r3, #32
 800dc52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc56:	0713      	lsls	r3, r2, #28
 800dc58:	bf44      	itt	mi
 800dc5a:	232b      	movmi	r3, #43	; 0x2b
 800dc5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc60:	f89a 3000 	ldrb.w	r3, [sl]
 800dc64:	2b2a      	cmp	r3, #42	; 0x2a
 800dc66:	d015      	beq.n	800dc94 <_vfiprintf_r+0x13c>
 800dc68:	4654      	mov	r4, sl
 800dc6a:	2000      	movs	r0, #0
 800dc6c:	f04f 0c0a 	mov.w	ip, #10
 800dc70:	9a07      	ldr	r2, [sp, #28]
 800dc72:	4621      	mov	r1, r4
 800dc74:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc78:	3b30      	subs	r3, #48	; 0x30
 800dc7a:	2b09      	cmp	r3, #9
 800dc7c:	d94e      	bls.n	800dd1c <_vfiprintf_r+0x1c4>
 800dc7e:	b1b0      	cbz	r0, 800dcae <_vfiprintf_r+0x156>
 800dc80:	9207      	str	r2, [sp, #28]
 800dc82:	e014      	b.n	800dcae <_vfiprintf_r+0x156>
 800dc84:	eba0 0308 	sub.w	r3, r0, r8
 800dc88:	fa09 f303 	lsl.w	r3, r9, r3
 800dc8c:	4313      	orrs	r3, r2
 800dc8e:	46a2      	mov	sl, r4
 800dc90:	9304      	str	r3, [sp, #16]
 800dc92:	e7d2      	b.n	800dc3a <_vfiprintf_r+0xe2>
 800dc94:	9b03      	ldr	r3, [sp, #12]
 800dc96:	1d19      	adds	r1, r3, #4
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	9103      	str	r1, [sp, #12]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	bfbb      	ittet	lt
 800dca0:	425b      	neglt	r3, r3
 800dca2:	f042 0202 	orrlt.w	r2, r2, #2
 800dca6:	9307      	strge	r3, [sp, #28]
 800dca8:	9307      	strlt	r3, [sp, #28]
 800dcaa:	bfb8      	it	lt
 800dcac:	9204      	strlt	r2, [sp, #16]
 800dcae:	7823      	ldrb	r3, [r4, #0]
 800dcb0:	2b2e      	cmp	r3, #46	; 0x2e
 800dcb2:	d10c      	bne.n	800dcce <_vfiprintf_r+0x176>
 800dcb4:	7863      	ldrb	r3, [r4, #1]
 800dcb6:	2b2a      	cmp	r3, #42	; 0x2a
 800dcb8:	d135      	bne.n	800dd26 <_vfiprintf_r+0x1ce>
 800dcba:	9b03      	ldr	r3, [sp, #12]
 800dcbc:	3402      	adds	r4, #2
 800dcbe:	1d1a      	adds	r2, r3, #4
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	9203      	str	r2, [sp, #12]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	bfb8      	it	lt
 800dcc8:	f04f 33ff 	movlt.w	r3, #4294967295
 800dccc:	9305      	str	r3, [sp, #20]
 800dcce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ddb4 <_vfiprintf_r+0x25c>
 800dcd2:	2203      	movs	r2, #3
 800dcd4:	4650      	mov	r0, sl
 800dcd6:	7821      	ldrb	r1, [r4, #0]
 800dcd8:	f7ff fa01 	bl	800d0de <memchr>
 800dcdc:	b140      	cbz	r0, 800dcf0 <_vfiprintf_r+0x198>
 800dcde:	2340      	movs	r3, #64	; 0x40
 800dce0:	eba0 000a 	sub.w	r0, r0, sl
 800dce4:	fa03 f000 	lsl.w	r0, r3, r0
 800dce8:	9b04      	ldr	r3, [sp, #16]
 800dcea:	3401      	adds	r4, #1
 800dcec:	4303      	orrs	r3, r0
 800dcee:	9304      	str	r3, [sp, #16]
 800dcf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcf4:	2206      	movs	r2, #6
 800dcf6:	482c      	ldr	r0, [pc, #176]	; (800dda8 <_vfiprintf_r+0x250>)
 800dcf8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dcfc:	f7ff f9ef 	bl	800d0de <memchr>
 800dd00:	2800      	cmp	r0, #0
 800dd02:	d03f      	beq.n	800dd84 <_vfiprintf_r+0x22c>
 800dd04:	4b29      	ldr	r3, [pc, #164]	; (800ddac <_vfiprintf_r+0x254>)
 800dd06:	bb1b      	cbnz	r3, 800dd50 <_vfiprintf_r+0x1f8>
 800dd08:	9b03      	ldr	r3, [sp, #12]
 800dd0a:	3307      	adds	r3, #7
 800dd0c:	f023 0307 	bic.w	r3, r3, #7
 800dd10:	3308      	adds	r3, #8
 800dd12:	9303      	str	r3, [sp, #12]
 800dd14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd16:	443b      	add	r3, r7
 800dd18:	9309      	str	r3, [sp, #36]	; 0x24
 800dd1a:	e767      	b.n	800dbec <_vfiprintf_r+0x94>
 800dd1c:	460c      	mov	r4, r1
 800dd1e:	2001      	movs	r0, #1
 800dd20:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd24:	e7a5      	b.n	800dc72 <_vfiprintf_r+0x11a>
 800dd26:	2300      	movs	r3, #0
 800dd28:	f04f 0c0a 	mov.w	ip, #10
 800dd2c:	4619      	mov	r1, r3
 800dd2e:	3401      	adds	r4, #1
 800dd30:	9305      	str	r3, [sp, #20]
 800dd32:	4620      	mov	r0, r4
 800dd34:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd38:	3a30      	subs	r2, #48	; 0x30
 800dd3a:	2a09      	cmp	r2, #9
 800dd3c:	d903      	bls.n	800dd46 <_vfiprintf_r+0x1ee>
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d0c5      	beq.n	800dcce <_vfiprintf_r+0x176>
 800dd42:	9105      	str	r1, [sp, #20]
 800dd44:	e7c3      	b.n	800dcce <_vfiprintf_r+0x176>
 800dd46:	4604      	mov	r4, r0
 800dd48:	2301      	movs	r3, #1
 800dd4a:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd4e:	e7f0      	b.n	800dd32 <_vfiprintf_r+0x1da>
 800dd50:	ab03      	add	r3, sp, #12
 800dd52:	9300      	str	r3, [sp, #0]
 800dd54:	462a      	mov	r2, r5
 800dd56:	4630      	mov	r0, r6
 800dd58:	4b15      	ldr	r3, [pc, #84]	; (800ddb0 <_vfiprintf_r+0x258>)
 800dd5a:	a904      	add	r1, sp, #16
 800dd5c:	f7fd fd50 	bl	800b800 <_printf_float>
 800dd60:	4607      	mov	r7, r0
 800dd62:	1c78      	adds	r0, r7, #1
 800dd64:	d1d6      	bne.n	800dd14 <_vfiprintf_r+0x1bc>
 800dd66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd68:	07d9      	lsls	r1, r3, #31
 800dd6a:	d405      	bmi.n	800dd78 <_vfiprintf_r+0x220>
 800dd6c:	89ab      	ldrh	r3, [r5, #12]
 800dd6e:	059a      	lsls	r2, r3, #22
 800dd70:	d402      	bmi.n	800dd78 <_vfiprintf_r+0x220>
 800dd72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd74:	f7ff f9b2 	bl	800d0dc <__retarget_lock_release_recursive>
 800dd78:	89ab      	ldrh	r3, [r5, #12]
 800dd7a:	065b      	lsls	r3, r3, #25
 800dd7c:	f53f af12 	bmi.w	800dba4 <_vfiprintf_r+0x4c>
 800dd80:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd82:	e711      	b.n	800dba8 <_vfiprintf_r+0x50>
 800dd84:	ab03      	add	r3, sp, #12
 800dd86:	9300      	str	r3, [sp, #0]
 800dd88:	462a      	mov	r2, r5
 800dd8a:	4630      	mov	r0, r6
 800dd8c:	4b08      	ldr	r3, [pc, #32]	; (800ddb0 <_vfiprintf_r+0x258>)
 800dd8e:	a904      	add	r1, sp, #16
 800dd90:	f7fd ffd2 	bl	800bd38 <_printf_i>
 800dd94:	e7e4      	b.n	800dd60 <_vfiprintf_r+0x208>
 800dd96:	bf00      	nop
 800dd98:	0800f748 	.word	0x0800f748
 800dd9c:	0800f768 	.word	0x0800f768
 800dda0:	0800f728 	.word	0x0800f728
 800dda4:	0800f8e4 	.word	0x0800f8e4
 800dda8:	0800f8ee 	.word	0x0800f8ee
 800ddac:	0800b801 	.word	0x0800b801
 800ddb0:	0800db33 	.word	0x0800db33
 800ddb4:	0800f8ea 	.word	0x0800f8ea

0800ddb8 <__sread>:
 800ddb8:	b510      	push	{r4, lr}
 800ddba:	460c      	mov	r4, r1
 800ddbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddc0:	f000 fada 	bl	800e378 <_read_r>
 800ddc4:	2800      	cmp	r0, #0
 800ddc6:	bfab      	itete	ge
 800ddc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ddca:	89a3      	ldrhlt	r3, [r4, #12]
 800ddcc:	181b      	addge	r3, r3, r0
 800ddce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ddd2:	bfac      	ite	ge
 800ddd4:	6563      	strge	r3, [r4, #84]	; 0x54
 800ddd6:	81a3      	strhlt	r3, [r4, #12]
 800ddd8:	bd10      	pop	{r4, pc}

0800ddda <__swrite>:
 800ddda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddde:	461f      	mov	r7, r3
 800dde0:	898b      	ldrh	r3, [r1, #12]
 800dde2:	4605      	mov	r5, r0
 800dde4:	05db      	lsls	r3, r3, #23
 800dde6:	460c      	mov	r4, r1
 800dde8:	4616      	mov	r6, r2
 800ddea:	d505      	bpl.n	800ddf8 <__swrite+0x1e>
 800ddec:	2302      	movs	r3, #2
 800ddee:	2200      	movs	r2, #0
 800ddf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddf4:	f000 f9f8 	bl	800e1e8 <_lseek_r>
 800ddf8:	89a3      	ldrh	r3, [r4, #12]
 800ddfa:	4632      	mov	r2, r6
 800ddfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800de00:	81a3      	strh	r3, [r4, #12]
 800de02:	4628      	mov	r0, r5
 800de04:	463b      	mov	r3, r7
 800de06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de0e:	f000 b869 	b.w	800dee4 <_write_r>

0800de12 <__sseek>:
 800de12:	b510      	push	{r4, lr}
 800de14:	460c      	mov	r4, r1
 800de16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de1a:	f000 f9e5 	bl	800e1e8 <_lseek_r>
 800de1e:	1c43      	adds	r3, r0, #1
 800de20:	89a3      	ldrh	r3, [r4, #12]
 800de22:	bf15      	itete	ne
 800de24:	6560      	strne	r0, [r4, #84]	; 0x54
 800de26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800de2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800de2e:	81a3      	strheq	r3, [r4, #12]
 800de30:	bf18      	it	ne
 800de32:	81a3      	strhne	r3, [r4, #12]
 800de34:	bd10      	pop	{r4, pc}

0800de36 <__sclose>:
 800de36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de3a:	f000 b8f1 	b.w	800e020 <_close_r>
	...

0800de40 <__swbuf_r>:
 800de40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de42:	460e      	mov	r6, r1
 800de44:	4614      	mov	r4, r2
 800de46:	4605      	mov	r5, r0
 800de48:	b118      	cbz	r0, 800de52 <__swbuf_r+0x12>
 800de4a:	6983      	ldr	r3, [r0, #24]
 800de4c:	b90b      	cbnz	r3, 800de52 <__swbuf_r+0x12>
 800de4e:	f7ff f8a1 	bl	800cf94 <__sinit>
 800de52:	4b21      	ldr	r3, [pc, #132]	; (800ded8 <__swbuf_r+0x98>)
 800de54:	429c      	cmp	r4, r3
 800de56:	d12b      	bne.n	800deb0 <__swbuf_r+0x70>
 800de58:	686c      	ldr	r4, [r5, #4]
 800de5a:	69a3      	ldr	r3, [r4, #24]
 800de5c:	60a3      	str	r3, [r4, #8]
 800de5e:	89a3      	ldrh	r3, [r4, #12]
 800de60:	071a      	lsls	r2, r3, #28
 800de62:	d52f      	bpl.n	800dec4 <__swbuf_r+0x84>
 800de64:	6923      	ldr	r3, [r4, #16]
 800de66:	b36b      	cbz	r3, 800dec4 <__swbuf_r+0x84>
 800de68:	6923      	ldr	r3, [r4, #16]
 800de6a:	6820      	ldr	r0, [r4, #0]
 800de6c:	b2f6      	uxtb	r6, r6
 800de6e:	1ac0      	subs	r0, r0, r3
 800de70:	6963      	ldr	r3, [r4, #20]
 800de72:	4637      	mov	r7, r6
 800de74:	4283      	cmp	r3, r0
 800de76:	dc04      	bgt.n	800de82 <__swbuf_r+0x42>
 800de78:	4621      	mov	r1, r4
 800de7a:	4628      	mov	r0, r5
 800de7c:	f000 f966 	bl	800e14c <_fflush_r>
 800de80:	bb30      	cbnz	r0, 800ded0 <__swbuf_r+0x90>
 800de82:	68a3      	ldr	r3, [r4, #8]
 800de84:	3001      	adds	r0, #1
 800de86:	3b01      	subs	r3, #1
 800de88:	60a3      	str	r3, [r4, #8]
 800de8a:	6823      	ldr	r3, [r4, #0]
 800de8c:	1c5a      	adds	r2, r3, #1
 800de8e:	6022      	str	r2, [r4, #0]
 800de90:	701e      	strb	r6, [r3, #0]
 800de92:	6963      	ldr	r3, [r4, #20]
 800de94:	4283      	cmp	r3, r0
 800de96:	d004      	beq.n	800dea2 <__swbuf_r+0x62>
 800de98:	89a3      	ldrh	r3, [r4, #12]
 800de9a:	07db      	lsls	r3, r3, #31
 800de9c:	d506      	bpl.n	800deac <__swbuf_r+0x6c>
 800de9e:	2e0a      	cmp	r6, #10
 800dea0:	d104      	bne.n	800deac <__swbuf_r+0x6c>
 800dea2:	4621      	mov	r1, r4
 800dea4:	4628      	mov	r0, r5
 800dea6:	f000 f951 	bl	800e14c <_fflush_r>
 800deaa:	b988      	cbnz	r0, 800ded0 <__swbuf_r+0x90>
 800deac:	4638      	mov	r0, r7
 800deae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800deb0:	4b0a      	ldr	r3, [pc, #40]	; (800dedc <__swbuf_r+0x9c>)
 800deb2:	429c      	cmp	r4, r3
 800deb4:	d101      	bne.n	800deba <__swbuf_r+0x7a>
 800deb6:	68ac      	ldr	r4, [r5, #8]
 800deb8:	e7cf      	b.n	800de5a <__swbuf_r+0x1a>
 800deba:	4b09      	ldr	r3, [pc, #36]	; (800dee0 <__swbuf_r+0xa0>)
 800debc:	429c      	cmp	r4, r3
 800debe:	bf08      	it	eq
 800dec0:	68ec      	ldreq	r4, [r5, #12]
 800dec2:	e7ca      	b.n	800de5a <__swbuf_r+0x1a>
 800dec4:	4621      	mov	r1, r4
 800dec6:	4628      	mov	r0, r5
 800dec8:	f000 f81e 	bl	800df08 <__swsetup_r>
 800decc:	2800      	cmp	r0, #0
 800dece:	d0cb      	beq.n	800de68 <__swbuf_r+0x28>
 800ded0:	f04f 37ff 	mov.w	r7, #4294967295
 800ded4:	e7ea      	b.n	800deac <__swbuf_r+0x6c>
 800ded6:	bf00      	nop
 800ded8:	0800f748 	.word	0x0800f748
 800dedc:	0800f768 	.word	0x0800f768
 800dee0:	0800f728 	.word	0x0800f728

0800dee4 <_write_r>:
 800dee4:	b538      	push	{r3, r4, r5, lr}
 800dee6:	4604      	mov	r4, r0
 800dee8:	4608      	mov	r0, r1
 800deea:	4611      	mov	r1, r2
 800deec:	2200      	movs	r2, #0
 800deee:	4d05      	ldr	r5, [pc, #20]	; (800df04 <_write_r+0x20>)
 800def0:	602a      	str	r2, [r5, #0]
 800def2:	461a      	mov	r2, r3
 800def4:	f7f4 fcee 	bl	80028d4 <_write>
 800def8:	1c43      	adds	r3, r0, #1
 800defa:	d102      	bne.n	800df02 <_write_r+0x1e>
 800defc:	682b      	ldr	r3, [r5, #0]
 800defe:	b103      	cbz	r3, 800df02 <_write_r+0x1e>
 800df00:	6023      	str	r3, [r4, #0]
 800df02:	bd38      	pop	{r3, r4, r5, pc}
 800df04:	20000bb8 	.word	0x20000bb8

0800df08 <__swsetup_r>:
 800df08:	4b32      	ldr	r3, [pc, #200]	; (800dfd4 <__swsetup_r+0xcc>)
 800df0a:	b570      	push	{r4, r5, r6, lr}
 800df0c:	681d      	ldr	r5, [r3, #0]
 800df0e:	4606      	mov	r6, r0
 800df10:	460c      	mov	r4, r1
 800df12:	b125      	cbz	r5, 800df1e <__swsetup_r+0x16>
 800df14:	69ab      	ldr	r3, [r5, #24]
 800df16:	b913      	cbnz	r3, 800df1e <__swsetup_r+0x16>
 800df18:	4628      	mov	r0, r5
 800df1a:	f7ff f83b 	bl	800cf94 <__sinit>
 800df1e:	4b2e      	ldr	r3, [pc, #184]	; (800dfd8 <__swsetup_r+0xd0>)
 800df20:	429c      	cmp	r4, r3
 800df22:	d10f      	bne.n	800df44 <__swsetup_r+0x3c>
 800df24:	686c      	ldr	r4, [r5, #4]
 800df26:	89a3      	ldrh	r3, [r4, #12]
 800df28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800df2c:	0719      	lsls	r1, r3, #28
 800df2e:	d42c      	bmi.n	800df8a <__swsetup_r+0x82>
 800df30:	06dd      	lsls	r5, r3, #27
 800df32:	d411      	bmi.n	800df58 <__swsetup_r+0x50>
 800df34:	2309      	movs	r3, #9
 800df36:	6033      	str	r3, [r6, #0]
 800df38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800df3c:	f04f 30ff 	mov.w	r0, #4294967295
 800df40:	81a3      	strh	r3, [r4, #12]
 800df42:	e03e      	b.n	800dfc2 <__swsetup_r+0xba>
 800df44:	4b25      	ldr	r3, [pc, #148]	; (800dfdc <__swsetup_r+0xd4>)
 800df46:	429c      	cmp	r4, r3
 800df48:	d101      	bne.n	800df4e <__swsetup_r+0x46>
 800df4a:	68ac      	ldr	r4, [r5, #8]
 800df4c:	e7eb      	b.n	800df26 <__swsetup_r+0x1e>
 800df4e:	4b24      	ldr	r3, [pc, #144]	; (800dfe0 <__swsetup_r+0xd8>)
 800df50:	429c      	cmp	r4, r3
 800df52:	bf08      	it	eq
 800df54:	68ec      	ldreq	r4, [r5, #12]
 800df56:	e7e6      	b.n	800df26 <__swsetup_r+0x1e>
 800df58:	0758      	lsls	r0, r3, #29
 800df5a:	d512      	bpl.n	800df82 <__swsetup_r+0x7a>
 800df5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800df5e:	b141      	cbz	r1, 800df72 <__swsetup_r+0x6a>
 800df60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800df64:	4299      	cmp	r1, r3
 800df66:	d002      	beq.n	800df6e <__swsetup_r+0x66>
 800df68:	4630      	mov	r0, r6
 800df6a:	f7fd fb05 	bl	800b578 <_free_r>
 800df6e:	2300      	movs	r3, #0
 800df70:	6363      	str	r3, [r4, #52]	; 0x34
 800df72:	89a3      	ldrh	r3, [r4, #12]
 800df74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800df78:	81a3      	strh	r3, [r4, #12]
 800df7a:	2300      	movs	r3, #0
 800df7c:	6063      	str	r3, [r4, #4]
 800df7e:	6923      	ldr	r3, [r4, #16]
 800df80:	6023      	str	r3, [r4, #0]
 800df82:	89a3      	ldrh	r3, [r4, #12]
 800df84:	f043 0308 	orr.w	r3, r3, #8
 800df88:	81a3      	strh	r3, [r4, #12]
 800df8a:	6923      	ldr	r3, [r4, #16]
 800df8c:	b94b      	cbnz	r3, 800dfa2 <__swsetup_r+0x9a>
 800df8e:	89a3      	ldrh	r3, [r4, #12]
 800df90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800df94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df98:	d003      	beq.n	800dfa2 <__swsetup_r+0x9a>
 800df9a:	4621      	mov	r1, r4
 800df9c:	4630      	mov	r0, r6
 800df9e:	f000 f959 	bl	800e254 <__smakebuf_r>
 800dfa2:	89a0      	ldrh	r0, [r4, #12]
 800dfa4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dfa8:	f010 0301 	ands.w	r3, r0, #1
 800dfac:	d00a      	beq.n	800dfc4 <__swsetup_r+0xbc>
 800dfae:	2300      	movs	r3, #0
 800dfb0:	60a3      	str	r3, [r4, #8]
 800dfb2:	6963      	ldr	r3, [r4, #20]
 800dfb4:	425b      	negs	r3, r3
 800dfb6:	61a3      	str	r3, [r4, #24]
 800dfb8:	6923      	ldr	r3, [r4, #16]
 800dfba:	b943      	cbnz	r3, 800dfce <__swsetup_r+0xc6>
 800dfbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dfc0:	d1ba      	bne.n	800df38 <__swsetup_r+0x30>
 800dfc2:	bd70      	pop	{r4, r5, r6, pc}
 800dfc4:	0781      	lsls	r1, r0, #30
 800dfc6:	bf58      	it	pl
 800dfc8:	6963      	ldrpl	r3, [r4, #20]
 800dfca:	60a3      	str	r3, [r4, #8]
 800dfcc:	e7f4      	b.n	800dfb8 <__swsetup_r+0xb0>
 800dfce:	2000      	movs	r0, #0
 800dfd0:	e7f7      	b.n	800dfc2 <__swsetup_r+0xba>
 800dfd2:	bf00      	nop
 800dfd4:	2000001c 	.word	0x2000001c
 800dfd8:	0800f748 	.word	0x0800f748
 800dfdc:	0800f768 	.word	0x0800f768
 800dfe0:	0800f728 	.word	0x0800f728

0800dfe4 <__assert_func>:
 800dfe4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dfe6:	4614      	mov	r4, r2
 800dfe8:	461a      	mov	r2, r3
 800dfea:	4b09      	ldr	r3, [pc, #36]	; (800e010 <__assert_func+0x2c>)
 800dfec:	4605      	mov	r5, r0
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	68d8      	ldr	r0, [r3, #12]
 800dff2:	b14c      	cbz	r4, 800e008 <__assert_func+0x24>
 800dff4:	4b07      	ldr	r3, [pc, #28]	; (800e014 <__assert_func+0x30>)
 800dff6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dffa:	9100      	str	r1, [sp, #0]
 800dffc:	462b      	mov	r3, r5
 800dffe:	4906      	ldr	r1, [pc, #24]	; (800e018 <__assert_func+0x34>)
 800e000:	f000 f8e0 	bl	800e1c4 <fiprintf>
 800e004:	f000 f9d7 	bl	800e3b6 <abort>
 800e008:	4b04      	ldr	r3, [pc, #16]	; (800e01c <__assert_func+0x38>)
 800e00a:	461c      	mov	r4, r3
 800e00c:	e7f3      	b.n	800dff6 <__assert_func+0x12>
 800e00e:	bf00      	nop
 800e010:	2000001c 	.word	0x2000001c
 800e014:	0800f8f5 	.word	0x0800f8f5
 800e018:	0800f902 	.word	0x0800f902
 800e01c:	0800f930 	.word	0x0800f930

0800e020 <_close_r>:
 800e020:	b538      	push	{r3, r4, r5, lr}
 800e022:	2300      	movs	r3, #0
 800e024:	4d05      	ldr	r5, [pc, #20]	; (800e03c <_close_r+0x1c>)
 800e026:	4604      	mov	r4, r0
 800e028:	4608      	mov	r0, r1
 800e02a:	602b      	str	r3, [r5, #0]
 800e02c:	f7f4 fc7c 	bl	8002928 <_close>
 800e030:	1c43      	adds	r3, r0, #1
 800e032:	d102      	bne.n	800e03a <_close_r+0x1a>
 800e034:	682b      	ldr	r3, [r5, #0]
 800e036:	b103      	cbz	r3, 800e03a <_close_r+0x1a>
 800e038:	6023      	str	r3, [r4, #0]
 800e03a:	bd38      	pop	{r3, r4, r5, pc}
 800e03c:	20000bb8 	.word	0x20000bb8

0800e040 <__sflush_r>:
 800e040:	898a      	ldrh	r2, [r1, #12]
 800e042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e046:	4605      	mov	r5, r0
 800e048:	0710      	lsls	r0, r2, #28
 800e04a:	460c      	mov	r4, r1
 800e04c:	d458      	bmi.n	800e100 <__sflush_r+0xc0>
 800e04e:	684b      	ldr	r3, [r1, #4]
 800e050:	2b00      	cmp	r3, #0
 800e052:	dc05      	bgt.n	800e060 <__sflush_r+0x20>
 800e054:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e056:	2b00      	cmp	r3, #0
 800e058:	dc02      	bgt.n	800e060 <__sflush_r+0x20>
 800e05a:	2000      	movs	r0, #0
 800e05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e060:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e062:	2e00      	cmp	r6, #0
 800e064:	d0f9      	beq.n	800e05a <__sflush_r+0x1a>
 800e066:	2300      	movs	r3, #0
 800e068:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e06c:	682f      	ldr	r7, [r5, #0]
 800e06e:	602b      	str	r3, [r5, #0]
 800e070:	d032      	beq.n	800e0d8 <__sflush_r+0x98>
 800e072:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e074:	89a3      	ldrh	r3, [r4, #12]
 800e076:	075a      	lsls	r2, r3, #29
 800e078:	d505      	bpl.n	800e086 <__sflush_r+0x46>
 800e07a:	6863      	ldr	r3, [r4, #4]
 800e07c:	1ac0      	subs	r0, r0, r3
 800e07e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e080:	b10b      	cbz	r3, 800e086 <__sflush_r+0x46>
 800e082:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e084:	1ac0      	subs	r0, r0, r3
 800e086:	2300      	movs	r3, #0
 800e088:	4602      	mov	r2, r0
 800e08a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e08c:	4628      	mov	r0, r5
 800e08e:	6a21      	ldr	r1, [r4, #32]
 800e090:	47b0      	blx	r6
 800e092:	1c43      	adds	r3, r0, #1
 800e094:	89a3      	ldrh	r3, [r4, #12]
 800e096:	d106      	bne.n	800e0a6 <__sflush_r+0x66>
 800e098:	6829      	ldr	r1, [r5, #0]
 800e09a:	291d      	cmp	r1, #29
 800e09c:	d82c      	bhi.n	800e0f8 <__sflush_r+0xb8>
 800e09e:	4a2a      	ldr	r2, [pc, #168]	; (800e148 <__sflush_r+0x108>)
 800e0a0:	40ca      	lsrs	r2, r1
 800e0a2:	07d6      	lsls	r6, r2, #31
 800e0a4:	d528      	bpl.n	800e0f8 <__sflush_r+0xb8>
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	6062      	str	r2, [r4, #4]
 800e0aa:	6922      	ldr	r2, [r4, #16]
 800e0ac:	04d9      	lsls	r1, r3, #19
 800e0ae:	6022      	str	r2, [r4, #0]
 800e0b0:	d504      	bpl.n	800e0bc <__sflush_r+0x7c>
 800e0b2:	1c42      	adds	r2, r0, #1
 800e0b4:	d101      	bne.n	800e0ba <__sflush_r+0x7a>
 800e0b6:	682b      	ldr	r3, [r5, #0]
 800e0b8:	b903      	cbnz	r3, 800e0bc <__sflush_r+0x7c>
 800e0ba:	6560      	str	r0, [r4, #84]	; 0x54
 800e0bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e0be:	602f      	str	r7, [r5, #0]
 800e0c0:	2900      	cmp	r1, #0
 800e0c2:	d0ca      	beq.n	800e05a <__sflush_r+0x1a>
 800e0c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e0c8:	4299      	cmp	r1, r3
 800e0ca:	d002      	beq.n	800e0d2 <__sflush_r+0x92>
 800e0cc:	4628      	mov	r0, r5
 800e0ce:	f7fd fa53 	bl	800b578 <_free_r>
 800e0d2:	2000      	movs	r0, #0
 800e0d4:	6360      	str	r0, [r4, #52]	; 0x34
 800e0d6:	e7c1      	b.n	800e05c <__sflush_r+0x1c>
 800e0d8:	6a21      	ldr	r1, [r4, #32]
 800e0da:	2301      	movs	r3, #1
 800e0dc:	4628      	mov	r0, r5
 800e0de:	47b0      	blx	r6
 800e0e0:	1c41      	adds	r1, r0, #1
 800e0e2:	d1c7      	bne.n	800e074 <__sflush_r+0x34>
 800e0e4:	682b      	ldr	r3, [r5, #0]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d0c4      	beq.n	800e074 <__sflush_r+0x34>
 800e0ea:	2b1d      	cmp	r3, #29
 800e0ec:	d001      	beq.n	800e0f2 <__sflush_r+0xb2>
 800e0ee:	2b16      	cmp	r3, #22
 800e0f0:	d101      	bne.n	800e0f6 <__sflush_r+0xb6>
 800e0f2:	602f      	str	r7, [r5, #0]
 800e0f4:	e7b1      	b.n	800e05a <__sflush_r+0x1a>
 800e0f6:	89a3      	ldrh	r3, [r4, #12]
 800e0f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0fc:	81a3      	strh	r3, [r4, #12]
 800e0fe:	e7ad      	b.n	800e05c <__sflush_r+0x1c>
 800e100:	690f      	ldr	r7, [r1, #16]
 800e102:	2f00      	cmp	r7, #0
 800e104:	d0a9      	beq.n	800e05a <__sflush_r+0x1a>
 800e106:	0793      	lsls	r3, r2, #30
 800e108:	bf18      	it	ne
 800e10a:	2300      	movne	r3, #0
 800e10c:	680e      	ldr	r6, [r1, #0]
 800e10e:	bf08      	it	eq
 800e110:	694b      	ldreq	r3, [r1, #20]
 800e112:	eba6 0807 	sub.w	r8, r6, r7
 800e116:	600f      	str	r7, [r1, #0]
 800e118:	608b      	str	r3, [r1, #8]
 800e11a:	f1b8 0f00 	cmp.w	r8, #0
 800e11e:	dd9c      	ble.n	800e05a <__sflush_r+0x1a>
 800e120:	4643      	mov	r3, r8
 800e122:	463a      	mov	r2, r7
 800e124:	4628      	mov	r0, r5
 800e126:	6a21      	ldr	r1, [r4, #32]
 800e128:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e12a:	47b0      	blx	r6
 800e12c:	2800      	cmp	r0, #0
 800e12e:	dc06      	bgt.n	800e13e <__sflush_r+0xfe>
 800e130:	89a3      	ldrh	r3, [r4, #12]
 800e132:	f04f 30ff 	mov.w	r0, #4294967295
 800e136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e13a:	81a3      	strh	r3, [r4, #12]
 800e13c:	e78e      	b.n	800e05c <__sflush_r+0x1c>
 800e13e:	4407      	add	r7, r0
 800e140:	eba8 0800 	sub.w	r8, r8, r0
 800e144:	e7e9      	b.n	800e11a <__sflush_r+0xda>
 800e146:	bf00      	nop
 800e148:	20400001 	.word	0x20400001

0800e14c <_fflush_r>:
 800e14c:	b538      	push	{r3, r4, r5, lr}
 800e14e:	690b      	ldr	r3, [r1, #16]
 800e150:	4605      	mov	r5, r0
 800e152:	460c      	mov	r4, r1
 800e154:	b913      	cbnz	r3, 800e15c <_fflush_r+0x10>
 800e156:	2500      	movs	r5, #0
 800e158:	4628      	mov	r0, r5
 800e15a:	bd38      	pop	{r3, r4, r5, pc}
 800e15c:	b118      	cbz	r0, 800e166 <_fflush_r+0x1a>
 800e15e:	6983      	ldr	r3, [r0, #24]
 800e160:	b90b      	cbnz	r3, 800e166 <_fflush_r+0x1a>
 800e162:	f7fe ff17 	bl	800cf94 <__sinit>
 800e166:	4b14      	ldr	r3, [pc, #80]	; (800e1b8 <_fflush_r+0x6c>)
 800e168:	429c      	cmp	r4, r3
 800e16a:	d11b      	bne.n	800e1a4 <_fflush_r+0x58>
 800e16c:	686c      	ldr	r4, [r5, #4]
 800e16e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d0ef      	beq.n	800e156 <_fflush_r+0xa>
 800e176:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e178:	07d0      	lsls	r0, r2, #31
 800e17a:	d404      	bmi.n	800e186 <_fflush_r+0x3a>
 800e17c:	0599      	lsls	r1, r3, #22
 800e17e:	d402      	bmi.n	800e186 <_fflush_r+0x3a>
 800e180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e182:	f7fe ffaa 	bl	800d0da <__retarget_lock_acquire_recursive>
 800e186:	4628      	mov	r0, r5
 800e188:	4621      	mov	r1, r4
 800e18a:	f7ff ff59 	bl	800e040 <__sflush_r>
 800e18e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e190:	4605      	mov	r5, r0
 800e192:	07da      	lsls	r2, r3, #31
 800e194:	d4e0      	bmi.n	800e158 <_fflush_r+0xc>
 800e196:	89a3      	ldrh	r3, [r4, #12]
 800e198:	059b      	lsls	r3, r3, #22
 800e19a:	d4dd      	bmi.n	800e158 <_fflush_r+0xc>
 800e19c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e19e:	f7fe ff9d 	bl	800d0dc <__retarget_lock_release_recursive>
 800e1a2:	e7d9      	b.n	800e158 <_fflush_r+0xc>
 800e1a4:	4b05      	ldr	r3, [pc, #20]	; (800e1bc <_fflush_r+0x70>)
 800e1a6:	429c      	cmp	r4, r3
 800e1a8:	d101      	bne.n	800e1ae <_fflush_r+0x62>
 800e1aa:	68ac      	ldr	r4, [r5, #8]
 800e1ac:	e7df      	b.n	800e16e <_fflush_r+0x22>
 800e1ae:	4b04      	ldr	r3, [pc, #16]	; (800e1c0 <_fflush_r+0x74>)
 800e1b0:	429c      	cmp	r4, r3
 800e1b2:	bf08      	it	eq
 800e1b4:	68ec      	ldreq	r4, [r5, #12]
 800e1b6:	e7da      	b.n	800e16e <_fflush_r+0x22>
 800e1b8:	0800f748 	.word	0x0800f748
 800e1bc:	0800f768 	.word	0x0800f768
 800e1c0:	0800f728 	.word	0x0800f728

0800e1c4 <fiprintf>:
 800e1c4:	b40e      	push	{r1, r2, r3}
 800e1c6:	b503      	push	{r0, r1, lr}
 800e1c8:	4601      	mov	r1, r0
 800e1ca:	ab03      	add	r3, sp, #12
 800e1cc:	4805      	ldr	r0, [pc, #20]	; (800e1e4 <fiprintf+0x20>)
 800e1ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1d2:	6800      	ldr	r0, [r0, #0]
 800e1d4:	9301      	str	r3, [sp, #4]
 800e1d6:	f7ff fcbf 	bl	800db58 <_vfiprintf_r>
 800e1da:	b002      	add	sp, #8
 800e1dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1e0:	b003      	add	sp, #12
 800e1e2:	4770      	bx	lr
 800e1e4:	2000001c 	.word	0x2000001c

0800e1e8 <_lseek_r>:
 800e1e8:	b538      	push	{r3, r4, r5, lr}
 800e1ea:	4604      	mov	r4, r0
 800e1ec:	4608      	mov	r0, r1
 800e1ee:	4611      	mov	r1, r2
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	4d05      	ldr	r5, [pc, #20]	; (800e208 <_lseek_r+0x20>)
 800e1f4:	602a      	str	r2, [r5, #0]
 800e1f6:	461a      	mov	r2, r3
 800e1f8:	f7f4 fbba 	bl	8002970 <_lseek>
 800e1fc:	1c43      	adds	r3, r0, #1
 800e1fe:	d102      	bne.n	800e206 <_lseek_r+0x1e>
 800e200:	682b      	ldr	r3, [r5, #0]
 800e202:	b103      	cbz	r3, 800e206 <_lseek_r+0x1e>
 800e204:	6023      	str	r3, [r4, #0]
 800e206:	bd38      	pop	{r3, r4, r5, pc}
 800e208:	20000bb8 	.word	0x20000bb8

0800e20c <__swhatbuf_r>:
 800e20c:	b570      	push	{r4, r5, r6, lr}
 800e20e:	460e      	mov	r6, r1
 800e210:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e214:	4614      	mov	r4, r2
 800e216:	2900      	cmp	r1, #0
 800e218:	461d      	mov	r5, r3
 800e21a:	b096      	sub	sp, #88	; 0x58
 800e21c:	da07      	bge.n	800e22e <__swhatbuf_r+0x22>
 800e21e:	2300      	movs	r3, #0
 800e220:	602b      	str	r3, [r5, #0]
 800e222:	89b3      	ldrh	r3, [r6, #12]
 800e224:	061a      	lsls	r2, r3, #24
 800e226:	d410      	bmi.n	800e24a <__swhatbuf_r+0x3e>
 800e228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e22c:	e00e      	b.n	800e24c <__swhatbuf_r+0x40>
 800e22e:	466a      	mov	r2, sp
 800e230:	f000 f8c8 	bl	800e3c4 <_fstat_r>
 800e234:	2800      	cmp	r0, #0
 800e236:	dbf2      	blt.n	800e21e <__swhatbuf_r+0x12>
 800e238:	9a01      	ldr	r2, [sp, #4]
 800e23a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e23e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e242:	425a      	negs	r2, r3
 800e244:	415a      	adcs	r2, r3
 800e246:	602a      	str	r2, [r5, #0]
 800e248:	e7ee      	b.n	800e228 <__swhatbuf_r+0x1c>
 800e24a:	2340      	movs	r3, #64	; 0x40
 800e24c:	2000      	movs	r0, #0
 800e24e:	6023      	str	r3, [r4, #0]
 800e250:	b016      	add	sp, #88	; 0x58
 800e252:	bd70      	pop	{r4, r5, r6, pc}

0800e254 <__smakebuf_r>:
 800e254:	898b      	ldrh	r3, [r1, #12]
 800e256:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e258:	079d      	lsls	r5, r3, #30
 800e25a:	4606      	mov	r6, r0
 800e25c:	460c      	mov	r4, r1
 800e25e:	d507      	bpl.n	800e270 <__smakebuf_r+0x1c>
 800e260:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e264:	6023      	str	r3, [r4, #0]
 800e266:	6123      	str	r3, [r4, #16]
 800e268:	2301      	movs	r3, #1
 800e26a:	6163      	str	r3, [r4, #20]
 800e26c:	b002      	add	sp, #8
 800e26e:	bd70      	pop	{r4, r5, r6, pc}
 800e270:	466a      	mov	r2, sp
 800e272:	ab01      	add	r3, sp, #4
 800e274:	f7ff ffca 	bl	800e20c <__swhatbuf_r>
 800e278:	9900      	ldr	r1, [sp, #0]
 800e27a:	4605      	mov	r5, r0
 800e27c:	4630      	mov	r0, r6
 800e27e:	f7fd f9c7 	bl	800b610 <_malloc_r>
 800e282:	b948      	cbnz	r0, 800e298 <__smakebuf_r+0x44>
 800e284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e288:	059a      	lsls	r2, r3, #22
 800e28a:	d4ef      	bmi.n	800e26c <__smakebuf_r+0x18>
 800e28c:	f023 0303 	bic.w	r3, r3, #3
 800e290:	f043 0302 	orr.w	r3, r3, #2
 800e294:	81a3      	strh	r3, [r4, #12]
 800e296:	e7e3      	b.n	800e260 <__smakebuf_r+0xc>
 800e298:	4b0d      	ldr	r3, [pc, #52]	; (800e2d0 <__smakebuf_r+0x7c>)
 800e29a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e29c:	89a3      	ldrh	r3, [r4, #12]
 800e29e:	6020      	str	r0, [r4, #0]
 800e2a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2a4:	81a3      	strh	r3, [r4, #12]
 800e2a6:	9b00      	ldr	r3, [sp, #0]
 800e2a8:	6120      	str	r0, [r4, #16]
 800e2aa:	6163      	str	r3, [r4, #20]
 800e2ac:	9b01      	ldr	r3, [sp, #4]
 800e2ae:	b15b      	cbz	r3, 800e2c8 <__smakebuf_r+0x74>
 800e2b0:	4630      	mov	r0, r6
 800e2b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2b6:	f000 f897 	bl	800e3e8 <_isatty_r>
 800e2ba:	b128      	cbz	r0, 800e2c8 <__smakebuf_r+0x74>
 800e2bc:	89a3      	ldrh	r3, [r4, #12]
 800e2be:	f023 0303 	bic.w	r3, r3, #3
 800e2c2:	f043 0301 	orr.w	r3, r3, #1
 800e2c6:	81a3      	strh	r3, [r4, #12]
 800e2c8:	89a0      	ldrh	r0, [r4, #12]
 800e2ca:	4305      	orrs	r5, r0
 800e2cc:	81a5      	strh	r5, [r4, #12]
 800e2ce:	e7cd      	b.n	800e26c <__smakebuf_r+0x18>
 800e2d0:	0800cf2d 	.word	0x0800cf2d

0800e2d4 <__ascii_mbtowc>:
 800e2d4:	b082      	sub	sp, #8
 800e2d6:	b901      	cbnz	r1, 800e2da <__ascii_mbtowc+0x6>
 800e2d8:	a901      	add	r1, sp, #4
 800e2da:	b142      	cbz	r2, 800e2ee <__ascii_mbtowc+0x1a>
 800e2dc:	b14b      	cbz	r3, 800e2f2 <__ascii_mbtowc+0x1e>
 800e2de:	7813      	ldrb	r3, [r2, #0]
 800e2e0:	600b      	str	r3, [r1, #0]
 800e2e2:	7812      	ldrb	r2, [r2, #0]
 800e2e4:	1e10      	subs	r0, r2, #0
 800e2e6:	bf18      	it	ne
 800e2e8:	2001      	movne	r0, #1
 800e2ea:	b002      	add	sp, #8
 800e2ec:	4770      	bx	lr
 800e2ee:	4610      	mov	r0, r2
 800e2f0:	e7fb      	b.n	800e2ea <__ascii_mbtowc+0x16>
 800e2f2:	f06f 0001 	mvn.w	r0, #1
 800e2f6:	e7f8      	b.n	800e2ea <__ascii_mbtowc+0x16>

0800e2f8 <memmove>:
 800e2f8:	4288      	cmp	r0, r1
 800e2fa:	b510      	push	{r4, lr}
 800e2fc:	eb01 0402 	add.w	r4, r1, r2
 800e300:	d902      	bls.n	800e308 <memmove+0x10>
 800e302:	4284      	cmp	r4, r0
 800e304:	4623      	mov	r3, r4
 800e306:	d807      	bhi.n	800e318 <memmove+0x20>
 800e308:	1e43      	subs	r3, r0, #1
 800e30a:	42a1      	cmp	r1, r4
 800e30c:	d008      	beq.n	800e320 <memmove+0x28>
 800e30e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e312:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e316:	e7f8      	b.n	800e30a <memmove+0x12>
 800e318:	4601      	mov	r1, r0
 800e31a:	4402      	add	r2, r0
 800e31c:	428a      	cmp	r2, r1
 800e31e:	d100      	bne.n	800e322 <memmove+0x2a>
 800e320:	bd10      	pop	{r4, pc}
 800e322:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e326:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e32a:	e7f7      	b.n	800e31c <memmove+0x24>

0800e32c <_realloc_r>:
 800e32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e32e:	4607      	mov	r7, r0
 800e330:	4614      	mov	r4, r2
 800e332:	460e      	mov	r6, r1
 800e334:	b921      	cbnz	r1, 800e340 <_realloc_r+0x14>
 800e336:	4611      	mov	r1, r2
 800e338:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e33c:	f7fd b968 	b.w	800b610 <_malloc_r>
 800e340:	b922      	cbnz	r2, 800e34c <_realloc_r+0x20>
 800e342:	f7fd f919 	bl	800b578 <_free_r>
 800e346:	4625      	mov	r5, r4
 800e348:	4628      	mov	r0, r5
 800e34a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e34c:	f000 f85c 	bl	800e408 <_malloc_usable_size_r>
 800e350:	42a0      	cmp	r0, r4
 800e352:	d20f      	bcs.n	800e374 <_realloc_r+0x48>
 800e354:	4621      	mov	r1, r4
 800e356:	4638      	mov	r0, r7
 800e358:	f7fd f95a 	bl	800b610 <_malloc_r>
 800e35c:	4605      	mov	r5, r0
 800e35e:	2800      	cmp	r0, #0
 800e360:	d0f2      	beq.n	800e348 <_realloc_r+0x1c>
 800e362:	4631      	mov	r1, r6
 800e364:	4622      	mov	r2, r4
 800e366:	f7fe fec8 	bl	800d0fa <memcpy>
 800e36a:	4631      	mov	r1, r6
 800e36c:	4638      	mov	r0, r7
 800e36e:	f7fd f903 	bl	800b578 <_free_r>
 800e372:	e7e9      	b.n	800e348 <_realloc_r+0x1c>
 800e374:	4635      	mov	r5, r6
 800e376:	e7e7      	b.n	800e348 <_realloc_r+0x1c>

0800e378 <_read_r>:
 800e378:	b538      	push	{r3, r4, r5, lr}
 800e37a:	4604      	mov	r4, r0
 800e37c:	4608      	mov	r0, r1
 800e37e:	4611      	mov	r1, r2
 800e380:	2200      	movs	r2, #0
 800e382:	4d05      	ldr	r5, [pc, #20]	; (800e398 <_read_r+0x20>)
 800e384:	602a      	str	r2, [r5, #0]
 800e386:	461a      	mov	r2, r3
 800e388:	f7f4 fa87 	bl	800289a <_read>
 800e38c:	1c43      	adds	r3, r0, #1
 800e38e:	d102      	bne.n	800e396 <_read_r+0x1e>
 800e390:	682b      	ldr	r3, [r5, #0]
 800e392:	b103      	cbz	r3, 800e396 <_read_r+0x1e>
 800e394:	6023      	str	r3, [r4, #0]
 800e396:	bd38      	pop	{r3, r4, r5, pc}
 800e398:	20000bb8 	.word	0x20000bb8

0800e39c <__ascii_wctomb>:
 800e39c:	4603      	mov	r3, r0
 800e39e:	4608      	mov	r0, r1
 800e3a0:	b141      	cbz	r1, 800e3b4 <__ascii_wctomb+0x18>
 800e3a2:	2aff      	cmp	r2, #255	; 0xff
 800e3a4:	d904      	bls.n	800e3b0 <__ascii_wctomb+0x14>
 800e3a6:	228a      	movs	r2, #138	; 0x8a
 800e3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800e3ac:	601a      	str	r2, [r3, #0]
 800e3ae:	4770      	bx	lr
 800e3b0:	2001      	movs	r0, #1
 800e3b2:	700a      	strb	r2, [r1, #0]
 800e3b4:	4770      	bx	lr

0800e3b6 <abort>:
 800e3b6:	2006      	movs	r0, #6
 800e3b8:	b508      	push	{r3, lr}
 800e3ba:	f000 f855 	bl	800e468 <raise>
 800e3be:	2001      	movs	r0, #1
 800e3c0:	f7f4 fa61 	bl	8002886 <_exit>

0800e3c4 <_fstat_r>:
 800e3c4:	b538      	push	{r3, r4, r5, lr}
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	4d06      	ldr	r5, [pc, #24]	; (800e3e4 <_fstat_r+0x20>)
 800e3ca:	4604      	mov	r4, r0
 800e3cc:	4608      	mov	r0, r1
 800e3ce:	4611      	mov	r1, r2
 800e3d0:	602b      	str	r3, [r5, #0]
 800e3d2:	f7f4 fab4 	bl	800293e <_fstat>
 800e3d6:	1c43      	adds	r3, r0, #1
 800e3d8:	d102      	bne.n	800e3e0 <_fstat_r+0x1c>
 800e3da:	682b      	ldr	r3, [r5, #0]
 800e3dc:	b103      	cbz	r3, 800e3e0 <_fstat_r+0x1c>
 800e3de:	6023      	str	r3, [r4, #0]
 800e3e0:	bd38      	pop	{r3, r4, r5, pc}
 800e3e2:	bf00      	nop
 800e3e4:	20000bb8 	.word	0x20000bb8

0800e3e8 <_isatty_r>:
 800e3e8:	b538      	push	{r3, r4, r5, lr}
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	4d05      	ldr	r5, [pc, #20]	; (800e404 <_isatty_r+0x1c>)
 800e3ee:	4604      	mov	r4, r0
 800e3f0:	4608      	mov	r0, r1
 800e3f2:	602b      	str	r3, [r5, #0]
 800e3f4:	f7f4 fab2 	bl	800295c <_isatty>
 800e3f8:	1c43      	adds	r3, r0, #1
 800e3fa:	d102      	bne.n	800e402 <_isatty_r+0x1a>
 800e3fc:	682b      	ldr	r3, [r5, #0]
 800e3fe:	b103      	cbz	r3, 800e402 <_isatty_r+0x1a>
 800e400:	6023      	str	r3, [r4, #0]
 800e402:	bd38      	pop	{r3, r4, r5, pc}
 800e404:	20000bb8 	.word	0x20000bb8

0800e408 <_malloc_usable_size_r>:
 800e408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e40c:	1f18      	subs	r0, r3, #4
 800e40e:	2b00      	cmp	r3, #0
 800e410:	bfbc      	itt	lt
 800e412:	580b      	ldrlt	r3, [r1, r0]
 800e414:	18c0      	addlt	r0, r0, r3
 800e416:	4770      	bx	lr

0800e418 <_raise_r>:
 800e418:	291f      	cmp	r1, #31
 800e41a:	b538      	push	{r3, r4, r5, lr}
 800e41c:	4604      	mov	r4, r0
 800e41e:	460d      	mov	r5, r1
 800e420:	d904      	bls.n	800e42c <_raise_r+0x14>
 800e422:	2316      	movs	r3, #22
 800e424:	6003      	str	r3, [r0, #0]
 800e426:	f04f 30ff 	mov.w	r0, #4294967295
 800e42a:	bd38      	pop	{r3, r4, r5, pc}
 800e42c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e42e:	b112      	cbz	r2, 800e436 <_raise_r+0x1e>
 800e430:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e434:	b94b      	cbnz	r3, 800e44a <_raise_r+0x32>
 800e436:	4620      	mov	r0, r4
 800e438:	f000 f830 	bl	800e49c <_getpid_r>
 800e43c:	462a      	mov	r2, r5
 800e43e:	4601      	mov	r1, r0
 800e440:	4620      	mov	r0, r4
 800e442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e446:	f000 b817 	b.w	800e478 <_kill_r>
 800e44a:	2b01      	cmp	r3, #1
 800e44c:	d00a      	beq.n	800e464 <_raise_r+0x4c>
 800e44e:	1c59      	adds	r1, r3, #1
 800e450:	d103      	bne.n	800e45a <_raise_r+0x42>
 800e452:	2316      	movs	r3, #22
 800e454:	6003      	str	r3, [r0, #0]
 800e456:	2001      	movs	r0, #1
 800e458:	e7e7      	b.n	800e42a <_raise_r+0x12>
 800e45a:	2400      	movs	r4, #0
 800e45c:	4628      	mov	r0, r5
 800e45e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e462:	4798      	blx	r3
 800e464:	2000      	movs	r0, #0
 800e466:	e7e0      	b.n	800e42a <_raise_r+0x12>

0800e468 <raise>:
 800e468:	4b02      	ldr	r3, [pc, #8]	; (800e474 <raise+0xc>)
 800e46a:	4601      	mov	r1, r0
 800e46c:	6818      	ldr	r0, [r3, #0]
 800e46e:	f7ff bfd3 	b.w	800e418 <_raise_r>
 800e472:	bf00      	nop
 800e474:	2000001c 	.word	0x2000001c

0800e478 <_kill_r>:
 800e478:	b538      	push	{r3, r4, r5, lr}
 800e47a:	2300      	movs	r3, #0
 800e47c:	4d06      	ldr	r5, [pc, #24]	; (800e498 <_kill_r+0x20>)
 800e47e:	4604      	mov	r4, r0
 800e480:	4608      	mov	r0, r1
 800e482:	4611      	mov	r1, r2
 800e484:	602b      	str	r3, [r5, #0]
 800e486:	f7f4 f9ee 	bl	8002866 <_kill>
 800e48a:	1c43      	adds	r3, r0, #1
 800e48c:	d102      	bne.n	800e494 <_kill_r+0x1c>
 800e48e:	682b      	ldr	r3, [r5, #0]
 800e490:	b103      	cbz	r3, 800e494 <_kill_r+0x1c>
 800e492:	6023      	str	r3, [r4, #0]
 800e494:	bd38      	pop	{r3, r4, r5, pc}
 800e496:	bf00      	nop
 800e498:	20000bb8 	.word	0x20000bb8

0800e49c <_getpid_r>:
 800e49c:	f7f4 b9dc 	b.w	8002858 <_getpid>

0800e4a0 <_init>:
 800e4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4a2:	bf00      	nop
 800e4a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4a6:	bc08      	pop	{r3}
 800e4a8:	469e      	mov	lr, r3
 800e4aa:	4770      	bx	lr

0800e4ac <_fini>:
 800e4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4ae:	bf00      	nop
 800e4b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4b2:	bc08      	pop	{r3}
 800e4b4:	469e      	mov	lr, r3
 800e4b6:	4770      	bx	lr
