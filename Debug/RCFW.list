
RCFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba64  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000125c  0800bc48  0800bc48  0001bc48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cea4  0800cea4  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800cea4  0800cea4  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cea4  0800cea4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cea4  0800cea4  0001cea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cea8  0800cea8  0001cea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800ceac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000900  20000080  0800cf2c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000980  0800cf2c  00020980  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b809  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ece  00000000  00000000  0003b8b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  0003f780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001280  00000000  00000000  00040bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ec2b  00000000  00000000  00041e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bd19  00000000  00000000  00060a63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5b44  00000000  00000000  0007c77c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001222c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d10  00000000  00000000  00122314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000080 	.word	0x20000080
 8000200:	00000000 	.word	0x00000000
 8000204:	0800bc30 	.word	0x0800bc30

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000084 	.word	0x20000084
 8000220:	0800bc30 	.word	0x0800bc30

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_frsub>:
 8000234:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000238:	e002      	b.n	8000240 <__addsf3>
 800023a:	bf00      	nop

0800023c <__aeabi_fsub>:
 800023c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000240 <__addsf3>:
 8000240:	0042      	lsls	r2, r0, #1
 8000242:	bf1f      	itttt	ne
 8000244:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000248:	ea92 0f03 	teqne	r2, r3
 800024c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000250:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000254:	d06a      	beq.n	800032c <__addsf3+0xec>
 8000256:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800025a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800025e:	bfc1      	itttt	gt
 8000260:	18d2      	addgt	r2, r2, r3
 8000262:	4041      	eorgt	r1, r0
 8000264:	4048      	eorgt	r0, r1
 8000266:	4041      	eorgt	r1, r0
 8000268:	bfb8      	it	lt
 800026a:	425b      	neglt	r3, r3
 800026c:	2b19      	cmp	r3, #25
 800026e:	bf88      	it	hi
 8000270:	4770      	bxhi	lr
 8000272:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000276:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800027a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800027e:	bf18      	it	ne
 8000280:	4240      	negne	r0, r0
 8000282:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000286:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800028a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800028e:	bf18      	it	ne
 8000290:	4249      	negne	r1, r1
 8000292:	ea92 0f03 	teq	r2, r3
 8000296:	d03f      	beq.n	8000318 <__addsf3+0xd8>
 8000298:	f1a2 0201 	sub.w	r2, r2, #1
 800029c:	fa41 fc03 	asr.w	ip, r1, r3
 80002a0:	eb10 000c 	adds.w	r0, r0, ip
 80002a4:	f1c3 0320 	rsb	r3, r3, #32
 80002a8:	fa01 f103 	lsl.w	r1, r1, r3
 80002ac:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002b0:	d502      	bpl.n	80002b8 <__addsf3+0x78>
 80002b2:	4249      	negs	r1, r1
 80002b4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002b8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002bc:	d313      	bcc.n	80002e6 <__addsf3+0xa6>
 80002be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002c2:	d306      	bcc.n	80002d2 <__addsf3+0x92>
 80002c4:	0840      	lsrs	r0, r0, #1
 80002c6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ca:	f102 0201 	add.w	r2, r2, #1
 80002ce:	2afe      	cmp	r2, #254	; 0xfe
 80002d0:	d251      	bcs.n	8000376 <__addsf3+0x136>
 80002d2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002da:	bf08      	it	eq
 80002dc:	f020 0001 	biceq.w	r0, r0, #1
 80002e0:	ea40 0003 	orr.w	r0, r0, r3
 80002e4:	4770      	bx	lr
 80002e6:	0049      	lsls	r1, r1, #1
 80002e8:	eb40 0000 	adc.w	r0, r0, r0
 80002ec:	3a01      	subs	r2, #1
 80002ee:	bf28      	it	cs
 80002f0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002f4:	d2ed      	bcs.n	80002d2 <__addsf3+0x92>
 80002f6:	fab0 fc80 	clz	ip, r0
 80002fa:	f1ac 0c08 	sub.w	ip, ip, #8
 80002fe:	ebb2 020c 	subs.w	r2, r2, ip
 8000302:	fa00 f00c 	lsl.w	r0, r0, ip
 8000306:	bfaa      	itet	ge
 8000308:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800030c:	4252      	neglt	r2, r2
 800030e:	4318      	orrge	r0, r3
 8000310:	bfbc      	itt	lt
 8000312:	40d0      	lsrlt	r0, r2
 8000314:	4318      	orrlt	r0, r3
 8000316:	4770      	bx	lr
 8000318:	f092 0f00 	teq	r2, #0
 800031c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000320:	bf06      	itte	eq
 8000322:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000326:	3201      	addeq	r2, #1
 8000328:	3b01      	subne	r3, #1
 800032a:	e7b5      	b.n	8000298 <__addsf3+0x58>
 800032c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000330:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000334:	bf18      	it	ne
 8000336:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800033a:	d021      	beq.n	8000380 <__addsf3+0x140>
 800033c:	ea92 0f03 	teq	r2, r3
 8000340:	d004      	beq.n	800034c <__addsf3+0x10c>
 8000342:	f092 0f00 	teq	r2, #0
 8000346:	bf08      	it	eq
 8000348:	4608      	moveq	r0, r1
 800034a:	4770      	bx	lr
 800034c:	ea90 0f01 	teq	r0, r1
 8000350:	bf1c      	itt	ne
 8000352:	2000      	movne	r0, #0
 8000354:	4770      	bxne	lr
 8000356:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800035a:	d104      	bne.n	8000366 <__addsf3+0x126>
 800035c:	0040      	lsls	r0, r0, #1
 800035e:	bf28      	it	cs
 8000360:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000364:	4770      	bx	lr
 8000366:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800036a:	bf3c      	itt	cc
 800036c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000370:	4770      	bxcc	lr
 8000372:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000376:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800037a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800037e:	4770      	bx	lr
 8000380:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000384:	bf16      	itet	ne
 8000386:	4608      	movne	r0, r1
 8000388:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800038c:	4601      	movne	r1, r0
 800038e:	0242      	lsls	r2, r0, #9
 8000390:	bf06      	itte	eq
 8000392:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000396:	ea90 0f01 	teqeq	r0, r1
 800039a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800039e:	4770      	bx	lr

080003a0 <__aeabi_ui2f>:
 80003a0:	f04f 0300 	mov.w	r3, #0
 80003a4:	e004      	b.n	80003b0 <__aeabi_i2f+0x8>
 80003a6:	bf00      	nop

080003a8 <__aeabi_i2f>:
 80003a8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80003ac:	bf48      	it	mi
 80003ae:	4240      	negmi	r0, r0
 80003b0:	ea5f 0c00 	movs.w	ip, r0
 80003b4:	bf08      	it	eq
 80003b6:	4770      	bxeq	lr
 80003b8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003bc:	4601      	mov	r1, r0
 80003be:	f04f 0000 	mov.w	r0, #0
 80003c2:	e01c      	b.n	80003fe <__aeabi_l2f+0x2a>

080003c4 <__aeabi_ul2f>:
 80003c4:	ea50 0201 	orrs.w	r2, r0, r1
 80003c8:	bf08      	it	eq
 80003ca:	4770      	bxeq	lr
 80003cc:	f04f 0300 	mov.w	r3, #0
 80003d0:	e00a      	b.n	80003e8 <__aeabi_l2f+0x14>
 80003d2:	bf00      	nop

080003d4 <__aeabi_l2f>:
 80003d4:	ea50 0201 	orrs.w	r2, r0, r1
 80003d8:	bf08      	it	eq
 80003da:	4770      	bxeq	lr
 80003dc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003e0:	d502      	bpl.n	80003e8 <__aeabi_l2f+0x14>
 80003e2:	4240      	negs	r0, r0
 80003e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003e8:	ea5f 0c01 	movs.w	ip, r1
 80003ec:	bf02      	ittt	eq
 80003ee:	4684      	moveq	ip, r0
 80003f0:	4601      	moveq	r1, r0
 80003f2:	2000      	moveq	r0, #0
 80003f4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003f8:	bf08      	it	eq
 80003fa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003fe:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000402:	fabc f28c 	clz	r2, ip
 8000406:	3a08      	subs	r2, #8
 8000408:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800040c:	db10      	blt.n	8000430 <__aeabi_l2f+0x5c>
 800040e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000412:	4463      	add	r3, ip
 8000414:	fa00 fc02 	lsl.w	ip, r0, r2
 8000418:	f1c2 0220 	rsb	r2, r2, #32
 800041c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000420:	fa20 f202 	lsr.w	r2, r0, r2
 8000424:	eb43 0002 	adc.w	r0, r3, r2
 8000428:	bf08      	it	eq
 800042a:	f020 0001 	biceq.w	r0, r0, #1
 800042e:	4770      	bx	lr
 8000430:	f102 0220 	add.w	r2, r2, #32
 8000434:	fa01 fc02 	lsl.w	ip, r1, r2
 8000438:	f1c2 0220 	rsb	r2, r2, #32
 800043c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000440:	fa21 f202 	lsr.w	r2, r1, r2
 8000444:	eb43 0002 	adc.w	r0, r3, r2
 8000448:	bf08      	it	eq
 800044a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800044e:	4770      	bx	lr

08000450 <__aeabi_fmul>:
 8000450:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000454:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000458:	bf1e      	ittt	ne
 800045a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800045e:	ea92 0f0c 	teqne	r2, ip
 8000462:	ea93 0f0c 	teqne	r3, ip
 8000466:	d06f      	beq.n	8000548 <__aeabi_fmul+0xf8>
 8000468:	441a      	add	r2, r3
 800046a:	ea80 0c01 	eor.w	ip, r0, r1
 800046e:	0240      	lsls	r0, r0, #9
 8000470:	bf18      	it	ne
 8000472:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000476:	d01e      	beq.n	80004b6 <__aeabi_fmul+0x66>
 8000478:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800047c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000480:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000484:	fba0 3101 	umull	r3, r1, r0, r1
 8000488:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800048c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000490:	bf3e      	ittt	cc
 8000492:	0049      	lslcc	r1, r1, #1
 8000494:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000498:	005b      	lslcc	r3, r3, #1
 800049a:	ea40 0001 	orr.w	r0, r0, r1
 800049e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80004a2:	2afd      	cmp	r2, #253	; 0xfd
 80004a4:	d81d      	bhi.n	80004e2 <__aeabi_fmul+0x92>
 80004a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80004aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80004ae:	bf08      	it	eq
 80004b0:	f020 0001 	biceq.w	r0, r0, #1
 80004b4:	4770      	bx	lr
 80004b6:	f090 0f00 	teq	r0, #0
 80004ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004be:	bf08      	it	eq
 80004c0:	0249      	lsleq	r1, r1, #9
 80004c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004ca:	3a7f      	subs	r2, #127	; 0x7f
 80004cc:	bfc2      	ittt	gt
 80004ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004d6:	4770      	bxgt	lr
 80004d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004dc:	f04f 0300 	mov.w	r3, #0
 80004e0:	3a01      	subs	r2, #1
 80004e2:	dc5d      	bgt.n	80005a0 <__aeabi_fmul+0x150>
 80004e4:	f112 0f19 	cmn.w	r2, #25
 80004e8:	bfdc      	itt	le
 80004ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004ee:	4770      	bxle	lr
 80004f0:	f1c2 0200 	rsb	r2, r2, #0
 80004f4:	0041      	lsls	r1, r0, #1
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	f1c2 0220 	rsb	r2, r2, #32
 80004fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000502:	ea5f 0031 	movs.w	r0, r1, rrx
 8000506:	f140 0000 	adc.w	r0, r0, #0
 800050a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800050e:	bf08      	it	eq
 8000510:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000514:	4770      	bx	lr
 8000516:	f092 0f00 	teq	r2, #0
 800051a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800051e:	bf02      	ittt	eq
 8000520:	0040      	lsleq	r0, r0, #1
 8000522:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000526:	3a01      	subeq	r2, #1
 8000528:	d0f9      	beq.n	800051e <__aeabi_fmul+0xce>
 800052a:	ea40 000c 	orr.w	r0, r0, ip
 800052e:	f093 0f00 	teq	r3, #0
 8000532:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000536:	bf02      	ittt	eq
 8000538:	0049      	lsleq	r1, r1, #1
 800053a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800053e:	3b01      	subeq	r3, #1
 8000540:	d0f9      	beq.n	8000536 <__aeabi_fmul+0xe6>
 8000542:	ea41 010c 	orr.w	r1, r1, ip
 8000546:	e78f      	b.n	8000468 <__aeabi_fmul+0x18>
 8000548:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800054c:	ea92 0f0c 	teq	r2, ip
 8000550:	bf18      	it	ne
 8000552:	ea93 0f0c 	teqne	r3, ip
 8000556:	d00a      	beq.n	800056e <__aeabi_fmul+0x11e>
 8000558:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800055c:	bf18      	it	ne
 800055e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000562:	d1d8      	bne.n	8000516 <__aeabi_fmul+0xc6>
 8000564:	ea80 0001 	eor.w	r0, r0, r1
 8000568:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800056c:	4770      	bx	lr
 800056e:	f090 0f00 	teq	r0, #0
 8000572:	bf17      	itett	ne
 8000574:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000578:	4608      	moveq	r0, r1
 800057a:	f091 0f00 	teqne	r1, #0
 800057e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000582:	d014      	beq.n	80005ae <__aeabi_fmul+0x15e>
 8000584:	ea92 0f0c 	teq	r2, ip
 8000588:	d101      	bne.n	800058e <__aeabi_fmul+0x13e>
 800058a:	0242      	lsls	r2, r0, #9
 800058c:	d10f      	bne.n	80005ae <__aeabi_fmul+0x15e>
 800058e:	ea93 0f0c 	teq	r3, ip
 8000592:	d103      	bne.n	800059c <__aeabi_fmul+0x14c>
 8000594:	024b      	lsls	r3, r1, #9
 8000596:	bf18      	it	ne
 8000598:	4608      	movne	r0, r1
 800059a:	d108      	bne.n	80005ae <__aeabi_fmul+0x15e>
 800059c:	ea80 0001 	eor.w	r0, r0, r1
 80005a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80005a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005ac:	4770      	bx	lr
 80005ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005b6:	4770      	bx	lr

080005b8 <__aeabi_fdiv>:
 80005b8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005bc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005c0:	bf1e      	ittt	ne
 80005c2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005c6:	ea92 0f0c 	teqne	r2, ip
 80005ca:	ea93 0f0c 	teqne	r3, ip
 80005ce:	d069      	beq.n	80006a4 <__aeabi_fdiv+0xec>
 80005d0:	eba2 0203 	sub.w	r2, r2, r3
 80005d4:	ea80 0c01 	eor.w	ip, r0, r1
 80005d8:	0249      	lsls	r1, r1, #9
 80005da:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005de:	d037      	beq.n	8000650 <__aeabi_fdiv+0x98>
 80005e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005e4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005e8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005ec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005f0:	428b      	cmp	r3, r1
 80005f2:	bf38      	it	cc
 80005f4:	005b      	lslcc	r3, r3, #1
 80005f6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005fa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80005fe:	428b      	cmp	r3, r1
 8000600:	bf24      	itt	cs
 8000602:	1a5b      	subcs	r3, r3, r1
 8000604:	ea40 000c 	orrcs.w	r0, r0, ip
 8000608:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 800060c:	bf24      	itt	cs
 800060e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000612:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000616:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800061a:	bf24      	itt	cs
 800061c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000620:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000624:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000628:	bf24      	itt	cs
 800062a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800062e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000632:	011b      	lsls	r3, r3, #4
 8000634:	bf18      	it	ne
 8000636:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800063a:	d1e0      	bne.n	80005fe <__aeabi_fdiv+0x46>
 800063c:	2afd      	cmp	r2, #253	; 0xfd
 800063e:	f63f af50 	bhi.w	80004e2 <__aeabi_fmul+0x92>
 8000642:	428b      	cmp	r3, r1
 8000644:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000648:	bf08      	it	eq
 800064a:	f020 0001 	biceq.w	r0, r0, #1
 800064e:	4770      	bx	lr
 8000650:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000654:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000658:	327f      	adds	r2, #127	; 0x7f
 800065a:	bfc2      	ittt	gt
 800065c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000660:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000664:	4770      	bxgt	lr
 8000666:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800066a:	f04f 0300 	mov.w	r3, #0
 800066e:	3a01      	subs	r2, #1
 8000670:	e737      	b.n	80004e2 <__aeabi_fmul+0x92>
 8000672:	f092 0f00 	teq	r2, #0
 8000676:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800067a:	bf02      	ittt	eq
 800067c:	0040      	lsleq	r0, r0, #1
 800067e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000682:	3a01      	subeq	r2, #1
 8000684:	d0f9      	beq.n	800067a <__aeabi_fdiv+0xc2>
 8000686:	ea40 000c 	orr.w	r0, r0, ip
 800068a:	f093 0f00 	teq	r3, #0
 800068e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000692:	bf02      	ittt	eq
 8000694:	0049      	lsleq	r1, r1, #1
 8000696:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800069a:	3b01      	subeq	r3, #1
 800069c:	d0f9      	beq.n	8000692 <__aeabi_fdiv+0xda>
 800069e:	ea41 010c 	orr.w	r1, r1, ip
 80006a2:	e795      	b.n	80005d0 <__aeabi_fdiv+0x18>
 80006a4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80006a8:	ea92 0f0c 	teq	r2, ip
 80006ac:	d108      	bne.n	80006c0 <__aeabi_fdiv+0x108>
 80006ae:	0242      	lsls	r2, r0, #9
 80006b0:	f47f af7d 	bne.w	80005ae <__aeabi_fmul+0x15e>
 80006b4:	ea93 0f0c 	teq	r3, ip
 80006b8:	f47f af70 	bne.w	800059c <__aeabi_fmul+0x14c>
 80006bc:	4608      	mov	r0, r1
 80006be:	e776      	b.n	80005ae <__aeabi_fmul+0x15e>
 80006c0:	ea93 0f0c 	teq	r3, ip
 80006c4:	d104      	bne.n	80006d0 <__aeabi_fdiv+0x118>
 80006c6:	024b      	lsls	r3, r1, #9
 80006c8:	f43f af4c 	beq.w	8000564 <__aeabi_fmul+0x114>
 80006cc:	4608      	mov	r0, r1
 80006ce:	e76e      	b.n	80005ae <__aeabi_fmul+0x15e>
 80006d0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006d4:	bf18      	it	ne
 80006d6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006da:	d1ca      	bne.n	8000672 <__aeabi_fdiv+0xba>
 80006dc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80006e0:	f47f af5c 	bne.w	800059c <__aeabi_fmul+0x14c>
 80006e4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80006e8:	f47f af3c 	bne.w	8000564 <__aeabi_fmul+0x114>
 80006ec:	e75f      	b.n	80005ae <__aeabi_fmul+0x15e>
 80006ee:	bf00      	nop

080006f0 <__aeabi_f2iz>:
 80006f0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006f4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006f8:	d30f      	bcc.n	800071a <__aeabi_f2iz+0x2a>
 80006fa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80006fe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000702:	d90d      	bls.n	8000720 <__aeabi_f2iz+0x30>
 8000704:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000708:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800070c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000710:	fa23 f002 	lsr.w	r0, r3, r2
 8000714:	bf18      	it	ne
 8000716:	4240      	negne	r0, r0
 8000718:	4770      	bx	lr
 800071a:	f04f 0000 	mov.w	r0, #0
 800071e:	4770      	bx	lr
 8000720:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000724:	d101      	bne.n	800072a <__aeabi_f2iz+0x3a>
 8000726:	0242      	lsls	r2, r0, #9
 8000728:	d105      	bne.n	8000736 <__aeabi_f2iz+0x46>
 800072a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800072e:	bf08      	it	eq
 8000730:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000734:	4770      	bx	lr
 8000736:	f04f 0000 	mov.w	r0, #0
 800073a:	4770      	bx	lr

0800073c <__aeabi_f2uiz>:
 800073c:	0042      	lsls	r2, r0, #1
 800073e:	d20e      	bcs.n	800075e <__aeabi_f2uiz+0x22>
 8000740:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000744:	d30b      	bcc.n	800075e <__aeabi_f2uiz+0x22>
 8000746:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800074a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800074e:	d409      	bmi.n	8000764 <__aeabi_f2uiz+0x28>
 8000750:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000754:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000758:	fa23 f002 	lsr.w	r0, r3, r2
 800075c:	4770      	bx	lr
 800075e:	f04f 0000 	mov.w	r0, #0
 8000762:	4770      	bx	lr
 8000764:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000768:	d101      	bne.n	800076e <__aeabi_f2uiz+0x32>
 800076a:	0242      	lsls	r2, r0, #9
 800076c:	d102      	bne.n	8000774 <__aeabi_f2uiz+0x38>
 800076e:	f04f 30ff 	mov.w	r0, #4294967295
 8000772:	4770      	bx	lr
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop

0800077c <MAIN_displayRcfwBanner>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void MAIN_displayRcfwBanner(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* Used ASCII art generator from https://patorjk.com with font called "Colossal" */
  LOG_info("");
 8000780:	4914      	ldr	r1, [pc, #80]	; (80007d4 <MAIN_displayRcfwBanner+0x58>)
 8000782:	2001      	movs	r0, #1
 8000784:	f009 fb0c 	bl	8009da0 <LOG_log>
  LOG_info("    8888888b.        .d8888b.       8888888888      888       888"  );
 8000788:	4913      	ldr	r1, [pc, #76]	; (80007d8 <MAIN_displayRcfwBanner+0x5c>)
 800078a:	2001      	movs	r0, #1
 800078c:	f009 fb08 	bl	8009da0 <LOG_log>
  LOG_info("    888   Y88b      d88P  Y88b      888             888   o   888"  );
 8000790:	4912      	ldr	r1, [pc, #72]	; (80007dc <MAIN_displayRcfwBanner+0x60>)
 8000792:	2001      	movs	r0, #1
 8000794:	f009 fb04 	bl	8009da0 <LOG_log>
  LOG_info("    888    888      888    888      888             888  d8b  888"  );
 8000798:	4911      	ldr	r1, [pc, #68]	; (80007e0 <MAIN_displayRcfwBanner+0x64>)
 800079a:	2001      	movs	r0, #1
 800079c:	f009 fb00 	bl	8009da0 <LOG_log>
  LOG_info("    888   d88P      888             8888888         888 d888b 888"  );
 80007a0:	4910      	ldr	r1, [pc, #64]	; (80007e4 <MAIN_displayRcfwBanner+0x68>)
 80007a2:	2001      	movs	r0, #1
 80007a4:	f009 fafc 	bl	8009da0 <LOG_log>
  LOG_info("    8888888P\"       888             888             888d88888b888" );
 80007a8:	490f      	ldr	r1, [pc, #60]	; (80007e8 <MAIN_displayRcfwBanner+0x6c>)
 80007aa:	2001      	movs	r0, #1
 80007ac:	f009 faf8 	bl	8009da0 <LOG_log>
  LOG_info("    888 T88b        888    888      888             88888P Y88888"  );
 80007b0:	490e      	ldr	r1, [pc, #56]	; (80007ec <MAIN_displayRcfwBanner+0x70>)
 80007b2:	2001      	movs	r0, #1
 80007b4:	f009 faf4 	bl	8009da0 <LOG_log>
  LOG_info("    888  T88b       Y88b  d88P      888             8888P   Y8888"  );
 80007b8:	490d      	ldr	r1, [pc, #52]	; (80007f0 <MAIN_displayRcfwBanner+0x74>)
 80007ba:	2001      	movs	r0, #1
 80007bc:	f009 faf0 	bl	8009da0 <LOG_log>
  LOG_info("    888   T88b       \"Y8888P\"       888             888P     Y888");
 80007c0:	490c      	ldr	r1, [pc, #48]	; (80007f4 <MAIN_displayRcfwBanner+0x78>)
 80007c2:	2001      	movs	r0, #1
 80007c4:	f009 faec 	bl	8009da0 <LOG_log>
  LOG_info("");
 80007c8:	4902      	ldr	r1, [pc, #8]	; (80007d4 <MAIN_displayRcfwBanner+0x58>)
 80007ca:	2001      	movs	r0, #1
 80007cc:	f009 fae8 	bl	8009da0 <LOG_log>

  return;
 80007d0:	bf00      	nop
}
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	0800bc48 	.word	0x0800bc48
 80007d8:	0800bc4c 	.word	0x0800bc4c
 80007dc:	0800bc90 	.word	0x0800bc90
 80007e0:	0800bcd4 	.word	0x0800bcd4
 80007e4:	0800bd18 	.word	0x0800bd18
 80007e8:	0800bd5c 	.word	0x0800bd5c
 80007ec:	0800bda0 	.word	0x0800bda0
 80007f0:	0800bde4 	.word	0x0800bde4
 80007f4:	0800be28 	.word	0x0800be28

080007f8 <MAIN_updateLogLevel>:

static void MAIN_updateLogLevel(T_BLU_Data *p_data)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef l_time;
  RTC_DateTypeDef l_date;

  /* As this method is using for logging/debug, we will not deal with failure cases */
  (void)HAL_RTC_GetTime(&hrtc, &l_time, RTC_FORMAT_BCD);
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	2201      	movs	r2, #1
 8000806:	4619      	mov	r1, r3
 8000808:	4839      	ldr	r0, [pc, #228]	; (80008f0 <MAIN_updateLogLevel+0xf8>)
 800080a:	f004 f95d 	bl	8004ac8 <HAL_RTC_GetTime>
  (void)HAL_RTC_GetDate(&hrtc, &l_date, RTC_FORMAT_BCD);
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	2201      	movs	r2, #1
 8000814:	4619      	mov	r1, r3
 8000816:	4836      	ldr	r0, [pc, #216]	; (80008f0 <MAIN_updateLogLevel+0xf8>)
 8000818:	f004 fb5a 	bl	8004ed0 <HAL_RTC_GetDate>

  switch (p_data->button)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	7c1b      	ldrb	r3, [r3, #16]
 8000820:	3b05      	subs	r3, #5
 8000822:	2b03      	cmp	r3, #3
 8000824:	d84c      	bhi.n	80008c0 <MAIN_updateLogLevel+0xc8>
 8000826:	a201      	add	r2, pc, #4	; (adr r2, 800082c <MAIN_updateLogLevel+0x34>)
 8000828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800082c:	0800083d 	.word	0x0800083d
 8000830:	080008bb 	.word	0x080008bb
 8000834:	08000879 	.word	0x08000879
 8000838:	080008b5 	.word	0x080008b5
  {
    case BLU_BUTTON_PAD_UP:
      if (g_MAIN_padUpPressedStartTime == 0)
 800083c:	4b2d      	ldr	r3, [pc, #180]	; (80008f4 <MAIN_updateLogLevel+0xfc>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d10a      	bne.n	800085a <MAIN_updateLogLevel+0x62>
      {
        g_MAIN_padUpPressedStartTime = UTI_turnRtcTimeToSeconds(&l_time);
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	4618      	mov	r0, r3
 800084a:	f009 fefc 	bl	800a646 <UTI_turnRtcTimeToSeconds>
 800084e:	4603      	mov	r3, r0
 8000850:	4a28      	ldr	r2, [pc, #160]	; (80008f4 <MAIN_updateLogLevel+0xfc>)
 8000852:	6013      	str	r3, [r2, #0]

        LOG_increaseLevel();
 8000854:	f009 fa74 	bl	8009d40 <LOG_increaseLevel>
      }
      else
      {
        g_MAIN_padUpPressedStartTime = 0;
      }
      break;
 8000858:	e034      	b.n	80008c4 <MAIN_updateLogLevel+0xcc>
      else if (UTI_turnRtcTimeToSeconds(&l_time) - g_MAIN_padUpPressedStartTime < MAIN_PAD_BUTTON_PERIOD_IN_S)
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	4618      	mov	r0, r3
 8000860:	f009 fef1 	bl	800a646 <UTI_turnRtcTimeToSeconds>
 8000864:	4602      	mov	r2, r0
 8000866:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <MAIN_updateLogLevel+0xfc>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	1ad3      	subs	r3, r2, r3
 800086c:	2b01      	cmp	r3, #1
 800086e:	d929      	bls.n	80008c4 <MAIN_updateLogLevel+0xcc>
        g_MAIN_padUpPressedStartTime = 0;
 8000870:	4b20      	ldr	r3, [pc, #128]	; (80008f4 <MAIN_updateLogLevel+0xfc>)
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
      break;
 8000876:	e025      	b.n	80008c4 <MAIN_updateLogLevel+0xcc>

    case BLU_BUTTON_PAD_DOWN:
      if (g_MAIN_padDownPressedStartTime == 0)
 8000878:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <MAIN_updateLogLevel+0x100>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d10a      	bne.n	8000896 <MAIN_updateLogLevel+0x9e>
      {
        g_MAIN_padDownPressedStartTime = UTI_turnRtcTimeToSeconds(&l_time);
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	4618      	mov	r0, r3
 8000886:	f009 fede 	bl	800a646 <UTI_turnRtcTimeToSeconds>
 800088a:	4603      	mov	r3, r0
 800088c:	4a1a      	ldr	r2, [pc, #104]	; (80008f8 <MAIN_updateLogLevel+0x100>)
 800088e:	6013      	str	r3, [r2, #0]

        LOG_decreaseLevel();
 8000890:	f009 fa6e 	bl	8009d70 <LOG_decreaseLevel>
      }
      else
      {
        g_MAIN_padDownPressedStartTime = 0;
      }
      break;
 8000894:	e018      	b.n	80008c8 <MAIN_updateLogLevel+0xd0>
      else if (UTI_turnRtcTimeToSeconds(&l_time) - g_MAIN_padDownPressedStartTime < MAIN_PAD_BUTTON_PERIOD_IN_S)
 8000896:	f107 030c 	add.w	r3, r7, #12
 800089a:	4618      	mov	r0, r3
 800089c:	f009 fed3 	bl	800a646 <UTI_turnRtcTimeToSeconds>
 80008a0:	4602      	mov	r2, r0
 80008a2:	4b15      	ldr	r3, [pc, #84]	; (80008f8 <MAIN_updateLogLevel+0x100>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	1ad3      	subs	r3, r2, r3
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d90d      	bls.n	80008c8 <MAIN_updateLogLevel+0xd0>
        g_MAIN_padDownPressedStartTime = 0;
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MAIN_updateLogLevel+0x100>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
      break;
 80008b2:	e009      	b.n	80008c8 <MAIN_updateLogLevel+0xd0>

    case BLU_BUTTON_PAD_LEFT:
      LOG_turnOff();
 80008b4:	f009 fa20 	bl	8009cf8 <LOG_turnOff>
      break;
 80008b8:	e007      	b.n	80008ca <MAIN_updateLogLevel+0xd2>

    case BLU_BUTTON_PAD_RIGHT:
      LOG_turnOn();
 80008ba:	f009 fa05 	bl	8009cc8 <LOG_turnOn>
      break;
 80008be:	e004      	b.n	80008ca <MAIN_updateLogLevel+0xd2>

    default:
      ; /* Nothing to do */;
      break;
 80008c0:	bf00      	nop
 80008c2:	e002      	b.n	80008ca <MAIN_updateLogLevel+0xd2>
      break;
 80008c4:	bf00      	nop
 80008c6:	e000      	b.n	80008ca <MAIN_updateLogLevel+0xd2>
      break;
 80008c8:	bf00      	nop
  }

  if ((p_data->button != BLU_BUTTON_PAD_UP) && (p_data->button != BLU_BUTTON_PAD_DOWN))
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	7c1b      	ldrb	r3, [r3, #16]
 80008ce:	2b05      	cmp	r3, #5
 80008d0:	d00a      	beq.n	80008e8 <MAIN_updateLogLevel+0xf0>
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	7c1b      	ldrb	r3, [r3, #16]
 80008d6:	2b07      	cmp	r3, #7
 80008d8:	d006      	beq.n	80008e8 <MAIN_updateLogLevel+0xf0>
  {
    g_MAIN_padUpPressedStartTime   = 0;
 80008da:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MAIN_updateLogLevel+0xfc>)
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
    g_MAIN_padDownPressedStartTime = 0;
 80008e0:	4b05      	ldr	r3, [pc, #20]	; (80008f8 <MAIN_updateLogLevel+0x100>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */;
  }

  return;
 80008e6:	bf00      	nop
 80008e8:	bf00      	nop
}
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000614 	.word	0x20000614
 80008f4:	2000009c 	.word	0x2000009c
 80008f8:	200000a0 	.word	0x200000a0

080008fc <MAIN_updateLedMode>:

static void MAIN_updateLedMode(T_DRV_MODE p_driveMode, uint32_t p_voltageInMv)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	6039      	str	r1, [r7, #0]
 8000906:	71fb      	strb	r3, [r7, #7]
  /* Regarding LED mode, battery check is prioritary on user requests. */
  /* Ignore 0 value as we could get it at startup or while debugging.  */
  if ((p_voltageInMv != 0) && (p_voltageInMv < MAIN_MIN_BATTERY_LEVEL_IN_MV))
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	2b00      	cmp	r3, #0
 800090c:	d00d      	beq.n	800092a <MAIN_updateLedMode+0x2e>
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	f242 720f 	movw	r2, #9999	; 0x270f
 8000914:	4293      	cmp	r3, r2
 8000916:	d808      	bhi.n	800092a <MAIN_updateLedMode+0x2e>
  {
    LOG_warning("Battery is getting low: %u mV", p_voltageInMv);
 8000918:	683a      	ldr	r2, [r7, #0]
 800091a:	4911      	ldr	r1, [pc, #68]	; (8000960 <MAIN_updateLedMode+0x64>)
 800091c:	2002      	movs	r0, #2
 800091e:	f009 fa3f 	bl	8009da0 <LOG_log>

    LED_setMode(LED_MODE_FORCED_OFF);
 8000922:	2000      	movs	r0, #0
 8000924:	f009 f91a 	bl	8009b5c <LED_setMode>
 8000928:	e016      	b.n	8000958 <MAIN_updateLedMode+0x5c>
  }
  else
  {
    switch (p_driveMode)
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	2b02      	cmp	r3, #2
 800092e:	d00e      	beq.n	800094e <MAIN_updateLedMode+0x52>
 8000930:	2b02      	cmp	r3, #2
 8000932:	dc10      	bgt.n	8000956 <MAIN_updateLedMode+0x5a>
 8000934:	2b00      	cmp	r3, #0
 8000936:	d002      	beq.n	800093e <MAIN_updateLedMode+0x42>
 8000938:	2b01      	cmp	r3, #1
 800093a:	d004      	beq.n	8000946 <MAIN_updateLedMode+0x4a>
        LED_setMode(LED_MODE_BLINK_FAST);
        break;

      default:
        ; /* Nothing to do */
        break;
 800093c:	e00b      	b.n	8000956 <MAIN_updateLedMode+0x5a>
        LED_setMode(LED_MODE_BLINK_SLOW);
 800093e:	2002      	movs	r0, #2
 8000940:	f009 f90c 	bl	8009b5c <LED_setMode>
        break;
 8000944:	e008      	b.n	8000958 <MAIN_updateLedMode+0x5c>
        LED_setMode(LED_MODE_BLINK_MEDIUM);
 8000946:	2003      	movs	r0, #3
 8000948:	f009 f908 	bl	8009b5c <LED_setMode>
        break;
 800094c:	e004      	b.n	8000958 <MAIN_updateLedMode+0x5c>
        LED_setMode(LED_MODE_BLINK_FAST);
 800094e:	2004      	movs	r0, #4
 8000950:	f009 f904 	bl	8009b5c <LED_setMode>
        break;
 8000954:	e000      	b.n	8000958 <MAIN_updateLedMode+0x5c>
        break;
 8000956:	bf00      	nop
    }
  }

  return;
 8000958:	bf00      	nop
}
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	0800be6c 	.word	0x0800be6c

08000964 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b090      	sub	sp, #64	; 0x40
 8000968:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800096a:	f001 fb19 	bl	8001fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800096e:	f000 f9af 	bl	8000cd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000972:	f000 fdb1 	bl	80014d8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000976:	f000 fa8b 	bl	8000e90 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800097a:	f000 fd83 	bl	8001484 <MX_USART1_UART_Init>
  MX_UART4_Init();
 800097e:	f000 fd57 	bl	8001430 <MX_UART4_Init>
  MX_ADC1_Init();
 8000982:	f000 f9fd 	bl	8000d80 <MX_ADC1_Init>
  MX_TIM8_Init();
 8000986:	f000 fc8f 	bl	80012a8 <MX_TIM8_Init>
  MX_RTC_Init();
 800098a:	f000 fa37 	bl	8000dfc <MX_RTC_Init>
  MX_TIM7_Init();
 800098e:	f000 fc55 	bl	800123c <MX_TIM7_Init>
  MX_TIM2_Init();
 8000992:	f000 facd 	bl	8000f30 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000996:	f000 fb1f 	bl	8000fd8 <MX_TIM3_Init>
  MX_TIM4_Init();
 800099a:	f000 fb71 	bl	8001080 <MX_TIM4_Init>
  MX_TIM5_Init();
 800099e:	f000 fbc3 	bl	8001128 <MX_TIM5_Init>
  MX_TIM6_Init();
 80009a2:	f000 fc15 	bl	80011d0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* Setup global variables */
  g_MAIN_padUpPressedStartTime   = 0;
 80009a6:	4bad      	ldr	r3, [pc, #692]	; (8000c5c <main+0x2f8>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
  g_MAIN_padDownPressedStartTime = 0;
 80009ac:	4bac      	ldr	r3, [pc, #688]	; (8000c60 <main+0x2fc>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]

  /* Initialize commands string FIFO */
  SFO_init(&l_commandsFifo);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4618      	mov	r0, r3
 80009b8:	f009 fcf0 	bl	800a39c <SFO_init>

  /* Setup console */
  CON_init(&huart1);
 80009bc:	48a9      	ldr	r0, [pc, #676]	; (8000c64 <main+0x300>)
 80009be:	f008 f8e3 	bl	8008b88 <CON_init>

  /* Setup master connection */
  MAS_init(&huart4);
 80009c2:	48a9      	ldr	r0, [pc, #676]	; (8000c68 <main+0x304>)
 80009c4:	f009 fa7e 	bl	8009ec4 <MAS_init>

  /* Temporary delay/workaound to deal with debugger connection issue */
  for (int i = 0; i < 10; i++)
 80009c8:	2300      	movs	r3, #0
 80009ca:	633b      	str	r3, [r7, #48]	; 0x30
 80009cc:	e006      	b.n	80009dc <main+0x78>
  {
    HAL_Delay(1000);
 80009ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009d2:	f001 fb47 	bl	8002064 <HAL_Delay>
  for (int i = 0; i < 10; i++)
 80009d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009d8:	3301      	adds	r3, #1
 80009da:	633b      	str	r3, [r7, #48]	; 0x30
 80009dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009de:	2b09      	cmp	r3, #9
 80009e0:	ddf5      	ble.n	80009ce <main+0x6a>
  }

  /* Setup and start using logs */
  LOG_init    (&hrtc                );
 80009e2:	48a2      	ldr	r0, [pc, #648]	; (8000c6c <main+0x308>)
 80009e4:	f009 f962 	bl	8009cac <LOG_init>
  LOG_setLevel(STP_DEFAULT_LOG_LEVEL);
 80009e8:	2000      	movs	r0, #0
 80009ea:	f009 f999 	bl	8009d20 <LOG_setLevel>
  LOG_turnOn  (                     );
 80009ee:	f009 f96b 	bl	8009cc8 <LOG_turnOn>
  LOG_info    ("Starting RCFW"      );
 80009f2:	499f      	ldr	r1, [pc, #636]	; (8000c70 <main+0x30c>)
 80009f4:	2001      	movs	r0, #1
 80009f6:	f009 f9d3 	bl	8009da0 <LOG_log>

  LOG_info("12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890");
 80009fa:	499e      	ldr	r1, [pc, #632]	; (8000c74 <main+0x310>)
 80009fc:	2001      	movs	r0, #1
 80009fe:	f009 f9cf 	bl	8009da0 <LOG_log>
  LOG_info("toto");
 8000a02:	499d      	ldr	r1, [pc, #628]	; (8000c78 <main+0x314>)
 8000a04:	2001      	movs	r0, #1
 8000a06:	f009 f9cb 	bl	8009da0 <LOG_log>

  /* Display RCFW banner */
  MAIN_displayRcfwBanner();
 8000a0a:	f7ff feb7 	bl	800077c <MAIN_displayRcfwBanner>

  /* Initialize Timer 6 */
  l_halReturnCode = HAL_TIM_Base_Start(&htim6);
 8000a0e:	489b      	ldr	r0, [pc, #620]	; (8000c7c <main+0x318>)
 8000a10:	f004 fe34 	bl	800567c <HAL_TIM_Base_Start>
 8000a14:	4603      	mov	r3, r0
 8000a16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (l_halReturnCode != HAL_OK)
 8000a1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d007      	beq.n	8000a32 <main+0xce>
  {
    LOG_error("HAL_TIM_Base_Start(&htim6) returned an error code: %d", l_halReturnCode);
 8000a22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a26:	461a      	mov	r2, r3
 8000a28:	4995      	ldr	r1, [pc, #596]	; (8000c80 <main+0x31c>)
 8000a2a:	2003      	movs	r0, #3
 8000a2c:	f009 f9b8 	bl	8009da0 <LOG_log>
 8000a30:	e003      	b.n	8000a3a <main+0xd6>
  }
  else
  {
    LOG_info("Started TIMER 6 (time measurement)");
 8000a32:	4994      	ldr	r1, [pc, #592]	; (8000c84 <main+0x320>)
 8000a34:	2001      	movs	r0, #1
 8000a36:	f009 f9b3 	bl	8009da0 <LOG_log>
  }

  /* Initialize Timer 7 and delay function in utilities */
  UTI_init(&htim7);
 8000a3a:	4893      	ldr	r0, [pc, #588]	; (8000c88 <main+0x324>)
 8000a3c:	f009 fdae 	bl	800a59c <UTI_init>

  l_halReturnCode = HAL_TIM_Base_Start_IT(&htim7);
 8000a40:	4891      	ldr	r0, [pc, #580]	; (8000c88 <main+0x324>)
 8000a42:	f004 fea5 	bl	8005790 <HAL_TIM_Base_Start_IT>
 8000a46:	4603      	mov	r3, r0
 8000a48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (l_halReturnCode != HAL_OK)
 8000a4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d007      	beq.n	8000a64 <main+0x100>
  {
    LOG_error("HAL_TIM_Base_Start_IT(&htim7) returned an error code: %d", l_halReturnCode);
 8000a54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a58:	461a      	mov	r2, r3
 8000a5a:	498c      	ldr	r1, [pc, #560]	; (8000c8c <main+0x328>)
 8000a5c:	2003      	movs	r0, #3
 8000a5e:	f009 f99f 	bl	8009da0 <LOG_log>
 8000a62:	e003      	b.n	8000a6c <main+0x108>
  }
  else
  {
    LOG_info("Started TIMER 7 (utilities/delay)");
 8000a64:	498a      	ldr	r1, [pc, #552]	; (8000c90 <main+0x32c>)
 8000a66:	2001      	movs	r0, #1
 8000a68:	f009 f99a 	bl	8009da0 <LOG_log>
  }

  /* Initialize Timer 1 & green LED */
  LED_setMode(LED_MODE_BLINK_FAST);
 8000a6c:	2004      	movs	r0, #4
 8000a6e:	f009 f875 	bl	8009b5c <LED_setMode>

  l_halReturnCode = HAL_TIM_Base_Start_IT(&htim1);
 8000a72:	4888      	ldr	r0, [pc, #544]	; (8000c94 <main+0x330>)
 8000a74:	f004 fe8c 	bl	8005790 <HAL_TIM_Base_Start_IT>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (l_halReturnCode != HAL_OK)
 8000a7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d007      	beq.n	8000a96 <main+0x132>
  {
    LOG_error("HAL_TIM_Base_Start_IT(&htim1) returned an error code: %d", l_halReturnCode);
 8000a86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4982      	ldr	r1, [pc, #520]	; (8000c98 <main+0x334>)
 8000a8e:	2003      	movs	r0, #3
 8000a90:	f009 f986 	bl	8009da0 <LOG_log>
 8000a94:	e003      	b.n	8000a9e <main+0x13a>
  }
  else
  {
    LOG_info("Started TIMER 1 (green LED)");
 8000a96:	4981      	ldr	r1, [pc, #516]	; (8000c9c <main+0x338>)
 8000a98:	2001      	movs	r0, #1
 8000a9a:	f009 f981 	bl	8009da0 <LOG_log>
  }

  /* Initialize Timers 2, 3, 4 & 5 */
  l_halReturnCode  = HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000a9e:	213c      	movs	r1, #60	; 0x3c
 8000aa0:	487f      	ldr	r0, [pc, #508]	; (8000ca0 <main+0x33c>)
 8000aa2:	f005 faad 	bl	8006000 <HAL_TIM_Encoder_Start_IT>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000aac:	213c      	movs	r1, #60	; 0x3c
 8000aae:	487d      	ldr	r0, [pc, #500]	; (8000ca4 <main+0x340>)
 8000ab0:	f005 faa6 	bl	8006000 <HAL_TIM_Encoder_Start_IT>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000abc:	4313      	orrs	r3, r2
 8000abe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000ac2:	213c      	movs	r1, #60	; 0x3c
 8000ac4:	4878      	ldr	r0, [pc, #480]	; (8000ca8 <main+0x344>)
 8000ac6:	f005 fa9b 	bl	8006000 <HAL_TIM_Encoder_Start_IT>
 8000aca:	4603      	mov	r3, r0
 8000acc:	461a      	mov	r2, r3
 8000ace:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 8000ad8:	213c      	movs	r1, #60	; 0x3c
 8000ada:	4874      	ldr	r0, [pc, #464]	; (8000cac <main+0x348>)
 8000adc:	f005 fa90 	bl	8006000 <HAL_TIM_Encoder_Start_IT>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (l_halReturnCode != HAL_OK)
 8000aee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d007      	beq.n	8000b06 <main+0x1a2>
  {
    LOG_error("HAL_TIM_Encoder_Start_IT(&htimX) returned error code(s): %d", l_halReturnCode);
 8000af6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000afa:	461a      	mov	r2, r3
 8000afc:	496c      	ldr	r1, [pc, #432]	; (8000cb0 <main+0x34c>)
 8000afe:	2003      	movs	r0, #3
 8000b00:	f009 f94e 	bl	8009da0 <LOG_log>
 8000b04:	e003      	b.n	8000b0e <main+0x1aa>
  }
  else
  {
    LOG_info("Started TIMER 2, 3, 4, 5 (encoders)");
 8000b06:	496b      	ldr	r1, [pc, #428]	; (8000cb4 <main+0x350>)
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f009 f949 	bl	8009da0 <LOG_log>
  }

  /* Initialize Timer 8 */
  l_halReturnCode = HAL_TIM_Base_Start(&htim8);
 8000b0e:	486a      	ldr	r0, [pc, #424]	; (8000cb8 <main+0x354>)
 8000b10:	f004 fdb4 	bl	800567c <HAL_TIM_Base_Start>
 8000b14:	4603      	mov	r3, r0
 8000b16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (l_halReturnCode != HAL_OK)
 8000b1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d007      	beq.n	8000b32 <main+0x1ce>
  {
    LOG_error("HAL_TIM_Base_Start(&htim8) returned an error code: %d", l_halReturnCode);
 8000b22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b26:	461a      	mov	r2, r3
 8000b28:	4964      	ldr	r1, [pc, #400]	; (8000cbc <main+0x358>)
 8000b2a:	2003      	movs	r0, #3
 8000b2c:	f009 f938 	bl	8009da0 <LOG_log>
 8000b30:	e003      	b.n	8000b3a <main+0x1d6>
  }
  else
  {
    LOG_info("Started TIMER 8 (PWM channels)");
 8000b32:	4963      	ldr	r1, [pc, #396]	; (8000cc0 <main+0x35c>)
 8000b34:	2001      	movs	r0, #1
 8000b36:	f009 f933 	bl	8009da0 <LOG_log>
  }

  /* Initialize battery monitor */
  BAT_init(&hadc1, &hrtc);
 8000b3a:	494c      	ldr	r1, [pc, #304]	; (8000c6c <main+0x308>)
 8000b3c:	4861      	ldr	r0, [pc, #388]	; (8000cc4 <main+0x360>)
 8000b3e:	f007 fd73 	bl	8008628 <BAT_init>

  /* Initialize PWM channels */
  l_halReturnCode  = HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000b42:	2100      	movs	r1, #0
 8000b44:	485c      	ldr	r0, [pc, #368]	; (8000cb8 <main+0x354>)
 8000b46:	f004 ff91 	bl	8005a6c <HAL_TIM_PWM_Start>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  l_halReturnCode |= HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000b50:	2104      	movs	r1, #4
 8000b52:	4859      	ldr	r0, [pc, #356]	; (8000cb8 <main+0x354>)
 8000b54:	f004 ff8a 	bl	8005a6c <HAL_TIM_PWM_Start>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b60:	4313      	orrs	r3, r2
 8000b62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  l_halReturnCode |= HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000b66:	2108      	movs	r1, #8
 8000b68:	4853      	ldr	r0, [pc, #332]	; (8000cb8 <main+0x354>)
 8000b6a:	f004 ff7f 	bl	8005a6c <HAL_TIM_PWM_Start>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	461a      	mov	r2, r3
 8000b72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b76:	4313      	orrs	r3, r2
 8000b78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  l_halReturnCode |= HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000b7c:	210c      	movs	r1, #12
 8000b7e:	484e      	ldr	r0, [pc, #312]	; (8000cb8 <main+0x354>)
 8000b80:	f004 ff74 	bl	8005a6c <HAL_TIM_PWM_Start>
 8000b84:	4603      	mov	r3, r0
 8000b86:	461a      	mov	r2, r3
 8000b88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (l_halReturnCode != HAL_OK)
 8000b92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d007      	beq.n	8000baa <main+0x246>
  {
    LOG_error("HAL_TIM_PWM_Start(&htim8) returned error code(s): %d", l_halReturnCode);
 8000b9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	4949      	ldr	r1, [pc, #292]	; (8000cc8 <main+0x364>)
 8000ba2:	2003      	movs	r0, #3
 8000ba4:	f009 f8fc 	bl	8009da0 <LOG_log>
 8000ba8:	e003      	b.n	8000bb2 <main+0x24e>
  }
  else
  {
    LOG_info("Started PWM channels");
 8000baa:	4948      	ldr	r1, [pc, #288]	; (8000ccc <main+0x368>)
 8000bac:	2001      	movs	r0, #1
 8000bae:	f009 f8f7 	bl	8009da0 <LOG_log>
  }

  /* Initialize bluetooth control and data */
  BLU_init    ();
 8000bb2:	f007 ff1d 	bl	80089f0 <BLU_init>
  BLU_initData(&l_bluetoothData);
 8000bb6:	f107 0308 	add.w	r3, r7, #8
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f007 ff28 	bl	8008a10 <BLU_initData>

  /* Initialize driving module */
  DRV_init(&htim8, &htim2, &htim3, &htim4, &htim5);
 8000bc0:	4b3a      	ldr	r3, [pc, #232]	; (8000cac <main+0x348>)
 8000bc2:	9300      	str	r3, [sp, #0]
 8000bc4:	4b38      	ldr	r3, [pc, #224]	; (8000ca8 <main+0x344>)
 8000bc6:	4a37      	ldr	r2, [pc, #220]	; (8000ca4 <main+0x340>)
 8000bc8:	4935      	ldr	r1, [pc, #212]	; (8000ca0 <main+0x33c>)
 8000bca:	483b      	ldr	r0, [pc, #236]	; (8000cb8 <main+0x354>)
 8000bcc:	f008 f858 	bl	8008c80 <DRV_init>
  DRV_logInfo();
 8000bd0:	f008 fbe0 	bl	8009394 <DRV_logInfo>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  /* Initialize time measurement for master board control */
  l_lastTime = __HAL_TIM_GET_COUNTER(&htim6);
 8000bd4:	4b29      	ldr	r3, [pc, #164]	; (8000c7c <main+0x318>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bda:	86fb      	strh	r3, [r7, #54]	; 0x36

  while (1)
  {
    BLU_receiveData        (&l_bluetoothData);
 8000bdc:	f107 0308 	add.w	r3, r7, #8
 8000be0:	4618      	mov	r0, r3
 8000be2:	f007 ff2d 	bl	8008a40 <BLU_receiveData>
    DRV_updateFromBluetooth(&l_bluetoothData);
 8000be6:	f107 0308 	add.w	r3, r7, #8
 8000bea:	4618      	mov	r0, r3
 8000bec:	f008 f960 	bl	8008eb0 <DRV_updateFromBluetooth>

    l_driveMode = DRV_getMode();
 8000bf0:	f008 fbc6 	bl	8009380 <DRV_getMode>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    BAT_update         (&l_voltageInMv            );
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f007 fd61 	bl	80086c4 <BAT_update>
    MAIN_updateLedMode (l_driveMode, l_voltageInMv);
 8000c02:	687a      	ldr	r2, [r7, #4]
 8000c04:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000c08:	4611      	mov	r1, r2
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fe76 	bl	80008fc <MAIN_updateLedMode>
    MAIN_updateLogLevel(&l_bluetoothData          );
 8000c10:	f107 0308 	add.w	r3, r7, #8
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fdef 	bl	80007f8 <MAIN_updateLogLevel>

    UTI_delayUs(MAIN_LOOP_DELAY_IN_MS);
 8000c1a:	f242 7010 	movw	r0, #10000	; 0x2710
 8000c1e:	f009 fcd1 	bl	800a5c4 <UTI_delayUs>

    CON_updateFifo(&l_commandsFifo);
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	4618      	mov	r0, r3
 8000c28:	f008 f806 	bl	8008c38 <CON_updateFifo>
    MAS_updateFifo(&l_commandsFifo);
 8000c2c:	f107 031c 	add.w	r3, r7, #28
 8000c30:	4618      	mov	r0, r3
 8000c32:	f009 f99f 	bl	8009f74 <MAS_updateFifo>

    l_currentTime = __HAL_TIM_GET_COUNTER(&htim6);
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <main+0x318>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c3c:	85bb      	strh	r3, [r7, #44]	; 0x2c
    l_deltaTime   = l_lastTime - l_currentTime;
 8000c3e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8000c40:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	857b      	strh	r3, [r7, #42]	; 0x2a
    l_lastTime    = l_currentTime;
 8000c46:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000c48:	86fb      	strh	r3, [r7, #54]	; 0x36

    DRV_updateFromMaster(&l_commandsFifo, l_deltaTime);
 8000c4a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	4611      	mov	r1, r2
 8000c52:	4618      	mov	r0, r3
 8000c54:	f008 fa6c 	bl	8009130 <DRV_updateFromMaster>
    BLU_receiveData        (&l_bluetoothData);
 8000c58:	e7c0      	b.n	8000bdc <main+0x278>
 8000c5a:	bf00      	nop
 8000c5c:	2000009c 	.word	0x2000009c
 8000c60:	200000a0 	.word	0x200000a0
 8000c64:	200005a0 	.word	0x200005a0
 8000c68:	20000790 	.word	0x20000790
 8000c6c:	20000614 	.word	0x20000614
 8000c70:	0800be8c 	.word	0x0800be8c
 8000c74:	0800be9c 	.word	0x0800be9c
 8000c78:	0800bf2c 	.word	0x0800bf2c
 8000c7c:	20000628 	.word	0x20000628
 8000c80:	0800bf34 	.word	0x0800bf34
 8000c84:	0800bf6c 	.word	0x0800bf6c
 8000c88:	200008b8 	.word	0x200008b8
 8000c8c:	0800bf90 	.word	0x0800bf90
 8000c90:	0800bfcc 	.word	0x0800bfcc
 8000c94:	200006dc 	.word	0x200006dc
 8000c98:	0800bff0 	.word	0x0800bff0
 8000c9c:	0800c02c 	.word	0x0800c02c
 8000ca0:	20000804 	.word	0x20000804
 8000ca4:	200004bc 	.word	0x200004bc
 8000ca8:	20000354 	.word	0x20000354
 8000cac:	20000408 	.word	0x20000408
 8000cb0:	0800c048 	.word	0x0800c048
 8000cb4:	0800c084 	.word	0x0800c084
 8000cb8:	200002a0 	.word	0x200002a0
 8000cbc:	0800c0a8 	.word	0x0800c0a8
 8000cc0:	0800c0e0 	.word	0x0800c0e0
 8000cc4:	20000570 	.word	0x20000570
 8000cc8:	0800c100 	.word	0x0800c100
 8000ccc:	0800c138 	.word	0x0800c138

08000cd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b096      	sub	sp, #88	; 0x58
 8000cd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cda:	2228      	movs	r2, #40	; 0x28
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f009 fd82 	bl	800a7e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce4:	f107 031c 	add.w	r3, r7, #28
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
 8000d00:	611a      	str	r2, [r3, #16]
 8000d02:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000d04:	230a      	movs	r3, #10
 8000d06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d0c:	2310      	movs	r3, #16
 8000d0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d10:	2301      	movs	r3, #1
 8000d12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d18:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f002 fd57 	bl	80037d0 <HAL_RCC_OscConfig>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000d28:	f000 fcd6 	bl	80016d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d2c:	230f      	movs	r3, #15
 8000d2e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d30:	2300      	movs	r3, #0
 8000d32:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d34:	2300      	movs	r3, #0
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d40:	f107 031c 	add.w	r3, r7, #28
 8000d44:	2100      	movs	r1, #0
 8000d46:	4618      	mov	r0, r3
 8000d48:	f003 f8b2 	bl	8003eb0 <HAL_RCC_ClockConfig>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000d52:	f000 fcc1 	bl	80016d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000d56:	2303      	movs	r3, #3
 8000d58:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d5e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000d60:	2300      	movs	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	4618      	mov	r0, r3
 8000d68:	f003 fae2 	bl	8004330 <HAL_RCCEx_PeriphCLKConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000d72:	f000 fcb1 	bl	80016d8 <Error_Handler>
  }
}
 8000d76:	bf00      	nop
 8000d78:	3758      	adds	r7, #88	; 0x58
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d90:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <MX_ADC1_Init+0x74>)
 8000d92:	4a19      	ldr	r2, [pc, #100]	; (8000df8 <MX_ADC1_Init+0x78>)
 8000d94:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d96:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <MX_ADC1_Init+0x74>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d9c:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <MX_ADC1_Init+0x74>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000da2:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <MX_ADC1_Init+0x74>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <MX_ADC1_Init+0x74>)
 8000daa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000dae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000db0:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <MX_ADC1_Init+0x74>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <MX_ADC1_Init+0x74>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dbc:	480d      	ldr	r0, [pc, #52]	; (8000df4 <MX_ADC1_Init+0x74>)
 8000dbe:	f001 f975 	bl	80020ac <HAL_ADC_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000dc8:	f000 fc86 	bl	80016d8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000dcc:	2305      	movs	r3, #5
 8000dce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4805      	ldr	r0, [pc, #20]	; (8000df4 <MX_ADC1_Init+0x74>)
 8000dde:	f001 fd17 	bl	8002810 <HAL_ADC_ConfigChannel>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000de8:	f000 fc76 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000570 	.word	0x20000570
 8000df8:	40012400 	.word	0x40012400

08000dfc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	2100      	movs	r1, #0
 8000e06:	460a      	mov	r2, r1
 8000e08:	801a      	strh	r2, [r3, #0]
 8000e0a:	460a      	mov	r2, r1
 8000e0c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000e0e:	2300      	movs	r3, #0
 8000e10:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e12:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <MX_RTC_Init+0x8c>)
 8000e14:	4a1d      	ldr	r2, [pc, #116]	; (8000e8c <MX_RTC_Init+0x90>)
 8000e16:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000e18:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <MX_RTC_Init+0x8c>)
 8000e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8000e1e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8000e20:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <MX_RTC_Init+0x8c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e26:	4818      	ldr	r0, [pc, #96]	; (8000e88 <MX_RTC_Init+0x8c>)
 8000e28:	f003 fc9e 	bl	8004768 <HAL_RTC_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 8000e32:	f000 fc51 	bl	80016d8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	2201      	movs	r2, #1
 8000e46:	4619      	mov	r1, r3
 8000e48:	480f      	ldr	r0, [pc, #60]	; (8000e88 <MX_RTC_Init+0x8c>)
 8000e4a:	f003 fd57 	bl	80048fc <HAL_RTC_SetTime>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8000e54:	f000 fc40 	bl	80016d8 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8000e60:	2301      	movs	r3, #1
 8000e62:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000e68:	463b      	mov	r3, r7
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4806      	ldr	r0, [pc, #24]	; (8000e88 <MX_RTC_Init+0x8c>)
 8000e70:	f003 ff10 	bl	8004c94 <HAL_RTC_SetDate>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000e7a:	f000 fc2d 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000614 	.word	0x20000614
 8000e8c:	40002800 	.word	0x40002800

08000e90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e96:	f107 0308 	add.w	r3, r7, #8
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000eac:	4b1e      	ldr	r3, [pc, #120]	; (8000f28 <MX_TIM1_Init+0x98>)
 8000eae:	4a1f      	ldr	r2, [pc, #124]	; (8000f2c <MX_TIM1_Init+0x9c>)
 8000eb0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <MX_TIM1_Init+0x98>)
 8000eb4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000eb8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eba:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <MX_TIM1_Init+0x98>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8000ec0:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <MX_TIM1_Init+0x98>)
 8000ec2:	22f9      	movs	r2, #249	; 0xf9
 8000ec4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec6:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <MX_TIM1_Init+0x98>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ecc:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <MX_TIM1_Init+0x98>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <MX_TIM1_Init+0x98>)
 8000ed4:	2280      	movs	r2, #128	; 0x80
 8000ed6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ed8:	4813      	ldr	r0, [pc, #76]	; (8000f28 <MX_TIM1_Init+0x98>)
 8000eda:	f004 fafd 	bl	80054d8 <HAL_TIM_Base_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000ee4:	f000 fbf8 	bl	80016d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000eee:	f107 0308 	add.w	r3, r7, #8
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	480c      	ldr	r0, [pc, #48]	; (8000f28 <MX_TIM1_Init+0x98>)
 8000ef6:	f005 fc27 	bl	8006748 <HAL_TIM_ConfigClockSource>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000f00:	f000 fbea 	bl	80016d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f04:	2300      	movs	r3, #0
 8000f06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_TIM1_Init+0x98>)
 8000f12:	f006 fb75 	bl	8007600 <HAL_TIMEx_MasterConfigSynchronization>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000f1c:	f000 fbdc 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200006dc 	.word	0x200006dc
 8000f2c:	40012c00 	.word	0x40012c00

08000f30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08c      	sub	sp, #48	; 0x30
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f36:	f107 030c 	add.w	r3, r7, #12
 8000f3a:	2224      	movs	r2, #36	; 0x24
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f009 fc52 	bl	800a7e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f4c:	4b21      	ldr	r3, [pc, #132]	; (8000fd4 <MX_TIM2_Init+0xa4>)
 8000f4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f54:	4b1f      	ldr	r3, [pc, #124]	; (8000fd4 <MX_TIM2_Init+0xa4>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5a:	4b1e      	ldr	r3, [pc, #120]	; (8000fd4 <MX_TIM2_Init+0xa4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000f60:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <MX_TIM2_Init+0xa4>)
 8000f62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f68:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <MX_TIM2_Init+0xa4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f6e:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <MX_TIM2_Init+0xa4>)
 8000f70:	2280      	movs	r2, #128	; 0x80
 8000f72:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f74:	2303      	movs	r3, #3
 8000f76:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000f84:	230a      	movs	r3, #10
 8000f86:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <MX_TIM2_Init+0xa4>)
 8000fa0:	f004 fe8c 	bl	8005cbc <HAL_TIM_Encoder_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000faa:	f000 fb95 	bl	80016d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <MX_TIM2_Init+0xa4>)
 8000fbc:	f006 fb20 	bl	8007600 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000fc6:	f000 fb87 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fca:	bf00      	nop
 8000fcc:	3730      	adds	r7, #48	; 0x30
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000804 	.word	0x20000804

08000fd8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08c      	sub	sp, #48	; 0x30
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fde:	f107 030c 	add.w	r3, r7, #12
 8000fe2:	2224      	movs	r2, #36	; 0x24
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f009 fbfe 	bl	800a7e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ff4:	4b20      	ldr	r3, [pc, #128]	; (8001078 <MX_TIM3_Init+0xa0>)
 8000ff6:	4a21      	ldr	r2, [pc, #132]	; (800107c <MX_TIM3_Init+0xa4>)
 8000ff8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ffa:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <MX_TIM3_Init+0xa0>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001000:	4b1d      	ldr	r3, [pc, #116]	; (8001078 <MX_TIM3_Init+0xa0>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001006:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <MX_TIM3_Init+0xa0>)
 8001008:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800100c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800100e:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <MX_TIM3_Init+0xa0>)
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001014:	4b18      	ldr	r3, [pc, #96]	; (8001078 <MX_TIM3_Init+0xa0>)
 8001016:	2280      	movs	r2, #128	; 0x80
 8001018:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800101a:	2303      	movs	r3, #3
 800101c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001022:	2301      	movs	r3, #1
 8001024:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800102a:	230a      	movs	r3, #10
 800102c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800102e:	2300      	movs	r3, #0
 8001030:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001032:	2301      	movs	r3, #1
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001036:	2300      	movs	r3, #0
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	4619      	mov	r1, r3
 8001044:	480c      	ldr	r0, [pc, #48]	; (8001078 <MX_TIM3_Init+0xa0>)
 8001046:	f004 fe39 	bl	8005cbc <HAL_TIM_Encoder_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001050:	f000 fb42 	bl	80016d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001054:	2300      	movs	r3, #0
 8001056:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	4619      	mov	r1, r3
 8001060:	4805      	ldr	r0, [pc, #20]	; (8001078 <MX_TIM3_Init+0xa0>)
 8001062:	f006 facd 	bl	8007600 <HAL_TIMEx_MasterConfigSynchronization>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800106c:	f000 fb34 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001070:	bf00      	nop
 8001072:	3730      	adds	r7, #48	; 0x30
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200004bc 	.word	0x200004bc
 800107c:	40000400 	.word	0x40000400

08001080 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08c      	sub	sp, #48	; 0x30
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	2224      	movs	r2, #36	; 0x24
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f009 fbaa 	bl	800a7e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800109c:	4b20      	ldr	r3, [pc, #128]	; (8001120 <MX_TIM4_Init+0xa0>)
 800109e:	4a21      	ldr	r2, [pc, #132]	; (8001124 <MX_TIM4_Init+0xa4>)
 80010a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80010a2:	4b1f      	ldr	r3, [pc, #124]	; (8001120 <MX_TIM4_Init+0xa0>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a8:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <MX_TIM4_Init+0xa0>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80010ae:	4b1c      	ldr	r3, [pc, #112]	; (8001120 <MX_TIM4_Init+0xa0>)
 80010b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010b4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b6:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <MX_TIM4_Init+0xa0>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010bc:	4b18      	ldr	r3, [pc, #96]	; (8001120 <MX_TIM4_Init+0xa0>)
 80010be:	2280      	movs	r2, #128	; 0x80
 80010c0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010c2:	2303      	movs	r3, #3
 80010c4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010ca:	2301      	movs	r3, #1
 80010cc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80010d2:	230a      	movs	r3, #10
 80010d4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010d6:	2300      	movs	r3, #0
 80010d8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010da:	2301      	movs	r3, #1
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	4619      	mov	r1, r3
 80010ec:	480c      	ldr	r0, [pc, #48]	; (8001120 <MX_TIM4_Init+0xa0>)
 80010ee:	f004 fde5 	bl	8005cbc <HAL_TIM_Encoder_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80010f8:	f000 faee 	bl	80016d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010fc:	2300      	movs	r3, #0
 80010fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001100:	2300      	movs	r3, #0
 8001102:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	4619      	mov	r1, r3
 8001108:	4805      	ldr	r0, [pc, #20]	; (8001120 <MX_TIM4_Init+0xa0>)
 800110a:	f006 fa79 	bl	8007600 <HAL_TIMEx_MasterConfigSynchronization>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001114:	f000 fae0 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001118:	bf00      	nop
 800111a:	3730      	adds	r7, #48	; 0x30
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20000354 	.word	0x20000354
 8001124:	40000800 	.word	0x40000800

08001128 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08c      	sub	sp, #48	; 0x30
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	2224      	movs	r2, #36	; 0x24
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f009 fb56 	bl	800a7e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001144:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <MX_TIM5_Init+0xa0>)
 8001146:	4a21      	ldr	r2, [pc, #132]	; (80011cc <MX_TIM5_Init+0xa4>)
 8001148:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800114a:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <MX_TIM5_Init+0xa0>)
 800114c:	2200      	movs	r2, #0
 800114e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001150:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <MX_TIM5_Init+0xa0>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001156:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <MX_TIM5_Init+0xa0>)
 8001158:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800115c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800115e:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <MX_TIM5_Init+0xa0>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001164:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <MX_TIM5_Init+0xa0>)
 8001166:	2280      	movs	r2, #128	; 0x80
 8001168:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800116a:	2303      	movs	r3, #3
 800116c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001172:	2301      	movs	r3, #1
 8001174:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001176:	2300      	movs	r3, #0
 8001178:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800117a:	230a      	movs	r3, #10
 800117c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800117e:	2300      	movs	r3, #0
 8001180:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001182:	2301      	movs	r3, #1
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001186:	2300      	movs	r3, #0
 8001188:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800118a:	2300      	movs	r3, #0
 800118c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800118e:	f107 030c 	add.w	r3, r7, #12
 8001192:	4619      	mov	r1, r3
 8001194:	480c      	ldr	r0, [pc, #48]	; (80011c8 <MX_TIM5_Init+0xa0>)
 8001196:	f004 fd91 	bl	8005cbc <HAL_TIM_Encoder_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80011a0:	f000 fa9a 	bl	80016d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a4:	2300      	movs	r3, #0
 80011a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	4619      	mov	r1, r3
 80011b0:	4805      	ldr	r0, [pc, #20]	; (80011c8 <MX_TIM5_Init+0xa0>)
 80011b2:	f006 fa25 	bl	8007600 <HAL_TIMEx_MasterConfigSynchronization>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80011bc:	f000 fa8c 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80011c0:	bf00      	nop
 80011c2:	3730      	adds	r7, #48	; 0x30
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000408 	.word	0x20000408
 80011cc:	40000c00 	.word	0x40000c00

080011d0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d6:	463b      	mov	r3, r7
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80011de:	4b15      	ldr	r3, [pc, #84]	; (8001234 <MX_TIM6_Init+0x64>)
 80011e0:	4a15      	ldr	r2, [pc, #84]	; (8001238 <MX_TIM6_Init+0x68>)
 80011e2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7;
 80011e4:	4b13      	ldr	r3, [pc, #76]	; (8001234 <MX_TIM6_Init+0x64>)
 80011e6:	2207      	movs	r2, #7
 80011e8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ea:	4b12      	ldr	r3, [pc, #72]	; (8001234 <MX_TIM6_Init+0x64>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80011f0:	4b10      	ldr	r3, [pc, #64]	; (8001234 <MX_TIM6_Init+0x64>)
 80011f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011f6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011f8:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <MX_TIM6_Init+0x64>)
 80011fa:	2280      	movs	r2, #128	; 0x80
 80011fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80011fe:	480d      	ldr	r0, [pc, #52]	; (8001234 <MX_TIM6_Init+0x64>)
 8001200:	f004 f96a 	bl	80054d8 <HAL_TIM_Base_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800120a:	f000 fa65 	bl	80016d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120e:	2300      	movs	r3, #0
 8001210:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001216:	463b      	mov	r3, r7
 8001218:	4619      	mov	r1, r3
 800121a:	4806      	ldr	r0, [pc, #24]	; (8001234 <MX_TIM6_Init+0x64>)
 800121c:	f006 f9f0 	bl	8007600 <HAL_TIMEx_MasterConfigSynchronization>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001226:	f000 fa57 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000628 	.word	0x20000628
 8001238:	40001000 	.word	0x40001000

0800123c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001242:	463b      	mov	r3, r7
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800124a:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <MX_TIM7_Init+0x64>)
 800124c:	4a15      	ldr	r2, [pc, #84]	; (80012a4 <MX_TIM7_Init+0x68>)
 800124e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7;
 8001250:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <MX_TIM7_Init+0x64>)
 8001252:	2207      	movs	r2, #7
 8001254:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <MX_TIM7_Init+0x64>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800125c:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <MX_TIM7_Init+0x64>)
 800125e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001262:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001264:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <MX_TIM7_Init+0x64>)
 8001266:	2280      	movs	r2, #128	; 0x80
 8001268:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800126a:	480d      	ldr	r0, [pc, #52]	; (80012a0 <MX_TIM7_Init+0x64>)
 800126c:	f004 f934 	bl	80054d8 <HAL_TIM_Base_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001276:	f000 fa2f 	bl	80016d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127a:	2300      	movs	r3, #0
 800127c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001282:	463b      	mov	r3, r7
 8001284:	4619      	mov	r1, r3
 8001286:	4806      	ldr	r0, [pc, #24]	; (80012a0 <MX_TIM7_Init+0x64>)
 8001288:	f006 f9ba 	bl	8007600 <HAL_TIMEx_MasterConfigSynchronization>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001292:	f000 fa21 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200008b8 	.word	0x200008b8
 80012a4:	40001400 	.word	0x40001400

080012a8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b096      	sub	sp, #88	; 0x58
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
 80012d4:	611a      	str	r2, [r3, #16]
 80012d6:	615a      	str	r2, [r3, #20]
 80012d8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	2220      	movs	r2, #32
 80012de:	2100      	movs	r1, #0
 80012e0:	4618      	mov	r0, r3
 80012e2:	f009 fa81 	bl	800a7e8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80012e6:	4b50      	ldr	r3, [pc, #320]	; (8001428 <MX_TIM8_Init+0x180>)
 80012e8:	4a50      	ldr	r2, [pc, #320]	; (800142c <MX_TIM8_Init+0x184>)
 80012ea:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7;
 80012ec:	4b4e      	ldr	r3, [pc, #312]	; (8001428 <MX_TIM8_Init+0x180>)
 80012ee:	2207      	movs	r2, #7
 80012f0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f2:	4b4d      	ldr	r3, [pc, #308]	; (8001428 <MX_TIM8_Init+0x180>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100;
 80012f8:	4b4b      	ldr	r3, [pc, #300]	; (8001428 <MX_TIM8_Init+0x180>)
 80012fa:	2264      	movs	r2, #100	; 0x64
 80012fc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fe:	4b4a      	ldr	r3, [pc, #296]	; (8001428 <MX_TIM8_Init+0x180>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001304:	4b48      	ldr	r3, [pc, #288]	; (8001428 <MX_TIM8_Init+0x180>)
 8001306:	2200      	movs	r2, #0
 8001308:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800130a:	4b47      	ldr	r3, [pc, #284]	; (8001428 <MX_TIM8_Init+0x180>)
 800130c:	2280      	movs	r2, #128	; 0x80
 800130e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001310:	4845      	ldr	r0, [pc, #276]	; (8001428 <MX_TIM8_Init+0x180>)
 8001312:	f004 f8e1 	bl	80054d8 <HAL_TIM_Base_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 800131c:	f000 f9dc 	bl	80016d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001324:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001326:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800132a:	4619      	mov	r1, r3
 800132c:	483e      	ldr	r0, [pc, #248]	; (8001428 <MX_TIM8_Init+0x180>)
 800132e:	f005 fa0b 	bl	8006748 <HAL_TIM_ConfigClockSource>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001338:	f000 f9ce 	bl	80016d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800133c:	483a      	ldr	r0, [pc, #232]	; (8001428 <MX_TIM8_Init+0x180>)
 800133e:	f004 fab9 	bl	80058b4 <HAL_TIM_PWM_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001348:	f000 f9c6 	bl	80016d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134c:	2300      	movs	r3, #0
 800134e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001350:	2300      	movs	r3, #0
 8001352:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001354:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001358:	4619      	mov	r1, r3
 800135a:	4833      	ldr	r0, [pc, #204]	; (8001428 <MX_TIM8_Init+0x180>)
 800135c:	f006 f950 	bl	8007600 <HAL_TIMEx_MasterConfigSynchronization>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8001366:	f000 f9b7 	bl	80016d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800136a:	2360      	movs	r3, #96	; 0x60
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001372:	2300      	movs	r3, #0
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001376:	2300      	movs	r3, #0
 8001378:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800137e:	2300      	movs	r3, #0
 8001380:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001382:	2300      	movs	r3, #0
 8001384:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138a:	2200      	movs	r2, #0
 800138c:	4619      	mov	r1, r3
 800138e:	4826      	ldr	r0, [pc, #152]	; (8001428 <MX_TIM8_Init+0x180>)
 8001390:	f005 f83c 	bl	800640c <HAL_TIM_PWM_ConfigChannel>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800139a:	f000 f99d 	bl	80016d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800139e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a2:	2204      	movs	r2, #4
 80013a4:	4619      	mov	r1, r3
 80013a6:	4820      	ldr	r0, [pc, #128]	; (8001428 <MX_TIM8_Init+0x180>)
 80013a8:	f005 f830 	bl	800640c <HAL_TIM_PWM_ConfigChannel>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 80013b2:	f000 f991 	bl	80016d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ba:	2208      	movs	r2, #8
 80013bc:	4619      	mov	r1, r3
 80013be:	481a      	ldr	r0, [pc, #104]	; (8001428 <MX_TIM8_Init+0x180>)
 80013c0:	f005 f824 	bl	800640c <HAL_TIM_PWM_ConfigChannel>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 80013ca:	f000 f985 	bl	80016d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d2:	220c      	movs	r2, #12
 80013d4:	4619      	mov	r1, r3
 80013d6:	4814      	ldr	r0, [pc, #80]	; (8001428 <MX_TIM8_Init+0x180>)
 80013d8:	f005 f818 	bl	800640c <HAL_TIM_PWM_ConfigChannel>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 80013e2:	f000 f979 	bl	80016d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001400:	2300      	movs	r3, #0
 8001402:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	4619      	mov	r1, r3
 8001408:	4807      	ldr	r0, [pc, #28]	; (8001428 <MX_TIM8_Init+0x180>)
 800140a:	f006 f9c9 	bl	80077a0 <HAL_TIMEx_ConfigBreakDeadTime>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM8_Init+0x170>
  {
    Error_Handler();
 8001414:	f000 f960 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001418:	4803      	ldr	r0, [pc, #12]	; (8001428 <MX_TIM8_Init+0x180>)
 800141a:	f000 fb7f 	bl	8001b1c <HAL_TIM_MspPostInit>

}
 800141e:	bf00      	nop
 8001420:	3758      	adds	r7, #88	; 0x58
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200002a0 	.word	0x200002a0
 800142c:	40013400 	.word	0x40013400

08001430 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <MX_UART4_Init+0x4c>)
 8001436:	4a12      	ldr	r2, [pc, #72]	; (8001480 <MX_UART4_Init+0x50>)
 8001438:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <MX_UART4_Init+0x4c>)
 800143c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001440:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <MX_UART4_Init+0x4c>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <MX_UART4_Init+0x4c>)
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <MX_UART4_Init+0x4c>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <MX_UART4_Init+0x4c>)
 8001456:	220c      	movs	r2, #12
 8001458:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <MX_UART4_Init+0x4c>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <MX_UART4_Init+0x4c>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <MX_UART4_Init+0x4c>)
 8001468:	f006 fa82 	bl	8007970 <HAL_UART_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001472:	f000 f931 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000790 	.word	0x20000790
 8001480:	40004c00 	.word	0x40004c00

08001484 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <MX_USART1_UART_Init+0x4c>)
 800148a:	4a12      	ldr	r2, [pc, #72]	; (80014d4 <MX_USART1_UART_Init+0x50>)
 800148c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <MX_USART1_UART_Init+0x4c>)
 8001490:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001494:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <MX_USART1_UART_Init+0x4c>)
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <MX_USART1_UART_Init+0x4c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014a2:	4b0b      	ldr	r3, [pc, #44]	; (80014d0 <MX_USART1_UART_Init+0x4c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <MX_USART1_UART_Init+0x4c>)
 80014aa:	220c      	movs	r2, #12
 80014ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ae:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <MX_USART1_UART_Init+0x4c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <MX_USART1_UART_Init+0x4c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014ba:	4805      	ldr	r0, [pc, #20]	; (80014d0 <MX_USART1_UART_Init+0x4c>)
 80014bc:	f006 fa58 	bl	8007970 <HAL_UART_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014c6:	f000 f907 	bl	80016d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200005a0 	.word	0x200005a0
 80014d4:	40013800 	.word	0x40013800

080014d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014de:	f107 0310 	add.w	r3, r7, #16
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ec:	4b4e      	ldr	r3, [pc, #312]	; (8001628 <MX_GPIO_Init+0x150>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	4a4d      	ldr	r2, [pc, #308]	; (8001628 <MX_GPIO_Init+0x150>)
 80014f2:	f043 0310 	orr.w	r3, r3, #16
 80014f6:	6193      	str	r3, [r2, #24]
 80014f8:	4b4b      	ldr	r3, [pc, #300]	; (8001628 <MX_GPIO_Init+0x150>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	f003 0310 	and.w	r3, r3, #16
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001504:	4b48      	ldr	r3, [pc, #288]	; (8001628 <MX_GPIO_Init+0x150>)
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	4a47      	ldr	r2, [pc, #284]	; (8001628 <MX_GPIO_Init+0x150>)
 800150a:	f043 0304 	orr.w	r3, r3, #4
 800150e:	6193      	str	r3, [r2, #24]
 8001510:	4b45      	ldr	r3, [pc, #276]	; (8001628 <MX_GPIO_Init+0x150>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151c:	4b42      	ldr	r3, [pc, #264]	; (8001628 <MX_GPIO_Init+0x150>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	4a41      	ldr	r2, [pc, #260]	; (8001628 <MX_GPIO_Init+0x150>)
 8001522:	f043 0308 	orr.w	r3, r3, #8
 8001526:	6193      	str	r3, [r2, #24]
 8001528:	4b3f      	ldr	r3, [pc, #252]	; (8001628 <MX_GPIO_Init+0x150>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	f003 0308 	and.w	r3, r3, #8
 8001530:	607b      	str	r3, [r7, #4]
 8001532:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001534:	4b3c      	ldr	r3, [pc, #240]	; (8001628 <MX_GPIO_Init+0x150>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	4a3b      	ldr	r2, [pc, #236]	; (8001628 <MX_GPIO_Init+0x150>)
 800153a:	f043 0320 	orr.w	r3, r3, #32
 800153e:	6193      	str	r3, [r2, #24]
 8001540:	4b39      	ldr	r3, [pc, #228]	; (8001628 <MX_GPIO_Init+0x150>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f003 0320 	and.w	r3, r3, #32
 8001548:	603b      	str	r3, [r7, #0]
 800154a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BLUE_LED_Pin|BLUETOOTH_SPI_CMD_Pin|BLUETOOTH_SPI_CS_Pin|MOTOR_FRONT_RIGHT_IN_1_Pin
 800154c:	2200      	movs	r2, #0
 800154e:	f243 013a 	movw	r1, #12346	; 0x303a
 8001552:	4836      	ldr	r0, [pc, #216]	; (800162c <MX_GPIO_Init+0x154>)
 8001554:	f002 f8d6 	bl	8003704 <HAL_GPIO_WritePin>
                          |MOTOR_FRONT_RIGHT_IN_2_Pin|MOTOR_REAR_LEFT_IN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUETOOTH_SPI_CLK_GPIO_Port, BLUETOOTH_SPI_CLK_Pin, GPIO_PIN_RESET);
 8001558:	2200      	movs	r2, #0
 800155a:	2110      	movs	r1, #16
 800155c:	4834      	ldr	r0, [pc, #208]	; (8001630 <MX_GPIO_Init+0x158>)
 800155e:	f002 f8d1 	bl	8003704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_FRONT_LEFT_IN_1_Pin|MOTOR_FRONT_LEFT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_1_Pin, GPIO_PIN_RESET);
 8001562:	2200      	movs	r2, #0
 8001564:	2133      	movs	r1, #51	; 0x33
 8001566:	4833      	ldr	r0, [pc, #204]	; (8001634 <MX_GPIO_Init+0x15c>)
 8001568:	f002 f8cc 	bl	8003704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_REAR_LEFT_IN_1_GPIO_Port, MOTOR_REAR_LEFT_IN_1_Pin, GPIO_PIN_RESET);
 800156c:	2200      	movs	r2, #0
 800156e:	2104      	movs	r1, #4
 8001570:	4831      	ldr	r0, [pc, #196]	; (8001638 <MX_GPIO_Init+0x160>)
 8001572:	f002 f8c7 	bl	8003704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8001576:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800157a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157c:	2301      	movs	r3, #1
 800157e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001584:	2302      	movs	r3, #2
 8001586:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8001588:	f107 0310 	add.w	r3, r7, #16
 800158c:	4619      	mov	r1, r3
 800158e:	4827      	ldr	r0, [pc, #156]	; (800162c <MX_GPIO_Init+0x154>)
 8001590:	f001 fe24 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pins : BLUETOOTH_SPI_CMD_Pin BLUETOOTH_SPI_CS_Pin MOTOR_FRONT_RIGHT_IN_1_Pin MOTOR_FRONT_RIGHT_IN_2_Pin
                           MOTOR_REAR_LEFT_IN_2_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_CMD_Pin|BLUETOOTH_SPI_CS_Pin|MOTOR_FRONT_RIGHT_IN_1_Pin|MOTOR_FRONT_RIGHT_IN_2_Pin
 8001594:	f241 033a 	movw	r3, #4154	; 0x103a
 8001598:	613b      	str	r3, [r7, #16]
                          |MOTOR_REAR_LEFT_IN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159a:	2301      	movs	r3, #1
 800159c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015a2:	2303      	movs	r3, #3
 80015a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a6:	f107 0310 	add.w	r3, r7, #16
 80015aa:	4619      	mov	r1, r3
 80015ac:	481f      	ldr	r0, [pc, #124]	; (800162c <MX_GPIO_Init+0x154>)
 80015ae:	f001 fe15 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUETOOTH_SPI_DAT_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_DAT_Pin;
 80015b2:	2304      	movs	r3, #4
 80015b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BLUETOOTH_SPI_DAT_GPIO_Port, &GPIO_InitStruct);
 80015be:	f107 0310 	add.w	r3, r7, #16
 80015c2:	4619      	mov	r1, r3
 80015c4:	4819      	ldr	r0, [pc, #100]	; (800162c <MX_GPIO_Init+0x154>)
 80015c6:	f001 fe09 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUETOOTH_SPI_CLK_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_CLK_Pin;
 80015ca:	2310      	movs	r3, #16
 80015cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015d6:	2303      	movs	r3, #3
 80015d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUETOOTH_SPI_CLK_GPIO_Port, &GPIO_InitStruct);
 80015da:	f107 0310 	add.w	r3, r7, #16
 80015de:	4619      	mov	r1, r3
 80015e0:	4813      	ldr	r0, [pc, #76]	; (8001630 <MX_GPIO_Init+0x158>)
 80015e2:	f001 fdfb 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_FRONT_LEFT_IN_1_Pin MOTOR_FRONT_LEFT_IN_2_Pin MOTOR_REAR_RIGHT_IN_2_Pin MOTOR_REAR_RIGHT_IN_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_FRONT_LEFT_IN_1_Pin|MOTOR_FRONT_LEFT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_1_Pin;
 80015e6:	2333      	movs	r3, #51	; 0x33
 80015e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ea:	2301      	movs	r3, #1
 80015ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015f2:	2303      	movs	r3, #3
 80015f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f6:	f107 0310 	add.w	r3, r7, #16
 80015fa:	4619      	mov	r1, r3
 80015fc:	480d      	ldr	r0, [pc, #52]	; (8001634 <MX_GPIO_Init+0x15c>)
 80015fe:	f001 fded 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_REAR_LEFT_IN_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_REAR_LEFT_IN_1_Pin;
 8001602:	2304      	movs	r3, #4
 8001604:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001606:	2301      	movs	r3, #1
 8001608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800160e:	2303      	movs	r3, #3
 8001610:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MOTOR_REAR_LEFT_IN_1_GPIO_Port, &GPIO_InitStruct);
 8001612:	f107 0310 	add.w	r3, r7, #16
 8001616:	4619      	mov	r1, r3
 8001618:	4807      	ldr	r0, [pc, #28]	; (8001638 <MX_GPIO_Init+0x160>)
 800161a:	f001 fddf 	bl	80031dc <HAL_GPIO_Init>

}
 800161e:	bf00      	nop
 8001620:	3720      	adds	r7, #32
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40021000 	.word	0x40021000
 800162c:	40011000 	.word	0x40011000
 8001630:	40010800 	.word	0x40010800
 8001634:	40010c00 	.word	0x40010c00
 8001638:	40011400 	.word	0x40011400

0800163c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  if ((htim == &htim2) || (htim == &htim3) || (htim == &htim4) || (htim == &htim5))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <HAL_TIM_IC_CaptureCallback+0x38>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d00b      	beq.n	8001664 <HAL_TIM_IC_CaptureCallback+0x28>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d007      	beq.n	8001664 <HAL_TIM_IC_CaptureCallback+0x28>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a09      	ldr	r2, [pc, #36]	; (800167c <HAL_TIM_IC_CaptureCallback+0x40>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d003      	beq.n	8001664 <HAL_TIM_IC_CaptureCallback+0x28>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a08      	ldr	r2, [pc, #32]	; (8001680 <HAL_TIM_IC_CaptureCallback+0x44>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d103      	bne.n	800166c <HAL_TIM_IC_CaptureCallback+0x30>
  {
    DRV_updateEncoder(htim);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f007 fbdf 	bl	8008e28 <DRV_updateEncoder>
  else
  {
    ; /* Nothing to do */
  }

  return;
 800166a:	bf00      	nop
 800166c:	bf00      	nop
}
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000804 	.word	0x20000804
 8001678:	200004bc 	.word	0x200004bc
 800167c:	20000354 	.word	0x20000354
 8001680:	20000408 	.word	0x20000408

08001684 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Check the handle of the timer triggering this callback and update LED */
  if (htim == &htim1)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a04      	ldr	r2, [pc, #16]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d101      	bne.n	8001698 <HAL_TIM_PeriodElapsedCallback+0x14>
  {
    LED_update();
 8001694:	f008 faaa 	bl	8009bec <LED_update>
  }
  else
  {
    ; /* Nothing to do */
  }
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	200006dc 	.word	0x200006dc

080016a4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* Check the handle of the UART triggering this callback and actually receive date */
  if (huart == &huart1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a08      	ldr	r2, [pc, #32]	; (80016d0 <HAL_UART_RxCpltCallback+0x2c>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d102      	bne.n	80016ba <HAL_UART_RxCpltCallback+0x16>
  {
    CON_receiveData();
 80016b4:	f007 fa94 	bl	8008be0 <CON_receiveData>
  }
  else
  {
    ; /* Nothing to do */
  }
}
 80016b8:	e005      	b.n	80016c6 <HAL_UART_RxCpltCallback+0x22>
  else if (huart == &huart4)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <HAL_UART_RxCpltCallback+0x30>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d101      	bne.n	80016c6 <HAL_UART_RxCpltCallback+0x22>
    MAS_receiveData();
 80016c2:	f008 fc2b 	bl	8009f1c <MAS_receiveData>
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	200005a0 	.word	0x200005a0
 80016d4:	20000790 	.word	0x20000790

080016d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016dc:	b672      	cpsid	i
}
 80016de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  LOG_error("Error_Handler() triggered");
 80016e0:	4902      	ldr	r1, [pc, #8]	; (80016ec <Error_Handler+0x14>)
 80016e2:	2003      	movs	r0, #3
 80016e4:	f008 fb5c 	bl	8009da0 <LOG_log>

  while (1)
 80016e8:	e7fe      	b.n	80016e8 <Error_Handler+0x10>
 80016ea:	bf00      	nop
 80016ec:	0800c150 	.word	0x0800c150

080016f0 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
     LOG_error("Wrong parameters: %s@%d", file, line);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	4904      	ldr	r1, [pc, #16]	; (8001710 <assert_failed+0x20>)
 8001700:	2003      	movs	r0, #3
 8001702:	f008 fb4d 	bl	8009da0 <LOG_log>

    return;
 8001706:	bf00      	nop
  /* USER CODE END 6 */
}
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	0800c16c 	.word	0x0800c16c

08001714 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <HAL_MspInit+0x5c>)
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	4a14      	ldr	r2, [pc, #80]	; (8001770 <HAL_MspInit+0x5c>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6193      	str	r3, [r2, #24]
 8001726:	4b12      	ldr	r3, [pc, #72]	; (8001770 <HAL_MspInit+0x5c>)
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001732:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <HAL_MspInit+0x5c>)
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	4a0e      	ldr	r2, [pc, #56]	; (8001770 <HAL_MspInit+0x5c>)
 8001738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173c:	61d3      	str	r3, [r2, #28]
 800173e:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <HAL_MspInit+0x5c>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800174a:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <HAL_MspInit+0x60>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	4a04      	ldr	r2, [pc, #16]	; (8001774 <HAL_MspInit+0x60>)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001766:	bf00      	nop
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr
 8001770:	40021000 	.word	0x40021000
 8001774:	40010000 	.word	0x40010000

08001778 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b088      	sub	sp, #32
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 0310 	add.w	r3, r7, #16
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a14      	ldr	r2, [pc, #80]	; (80017e4 <HAL_ADC_MspInit+0x6c>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d121      	bne.n	80017dc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001798:	4b13      	ldr	r3, [pc, #76]	; (80017e8 <HAL_ADC_MspInit+0x70>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	4a12      	ldr	r2, [pc, #72]	; (80017e8 <HAL_ADC_MspInit+0x70>)
 800179e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017a2:	6193      	str	r3, [r2, #24]
 80017a4:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <HAL_ADC_MspInit+0x70>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b0:	4b0d      	ldr	r3, [pc, #52]	; (80017e8 <HAL_ADC_MspInit+0x70>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	4a0c      	ldr	r2, [pc, #48]	; (80017e8 <HAL_ADC_MspInit+0x70>)
 80017b6:	f043 0304 	orr.w	r3, r3, #4
 80017ba:	6193      	str	r3, [r2, #24]
 80017bc:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <HAL_ADC_MspInit+0x70>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = BATTERY_ADC_Pin;
 80017c8:	2320      	movs	r3, #32
 80017ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017cc:	2303      	movs	r3, #3
 80017ce:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATTERY_ADC_GPIO_Port, &GPIO_InitStruct);
 80017d0:	f107 0310 	add.w	r3, r7, #16
 80017d4:	4619      	mov	r1, r3
 80017d6:	4805      	ldr	r0, [pc, #20]	; (80017ec <HAL_ADC_MspInit+0x74>)
 80017d8:	f001 fd00 	bl	80031dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017dc:	bf00      	nop
 80017de:	3720      	adds	r7, #32
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40012400 	.word	0x40012400
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40010800 	.word	0x40010800

080017f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a0b      	ldr	r2, [pc, #44]	; (800182c <HAL_RTC_MspInit+0x3c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d110      	bne.n	8001824 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001802:	f001 ffd9 	bl	80037b8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001806:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <HAL_RTC_MspInit+0x40>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	4a09      	ldr	r2, [pc, #36]	; (8001830 <HAL_RTC_MspInit+0x40>)
 800180c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001810:	61d3      	str	r3, [r2, #28]
 8001812:	4b07      	ldr	r3, [pc, #28]	; (8001830 <HAL_RTC_MspInit+0x40>)
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800181e:	4b05      	ldr	r3, [pc, #20]	; (8001834 <HAL_RTC_MspInit+0x44>)
 8001820:	2201      	movs	r2, #1
 8001822:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001824:	bf00      	nop
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40002800 	.word	0x40002800
 8001830:	40021000 	.word	0x40021000
 8001834:	4242043c 	.word	0x4242043c

08001838 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a28      	ldr	r2, [pc, #160]	; (80018e8 <HAL_TIM_Base_MspInit+0xb0>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d114      	bne.n	8001874 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800184a:	4b28      	ldr	r3, [pc, #160]	; (80018ec <HAL_TIM_Base_MspInit+0xb4>)
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	4a27      	ldr	r2, [pc, #156]	; (80018ec <HAL_TIM_Base_MspInit+0xb4>)
 8001850:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001854:	6193      	str	r3, [r2, #24]
 8001856:	4b25      	ldr	r3, [pc, #148]	; (80018ec <HAL_TIM_Base_MspInit+0xb4>)
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 6, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	2106      	movs	r1, #6
 8001866:	2019      	movs	r0, #25
 8001868:	f001 fb26 	bl	8002eb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800186c:	2019      	movs	r0, #25
 800186e:	f001 fb4f 	bl	8002f10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001872:	e034      	b.n	80018de <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM6)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a1d      	ldr	r2, [pc, #116]	; (80018f0 <HAL_TIM_Base_MspInit+0xb8>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d10c      	bne.n	8001898 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800187e:	4b1b      	ldr	r3, [pc, #108]	; (80018ec <HAL_TIM_Base_MspInit+0xb4>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	4a1a      	ldr	r2, [pc, #104]	; (80018ec <HAL_TIM_Base_MspInit+0xb4>)
 8001884:	f043 0310 	orr.w	r3, r3, #16
 8001888:	61d3      	str	r3, [r2, #28]
 800188a:	4b18      	ldr	r3, [pc, #96]	; (80018ec <HAL_TIM_Base_MspInit+0xb4>)
 800188c:	69db      	ldr	r3, [r3, #28]
 800188e:	f003 0310 	and.w	r3, r3, #16
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	693b      	ldr	r3, [r7, #16]
}
 8001896:	e022      	b.n	80018de <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM7)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a15      	ldr	r2, [pc, #84]	; (80018f4 <HAL_TIM_Base_MspInit+0xbc>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d10c      	bne.n	80018bc <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80018a2:	4b12      	ldr	r3, [pc, #72]	; (80018ec <HAL_TIM_Base_MspInit+0xb4>)
 80018a4:	69db      	ldr	r3, [r3, #28]
 80018a6:	4a11      	ldr	r2, [pc, #68]	; (80018ec <HAL_TIM_Base_MspInit+0xb4>)
 80018a8:	f043 0320 	orr.w	r3, r3, #32
 80018ac:	61d3      	str	r3, [r2, #28]
 80018ae:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <HAL_TIM_Base_MspInit+0xb4>)
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	f003 0320 	and.w	r3, r3, #32
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
}
 80018ba:	e010      	b.n	80018de <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM8)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a0d      	ldr	r2, [pc, #52]	; (80018f8 <HAL_TIM_Base_MspInit+0xc0>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d10b      	bne.n	80018de <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <HAL_TIM_Base_MspInit+0xb4>)
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	4a08      	ldr	r2, [pc, #32]	; (80018ec <HAL_TIM_Base_MspInit+0xb4>)
 80018cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018d0:	6193      	str	r3, [r2, #24]
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <HAL_TIM_Base_MspInit+0xb4>)
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]
}
 80018de:	bf00      	nop
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40012c00 	.word	0x40012c00
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40001000 	.word	0x40001000
 80018f4:	40001400 	.word	0x40001400
 80018f8:	40013400 	.word	0x40013400

080018fc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b090      	sub	sp, #64	; 0x40
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800191a:	d157      	bne.n	80019cc <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800191c:	4b78      	ldr	r3, [pc, #480]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x204>)
 800191e:	69db      	ldr	r3, [r3, #28]
 8001920:	4a77      	ldr	r2, [pc, #476]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x204>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	61d3      	str	r3, [r2, #28]
 8001928:	4b75      	ldr	r3, [pc, #468]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x204>)
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	62bb      	str	r3, [r7, #40]	; 0x28
 8001932:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001934:	4b72      	ldr	r3, [pc, #456]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x204>)
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	4a71      	ldr	r2, [pc, #452]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x204>)
 800193a:	f043 0304 	orr.w	r3, r3, #4
 800193e:	6193      	str	r3, [r2, #24]
 8001940:	4b6f      	ldr	r3, [pc, #444]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x204>)
 8001942:	699b      	ldr	r3, [r3, #24]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194c:	4b6c      	ldr	r3, [pc, #432]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x204>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	4a6b      	ldr	r2, [pc, #428]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x204>)
 8001952:	f043 0308 	orr.w	r3, r3, #8
 8001956:	6193      	str	r3, [r2, #24]
 8001958:	4b69      	ldr	r3, [pc, #420]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x204>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	f003 0308 	and.w	r3, r3, #8
 8001960:	623b      	str	r3, [r7, #32]
 8001962:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_1_IN_1_Pin;
 8001964:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001968:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800196a:	2300      	movs	r3, #0
 800196c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENCODER_1_IN_1_GPIO_Port, &GPIO_InitStruct);
 8001972:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001976:	4619      	mov	r1, r3
 8001978:	4862      	ldr	r0, [pc, #392]	; (8001b04 <HAL_TIM_Encoder_MspInit+0x208>)
 800197a:	f001 fc2f 	bl	80031dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER_1_IN_2_Pin;
 800197e:	2308      	movs	r3, #8
 8001980:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001982:	2300      	movs	r3, #0
 8001984:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENCODER_1_IN_2_GPIO_Port, &GPIO_InitStruct);
 800198a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800198e:	4619      	mov	r1, r3
 8001990:	485d      	ldr	r0, [pc, #372]	; (8001b08 <HAL_TIM_Encoder_MspInit+0x20c>)
 8001992:	f001 fc23 	bl	80031dc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8001996:	4b5d      	ldr	r3, [pc, #372]	; (8001b0c <HAL_TIM_Encoder_MspInit+0x210>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800199c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800199e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019a6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80019aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019b4:	4a55      	ldr	r2, [pc, #340]	; (8001b0c <HAL_TIM_Encoder_MspInit+0x210>)
 80019b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019b8:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2104      	movs	r1, #4
 80019be:	201c      	movs	r0, #28
 80019c0:	f001 fa7a 	bl	8002eb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019c4:	201c      	movs	r0, #28
 80019c6:	f001 faa3 	bl	8002f10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80019ca:	e094      	b.n	8001af6 <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM3)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a4f      	ldr	r2, [pc, #316]	; (8001b10 <HAL_TIM_Encoder_MspInit+0x214>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d12c      	bne.n	8001a30 <HAL_TIM_Encoder_MspInit+0x134>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019d6:	4b4a      	ldr	r3, [pc, #296]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x204>)
 80019d8:	69db      	ldr	r3, [r3, #28]
 80019da:	4a49      	ldr	r2, [pc, #292]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x204>)
 80019dc:	f043 0302 	orr.w	r3, r3, #2
 80019e0:	61d3      	str	r3, [r2, #28]
 80019e2:	4b47      	ldr	r3, [pc, #284]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x204>)
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	61fb      	str	r3, [r7, #28]
 80019ec:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ee:	4b44      	ldr	r3, [pc, #272]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x204>)
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	4a43      	ldr	r2, [pc, #268]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x204>)
 80019f4:	f043 0304 	orr.w	r3, r3, #4
 80019f8:	6193      	str	r3, [r2, #24]
 80019fa:	4b41      	ldr	r3, [pc, #260]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x204>)
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	61bb      	str	r3, [r7, #24]
 8001a04:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENCODER_2_IN_1_Pin|ENCODER_2_IN_2_Pin;
 8001a06:	23c0      	movs	r3, #192	; 0xc0
 8001a08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a16:	4619      	mov	r1, r3
 8001a18:	483a      	ldr	r0, [pc, #232]	; (8001b04 <HAL_TIM_Encoder_MspInit+0x208>)
 8001a1a:	f001 fbdf 	bl	80031dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 4, 0);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2104      	movs	r1, #4
 8001a22:	201d      	movs	r0, #29
 8001a24:	f001 fa48 	bl	8002eb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a28:	201d      	movs	r0, #29
 8001a2a:	f001 fa71 	bl	8002f10 <HAL_NVIC_EnableIRQ>
}
 8001a2e:	e062      	b.n	8001af6 <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM4)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a37      	ldr	r2, [pc, #220]	; (8001b14 <HAL_TIM_Encoder_MspInit+0x218>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d12c      	bne.n	8001a94 <HAL_TIM_Encoder_MspInit+0x198>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a3a:	4b31      	ldr	r3, [pc, #196]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a3c:	69db      	ldr	r3, [r3, #28]
 8001a3e:	4a30      	ldr	r2, [pc, #192]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a40:	f043 0304 	orr.w	r3, r3, #4
 8001a44:	61d3      	str	r3, [r2, #28]
 8001a46:	4b2e      	ldr	r3, [pc, #184]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a52:	4b2b      	ldr	r3, [pc, #172]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	4a2a      	ldr	r2, [pc, #168]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a58:	f043 0308 	orr.w	r3, r3, #8
 8001a5c:	6193      	str	r3, [r2, #24]
 8001a5e:	4b28      	ldr	r3, [pc, #160]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	f003 0308 	and.w	r3, r3, #8
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENCODER_3_IN_1_Pin|ENCODER_3_IN_2_Pin;
 8001a6a:	23c0      	movs	r3, #192	; 0xc0
 8001a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4822      	ldr	r0, [pc, #136]	; (8001b08 <HAL_TIM_Encoder_MspInit+0x20c>)
 8001a7e:	f001 fbad 	bl	80031dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 4, 0);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2104      	movs	r1, #4
 8001a86:	201e      	movs	r0, #30
 8001a88:	f001 fa16 	bl	8002eb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a8c:	201e      	movs	r0, #30
 8001a8e:	f001 fa3f 	bl	8002f10 <HAL_NVIC_EnableIRQ>
}
 8001a92:	e030      	b.n	8001af6 <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM5)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a1f      	ldr	r2, [pc, #124]	; (8001b18 <HAL_TIM_Encoder_MspInit+0x21c>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d12b      	bne.n	8001af6 <HAL_TIM_Encoder_MspInit+0x1fa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a9e:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x204>)
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	4a17      	ldr	r2, [pc, #92]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x204>)
 8001aa4:	f043 0308 	orr.w	r3, r3, #8
 8001aa8:	61d3      	str	r3, [r2, #28]
 8001aaa:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x204>)
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab6:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x204>)
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	4a11      	ldr	r2, [pc, #68]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x204>)
 8001abc:	f043 0304 	orr.w	r3, r3, #4
 8001ac0:	6193      	str	r3, [r2, #24]
 8001ac2:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <HAL_TIM_Encoder_MspInit+0x204>)
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_4_IN_1_Pin|ENCODER_4_IN_2_Pin;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ada:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4808      	ldr	r0, [pc, #32]	; (8001b04 <HAL_TIM_Encoder_MspInit+0x208>)
 8001ae2:	f001 fb7b 	bl	80031dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 4, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2104      	movs	r1, #4
 8001aea:	2032      	movs	r0, #50	; 0x32
 8001aec:	f001 f9e4 	bl	8002eb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001af0:	2032      	movs	r0, #50	; 0x32
 8001af2:	f001 fa0d 	bl	8002f10 <HAL_NVIC_EnableIRQ>
}
 8001af6:	bf00      	nop
 8001af8:	3740      	adds	r7, #64	; 0x40
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40010800 	.word	0x40010800
 8001b08:	40010c00 	.word	0x40010c00
 8001b0c:	40010000 	.word	0x40010000
 8001b10:	40000400 	.word	0x40000400
 8001b14:	40000800 	.word	0x40000800
 8001b18:	40000c00 	.word	0x40000c00

08001b1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b088      	sub	sp, #32
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 0310 	add.w	r3, r7, #16
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM8)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a10      	ldr	r2, [pc, #64]	; (8001b78 <HAL_TIM_MspPostInit+0x5c>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d118      	bne.n	8001b6e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <HAL_TIM_MspPostInit+0x60>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	4a0e      	ldr	r2, [pc, #56]	; (8001b7c <HAL_TIM_MspPostInit+0x60>)
 8001b42:	f043 0310 	orr.w	r3, r3, #16
 8001b46:	6193      	str	r3, [r2, #24]
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <HAL_TIM_MspPostInit+0x60>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	f003 0310 	and.w	r3, r3, #16
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	68fb      	ldr	r3, [r7, #12]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_FRONT_LEFT_PWM_Pin|MOTOR_FRONT_RIGHT_PWM_Pin|MOTOR_REAR_LEFT_PWM_Pin|MOTOR_REAR_RIGHT_PWM_Pin;
 8001b54:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001b58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b62:	f107 0310 	add.w	r3, r7, #16
 8001b66:	4619      	mov	r1, r3
 8001b68:	4805      	ldr	r0, [pc, #20]	; (8001b80 <HAL_TIM_MspPostInit+0x64>)
 8001b6a:	f001 fb37 	bl	80031dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001b6e:	bf00      	nop
 8001b70:	3720      	adds	r7, #32
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40013400 	.word	0x40013400
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40011000 	.word	0x40011000

08001b84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08a      	sub	sp, #40	; 0x28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 0318 	add.w	r3, r7, #24
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a40      	ldr	r2, [pc, #256]	; (8001ca0 <HAL_UART_MspInit+0x11c>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d13a      	bne.n	8001c1a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001ba4:	4b3f      	ldr	r3, [pc, #252]	; (8001ca4 <HAL_UART_MspInit+0x120>)
 8001ba6:	69db      	ldr	r3, [r3, #28]
 8001ba8:	4a3e      	ldr	r2, [pc, #248]	; (8001ca4 <HAL_UART_MspInit+0x120>)
 8001baa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001bae:	61d3      	str	r3, [r2, #28]
 8001bb0:	4b3c      	ldr	r3, [pc, #240]	; (8001ca4 <HAL_UART_MspInit+0x120>)
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bbc:	4b39      	ldr	r3, [pc, #228]	; (8001ca4 <HAL_UART_MspInit+0x120>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	4a38      	ldr	r2, [pc, #224]	; (8001ca4 <HAL_UART_MspInit+0x120>)
 8001bc2:	f043 0310 	orr.w	r3, r3, #16
 8001bc6:	6193      	str	r3, [r2, #24]
 8001bc8:	4b36      	ldr	r3, [pc, #216]	; (8001ca4 <HAL_UART_MspInit+0x120>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	f003 0310 	and.w	r3, r3, #16
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = MASTER_USART_TX_Pin;
 8001bd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bda:	2302      	movs	r3, #2
 8001bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bde:	2303      	movs	r3, #3
 8001be0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MASTER_USART_TX_GPIO_Port, &GPIO_InitStruct);
 8001be2:	f107 0318 	add.w	r3, r7, #24
 8001be6:	4619      	mov	r1, r3
 8001be8:	482f      	ldr	r0, [pc, #188]	; (8001ca8 <HAL_UART_MspInit+0x124>)
 8001bea:	f001 faf7 	bl	80031dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MASTER_USART_RX_Pin;
 8001bee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MASTER_USART_RX_GPIO_Port, &GPIO_InitStruct);
 8001bfc:	f107 0318 	add.w	r3, r7, #24
 8001c00:	4619      	mov	r1, r3
 8001c02:	4829      	ldr	r0, [pc, #164]	; (8001ca8 <HAL_UART_MspInit+0x124>)
 8001c04:	f001 faea 	bl	80031dc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2105      	movs	r1, #5
 8001c0c:	2034      	movs	r0, #52	; 0x34
 8001c0e:	f001 f953 	bl	8002eb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001c12:	2034      	movs	r0, #52	; 0x34
 8001c14:	f001 f97c 	bl	8002f10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c18:	e03e      	b.n	8001c98 <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART1)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a23      	ldr	r2, [pc, #140]	; (8001cac <HAL_UART_MspInit+0x128>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d139      	bne.n	8001c98 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c24:	4b1f      	ldr	r3, [pc, #124]	; (8001ca4 <HAL_UART_MspInit+0x120>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	4a1e      	ldr	r2, [pc, #120]	; (8001ca4 <HAL_UART_MspInit+0x120>)
 8001c2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c2e:	6193      	str	r3, [r2, #24]
 8001c30:	4b1c      	ldr	r3, [pc, #112]	; (8001ca4 <HAL_UART_MspInit+0x120>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3c:	4b19      	ldr	r3, [pc, #100]	; (8001ca4 <HAL_UART_MspInit+0x120>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	4a18      	ldr	r2, [pc, #96]	; (8001ca4 <HAL_UART_MspInit+0x120>)
 8001c42:	f043 0304 	orr.w	r3, r3, #4
 8001c46:	6193      	str	r3, [r2, #24]
 8001c48:	4b16      	ldr	r3, [pc, #88]	; (8001ca4 <HAL_UART_MspInit+0x120>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CONSOLE_USART_TX_Pin;
 8001c54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CONSOLE_USART_TX_GPIO_Port, &GPIO_InitStruct);
 8001c62:	f107 0318 	add.w	r3, r7, #24
 8001c66:	4619      	mov	r1, r3
 8001c68:	4811      	ldr	r0, [pc, #68]	; (8001cb0 <HAL_UART_MspInit+0x12c>)
 8001c6a:	f001 fab7 	bl	80031dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CONSOLE_USART_RX_Pin;
 8001c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(CONSOLE_USART_RX_GPIO_Port, &GPIO_InitStruct);
 8001c7c:	f107 0318 	add.w	r3, r7, #24
 8001c80:	4619      	mov	r1, r3
 8001c82:	480b      	ldr	r0, [pc, #44]	; (8001cb0 <HAL_UART_MspInit+0x12c>)
 8001c84:	f001 faaa 	bl	80031dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	2105      	movs	r1, #5
 8001c8c:	2025      	movs	r0, #37	; 0x25
 8001c8e:	f001 f913 	bl	8002eb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c92:	2025      	movs	r0, #37	; 0x25
 8001c94:	f001 f93c 	bl	8002f10 <HAL_NVIC_EnableIRQ>
}
 8001c98:	bf00      	nop
 8001c9a:	3728      	adds	r7, #40	; 0x28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40004c00 	.word	0x40004c00
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40011000 	.word	0x40011000
 8001cac:	40013800 	.word	0x40013800
 8001cb0:	40010800 	.word	0x40010800

08001cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  LOG_error("NMI_Handler() triggered");
 8001cb8:	4902      	ldr	r1, [pc, #8]	; (8001cc4 <NMI_Handler+0x10>)
 8001cba:	2003      	movs	r0, #3
 8001cbc:	f008 f870 	bl	8009da0 <LOG_log>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <NMI_Handler+0xc>
 8001cc2:	bf00      	nop
 8001cc4:	0800c184 	.word	0x0800c184

08001cc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  LOG_error("HardFault_Handler() triggered");
 8001ccc:	4902      	ldr	r1, [pc, #8]	; (8001cd8 <HardFault_Handler+0x10>)
 8001cce:	2003      	movs	r0, #3
 8001cd0:	f008 f866 	bl	8009da0 <LOG_log>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cd4:	e7fe      	b.n	8001cd4 <HardFault_Handler+0xc>
 8001cd6:	bf00      	nop
 8001cd8:	0800c19c 	.word	0x0800c19c

08001cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  LOG_error("MemManage_Handler() triggered");
 8001ce0:	4902      	ldr	r1, [pc, #8]	; (8001cec <MemManage_Handler+0x10>)
 8001ce2:	2003      	movs	r0, #3
 8001ce4:	f008 f85c 	bl	8009da0 <LOG_log>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ce8:	e7fe      	b.n	8001ce8 <MemManage_Handler+0xc>
 8001cea:	bf00      	nop
 8001cec:	0800c1bc 	.word	0x0800c1bc

08001cf0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  LOG_error("BusFault_Handler() triggered");
 8001cf4:	4902      	ldr	r1, [pc, #8]	; (8001d00 <BusFault_Handler+0x10>)
 8001cf6:	2003      	movs	r0, #3
 8001cf8:	f008 f852 	bl	8009da0 <LOG_log>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cfc:	e7fe      	b.n	8001cfc <BusFault_Handler+0xc>
 8001cfe:	bf00      	nop
 8001d00:	0800c1dc 	.word	0x0800c1dc

08001d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  LOG_error("UsageFault_Handler() triggered");
 8001d08:	4902      	ldr	r1, [pc, #8]	; (8001d14 <UsageFault_Handler+0x10>)
 8001d0a:	2003      	movs	r0, #3
 8001d0c:	f008 f848 	bl	8009da0 <LOG_log>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d10:	e7fe      	b.n	8001d10 <UsageFault_Handler+0xc>
 8001d12:	bf00      	nop
 8001d14:	0800c1fc 	.word	0x0800c1fc

08001d18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
  LOG_error("SVC_Handler() triggered");
 8001d1c:	4902      	ldr	r1, [pc, #8]	; (8001d28 <SVC_Handler+0x10>)
 8001d1e:	2003      	movs	r0, #3
 8001d20:	f008 f83e 	bl	8009da0 <LOG_log>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	0800c21c 	.word	0x0800c21c

08001d2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  LOG_error("DebugMon_Handler() triggered");
 8001d30:	4902      	ldr	r1, [pc, #8]	; (8001d3c <DebugMon_Handler+0x10>)
 8001d32:	2003      	movs	r0, #3
 8001d34:	f008 f834 	bl	8009da0 <LOG_log>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	0800c234 	.word	0x0800c234

08001d40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  LOG_error("PendSV_Handler() triggered");
 8001d44:	4902      	ldr	r1, [pc, #8]	; (8001d50 <PendSV_Handler+0x10>)
 8001d46:	2003      	movs	r0, #3
 8001d48:	f008 f82a 	bl	8009da0 <LOG_log>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d4c:	bf00      	nop
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	0800c254 	.word	0x0800c254

08001d54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d58:	f000 f968 	bl	800202c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d64:	4802      	ldr	r0, [pc, #8]	; (8001d70 <TIM1_UP_IRQHandler+0x10>)
 8001d66:	f004 fa29 	bl	80061bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200006dc 	.word	0x200006dc

08001d74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d78:	4802      	ldr	r0, [pc, #8]	; (8001d84 <TIM2_IRQHandler+0x10>)
 8001d7a:	f004 fa1f 	bl	80061bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000804 	.word	0x20000804

08001d88 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d8c:	4802      	ldr	r0, [pc, #8]	; (8001d98 <TIM3_IRQHandler+0x10>)
 8001d8e:	f004 fa15 	bl	80061bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	200004bc 	.word	0x200004bc

08001d9c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001da0:	4802      	ldr	r0, [pc, #8]	; (8001dac <TIM4_IRQHandler+0x10>)
 8001da2:	f004 fa0b 	bl	80061bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000354 	.word	0x20000354

08001db0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001db4:	4802      	ldr	r0, [pc, #8]	; (8001dc0 <USART1_IRQHandler+0x10>)
 8001db6:	f005 ff61 	bl	8007c7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	200005a0 	.word	0x200005a0

08001dc4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001dc8:	4802      	ldr	r0, [pc, #8]	; (8001dd4 <TIM5_IRQHandler+0x10>)
 8001dca:	f004 f9f7 	bl	80061bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20000408 	.word	0x20000408

08001dd8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001ddc:	4802      	ldr	r0, [pc, #8]	; (8001de8 <UART4_IRQHandler+0x10>)
 8001dde:	f005 ff4d 	bl	8007c7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000790 	.word	0x20000790

08001dec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	e00a      	b.n	8001e14 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001dfe:	f3af 8000 	nop.w
 8001e02:	4601      	mov	r1, r0
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	1c5a      	adds	r2, r3, #1
 8001e08:	60ba      	str	r2, [r7, #8]
 8001e0a:	b2ca      	uxtb	r2, r1
 8001e0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	3301      	adds	r3, #1
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	dbf0      	blt.n	8001dfe <_read+0x12>
	}

return len;
 8001e1c:	687b      	ldr	r3, [r7, #4]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d00a      	beq.n	8001e50 <_write+0x28>
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d007      	beq.n	8001e50 <_write+0x28>
  {
    errno = EBADF;
 8001e40:	f008 fc98 	bl	800a774 <__errno>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2209      	movs	r2, #9
 8001e48:	601a      	str	r2, [r3, #0]
    return -1;
 8001e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4e:	e00f      	b.n	8001e70 <_write+0x48>
  }

  HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1,
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e58:	68b9      	ldr	r1, [r7, #8]
 8001e5a:	4807      	ldr	r0, [pc, #28]	; (8001e78 <_write+0x50>)
 8001e5c:	f005 fe4c 	bl	8007af8 <HAL_UART_Transmit>
 8001e60:	4603      	mov	r3, r0
 8001e62:	75fb      	strb	r3, [r7, #23]
                                     (uint8_t *)ptr,
                                                len,
                                                CST_UART_TRANSMIT_TIMEOUT_IN_MS);
  return (status == HAL_OK ? len : 0);
 8001e64:	7dfb      	ldrb	r3, [r7, #23]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <_write+0x46>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	e000      	b.n	8001e70 <_write+0x48>
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	200005a0 	.word	0x200005a0

08001e7c <_close>:

int _close(int file)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
	return -1;
 8001e84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr

08001e92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ea2:	605a      	str	r2, [r3, #4]
	return 0;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr

08001eb0 <_isatty>:

int _isatty(int file)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	return 1;
 8001eb8:	2301      	movs	r3, #1
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	370c      	adds	r7, #12
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr

08001ec4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
	return 0;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr

08001edc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ee4:	4a14      	ldr	r2, [pc, #80]	; (8001f38 <_sbrk+0x5c>)
 8001ee6:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <_sbrk+0x60>)
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ef0:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <_sbrk+0x64>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d102      	bne.n	8001efe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ef8:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <_sbrk+0x64>)
 8001efa:	4a12      	ldr	r2, [pc, #72]	; (8001f44 <_sbrk+0x68>)
 8001efc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001efe:	4b10      	ldr	r3, [pc, #64]	; (8001f40 <_sbrk+0x64>)
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d207      	bcs.n	8001f1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f0c:	f008 fc32 	bl	800a774 <__errno>
 8001f10:	4603      	mov	r3, r0
 8001f12:	220c      	movs	r2, #12
 8001f14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f16:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1a:	e009      	b.n	8001f30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f1c:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <_sbrk+0x64>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f22:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <_sbrk+0x64>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	4a05      	ldr	r2, [pc, #20]	; (8001f40 <_sbrk+0x64>)
 8001f2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	2000c000 	.word	0x2000c000
 8001f3c:	00000400 	.word	0x00000400
 8001f40:	200000a4 	.word	0x200000a4
 8001f44:	20000980 	.word	0x20000980

08001f48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr

08001f54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f54:	480c      	ldr	r0, [pc, #48]	; (8001f88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f56:	490d      	ldr	r1, [pc, #52]	; (8001f8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f58:	4a0d      	ldr	r2, [pc, #52]	; (8001f90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f5c:	e002      	b.n	8001f64 <LoopCopyDataInit>

08001f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f62:	3304      	adds	r3, #4

08001f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f68:	d3f9      	bcc.n	8001f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	; (8001f94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f6c:	4c0a      	ldr	r4, [pc, #40]	; (8001f98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f70:	e001      	b.n	8001f76 <LoopFillZerobss>

08001f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f74:	3204      	adds	r2, #4

08001f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f78:	d3fb      	bcc.n	8001f72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f7a:	f7ff ffe5 	bl	8001f48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f7e:	f008 fbff 	bl	800a780 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f82:	f7fe fcef 	bl	8000964 <main>
  bx lr
 8001f86:	4770      	bx	lr
  ldr r0, =_sdata
 8001f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f8c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001f90:	0800ceac 	.word	0x0800ceac
  ldr r2, =_sbss
 8001f94:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001f98:	20000980 	.word	0x20000980

08001f9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f9c:	e7fe      	b.n	8001f9c <ADC1_2_IRQHandler>
	...

08001fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fa4:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <HAL_Init+0x28>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a07      	ldr	r2, [pc, #28]	; (8001fc8 <HAL_Init+0x28>)
 8001faa:	f043 0310 	orr.w	r3, r3, #16
 8001fae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fb0:	2003      	movs	r0, #3
 8001fb2:	f000 ff61 	bl	8002e78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	f000 f808 	bl	8001fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fbc:	f7ff fbaa 	bl	8001714 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40022000 	.word	0x40022000

08001fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fd4:	4b12      	ldr	r3, [pc, #72]	; (8002020 <HAL_InitTick+0x54>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4b12      	ldr	r3, [pc, #72]	; (8002024 <HAL_InitTick+0x58>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	4619      	mov	r1, r3
 8001fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 ffa8 	bl	8002f40 <HAL_SYSTICK_Config>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e00e      	b.n	8002018 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b0f      	cmp	r3, #15
 8001ffe:	d80a      	bhi.n	8002016 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002000:	2200      	movs	r2, #0
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	f04f 30ff 	mov.w	r0, #4294967295
 8002008:	f000 ff56 	bl	8002eb8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800200c:	4a06      	ldr	r2, [pc, #24]	; (8002028 <HAL_InitTick+0x5c>)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002012:	2300      	movs	r3, #0
 8002014:	e000      	b.n	8002018 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
}
 8002018:	4618      	mov	r0, r3
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20000000 	.word	0x20000000
 8002024:	20000008 	.word	0x20000008
 8002028:	20000004 	.word	0x20000004

0800202c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002030:	4b05      	ldr	r3, [pc, #20]	; (8002048 <HAL_IncTick+0x1c>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	461a      	mov	r2, r3
 8002036:	4b05      	ldr	r3, [pc, #20]	; (800204c <HAL_IncTick+0x20>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4413      	add	r3, r2
 800203c:	4a03      	ldr	r2, [pc, #12]	; (800204c <HAL_IncTick+0x20>)
 800203e:	6013      	str	r3, [r2, #0]
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr
 8002048:	20000008 	.word	0x20000008
 800204c:	2000096c 	.word	0x2000096c

08002050 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return uwTick;
 8002054:	4b02      	ldr	r3, [pc, #8]	; (8002060 <HAL_GetTick+0x10>)
 8002056:	681b      	ldr	r3, [r3, #0]
}
 8002058:	4618      	mov	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr
 8002060:	2000096c 	.word	0x2000096c

08002064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800206c:	f7ff fff0 	bl	8002050 <HAL_GetTick>
 8002070:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800207c:	d005      	beq.n	800208a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800207e:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <HAL_Delay+0x44>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	461a      	mov	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	4413      	add	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800208a:	bf00      	nop
 800208c:	f7ff ffe0 	bl	8002050 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	429a      	cmp	r2, r3
 800209a:	d8f7      	bhi.n	800208c <HAL_Delay+0x28>
  {
  }
}
 800209c:	bf00      	nop
 800209e:	bf00      	nop
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000008 	.word	0x20000008

080020ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020b4:	2300      	movs	r3, #0
 80020b6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80020bc:	2300      	movs	r3, #0
 80020be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e188      	b.n	80023e0 <HAL_ADC_Init+0x334>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a8c      	ldr	r2, [pc, #560]	; (8002304 <HAL_ADC_Init+0x258>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d00e      	beq.n	80020f6 <HAL_ADC_Init+0x4a>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a8a      	ldr	r2, [pc, #552]	; (8002308 <HAL_ADC_Init+0x25c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d009      	beq.n	80020f6 <HAL_ADC_Init+0x4a>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a89      	ldr	r2, [pc, #548]	; (800230c <HAL_ADC_Init+0x260>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d004      	beq.n	80020f6 <HAL_ADC_Init+0x4a>
 80020ec:	f240 11b3 	movw	r1, #435	; 0x1b3
 80020f0:	4887      	ldr	r0, [pc, #540]	; (8002310 <HAL_ADC_Init+0x264>)
 80020f2:	f7ff fafd 	bl	80016f0 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d009      	beq.n	8002112 <HAL_ADC_Init+0x66>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002106:	d004      	beq.n	8002112 <HAL_ADC_Init+0x66>
 8002108:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800210c:	4880      	ldr	r0, [pc, #512]	; (8002310 <HAL_ADC_Init+0x264>)
 800210e:	f7ff faef 	bl	80016f0 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d009      	beq.n	800212e <HAL_ADC_Init+0x82>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002122:	d004      	beq.n	800212e <HAL_ADC_Init+0x82>
 8002124:	f240 11b5 	movw	r1, #437	; 0x1b5
 8002128:	4879      	ldr	r0, [pc, #484]	; (8002310 <HAL_ADC_Init+0x264>)
 800212a:	f7ff fae1 	bl	80016f0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	7b1b      	ldrb	r3, [r3, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d008      	beq.n	8002148 <HAL_ADC_Init+0x9c>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	7b1b      	ldrb	r3, [r3, #12]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d004      	beq.n	8002148 <HAL_ADC_Init+0x9c>
 800213e:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8002142:	4873      	ldr	r0, [pc, #460]	; (8002310 <HAL_ADC_Init+0x264>)
 8002144:	f7ff fad4 	bl	80016f0 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d044      	beq.n	80021da <HAL_ADC_Init+0x12e>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002158:	d03f      	beq.n	80021da <HAL_ADC_Init+0x12e>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8002162:	d03a      	beq.n	80021da <HAL_ADC_Init+0x12e>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69db      	ldr	r3, [r3, #28]
 8002168:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800216c:	d035      	beq.n	80021da <HAL_ADC_Init+0x12e>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8002176:	d030      	beq.n	80021da <HAL_ADC_Init+0x12e>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002180:	d02b      	beq.n	80021da <HAL_ADC_Init+0x12e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d027      	beq.n	80021da <HAL_ADC_Init+0x12e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002192:	d022      	beq.n	80021da <HAL_ADC_Init+0x12e>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	69db      	ldr	r3, [r3, #28]
 8002198:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800219c:	d01d      	beq.n	80021da <HAL_ADC_Init+0x12e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 80021a6:	d018      	beq.n	80021da <HAL_ADC_Init+0x12e>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80021b0:	d013      	beq.n	80021da <HAL_ADC_Init+0x12e>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80021ba:	d00e      	beq.n	80021da <HAL_ADC_Init+0x12e>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80021c4:	d009      	beq.n	80021da <HAL_ADC_Init+0x12e>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80021ce:	d004      	beq.n	80021da <HAL_ADC_Init+0x12e>
 80021d0:	f240 11b7 	movw	r1, #439	; 0x1b7
 80021d4:	484e      	ldr	r0, [pc, #312]	; (8002310 <HAL_ADC_Init+0x264>)
 80021d6:	f7ff fa8b 	bl	80016f0 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d02a      	beq.n	8002238 <HAL_ADC_Init+0x18c>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_ADC_Init+0x146>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	2b10      	cmp	r3, #16
 80021f0:	d904      	bls.n	80021fc <HAL_ADC_Init+0x150>
 80021f2:	f240 11bb 	movw	r1, #443	; 0x1bb
 80021f6:	4846      	ldr	r0, [pc, #280]	; (8002310 <HAL_ADC_Init+0x264>)
 80021f8:	f7ff fa7a 	bl	80016f0 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	7d1b      	ldrb	r3, [r3, #20]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d008      	beq.n	8002216 <HAL_ADC_Init+0x16a>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	7d1b      	ldrb	r3, [r3, #20]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d004      	beq.n	8002216 <HAL_ADC_Init+0x16a>
 800220c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8002210:	483f      	ldr	r0, [pc, #252]	; (8002310 <HAL_ADC_Init+0x264>)
 8002212:	f7ff fa6d 	bl	80016f0 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	7d1b      	ldrb	r3, [r3, #20]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00c      	beq.n	8002238 <HAL_ADC_Init+0x18c>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_ADC_Init+0x182>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	2b08      	cmp	r3, #8
 800222c:	d904      	bls.n	8002238 <HAL_ADC_Init+0x18c>
 800222e:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002232:	4837      	ldr	r0, [pc, #220]	; (8002310 <HAL_ADC_Init+0x264>)
 8002234:	f7ff fa5c 	bl	80016f0 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223c:	2b00      	cmp	r3, #0
 800223e:	d109      	bne.n	8002254 <HAL_ADC_Init+0x1a8>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7ff fa92 	bl	8001778 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 fd01 	bl	8002c5c <ADC_ConversionStop_Disable>
 800225a:	4603      	mov	r3, r0
 800225c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002262:	f003 0310 	and.w	r3, r3, #16
 8002266:	2b00      	cmp	r3, #0
 8002268:	f040 80b1 	bne.w	80023ce <HAL_ADC_Init+0x322>
 800226c:	7dfb      	ldrb	r3, [r7, #23]
 800226e:	2b00      	cmp	r3, #0
 8002270:	f040 80ad 	bne.w	80023ce <HAL_ADC_Init+0x322>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002278:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800227c:	f023 0302 	bic.w	r3, r3, #2
 8002280:	f043 0202 	orr.w	r2, r3, #2
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	491e      	ldr	r1, [pc, #120]	; (800230c <HAL_ADC_Init+0x260>)
 8002292:	428b      	cmp	r3, r1
 8002294:	d10a      	bne.n	80022ac <HAL_ADC_Init+0x200>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800229e:	d002      	beq.n	80022a6 <HAL_ADC_Init+0x1fa>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	69db      	ldr	r3, [r3, #28]
 80022a4:	e004      	b.n	80022b0 <HAL_ADC_Init+0x204>
 80022a6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80022aa:	e001      	b.n	80022b0 <HAL_ADC_Init+0x204>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022b0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	7b1b      	ldrb	r3, [r3, #12]
 80022b6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80022b8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	4313      	orrs	r3, r2
 80022be:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022c8:	d003      	beq.n	80022d2 <HAL_ADC_Init+0x226>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d102      	bne.n	80022d8 <HAL_ADC_Init+0x22c>
 80022d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022d6:	e000      	b.n	80022da <HAL_ADC_Init+0x22e>
 80022d8:	2300      	movs	r3, #0
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	7d1b      	ldrb	r3, [r3, #20]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d121      	bne.n	800232c <HAL_ADC_Init+0x280>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	7b1b      	ldrb	r3, [r3, #12]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d111      	bne.n	8002314 <HAL_ADC_Init+0x268>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	3b01      	subs	r3, #1
 80022f6:	035a      	lsls	r2, r3, #13
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002300:	613b      	str	r3, [r7, #16]
 8002302:	e013      	b.n	800232c <HAL_ADC_Init+0x280>
 8002304:	40012400 	.word	0x40012400
 8002308:	40012800 	.word	0x40012800
 800230c:	40013c00 	.word	0x40013c00
 8002310:	0800c270 	.word	0x0800c270
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002318:	f043 0220 	orr.w	r2, r3, #32
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002324:	f043 0201 	orr.w	r2, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	430a      	orrs	r2, r1
 800233e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	4b28      	ldr	r3, [pc, #160]	; (80023e8 <HAL_ADC_Init+0x33c>)
 8002348:	4013      	ands	r3, r2
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6812      	ldr	r2, [r2, #0]
 800234e:	68b9      	ldr	r1, [r7, #8]
 8002350:	430b      	orrs	r3, r1
 8002352:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800235c:	d003      	beq.n	8002366 <HAL_ADC_Init+0x2ba>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d104      	bne.n	8002370 <HAL_ADC_Init+0x2c4>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	3b01      	subs	r3, #1
 800236c:	051b      	lsls	r3, r3, #20
 800236e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002376:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	430a      	orrs	r2, r1
 8002382:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	4b18      	ldr	r3, [pc, #96]	; (80023ec <HAL_ADC_Init+0x340>)
 800238c:	4013      	ands	r3, r2
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	429a      	cmp	r2, r3
 8002392:	d10b      	bne.n	80023ac <HAL_ADC_Init+0x300>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239e:	f023 0303 	bic.w	r3, r3, #3
 80023a2:	f043 0201 	orr.w	r2, r3, #1
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023aa:	e018      	b.n	80023de <HAL_ADC_Init+0x332>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b0:	f023 0312 	bic.w	r3, r3, #18
 80023b4:	f043 0210 	orr.w	r2, r3, #16
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c0:	f043 0201 	orr.w	r2, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023cc:	e007      	b.n	80023de <HAL_ADC_Init+0x332>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d2:	f043 0210 	orr.w	r2, r3, #16
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80023de:	7dfb      	ldrb	r3, [r7, #23]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	ffe1f7fd 	.word	0xffe1f7fd
 80023ec:	ff1f0efe 	.word	0xff1f0efe

080023f0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a5a      	ldr	r2, [pc, #360]	; (800256c <HAL_ADC_Start+0x17c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d00e      	beq.n	8002424 <HAL_ADC_Start+0x34>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a59      	ldr	r2, [pc, #356]	; (8002570 <HAL_ADC_Start+0x180>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d009      	beq.n	8002424 <HAL_ADC_Start+0x34>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a57      	ldr	r2, [pc, #348]	; (8002574 <HAL_ADC_Start+0x184>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d004      	beq.n	8002424 <HAL_ADC_Start+0x34>
 800241a:	f240 411b 	movw	r1, #1051	; 0x41b
 800241e:	4856      	ldr	r0, [pc, #344]	; (8002578 <HAL_ADC_Start+0x188>)
 8002420:	f7ff f966 	bl	80016f0 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800242a:	2b01      	cmp	r3, #1
 800242c:	d101      	bne.n	8002432 <HAL_ADC_Start+0x42>
 800242e:	2302      	movs	r3, #2
 8002430:	e098      	b.n	8002564 <HAL_ADC_Start+0x174>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 fbb4 	bl	8002ba8 <ADC_Enable>
 8002440:	4603      	mov	r3, r0
 8002442:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002444:	7bfb      	ldrb	r3, [r7, #15]
 8002446:	2b00      	cmp	r3, #0
 8002448:	f040 8087 	bne.w	800255a <HAL_ADC_Start+0x16a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002454:	f023 0301 	bic.w	r3, r3, #1
 8002458:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a42      	ldr	r2, [pc, #264]	; (8002570 <HAL_ADC_Start+0x180>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d105      	bne.n	8002476 <HAL_ADC_Start+0x86>
 800246a:	4b40      	ldr	r3, [pc, #256]	; (800256c <HAL_ADC_Start+0x17c>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d115      	bne.n	80024a2 <HAL_ADC_Start+0xb2>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800248c:	2b00      	cmp	r3, #0
 800248e:	d026      	beq.n	80024de <HAL_ADC_Start+0xee>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002494:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002498:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024a0:	e01d      	b.n	80024de <HAL_ADC_Start+0xee>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a2e      	ldr	r2, [pc, #184]	; (800256c <HAL_ADC_Start+0x17c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d004      	beq.n	80024c2 <HAL_ADC_Start+0xd2>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a2c      	ldr	r2, [pc, #176]	; (8002570 <HAL_ADC_Start+0x180>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d10d      	bne.n	80024de <HAL_ADC_Start+0xee>
 80024c2:	4b2a      	ldr	r3, [pc, #168]	; (800256c <HAL_ADC_Start+0x17c>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d007      	beq.n	80024de <HAL_ADC_Start+0xee>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d006      	beq.n	80024f8 <HAL_ADC_Start+0x108>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ee:	f023 0206 	bic.w	r2, r3, #6
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80024f6:	e002      	b.n	80024fe <HAL_ADC_Start+0x10e>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f06f 0202 	mvn.w	r2, #2
 800250e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800251a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800251e:	d113      	bne.n	8002548 <HAL_ADC_Start+0x158>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002524:	4a12      	ldr	r2, [pc, #72]	; (8002570 <HAL_ADC_Start+0x180>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d105      	bne.n	8002536 <HAL_ADC_Start+0x146>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800252a:	4b10      	ldr	r3, [pc, #64]	; (800256c <HAL_ADC_Start+0x17c>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002532:	2b00      	cmp	r3, #0
 8002534:	d108      	bne.n	8002548 <HAL_ADC_Start+0x158>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002544:	609a      	str	r2, [r3, #8]
 8002546:	e00c      	b.n	8002562 <HAL_ADC_Start+0x172>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	e003      	b.n	8002562 <HAL_ADC_Start+0x172>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002562:	7bfb      	ldrb	r3, [r7, #15]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40012400 	.word	0x40012400
 8002570:	40012800 	.word	0x40012800
 8002574:	40013c00 	.word	0x40013c00
 8002578:	0800c270 	.word	0x0800c270

0800257c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800257c:	b590      	push	{r4, r7, lr}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002586:	2300      	movs	r3, #0
 8002588:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800258e:	2300      	movs	r3, #0
 8002590:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a80      	ldr	r2, [pc, #512]	; (8002798 <HAL_ADC_PollForConversion+0x21c>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d00e      	beq.n	80025ba <HAL_ADC_PollForConversion+0x3e>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a7e      	ldr	r2, [pc, #504]	; (800279c <HAL_ADC_PollForConversion+0x220>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d009      	beq.n	80025ba <HAL_ADC_PollForConversion+0x3e>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a7d      	ldr	r2, [pc, #500]	; (80027a0 <HAL_ADC_PollForConversion+0x224>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d004      	beq.n	80025ba <HAL_ADC_PollForConversion+0x3e>
 80025b0:	f240 41bd 	movw	r1, #1213	; 0x4bd
 80025b4:	487b      	ldr	r0, [pc, #492]	; (80027a4 <HAL_ADC_PollForConversion+0x228>)
 80025b6:	f7ff f89b 	bl	80016f0 <assert_failed>
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80025ba:	f7ff fd49 	bl	8002050 <HAL_GetTick>
 80025be:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00b      	beq.n	80025e6 <HAL_ADC_PollForConversion+0x6a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d2:	f043 0220 	orr.w	r2, r3, #32
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e0d3      	b.n	800278e <HAL_ADC_PollForConversion+0x212>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d131      	bne.n	8002658 <HAL_ADC_PollForConversion+0xdc>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d12a      	bne.n	8002658 <HAL_ADC_PollForConversion+0xdc>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002602:	e021      	b.n	8002648 <HAL_ADC_PollForConversion+0xcc>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260a:	d01d      	beq.n	8002648 <HAL_ADC_PollForConversion+0xcc>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d007      	beq.n	8002622 <HAL_ADC_PollForConversion+0xa6>
 8002612:	f7ff fd1d 	bl	8002050 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	683a      	ldr	r2, [r7, #0]
 800261e:	429a      	cmp	r2, r3
 8002620:	d212      	bcs.n	8002648 <HAL_ADC_PollForConversion+0xcc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10b      	bne.n	8002648 <HAL_ADC_PollForConversion+0xcc>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002634:	f043 0204 	orr.w	r2, r3, #4
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e0a2      	b.n	800278e <HAL_ADC_PollForConversion+0x212>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0d6      	beq.n	8002604 <HAL_ADC_PollForConversion+0x88>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002656:	e070      	b.n	800273a <HAL_ADC_PollForConversion+0x1be>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002658:	4b53      	ldr	r3, [pc, #332]	; (80027a8 <HAL_ADC_PollForConversion+0x22c>)
 800265a:	681c      	ldr	r4, [r3, #0]
 800265c:	2002      	movs	r0, #2
 800265e:	f001 ff7d 	bl	800455c <HAL_RCCEx_GetPeriphCLKFreq>
 8002662:	4603      	mov	r3, r0
 8002664:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6919      	ldr	r1, [r3, #16]
 800266e:	4b4f      	ldr	r3, [pc, #316]	; (80027ac <HAL_ADC_PollForConversion+0x230>)
 8002670:	400b      	ands	r3, r1
 8002672:	2b00      	cmp	r3, #0
 8002674:	d118      	bne.n	80026a8 <HAL_ADC_PollForConversion+0x12c>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68d9      	ldr	r1, [r3, #12]
 800267c:	4b4c      	ldr	r3, [pc, #304]	; (80027b0 <HAL_ADC_PollForConversion+0x234>)
 800267e:	400b      	ands	r3, r1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d111      	bne.n	80026a8 <HAL_ADC_PollForConversion+0x12c>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6919      	ldr	r1, [r3, #16]
 800268a:	4b4a      	ldr	r3, [pc, #296]	; (80027b4 <HAL_ADC_PollForConversion+0x238>)
 800268c:	400b      	ands	r3, r1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d108      	bne.n	80026a4 <HAL_ADC_PollForConversion+0x128>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68d9      	ldr	r1, [r3, #12]
 8002698:	4b47      	ldr	r3, [pc, #284]	; (80027b8 <HAL_ADC_PollForConversion+0x23c>)
 800269a:	400b      	ands	r3, r1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_ADC_PollForConversion+0x128>
 80026a0:	2314      	movs	r3, #20
 80026a2:	e020      	b.n	80026e6 <HAL_ADC_PollForConversion+0x16a>
 80026a4:	2329      	movs	r3, #41	; 0x29
 80026a6:	e01e      	b.n	80026e6 <HAL_ADC_PollForConversion+0x16a>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6919      	ldr	r1, [r3, #16]
 80026ae:	4b41      	ldr	r3, [pc, #260]	; (80027b4 <HAL_ADC_PollForConversion+0x238>)
 80026b0:	400b      	ands	r3, r1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d106      	bne.n	80026c4 <HAL_ADC_PollForConversion+0x148>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68d9      	ldr	r1, [r3, #12]
 80026bc:	4b3e      	ldr	r3, [pc, #248]	; (80027b8 <HAL_ADC_PollForConversion+0x23c>)
 80026be:	400b      	ands	r3, r1
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00d      	beq.n	80026e0 <HAL_ADC_PollForConversion+0x164>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6919      	ldr	r1, [r3, #16]
 80026ca:	4b3c      	ldr	r3, [pc, #240]	; (80027bc <HAL_ADC_PollForConversion+0x240>)
 80026cc:	400b      	ands	r3, r1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d108      	bne.n	80026e4 <HAL_ADC_PollForConversion+0x168>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68d9      	ldr	r1, [r3, #12]
 80026d8:	4b38      	ldr	r3, [pc, #224]	; (80027bc <HAL_ADC_PollForConversion+0x240>)
 80026da:	400b      	ands	r3, r1
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_ADC_PollForConversion+0x168>
 80026e0:	2354      	movs	r3, #84	; 0x54
 80026e2:	e000      	b.n	80026e6 <HAL_ADC_PollForConversion+0x16a>
 80026e4:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80026e6:	fb02 f303 	mul.w	r3, r2, r3
 80026ea:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80026ec:	e021      	b.n	8002732 <HAL_ADC_PollForConversion+0x1b6>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f4:	d01a      	beq.n	800272c <HAL_ADC_PollForConversion+0x1b0>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d007      	beq.n	800270c <HAL_ADC_PollForConversion+0x190>
 80026fc:	f7ff fca8 	bl	8002050 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	429a      	cmp	r2, r3
 800270a:	d20f      	bcs.n	800272c <HAL_ADC_PollForConversion+0x1b0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	429a      	cmp	r2, r3
 8002712:	d90b      	bls.n	800272c <HAL_ADC_PollForConversion+0x1b0>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002718:	f043 0204 	orr.w	r2, r3, #4
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e030      	b.n	800278e <HAL_ADC_PollForConversion+0x212>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	3301      	adds	r3, #1
 8002730:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	429a      	cmp	r2, r3
 8002738:	d8d9      	bhi.n	80026ee <HAL_ADC_PollForConversion+0x172>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f06f 0212 	mvn.w	r2, #18
 8002742:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800275a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800275e:	d115      	bne.n	800278c <HAL_ADC_PollForConversion+0x210>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002764:	2b00      	cmp	r3, #0
 8002766:	d111      	bne.n	800278c <HAL_ADC_PollForConversion+0x210>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002778:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d105      	bne.n	800278c <HAL_ADC_PollForConversion+0x210>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002784:	f043 0201 	orr.w	r2, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	371c      	adds	r7, #28
 8002792:	46bd      	mov	sp, r7
 8002794:	bd90      	pop	{r4, r7, pc}
 8002796:	bf00      	nop
 8002798:	40012400 	.word	0x40012400
 800279c:	40012800 	.word	0x40012800
 80027a0:	40013c00 	.word	0x40013c00
 80027a4:	0800c270 	.word	0x0800c270
 80027a8:	20000000 	.word	0x20000000
 80027ac:	24924924 	.word	0x24924924
 80027b0:	00924924 	.word	0x00924924
 80027b4:	12492492 	.word	0x12492492
 80027b8:	00492492 	.word	0x00492492
 80027bc:	00249249 	.word	0x00249249

080027c0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a0c      	ldr	r2, [pc, #48]	; (8002800 <HAL_ADC_GetValue+0x40>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d00e      	beq.n	80027f0 <HAL_ADC_GetValue+0x30>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a0b      	ldr	r2, [pc, #44]	; (8002804 <HAL_ADC_GetValue+0x44>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d009      	beq.n	80027f0 <HAL_ADC_GetValue+0x30>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a09      	ldr	r2, [pc, #36]	; (8002808 <HAL_ADC_GetValue+0x48>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d004      	beq.n	80027f0 <HAL_ADC_GetValue+0x30>
 80027e6:	f240 61ef 	movw	r1, #1775	; 0x6ef
 80027ea:	4808      	ldr	r0, [pc, #32]	; (800280c <HAL_ADC_GetValue+0x4c>)
 80027ec:	f7fe ff80 	bl	80016f0 <assert_failed>

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40012400 	.word	0x40012400
 8002804:	40012800 	.word	0x40012800
 8002808:	40013c00 	.word	0x40013c00
 800280c:	0800c270 	.word	0x0800c270

08002810 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800281e:	2300      	movs	r3, #0
 8002820:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a8b      	ldr	r2, [pc, #556]	; (8002a54 <HAL_ADC_ConfigChannel+0x244>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d00e      	beq.n	800284a <HAL_ADC_ConfigChannel+0x3a>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a89      	ldr	r2, [pc, #548]	; (8002a58 <HAL_ADC_ConfigChannel+0x248>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d009      	beq.n	800284a <HAL_ADC_ConfigChannel+0x3a>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a88      	ldr	r2, [pc, #544]	; (8002a5c <HAL_ADC_ConfigChannel+0x24c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d004      	beq.n	800284a <HAL_ADC_ConfigChannel+0x3a>
 8002840:	f240 71dd 	movw	r1, #2013	; 0x7dd
 8002844:	4886      	ldr	r0, [pc, #536]	; (8002a60 <HAL_ADC_ConfigChannel+0x250>)
 8002846:	f7fe ff53 	bl	80016f0 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d048      	beq.n	80028e4 <HAL_ADC_ConfigChannel+0xd4>
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d044      	beq.n	80028e4 <HAL_ADC_ConfigChannel+0xd4>
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2b02      	cmp	r3, #2
 8002860:	d040      	beq.n	80028e4 <HAL_ADC_ConfigChannel+0xd4>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2b03      	cmp	r3, #3
 8002868:	d03c      	beq.n	80028e4 <HAL_ADC_ConfigChannel+0xd4>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2b04      	cmp	r3, #4
 8002870:	d038      	beq.n	80028e4 <HAL_ADC_ConfigChannel+0xd4>
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2b05      	cmp	r3, #5
 8002878:	d034      	beq.n	80028e4 <HAL_ADC_ConfigChannel+0xd4>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2b06      	cmp	r3, #6
 8002880:	d030      	beq.n	80028e4 <HAL_ADC_ConfigChannel+0xd4>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2b07      	cmp	r3, #7
 8002888:	d02c      	beq.n	80028e4 <HAL_ADC_ConfigChannel+0xd4>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2b08      	cmp	r3, #8
 8002890:	d028      	beq.n	80028e4 <HAL_ADC_ConfigChannel+0xd4>
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2b09      	cmp	r3, #9
 8002898:	d024      	beq.n	80028e4 <HAL_ADC_ConfigChannel+0xd4>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b0a      	cmp	r3, #10
 80028a0:	d020      	beq.n	80028e4 <HAL_ADC_ConfigChannel+0xd4>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2b0b      	cmp	r3, #11
 80028a8:	d01c      	beq.n	80028e4 <HAL_ADC_ConfigChannel+0xd4>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2b0c      	cmp	r3, #12
 80028b0:	d018      	beq.n	80028e4 <HAL_ADC_ConfigChannel+0xd4>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2b0d      	cmp	r3, #13
 80028b8:	d014      	beq.n	80028e4 <HAL_ADC_ConfigChannel+0xd4>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2b0e      	cmp	r3, #14
 80028c0:	d010      	beq.n	80028e4 <HAL_ADC_ConfigChannel+0xd4>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2b0f      	cmp	r3, #15
 80028c8:	d00c      	beq.n	80028e4 <HAL_ADC_ConfigChannel+0xd4>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2b10      	cmp	r3, #16
 80028d0:	d008      	beq.n	80028e4 <HAL_ADC_ConfigChannel+0xd4>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2b11      	cmp	r3, #17
 80028d8:	d004      	beq.n	80028e4 <HAL_ADC_ConfigChannel+0xd4>
 80028da:	f240 71de 	movw	r1, #2014	; 0x7de
 80028de:	4860      	ldr	r0, [pc, #384]	; (8002a60 <HAL_ADC_ConfigChannel+0x250>)
 80028e0:	f7fe ff06 	bl	80016f0 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d040      	beq.n	800296e <HAL_ADC_ConfigChannel+0x15e>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d03c      	beq.n	800296e <HAL_ADC_ConfigChannel+0x15e>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d038      	beq.n	800296e <HAL_ADC_ConfigChannel+0x15e>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b04      	cmp	r3, #4
 8002902:	d034      	beq.n	800296e <HAL_ADC_ConfigChannel+0x15e>
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b05      	cmp	r3, #5
 800290a:	d030      	beq.n	800296e <HAL_ADC_ConfigChannel+0x15e>
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	2b06      	cmp	r3, #6
 8002912:	d02c      	beq.n	800296e <HAL_ADC_ConfigChannel+0x15e>
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	2b07      	cmp	r3, #7
 800291a:	d028      	beq.n	800296e <HAL_ADC_ConfigChannel+0x15e>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b08      	cmp	r3, #8
 8002922:	d024      	beq.n	800296e <HAL_ADC_ConfigChannel+0x15e>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b09      	cmp	r3, #9
 800292a:	d020      	beq.n	800296e <HAL_ADC_ConfigChannel+0x15e>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b0a      	cmp	r3, #10
 8002932:	d01c      	beq.n	800296e <HAL_ADC_ConfigChannel+0x15e>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b0b      	cmp	r3, #11
 800293a:	d018      	beq.n	800296e <HAL_ADC_ConfigChannel+0x15e>
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b0c      	cmp	r3, #12
 8002942:	d014      	beq.n	800296e <HAL_ADC_ConfigChannel+0x15e>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2b0d      	cmp	r3, #13
 800294a:	d010      	beq.n	800296e <HAL_ADC_ConfigChannel+0x15e>
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b0e      	cmp	r3, #14
 8002952:	d00c      	beq.n	800296e <HAL_ADC_ConfigChannel+0x15e>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2b0f      	cmp	r3, #15
 800295a:	d008      	beq.n	800296e <HAL_ADC_ConfigChannel+0x15e>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	2b10      	cmp	r3, #16
 8002962:	d004      	beq.n	800296e <HAL_ADC_ConfigChannel+0x15e>
 8002964:	f240 71df 	movw	r1, #2015	; 0x7df
 8002968:	483d      	ldr	r0, [pc, #244]	; (8002a60 <HAL_ADC_ConfigChannel+0x250>)
 800296a:	f7fe fec1 	bl	80016f0 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d020      	beq.n	80029b8 <HAL_ADC_ConfigChannel+0x1a8>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d01c      	beq.n	80029b8 <HAL_ADC_ConfigChannel+0x1a8>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	2b02      	cmp	r3, #2
 8002984:	d018      	beq.n	80029b8 <HAL_ADC_ConfigChannel+0x1a8>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	2b03      	cmp	r3, #3
 800298c:	d014      	beq.n	80029b8 <HAL_ADC_ConfigChannel+0x1a8>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	2b04      	cmp	r3, #4
 8002994:	d010      	beq.n	80029b8 <HAL_ADC_ConfigChannel+0x1a8>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2b05      	cmp	r3, #5
 800299c:	d00c      	beq.n	80029b8 <HAL_ADC_ConfigChannel+0x1a8>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	2b06      	cmp	r3, #6
 80029a4:	d008      	beq.n	80029b8 <HAL_ADC_ConfigChannel+0x1a8>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	2b07      	cmp	r3, #7
 80029ac:	d004      	beq.n	80029b8 <HAL_ADC_ConfigChannel+0x1a8>
 80029ae:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 80029b2:	482b      	ldr	r0, [pc, #172]	; (8002a60 <HAL_ADC_ConfigChannel+0x250>)
 80029b4:	f7fe fe9c 	bl	80016f0 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d101      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x1b6>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e0e5      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x382>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b06      	cmp	r3, #6
 80029d4:	d81c      	bhi.n	8002a10 <HAL_ADC_ConfigChannel+0x200>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	3b05      	subs	r3, #5
 80029e8:	221f      	movs	r2, #31
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	43db      	mvns	r3, r3
 80029f0:	4019      	ands	r1, r3
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	6818      	ldr	r0, [r3, #0]
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	3b05      	subs	r3, #5
 8002a02:	fa00 f203 	lsl.w	r2, r0, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	635a      	str	r2, [r3, #52]	; 0x34
 8002a0e:	e045      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x28c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	2b0c      	cmp	r3, #12
 8002a16:	d825      	bhi.n	8002a64 <HAL_ADC_ConfigChannel+0x254>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	3b23      	subs	r3, #35	; 0x23
 8002a2a:	221f      	movs	r2, #31
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	4019      	ands	r1, r3
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	6818      	ldr	r0, [r3, #0]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	3b23      	subs	r3, #35	; 0x23
 8002a44:	fa00 f203 	lsl.w	r2, r0, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a50:	e024      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x28c>
 8002a52:	bf00      	nop
 8002a54:	40012400 	.word	0x40012400
 8002a58:	40012800 	.word	0x40012800
 8002a5c:	40013c00 	.word	0x40013c00
 8002a60:	0800c270 	.word	0x0800c270
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	3b41      	subs	r3, #65	; 0x41
 8002a76:	221f      	movs	r2, #31
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	4019      	ands	r1, r3
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	6818      	ldr	r0, [r3, #0]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	3b41      	subs	r3, #65	; 0x41
 8002a90:	fa00 f203 	lsl.w	r2, r0, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b09      	cmp	r3, #9
 8002aa2:	d91c      	bls.n	8002ade <HAL_ADC_ConfigChannel+0x2ce>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68d9      	ldr	r1, [r3, #12]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3b1e      	subs	r3, #30
 8002ab6:	2207      	movs	r2, #7
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	4019      	ands	r1, r3
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	6898      	ldr	r0, [r3, #8]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	4413      	add	r3, r2
 8002ace:	3b1e      	subs	r3, #30
 8002ad0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	60da      	str	r2, [r3, #12]
 8002adc:	e019      	b.n	8002b12 <HAL_ADC_ConfigChannel+0x302>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	6919      	ldr	r1, [r3, #16]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	4413      	add	r3, r2
 8002aee:	2207      	movs	r2, #7
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43db      	mvns	r3, r3
 8002af6:	4019      	ands	r1, r3
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	6898      	ldr	r0, [r3, #8]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	4613      	mov	r3, r2
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	4413      	add	r3, r2
 8002b06:	fa00 f203 	lsl.w	r2, r0, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2b10      	cmp	r3, #16
 8002b18:	d003      	beq.n	8002b22 <HAL_ADC_ConfigChannel+0x312>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b1e:	2b11      	cmp	r3, #17
 8002b20:	d132      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x378>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a1d      	ldr	r2, [pc, #116]	; (8002b9c <HAL_ADC_ConfigChannel+0x38c>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d125      	bne.n	8002b78 <HAL_ADC_ConfigChannel+0x368>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d126      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x378>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002b48:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2b10      	cmp	r3, #16
 8002b50:	d11a      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x378>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b52:	4b13      	ldr	r3, [pc, #76]	; (8002ba0 <HAL_ADC_ConfigChannel+0x390>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a13      	ldr	r2, [pc, #76]	; (8002ba4 <HAL_ADC_ConfigChannel+0x394>)
 8002b58:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5c:	0c9a      	lsrs	r2, r3, #18
 8002b5e:	4613      	mov	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b68:	e002      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x360>
          {
            wait_loop_index--;
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f9      	bne.n	8002b6a <HAL_ADC_ConfigChannel+0x35a>
 8002b76:	e007      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x378>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7c:	f043 0220 	orr.w	r2, r3, #32
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40012400 	.word	0x40012400
 8002ba0:	20000000 	.word	0x20000000
 8002ba4:	431bde83 	.word	0x431bde83

08002ba8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d040      	beq.n	8002c48 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f042 0201 	orr.w	r2, r2, #1
 8002bd4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bd6:	4b1f      	ldr	r3, [pc, #124]	; (8002c54 <ADC_Enable+0xac>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a1f      	ldr	r2, [pc, #124]	; (8002c58 <ADC_Enable+0xb0>)
 8002bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002be0:	0c9b      	lsrs	r3, r3, #18
 8002be2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002be4:	e002      	b.n	8002bec <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	3b01      	subs	r3, #1
 8002bea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f9      	bne.n	8002be6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bf2:	f7ff fa2d 	bl	8002050 <HAL_GetTick>
 8002bf6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002bf8:	e01f      	b.n	8002c3a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bfa:	f7ff fa29 	bl	8002050 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d918      	bls.n	8002c3a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d011      	beq.n	8002c3a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1a:	f043 0210 	orr.w	r2, r3, #16
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c26:	f043 0201 	orr.w	r2, r3, #1
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e007      	b.n	8002c4a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d1d8      	bne.n	8002bfa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	20000000 	.word	0x20000000
 8002c58:	431bde83 	.word	0x431bde83

08002c5c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c64:	2300      	movs	r3, #0
 8002c66:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d12e      	bne.n	8002cd4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0201 	bic.w	r2, r2, #1
 8002c84:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c86:	f7ff f9e3 	bl	8002050 <HAL_GetTick>
 8002c8a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c8c:	e01b      	b.n	8002cc6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c8e:	f7ff f9df 	bl	8002050 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d914      	bls.n	8002cc6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d10d      	bne.n	8002cc6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cae:	f043 0210 	orr.w	r2, r3, #16
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cba:	f043 0201 	orr.w	r2, r3, #1
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e007      	b.n	8002cd6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d0dc      	beq.n	8002c8e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cf0:	4b0c      	ldr	r3, [pc, #48]	; (8002d24 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d12:	4a04      	ldr	r2, [pc, #16]	; (8002d24 <__NVIC_SetPriorityGrouping+0x44>)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	60d3      	str	r3, [r2, #12]
}
 8002d18:	bf00      	nop
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d2c:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <__NVIC_GetPriorityGrouping+0x18>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	0a1b      	lsrs	r3, r3, #8
 8002d32:	f003 0307 	and.w	r3, r3, #7
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bc80      	pop	{r7}
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	db0b      	blt.n	8002d6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	f003 021f 	and.w	r2, r3, #31
 8002d5c:	4906      	ldr	r1, [pc, #24]	; (8002d78 <__NVIC_EnableIRQ+0x34>)
 8002d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	2001      	movs	r0, #1
 8002d66:	fa00 f202 	lsl.w	r2, r0, r2
 8002d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc80      	pop	{r7}
 8002d76:	4770      	bx	lr
 8002d78:	e000e100 	.word	0xe000e100

08002d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	6039      	str	r1, [r7, #0]
 8002d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	db0a      	blt.n	8002da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	490c      	ldr	r1, [pc, #48]	; (8002dc8 <__NVIC_SetPriority+0x4c>)
 8002d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9a:	0112      	lsls	r2, r2, #4
 8002d9c:	b2d2      	uxtb	r2, r2
 8002d9e:	440b      	add	r3, r1
 8002da0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002da4:	e00a      	b.n	8002dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	4908      	ldr	r1, [pc, #32]	; (8002dcc <__NVIC_SetPriority+0x50>)
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	3b04      	subs	r3, #4
 8002db4:	0112      	lsls	r2, r2, #4
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	440b      	add	r3, r1
 8002dba:	761a      	strb	r2, [r3, #24]
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	e000e100 	.word	0xe000e100
 8002dcc:	e000ed00 	.word	0xe000ed00

08002dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b089      	sub	sp, #36	; 0x24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f1c3 0307 	rsb	r3, r3, #7
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	bf28      	it	cs
 8002dee:	2304      	movcs	r3, #4
 8002df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	3304      	adds	r3, #4
 8002df6:	2b06      	cmp	r3, #6
 8002df8:	d902      	bls.n	8002e00 <NVIC_EncodePriority+0x30>
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	3b03      	subs	r3, #3
 8002dfe:	e000      	b.n	8002e02 <NVIC_EncodePriority+0x32>
 8002e00:	2300      	movs	r3, #0
 8002e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e04:	f04f 32ff 	mov.w	r2, #4294967295
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	43da      	mvns	r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	401a      	ands	r2, r3
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e18:	f04f 31ff 	mov.w	r1, #4294967295
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e22:	43d9      	mvns	r1, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e28:	4313      	orrs	r3, r2
         );
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3724      	adds	r7, #36	; 0x24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr

08002e34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e44:	d301      	bcc.n	8002e4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e46:	2301      	movs	r3, #1
 8002e48:	e00f      	b.n	8002e6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e4a:	4a0a      	ldr	r2, [pc, #40]	; (8002e74 <SysTick_Config+0x40>)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e52:	210f      	movs	r1, #15
 8002e54:	f04f 30ff 	mov.w	r0, #4294967295
 8002e58:	f7ff ff90 	bl	8002d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e5c:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <SysTick_Config+0x40>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e62:	4b04      	ldr	r3, [pc, #16]	; (8002e74 <SysTick_Config+0x40>)
 8002e64:	2207      	movs	r2, #7
 8002e66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	e000e010 	.word	0xe000e010

08002e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b07      	cmp	r3, #7
 8002e84:	d00f      	beq.n	8002ea6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b06      	cmp	r3, #6
 8002e8a:	d00c      	beq.n	8002ea6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b05      	cmp	r3, #5
 8002e90:	d009      	beq.n	8002ea6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	d006      	beq.n	8002ea6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b03      	cmp	r3, #3
 8002e9c:	d003      	beq.n	8002ea6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002e9e:	2192      	movs	r1, #146	; 0x92
 8002ea0:	4804      	ldr	r0, [pc, #16]	; (8002eb4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002ea2:	f7fe fc25 	bl	80016f0 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7ff ff1a 	bl	8002ce0 <__NVIC_SetPriorityGrouping>
}
 8002eac:	bf00      	nop
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	0800c2a8 	.word	0x0800c2a8

08002eb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
 8002ec4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b0f      	cmp	r3, #15
 8002ece:	d903      	bls.n	8002ed8 <HAL_NVIC_SetPriority+0x20>
 8002ed0:	21aa      	movs	r1, #170	; 0xaa
 8002ed2:	480e      	ldr	r0, [pc, #56]	; (8002f0c <HAL_NVIC_SetPriority+0x54>)
 8002ed4:	f7fe fc0c 	bl	80016f0 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2b0f      	cmp	r3, #15
 8002edc:	d903      	bls.n	8002ee6 <HAL_NVIC_SetPriority+0x2e>
 8002ede:	21ab      	movs	r1, #171	; 0xab
 8002ee0:	480a      	ldr	r0, [pc, #40]	; (8002f0c <HAL_NVIC_SetPriority+0x54>)
 8002ee2:	f7fe fc05 	bl	80016f0 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ee6:	f7ff ff1f 	bl	8002d28 <__NVIC_GetPriorityGrouping>
 8002eea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	68b9      	ldr	r1, [r7, #8]
 8002ef0:	6978      	ldr	r0, [r7, #20]
 8002ef2:	f7ff ff6d 	bl	8002dd0 <NVIC_EncodePriority>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002efc:	4611      	mov	r1, r2
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff ff3c 	bl	8002d7c <__NVIC_SetPriority>
}
 8002f04:	bf00      	nop
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	0800c2a8 	.word	0x0800c2a8

08002f10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	da03      	bge.n	8002f2a <HAL_NVIC_EnableIRQ+0x1a>
 8002f22:	21be      	movs	r1, #190	; 0xbe
 8002f24:	4805      	ldr	r0, [pc, #20]	; (8002f3c <HAL_NVIC_EnableIRQ+0x2c>)
 8002f26:	f7fe fbe3 	bl	80016f0 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff ff08 	bl	8002d44 <__NVIC_EnableIRQ>
}
 8002f34:	bf00      	nop
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	0800c2a8 	.word	0x0800c2a8

08002f40 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff ff73 	bl	8002e34 <SysTick_Config>
 8002f4e:	4603      	mov	r3, r0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f60:	2300      	movs	r3, #0
 8002f62:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d008      	beq.n	8002f80 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2204      	movs	r2, #4
 8002f72:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e020      	b.n	8002fc2 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 020e 	bic.w	r2, r2, #14
 8002f8e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0201 	bic.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa8:	2101      	movs	r1, #1
 8002faa:	fa01 f202 	lsl.w	r2, r1, r2
 8002fae:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bc80      	pop	{r7}
 8002fca:	4770      	bx	lr

08002fcc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d005      	beq.n	8002fee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2204      	movs	r2, #4
 8002fe6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	73fb      	strb	r3, [r7, #15]
 8002fec:	e0d6      	b.n	800319c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 020e 	bic.w	r2, r2, #14
 8002ffc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0201 	bic.w	r2, r2, #1
 800300c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	461a      	mov	r2, r3
 8003014:	4b64      	ldr	r3, [pc, #400]	; (80031a8 <HAL_DMA_Abort_IT+0x1dc>)
 8003016:	429a      	cmp	r2, r3
 8003018:	d958      	bls.n	80030cc <HAL_DMA_Abort_IT+0x100>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a63      	ldr	r2, [pc, #396]	; (80031ac <HAL_DMA_Abort_IT+0x1e0>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d04f      	beq.n	80030c4 <HAL_DMA_Abort_IT+0xf8>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a61      	ldr	r2, [pc, #388]	; (80031b0 <HAL_DMA_Abort_IT+0x1e4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d048      	beq.n	80030c0 <HAL_DMA_Abort_IT+0xf4>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a60      	ldr	r2, [pc, #384]	; (80031b4 <HAL_DMA_Abort_IT+0x1e8>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d040      	beq.n	80030ba <HAL_DMA_Abort_IT+0xee>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a5e      	ldr	r2, [pc, #376]	; (80031b8 <HAL_DMA_Abort_IT+0x1ec>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d038      	beq.n	80030b4 <HAL_DMA_Abort_IT+0xe8>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a5d      	ldr	r2, [pc, #372]	; (80031bc <HAL_DMA_Abort_IT+0x1f0>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d030      	beq.n	80030ae <HAL_DMA_Abort_IT+0xe2>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a5b      	ldr	r2, [pc, #364]	; (80031c0 <HAL_DMA_Abort_IT+0x1f4>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d028      	beq.n	80030a8 <HAL_DMA_Abort_IT+0xdc>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a53      	ldr	r2, [pc, #332]	; (80031a8 <HAL_DMA_Abort_IT+0x1dc>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d020      	beq.n	80030a2 <HAL_DMA_Abort_IT+0xd6>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a57      	ldr	r2, [pc, #348]	; (80031c4 <HAL_DMA_Abort_IT+0x1f8>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d019      	beq.n	800309e <HAL_DMA_Abort_IT+0xd2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a56      	ldr	r2, [pc, #344]	; (80031c8 <HAL_DMA_Abort_IT+0x1fc>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d012      	beq.n	800309a <HAL_DMA_Abort_IT+0xce>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a54      	ldr	r2, [pc, #336]	; (80031cc <HAL_DMA_Abort_IT+0x200>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d00a      	beq.n	8003094 <HAL_DMA_Abort_IT+0xc8>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a53      	ldr	r2, [pc, #332]	; (80031d0 <HAL_DMA_Abort_IT+0x204>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d102      	bne.n	800308e <HAL_DMA_Abort_IT+0xc2>
 8003088:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800308c:	e01b      	b.n	80030c6 <HAL_DMA_Abort_IT+0xfa>
 800308e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003092:	e018      	b.n	80030c6 <HAL_DMA_Abort_IT+0xfa>
 8003094:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003098:	e015      	b.n	80030c6 <HAL_DMA_Abort_IT+0xfa>
 800309a:	2310      	movs	r3, #16
 800309c:	e013      	b.n	80030c6 <HAL_DMA_Abort_IT+0xfa>
 800309e:	2301      	movs	r3, #1
 80030a0:	e011      	b.n	80030c6 <HAL_DMA_Abort_IT+0xfa>
 80030a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030a6:	e00e      	b.n	80030c6 <HAL_DMA_Abort_IT+0xfa>
 80030a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030ac:	e00b      	b.n	80030c6 <HAL_DMA_Abort_IT+0xfa>
 80030ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030b2:	e008      	b.n	80030c6 <HAL_DMA_Abort_IT+0xfa>
 80030b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030b8:	e005      	b.n	80030c6 <HAL_DMA_Abort_IT+0xfa>
 80030ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030be:	e002      	b.n	80030c6 <HAL_DMA_Abort_IT+0xfa>
 80030c0:	2310      	movs	r3, #16
 80030c2:	e000      	b.n	80030c6 <HAL_DMA_Abort_IT+0xfa>
 80030c4:	2301      	movs	r3, #1
 80030c6:	4a43      	ldr	r2, [pc, #268]	; (80031d4 <HAL_DMA_Abort_IT+0x208>)
 80030c8:	6053      	str	r3, [r2, #4]
 80030ca:	e057      	b.n	800317c <HAL_DMA_Abort_IT+0x1b0>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a36      	ldr	r2, [pc, #216]	; (80031ac <HAL_DMA_Abort_IT+0x1e0>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d04f      	beq.n	8003176 <HAL_DMA_Abort_IT+0x1aa>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a35      	ldr	r2, [pc, #212]	; (80031b0 <HAL_DMA_Abort_IT+0x1e4>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d048      	beq.n	8003172 <HAL_DMA_Abort_IT+0x1a6>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a33      	ldr	r2, [pc, #204]	; (80031b4 <HAL_DMA_Abort_IT+0x1e8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d040      	beq.n	800316c <HAL_DMA_Abort_IT+0x1a0>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a32      	ldr	r2, [pc, #200]	; (80031b8 <HAL_DMA_Abort_IT+0x1ec>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d038      	beq.n	8003166 <HAL_DMA_Abort_IT+0x19a>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a30      	ldr	r2, [pc, #192]	; (80031bc <HAL_DMA_Abort_IT+0x1f0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d030      	beq.n	8003160 <HAL_DMA_Abort_IT+0x194>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a2f      	ldr	r2, [pc, #188]	; (80031c0 <HAL_DMA_Abort_IT+0x1f4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d028      	beq.n	800315a <HAL_DMA_Abort_IT+0x18e>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a26      	ldr	r2, [pc, #152]	; (80031a8 <HAL_DMA_Abort_IT+0x1dc>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d020      	beq.n	8003154 <HAL_DMA_Abort_IT+0x188>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a2b      	ldr	r2, [pc, #172]	; (80031c4 <HAL_DMA_Abort_IT+0x1f8>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d019      	beq.n	8003150 <HAL_DMA_Abort_IT+0x184>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a29      	ldr	r2, [pc, #164]	; (80031c8 <HAL_DMA_Abort_IT+0x1fc>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d012      	beq.n	800314c <HAL_DMA_Abort_IT+0x180>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a28      	ldr	r2, [pc, #160]	; (80031cc <HAL_DMA_Abort_IT+0x200>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d00a      	beq.n	8003146 <HAL_DMA_Abort_IT+0x17a>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a26      	ldr	r2, [pc, #152]	; (80031d0 <HAL_DMA_Abort_IT+0x204>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d102      	bne.n	8003140 <HAL_DMA_Abort_IT+0x174>
 800313a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800313e:	e01b      	b.n	8003178 <HAL_DMA_Abort_IT+0x1ac>
 8003140:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003144:	e018      	b.n	8003178 <HAL_DMA_Abort_IT+0x1ac>
 8003146:	f44f 7380 	mov.w	r3, #256	; 0x100
 800314a:	e015      	b.n	8003178 <HAL_DMA_Abort_IT+0x1ac>
 800314c:	2310      	movs	r3, #16
 800314e:	e013      	b.n	8003178 <HAL_DMA_Abort_IT+0x1ac>
 8003150:	2301      	movs	r3, #1
 8003152:	e011      	b.n	8003178 <HAL_DMA_Abort_IT+0x1ac>
 8003154:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003158:	e00e      	b.n	8003178 <HAL_DMA_Abort_IT+0x1ac>
 800315a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800315e:	e00b      	b.n	8003178 <HAL_DMA_Abort_IT+0x1ac>
 8003160:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003164:	e008      	b.n	8003178 <HAL_DMA_Abort_IT+0x1ac>
 8003166:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800316a:	e005      	b.n	8003178 <HAL_DMA_Abort_IT+0x1ac>
 800316c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003170:	e002      	b.n	8003178 <HAL_DMA_Abort_IT+0x1ac>
 8003172:	2310      	movs	r3, #16
 8003174:	e000      	b.n	8003178 <HAL_DMA_Abort_IT+0x1ac>
 8003176:	2301      	movs	r3, #1
 8003178:	4a17      	ldr	r2, [pc, #92]	; (80031d8 <HAL_DMA_Abort_IT+0x20c>)
 800317a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	4798      	blx	r3
    } 
  }
  return status;
 800319c:	7bfb      	ldrb	r3, [r7, #15]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40020080 	.word	0x40020080
 80031ac:	40020008 	.word	0x40020008
 80031b0:	4002001c 	.word	0x4002001c
 80031b4:	40020030 	.word	0x40020030
 80031b8:	40020044 	.word	0x40020044
 80031bc:	40020058 	.word	0x40020058
 80031c0:	4002006c 	.word	0x4002006c
 80031c4:	40020408 	.word	0x40020408
 80031c8:	4002041c 	.word	0x4002041c
 80031cc:	40020430 	.word	0x40020430
 80031d0:	40020444 	.word	0x40020444
 80031d4:	40020400 	.word	0x40020400
 80031d8:	40020000 	.word	0x40020000

080031dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08a      	sub	sp, #40	; 0x28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031e6:	2300      	movs	r3, #0
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80031ea:	2300      	movs	r3, #0
 80031ec:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4aa9      	ldr	r2, [pc, #676]	; (8003498 <HAL_GPIO_Init+0x2bc>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d01b      	beq.n	800322e <HAL_GPIO_Init+0x52>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4aa8      	ldr	r2, [pc, #672]	; (800349c <HAL_GPIO_Init+0x2c0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d017      	beq.n	800322e <HAL_GPIO_Init+0x52>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4aa7      	ldr	r2, [pc, #668]	; (80034a0 <HAL_GPIO_Init+0x2c4>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d013      	beq.n	800322e <HAL_GPIO_Init+0x52>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4aa6      	ldr	r2, [pc, #664]	; (80034a4 <HAL_GPIO_Init+0x2c8>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00f      	beq.n	800322e <HAL_GPIO_Init+0x52>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4aa5      	ldr	r2, [pc, #660]	; (80034a8 <HAL_GPIO_Init+0x2cc>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d00b      	beq.n	800322e <HAL_GPIO_Init+0x52>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4aa4      	ldr	r2, [pc, #656]	; (80034ac <HAL_GPIO_Init+0x2d0>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d007      	beq.n	800322e <HAL_GPIO_Init+0x52>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4aa3      	ldr	r2, [pc, #652]	; (80034b0 <HAL_GPIO_Init+0x2d4>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d003      	beq.n	800322e <HAL_GPIO_Init+0x52>
 8003226:	21bd      	movs	r1, #189	; 0xbd
 8003228:	48a2      	ldr	r0, [pc, #648]	; (80034b4 <HAL_GPIO_Init+0x2d8>)
 800322a:	f7fe fa61 	bl	80016f0 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	b29b      	uxth	r3, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <HAL_GPIO_Init+0x68>
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	0c1b      	lsrs	r3, r3, #16
 800323e:	041b      	lsls	r3, r3, #16
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_GPIO_Init+0x70>
 8003244:	21be      	movs	r1, #190	; 0xbe
 8003246:	489b      	ldr	r0, [pc, #620]	; (80034b4 <HAL_GPIO_Init+0x2d8>)
 8003248:	f7fe fa52 	bl	80016f0 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 8235 	beq.w	80036c0 <HAL_GPIO_Init+0x4e4>
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2b01      	cmp	r3, #1
 800325c:	f000 8230 	beq.w	80036c0 <HAL_GPIO_Init+0x4e4>
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2b11      	cmp	r3, #17
 8003266:	f000 822b 	beq.w	80036c0 <HAL_GPIO_Init+0x4e4>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b02      	cmp	r3, #2
 8003270:	f000 8226 	beq.w	80036c0 <HAL_GPIO_Init+0x4e4>
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b12      	cmp	r3, #18
 800327a:	f000 8221 	beq.w	80036c0 <HAL_GPIO_Init+0x4e4>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	4a8d      	ldr	r2, [pc, #564]	; (80034b8 <HAL_GPIO_Init+0x2dc>)
 8003284:	4293      	cmp	r3, r2
 8003286:	f000 821b 	beq.w	80036c0 <HAL_GPIO_Init+0x4e4>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	4a8b      	ldr	r2, [pc, #556]	; (80034bc <HAL_GPIO_Init+0x2e0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	f000 8215 	beq.w	80036c0 <HAL_GPIO_Init+0x4e4>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	4a89      	ldr	r2, [pc, #548]	; (80034c0 <HAL_GPIO_Init+0x2e4>)
 800329c:	4293      	cmp	r3, r2
 800329e:	f000 820f 	beq.w	80036c0 <HAL_GPIO_Init+0x4e4>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	4a87      	ldr	r2, [pc, #540]	; (80034c4 <HAL_GPIO_Init+0x2e8>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	f000 8209 	beq.w	80036c0 <HAL_GPIO_Init+0x4e4>
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	4a85      	ldr	r2, [pc, #532]	; (80034c8 <HAL_GPIO_Init+0x2ec>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	f000 8203 	beq.w	80036c0 <HAL_GPIO_Init+0x4e4>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	4a83      	ldr	r2, [pc, #524]	; (80034cc <HAL_GPIO_Init+0x2f0>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	f000 81fd 	beq.w	80036c0 <HAL_GPIO_Init+0x4e4>
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b03      	cmp	r3, #3
 80032cc:	f000 81f8 	beq.w	80036c0 <HAL_GPIO_Init+0x4e4>
 80032d0:	21bf      	movs	r1, #191	; 0xbf
 80032d2:	4878      	ldr	r0, [pc, #480]	; (80034b4 <HAL_GPIO_Init+0x2d8>)
 80032d4:	f7fe fa0c 	bl	80016f0 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032d8:	e1f2      	b.n	80036c0 <HAL_GPIO_Init+0x4e4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80032da:	2201      	movs	r2, #1
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	69fa      	ldr	r2, [r7, #28]
 80032ea:	4013      	ands	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	f040 81e1 	bne.w	80036ba <HAL_GPIO_Init+0x4de>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a67      	ldr	r2, [pc, #412]	; (8003498 <HAL_GPIO_Init+0x2bc>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d01b      	beq.n	8003338 <HAL_GPIO_Init+0x15c>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a66      	ldr	r2, [pc, #408]	; (800349c <HAL_GPIO_Init+0x2c0>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d017      	beq.n	8003338 <HAL_GPIO_Init+0x15c>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a65      	ldr	r2, [pc, #404]	; (80034a0 <HAL_GPIO_Init+0x2c4>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d013      	beq.n	8003338 <HAL_GPIO_Init+0x15c>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a64      	ldr	r2, [pc, #400]	; (80034a4 <HAL_GPIO_Init+0x2c8>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d00f      	beq.n	8003338 <HAL_GPIO_Init+0x15c>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a63      	ldr	r2, [pc, #396]	; (80034a8 <HAL_GPIO_Init+0x2cc>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d00b      	beq.n	8003338 <HAL_GPIO_Init+0x15c>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a62      	ldr	r2, [pc, #392]	; (80034ac <HAL_GPIO_Init+0x2d0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d007      	beq.n	8003338 <HAL_GPIO_Init+0x15c>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a61      	ldr	r2, [pc, #388]	; (80034b0 <HAL_GPIO_Init+0x2d4>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d003      	beq.n	8003338 <HAL_GPIO_Init+0x15c>
 8003330:	21cd      	movs	r1, #205	; 0xcd
 8003332:	4860      	ldr	r0, [pc, #384]	; (80034b4 <HAL_GPIO_Init+0x2d8>)
 8003334:	f7fe f9dc 	bl	80016f0 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	4a63      	ldr	r2, [pc, #396]	; (80034cc <HAL_GPIO_Init+0x2f0>)
 800333e:	4293      	cmp	r3, r2
 8003340:	f000 80c6 	beq.w	80034d0 <HAL_GPIO_Init+0x2f4>
 8003344:	4a61      	ldr	r2, [pc, #388]	; (80034cc <HAL_GPIO_Init+0x2f0>)
 8003346:	4293      	cmp	r3, r2
 8003348:	f200 80ec 	bhi.w	8003524 <HAL_GPIO_Init+0x348>
 800334c:	4a5c      	ldr	r2, [pc, #368]	; (80034c0 <HAL_GPIO_Init+0x2e4>)
 800334e:	4293      	cmp	r3, r2
 8003350:	f000 80be 	beq.w	80034d0 <HAL_GPIO_Init+0x2f4>
 8003354:	4a5a      	ldr	r2, [pc, #360]	; (80034c0 <HAL_GPIO_Init+0x2e4>)
 8003356:	4293      	cmp	r3, r2
 8003358:	f200 80e4 	bhi.w	8003524 <HAL_GPIO_Init+0x348>
 800335c:	4a5a      	ldr	r2, [pc, #360]	; (80034c8 <HAL_GPIO_Init+0x2ec>)
 800335e:	4293      	cmp	r3, r2
 8003360:	f000 80b6 	beq.w	80034d0 <HAL_GPIO_Init+0x2f4>
 8003364:	4a58      	ldr	r2, [pc, #352]	; (80034c8 <HAL_GPIO_Init+0x2ec>)
 8003366:	4293      	cmp	r3, r2
 8003368:	f200 80dc 	bhi.w	8003524 <HAL_GPIO_Init+0x348>
 800336c:	4a53      	ldr	r2, [pc, #332]	; (80034bc <HAL_GPIO_Init+0x2e0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	f000 80ae 	beq.w	80034d0 <HAL_GPIO_Init+0x2f4>
 8003374:	4a51      	ldr	r2, [pc, #324]	; (80034bc <HAL_GPIO_Init+0x2e0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	f200 80d4 	bhi.w	8003524 <HAL_GPIO_Init+0x348>
 800337c:	4a51      	ldr	r2, [pc, #324]	; (80034c4 <HAL_GPIO_Init+0x2e8>)
 800337e:	4293      	cmp	r3, r2
 8003380:	f000 80a6 	beq.w	80034d0 <HAL_GPIO_Init+0x2f4>
 8003384:	4a4f      	ldr	r2, [pc, #316]	; (80034c4 <HAL_GPIO_Init+0x2e8>)
 8003386:	4293      	cmp	r3, r2
 8003388:	f200 80cc 	bhi.w	8003524 <HAL_GPIO_Init+0x348>
 800338c:	2b12      	cmp	r3, #18
 800338e:	d82b      	bhi.n	80033e8 <HAL_GPIO_Init+0x20c>
 8003390:	2b12      	cmp	r3, #18
 8003392:	f200 80c7 	bhi.w	8003524 <HAL_GPIO_Init+0x348>
 8003396:	a201      	add	r2, pc, #4	; (adr r2, 800339c <HAL_GPIO_Init+0x1c0>)
 8003398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339c:	080034d1 	.word	0x080034d1
 80033a0:	080033f1 	.word	0x080033f1
 80033a4:	08003443 	.word	0x08003443
 80033a8:	0800351f 	.word	0x0800351f
 80033ac:	08003525 	.word	0x08003525
 80033b0:	08003525 	.word	0x08003525
 80033b4:	08003525 	.word	0x08003525
 80033b8:	08003525 	.word	0x08003525
 80033bc:	08003525 	.word	0x08003525
 80033c0:	08003525 	.word	0x08003525
 80033c4:	08003525 	.word	0x08003525
 80033c8:	08003525 	.word	0x08003525
 80033cc:	08003525 	.word	0x08003525
 80033d0:	08003525 	.word	0x08003525
 80033d4:	08003525 	.word	0x08003525
 80033d8:	08003525 	.word	0x08003525
 80033dc:	08003525 	.word	0x08003525
 80033e0:	08003419 	.word	0x08003419
 80033e4:	0800346d 	.word	0x0800346d
 80033e8:	4a33      	ldr	r2, [pc, #204]	; (80034b8 <HAL_GPIO_Init+0x2dc>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d070      	beq.n	80034d0 <HAL_GPIO_Init+0x2f4>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80033ee:	e099      	b.n	8003524 <HAL_GPIO_Init+0x348>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d00b      	beq.n	8003410 <HAL_GPIO_Init+0x234>
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d007      	beq.n	8003410 <HAL_GPIO_Init+0x234>
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	2b03      	cmp	r3, #3
 8003406:	d003      	beq.n	8003410 <HAL_GPIO_Init+0x234>
 8003408:	21d5      	movs	r1, #213	; 0xd5
 800340a:	482a      	ldr	r0, [pc, #168]	; (80034b4 <HAL_GPIO_Init+0x2d8>)
 800340c:	f7fe f970 	bl	80016f0 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	623b      	str	r3, [r7, #32]
          break;
 8003416:	e086      	b.n	8003526 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	2b02      	cmp	r3, #2
 800341e:	d00b      	beq.n	8003438 <HAL_GPIO_Init+0x25c>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d007      	beq.n	8003438 <HAL_GPIO_Init+0x25c>
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	2b03      	cmp	r3, #3
 800342e:	d003      	beq.n	8003438 <HAL_GPIO_Init+0x25c>
 8003430:	21dc      	movs	r1, #220	; 0xdc
 8003432:	4820      	ldr	r0, [pc, #128]	; (80034b4 <HAL_GPIO_Init+0x2d8>)
 8003434:	f7fe f95c 	bl	80016f0 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	3304      	adds	r3, #4
 800343e:	623b      	str	r3, [r7, #32]
          break;
 8003440:	e071      	b.n	8003526 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	2b02      	cmp	r3, #2
 8003448:	d00b      	beq.n	8003462 <HAL_GPIO_Init+0x286>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d007      	beq.n	8003462 <HAL_GPIO_Init+0x286>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	2b03      	cmp	r3, #3
 8003458:	d003      	beq.n	8003462 <HAL_GPIO_Init+0x286>
 800345a:	21e3      	movs	r1, #227	; 0xe3
 800345c:	4815      	ldr	r0, [pc, #84]	; (80034b4 <HAL_GPIO_Init+0x2d8>)
 800345e:	f7fe f947 	bl	80016f0 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	3308      	adds	r3, #8
 8003468:	623b      	str	r3, [r7, #32]
          break;
 800346a:	e05c      	b.n	8003526 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	2b02      	cmp	r3, #2
 8003472:	d00b      	beq.n	800348c <HAL_GPIO_Init+0x2b0>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d007      	beq.n	800348c <HAL_GPIO_Init+0x2b0>
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	2b03      	cmp	r3, #3
 8003482:	d003      	beq.n	800348c <HAL_GPIO_Init+0x2b0>
 8003484:	21ea      	movs	r1, #234	; 0xea
 8003486:	480b      	ldr	r0, [pc, #44]	; (80034b4 <HAL_GPIO_Init+0x2d8>)
 8003488:	f7fe f932 	bl	80016f0 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	330c      	adds	r3, #12
 8003492:	623b      	str	r3, [r7, #32]
          break;
 8003494:	e047      	b.n	8003526 <HAL_GPIO_Init+0x34a>
 8003496:	bf00      	nop
 8003498:	40010800 	.word	0x40010800
 800349c:	40010c00 	.word	0x40010c00
 80034a0:	40011000 	.word	0x40011000
 80034a4:	40011400 	.word	0x40011400
 80034a8:	40011800 	.word	0x40011800
 80034ac:	40011c00 	.word	0x40011c00
 80034b0:	40012000 	.word	0x40012000
 80034b4:	0800c2e4 	.word	0x0800c2e4
 80034b8:	10110000 	.word	0x10110000
 80034bc:	10210000 	.word	0x10210000
 80034c0:	10310000 	.word	0x10310000
 80034c4:	10120000 	.word	0x10120000
 80034c8:	10220000 	.word	0x10220000
 80034cc:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00b      	beq.n	80034f0 <HAL_GPIO_Init+0x314>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d007      	beq.n	80034f0 <HAL_GPIO_Init+0x314>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d003      	beq.n	80034f0 <HAL_GPIO_Init+0x314>
 80034e8:	21f7      	movs	r1, #247	; 0xf7
 80034ea:	487c      	ldr	r0, [pc, #496]	; (80036dc <HAL_GPIO_Init+0x500>)
 80034ec:	f7fe f900 	bl	80016f0 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d102      	bne.n	80034fe <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80034f8:	2304      	movs	r3, #4
 80034fa:	623b      	str	r3, [r7, #32]
          break;
 80034fc:	e013      	b.n	8003526 <HAL_GPIO_Init+0x34a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d105      	bne.n	8003512 <HAL_GPIO_Init+0x336>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003506:	2308      	movs	r3, #8
 8003508:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69fa      	ldr	r2, [r7, #28]
 800350e:	611a      	str	r2, [r3, #16]
          break;
 8003510:	e009      	b.n	8003526 <HAL_GPIO_Init+0x34a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003512:	2308      	movs	r3, #8
 8003514:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69fa      	ldr	r2, [r7, #28]
 800351a:	615a      	str	r2, [r3, #20]
          break;
 800351c:	e003      	b.n	8003526 <HAL_GPIO_Init+0x34a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800351e:	2300      	movs	r3, #0
 8003520:	623b      	str	r3, [r7, #32]
          break;
 8003522:	e000      	b.n	8003526 <HAL_GPIO_Init+0x34a>
          break;
 8003524:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	2bff      	cmp	r3, #255	; 0xff
 800352a:	d801      	bhi.n	8003530 <HAL_GPIO_Init+0x354>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	e001      	b.n	8003534 <HAL_GPIO_Init+0x358>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3304      	adds	r3, #4
 8003534:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	2bff      	cmp	r3, #255	; 0xff
 800353a:	d802      	bhi.n	8003542 <HAL_GPIO_Init+0x366>
 800353c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	e002      	b.n	8003548 <HAL_GPIO_Init+0x36c>
 8003542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003544:	3b08      	subs	r3, #8
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	210f      	movs	r1, #15
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	fa01 f303 	lsl.w	r3, r1, r3
 8003556:	43db      	mvns	r3, r3
 8003558:	401a      	ands	r2, r3
 800355a:	6a39      	ldr	r1, [r7, #32]
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	fa01 f303 	lsl.w	r3, r1, r3
 8003562:	431a      	orrs	r2, r3
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 80a2 	beq.w	80036ba <HAL_GPIO_Init+0x4de>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003576:	4b5a      	ldr	r3, [pc, #360]	; (80036e0 <HAL_GPIO_Init+0x504>)
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	4a59      	ldr	r2, [pc, #356]	; (80036e0 <HAL_GPIO_Init+0x504>)
 800357c:	f043 0301 	orr.w	r3, r3, #1
 8003580:	6193      	str	r3, [r2, #24]
 8003582:	4b57      	ldr	r3, [pc, #348]	; (80036e0 <HAL_GPIO_Init+0x504>)
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	60bb      	str	r3, [r7, #8]
 800358c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800358e:	4a55      	ldr	r2, [pc, #340]	; (80036e4 <HAL_GPIO_Init+0x508>)
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	089b      	lsrs	r3, r3, #2
 8003594:	3302      	adds	r3, #2
 8003596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800359a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	220f      	movs	r2, #15
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	43db      	mvns	r3, r3
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	4013      	ands	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a4c      	ldr	r2, [pc, #304]	; (80036e8 <HAL_GPIO_Init+0x50c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d01f      	beq.n	80035fa <HAL_GPIO_Init+0x41e>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a4b      	ldr	r2, [pc, #300]	; (80036ec <HAL_GPIO_Init+0x510>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d019      	beq.n	80035f6 <HAL_GPIO_Init+0x41a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a4a      	ldr	r2, [pc, #296]	; (80036f0 <HAL_GPIO_Init+0x514>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d013      	beq.n	80035f2 <HAL_GPIO_Init+0x416>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a49      	ldr	r2, [pc, #292]	; (80036f4 <HAL_GPIO_Init+0x518>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d00d      	beq.n	80035ee <HAL_GPIO_Init+0x412>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a48      	ldr	r2, [pc, #288]	; (80036f8 <HAL_GPIO_Init+0x51c>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d007      	beq.n	80035ea <HAL_GPIO_Init+0x40e>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a47      	ldr	r2, [pc, #284]	; (80036fc <HAL_GPIO_Init+0x520>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d101      	bne.n	80035e6 <HAL_GPIO_Init+0x40a>
 80035e2:	2305      	movs	r3, #5
 80035e4:	e00a      	b.n	80035fc <HAL_GPIO_Init+0x420>
 80035e6:	2306      	movs	r3, #6
 80035e8:	e008      	b.n	80035fc <HAL_GPIO_Init+0x420>
 80035ea:	2304      	movs	r3, #4
 80035ec:	e006      	b.n	80035fc <HAL_GPIO_Init+0x420>
 80035ee:	2303      	movs	r3, #3
 80035f0:	e004      	b.n	80035fc <HAL_GPIO_Init+0x420>
 80035f2:	2302      	movs	r3, #2
 80035f4:	e002      	b.n	80035fc <HAL_GPIO_Init+0x420>
 80035f6:	2301      	movs	r3, #1
 80035f8:	e000      	b.n	80035fc <HAL_GPIO_Init+0x420>
 80035fa:	2300      	movs	r3, #0
 80035fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035fe:	f002 0203 	and.w	r2, r2, #3
 8003602:	0092      	lsls	r2, r2, #2
 8003604:	4093      	lsls	r3, r2
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4313      	orrs	r3, r2
 800360a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800360c:	4935      	ldr	r1, [pc, #212]	; (80036e4 <HAL_GPIO_Init+0x508>)
 800360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003610:	089b      	lsrs	r3, r3, #2
 8003612:	3302      	adds	r3, #2
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d006      	beq.n	8003634 <HAL_GPIO_Init+0x458>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003626:	4b36      	ldr	r3, [pc, #216]	; (8003700 <HAL_GPIO_Init+0x524>)
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	4935      	ldr	r1, [pc, #212]	; (8003700 <HAL_GPIO_Init+0x524>)
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	4313      	orrs	r3, r2
 8003630:	600b      	str	r3, [r1, #0]
 8003632:	e006      	b.n	8003642 <HAL_GPIO_Init+0x466>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003634:	4b32      	ldr	r3, [pc, #200]	; (8003700 <HAL_GPIO_Init+0x524>)
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	43db      	mvns	r3, r3
 800363c:	4930      	ldr	r1, [pc, #192]	; (8003700 <HAL_GPIO_Init+0x524>)
 800363e:	4013      	ands	r3, r2
 8003640:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d006      	beq.n	800365c <HAL_GPIO_Init+0x480>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800364e:	4b2c      	ldr	r3, [pc, #176]	; (8003700 <HAL_GPIO_Init+0x524>)
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	492b      	ldr	r1, [pc, #172]	; (8003700 <HAL_GPIO_Init+0x524>)
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	4313      	orrs	r3, r2
 8003658:	604b      	str	r3, [r1, #4]
 800365a:	e006      	b.n	800366a <HAL_GPIO_Init+0x48e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800365c:	4b28      	ldr	r3, [pc, #160]	; (8003700 <HAL_GPIO_Init+0x524>)
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	43db      	mvns	r3, r3
 8003664:	4926      	ldr	r1, [pc, #152]	; (8003700 <HAL_GPIO_Init+0x524>)
 8003666:	4013      	ands	r3, r2
 8003668:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d006      	beq.n	8003684 <HAL_GPIO_Init+0x4a8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003676:	4b22      	ldr	r3, [pc, #136]	; (8003700 <HAL_GPIO_Init+0x524>)
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	4921      	ldr	r1, [pc, #132]	; (8003700 <HAL_GPIO_Init+0x524>)
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	4313      	orrs	r3, r2
 8003680:	608b      	str	r3, [r1, #8]
 8003682:	e006      	b.n	8003692 <HAL_GPIO_Init+0x4b6>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003684:	4b1e      	ldr	r3, [pc, #120]	; (8003700 <HAL_GPIO_Init+0x524>)
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	43db      	mvns	r3, r3
 800368c:	491c      	ldr	r1, [pc, #112]	; (8003700 <HAL_GPIO_Init+0x524>)
 800368e:	4013      	ands	r3, r2
 8003690:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d006      	beq.n	80036ac <HAL_GPIO_Init+0x4d0>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800369e:	4b18      	ldr	r3, [pc, #96]	; (8003700 <HAL_GPIO_Init+0x524>)
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	4917      	ldr	r1, [pc, #92]	; (8003700 <HAL_GPIO_Init+0x524>)
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	60cb      	str	r3, [r1, #12]
 80036aa:	e006      	b.n	80036ba <HAL_GPIO_Init+0x4de>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80036ac:	4b14      	ldr	r3, [pc, #80]	; (8003700 <HAL_GPIO_Init+0x524>)
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	43db      	mvns	r3, r3
 80036b4:	4912      	ldr	r1, [pc, #72]	; (8003700 <HAL_GPIO_Init+0x524>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80036ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036bc:	3301      	adds	r3, #1
 80036be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c6:	fa22 f303 	lsr.w	r3, r2, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f47f ae05 	bne.w	80032da <HAL_GPIO_Init+0xfe>
  }
}
 80036d0:	bf00      	nop
 80036d2:	bf00      	nop
 80036d4:	3728      	adds	r7, #40	; 0x28
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	0800c2e4 	.word	0x0800c2e4
 80036e0:	40021000 	.word	0x40021000
 80036e4:	40010000 	.word	0x40010000
 80036e8:	40010800 	.word	0x40010800
 80036ec:	40010c00 	.word	0x40010c00
 80036f0:	40011000 	.word	0x40011000
 80036f4:	40011400 	.word	0x40011400
 80036f8:	40011800 	.word	0x40011800
 80036fc:	40011c00 	.word	0x40011c00
 8003700:	40010400 	.word	0x40010400

08003704 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	807b      	strh	r3, [r7, #2]
 8003710:	4613      	mov	r3, r2
 8003712:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003714:	887b      	ldrh	r3, [r7, #2]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d004      	beq.n	8003724 <HAL_GPIO_WritePin+0x20>
 800371a:	887b      	ldrh	r3, [r7, #2]
 800371c:	0c1b      	lsrs	r3, r3, #16
 800371e:	041b      	lsls	r3, r3, #16
 8003720:	2b00      	cmp	r3, #0
 8003722:	d004      	beq.n	800372e <HAL_GPIO_WritePin+0x2a>
 8003724:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8003728:	480e      	ldr	r0, [pc, #56]	; (8003764 <HAL_GPIO_WritePin+0x60>)
 800372a:	f7fd ffe1 	bl	80016f0 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800372e:	787b      	ldrb	r3, [r7, #1]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d007      	beq.n	8003744 <HAL_GPIO_WritePin+0x40>
 8003734:	787b      	ldrb	r3, [r7, #1]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d004      	beq.n	8003744 <HAL_GPIO_WritePin+0x40>
 800373a:	f240 11d5 	movw	r1, #469	; 0x1d5
 800373e:	4809      	ldr	r0, [pc, #36]	; (8003764 <HAL_GPIO_WritePin+0x60>)
 8003740:	f7fd ffd6 	bl	80016f0 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8003744:	787b      	ldrb	r3, [r7, #1]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800374a:	887a      	ldrh	r2, [r7, #2]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003750:	e003      	b.n	800375a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003752:	887b      	ldrh	r3, [r7, #2]
 8003754:	041a      	lsls	r2, r3, #16
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	611a      	str	r2, [r3, #16]
}
 800375a:	bf00      	nop
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	0800c2e4 	.word	0x0800c2e4

08003768 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	460b      	mov	r3, r1
 8003772:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003774:	887b      	ldrh	r3, [r7, #2]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d004      	beq.n	8003784 <HAL_GPIO_TogglePin+0x1c>
 800377a:	887b      	ldrh	r3, [r7, #2]
 800377c:	0c1b      	lsrs	r3, r3, #16
 800377e:	041b      	lsls	r3, r3, #16
 8003780:	2b00      	cmp	r3, #0
 8003782:	d004      	beq.n	800378e <HAL_GPIO_TogglePin+0x26>
 8003784:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8003788:	480a      	ldr	r0, [pc, #40]	; (80037b4 <HAL_GPIO_TogglePin+0x4c>)
 800378a:	f7fd ffb1 	bl	80016f0 <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003794:	887a      	ldrh	r2, [r7, #2]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	4013      	ands	r3, r2
 800379a:	041a      	lsls	r2, r3, #16
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	43d9      	mvns	r1, r3
 80037a0:	887b      	ldrh	r3, [r7, #2]
 80037a2:	400b      	ands	r3, r1
 80037a4:	431a      	orrs	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	611a      	str	r2, [r3, #16]
}
 80037aa:	bf00      	nop
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	0800c2e4 	.word	0x0800c2e4

080037b8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80037bc:	4b03      	ldr	r3, [pc, #12]	; (80037cc <HAL_PWR_EnableBkUpAccess+0x14>)
 80037be:	2201      	movs	r2, #1
 80037c0:	601a      	str	r2, [r3, #0]
}
 80037c2:	bf00      	nop
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bc80      	pop	{r7}
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	420e0020 	.word	0x420e0020

080037d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e35c      	b.n	8003e9c <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d01c      	beq.n	8003824 <HAL_RCC_OscConfig+0x54>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d116      	bne.n	8003824 <HAL_RCC_OscConfig+0x54>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d110      	bne.n	8003824 <HAL_RCC_OscConfig+0x54>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0308 	and.w	r3, r3, #8
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10a      	bne.n	8003824 <HAL_RCC_OscConfig+0x54>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0304 	and.w	r3, r3, #4
 8003816:	2b00      	cmp	r3, #0
 8003818:	d104      	bne.n	8003824 <HAL_RCC_OscConfig+0x54>
 800381a:	f240 1167 	movw	r1, #359	; 0x167
 800381e:	48a5      	ldr	r0, [pc, #660]	; (8003ab4 <HAL_RCC_OscConfig+0x2e4>)
 8003820:	f7fd ff66 	bl	80016f0 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 809a 	beq.w	8003966 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00e      	beq.n	8003858 <HAL_RCC_OscConfig+0x88>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003842:	d009      	beq.n	8003858 <HAL_RCC_OscConfig+0x88>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800384c:	d004      	beq.n	8003858 <HAL_RCC_OscConfig+0x88>
 800384e:	f240 116d 	movw	r1, #365	; 0x16d
 8003852:	4898      	ldr	r0, [pc, #608]	; (8003ab4 <HAL_RCC_OscConfig+0x2e4>)
 8003854:	f7fd ff4c 	bl	80016f0 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003858:	4b97      	ldr	r3, [pc, #604]	; (8003ab8 <HAL_RCC_OscConfig+0x2e8>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f003 030c 	and.w	r3, r3, #12
 8003860:	2b04      	cmp	r3, #4
 8003862:	d00c      	beq.n	800387e <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003864:	4b94      	ldr	r3, [pc, #592]	; (8003ab8 <HAL_RCC_OscConfig+0x2e8>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f003 030c 	and.w	r3, r3, #12
 800386c:	2b08      	cmp	r3, #8
 800386e:	d112      	bne.n	8003896 <HAL_RCC_OscConfig+0xc6>
 8003870:	4b91      	ldr	r3, [pc, #580]	; (8003ab8 <HAL_RCC_OscConfig+0x2e8>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800387c:	d10b      	bne.n	8003896 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800387e:	4b8e      	ldr	r3, [pc, #568]	; (8003ab8 <HAL_RCC_OscConfig+0x2e8>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d06c      	beq.n	8003964 <HAL_RCC_OscConfig+0x194>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d168      	bne.n	8003964 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e302      	b.n	8003e9c <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800389e:	d106      	bne.n	80038ae <HAL_RCC_OscConfig+0xde>
 80038a0:	4b85      	ldr	r3, [pc, #532]	; (8003ab8 <HAL_RCC_OscConfig+0x2e8>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a84      	ldr	r2, [pc, #528]	; (8003ab8 <HAL_RCC_OscConfig+0x2e8>)
 80038a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038aa:	6013      	str	r3, [r2, #0]
 80038ac:	e02e      	b.n	800390c <HAL_RCC_OscConfig+0x13c>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10c      	bne.n	80038d0 <HAL_RCC_OscConfig+0x100>
 80038b6:	4b80      	ldr	r3, [pc, #512]	; (8003ab8 <HAL_RCC_OscConfig+0x2e8>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a7f      	ldr	r2, [pc, #508]	; (8003ab8 <HAL_RCC_OscConfig+0x2e8>)
 80038bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	4b7d      	ldr	r3, [pc, #500]	; (8003ab8 <HAL_RCC_OscConfig+0x2e8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a7c      	ldr	r2, [pc, #496]	; (8003ab8 <HAL_RCC_OscConfig+0x2e8>)
 80038c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038cc:	6013      	str	r3, [r2, #0]
 80038ce:	e01d      	b.n	800390c <HAL_RCC_OscConfig+0x13c>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038d8:	d10c      	bne.n	80038f4 <HAL_RCC_OscConfig+0x124>
 80038da:	4b77      	ldr	r3, [pc, #476]	; (8003ab8 <HAL_RCC_OscConfig+0x2e8>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a76      	ldr	r2, [pc, #472]	; (8003ab8 <HAL_RCC_OscConfig+0x2e8>)
 80038e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038e4:	6013      	str	r3, [r2, #0]
 80038e6:	4b74      	ldr	r3, [pc, #464]	; (8003ab8 <HAL_RCC_OscConfig+0x2e8>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a73      	ldr	r2, [pc, #460]	; (8003ab8 <HAL_RCC_OscConfig+0x2e8>)
 80038ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	e00b      	b.n	800390c <HAL_RCC_OscConfig+0x13c>
 80038f4:	4b70      	ldr	r3, [pc, #448]	; (8003ab8 <HAL_RCC_OscConfig+0x2e8>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a6f      	ldr	r2, [pc, #444]	; (8003ab8 <HAL_RCC_OscConfig+0x2e8>)
 80038fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	4b6d      	ldr	r3, [pc, #436]	; (8003ab8 <HAL_RCC_OscConfig+0x2e8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a6c      	ldr	r2, [pc, #432]	; (8003ab8 <HAL_RCC_OscConfig+0x2e8>)
 8003906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800390a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d013      	beq.n	800393c <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003914:	f7fe fb9c 	bl	8002050 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800391c:	f7fe fb98 	bl	8002050 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b64      	cmp	r3, #100	; 0x64
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e2b6      	b.n	8003e9c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800392e:	4b62      	ldr	r3, [pc, #392]	; (8003ab8 <HAL_RCC_OscConfig+0x2e8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d0f0      	beq.n	800391c <HAL_RCC_OscConfig+0x14c>
 800393a:	e014      	b.n	8003966 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393c:	f7fe fb88 	bl	8002050 <HAL_GetTick>
 8003940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003944:	f7fe fb84 	bl	8002050 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b64      	cmp	r3, #100	; 0x64
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e2a2      	b.n	8003e9c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003956:	4b58      	ldr	r3, [pc, #352]	; (8003ab8 <HAL_RCC_OscConfig+0x2e8>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f0      	bne.n	8003944 <HAL_RCC_OscConfig+0x174>
 8003962:	e000      	b.n	8003966 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d079      	beq.n	8003a66 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d008      	beq.n	800398c <HAL_RCC_OscConfig+0x1bc>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d004      	beq.n	800398c <HAL_RCC_OscConfig+0x1bc>
 8003982:	f240 11a1 	movw	r1, #417	; 0x1a1
 8003986:	484b      	ldr	r0, [pc, #300]	; (8003ab4 <HAL_RCC_OscConfig+0x2e4>)
 8003988:	f7fd feb2 	bl	80016f0 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	2b1f      	cmp	r3, #31
 8003992:	d904      	bls.n	800399e <HAL_RCC_OscConfig+0x1ce>
 8003994:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8003998:	4846      	ldr	r0, [pc, #280]	; (8003ab4 <HAL_RCC_OscConfig+0x2e4>)
 800399a:	f7fd fea9 	bl	80016f0 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800399e:	4b46      	ldr	r3, [pc, #280]	; (8003ab8 <HAL_RCC_OscConfig+0x2e8>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f003 030c 	and.w	r3, r3, #12
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00b      	beq.n	80039c2 <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80039aa:	4b43      	ldr	r3, [pc, #268]	; (8003ab8 <HAL_RCC_OscConfig+0x2e8>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f003 030c 	and.w	r3, r3, #12
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	d11c      	bne.n	80039f0 <HAL_RCC_OscConfig+0x220>
 80039b6:	4b40      	ldr	r3, [pc, #256]	; (8003ab8 <HAL_RCC_OscConfig+0x2e8>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d116      	bne.n	80039f0 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039c2:	4b3d      	ldr	r3, [pc, #244]	; (8003ab8 <HAL_RCC_OscConfig+0x2e8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d005      	beq.n	80039da <HAL_RCC_OscConfig+0x20a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d001      	beq.n	80039da <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e260      	b.n	8003e9c <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039da:	4b37      	ldr	r3, [pc, #220]	; (8003ab8 <HAL_RCC_OscConfig+0x2e8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	4933      	ldr	r1, [pc, #204]	; (8003ab8 <HAL_RCC_OscConfig+0x2e8>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ee:	e03a      	b.n	8003a66 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d020      	beq.n	8003a3a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039f8:	4b30      	ldr	r3, [pc, #192]	; (8003abc <HAL_RCC_OscConfig+0x2ec>)
 80039fa:	2201      	movs	r2, #1
 80039fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fe:	f7fe fb27 	bl	8002050 <HAL_GetTick>
 8003a02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a04:	e008      	b.n	8003a18 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a06:	f7fe fb23 	bl	8002050 <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d901      	bls.n	8003a18 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e241      	b.n	8003e9c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a18:	4b27      	ldr	r3, [pc, #156]	; (8003ab8 <HAL_RCC_OscConfig+0x2e8>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0f0      	beq.n	8003a06 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a24:	4b24      	ldr	r3, [pc, #144]	; (8003ab8 <HAL_RCC_OscConfig+0x2e8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	4921      	ldr	r1, [pc, #132]	; (8003ab8 <HAL_RCC_OscConfig+0x2e8>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	600b      	str	r3, [r1, #0]
 8003a38:	e015      	b.n	8003a66 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a3a:	4b20      	ldr	r3, [pc, #128]	; (8003abc <HAL_RCC_OscConfig+0x2ec>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a40:	f7fe fb06 	bl	8002050 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a48:	f7fe fb02 	bl	8002050 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e220      	b.n	8003e9c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a5a:	4b17      	ldr	r3, [pc, #92]	; (8003ab8 <HAL_RCC_OscConfig+0x2e8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f0      	bne.n	8003a48 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d048      	beq.n	8003b04 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d008      	beq.n	8003a8c <HAL_RCC_OscConfig+0x2bc>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d004      	beq.n	8003a8c <HAL_RCC_OscConfig+0x2bc>
 8003a82:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8003a86:	480b      	ldr	r0, [pc, #44]	; (8003ab4 <HAL_RCC_OscConfig+0x2e4>)
 8003a88:	f7fd fe32 	bl	80016f0 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d021      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a94:	4b0a      	ldr	r3, [pc, #40]	; (8003ac0 <HAL_RCC_OscConfig+0x2f0>)
 8003a96:	2201      	movs	r2, #1
 8003a98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a9a:	f7fe fad9 	bl	8002050 <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aa0:	e010      	b.n	8003ac4 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aa2:	f7fe fad5 	bl	8002050 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d909      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e1f3      	b.n	8003e9c <HAL_RCC_OscConfig+0x6cc>
 8003ab4:	0800c320 	.word	0x0800c320
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	42420000 	.word	0x42420000
 8003ac0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac4:	4b67      	ldr	r3, [pc, #412]	; (8003c64 <HAL_RCC_OscConfig+0x494>)
 8003ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0e8      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ad0:	2001      	movs	r0, #1
 8003ad2:	f000 fc0f 	bl	80042f4 <RCC_Delay>
 8003ad6:	e015      	b.n	8003b04 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ad8:	4b63      	ldr	r3, [pc, #396]	; (8003c68 <HAL_RCC_OscConfig+0x498>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ade:	f7fe fab7 	bl	8002050 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ae6:	f7fe fab3 	bl	8002050 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e1d1      	b.n	8003e9c <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af8:	4b5a      	ldr	r3, [pc, #360]	; (8003c64 <HAL_RCC_OscConfig+0x494>)
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1f0      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 80c0 	beq.w	8003c92 <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b12:	2300      	movs	r3, #0
 8003b14:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00c      	beq.n	8003b38 <HAL_RCC_OscConfig+0x368>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d008      	beq.n	8003b38 <HAL_RCC_OscConfig+0x368>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	2b05      	cmp	r3, #5
 8003b2c:	d004      	beq.n	8003b38 <HAL_RCC_OscConfig+0x368>
 8003b2e:	f240 2111 	movw	r1, #529	; 0x211
 8003b32:	484e      	ldr	r0, [pc, #312]	; (8003c6c <HAL_RCC_OscConfig+0x49c>)
 8003b34:	f7fd fddc 	bl	80016f0 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b38:	4b4a      	ldr	r3, [pc, #296]	; (8003c64 <HAL_RCC_OscConfig+0x494>)
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10d      	bne.n	8003b60 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b44:	4b47      	ldr	r3, [pc, #284]	; (8003c64 <HAL_RCC_OscConfig+0x494>)
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	4a46      	ldr	r2, [pc, #280]	; (8003c64 <HAL_RCC_OscConfig+0x494>)
 8003b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b4e:	61d3      	str	r3, [r2, #28]
 8003b50:	4b44      	ldr	r3, [pc, #272]	; (8003c64 <HAL_RCC_OscConfig+0x494>)
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b58:	60bb      	str	r3, [r7, #8]
 8003b5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b60:	4b43      	ldr	r3, [pc, #268]	; (8003c70 <HAL_RCC_OscConfig+0x4a0>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d118      	bne.n	8003b9e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b6c:	4b40      	ldr	r3, [pc, #256]	; (8003c70 <HAL_RCC_OscConfig+0x4a0>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a3f      	ldr	r2, [pc, #252]	; (8003c70 <HAL_RCC_OscConfig+0x4a0>)
 8003b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b78:	f7fe fa6a 	bl	8002050 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b80:	f7fe fa66 	bl	8002050 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b64      	cmp	r3, #100	; 0x64
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e184      	b.n	8003e9c <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b92:	4b37      	ldr	r3, [pc, #220]	; (8003c70 <HAL_RCC_OscConfig+0x4a0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0f0      	beq.n	8003b80 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d106      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x3e4>
 8003ba6:	4b2f      	ldr	r3, [pc, #188]	; (8003c64 <HAL_RCC_OscConfig+0x494>)
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	4a2e      	ldr	r2, [pc, #184]	; (8003c64 <HAL_RCC_OscConfig+0x494>)
 8003bac:	f043 0301 	orr.w	r3, r3, #1
 8003bb0:	6213      	str	r3, [r2, #32]
 8003bb2:	e02d      	b.n	8003c10 <HAL_RCC_OscConfig+0x440>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10c      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x406>
 8003bbc:	4b29      	ldr	r3, [pc, #164]	; (8003c64 <HAL_RCC_OscConfig+0x494>)
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	4a28      	ldr	r2, [pc, #160]	; (8003c64 <HAL_RCC_OscConfig+0x494>)
 8003bc2:	f023 0301 	bic.w	r3, r3, #1
 8003bc6:	6213      	str	r3, [r2, #32]
 8003bc8:	4b26      	ldr	r3, [pc, #152]	; (8003c64 <HAL_RCC_OscConfig+0x494>)
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	4a25      	ldr	r2, [pc, #148]	; (8003c64 <HAL_RCC_OscConfig+0x494>)
 8003bce:	f023 0304 	bic.w	r3, r3, #4
 8003bd2:	6213      	str	r3, [r2, #32]
 8003bd4:	e01c      	b.n	8003c10 <HAL_RCC_OscConfig+0x440>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	2b05      	cmp	r3, #5
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x428>
 8003bde:	4b21      	ldr	r3, [pc, #132]	; (8003c64 <HAL_RCC_OscConfig+0x494>)
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	4a20      	ldr	r2, [pc, #128]	; (8003c64 <HAL_RCC_OscConfig+0x494>)
 8003be4:	f043 0304 	orr.w	r3, r3, #4
 8003be8:	6213      	str	r3, [r2, #32]
 8003bea:	4b1e      	ldr	r3, [pc, #120]	; (8003c64 <HAL_RCC_OscConfig+0x494>)
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	4a1d      	ldr	r2, [pc, #116]	; (8003c64 <HAL_RCC_OscConfig+0x494>)
 8003bf0:	f043 0301 	orr.w	r3, r3, #1
 8003bf4:	6213      	str	r3, [r2, #32]
 8003bf6:	e00b      	b.n	8003c10 <HAL_RCC_OscConfig+0x440>
 8003bf8:	4b1a      	ldr	r3, [pc, #104]	; (8003c64 <HAL_RCC_OscConfig+0x494>)
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	4a19      	ldr	r2, [pc, #100]	; (8003c64 <HAL_RCC_OscConfig+0x494>)
 8003bfe:	f023 0301 	bic.w	r3, r3, #1
 8003c02:	6213      	str	r3, [r2, #32]
 8003c04:	4b17      	ldr	r3, [pc, #92]	; (8003c64 <HAL_RCC_OscConfig+0x494>)
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	4a16      	ldr	r2, [pc, #88]	; (8003c64 <HAL_RCC_OscConfig+0x494>)
 8003c0a:	f023 0304 	bic.w	r3, r3, #4
 8003c0e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d015      	beq.n	8003c44 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c18:	f7fe fa1a 	bl	8002050 <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c1e:	e00a      	b.n	8003c36 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c20:	f7fe fa16 	bl	8002050 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e132      	b.n	8003e9c <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c36:	4b0b      	ldr	r3, [pc, #44]	; (8003c64 <HAL_RCC_OscConfig+0x494>)
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0ee      	beq.n	8003c20 <HAL_RCC_OscConfig+0x450>
 8003c42:	e01d      	b.n	8003c80 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c44:	f7fe fa04 	bl	8002050 <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c4a:	e013      	b.n	8003c74 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c4c:	f7fe fa00 	bl	8002050 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d90a      	bls.n	8003c74 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e11c      	b.n	8003e9c <HAL_RCC_OscConfig+0x6cc>
 8003c62:	bf00      	nop
 8003c64:	40021000 	.word	0x40021000
 8003c68:	42420480 	.word	0x42420480
 8003c6c:	0800c320 	.word	0x0800c320
 8003c70:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c74:	4b8b      	ldr	r3, [pc, #556]	; (8003ea4 <HAL_RCC_OscConfig+0x6d4>)
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1e5      	bne.n	8003c4c <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c80:	7dfb      	ldrb	r3, [r7, #23]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d105      	bne.n	8003c92 <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c86:	4b87      	ldr	r3, [pc, #540]	; (8003ea4 <HAL_RCC_OscConfig+0x6d4>)
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	4a86      	ldr	r2, [pc, #536]	; (8003ea4 <HAL_RCC_OscConfig+0x6d4>)
 8003c8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c90:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69db      	ldr	r3, [r3, #28]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00c      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x4e4>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d008      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x4e4>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d004      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x4e4>
 8003caa:	f240 21af 	movw	r1, #687	; 0x2af
 8003cae:	487e      	ldr	r0, [pc, #504]	; (8003ea8 <HAL_RCC_OscConfig+0x6d8>)
 8003cb0:	f7fd fd1e 	bl	80016f0 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	69db      	ldr	r3, [r3, #28]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 80ee 	beq.w	8003e9a <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cbe:	4b79      	ldr	r3, [pc, #484]	; (8003ea4 <HAL_RCC_OscConfig+0x6d4>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f003 030c 	and.w	r3, r3, #12
 8003cc6:	2b08      	cmp	r3, #8
 8003cc8:	f000 80ce 	beq.w	8003e68 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	f040 80b2 	bne.w	8003e3a <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d009      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x522>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce6:	d004      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x522>
 8003ce8:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8003cec:	486e      	ldr	r0, [pc, #440]	; (8003ea8 <HAL_RCC_OscConfig+0x6d8>)
 8003cee:	f7fd fcff 	bl	80016f0 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d04a      	beq.n	8003d90 <HAL_RCC_OscConfig+0x5c0>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d02:	d045      	beq.n	8003d90 <HAL_RCC_OscConfig+0x5c0>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d0c:	d040      	beq.n	8003d90 <HAL_RCC_OscConfig+0x5c0>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d16:	d03b      	beq.n	8003d90 <HAL_RCC_OscConfig+0x5c0>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d20:	d036      	beq.n	8003d90 <HAL_RCC_OscConfig+0x5c0>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003d2a:	d031      	beq.n	8003d90 <HAL_RCC_OscConfig+0x5c0>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003d34:	d02c      	beq.n	8003d90 <HAL_RCC_OscConfig+0x5c0>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003d3e:	d027      	beq.n	8003d90 <HAL_RCC_OscConfig+0x5c0>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d48:	d022      	beq.n	8003d90 <HAL_RCC_OscConfig+0x5c0>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003d52:	d01d      	beq.n	8003d90 <HAL_RCC_OscConfig+0x5c0>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003d5c:	d018      	beq.n	8003d90 <HAL_RCC_OscConfig+0x5c0>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003d66:	d013      	beq.n	8003d90 <HAL_RCC_OscConfig+0x5c0>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d70:	d00e      	beq.n	8003d90 <HAL_RCC_OscConfig+0x5c0>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8003d7a:	d009      	beq.n	8003d90 <HAL_RCC_OscConfig+0x5c0>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8003d84:	d004      	beq.n	8003d90 <HAL_RCC_OscConfig+0x5c0>
 8003d86:	f240 21b9 	movw	r1, #697	; 0x2b9
 8003d8a:	4847      	ldr	r0, [pc, #284]	; (8003ea8 <HAL_RCC_OscConfig+0x6d8>)
 8003d8c:	f7fd fcb0 	bl	80016f0 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d90:	4b46      	ldr	r3, [pc, #280]	; (8003eac <HAL_RCC_OscConfig+0x6dc>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d96:	f7fe f95b 	bl	8002050 <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d9c:	e008      	b.n	8003db0 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d9e:	f7fe f957 	bl	8002050 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e075      	b.n	8003e9c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003db0:	4b3c      	ldr	r3, [pc, #240]	; (8003ea4 <HAL_RCC_OscConfig+0x6d4>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1f0      	bne.n	8003d9e <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dc4:	d116      	bne.n	8003df4 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d009      	beq.n	8003de2 <HAL_RCC_OscConfig+0x612>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003dd6:	d004      	beq.n	8003de2 <HAL_RCC_OscConfig+0x612>
 8003dd8:	f240 21cf 	movw	r1, #719	; 0x2cf
 8003ddc:	4832      	ldr	r0, [pc, #200]	; (8003ea8 <HAL_RCC_OscConfig+0x6d8>)
 8003dde:	f7fd fc87 	bl	80016f0 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003de2:	4b30      	ldr	r3, [pc, #192]	; (8003ea4 <HAL_RCC_OscConfig+0x6d4>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	492d      	ldr	r1, [pc, #180]	; (8003ea4 <HAL_RCC_OscConfig+0x6d4>)
 8003df0:	4313      	orrs	r3, r2
 8003df2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003df4:	4b2b      	ldr	r3, [pc, #172]	; (8003ea4 <HAL_RCC_OscConfig+0x6d4>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a19      	ldr	r1, [r3, #32]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	430b      	orrs	r3, r1
 8003e06:	4927      	ldr	r1, [pc, #156]	; (8003ea4 <HAL_RCC_OscConfig+0x6d4>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e0c:	4b27      	ldr	r3, [pc, #156]	; (8003eac <HAL_RCC_OscConfig+0x6dc>)
 8003e0e:	2201      	movs	r2, #1
 8003e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e12:	f7fe f91d 	bl	8002050 <HAL_GetTick>
 8003e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e18:	e008      	b.n	8003e2c <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e1a:	f7fe f919 	bl	8002050 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e037      	b.n	8003e9c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e2c:	4b1d      	ldr	r3, [pc, #116]	; (8003ea4 <HAL_RCC_OscConfig+0x6d4>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0f0      	beq.n	8003e1a <HAL_RCC_OscConfig+0x64a>
 8003e38:	e02f      	b.n	8003e9a <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e3a:	4b1c      	ldr	r3, [pc, #112]	; (8003eac <HAL_RCC_OscConfig+0x6dc>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e40:	f7fe f906 	bl	8002050 <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e48:	f7fe f902 	bl	8002050 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e020      	b.n	8003e9c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e5a:	4b12      	ldr	r3, [pc, #72]	; (8003ea4 <HAL_RCC_OscConfig+0x6d4>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1f0      	bne.n	8003e48 <HAL_RCC_OscConfig+0x678>
 8003e66:	e018      	b.n	8003e9a <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	69db      	ldr	r3, [r3, #28]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e013      	b.n	8003e9c <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e74:	4b0b      	ldr	r3, [pc, #44]	; (8003ea4 <HAL_RCC_OscConfig+0x6d4>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d106      	bne.n	8003e96 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d001      	beq.n	8003e9a <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e000      	b.n	8003e9c <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3718      	adds	r7, #24
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	0800c320 	.word	0x0800c320
 8003eac:	42420060 	.word	0x42420060

08003eb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e176      	b.n	80041b2 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d116      	bne.n	8003efe <HAL_RCC_ClockConfig+0x4e>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d110      	bne.n	8003efe <HAL_RCC_ClockConfig+0x4e>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10a      	bne.n	8003efe <HAL_RCC_ClockConfig+0x4e>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0308 	and.w	r3, r3, #8
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d104      	bne.n	8003efe <HAL_RCC_ClockConfig+0x4e>
 8003ef4:	f44f 714e 	mov.w	r1, #824	; 0x338
 8003ef8:	4874      	ldr	r0, [pc, #464]	; (80040cc <HAL_RCC_ClockConfig+0x21c>)
 8003efa:	f7fd fbf9 	bl	80016f0 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00a      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x6a>
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d007      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x6a>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d004      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x6a>
 8003f10:	f240 3139 	movw	r1, #825	; 0x339
 8003f14:	486d      	ldr	r0, [pc, #436]	; (80040cc <HAL_RCC_ClockConfig+0x21c>)
 8003f16:	f7fd fbeb 	bl	80016f0 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f1a:	4b6d      	ldr	r3, [pc, #436]	; (80040d0 <HAL_RCC_ClockConfig+0x220>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d910      	bls.n	8003f4a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f28:	4b69      	ldr	r3, [pc, #420]	; (80040d0 <HAL_RCC_ClockConfig+0x220>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f023 0207 	bic.w	r2, r3, #7
 8003f30:	4967      	ldr	r1, [pc, #412]	; (80040d0 <HAL_RCC_ClockConfig+0x220>)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f38:	4b65      	ldr	r3, [pc, #404]	; (80040d0 <HAL_RCC_ClockConfig+0x220>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0307 	and.w	r3, r3, #7
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d001      	beq.n	8003f4a <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e133      	b.n	80041b2 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d049      	beq.n	8003fea <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0304 	and.w	r3, r3, #4
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d005      	beq.n	8003f6e <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f62:	4b5c      	ldr	r3, [pc, #368]	; (80040d4 <HAL_RCC_ClockConfig+0x224>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	4a5b      	ldr	r2, [pc, #364]	; (80040d4 <HAL_RCC_ClockConfig+0x224>)
 8003f68:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f6c:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0308 	and.w	r3, r3, #8
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d005      	beq.n	8003f86 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f7a:	4b56      	ldr	r3, [pc, #344]	; (80040d4 <HAL_RCC_ClockConfig+0x224>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	4a55      	ldr	r2, [pc, #340]	; (80040d4 <HAL_RCC_ClockConfig+0x224>)
 8003f80:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003f84:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d024      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x128>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	2b80      	cmp	r3, #128	; 0x80
 8003f94:	d020      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x128>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	2b90      	cmp	r3, #144	; 0x90
 8003f9c:	d01c      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x128>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	2ba0      	cmp	r3, #160	; 0xa0
 8003fa4:	d018      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x128>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	2bb0      	cmp	r3, #176	; 0xb0
 8003fac:	d014      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x128>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	2bc0      	cmp	r3, #192	; 0xc0
 8003fb4:	d010      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x128>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2bd0      	cmp	r3, #208	; 0xd0
 8003fbc:	d00c      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x128>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	2be0      	cmp	r3, #224	; 0xe0
 8003fc4:	d008      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x128>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	2bf0      	cmp	r3, #240	; 0xf0
 8003fcc:	d004      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x128>
 8003fce:	f240 315f 	movw	r1, #863	; 0x35f
 8003fd2:	483e      	ldr	r0, [pc, #248]	; (80040cc <HAL_RCC_ClockConfig+0x21c>)
 8003fd4:	f7fd fb8c 	bl	80016f0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fd8:	4b3e      	ldr	r3, [pc, #248]	; (80040d4 <HAL_RCC_ClockConfig+0x224>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	493b      	ldr	r1, [pc, #236]	; (80040d4 <HAL_RCC_ClockConfig+0x224>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d051      	beq.n	800409a <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00c      	beq.n	8004018 <HAL_RCC_ClockConfig+0x168>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d008      	beq.n	8004018 <HAL_RCC_ClockConfig+0x168>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d004      	beq.n	8004018 <HAL_RCC_ClockConfig+0x168>
 800400e:	f240 3166 	movw	r1, #870	; 0x366
 8004012:	482e      	ldr	r0, [pc, #184]	; (80040cc <HAL_RCC_ClockConfig+0x21c>)
 8004014:	f7fd fb6c 	bl	80016f0 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d107      	bne.n	8004030 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004020:	4b2c      	ldr	r3, [pc, #176]	; (80040d4 <HAL_RCC_ClockConfig+0x224>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d115      	bne.n	8004058 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e0c0      	b.n	80041b2 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2b02      	cmp	r3, #2
 8004036:	d107      	bne.n	8004048 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004038:	4b26      	ldr	r3, [pc, #152]	; (80040d4 <HAL_RCC_ClockConfig+0x224>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d109      	bne.n	8004058 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e0b4      	b.n	80041b2 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004048:	4b22      	ldr	r3, [pc, #136]	; (80040d4 <HAL_RCC_ClockConfig+0x224>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e0ac      	b.n	80041b2 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004058:	4b1e      	ldr	r3, [pc, #120]	; (80040d4 <HAL_RCC_ClockConfig+0x224>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f023 0203 	bic.w	r2, r3, #3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	491b      	ldr	r1, [pc, #108]	; (80040d4 <HAL_RCC_ClockConfig+0x224>)
 8004066:	4313      	orrs	r3, r2
 8004068:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800406a:	f7fd fff1 	bl	8002050 <HAL_GetTick>
 800406e:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004070:	e00a      	b.n	8004088 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004072:	f7fd ffed 	bl	8002050 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004080:	4293      	cmp	r3, r2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e094      	b.n	80041b2 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004088:	4b12      	ldr	r3, [pc, #72]	; (80040d4 <HAL_RCC_ClockConfig+0x224>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f003 020c 	and.w	r2, r3, #12
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	429a      	cmp	r2, r3
 8004098:	d1eb      	bne.n	8004072 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800409a:	4b0d      	ldr	r3, [pc, #52]	; (80040d0 <HAL_RCC_ClockConfig+0x220>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0307 	and.w	r3, r3, #7
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d217      	bcs.n	80040d8 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a8:	4b09      	ldr	r3, [pc, #36]	; (80040d0 <HAL_RCC_ClockConfig+0x220>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f023 0207 	bic.w	r2, r3, #7
 80040b0:	4907      	ldr	r1, [pc, #28]	; (80040d0 <HAL_RCC_ClockConfig+0x220>)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b8:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <HAL_RCC_ClockConfig+0x220>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d008      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e073      	b.n	80041b2 <HAL_RCC_ClockConfig+0x302>
 80040ca:	bf00      	nop
 80040cc:	0800c320 	.word	0x0800c320
 80040d0:	40022000 	.word	0x40022000
 80040d4:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d025      	beq.n	8004130 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d018      	beq.n	800411e <HAL_RCC_ClockConfig+0x26e>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040f4:	d013      	beq.n	800411e <HAL_RCC_ClockConfig+0x26e>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80040fe:	d00e      	beq.n	800411e <HAL_RCC_ClockConfig+0x26e>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004108:	d009      	beq.n	800411e <HAL_RCC_ClockConfig+0x26e>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004112:	d004      	beq.n	800411e <HAL_RCC_ClockConfig+0x26e>
 8004114:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8004118:	4828      	ldr	r0, [pc, #160]	; (80041bc <HAL_RCC_ClockConfig+0x30c>)
 800411a:	f7fd fae9 	bl	80016f0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800411e:	4b28      	ldr	r3, [pc, #160]	; (80041c0 <HAL_RCC_ClockConfig+0x310>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	4925      	ldr	r1, [pc, #148]	; (80041c0 <HAL_RCC_ClockConfig+0x310>)
 800412c:	4313      	orrs	r3, r2
 800412e:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0308 	and.w	r3, r3, #8
 8004138:	2b00      	cmp	r3, #0
 800413a:	d026      	beq.n	800418a <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d018      	beq.n	8004176 <HAL_RCC_ClockConfig+0x2c6>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800414c:	d013      	beq.n	8004176 <HAL_RCC_ClockConfig+0x2c6>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004156:	d00e      	beq.n	8004176 <HAL_RCC_ClockConfig+0x2c6>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004160:	d009      	beq.n	8004176 <HAL_RCC_ClockConfig+0x2c6>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800416a:	d004      	beq.n	8004176 <HAL_RCC_ClockConfig+0x2c6>
 800416c:	f240 31ab 	movw	r1, #939	; 0x3ab
 8004170:	4812      	ldr	r0, [pc, #72]	; (80041bc <HAL_RCC_ClockConfig+0x30c>)
 8004172:	f7fd fabd 	bl	80016f0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004176:	4b12      	ldr	r3, [pc, #72]	; (80041c0 <HAL_RCC_ClockConfig+0x310>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	490e      	ldr	r1, [pc, #56]	; (80041c0 <HAL_RCC_ClockConfig+0x310>)
 8004186:	4313      	orrs	r3, r2
 8004188:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800418a:	f000 f821 	bl	80041d0 <HAL_RCC_GetSysClockFreq>
 800418e:	4602      	mov	r2, r0
 8004190:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <HAL_RCC_ClockConfig+0x310>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	091b      	lsrs	r3, r3, #4
 8004196:	f003 030f 	and.w	r3, r3, #15
 800419a:	490a      	ldr	r1, [pc, #40]	; (80041c4 <HAL_RCC_ClockConfig+0x314>)
 800419c:	5ccb      	ldrb	r3, [r1, r3]
 800419e:	fa22 f303 	lsr.w	r3, r2, r3
 80041a2:	4a09      	ldr	r2, [pc, #36]	; (80041c8 <HAL_RCC_ClockConfig+0x318>)
 80041a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041a6:	4b09      	ldr	r3, [pc, #36]	; (80041cc <HAL_RCC_ClockConfig+0x31c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fd ff0e 	bl	8001fcc <HAL_InitTick>

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	0800c320 	.word	0x0800c320
 80041c0:	40021000 	.word	0x40021000
 80041c4:	0800ccf0 	.word	0x0800ccf0
 80041c8:	20000000 	.word	0x20000000
 80041cc:	20000004 	.word	0x20000004

080041d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041d0:	b490      	push	{r4, r7}
 80041d2:	b08a      	sub	sp, #40	; 0x28
 80041d4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80041d6:	4b2a      	ldr	r3, [pc, #168]	; (8004280 <HAL_RCC_GetSysClockFreq+0xb0>)
 80041d8:	1d3c      	adds	r4, r7, #4
 80041da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80041e0:	f240 2301 	movw	r3, #513	; 0x201
 80041e4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80041e6:	2300      	movs	r3, #0
 80041e8:	61fb      	str	r3, [r7, #28]
 80041ea:	2300      	movs	r3, #0
 80041ec:	61bb      	str	r3, [r7, #24]
 80041ee:	2300      	movs	r3, #0
 80041f0:	627b      	str	r3, [r7, #36]	; 0x24
 80041f2:	2300      	movs	r3, #0
 80041f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80041fa:	4b22      	ldr	r3, [pc, #136]	; (8004284 <HAL_RCC_GetSysClockFreq+0xb4>)
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	f003 030c 	and.w	r3, r3, #12
 8004206:	2b04      	cmp	r3, #4
 8004208:	d002      	beq.n	8004210 <HAL_RCC_GetSysClockFreq+0x40>
 800420a:	2b08      	cmp	r3, #8
 800420c:	d003      	beq.n	8004216 <HAL_RCC_GetSysClockFreq+0x46>
 800420e:	e02d      	b.n	800426c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004210:	4b1d      	ldr	r3, [pc, #116]	; (8004288 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004212:	623b      	str	r3, [r7, #32]
      break;
 8004214:	e02d      	b.n	8004272 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	0c9b      	lsrs	r3, r3, #18
 800421a:	f003 030f 	and.w	r3, r3, #15
 800421e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004222:	4413      	add	r3, r2
 8004224:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004228:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d013      	beq.n	800425c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004234:	4b13      	ldr	r3, [pc, #76]	; (8004284 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	0c5b      	lsrs	r3, r3, #17
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004242:	4413      	add	r3, r2
 8004244:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004248:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	4a0e      	ldr	r2, [pc, #56]	; (8004288 <HAL_RCC_GetSysClockFreq+0xb8>)
 800424e:	fb02 f203 	mul.w	r2, r2, r3
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	fbb2 f3f3 	udiv	r3, r2, r3
 8004258:	627b      	str	r3, [r7, #36]	; 0x24
 800425a:	e004      	b.n	8004266 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	4a0b      	ldr	r2, [pc, #44]	; (800428c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004260:	fb02 f303 	mul.w	r3, r2, r3
 8004264:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	623b      	str	r3, [r7, #32]
      break;
 800426a:	e002      	b.n	8004272 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800426c:	4b06      	ldr	r3, [pc, #24]	; (8004288 <HAL_RCC_GetSysClockFreq+0xb8>)
 800426e:	623b      	str	r3, [r7, #32]
      break;
 8004270:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004272:	6a3b      	ldr	r3, [r7, #32]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3728      	adds	r7, #40	; 0x28
 8004278:	46bd      	mov	sp, r7
 800427a:	bc90      	pop	{r4, r7}
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	0800c358 	.word	0x0800c358
 8004284:	40021000 	.word	0x40021000
 8004288:	007a1200 	.word	0x007a1200
 800428c:	003d0900 	.word	0x003d0900

08004290 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004294:	4b02      	ldr	r3, [pc, #8]	; (80042a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004296:	681b      	ldr	r3, [r3, #0]
}
 8004298:	4618      	mov	r0, r3
 800429a:	46bd      	mov	sp, r7
 800429c:	bc80      	pop	{r7}
 800429e:	4770      	bx	lr
 80042a0:	20000000 	.word	0x20000000

080042a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042a8:	f7ff fff2 	bl	8004290 <HAL_RCC_GetHCLKFreq>
 80042ac:	4602      	mov	r2, r0
 80042ae:	4b05      	ldr	r3, [pc, #20]	; (80042c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	0a1b      	lsrs	r3, r3, #8
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	4903      	ldr	r1, [pc, #12]	; (80042c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ba:	5ccb      	ldrb	r3, [r1, r3]
 80042bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40021000 	.word	0x40021000
 80042c8:	0800cd00 	.word	0x0800cd00

080042cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042d0:	f7ff ffde 	bl	8004290 <HAL_RCC_GetHCLKFreq>
 80042d4:	4602      	mov	r2, r0
 80042d6:	4b05      	ldr	r3, [pc, #20]	; (80042ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	0adb      	lsrs	r3, r3, #11
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	4903      	ldr	r1, [pc, #12]	; (80042f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042e2:	5ccb      	ldrb	r3, [r1, r3]
 80042e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	40021000 	.word	0x40021000
 80042f0:	0800cd00 	.word	0x0800cd00

080042f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80042fc:	4b0a      	ldr	r3, [pc, #40]	; (8004328 <RCC_Delay+0x34>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a0a      	ldr	r2, [pc, #40]	; (800432c <RCC_Delay+0x38>)
 8004302:	fba2 2303 	umull	r2, r3, r2, r3
 8004306:	0a5b      	lsrs	r3, r3, #9
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	fb02 f303 	mul.w	r3, r2, r3
 800430e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004310:	bf00      	nop
  }
  while (Delay --);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	1e5a      	subs	r2, r3, #1
 8004316:	60fa      	str	r2, [r7, #12]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1f9      	bne.n	8004310 <RCC_Delay+0x1c>
}
 800431c:	bf00      	nop
 800431e:	bf00      	nop
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	bc80      	pop	{r7}
 8004326:	4770      	bx	lr
 8004328:	20000000 	.word	0x20000000
 800432c:	10624dd3 	.word	0x10624dd3

08004330 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004338:	2300      	movs	r3, #0
 800433a:	613b      	str	r3, [r7, #16]
 800433c:	2300      	movs	r3, #0
 800433e:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	2b00      	cmp	r3, #0
 800434a:	d11b      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d115      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0304 	and.w	r3, r3, #4
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10f      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0308 	and.w	r3, r3, #8
 800436c:	2b00      	cmp	r3, #0
 800436e:	d109      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0310 	and.w	r3, r3, #16
 8004378:	2b00      	cmp	r3, #0
 800437a:	d103      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800437c:	216c      	movs	r1, #108	; 0x6c
 800437e:	4873      	ldr	r0, [pc, #460]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004380:	f7fd f9b6 	bl	80016f0 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 8095 	beq.w	80044bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    FlagStatus pwrclkchanged = RESET;
 8004392:	2300      	movs	r3, #0
 8004394:	75fb      	strb	r3, [r7, #23]

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d012      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x94>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043a6:	d00d      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x94>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043b0:	d008      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x94>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043ba:	d003      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x94>
 80043bc:	2174      	movs	r1, #116	; 0x74
 80043be:	4863      	ldr	r0, [pc, #396]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80043c0:	f7fd f996 	bl	80016f0 <assert_failed>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043c4:	4b62      	ldr	r3, [pc, #392]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10d      	bne.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043d0:	4b5f      	ldr	r3, [pc, #380]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	4a5e      	ldr	r2, [pc, #376]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80043d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043da:	61d3      	str	r3, [r2, #28]
 80043dc:	4b5c      	ldr	r3, [pc, #368]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e4:	60bb      	str	r3, [r7, #8]
 80043e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043e8:	2301      	movs	r3, #1
 80043ea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ec:	4b59      	ldr	r3, [pc, #356]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d118      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xfa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043f8:	4b56      	ldr	r3, [pc, #344]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a55      	ldr	r2, [pc, #340]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80043fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004402:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004404:	f7fd fe24 	bl	8002050 <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800440a:	e008      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800440c:	f7fd fe20 	bl	8002050 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b64      	cmp	r3, #100	; 0x64
 8004418:	d901      	bls.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xee>
        {
          return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e092      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x214>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800441e:	4b4d      	ldr	r3, [pc, #308]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0f0      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xdc>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800442a:	4b49      	ldr	r3, [pc, #292]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004432:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d02e      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	429a      	cmp	r2, r3
 8004446:	d027      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004448:	4b41      	ldr	r3, [pc, #260]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004450:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004452:	4b41      	ldr	r3, [pc, #260]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004454:	2201      	movs	r2, #1
 8004456:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004458:	4b3f      	ldr	r3, [pc, #252]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800445a:	2200      	movs	r2, #0
 800445c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800445e:	4a3c      	ldr	r2, [pc, #240]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d014      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800446e:	f7fd fdef 	bl	8002050 <HAL_GetTick>
 8004472:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004474:	e00a      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x15c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004476:	f7fd fdeb 	bl	8002050 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	f241 3288 	movw	r2, #5000	; 0x1388
 8004484:	4293      	cmp	r3, r2
 8004486:	d901      	bls.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x15c>
          {
            return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e05b      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x214>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800448c:	4b30      	ldr	r3, [pc, #192]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0ee      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x146>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004498:	4b2d      	ldr	r3, [pc, #180]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	492a      	ldr	r1, [pc, #168]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80044aa:	7dfb      	ldrb	r3, [r7, #23]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d105      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044b0:	4b27      	ldr	r3, [pc, #156]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	4a26      	ldr	r2, [pc, #152]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80044b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0302 	and.w	r3, r3, #2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d01f      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d012      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044d8:	d00d      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044e2:	d008      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80044ec:	d003      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80044ee:	21b9      	movs	r1, #185	; 0xb9
 80044f0:	4816      	ldr	r0, [pc, #88]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80044f2:	f7fd f8fd 	bl	80016f0 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044f6:	4b16      	ldr	r3, [pc, #88]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	4913      	ldr	r1, [pc, #76]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004504:	4313      	orrs	r3, r2
 8004506:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0310 	and.w	r3, r3, #16
 8004510:	2b00      	cmp	r3, #0
 8004512:	d016      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800451c:	d008      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d004      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004526:	f240 1115 	movw	r1, #277	; 0x115
 800452a:	4808      	ldr	r0, [pc, #32]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800452c:	f7fd f8e0 	bl	80016f0 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004530:	4b07      	ldr	r3, [pc, #28]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	4904      	ldr	r1, [pc, #16]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800453e:	4313      	orrs	r3, r2
 8004540:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3718      	adds	r7, #24
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	0800c368 	.word	0x0800c368
 8004550:	40021000 	.word	0x40021000
 8004554:	40007000 	.word	0x40007000
 8004558:	42420440 	.word	0x42420440

0800455c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800455c:	b590      	push	{r4, r7, lr}
 800455e:	b08d      	sub	sp, #52	; 0x34
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004564:	4b7a      	ldr	r3, [pc, #488]	; (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>)
 8004566:	f107 040c 	add.w	r4, r7, #12
 800456a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800456c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004570:	f240 2301 	movw	r3, #513	; 0x201
 8004574:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004576:	2300      	movs	r3, #0
 8004578:	627b      	str	r3, [r7, #36]	; 0x24
 800457a:	2300      	movs	r3, #0
 800457c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800457e:	2300      	movs	r3, #0
 8004580:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004582:	2300      	movs	r3, #0
 8004584:	61fb      	str	r3, [r7, #28]
 8004586:	2300      	movs	r3, #0
 8004588:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b00      	cmp	r3, #0
 8004592:	d118      	bne.n	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d113      	bne.n	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10e      	bne.n	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f003 0308 	and.w	r3, r3, #8
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d109      	bne.n	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f003 0310 	and.w	r3, r3, #16
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d104      	bne.n	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 80045bc:	f44f 71cb 	mov.w	r1, #406	; 0x196
 80045c0:	4864      	ldr	r0, [pc, #400]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>)
 80045c2:	f7fd f895 	bl	80016f0 <assert_failed>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	3b01      	subs	r3, #1
 80045ca:	2b0f      	cmp	r3, #15
 80045cc:	f200 80b6 	bhi.w	800473c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80045d0:	a201      	add	r2, pc, #4	; (adr r2, 80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>)
 80045d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d6:	bf00      	nop
 80045d8:	080046bb 	.word	0x080046bb
 80045dc:	08004721 	.word	0x08004721
 80045e0:	0800473d 	.word	0x0800473d
 80045e4:	080046ab 	.word	0x080046ab
 80045e8:	0800473d 	.word	0x0800473d
 80045ec:	0800473d 	.word	0x0800473d
 80045f0:	0800473d 	.word	0x0800473d
 80045f4:	080046b3 	.word	0x080046b3
 80045f8:	0800473d 	.word	0x0800473d
 80045fc:	0800473d 	.word	0x0800473d
 8004600:	0800473d 	.word	0x0800473d
 8004604:	0800473d 	.word	0x0800473d
 8004608:	0800473d 	.word	0x0800473d
 800460c:	0800473d 	.word	0x0800473d
 8004610:	0800473d 	.word	0x0800473d
 8004614:	08004619 	.word	0x08004619
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8004618:	4b4f      	ldr	r3, [pc, #316]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800461e:	4b4e      	ldr	r3, [pc, #312]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	f000 808a 	beq.w	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	0c9b      	lsrs	r3, r3, #18
 8004630:	f003 030f 	and.w	r3, r3, #15
 8004634:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004638:	4413      	add	r3, r2
 800463a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800463e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d018      	beq.n	800467c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800464a:	4b43      	ldr	r3, [pc, #268]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	0c5b      	lsrs	r3, r3, #17
 8004650:	f003 0301 	and.w	r3, r3, #1
 8004654:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004658:	4413      	add	r3, r2
 800465a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800465e:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00d      	beq.n	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800466a:	4a3c      	ldr	r2, [pc, #240]	; (800475c <HAL_RCCEx_GetPeriphCLKFreq+0x200>)
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	fb02 f303 	mul.w	r3, r2, r3
 8004678:	62fb      	str	r3, [r7, #44]	; 0x2c
 800467a:	e004      	b.n	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	4a38      	ldr	r2, [pc, #224]	; (8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8004680:	fb02 f303 	mul.w	r3, r2, r3
 8004684:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004686:	4b34      	ldr	r3, [pc, #208]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800468e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004692:	d102      	bne.n	800469a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8004694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004696:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8004698:	e052      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          frequency = (pllclk * 2) / 3;
 800469a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	4a31      	ldr	r2, [pc, #196]	; (8004764 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 80046a0:	fba2 2303 	umull	r2, r3, r2, r3
 80046a4:	085b      	lsrs	r3, r3, #1
 80046a6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80046a8:	e04a      	b.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80046aa:	f7ff fd91 	bl	80041d0 <HAL_RCC_GetSysClockFreq>
 80046ae:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80046b0:	e049      	b.n	8004746 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80046b2:	f7ff fd8d 	bl	80041d0 <HAL_RCC_GetSysClockFreq>
 80046b6:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80046b8:	e045      	b.n	8004746 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80046ba:	4b27      	ldr	r3, [pc, #156]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ca:	d108      	bne.n	80046de <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        frequency = LSE_VALUE;
 80046d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046da:	62bb      	str	r3, [r7, #40]	; 0x28
 80046dc:	e01f      	b.n	800471e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046e8:	d109      	bne.n	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80046ea:	4b1b      	ldr	r3, [pc, #108]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
      {
        frequency = LSI_VALUE;
 80046f6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80046fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80046fc:	e00f      	b.n	800471e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004704:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004708:	d11c      	bne.n	8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 800470a:	4b13      	ldr	r3, [pc, #76]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d016      	beq.n	8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
      {
        frequency = HSE_VALUE / 128U;
 8004716:	f24f 4324 	movw	r3, #62500	; 0xf424
 800471a:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 800471c:	e012      	b.n	8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 800471e:	e011      	b.n	8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004720:	f7ff fdd4 	bl	80042cc <HAL_RCC_GetPCLK2Freq>
 8004724:	4602      	mov	r2, r0
 8004726:	4b0c      	ldr	r3, [pc, #48]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	0b9b      	lsrs	r3, r3, #14
 800472c:	f003 0303 	and.w	r3, r3, #3
 8004730:	3301      	adds	r3, #1
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	fbb2 f3f3 	udiv	r3, r2, r3
 8004738:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800473a:	e004      	b.n	8004746 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
    default:
    {
      break;
 800473c:	bf00      	nop
 800473e:	e002      	b.n	8004746 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
      break;
 8004740:	bf00      	nop
 8004742:	e000      	b.n	8004746 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
      break;
 8004744:	bf00      	nop
    }
  }
  return (frequency);
 8004746:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004748:	4618      	mov	r0, r3
 800474a:	3734      	adds	r7, #52	; 0x34
 800474c:	46bd      	mov	sp, r7
 800474e:	bd90      	pop	{r4, r7, pc}
 8004750:	0800c3a4 	.word	0x0800c3a4
 8004754:	0800c368 	.word	0x0800c368
 8004758:	40021000 	.word	0x40021000
 800475c:	007a1200 	.word	0x007a1200
 8004760:	003d0900 	.word	0x003d0900
 8004764:	aaaaaaab 	.word	0xaaaaaaab

08004768 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e0b4      	b.n	80048e8 <HAL_RTC_Init+0x180>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a5b      	ldr	r2, [pc, #364]	; (80048f0 <HAL_RTC_Init+0x188>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d004      	beq.n	8004792 <HAL_RTC_Init+0x2a>
 8004788:	f240 111d 	movw	r1, #285	; 0x11d
 800478c:	4859      	ldr	r0, [pc, #356]	; (80048f4 <HAL_RTC_Init+0x18c>)
 800478e:	f7fc ffaf 	bl	80016f0 <assert_failed>
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d012      	beq.n	80047c0 <HAL_RTC_Init+0x58>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	2b80      	cmp	r3, #128	; 0x80
 80047a0:	d00e      	beq.n	80047c0 <HAL_RTC_Init+0x58>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047aa:	d009      	beq.n	80047c0 <HAL_RTC_Init+0x58>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047b4:	d004      	beq.n	80047c0 <HAL_RTC_Init+0x58>
 80047b6:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80047ba:	484e      	ldr	r0, [pc, #312]	; (80048f4 <HAL_RTC_Init+0x18c>)
 80047bc:	f7fc ff98 	bl	80016f0 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047c8:	d309      	bcc.n	80047de <HAL_RTC_Init+0x76>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d2:	d004      	beq.n	80047de <HAL_RTC_Init+0x76>
 80047d4:	f240 111f 	movw	r1, #287	; 0x11f
 80047d8:	4846      	ldr	r0, [pc, #280]	; (80048f4 <HAL_RTC_Init+0x18c>)
 80047da:	f7fc ff89 	bl	80016f0 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	7c5b      	ldrb	r3, [r3, #17]
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d105      	bne.n	80047f4 <HAL_RTC_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f7fc fffe 	bl	80017f0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 fbca 	bl	8004f94 <HAL_RTC_WaitForSynchro>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d004      	beq.n	8004810 <HAL_RTC_Init+0xa8>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2204      	movs	r2, #4
 800480a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e06b      	b.n	80048e8 <HAL_RTC_Init+0x180>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 fc83 	bl	800511c <RTC_EnterInitMode>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d004      	beq.n	8004826 <HAL_RTC_Init+0xbe>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2204      	movs	r2, #4
 8004820:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e060      	b.n	80048e8 <HAL_RTC_Init+0x180>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 0207 	bic.w	r2, r2, #7
 8004834:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d005      	beq.n	800484a <HAL_RTC_Init+0xe2>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800483e:	4b2e      	ldr	r3, [pc, #184]	; (80048f8 <HAL_RTC_Init+0x190>)
 8004840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004842:	4a2d      	ldr	r2, [pc, #180]	; (80048f8 <HAL_RTC_Init+0x190>)
 8004844:	f023 0301 	bic.w	r3, r3, #1
 8004848:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800484a:	4b2b      	ldr	r3, [pc, #172]	; (80048f8 <HAL_RTC_Init+0x190>)
 800484c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	4928      	ldr	r1, [pc, #160]	; (80048f8 <HAL_RTC_Init+0x190>)
 8004858:	4313      	orrs	r3, r2
 800485a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004864:	d003      	beq.n	800486e <HAL_RTC_Init+0x106>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	60fb      	str	r3, [r7, #12]
 800486c:	e00e      	b.n	800488c <HAL_RTC_Init+0x124>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800486e:	2001      	movs	r0, #1
 8004870:	f7ff fe74 	bl	800455c <HAL_RCCEx_GetPeriphCLKFreq>
 8004874:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d104      	bne.n	8004886 <HAL_RTC_Init+0x11e>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2204      	movs	r2, #4
 8004880:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e030      	b.n	80048e8 <HAL_RTC_Init+0x180>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	3b01      	subs	r3, #1
 800488a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f023 010f 	bic.w	r1, r3, #15
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	0c1a      	lsrs	r2, r3, #16
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	0c1b      	lsrs	r3, r3, #16
 80048aa:	041b      	lsls	r3, r3, #16
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	b291      	uxth	r1, r2
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	6812      	ldr	r2, [r2, #0]
 80048b4:	430b      	orrs	r3, r1
 80048b6:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 fc57 	bl	800516c <RTC_ExitInitMode>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d004      	beq.n	80048ce <HAL_RTC_Init+0x166>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2204      	movs	r2, #4
 80048c8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e00c      	b.n	80048e8 <HAL_RTC_Init+0x180>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80048e6:	2300      	movs	r3, #0
  }
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40002800 	.word	0x40002800
 80048f4:	0800c3b4 	.word	0x0800c3b4
 80048f8:	40006c00 	.word	0x40006c00

080048fc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80048fc:	b590      	push	{r4, r7, lr}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8004908:	2300      	movs	r3, #0
 800490a:	617b      	str	r3, [r7, #20]
 800490c:	2300      	movs	r3, #0
 800490e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d002      	beq.n	800491c <HAL_RTC_SetTime+0x20>
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e0cd      	b.n	8004abc <HAL_RTC_SetTime+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d007      	beq.n	8004936 <HAL_RTC_SetTime+0x3a>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d004      	beq.n	8004936 <HAL_RTC_SetTime+0x3a>
 800492c:	f240 21ca 	movw	r1, #714	; 0x2ca
 8004930:	4864      	ldr	r0, [pc, #400]	; (8004ac4 <HAL_RTC_SetTime+0x1c8>)
 8004932:	f7fc fedd 	bl	80016f0 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	7c1b      	ldrb	r3, [r3, #16]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d101      	bne.n	8004942 <HAL_RTC_SetTime+0x46>
 800493e:	2302      	movs	r3, #2
 8004940:	e0bc      	b.n	8004abc <HAL_RTC_SetTime+0x1c0>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2201      	movs	r2, #1
 8004946:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2202      	movs	r2, #2
 800494c:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d12e      	bne.n	80049b2 <HAL_RTC_SetTime+0xb6>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	2b17      	cmp	r3, #23
 800495a:	d904      	bls.n	8004966 <HAL_RTC_SetTime+0x6a>
 800495c:	f240 21d3 	movw	r1, #723	; 0x2d3
 8004960:	4858      	ldr	r0, [pc, #352]	; (8004ac4 <HAL_RTC_SetTime+0x1c8>)
 8004962:	f7fc fec5 	bl	80016f0 <assert_failed>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	785b      	ldrb	r3, [r3, #1]
 800496a:	2b3b      	cmp	r3, #59	; 0x3b
 800496c:	d904      	bls.n	8004978 <HAL_RTC_SetTime+0x7c>
 800496e:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 8004972:	4854      	ldr	r0, [pc, #336]	; (8004ac4 <HAL_RTC_SetTime+0x1c8>)
 8004974:	f7fc febc 	bl	80016f0 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	789b      	ldrb	r3, [r3, #2]
 800497c:	2b3b      	cmp	r3, #59	; 0x3b
 800497e:	d904      	bls.n	800498a <HAL_RTC_SetTime+0x8e>
 8004980:	f240 21d5 	movw	r1, #725	; 0x2d5
 8004984:	484f      	ldr	r0, [pc, #316]	; (8004ac4 <HAL_RTC_SetTime+0x1c8>)
 8004986:	f7fc feb3 	bl	80016f0 <assert_failed>

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	461a      	mov	r2, r3
 8004990:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004994:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	785b      	ldrb	r3, [r3, #1]
 800499c:	4619      	mov	r1, r3
 800499e:	460b      	mov	r3, r1
 80049a0:	011b      	lsls	r3, r3, #4
 80049a2:	1a5b      	subs	r3, r3, r1
 80049a4:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80049a6:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80049ac:	4413      	add	r3, r2
 80049ae:	617b      	str	r3, [r7, #20]
 80049b0:	e045      	b.n	8004a3e <HAL_RTC_SetTime+0x142>
  }
  else
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 fc1d 	bl	80051f6 <RTC_Bcd2ToByte>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b17      	cmp	r3, #23
 80049c0:	d904      	bls.n	80049cc <HAL_RTC_SetTime+0xd0>
 80049c2:	f240 21dd 	movw	r1, #733	; 0x2dd
 80049c6:	483f      	ldr	r0, [pc, #252]	; (8004ac4 <HAL_RTC_SetTime+0x1c8>)
 80049c8:	f7fc fe92 	bl	80016f0 <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	785b      	ldrb	r3, [r3, #1]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 fc10 	bl	80051f6 <RTC_Bcd2ToByte>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b3b      	cmp	r3, #59	; 0x3b
 80049da:	d904      	bls.n	80049e6 <HAL_RTC_SetTime+0xea>
 80049dc:	f240 21de 	movw	r1, #734	; 0x2de
 80049e0:	4838      	ldr	r0, [pc, #224]	; (8004ac4 <HAL_RTC_SetTime+0x1c8>)
 80049e2:	f7fc fe85 	bl	80016f0 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	789b      	ldrb	r3, [r3, #2]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 fc03 	bl	80051f6 <RTC_Bcd2ToByte>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b3b      	cmp	r3, #59	; 0x3b
 80049f4:	d904      	bls.n	8004a00 <HAL_RTC_SetTime+0x104>
 80049f6:	f240 21df 	movw	r1, #735	; 0x2df
 80049fa:	4832      	ldr	r0, [pc, #200]	; (8004ac4 <HAL_RTC_SetTime+0x1c8>)
 80049fc:	f7fc fe78 	bl	80016f0 <assert_failed>

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f000 fbf6 	bl	80051f6 <RTC_Bcd2ToByte>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004a12:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	785b      	ldrb	r3, [r3, #1]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 fbeb 	bl	80051f6 <RTC_Bcd2ToByte>
 8004a20:	4603      	mov	r3, r0
 8004a22:	461a      	mov	r2, r3
 8004a24:	4613      	mov	r3, r2
 8004a26:	011b      	lsls	r3, r3, #4
 8004a28:	1a9b      	subs	r3, r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004a2c:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	789b      	ldrb	r3, [r3, #2]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fbdf 	bl	80051f6 <RTC_Bcd2ToByte>
 8004a38:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004a3a:	4423      	add	r3, r4
 8004a3c:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004a3e:	6979      	ldr	r1, [r7, #20]
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f000 fb04 	bl	800504e <RTC_WriteTimeCounter>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d007      	beq.n	8004a5c <HAL_RTC_SetTime+0x160>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2204      	movs	r2, #4
 8004a50:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e02f      	b.n	8004abc <HAL_RTC_SetTime+0x1c0>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0205 	bic.w	r2, r2, #5
 8004a6a:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f000 fb15 	bl	800509c <RTC_ReadAlarmCounter>
 8004a72:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a7a:	d018      	beq.n	8004aae <HAL_RTC_SetTime+0x1b2>
    {
      if (counter_alarm < counter_time)
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d214      	bcs.n	8004aae <HAL_RTC_SetTime+0x1b2>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004a8a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004a8e:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004a90:	6939      	ldr	r1, [r7, #16]
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 fb1b 	bl	80050ce <RTC_WriteAlarmCounter>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d007      	beq.n	8004aae <HAL_RTC_SetTime+0x1b2>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2204      	movs	r2, #4
 8004aa2:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e006      	b.n	8004abc <HAL_RTC_SetTime+0x1c0>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004aba:	2300      	movs	r3, #0
  }
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	371c      	adds	r7, #28
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd90      	pop	{r4, r7, pc}
 8004ac4:	0800c3b4 	.word	0x0800c3b4

08004ac8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b088      	sub	sp, #32
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	61bb      	str	r3, [r7, #24]
 8004ad8:	2300      	movs	r3, #0
 8004ada:	61fb      	str	r3, [r7, #28]
 8004adc:	2300      	movs	r3, #0
 8004ade:	617b      	str	r3, [r7, #20]
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d002      	beq.n	8004af0 <HAL_RTC_GetTime+0x28>
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e0c0      	b.n	8004c76 <HAL_RTC_GetTime+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d007      	beq.n	8004b0a <HAL_RTC_GetTime+0x42>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d004      	beq.n	8004b0a <HAL_RTC_GetTime+0x42>
 8004b00:	f240 312d 	movw	r1, #813	; 0x32d
 8004b04:	485e      	ldr	r0, [pc, #376]	; (8004c80 <HAL_RTC_GetTime+0x1b8>)
 8004b06:	f7fc fdf3 	bl	80016f0 <assert_failed>

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f003 0304 	and.w	r3, r3, #4
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d001      	beq.n	8004b1c <HAL_RTC_GetTime+0x54>
  {
    return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e0ac      	b.n	8004c76 <HAL_RTC_GetTime+0x1ae>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f000 fa66 	bl	8004fee <RTC_ReadTimeCounter>
 8004b22:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	4a57      	ldr	r2, [pc, #348]	; (8004c84 <HAL_RTC_GetTime+0x1bc>)
 8004b28:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2c:	0adb      	lsrs	r3, r3, #11
 8004b2e:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	4b54      	ldr	r3, [pc, #336]	; (8004c84 <HAL_RTC_GetTime+0x1bc>)
 8004b34:	fba3 1302 	umull	r1, r3, r3, r2
 8004b38:	0adb      	lsrs	r3, r3, #11
 8004b3a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004b3e:	fb01 f303 	mul.w	r3, r1, r3
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	4a50      	ldr	r2, [pc, #320]	; (8004c88 <HAL_RTC_GetTime+0x1c0>)
 8004b46:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4a:	095b      	lsrs	r3, r3, #5
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	4a4b      	ldr	r2, [pc, #300]	; (8004c84 <HAL_RTC_GetTime+0x1bc>)
 8004b56:	fba2 1203 	umull	r1, r2, r2, r3
 8004b5a:	0ad2      	lsrs	r2, r2, #11
 8004b5c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004b60:	fb01 f202 	mul.w	r2, r1, r2
 8004b64:	1a9a      	subs	r2, r3, r2
 8004b66:	4b48      	ldr	r3, [pc, #288]	; (8004c88 <HAL_RTC_GetTime+0x1c0>)
 8004b68:	fba3 1302 	umull	r1, r3, r3, r2
 8004b6c:	0959      	lsrs	r1, r3, #5
 8004b6e:	460b      	mov	r3, r1
 8004b70:	011b      	lsls	r3, r3, #4
 8004b72:	1a5b      	subs	r3, r3, r1
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	1ad1      	subs	r1, r2, r3
 8004b78:	b2ca      	uxtb	r2, r1
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	2b17      	cmp	r3, #23
 8004b82:	d955      	bls.n	8004c30 <HAL_RTC_GetTime+0x168>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	4a41      	ldr	r2, [pc, #260]	; (8004c8c <HAL_RTC_GetTime+0x1c4>)
 8004b88:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8c:	091b      	lsrs	r3, r3, #4
 8004b8e:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8004b90:	6939      	ldr	r1, [r7, #16]
 8004b92:	4b3e      	ldr	r3, [pc, #248]	; (8004c8c <HAL_RTC_GetTime+0x1c4>)
 8004b94:	fba3 2301 	umull	r2, r3, r3, r1
 8004b98:	091a      	lsrs	r2, r3, #4
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	4413      	add	r3, r2
 8004ba0:	00db      	lsls	r3, r3, #3
 8004ba2:	1aca      	subs	r2, r1, r3
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f000 fa76 	bl	800509c <RTC_ReadAlarmCounter>
 8004bb0:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb8:	d008      	beq.n	8004bcc <HAL_RTC_GetTime+0x104>
 8004bba:	69fa      	ldr	r2, [r7, #28]
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d904      	bls.n	8004bcc <HAL_RTC_GetTime+0x104>
    {
      counter_alarm -= counter_time;
 8004bc2:	69fa      	ldr	r2, [r7, #28]
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	61fb      	str	r3, [r7, #28]
 8004bca:	e002      	b.n	8004bd2 <HAL_RTC_GetTime+0x10a>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8004bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8004bd0:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	4a2e      	ldr	r2, [pc, #184]	; (8004c90 <HAL_RTC_GetTime+0x1c8>)
 8004bd6:	fb02 f303 	mul.w	r3, r2, r3
 8004bda:	69ba      	ldr	r2, [r7, #24]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004be0:	69b9      	ldr	r1, [r7, #24]
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 fa33 	bl	800504e <RTC_WriteTimeCounter>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <HAL_RTC_GetTime+0x12a>
    {
      return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e041      	b.n	8004c76 <HAL_RTC_GetTime+0x1ae>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf8:	d00c      	beq.n	8004c14 <HAL_RTC_GetTime+0x14c>
    {
      counter_alarm += counter_time;
 8004bfa:	69fa      	ldr	r2, [r7, #28]
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	4413      	add	r3, r2
 8004c00:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004c02:	69f9      	ldr	r1, [r7, #28]
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 fa62 	bl	80050ce <RTC_WriteAlarmCounter>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00a      	beq.n	8004c26 <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	e030      	b.n	8004c76 <HAL_RTC_GetTime+0x1ae>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004c14:	69f9      	ldr	r1, [r7, #28]
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 fa59 	bl	80050ce <RTC_WriteAlarmCounter>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e027      	b.n	8004c76 <HAL_RTC_GetTime+0x1ae>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8004c26:	6979      	ldr	r1, [r7, #20]
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 fb01 	bl	8005230 <RTC_DateUpdate>
 8004c2e:	e003      	b.n	8004c38 <HAL_RTC_GetTime+0x170>
  }
  else
  {
    sTime->Hours = hours;
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d01a      	beq.n	8004c74 <HAL_RTC_GetTime+0x1ac>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 faba 	bl	80051bc <RTC_ByteToBcd2>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	785b      	ldrb	r3, [r3, #1]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f000 fab1 	bl	80051bc <RTC_ByteToBcd2>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	789b      	ldrb	r3, [r3, #2]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 faa8 	bl	80051bc <RTC_ByteToBcd2>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	461a      	mov	r2, r3
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3720      	adds	r7, #32
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	0800c3b4 	.word	0x0800c3b4
 8004c84:	91a2b3c5 	.word	0x91a2b3c5
 8004c88:	88888889 	.word	0x88888889
 8004c8c:	aaaaaaab 	.word	0xaaaaaaab
 8004c90:	00015180 	.word	0x00015180

08004c94 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b088      	sub	sp, #32
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	61fb      	str	r3, [r7, #28]
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	61bb      	str	r3, [r7, #24]
 8004ca8:	2300      	movs	r3, #0
 8004caa:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <HAL_RTC_SetDate+0x24>
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e0fc      	b.n	8004eb6 <HAL_RTC_SetDate+0x222>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d007      	beq.n	8004cd2 <HAL_RTC_SetDate+0x3e>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d004      	beq.n	8004cd2 <HAL_RTC_SetDate+0x3e>
 8004cc8:	f44f 7167 	mov.w	r1, #924	; 0x39c
 8004ccc:	487c      	ldr	r0, [pc, #496]	; (8004ec0 <HAL_RTC_SetDate+0x22c>)
 8004cce:	f7fc fd0f 	bl	80016f0 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	7c1b      	ldrb	r3, [r3, #16]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d101      	bne.n	8004cde <HAL_RTC_SetDate+0x4a>
 8004cda:	2302      	movs	r3, #2
 8004cdc:	e0eb      	b.n	8004eb6 <HAL_RTC_SetDate+0x222>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d12f      	bne.n	8004d50 <HAL_RTC_SetDate+0xbc>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	78db      	ldrb	r3, [r3, #3]
 8004cf4:	2b63      	cmp	r3, #99	; 0x63
 8004cf6:	d904      	bls.n	8004d02 <HAL_RTC_SetDate+0x6e>
 8004cf8:	f240 31a5 	movw	r1, #933	; 0x3a5
 8004cfc:	4870      	ldr	r0, [pc, #448]	; (8004ec0 <HAL_RTC_SetDate+0x22c>)
 8004cfe:	f7fc fcf7 	bl	80016f0 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	785b      	ldrb	r3, [r3, #1]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d003      	beq.n	8004d12 <HAL_RTC_SetDate+0x7e>
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	785b      	ldrb	r3, [r3, #1]
 8004d0e:	2b0c      	cmp	r3, #12
 8004d10:	d904      	bls.n	8004d1c <HAL_RTC_SetDate+0x88>
 8004d12:	f240 31a6 	movw	r1, #934	; 0x3a6
 8004d16:	486a      	ldr	r0, [pc, #424]	; (8004ec0 <HAL_RTC_SetDate+0x22c>)
 8004d18:	f7fc fcea 	bl	80016f0 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	789b      	ldrb	r3, [r3, #2]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d003      	beq.n	8004d2c <HAL_RTC_SetDate+0x98>
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	789b      	ldrb	r3, [r3, #2]
 8004d28:	2b1f      	cmp	r3, #31
 8004d2a:	d904      	bls.n	8004d36 <HAL_RTC_SetDate+0xa2>
 8004d2c:	f240 31a7 	movw	r1, #935	; 0x3a7
 8004d30:	4863      	ldr	r0, [pc, #396]	; (8004ec0 <HAL_RTC_SetDate+0x22c>)
 8004d32:	f7fc fcdd 	bl	80016f0 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	78da      	ldrb	r2, [r3, #3]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	785a      	ldrb	r2, [r3, #1]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	789a      	ldrb	r2, [r3, #2]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	739a      	strb	r2, [r3, #14]
 8004d4e:	e051      	b.n	8004df4 <HAL_RTC_SetDate+0x160>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	78db      	ldrb	r3, [r3, #3]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f000 fa4e 	bl	80051f6 <RTC_Bcd2ToByte>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b63      	cmp	r3, #99	; 0x63
 8004d5e:	d904      	bls.n	8004d6a <HAL_RTC_SetDate+0xd6>
 8004d60:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 8004d64:	4856      	ldr	r0, [pc, #344]	; (8004ec0 <HAL_RTC_SetDate+0x22c>)
 8004d66:	f7fc fcc3 	bl	80016f0 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	785b      	ldrb	r3, [r3, #1]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 fa41 	bl	80051f6 <RTC_Bcd2ToByte>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d007      	beq.n	8004d8a <HAL_RTC_SetDate+0xf6>
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	785b      	ldrb	r3, [r3, #1]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 fa39 	bl	80051f6 <RTC_Bcd2ToByte>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b0c      	cmp	r3, #12
 8004d88:	d904      	bls.n	8004d94 <HAL_RTC_SetDate+0x100>
 8004d8a:	f240 31b1 	movw	r1, #945	; 0x3b1
 8004d8e:	484c      	ldr	r0, [pc, #304]	; (8004ec0 <HAL_RTC_SetDate+0x22c>)
 8004d90:	f7fc fcae 	bl	80016f0 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	789b      	ldrb	r3, [r3, #2]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 fa2c 	bl	80051f6 <RTC_Bcd2ToByte>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d007      	beq.n	8004db4 <HAL_RTC_SetDate+0x120>
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	789b      	ldrb	r3, [r3, #2]
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 fa24 	bl	80051f6 <RTC_Bcd2ToByte>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b1f      	cmp	r3, #31
 8004db2:	d904      	bls.n	8004dbe <HAL_RTC_SetDate+0x12a>
 8004db4:	f240 31b2 	movw	r1, #946	; 0x3b2
 8004db8:	4841      	ldr	r0, [pc, #260]	; (8004ec0 <HAL_RTC_SetDate+0x22c>)
 8004dba:	f7fc fc99 	bl	80016f0 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	78db      	ldrb	r3, [r3, #3]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 fa17 	bl	80051f6 <RTC_Bcd2ToByte>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	461a      	mov	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	785b      	ldrb	r3, [r3, #1]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 fa0e 	bl	80051f6 <RTC_Bcd2ToByte>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	461a      	mov	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	789b      	ldrb	r3, [r3, #2]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 fa05 	bl	80051f6 <RTC_Bcd2ToByte>
 8004dec:	4603      	mov	r3, r0
 8004dee:	461a      	mov	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	7bdb      	ldrb	r3, [r3, #15]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	7b59      	ldrb	r1, [r3, #13]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	7b9b      	ldrb	r3, [r3, #14]
 8004e02:	461a      	mov	r2, r3
 8004e04:	f000 faf0 	bl	80053e8 <RTC_WeekDayNum>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	7b1a      	ldrb	r2, [r3, #12]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f000 f8e8 	bl	8004fee <RTC_ReadTimeCounter>
 8004e1e:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	4a28      	ldr	r2, [pc, #160]	; (8004ec4 <HAL_RTC_SetDate+0x230>)
 8004e24:	fba2 2303 	umull	r2, r3, r2, r3
 8004e28:	0adb      	lsrs	r3, r3, #11
 8004e2a:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	2b18      	cmp	r3, #24
 8004e30:	d93a      	bls.n	8004ea8 <HAL_RTC_SetDate+0x214>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	4a24      	ldr	r2, [pc, #144]	; (8004ec8 <HAL_RTC_SetDate+0x234>)
 8004e36:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3a:	091b      	lsrs	r3, r3, #4
 8004e3c:	4a23      	ldr	r2, [pc, #140]	; (8004ecc <HAL_RTC_SetDate+0x238>)
 8004e3e:	fb02 f303 	mul.w	r3, r2, r3
 8004e42:	69fa      	ldr	r2, [r7, #28]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004e48:	69f9      	ldr	r1, [r7, #28]
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 f8ff 	bl	800504e <RTC_WriteTimeCounter>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d007      	beq.n	8004e66 <HAL_RTC_SetDate+0x1d2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2204      	movs	r2, #4
 8004e5a:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e027      	b.n	8004eb6 <HAL_RTC_SetDate+0x222>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f000 f918 	bl	800509c <RTC_ReadAlarmCounter>
 8004e6c:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e74:	d018      	beq.n	8004ea8 <HAL_RTC_SetDate+0x214>
    {
      if (counter_alarm < counter_time)
 8004e76:	69ba      	ldr	r2, [r7, #24]
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d214      	bcs.n	8004ea8 <HAL_RTC_SetDate+0x214>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004e84:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004e88:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004e8a:	69b9      	ldr	r1, [r7, #24]
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 f91e 	bl	80050ce <RTC_WriteAlarmCounter>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d007      	beq.n	8004ea8 <HAL_RTC_SetDate+0x214>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2204      	movs	r2, #4
 8004e9c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e006      	b.n	8004eb6 <HAL_RTC_SetDate+0x222>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3720      	adds	r7, #32
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	0800c3b4 	.word	0x0800c3b4
 8004ec4:	91a2b3c5 	.word	0x91a2b3c5
 8004ec8:	aaaaaaab 	.word	0xaaaaaaab
 8004ecc:	00015180 	.word	0x00015180

08004ed0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8004edc:	f107 0314 	add.w	r3, r7, #20
 8004ee0:	2100      	movs	r1, #0
 8004ee2:	460a      	mov	r2, r1
 8004ee4:	801a      	strh	r2, [r3, #0]
 8004ee6:	460a      	mov	r2, r1
 8004ee8:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d002      	beq.n	8004ef6 <HAL_RTC_GetDate+0x26>
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e045      	b.n	8004f86 <HAL_RTC_GetDate+0xb6>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d007      	beq.n	8004f10 <HAL_RTC_GetDate+0x40>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d004      	beq.n	8004f10 <HAL_RTC_GetDate+0x40>
 8004f06:	f240 410e 	movw	r1, #1038	; 0x40e
 8004f0a:	4821      	ldr	r0, [pc, #132]	; (8004f90 <HAL_RTC_GetDate+0xc0>)
 8004f0c:	f7fc fbf0 	bl	80016f0 <assert_failed>

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8004f10:	f107 0314 	add.w	r3, r7, #20
 8004f14:	2200      	movs	r2, #0
 8004f16:	4619      	mov	r1, r3
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f7ff fdd5 	bl	8004ac8 <HAL_RTC_GetTime>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <HAL_RTC_GetDate+0x58>
  {
    return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e02e      	b.n	8004f86 <HAL_RTC_GetDate+0xb6>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	7b1a      	ldrb	r2, [r3, #12]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	7bda      	ldrb	r2, [r3, #15]
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	7b5a      	ldrb	r2, [r3, #13]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	7b9a      	ldrb	r2, [r3, #14]
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d01a      	beq.n	8004f84 <HAL_RTC_GetDate+0xb4>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	78db      	ldrb	r3, [r3, #3]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 f932 	bl	80051bc <RTC_ByteToBcd2>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	785b      	ldrb	r3, [r3, #1]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 f929 	bl	80051bc <RTC_ByteToBcd2>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	789b      	ldrb	r3, [r3, #2]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f000 f920 	bl	80051bc <RTC_ByteToBcd2>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	461a      	mov	r2, r3
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3718      	adds	r7, #24
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	0800c3b4 	.word	0x0800c3b4

08004f94 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e01d      	b.n	8004fe6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 0208 	bic.w	r2, r2, #8
 8004fb8:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004fba:	f7fd f849 	bl	8002050 <HAL_GetTick>
 8004fbe:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004fc0:	e009      	b.n	8004fd6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004fc2:	f7fd f845 	bl	8002050 <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fd0:	d901      	bls.n	8004fd6 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e007      	b.n	8004fe6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f003 0308 	and.w	r3, r3, #8
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0ee      	beq.n	8004fc2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b087      	sub	sp, #28
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	827b      	strh	r3, [r7, #18]
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	823b      	strh	r3, [r7, #16]
 8004ffe:	2300      	movs	r3, #0
 8005000:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8005002:	2300      	movs	r3, #0
 8005004:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	69db      	ldr	r3, [r3, #28]
 8005014:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800501e:	8a7a      	ldrh	r2, [r7, #18]
 8005020:	8a3b      	ldrh	r3, [r7, #16]
 8005022:	429a      	cmp	r2, r3
 8005024:	d008      	beq.n	8005038 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8005026:	8a3b      	ldrh	r3, [r7, #16]
 8005028:	041a      	lsls	r2, r3, #16
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	69db      	ldr	r3, [r3, #28]
 8005030:	b29b      	uxth	r3, r3
 8005032:	4313      	orrs	r3, r2
 8005034:	617b      	str	r3, [r7, #20]
 8005036:	e004      	b.n	8005042 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005038:	8a7b      	ldrh	r3, [r7, #18]
 800503a:	041a      	lsls	r2, r3, #16
 800503c:	89fb      	ldrh	r3, [r7, #14]
 800503e:	4313      	orrs	r3, r2
 8005040:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8005042:	697b      	ldr	r3, [r7, #20]
}
 8005044:	4618      	mov	r0, r3
 8005046:	371c      	adds	r7, #28
 8005048:	46bd      	mov	sp, r7
 800504a:	bc80      	pop	{r7}
 800504c:	4770      	bx	lr

0800504e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b084      	sub	sp, #16
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
 8005056:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005058:	2300      	movs	r3, #0
 800505a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 f85d 	bl	800511c <RTC_EnterInitMode>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d002      	beq.n	800506e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	73fb      	strb	r3, [r7, #15]
 800506c:	e011      	b.n	8005092 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	0c12      	lsrs	r2, r2, #16
 8005076:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	b292      	uxth	r2, r2
 8005080:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f872 	bl	800516c <RTC_ExitInitMode>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005092:	7bfb      	ldrb	r3, [r7, #15]
}
 8005094:	4618      	mov	r0, r3
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80050a4:	2300      	movs	r3, #0
 80050a6:	81fb      	strh	r3, [r7, #14]
 80050a8:	2300      	movs	r3, #0
 80050aa:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ba:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80050bc:	89fb      	ldrh	r3, [r7, #14]
 80050be:	041a      	lsls	r2, r3, #16
 80050c0:	89bb      	ldrh	r3, [r7, #12]
 80050c2:	4313      	orrs	r3, r2
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bc80      	pop	{r7}
 80050cc:	4770      	bx	lr

080050ce <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b084      	sub	sp, #16
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
 80050d6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050d8:	2300      	movs	r3, #0
 80050da:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 f81d 	bl	800511c <RTC_EnterInitMode>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d002      	beq.n	80050ee <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	73fb      	strb	r3, [r7, #15]
 80050ec:	e011      	b.n	8005112 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	0c12      	lsrs	r2, r2, #16
 80050f6:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	b292      	uxth	r2, r2
 8005100:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f832 	bl	800516c <RTC_ExitInitMode>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005112:	7bfb      	ldrb	r3, [r7, #15]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005124:	2300      	movs	r3, #0
 8005126:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005128:	f7fc ff92 	bl	8002050 <HAL_GetTick>
 800512c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800512e:	e009      	b.n	8005144 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005130:	f7fc ff8e 	bl	8002050 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800513e:	d901      	bls.n	8005144 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e00f      	b.n	8005164 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f003 0320 	and.w	r3, r3, #32
 800514e:	2b00      	cmp	r3, #0
 8005150:	d0ee      	beq.n	8005130 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f042 0210 	orr.w	r2, r2, #16
 8005160:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005174:	2300      	movs	r3, #0
 8005176:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0210 	bic.w	r2, r2, #16
 8005186:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005188:	f7fc ff62 	bl	8002050 <HAL_GetTick>
 800518c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800518e:	e009      	b.n	80051a4 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005190:	f7fc ff5e 	bl	8002050 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800519e:	d901      	bls.n	80051a4 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e007      	b.n	80051b4 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f003 0320 	and.w	r3, r3, #32
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d0ee      	beq.n	8005190 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	4603      	mov	r3, r0
 80051c4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80051c6:	2300      	movs	r3, #0
 80051c8:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80051ca:	e005      	b.n	80051d8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	3301      	adds	r3, #1
 80051d0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80051d2:	79fb      	ldrb	r3, [r7, #7]
 80051d4:	3b0a      	subs	r3, #10
 80051d6:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80051d8:	79fb      	ldrb	r3, [r7, #7]
 80051da:	2b09      	cmp	r3, #9
 80051dc:	d8f6      	bhi.n	80051cc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	79fb      	ldrb	r3, [r7, #7]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	b2db      	uxtb	r3, r3
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bc80      	pop	{r7}
 80051f4:	4770      	bx	lr

080051f6 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b085      	sub	sp, #20
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	4603      	mov	r3, r0
 80051fe:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005200:	2300      	movs	r3, #0
 8005202:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005204:	79fb      	ldrb	r3, [r7, #7]
 8005206:	091b      	lsrs	r3, r3, #4
 8005208:	b2db      	uxtb	r3, r3
 800520a:	461a      	mov	r2, r3
 800520c:	4613      	mov	r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	4413      	add	r3, r2
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005216:	79fb      	ldrb	r3, [r7, #7]
 8005218:	f003 030f 	and.w	r3, r3, #15
 800521c:	b2da      	uxtb	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	b2db      	uxtb	r3, r3
 8005222:	4413      	add	r3, r2
 8005224:	b2db      	uxtb	r3, r3
}
 8005226:	4618      	mov	r0, r3
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	bc80      	pop	{r7}
 800522e:	4770      	bx	lr

08005230 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	617b      	str	r3, [r7, #20]
 800523e:	2300      	movs	r3, #0
 8005240:	613b      	str	r3, [r7, #16]
 8005242:	2300      	movs	r3, #0
 8005244:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8005246:	2300      	movs	r3, #0
 8005248:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	7bdb      	ldrb	r3, [r3, #15]
 800524e:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	7b5b      	ldrb	r3, [r3, #13]
 8005254:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	7b9b      	ldrb	r3, [r3, #14]
 800525a:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 800525c:	2300      	movs	r3, #0
 800525e:	60bb      	str	r3, [r7, #8]
 8005260:	e06f      	b.n	8005342 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d011      	beq.n	800528c <RTC_DateUpdate+0x5c>
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	2b03      	cmp	r3, #3
 800526c:	d00e      	beq.n	800528c <RTC_DateUpdate+0x5c>
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	2b05      	cmp	r3, #5
 8005272:	d00b      	beq.n	800528c <RTC_DateUpdate+0x5c>
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	2b07      	cmp	r3, #7
 8005278:	d008      	beq.n	800528c <RTC_DateUpdate+0x5c>
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	2b08      	cmp	r3, #8
 800527e:	d005      	beq.n	800528c <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	2b0a      	cmp	r3, #10
 8005284:	d002      	beq.n	800528c <RTC_DateUpdate+0x5c>
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	2b0c      	cmp	r3, #12
 800528a:	d117      	bne.n	80052bc <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2b1e      	cmp	r3, #30
 8005290:	d803      	bhi.n	800529a <RTC_DateUpdate+0x6a>
      {
        day++;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	3301      	adds	r3, #1
 8005296:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005298:	e050      	b.n	800533c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	2b0c      	cmp	r3, #12
 800529e:	d005      	beq.n	80052ac <RTC_DateUpdate+0x7c>
        {
          month++;
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	3301      	adds	r3, #1
 80052a4:	613b      	str	r3, [r7, #16]
          day = 1U;
 80052a6:	2301      	movs	r3, #1
 80052a8:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80052aa:	e047      	b.n	800533c <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80052ac:	2301      	movs	r3, #1
 80052ae:	613b      	str	r3, [r7, #16]
          day = 1U;
 80052b0:	2301      	movs	r3, #1
 80052b2:	60fb      	str	r3, [r7, #12]
          year++;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	3301      	adds	r3, #1
 80052b8:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80052ba:	e03f      	b.n	800533c <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	2b04      	cmp	r3, #4
 80052c0:	d008      	beq.n	80052d4 <RTC_DateUpdate+0xa4>
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	2b06      	cmp	r3, #6
 80052c6:	d005      	beq.n	80052d4 <RTC_DateUpdate+0xa4>
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	2b09      	cmp	r3, #9
 80052cc:	d002      	beq.n	80052d4 <RTC_DateUpdate+0xa4>
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	2b0b      	cmp	r3, #11
 80052d2:	d10c      	bne.n	80052ee <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2b1d      	cmp	r3, #29
 80052d8:	d803      	bhi.n	80052e2 <RTC_DateUpdate+0xb2>
      {
        day++;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	3301      	adds	r3, #1
 80052de:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80052e0:	e02c      	b.n	800533c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	3301      	adds	r3, #1
 80052e6:	613b      	str	r3, [r7, #16]
        day = 1U;
 80052e8:	2301      	movs	r3, #1
 80052ea:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80052ec:	e026      	b.n	800533c <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d123      	bne.n	800533c <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2b1b      	cmp	r3, #27
 80052f8:	d803      	bhi.n	8005302 <RTC_DateUpdate+0xd2>
      {
        day++;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	3301      	adds	r3, #1
 80052fe:	60fb      	str	r3, [r7, #12]
 8005300:	e01c      	b.n	800533c <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2b1c      	cmp	r3, #28
 8005306:	d111      	bne.n	800532c <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	b29b      	uxth	r3, r3
 800530c:	4618      	mov	r0, r3
 800530e:	f000 f839 	bl	8005384 <RTC_IsLeapYear>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d003      	beq.n	8005320 <RTC_DateUpdate+0xf0>
        {
          day++;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	3301      	adds	r3, #1
 800531c:	60fb      	str	r3, [r7, #12]
 800531e:	e00d      	b.n	800533c <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	3301      	adds	r3, #1
 8005324:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005326:	2301      	movs	r3, #1
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	e007      	b.n	800533c <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2b1d      	cmp	r3, #29
 8005330:	d104      	bne.n	800533c <RTC_DateUpdate+0x10c>
      {
        month++;
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	3301      	adds	r3, #1
 8005336:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005338:	2301      	movs	r3, #1
 800533a:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	3301      	adds	r3, #1
 8005340:	60bb      	str	r3, [r7, #8]
 8005342:	68ba      	ldr	r2, [r7, #8]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	429a      	cmp	r2, r3
 8005348:	d38b      	bcc.n	8005262 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	b2da      	uxtb	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	b2da      	uxtb	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	b2da      	uxtb	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	b2db      	uxtb	r3, r3
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	b2d2      	uxtb	r2, r2
 800536a:	4619      	mov	r1, r3
 800536c:	6978      	ldr	r0, [r7, #20]
 800536e:	f000 f83b 	bl	80053e8 <RTC_WeekDayNum>
 8005372:	4603      	mov	r3, r0
 8005374:	461a      	mov	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	731a      	strb	r2, [r3, #12]
}
 800537a:	bf00      	nop
 800537c:	3718      	adds	r7, #24
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
	...

08005384 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	4603      	mov	r3, r0
 800538c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800538e:	88fb      	ldrh	r3, [r7, #6]
 8005390:	f003 0303 	and.w	r3, r3, #3
 8005394:	b29b      	uxth	r3, r3
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800539a:	2300      	movs	r3, #0
 800539c:	e01d      	b.n	80053da <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800539e:	88fb      	ldrh	r3, [r7, #6]
 80053a0:	4a10      	ldr	r2, [pc, #64]	; (80053e4 <RTC_IsLeapYear+0x60>)
 80053a2:	fba2 1203 	umull	r1, r2, r2, r3
 80053a6:	0952      	lsrs	r2, r2, #5
 80053a8:	2164      	movs	r1, #100	; 0x64
 80053aa:	fb01 f202 	mul.w	r2, r1, r2
 80053ae:	1a9b      	subs	r3, r3, r2
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e00f      	b.n	80053da <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80053ba:	88fb      	ldrh	r3, [r7, #6]
 80053bc:	4a09      	ldr	r2, [pc, #36]	; (80053e4 <RTC_IsLeapYear+0x60>)
 80053be:	fba2 1203 	umull	r1, r2, r2, r3
 80053c2:	09d2      	lsrs	r2, r2, #7
 80053c4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80053c8:	fb01 f202 	mul.w	r2, r1, r2
 80053cc:	1a9b      	subs	r3, r3, r2
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d101      	bne.n	80053d8 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e000      	b.n	80053da <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80053d8:	2300      	movs	r3, #0
  }
}
 80053da:	4618      	mov	r0, r3
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	bc80      	pop	{r7}
 80053e2:	4770      	bx	lr
 80053e4:	51eb851f 	.word	0x51eb851f

080053e8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	460b      	mov	r3, r1
 80053f2:	70fb      	strb	r3, [r7, #3]
 80053f4:	4613      	mov	r3, r2
 80053f6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80053f8:	2300      	movs	r3, #0
 80053fa:	60bb      	str	r3, [r7, #8]
 80053fc:	2300      	movs	r3, #0
 80053fe:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005406:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005408:	78fb      	ldrb	r3, [r7, #3]
 800540a:	2b02      	cmp	r3, #2
 800540c:	d82d      	bhi.n	800546a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800540e:	78fa      	ldrb	r2, [r7, #3]
 8005410:	4613      	mov	r3, r2
 8005412:	005b      	lsls	r3, r3, #1
 8005414:	4413      	add	r3, r2
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	1a9b      	subs	r3, r3, r2
 800541a:	4a2c      	ldr	r2, [pc, #176]	; (80054cc <RTC_WeekDayNum+0xe4>)
 800541c:	fba2 2303 	umull	r2, r3, r2, r3
 8005420:	085a      	lsrs	r2, r3, #1
 8005422:	78bb      	ldrb	r3, [r7, #2]
 8005424:	441a      	add	r2, r3
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	441a      	add	r2, r3
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	3b01      	subs	r3, #1
 800542e:	089b      	lsrs	r3, r3, #2
 8005430:	441a      	add	r2, r3
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	3b01      	subs	r3, #1
 8005436:	4926      	ldr	r1, [pc, #152]	; (80054d0 <RTC_WeekDayNum+0xe8>)
 8005438:	fba1 1303 	umull	r1, r3, r1, r3
 800543c:	095b      	lsrs	r3, r3, #5
 800543e:	1ad2      	subs	r2, r2, r3
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	3b01      	subs	r3, #1
 8005444:	4922      	ldr	r1, [pc, #136]	; (80054d0 <RTC_WeekDayNum+0xe8>)
 8005446:	fba1 1303 	umull	r1, r3, r1, r3
 800544a:	09db      	lsrs	r3, r3, #7
 800544c:	4413      	add	r3, r2
 800544e:	1d1a      	adds	r2, r3, #4
 8005450:	4b20      	ldr	r3, [pc, #128]	; (80054d4 <RTC_WeekDayNum+0xec>)
 8005452:	fba3 1302 	umull	r1, r3, r3, r2
 8005456:	1ad1      	subs	r1, r2, r3
 8005458:	0849      	lsrs	r1, r1, #1
 800545a:	440b      	add	r3, r1
 800545c:	0899      	lsrs	r1, r3, #2
 800545e:	460b      	mov	r3, r1
 8005460:	00db      	lsls	r3, r3, #3
 8005462:	1a5b      	subs	r3, r3, r1
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	60fb      	str	r3, [r7, #12]
 8005468:	e029      	b.n	80054be <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800546a:	78fa      	ldrb	r2, [r7, #3]
 800546c:	4613      	mov	r3, r2
 800546e:	005b      	lsls	r3, r3, #1
 8005470:	4413      	add	r3, r2
 8005472:	00db      	lsls	r3, r3, #3
 8005474:	1a9b      	subs	r3, r3, r2
 8005476:	4a15      	ldr	r2, [pc, #84]	; (80054cc <RTC_WeekDayNum+0xe4>)
 8005478:	fba2 2303 	umull	r2, r3, r2, r3
 800547c:	085a      	lsrs	r2, r3, #1
 800547e:	78bb      	ldrb	r3, [r7, #2]
 8005480:	441a      	add	r2, r3
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	441a      	add	r2, r3
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	089b      	lsrs	r3, r3, #2
 800548a:	441a      	add	r2, r3
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	4910      	ldr	r1, [pc, #64]	; (80054d0 <RTC_WeekDayNum+0xe8>)
 8005490:	fba1 1303 	umull	r1, r3, r1, r3
 8005494:	095b      	lsrs	r3, r3, #5
 8005496:	1ad2      	subs	r2, r2, r3
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	490d      	ldr	r1, [pc, #52]	; (80054d0 <RTC_WeekDayNum+0xe8>)
 800549c:	fba1 1303 	umull	r1, r3, r1, r3
 80054a0:	09db      	lsrs	r3, r3, #7
 80054a2:	4413      	add	r3, r2
 80054a4:	1c9a      	adds	r2, r3, #2
 80054a6:	4b0b      	ldr	r3, [pc, #44]	; (80054d4 <RTC_WeekDayNum+0xec>)
 80054a8:	fba3 1302 	umull	r1, r3, r3, r2
 80054ac:	1ad1      	subs	r1, r2, r3
 80054ae:	0849      	lsrs	r1, r1, #1
 80054b0:	440b      	add	r3, r1
 80054b2:	0899      	lsrs	r1, r3, #2
 80054b4:	460b      	mov	r3, r1
 80054b6:	00db      	lsls	r3, r3, #3
 80054b8:	1a5b      	subs	r3, r3, r1
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	b2db      	uxtb	r3, r3
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bc80      	pop	{r7}
 80054ca:	4770      	bx	lr
 80054cc:	38e38e39 	.word	0x38e38e39
 80054d0:	51eb851f 	.word	0x51eb851f
 80054d4:	24924925 	.word	0x24924925

080054d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e0b2      	b.n	8005650 <HAL_TIM_Base_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a5a      	ldr	r2, [pc, #360]	; (8005658 <HAL_TIM_Base_Init+0x180>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d027      	beq.n	8005544 <HAL_TIM_Base_Init+0x6c>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a58      	ldr	r2, [pc, #352]	; (800565c <HAL_TIM_Base_Init+0x184>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d022      	beq.n	8005544 <HAL_TIM_Base_Init+0x6c>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005506:	d01d      	beq.n	8005544 <HAL_TIM_Base_Init+0x6c>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a54      	ldr	r2, [pc, #336]	; (8005660 <HAL_TIM_Base_Init+0x188>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d018      	beq.n	8005544 <HAL_TIM_Base_Init+0x6c>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a53      	ldr	r2, [pc, #332]	; (8005664 <HAL_TIM_Base_Init+0x18c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d013      	beq.n	8005544 <HAL_TIM_Base_Init+0x6c>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a51      	ldr	r2, [pc, #324]	; (8005668 <HAL_TIM_Base_Init+0x190>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d00e      	beq.n	8005544 <HAL_TIM_Base_Init+0x6c>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a50      	ldr	r2, [pc, #320]	; (800566c <HAL_TIM_Base_Init+0x194>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d009      	beq.n	8005544 <HAL_TIM_Base_Init+0x6c>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a4e      	ldr	r2, [pc, #312]	; (8005670 <HAL_TIM_Base_Init+0x198>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d004      	beq.n	8005544 <HAL_TIM_Base_Init+0x6c>
 800553a:	f240 1113 	movw	r1, #275	; 0x113
 800553e:	484d      	ldr	r0, [pc, #308]	; (8005674 <HAL_TIM_Base_Init+0x19c>)
 8005540:	f7fc f8d6 	bl	80016f0 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d014      	beq.n	8005576 <HAL_TIM_Base_Init+0x9e>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	2b10      	cmp	r3, #16
 8005552:	d010      	beq.n	8005576 <HAL_TIM_Base_Init+0x9e>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	2b20      	cmp	r3, #32
 800555a:	d00c      	beq.n	8005576 <HAL_TIM_Base_Init+0x9e>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	2b40      	cmp	r3, #64	; 0x40
 8005562:	d008      	beq.n	8005576 <HAL_TIM_Base_Init+0x9e>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	2b60      	cmp	r3, #96	; 0x60
 800556a:	d004      	beq.n	8005576 <HAL_TIM_Base_Init+0x9e>
 800556c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8005570:	4840      	ldr	r0, [pc, #256]	; (8005674 <HAL_TIM_Base_Init+0x19c>)
 8005572:	f7fc f8bd 	bl	80016f0 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00e      	beq.n	800559c <HAL_TIM_Base_Init+0xc4>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005586:	d009      	beq.n	800559c <HAL_TIM_Base_Init+0xc4>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005590:	d004      	beq.n	800559c <HAL_TIM_Base_Init+0xc4>
 8005592:	f240 1115 	movw	r1, #277	; 0x115
 8005596:	4837      	ldr	r0, [pc, #220]	; (8005674 <HAL_TIM_Base_Init+0x19c>)
 8005598:	f7fc f8aa 	bl	80016f0 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d008      	beq.n	80055b6 <HAL_TIM_Base_Init+0xde>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	2b80      	cmp	r3, #128	; 0x80
 80055aa:	d004      	beq.n	80055b6 <HAL_TIM_Base_Init+0xde>
 80055ac:	f44f 718b 	mov.w	r1, #278	; 0x116
 80055b0:	4830      	ldr	r0, [pc, #192]	; (8005674 <HAL_TIM_Base_Init+0x19c>)
 80055b2:	f7fc f89d 	bl	80016f0 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d111      	bne.n	80055e6 <HAL_TIM_Base_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f001 ffc0 	bl	8007550 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d102      	bne.n	80055de <HAL_TIM_Base_Init+0x106>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a27      	ldr	r2, [pc, #156]	; (8005678 <HAL_TIM_Base_Init+0x1a0>)
 80055dc:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2202      	movs	r2, #2
 80055ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	3304      	adds	r3, #4
 80055f6:	4619      	mov	r1, r3
 80055f8:	4610      	mov	r0, r2
 80055fa:	f001 fbff 	bl	8006dfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	40012c00 	.word	0x40012c00
 800565c:	40013400 	.word	0x40013400
 8005660:	40000400 	.word	0x40000400
 8005664:	40000800 	.word	0x40000800
 8005668:	40000c00 	.word	0x40000c00
 800566c:	40001000 	.word	0x40001000
 8005670:	40001400 	.word	0x40001400
 8005674:	0800c3ec 	.word	0x0800c3ec
 8005678:	08001839 	.word	0x08001839

0800567c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a39      	ldr	r2, [pc, #228]	; (8005770 <HAL_TIM_Base_Start+0xf4>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d027      	beq.n	80056de <HAL_TIM_Base_Start+0x62>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a38      	ldr	r2, [pc, #224]	; (8005774 <HAL_TIM_Base_Start+0xf8>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d022      	beq.n	80056de <HAL_TIM_Base_Start+0x62>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a0:	d01d      	beq.n	80056de <HAL_TIM_Base_Start+0x62>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a34      	ldr	r2, [pc, #208]	; (8005778 <HAL_TIM_Base_Start+0xfc>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d018      	beq.n	80056de <HAL_TIM_Base_Start+0x62>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a32      	ldr	r2, [pc, #200]	; (800577c <HAL_TIM_Base_Start+0x100>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d013      	beq.n	80056de <HAL_TIM_Base_Start+0x62>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a31      	ldr	r2, [pc, #196]	; (8005780 <HAL_TIM_Base_Start+0x104>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d00e      	beq.n	80056de <HAL_TIM_Base_Start+0x62>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a2f      	ldr	r2, [pc, #188]	; (8005784 <HAL_TIM_Base_Start+0x108>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d009      	beq.n	80056de <HAL_TIM_Base_Start+0x62>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a2e      	ldr	r2, [pc, #184]	; (8005788 <HAL_TIM_Base_Start+0x10c>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d004      	beq.n	80056de <HAL_TIM_Base_Start+0x62>
 80056d4:	f44f 71ca 	mov.w	r1, #404	; 0x194
 80056d8:	482c      	ldr	r0, [pc, #176]	; (800578c <HAL_TIM_Base_Start+0x110>)
 80056da:	f7fc f809 	bl	80016f0 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d001      	beq.n	80056ee <HAL_TIM_Base_Start+0x72>
  {
    return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e03c      	b.n	8005768 <HAL_TIM_Base_Start+0xec>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2202      	movs	r2, #2
 80056f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a1d      	ldr	r2, [pc, #116]	; (8005770 <HAL_TIM_Base_Start+0xf4>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d018      	beq.n	8005732 <HAL_TIM_Base_Start+0xb6>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a1b      	ldr	r2, [pc, #108]	; (8005774 <HAL_TIM_Base_Start+0xf8>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d013      	beq.n	8005732 <HAL_TIM_Base_Start+0xb6>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005712:	d00e      	beq.n	8005732 <HAL_TIM_Base_Start+0xb6>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a17      	ldr	r2, [pc, #92]	; (8005778 <HAL_TIM_Base_Start+0xfc>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d009      	beq.n	8005732 <HAL_TIM_Base_Start+0xb6>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a16      	ldr	r2, [pc, #88]	; (800577c <HAL_TIM_Base_Start+0x100>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d004      	beq.n	8005732 <HAL_TIM_Base_Start+0xb6>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a14      	ldr	r2, [pc, #80]	; (8005780 <HAL_TIM_Base_Start+0x104>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d111      	bne.n	8005756 <HAL_TIM_Base_Start+0xda>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f003 0307 	and.w	r3, r3, #7
 800573c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2b06      	cmp	r3, #6
 8005742:	d010      	beq.n	8005766 <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f042 0201 	orr.w	r2, r2, #1
 8005752:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005754:	e007      	b.n	8005766 <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f042 0201 	orr.w	r2, r2, #1
 8005764:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	4618      	mov	r0, r3
 800576a:	3710      	adds	r7, #16
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	40012c00 	.word	0x40012c00
 8005774:	40013400 	.word	0x40013400
 8005778:	40000400 	.word	0x40000400
 800577c:	40000800 	.word	0x40000800
 8005780:	40000c00 	.word	0x40000c00
 8005784:	40001000 	.word	0x40001000
 8005788:	40001400 	.word	0x40001400
 800578c:	0800c3ec 	.word	0x0800c3ec

08005790 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a3d      	ldr	r2, [pc, #244]	; (8005894 <HAL_TIM_Base_Start_IT+0x104>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d027      	beq.n	80057f2 <HAL_TIM_Base_Start_IT+0x62>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a3c      	ldr	r2, [pc, #240]	; (8005898 <HAL_TIM_Base_Start_IT+0x108>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d022      	beq.n	80057f2 <HAL_TIM_Base_Start_IT+0x62>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b4:	d01d      	beq.n	80057f2 <HAL_TIM_Base_Start_IT+0x62>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a38      	ldr	r2, [pc, #224]	; (800589c <HAL_TIM_Base_Start_IT+0x10c>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d018      	beq.n	80057f2 <HAL_TIM_Base_Start_IT+0x62>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a36      	ldr	r2, [pc, #216]	; (80058a0 <HAL_TIM_Base_Start_IT+0x110>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d013      	beq.n	80057f2 <HAL_TIM_Base_Start_IT+0x62>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a35      	ldr	r2, [pc, #212]	; (80058a4 <HAL_TIM_Base_Start_IT+0x114>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d00e      	beq.n	80057f2 <HAL_TIM_Base_Start_IT+0x62>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a33      	ldr	r2, [pc, #204]	; (80058a8 <HAL_TIM_Base_Start_IT+0x118>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d009      	beq.n	80057f2 <HAL_TIM_Base_Start_IT+0x62>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a32      	ldr	r2, [pc, #200]	; (80058ac <HAL_TIM_Base_Start_IT+0x11c>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d004      	beq.n	80057f2 <HAL_TIM_Base_Start_IT+0x62>
 80057e8:	f240 11cf 	movw	r1, #463	; 0x1cf
 80057ec:	4830      	ldr	r0, [pc, #192]	; (80058b0 <HAL_TIM_Base_Start_IT+0x120>)
 80057ee:	f7fb ff7f 	bl	80016f0 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d001      	beq.n	8005802 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e044      	b.n	800588c <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2202      	movs	r2, #2
 8005806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f042 0201 	orr.w	r2, r2, #1
 8005818:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a1d      	ldr	r2, [pc, #116]	; (8005894 <HAL_TIM_Base_Start_IT+0x104>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d018      	beq.n	8005856 <HAL_TIM_Base_Start_IT+0xc6>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a1b      	ldr	r2, [pc, #108]	; (8005898 <HAL_TIM_Base_Start_IT+0x108>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d013      	beq.n	8005856 <HAL_TIM_Base_Start_IT+0xc6>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005836:	d00e      	beq.n	8005856 <HAL_TIM_Base_Start_IT+0xc6>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a17      	ldr	r2, [pc, #92]	; (800589c <HAL_TIM_Base_Start_IT+0x10c>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d009      	beq.n	8005856 <HAL_TIM_Base_Start_IT+0xc6>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a16      	ldr	r2, [pc, #88]	; (80058a0 <HAL_TIM_Base_Start_IT+0x110>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d004      	beq.n	8005856 <HAL_TIM_Base_Start_IT+0xc6>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a14      	ldr	r2, [pc, #80]	; (80058a4 <HAL_TIM_Base_Start_IT+0x114>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d111      	bne.n	800587a <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f003 0307 	and.w	r3, r3, #7
 8005860:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2b06      	cmp	r3, #6
 8005866:	d010      	beq.n	800588a <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f042 0201 	orr.w	r2, r2, #1
 8005876:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005878:	e007      	b.n	800588a <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681a      	ldr	r2, [r3, #0]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f042 0201 	orr.w	r2, r2, #1
 8005888:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	40012c00 	.word	0x40012c00
 8005898:	40013400 	.word	0x40013400
 800589c:	40000400 	.word	0x40000400
 80058a0:	40000800 	.word	0x40000800
 80058a4:	40000c00 	.word	0x40000c00
 80058a8:	40001000 	.word	0x40001000
 80058ac:	40001400 	.word	0x40001400
 80058b0:	0800c3ec 	.word	0x0800c3ec

080058b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e0b2      	b.n	8005a2c <HAL_TIM_PWM_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a5a      	ldr	r2, [pc, #360]	; (8005a34 <HAL_TIM_PWM_Init+0x180>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d027      	beq.n	8005920 <HAL_TIM_PWM_Init+0x6c>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a58      	ldr	r2, [pc, #352]	; (8005a38 <HAL_TIM_PWM_Init+0x184>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d022      	beq.n	8005920 <HAL_TIM_PWM_Init+0x6c>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058e2:	d01d      	beq.n	8005920 <HAL_TIM_PWM_Init+0x6c>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a54      	ldr	r2, [pc, #336]	; (8005a3c <HAL_TIM_PWM_Init+0x188>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d018      	beq.n	8005920 <HAL_TIM_PWM_Init+0x6c>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a53      	ldr	r2, [pc, #332]	; (8005a40 <HAL_TIM_PWM_Init+0x18c>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d013      	beq.n	8005920 <HAL_TIM_PWM_Init+0x6c>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a51      	ldr	r2, [pc, #324]	; (8005a44 <HAL_TIM_PWM_Init+0x190>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d00e      	beq.n	8005920 <HAL_TIM_PWM_Init+0x6c>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a50      	ldr	r2, [pc, #320]	; (8005a48 <HAL_TIM_PWM_Init+0x194>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d009      	beq.n	8005920 <HAL_TIM_PWM_Init+0x6c>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a4e      	ldr	r2, [pc, #312]	; (8005a4c <HAL_TIM_PWM_Init+0x198>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d004      	beq.n	8005920 <HAL_TIM_PWM_Init+0x6c>
 8005916:	f240 5113 	movw	r1, #1299	; 0x513
 800591a:	484d      	ldr	r0, [pc, #308]	; (8005a50 <HAL_TIM_PWM_Init+0x19c>)
 800591c:	f7fb fee8 	bl	80016f0 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d014      	beq.n	8005952 <HAL_TIM_PWM_Init+0x9e>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	2b10      	cmp	r3, #16
 800592e:	d010      	beq.n	8005952 <HAL_TIM_PWM_Init+0x9e>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	2b20      	cmp	r3, #32
 8005936:	d00c      	beq.n	8005952 <HAL_TIM_PWM_Init+0x9e>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	2b40      	cmp	r3, #64	; 0x40
 800593e:	d008      	beq.n	8005952 <HAL_TIM_PWM_Init+0x9e>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	2b60      	cmp	r3, #96	; 0x60
 8005946:	d004      	beq.n	8005952 <HAL_TIM_PWM_Init+0x9e>
 8005948:	f240 5114 	movw	r1, #1300	; 0x514
 800594c:	4840      	ldr	r0, [pc, #256]	; (8005a50 <HAL_TIM_PWM_Init+0x19c>)
 800594e:	f7fb fecf 	bl	80016f0 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00e      	beq.n	8005978 <HAL_TIM_PWM_Init+0xc4>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005962:	d009      	beq.n	8005978 <HAL_TIM_PWM_Init+0xc4>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800596c:	d004      	beq.n	8005978 <HAL_TIM_PWM_Init+0xc4>
 800596e:	f240 5115 	movw	r1, #1301	; 0x515
 8005972:	4837      	ldr	r0, [pc, #220]	; (8005a50 <HAL_TIM_PWM_Init+0x19c>)
 8005974:	f7fb febc 	bl	80016f0 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d008      	beq.n	8005992 <HAL_TIM_PWM_Init+0xde>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	2b80      	cmp	r3, #128	; 0x80
 8005986:	d004      	beq.n	8005992 <HAL_TIM_PWM_Init+0xde>
 8005988:	f240 5116 	movw	r1, #1302	; 0x516
 800598c:	4830      	ldr	r0, [pc, #192]	; (8005a50 <HAL_TIM_PWM_Init+0x19c>)
 800598e:	f7fb feaf 	bl	80016f0 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d111      	bne.n	80059c2 <HAL_TIM_PWM_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f001 fdd2 	bl	8007550 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d102      	bne.n	80059ba <HAL_TIM_PWM_Init+0x106>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a27      	ldr	r2, [pc, #156]	; (8005a54 <HAL_TIM_PWM_Init+0x1a0>)
 80059b8:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2202      	movs	r2, #2
 80059c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	3304      	adds	r3, #4
 80059d2:	4619      	mov	r1, r3
 80059d4:	4610      	mov	r0, r2
 80059d6:	f001 fa11 	bl	8006dfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3708      	adds	r7, #8
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	40012c00 	.word	0x40012c00
 8005a38:	40013400 	.word	0x40013400
 8005a3c:	40000400 	.word	0x40000400
 8005a40:	40000800 	.word	0x40000800
 8005a44:	40000c00 	.word	0x40000c00
 8005a48:	40001000 	.word	0x40001000
 8005a4c:	40001400 	.word	0x40001400
 8005a50:	0800c3ec 	.word	0x0800c3ec
 8005a54:	08005a59 	.word	0x08005a59

08005a58 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b083      	sub	sp, #12
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a60:	bf00      	nop
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bc80      	pop	{r7}
 8005a68:	4770      	bx	lr
	...

08005a6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a8a      	ldr	r2, [pc, #552]	; (8005ca4 <HAL_TIM_PWM_Start+0x238>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d10b      	bne.n	8005a98 <HAL_TIM_PWM_Start+0x2c>
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d062      	beq.n	8005b4c <HAL_TIM_PWM_Start+0xe0>
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2b04      	cmp	r3, #4
 8005a8a:	d05f      	beq.n	8005b4c <HAL_TIM_PWM_Start+0xe0>
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	2b08      	cmp	r3, #8
 8005a90:	d05c      	beq.n	8005b4c <HAL_TIM_PWM_Start+0xe0>
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b0c      	cmp	r3, #12
 8005a96:	d059      	beq.n	8005b4c <HAL_TIM_PWM_Start+0xe0>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a82      	ldr	r2, [pc, #520]	; (8005ca8 <HAL_TIM_PWM_Start+0x23c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d10b      	bne.n	8005aba <HAL_TIM_PWM_Start+0x4e>
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d051      	beq.n	8005b4c <HAL_TIM_PWM_Start+0xe0>
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	2b04      	cmp	r3, #4
 8005aac:	d04e      	beq.n	8005b4c <HAL_TIM_PWM_Start+0xe0>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d04b      	beq.n	8005b4c <HAL_TIM_PWM_Start+0xe0>
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	2b0c      	cmp	r3, #12
 8005ab8:	d048      	beq.n	8005b4c <HAL_TIM_PWM_Start+0xe0>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ac2:	d10b      	bne.n	8005adc <HAL_TIM_PWM_Start+0x70>
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d040      	beq.n	8005b4c <HAL_TIM_PWM_Start+0xe0>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b04      	cmp	r3, #4
 8005ace:	d03d      	beq.n	8005b4c <HAL_TIM_PWM_Start+0xe0>
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	2b08      	cmp	r3, #8
 8005ad4:	d03a      	beq.n	8005b4c <HAL_TIM_PWM_Start+0xe0>
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2b0c      	cmp	r3, #12
 8005ada:	d037      	beq.n	8005b4c <HAL_TIM_PWM_Start+0xe0>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a72      	ldr	r2, [pc, #456]	; (8005cac <HAL_TIM_PWM_Start+0x240>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d10b      	bne.n	8005afe <HAL_TIM_PWM_Start+0x92>
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d02f      	beq.n	8005b4c <HAL_TIM_PWM_Start+0xe0>
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	2b04      	cmp	r3, #4
 8005af0:	d02c      	beq.n	8005b4c <HAL_TIM_PWM_Start+0xe0>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b08      	cmp	r3, #8
 8005af6:	d029      	beq.n	8005b4c <HAL_TIM_PWM_Start+0xe0>
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	2b0c      	cmp	r3, #12
 8005afc:	d026      	beq.n	8005b4c <HAL_TIM_PWM_Start+0xe0>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a6b      	ldr	r2, [pc, #428]	; (8005cb0 <HAL_TIM_PWM_Start+0x244>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d10b      	bne.n	8005b20 <HAL_TIM_PWM_Start+0xb4>
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d01e      	beq.n	8005b4c <HAL_TIM_PWM_Start+0xe0>
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b04      	cmp	r3, #4
 8005b12:	d01b      	beq.n	8005b4c <HAL_TIM_PWM_Start+0xe0>
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	2b08      	cmp	r3, #8
 8005b18:	d018      	beq.n	8005b4c <HAL_TIM_PWM_Start+0xe0>
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	2b0c      	cmp	r3, #12
 8005b1e:	d015      	beq.n	8005b4c <HAL_TIM_PWM_Start+0xe0>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a63      	ldr	r2, [pc, #396]	; (8005cb4 <HAL_TIM_PWM_Start+0x248>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d10b      	bne.n	8005b42 <HAL_TIM_PWM_Start+0xd6>
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00d      	beq.n	8005b4c <HAL_TIM_PWM_Start+0xe0>
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	2b04      	cmp	r3, #4
 8005b34:	d00a      	beq.n	8005b4c <HAL_TIM_PWM_Start+0xe0>
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	2b08      	cmp	r3, #8
 8005b3a:	d007      	beq.n	8005b4c <HAL_TIM_PWM_Start+0xe0>
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	2b0c      	cmp	r3, #12
 8005b40:	d004      	beq.n	8005b4c <HAL_TIM_PWM_Start+0xe0>
 8005b42:	f240 5199 	movw	r1, #1433	; 0x599
 8005b46:	485c      	ldr	r0, [pc, #368]	; (8005cb8 <HAL_TIM_PWM_Start+0x24c>)
 8005b48:	f7fb fdd2 	bl	80016f0 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d109      	bne.n	8005b66 <HAL_TIM_PWM_Start+0xfa>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	bf14      	ite	ne
 8005b5e:	2301      	movne	r3, #1
 8005b60:	2300      	moveq	r3, #0
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	e022      	b.n	8005bac <HAL_TIM_PWM_Start+0x140>
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	2b04      	cmp	r3, #4
 8005b6a:	d109      	bne.n	8005b80 <HAL_TIM_PWM_Start+0x114>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	bf14      	ite	ne
 8005b78:	2301      	movne	r3, #1
 8005b7a:	2300      	moveq	r3, #0
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	e015      	b.n	8005bac <HAL_TIM_PWM_Start+0x140>
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	2b08      	cmp	r3, #8
 8005b84:	d109      	bne.n	8005b9a <HAL_TIM_PWM_Start+0x12e>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	bf14      	ite	ne
 8005b92:	2301      	movne	r3, #1
 8005b94:	2300      	moveq	r3, #0
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	e008      	b.n	8005bac <HAL_TIM_PWM_Start+0x140>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	bf14      	ite	ne
 8005ba6:	2301      	movne	r3, #1
 8005ba8:	2300      	moveq	r3, #0
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d001      	beq.n	8005bb4 <HAL_TIM_PWM_Start+0x148>
  {
    return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e072      	b.n	8005c9a <HAL_TIM_PWM_Start+0x22e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d104      	bne.n	8005bc4 <HAL_TIM_PWM_Start+0x158>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2202      	movs	r2, #2
 8005bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bc2:	e013      	b.n	8005bec <HAL_TIM_PWM_Start+0x180>
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	2b04      	cmp	r3, #4
 8005bc8:	d104      	bne.n	8005bd4 <HAL_TIM_PWM_Start+0x168>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2202      	movs	r2, #2
 8005bce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bd2:	e00b      	b.n	8005bec <HAL_TIM_PWM_Start+0x180>
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	2b08      	cmp	r3, #8
 8005bd8:	d104      	bne.n	8005be4 <HAL_TIM_PWM_Start+0x178>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2202      	movs	r2, #2
 8005bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005be2:	e003      	b.n	8005bec <HAL_TIM_PWM_Start+0x180>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2202      	movs	r2, #2
 8005be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	6839      	ldr	r1, [r7, #0]
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f001 fc4b 	bl	8007490 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a29      	ldr	r2, [pc, #164]	; (8005ca4 <HAL_TIM_PWM_Start+0x238>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d004      	beq.n	8005c0e <HAL_TIM_PWM_Start+0x1a2>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a27      	ldr	r2, [pc, #156]	; (8005ca8 <HAL_TIM_PWM_Start+0x23c>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d101      	bne.n	8005c12 <HAL_TIM_PWM_Start+0x1a6>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e000      	b.n	8005c14 <HAL_TIM_PWM_Start+0x1a8>
 8005c12:	2300      	movs	r3, #0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d007      	beq.n	8005c28 <HAL_TIM_PWM_Start+0x1bc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c26:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a1d      	ldr	r2, [pc, #116]	; (8005ca4 <HAL_TIM_PWM_Start+0x238>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d018      	beq.n	8005c64 <HAL_TIM_PWM_Start+0x1f8>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a1c      	ldr	r2, [pc, #112]	; (8005ca8 <HAL_TIM_PWM_Start+0x23c>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d013      	beq.n	8005c64 <HAL_TIM_PWM_Start+0x1f8>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c44:	d00e      	beq.n	8005c64 <HAL_TIM_PWM_Start+0x1f8>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a18      	ldr	r2, [pc, #96]	; (8005cac <HAL_TIM_PWM_Start+0x240>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d009      	beq.n	8005c64 <HAL_TIM_PWM_Start+0x1f8>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a16      	ldr	r2, [pc, #88]	; (8005cb0 <HAL_TIM_PWM_Start+0x244>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d004      	beq.n	8005c64 <HAL_TIM_PWM_Start+0x1f8>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a15      	ldr	r2, [pc, #84]	; (8005cb4 <HAL_TIM_PWM_Start+0x248>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d111      	bne.n	8005c88 <HAL_TIM_PWM_Start+0x21c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f003 0307 	and.w	r3, r3, #7
 8005c6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2b06      	cmp	r3, #6
 8005c74:	d010      	beq.n	8005c98 <HAL_TIM_PWM_Start+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f042 0201 	orr.w	r2, r2, #1
 8005c84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c86:	e007      	b.n	8005c98 <HAL_TIM_PWM_Start+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f042 0201 	orr.w	r2, r2, #1
 8005c96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	40012c00 	.word	0x40012c00
 8005ca8:	40013400 	.word	0x40013400
 8005cac:	40000400 	.word	0x40000400
 8005cb0:	40000800 	.word	0x40000800
 8005cb4:	40000c00 	.word	0x40000c00
 8005cb8:	0800c3ec 	.word	0x0800c3ec

08005cbc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e192      	b.n	8005ff6 <HAL_TIM_Encoder_Init+0x33a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a7d      	ldr	r2, [pc, #500]	; (8005ecc <HAL_TIM_Encoder_Init+0x210>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d01d      	beq.n	8005d16 <HAL_TIM_Encoder_Init+0x5a>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a7c      	ldr	r2, [pc, #496]	; (8005ed0 <HAL_TIM_Encoder_Init+0x214>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d018      	beq.n	8005d16 <HAL_TIM_Encoder_Init+0x5a>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cec:	d013      	beq.n	8005d16 <HAL_TIM_Encoder_Init+0x5a>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a78      	ldr	r2, [pc, #480]	; (8005ed4 <HAL_TIM_Encoder_Init+0x218>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d00e      	beq.n	8005d16 <HAL_TIM_Encoder_Init+0x5a>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a76      	ldr	r2, [pc, #472]	; (8005ed8 <HAL_TIM_Encoder_Init+0x21c>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d009      	beq.n	8005d16 <HAL_TIM_Encoder_Init+0x5a>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a75      	ldr	r2, [pc, #468]	; (8005edc <HAL_TIM_Encoder_Init+0x220>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d004      	beq.n	8005d16 <HAL_TIM_Encoder_Init+0x5a>
 8005d0c:	f640 318e 	movw	r1, #2958	; 0xb8e
 8005d10:	4873      	ldr	r0, [pc, #460]	; (8005ee0 <HAL_TIM_Encoder_Init+0x224>)
 8005d12:	f7fb fced 	bl	80016f0 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d014      	beq.n	8005d48 <HAL_TIM_Encoder_Init+0x8c>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	2b10      	cmp	r3, #16
 8005d24:	d010      	beq.n	8005d48 <HAL_TIM_Encoder_Init+0x8c>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	2b20      	cmp	r3, #32
 8005d2c:	d00c      	beq.n	8005d48 <HAL_TIM_Encoder_Init+0x8c>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	2b40      	cmp	r3, #64	; 0x40
 8005d34:	d008      	beq.n	8005d48 <HAL_TIM_Encoder_Init+0x8c>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	2b60      	cmp	r3, #96	; 0x60
 8005d3c:	d004      	beq.n	8005d48 <HAL_TIM_Encoder_Init+0x8c>
 8005d3e:	f640 318f 	movw	r1, #2959	; 0xb8f
 8005d42:	4867      	ldr	r0, [pc, #412]	; (8005ee0 <HAL_TIM_Encoder_Init+0x224>)
 8005d44:	f7fb fcd4 	bl	80016f0 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00e      	beq.n	8005d6e <HAL_TIM_Encoder_Init+0xb2>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d58:	d009      	beq.n	8005d6e <HAL_TIM_Encoder_Init+0xb2>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d62:	d004      	beq.n	8005d6e <HAL_TIM_Encoder_Init+0xb2>
 8005d64:	f44f 6139 	mov.w	r1, #2960	; 0xb90
 8005d68:	485d      	ldr	r0, [pc, #372]	; (8005ee0 <HAL_TIM_Encoder_Init+0x224>)
 8005d6a:	f7fb fcc1 	bl	80016f0 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d008      	beq.n	8005d88 <HAL_TIM_Encoder_Init+0xcc>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	2b80      	cmp	r3, #128	; 0x80
 8005d7c:	d004      	beq.n	8005d88 <HAL_TIM_Encoder_Init+0xcc>
 8005d7e:	f640 3191 	movw	r1, #2961	; 0xb91
 8005d82:	4857      	ldr	r0, [pc, #348]	; (8005ee0 <HAL_TIM_Encoder_Init+0x224>)
 8005d84:	f7fb fcb4 	bl	80016f0 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d00c      	beq.n	8005daa <HAL_TIM_Encoder_Init+0xee>
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d008      	beq.n	8005daa <HAL_TIM_Encoder_Init+0xee>
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2b03      	cmp	r3, #3
 8005d9e:	d004      	beq.n	8005daa <HAL_TIM_Encoder_Init+0xee>
 8005da0:	f640 3192 	movw	r1, #2962	; 0xb92
 8005da4:	484e      	ldr	r0, [pc, #312]	; (8005ee0 <HAL_TIM_Encoder_Init+0x224>)
 8005da6:	f7fb fca3 	bl	80016f0 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d00c      	beq.n	8005dcc <HAL_TIM_Encoder_Init+0x110>
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d008      	beq.n	8005dcc <HAL_TIM_Encoder_Init+0x110>
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	2b03      	cmp	r3, #3
 8005dc0:	d004      	beq.n	8005dcc <HAL_TIM_Encoder_Init+0x110>
 8005dc2:	f640 3193 	movw	r1, #2963	; 0xb93
 8005dc6:	4846      	ldr	r0, [pc, #280]	; (8005ee0 <HAL_TIM_Encoder_Init+0x224>)
 8005dc8:	f7fb fc92 	bl	80016f0 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d00c      	beq.n	8005dee <HAL_TIM_Encoder_Init+0x132>
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	699b      	ldr	r3, [r3, #24]
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d008      	beq.n	8005dee <HAL_TIM_Encoder_Init+0x132>
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	2b03      	cmp	r3, #3
 8005de2:	d004      	beq.n	8005dee <HAL_TIM_Encoder_Init+0x132>
 8005de4:	f640 3194 	movw	r1, #2964	; 0xb94
 8005de8:	483d      	ldr	r0, [pc, #244]	; (8005ee0 <HAL_TIM_Encoder_Init+0x224>)
 8005dea:	f7fb fc81 	bl	80016f0 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d008      	beq.n	8005e08 <HAL_TIM_Encoder_Init+0x14c>
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d004      	beq.n	8005e08 <HAL_TIM_Encoder_Init+0x14c>
 8005dfe:	f640 3195 	movw	r1, #2965	; 0xb95
 8005e02:	4837      	ldr	r0, [pc, #220]	; (8005ee0 <HAL_TIM_Encoder_Init+0x224>)
 8005e04:	f7fb fc74 	bl	80016f0 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	695b      	ldr	r3, [r3, #20]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d008      	beq.n	8005e22 <HAL_TIM_Encoder_Init+0x166>
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	695b      	ldr	r3, [r3, #20]
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d004      	beq.n	8005e22 <HAL_TIM_Encoder_Init+0x166>
 8005e18:	f640 3196 	movw	r1, #2966	; 0xb96
 8005e1c:	4830      	ldr	r0, [pc, #192]	; (8005ee0 <HAL_TIM_Encoder_Init+0x224>)
 8005e1e:	f7fb fc67 	bl	80016f0 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d010      	beq.n	8005e4c <HAL_TIM_Encoder_Init+0x190>
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	2b04      	cmp	r3, #4
 8005e30:	d00c      	beq.n	8005e4c <HAL_TIM_Encoder_Init+0x190>
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	2b08      	cmp	r3, #8
 8005e38:	d008      	beq.n	8005e4c <HAL_TIM_Encoder_Init+0x190>
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	2b0c      	cmp	r3, #12
 8005e40:	d004      	beq.n	8005e4c <HAL_TIM_Encoder_Init+0x190>
 8005e42:	f640 3197 	movw	r1, #2967	; 0xb97
 8005e46:	4826      	ldr	r0, [pc, #152]	; (8005ee0 <HAL_TIM_Encoder_Init+0x224>)
 8005e48:	f7fb fc52 	bl	80016f0 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	69db      	ldr	r3, [r3, #28]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d010      	beq.n	8005e76 <HAL_TIM_Encoder_Init+0x1ba>
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	69db      	ldr	r3, [r3, #28]
 8005e58:	2b04      	cmp	r3, #4
 8005e5a:	d00c      	beq.n	8005e76 <HAL_TIM_Encoder_Init+0x1ba>
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	69db      	ldr	r3, [r3, #28]
 8005e60:	2b08      	cmp	r3, #8
 8005e62:	d008      	beq.n	8005e76 <HAL_TIM_Encoder_Init+0x1ba>
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	69db      	ldr	r3, [r3, #28]
 8005e68:	2b0c      	cmp	r3, #12
 8005e6a:	d004      	beq.n	8005e76 <HAL_TIM_Encoder_Init+0x1ba>
 8005e6c:	f640 3198 	movw	r1, #2968	; 0xb98
 8005e70:	481b      	ldr	r0, [pc, #108]	; (8005ee0 <HAL_TIM_Encoder_Init+0x224>)
 8005e72:	f7fb fc3d 	bl	80016f0 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	2b0f      	cmp	r3, #15
 8005e7c:	d904      	bls.n	8005e88 <HAL_TIM_Encoder_Init+0x1cc>
 8005e7e:	f640 3199 	movw	r1, #2969	; 0xb99
 8005e82:	4817      	ldr	r0, [pc, #92]	; (8005ee0 <HAL_TIM_Encoder_Init+0x224>)
 8005e84:	f7fb fc34 	bl	80016f0 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	2b0f      	cmp	r3, #15
 8005e8e:	d904      	bls.n	8005e9a <HAL_TIM_Encoder_Init+0x1de>
 8005e90:	f640 319a 	movw	r1, #2970	; 0xb9a
 8005e94:	4812      	ldr	r0, [pc, #72]	; (8005ee0 <HAL_TIM_Encoder_Init+0x224>)
 8005e96:	f7fb fc2b 	bl	80016f0 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d120      	bne.n	8005ee8 <HAL_TIM_Encoder_Init+0x22c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f001 fb4e 	bl	8007550 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d102      	bne.n	8005ec2 <HAL_TIM_Encoder_Init+0x206>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a09      	ldr	r2, [pc, #36]	; (8005ee4 <HAL_TIM_Encoder_Init+0x228>)
 8005ec0:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	4798      	blx	r3
 8005eca:	e00d      	b.n	8005ee8 <HAL_TIM_Encoder_Init+0x22c>
 8005ecc:	40012c00 	.word	0x40012c00
 8005ed0:	40013400 	.word	0x40013400
 8005ed4:	40000400 	.word	0x40000400
 8005ed8:	40000800 	.word	0x40000800
 8005edc:	40000c00 	.word	0x40000c00
 8005ee0:	0800c3ec 	.word	0x0800c3ec
 8005ee4:	080018fd 	.word	0x080018fd
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2202      	movs	r2, #2
 8005eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	6812      	ldr	r2, [r2, #0]
 8005efa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005efe:	f023 0307 	bic.w	r3, r3, #7
 8005f02:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	3304      	adds	r3, #4
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	4610      	mov	r0, r2
 8005f10:	f000 ff74 	bl	8006dfc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f3c:	f023 0303 	bic.w	r3, r3, #3
 8005f40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	689a      	ldr	r2, [r3, #8]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	021b      	lsls	r3, r3, #8
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	693a      	ldr	r2, [r7, #16]
 8005f50:	4313      	orrs	r3, r2
 8005f52:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005f5a:	f023 030c 	bic.w	r3, r3, #12
 8005f5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	68da      	ldr	r2, [r3, #12]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	69db      	ldr	r3, [r3, #28]
 8005f74:	021b      	lsls	r3, r3, #8
 8005f76:	4313      	orrs	r3, r2
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	011a      	lsls	r2, r3, #4
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	6a1b      	ldr	r3, [r3, #32]
 8005f88:	031b      	lsls	r3, r3, #12
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005f98:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	685a      	ldr	r2, [r3, #4]
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	695b      	ldr	r3, [r3, #20]
 8005fa2:	011b      	lsls	r3, r3, #4
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3718      	adds	r7, #24
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop

08006000 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006010:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006018:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006020:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006028:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a5d      	ldr	r2, [pc, #372]	; (80061a4 <HAL_TIM_Encoder_Start_IT+0x1a4>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d01d      	beq.n	8006070 <HAL_TIM_Encoder_Start_IT+0x70>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a5b      	ldr	r2, [pc, #364]	; (80061a8 <HAL_TIM_Encoder_Start_IT+0x1a8>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d018      	beq.n	8006070 <HAL_TIM_Encoder_Start_IT+0x70>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006046:	d013      	beq.n	8006070 <HAL_TIM_Encoder_Start_IT+0x70>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a57      	ldr	r2, [pc, #348]	; (80061ac <HAL_TIM_Encoder_Start_IT+0x1ac>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d00e      	beq.n	8006070 <HAL_TIM_Encoder_Start_IT+0x70>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a56      	ldr	r2, [pc, #344]	; (80061b0 <HAL_TIM_Encoder_Start_IT+0x1b0>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d009      	beq.n	8006070 <HAL_TIM_Encoder_Start_IT+0x70>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a54      	ldr	r2, [pc, #336]	; (80061b4 <HAL_TIM_Encoder_Start_IT+0x1b4>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d004      	beq.n	8006070 <HAL_TIM_Encoder_Start_IT+0x70>
 8006066:	f640 41e4 	movw	r1, #3300	; 0xce4
 800606a:	4853      	ldr	r0, [pc, #332]	; (80061b8 <HAL_TIM_Encoder_Start_IT+0x1b8>)
 800606c:	f7fb fb40 	bl	80016f0 <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d110      	bne.n	8006098 <HAL_TIM_Encoder_Start_IT+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006076:	7bfb      	ldrb	r3, [r7, #15]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d102      	bne.n	8006082 <HAL_TIM_Encoder_Start_IT+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800607c:	7b7b      	ldrb	r3, [r7, #13]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d001      	beq.n	8006086 <HAL_TIM_Encoder_Start_IT+0x86>
    {
      return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e089      	b.n	800619a <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2202      	movs	r2, #2
 800608a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2202      	movs	r2, #2
 8006092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006096:	e031      	b.n	80060fc <HAL_TIM_Encoder_Start_IT+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	2b04      	cmp	r3, #4
 800609c:	d110      	bne.n	80060c0 <HAL_TIM_Encoder_Start_IT+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800609e:	7bbb      	ldrb	r3, [r7, #14]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d102      	bne.n	80060aa <HAL_TIM_Encoder_Start_IT+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80060a4:	7b3b      	ldrb	r3, [r7, #12]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d001      	beq.n	80060ae <HAL_TIM_Encoder_Start_IT+0xae>
    {
      return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e075      	b.n	800619a <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2202      	movs	r2, #2
 80060b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2202      	movs	r2, #2
 80060ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060be:	e01d      	b.n	80060fc <HAL_TIM_Encoder_Start_IT+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060c0:	7bfb      	ldrb	r3, [r7, #15]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d108      	bne.n	80060d8 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80060c6:	7bbb      	ldrb	r3, [r7, #14]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d105      	bne.n	80060d8 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060cc:	7b7b      	ldrb	r3, [r7, #13]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d102      	bne.n	80060d8 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80060d2:	7b3b      	ldrb	r3, [r7, #12]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d001      	beq.n	80060dc <HAL_TIM_Encoder_Start_IT+0xdc>
    {
      return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e05e      	b.n	800619a <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2202      	movs	r2, #2
 80060e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2202      	movs	r2, #2
 80060e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2202      	movs	r2, #2
 80060f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2202      	movs	r2, #2
 80060f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d003      	beq.n	800610a <HAL_TIM_Encoder_Start_IT+0x10a>
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	2b04      	cmp	r3, #4
 8006106:	d010      	beq.n	800612a <HAL_TIM_Encoder_Start_IT+0x12a>
 8006108:	e01f      	b.n	800614a <HAL_TIM_Encoder_Start_IT+0x14a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2201      	movs	r2, #1
 8006110:	2100      	movs	r1, #0
 8006112:	4618      	mov	r0, r3
 8006114:	f001 f9bc 	bl	8007490 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68da      	ldr	r2, [r3, #12]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f042 0202 	orr.w	r2, r2, #2
 8006126:	60da      	str	r2, [r3, #12]
      break;
 8006128:	e02e      	b.n	8006188 <HAL_TIM_Encoder_Start_IT+0x188>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2201      	movs	r2, #1
 8006130:	2104      	movs	r1, #4
 8006132:	4618      	mov	r0, r3
 8006134:	f001 f9ac 	bl	8007490 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68da      	ldr	r2, [r3, #12]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f042 0204 	orr.w	r2, r2, #4
 8006146:	60da      	str	r2, [r3, #12]
      break;
 8006148:	e01e      	b.n	8006188 <HAL_TIM_Encoder_Start_IT+0x188>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2201      	movs	r2, #1
 8006150:	2100      	movs	r1, #0
 8006152:	4618      	mov	r0, r3
 8006154:	f001 f99c 	bl	8007490 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2201      	movs	r2, #1
 800615e:	2104      	movs	r1, #4
 8006160:	4618      	mov	r0, r3
 8006162:	f001 f995 	bl	8007490 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68da      	ldr	r2, [r3, #12]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f042 0202 	orr.w	r2, r2, #2
 8006174:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68da      	ldr	r2, [r3, #12]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f042 0204 	orr.w	r2, r2, #4
 8006184:	60da      	str	r2, [r3, #12]
      break;
 8006186:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f042 0201 	orr.w	r2, r2, #1
 8006196:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	40012c00 	.word	0x40012c00
 80061a8:	40013400 	.word	0x40013400
 80061ac:	40000400 	.word	0x40000400
 80061b0:	40000800 	.word	0x40000800
 80061b4:	40000c00 	.word	0x40000c00
 80061b8:	0800c3ec 	.word	0x0800c3ec

080061bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	f003 0302 	and.w	r3, r3, #2
 80061ce:	2b02      	cmp	r3, #2
 80061d0:	d128      	bne.n	8006224 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	f003 0302 	and.w	r3, r3, #2
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d121      	bne.n	8006224 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f06f 0202 	mvn.w	r2, #2
 80061e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	f003 0303 	and.w	r3, r3, #3
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d005      	beq.n	800620a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	4798      	blx	r3
 8006208:	e009      	b.n	800621e <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	f003 0304 	and.w	r3, r3, #4
 800622e:	2b04      	cmp	r3, #4
 8006230:	d128      	bne.n	8006284 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	f003 0304 	and.w	r3, r3, #4
 800623c:	2b04      	cmp	r3, #4
 800623e:	d121      	bne.n	8006284 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f06f 0204 	mvn.w	r2, #4
 8006248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2202      	movs	r2, #2
 800624e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800625a:	2b00      	cmp	r3, #0
 800625c:	d005      	beq.n	800626a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	4798      	blx	r3
 8006268:	e009      	b.n	800627e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	f003 0308 	and.w	r3, r3, #8
 800628e:	2b08      	cmp	r3, #8
 8006290:	d128      	bne.n	80062e4 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	f003 0308 	and.w	r3, r3, #8
 800629c:	2b08      	cmp	r3, #8
 800629e:	d121      	bne.n	80062e4 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f06f 0208 	mvn.w	r2, #8
 80062a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2204      	movs	r2, #4
 80062ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	f003 0303 	and.w	r3, r3, #3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d005      	beq.n	80062ca <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	4798      	blx	r3
 80062c8:	e009      	b.n	80062de <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	f003 0310 	and.w	r3, r3, #16
 80062ee:	2b10      	cmp	r3, #16
 80062f0:	d128      	bne.n	8006344 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	f003 0310 	and.w	r3, r3, #16
 80062fc:	2b10      	cmp	r3, #16
 80062fe:	d121      	bne.n	8006344 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f06f 0210 	mvn.w	r2, #16
 8006308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2208      	movs	r2, #8
 800630e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	69db      	ldr	r3, [r3, #28]
 8006316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800631a:	2b00      	cmp	r3, #0
 800631c:	d005      	beq.n	800632a <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	4798      	blx	r3
 8006328:	e009      	b.n	800633e <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b01      	cmp	r3, #1
 8006350:	d110      	bne.n	8006374 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	f003 0301 	and.w	r3, r3, #1
 800635c:	2b01      	cmp	r3, #1
 800635e:	d109      	bne.n	8006374 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f06f 0201 	mvn.w	r2, #1
 8006368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800637e:	2b80      	cmp	r3, #128	; 0x80
 8006380:	d110      	bne.n	80063a4 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800638c:	2b80      	cmp	r3, #128	; 0x80
 800638e:	d109      	bne.n	80063a4 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ae:	2b40      	cmp	r3, #64	; 0x40
 80063b0:	d110      	bne.n	80063d4 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063bc:	2b40      	cmp	r3, #64	; 0x40
 80063be:	d109      	bne.n	80063d4 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	f003 0320 	and.w	r3, r3, #32
 80063de:	2b20      	cmp	r3, #32
 80063e0:	d110      	bne.n	8006404 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	f003 0320 	and.w	r3, r3, #32
 80063ec:	2b20      	cmp	r3, #32
 80063ee:	d109      	bne.n	8006404 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f06f 0220 	mvn.w	r2, #32
 80063f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006404:	bf00      	nop
 8006406:	3708      	adds	r7, #8
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d010      	beq.n	8006440 <HAL_TIM_PWM_ConfigChannel+0x34>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b04      	cmp	r3, #4
 8006422:	d00d      	beq.n	8006440 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b08      	cmp	r3, #8
 8006428:	d00a      	beq.n	8006440 <HAL_TIM_PWM_ConfigChannel+0x34>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2b0c      	cmp	r3, #12
 800642e:	d007      	beq.n	8006440 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b3c      	cmp	r3, #60	; 0x3c
 8006434:	d004      	beq.n	8006440 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006436:	f241 0127 	movw	r1, #4135	; 0x1027
 800643a:	4890      	ldr	r0, [pc, #576]	; (800667c <HAL_TIM_PWM_ConfigChannel+0x270>)
 800643c:	f7fb f958 	bl	80016f0 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2b60      	cmp	r3, #96	; 0x60
 8006446:	d008      	beq.n	800645a <HAL_TIM_PWM_ConfigChannel+0x4e>
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2b70      	cmp	r3, #112	; 0x70
 800644e:	d004      	beq.n	800645a <HAL_TIM_PWM_ConfigChannel+0x4e>
 8006450:	f241 0128 	movw	r1, #4136	; 0x1028
 8006454:	4889      	ldr	r0, [pc, #548]	; (800667c <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006456:	f7fb f94b 	bl	80016f0 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d008      	beq.n	8006474 <HAL_TIM_PWM_ConfigChannel+0x68>
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	2b02      	cmp	r3, #2
 8006468:	d004      	beq.n	8006474 <HAL_TIM_PWM_ConfigChannel+0x68>
 800646a:	f241 0129 	movw	r1, #4137	; 0x1029
 800646e:	4883      	ldr	r0, [pc, #524]	; (800667c <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006470:	f7fb f93e 	bl	80016f0 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d008      	beq.n	800648e <HAL_TIM_PWM_ConfigChannel+0x82>
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	2b04      	cmp	r3, #4
 8006482:	d004      	beq.n	800648e <HAL_TIM_PWM_ConfigChannel+0x82>
 8006484:	f241 012a 	movw	r1, #4138	; 0x102a
 8006488:	487c      	ldr	r0, [pc, #496]	; (800667c <HAL_TIM_PWM_ConfigChannel+0x270>)
 800648a:	f7fb f931 	bl	80016f0 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006494:	2b01      	cmp	r3, #1
 8006496:	d101      	bne.n	800649c <HAL_TIM_PWM_ConfigChannel+0x90>
 8006498:	2302      	movs	r3, #2
 800649a:	e145      	b.n	8006728 <HAL_TIM_PWM_ConfigChannel+0x31c>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b0c      	cmp	r3, #12
 80064a8:	f200 8138 	bhi.w	800671c <HAL_TIM_PWM_ConfigChannel+0x310>
 80064ac:	a201      	add	r2, pc, #4	; (adr r2, 80064b4 <HAL_TIM_PWM_ConfigChannel+0xa8>)
 80064ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b2:	bf00      	nop
 80064b4:	080064e9 	.word	0x080064e9
 80064b8:	0800671d 	.word	0x0800671d
 80064bc:	0800671d 	.word	0x0800671d
 80064c0:	0800671d 	.word	0x0800671d
 80064c4:	0800656f 	.word	0x0800656f
 80064c8:	0800671d 	.word	0x0800671d
 80064cc:	0800671d 	.word	0x0800671d
 80064d0:	0800671d 	.word	0x0800671d
 80064d4:	080065f7 	.word	0x080065f7
 80064d8:	0800671d 	.word	0x0800671d
 80064dc:	0800671d 	.word	0x0800671d
 80064e0:	0800671d 	.word	0x0800671d
 80064e4:	08006695 	.word	0x08006695
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a64      	ldr	r2, [pc, #400]	; (8006680 <HAL_TIM_PWM_ConfigChannel+0x274>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d01d      	beq.n	800652e <HAL_TIM_PWM_ConfigChannel+0x122>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a63      	ldr	r2, [pc, #396]	; (8006684 <HAL_TIM_PWM_ConfigChannel+0x278>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d018      	beq.n	800652e <HAL_TIM_PWM_ConfigChannel+0x122>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006504:	d013      	beq.n	800652e <HAL_TIM_PWM_ConfigChannel+0x122>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a5f      	ldr	r2, [pc, #380]	; (8006688 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d00e      	beq.n	800652e <HAL_TIM_PWM_ConfigChannel+0x122>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a5d      	ldr	r2, [pc, #372]	; (800668c <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d009      	beq.n	800652e <HAL_TIM_PWM_ConfigChannel+0x122>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a5c      	ldr	r2, [pc, #368]	; (8006690 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d004      	beq.n	800652e <HAL_TIM_PWM_ConfigChannel+0x122>
 8006524:	f241 0134 	movw	r1, #4148	; 0x1034
 8006528:	4854      	ldr	r0, [pc, #336]	; (800667c <HAL_TIM_PWM_ConfigChannel+0x270>)
 800652a:	f7fb f8e1 	bl	80016f0 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68b9      	ldr	r1, [r7, #8]
 8006534:	4618      	mov	r0, r3
 8006536:	f000 fcdb 	bl	8006ef0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	699a      	ldr	r2, [r3, #24]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f042 0208 	orr.w	r2, r2, #8
 8006548:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	699a      	ldr	r2, [r3, #24]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f022 0204 	bic.w	r2, r2, #4
 8006558:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	6999      	ldr	r1, [r3, #24]
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	691a      	ldr	r2, [r3, #16]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	430a      	orrs	r2, r1
 800656a:	619a      	str	r2, [r3, #24]
      break;
 800656c:	e0d7      	b.n	800671e <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a43      	ldr	r2, [pc, #268]	; (8006680 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d01d      	beq.n	80065b4 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a41      	ldr	r2, [pc, #260]	; (8006684 <HAL_TIM_PWM_ConfigChannel+0x278>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d018      	beq.n	80065b4 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800658a:	d013      	beq.n	80065b4 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a3d      	ldr	r2, [pc, #244]	; (8006688 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d00e      	beq.n	80065b4 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a3c      	ldr	r2, [pc, #240]	; (800668c <HAL_TIM_PWM_ConfigChannel+0x280>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d009      	beq.n	80065b4 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a3a      	ldr	r2, [pc, #232]	; (8006690 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d004      	beq.n	80065b4 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80065aa:	f241 0145 	movw	r1, #4165	; 0x1045
 80065ae:	4833      	ldr	r0, [pc, #204]	; (800667c <HAL_TIM_PWM_ConfigChannel+0x270>)
 80065b0:	f7fb f89e 	bl	80016f0 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68b9      	ldr	r1, [r7, #8]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 fd32 	bl	8007024 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	699a      	ldr	r2, [r3, #24]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	699a      	ldr	r2, [r3, #24]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	6999      	ldr	r1, [r3, #24]
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	021a      	lsls	r2, r3, #8
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	430a      	orrs	r2, r1
 80065f2:	619a      	str	r2, [r3, #24]
      break;
 80065f4:	e093      	b.n	800671e <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a21      	ldr	r2, [pc, #132]	; (8006680 <HAL_TIM_PWM_ConfigChannel+0x274>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d01d      	beq.n	800663c <HAL_TIM_PWM_ConfigChannel+0x230>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a1f      	ldr	r2, [pc, #124]	; (8006684 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d018      	beq.n	800663c <HAL_TIM_PWM_ConfigChannel+0x230>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006612:	d013      	beq.n	800663c <HAL_TIM_PWM_ConfigChannel+0x230>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a1b      	ldr	r2, [pc, #108]	; (8006688 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d00e      	beq.n	800663c <HAL_TIM_PWM_ConfigChannel+0x230>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a1a      	ldr	r2, [pc, #104]	; (800668c <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d009      	beq.n	800663c <HAL_TIM_PWM_ConfigChannel+0x230>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a18      	ldr	r2, [pc, #96]	; (8006690 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d004      	beq.n	800663c <HAL_TIM_PWM_ConfigChannel+0x230>
 8006632:	f241 0156 	movw	r1, #4182	; 0x1056
 8006636:	4811      	ldr	r0, [pc, #68]	; (800667c <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006638:	f7fb f85a 	bl	80016f0 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	68b9      	ldr	r1, [r7, #8]
 8006642:	4618      	mov	r0, r3
 8006644:	f000 fd8c 	bl	8007160 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	69da      	ldr	r2, [r3, #28]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f042 0208 	orr.w	r2, r2, #8
 8006656:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	69da      	ldr	r2, [r3, #28]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f022 0204 	bic.w	r2, r2, #4
 8006666:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	69d9      	ldr	r1, [r3, #28]
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	691a      	ldr	r2, [r3, #16]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	61da      	str	r2, [r3, #28]
      break;
 800667a:	e050      	b.n	800671e <HAL_TIM_PWM_ConfigChannel+0x312>
 800667c:	0800c3ec 	.word	0x0800c3ec
 8006680:	40012c00 	.word	0x40012c00
 8006684:	40013400 	.word	0x40013400
 8006688:	40000400 	.word	0x40000400
 800668c:	40000800 	.word	0x40000800
 8006690:	40000c00 	.word	0x40000c00
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a25      	ldr	r2, [pc, #148]	; (8006730 <HAL_TIM_PWM_ConfigChannel+0x324>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d01d      	beq.n	80066da <HAL_TIM_PWM_ConfigChannel+0x2ce>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a24      	ldr	r2, [pc, #144]	; (8006734 <HAL_TIM_PWM_ConfigChannel+0x328>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d018      	beq.n	80066da <HAL_TIM_PWM_ConfigChannel+0x2ce>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066b0:	d013      	beq.n	80066da <HAL_TIM_PWM_ConfigChannel+0x2ce>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a20      	ldr	r2, [pc, #128]	; (8006738 <HAL_TIM_PWM_ConfigChannel+0x32c>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d00e      	beq.n	80066da <HAL_TIM_PWM_ConfigChannel+0x2ce>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a1e      	ldr	r2, [pc, #120]	; (800673c <HAL_TIM_PWM_ConfigChannel+0x330>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d009      	beq.n	80066da <HAL_TIM_PWM_ConfigChannel+0x2ce>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a1d      	ldr	r2, [pc, #116]	; (8006740 <HAL_TIM_PWM_ConfigChannel+0x334>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d004      	beq.n	80066da <HAL_TIM_PWM_ConfigChannel+0x2ce>
 80066d0:	f241 0167 	movw	r1, #4199	; 0x1067
 80066d4:	481b      	ldr	r0, [pc, #108]	; (8006744 <HAL_TIM_PWM_ConfigChannel+0x338>)
 80066d6:	f7fb f80b 	bl	80016f0 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68b9      	ldr	r1, [r7, #8]
 80066e0:	4618      	mov	r0, r3
 80066e2:	f000 fddb 	bl	800729c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	69da      	ldr	r2, [r3, #28]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	69da      	ldr	r2, [r3, #28]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006704:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	69d9      	ldr	r1, [r3, #28]
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	021a      	lsls	r2, r3, #8
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	430a      	orrs	r2, r1
 8006718:	61da      	str	r2, [r3, #28]
      break;
 800671a:	e000      	b.n	800671e <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    default:
      break;
 800671c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3710      	adds	r7, #16
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	40012c00 	.word	0x40012c00
 8006734:	40013400 	.word	0x40013400
 8006738:	40000400 	.word	0x40000400
 800673c:	40000800 	.word	0x40000800
 8006740:	40000c00 	.word	0x40000c00
 8006744:	0800c3ec 	.word	0x0800c3ec

08006748 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b084      	sub	sp, #16
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006758:	2b01      	cmp	r3, #1
 800675a:	d101      	bne.n	8006760 <HAL_TIM_ConfigClockSource+0x18>
 800675c:	2302      	movs	r3, #2
 800675e:	e2f5      	b.n	8006d4c <HAL_TIM_ConfigClockSource+0x604>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2202      	movs	r2, #2
 800676c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006778:	d029      	beq.n	80067ce <HAL_TIM_ConfigClockSource+0x86>
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006782:	d024      	beq.n	80067ce <HAL_TIM_ConfigClockSource+0x86>
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d020      	beq.n	80067ce <HAL_TIM_ConfigClockSource+0x86>
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2b10      	cmp	r3, #16
 8006792:	d01c      	beq.n	80067ce <HAL_TIM_ConfigClockSource+0x86>
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2b20      	cmp	r3, #32
 800679a:	d018      	beq.n	80067ce <HAL_TIM_ConfigClockSource+0x86>
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2b30      	cmp	r3, #48	; 0x30
 80067a2:	d014      	beq.n	80067ce <HAL_TIM_ConfigClockSource+0x86>
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2b40      	cmp	r3, #64	; 0x40
 80067aa:	d010      	beq.n	80067ce <HAL_TIM_ConfigClockSource+0x86>
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2b50      	cmp	r3, #80	; 0x50
 80067b2:	d00c      	beq.n	80067ce <HAL_TIM_ConfigClockSource+0x86>
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2b60      	cmp	r3, #96	; 0x60
 80067ba:	d008      	beq.n	80067ce <HAL_TIM_ConfigClockSource+0x86>
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2b70      	cmp	r3, #112	; 0x70
 80067c2:	d004      	beq.n	80067ce <HAL_TIM_ConfigClockSource+0x86>
 80067c4:	f241 4132 	movw	r1, #5170	; 0x1432
 80067c8:	487c      	ldr	r0, [pc, #496]	; (80069bc <HAL_TIM_ConfigClockSource+0x274>)
 80067ca:	f7fa ff91 	bl	80016f0 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067dc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067e4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067f6:	f000 80f1 	beq.w	80069dc <HAL_TIM_ConfigClockSource+0x294>
 80067fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067fe:	f200 8299 	bhi.w	8006d34 <HAL_TIM_ConfigClockSource+0x5ec>
 8006802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006806:	d02d      	beq.n	8006864 <HAL_TIM_ConfigClockSource+0x11c>
 8006808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800680c:	f200 8292 	bhi.w	8006d34 <HAL_TIM_ConfigClockSource+0x5ec>
 8006810:	2b70      	cmp	r3, #112	; 0x70
 8006812:	d05d      	beq.n	80068d0 <HAL_TIM_ConfigClockSource+0x188>
 8006814:	2b70      	cmp	r3, #112	; 0x70
 8006816:	f200 828d 	bhi.w	8006d34 <HAL_TIM_ConfigClockSource+0x5ec>
 800681a:	2b60      	cmp	r3, #96	; 0x60
 800681c:	f000 81a5 	beq.w	8006b6a <HAL_TIM_ConfigClockSource+0x422>
 8006820:	2b60      	cmp	r3, #96	; 0x60
 8006822:	f200 8287 	bhi.w	8006d34 <HAL_TIM_ConfigClockSource+0x5ec>
 8006826:	2b50      	cmp	r3, #80	; 0x50
 8006828:	f000 8149 	beq.w	8006abe <HAL_TIM_ConfigClockSource+0x376>
 800682c:	2b50      	cmp	r3, #80	; 0x50
 800682e:	f200 8281 	bhi.w	8006d34 <HAL_TIM_ConfigClockSource+0x5ec>
 8006832:	2b40      	cmp	r3, #64	; 0x40
 8006834:	f000 81fc 	beq.w	8006c30 <HAL_TIM_ConfigClockSource+0x4e8>
 8006838:	2b40      	cmp	r3, #64	; 0x40
 800683a:	f200 827b 	bhi.w	8006d34 <HAL_TIM_ConfigClockSource+0x5ec>
 800683e:	2b30      	cmp	r3, #48	; 0x30
 8006840:	f000 824c 	beq.w	8006cdc <HAL_TIM_ConfigClockSource+0x594>
 8006844:	2b30      	cmp	r3, #48	; 0x30
 8006846:	f200 8275 	bhi.w	8006d34 <HAL_TIM_ConfigClockSource+0x5ec>
 800684a:	2b20      	cmp	r3, #32
 800684c:	f000 8246 	beq.w	8006cdc <HAL_TIM_ConfigClockSource+0x594>
 8006850:	2b20      	cmp	r3, #32
 8006852:	f200 826f 	bhi.w	8006d34 <HAL_TIM_ConfigClockSource+0x5ec>
 8006856:	2b00      	cmp	r3, #0
 8006858:	f000 8240 	beq.w	8006cdc <HAL_TIM_ConfigClockSource+0x594>
 800685c:	2b10      	cmp	r3, #16
 800685e:	f000 823d 	beq.w	8006cdc <HAL_TIM_ConfigClockSource+0x594>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006862:	e267      	b.n	8006d34 <HAL_TIM_ConfigClockSource+0x5ec>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a55      	ldr	r2, [pc, #340]	; (80069c0 <HAL_TIM_ConfigClockSource+0x278>)
 800686a:	4293      	cmp	r3, r2
 800686c:	f000 8264 	beq.w	8006d38 <HAL_TIM_ConfigClockSource+0x5f0>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a53      	ldr	r2, [pc, #332]	; (80069c4 <HAL_TIM_ConfigClockSource+0x27c>)
 8006876:	4293      	cmp	r3, r2
 8006878:	f000 825e 	beq.w	8006d38 <HAL_TIM_ConfigClockSource+0x5f0>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006884:	f000 8258 	beq.w	8006d38 <HAL_TIM_ConfigClockSource+0x5f0>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a4e      	ldr	r2, [pc, #312]	; (80069c8 <HAL_TIM_ConfigClockSource+0x280>)
 800688e:	4293      	cmp	r3, r2
 8006890:	f000 8252 	beq.w	8006d38 <HAL_TIM_ConfigClockSource+0x5f0>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a4c      	ldr	r2, [pc, #304]	; (80069cc <HAL_TIM_ConfigClockSource+0x284>)
 800689a:	4293      	cmp	r3, r2
 800689c:	f000 824c 	beq.w	8006d38 <HAL_TIM_ConfigClockSource+0x5f0>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a4a      	ldr	r2, [pc, #296]	; (80069d0 <HAL_TIM_ConfigClockSource+0x288>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	f000 8246 	beq.w	8006d38 <HAL_TIM_ConfigClockSource+0x5f0>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a48      	ldr	r2, [pc, #288]	; (80069d4 <HAL_TIM_ConfigClockSource+0x28c>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	f000 8240 	beq.w	8006d38 <HAL_TIM_ConfigClockSource+0x5f0>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a46      	ldr	r2, [pc, #280]	; (80069d8 <HAL_TIM_ConfigClockSource+0x290>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	f000 823a 	beq.w	8006d38 <HAL_TIM_ConfigClockSource+0x5f0>
 80068c4:	f241 413e 	movw	r1, #5182	; 0x143e
 80068c8:	483c      	ldr	r0, [pc, #240]	; (80069bc <HAL_TIM_ConfigClockSource+0x274>)
 80068ca:	f7fa ff11 	bl	80016f0 <assert_failed>
      break;
 80068ce:	e233      	b.n	8006d38 <HAL_TIM_ConfigClockSource+0x5f0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a3a      	ldr	r2, [pc, #232]	; (80069c0 <HAL_TIM_ConfigClockSource+0x278>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d01d      	beq.n	8006916 <HAL_TIM_ConfigClockSource+0x1ce>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a39      	ldr	r2, [pc, #228]	; (80069c4 <HAL_TIM_ConfigClockSource+0x27c>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d018      	beq.n	8006916 <HAL_TIM_ConfigClockSource+0x1ce>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ec:	d013      	beq.n	8006916 <HAL_TIM_ConfigClockSource+0x1ce>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a35      	ldr	r2, [pc, #212]	; (80069c8 <HAL_TIM_ConfigClockSource+0x280>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d00e      	beq.n	8006916 <HAL_TIM_ConfigClockSource+0x1ce>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a33      	ldr	r2, [pc, #204]	; (80069cc <HAL_TIM_ConfigClockSource+0x284>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d009      	beq.n	8006916 <HAL_TIM_ConfigClockSource+0x1ce>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a32      	ldr	r2, [pc, #200]	; (80069d0 <HAL_TIM_ConfigClockSource+0x288>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d004      	beq.n	8006916 <HAL_TIM_ConfigClockSource+0x1ce>
 800690c:	f241 4145 	movw	r1, #5189	; 0x1445
 8006910:	482a      	ldr	r0, [pc, #168]	; (80069bc <HAL_TIM_ConfigClockSource+0x274>)
 8006912:	f7fa feed 	bl	80016f0 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d013      	beq.n	8006946 <HAL_TIM_ConfigClockSource+0x1fe>
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006926:	d00e      	beq.n	8006946 <HAL_TIM_ConfigClockSource+0x1fe>
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006930:	d009      	beq.n	8006946 <HAL_TIM_ConfigClockSource+0x1fe>
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800693a:	d004      	beq.n	8006946 <HAL_TIM_ConfigClockSource+0x1fe>
 800693c:	f241 4148 	movw	r1, #5192	; 0x1448
 8006940:	481e      	ldr	r0, [pc, #120]	; (80069bc <HAL_TIM_ConfigClockSource+0x274>)
 8006942:	f7fa fed5 	bl	80016f0 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800694e:	d014      	beq.n	800697a <HAL_TIM_ConfigClockSource+0x232>
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d010      	beq.n	800697a <HAL_TIM_ConfigClockSource+0x232>
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00c      	beq.n	800697a <HAL_TIM_ConfigClockSource+0x232>
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	2b02      	cmp	r3, #2
 8006966:	d008      	beq.n	800697a <HAL_TIM_ConfigClockSource+0x232>
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	2b0a      	cmp	r3, #10
 800696e:	d004      	beq.n	800697a <HAL_TIM_ConfigClockSource+0x232>
 8006970:	f241 4149 	movw	r1, #5193	; 0x1449
 8006974:	4811      	ldr	r0, [pc, #68]	; (80069bc <HAL_TIM_ConfigClockSource+0x274>)
 8006976:	f7fa febb 	bl	80016f0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	2b0f      	cmp	r3, #15
 8006980:	d904      	bls.n	800698c <HAL_TIM_ConfigClockSource+0x244>
 8006982:	f241 414a 	movw	r1, #5194	; 0x144a
 8006986:	480d      	ldr	r0, [pc, #52]	; (80069bc <HAL_TIM_ConfigClockSource+0x274>)
 8006988:	f7fa feb2 	bl	80016f0 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6818      	ldr	r0, [r3, #0]
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	6899      	ldr	r1, [r3, #8]
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	685a      	ldr	r2, [r3, #4]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	f000 fd59 	bl	8007452 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80069ae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	609a      	str	r2, [r3, #8]
      break;
 80069b8:	e1bf      	b.n	8006d3a <HAL_TIM_ConfigClockSource+0x5f2>
 80069ba:	bf00      	nop
 80069bc:	0800c3ec 	.word	0x0800c3ec
 80069c0:	40012c00 	.word	0x40012c00
 80069c4:	40013400 	.word	0x40013400
 80069c8:	40000400 	.word	0x40000400
 80069cc:	40000800 	.word	0x40000800
 80069d0:	40000c00 	.word	0x40000c00
 80069d4:	40001000 	.word	0x40001000
 80069d8:	40001400 	.word	0x40001400
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a8d      	ldr	r2, [pc, #564]	; (8006c18 <HAL_TIM_ConfigClockSource+0x4d0>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d01d      	beq.n	8006a22 <HAL_TIM_ConfigClockSource+0x2da>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a8c      	ldr	r2, [pc, #560]	; (8006c1c <HAL_TIM_ConfigClockSource+0x4d4>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d018      	beq.n	8006a22 <HAL_TIM_ConfigClockSource+0x2da>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069f8:	d013      	beq.n	8006a22 <HAL_TIM_ConfigClockSource+0x2da>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a88      	ldr	r2, [pc, #544]	; (8006c20 <HAL_TIM_ConfigClockSource+0x4d8>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d00e      	beq.n	8006a22 <HAL_TIM_ConfigClockSource+0x2da>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a86      	ldr	r2, [pc, #536]	; (8006c24 <HAL_TIM_ConfigClockSource+0x4dc>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d009      	beq.n	8006a22 <HAL_TIM_ConfigClockSource+0x2da>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a85      	ldr	r2, [pc, #532]	; (8006c28 <HAL_TIM_ConfigClockSource+0x4e0>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d004      	beq.n	8006a22 <HAL_TIM_ConfigClockSource+0x2da>
 8006a18:	f241 415d 	movw	r1, #5213	; 0x145d
 8006a1c:	4883      	ldr	r0, [pc, #524]	; (8006c2c <HAL_TIM_ConfigClockSource+0x4e4>)
 8006a1e:	f7fa fe67 	bl	80016f0 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d013      	beq.n	8006a52 <HAL_TIM_ConfigClockSource+0x30a>
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a32:	d00e      	beq.n	8006a52 <HAL_TIM_ConfigClockSource+0x30a>
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a3c:	d009      	beq.n	8006a52 <HAL_TIM_ConfigClockSource+0x30a>
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a46:	d004      	beq.n	8006a52 <HAL_TIM_ConfigClockSource+0x30a>
 8006a48:	f44f 51a3 	mov.w	r1, #5216	; 0x1460
 8006a4c:	4877      	ldr	r0, [pc, #476]	; (8006c2c <HAL_TIM_ConfigClockSource+0x4e4>)
 8006a4e:	f7fa fe4f 	bl	80016f0 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a5a:	d014      	beq.n	8006a86 <HAL_TIM_ConfigClockSource+0x33e>
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d010      	beq.n	8006a86 <HAL_TIM_ConfigClockSource+0x33e>
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d00c      	beq.n	8006a86 <HAL_TIM_ConfigClockSource+0x33e>
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	d008      	beq.n	8006a86 <HAL_TIM_ConfigClockSource+0x33e>
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	2b0a      	cmp	r3, #10
 8006a7a:	d004      	beq.n	8006a86 <HAL_TIM_ConfigClockSource+0x33e>
 8006a7c:	f241 4161 	movw	r1, #5217	; 0x1461
 8006a80:	486a      	ldr	r0, [pc, #424]	; (8006c2c <HAL_TIM_ConfigClockSource+0x4e4>)
 8006a82:	f7fa fe35 	bl	80016f0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	68db      	ldr	r3, [r3, #12]
 8006a8a:	2b0f      	cmp	r3, #15
 8006a8c:	d904      	bls.n	8006a98 <HAL_TIM_ConfigClockSource+0x350>
 8006a8e:	f241 4162 	movw	r1, #5218	; 0x1462
 8006a92:	4866      	ldr	r0, [pc, #408]	; (8006c2c <HAL_TIM_ConfigClockSource+0x4e4>)
 8006a94:	f7fa fe2c 	bl	80016f0 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6818      	ldr	r0, [r3, #0]
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	6899      	ldr	r1, [r3, #8]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	685a      	ldr	r2, [r3, #4]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	f000 fcd3 	bl	8007452 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	689a      	ldr	r2, [r3, #8]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006aba:	609a      	str	r2, [r3, #8]
      break;
 8006abc:	e13d      	b.n	8006d3a <HAL_TIM_ConfigClockSource+0x5f2>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a55      	ldr	r2, [pc, #340]	; (8006c18 <HAL_TIM_ConfigClockSource+0x4d0>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d01d      	beq.n	8006b04 <HAL_TIM_ConfigClockSource+0x3bc>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a53      	ldr	r2, [pc, #332]	; (8006c1c <HAL_TIM_ConfigClockSource+0x4d4>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d018      	beq.n	8006b04 <HAL_TIM_ConfigClockSource+0x3bc>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ada:	d013      	beq.n	8006b04 <HAL_TIM_ConfigClockSource+0x3bc>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a4f      	ldr	r2, [pc, #316]	; (8006c20 <HAL_TIM_ConfigClockSource+0x4d8>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d00e      	beq.n	8006b04 <HAL_TIM_ConfigClockSource+0x3bc>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a4e      	ldr	r2, [pc, #312]	; (8006c24 <HAL_TIM_ConfigClockSource+0x4dc>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d009      	beq.n	8006b04 <HAL_TIM_ConfigClockSource+0x3bc>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a4c      	ldr	r2, [pc, #304]	; (8006c28 <HAL_TIM_ConfigClockSource+0x4e0>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d004      	beq.n	8006b04 <HAL_TIM_ConfigClockSource+0x3bc>
 8006afa:	f241 4171 	movw	r1, #5233	; 0x1471
 8006afe:	484b      	ldr	r0, [pc, #300]	; (8006c2c <HAL_TIM_ConfigClockSource+0x4e4>)
 8006b00:	f7fa fdf6 	bl	80016f0 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b0c:	d014      	beq.n	8006b38 <HAL_TIM_ConfigClockSource+0x3f0>
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d010      	beq.n	8006b38 <HAL_TIM_ConfigClockSource+0x3f0>
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00c      	beq.n	8006b38 <HAL_TIM_ConfigClockSource+0x3f0>
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d008      	beq.n	8006b38 <HAL_TIM_ConfigClockSource+0x3f0>
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	2b0a      	cmp	r3, #10
 8006b2c:	d004      	beq.n	8006b38 <HAL_TIM_ConfigClockSource+0x3f0>
 8006b2e:	f241 4174 	movw	r1, #5236	; 0x1474
 8006b32:	483e      	ldr	r0, [pc, #248]	; (8006c2c <HAL_TIM_ConfigClockSource+0x4e4>)
 8006b34:	f7fa fddc 	bl	80016f0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	2b0f      	cmp	r3, #15
 8006b3e:	d904      	bls.n	8006b4a <HAL_TIM_ConfigClockSource+0x402>
 8006b40:	f241 4175 	movw	r1, #5237	; 0x1475
 8006b44:	4839      	ldr	r0, [pc, #228]	; (8006c2c <HAL_TIM_ConfigClockSource+0x4e4>)
 8006b46:	f7fa fdd3 	bl	80016f0 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6818      	ldr	r0, [r3, #0]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	6859      	ldr	r1, [r3, #4]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	461a      	mov	r2, r3
 8006b58:	f000 fc04 	bl	8007364 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2150      	movs	r1, #80	; 0x50
 8006b62:	4618      	mov	r0, r3
 8006b64:	f000 fc5b 	bl	800741e <TIM_ITRx_SetConfig>
      break;
 8006b68:	e0e7      	b.n	8006d3a <HAL_TIM_ConfigClockSource+0x5f2>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a2a      	ldr	r2, [pc, #168]	; (8006c18 <HAL_TIM_ConfigClockSource+0x4d0>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d01d      	beq.n	8006bb0 <HAL_TIM_ConfigClockSource+0x468>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a28      	ldr	r2, [pc, #160]	; (8006c1c <HAL_TIM_ConfigClockSource+0x4d4>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d018      	beq.n	8006bb0 <HAL_TIM_ConfigClockSource+0x468>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b86:	d013      	beq.n	8006bb0 <HAL_TIM_ConfigClockSource+0x468>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a24      	ldr	r2, [pc, #144]	; (8006c20 <HAL_TIM_ConfigClockSource+0x4d8>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d00e      	beq.n	8006bb0 <HAL_TIM_ConfigClockSource+0x468>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a23      	ldr	r2, [pc, #140]	; (8006c24 <HAL_TIM_ConfigClockSource+0x4dc>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d009      	beq.n	8006bb0 <HAL_TIM_ConfigClockSource+0x468>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a21      	ldr	r2, [pc, #132]	; (8006c28 <HAL_TIM_ConfigClockSource+0x4e0>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d004      	beq.n	8006bb0 <HAL_TIM_ConfigClockSource+0x468>
 8006ba6:	f241 4181 	movw	r1, #5249	; 0x1481
 8006baa:	4820      	ldr	r0, [pc, #128]	; (8006c2c <HAL_TIM_ConfigClockSource+0x4e4>)
 8006bac:	f7fa fda0 	bl	80016f0 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bb8:	d014      	beq.n	8006be4 <HAL_TIM_ConfigClockSource+0x49c>
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d010      	beq.n	8006be4 <HAL_TIM_ConfigClockSource+0x49c>
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00c      	beq.n	8006be4 <HAL_TIM_ConfigClockSource+0x49c>
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d008      	beq.n	8006be4 <HAL_TIM_ConfigClockSource+0x49c>
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	2b0a      	cmp	r3, #10
 8006bd8:	d004      	beq.n	8006be4 <HAL_TIM_ConfigClockSource+0x49c>
 8006bda:	f241 4184 	movw	r1, #5252	; 0x1484
 8006bde:	4813      	ldr	r0, [pc, #76]	; (8006c2c <HAL_TIM_ConfigClockSource+0x4e4>)
 8006be0:	f7fa fd86 	bl	80016f0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	2b0f      	cmp	r3, #15
 8006bea:	d904      	bls.n	8006bf6 <HAL_TIM_ConfigClockSource+0x4ae>
 8006bec:	f241 4185 	movw	r1, #5253	; 0x1485
 8006bf0:	480e      	ldr	r0, [pc, #56]	; (8006c2c <HAL_TIM_ConfigClockSource+0x4e4>)
 8006bf2:	f7fa fd7d 	bl	80016f0 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6818      	ldr	r0, [r3, #0]
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	6859      	ldr	r1, [r3, #4]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	461a      	mov	r2, r3
 8006c04:	f000 fbdc 	bl	80073c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2160      	movs	r1, #96	; 0x60
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f000 fc05 	bl	800741e <TIM_ITRx_SetConfig>
      break;
 8006c14:	e091      	b.n	8006d3a <HAL_TIM_ConfigClockSource+0x5f2>
 8006c16:	bf00      	nop
 8006c18:	40012c00 	.word	0x40012c00
 8006c1c:	40013400 	.word	0x40013400
 8006c20:	40000400 	.word	0x40000400
 8006c24:	40000800 	.word	0x40000800
 8006c28:	40000c00 	.word	0x40000c00
 8006c2c:	0800c3ec 	.word	0x0800c3ec
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a47      	ldr	r2, [pc, #284]	; (8006d54 <HAL_TIM_ConfigClockSource+0x60c>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d01d      	beq.n	8006c76 <HAL_TIM_ConfigClockSource+0x52e>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a46      	ldr	r2, [pc, #280]	; (8006d58 <HAL_TIM_ConfigClockSource+0x610>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d018      	beq.n	8006c76 <HAL_TIM_ConfigClockSource+0x52e>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c4c:	d013      	beq.n	8006c76 <HAL_TIM_ConfigClockSource+0x52e>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a42      	ldr	r2, [pc, #264]	; (8006d5c <HAL_TIM_ConfigClockSource+0x614>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d00e      	beq.n	8006c76 <HAL_TIM_ConfigClockSource+0x52e>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a40      	ldr	r2, [pc, #256]	; (8006d60 <HAL_TIM_ConfigClockSource+0x618>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d009      	beq.n	8006c76 <HAL_TIM_ConfigClockSource+0x52e>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a3f      	ldr	r2, [pc, #252]	; (8006d64 <HAL_TIM_ConfigClockSource+0x61c>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d004      	beq.n	8006c76 <HAL_TIM_ConfigClockSource+0x52e>
 8006c6c:	f241 4191 	movw	r1, #5265	; 0x1491
 8006c70:	483d      	ldr	r0, [pc, #244]	; (8006d68 <HAL_TIM_ConfigClockSource+0x620>)
 8006c72:	f7fa fd3d 	bl	80016f0 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c7e:	d014      	beq.n	8006caa <HAL_TIM_ConfigClockSource+0x562>
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d010      	beq.n	8006caa <HAL_TIM_ConfigClockSource+0x562>
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00c      	beq.n	8006caa <HAL_TIM_ConfigClockSource+0x562>
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	2b02      	cmp	r3, #2
 8006c96:	d008      	beq.n	8006caa <HAL_TIM_ConfigClockSource+0x562>
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	2b0a      	cmp	r3, #10
 8006c9e:	d004      	beq.n	8006caa <HAL_TIM_ConfigClockSource+0x562>
 8006ca0:	f241 4194 	movw	r1, #5268	; 0x1494
 8006ca4:	4830      	ldr	r0, [pc, #192]	; (8006d68 <HAL_TIM_ConfigClockSource+0x620>)
 8006ca6:	f7fa fd23 	bl	80016f0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	2b0f      	cmp	r3, #15
 8006cb0:	d904      	bls.n	8006cbc <HAL_TIM_ConfigClockSource+0x574>
 8006cb2:	f241 4195 	movw	r1, #5269	; 0x1495
 8006cb6:	482c      	ldr	r0, [pc, #176]	; (8006d68 <HAL_TIM_ConfigClockSource+0x620>)
 8006cb8:	f7fa fd1a 	bl	80016f0 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6818      	ldr	r0, [r3, #0]
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	6859      	ldr	r1, [r3, #4]
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	461a      	mov	r2, r3
 8006cca:	f000 fb4b 	bl	8007364 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2140      	movs	r1, #64	; 0x40
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f000 fba2 	bl	800741e <TIM_ITRx_SetConfig>
      break;
 8006cda:	e02e      	b.n	8006d3a <HAL_TIM_ConfigClockSource+0x5f2>
        assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a1c      	ldr	r2, [pc, #112]	; (8006d54 <HAL_TIM_ConfigClockSource+0x60c>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d01d      	beq.n	8006d22 <HAL_TIM_ConfigClockSource+0x5da>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a1b      	ldr	r2, [pc, #108]	; (8006d58 <HAL_TIM_ConfigClockSource+0x610>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d018      	beq.n	8006d22 <HAL_TIM_ConfigClockSource+0x5da>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cf8:	d013      	beq.n	8006d22 <HAL_TIM_ConfigClockSource+0x5da>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a17      	ldr	r2, [pc, #92]	; (8006d5c <HAL_TIM_ConfigClockSource+0x614>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d00e      	beq.n	8006d22 <HAL_TIM_ConfigClockSource+0x5da>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a15      	ldr	r2, [pc, #84]	; (8006d60 <HAL_TIM_ConfigClockSource+0x618>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d009      	beq.n	8006d22 <HAL_TIM_ConfigClockSource+0x5da>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a14      	ldr	r2, [pc, #80]	; (8006d64 <HAL_TIM_ConfigClockSource+0x61c>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d004      	beq.n	8006d22 <HAL_TIM_ConfigClockSource+0x5da>
 8006d18:	f241 41a4 	movw	r1, #5284	; 0x14a4
 8006d1c:	4812      	ldr	r0, [pc, #72]	; (8006d68 <HAL_TIM_ConfigClockSource+0x620>)
 8006d1e:	f7fa fce7 	bl	80016f0 <assert_failed>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	4610      	mov	r0, r2
 8006d2e:	f000 fb76 	bl	800741e <TIM_ITRx_SetConfig>
        break;
 8006d32:	e002      	b.n	8006d3a <HAL_TIM_ConfigClockSource+0x5f2>
      break;
 8006d34:	bf00      	nop
 8006d36:	e000      	b.n	8006d3a <HAL_TIM_ConfigClockSource+0x5f2>
      break;
 8006d38:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3710      	adds	r7, #16
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	40012c00 	.word	0x40012c00
 8006d58:	40013400 	.word	0x40013400
 8006d5c:	40000400 	.word	0x40000400
 8006d60:	40000800 	.word	0x40000800
 8006d64:	40000c00 	.word	0x40000c00
 8006d68:	0800c3ec 	.word	0x0800c3ec

08006d6c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bc80      	pop	{r7}
 8006d7c:	4770      	bx	lr

08006d7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d7e:	b480      	push	{r7}
 8006d80:	b083      	sub	sp, #12
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d86:	bf00      	nop
 8006d88:	370c      	adds	r7, #12
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bc80      	pop	{r7}
 8006d8e:	4770      	bx	lr

08006d90 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006d98:	bf00      	nop
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bc80      	pop	{r7}
 8006da0:	4770      	bx	lr

08006da2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b083      	sub	sp, #12
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006daa:	bf00      	nop
 8006dac:	370c      	adds	r7, #12
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bc80      	pop	{r7}
 8006db2:	4770      	bx	lr

08006db4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bc80      	pop	{r7}
 8006dc4:	4770      	bx	lr

08006dc6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006dc6:	b480      	push	{r7}
 8006dc8:	b083      	sub	sp, #12
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006dce:	bf00      	nop
 8006dd0:	370c      	adds	r7, #12
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bc80      	pop	{r7}
 8006dd6:	4770      	bx	lr

08006dd8 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bc80      	pop	{r7}
 8006de8:	4770      	bx	lr

08006dea <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006dea:	b480      	push	{r7}
 8006dec:	b083      	sub	sp, #12
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006df2:	bf00      	nop
 8006df4:	370c      	adds	r7, #12
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bc80      	pop	{r7}
 8006dfa:	4770      	bx	lr

08006dfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b085      	sub	sp, #20
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a33      	ldr	r2, [pc, #204]	; (8006edc <TIM_Base_SetConfig+0xe0>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d013      	beq.n	8006e3c <TIM_Base_SetConfig+0x40>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a32      	ldr	r2, [pc, #200]	; (8006ee0 <TIM_Base_SetConfig+0xe4>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d00f      	beq.n	8006e3c <TIM_Base_SetConfig+0x40>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e22:	d00b      	beq.n	8006e3c <TIM_Base_SetConfig+0x40>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a2f      	ldr	r2, [pc, #188]	; (8006ee4 <TIM_Base_SetConfig+0xe8>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d007      	beq.n	8006e3c <TIM_Base_SetConfig+0x40>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a2e      	ldr	r2, [pc, #184]	; (8006ee8 <TIM_Base_SetConfig+0xec>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d003      	beq.n	8006e3c <TIM_Base_SetConfig+0x40>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a2d      	ldr	r2, [pc, #180]	; (8006eec <TIM_Base_SetConfig+0xf0>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d108      	bne.n	8006e4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a22      	ldr	r2, [pc, #136]	; (8006edc <TIM_Base_SetConfig+0xe0>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d013      	beq.n	8006e7e <TIM_Base_SetConfig+0x82>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a21      	ldr	r2, [pc, #132]	; (8006ee0 <TIM_Base_SetConfig+0xe4>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d00f      	beq.n	8006e7e <TIM_Base_SetConfig+0x82>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e64:	d00b      	beq.n	8006e7e <TIM_Base_SetConfig+0x82>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a1e      	ldr	r2, [pc, #120]	; (8006ee4 <TIM_Base_SetConfig+0xe8>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d007      	beq.n	8006e7e <TIM_Base_SetConfig+0x82>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a1d      	ldr	r2, [pc, #116]	; (8006ee8 <TIM_Base_SetConfig+0xec>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d003      	beq.n	8006e7e <TIM_Base_SetConfig+0x82>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a1c      	ldr	r2, [pc, #112]	; (8006eec <TIM_Base_SetConfig+0xf0>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d108      	bne.n	8006e90 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	689a      	ldr	r2, [r3, #8]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4a09      	ldr	r2, [pc, #36]	; (8006edc <TIM_Base_SetConfig+0xe0>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d003      	beq.n	8006ec4 <TIM_Base_SetConfig+0xc8>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a08      	ldr	r2, [pc, #32]	; (8006ee0 <TIM_Base_SetConfig+0xe4>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d103      	bne.n	8006ecc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	691a      	ldr	r2, [r3, #16]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	615a      	str	r2, [r3, #20]
}
 8006ed2:	bf00      	nop
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bc80      	pop	{r7}
 8006eda:	4770      	bx	lr
 8006edc:	40012c00 	.word	0x40012c00
 8006ee0:	40013400 	.word	0x40013400
 8006ee4:	40000400 	.word	0x40000400
 8006ee8:	40000800 	.word	0x40000800
 8006eec:	40000c00 	.word	0x40000c00

08006ef0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b086      	sub	sp, #24
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	f023 0201 	bic.w	r2, r3, #1
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a1b      	ldr	r3, [r3, #32]
 8006f0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f023 0303 	bic.w	r3, r3, #3
 8006f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	f023 0302 	bic.w	r3, r3, #2
 8006f38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a34      	ldr	r2, [pc, #208]	; (8007018 <TIM_OC1_SetConfig+0x128>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d003      	beq.n	8006f54 <TIM_OC1_SetConfig+0x64>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a33      	ldr	r2, [pc, #204]	; (800701c <TIM_OC1_SetConfig+0x12c>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d119      	bne.n	8006f88 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d008      	beq.n	8006f6e <TIM_OC1_SetConfig+0x7e>
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	2b08      	cmp	r3, #8
 8006f62:	d004      	beq.n	8006f6e <TIM_OC1_SetConfig+0x7e>
 8006f64:	f641 2141 	movw	r1, #6721	; 0x1a41
 8006f68:	482d      	ldr	r0, [pc, #180]	; (8007020 <TIM_OC1_SetConfig+0x130>)
 8006f6a:	f7fa fbc1 	bl	80016f0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	f023 0308 	bic.w	r3, r3, #8
 8006f74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	f023 0304 	bic.w	r3, r3, #4
 8006f86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a23      	ldr	r2, [pc, #140]	; (8007018 <TIM_OC1_SetConfig+0x128>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d003      	beq.n	8006f98 <TIM_OC1_SetConfig+0xa8>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4a22      	ldr	r2, [pc, #136]	; (800701c <TIM_OC1_SetConfig+0x12c>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d12d      	bne.n	8006ff4 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	699b      	ldr	r3, [r3, #24]
 8006f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fa0:	d008      	beq.n	8006fb4 <TIM_OC1_SetConfig+0xc4>
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	699b      	ldr	r3, [r3, #24]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d004      	beq.n	8006fb4 <TIM_OC1_SetConfig+0xc4>
 8006faa:	f641 214e 	movw	r1, #6734	; 0x1a4e
 8006fae:	481c      	ldr	r0, [pc, #112]	; (8007020 <TIM_OC1_SetConfig+0x130>)
 8006fb0:	f7fa fb9e 	bl	80016f0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	695b      	ldr	r3, [r3, #20]
 8006fb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fbc:	d008      	beq.n	8006fd0 <TIM_OC1_SetConfig+0xe0>
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d004      	beq.n	8006fd0 <TIM_OC1_SetConfig+0xe0>
 8006fc6:	f641 214f 	movw	r1, #6735	; 0x1a4f
 8006fca:	4815      	ldr	r0, [pc, #84]	; (8007020 <TIM_OC1_SetConfig+0x130>)
 8006fcc:	f7fa fb90 	bl	80016f0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	693a      	ldr	r2, [r7, #16]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	693a      	ldr	r2, [r7, #16]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	685a      	ldr	r2, [r3, #4]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	697a      	ldr	r2, [r7, #20]
 800700c:	621a      	str	r2, [r3, #32]
}
 800700e:	bf00      	nop
 8007010:	3718      	adds	r7, #24
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	40012c00 	.word	0x40012c00
 800701c:	40013400 	.word	0x40013400
 8007020:	0800c3ec 	.word	0x0800c3ec

08007024 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	f023 0210 	bic.w	r2, r3, #16
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a1b      	ldr	r3, [r3, #32]
 800703e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	699b      	ldr	r3, [r3, #24]
 800704a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800705a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	021b      	lsls	r3, r3, #8
 8007062:	68fa      	ldr	r2, [r7, #12]
 8007064:	4313      	orrs	r3, r2
 8007066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	f023 0320 	bic.w	r3, r3, #32
 800706e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	011b      	lsls	r3, r3, #4
 8007076:	697a      	ldr	r2, [r7, #20]
 8007078:	4313      	orrs	r3, r2
 800707a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a35      	ldr	r2, [pc, #212]	; (8007154 <TIM_OC2_SetConfig+0x130>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d003      	beq.n	800708c <TIM_OC2_SetConfig+0x68>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a34      	ldr	r2, [pc, #208]	; (8007158 <TIM_OC2_SetConfig+0x134>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d11a      	bne.n	80070c2 <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d008      	beq.n	80070a6 <TIM_OC2_SetConfig+0x82>
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	2b08      	cmp	r3, #8
 800709a:	d004      	beq.n	80070a6 <TIM_OC2_SetConfig+0x82>
 800709c:	f641 218c 	movw	r1, #6796	; 0x1a8c
 80070a0:	482e      	ldr	r0, [pc, #184]	; (800715c <TIM_OC2_SetConfig+0x138>)
 80070a2:	f7fa fb25 	bl	80016f0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	011b      	lsls	r3, r3, #4
 80070b4:	697a      	ldr	r2, [r7, #20]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070c0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a23      	ldr	r2, [pc, #140]	; (8007154 <TIM_OC2_SetConfig+0x130>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d003      	beq.n	80070d2 <TIM_OC2_SetConfig+0xae>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a22      	ldr	r2, [pc, #136]	; (8007158 <TIM_OC2_SetConfig+0x134>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d12f      	bne.n	8007132 <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070da:	d008      	beq.n	80070ee <TIM_OC2_SetConfig+0xca>
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	699b      	ldr	r3, [r3, #24]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d004      	beq.n	80070ee <TIM_OC2_SetConfig+0xca>
 80070e4:	f641 219a 	movw	r1, #6810	; 0x1a9a
 80070e8:	481c      	ldr	r0, [pc, #112]	; (800715c <TIM_OC2_SetConfig+0x138>)
 80070ea:	f7fa fb01 	bl	80016f0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070f6:	d008      	beq.n	800710a <TIM_OC2_SetConfig+0xe6>
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	695b      	ldr	r3, [r3, #20]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d004      	beq.n	800710a <TIM_OC2_SetConfig+0xe6>
 8007100:	f641 219b 	movw	r1, #6811	; 0x1a9b
 8007104:	4815      	ldr	r0, [pc, #84]	; (800715c <TIM_OC2_SetConfig+0x138>)
 8007106:	f7fa faf3 	bl	80016f0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	695b      	ldr	r3, [r3, #20]
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	693a      	ldr	r2, [r7, #16]
 8007122:	4313      	orrs	r3, r2
 8007124:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	693a      	ldr	r2, [r7, #16]
 800712e:	4313      	orrs	r3, r2
 8007130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	693a      	ldr	r2, [r7, #16]
 8007136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	685a      	ldr	r2, [r3, #4]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	697a      	ldr	r2, [r7, #20]
 800714a:	621a      	str	r2, [r3, #32]
}
 800714c:	bf00      	nop
 800714e:	3718      	adds	r7, #24
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	40012c00 	.word	0x40012c00
 8007158:	40013400 	.word	0x40013400
 800715c:	0800c3ec 	.word	0x0800c3ec

08007160 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b086      	sub	sp, #24
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	69db      	ldr	r3, [r3, #28]
 8007186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800718e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f023 0303 	bic.w	r3, r3, #3
 8007196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	4313      	orrs	r3, r2
 80071a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	021b      	lsls	r3, r3, #8
 80071b0:	697a      	ldr	r2, [r7, #20]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a35      	ldr	r2, [pc, #212]	; (8007290 <TIM_OC3_SetConfig+0x130>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d003      	beq.n	80071c6 <TIM_OC3_SetConfig+0x66>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a34      	ldr	r2, [pc, #208]	; (8007294 <TIM_OC3_SetConfig+0x134>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d11a      	bne.n	80071fc <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d008      	beq.n	80071e0 <TIM_OC3_SetConfig+0x80>
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	2b08      	cmp	r3, #8
 80071d4:	d004      	beq.n	80071e0 <TIM_OC3_SetConfig+0x80>
 80071d6:	f641 21d7 	movw	r1, #6871	; 0x1ad7
 80071da:	482f      	ldr	r0, [pc, #188]	; (8007298 <TIM_OC3_SetConfig+0x138>)
 80071dc:	f7fa fa88 	bl	80016f0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	021b      	lsls	r3, r3, #8
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a24      	ldr	r2, [pc, #144]	; (8007290 <TIM_OC3_SetConfig+0x130>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d003      	beq.n	800720c <TIM_OC3_SetConfig+0xac>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a23      	ldr	r2, [pc, #140]	; (8007294 <TIM_OC3_SetConfig+0x134>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d12f      	bne.n	800726c <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	699b      	ldr	r3, [r3, #24]
 8007210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007214:	d008      	beq.n	8007228 <TIM_OC3_SetConfig+0xc8>
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	699b      	ldr	r3, [r3, #24]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d004      	beq.n	8007228 <TIM_OC3_SetConfig+0xc8>
 800721e:	f641 21e4 	movw	r1, #6884	; 0x1ae4
 8007222:	481d      	ldr	r0, [pc, #116]	; (8007298 <TIM_OC3_SetConfig+0x138>)
 8007224:	f7fa fa64 	bl	80016f0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	695b      	ldr	r3, [r3, #20]
 800722c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007230:	d008      	beq.n	8007244 <TIM_OC3_SetConfig+0xe4>
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d004      	beq.n	8007244 <TIM_OC3_SetConfig+0xe4>
 800723a:	f641 21e5 	movw	r1, #6885	; 0x1ae5
 800723e:	4816      	ldr	r0, [pc, #88]	; (8007298 <TIM_OC3_SetConfig+0x138>)
 8007240:	f7fa fa56 	bl	80016f0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800724a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007252:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	695b      	ldr	r3, [r3, #20]
 8007258:	011b      	lsls	r3, r3, #4
 800725a:	693a      	ldr	r2, [r7, #16]
 800725c:	4313      	orrs	r3, r2
 800725e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	699b      	ldr	r3, [r3, #24]
 8007264:	011b      	lsls	r3, r3, #4
 8007266:	693a      	ldr	r2, [r7, #16]
 8007268:	4313      	orrs	r3, r2
 800726a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	693a      	ldr	r2, [r7, #16]
 8007270:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	685a      	ldr	r2, [r3, #4]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	621a      	str	r2, [r3, #32]
}
 8007286:	bf00      	nop
 8007288:	3718      	adds	r7, #24
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	40012c00 	.word	0x40012c00
 8007294:	40013400 	.word	0x40013400
 8007298:	0800c3ec 	.word	0x0800c3ec

0800729c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a1b      	ldr	r3, [r3, #32]
 80072aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	021b      	lsls	r3, r3, #8
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	4313      	orrs	r3, r2
 80072de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	031b      	lsls	r3, r3, #12
 80072ee:	693a      	ldr	r2, [r7, #16]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a18      	ldr	r2, [pc, #96]	; (8007358 <TIM_OC4_SetConfig+0xbc>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d003      	beq.n	8007304 <TIM_OC4_SetConfig+0x68>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a17      	ldr	r2, [pc, #92]	; (800735c <TIM_OC4_SetConfig+0xc0>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d117      	bne.n	8007334 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	695b      	ldr	r3, [r3, #20]
 8007308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800730c:	d008      	beq.n	8007320 <TIM_OC4_SetConfig+0x84>
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	695b      	ldr	r3, [r3, #20]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d004      	beq.n	8007320 <TIM_OC4_SetConfig+0x84>
 8007316:	f641 3123 	movw	r1, #6947	; 0x1b23
 800731a:	4811      	ldr	r0, [pc, #68]	; (8007360 <TIM_OC4_SetConfig+0xc4>)
 800731c:	f7fa f9e8 	bl	80016f0 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007326:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	695b      	ldr	r3, [r3, #20]
 800732c:	019b      	lsls	r3, r3, #6
 800732e:	697a      	ldr	r2, [r7, #20]
 8007330:	4313      	orrs	r3, r2
 8007332:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	697a      	ldr	r2, [r7, #20]
 8007338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	685a      	ldr	r2, [r3, #4]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	693a      	ldr	r2, [r7, #16]
 800734c:	621a      	str	r2, [r3, #32]
}
 800734e:	bf00      	nop
 8007350:	3718      	adds	r7, #24
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	40012c00 	.word	0x40012c00
 800735c:	40013400 	.word	0x40013400
 8007360:	0800c3ec 	.word	0x0800c3ec

08007364 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007364:	b480      	push	{r7}
 8007366:	b087      	sub	sp, #28
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6a1b      	ldr	r3, [r3, #32]
 8007374:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6a1b      	ldr	r3, [r3, #32]
 800737a:	f023 0201 	bic.w	r2, r3, #1
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800738e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	011b      	lsls	r3, r3, #4
 8007394:	693a      	ldr	r2, [r7, #16]
 8007396:	4313      	orrs	r3, r2
 8007398:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	f023 030a 	bic.w	r3, r3, #10
 80073a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073a2:	697a      	ldr	r2, [r7, #20]
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	697a      	ldr	r2, [r7, #20]
 80073b4:	621a      	str	r2, [r3, #32]
}
 80073b6:	bf00      	nop
 80073b8:	371c      	adds	r7, #28
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bc80      	pop	{r7}
 80073be:	4770      	bx	lr

080073c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b087      	sub	sp, #28
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6a1b      	ldr	r3, [r3, #32]
 80073d0:	f023 0210 	bic.w	r2, r3, #16
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6a1b      	ldr	r3, [r3, #32]
 80073e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	031b      	lsls	r3, r3, #12
 80073f0:	697a      	ldr	r2, [r7, #20]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	011b      	lsls	r3, r3, #4
 8007402:	693a      	ldr	r2, [r7, #16]
 8007404:	4313      	orrs	r3, r2
 8007406:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	693a      	ldr	r2, [r7, #16]
 8007412:	621a      	str	r2, [r3, #32]
}
 8007414:	bf00      	nop
 8007416:	371c      	adds	r7, #28
 8007418:	46bd      	mov	sp, r7
 800741a:	bc80      	pop	{r7}
 800741c:	4770      	bx	lr

0800741e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800741e:	b480      	push	{r7}
 8007420:	b085      	sub	sp, #20
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
 8007426:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007434:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007436:	683a      	ldr	r2, [r7, #0]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	4313      	orrs	r3, r2
 800743c:	f043 0307 	orr.w	r3, r3, #7
 8007440:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	609a      	str	r2, [r3, #8]
}
 8007448:	bf00      	nop
 800744a:	3714      	adds	r7, #20
 800744c:	46bd      	mov	sp, r7
 800744e:	bc80      	pop	{r7}
 8007450:	4770      	bx	lr

08007452 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007452:	b480      	push	{r7}
 8007454:	b087      	sub	sp, #28
 8007456:	af00      	add	r7, sp, #0
 8007458:	60f8      	str	r0, [r7, #12]
 800745a:	60b9      	str	r1, [r7, #8]
 800745c:	607a      	str	r2, [r7, #4]
 800745e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800746c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	021a      	lsls	r2, r3, #8
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	431a      	orrs	r2, r3
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	4313      	orrs	r3, r2
 800747a:	697a      	ldr	r2, [r7, #20]
 800747c:	4313      	orrs	r3, r2
 800747e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	609a      	str	r2, [r3, #8]
}
 8007486:	bf00      	nop
 8007488:	371c      	adds	r7, #28
 800748a:	46bd      	mov	sp, r7
 800748c:	bc80      	pop	{r7}
 800748e:	4770      	bx	lr

08007490 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	4a26      	ldr	r2, [pc, #152]	; (8007538 <TIM_CCxChannelCmd+0xa8>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d018      	beq.n	80074d6 <TIM_CCxChannelCmd+0x46>
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	4a25      	ldr	r2, [pc, #148]	; (800753c <TIM_CCxChannelCmd+0xac>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d014      	beq.n	80074d6 <TIM_CCxChannelCmd+0x46>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074b2:	d010      	beq.n	80074d6 <TIM_CCxChannelCmd+0x46>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	4a22      	ldr	r2, [pc, #136]	; (8007540 <TIM_CCxChannelCmd+0xb0>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d00c      	beq.n	80074d6 <TIM_CCxChannelCmd+0x46>
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	4a21      	ldr	r2, [pc, #132]	; (8007544 <TIM_CCxChannelCmd+0xb4>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d008      	beq.n	80074d6 <TIM_CCxChannelCmd+0x46>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	4a20      	ldr	r2, [pc, #128]	; (8007548 <TIM_CCxChannelCmd+0xb8>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d004      	beq.n	80074d6 <TIM_CCxChannelCmd+0x46>
 80074cc:	f641 5109 	movw	r1, #7433	; 0x1d09
 80074d0:	481e      	ldr	r0, [pc, #120]	; (800754c <TIM_CCxChannelCmd+0xbc>)
 80074d2:	f7fa f90d 	bl	80016f0 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d010      	beq.n	80074fe <TIM_CCxChannelCmd+0x6e>
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	2b04      	cmp	r3, #4
 80074e0:	d00d      	beq.n	80074fe <TIM_CCxChannelCmd+0x6e>
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	2b08      	cmp	r3, #8
 80074e6:	d00a      	beq.n	80074fe <TIM_CCxChannelCmd+0x6e>
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	2b0c      	cmp	r3, #12
 80074ec:	d007      	beq.n	80074fe <TIM_CCxChannelCmd+0x6e>
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	2b3c      	cmp	r3, #60	; 0x3c
 80074f2:	d004      	beq.n	80074fe <TIM_CCxChannelCmd+0x6e>
 80074f4:	f641 510a 	movw	r1, #7434	; 0x1d0a
 80074f8:	4814      	ldr	r0, [pc, #80]	; (800754c <TIM_CCxChannelCmd+0xbc>)
 80074fa:	f7fa f8f9 	bl	80016f0 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	f003 031f 	and.w	r3, r3, #31
 8007504:	2201      	movs	r2, #1
 8007506:	fa02 f303 	lsl.w	r3, r2, r3
 800750a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6a1a      	ldr	r2, [r3, #32]
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	43db      	mvns	r3, r3
 8007514:	401a      	ands	r2, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6a1a      	ldr	r2, [r3, #32]
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	f003 031f 	and.w	r3, r3, #31
 8007524:	6879      	ldr	r1, [r7, #4]
 8007526:	fa01 f303 	lsl.w	r3, r1, r3
 800752a:	431a      	orrs	r2, r3
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	621a      	str	r2, [r3, #32]
}
 8007530:	bf00      	nop
 8007532:	3718      	adds	r7, #24
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	40012c00 	.word	0x40012c00
 800753c:	40013400 	.word	0x40013400
 8007540:	40000400 	.word	0x40000400
 8007544:	40000800 	.word	0x40000800
 8007548:	40000c00 	.word	0x40000c00
 800754c:	0800c3ec 	.word	0x0800c3ec

08007550 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a1c      	ldr	r2, [pc, #112]	; (80075cc <TIM_ResetCallback+0x7c>)
 800755c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a1b      	ldr	r2, [pc, #108]	; (80075d0 <TIM_ResetCallback+0x80>)
 8007564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a1a      	ldr	r2, [pc, #104]	; (80075d4 <TIM_ResetCallback+0x84>)
 800756c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a19      	ldr	r2, [pc, #100]	; (80075d8 <TIM_ResetCallback+0x88>)
 8007574:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a18      	ldr	r2, [pc, #96]	; (80075dc <TIM_ResetCallback+0x8c>)
 800757c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a17      	ldr	r2, [pc, #92]	; (80075e0 <TIM_ResetCallback+0x90>)
 8007584:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a16      	ldr	r2, [pc, #88]	; (80075e4 <TIM_ResetCallback+0x94>)
 800758c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a15      	ldr	r2, [pc, #84]	; (80075e8 <TIM_ResetCallback+0x98>)
 8007594:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a14      	ldr	r2, [pc, #80]	; (80075ec <TIM_ResetCallback+0x9c>)
 800759c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a13      	ldr	r2, [pc, #76]	; (80075f0 <TIM_ResetCallback+0xa0>)
 80075a4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a12      	ldr	r2, [pc, #72]	; (80075f4 <TIM_ResetCallback+0xa4>)
 80075ac:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a11      	ldr	r2, [pc, #68]	; (80075f8 <TIM_ResetCallback+0xa8>)
 80075b4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a10      	ldr	r2, [pc, #64]	; (80075fc <TIM_ResetCallback+0xac>)
 80075bc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bc80      	pop	{r7}
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	08001685 	.word	0x08001685
 80075d0:	08006d6d 	.word	0x08006d6d
 80075d4:	08006dc7 	.word	0x08006dc7
 80075d8:	08006dd9 	.word	0x08006dd9
 80075dc:	0800163d 	.word	0x0800163d
 80075e0:	08006d91 	.word	0x08006d91
 80075e4:	08006d7f 	.word	0x08006d7f
 80075e8:	08006da3 	.word	0x08006da3
 80075ec:	08006db5 	.word	0x08006db5
 80075f0:	08006deb 	.word	0x08006deb
 80075f4:	08007939 	.word	0x08007939
 80075f8:	0800794b 	.word	0x0800794b
 80075fc:	0800795d 	.word	0x0800795d

08007600 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a5c      	ldr	r2, [pc, #368]	; (8007780 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d027      	beq.n	8007664 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a5a      	ldr	r2, [pc, #360]	; (8007784 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d022      	beq.n	8007664 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007626:	d01d      	beq.n	8007664 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a56      	ldr	r2, [pc, #344]	; (8007788 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d018      	beq.n	8007664 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a55      	ldr	r2, [pc, #340]	; (800778c <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d013      	beq.n	8007664 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a53      	ldr	r2, [pc, #332]	; (8007790 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d00e      	beq.n	8007664 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a52      	ldr	r2, [pc, #328]	; (8007794 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d009      	beq.n	8007664 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a50      	ldr	r2, [pc, #320]	; (8007798 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d004      	beq.n	8007664 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800765a:	f240 7186 	movw	r1, #1926	; 0x786
 800765e:	484f      	ldr	r0, [pc, #316]	; (800779c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8007660:	f7fa f846 	bl	80016f0 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d020      	beq.n	80076ae <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2b10      	cmp	r3, #16
 8007672:	d01c      	beq.n	80076ae <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2b20      	cmp	r3, #32
 800767a:	d018      	beq.n	80076ae <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2b30      	cmp	r3, #48	; 0x30
 8007682:	d014      	beq.n	80076ae <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2b40      	cmp	r3, #64	; 0x40
 800768a:	d010      	beq.n	80076ae <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2b50      	cmp	r3, #80	; 0x50
 8007692:	d00c      	beq.n	80076ae <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2b60      	cmp	r3, #96	; 0x60
 800769a:	d008      	beq.n	80076ae <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2b70      	cmp	r3, #112	; 0x70
 80076a2:	d004      	beq.n	80076ae <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80076a4:	f240 7187 	movw	r1, #1927	; 0x787
 80076a8:	483c      	ldr	r0, [pc, #240]	; (800779c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 80076aa:	f7fa f821 	bl	80016f0 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	2b80      	cmp	r3, #128	; 0x80
 80076b4:	d008      	beq.n	80076c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d004      	beq.n	80076c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80076be:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 80076c2:	4836      	ldr	r0, [pc, #216]	; (800779c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 80076c4:	f7fa f814 	bl	80016f0 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d101      	bne.n	80076d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80076d2:	2302      	movs	r3, #2
 80076d4:	e050      	b.n	8007778 <HAL_TIMEx_MasterConfigSynchronization+0x178>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2201      	movs	r2, #1
 80076da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2202      	movs	r2, #2
 80076e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	4313      	orrs	r3, r2
 8007706:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a1a      	ldr	r2, [pc, #104]	; (8007780 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d018      	beq.n	800774c <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a19      	ldr	r2, [pc, #100]	; (8007784 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d013      	beq.n	800774c <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800772c:	d00e      	beq.n	800774c <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a15      	ldr	r2, [pc, #84]	; (8007788 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d009      	beq.n	800774c <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a13      	ldr	r2, [pc, #76]	; (800778c <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d004      	beq.n	800774c <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a12      	ldr	r2, [pc, #72]	; (8007790 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d10c      	bne.n	8007766 <HAL_TIMEx_MasterConfigSynchronization+0x166>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007752:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	68ba      	ldr	r2, [r7, #8]
 800775a:	4313      	orrs	r3, r2
 800775c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007776:	2300      	movs	r3, #0
}
 8007778:	4618      	mov	r0, r3
 800777a:	3710      	adds	r7, #16
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}
 8007780:	40012c00 	.word	0x40012c00
 8007784:	40013400 	.word	0x40013400
 8007788:	40000400 	.word	0x40000400
 800778c:	40000800 	.word	0x40000800
 8007790:	40000c00 	.word	0x40000c00
 8007794:	40001000 	.word	0x40001000
 8007798:	40001400 	.word	0x40001400
 800779c:	0800c424 	.word	0x0800c424

080077a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80077aa:	2300      	movs	r3, #0
 80077ac:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a5e      	ldr	r2, [pc, #376]	; (800792c <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d009      	beq.n	80077cc <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a5c      	ldr	r2, [pc, #368]	; (8007930 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d004      	beq.n	80077cc <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 80077c2:	f240 71c3 	movw	r1, #1987	; 0x7c3
 80077c6:	485b      	ldr	r0, [pc, #364]	; (8007934 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80077c8:	f7f9 ff92 	bl	80016f0 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077d4:	d008      	beq.n	80077e8 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d004      	beq.n	80077e8 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 80077de:	f240 71c4 	movw	r1, #1988	; 0x7c4
 80077e2:	4854      	ldr	r0, [pc, #336]	; (8007934 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80077e4:	f7f9 ff84 	bl	80016f0 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077f0:	d008      	beq.n	8007804 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d004      	beq.n	8007804 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 80077fa:	f240 71c5 	movw	r1, #1989	; 0x7c5
 80077fe:	484d      	ldr	r0, [pc, #308]	; (8007934 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007800:	f7f9 ff76 	bl	80016f0 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d013      	beq.n	8007834 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007814:	d00e      	beq.n	8007834 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800781e:	d009      	beq.n	8007834 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007828:	d004      	beq.n	8007834 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800782a:	f240 71c6 	movw	r1, #1990	; 0x7c6
 800782e:	4841      	ldr	r0, [pc, #260]	; (8007934 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007830:	f7f9 ff5e 	bl	80016f0 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	2bff      	cmp	r3, #255	; 0xff
 800783a:	d904      	bls.n	8007846 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 800783c:	f240 71c7 	movw	r1, #1991	; 0x7c7
 8007840:	483c      	ldr	r0, [pc, #240]	; (8007934 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007842:	f7f9 ff55 	bl	80016f0 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800784e:	d008      	beq.n	8007862 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d004      	beq.n	8007862 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007858:	f44f 61f9 	mov.w	r1, #1992	; 0x7c8
 800785c:	4835      	ldr	r0, [pc, #212]	; (8007934 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800785e:	f7f9 ff47 	bl	80016f0 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	695b      	ldr	r3, [r3, #20]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d009      	beq.n	800787e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	695b      	ldr	r3, [r3, #20]
 800786e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007872:	d004      	beq.n	800787e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007874:	f240 71c9 	movw	r1, #1993	; 0x7c9
 8007878:	482e      	ldr	r0, [pc, #184]	; (8007934 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800787a:	f7f9 ff39 	bl	80016f0 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	69db      	ldr	r3, [r3, #28]
 8007882:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007886:	d008      	beq.n	800789a <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	69db      	ldr	r3, [r3, #28]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d004      	beq.n	800789a <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8007890:	f240 71ca 	movw	r1, #1994	; 0x7ca
 8007894:	4827      	ldr	r0, [pc, #156]	; (8007934 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007896:	f7f9 ff2b 	bl	80016f0 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d101      	bne.n	80078a8 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 80078a4:	2302      	movs	r3, #2
 80078a6:	e03d      	b.n	8007924 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	68db      	ldr	r3, [r3, #12]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	4313      	orrs	r3, r2
 80078f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	695b      	ldr	r3, [r3, #20]
 8007900:	4313      	orrs	r3, r2
 8007902:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	69db      	ldr	r3, [r3, #28]
 800790e:	4313      	orrs	r3, r2
 8007910:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	40012c00 	.word	0x40012c00
 8007930:	40013400 	.word	0x40013400
 8007934:	0800c424 	.word	0x0800c424

08007938 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007940:	bf00      	nop
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	bc80      	pop	{r7}
 8007948:	4770      	bx	lr

0800794a <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800794a:	b480      	push	{r7}
 800794c:	b083      	sub	sp, #12
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8007952:	bf00      	nop
 8007954:	370c      	adds	r7, #12
 8007956:	46bd      	mov	sp, r7
 8007958:	bc80      	pop	{r7}
 800795a:	4770      	bx	lr

0800795c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007964:	bf00      	nop
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	bc80      	pop	{r7}
 800796c:	4770      	bx	lr
	...

08007970 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d101      	bne.n	8007982 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	e0a7      	b.n	8007ad2 <HAL_UART_Init+0x162>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	699b      	ldr	r3, [r3, #24]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d02c      	beq.n	80079e4 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a53      	ldr	r2, [pc, #332]	; (8007adc <HAL_UART_Init+0x16c>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d00e      	beq.n	80079b2 <HAL_UART_Init+0x42>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a51      	ldr	r2, [pc, #324]	; (8007ae0 <HAL_UART_Init+0x170>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d009      	beq.n	80079b2 <HAL_UART_Init+0x42>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a50      	ldr	r2, [pc, #320]	; (8007ae4 <HAL_UART_Init+0x174>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d004      	beq.n	80079b2 <HAL_UART_Init+0x42>
 80079a8:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 80079ac:	484e      	ldr	r0, [pc, #312]	; (8007ae8 <HAL_UART_Init+0x178>)
 80079ae:	f7f9 fe9f 	bl	80016f0 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	699b      	ldr	r3, [r3, #24]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d032      	beq.n	8007a20 <HAL_UART_Init+0xb0>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	699b      	ldr	r3, [r3, #24]
 80079be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079c2:	d02d      	beq.n	8007a20 <HAL_UART_Init+0xb0>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	699b      	ldr	r3, [r3, #24]
 80079c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079cc:	d028      	beq.n	8007a20 <HAL_UART_Init+0xb0>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	699b      	ldr	r3, [r3, #24]
 80079d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079d6:	d023      	beq.n	8007a20 <HAL_UART_Init+0xb0>
 80079d8:	f240 116d 	movw	r1, #365	; 0x16d
 80079dc:	4842      	ldr	r0, [pc, #264]	; (8007ae8 <HAL_UART_Init+0x178>)
 80079de:	f7f9 fe87 	bl	80016f0 <assert_failed>
 80079e2:	e01d      	b.n	8007a20 <HAL_UART_Init+0xb0>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a3c      	ldr	r2, [pc, #240]	; (8007adc <HAL_UART_Init+0x16c>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d018      	beq.n	8007a20 <HAL_UART_Init+0xb0>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a3b      	ldr	r2, [pc, #236]	; (8007ae0 <HAL_UART_Init+0x170>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d013      	beq.n	8007a20 <HAL_UART_Init+0xb0>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a39      	ldr	r2, [pc, #228]	; (8007ae4 <HAL_UART_Init+0x174>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d00e      	beq.n	8007a20 <HAL_UART_Init+0xb0>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a39      	ldr	r2, [pc, #228]	; (8007aec <HAL_UART_Init+0x17c>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d009      	beq.n	8007a20 <HAL_UART_Init+0xb0>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a37      	ldr	r2, [pc, #220]	; (8007af0 <HAL_UART_Init+0x180>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d004      	beq.n	8007a20 <HAL_UART_Init+0xb0>
 8007a16:	f240 1171 	movw	r1, #369	; 0x171
 8007a1a:	4833      	ldr	r0, [pc, #204]	; (8007ae8 <HAL_UART_Init+0x178>)
 8007a1c:	f7f9 fe68 	bl	80016f0 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d009      	beq.n	8007a3c <HAL_UART_Init+0xcc>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a30:	d004      	beq.n	8007a3c <HAL_UART_Init+0xcc>
 8007a32:	f240 1173 	movw	r1, #371	; 0x173
 8007a36:	482c      	ldr	r0, [pc, #176]	; (8007ae8 <HAL_UART_Init+0x178>)
 8007a38:	f7f9 fe5a 	bl	80016f0 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d111      	bne.n	8007a6c <HAL_UART_Init+0xfc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f000 fb0d 	bl	8008070 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d102      	bne.n	8007a64 <HAL_UART_Init+0xf4>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a24      	ldr	r2, [pc, #144]	; (8007af4 <HAL_UART_Init+0x184>)
 8007a62:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2224      	movs	r2, #36	; 0x24
 8007a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68da      	ldr	r2, [r3, #12]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 fd01 	bl	800848c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	691a      	ldr	r2, [r3, #16]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	695a      	ldr	r2, [r3, #20]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007aa8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	68da      	ldr	r2, [r3, #12]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007ab8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2220      	movs	r2, #32
 8007ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2220      	movs	r2, #32
 8007acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ad0:	2300      	movs	r3, #0
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3708      	adds	r7, #8
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	40013800 	.word	0x40013800
 8007ae0:	40004400 	.word	0x40004400
 8007ae4:	40004800 	.word	0x40004800
 8007ae8:	0800c460 	.word	0x0800c460
 8007aec:	40004c00 	.word	0x40004c00
 8007af0:	40005000 	.word	0x40005000
 8007af4:	08001b85 	.word	0x08001b85

08007af8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b08a      	sub	sp, #40	; 0x28
 8007afc:	af02      	add	r7, sp, #8
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	603b      	str	r3, [r7, #0]
 8007b04:	4613      	mov	r3, r2
 8007b06:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	2b20      	cmp	r3, #32
 8007b16:	d17c      	bne.n	8007c12 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d002      	beq.n	8007b24 <HAL_UART_Transmit+0x2c>
 8007b1e:	88fb      	ldrh	r3, [r7, #6]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d101      	bne.n	8007b28 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	e075      	b.n	8007c14 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d101      	bne.n	8007b36 <HAL_UART_Transmit+0x3e>
 8007b32:	2302      	movs	r3, #2
 8007b34:	e06e      	b.n	8007c14 <HAL_UART_Transmit+0x11c>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2200      	movs	r2, #0
 8007b42:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2221      	movs	r2, #33	; 0x21
 8007b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b4c:	f7fa fa80 	bl	8002050 <HAL_GetTick>
 8007b50:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	88fa      	ldrh	r2, [r7, #6]
 8007b56:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	88fa      	ldrh	r2, [r7, #6]
 8007b5c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b66:	d108      	bne.n	8007b7a <HAL_UART_Transmit+0x82>
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d104      	bne.n	8007b7a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007b70:	2300      	movs	r3, #0
 8007b72:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	61bb      	str	r3, [r7, #24]
 8007b78:	e003      	b.n	8007b82 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007b8a:	e02a      	b.n	8007be2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	9300      	str	r3, [sp, #0]
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	2200      	movs	r2, #0
 8007b94:	2180      	movs	r1, #128	; 0x80
 8007b96:	68f8      	ldr	r0, [r7, #12]
 8007b98:	f000 faa0 	bl	80080dc <UART_WaitOnFlagUntilTimeout>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d001      	beq.n	8007ba6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e036      	b.n	8007c14 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d10b      	bne.n	8007bc4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	881b      	ldrh	r3, [r3, #0]
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007bba:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007bbc:	69bb      	ldr	r3, [r7, #24]
 8007bbe:	3302      	adds	r3, #2
 8007bc0:	61bb      	str	r3, [r7, #24]
 8007bc2:	e007      	b.n	8007bd4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	781a      	ldrb	r2, [r3, #0]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d1cf      	bne.n	8007b8c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	2140      	movs	r1, #64	; 0x40
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f000 fa70 	bl	80080dc <UART_WaitOnFlagUntilTimeout>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d001      	beq.n	8007c06 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e006      	b.n	8007c14 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	2220      	movs	r2, #32
 8007c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	e000      	b.n	8007c14 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007c12:	2302      	movs	r3, #2
  }
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3720      	adds	r7, #32
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	4613      	mov	r3, r2
 8007c28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	2b20      	cmp	r3, #32
 8007c34:	d11d      	bne.n	8007c72 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d002      	beq.n	8007c42 <HAL_UART_Receive_IT+0x26>
 8007c3c:	88fb      	ldrh	r3, [r7, #6]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d101      	bne.n	8007c46 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e016      	b.n	8007c74 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d101      	bne.n	8007c54 <HAL_UART_Receive_IT+0x38>
 8007c50:	2302      	movs	r3, #2
 8007c52:	e00f      	b.n	8007c74 <HAL_UART_Receive_IT+0x58>
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007c62:	88fb      	ldrh	r3, [r7, #6]
 8007c64:	461a      	mov	r2, r3
 8007c66:	68b9      	ldr	r1, [r7, #8]
 8007c68:	68f8      	ldr	r0, [r7, #12]
 8007c6a:	f000 fa81 	bl	8008170 <UART_Start_Receive_IT>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	e000      	b.n	8007c74 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007c72:	2302      	movs	r3, #2
  }
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b08a      	sub	sp, #40	; 0x28
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	695b      	ldr	r3, [r3, #20]
 8007c9a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca6:	f003 030f 	and.w	r3, r3, #15
 8007caa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d10d      	bne.n	8007cce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb4:	f003 0320 	and.w	r3, r3, #32
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d008      	beq.n	8007cce <HAL_UART_IRQHandler+0x52>
 8007cbc:	6a3b      	ldr	r3, [r7, #32]
 8007cbe:	f003 0320 	and.w	r3, r3, #32
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d003      	beq.n	8007cce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 fb34 	bl	8008334 <UART_Receive_IT>
      return;
 8007ccc:	e180      	b.n	8007fd0 <HAL_UART_IRQHandler+0x354>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f000 80b4 	beq.w	8007e3e <HAL_UART_IRQHandler+0x1c2>
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	f003 0301 	and.w	r3, r3, #1
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d105      	bne.n	8007cec <HAL_UART_IRQHandler+0x70>
 8007ce0:	6a3b      	ldr	r3, [r7, #32]
 8007ce2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	f000 80a9 	beq.w	8007e3e <HAL_UART_IRQHandler+0x1c2>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cee:	f003 0301 	and.w	r3, r3, #1
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d00a      	beq.n	8007d0c <HAL_UART_IRQHandler+0x90>
 8007cf6:	6a3b      	ldr	r3, [r7, #32]
 8007cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d005      	beq.n	8007d0c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d04:	f043 0201 	orr.w	r2, r3, #1
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0e:	f003 0304 	and.w	r3, r3, #4
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00a      	beq.n	8007d2c <HAL_UART_IRQHandler+0xb0>
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	f003 0301 	and.w	r3, r3, #1
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d005      	beq.n	8007d2c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d24:	f043 0202 	orr.w	r2, r3, #2
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2e:	f003 0302 	and.w	r3, r3, #2
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00a      	beq.n	8007d4c <HAL_UART_IRQHandler+0xd0>
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	f003 0301 	and.w	r3, r3, #1
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d005      	beq.n	8007d4c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d44:	f043 0204 	orr.w	r2, r3, #4
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4e:	f003 0308 	and.w	r3, r3, #8
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00f      	beq.n	8007d76 <HAL_UART_IRQHandler+0xfa>
 8007d56:	6a3b      	ldr	r3, [r7, #32]
 8007d58:	f003 0320 	and.w	r3, r3, #32
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d104      	bne.n	8007d6a <HAL_UART_IRQHandler+0xee>
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	f003 0301 	and.w	r3, r3, #1
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d005      	beq.n	8007d76 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6e:	f043 0208 	orr.w	r2, r3, #8
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f000 8123 	beq.w	8007fc6 <HAL_UART_IRQHandler+0x34a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d82:	f003 0320 	and.w	r3, r3, #32
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d007      	beq.n	8007d9a <HAL_UART_IRQHandler+0x11e>
 8007d8a:	6a3b      	ldr	r3, [r7, #32]
 8007d8c:	f003 0320 	and.w	r3, r3, #32
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d002      	beq.n	8007d9a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 facd 	bl	8008334 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	695b      	ldr	r3, [r3, #20]
 8007da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	bf14      	ite	ne
 8007da8:	2301      	movne	r3, #1
 8007daa:	2300      	moveq	r3, #0
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db4:	f003 0308 	and.w	r3, r3, #8
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d102      	bne.n	8007dc2 <HAL_UART_IRQHandler+0x146>
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d033      	beq.n	8007e2a <HAL_UART_IRQHandler+0x1ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 fa0d 	bl	80081e2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d024      	beq.n	8007e20 <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	695a      	ldr	r2, [r3, #20]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007de4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d013      	beq.n	8007e16 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df2:	4a79      	ldr	r2, [pc, #484]	; (8007fd8 <HAL_UART_IRQHandler+0x35c>)
 8007df4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7fb f8e6 	bl	8002fcc <HAL_DMA_Abort_IT>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d019      	beq.n	8007e3a <HAL_UART_IRQHandler+0x1be>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007e10:	4610      	mov	r0, r2
 8007e12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e14:	e011      	b.n	8007e3a <HAL_UART_IRQHandler+0x1be>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e1e:	e00c      	b.n	8007e3a <HAL_UART_IRQHandler+0x1be>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e28:	e007      	b.n	8007e3a <HAL_UART_IRQHandler+0x1be>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007e38:	e0c5      	b.n	8007fc6 <HAL_UART_IRQHandler+0x34a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e3a:	bf00      	nop
    return;
 8007e3c:	e0c3      	b.n	8007fc6 <HAL_UART_IRQHandler+0x34a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	f040 80a3 	bne.w	8007f8e <HAL_UART_IRQHandler+0x312>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4a:	f003 0310 	and.w	r3, r3, #16
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	f000 809d 	beq.w	8007f8e <HAL_UART_IRQHandler+0x312>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007e54:	6a3b      	ldr	r3, [r7, #32]
 8007e56:	f003 0310 	and.w	r3, r3, #16
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	f000 8097 	beq.w	8007f8e <HAL_UART_IRQHandler+0x312>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e60:	2300      	movs	r3, #0
 8007e62:	60fb      	str	r3, [r7, #12]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	60fb      	str	r3, [r7, #12]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	60fb      	str	r3, [r7, #12]
 8007e74:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	695b      	ldr	r3, [r3, #20]
 8007e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d04f      	beq.n	8007f24 <HAL_UART_IRQHandler+0x2a8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007e8e:	8a3b      	ldrh	r3, [r7, #16]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f000 809a 	beq.w	8007fca <HAL_UART_IRQHandler+0x34e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e9a:	8a3a      	ldrh	r2, [r7, #16]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	f080 8094 	bcs.w	8007fca <HAL_UART_IRQHandler+0x34e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	8a3a      	ldrh	r2, [r7, #16]
 8007ea6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eac:	699b      	ldr	r3, [r3, #24]
 8007eae:	2b20      	cmp	r3, #32
 8007eb0:	d02b      	beq.n	8007f0a <HAL_UART_IRQHandler+0x28e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68da      	ldr	r2, [r3, #12]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ec0:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	695a      	ldr	r2, [r3, #20]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f022 0201 	bic.w	r2, r2, #1
 8007ed0:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	695a      	ldr	r2, [r3, #20]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ee0:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2220      	movs	r2, #32
 8007ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68da      	ldr	r2, [r3, #12]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f022 0210 	bic.w	r2, r2, #16
 8007efe:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7fb f827 	bl	8002f58 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8007f16:	b292      	uxth	r2, r2
 8007f18:	1a8a      	subs	r2, r1, r2
 8007f1a:	b292      	uxth	r2, r2
 8007f1c:	4611      	mov	r1, r2
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
      return;
 8007f22:	e052      	b.n	8007fca <HAL_UART_IRQHandler+0x34e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	1ad3      	subs	r3, r2, r3
 8007f30:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d048      	beq.n	8007fce <HAL_UART_IRQHandler+0x352>
          &&(nb_rx_data > 0U) )
 8007f3c:	8a7b      	ldrh	r3, [r7, #18]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d045      	beq.n	8007fce <HAL_UART_IRQHandler+0x352>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	68da      	ldr	r2, [r3, #12]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007f50:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	695a      	ldr	r2, [r3, #20]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f022 0201 	bic.w	r2, r2, #1
 8007f60:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2220      	movs	r2, #32
 8007f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	68da      	ldr	r2, [r3, #12]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f022 0210 	bic.w	r2, r2, #16
 8007f7e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f84:	8a7a      	ldrh	r2, [r7, #18]
 8007f86:	4611      	mov	r1, r2
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
      return;
 8007f8c:	e01f      	b.n	8007fce <HAL_UART_IRQHandler+0x352>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d008      	beq.n	8007faa <HAL_UART_IRQHandler+0x32e>
 8007f98:	6a3b      	ldr	r3, [r7, #32]
 8007f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d003      	beq.n	8007faa <HAL_UART_IRQHandler+0x32e>
  {
    UART_Transmit_IT(huart);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f95e 	bl	8008264 <UART_Transmit_IT>
    return;
 8007fa8:	e012      	b.n	8007fd0 <HAL_UART_IRQHandler+0x354>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00d      	beq.n	8007fd0 <HAL_UART_IRQHandler+0x354>
 8007fb4:	6a3b      	ldr	r3, [r7, #32]
 8007fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d008      	beq.n	8007fd0 <HAL_UART_IRQHandler+0x354>
  {
    UART_EndTransmit_IT(huart);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f99f 	bl	8008302 <UART_EndTransmit_IT>
    return;
 8007fc4:	e004      	b.n	8007fd0 <HAL_UART_IRQHandler+0x354>
    return;
 8007fc6:	bf00      	nop
 8007fc8:	e002      	b.n	8007fd0 <HAL_UART_IRQHandler+0x354>
      return;
 8007fca:	bf00      	nop
 8007fcc:	e000      	b.n	8007fd0 <HAL_UART_IRQHandler+0x354>
      return;
 8007fce:	bf00      	nop
  }
}
 8007fd0:	3728      	adds	r7, #40	; 0x28
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	0800823b 	.word	0x0800823b

08007fdc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007fe4:	bf00      	nop
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bc80      	pop	{r7}
 8007fec:	4770      	bx	lr

08007fee <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b083      	sub	sp, #12
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007ff6:	bf00      	nop
 8007ff8:	370c      	adds	r7, #12
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bc80      	pop	{r7}
 8007ffe:	4770      	bx	lr

08008000 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008008:	bf00      	nop
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	bc80      	pop	{r7}
 8008010:	4770      	bx	lr

08008012 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008012:	b480      	push	{r7}
 8008014:	b083      	sub	sp, #12
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800801a:	bf00      	nop
 800801c:	370c      	adds	r7, #12
 800801e:	46bd      	mov	sp, r7
 8008020:	bc80      	pop	{r7}
 8008022:	4770      	bx	lr

08008024 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800802c:	bf00      	nop
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	bc80      	pop	{r7}
 8008034:	4770      	bx	lr

08008036 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008036:	b480      	push	{r7}
 8008038:	b083      	sub	sp, #12
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800803e:	bf00      	nop
 8008040:	370c      	adds	r7, #12
 8008042:	46bd      	mov	sp, r7
 8008044:	bc80      	pop	{r7}
 8008046:	4770      	bx	lr

08008048 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	bc80      	pop	{r7}
 8008058:	4770      	bx	lr

0800805a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800805a:	b480      	push	{r7}
 800805c:	b083      	sub	sp, #12
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
 8008062:	460b      	mov	r3, r1
 8008064:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008066:	bf00      	nop
 8008068:	370c      	adds	r7, #12
 800806a:	46bd      	mov	sp, r7
 800806c:	bc80      	pop	{r7}
 800806e:	4770      	bx	lr

08008070 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a0f      	ldr	r2, [pc, #60]	; (80080b8 <UART_InitCallbacksToDefault+0x48>)
 800807c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4a0e      	ldr	r2, [pc, #56]	; (80080bc <UART_InitCallbacksToDefault+0x4c>)
 8008082:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a0e      	ldr	r2, [pc, #56]	; (80080c0 <UART_InitCallbacksToDefault+0x50>)
 8008088:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a0d      	ldr	r2, [pc, #52]	; (80080c4 <UART_InitCallbacksToDefault+0x54>)
 800808e:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	4a0d      	ldr	r2, [pc, #52]	; (80080c8 <UART_InitCallbacksToDefault+0x58>)
 8008094:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4a0c      	ldr	r2, [pc, #48]	; (80080cc <UART_InitCallbacksToDefault+0x5c>)
 800809a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a0c      	ldr	r2, [pc, #48]	; (80080d0 <UART_InitCallbacksToDefault+0x60>)
 80080a0:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4a0b      	ldr	r2, [pc, #44]	; (80080d4 <UART_InitCallbacksToDefault+0x64>)
 80080a6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	4a0b      	ldr	r2, [pc, #44]	; (80080d8 <UART_InitCallbacksToDefault+0x68>)
 80080ac:	669a      	str	r2, [r3, #104]	; 0x68

}
 80080ae:	bf00      	nop
 80080b0:	370c      	adds	r7, #12
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bc80      	pop	{r7}
 80080b6:	4770      	bx	lr
 80080b8:	08007fef 	.word	0x08007fef
 80080bc:	08007fdd 	.word	0x08007fdd
 80080c0:	08008001 	.word	0x08008001
 80080c4:	080016a5 	.word	0x080016a5
 80080c8:	08008013 	.word	0x08008013
 80080cc:	08008025 	.word	0x08008025
 80080d0:	08008037 	.word	0x08008037
 80080d4:	08008049 	.word	0x08008049
 80080d8:	0800805b 	.word	0x0800805b

080080dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b084      	sub	sp, #16
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	603b      	str	r3, [r7, #0]
 80080e8:	4613      	mov	r3, r2
 80080ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080ec:	e02c      	b.n	8008148 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f4:	d028      	beq.n	8008148 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d007      	beq.n	800810c <UART_WaitOnFlagUntilTimeout+0x30>
 80080fc:	f7f9 ffa8 	bl	8002050 <HAL_GetTick>
 8008100:	4602      	mov	r2, r0
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	69ba      	ldr	r2, [r7, #24]
 8008108:	429a      	cmp	r2, r3
 800810a:	d21d      	bcs.n	8008148 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68da      	ldr	r2, [r3, #12]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800811a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	695a      	ldr	r2, [r3, #20]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f022 0201 	bic.w	r2, r2, #1
 800812a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2220      	movs	r2, #32
 8008130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2220      	movs	r2, #32
 8008138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2200      	movs	r2, #0
 8008140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008144:	2303      	movs	r3, #3
 8008146:	e00f      	b.n	8008168 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	4013      	ands	r3, r2
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	429a      	cmp	r2, r3
 8008156:	bf0c      	ite	eq
 8008158:	2301      	moveq	r3, #1
 800815a:	2300      	movne	r3, #0
 800815c:	b2db      	uxtb	r3, r3
 800815e:	461a      	mov	r2, r3
 8008160:	79fb      	ldrb	r3, [r7, #7]
 8008162:	429a      	cmp	r2, r3
 8008164:	d0c3      	beq.n	80080ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008170:	b480      	push	{r7}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	4613      	mov	r3, r2
 800817c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	68ba      	ldr	r2, [r7, #8]
 8008182:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	88fa      	ldrh	r2, [r7, #6]
 8008188:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	88fa      	ldrh	r2, [r7, #6]
 800818e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2200      	movs	r2, #0
 8008194:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2222      	movs	r2, #34	; 0x22
 800819a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	68da      	ldr	r2, [r3, #12]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081b4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	695a      	ldr	r2, [r3, #20]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f042 0201 	orr.w	r2, r2, #1
 80081c4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68da      	ldr	r2, [r3, #12]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f042 0220 	orr.w	r2, r2, #32
 80081d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3714      	adds	r7, #20
 80081dc:	46bd      	mov	sp, r7
 80081de:	bc80      	pop	{r7}
 80081e0:	4770      	bx	lr

080081e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081e2:	b480      	push	{r7}
 80081e4:	b083      	sub	sp, #12
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	68da      	ldr	r2, [r3, #12]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80081f8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	695a      	ldr	r2, [r3, #20]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f022 0201 	bic.w	r2, r2, #1
 8008208:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800820e:	2b01      	cmp	r3, #1
 8008210:	d107      	bne.n	8008222 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	68da      	ldr	r2, [r3, #12]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f022 0210 	bic.w	r2, r2, #16
 8008220:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2220      	movs	r2, #32
 8008226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008230:	bf00      	nop
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	bc80      	pop	{r7}
 8008238:	4770      	bx	lr

0800823a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800823a:	b580      	push	{r7, lr}
 800823c:	b084      	sub	sp, #16
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008246:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2200      	movs	r2, #0
 8008252:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800825c:	bf00      	nop
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008272:	b2db      	uxtb	r3, r3
 8008274:	2b21      	cmp	r3, #33	; 0x21
 8008276:	d13e      	bne.n	80082f6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008280:	d114      	bne.n	80082ac <UART_Transmit_IT+0x48>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d110      	bne.n	80082ac <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a1b      	ldr	r3, [r3, #32]
 800828e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	881b      	ldrh	r3, [r3, #0]
 8008294:	461a      	mov	r2, r3
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800829e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6a1b      	ldr	r3, [r3, #32]
 80082a4:	1c9a      	adds	r2, r3, #2
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	621a      	str	r2, [r3, #32]
 80082aa:	e008      	b.n	80082be <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6a1b      	ldr	r3, [r3, #32]
 80082b0:	1c59      	adds	r1, r3, #1
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	6211      	str	r1, [r2, #32]
 80082b6:	781a      	ldrb	r2, [r3, #0]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	3b01      	subs	r3, #1
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	4619      	mov	r1, r3
 80082cc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d10f      	bne.n	80082f2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	68da      	ldr	r2, [r3, #12]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	68da      	ldr	r2, [r3, #12]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80082f2:	2300      	movs	r3, #0
 80082f4:	e000      	b.n	80082f8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80082f6:	2302      	movs	r3, #2
  }
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3714      	adds	r7, #20
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bc80      	pop	{r7}
 8008300:	4770      	bx	lr

08008302 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008302:	b580      	push	{r7, lr}
 8008304:	b082      	sub	sp, #8
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	68da      	ldr	r2, [r3, #12]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008318:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2220      	movs	r2, #32
 800831e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b086      	sub	sp, #24
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008342:	b2db      	uxtb	r3, r3
 8008344:	2b22      	cmp	r3, #34	; 0x22
 8008346:	f040 809b 	bne.w	8008480 <UART_Receive_IT+0x14c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	689b      	ldr	r3, [r3, #8]
 800834e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008352:	d117      	bne.n	8008384 <UART_Receive_IT+0x50>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	691b      	ldr	r3, [r3, #16]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d113      	bne.n	8008384 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800835c:	2300      	movs	r3, #0
 800835e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008364:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	b29b      	uxth	r3, r3
 800836e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008372:	b29a      	uxth	r2, r3
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800837c:	1c9a      	adds	r2, r3, #2
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	629a      	str	r2, [r3, #40]	; 0x28
 8008382:	e026      	b.n	80083d2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008388:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800838a:	2300      	movs	r3, #0
 800838c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008396:	d007      	beq.n	80083a8 <UART_Receive_IT+0x74>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d10a      	bne.n	80083b6 <UART_Receive_IT+0x82>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d106      	bne.n	80083b6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	b2da      	uxtb	r2, r3
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	701a      	strb	r2, [r3, #0]
 80083b4:	e008      	b.n	80083c8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083c2:	b2da      	uxtb	r2, r3
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083cc:	1c5a      	adds	r2, r3, #1
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	3b01      	subs	r3, #1
 80083da:	b29b      	uxth	r3, r3
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	4619      	mov	r1, r3
 80083e0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d14a      	bne.n	800847c <UART_Receive_IT+0x148>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	68da      	ldr	r2, [r3, #12]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f022 0220 	bic.w	r2, r2, #32
 80083f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	68da      	ldr	r2, [r3, #12]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008404:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	695a      	ldr	r2, [r3, #20]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f022 0201 	bic.w	r2, r2, #1
 8008414:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2220      	movs	r2, #32
 800841a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008422:	2b01      	cmp	r3, #1
 8008424:	d124      	bne.n	8008470 <UART_Receive_IT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	68da      	ldr	r2, [r3, #12]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f022 0210 	bic.w	r2, r2, #16
 800843a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f003 0310 	and.w	r3, r3, #16
 8008446:	2b10      	cmp	r3, #16
 8008448:	d10a      	bne.n	8008460 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800844a:	2300      	movs	r3, #0
 800844c:	60fb      	str	r3, [r7, #12]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	60fb      	str	r3, [r7, #12]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	60fb      	str	r3, [r7, #12]
 800845e:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8008468:	4611      	mov	r1, r2
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	4798      	blx	r3
 800846e:	e003      	b.n	8008478 <UART_Receive_IT+0x144>
      else
      {
       /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	4798      	blx	r3
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008478:	2300      	movs	r3, #0
 800847a:	e002      	b.n	8008482 <UART_Receive_IT+0x14e>
    }
    return HAL_OK;
 800847c:	2300      	movs	r3, #0
 800847e:	e000      	b.n	8008482 <UART_Receive_IT+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8008480:	2302      	movs	r3, #2
  }
}
 8008482:	4618      	mov	r0, r3
 8008484:	3718      	adds	r7, #24
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
	...

0800848c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	4a5f      	ldr	r2, [pc, #380]	; (8008618 <UART_SetConfig+0x18c>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d904      	bls.n	80084a8 <UART_SetConfig+0x1c>
 800849e:	f640 6153 	movw	r1, #3667	; 0xe53
 80084a2:	485e      	ldr	r0, [pc, #376]	; (800861c <UART_SetConfig+0x190>)
 80084a4:	f7f9 f924 	bl	80016f0 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d009      	beq.n	80084c4 <UART_SetConfig+0x38>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084b8:	d004      	beq.n	80084c4 <UART_SetConfig+0x38>
 80084ba:	f640 6154 	movw	r1, #3668	; 0xe54
 80084be:	4857      	ldr	r0, [pc, #348]	; (800861c <UART_SetConfig+0x190>)
 80084c0:	f7f9 f916 	bl	80016f0 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d00e      	beq.n	80084ea <UART_SetConfig+0x5e>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	691b      	ldr	r3, [r3, #16]
 80084d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084d4:	d009      	beq.n	80084ea <UART_SetConfig+0x5e>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80084de:	d004      	beq.n	80084ea <UART_SetConfig+0x5e>
 80084e0:	f640 6155 	movw	r1, #3669	; 0xe55
 80084e4:	484d      	ldr	r0, [pc, #308]	; (800861c <UART_SetConfig+0x190>)
 80084e6:	f7f9 f903 	bl	80016f0 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	695a      	ldr	r2, [r3, #20]
 80084ee:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80084f2:	4013      	ands	r3, r2
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d103      	bne.n	8008500 <UART_SetConfig+0x74>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	695b      	ldr	r3, [r3, #20]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d104      	bne.n	800850a <UART_SetConfig+0x7e>
 8008500:	f640 6156 	movw	r1, #3670	; 0xe56
 8008504:	4845      	ldr	r0, [pc, #276]	; (800861c <UART_SetConfig+0x190>)
 8008506:	f7f9 f8f3 	bl	80016f0 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	68da      	ldr	r2, [r3, #12]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	430a      	orrs	r2, r1
 800851e:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	689a      	ldr	r2, [r3, #8]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	691b      	ldr	r3, [r3, #16]
 8008528:	431a      	orrs	r2, r3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	695b      	ldr	r3, [r3, #20]
 800852e:	4313      	orrs	r3, r2
 8008530:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800853c:	f023 030c 	bic.w	r3, r3, #12
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	6812      	ldr	r2, [r2, #0]
 8008544:	68b9      	ldr	r1, [r7, #8]
 8008546:	430b      	orrs	r3, r1
 8008548:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	695b      	ldr	r3, [r3, #20]
 8008550:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	699a      	ldr	r2, [r3, #24]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	430a      	orrs	r2, r1
 800855e:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a2e      	ldr	r2, [pc, #184]	; (8008620 <UART_SetConfig+0x194>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d103      	bne.n	8008572 <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800856a:	f7fb feaf 	bl	80042cc <HAL_RCC_GetPCLK2Freq>
 800856e:	60f8      	str	r0, [r7, #12]
 8008570:	e002      	b.n	8008578 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008572:	f7fb fe97 	bl	80042a4 <HAL_RCC_GetPCLK1Freq>
 8008576:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	4613      	mov	r3, r2
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	4413      	add	r3, r2
 8008580:	009a      	lsls	r2, r3, #2
 8008582:	441a      	add	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	fbb2 f3f3 	udiv	r3, r2, r3
 800858e:	4a25      	ldr	r2, [pc, #148]	; (8008624 <UART_SetConfig+0x198>)
 8008590:	fba2 2303 	umull	r2, r3, r2, r3
 8008594:	095b      	lsrs	r3, r3, #5
 8008596:	0119      	lsls	r1, r3, #4
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	4613      	mov	r3, r2
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	4413      	add	r3, r2
 80085a0:	009a      	lsls	r2, r3, #2
 80085a2:	441a      	add	r2, r3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80085ae:	4b1d      	ldr	r3, [pc, #116]	; (8008624 <UART_SetConfig+0x198>)
 80085b0:	fba3 0302 	umull	r0, r3, r3, r2
 80085b4:	095b      	lsrs	r3, r3, #5
 80085b6:	2064      	movs	r0, #100	; 0x64
 80085b8:	fb00 f303 	mul.w	r3, r0, r3
 80085bc:	1ad3      	subs	r3, r2, r3
 80085be:	011b      	lsls	r3, r3, #4
 80085c0:	3332      	adds	r3, #50	; 0x32
 80085c2:	4a18      	ldr	r2, [pc, #96]	; (8008624 <UART_SetConfig+0x198>)
 80085c4:	fba2 2303 	umull	r2, r3, r2, r3
 80085c8:	095b      	lsrs	r3, r3, #5
 80085ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085ce:	4419      	add	r1, r3
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	4613      	mov	r3, r2
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	4413      	add	r3, r2
 80085d8:	009a      	lsls	r2, r3, #2
 80085da:	441a      	add	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80085e6:	4b0f      	ldr	r3, [pc, #60]	; (8008624 <UART_SetConfig+0x198>)
 80085e8:	fba3 0302 	umull	r0, r3, r3, r2
 80085ec:	095b      	lsrs	r3, r3, #5
 80085ee:	2064      	movs	r0, #100	; 0x64
 80085f0:	fb00 f303 	mul.w	r3, r0, r3
 80085f4:	1ad3      	subs	r3, r2, r3
 80085f6:	011b      	lsls	r3, r3, #4
 80085f8:	3332      	adds	r3, #50	; 0x32
 80085fa:	4a0a      	ldr	r2, [pc, #40]	; (8008624 <UART_SetConfig+0x198>)
 80085fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008600:	095b      	lsrs	r3, r3, #5
 8008602:	f003 020f 	and.w	r2, r3, #15
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	440a      	add	r2, r1
 800860c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800860e:	bf00      	nop
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	0044aa20 	.word	0x0044aa20
 800861c:	0800c460 	.word	0x0800c460
 8008620:	40013800 	.word	0x40013800
 8008624:	51eb851f 	.word	0x51eb851f

08008628 <BAT_init>:
static ADC_HandleTypeDef *g_BAT_adcHandle;
static RTC_HandleTypeDef *g_BAT_rtcHandle;
static RTC_TimeTypeDef    g_BAT_lastReadTime;

void BAT_init(ADC_HandleTypeDef *p_adcHandle, RTC_HandleTypeDef *p_rtcHandle)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef l_halReturnCode;
  RTC_TimeTypeDef   l_time;
  RTC_DateTypeDef   l_date;

  LOG_info("Initializing battery check");
 8008632:	491e      	ldr	r1, [pc, #120]	; (80086ac <BAT_init+0x84>)
 8008634:	2001      	movs	r0, #1
 8008636:	f001 fbb3 	bl	8009da0 <LOG_log>

  g_BAT_adcHandle = p_adcHandle;
 800863a:	4a1d      	ldr	r2, [pc, #116]	; (80086b0 <BAT_init+0x88>)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6013      	str	r3, [r2, #0]
  g_BAT_rtcHandle = p_rtcHandle;
 8008640:	4a1c      	ldr	r2, [pc, #112]	; (80086b4 <BAT_init+0x8c>)
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	6013      	str	r3, [r2, #0]

  l_halReturnCode = HAL_RTC_GetTime(g_BAT_rtcHandle, &l_time, RTC_FORMAT_BCD);
 8008646:	4b1b      	ldr	r3, [pc, #108]	; (80086b4 <BAT_init+0x8c>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f107 010c 	add.w	r1, r7, #12
 800864e:	2201      	movs	r2, #1
 8008650:	4618      	mov	r0, r3
 8008652:	f7fc fa39 	bl	8004ac8 <HAL_RTC_GetTime>
 8008656:	4603      	mov	r3, r0
 8008658:	73fb      	strb	r3, [r7, #15]

  if (l_halReturnCode != HAL_OK)
 800865a:	7bfb      	ldrb	r3, [r7, #15]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d005      	beq.n	800866c <BAT_init+0x44>
  {
    LOG_error("HAL_RTC_GetTime() returned an error code: %d", l_halReturnCode);
 8008660:	7bfb      	ldrb	r3, [r7, #15]
 8008662:	461a      	mov	r2, r3
 8008664:	4914      	ldr	r1, [pc, #80]	; (80086b8 <BAT_init+0x90>)
 8008666:	2003      	movs	r0, #3
 8008668:	f001 fb9a 	bl	8009da0 <LOG_log>
  else
  {
    ; /* Nothing to to */
  }

  l_halReturnCode = HAL_RTC_GetDate(g_BAT_rtcHandle, &l_date, RTC_FORMAT_BCD);
 800866c:	4b11      	ldr	r3, [pc, #68]	; (80086b4 <BAT_init+0x8c>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f107 0108 	add.w	r1, r7, #8
 8008674:	2201      	movs	r2, #1
 8008676:	4618      	mov	r0, r3
 8008678:	f7fc fc2a 	bl	8004ed0 <HAL_RTC_GetDate>
 800867c:	4603      	mov	r3, r0
 800867e:	73fb      	strb	r3, [r7, #15]

  if (l_halReturnCode != HAL_OK)
 8008680:	7bfb      	ldrb	r3, [r7, #15]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d005      	beq.n	8008692 <BAT_init+0x6a>
  {
    LOG_error("HAL_RTC_GetDate() returned an error code: %d", l_halReturnCode);
 8008686:	7bfb      	ldrb	r3, [r7, #15]
 8008688:	461a      	mov	r2, r3
 800868a:	490c      	ldr	r1, [pc, #48]	; (80086bc <BAT_init+0x94>)
 800868c:	2003      	movs	r0, #3
 800868e:	f001 fb87 	bl	8009da0 <LOG_log>
  else
  {
    ; /* Nothing to to */
  }

  g_BAT_lastReadTime = l_time;
 8008692:	4b0b      	ldr	r3, [pc, #44]	; (80086c0 <BAT_init+0x98>)
 8008694:	f107 020c 	add.w	r2, r7, #12
 8008698:	6812      	ldr	r2, [r2, #0]
 800869a:	4611      	mov	r1, r2
 800869c:	8019      	strh	r1, [r3, #0]
 800869e:	3302      	adds	r3, #2
 80086a0:	0c12      	lsrs	r2, r2, #16
 80086a2:	701a      	strb	r2, [r3, #0]

  return;
 80086a4:	bf00      	nop
}
 80086a6:	3710      	adds	r7, #16
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	0800c49c 	.word	0x0800c49c
 80086b0:	200000a8 	.word	0x200000a8
 80086b4:	200000ac 	.word	0x200000ac
 80086b8:	0800c4b8 	.word	0x0800c4b8
 80086bc:	0800c4e8 	.word	0x0800c4e8
 80086c0:	200000b0 	.word	0x200000b0

080086c4 <BAT_update>:

void BAT_update(uint32_t *p_voltageInMv)
{
 80086c4:	b590      	push	{r4, r7, lr}
 80086c6:	b089      	sub	sp, #36	; 0x24
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef   l_time;
  RTC_DateTypeDef   l_date;
  uint32_t          l_adcRawData;
  float             l_voltageInV;

  l_halReturnCode = HAL_RTC_GetTime(g_BAT_rtcHandle, &l_time, RTC_FORMAT_BCD);
 80086cc:	4b48      	ldr	r3, [pc, #288]	; (80087f0 <BAT_update+0x12c>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f107 0110 	add.w	r1, r7, #16
 80086d4:	2201      	movs	r2, #1
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7fc f9f6 	bl	8004ac8 <HAL_RTC_GetTime>
 80086dc:	4603      	mov	r3, r0
 80086de:	77fb      	strb	r3, [r7, #31]

  if (l_halReturnCode != HAL_OK)
 80086e0:	7ffb      	ldrb	r3, [r7, #31]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d005      	beq.n	80086f2 <BAT_update+0x2e>
  {
    LOG_error("HAL_RTC_GetTime() returned an error code: %d", l_halReturnCode);
 80086e6:	7ffb      	ldrb	r3, [r7, #31]
 80086e8:	461a      	mov	r2, r3
 80086ea:	4942      	ldr	r1, [pc, #264]	; (80087f4 <BAT_update+0x130>)
 80086ec:	2003      	movs	r0, #3
 80086ee:	f001 fb57 	bl	8009da0 <LOG_log>
  else
  {
    ; /* Nothing to to */
  }

  l_halReturnCode = HAL_RTC_GetDate(g_BAT_rtcHandle, &l_date, RTC_FORMAT_BCD);
 80086f2:	4b3f      	ldr	r3, [pc, #252]	; (80087f0 <BAT_update+0x12c>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f107 010c 	add.w	r1, r7, #12
 80086fa:	2201      	movs	r2, #1
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7fc fbe7 	bl	8004ed0 <HAL_RTC_GetDate>
 8008702:	4603      	mov	r3, r0
 8008704:	77fb      	strb	r3, [r7, #31]

  if (l_halReturnCode != HAL_OK)
 8008706:	7ffb      	ldrb	r3, [r7, #31]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d005      	beq.n	8008718 <BAT_update+0x54>
  {
    LOG_error("HAL_RTC_GetDate() returned an error code: %d", l_halReturnCode);
 800870c:	7ffb      	ldrb	r3, [r7, #31]
 800870e:	461a      	mov	r2, r3
 8008710:	4939      	ldr	r1, [pc, #228]	; (80087f8 <BAT_update+0x134>)
 8008712:	2003      	movs	r0, #3
 8008714:	f001 fb44 	bl	8009da0 <LOG_log>
  else
  {
    ; /* Nothing to to */
  }

  if (UTI_turnRtcTimeToSeconds(&l_time) - UTI_turnRtcTimeToSeconds(&g_BAT_lastReadTime) >= BAT_POLLING_PERIOD_IN_S)
 8008718:	f107 0310 	add.w	r3, r7, #16
 800871c:	4618      	mov	r0, r3
 800871e:	f001 ff92 	bl	800a646 <UTI_turnRtcTimeToSeconds>
 8008722:	4604      	mov	r4, r0
 8008724:	4835      	ldr	r0, [pc, #212]	; (80087fc <BAT_update+0x138>)
 8008726:	f001 ff8e 	bl	800a646 <UTI_turnRtcTimeToSeconds>
 800872a:	4603      	mov	r3, r0
 800872c:	1ae3      	subs	r3, r4, r3
 800872e:	2b09      	cmp	r3, #9
 8008730:	d959      	bls.n	80087e6 <BAT_update+0x122>
  {
    g_BAT_lastReadTime = l_time;
 8008732:	4b32      	ldr	r3, [pc, #200]	; (80087fc <BAT_update+0x138>)
 8008734:	f107 0210 	add.w	r2, r7, #16
 8008738:	6812      	ldr	r2, [r2, #0]
 800873a:	4611      	mov	r1, r2
 800873c:	8019      	strh	r1, [r3, #0]
 800873e:	3302      	adds	r3, #2
 8008740:	0c12      	lsrs	r2, r2, #16
 8008742:	701a      	strb	r2, [r3, #0]

    l_halReturnCode = HAL_ADC_Start(g_BAT_adcHandle);
 8008744:	4b2e      	ldr	r3, [pc, #184]	; (8008800 <BAT_update+0x13c>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4618      	mov	r0, r3
 800874a:	f7f9 fe51 	bl	80023f0 <HAL_ADC_Start>
 800874e:	4603      	mov	r3, r0
 8008750:	77fb      	strb	r3, [r7, #31]

    if (l_halReturnCode != HAL_OK)
 8008752:	7ffb      	ldrb	r3, [r7, #31]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d005      	beq.n	8008764 <BAT_update+0xa0>
    {
      LOG_error("HAL_ADC_Start() returned an error code: %d", l_halReturnCode);
 8008758:	7ffb      	ldrb	r3, [r7, #31]
 800875a:	461a      	mov	r2, r3
 800875c:	4929      	ldr	r1, [pc, #164]	; (8008804 <BAT_update+0x140>)
 800875e:	2003      	movs	r0, #3
 8008760:	f001 fb1e 	bl	8009da0 <LOG_log>
    else
    {
      ; /* Nothing to to */
    }

    l_halReturnCode = HAL_ADC_PollForConversion(g_BAT_adcHandle, HAL_MAX_DELAY);
 8008764:	4b26      	ldr	r3, [pc, #152]	; (8008800 <BAT_update+0x13c>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f04f 31ff 	mov.w	r1, #4294967295
 800876c:	4618      	mov	r0, r3
 800876e:	f7f9 ff05 	bl	800257c <HAL_ADC_PollForConversion>
 8008772:	4603      	mov	r3, r0
 8008774:	77fb      	strb	r3, [r7, #31]

    if (l_halReturnCode != HAL_OK)
 8008776:	7ffb      	ldrb	r3, [r7, #31]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d005      	beq.n	8008788 <BAT_update+0xc4>
    {
      LOG_error("HAL_ADC_PollForConversion() returned an error code: %d", l_halReturnCode);
 800877c:	7ffb      	ldrb	r3, [r7, #31]
 800877e:	461a      	mov	r2, r3
 8008780:	4921      	ldr	r1, [pc, #132]	; (8008808 <BAT_update+0x144>)
 8008782:	2003      	movs	r0, #3
 8008784:	f001 fb0c 	bl	8009da0 <LOG_log>
    else
    {
      ; /* Nothing to to */
    }

    l_adcRawData = HAL_ADC_GetValue(g_BAT_adcHandle);
 8008788:	4b1d      	ldr	r3, [pc, #116]	; (8008800 <BAT_update+0x13c>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4618      	mov	r0, r3
 800878e:	f7fa f817 	bl	80027c0 <HAL_ADC_GetValue>
 8008792:	61b8      	str	r0, [r7, #24]

    /* Apply conversion based on STM32 reference voltage & resolution */
    l_voltageInV  = (l_adcRawData * 3.30f ) / 4096.0f;
 8008794:	69b8      	ldr	r0, [r7, #24]
 8008796:	f7f7 fe03 	bl	80003a0 <__aeabi_ui2f>
 800879a:	4603      	mov	r3, r0
 800879c:	491b      	ldr	r1, [pc, #108]	; (800880c <BAT_update+0x148>)
 800879e:	4618      	mov	r0, r3
 80087a0:	f7f7 fe56 	bl	8000450 <__aeabi_fmul>
 80087a4:	4603      	mov	r3, r0
 80087a6:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7f7 ff04 	bl	80005b8 <__aeabi_fdiv>
 80087b0:	4603      	mov	r3, r0
 80087b2:	617b      	str	r3, [r7, #20]

    /* Consider voltage divider used between the battery & the ADC input */
    l_voltageInV *= 11.0f;
 80087b4:	4916      	ldr	r1, [pc, #88]	; (8008810 <BAT_update+0x14c>)
 80087b6:	6978      	ldr	r0, [r7, #20]
 80087b8:	f7f7 fe4a 	bl	8000450 <__aeabi_fmul>
 80087bc:	4603      	mov	r3, r0
 80087be:	617b      	str	r3, [r7, #20]

    *p_voltageInMv = (uint32_t)(l_voltageInV * 1000.0f);
 80087c0:	4914      	ldr	r1, [pc, #80]	; (8008814 <BAT_update+0x150>)
 80087c2:	6978      	ldr	r0, [r7, #20]
 80087c4:	f7f7 fe44 	bl	8000450 <__aeabi_fmul>
 80087c8:	4603      	mov	r3, r0
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7f7 ffb6 	bl	800073c <__aeabi_f2uiz>
 80087d0:	4602      	mov	r2, r0
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	601a      	str	r2, [r3, #0]

    LOG_debug("Battery level: %u mV", *p_voltageInMv);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	461a      	mov	r2, r3
 80087dc:	490e      	ldr	r1, [pc, #56]	; (8008818 <BAT_update+0x154>)
 80087de:	2000      	movs	r0, #0
 80087e0:	f001 fade 	bl	8009da0 <LOG_log>
  else
  {
    ; /* Nothing to do */
  }

  return;
 80087e4:	bf00      	nop
 80087e6:	bf00      	nop
}
 80087e8:	3724      	adds	r7, #36	; 0x24
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd90      	pop	{r4, r7, pc}
 80087ee:	bf00      	nop
 80087f0:	200000ac 	.word	0x200000ac
 80087f4:	0800c4b8 	.word	0x0800c4b8
 80087f8:	0800c4e8 	.word	0x0800c4e8
 80087fc:	200000b0 	.word	0x200000b0
 8008800:	200000a8 	.word	0x200000a8
 8008804:	0800c518 	.word	0x0800c518
 8008808:	0800c544 	.word	0x0800c544
 800880c:	40533333 	.word	0x40533333
 8008810:	41300000 	.word	0x41300000
 8008814:	447a0000 	.word	0x447a0000
 8008818:	0800c57c 	.word	0x0800c57c

0800881c <BLU_sendCommand>:
static void         BLU_sendCommand(uint8_t  p_command);
static void         BLU_readData   (uint8_t *p_buffer );
static T_BLU_BUTTON BLU_getButton  (uint8_t *p_buffer );

static void BLU_sendCommand(uint8_t p_command)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0
 8008822:	4603      	mov	r3, r0
 8008824:	71fb      	strb	r3, [r7, #7]
  volatile uint16_t l_bitValue;

  for (l_bitValue = 0x01; l_bitValue < 0x0100; l_bitValue <<= 1)
 8008826:	2301      	movs	r3, #1
 8008828:	81fb      	strh	r3, [r7, #14]
 800882a:	e030      	b.n	800888e <BLU_sendCommand+0x72>
  {
    if ((l_bitValue & p_command) != 0)
 800882c:	89fb      	ldrh	r3, [r7, #14]
 800882e:	b29b      	uxth	r3, r3
 8008830:	461a      	mov	r2, r3
 8008832:	79fb      	ldrb	r3, [r7, #7]
 8008834:	4013      	ands	r3, r2
 8008836:	2b00      	cmp	r3, #0
 8008838:	d006      	beq.n	8008848 <BLU_sendCommand+0x2c>
    {
      SET_BIT(GPIOC->ODR, BLUETOOTH_SPI_CMD_Pin);
 800883a:	4b1a      	ldr	r3, [pc, #104]	; (80088a4 <BLU_sendCommand+0x88>)
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	4a19      	ldr	r2, [pc, #100]	; (80088a4 <BLU_sendCommand+0x88>)
 8008840:	f043 0302 	orr.w	r3, r3, #2
 8008844:	60d3      	str	r3, [r2, #12]
 8008846:	e005      	b.n	8008854 <BLU_sendCommand+0x38>
    }
    else
    {
      CLEAR_BIT(GPIOC->ODR, BLUETOOTH_SPI_CMD_Pin);
 8008848:	4b16      	ldr	r3, [pc, #88]	; (80088a4 <BLU_sendCommand+0x88>)
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	4a15      	ldr	r2, [pc, #84]	; (80088a4 <BLU_sendCommand+0x88>)
 800884e:	f023 0302 	bic.w	r3, r3, #2
 8008852:	60d3      	str	r3, [r2, #12]
    }

    SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 8008854:	4b14      	ldr	r3, [pc, #80]	; (80088a8 <BLU_sendCommand+0x8c>)
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	4a13      	ldr	r2, [pc, #76]	; (80088a8 <BLU_sendCommand+0x8c>)
 800885a:	f043 0310 	orr.w	r3, r3, #16
 800885e:	60d3      	str	r3, [r2, #12]
    UTI_delayUs(5);
 8008860:	2005      	movs	r0, #5
 8008862:	f001 feaf 	bl	800a5c4 <UTI_delayUs>
    CLEAR_BIT(GPIOA->ODR, BLUETOOTH_SPI_CLK_Pin);
 8008866:	4b10      	ldr	r3, [pc, #64]	; (80088a8 <BLU_sendCommand+0x8c>)
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	4a0f      	ldr	r2, [pc, #60]	; (80088a8 <BLU_sendCommand+0x8c>)
 800886c:	f023 0310 	bic.w	r3, r3, #16
 8008870:	60d3      	str	r3, [r2, #12]
    UTI_delayUs(5);
 8008872:	2005      	movs	r0, #5
 8008874:	f001 fea6 	bl	800a5c4 <UTI_delayUs>
    SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 8008878:	4b0b      	ldr	r3, [pc, #44]	; (80088a8 <BLU_sendCommand+0x8c>)
 800887a:	68db      	ldr	r3, [r3, #12]
 800887c:	4a0a      	ldr	r2, [pc, #40]	; (80088a8 <BLU_sendCommand+0x8c>)
 800887e:	f043 0310 	orr.w	r3, r3, #16
 8008882:	60d3      	str	r3, [r2, #12]
  for (l_bitValue = 0x01; l_bitValue < 0x0100; l_bitValue <<= 1)
 8008884:	89fb      	ldrh	r3, [r7, #14]
 8008886:	b29b      	uxth	r3, r3
 8008888:	005b      	lsls	r3, r3, #1
 800888a:	b29b      	uxth	r3, r3
 800888c:	81fb      	strh	r3, [r7, #14]
 800888e:	89fb      	ldrh	r3, [r7, #14]
 8008890:	b29b      	uxth	r3, r3
 8008892:	2bff      	cmp	r3, #255	; 0xff
 8008894:	d9ca      	bls.n	800882c <BLU_sendCommand+0x10>
  }
  UTI_delayUs(16);
 8008896:	2010      	movs	r0, #16
 8008898:	f001 fe94 	bl	800a5c4 <UTI_delayUs>

  return;
 800889c:	bf00      	nop
}
 800889e:	3710      	adds	r7, #16
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	40011000 	.word	0x40011000
 80088a8:	40010800 	.word	0x40010800

080088ac <BLU_readData>:

static void BLU_readData(uint8_t *p_buffer)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  volatile uint8_t  l_index;
  volatile uint16_t l_bitValue;

  /* Reset buffer */
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 80088b4:	2300      	movs	r3, #0
 80088b6:	73fb      	strb	r3, [r7, #15]
 80088b8:	e00b      	b.n	80088d2 <BLU_readData+0x26>
  {
    p_buffer[l_index] = 0x00;
 80088ba:	7bfb      	ldrb	r3, [r7, #15]
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	461a      	mov	r2, r3
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	4413      	add	r3, r2
 80088c4:	2200      	movs	r2, #0
 80088c6:	701a      	strb	r2, [r3, #0]
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 80088c8:	7bfb      	ldrb	r3, [r7, #15]
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	3301      	adds	r3, #1
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	73fb      	strb	r3, [r7, #15]
 80088d2:	7bfb      	ldrb	r3, [r7, #15]
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	2b06      	cmp	r3, #6
 80088d8:	d9ef      	bls.n	80088ba <BLU_readData+0xe>
  }

  CLEAR_BIT(GPIOC->ODR, BLUETOOTH_SPI_CS_Pin);
 80088da:	4b2e      	ldr	r3, [pc, #184]	; (8008994 <BLU_readData+0xe8>)
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	4a2d      	ldr	r2, [pc, #180]	; (8008994 <BLU_readData+0xe8>)
 80088e0:	f023 0308 	bic.w	r3, r3, #8
 80088e4:	60d3      	str	r3, [r2, #12]

  BLU_sendCommand(0x01);
 80088e6:	2001      	movs	r0, #1
 80088e8:	f7ff ff98 	bl	800881c <BLU_sendCommand>
  BLU_sendCommand(0x42);
 80088ec:	2042      	movs	r0, #66	; 0x42
 80088ee:	f7ff ff95 	bl	800881c <BLU_sendCommand>

  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 80088f2:	2300      	movs	r3, #0
 80088f4:	73fb      	strb	r3, [r7, #15]
 80088f6:	e03f      	b.n	8008978 <BLU_readData+0xcc>
  {
    for (l_bitValue = 0x01; l_bitValue < 0x100; l_bitValue <<= 1)
 80088f8:	2301      	movs	r3, #1
 80088fa:	81bb      	strh	r3, [r7, #12]
 80088fc:	e030      	b.n	8008960 <BLU_readData+0xb4>
    {
      SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 80088fe:	4b26      	ldr	r3, [pc, #152]	; (8008998 <BLU_readData+0xec>)
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	4a25      	ldr	r2, [pc, #148]	; (8008998 <BLU_readData+0xec>)
 8008904:	f043 0310 	orr.w	r3, r3, #16
 8008908:	60d3      	str	r3, [r2, #12]
      UTI_delayUs(5);
 800890a:	2005      	movs	r0, #5
 800890c:	f001 fe5a 	bl	800a5c4 <UTI_delayUs>
      CLEAR_BIT(GPIOA->ODR, BLUETOOTH_SPI_CLK_Pin);
 8008910:	4b21      	ldr	r3, [pc, #132]	; (8008998 <BLU_readData+0xec>)
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	4a20      	ldr	r2, [pc, #128]	; (8008998 <BLU_readData+0xec>)
 8008916:	f023 0310 	bic.w	r3, r3, #16
 800891a:	60d3      	str	r3, [r2, #12]
      UTI_delayUs(5);
 800891c:	2005      	movs	r0, #5
 800891e:	f001 fe51 	bl	800a5c4 <UTI_delayUs>
      SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 8008922:	4b1d      	ldr	r3, [pc, #116]	; (8008998 <BLU_readData+0xec>)
 8008924:	68db      	ldr	r3, [r3, #12]
 8008926:	4a1c      	ldr	r2, [pc, #112]	; (8008998 <BLU_readData+0xec>)
 8008928:	f043 0310 	orr.w	r3, r3, #16
 800892c:	60d3      	str	r3, [r2, #12]

      if (READ_BIT(GPIOC->IDR, BLUETOOTH_SPI_DAT_Pin) != GPIO_PIN_RESET)
 800892e:	4b19      	ldr	r3, [pc, #100]	; (8008994 <BLU_readData+0xe8>)
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	f003 0304 	and.w	r3, r3, #4
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00d      	beq.n	8008956 <BLU_readData+0xaa>
      {
        p_buffer[l_index] |= l_bitValue;
 800893a:	89bb      	ldrh	r3, [r7, #12]
 800893c:	b29a      	uxth	r2, r3
 800893e:	7bfb      	ldrb	r3, [r7, #15]
 8008940:	b2d8      	uxtb	r0, r3
 8008942:	4601      	mov	r1, r0
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	440b      	add	r3, r1
 8008948:	7819      	ldrb	r1, [r3, #0]
 800894a:	b2d2      	uxtb	r2, r2
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	4403      	add	r3, r0
 8008950:	430a      	orrs	r2, r1
 8008952:	b2d2      	uxtb	r2, r2
 8008954:	701a      	strb	r2, [r3, #0]
    for (l_bitValue = 0x01; l_bitValue < 0x100; l_bitValue <<= 1)
 8008956:	89bb      	ldrh	r3, [r7, #12]
 8008958:	b29b      	uxth	r3, r3
 800895a:	005b      	lsls	r3, r3, #1
 800895c:	b29b      	uxth	r3, r3
 800895e:	81bb      	strh	r3, [r7, #12]
 8008960:	89bb      	ldrh	r3, [r7, #12]
 8008962:	b29b      	uxth	r3, r3
 8008964:	2bff      	cmp	r3, #255	; 0xff
 8008966:	d9ca      	bls.n	80088fe <BLU_readData+0x52>
      else
      {
        ; /* Nothing to do */
      }
    }
      UTI_delayUs(16);
 8008968:	2010      	movs	r0, #16
 800896a:	f001 fe2b 	bl	800a5c4 <UTI_delayUs>
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 800896e:	7bfb      	ldrb	r3, [r7, #15]
 8008970:	b2db      	uxtb	r3, r3
 8008972:	3301      	adds	r3, #1
 8008974:	b2db      	uxtb	r3, r3
 8008976:	73fb      	strb	r3, [r7, #15]
 8008978:	7bfb      	ldrb	r3, [r7, #15]
 800897a:	b2db      	uxtb	r3, r3
 800897c:	2b06      	cmp	r3, #6
 800897e:	d9bb      	bls.n	80088f8 <BLU_readData+0x4c>
  }

  SET_BIT(GPIOC->ODR, BLUETOOTH_SPI_CS_Pin);
 8008980:	4b04      	ldr	r3, [pc, #16]	; (8008994 <BLU_readData+0xe8>)
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	4a03      	ldr	r2, [pc, #12]	; (8008994 <BLU_readData+0xe8>)
 8008986:	f043 0308 	orr.w	r3, r3, #8
 800898a:	60d3      	str	r3, [r2, #12]

  return;
 800898c:	bf00      	nop
}
 800898e:	3710      	adds	r7, #16
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}
 8008994:	40011000 	.word	0x40011000
 8008998:	40010800 	.word	0x40010800

0800899c <BLU_getButton>:

static T_BLU_BUTTON BLU_getButton(uint8_t *p_buffer)
{
 800899c:	b480      	push	{r7}
 800899e:	b085      	sub	sp, #20
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  uint16_t l_buttonRawValue;
  uint8_t  l_index;

  l_buttonRawValue = (p_buffer[BLU_BUTTON_HIGH_OFFSET] << 8) | p_buffer[BLU_BUTTON_LOW_OFFSET];
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	3302      	adds	r3, #2
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	021b      	lsls	r3, r3, #8
 80089ac:	b21a      	sxth	r2, r3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	3301      	adds	r3, #1
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	b21b      	sxth	r3, r3
 80089b6:	4313      	orrs	r3, r2
 80089b8:	b21b      	sxth	r3, r3
 80089ba:	81bb      	strh	r3, [r7, #12]

  /* Ignore BLU_BUTTON_NONE value as it is not directly coded in raw data */
  for (l_index = BLU_BUTTON_SELECT; l_index < BLU_BUTTON_COUNT_VALUE; l_index++)
 80089bc:	2301      	movs	r3, #1
 80089be:	73fb      	strb	r3, [r7, #15]
 80089c0:	e00d      	b.n	80089de <BLU_getButton+0x42>
  {
    /* Stop decoding button data on 1st match (do not deal with multiple presses case) */
    if ((l_buttonRawValue & (1 << (l_index - 1))) == 0)
 80089c2:	89ba      	ldrh	r2, [r7, #12]
 80089c4:	7bfb      	ldrb	r3, [r7, #15]
 80089c6:	3b01      	subs	r3, #1
 80089c8:	fa42 f303 	asr.w	r3, r2, r3
 80089cc:	f003 0301 	and.w	r3, r3, #1
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d101      	bne.n	80089d8 <BLU_getButton+0x3c>
    {
      return l_index;
 80089d4:	7bfb      	ldrb	r3, [r7, #15]
 80089d6:	e006      	b.n	80089e6 <BLU_getButton+0x4a>
  for (l_index = BLU_BUTTON_SELECT; l_index < BLU_BUTTON_COUNT_VALUE; l_index++)
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
 80089da:	3301      	adds	r3, #1
 80089dc:	73fb      	strb	r3, [r7, #15]
 80089de:	7bfb      	ldrb	r3, [r7, #15]
 80089e0:	2b10      	cmp	r3, #16
 80089e2:	d9ee      	bls.n	80089c2 <BLU_getButton+0x26>
    {
      ; /* Nothing to do */
    }
  }

  return BLU_BUTTON_NONE;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3714      	adds	r7, #20
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bc80      	pop	{r7}
 80089ee:	4770      	bx	lr

080089f0 <BLU_init>:

void BLU_init(void)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	af00      	add	r7, sp, #0
  LOG_info("Initializing bluetooth control");
 80089f4:	4904      	ldr	r1, [pc, #16]	; (8008a08 <BLU_init+0x18>)
 80089f6:	2001      	movs	r0, #1
 80089f8:	f001 f9d2 	bl	8009da0 <LOG_log>

  BLU_initData(&g_BLU_lastData);
 80089fc:	4803      	ldr	r0, [pc, #12]	; (8008a0c <BLU_init+0x1c>)
 80089fe:	f000 f807 	bl	8008a10 <BLU_initData>

  return;
 8008a02:	bf00      	nop
}
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	0800c594 	.word	0x0800c594
 8008a0c:	200000b4 	.word	0x200000b4

08008a10 <BLU_initData>:

void BLU_initData(T_BLU_Data *p_data)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  p_data->leftX  = BLU_DATA_DEFAUT_DIRECTION;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2280      	movs	r2, #128	; 0x80
 8008a1c:	601a      	str	r2, [r3, #0]
  p_data->leftY  = BLU_DATA_DEFAUT_DIRECTION;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2280      	movs	r2, #128	; 0x80
 8008a22:	605a      	str	r2, [r3, #4]
  p_data->rightX = BLU_DATA_DEFAUT_DIRECTION;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2280      	movs	r2, #128	; 0x80
 8008a28:	609a      	str	r2, [r3, #8]
  p_data->rightY = BLU_DATA_DEFAUT_DIRECTION;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2280      	movs	r2, #128	; 0x80
 8008a2e:	60da      	str	r2, [r3, #12]
  p_data->button = BLU_BUTTON_NONE;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	741a      	strb	r2, [r3, #16]

  return;
 8008a36:	bf00      	nop
}
 8008a38:	370c      	adds	r7, #12
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bc80      	pop	{r7}
 8008a3e:	4770      	bx	lr

08008a40 <BLU_receiveData>:

void BLU_receiveData(T_BLU_Data *p_data)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b08c      	sub	sp, #48	; 0x30
 8008a44:	af02      	add	r7, sp, #8
 8008a46:	6078      	str	r0, [r7, #4]
  uint8_t    l_buffer[BLU_DATA_BUFFER_LENGTH];
  T_BLU_Data l_readData;

  /* Read raw data */
  BLU_readData(l_buffer);
 8008a48:	f107 0320 	add.w	r3, r7, #32
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f7ff ff2d 	bl	80088ac <BLU_readData>

  /* Start and decode raw data */
  l_readData.leftX  = l_buffer[BLU_LEFT_X_OFFSET ];
 8008a52:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008a56:	60fb      	str	r3, [r7, #12]
  l_readData.leftY  = l_buffer[BLU_LEFT_Y_OFFSET ];
 8008a58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008a5c:	613b      	str	r3, [r7, #16]
  l_readData.rightX = l_buffer[BLU_RIGHT_X_OFFSET];
 8008a5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a62:	617b      	str	r3, [r7, #20]
  l_readData.rightY = l_buffer[BLU_RIGHT_Y_OFFSET];
 8008a64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008a68:	61bb      	str	r3, [r7, #24]
  l_readData.button = BLU_getButton(l_buffer);
 8008a6a:	f107 0320 	add.w	r3, r7, #32
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7ff ff94 	bl	800899c <BLU_getButton>
 8008a74:	4603      	mov	r3, r0
 8008a76:	773b      	strb	r3, [r7, #28]

  /* Deal with startup condition, while read data is not valid yet */
  if  ((l_readData.leftX == 255 && l_readData.leftY == 255 && l_readData.rightX == 255 && l_readData.rightY ==255)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2bff      	cmp	r3, #255	; 0xff
 8008a7c:	d108      	bne.n	8008a90 <BLU_receiveData+0x50>
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	2bff      	cmp	r3, #255	; 0xff
 8008a82:	d105      	bne.n	8008a90 <BLU_receiveData+0x50>
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	2bff      	cmp	r3, #255	; 0xff
 8008a88:	d102      	bne.n	8008a90 <BLU_receiveData+0x50>
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	2bff      	cmp	r3, #255	; 0xff
 8008a8e:	d00b      	beq.n	8008aa8 <BLU_receiveData+0x68>
    || (l_readData.leftX ==   0 && l_readData.leftY ==   0 && l_readData.rightX ==   0 && l_readData.rightY ==  0))
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d10e      	bne.n	8008ab4 <BLU_receiveData+0x74>
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d10b      	bne.n	8008ab4 <BLU_receiveData+0x74>
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d108      	bne.n	8008ab4 <BLU_receiveData+0x74>
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d105      	bne.n	8008ab4 <BLU_receiveData+0x74>
  {
    BLU_initData(&l_readData);
 8008aa8:	f107 030c 	add.w	r3, r7, #12
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7ff ffaf 	bl	8008a10 <BLU_initData>
 8008ab2:	e053      	b.n	8008b5c <BLU_receiveData+0x11c>
  }
  /* Use a confirmation mechanism, on 2 cycles, as glitches are observed */
  else if ((l_readData.leftX  == g_BLU_lastData.leftX) &&
 8008ab4:	68fa      	ldr	r2, [r7, #12]
 8008ab6:	4b33      	ldr	r3, [pc, #204]	; (8008b84 <BLU_receiveData+0x144>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d14e      	bne.n	8008b5c <BLU_receiveData+0x11c>
           (l_readData.leftY  == g_BLU_lastData.leftY) &&
 8008abe:	693a      	ldr	r2, [r7, #16]
 8008ac0:	4b30      	ldr	r3, [pc, #192]	; (8008b84 <BLU_receiveData+0x144>)
 8008ac2:	685b      	ldr	r3, [r3, #4]
  else if ((l_readData.leftX  == g_BLU_lastData.leftX) &&
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d149      	bne.n	8008b5c <BLU_receiveData+0x11c>
           (l_readData.rightX == g_BLU_lastData.rightX) &&
 8008ac8:	697a      	ldr	r2, [r7, #20]
 8008aca:	4b2e      	ldr	r3, [pc, #184]	; (8008b84 <BLU_receiveData+0x144>)
 8008acc:	689b      	ldr	r3, [r3, #8]
           (l_readData.leftY  == g_BLU_lastData.leftY) &&
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d144      	bne.n	8008b5c <BLU_receiveData+0x11c>
           (l_readData.rightY == g_BLU_lastData.rightY) &&
 8008ad2:	69ba      	ldr	r2, [r7, #24]
 8008ad4:	4b2b      	ldr	r3, [pc, #172]	; (8008b84 <BLU_receiveData+0x144>)
 8008ad6:	68db      	ldr	r3, [r3, #12]
           (l_readData.rightX == g_BLU_lastData.rightX) &&
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d13f      	bne.n	8008b5c <BLU_receiveData+0x11c>
           (l_readData.button == g_BLU_lastData.button))
 8008adc:	7f3a      	ldrb	r2, [r7, #28]
 8008ade:	4b29      	ldr	r3, [pc, #164]	; (8008b84 <BLU_receiveData+0x144>)
 8008ae0:	7c1b      	ldrb	r3, [r3, #16]
           (l_readData.rightY == g_BLU_lastData.rightY) &&
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d13a      	bne.n	8008b5c <BLU_receiveData+0x11c>
  {
    /* Normalize directions data in range [-MAX..MAX] */
    p_data->leftX  = UTI_normalizeIntValue(l_readData.leftX , 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, false);
 8008ae6:	68f8      	ldr	r0, [r7, #12]
 8008ae8:	2300      	movs	r3, #0
 8008aea:	9301      	str	r3, [sp, #4]
 8008aec:	2328      	movs	r3, #40	; 0x28
 8008aee:	9300      	str	r3, [sp, #0]
 8008af0:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8008af4:	22ff      	movs	r2, #255	; 0xff
 8008af6:	2100      	movs	r1, #0
 8008af8:	f001 fde9 	bl	800a6ce <UTI_normalizeIntValue>
 8008afc:	4602      	mov	r2, r0
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	601a      	str	r2, [r3, #0]
    p_data->leftY  = UTI_normalizeIntValue(l_readData.leftY , 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, true );
 8008b02:	6938      	ldr	r0, [r7, #16]
 8008b04:	2301      	movs	r3, #1
 8008b06:	9301      	str	r3, [sp, #4]
 8008b08:	2328      	movs	r3, #40	; 0x28
 8008b0a:	9300      	str	r3, [sp, #0]
 8008b0c:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8008b10:	22ff      	movs	r2, #255	; 0xff
 8008b12:	2100      	movs	r1, #0
 8008b14:	f001 fddb 	bl	800a6ce <UTI_normalizeIntValue>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	605a      	str	r2, [r3, #4]
    p_data->rightX = UTI_normalizeIntValue(l_readData.rightX, 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, false);
 8008b1e:	6978      	ldr	r0, [r7, #20]
 8008b20:	2300      	movs	r3, #0
 8008b22:	9301      	str	r3, [sp, #4]
 8008b24:	2328      	movs	r3, #40	; 0x28
 8008b26:	9300      	str	r3, [sp, #0]
 8008b28:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8008b2c:	22ff      	movs	r2, #255	; 0xff
 8008b2e:	2100      	movs	r1, #0
 8008b30:	f001 fdcd 	bl	800a6ce <UTI_normalizeIntValue>
 8008b34:	4602      	mov	r2, r0
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	609a      	str	r2, [r3, #8]
    p_data->rightY = UTI_normalizeIntValue(l_readData.rightY, 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, true );
 8008b3a:	69b8      	ldr	r0, [r7, #24]
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	9301      	str	r3, [sp, #4]
 8008b40:	2328      	movs	r3, #40	; 0x28
 8008b42:	9300      	str	r3, [sp, #0]
 8008b44:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8008b48:	22ff      	movs	r2, #255	; 0xff
 8008b4a:	2100      	movs	r1, #0
 8008b4c:	f001 fdbf 	bl	800a6ce <UTI_normalizeIntValue>
 8008b50:	4602      	mov	r2, r0
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	60da      	str	r2, [r3, #12]
    p_data->button = l_readData.button;
 8008b56:	7f3a      	ldrb	r2, [r7, #28]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	741a      	strb	r2, [r3, #16]
  {
    ; /* Nothing to do */
  }

  /* Saved received data for later use in confirmation mechanism */
  g_BLU_lastData.leftX  = l_readData.leftX;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	4a09      	ldr	r2, [pc, #36]	; (8008b84 <BLU_receiveData+0x144>)
 8008b60:	6013      	str	r3, [r2, #0]
  g_BLU_lastData.leftY  = l_readData.leftY;
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	4a07      	ldr	r2, [pc, #28]	; (8008b84 <BLU_receiveData+0x144>)
 8008b66:	6053      	str	r3, [r2, #4]
  g_BLU_lastData.rightX = l_readData.rightX;
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	4a06      	ldr	r2, [pc, #24]	; (8008b84 <BLU_receiveData+0x144>)
 8008b6c:	6093      	str	r3, [r2, #8]
  g_BLU_lastData.rightY = l_readData.rightY;
 8008b6e:	69bb      	ldr	r3, [r7, #24]
 8008b70:	4a04      	ldr	r2, [pc, #16]	; (8008b84 <BLU_receiveData+0x144>)
 8008b72:	60d3      	str	r3, [r2, #12]
  g_BLU_lastData.button = l_readData.button;
 8008b74:	7f3a      	ldrb	r2, [r7, #28]
 8008b76:	4b03      	ldr	r3, [pc, #12]	; (8008b84 <BLU_receiveData+0x144>)
 8008b78:	741a      	strb	r2, [r3, #16]

  return;
 8008b7a:	bf00      	nop
}
 8008b7c:	3728      	adds	r7, #40	; 0x28
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	200000b4 	.word	0x200000b4

08008b88 <CON_init>:
static T_SFO_data          g_CON_data;
static uint32_t            g_CON_dataSize;
static bool                g_CON_isDataComplete;

void CON_init(UART_HandleTypeDef *p_uartHandle)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing console");
 8008b90:	490d      	ldr	r1, [pc, #52]	; (8008bc8 <CON_init+0x40>)
 8008b92:	2001      	movs	r0, #1
 8008b94:	f001 f904 	bl	8009da0 <LOG_log>

  g_CON_uartHandle     = p_uartHandle;
 8008b98:	4a0c      	ldr	r2, [pc, #48]	; (8008bcc <CON_init+0x44>)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6013      	str	r3, [r2, #0]
  g_CON_dataSize       = 0;
 8008b9e:	4b0c      	ldr	r3, [pc, #48]	; (8008bd0 <CON_init+0x48>)
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	601a      	str	r2, [r3, #0]
  g_CON_isDataComplete = false;
 8008ba4:	4b0b      	ldr	r3, [pc, #44]	; (8008bd4 <CON_init+0x4c>)
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	701a      	strb	r2, [r3, #0]

  SFO_initData(&g_CON_data);
 8008baa:	480b      	ldr	r0, [pc, #44]	; (8008bd8 <CON_init+0x50>)
 8008bac:	f001 fbe8 	bl	800a380 <SFO_initData>

  HAL_UART_Receive_IT(g_CON_uartHandle, &g_CON_datum, 1);
 8008bb0:	4b06      	ldr	r3, [pc, #24]	; (8008bcc <CON_init+0x44>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	4909      	ldr	r1, [pc, #36]	; (8008bdc <CON_init+0x54>)
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7ff f82f 	bl	8007c1c <HAL_UART_Receive_IT>

  return;
 8008bbe:	bf00      	nop
}
 8008bc0:	3708      	adds	r7, #8
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	0800c5b4 	.word	0x0800c5b4
 8008bcc:	200000c8 	.word	0x200000c8
 8008bd0:	200000e0 	.word	0x200000e0
 8008bd4:	200000e4 	.word	0x200000e4
 8008bd8:	200000d0 	.word	0x200000d0
 8008bdc:	200000cc 	.word	0x200000cc

08008be0 <CON_receiveData>:

void CON_receiveData(void)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	af00      	add	r7, sp, #0
  /* If previous command was not processed yet, drop datum, */
  /* which will lead to an error, showing a design issue... */
  if (g_CON_isDataComplete == true)
 8008be4:	4b0f      	ldr	r3, [pc, #60]	; (8008c24 <CON_receiveData+0x44>)
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d112      	bne.n	8008c12 <CON_receiveData+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (g_CON_datum == '\r')
 8008bec:	4b0e      	ldr	r3, [pc, #56]	; (8008c28 <CON_receiveData+0x48>)
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	2b0d      	cmp	r3, #13
 8008bf2:	d103      	bne.n	8008bfc <CON_receiveData+0x1c>
    {
      g_CON_isDataComplete = true;
 8008bf4:	4b0b      	ldr	r3, [pc, #44]	; (8008c24 <CON_receiveData+0x44>)
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	701a      	strb	r2, [r3, #0]
 8008bfa:	e00a      	b.n	8008c12 <CON_receiveData+0x32>
    }
    else
    {
      g_CON_data[g_CON_dataSize] = g_CON_datum;
 8008bfc:	4b0b      	ldr	r3, [pc, #44]	; (8008c2c <CON_receiveData+0x4c>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a09      	ldr	r2, [pc, #36]	; (8008c28 <CON_receiveData+0x48>)
 8008c02:	7811      	ldrb	r1, [r2, #0]
 8008c04:	4a0a      	ldr	r2, [pc, #40]	; (8008c30 <CON_receiveData+0x50>)
 8008c06:	54d1      	strb	r1, [r2, r3]
      g_CON_dataSize++;
 8008c08:	4b08      	ldr	r3, [pc, #32]	; (8008c2c <CON_receiveData+0x4c>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	3301      	adds	r3, #1
 8008c0e:	4a07      	ldr	r2, [pc, #28]	; (8008c2c <CON_receiveData+0x4c>)
 8008c10:	6013      	str	r3, [r2, #0]
    }
  }

  HAL_UART_Receive_IT(g_CON_uartHandle, &g_CON_datum, 1);
 8008c12:	4b08      	ldr	r3, [pc, #32]	; (8008c34 <CON_receiveData+0x54>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2201      	movs	r2, #1
 8008c18:	4903      	ldr	r1, [pc, #12]	; (8008c28 <CON_receiveData+0x48>)
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7fe fffe 	bl	8007c1c <HAL_UART_Receive_IT>

  return;
 8008c20:	bf00      	nop
}
 8008c22:	bd80      	pop	{r7, pc}
 8008c24:	200000e4 	.word	0x200000e4
 8008c28:	200000cc 	.word	0x200000cc
 8008c2c:	200000e0 	.word	0x200000e0
 8008c30:	200000d0 	.word	0x200000d0
 8008c34:	200000c8 	.word	0x200000c8

08008c38 <CON_updateFifo>:

void CON_updateFifo(T_SFO_Context *p_fifo)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  if (g_CON_isDataComplete == false)
 8008c40:	4b0c      	ldr	r3, [pc, #48]	; (8008c74 <CON_updateFifo+0x3c>)
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	f083 0301 	eor.w	r3, r3, #1
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d10d      	bne.n	8008c6a <CON_updateFifo+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    SFO_push    (p_fifo, &g_CON_data);
 8008c4e:	490a      	ldr	r1, [pc, #40]	; (8008c78 <CON_updateFifo+0x40>)
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f001 fbbb 	bl	800a3cc <SFO_push>
    SFO_initData(&g_CON_data);
 8008c56:	4808      	ldr	r0, [pc, #32]	; (8008c78 <CON_updateFifo+0x40>)
 8008c58:	f001 fb92 	bl	800a380 <SFO_initData>

    g_CON_dataSize       = 0;
 8008c5c:	4b07      	ldr	r3, [pc, #28]	; (8008c7c <CON_updateFifo+0x44>)
 8008c5e:	2200      	movs	r2, #0
 8008c60:	601a      	str	r2, [r3, #0]
    g_CON_isDataComplete = false;
 8008c62:	4b04      	ldr	r3, [pc, #16]	; (8008c74 <CON_updateFifo+0x3c>)
 8008c64:	2200      	movs	r2, #0
 8008c66:	701a      	strb	r2, [r3, #0]
  }

  return;
 8008c68:	bf00      	nop
 8008c6a:	bf00      	nop
}
 8008c6c:	3708      	adds	r7, #8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	200000e4 	.word	0x200000e4
 8008c78:	200000d0 	.word	0x200000d0
 8008c7c:	200000e0 	.word	0x200000e0

08008c80 <DRV_init>:
void DRV_init(TIM_HandleTypeDef *p_pwmTimerHandle,
              TIM_HandleTypeDef *p_rearLeftEncoderTimerHandle,
              TIM_HandleTypeDef *p_rearRightEncoderTimerHandle,
              TIM_HandleTypeDef *p_frontRightEncoderTimerHandle,
              TIM_HandleTypeDef *p_frontLeftEncoderTimerHandle)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b088      	sub	sp, #32
 8008c84:	af04      	add	r7, sp, #16
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]
 8008c8c:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing Drive module");
 8008c8e:	494f      	ldr	r1, [pc, #316]	; (8008dcc <DRV_init+0x14c>)
 8008c90:	2001      	movs	r0, #1
 8008c92:	f001 f885 	bl	8009da0 <LOG_log>

  /* Setup PIDs */
  PID_init(&g_DRV_pidFrontRight, 1, 1, 1, 0, -100, 100, 0.5);
 8008c96:	2300      	movs	r3, #0
 8008c98:	9303      	str	r3, [sp, #12]
 8008c9a:	2364      	movs	r3, #100	; 0x64
 8008c9c:	9302      	str	r3, [sp, #8]
 8008c9e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008ca2:	9301      	str	r3, [sp, #4]
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	9300      	str	r3, [sp, #0]
 8008ca8:	2301      	movs	r3, #1
 8008caa:	2201      	movs	r2, #1
 8008cac:	2101      	movs	r1, #1
 8008cae:	4848      	ldr	r0, [pc, #288]	; (8008dd0 <DRV_init+0x150>)
 8008cb0:	f001 fa76 	bl	800a1a0 <PID_init>
  PID_init(&g_DRV_pidFrontLeft , 1, 1, 1, 0, -100, 100, 0.5);
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	9303      	str	r3, [sp, #12]
 8008cb8:	2364      	movs	r3, #100	; 0x64
 8008cba:	9302      	str	r3, [sp, #8]
 8008cbc:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008cc0:	9301      	str	r3, [sp, #4]
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	9300      	str	r3, [sp, #0]
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	2201      	movs	r2, #1
 8008cca:	2101      	movs	r1, #1
 8008ccc:	4841      	ldr	r0, [pc, #260]	; (8008dd4 <DRV_init+0x154>)
 8008cce:	f001 fa67 	bl	800a1a0 <PID_init>
  PID_init(&g_DRV_pidRearLeft  , 1, 1, 1, 0, -100, 100, 0.5);
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	9303      	str	r3, [sp, #12]
 8008cd6:	2364      	movs	r3, #100	; 0x64
 8008cd8:	9302      	str	r3, [sp, #8]
 8008cda:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008cde:	9301      	str	r3, [sp, #4]
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	9300      	str	r3, [sp, #0]
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	2101      	movs	r1, #1
 8008cea:	483b      	ldr	r0, [pc, #236]	; (8008dd8 <DRV_init+0x158>)
 8008cec:	f001 fa58 	bl	800a1a0 <PID_init>
  PID_init(&g_DRV_pidRearRight , 1, 1, 1, 0, -100, 100, 0.5);
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	9303      	str	r3, [sp, #12]
 8008cf4:	2364      	movs	r3, #100	; 0x64
 8008cf6:	9302      	str	r3, [sp, #8]
 8008cf8:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008cfc:	9301      	str	r3, [sp, #4]
 8008cfe:	2300      	movs	r3, #0
 8008d00:	9300      	str	r3, [sp, #0]
 8008d02:	2301      	movs	r3, #1
 8008d04:	2201      	movs	r2, #1
 8008d06:	2101      	movs	r1, #1
 8008d08:	4834      	ldr	r0, [pc, #208]	; (8008ddc <DRV_init+0x15c>)
 8008d0a:	f001 fa49 	bl	800a1a0 <PID_init>

  /* Setup motors (with a 0 speed & stopped direction, at this point) */
  MTR_init(&g_DRV_motorFrontRight,
 8008d0e:	2304      	movs	r3, #4
 8008d10:	9303      	str	r3, [sp, #12]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	9302      	str	r3, [sp, #8]
 8008d16:	2320      	movs	r3, #32
 8008d18:	9301      	str	r3, [sp, #4]
 8008d1a:	4b31      	ldr	r3, [pc, #196]	; (8008de0 <DRV_init+0x160>)
 8008d1c:	9300      	str	r3, [sp, #0]
 8008d1e:	2310      	movs	r3, #16
 8008d20:	4a2f      	ldr	r2, [pc, #188]	; (8008de0 <DRV_init+0x160>)
 8008d22:	4930      	ldr	r1, [pc, #192]	; (8008de4 <DRV_init+0x164>)
 8008d24:	4830      	ldr	r0, [pc, #192]	; (8008de8 <DRV_init+0x168>)
 8008d26:	f001 f949 	bl	8009fbc <MTR_init>
           MOTOR_FRONT_RIGHT_IN_2_GPIO_Port,
           MOTOR_FRONT_RIGHT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_2);

  MTR_init(&g_DRV_motorFrontLeft,
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	9303      	str	r3, [sp, #12]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	9302      	str	r3, [sp, #8]
 8008d32:	2302      	movs	r3, #2
 8008d34:	9301      	str	r3, [sp, #4]
 8008d36:	4b2d      	ldr	r3, [pc, #180]	; (8008dec <DRV_init+0x16c>)
 8008d38:	9300      	str	r3, [sp, #0]
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	4a2b      	ldr	r2, [pc, #172]	; (8008dec <DRV_init+0x16c>)
 8008d3e:	492c      	ldr	r1, [pc, #176]	; (8008df0 <DRV_init+0x170>)
 8008d40:	482c      	ldr	r0, [pc, #176]	; (8008df4 <DRV_init+0x174>)
 8008d42:	f001 f93b 	bl	8009fbc <MTR_init>
           MOTOR_FRONT_LEFT_IN_2_GPIO_Port,
           MOTOR_FRONT_LEFT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_1);

  MTR_init(&g_DRV_motorRearLeft,
 8008d46:	230c      	movs	r3, #12
 8008d48:	9303      	str	r3, [sp, #12]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	9302      	str	r3, [sp, #8]
 8008d4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d52:	9301      	str	r3, [sp, #4]
 8008d54:	4b22      	ldr	r3, [pc, #136]	; (8008de0 <DRV_init+0x160>)
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	2304      	movs	r3, #4
 8008d5a:	4a27      	ldr	r2, [pc, #156]	; (8008df8 <DRV_init+0x178>)
 8008d5c:	4927      	ldr	r1, [pc, #156]	; (8008dfc <DRV_init+0x17c>)
 8008d5e:	4828      	ldr	r0, [pc, #160]	; (8008e00 <DRV_init+0x180>)
 8008d60:	f001 f92c 	bl	8009fbc <MTR_init>
           MOTOR_REAR_LEFT_IN_2_GPIO_Port,
           MOTOR_REAR_LEFT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_4);

  MTR_init(&g_DRV_motorRearRight,
 8008d64:	2308      	movs	r3, #8
 8008d66:	9303      	str	r3, [sp, #12]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	9302      	str	r3, [sp, #8]
 8008d6c:	2310      	movs	r3, #16
 8008d6e:	9301      	str	r3, [sp, #4]
 8008d70:	4b1e      	ldr	r3, [pc, #120]	; (8008dec <DRV_init+0x16c>)
 8008d72:	9300      	str	r3, [sp, #0]
 8008d74:	2320      	movs	r3, #32
 8008d76:	4a1d      	ldr	r2, [pc, #116]	; (8008dec <DRV_init+0x16c>)
 8008d78:	4922      	ldr	r1, [pc, #136]	; (8008e04 <DRV_init+0x184>)
 8008d7a:	4823      	ldr	r0, [pc, #140]	; (8008e08 <DRV_init+0x188>)
 8008d7c:	f001 f91e 	bl	8009fbc <MTR_init>
           MOTOR_REAR_RIGHT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_3);

  /* Setup encoders */
  ENC_init(&g_DRV_encoderFrontRight, DRV_FRONT_RIGHT_MOTOR_NAME, true , p_frontRightEncoderTimerHandle);
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	2201      	movs	r2, #1
 8008d84:	4917      	ldr	r1, [pc, #92]	; (8008de4 <DRV_init+0x164>)
 8008d86:	4821      	ldr	r0, [pc, #132]	; (8008e0c <DRV_init+0x18c>)
 8008d88:	f000 fe94 	bl	8009ab4 <ENC_init>
  ENC_init(&g_DRV_encoderFrontLeft , DRV_FRONT_LEFT_MOTOR_NAME , false, p_frontLeftEncoderTimerHandle );
 8008d8c:	69bb      	ldr	r3, [r7, #24]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	4917      	ldr	r1, [pc, #92]	; (8008df0 <DRV_init+0x170>)
 8008d92:	481f      	ldr	r0, [pc, #124]	; (8008e10 <DRV_init+0x190>)
 8008d94:	f000 fe8e 	bl	8009ab4 <ENC_init>
  ENC_init(&g_DRV_encoderRearLeft  , DRV_REAR_LEFT_MOTOR_NAME  , false, p_rearLeftEncoderTimerHandle  );
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	4917      	ldr	r1, [pc, #92]	; (8008dfc <DRV_init+0x17c>)
 8008d9e:	481d      	ldr	r0, [pc, #116]	; (8008e14 <DRV_init+0x194>)
 8008da0:	f000 fe88 	bl	8009ab4 <ENC_init>
  ENC_init(&g_DRV_encoderRearRight , DRV_REAR_RIGHT_MOTOR_NAME , true , p_rearRightEncoderTimerHandle );
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2201      	movs	r2, #1
 8008da8:	4916      	ldr	r1, [pc, #88]	; (8008e04 <DRV_init+0x184>)
 8008daa:	481b      	ldr	r0, [pc, #108]	; (8008e18 <DRV_init+0x198>)
 8008dac:	f000 fe82 	bl	8009ab4 <ENC_init>

  /* Activate motors by default (de-activating them is used for debug)  */
  g_DRV_areMotorsOn = true;
 8008db0:	4b1a      	ldr	r3, [pc, #104]	; (8008e1c <DRV_init+0x19c>)
 8008db2:	2201      	movs	r2, #1
 8008db4:	701a      	strb	r2, [r3, #0]

  /* Assume that drive is not ON by default */
  g_DRV_isDriveOn = false;
 8008db6:	4b1a      	ldr	r3, [pc, #104]	; (8008e20 <DRV_init+0x1a0>)
 8008db8:	2200      	movs	r2, #0
 8008dba:	701a      	strb	r2, [r3, #0]

  /* Start with master board control mode */
  g_DRV_mode = DRV_MODE_MASTER_BOARD_CONTROL;
 8008dbc:	4b19      	ldr	r3, [pc, #100]	; (8008e24 <DRV_init+0x1a4>)
 8008dbe:	2202      	movs	r2, #2
 8008dc0:	701a      	strb	r2, [r3, #0]

  return;
 8008dc2:	bf00      	nop
}
 8008dc4:	3710      	adds	r7, #16
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	0800c5cc 	.word	0x0800c5cc
 8008dd0:	200000e8 	.word	0x200000e8
 8008dd4:	20000118 	.word	0x20000118
 8008dd8:	20000148 	.word	0x20000148
 8008ddc:	20000178 	.word	0x20000178
 8008de0:	40011000 	.word	0x40011000
 8008de4:	0800c5e8 	.word	0x0800c5e8
 8008de8:	200001a8 	.word	0x200001a8
 8008dec:	40010c00 	.word	0x40010c00
 8008df0:	0800c5f4 	.word	0x0800c5f4
 8008df4:	200001cc 	.word	0x200001cc
 8008df8:	40011400 	.word	0x40011400
 8008dfc:	0800c600 	.word	0x0800c600
 8008e00:	200001f0 	.word	0x200001f0
 8008e04:	0800c60c 	.word	0x0800c60c
 8008e08:	20000214 	.word	0x20000214
 8008e0c:	20000238 	.word	0x20000238
 8008e10:	20000244 	.word	0x20000244
 8008e14:	20000250 	.word	0x20000250
 8008e18:	2000025c 	.word	0x2000025c
 8008e1c:	200000e5 	.word	0x200000e5
 8008e20:	200000e6 	.word	0x200000e6
 8008e24:	200000e7 	.word	0x200000e7

08008e28 <DRV_updateEncoder>:

void DRV_updateEncoder(TIM_HandleTypeDef *p_encoderTimerHandle)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  int16_t l_count;

  l_count = __HAL_TIM_GET_COUNTER(p_encoderTimerHandle);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e36:	81fb      	strh	r3, [r7, #14]

  /* Check the handle of the triggering timer and update encoder accordingly */
  if (p_encoderTimerHandle == g_DRV_encoderRearLeft.timerHandle)
 8008e38:	4b19      	ldr	r3, [pc, #100]	; (8008ea0 <DRV_updateEncoder+0x78>)
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d106      	bne.n	8008e50 <DRV_updateEncoder+0x28>
  {
    ENC_update(&g_DRV_encoderRearLeft, l_count);
 8008e42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008e46:	4619      	mov	r1, r3
 8008e48:	4815      	ldr	r0, [pc, #84]	; (8008ea0 <DRV_updateEncoder+0x78>)
 8008e4a:	f000 fe5f 	bl	8009b0c <ENC_update>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8008e4e:	e023      	b.n	8008e98 <DRV_updateEncoder+0x70>
  else if (p_encoderTimerHandle == g_DRV_encoderRearRight.timerHandle)
 8008e50:	4b14      	ldr	r3, [pc, #80]	; (8008ea4 <DRV_updateEncoder+0x7c>)
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	687a      	ldr	r2, [r7, #4]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d106      	bne.n	8008e68 <DRV_updateEncoder+0x40>
    ENC_update(&g_DRV_encoderRearRight, l_count);
 8008e5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008e5e:	4619      	mov	r1, r3
 8008e60:	4810      	ldr	r0, [pc, #64]	; (8008ea4 <DRV_updateEncoder+0x7c>)
 8008e62:	f000 fe53 	bl	8009b0c <ENC_update>
  return;
 8008e66:	e017      	b.n	8008e98 <DRV_updateEncoder+0x70>
  else if (p_encoderTimerHandle == g_DRV_encoderFrontRight.timerHandle)
 8008e68:	4b0f      	ldr	r3, [pc, #60]	; (8008ea8 <DRV_updateEncoder+0x80>)
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d106      	bne.n	8008e80 <DRV_updateEncoder+0x58>
    ENC_update(&g_DRV_encoderFrontRight, l_count);
 8008e72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008e76:	4619      	mov	r1, r3
 8008e78:	480b      	ldr	r0, [pc, #44]	; (8008ea8 <DRV_updateEncoder+0x80>)
 8008e7a:	f000 fe47 	bl	8009b0c <ENC_update>
  return;
 8008e7e:	e00b      	b.n	8008e98 <DRV_updateEncoder+0x70>
  else if (p_encoderTimerHandle == g_DRV_encoderFrontLeft.timerHandle)
 8008e80:	4b0a      	ldr	r3, [pc, #40]	; (8008eac <DRV_updateEncoder+0x84>)
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d106      	bne.n	8008e98 <DRV_updateEncoder+0x70>
    ENC_update(&g_DRV_encoderFrontLeft, l_count);
 8008e8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008e8e:	4619      	mov	r1, r3
 8008e90:	4806      	ldr	r0, [pc, #24]	; (8008eac <DRV_updateEncoder+0x84>)
 8008e92:	f000 fe3b 	bl	8009b0c <ENC_update>
  return;
 8008e96:	bf00      	nop
 8008e98:	bf00      	nop
}
 8008e9a:	3710      	adds	r7, #16
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	20000250 	.word	0x20000250
 8008ea4:	2000025c 	.word	0x2000025c
 8008ea8:	20000238 	.word	0x20000238
 8008eac:	20000244 	.word	0x20000244

08008eb0 <DRV_updateFromBluetooth>:

void DRV_updateFromBluetooth(T_BLU_Data *p_bluetoothData)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  uint32_t l_speed;

  /* Check possible requested mode change */
  switch (p_bluetoothData->button)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	7c1b      	ldrb	r3, [r3, #16]
 8008ebc:	3b01      	subs	r3, #1
 8008ebe:	2b0f      	cmp	r3, #15
 8008ec0:	d861      	bhi.n	8008f86 <DRV_updateFromBluetooth+0xd6>
 8008ec2:	a201      	add	r2, pc, #4	; (adr r2, 8008ec8 <DRV_updateFromBluetooth+0x18>)
 8008ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec8:	08008f51 	.word	0x08008f51
 8008ecc:	08008f87 	.word	0x08008f87
 8008ed0:	08008f87 	.word	0x08008f87
 8008ed4:	08008f69 	.word	0x08008f69
 8008ed8:	08008f87 	.word	0x08008f87
 8008edc:	08008f87 	.word	0x08008f87
 8008ee0:	08008f87 	.word	0x08008f87
 8008ee4:	08008f87 	.word	0x08008f87
 8008ee8:	08008f87 	.word	0x08008f87
 8008eec:	08008f87 	.word	0x08008f87
 8008ef0:	08008f87 	.word	0x08008f87
 8008ef4:	08008f87 	.word	0x08008f87
 8008ef8:	08008f87 	.word	0x08008f87
 8008efc:	08008f39 	.word	0x08008f39
 8008f00:	08008f21 	.word	0x08008f21
 8008f04:	08008f09 	.word	0x08008f09
  {
    case BLU_BUTTON_PINK_SQUARE:
      if (g_DRV_mode != DRV_MODE_MANUAL_FIXED_SPEED)
 8008f08:	4b82      	ldr	r3, [pc, #520]	; (8009114 <DRV_updateFromBluetooth+0x264>)
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d03c      	beq.n	8008f8a <DRV_updateFromBluetooth+0xda>
      {
        LOG_info("Drive mode now DRV_MODE_MANUAL_FIXED_SPEED");
 8008f10:	4981      	ldr	r1, [pc, #516]	; (8009118 <DRV_updateFromBluetooth+0x268>)
 8008f12:	2001      	movs	r0, #1
 8008f14:	f000 ff44 	bl	8009da0 <LOG_log>
        g_DRV_mode = DRV_MODE_MANUAL_FIXED_SPEED;
 8008f18:	4b7e      	ldr	r3, [pc, #504]	; (8009114 <DRV_updateFromBluetooth+0x264>)
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8008f1e:	e034      	b.n	8008f8a <DRV_updateFromBluetooth+0xda>

    case BLU_BUTTON_BLUE_CROSS:
      if (g_DRV_mode != DRV_MODE_MANUAL_VARIABLE_SPEED)
 8008f20:	4b7c      	ldr	r3, [pc, #496]	; (8009114 <DRV_updateFromBluetooth+0x264>)
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d032      	beq.n	8008f8e <DRV_updateFromBluetooth+0xde>
      {
        LOG_info("Drive mode now DRV_MODE_MANUAL_VARIABLE_SPEED");
 8008f28:	497c      	ldr	r1, [pc, #496]	; (800911c <DRV_updateFromBluetooth+0x26c>)
 8008f2a:	2001      	movs	r0, #1
 8008f2c:	f000 ff38 	bl	8009da0 <LOG_log>
        g_DRV_mode = DRV_MODE_MANUAL_VARIABLE_SPEED;
 8008f30:	4b78      	ldr	r3, [pc, #480]	; (8009114 <DRV_updateFromBluetooth+0x264>)
 8008f32:	2201      	movs	r2, #1
 8008f34:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8008f36:	e02a      	b.n	8008f8e <DRV_updateFromBluetooth+0xde>

    case BLU_BUTTON_RED_CIRCLE:
      if (g_DRV_mode != DRV_MODE_MASTER_BOARD_CONTROL)
 8008f38:	4b76      	ldr	r3, [pc, #472]	; (8009114 <DRV_updateFromBluetooth+0x264>)
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	2b02      	cmp	r3, #2
 8008f3e:	d028      	beq.n	8008f92 <DRV_updateFromBluetooth+0xe2>
      {
        LOG_info("Drive mode now DRV_MODE_MASTER_BOARD_CONTROL");
 8008f40:	4977      	ldr	r1, [pc, #476]	; (8009120 <DRV_updateFromBluetooth+0x270>)
 8008f42:	2001      	movs	r0, #1
 8008f44:	f000 ff2c 	bl	8009da0 <LOG_log>
        g_DRV_mode = DRV_MODE_MASTER_BOARD_CONTROL;
 8008f48:	4b72      	ldr	r3, [pc, #456]	; (8009114 <DRV_updateFromBluetooth+0x264>)
 8008f4a:	2202      	movs	r2, #2
 8008f4c:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8008f4e:	e020      	b.n	8008f92 <DRV_updateFromBluetooth+0xe2>

    case BLU_BUTTON_SELECT:
      if (g_DRV_areMotorsOn == true)
 8008f50:	4b74      	ldr	r3, [pc, #464]	; (8009124 <DRV_updateFromBluetooth+0x274>)
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d01e      	beq.n	8008f96 <DRV_updateFromBluetooth+0xe6>
      {
        LOG_info("Drive turning motor OFF");
 8008f58:	4973      	ldr	r1, [pc, #460]	; (8009128 <DRV_updateFromBluetooth+0x278>)
 8008f5a:	2001      	movs	r0, #1
 8008f5c:	f000 ff20 	bl	8009da0 <LOG_log>
        g_DRV_areMotorsOn = false;
 8008f60:	4b70      	ldr	r3, [pc, #448]	; (8009124 <DRV_updateFromBluetooth+0x274>)
 8008f62:	2200      	movs	r2, #0
 8008f64:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8008f66:	e016      	b.n	8008f96 <DRV_updateFromBluetooth+0xe6>

    case BLU_BUTTON_START:
      if (g_DRV_areMotorsOn == false)
 8008f68:	4b6e      	ldr	r3, [pc, #440]	; (8009124 <DRV_updateFromBluetooth+0x274>)
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	f083 0301 	eor.w	r3, r3, #1
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d011      	beq.n	8008f9a <DRV_updateFromBluetooth+0xea>
      {
        LOG_info("Drive turning motors ON");
 8008f76:	496d      	ldr	r1, [pc, #436]	; (800912c <DRV_updateFromBluetooth+0x27c>)
 8008f78:	2001      	movs	r0, #1
 8008f7a:	f000 ff11 	bl	8009da0 <LOG_log>
        g_DRV_areMotorsOn = true;
 8008f7e:	4b69      	ldr	r3, [pc, #420]	; (8009124 <DRV_updateFromBluetooth+0x274>)
 8008f80:	2201      	movs	r2, #1
 8008f82:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8008f84:	e009      	b.n	8008f9a <DRV_updateFromBluetooth+0xea>

    case BLU_BUTTON_NONE:
    default:
      ; /* Nothing to do */
      break;
 8008f86:	bf00      	nop
 8008f88:	e008      	b.n	8008f9c <DRV_updateFromBluetooth+0xec>
      break;
 8008f8a:	bf00      	nop
 8008f8c:	e006      	b.n	8008f9c <DRV_updateFromBluetooth+0xec>
      break;
 8008f8e:	bf00      	nop
 8008f90:	e004      	b.n	8008f9c <DRV_updateFromBluetooth+0xec>
      break;
 8008f92:	bf00      	nop
 8008f94:	e002      	b.n	8008f9c <DRV_updateFromBluetooth+0xec>
      break;
 8008f96:	bf00      	nop
 8008f98:	e000      	b.n	8008f9c <DRV_updateFromBluetooth+0xec>
      break;
 8008f9a:	bf00      	nop
  }

  /* Master board control mode is an automated mode, so that we will */
  /* ignore any direction/button press received via bluetooth.       */
  if (g_DRV_mode == DRV_MODE_MASTER_BOARD_CONTROL)
 8008f9c:	4b5d      	ldr	r3, [pc, #372]	; (8009114 <DRV_updateFromBluetooth+0x264>)
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	2b02      	cmp	r3, #2
 8008fa2:	f000 80b3 	beq.w	800910c <DRV_updateFromBluetooth+0x25c>
    ; /* Nothing to do */
  }
  /* Manual mode, applying directions received by bluetooth */
  else
  {
    if (p_bluetoothData->leftY > DRV_JOYSTICKS_THRESHOLD)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	2b0a      	cmp	r3, #10
 8008fac:	dd0c      	ble.n	8008fc8 <DRV_updateFromBluetooth+0x118>
    {
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->leftY;
 8008fae:	4b59      	ldr	r3, [pc, #356]	; (8009114 <DRV_updateFromBluetooth+0x264>)
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d002      	beq.n	8008fbc <DRV_updateFromBluetooth+0x10c>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	e000      	b.n	8008fbe <DRV_updateFromBluetooth+0x10e>
 8008fbc:	2314      	movs	r3, #20
 8008fbe:	60fb      	str	r3, [r7, #12]

      DRV_moveForward(l_speed);
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	f000 fac7 	bl	8009554 <DRV_moveForward>
      /* Most of the time, we will get here */
      DRV_sleep();
    }
  }

  return;
 8008fc6:	e0a1      	b.n	800910c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightY > DRV_JOYSTICKS_THRESHOLD)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	2b0a      	cmp	r3, #10
 8008fce:	dd0c      	ble.n	8008fea <DRV_updateFromBluetooth+0x13a>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->rightY;
 8008fd0:	4b50      	ldr	r3, [pc, #320]	; (8009114 <DRV_updateFromBluetooth+0x264>)
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d002      	beq.n	8008fde <DRV_updateFromBluetooth+0x12e>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	e000      	b.n	8008fe0 <DRV_updateFromBluetooth+0x130>
 8008fde:	2314      	movs	r3, #20
 8008fe0:	60fb      	str	r3, [r7, #12]
      DRV_moveForward(l_speed);
 8008fe2:	68f8      	ldr	r0, [r7, #12]
 8008fe4:	f000 fab6 	bl	8009554 <DRV_moveForward>
  return;
 8008fe8:	e090      	b.n	800910c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->leftY < -DRV_JOYSTICKS_THRESHOLD)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	f113 0f0a 	cmn.w	r3, #10
 8008ff2:	da0d      	bge.n	8009010 <DRV_updateFromBluetooth+0x160>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->leftY;
 8008ff4:	4b47      	ldr	r3, [pc, #284]	; (8009114 <DRV_updateFromBluetooth+0x264>)
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d003      	beq.n	8009004 <DRV_updateFromBluetooth+0x154>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	425b      	negs	r3, r3
 8009002:	e000      	b.n	8009006 <DRV_updateFromBluetooth+0x156>
 8009004:	2314      	movs	r3, #20
 8009006:	60fb      	str	r3, [r7, #12]
      DRV_moveBackward(l_speed);
 8009008:	68f8      	ldr	r0, [r7, #12]
 800900a:	f000 faeb 	bl	80095e4 <DRV_moveBackward>
  return;
 800900e:	e07d      	b.n	800910c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightY < -DRV_JOYSTICKS_THRESHOLD)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	f113 0f0a 	cmn.w	r3, #10
 8009018:	da0d      	bge.n	8009036 <DRV_updateFromBluetooth+0x186>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->rightY;
 800901a:	4b3e      	ldr	r3, [pc, #248]	; (8009114 <DRV_updateFromBluetooth+0x264>)
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d003      	beq.n	800902a <DRV_updateFromBluetooth+0x17a>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	425b      	negs	r3, r3
 8009028:	e000      	b.n	800902c <DRV_updateFromBluetooth+0x17c>
 800902a:	2314      	movs	r3, #20
 800902c:	60fb      	str	r3, [r7, #12]
      DRV_moveBackward(l_speed);
 800902e:	68f8      	ldr	r0, [r7, #12]
 8009030:	f000 fad8 	bl	80095e4 <DRV_moveBackward>
  return;
 8009034:	e06a      	b.n	800910c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->leftX < -DRV_JOYSTICKS_THRESHOLD)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f113 0f0a 	cmn.w	r3, #10
 800903e:	da0d      	bge.n	800905c <DRV_updateFromBluetooth+0x1ac>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->leftX;
 8009040:	4b34      	ldr	r3, [pc, #208]	; (8009114 <DRV_updateFromBluetooth+0x264>)
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d003      	beq.n	8009050 <DRV_updateFromBluetooth+0x1a0>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	425b      	negs	r3, r3
 800904e:	e000      	b.n	8009052 <DRV_updateFromBluetooth+0x1a2>
 8009050:	2314      	movs	r3, #20
 8009052:	60fb      	str	r3, [r7, #12]
      DRV_turnLeft(l_speed);
 8009054:	68f8      	ldr	r0, [r7, #12]
 8009056:	f000 fc0d 	bl	8009874 <DRV_turnLeft>
  return;
 800905a:	e057      	b.n	800910c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->leftX > DRV_JOYSTICKS_THRESHOLD)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2b0a      	cmp	r3, #10
 8009062:	dd0c      	ble.n	800907e <DRV_updateFromBluetooth+0x1ce>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->leftX;
 8009064:	4b2b      	ldr	r3, [pc, #172]	; (8009114 <DRV_updateFromBluetooth+0x264>)
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d002      	beq.n	8009072 <DRV_updateFromBluetooth+0x1c2>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	e000      	b.n	8009074 <DRV_updateFromBluetooth+0x1c4>
 8009072:	2314      	movs	r3, #20
 8009074:	60fb      	str	r3, [r7, #12]
      DRV_turnRight(l_speed);
 8009076:	68f8      	ldr	r0, [r7, #12]
 8009078:	f000 fc44 	bl	8009904 <DRV_turnRight>
  return;
 800907c:	e046      	b.n	800910c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightX < -DRV_JOYSTICKS_THRESHOLD)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	f113 0f0a 	cmn.w	r3, #10
 8009086:	da0d      	bge.n	80090a4 <DRV_updateFromBluetooth+0x1f4>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->rightX;
 8009088:	4b22      	ldr	r3, [pc, #136]	; (8009114 <DRV_updateFromBluetooth+0x264>)
 800908a:	781b      	ldrb	r3, [r3, #0]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d003      	beq.n	8009098 <DRV_updateFromBluetooth+0x1e8>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	425b      	negs	r3, r3
 8009096:	e000      	b.n	800909a <DRV_updateFromBluetooth+0x1ea>
 8009098:	2314      	movs	r3, #20
 800909a:	60fb      	str	r3, [r7, #12]
      DRV_translateLeft(l_speed);
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f000 fc79 	bl	8009994 <DRV_translateLeft>
  return;
 80090a2:	e033      	b.n	800910c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightX > DRV_JOYSTICKS_THRESHOLD)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	2b0a      	cmp	r3, #10
 80090aa:	dd0c      	ble.n	80090c6 <DRV_updateFromBluetooth+0x216>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->rightX;
 80090ac:	4b19      	ldr	r3, [pc, #100]	; (8009114 <DRV_updateFromBluetooth+0x264>)
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d002      	beq.n	80090ba <DRV_updateFromBluetooth+0x20a>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	e000      	b.n	80090bc <DRV_updateFromBluetooth+0x20c>
 80090ba:	2314      	movs	r3, #20
 80090bc:	60fb      	str	r3, [r7, #12]
      DRV_translateRight(l_speed);
 80090be:	68f8      	ldr	r0, [r7, #12]
 80090c0:	f000 fcb0 	bl	8009a24 <DRV_translateRight>
  return;
 80090c4:	e022      	b.n	800910c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_L1)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	7c1b      	ldrb	r3, [r3, #16]
 80090ca:	2b0b      	cmp	r3, #11
 80090cc:	d103      	bne.n	80090d6 <DRV_updateFromBluetooth+0x226>
      DRV_moveForwardLeft(DRV_BUTTONS_FIXED_SPEED);
 80090ce:	2028      	movs	r0, #40	; 0x28
 80090d0:	f000 fb10 	bl	80096f4 <DRV_moveForwardLeft>
  return;
 80090d4:	e01a      	b.n	800910c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_L2)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	7c1b      	ldrb	r3, [r3, #16]
 80090da:	2b09      	cmp	r3, #9
 80090dc:	d103      	bne.n	80090e6 <DRV_updateFromBluetooth+0x236>
      DRV_moveBackwardRight(DRV_BUTTONS_FIXED_SPEED);
 80090de:	2028      	movs	r0, #40	; 0x28
 80090e0:	f000 fb48 	bl	8009774 <DRV_moveBackwardRight>
  return;
 80090e4:	e012      	b.n	800910c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_R1)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	7c1b      	ldrb	r3, [r3, #16]
 80090ea:	2b0c      	cmp	r3, #12
 80090ec:	d103      	bne.n	80090f6 <DRV_updateFromBluetooth+0x246>
      DRV_moveForwardRight(DRV_BUTTONS_FIXED_SPEED);
 80090ee:	2028      	movs	r0, #40	; 0x28
 80090f0:	f000 fac0 	bl	8009674 <DRV_moveForwardRight>
  return;
 80090f4:	e00a      	b.n	800910c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_R2)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	7c1b      	ldrb	r3, [r3, #16]
 80090fa:	2b0a      	cmp	r3, #10
 80090fc:	d103      	bne.n	8009106 <DRV_updateFromBluetooth+0x256>
      DRV_moveBackwardLeft(DRV_BUTTONS_FIXED_SPEED);
 80090fe:	2028      	movs	r0, #40	; 0x28
 8009100:	f000 fb78 	bl	80097f4 <DRV_moveBackwardLeft>
  return;
 8009104:	e002      	b.n	800910c <DRV_updateFromBluetooth+0x25c>
      DRV_sleep();
 8009106:	f000 f9f9 	bl	80094fc <DRV_sleep>
  return;
 800910a:	bf00      	nop
 800910c:	bf00      	nop
}
 800910e:	3710      	adds	r7, #16
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}
 8009114:	200000e7 	.word	0x200000e7
 8009118:	0800c618 	.word	0x0800c618
 800911c:	0800c644 	.word	0x0800c644
 8009120:	0800c674 	.word	0x0800c674
 8009124:	200000e5 	.word	0x200000e5
 8009128:	0800c6a4 	.word	0x0800c6a4
 800912c:	0800c6bc 	.word	0x0800c6bc

08009130 <DRV_updateFromMaster>:

void DRV_updateFromMaster(T_SFO_Context *p_commandsFifo, uint16_t p_deltaTime)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b092      	sub	sp, #72	; 0x48
 8009134:	af02      	add	r7, sp, #8
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	460b      	mov	r3, r1
 800913a:	807b      	strh	r3, [r7, #2]
  int32_t    l_pidSpeedRearLeft;
  T_SFO_data l_command;
  int32_t    l_speed;

  /* Ignore master board data only whenever a manual mode is selected */
  if (g_DRV_mode != DRV_MODE_MASTER_BOARD_CONTROL)
 800913c:	4b80      	ldr	r3, [pc, #512]	; (8009340 <DRV_updateFromMaster+0x210>)
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	2b02      	cmp	r3, #2
 8009142:	f040 80f8 	bne.w	8009336 <DRV_updateFromMaster+0x206>
  }
  else
  {
    /* Deal with only one command per cycle. If a FIFO overflow occurs, */
    /* FIFO string will report an error, showing us a design issue...   */
    if (SFO_getCount(p_commandsFifo) != 0)
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f001 f9be 	bl	800a4c8 <SFO_getCount>
 800914c:	4603      	mov	r3, r0
 800914e:	2b00      	cmp	r3, #0
 8009150:	f000 80ac 	beq.w	80092ac <DRV_updateFromMaster+0x17c>
    {
      SFO_logInfo(p_commandsFifo);
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f001 f9c3 	bl	800a4e0 <SFO_logInfo>
      SFO_pop    (p_commandsFifo         , &l_command);
 800915a:	f107 030c 	add.w	r3, r7, #12
 800915e:	4619      	mov	r1, r3
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f001 f971 	bl	800a448 <SFO_pop>
      LOG_info   ("Drive got command: %s",  l_command);
 8009166:	f107 030c 	add.w	r3, r7, #12
 800916a:	461a      	mov	r2, r3
 800916c:	4975      	ldr	r1, [pc, #468]	; (8009344 <DRV_updateFromMaster+0x214>)
 800916e:	2001      	movs	r0, #1
 8009170:	f000 fe16 	bl	8009da0 <LOG_log>

      l_speed = atoi(&l_command[2]);
 8009174:	f107 030c 	add.w	r3, r7, #12
 8009178:	3302      	adds	r3, #2
 800917a:	4618      	mov	r0, r3
 800917c:	f001 faf6 	bl	800a76c <atoi>
 8009180:	63f8      	str	r0, [r7, #60]	; 0x3c

      /* Check that speed is in allowed range */
      if ((l_speed < STP_CONSOLE_MIN_SPEED) || (l_speed > STP_CONSOLE_MAX_SPEED))
 8009182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009184:	2b00      	cmp	r3, #0
 8009186:	db02      	blt.n	800918e <DRV_updateFromMaster+0x5e>
 8009188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800918a:	2b64      	cmp	r3, #100	; 0x64
 800918c:	dd05      	ble.n	800919a <DRV_updateFromMaster+0x6a>
      {
        LOG_error("Drive got out of range speed: %d", l_speed);
 800918e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009190:	496d      	ldr	r1, [pc, #436]	; (8009348 <DRV_updateFromMaster+0x218>)
 8009192:	2003      	movs	r0, #3
 8009194:	f000 fe04 	bl	8009da0 <LOG_log>
 8009198:	e088      	b.n	80092ac <DRV_updateFromMaster+0x17c>
      }
      else
      {
        l_speed = UTI_normalizeIntValue(l_speed ,
 800919a:	2300      	movs	r3, #0
 800919c:	9301      	str	r3, [sp, #4]
 800919e:	2328      	movs	r3, #40	; 0x28
 80091a0:	9300      	str	r3, [sp, #0]
 80091a2:	2300      	movs	r3, #0
 80091a4:	2264      	movs	r2, #100	; 0x64
 80091a6:	2100      	movs	r1, #0
 80091a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80091aa:	f001 fa90 	bl	800a6ce <UTI_normalizeIntValue>
 80091ae:	63f8      	str	r0, [r7, #60]	; 0x3c
                                        STP_DRIVE_MIN_SPEED,
                                        STP_DRIVE_MAX_SPEED,
                                        false);

        /* Forward Straight */
        if ((l_command[0] == 'S') && (l_command[1] == 'T'))
 80091b0:	7b3b      	ldrb	r3, [r7, #12]
 80091b2:	2b53      	cmp	r3, #83	; 0x53
 80091b4:	d105      	bne.n	80091c2 <DRV_updateFromMaster+0x92>
 80091b6:	7b7b      	ldrb	r3, [r7, #13]
 80091b8:	2b54      	cmp	r3, #84	; 0x54
 80091ba:	d102      	bne.n	80091c2 <DRV_updateFromMaster+0x92>
        {
          DRV_sleep();
 80091bc:	f000 f99e 	bl	80094fc <DRV_sleep>
 80091c0:	e074      	b.n	80092ac <DRV_updateFromMaster+0x17c>
        }
        else if ((l_command[0] == 'F') && (l_command[1] == 'S'))
 80091c2:	7b3b      	ldrb	r3, [r7, #12]
 80091c4:	2b46      	cmp	r3, #70	; 0x46
 80091c6:	d107      	bne.n	80091d8 <DRV_updateFromMaster+0xa8>
 80091c8:	7b7b      	ldrb	r3, [r7, #13]
 80091ca:	2b53      	cmp	r3, #83	; 0x53
 80091cc:	d104      	bne.n	80091d8 <DRV_updateFromMaster+0xa8>
        {
          DRV_moveForward(l_speed);
 80091ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091d0:	4618      	mov	r0, r3
 80091d2:	f000 f9bf 	bl	8009554 <DRV_moveForward>
 80091d6:	e069      	b.n	80092ac <DRV_updateFromMaster+0x17c>
        }
        /* Move Backward */
        else if ((l_command[0] == 'B') && (l_command[1] == 'S'))
 80091d8:	7b3b      	ldrb	r3, [r7, #12]
 80091da:	2b42      	cmp	r3, #66	; 0x42
 80091dc:	d107      	bne.n	80091ee <DRV_updateFromMaster+0xbe>
 80091de:	7b7b      	ldrb	r3, [r7, #13]
 80091e0:	2b53      	cmp	r3, #83	; 0x53
 80091e2:	d104      	bne.n	80091ee <DRV_updateFromMaster+0xbe>
        {
          DRV_moveBackward(l_speed);
 80091e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091e6:	4618      	mov	r0, r3
 80091e8:	f000 f9fc 	bl	80095e4 <DRV_moveBackward>
 80091ec:	e05e      	b.n	80092ac <DRV_updateFromMaster+0x17c>
        }
        /* TurN (i.e. Rotate) Left */
        else if ((l_command[0] == 'R') && (l_command[1] == 'L'))
 80091ee:	7b3b      	ldrb	r3, [r7, #12]
 80091f0:	2b52      	cmp	r3, #82	; 0x52
 80091f2:	d107      	bne.n	8009204 <DRV_updateFromMaster+0xd4>
 80091f4:	7b7b      	ldrb	r3, [r7, #13]
 80091f6:	2b4c      	cmp	r3, #76	; 0x4c
 80091f8:	d104      	bne.n	8009204 <DRV_updateFromMaster+0xd4>
        {
          DRV_turnLeft(l_speed);
 80091fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091fc:	4618      	mov	r0, r3
 80091fe:	f000 fb39 	bl	8009874 <DRV_turnLeft>
 8009202:	e053      	b.n	80092ac <DRV_updateFromMaster+0x17c>
        }
        /* TurN (i.e. Rotate) Right */
        else if ((l_command[0] == 'R') && (l_command[1] == 'R'))
 8009204:	7b3b      	ldrb	r3, [r7, #12]
 8009206:	2b52      	cmp	r3, #82	; 0x52
 8009208:	d107      	bne.n	800921a <DRV_updateFromMaster+0xea>
 800920a:	7b7b      	ldrb	r3, [r7, #13]
 800920c:	2b52      	cmp	r3, #82	; 0x52
 800920e:	d104      	bne.n	800921a <DRV_updateFromMaster+0xea>
        {
          DRV_turnRight(l_speed);
 8009210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009212:	4618      	mov	r0, r3
 8009214:	f000 fb76 	bl	8009904 <DRV_turnRight>
 8009218:	e048      	b.n	80092ac <DRV_updateFromMaster+0x17c>
        }
        /* Translate Left */
        else if ((l_command[0] == 'T') && (l_command[1] == 'L'))
 800921a:	7b3b      	ldrb	r3, [r7, #12]
 800921c:	2b54      	cmp	r3, #84	; 0x54
 800921e:	d107      	bne.n	8009230 <DRV_updateFromMaster+0x100>
 8009220:	7b7b      	ldrb	r3, [r7, #13]
 8009222:	2b4c      	cmp	r3, #76	; 0x4c
 8009224:	d104      	bne.n	8009230 <DRV_updateFromMaster+0x100>
        {
          DRV_translateLeft(l_speed);
 8009226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009228:	4618      	mov	r0, r3
 800922a:	f000 fbb3 	bl	8009994 <DRV_translateLeft>
 800922e:	e03d      	b.n	80092ac <DRV_updateFromMaster+0x17c>
        }
        /* Translate Right */
        else if ((l_command[0] == 'T') && (l_command[1] == 'R'))
 8009230:	7b3b      	ldrb	r3, [r7, #12]
 8009232:	2b54      	cmp	r3, #84	; 0x54
 8009234:	d107      	bne.n	8009246 <DRV_updateFromMaster+0x116>
 8009236:	7b7b      	ldrb	r3, [r7, #13]
 8009238:	2b52      	cmp	r3, #82	; 0x52
 800923a:	d104      	bne.n	8009246 <DRV_updateFromMaster+0x116>
        {
          DRV_translateRight(l_speed);
 800923c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800923e:	4618      	mov	r0, r3
 8009240:	f000 fbf0 	bl	8009a24 <DRV_translateRight>
 8009244:	e032      	b.n	80092ac <DRV_updateFromMaster+0x17c>
        }
        /* Forward Left */
        else if ((l_command[0] == 'F') && (l_command[1] == 'L'))
 8009246:	7b3b      	ldrb	r3, [r7, #12]
 8009248:	2b46      	cmp	r3, #70	; 0x46
 800924a:	d107      	bne.n	800925c <DRV_updateFromMaster+0x12c>
 800924c:	7b7b      	ldrb	r3, [r7, #13]
 800924e:	2b4c      	cmp	r3, #76	; 0x4c
 8009250:	d104      	bne.n	800925c <DRV_updateFromMaster+0x12c>
        {
          DRV_moveForwardLeft(l_speed);
 8009252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009254:	4618      	mov	r0, r3
 8009256:	f000 fa4d 	bl	80096f4 <DRV_moveForwardLeft>
 800925a:	e027      	b.n	80092ac <DRV_updateFromMaster+0x17c>
        }
        /* Forward Right */
        else if ((l_command[0] == 'F') && (l_command[1] == 'R'))
 800925c:	7b3b      	ldrb	r3, [r7, #12]
 800925e:	2b46      	cmp	r3, #70	; 0x46
 8009260:	d107      	bne.n	8009272 <DRV_updateFromMaster+0x142>
 8009262:	7b7b      	ldrb	r3, [r7, #13]
 8009264:	2b52      	cmp	r3, #82	; 0x52
 8009266:	d104      	bne.n	8009272 <DRV_updateFromMaster+0x142>
        {
          DRV_moveForwardRight(l_speed);
 8009268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800926a:	4618      	mov	r0, r3
 800926c:	f000 fa02 	bl	8009674 <DRV_moveForwardRight>
 8009270:	e01c      	b.n	80092ac <DRV_updateFromMaster+0x17c>
        }
        /* Backward Left */
        else if ((l_command[0] == 'B') && (l_command[1] == 'L'))
 8009272:	7b3b      	ldrb	r3, [r7, #12]
 8009274:	2b42      	cmp	r3, #66	; 0x42
 8009276:	d107      	bne.n	8009288 <DRV_updateFromMaster+0x158>
 8009278:	7b7b      	ldrb	r3, [r7, #13]
 800927a:	2b4c      	cmp	r3, #76	; 0x4c
 800927c:	d104      	bne.n	8009288 <DRV_updateFromMaster+0x158>
        {
          DRV_moveBackwardLeft(l_speed);
 800927e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009280:	4618      	mov	r0, r3
 8009282:	f000 fab7 	bl	80097f4 <DRV_moveBackwardLeft>
 8009286:	e011      	b.n	80092ac <DRV_updateFromMaster+0x17c>
        }
        /* Forward Right */
        else if ((l_command[0] == 'B') && (l_command[1] == 'R'))
 8009288:	7b3b      	ldrb	r3, [r7, #12]
 800928a:	2b42      	cmp	r3, #66	; 0x42
 800928c:	d107      	bne.n	800929e <DRV_updateFromMaster+0x16e>
 800928e:	7b7b      	ldrb	r3, [r7, #13]
 8009290:	2b52      	cmp	r3, #82	; 0x52
 8009292:	d104      	bne.n	800929e <DRV_updateFromMaster+0x16e>
        {
          DRV_moveBackwardRight(l_speed);
 8009294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009296:	4618      	mov	r0, r3
 8009298:	f000 fa6c 	bl	8009774 <DRV_moveBackwardRight>
 800929c:	e006      	b.n	80092ac <DRV_updateFromMaster+0x17c>
        }
        else
        {
          LOG_error("Drive got unsupported command: '%s'", l_command);
 800929e:	f107 030c 	add.w	r3, r7, #12
 80092a2:	461a      	mov	r2, r3
 80092a4:	4929      	ldr	r1, [pc, #164]	; (800934c <DRV_updateFromMaster+0x21c>)
 80092a6:	2003      	movs	r0, #3
 80092a8:	f000 fd7a 	bl	8009da0 <LOG_log>
        }
      }
    }

    /* Get measurements */
    l_measuredSpeedFrontRight = ENC_getCount(&g_DRV_encoderFrontRight);
 80092ac:	4828      	ldr	r0, [pc, #160]	; (8009350 <DRV_updateFromMaster+0x220>)
 80092ae:	f000 fc49 	bl	8009b44 <ENC_getCount>
 80092b2:	4603      	mov	r3, r0
 80092b4:	63bb      	str	r3, [r7, #56]	; 0x38
    l_measuredSpeedFrontLeft  = ENC_getCount(&g_DRV_encoderFrontLeft );
 80092b6:	4827      	ldr	r0, [pc, #156]	; (8009354 <DRV_updateFromMaster+0x224>)
 80092b8:	f000 fc44 	bl	8009b44 <ENC_getCount>
 80092bc:	4603      	mov	r3, r0
 80092be:	637b      	str	r3, [r7, #52]	; 0x34
    l_measuredSpeedRearRight  = ENC_getCount(&g_DRV_encoderRearRight );
 80092c0:	4825      	ldr	r0, [pc, #148]	; (8009358 <DRV_updateFromMaster+0x228>)
 80092c2:	f000 fc3f 	bl	8009b44 <ENC_getCount>
 80092c6:	4603      	mov	r3, r0
 80092c8:	633b      	str	r3, [r7, #48]	; 0x30
    l_measuredSpeedRearLeft   = ENC_getCount(&g_DRV_encoderRearLeft  );
 80092ca:	4824      	ldr	r0, [pc, #144]	; (800935c <DRV_updateFromMaster+0x22c>)
 80092cc:	f000 fc3a 	bl	8009b44 <ENC_getCount>
 80092d0:	4603      	mov	r3, r0
 80092d2:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Update PIDs */
    l_pidSpeedFrontRight = PID_update(&g_DRV_pidFrontRight, l_measuredSpeedFrontRight, p_deltaTime);
 80092d4:	887b      	ldrh	r3, [r7, #2]
 80092d6:	461a      	mov	r2, r3
 80092d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80092da:	4821      	ldr	r0, [pc, #132]	; (8009360 <DRV_updateFromMaster+0x230>)
 80092dc:	f000 ffb4 	bl	800a248 <PID_update>
 80092e0:	62b8      	str	r0, [r7, #40]	; 0x28
    l_pidSpeedFrontLeft  = PID_update(&g_DRV_pidFrontLeft , l_measuredSpeedFrontLeft , p_deltaTime);
 80092e2:	887b      	ldrh	r3, [r7, #2]
 80092e4:	461a      	mov	r2, r3
 80092e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80092e8:	481e      	ldr	r0, [pc, #120]	; (8009364 <DRV_updateFromMaster+0x234>)
 80092ea:	f000 ffad 	bl	800a248 <PID_update>
 80092ee:	6278      	str	r0, [r7, #36]	; 0x24
    l_pidSpeedRearRight  = PID_update(&g_DRV_pidRearRight , l_measuredSpeedRearRight , p_deltaTime);
 80092f0:	887b      	ldrh	r3, [r7, #2]
 80092f2:	461a      	mov	r2, r3
 80092f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80092f6:	481c      	ldr	r0, [pc, #112]	; (8009368 <DRV_updateFromMaster+0x238>)
 80092f8:	f000 ffa6 	bl	800a248 <PID_update>
 80092fc:	6238      	str	r0, [r7, #32]
    l_pidSpeedRearLeft   = PID_update(&g_DRV_pidRearLeft  , l_measuredSpeedRearLeft  , p_deltaTime);
 80092fe:	887b      	ldrh	r3, [r7, #2]
 8009300:	461a      	mov	r2, r3
 8009302:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009304:	4819      	ldr	r0, [pc, #100]	; (800936c <DRV_updateFromMaster+0x23c>)
 8009306:	f000 ff9f 	bl	800a248 <PID_update>
 800930a:	61f8      	str	r0, [r7, #28]

    /* Update motors */
    MTR_setSpeed(&g_DRV_motorFrontRight, l_pidSpeedFrontRight);
 800930c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930e:	4619      	mov	r1, r3
 8009310:	4817      	ldr	r0, [pc, #92]	; (8009370 <DRV_updateFromMaster+0x240>)
 8009312:	f000 fefb 	bl	800a10c <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_pidSpeedFrontLeft );
 8009316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009318:	4619      	mov	r1, r3
 800931a:	4816      	ldr	r0, [pc, #88]	; (8009374 <DRV_updateFromMaster+0x244>)
 800931c:	f000 fef6 	bl	800a10c <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_pidSpeedRearRight );
 8009320:	6a3b      	ldr	r3, [r7, #32]
 8009322:	4619      	mov	r1, r3
 8009324:	4814      	ldr	r0, [pc, #80]	; (8009378 <DRV_updateFromMaster+0x248>)
 8009326:	f000 fef1 	bl	800a10c <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_pidSpeedRearLeft  );
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	4619      	mov	r1, r3
 800932e:	4813      	ldr	r0, [pc, #76]	; (800937c <DRV_updateFromMaster+0x24c>)
 8009330:	f000 feec 	bl	800a10c <MTR_setSpeed>
  }

  return;
 8009334:	bf00      	nop
 8009336:	bf00      	nop
}
 8009338:	3740      	adds	r7, #64	; 0x40
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	200000e7 	.word	0x200000e7
 8009344:	0800c6d4 	.word	0x0800c6d4
 8009348:	0800c6ec 	.word	0x0800c6ec
 800934c:	0800c710 	.word	0x0800c710
 8009350:	20000238 	.word	0x20000238
 8009354:	20000244 	.word	0x20000244
 8009358:	2000025c 	.word	0x2000025c
 800935c:	20000250 	.word	0x20000250
 8009360:	200000e8 	.word	0x200000e8
 8009364:	20000118 	.word	0x20000118
 8009368:	20000178 	.word	0x20000178
 800936c:	20000148 	.word	0x20000148
 8009370:	200001a8 	.word	0x200001a8
 8009374:	200001cc 	.word	0x200001cc
 8009378:	20000214 	.word	0x20000214
 800937c:	200001f0 	.word	0x200001f0

08009380 <DRV_getMode>:

T_DRV_MODE DRV_getMode(void)
{
 8009380:	b480      	push	{r7}
 8009382:	af00      	add	r7, sp, #0
  return g_DRV_mode;
 8009384:	4b02      	ldr	r3, [pc, #8]	; (8009390 <DRV_getMode+0x10>)
 8009386:	781b      	ldrb	r3, [r3, #0]
}
 8009388:	4618      	mov	r0, r3
 800938a:	46bd      	mov	sp, r7
 800938c:	bc80      	pop	{r7}
 800938e:	4770      	bx	lr
 8009390:	200000e7 	.word	0x200000e7

08009394 <DRV_logInfo>:

void DRV_logInfo(void)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af02      	add	r7, sp, #8
  T_MTR_DIRECTION l_direction;
  uint32_t        l_speed;

  if (g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED)
 800939a:	4b44      	ldr	r3, [pc, #272]	; (80094ac <DRV_logInfo+0x118>)
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d104      	bne.n	80093ac <DRV_logInfo+0x18>
  {
    LOG_info("Mode:  MANUAL FIXED SPEED");
 80093a2:	4943      	ldr	r1, [pc, #268]	; (80094b0 <DRV_logInfo+0x11c>)
 80093a4:	2001      	movs	r0, #1
 80093a6:	f000 fcfb 	bl	8009da0 <LOG_log>
 80093aa:	e018      	b.n	80093de <DRV_logInfo+0x4a>
  }
  else if (g_DRV_mode == DRV_MODE_MANUAL_VARIABLE_SPEED)
 80093ac:	4b3f      	ldr	r3, [pc, #252]	; (80094ac <DRV_logInfo+0x118>)
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d104      	bne.n	80093be <DRV_logInfo+0x2a>
  {
    LOG_info("Mode:  MANUAL VARIABLE SPEED");
 80093b4:	493f      	ldr	r1, [pc, #252]	; (80094b4 <DRV_logInfo+0x120>)
 80093b6:	2001      	movs	r0, #1
 80093b8:	f000 fcf2 	bl	8009da0 <LOG_log>
 80093bc:	e00f      	b.n	80093de <DRV_logInfo+0x4a>
  }
  else if (g_DRV_mode == DRV_MODE_MASTER_BOARD_CONTROL)
 80093be:	4b3b      	ldr	r3, [pc, #236]	; (80094ac <DRV_logInfo+0x118>)
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	2b02      	cmp	r3, #2
 80093c4:	d104      	bne.n	80093d0 <DRV_logInfo+0x3c>
  {
    LOG_info("Mode:  MASTER BOARD CONTROL");
 80093c6:	493c      	ldr	r1, [pc, #240]	; (80094b8 <DRV_logInfo+0x124>)
 80093c8:	2001      	movs	r0, #1
 80093ca:	f000 fce9 	bl	8009da0 <LOG_log>
 80093ce:	e006      	b.n	80093de <DRV_logInfo+0x4a>
  }
  else
  {
    LOG_error("Unsupported drive mode: %u", g_DRV_mode);
 80093d0:	4b36      	ldr	r3, [pc, #216]	; (80094ac <DRV_logInfo+0x118>)
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	461a      	mov	r2, r3
 80093d6:	4939      	ldr	r1, [pc, #228]	; (80094bc <DRV_logInfo+0x128>)
 80093d8:	2003      	movs	r0, #3
 80093da:	f000 fce1 	bl	8009da0 <LOG_log>
  }

  if (g_DRV_isDriveOn == true)
 80093de:	4b38      	ldr	r3, [pc, #224]	; (80094c0 <DRV_logInfo+0x12c>)
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d004      	beq.n	80093f0 <DRV_logInfo+0x5c>
  {
    LOG_info("Drive  ON");
 80093e6:	4937      	ldr	r1, [pc, #220]	; (80094c4 <DRV_logInfo+0x130>)
 80093e8:	2001      	movs	r0, #1
 80093ea:	f000 fcd9 	bl	8009da0 <LOG_log>
 80093ee:	e003      	b.n	80093f8 <DRV_logInfo+0x64>
  }
  else
  {
    LOG_info("Drive  OFF");
 80093f0:	4935      	ldr	r1, [pc, #212]	; (80094c8 <DRV_logInfo+0x134>)
 80093f2:	2001      	movs	r0, #1
 80093f4:	f000 fcd4 	bl	8009da0 <LOG_log>
  }

  if (g_DRV_areMotorsOn == true)
 80093f8:	4b34      	ldr	r3, [pc, #208]	; (80094cc <DRV_logInfo+0x138>)
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d004      	beq.n	800940a <DRV_logInfo+0x76>
  {
    LOG_info("Motors ON");
 8009400:	4933      	ldr	r1, [pc, #204]	; (80094d0 <DRV_logInfo+0x13c>)
 8009402:	2001      	movs	r0, #1
 8009404:	f000 fccc 	bl	8009da0 <LOG_log>
 8009408:	e003      	b.n	8009412 <DRV_logInfo+0x7e>
  }
  else
  {
    LOG_info("Motors OFF");
 800940a:	4932      	ldr	r1, [pc, #200]	; (80094d4 <DRV_logInfo+0x140>)
 800940c:	2001      	movs	r0, #1
 800940e:	f000 fcc7 	bl	8009da0 <LOG_log>
  }

  l_direction = MTR_getDirection(&g_DRV_motorFrontLeft);
 8009412:	4831      	ldr	r0, [pc, #196]	; (80094d8 <DRV_logInfo+0x144>)
 8009414:	f000 fe6e 	bl	800a0f4 <MTR_getDirection>
 8009418:	4603      	mov	r3, r0
 800941a:	71fb      	strb	r3, [r7, #7]
  l_speed     = MTR_getSpeed    (&g_DRV_motorFrontLeft);
 800941c:	482e      	ldr	r0, [pc, #184]	; (80094d8 <DRV_logInfo+0x144>)
 800941e:	f000 feb3 	bl	800a188 <MTR_getSpeed>
 8009422:	6038      	str	r0, [r7, #0]

  LOG_info("%s motor direction/speed: %u/%u", DRV_FRONT_LEFT_MOTOR_NAME, l_direction, l_speed);
 8009424:	79fa      	ldrb	r2, [r7, #7]
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	9300      	str	r3, [sp, #0]
 800942a:	4613      	mov	r3, r2
 800942c:	4a2b      	ldr	r2, [pc, #172]	; (80094dc <DRV_logInfo+0x148>)
 800942e:	492c      	ldr	r1, [pc, #176]	; (80094e0 <DRV_logInfo+0x14c>)
 8009430:	2001      	movs	r0, #1
 8009432:	f000 fcb5 	bl	8009da0 <LOG_log>

  l_direction = MTR_getDirection(&g_DRV_motorFrontRight);
 8009436:	482b      	ldr	r0, [pc, #172]	; (80094e4 <DRV_logInfo+0x150>)
 8009438:	f000 fe5c 	bl	800a0f4 <MTR_getDirection>
 800943c:	4603      	mov	r3, r0
 800943e:	71fb      	strb	r3, [r7, #7]
  l_speed     = MTR_getSpeed    (&g_DRV_motorFrontRight);
 8009440:	4828      	ldr	r0, [pc, #160]	; (80094e4 <DRV_logInfo+0x150>)
 8009442:	f000 fea1 	bl	800a188 <MTR_getSpeed>
 8009446:	6038      	str	r0, [r7, #0]

  LOG_info("%s motor direction/speed: %u/%u", DRV_FRONT_RIGHT_MOTOR_NAME, l_direction, l_speed);
 8009448:	79fa      	ldrb	r2, [r7, #7]
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	9300      	str	r3, [sp, #0]
 800944e:	4613      	mov	r3, r2
 8009450:	4a25      	ldr	r2, [pc, #148]	; (80094e8 <DRV_logInfo+0x154>)
 8009452:	4923      	ldr	r1, [pc, #140]	; (80094e0 <DRV_logInfo+0x14c>)
 8009454:	2001      	movs	r0, #1
 8009456:	f000 fca3 	bl	8009da0 <LOG_log>

  l_direction = MTR_getDirection(&g_DRV_motorRearLeft);
 800945a:	4824      	ldr	r0, [pc, #144]	; (80094ec <DRV_logInfo+0x158>)
 800945c:	f000 fe4a 	bl	800a0f4 <MTR_getDirection>
 8009460:	4603      	mov	r3, r0
 8009462:	71fb      	strb	r3, [r7, #7]
  l_speed     = MTR_getSpeed    (&g_DRV_motorRearLeft);
 8009464:	4821      	ldr	r0, [pc, #132]	; (80094ec <DRV_logInfo+0x158>)
 8009466:	f000 fe8f 	bl	800a188 <MTR_getSpeed>
 800946a:	6038      	str	r0, [r7, #0]

  LOG_info("%s motor direction/speed: %u/%u", DRV_REAR_LEFT_MOTOR_NAME, l_direction, l_speed);
 800946c:	79fa      	ldrb	r2, [r7, #7]
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	9300      	str	r3, [sp, #0]
 8009472:	4613      	mov	r3, r2
 8009474:	4a1e      	ldr	r2, [pc, #120]	; (80094f0 <DRV_logInfo+0x15c>)
 8009476:	491a      	ldr	r1, [pc, #104]	; (80094e0 <DRV_logInfo+0x14c>)
 8009478:	2001      	movs	r0, #1
 800947a:	f000 fc91 	bl	8009da0 <LOG_log>

  l_direction = MTR_getDirection(&g_DRV_motorRearRight);
 800947e:	481d      	ldr	r0, [pc, #116]	; (80094f4 <DRV_logInfo+0x160>)
 8009480:	f000 fe38 	bl	800a0f4 <MTR_getDirection>
 8009484:	4603      	mov	r3, r0
 8009486:	71fb      	strb	r3, [r7, #7]
  l_speed     = MTR_getSpeed    (&g_DRV_motorRearRight);
 8009488:	481a      	ldr	r0, [pc, #104]	; (80094f4 <DRV_logInfo+0x160>)
 800948a:	f000 fe7d 	bl	800a188 <MTR_getSpeed>
 800948e:	6038      	str	r0, [r7, #0]

  LOG_info("%s motor direction/speed: %u/%u", DRV_REAR_RIGHT_MOTOR_NAME, l_direction, l_speed);
 8009490:	79fa      	ldrb	r2, [r7, #7]
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	9300      	str	r3, [sp, #0]
 8009496:	4613      	mov	r3, r2
 8009498:	4a17      	ldr	r2, [pc, #92]	; (80094f8 <DRV_logInfo+0x164>)
 800949a:	4911      	ldr	r1, [pc, #68]	; (80094e0 <DRV_logInfo+0x14c>)
 800949c:	2001      	movs	r0, #1
 800949e:	f000 fc7f 	bl	8009da0 <LOG_log>

  return;
 80094a2:	bf00      	nop
}
 80094a4:	3708      	adds	r7, #8
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop
 80094ac:	200000e7 	.word	0x200000e7
 80094b0:	0800c734 	.word	0x0800c734
 80094b4:	0800c750 	.word	0x0800c750
 80094b8:	0800c770 	.word	0x0800c770
 80094bc:	0800c78c 	.word	0x0800c78c
 80094c0:	200000e6 	.word	0x200000e6
 80094c4:	0800c7a8 	.word	0x0800c7a8
 80094c8:	0800c7b4 	.word	0x0800c7b4
 80094cc:	200000e5 	.word	0x200000e5
 80094d0:	0800c7c0 	.word	0x0800c7c0
 80094d4:	0800c7cc 	.word	0x0800c7cc
 80094d8:	200001cc 	.word	0x200001cc
 80094dc:	0800c5f4 	.word	0x0800c5f4
 80094e0:	0800c7d8 	.word	0x0800c7d8
 80094e4:	200001a8 	.word	0x200001a8
 80094e8:	0800c5e8 	.word	0x0800c5e8
 80094ec:	200001f0 	.word	0x200001f0
 80094f0:	0800c600 	.word	0x0800c600
 80094f4:	20000214 	.word	0x20000214
 80094f8:	0800c60c 	.word	0x0800c60c

080094fc <DRV_sleep>:

static void DRV_sleep(void)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	af00      	add	r7, sp, #0
  if (g_DRV_isDriveOn == true)
 8009500:	4b0e      	ldr	r3, [pc, #56]	; (800953c <DRV_sleep+0x40>)
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d017      	beq.n	8009538 <DRV_sleep+0x3c>
  {
    LOG_debug("Drive going to sleep");
 8009508:	490d      	ldr	r1, [pc, #52]	; (8009540 <DRV_sleep+0x44>)
 800950a:	2000      	movs	r0, #0
 800950c:	f000 fc48 	bl	8009da0 <LOG_log>

    MTR_setSpeed(&g_DRV_motorFrontRight, 0);
 8009510:	2100      	movs	r1, #0
 8009512:	480c      	ldr	r0, [pc, #48]	; (8009544 <DRV_sleep+0x48>)
 8009514:	f000 fdfa 	bl	800a10c <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , 0);
 8009518:	2100      	movs	r1, #0
 800951a:	480b      	ldr	r0, [pc, #44]	; (8009548 <DRV_sleep+0x4c>)
 800951c:	f000 fdf6 	bl	800a10c <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , 0);
 8009520:	2100      	movs	r1, #0
 8009522:	480a      	ldr	r0, [pc, #40]	; (800954c <DRV_sleep+0x50>)
 8009524:	f000 fdf2 	bl	800a10c <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , 0);
 8009528:	2100      	movs	r1, #0
 800952a:	4809      	ldr	r0, [pc, #36]	; (8009550 <DRV_sleep+0x54>)
 800952c:	f000 fdee 	bl	800a10c <MTR_setSpeed>

    g_DRV_isDriveOn = false;
 8009530:	4b02      	ldr	r3, [pc, #8]	; (800953c <DRV_sleep+0x40>)
 8009532:	2200      	movs	r2, #0
 8009534:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 8009536:	bf00      	nop
 8009538:	bf00      	nop
}
 800953a:	bd80      	pop	{r7, pc}
 800953c:	200000e6 	.word	0x200000e6
 8009540:	0800c7f8 	.word	0x0800c7f8
 8009544:	200001a8 	.word	0x200001a8
 8009548:	200001cc 	.word	0x200001cc
 800954c:	20000214 	.word	0x20000214
 8009550:	200001f0 	.word	0x200001f0

08009554 <DRV_moveForward>:

static void DRV_moveForward(uint32_t p_speed)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward @%u", l_speed);
 8009560:	68fa      	ldr	r2, [r7, #12]
 8009562:	4919      	ldr	r1, [pc, #100]	; (80095c8 <DRV_moveForward+0x74>)
 8009564:	2000      	movs	r0, #0
 8009566:	f000 fc1b 	bl	8009da0 <LOG_log>

  g_DRV_isDriveOn = true;
 800956a:	4b18      	ldr	r3, [pc, #96]	; (80095cc <DRV_moveForward+0x78>)
 800956c:	2201      	movs	r2, #1
 800956e:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD);
 8009570:	2101      	movs	r1, #1
 8009572:	4817      	ldr	r0, [pc, #92]	; (80095d0 <DRV_moveForward+0x7c>)
 8009574:	f000 fd52 	bl	800a01c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD);
 8009578:	2101      	movs	r1, #1
 800957a:	4816      	ldr	r0, [pc, #88]	; (80095d4 <DRV_moveForward+0x80>)
 800957c:	f000 fd4e 	bl	800a01c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD);
 8009580:	2101      	movs	r1, #1
 8009582:	4815      	ldr	r0, [pc, #84]	; (80095d8 <DRV_moveForward+0x84>)
 8009584:	f000 fd4a 	bl	800a01c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD);
 8009588:	2101      	movs	r1, #1
 800958a:	4814      	ldr	r0, [pc, #80]	; (80095dc <DRV_moveForward+0x88>)
 800958c:	f000 fd46 	bl	800a01c <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009590:	4b13      	ldr	r3, [pc, #76]	; (80095e0 <DRV_moveForward+0x8c>)
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	f083 0301 	eor.w	r3, r3, #1
 8009598:	b2db      	uxtb	r3, r3
 800959a:	2b00      	cmp	r3, #0
 800959c:	d110      	bne.n	80095c0 <DRV_moveForward+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800959e:	68f9      	ldr	r1, [r7, #12]
 80095a0:	480b      	ldr	r0, [pc, #44]	; (80095d0 <DRV_moveForward+0x7c>)
 80095a2:	f000 fdb3 	bl	800a10c <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 80095a6:	68f9      	ldr	r1, [r7, #12]
 80095a8:	480a      	ldr	r0, [pc, #40]	; (80095d4 <DRV_moveForward+0x80>)
 80095aa:	f000 fdaf 	bl	800a10c <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 80095ae:	68f9      	ldr	r1, [r7, #12]
 80095b0:	4809      	ldr	r0, [pc, #36]	; (80095d8 <DRV_moveForward+0x84>)
 80095b2:	f000 fdab 	bl	800a10c <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 80095b6:	68f9      	ldr	r1, [r7, #12]
 80095b8:	4808      	ldr	r0, [pc, #32]	; (80095dc <DRV_moveForward+0x88>)
 80095ba:	f000 fda7 	bl	800a10c <MTR_setSpeed>
  }

  return;
 80095be:	bf00      	nop
 80095c0:	bf00      	nop
}
 80095c2:	3710      	adds	r7, #16
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	0800c810 	.word	0x0800c810
 80095cc:	200000e6 	.word	0x200000e6
 80095d0:	200001a8 	.word	0x200001a8
 80095d4:	200001cc 	.word	0x200001cc
 80095d8:	20000214 	.word	0x20000214
 80095dc:	200001f0 	.word	0x200001f0
 80095e0:	200000e5 	.word	0x200000e5

080095e4 <DRV_moveBackward>:

static void DRV_moveBackward(uint32_t p_speed)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward @%u", l_speed);
 80095f0:	68fa      	ldr	r2, [r7, #12]
 80095f2:	4919      	ldr	r1, [pc, #100]	; (8009658 <DRV_moveBackward+0x74>)
 80095f4:	2000      	movs	r0, #0
 80095f6:	f000 fbd3 	bl	8009da0 <LOG_log>

  g_DRV_isDriveOn = true;
 80095fa:	4b18      	ldr	r3, [pc, #96]	; (800965c <DRV_moveBackward+0x78>)
 80095fc:	2201      	movs	r2, #1
 80095fe:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 8009600:	2102      	movs	r1, #2
 8009602:	4817      	ldr	r0, [pc, #92]	; (8009660 <DRV_moveBackward+0x7c>)
 8009604:	f000 fd0a 	bl	800a01c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 8009608:	2102      	movs	r1, #2
 800960a:	4816      	ldr	r0, [pc, #88]	; (8009664 <DRV_moveBackward+0x80>)
 800960c:	f000 fd06 	bl	800a01c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 8009610:	2102      	movs	r1, #2
 8009612:	4815      	ldr	r0, [pc, #84]	; (8009668 <DRV_moveBackward+0x84>)
 8009614:	f000 fd02 	bl	800a01c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 8009618:	2102      	movs	r1, #2
 800961a:	4814      	ldr	r0, [pc, #80]	; (800966c <DRV_moveBackward+0x88>)
 800961c:	f000 fcfe 	bl	800a01c <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009620:	4b13      	ldr	r3, [pc, #76]	; (8009670 <DRV_moveBackward+0x8c>)
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	f083 0301 	eor.w	r3, r3, #1
 8009628:	b2db      	uxtb	r3, r3
 800962a:	2b00      	cmp	r3, #0
 800962c:	d110      	bne.n	8009650 <DRV_moveBackward+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800962e:	68f9      	ldr	r1, [r7, #12]
 8009630:	480b      	ldr	r0, [pc, #44]	; (8009660 <DRV_moveBackward+0x7c>)
 8009632:	f000 fd6b 	bl	800a10c <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 8009636:	68f9      	ldr	r1, [r7, #12]
 8009638:	480a      	ldr	r0, [pc, #40]	; (8009664 <DRV_moveBackward+0x80>)
 800963a:	f000 fd67 	bl	800a10c <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800963e:	68f9      	ldr	r1, [r7, #12]
 8009640:	4809      	ldr	r0, [pc, #36]	; (8009668 <DRV_moveBackward+0x84>)
 8009642:	f000 fd63 	bl	800a10c <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 8009646:	68f9      	ldr	r1, [r7, #12]
 8009648:	4808      	ldr	r0, [pc, #32]	; (800966c <DRV_moveBackward+0x88>)
 800964a:	f000 fd5f 	bl	800a10c <MTR_setSpeed>
  }

  return;
 800964e:	bf00      	nop
 8009650:	bf00      	nop
}
 8009652:	3710      	adds	r7, #16
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}
 8009658:	0800c824 	.word	0x0800c824
 800965c:	200000e6 	.word	0x200000e6
 8009660:	200001a8 	.word	0x200001a8
 8009664:	200001cc 	.word	0x200001cc
 8009668:	20000214 	.word	0x20000214
 800966c:	200001f0 	.word	0x200001f0
 8009670:	200000e5 	.word	0x200000e5

08009674 <DRV_moveForwardRight>:

static void DRV_moveForwardRight (uint32_t p_speed)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward-right @%u", l_speed);
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	4915      	ldr	r1, [pc, #84]	; (80096d8 <DRV_moveForwardRight+0x64>)
 8009684:	2000      	movs	r0, #0
 8009686:	f000 fb8b 	bl	8009da0 <LOG_log>

  g_DRV_isDriveOn = true;
 800968a:	4b14      	ldr	r3, [pc, #80]	; (80096dc <DRV_moveForwardRight+0x68>)
 800968c:	2201      	movs	r2, #1
 800968e:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontLeft, MTR_DIRECTION_FORWARD);
 8009690:	2101      	movs	r1, #1
 8009692:	4813      	ldr	r0, [pc, #76]	; (80096e0 <DRV_moveForwardRight+0x6c>)
 8009694:	f000 fcc2 	bl	800a01c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight, MTR_DIRECTION_FORWARD);
 8009698:	2101      	movs	r1, #1
 800969a:	4812      	ldr	r0, [pc, #72]	; (80096e4 <DRV_moveForwardRight+0x70>)
 800969c:	f000 fcbe 	bl	800a01c <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 80096a0:	4b11      	ldr	r3, [pc, #68]	; (80096e8 <DRV_moveForwardRight+0x74>)
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	f083 0301 	eor.w	r3, r3, #1
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d110      	bne.n	80096d0 <DRV_moveForwardRight+0x5c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight,       0);
 80096ae:	2100      	movs	r1, #0
 80096b0:	480e      	ldr	r0, [pc, #56]	; (80096ec <DRV_moveForwardRight+0x78>)
 80096b2:	f000 fd2b 	bl	800a10c <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 80096b6:	68f9      	ldr	r1, [r7, #12]
 80096b8:	4809      	ldr	r0, [pc, #36]	; (80096e0 <DRV_moveForwardRight+0x6c>)
 80096ba:	f000 fd27 	bl	800a10c <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 80096be:	68f9      	ldr	r1, [r7, #12]
 80096c0:	4808      	ldr	r0, [pc, #32]	; (80096e4 <DRV_moveForwardRight+0x70>)
 80096c2:	f000 fd23 	bl	800a10c <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  ,       0);
 80096c6:	2100      	movs	r1, #0
 80096c8:	4809      	ldr	r0, [pc, #36]	; (80096f0 <DRV_moveForwardRight+0x7c>)
 80096ca:	f000 fd1f 	bl	800a10c <MTR_setSpeed>
  }

  return;
 80096ce:	bf00      	nop
 80096d0:	bf00      	nop
}
 80096d2:	3710      	adds	r7, #16
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	0800c838 	.word	0x0800c838
 80096dc:	200000e6 	.word	0x200000e6
 80096e0:	200001cc 	.word	0x200001cc
 80096e4:	20000214 	.word	0x20000214
 80096e8:	200000e5 	.word	0x200000e5
 80096ec:	200001a8 	.word	0x200001a8
 80096f0:	200001f0 	.word	0x200001f0

080096f4 <DRV_moveForwardLeft>:

static void DRV_moveForwardLeft  (uint32_t p_speed)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward-left @%u", l_speed);
 8009700:	68fa      	ldr	r2, [r7, #12]
 8009702:	4915      	ldr	r1, [pc, #84]	; (8009758 <DRV_moveForwardLeft+0x64>)
 8009704:	2000      	movs	r0, #0
 8009706:	f000 fb4b 	bl	8009da0 <LOG_log>

  g_DRV_isDriveOn = true;
 800970a:	4b14      	ldr	r3, [pc, #80]	; (800975c <DRV_moveForwardLeft+0x68>)
 800970c:	2201      	movs	r2, #1
 800970e:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD);
 8009710:	2101      	movs	r1, #1
 8009712:	4813      	ldr	r0, [pc, #76]	; (8009760 <DRV_moveForwardLeft+0x6c>)
 8009714:	f000 fc82 	bl	800a01c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD);
 8009718:	2101      	movs	r1, #1
 800971a:	4812      	ldr	r0, [pc, #72]	; (8009764 <DRV_moveForwardLeft+0x70>)
 800971c:	f000 fc7e 	bl	800a01c <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009720:	4b11      	ldr	r3, [pc, #68]	; (8009768 <DRV_moveForwardLeft+0x74>)
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	f083 0301 	eor.w	r3, r3, #1
 8009728:	b2db      	uxtb	r3, r3
 800972a:	2b00      	cmp	r3, #0
 800972c:	d110      	bne.n	8009750 <DRV_moveForwardLeft+0x5c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800972e:	68f9      	ldr	r1, [r7, #12]
 8009730:	480b      	ldr	r0, [pc, #44]	; (8009760 <DRV_moveForwardLeft+0x6c>)
 8009732:	f000 fceb 	bl	800a10c <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft ,       0);
 8009736:	2100      	movs	r1, #0
 8009738:	480c      	ldr	r0, [pc, #48]	; (800976c <DRV_moveForwardLeft+0x78>)
 800973a:	f000 fce7 	bl	800a10c <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight ,       0);
 800973e:	2100      	movs	r1, #0
 8009740:	480b      	ldr	r0, [pc, #44]	; (8009770 <DRV_moveForwardLeft+0x7c>)
 8009742:	f000 fce3 	bl	800a10c <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 8009746:	68f9      	ldr	r1, [r7, #12]
 8009748:	4806      	ldr	r0, [pc, #24]	; (8009764 <DRV_moveForwardLeft+0x70>)
 800974a:	f000 fcdf 	bl	800a10c <MTR_setSpeed>
  }

  return;
 800974e:	bf00      	nop
 8009750:	bf00      	nop
}
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	0800c854 	.word	0x0800c854
 800975c:	200000e6 	.word	0x200000e6
 8009760:	200001a8 	.word	0x200001a8
 8009764:	200001f0 	.word	0x200001f0
 8009768:	200000e5 	.word	0x200000e5
 800976c:	200001cc 	.word	0x200001cc
 8009770:	20000214 	.word	0x20000214

08009774 <DRV_moveBackwardRight>:

static void DRV_moveBackwardRight(uint32_t p_speed)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward-right @%u", l_speed);
 8009780:	68fa      	ldr	r2, [r7, #12]
 8009782:	4915      	ldr	r1, [pc, #84]	; (80097d8 <DRV_moveBackwardRight+0x64>)
 8009784:	2000      	movs	r0, #0
 8009786:	f000 fb0b 	bl	8009da0 <LOG_log>

  g_DRV_isDriveOn = true;
 800978a:	4b14      	ldr	r3, [pc, #80]	; (80097dc <DRV_moveBackwardRight+0x68>)
 800978c:	2201      	movs	r2, #1
 800978e:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 8009790:	2102      	movs	r1, #2
 8009792:	4813      	ldr	r0, [pc, #76]	; (80097e0 <DRV_moveBackwardRight+0x6c>)
 8009794:	f000 fc42 	bl	800a01c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 8009798:	2102      	movs	r1, #2
 800979a:	4812      	ldr	r0, [pc, #72]	; (80097e4 <DRV_moveBackwardRight+0x70>)
 800979c:	f000 fc3e 	bl	800a01c <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 80097a0:	4b11      	ldr	r3, [pc, #68]	; (80097e8 <DRV_moveBackwardRight+0x74>)
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	f083 0301 	eor.w	r3, r3, #1
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d110      	bne.n	80097d0 <DRV_moveBackwardRight+0x5c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 80097ae:	68f9      	ldr	r1, [r7, #12]
 80097b0:	480b      	ldr	r0, [pc, #44]	; (80097e0 <DRV_moveBackwardRight+0x6c>)
 80097b2:	f000 fcab 	bl	800a10c <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft ,       0);
 80097b6:	2100      	movs	r1, #0
 80097b8:	480c      	ldr	r0, [pc, #48]	; (80097ec <DRV_moveBackwardRight+0x78>)
 80097ba:	f000 fca7 	bl	800a10c <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight ,       0);
 80097be:	2100      	movs	r1, #0
 80097c0:	480b      	ldr	r0, [pc, #44]	; (80097f0 <DRV_moveBackwardRight+0x7c>)
 80097c2:	f000 fca3 	bl	800a10c <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 80097c6:	68f9      	ldr	r1, [r7, #12]
 80097c8:	4806      	ldr	r0, [pc, #24]	; (80097e4 <DRV_moveBackwardRight+0x70>)
 80097ca:	f000 fc9f 	bl	800a10c <MTR_setSpeed>
  }

  return;
 80097ce:	bf00      	nop
 80097d0:	bf00      	nop
}
 80097d2:	3710      	adds	r7, #16
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	0800c86c 	.word	0x0800c86c
 80097dc:	200000e6 	.word	0x200000e6
 80097e0:	200001a8 	.word	0x200001a8
 80097e4:	200001f0 	.word	0x200001f0
 80097e8:	200000e5 	.word	0x200000e5
 80097ec:	200001cc 	.word	0x200001cc
 80097f0:	20000214 	.word	0x20000214

080097f4 <DRV_moveBackwardLeft>:

static void DRV_moveBackwardLeft (uint32_t p_speed)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b084      	sub	sp, #16
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward-left @%u", l_speed);
 8009800:	68fa      	ldr	r2, [r7, #12]
 8009802:	4915      	ldr	r1, [pc, #84]	; (8009858 <DRV_moveBackwardLeft+0x64>)
 8009804:	2000      	movs	r0, #0
 8009806:	f000 facb 	bl	8009da0 <LOG_log>

  g_DRV_isDriveOn = true;
 800980a:	4b14      	ldr	r3, [pc, #80]	; (800985c <DRV_moveBackwardLeft+0x68>)
 800980c:	2201      	movs	r2, #1
 800980e:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontLeft, MTR_DIRECTION_BACKWARD);
 8009810:	2102      	movs	r1, #2
 8009812:	4813      	ldr	r0, [pc, #76]	; (8009860 <DRV_moveBackwardLeft+0x6c>)
 8009814:	f000 fc02 	bl	800a01c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight, MTR_DIRECTION_BACKWARD);
 8009818:	2102      	movs	r1, #2
 800981a:	4812      	ldr	r0, [pc, #72]	; (8009864 <DRV_moveBackwardLeft+0x70>)
 800981c:	f000 fbfe 	bl	800a01c <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009820:	4b11      	ldr	r3, [pc, #68]	; (8009868 <DRV_moveBackwardLeft+0x74>)
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	f083 0301 	eor.w	r3, r3, #1
 8009828:	b2db      	uxtb	r3, r3
 800982a:	2b00      	cmp	r3, #0
 800982c:	d110      	bne.n	8009850 <DRV_moveBackwardLeft+0x5c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight,       0);
 800982e:	2100      	movs	r1, #0
 8009830:	480e      	ldr	r0, [pc, #56]	; (800986c <DRV_moveBackwardLeft+0x78>)
 8009832:	f000 fc6b 	bl	800a10c <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 8009836:	68f9      	ldr	r1, [r7, #12]
 8009838:	4809      	ldr	r0, [pc, #36]	; (8009860 <DRV_moveBackwardLeft+0x6c>)
 800983a:	f000 fc67 	bl	800a10c <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800983e:	68f9      	ldr	r1, [r7, #12]
 8009840:	4808      	ldr	r0, [pc, #32]	; (8009864 <DRV_moveBackwardLeft+0x70>)
 8009842:	f000 fc63 	bl	800a10c <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  ,       0);
 8009846:	2100      	movs	r1, #0
 8009848:	4809      	ldr	r0, [pc, #36]	; (8009870 <DRV_moveBackwardLeft+0x7c>)
 800984a:	f000 fc5f 	bl	800a10c <MTR_setSpeed>
  }

  return;
 800984e:	bf00      	nop
 8009850:	bf00      	nop
}
 8009852:	3710      	adds	r7, #16
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}
 8009858:	0800c888 	.word	0x0800c888
 800985c:	200000e6 	.word	0x200000e6
 8009860:	200001cc 	.word	0x200001cc
 8009864:	20000214 	.word	0x20000214
 8009868:	200000e5 	.word	0x200000e5
 800986c:	200001a8 	.word	0x200001a8
 8009870:	200001f0 	.word	0x200001f0

08009874 <DRV_turnLeft>:

static void DRV_turnLeft(uint32_t p_speed)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	60fb      	str	r3, [r7, #12]

  LOG_debug("Turning left @%u", l_speed);
 8009880:	68fa      	ldr	r2, [r7, #12]
 8009882:	4919      	ldr	r1, [pc, #100]	; (80098e8 <DRV_turnLeft+0x74>)
 8009884:	2000      	movs	r0, #0
 8009886:	f000 fa8b 	bl	8009da0 <LOG_log>

  g_DRV_isDriveOn = true;
 800988a:	4b18      	ldr	r3, [pc, #96]	; (80098ec <DRV_turnLeft+0x78>)
 800988c:	2201      	movs	r2, #1
 800988e:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD );
 8009890:	2101      	movs	r1, #1
 8009892:	4817      	ldr	r0, [pc, #92]	; (80098f0 <DRV_turnLeft+0x7c>)
 8009894:	f000 fbc2 	bl	800a01c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 8009898:	2102      	movs	r1, #2
 800989a:	4816      	ldr	r0, [pc, #88]	; (80098f4 <DRV_turnLeft+0x80>)
 800989c:	f000 fbbe 	bl	800a01c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD );
 80098a0:	2101      	movs	r1, #1
 80098a2:	4815      	ldr	r0, [pc, #84]	; (80098f8 <DRV_turnLeft+0x84>)
 80098a4:	f000 fbba 	bl	800a01c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 80098a8:	2102      	movs	r1, #2
 80098aa:	4814      	ldr	r0, [pc, #80]	; (80098fc <DRV_turnLeft+0x88>)
 80098ac:	f000 fbb6 	bl	800a01c <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 80098b0:	4b13      	ldr	r3, [pc, #76]	; (8009900 <DRV_turnLeft+0x8c>)
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	f083 0301 	eor.w	r3, r3, #1
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d110      	bne.n	80098e0 <DRV_turnLeft+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 80098be:	68f9      	ldr	r1, [r7, #12]
 80098c0:	480b      	ldr	r0, [pc, #44]	; (80098f0 <DRV_turnLeft+0x7c>)
 80098c2:	f000 fc23 	bl	800a10c <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 80098c6:	68f9      	ldr	r1, [r7, #12]
 80098c8:	480a      	ldr	r0, [pc, #40]	; (80098f4 <DRV_turnLeft+0x80>)
 80098ca:	f000 fc1f 	bl	800a10c <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 80098ce:	68f9      	ldr	r1, [r7, #12]
 80098d0:	4809      	ldr	r0, [pc, #36]	; (80098f8 <DRV_turnLeft+0x84>)
 80098d2:	f000 fc1b 	bl	800a10c <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 80098d6:	68f9      	ldr	r1, [r7, #12]
 80098d8:	4808      	ldr	r0, [pc, #32]	; (80098fc <DRV_turnLeft+0x88>)
 80098da:	f000 fc17 	bl	800a10c <MTR_setSpeed>
  }

  return;
 80098de:	bf00      	nop
 80098e0:	bf00      	nop
}
 80098e2:	3710      	adds	r7, #16
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	0800c8a4 	.word	0x0800c8a4
 80098ec:	200000e6 	.word	0x200000e6
 80098f0:	200001a8 	.word	0x200001a8
 80098f4:	200001cc 	.word	0x200001cc
 80098f8:	20000214 	.word	0x20000214
 80098fc:	200001f0 	.word	0x200001f0
 8009900:	200000e5 	.word	0x200000e5

08009904 <DRV_turnRight>:

static void DRV_turnRight(uint32_t p_speed)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	60fb      	str	r3, [r7, #12]

  LOG_debug("Turning right @%u", l_speed);
 8009910:	68fa      	ldr	r2, [r7, #12]
 8009912:	4919      	ldr	r1, [pc, #100]	; (8009978 <DRV_turnRight+0x74>)
 8009914:	2000      	movs	r0, #0
 8009916:	f000 fa43 	bl	8009da0 <LOG_log>

  g_DRV_isDriveOn = true;
 800991a:	4b18      	ldr	r3, [pc, #96]	; (800997c <DRV_turnRight+0x78>)
 800991c:	2201      	movs	r2, #1
 800991e:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 8009920:	2102      	movs	r1, #2
 8009922:	4817      	ldr	r0, [pc, #92]	; (8009980 <DRV_turnRight+0x7c>)
 8009924:	f000 fb7a 	bl	800a01c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD );
 8009928:	2101      	movs	r1, #1
 800992a:	4816      	ldr	r0, [pc, #88]	; (8009984 <DRV_turnRight+0x80>)
 800992c:	f000 fb76 	bl	800a01c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 8009930:	2102      	movs	r1, #2
 8009932:	4815      	ldr	r0, [pc, #84]	; (8009988 <DRV_turnRight+0x84>)
 8009934:	f000 fb72 	bl	800a01c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD );
 8009938:	2101      	movs	r1, #1
 800993a:	4814      	ldr	r0, [pc, #80]	; (800998c <DRV_turnRight+0x88>)
 800993c:	f000 fb6e 	bl	800a01c <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009940:	4b13      	ldr	r3, [pc, #76]	; (8009990 <DRV_turnRight+0x8c>)
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	f083 0301 	eor.w	r3, r3, #1
 8009948:	b2db      	uxtb	r3, r3
 800994a:	2b00      	cmp	r3, #0
 800994c:	d110      	bne.n	8009970 <DRV_turnRight+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800994e:	68f9      	ldr	r1, [r7, #12]
 8009950:	480b      	ldr	r0, [pc, #44]	; (8009980 <DRV_turnRight+0x7c>)
 8009952:	f000 fbdb 	bl	800a10c <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 8009956:	68f9      	ldr	r1, [r7, #12]
 8009958:	480a      	ldr	r0, [pc, #40]	; (8009984 <DRV_turnRight+0x80>)
 800995a:	f000 fbd7 	bl	800a10c <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800995e:	68f9      	ldr	r1, [r7, #12]
 8009960:	4809      	ldr	r0, [pc, #36]	; (8009988 <DRV_turnRight+0x84>)
 8009962:	f000 fbd3 	bl	800a10c <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 8009966:	68f9      	ldr	r1, [r7, #12]
 8009968:	4808      	ldr	r0, [pc, #32]	; (800998c <DRV_turnRight+0x88>)
 800996a:	f000 fbcf 	bl	800a10c <MTR_setSpeed>
  }

  return;
 800996e:	bf00      	nop
 8009970:	bf00      	nop
}
 8009972:	3710      	adds	r7, #16
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}
 8009978:	0800c8b8 	.word	0x0800c8b8
 800997c:	200000e6 	.word	0x200000e6
 8009980:	200001a8 	.word	0x200001a8
 8009984:	200001cc 	.word	0x200001cc
 8009988:	20000214 	.word	0x20000214
 800998c:	200001f0 	.word	0x200001f0
 8009990:	200000e5 	.word	0x200000e5

08009994 <DRV_translateLeft>:

static void DRV_translateLeft(uint32_t p_speed)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	60fb      	str	r3, [r7, #12]

  LOG_debug("Translating left @%u", l_speed);
 80099a0:	68fa      	ldr	r2, [r7, #12]
 80099a2:	4919      	ldr	r1, [pc, #100]	; (8009a08 <DRV_translateLeft+0x74>)
 80099a4:	2000      	movs	r0, #0
 80099a6:	f000 f9fb 	bl	8009da0 <LOG_log>

  g_DRV_isDriveOn = true;
 80099aa:	4b18      	ldr	r3, [pc, #96]	; (8009a0c <DRV_translateLeft+0x78>)
 80099ac:	2201      	movs	r2, #1
 80099ae:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD );
 80099b0:	2101      	movs	r1, #1
 80099b2:	4817      	ldr	r0, [pc, #92]	; (8009a10 <DRV_translateLeft+0x7c>)
 80099b4:	f000 fb32 	bl	800a01c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 80099b8:	2102      	movs	r1, #2
 80099ba:	4816      	ldr	r0, [pc, #88]	; (8009a14 <DRV_translateLeft+0x80>)
 80099bc:	f000 fb2e 	bl	800a01c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 80099c0:	2102      	movs	r1, #2
 80099c2:	4815      	ldr	r0, [pc, #84]	; (8009a18 <DRV_translateLeft+0x84>)
 80099c4:	f000 fb2a 	bl	800a01c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD );
 80099c8:	2101      	movs	r1, #1
 80099ca:	4814      	ldr	r0, [pc, #80]	; (8009a1c <DRV_translateLeft+0x88>)
 80099cc:	f000 fb26 	bl	800a01c <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 80099d0:	4b13      	ldr	r3, [pc, #76]	; (8009a20 <DRV_translateLeft+0x8c>)
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	f083 0301 	eor.w	r3, r3, #1
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d110      	bne.n	8009a00 <DRV_translateLeft+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 80099de:	68f9      	ldr	r1, [r7, #12]
 80099e0:	480b      	ldr	r0, [pc, #44]	; (8009a10 <DRV_translateLeft+0x7c>)
 80099e2:	f000 fb93 	bl	800a10c <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 80099e6:	68f9      	ldr	r1, [r7, #12]
 80099e8:	480a      	ldr	r0, [pc, #40]	; (8009a14 <DRV_translateLeft+0x80>)
 80099ea:	f000 fb8f 	bl	800a10c <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 80099ee:	68f9      	ldr	r1, [r7, #12]
 80099f0:	4809      	ldr	r0, [pc, #36]	; (8009a18 <DRV_translateLeft+0x84>)
 80099f2:	f000 fb8b 	bl	800a10c <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 80099f6:	68f9      	ldr	r1, [r7, #12]
 80099f8:	4808      	ldr	r0, [pc, #32]	; (8009a1c <DRV_translateLeft+0x88>)
 80099fa:	f000 fb87 	bl	800a10c <MTR_setSpeed>
  }

  return;
 80099fe:	bf00      	nop
 8009a00:	bf00      	nop
}
 8009a02:	3710      	adds	r7, #16
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	0800c8cc 	.word	0x0800c8cc
 8009a0c:	200000e6 	.word	0x200000e6
 8009a10:	200001a8 	.word	0x200001a8
 8009a14:	200001cc 	.word	0x200001cc
 8009a18:	20000214 	.word	0x20000214
 8009a1c:	200001f0 	.word	0x200001f0
 8009a20:	200000e5 	.word	0x200000e5

08009a24 <DRV_translateRight>:

static void DRV_translateRight(uint32_t p_speed)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	60fb      	str	r3, [r7, #12]

  LOG_debug("Translating right @%u", l_speed);
 8009a30:	68fa      	ldr	r2, [r7, #12]
 8009a32:	4919      	ldr	r1, [pc, #100]	; (8009a98 <DRV_translateRight+0x74>)
 8009a34:	2000      	movs	r0, #0
 8009a36:	f000 f9b3 	bl	8009da0 <LOG_log>

  g_DRV_isDriveOn = true;
 8009a3a:	4b18      	ldr	r3, [pc, #96]	; (8009a9c <DRV_translateRight+0x78>)
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 8009a40:	2102      	movs	r1, #2
 8009a42:	4817      	ldr	r0, [pc, #92]	; (8009aa0 <DRV_translateRight+0x7c>)
 8009a44:	f000 faea 	bl	800a01c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD );
 8009a48:	2101      	movs	r1, #1
 8009a4a:	4816      	ldr	r0, [pc, #88]	; (8009aa4 <DRV_translateRight+0x80>)
 8009a4c:	f000 fae6 	bl	800a01c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD );
 8009a50:	2101      	movs	r1, #1
 8009a52:	4815      	ldr	r0, [pc, #84]	; (8009aa8 <DRV_translateRight+0x84>)
 8009a54:	f000 fae2 	bl	800a01c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 8009a58:	2102      	movs	r1, #2
 8009a5a:	4814      	ldr	r0, [pc, #80]	; (8009aac <DRV_translateRight+0x88>)
 8009a5c:	f000 fade 	bl	800a01c <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009a60:	4b13      	ldr	r3, [pc, #76]	; (8009ab0 <DRV_translateRight+0x8c>)
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	f083 0301 	eor.w	r3, r3, #1
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d110      	bne.n	8009a90 <DRV_translateRight+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 8009a6e:	68f9      	ldr	r1, [r7, #12]
 8009a70:	480b      	ldr	r0, [pc, #44]	; (8009aa0 <DRV_translateRight+0x7c>)
 8009a72:	f000 fb4b 	bl	800a10c <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 8009a76:	68f9      	ldr	r1, [r7, #12]
 8009a78:	480a      	ldr	r0, [pc, #40]	; (8009aa4 <DRV_translateRight+0x80>)
 8009a7a:	f000 fb47 	bl	800a10c <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 8009a7e:	68f9      	ldr	r1, [r7, #12]
 8009a80:	4809      	ldr	r0, [pc, #36]	; (8009aa8 <DRV_translateRight+0x84>)
 8009a82:	f000 fb43 	bl	800a10c <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 8009a86:	68f9      	ldr	r1, [r7, #12]
 8009a88:	4808      	ldr	r0, [pc, #32]	; (8009aac <DRV_translateRight+0x88>)
 8009a8a:	f000 fb3f 	bl	800a10c <MTR_setSpeed>
  }

  return;
 8009a8e:	bf00      	nop
 8009a90:	bf00      	nop
}
 8009a92:	3710      	adds	r7, #16
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	0800c8e4 	.word	0x0800c8e4
 8009a9c:	200000e6 	.word	0x200000e6
 8009aa0:	200001a8 	.word	0x200001a8
 8009aa4:	200001cc 	.word	0x200001cc
 8009aa8:	20000214 	.word	0x20000214
 8009aac:	200001f0 	.word	0x200001f0
 8009ab0:	200000e5 	.word	0x200000e5

08009ab4 <ENC_init>:
#include "encoder.h"

#include "log.h"

void ENC_init(T_ENC_Handle *p_handle, char *p_name, bool p_invertOnUpdate, TIM_HandleTypeDef *p_encoderTimerHandle)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	60f8      	str	r0, [r7, #12]
 8009abc:	60b9      	str	r1, [r7, #8]
 8009abe:	603b      	str	r3, [r7, #0]
 8009ac0:	4613      	mov	r3, r2
 8009ac2:	71fb      	strb	r3, [r7, #7]
  LOG_info("Initializing Encoder module for %s", p_name);
 8009ac4:	68ba      	ldr	r2, [r7, #8]
 8009ac6:	490a      	ldr	r1, [pc, #40]	; (8009af0 <ENC_init+0x3c>)
 8009ac8:	2001      	movs	r0, #1
 8009aca:	f000 f969 	bl	8009da0 <LOG_log>

  p_handle->name           = p_name;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	68ba      	ldr	r2, [r7, #8]
 8009ad2:	601a      	str	r2, [r3, #0]
  p_handle->invertOnUpdate = p_invertOnUpdate;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	79fa      	ldrb	r2, [r7, #7]
 8009ad8:	719a      	strb	r2, [r3, #6]
  p_handle->timerHandle    = p_encoderTimerHandle;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	683a      	ldr	r2, [r7, #0]
 8009ade:	609a      	str	r2, [r3, #8]

  ENC_reset(p_handle);
 8009ae0:	68f8      	ldr	r0, [r7, #12]
 8009ae2:	f000 f807 	bl	8009af4 <ENC_reset>

  return;
 8009ae6:	bf00      	nop
}
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	0800c8fc 	.word	0x0800c8fc

08009af4 <ENC_reset>:

void ENC_reset(T_ENC_Handle *p_handle)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  p_handle->value = 0;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	809a      	strh	r2, [r3, #4]

  return;
 8009b02:	bf00      	nop
}
 8009b04:	370c      	adds	r7, #12
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bc80      	pop	{r7}
 8009b0a:	4770      	bx	lr

08009b0c <ENC_update>:

void ENC_update(T_ENC_Handle *p_handle, int16_t p_value)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	460b      	mov	r3, r1
 8009b16:	807b      	strh	r3, [r7, #2]
  if (p_handle->invertOnUpdate == false)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	799b      	ldrb	r3, [r3, #6]
 8009b1c:	f083 0301 	eor.w	r3, r3, #1
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d003      	beq.n	8009b2e <ENC_update+0x22>
  {
    p_handle->value = p_value;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	887a      	ldrh	r2, [r7, #2]
 8009b2a:	809a      	strh	r2, [r3, #4]
  else
  {
    p_handle->value = -p_value;
  }

  return;
 8009b2c:	e006      	b.n	8009b3c <ENC_update+0x30>
    p_handle->value = -p_value;
 8009b2e:	887b      	ldrh	r3, [r7, #2]
 8009b30:	425b      	negs	r3, r3
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	b21a      	sxth	r2, r3
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	809a      	strh	r2, [r3, #4]
  return;
 8009b3a:	bf00      	nop
}
 8009b3c:	370c      	adds	r7, #12
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bc80      	pop	{r7}
 8009b42:	4770      	bx	lr

08009b44 <ENC_getCount>:

int16_t ENC_getCount(T_ENC_Handle *p_handle)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  return p_handle->value;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	370c      	adds	r7, #12
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bc80      	pop	{r7}
 8009b5a:	4770      	bx	lr

08009b5c <LED_setMode>:
#include "log.h"

static T_LED_MODE g_LED_mode = LED_MODE_BLINK_SLOW;

void LED_setMode(T_LED_MODE p_mode)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	4603      	mov	r3, r0
 8009b64:	71fb      	strb	r3, [r7, #7]
  if (p_mode != g_LED_mode)
 8009b66:	4b1b      	ldr	r3, [pc, #108]	; (8009bd4 <LED_setMode+0x78>)
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	79fa      	ldrb	r2, [r7, #7]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d02d      	beq.n	8009bcc <LED_setMode+0x70>
  {
    switch (p_mode)
 8009b70:	79fb      	ldrb	r3, [r7, #7]
 8009b72:	2b04      	cmp	r3, #4
 8009b74:	d825      	bhi.n	8009bc2 <LED_setMode+0x66>
 8009b76:	a201      	add	r2, pc, #4	; (adr r2, 8009b7c <LED_setMode+0x20>)
 8009b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b7c:	08009b91 	.word	0x08009b91
 8009b80:	08009b9b 	.word	0x08009b9b
 8009b84:	08009ba5 	.word	0x08009ba5
 8009b88:	08009baf 	.word	0x08009baf
 8009b8c:	08009bb9 	.word	0x08009bb9
    {
      case LED_MODE_FORCED_OFF:
        LOG_info("Turning LED OFF");
 8009b90:	4911      	ldr	r1, [pc, #68]	; (8009bd8 <LED_setMode+0x7c>)
 8009b92:	2001      	movs	r0, #1
 8009b94:	f000 f904 	bl	8009da0 <LOG_log>
        break;
 8009b98:	e014      	b.n	8009bc4 <LED_setMode+0x68>

      case LED_MODE_FORCED_ON:
        LOG_info("Turning LED ON");
 8009b9a:	4910      	ldr	r1, [pc, #64]	; (8009bdc <LED_setMode+0x80>)
 8009b9c:	2001      	movs	r0, #1
 8009b9e:	f000 f8ff 	bl	8009da0 <LOG_log>
        break;
 8009ba2:	e00f      	b.n	8009bc4 <LED_setMode+0x68>

      case LED_MODE_BLINK_SLOW:
        LOG_info("Setting LED to blink slow");
 8009ba4:	490e      	ldr	r1, [pc, #56]	; (8009be0 <LED_setMode+0x84>)
 8009ba6:	2001      	movs	r0, #1
 8009ba8:	f000 f8fa 	bl	8009da0 <LOG_log>
        break;
 8009bac:	e00a      	b.n	8009bc4 <LED_setMode+0x68>

      case LED_MODE_BLINK_MEDIUM:
        LOG_info("Setting LED to blink medium");
 8009bae:	490d      	ldr	r1, [pc, #52]	; (8009be4 <LED_setMode+0x88>)
 8009bb0:	2001      	movs	r0, #1
 8009bb2:	f000 f8f5 	bl	8009da0 <LOG_log>
        break;
 8009bb6:	e005      	b.n	8009bc4 <LED_setMode+0x68>

      case LED_MODE_BLINK_FAST:
        LOG_info("Setting LED to blink fast");
 8009bb8:	490b      	ldr	r1, [pc, #44]	; (8009be8 <LED_setMode+0x8c>)
 8009bba:	2001      	movs	r0, #1
 8009bbc:	f000 f8f0 	bl	8009da0 <LOG_log>
        break;
 8009bc0:	e000      	b.n	8009bc4 <LED_setMode+0x68>

      default:
        ; /* Nothing to do */
        break;
 8009bc2:	bf00      	nop
    }

    g_LED_mode = p_mode;
 8009bc4:	4a03      	ldr	r2, [pc, #12]	; (8009bd4 <LED_setMode+0x78>)
 8009bc6:	79fb      	ldrb	r3, [r7, #7]
 8009bc8:	7013      	strb	r3, [r2, #0]
  else
  {
    ; /* Nothong to do */
  }

  return;
 8009bca:	bf00      	nop
 8009bcc:	bf00      	nop
}
 8009bce:	3708      	adds	r7, #8
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	20000009 	.word	0x20000009
 8009bd8:	0800c920 	.word	0x0800c920
 8009bdc:	0800c930 	.word	0x0800c930
 8009be0:	0800c940 	.word	0x0800c940
 8009be4:	0800c95c 	.word	0x0800c95c
 8009be8:	0800c978 	.word	0x0800c978

08009bec <LED_update>:
{
  return g_LED_mode;
}

void LED_update(void)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	af00      	add	r7, sp, #0
  static uint32_t l_blinkCounter = 0;

  switch (g_LED_mode)
 8009bf0:	4b2a      	ldr	r3, [pc, #168]	; (8009c9c <LED_update+0xb0>)
 8009bf2:	781b      	ldrb	r3, [r3, #0]
 8009bf4:	2b04      	cmp	r3, #4
 8009bf6:	d849      	bhi.n	8009c8c <LED_update+0xa0>
 8009bf8:	a201      	add	r2, pc, #4	; (adr r2, 8009c00 <LED_update+0x14>)
 8009bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bfe:	bf00      	nop
 8009c00:	08009c15 	.word	0x08009c15
 8009c04:	08009c23 	.word	0x08009c23
 8009c08:	08009c31 	.word	0x08009c31
 8009c0c:	08009c5f 	.word	0x08009c5f
 8009c10:	08009c81 	.word	0x08009c81
  {
    case LED_MODE_FORCED_OFF:
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 8009c14:	2201      	movs	r2, #1
 8009c16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009c1a:	4821      	ldr	r0, [pc, #132]	; (8009ca0 <LED_update+0xb4>)
 8009c1c:	f7f9 fd72 	bl	8003704 <HAL_GPIO_WritePin>
      break;
 8009c20:	e039      	b.n	8009c96 <LED_update+0xaa>

    case LED_MODE_FORCED_ON:
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8009c22:	2200      	movs	r2, #0
 8009c24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009c28:	481d      	ldr	r0, [pc, #116]	; (8009ca0 <LED_update+0xb4>)
 8009c2a:	f7f9 fd6b 	bl	8003704 <HAL_GPIO_WritePin>
      break;
 8009c2e:	e032      	b.n	8009c96 <LED_update+0xaa>

    case LED_MODE_BLINK_SLOW:
      l_blinkCounter++;
 8009c30:	4b1c      	ldr	r3, [pc, #112]	; (8009ca4 <LED_update+0xb8>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	3301      	adds	r3, #1
 8009c36:	4a1b      	ldr	r2, [pc, #108]	; (8009ca4 <LED_update+0xb8>)
 8009c38:	6013      	str	r3, [r2, #0]
      if (l_blinkCounter % 5 == 0)
 8009c3a:	4b1a      	ldr	r3, [pc, #104]	; (8009ca4 <LED_update+0xb8>)
 8009c3c:	6819      	ldr	r1, [r3, #0]
 8009c3e:	4b1a      	ldr	r3, [pc, #104]	; (8009ca8 <LED_update+0xbc>)
 8009c40:	fba3 2301 	umull	r2, r3, r3, r1
 8009c44:	089a      	lsrs	r2, r3, #2
 8009c46:	4613      	mov	r3, r2
 8009c48:	009b      	lsls	r3, r3, #2
 8009c4a:	4413      	add	r3, r2
 8009c4c:	1aca      	subs	r2, r1, r3
 8009c4e:	2a00      	cmp	r2, #0
 8009c50:	d11e      	bne.n	8009c90 <LED_update+0xa4>
      {
        HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8009c52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009c56:	4812      	ldr	r0, [pc, #72]	; (8009ca0 <LED_update+0xb4>)
 8009c58:	f7f9 fd86 	bl	8003768 <HAL_GPIO_TogglePin>
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8009c5c:	e018      	b.n	8009c90 <LED_update+0xa4>

    case LED_MODE_BLINK_MEDIUM:
      l_blinkCounter++;
 8009c5e:	4b11      	ldr	r3, [pc, #68]	; (8009ca4 <LED_update+0xb8>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	3301      	adds	r3, #1
 8009c64:	4a0f      	ldr	r2, [pc, #60]	; (8009ca4 <LED_update+0xb8>)
 8009c66:	6013      	str	r3, [r2, #0]
      if (l_blinkCounter % 2 == 0)
 8009c68:	4b0e      	ldr	r3, [pc, #56]	; (8009ca4 <LED_update+0xb8>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f003 0301 	and.w	r3, r3, #1
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d10f      	bne.n	8009c94 <LED_update+0xa8>
      {
        HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8009c74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009c78:	4809      	ldr	r0, [pc, #36]	; (8009ca0 <LED_update+0xb4>)
 8009c7a:	f7f9 fd75 	bl	8003768 <HAL_GPIO_TogglePin>
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8009c7e:	e009      	b.n	8009c94 <LED_update+0xa8>

    case LED_MODE_BLINK_FAST:
      HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8009c80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009c84:	4806      	ldr	r0, [pc, #24]	; (8009ca0 <LED_update+0xb4>)
 8009c86:	f7f9 fd6f 	bl	8003768 <HAL_GPIO_TogglePin>
      break;
 8009c8a:	e004      	b.n	8009c96 <LED_update+0xaa>

    default:
      ; /* Nothing to do */
      break;
 8009c8c:	bf00      	nop
 8009c8e:	e002      	b.n	8009c96 <LED_update+0xaa>
      break;
 8009c90:	bf00      	nop
 8009c92:	e000      	b.n	8009c96 <LED_update+0xaa>
      break;
 8009c94:	bf00      	nop
  }

  return;
 8009c96:	bf00      	nop
}
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	20000009 	.word	0x20000009
 8009ca0:	40011000 	.word	0x40011000
 8009ca4:	20000268 	.word	0x20000268
 8009ca8:	cccccccd 	.word	0xcccccccd

08009cac <LOG_init>:
{
  "DEBUG", "INFO", "WARNING", "ERROR"
};

void LOG_init(RTC_HandleTypeDef *p_rctHandle)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b083      	sub	sp, #12
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  g_LOG_rtcHandle = p_rctHandle;
 8009cb4:	4a03      	ldr	r2, [pc, #12]	; (8009cc4 <LOG_init+0x18>)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6013      	str	r3, [r2, #0]

  return;
 8009cba:	bf00      	nop
}
 8009cbc:	370c      	adds	r7, #12
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bc80      	pop	{r7}
 8009cc2:	4770      	bx	lr
 8009cc4:	20000270 	.word	0x20000270

08009cc8 <LOG_turnOn>:

void LOG_turnOn(void)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	af00      	add	r7, sp, #0
  if (g_LOG_isOn == false)
 8009ccc:	4b08      	ldr	r3, [pc, #32]	; (8009cf0 <LOG_turnOn+0x28>)
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	f083 0301 	eor.w	r3, r3, #1
 8009cd4:	b2db      	uxtb	r3, r3
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d007      	beq.n	8009cea <LOG_turnOn+0x22>
  {
    g_LOG_isOn = true;
 8009cda:	4b05      	ldr	r3, [pc, #20]	; (8009cf0 <LOG_turnOn+0x28>)
 8009cdc:	2201      	movs	r2, #1
 8009cde:	701a      	strb	r2, [r3, #0]

    LOG_info("Turning LOG ON");
 8009ce0:	4904      	ldr	r1, [pc, #16]	; (8009cf4 <LOG_turnOn+0x2c>)
 8009ce2:	2001      	movs	r0, #1
 8009ce4:	f000 f85c 	bl	8009da0 <LOG_log>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8009ce8:	bf00      	nop
 8009cea:	bf00      	nop
}
 8009cec:	bd80      	pop	{r7, pc}
 8009cee:	bf00      	nop
 8009cf0:	2000026c 	.word	0x2000026c
 8009cf4:	0800c9b4 	.word	0x0800c9b4

08009cf8 <LOG_turnOff>:

void LOG_turnOff(void)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	af00      	add	r7, sp, #0
  if (g_LOG_isOn == true)
 8009cfc:	4b06      	ldr	r3, [pc, #24]	; (8009d18 <LOG_turnOff+0x20>)
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d007      	beq.n	8009d14 <LOG_turnOff+0x1c>
  {
    LOG_info("Turning LOG OFF");
 8009d04:	4905      	ldr	r1, [pc, #20]	; (8009d1c <LOG_turnOff+0x24>)
 8009d06:	2001      	movs	r0, #1
 8009d08:	f000 f84a 	bl	8009da0 <LOG_log>

    g_LOG_isOn = false;
 8009d0c:	4b02      	ldr	r3, [pc, #8]	; (8009d18 <LOG_turnOff+0x20>)
 8009d0e:	2200      	movs	r2, #0
 8009d10:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 8009d12:	bf00      	nop
 8009d14:	bf00      	nop
}
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	2000026c 	.word	0x2000026c
 8009d1c:	0800c9c4 	.word	0x0800c9c4

08009d20 <LOG_setLevel>:

void LOG_setLevel(T_LOG_LEVEL p_level)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	4603      	mov	r3, r0
 8009d28:	71fb      	strb	r3, [r7, #7]
  g_LOG_level = p_level;
 8009d2a:	4a04      	ldr	r2, [pc, #16]	; (8009d3c <LOG_setLevel+0x1c>)
 8009d2c:	79fb      	ldrb	r3, [r7, #7]
 8009d2e:	7013      	strb	r3, [r2, #0]

  return;
 8009d30:	bf00      	nop
}
 8009d32:	370c      	adds	r7, #12
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bc80      	pop	{r7}
 8009d38:	4770      	bx	lr
 8009d3a:	bf00      	nop
 8009d3c:	2000026d 	.word	0x2000026d

08009d40 <LOG_increaseLevel>:

void LOG_increaseLevel(void)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	af00      	add	r7, sp, #0
  /* Display more detailed logs */
  if (g_LOG_level > LOG_LEVEL_DEBUG)
 8009d44:	4b08      	ldr	r3, [pc, #32]	; (8009d68 <LOG_increaseLevel+0x28>)
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d00a      	beq.n	8009d62 <LOG_increaseLevel+0x22>
  {
    LOG_info("Increasing LOG level");
 8009d4c:	4907      	ldr	r1, [pc, #28]	; (8009d6c <LOG_increaseLevel+0x2c>)
 8009d4e:	2001      	movs	r0, #1
 8009d50:	f000 f826 	bl	8009da0 <LOG_log>

    g_LOG_level--;
 8009d54:	4b04      	ldr	r3, [pc, #16]	; (8009d68 <LOG_increaseLevel+0x28>)
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	3b01      	subs	r3, #1
 8009d5a:	b2da      	uxtb	r2, r3
 8009d5c:	4b02      	ldr	r3, [pc, #8]	; (8009d68 <LOG_increaseLevel+0x28>)
 8009d5e:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 8009d60:	bf00      	nop
 8009d62:	bf00      	nop
}
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	bf00      	nop
 8009d68:	2000026d 	.word	0x2000026d
 8009d6c:	0800c9d4 	.word	0x0800c9d4

08009d70 <LOG_decreaseLevel>:

void LOG_decreaseLevel(void)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	af00      	add	r7, sp, #0
  /* Display less detailed logs */
  if (g_LOG_level < LOG_LEVEL_ERROR)
 8009d74:	4b08      	ldr	r3, [pc, #32]	; (8009d98 <LOG_decreaseLevel+0x28>)
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	2b02      	cmp	r3, #2
 8009d7a:	d80a      	bhi.n	8009d92 <LOG_decreaseLevel+0x22>
  {
    LOG_info("Decreasing LOG level");
 8009d7c:	4907      	ldr	r1, [pc, #28]	; (8009d9c <LOG_decreaseLevel+0x2c>)
 8009d7e:	2001      	movs	r0, #1
 8009d80:	f000 f80e 	bl	8009da0 <LOG_log>

    g_LOG_level++;
 8009d84:	4b04      	ldr	r3, [pc, #16]	; (8009d98 <LOG_decreaseLevel+0x28>)
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	3301      	adds	r3, #1
 8009d8a:	b2da      	uxtb	r2, r3
 8009d8c:	4b02      	ldr	r3, [pc, #8]	; (8009d98 <LOG_decreaseLevel+0x28>)
 8009d8e:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 8009d90:	bf00      	nop
 8009d92:	bf00      	nop
}
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	2000026d 	.word	0x2000026d
 8009d9c:	0800c9ec 	.word	0x0800c9ec

08009da0 <LOG_log>:

void LOG_log(T_LOG_LEVEL p_level, const char *p_format, ...)
{
 8009da0:	b40e      	push	{r1, r2, r3}
 8009da2:	b590      	push	{r4, r7, lr}
 8009da4:	b0a8      	sub	sp, #160	; 0xa0
 8009da6:	af02      	add	r7, sp, #8
 8009da8:	4603      	mov	r3, r0
 8009daa:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef l_halReturnCode;
  va_list           l_argumentsList;
  RTC_TimeTypeDef   l_time;
  RTC_DateTypeDef   l_date;

  if ((g_LOG_isOn == true) && (p_level >= g_LOG_level))
 8009dac:	4b3e      	ldr	r3, [pc, #248]	; (8009ea8 <LOG_log+0x108>)
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d071      	beq.n	8009e98 <LOG_log+0xf8>
 8009db4:	4b3d      	ldr	r3, [pc, #244]	; (8009eac <LOG_log+0x10c>)
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	79fa      	ldrb	r2, [r7, #7]
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d36c      	bcc.n	8009e98 <LOG_log+0xf8>
  {
    l_halReturnCode = HAL_RTC_GetTime(g_LOG_rtcHandle, &l_time, RTC_FORMAT_BCD);
 8009dbe:	4b3c      	ldr	r3, [pc, #240]	; (8009eb0 <LOG_log+0x110>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f107 010c 	add.w	r1, r7, #12
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f7fa fe7d 	bl	8004ac8 <HAL_RTC_GetTime>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

    if (l_halReturnCode != HAL_OK)
 8009dd4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d004      	beq.n	8009de6 <LOG_log+0x46>
    {
      /* As this method is for logging/debug, just reset time in case of failure */
      UTI_resetRtcTime(&l_time);
 8009ddc:	f107 030c 	add.w	r3, r7, #12
 8009de0:	4618      	mov	r0, r3
 8009de2:	f000 fc1e 	bl	800a622 <UTI_resetRtcTime>
    else
    {
      ; /* Nothing to do */
    }

    l_halReturnCode = HAL_RTC_GetDate(g_LOG_rtcHandle, &l_date, RTC_FORMAT_BCD);
 8009de6:	4b32      	ldr	r3, [pc, #200]	; (8009eb0 <LOG_log+0x110>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f107 0108 	add.w	r1, r7, #8
 8009dee:	2201      	movs	r2, #1
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7fb f86d 	bl	8004ed0 <HAL_RTC_GetDate>
 8009df6:	4603      	mov	r3, r0
 8009df8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

    if (l_halReturnCode != HAL_OK)
 8009dfc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d004      	beq.n	8009e0e <LOG_log+0x6e>
    {
      /* As this method is for logging/debug, just reset date in case of failure */
      UTI_resetRtcDate(&l_date);
 8009e04:	f107 0308 	add.w	r3, r7, #8
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f000 fbf5 	bl	800a5f8 <UTI_resetRtcDate>
    else
    {
      ; /* Nothing to do */
    }

    va_start(l_argumentsList, p_format);
 8009e0e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8009e12:	613b      	str	r3, [r7, #16]

    (void)sprintf  ( l_buffer, "%-7s - %02x:%02x:%02x - ", g_LOG_levelStrings[p_level], l_time.Hours, l_time.Minutes, l_time.Seconds);
 8009e14:	79fb      	ldrb	r3, [r7, #7]
 8009e16:	4a27      	ldr	r2, [pc, #156]	; (8009eb4 <LOG_log+0x114>)
 8009e18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009e1c:	7b3b      	ldrb	r3, [r7, #12]
 8009e1e:	461c      	mov	r4, r3
 8009e20:	7b7b      	ldrb	r3, [r7, #13]
 8009e22:	7bb9      	ldrb	r1, [r7, #14]
 8009e24:	f107 0014 	add.w	r0, r7, #20
 8009e28:	9101      	str	r1, [sp, #4]
 8009e2a:	9300      	str	r3, [sp, #0]
 8009e2c:	4623      	mov	r3, r4
 8009e2e:	4922      	ldr	r1, [pc, #136]	; (8009eb8 <LOG_log+0x118>)
 8009e30:	f000 fdb0 	bl	800a994 <siprintf>
    (void)vsnprintf(&l_buffer[21], CST_CONSOLE_TX_MAX_STRING_LENGTH - 21 - 2, p_format, l_argumentsList);
 8009e34:	f107 0314 	add.w	r3, r7, #20
 8009e38:	f103 0015 	add.w	r0, r3, #21
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8009e42:	2169      	movs	r1, #105	; 0x69
 8009e44:	f000 fea2 	bl	800ab8c <vsniprintf>
    (void)strcat   ( l_buffer    , "\r\n");
 8009e48:	f107 0314 	add.w	r3, r7, #20
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f7f6 f9e9 	bl	8000224 <strlen>
 8009e52:	4603      	mov	r3, r0
 8009e54:	461a      	mov	r2, r3
 8009e56:	f107 0314 	add.w	r3, r7, #20
 8009e5a:	4413      	add	r3, r2
 8009e5c:	4a17      	ldr	r2, [pc, #92]	; (8009ebc <LOG_log+0x11c>)
 8009e5e:	8811      	ldrh	r1, [r2, #0]
 8009e60:	7892      	ldrb	r2, [r2, #2]
 8009e62:	8019      	strh	r1, [r3, #0]
 8009e64:	709a      	strb	r2, [r3, #2]

    if (strnlen(l_buffer, CST_CONSOLE_TX_MAX_STRING_LENGTH) == CST_CONSOLE_TX_MAX_STRING_LENGTH - 1)
 8009e66:	f107 0314 	add.w	r3, r7, #20
 8009e6a:	2180      	movs	r1, #128	; 0x80
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f000 fdc4 	bl	800a9fa <strnlen>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b7f      	cmp	r3, #127	; 0x7f
 8009e76:	d108      	bne.n	8009e8a <LOG_log+0xea>
    {
      l_buffer[CST_CONSOLE_TX_MAX_STRING_LENGTH - 4] = '.';
 8009e78:	232e      	movs	r3, #46	; 0x2e
 8009e7a:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
      l_buffer[CST_CONSOLE_TX_MAX_STRING_LENGTH - 5] = '.';
 8009e7e:	232e      	movs	r3, #46	; 0x2e
 8009e80:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
      l_buffer[CST_CONSOLE_TX_MAX_STRING_LENGTH - 6] = '.';
 8009e84:	232e      	movs	r3, #46	; 0x2e
 8009e86:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
    else
    {
      ; /* Nothing to do */
    }

    (void)printf("%s", l_buffer);
 8009e8a:	f107 0314 	add.w	r3, r7, #20
 8009e8e:	4619      	mov	r1, r3
 8009e90:	480b      	ldr	r0, [pc, #44]	; (8009ec0 <LOG_log+0x120>)
 8009e92:	f000 fd57 	bl	800a944 <iprintf>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8009e96:	bf00      	nop
 8009e98:	bf00      	nop
}
 8009e9a:	3798      	adds	r7, #152	; 0x98
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8009ea2:	b003      	add	sp, #12
 8009ea4:	4770      	bx	lr
 8009ea6:	bf00      	nop
 8009ea8:	2000026c 	.word	0x2000026c
 8009eac:	2000026d 	.word	0x2000026d
 8009eb0:	20000270 	.word	0x20000270
 8009eb4:	2000000c 	.word	0x2000000c
 8009eb8:	0800ca04 	.word	0x0800ca04
 8009ebc:	0800ca20 	.word	0x0800ca20
 8009ec0:	0800ca24 	.word	0x0800ca24

08009ec4 <MAS_init>:
static T_SFO_data          g_MAS_data;
static uint32_t            g_MAS_dataSize;
static bool                g_MAS_isDataComplete;

void MAS_init(UART_HandleTypeDef *p_uartHandle)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b082      	sub	sp, #8
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing master connection");
 8009ecc:	490d      	ldr	r1, [pc, #52]	; (8009f04 <MAS_init+0x40>)
 8009ece:	2001      	movs	r0, #1
 8009ed0:	f7ff ff66 	bl	8009da0 <LOG_log>

  g_MAS_uartHandle     = p_uartHandle;
 8009ed4:	4a0c      	ldr	r2, [pc, #48]	; (8009f08 <MAS_init+0x44>)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6013      	str	r3, [r2, #0]
  g_MAS_dataSize       = 0;
 8009eda:	4b0c      	ldr	r3, [pc, #48]	; (8009f0c <MAS_init+0x48>)
 8009edc:	2200      	movs	r2, #0
 8009ede:	601a      	str	r2, [r3, #0]
  g_MAS_isDataComplete = false;
 8009ee0:	4b0b      	ldr	r3, [pc, #44]	; (8009f10 <MAS_init+0x4c>)
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	701a      	strb	r2, [r3, #0]

  SFO_initData(&g_MAS_data);
 8009ee6:	480b      	ldr	r0, [pc, #44]	; (8009f14 <MAS_init+0x50>)
 8009ee8:	f000 fa4a 	bl	800a380 <SFO_initData>

  HAL_UART_Receive_IT(g_MAS_uartHandle, &g_MAS_datum, 1);
 8009eec:	4b06      	ldr	r3, [pc, #24]	; (8009f08 <MAS_init+0x44>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	4909      	ldr	r1, [pc, #36]	; (8009f18 <MAS_init+0x54>)
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f7fd fe91 	bl	8007c1c <HAL_UART_Receive_IT>

  return;
 8009efa:	bf00      	nop
}
 8009efc:	3708      	adds	r7, #8
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop
 8009f04:	0800ca28 	.word	0x0800ca28
 8009f08:	20000274 	.word	0x20000274
 8009f0c:	2000028c 	.word	0x2000028c
 8009f10:	20000290 	.word	0x20000290
 8009f14:	2000027c 	.word	0x2000027c
 8009f18:	20000278 	.word	0x20000278

08009f1c <MAS_receiveData>:

void MAS_receiveData(void)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	af00      	add	r7, sp, #0
  /* If previous command was not processed yet, drop datum, */
  /* which will lead to an error, showing a design issue... */
  if (g_MAS_isDataComplete == true)
 8009f20:	4b0f      	ldr	r3, [pc, #60]	; (8009f60 <MAS_receiveData+0x44>)
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d112      	bne.n	8009f4e <MAS_receiveData+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (g_MAS_datum == '\r')
 8009f28:	4b0e      	ldr	r3, [pc, #56]	; (8009f64 <MAS_receiveData+0x48>)
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	2b0d      	cmp	r3, #13
 8009f2e:	d103      	bne.n	8009f38 <MAS_receiveData+0x1c>
    {
      g_MAS_isDataComplete = true;
 8009f30:	4b0b      	ldr	r3, [pc, #44]	; (8009f60 <MAS_receiveData+0x44>)
 8009f32:	2201      	movs	r2, #1
 8009f34:	701a      	strb	r2, [r3, #0]
 8009f36:	e00a      	b.n	8009f4e <MAS_receiveData+0x32>
    }
    else
    {
      g_MAS_data[g_MAS_dataSize] = g_MAS_datum;
 8009f38:	4b0b      	ldr	r3, [pc, #44]	; (8009f68 <MAS_receiveData+0x4c>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a09      	ldr	r2, [pc, #36]	; (8009f64 <MAS_receiveData+0x48>)
 8009f3e:	7811      	ldrb	r1, [r2, #0]
 8009f40:	4a0a      	ldr	r2, [pc, #40]	; (8009f6c <MAS_receiveData+0x50>)
 8009f42:	54d1      	strb	r1, [r2, r3]
      g_MAS_dataSize++;
 8009f44:	4b08      	ldr	r3, [pc, #32]	; (8009f68 <MAS_receiveData+0x4c>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	3301      	adds	r3, #1
 8009f4a:	4a07      	ldr	r2, [pc, #28]	; (8009f68 <MAS_receiveData+0x4c>)
 8009f4c:	6013      	str	r3, [r2, #0]
    }
  }

  HAL_UART_Receive_IT(g_MAS_uartHandle, &g_MAS_datum, 1);
 8009f4e:	4b08      	ldr	r3, [pc, #32]	; (8009f70 <MAS_receiveData+0x54>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	2201      	movs	r2, #1
 8009f54:	4903      	ldr	r1, [pc, #12]	; (8009f64 <MAS_receiveData+0x48>)
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7fd fe60 	bl	8007c1c <HAL_UART_Receive_IT>

  return;
 8009f5c:	bf00      	nop
}
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	20000290 	.word	0x20000290
 8009f64:	20000278 	.word	0x20000278
 8009f68:	2000028c 	.word	0x2000028c
 8009f6c:	2000027c 	.word	0x2000027c
 8009f70:	20000274 	.word	0x20000274

08009f74 <MAS_updateFifo>:

void MAS_updateFifo(T_SFO_Context *p_fifo)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  if (g_MAS_isDataComplete == false)
 8009f7c:	4b0c      	ldr	r3, [pc, #48]	; (8009fb0 <MAS_updateFifo+0x3c>)
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	f083 0301 	eor.w	r3, r3, #1
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d10d      	bne.n	8009fa6 <MAS_updateFifo+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    SFO_push    (p_fifo, &g_MAS_data);
 8009f8a:	490a      	ldr	r1, [pc, #40]	; (8009fb4 <MAS_updateFifo+0x40>)
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f000 fa1d 	bl	800a3cc <SFO_push>
    SFO_initData(&g_MAS_data);
 8009f92:	4808      	ldr	r0, [pc, #32]	; (8009fb4 <MAS_updateFifo+0x40>)
 8009f94:	f000 f9f4 	bl	800a380 <SFO_initData>

    g_MAS_dataSize       = 0;
 8009f98:	4b07      	ldr	r3, [pc, #28]	; (8009fb8 <MAS_updateFifo+0x44>)
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	601a      	str	r2, [r3, #0]
    g_MAS_isDataComplete = false;
 8009f9e:	4b04      	ldr	r3, [pc, #16]	; (8009fb0 <MAS_updateFifo+0x3c>)
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	701a      	strb	r2, [r3, #0]
  }

  return;
 8009fa4:	bf00      	nop
 8009fa6:	bf00      	nop
}
 8009fa8:	3708      	adds	r7, #8
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop
 8009fb0:	20000290 	.word	0x20000290
 8009fb4:	2000027c 	.word	0x2000027c
 8009fb8:	2000028c 	.word	0x2000028c

08009fbc <MTR_init>:
              uint32_t           p_dirPin1,
              GPIO_TypeDef      *p_dirPin2Port,
              uint32_t           p_dirPin2,
              TIM_HandleTypeDef *p_pwmTimerHandle,
              uint32_t           p_pwmChannel)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	60b9      	str	r1, [r7, #8]
 8009fc6:	607a      	str	r2, [r7, #4]
 8009fc8:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing Motor module for %s", p_name);
 8009fca:	68ba      	ldr	r2, [r7, #8]
 8009fcc:	4912      	ldr	r1, [pc, #72]	; (800a018 <MTR_init+0x5c>)
 8009fce:	2001      	movs	r0, #1
 8009fd0:	f7ff fee6 	bl	8009da0 <LOG_log>

  p_handle->name           = p_name;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	68ba      	ldr	r2, [r7, #8]
 8009fd8:	601a      	str	r2, [r3, #0]
  p_handle->dirPin1Port    = p_dirPin1Port;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	605a      	str	r2, [r3, #4]
  p_handle->dirPin1        = p_dirPin1;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	683a      	ldr	r2, [r7, #0]
 8009fe4:	609a      	str	r2, [r3, #8]
  p_handle->dirPin2Port    = p_dirPin2Port;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	69ba      	ldr	r2, [r7, #24]
 8009fea:	60da      	str	r2, [r3, #12]
  p_handle->dirPin2        = p_dirPin2;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	69fa      	ldr	r2, [r7, #28]
 8009ff0:	611a      	str	r2, [r3, #16]
  p_handle->pwmTimerHandle = p_pwmTimerHandle;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	6a3a      	ldr	r2, [r7, #32]
 8009ff6:	61da      	str	r2, [r3, #28]
  p_handle->pwmChannel     = p_pwmChannel;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ffc:	621a      	str	r2, [r3, #32]

  MTR_setDirection(p_handle, MTR_DIRECTION_STOP);
 8009ffe:	2100      	movs	r1, #0
 800a000:	68f8      	ldr	r0, [r7, #12]
 800a002:	f000 f80b 	bl	800a01c <MTR_setDirection>
  MTR_setSpeed    (p_handle, 0                 );
 800a006:	2100      	movs	r1, #0
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f000 f87f 	bl	800a10c <MTR_setSpeed>

  return;
 800a00e:	bf00      	nop
}
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	0800ca78 	.word	0x0800ca78

0800a01c <MTR_setDirection>:

void MTR_setDirection(T_MTR_Handle *p_handle, T_MTR_DIRECTION p_direction)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b082      	sub	sp, #8
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	460b      	mov	r3, r1
 800a026:	70fb      	strb	r3, [r7, #3]
  if (p_direction == p_handle->direction)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	7d1b      	ldrb	r3, [r3, #20]
 800a02c:	78fa      	ldrb	r2, [r7, #3]
 800a02e:	429a      	cmp	r2, r3
 800a030:	d056      	beq.n	800a0e0 <MTR_setDirection+0xc4>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (p_direction == MTR_DIRECTION_STOP)
 800a032:	78fb      	ldrb	r3, [r7, #3]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d119      	bne.n	800a06c <MTR_setDirection+0x50>
    {
      LOG_debug("%s motor STOP", p_handle->name);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	461a      	mov	r2, r3
 800a03e:	492a      	ldr	r1, [pc, #168]	; (800a0e8 <MTR_setDirection+0xcc>)
 800a040:	2000      	movs	r0, #0
 800a042:	f7ff fead 	bl	8009da0 <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_RESET);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6858      	ldr	r0, [r3, #4]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	689b      	ldr	r3, [r3, #8]
 800a04e:	b29b      	uxth	r3, r3
 800a050:	2200      	movs	r2, #0
 800a052:	4619      	mov	r1, r3
 800a054:	f7f9 fb56 	bl	8003704 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_RESET);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	68d8      	ldr	r0, [r3, #12]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	691b      	ldr	r3, [r3, #16]
 800a060:	b29b      	uxth	r3, r3
 800a062:	2200      	movs	r2, #0
 800a064:	4619      	mov	r1, r3
 800a066:	f7f9 fb4d 	bl	8003704 <HAL_GPIO_WritePin>
 800a06a:	e035      	b.n	800a0d8 <MTR_setDirection+0xbc>
    }
    else if (p_direction == MTR_DIRECTION_FORWARD)
 800a06c:	78fb      	ldrb	r3, [r7, #3]
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d119      	bne.n	800a0a6 <MTR_setDirection+0x8a>
    {
      LOG_debug("%s motor go FORWARD", p_handle->name);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	461a      	mov	r2, r3
 800a078:	491c      	ldr	r1, [pc, #112]	; (800a0ec <MTR_setDirection+0xd0>)
 800a07a:	2000      	movs	r0, #0
 800a07c:	f7ff fe90 	bl	8009da0 <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_RESET);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6858      	ldr	r0, [r3, #4]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	689b      	ldr	r3, [r3, #8]
 800a088:	b29b      	uxth	r3, r3
 800a08a:	2200      	movs	r2, #0
 800a08c:	4619      	mov	r1, r3
 800a08e:	f7f9 fb39 	bl	8003704 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_SET  );
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	68d8      	ldr	r0, [r3, #12]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	691b      	ldr	r3, [r3, #16]
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	2201      	movs	r2, #1
 800a09e:	4619      	mov	r1, r3
 800a0a0:	f7f9 fb30 	bl	8003704 <HAL_GPIO_WritePin>
 800a0a4:	e018      	b.n	800a0d8 <MTR_setDirection+0xbc>
    }
    else
    {
      LOG_debug("%s motor go BACKWARD", p_handle->name);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	461a      	mov	r2, r3
 800a0ac:	4910      	ldr	r1, [pc, #64]	; (800a0f0 <MTR_setDirection+0xd4>)
 800a0ae:	2000      	movs	r0, #0
 800a0b0:	f7ff fe76 	bl	8009da0 <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_SET  );
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6858      	ldr	r0, [r3, #4]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	2201      	movs	r2, #1
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	f7f9 fb1f 	bl	8003704 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_RESET);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	68d8      	ldr	r0, [r3, #12]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	691b      	ldr	r3, [r3, #16]
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	f7f9 fb16 	bl	8003704 <HAL_GPIO_WritePin>
    }

    p_handle->direction = p_direction;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	78fa      	ldrb	r2, [r7, #3]
 800a0dc:	751a      	strb	r2, [r3, #20]
  }

  return;
 800a0de:	bf00      	nop
 800a0e0:	bf00      	nop
}
 800a0e2:	3708      	adds	r7, #8
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	0800ca9c 	.word	0x0800ca9c
 800a0ec:	0800caac 	.word	0x0800caac
 800a0f0:	0800cac0 	.word	0x0800cac0

0800a0f4 <MTR_getDirection>:

T_MTR_DIRECTION MTR_getDirection(T_MTR_Handle *p_handle)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  return p_handle->direction;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	7d1b      	ldrb	r3, [r3, #20]
}
 800a100:	4618      	mov	r0, r3
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	bc80      	pop	{r7}
 800a108:	4770      	bx	lr
	...

0800a10c <MTR_setSpeed>:

void MTR_setSpeed(T_MTR_Handle *p_handle, uint32_t p_speed)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b082      	sub	sp, #8
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
  if (p_speed == p_handle->speed)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	699b      	ldr	r3, [r3, #24]
 800a11a:	683a      	ldr	r2, [r7, #0]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d02d      	beq.n	800a17c <MTR_setSpeed+0x70>
  {
    ; /* Nothing to do */
  }
  else
  {
    LOG_debug("Setting  %s motor p_speed to %u", p_handle->name, p_speed);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	4917      	ldr	r1, [pc, #92]	; (800a184 <MTR_setSpeed+0x78>)
 800a128:	2000      	movs	r0, #0
 800a12a:	f7ff fe39 	bl	8009da0 <LOG_log>

    __HAL_TIM_SET_COMPARE(p_handle->pwmTimerHandle, p_handle->pwmChannel, p_speed);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6a1b      	ldr	r3, [r3, #32]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d105      	bne.n	800a142 <MTR_setSpeed+0x36>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	69db      	ldr	r3, [r3, #28]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	683a      	ldr	r2, [r7, #0]
 800a13e:	635a      	str	r2, [r3, #52]	; 0x34
 800a140:	e018      	b.n	800a174 <MTR_setSpeed+0x68>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6a1b      	ldr	r3, [r3, #32]
 800a146:	2b04      	cmp	r3, #4
 800a148:	d105      	bne.n	800a156 <MTR_setSpeed+0x4a>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	69db      	ldr	r3, [r3, #28]
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	6393      	str	r3, [r2, #56]	; 0x38
 800a154:	e00e      	b.n	800a174 <MTR_setSpeed+0x68>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6a1b      	ldr	r3, [r3, #32]
 800a15a:	2b08      	cmp	r3, #8
 800a15c:	d105      	bne.n	800a16a <MTR_setSpeed+0x5e>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	69db      	ldr	r3, [r3, #28]
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	63d3      	str	r3, [r2, #60]	; 0x3c
 800a168:	e004      	b.n	800a174 <MTR_setSpeed+0x68>
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	69db      	ldr	r3, [r3, #28]
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	6413      	str	r3, [r2, #64]	; 0x40

    p_handle->speed = p_speed;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	683a      	ldr	r2, [r7, #0]
 800a178:	619a      	str	r2, [r3, #24]
  }

  return;
 800a17a:	bf00      	nop
 800a17c:	bf00      	nop
}
 800a17e:	3708      	adds	r7, #8
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}
 800a184:	0800cad8 	.word	0x0800cad8

0800a188 <MTR_getSpeed>:

uint32_t MTR_getSpeed(T_MTR_Handle *p_handle)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  return p_handle->speed;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	699b      	ldr	r3, [r3, #24]
}
 800a194:	4618      	mov	r0, r3
 800a196:	370c      	adds	r7, #12
 800a198:	46bd      	mov	sp, r7
 800a19a:	bc80      	pop	{r7}
 800a19c:	4770      	bx	lr
	...

0800a1a0 <PID_init>:

#include "utils.h"
#include "log.h"

void PID_init(T_PID_Handle *p_handle, int32_t p_kp, int32_t p_ki, int32_t p_kd, int32_t p_targetValue, int32_t p_minValue, int32_t p_maxValue, int32_t p_antiWindUpFactor)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b084      	sub	sp, #16
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	607a      	str	r2, [r7, #4]
 800a1ac:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing PID");
 800a1ae:	4919      	ldr	r1, [pc, #100]	; (800a214 <PID_init+0x74>)
 800a1b0:	2001      	movs	r0, #1
 800a1b2:	f7ff fdf5 	bl	8009da0 <LOG_log>

  p_handle->kp              = p_kp;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	68ba      	ldr	r2, [r7, #8]
 800a1ba:	601a      	str	r2, [r3, #0]
  p_handle->ki              = p_ki;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	605a      	str	r2, [r3, #4]
  p_handle->kd              = p_kd;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	683a      	ldr	r2, [r7, #0]
 800a1c6:	609a      	str	r2, [r3, #8]
  p_handle->targetValue     = p_targetValue;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	69ba      	ldr	r2, [r7, #24]
 800a1cc:	60da      	str	r2, [r3, #12]
  p_handle->minValue        = p_minValue;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	69fa      	ldr	r2, [r7, #28]
 800a1d2:	611a      	str	r2, [r3, #16]
  p_handle->maxValue        = p_maxValue;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	6a3a      	ldr	r2, [r7, #32]
 800a1d8:	615a      	str	r2, [r3, #20]
  p_handle->antiWindUpValue = p_antiWindUpFactor * UTI_MAX(abs(p_handle->minValue), abs(p_handle->maxValue));
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	695b      	ldr	r3, [r3, #20]
 800a1de:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800a1e2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	691b      	ldr	r3, [r3, #16]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	bfb8      	it	lt
 800a1ee:	425b      	neglt	r3, r3
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	bfb8      	it	lt
 800a1f4:	4613      	movlt	r3, r2
 800a1f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1f8:	fb02 f203 	mul.w	r2, r2, r3
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	619a      	str	r2, [r3, #24]

  PID_reset  (p_handle);
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f000 f809 	bl	800a218 <PID_reset>
  PID_logInfo(p_handle);
 800a206:	68f8      	ldr	r0, [r7, #12]
 800a208:	f000 f87e 	bl	800a308 <PID_logInfo>

  return;
 800a20c:	bf00      	nop
}
 800a20e:	3710      	adds	r7, #16
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}
 800a214:	0800caf8 	.word	0x0800caf8

0800a218 <PID_reset>:

void PID_reset(T_PID_Handle *p_handle)
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  p_handle->pValue        = 0;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2200      	movs	r2, #0
 800a224:	61da      	str	r2, [r3, #28]
  p_handle->iValue        = 0;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2200      	movs	r2, #0
 800a22a:	621a      	str	r2, [r3, #32]
  p_handle->dValue        = 0;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2200      	movs	r2, #0
 800a230:	625a      	str	r2, [r3, #36]	; 0x24
  p_handle->computedValue = 0;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2200      	movs	r2, #0
 800a236:	629a      	str	r2, [r3, #40]	; 0x28
  p_handle->lastError     = 0;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	62da      	str	r2, [r3, #44]	; 0x2c

  return;
 800a23e:	bf00      	nop
}
 800a240:	370c      	adds	r7, #12
 800a242:	46bd      	mov	sp, r7
 800a244:	bc80      	pop	{r7}
 800a246:	4770      	bx	lr

0800a248 <PID_update>:
{
  return p_handle->antiWindUpValue;
}

int32_t PID_update(T_PID_Handle *p_handle, int32_t p_currentValue, uint32_t p_timeDelta)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b088      	sub	sp, #32
 800a24c:	af02      	add	r7, sp, #8
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	60b9      	str	r1, [r7, #8]
 800a252:	607a      	str	r2, [r7, #4]
  int32_t l_currentError;

  l_currentError = p_handle->targetValue - p_currentValue;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	68da      	ldr	r2, [r3, #12]
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	1ad3      	subs	r3, r2, r3
 800a25c:	617b      	str	r3, [r7, #20]

  p_handle->pValue    =  l_currentError;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	697a      	ldr	r2, [r7, #20]
 800a262:	61da      	str	r2, [r3, #28]
  p_handle->iValue   +=  l_currentError * p_timeDelta;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	6a1b      	ldr	r3, [r3, #32]
 800a268:	4619      	mov	r1, r3
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	687a      	ldr	r2, [r7, #4]
 800a26e:	fb02 f303 	mul.w	r3, r2, r3
 800a272:	440b      	add	r3, r1
 800a274:	461a      	mov	r2, r3
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	621a      	str	r2, [r3, #32]
  p_handle->iValue    =  UTI_clampIntValue(p_handle->iValue, -p_handle->antiWindUpValue, p_handle->antiWindUpValue, false, 0);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	6a18      	ldr	r0, [r3, #32]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	699b      	ldr	r3, [r3, #24]
 800a282:	4259      	negs	r1, r3
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	699a      	ldr	r2, [r3, #24]
 800a288:	2300      	movs	r3, #0
 800a28a:	9300      	str	r3, [sp, #0]
 800a28c:	2300      	movs	r3, #0
 800a28e:	f000 f9f5 	bl	800a67c <UTI_clampIntValue>
 800a292:	4602      	mov	r2, r0
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	621a      	str	r2, [r3, #32]
  p_handle->dValue    = (l_currentError - p_handle->lastError) / p_timeDelta;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a29c:	697a      	ldr	r2, [r7, #20]
 800a29e:	1ad3      	subs	r3, r2, r3
 800a2a0:	461a      	mov	r2, r3
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	625a      	str	r2, [r3, #36]	; 0x24
  p_handle->lastError =  l_currentError;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	697a      	ldr	r2, [r7, #20]
 800a2b2:	62da      	str	r2, [r3, #44]	; 0x2c

  p_handle->computedValue = p_handle->kp * p_handle->pValue + p_handle->ki * p_handle->iValue + p_handle->kd * p_handle->dValue;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	69d2      	ldr	r2, [r2, #28]
 800a2bc:	fb02 f203 	mul.w	r2, r2, r3
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	685b      	ldr	r3, [r3, #4]
 800a2c4:	68f9      	ldr	r1, [r7, #12]
 800a2c6:	6a09      	ldr	r1, [r1, #32]
 800a2c8:	fb01 f303 	mul.w	r3, r1, r3
 800a2cc:	441a      	add	r2, r3
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	68f9      	ldr	r1, [r7, #12]
 800a2d4:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800a2d6:	fb01 f303 	mul.w	r3, r1, r3
 800a2da:	441a      	add	r2, r3
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	629a      	str	r2, [r3, #40]	; 0x28
  p_handle->computedValue = UTI_clampIntValue(p_handle->computedValue, p_handle->minValue, p_handle->maxValue, false, 0);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	6919      	ldr	r1, [r3, #16]
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	695a      	ldr	r2, [r3, #20]
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	9300      	str	r3, [sp, #0]
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	f000 f9c3 	bl	800a67c <UTI_clampIntValue>
 800a2f6:	4602      	mov	r2, r0
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	629a      	str	r2, [r3, #40]	; 0x28

  return p_currentValue;
 800a2fc:	68bb      	ldr	r3, [r7, #8]
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3718      	adds	r7, #24
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}
	...

0800a308 <PID_logInfo>:

void PID_logInfo(T_PID_Handle *p_handle)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af02      	add	r7, sp, #8
 800a30e:	6078      	str	r0, [r7, #4]
  LOG_info(" kp = %4d -  ki = %4d -     kd = %4d", p_handle->kp         , p_handle->ki      , p_handle->kd             );
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6859      	ldr	r1, [r3, #4]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	9300      	str	r3, [sp, #0]
 800a31e:	460b      	mov	r3, r1
 800a320:	4913      	ldr	r1, [pc, #76]	; (800a370 <PID_logInfo+0x68>)
 800a322:	2001      	movs	r0, #1
 800a324:	f7ff fd3c 	bl	8009da0 <LOG_log>
  LOG_info("  p = %4d -   i = %4d -      d = %4d", p_handle->pValue     , p_handle->iValue  , p_handle->dValue         );
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	69da      	ldr	r2, [r3, #28]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6a19      	ldr	r1, [r3, #32]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a334:	9300      	str	r3, [sp, #0]
 800a336:	460b      	mov	r3, r1
 800a338:	490e      	ldr	r1, [pc, #56]	; (800a374 <PID_logInfo+0x6c>)
 800a33a:	2001      	movs	r0, #1
 800a33c:	f7ff fd30 	bl	8009da0 <LOG_log>
  LOG_info("min = %4d - max = %4d - a.w.up = %4d", p_handle->minValue   , p_handle->maxValue, p_handle->antiWindUpValue);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	691a      	ldr	r2, [r3, #16]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6959      	ldr	r1, [r3, #20]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	699b      	ldr	r3, [r3, #24]
 800a34c:	9300      	str	r3, [sp, #0]
 800a34e:	460b      	mov	r3, r1
 800a350:	4909      	ldr	r1, [pc, #36]	; (800a378 <PID_logInfo+0x70>)
 800a352:	2001      	movs	r0, #1
 800a354:	f7ff fd24 	bl	8009da0 <LOG_log>
  LOG_info("  t = %4d - val = %4d               ", p_handle->targetValue, p_handle->computedValue                      );
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	68da      	ldr	r2, [r3, #12]
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a360:	4906      	ldr	r1, [pc, #24]	; (800a37c <PID_logInfo+0x74>)
 800a362:	2001      	movs	r0, #1
 800a364:	f7ff fd1c 	bl	8009da0 <LOG_log>

  return;
 800a368:	bf00      	nop
}
 800a36a:	3708      	adds	r7, #8
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	0800cb0c 	.word	0x0800cb0c
 800a374:	0800cb34 	.word	0x0800cb34
 800a378:	0800cb5c 	.word	0x0800cb5c
 800a37c:	0800cb84 	.word	0x0800cb84

0800a380 <SFO_initData>:

#include "log.h"


void SFO_initData(T_SFO_data *p_data)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  (void)memset(p_data, 0, CST_STRING_FIFO_MAX_STRING_LENGTH);
 800a388:	2210      	movs	r2, #16
 800a38a:	2100      	movs	r1, #0
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 fa2b 	bl	800a7e8 <memset>

  return;
 800a392:	bf00      	nop
}
 800a394:	3708      	adds	r7, #8
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
	...

0800a39c <SFO_init>:

void SFO_init(T_SFO_Context *p_fifo)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
  LOG_debug("String FIFO now empty");
 800a3a4:	4908      	ldr	r1, [pc, #32]	; (800a3c8 <SFO_init+0x2c>)
 800a3a6:	2000      	movs	r0, #0
 800a3a8:	f7ff fcfa 	bl	8009da0 <LOG_log>

  p_fifo->head  = NULL;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	601a      	str	r2, [r3, #0]
  p_fifo->tail  = NULL;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	605a      	str	r2, [r3, #4]
  p_fifo->count = 0;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	609a      	str	r2, [r3, #8]

  return;
 800a3be:	bf00      	nop
}
 800a3c0:	3708      	adds	r7, #8
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	0800cbac 	.word	0x0800cbac

0800a3cc <SFO_push>:

void SFO_push(T_SFO_Context *p_fifo, T_SFO_data *p_dataIn)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
 800a3d4:	6039      	str	r1, [r7, #0]
  T_SFO_Element *l_element;

  if (p_fifo->count == CST_STRING_FIFO_MAX_ELEMENTS)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	689b      	ldr	r3, [r3, #8]
 800a3da:	2b0a      	cmp	r3, #10
 800a3dc:	d105      	bne.n	800a3ea <SFO_push+0x1e>
  {
    LOG_error("SFO_push() failure - String FIFO is full (%u elements)", CST_STRING_FIFO_MAX_ELEMENTS);
 800a3de:	220a      	movs	r2, #10
 800a3e0:	4917      	ldr	r1, [pc, #92]	; (800a440 <SFO_push+0x74>)
 800a3e2:	2003      	movs	r0, #3
 800a3e4:	f7ff fcdc 	bl	8009da0 <LOG_log>

      p_fifo->count++;
    }
  }

  return;
 800a3e8:	e027      	b.n	800a43a <SFO_push+0x6e>
    l_element = (T_SFO_Element *)malloc(sizeof(T_SFO_Element));
 800a3ea:	2014      	movs	r0, #20
 800a3ec:	f000 f9ec 	bl	800a7c8 <malloc>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	60fb      	str	r3, [r7, #12]
    if (l_element == NULL)
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d104      	bne.n	800a404 <SFO_push+0x38>
      LOG_error("SFO_push() failure - Could not allocate new memory");
 800a3fa:	4912      	ldr	r1, [pc, #72]	; (800a444 <SFO_push+0x78>)
 800a3fc:	2003      	movs	r0, #3
 800a3fe:	f7ff fccf 	bl	8009da0 <LOG_log>
  return;
 800a402:	e01a      	b.n	800a43a <SFO_push+0x6e>
      (void)strncpy(l_element->data, *p_dataIn, CST_STRING_FIFO_MAX_STRING_LENGTH);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2210      	movs	r2, #16
 800a408:	6839      	ldr	r1, [r7, #0]
 800a40a:	4618      	mov	r0, r3
 800a40c:	f000 fae2 	bl	800a9d4 <strncpy>
      l_element->nextElement = p_fifo->head;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	611a      	str	r2, [r3, #16]
      p_fifo->head           = l_element;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	68fa      	ldr	r2, [r7, #12]
 800a41c:	601a      	str	r2, [r3, #0]
      if (p_fifo->tail == NULL)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d103      	bne.n	800a42e <SFO_push+0x62>
        p_fifo->tail = p_fifo->head;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	605a      	str	r2, [r3, #4]
      p_fifo->count++;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	689b      	ldr	r3, [r3, #8]
 800a432:	1c5a      	adds	r2, r3, #1
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	609a      	str	r2, [r3, #8]
  return;
 800a438:	bf00      	nop
}
 800a43a:	3710      	adds	r7, #16
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}
 800a440:	0800cbc4 	.word	0x0800cbc4
 800a444:	0800cbfc 	.word	0x0800cbfc

0800a448 <SFO_pop>:

void SFO_pop(T_SFO_Context *p_fifo, T_SFO_data *p_dataOut)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	6039      	str	r1, [r7, #0]
  T_SFO_Element *l_element;

  if (p_fifo->count == 0)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	689b      	ldr	r3, [r3, #8]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d104      	bne.n	800a464 <SFO_pop+0x1c>
  {
    LOG_error("SFO_pop() failure - String FIFO is empty");
 800a45a:	491a      	ldr	r1, [pc, #104]	; (800a4c4 <SFO_pop+0x7c>)
 800a45c:	2003      	movs	r0, #3
 800a45e:	f7ff fc9f 	bl	8009da0 <LOG_log>
    {
      SFO_init(p_fifo);
    }
  }

  return;
 800a462:	e02c      	b.n	800a4be <SFO_pop+0x76>
    (void)strncpy(*p_dataOut, p_fifo->tail->data, CST_STRING_FIFO_MAX_STRING_LENGTH);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	2210      	movs	r2, #16
 800a46a:	4619      	mov	r1, r3
 800a46c:	6838      	ldr	r0, [r7, #0]
 800a46e:	f000 fab1 	bl	800a9d4 <strncpy>
    free(p_fifo->tail);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	4618      	mov	r0, r3
 800a478:	f000 f9ae 	bl	800a7d8 <free>
    if (p_fifo->count > 1)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	2b01      	cmp	r3, #1
 800a482:	d918      	bls.n	800a4b6 <SFO_pop+0x6e>
      l_element = p_fifo->head;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	60fb      	str	r3, [r7, #12]
      while (l_element->nextElement != p_fifo->tail)
 800a48a:	e002      	b.n	800a492 <SFO_pop+0x4a>
        l_element = l_element->nextElement;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	691b      	ldr	r3, [r3, #16]
 800a490:	60fb      	str	r3, [r7, #12]
      while (l_element->nextElement != p_fifo->tail)
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	691a      	ldr	r2, [r3, #16]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	d1f6      	bne.n	800a48c <SFO_pop+0x44>
      l_element->nextElement = NULL;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	611a      	str	r2, [r3, #16]
      p_fifo->tail           = l_element;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	68fa      	ldr	r2, [r7, #12]
 800a4a8:	605a      	str	r2, [r3, #4]
      p_fifo->count--;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	689b      	ldr	r3, [r3, #8]
 800a4ae:	1e5a      	subs	r2, r3, #1
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	609a      	str	r2, [r3, #8]
  return;
 800a4b4:	e003      	b.n	800a4be <SFO_pop+0x76>
      SFO_init(p_fifo);
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f7ff ff70 	bl	800a39c <SFO_init>
  return;
 800a4bc:	bf00      	nop
}
 800a4be:	3710      	adds	r7, #16
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}
 800a4c4:	0800cc30 	.word	0x0800cc30

0800a4c8 <SFO_getCount>:

uint32_t SFO_getCount(T_SFO_Context *p_fifo)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b083      	sub	sp, #12
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  return p_fifo->count;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	689b      	ldr	r3, [r3, #8]
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	370c      	adds	r7, #12
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bc80      	pop	{r7}
 800a4dc:	4770      	bx	lr
	...

0800a4e0 <SFO_logInfo>:

void SFO_logInfo(T_SFO_Context *p_fifo)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  T_SFO_Element *l_element;

  if (p_fifo->count == 0)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d104      	bne.n	800a4fa <SFO_logInfo+0x1a>
  {
    LOG_info("String FIFO is empty");
 800a4f0:	4924      	ldr	r1, [pc, #144]	; (800a584 <SFO_logInfo+0xa4>)
 800a4f2:	2001      	movs	r0, #1
 800a4f4:	f7ff fc54 	bl	8009da0 <LOG_log>

      l_element = l_element->nextElement;
    }
  }

  return;
 800a4f8:	e040      	b.n	800a57c <SFO_logInfo+0x9c>
    LOG_info("String FIFO: %u element(s)", p_fifo->count);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	689b      	ldr	r3, [r3, #8]
 800a4fe:	461a      	mov	r2, r3
 800a500:	4921      	ldr	r1, [pc, #132]	; (800a588 <SFO_logInfo+0xa8>)
 800a502:	2001      	movs	r0, #1
 800a504:	f7ff fc4c 	bl	8009da0 <LOG_log>
    l_element = p_fifo->head;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	60fb      	str	r3, [r7, #12]
    while (l_element != NULL)
 800a50e:	e031      	b.n	800a574 <SFO_logInfo+0x94>
      if ((l_element == p_fifo->head) && (l_element == p_fifo->tail))
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	68fa      	ldr	r2, [r7, #12]
 800a516:	429a      	cmp	r2, r3
 800a518:	d10b      	bne.n	800a532 <SFO_logInfo+0x52>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	685b      	ldr	r3, [r3, #4]
 800a51e:	68fa      	ldr	r2, [r7, #12]
 800a520:	429a      	cmp	r2, r3
 800a522:	d106      	bne.n	800a532 <SFO_logInfo+0x52>
        LOG_info("HEAD -> '%s' <- TAIL", l_element->data);
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	461a      	mov	r2, r3
 800a528:	4918      	ldr	r1, [pc, #96]	; (800a58c <SFO_logInfo+0xac>)
 800a52a:	2001      	movs	r0, #1
 800a52c:	f7ff fc38 	bl	8009da0 <LOG_log>
 800a530:	e01d      	b.n	800a56e <SFO_logInfo+0x8e>
      else if (l_element == p_fifo->head)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	68fa      	ldr	r2, [r7, #12]
 800a538:	429a      	cmp	r2, r3
 800a53a:	d106      	bne.n	800a54a <SFO_logInfo+0x6a>
        LOG_info("HEAD -> '%s'", l_element->data);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	461a      	mov	r2, r3
 800a540:	4913      	ldr	r1, [pc, #76]	; (800a590 <SFO_logInfo+0xb0>)
 800a542:	2001      	movs	r0, #1
 800a544:	f7ff fc2c 	bl	8009da0 <LOG_log>
 800a548:	e011      	b.n	800a56e <SFO_logInfo+0x8e>
      else if (l_element == p_fifo->tail)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	68fa      	ldr	r2, [r7, #12]
 800a550:	429a      	cmp	r2, r3
 800a552:	d106      	bne.n	800a562 <SFO_logInfo+0x82>
        LOG_info("TAIL -> '%s'", l_element->data);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	461a      	mov	r2, r3
 800a558:	490e      	ldr	r1, [pc, #56]	; (800a594 <SFO_logInfo+0xb4>)
 800a55a:	2001      	movs	r0, #1
 800a55c:	f7ff fc20 	bl	8009da0 <LOG_log>
 800a560:	e005      	b.n	800a56e <SFO_logInfo+0x8e>
        LOG_info("        '%s'", l_element->data);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	461a      	mov	r2, r3
 800a566:	490c      	ldr	r1, [pc, #48]	; (800a598 <SFO_logInfo+0xb8>)
 800a568:	2001      	movs	r0, #1
 800a56a:	f7ff fc19 	bl	8009da0 <LOG_log>
      l_element = l_element->nextElement;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	691b      	ldr	r3, [r3, #16]
 800a572:	60fb      	str	r3, [r7, #12]
    while (l_element != NULL)
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d1ca      	bne.n	800a510 <SFO_logInfo+0x30>
  return;
 800a57a:	bf00      	nop
}
 800a57c:	3710      	adds	r7, #16
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
 800a582:	bf00      	nop
 800a584:	0800cc5c 	.word	0x0800cc5c
 800a588:	0800cc74 	.word	0x0800cc74
 800a58c:	0800cc90 	.word	0x0800cc90
 800a590:	0800cca8 	.word	0x0800cca8
 800a594:	0800ccb8 	.word	0x0800ccb8
 800a598:	0800ccc8 	.word	0x0800ccc8

0800a59c <UTI_init>:
#include "log.h"

static TIM_HandleTypeDef *g_UTI_delayTimerHandle;

void UTI_init(TIM_HandleTypeDef *p_delayTimerHandle)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing utilities");
 800a5a4:	4905      	ldr	r1, [pc, #20]	; (800a5bc <UTI_init+0x20>)
 800a5a6:	2001      	movs	r0, #1
 800a5a8:	f7ff fbfa 	bl	8009da0 <LOG_log>

  g_UTI_delayTimerHandle = p_delayTimerHandle;
 800a5ac:	4a04      	ldr	r2, [pc, #16]	; (800a5c0 <UTI_init+0x24>)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6013      	str	r3, [r2, #0]

  return;
 800a5b2:	bf00      	nop
}
 800a5b4:	3708      	adds	r7, #8
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}
 800a5ba:	bf00      	nop
 800a5bc:	0800ccd8 	.word	0x0800ccd8
 800a5c0:	20000294 	.word	0x20000294

0800a5c4 <UTI_delayUs>:

void UTI_delayUs(uint16_t p_delay)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b083      	sub	sp, #12
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	80fb      	strh	r3, [r7, #6]
  /* Reset the micro-seconds counter */
  __HAL_TIM_SET_COUNTER(g_UTI_delayTimerHandle, 0);
 800a5ce:	4b09      	ldr	r3, [pc, #36]	; (800a5f4 <UTI_delayUs+0x30>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Wait for the counter to reach the input micro-seconds number */
  while (__HAL_TIM_GET_COUNTER(g_UTI_delayTimerHandle) < p_delay)
 800a5d8:	bf00      	nop
 800a5da:	4b06      	ldr	r3, [pc, #24]	; (800a5f4 <UTI_delayUs+0x30>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5e2:	88fb      	ldrh	r3, [r7, #6]
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d3f8      	bcc.n	800a5da <UTI_delayUs+0x16>
  {
    ; /* Nothing to do */
  }

  return;
 800a5e8:	bf00      	nop
}
 800a5ea:	370c      	adds	r7, #12
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bc80      	pop	{r7}
 800a5f0:	4770      	bx	lr
 800a5f2:	bf00      	nop
 800a5f4:	20000294 	.word	0x20000294

0800a5f8 <UTI_resetRtcDate>:

void UTI_resetRtcDate(RTC_DateTypeDef *p_date)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b083      	sub	sp, #12
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  p_date->Date    = 0;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2200      	movs	r2, #0
 800a604:	709a      	strb	r2, [r3, #2]
  p_date->Month   = 0;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2200      	movs	r2, #0
 800a60a:	705a      	strb	r2, [r3, #1]
  p_date->WeekDay = 0;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2200      	movs	r2, #0
 800a610:	701a      	strb	r2, [r3, #0]
  p_date->Year    = 0;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	70da      	strb	r2, [r3, #3]

  return;
 800a618:	bf00      	nop
}
 800a61a:	370c      	adds	r7, #12
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bc80      	pop	{r7}
 800a620:	4770      	bx	lr

0800a622 <UTI_resetRtcTime>:


void UTI_resetRtcTime(RTC_TimeTypeDef *p_time)
{
 800a622:	b480      	push	{r7}
 800a624:	b083      	sub	sp, #12
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
  p_time->Hours   = 0;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2200      	movs	r2, #0
 800a62e:	701a      	strb	r2, [r3, #0]
  p_time->Minutes = 0;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2200      	movs	r2, #0
 800a634:	705a      	strb	r2, [r3, #1]
  p_time->Seconds = 0;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2200      	movs	r2, #0
 800a63a:	709a      	strb	r2, [r3, #2]

  return;
 800a63c:	bf00      	nop
}
 800a63e:	370c      	adds	r7, #12
 800a640:	46bd      	mov	sp, r7
 800a642:	bc80      	pop	{r7}
 800a644:	4770      	bx	lr

0800a646 <UTI_turnRtcTimeToSeconds>:

uint32_t UTI_turnRtcTimeToSeconds(RTC_TimeTypeDef *p_time)
{
 800a646:	b480      	push	{r7}
 800a648:	b083      	sub	sp, #12
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6078      	str	r0, [r7, #4]
  return p_time->Hours * 3600 + p_time->Minutes * 60 + p_time->Seconds;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	461a      	mov	r2, r3
 800a654:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800a658:	fb03 f202 	mul.w	r2, r3, r2
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	785b      	ldrb	r3, [r3, #1]
 800a660:	4619      	mov	r1, r3
 800a662:	460b      	mov	r3, r1
 800a664:	011b      	lsls	r3, r3, #4
 800a666:	1a5b      	subs	r3, r3, r1
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	4413      	add	r3, r2
 800a66c:	687a      	ldr	r2, [r7, #4]
 800a66e:	7892      	ldrb	r2, [r2, #2]
 800a670:	4413      	add	r3, r2
}
 800a672:	4618      	mov	r0, r3
 800a674:	370c      	adds	r7, #12
 800a676:	46bd      	mov	sp, r7
 800a678:	bc80      	pop	{r7}
 800a67a:	4770      	bx	lr

0800a67c <UTI_clampIntValue>:

int32_t UTI_clampIntValue(int32_t p_value, int32_t p_minValue, int32_t p_maxValue, bool p_clampToNearest, int32_t p_clampValue)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b087      	sub	sp, #28
 800a680:	af00      	add	r7, sp, #0
 800a682:	60f8      	str	r0, [r7, #12]
 800a684:	60b9      	str	r1, [r7, #8]
 800a686:	607a      	str	r2, [r7, #4]
 800a688:	70fb      	strb	r3, [r7, #3]
  int32_t l_returnValue;

  if (p_value < p_minValue)
 800a68a:	68fa      	ldr	r2, [r7, #12]
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	429a      	cmp	r2, r3
 800a690:	da08      	bge.n	800a6a4 <UTI_clampIntValue+0x28>
  {
    if (p_clampToNearest == true)
 800a692:	78fb      	ldrb	r3, [r7, #3]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d002      	beq.n	800a69e <UTI_clampIntValue+0x22>
    {
      l_returnValue = p_minValue;
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	617b      	str	r3, [r7, #20]
 800a69c:	e011      	b.n	800a6c2 <UTI_clampIntValue+0x46>
    }
    else
    {
      l_returnValue = p_clampValue;
 800a69e:	6a3b      	ldr	r3, [r7, #32]
 800a6a0:	617b      	str	r3, [r7, #20]
 800a6a2:	e00e      	b.n	800a6c2 <UTI_clampIntValue+0x46>
    }
  }
  else if (p_value > p_maxValue)
 800a6a4:	68fa      	ldr	r2, [r7, #12]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	dd08      	ble.n	800a6be <UTI_clampIntValue+0x42>
  {
    if (p_clampToNearest == true)
 800a6ac:	78fb      	ldrb	r3, [r7, #3]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d002      	beq.n	800a6b8 <UTI_clampIntValue+0x3c>
    {
      l_returnValue = p_maxValue;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	617b      	str	r3, [r7, #20]
 800a6b6:	e004      	b.n	800a6c2 <UTI_clampIntValue+0x46>
    }
    else
    {
      l_returnValue = p_clampValue;
 800a6b8:	6a3b      	ldr	r3, [r7, #32]
 800a6ba:	617b      	str	r3, [r7, #20]
 800a6bc:	e001      	b.n	800a6c2 <UTI_clampIntValue+0x46>
    }
  }
  else
  {
    l_returnValue = p_value;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	617b      	str	r3, [r7, #20]
  }

  return l_returnValue;
 800a6c2:	697b      	ldr	r3, [r7, #20]
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	371c      	adds	r7, #28
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bc80      	pop	{r7}
 800a6cc:	4770      	bx	lr

0800a6ce <UTI_normalizeIntValue>:

int32_t UTI_normalizeIntValue(int32_t p_value, int32_t p_inMinValue, int32_t p_inMaxValue, int32_t p_outMinValue, int32_t p_outMaxValue, bool p_isInversionNeeded)
{
 800a6ce:	b5b0      	push	{r4, r5, r7, lr}
 800a6d0:	b086      	sub	sp, #24
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	60f8      	str	r0, [r7, #12]
 800a6d6:	60b9      	str	r1, [r7, #8]
 800a6d8:	607a      	str	r2, [r7, #4]
 800a6da:	603b      	str	r3, [r7, #0]
  float l_returnValue;
  float l_ratio;

  l_ratio       = ((float)p_outMaxValue - (float)p_outMinValue) / ((float)p_inMaxValue - (float)p_inMinValue);
 800a6dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6de:	f7f5 fe63 	bl	80003a8 <__aeabi_i2f>
 800a6e2:	4604      	mov	r4, r0
 800a6e4:	6838      	ldr	r0, [r7, #0]
 800a6e6:	f7f5 fe5f 	bl	80003a8 <__aeabi_i2f>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	4619      	mov	r1, r3
 800a6ee:	4620      	mov	r0, r4
 800a6f0:	f7f5 fda4 	bl	800023c <__aeabi_fsub>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	461d      	mov	r5, r3
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f7f5 fe55 	bl	80003a8 <__aeabi_i2f>
 800a6fe:	4604      	mov	r4, r0
 800a700:	68b8      	ldr	r0, [r7, #8]
 800a702:	f7f5 fe51 	bl	80003a8 <__aeabi_i2f>
 800a706:	4603      	mov	r3, r0
 800a708:	4619      	mov	r1, r3
 800a70a:	4620      	mov	r0, r4
 800a70c:	f7f5 fd96 	bl	800023c <__aeabi_fsub>
 800a710:	4603      	mov	r3, r0
 800a712:	4619      	mov	r1, r3
 800a714:	4628      	mov	r0, r5
 800a716:	f7f5 ff4f 	bl	80005b8 <__aeabi_fdiv>
 800a71a:	4603      	mov	r3, r0
 800a71c:	613b      	str	r3, [r7, #16]
  l_returnValue =  (float)(p_value - p_inMinValue) * l_ratio + p_outMinValue;
 800a71e:	68fa      	ldr	r2, [r7, #12]
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	1ad3      	subs	r3, r2, r3
 800a724:	4618      	mov	r0, r3
 800a726:	f7f5 fe3f 	bl	80003a8 <__aeabi_i2f>
 800a72a:	4603      	mov	r3, r0
 800a72c:	6939      	ldr	r1, [r7, #16]
 800a72e:	4618      	mov	r0, r3
 800a730:	f7f5 fe8e 	bl	8000450 <__aeabi_fmul>
 800a734:	4603      	mov	r3, r0
 800a736:	461c      	mov	r4, r3
 800a738:	6838      	ldr	r0, [r7, #0]
 800a73a:	f7f5 fe35 	bl	80003a8 <__aeabi_i2f>
 800a73e:	4603      	mov	r3, r0
 800a740:	4619      	mov	r1, r3
 800a742:	4620      	mov	r0, r4
 800a744:	f7f5 fd7c 	bl	8000240 <__addsf3>
 800a748:	4603      	mov	r3, r0
 800a74a:	617b      	str	r3, [r7, #20]

  if (p_isInversionNeeded == true)
 800a74c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800a750:	2b00      	cmp	r3, #0
 800a752:	d003      	beq.n	800a75c <UTI_normalizeIntValue+0x8e>
  {
    l_returnValue *= -1.0f;
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a75a:	617b      	str	r3, [r7, #20]
  else
  {
    ; /* Nothing to do */
  }

  return (int32_t)l_returnValue;
 800a75c:	6978      	ldr	r0, [r7, #20]
 800a75e:	f7f5 ffc7 	bl	80006f0 <__aeabi_f2iz>
 800a762:	4603      	mov	r3, r0
}
 800a764:	4618      	mov	r0, r3
 800a766:	3718      	adds	r7, #24
 800a768:	46bd      	mov	sp, r7
 800a76a:	bdb0      	pop	{r4, r5, r7, pc}

0800a76c <atoi>:
 800a76c:	220a      	movs	r2, #10
 800a76e:	2100      	movs	r1, #0
 800a770:	f000 b9d6 	b.w	800ab20 <strtol>

0800a774 <__errno>:
 800a774:	4b01      	ldr	r3, [pc, #4]	; (800a77c <__errno+0x8>)
 800a776:	6818      	ldr	r0, [r3, #0]
 800a778:	4770      	bx	lr
 800a77a:	bf00      	nop
 800a77c:	2000001c 	.word	0x2000001c

0800a780 <__libc_init_array>:
 800a780:	b570      	push	{r4, r5, r6, lr}
 800a782:	2600      	movs	r6, #0
 800a784:	4d0c      	ldr	r5, [pc, #48]	; (800a7b8 <__libc_init_array+0x38>)
 800a786:	4c0d      	ldr	r4, [pc, #52]	; (800a7bc <__libc_init_array+0x3c>)
 800a788:	1b64      	subs	r4, r4, r5
 800a78a:	10a4      	asrs	r4, r4, #2
 800a78c:	42a6      	cmp	r6, r4
 800a78e:	d109      	bne.n	800a7a4 <__libc_init_array+0x24>
 800a790:	f001 fa4e 	bl	800bc30 <_init>
 800a794:	2600      	movs	r6, #0
 800a796:	4d0a      	ldr	r5, [pc, #40]	; (800a7c0 <__libc_init_array+0x40>)
 800a798:	4c0a      	ldr	r4, [pc, #40]	; (800a7c4 <__libc_init_array+0x44>)
 800a79a:	1b64      	subs	r4, r4, r5
 800a79c:	10a4      	asrs	r4, r4, #2
 800a79e:	42a6      	cmp	r6, r4
 800a7a0:	d105      	bne.n	800a7ae <__libc_init_array+0x2e>
 800a7a2:	bd70      	pop	{r4, r5, r6, pc}
 800a7a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7a8:	4798      	blx	r3
 800a7aa:	3601      	adds	r6, #1
 800a7ac:	e7ee      	b.n	800a78c <__libc_init_array+0xc>
 800a7ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7b2:	4798      	blx	r3
 800a7b4:	3601      	adds	r6, #1
 800a7b6:	e7f2      	b.n	800a79e <__libc_init_array+0x1e>
 800a7b8:	0800cea4 	.word	0x0800cea4
 800a7bc:	0800cea4 	.word	0x0800cea4
 800a7c0:	0800cea4 	.word	0x0800cea4
 800a7c4:	0800cea8 	.word	0x0800cea8

0800a7c8 <malloc>:
 800a7c8:	4b02      	ldr	r3, [pc, #8]	; (800a7d4 <malloc+0xc>)
 800a7ca:	4601      	mov	r1, r0
 800a7cc:	6818      	ldr	r0, [r3, #0]
 800a7ce:	f000 b85f 	b.w	800a890 <_malloc_r>
 800a7d2:	bf00      	nop
 800a7d4:	2000001c 	.word	0x2000001c

0800a7d8 <free>:
 800a7d8:	4b02      	ldr	r3, [pc, #8]	; (800a7e4 <free+0xc>)
 800a7da:	4601      	mov	r1, r0
 800a7dc:	6818      	ldr	r0, [r3, #0]
 800a7de:	f000 b80b 	b.w	800a7f8 <_free_r>
 800a7e2:	bf00      	nop
 800a7e4:	2000001c 	.word	0x2000001c

0800a7e8 <memset>:
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	4402      	add	r2, r0
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d100      	bne.n	800a7f2 <memset+0xa>
 800a7f0:	4770      	bx	lr
 800a7f2:	f803 1b01 	strb.w	r1, [r3], #1
 800a7f6:	e7f9      	b.n	800a7ec <memset+0x4>

0800a7f8 <_free_r>:
 800a7f8:	b538      	push	{r3, r4, r5, lr}
 800a7fa:	4605      	mov	r5, r0
 800a7fc:	2900      	cmp	r1, #0
 800a7fe:	d043      	beq.n	800a888 <_free_r+0x90>
 800a800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a804:	1f0c      	subs	r4, r1, #4
 800a806:	2b00      	cmp	r3, #0
 800a808:	bfb8      	it	lt
 800a80a:	18e4      	addlt	r4, r4, r3
 800a80c:	f000 fac4 	bl	800ad98 <__malloc_lock>
 800a810:	4a1e      	ldr	r2, [pc, #120]	; (800a88c <_free_r+0x94>)
 800a812:	6813      	ldr	r3, [r2, #0]
 800a814:	4610      	mov	r0, r2
 800a816:	b933      	cbnz	r3, 800a826 <_free_r+0x2e>
 800a818:	6063      	str	r3, [r4, #4]
 800a81a:	6014      	str	r4, [r2, #0]
 800a81c:	4628      	mov	r0, r5
 800a81e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a822:	f000 babf 	b.w	800ada4 <__malloc_unlock>
 800a826:	42a3      	cmp	r3, r4
 800a828:	d90a      	bls.n	800a840 <_free_r+0x48>
 800a82a:	6821      	ldr	r1, [r4, #0]
 800a82c:	1862      	adds	r2, r4, r1
 800a82e:	4293      	cmp	r3, r2
 800a830:	bf01      	itttt	eq
 800a832:	681a      	ldreq	r2, [r3, #0]
 800a834:	685b      	ldreq	r3, [r3, #4]
 800a836:	1852      	addeq	r2, r2, r1
 800a838:	6022      	streq	r2, [r4, #0]
 800a83a:	6063      	str	r3, [r4, #4]
 800a83c:	6004      	str	r4, [r0, #0]
 800a83e:	e7ed      	b.n	800a81c <_free_r+0x24>
 800a840:	461a      	mov	r2, r3
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	b10b      	cbz	r3, 800a84a <_free_r+0x52>
 800a846:	42a3      	cmp	r3, r4
 800a848:	d9fa      	bls.n	800a840 <_free_r+0x48>
 800a84a:	6811      	ldr	r1, [r2, #0]
 800a84c:	1850      	adds	r0, r2, r1
 800a84e:	42a0      	cmp	r0, r4
 800a850:	d10b      	bne.n	800a86a <_free_r+0x72>
 800a852:	6820      	ldr	r0, [r4, #0]
 800a854:	4401      	add	r1, r0
 800a856:	1850      	adds	r0, r2, r1
 800a858:	4283      	cmp	r3, r0
 800a85a:	6011      	str	r1, [r2, #0]
 800a85c:	d1de      	bne.n	800a81c <_free_r+0x24>
 800a85e:	6818      	ldr	r0, [r3, #0]
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	4401      	add	r1, r0
 800a864:	6011      	str	r1, [r2, #0]
 800a866:	6053      	str	r3, [r2, #4]
 800a868:	e7d8      	b.n	800a81c <_free_r+0x24>
 800a86a:	d902      	bls.n	800a872 <_free_r+0x7a>
 800a86c:	230c      	movs	r3, #12
 800a86e:	602b      	str	r3, [r5, #0]
 800a870:	e7d4      	b.n	800a81c <_free_r+0x24>
 800a872:	6820      	ldr	r0, [r4, #0]
 800a874:	1821      	adds	r1, r4, r0
 800a876:	428b      	cmp	r3, r1
 800a878:	bf01      	itttt	eq
 800a87a:	6819      	ldreq	r1, [r3, #0]
 800a87c:	685b      	ldreq	r3, [r3, #4]
 800a87e:	1809      	addeq	r1, r1, r0
 800a880:	6021      	streq	r1, [r4, #0]
 800a882:	6063      	str	r3, [r4, #4]
 800a884:	6054      	str	r4, [r2, #4]
 800a886:	e7c9      	b.n	800a81c <_free_r+0x24>
 800a888:	bd38      	pop	{r3, r4, r5, pc}
 800a88a:	bf00      	nop
 800a88c:	20000298 	.word	0x20000298

0800a890 <_malloc_r>:
 800a890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a892:	1ccd      	adds	r5, r1, #3
 800a894:	f025 0503 	bic.w	r5, r5, #3
 800a898:	3508      	adds	r5, #8
 800a89a:	2d0c      	cmp	r5, #12
 800a89c:	bf38      	it	cc
 800a89e:	250c      	movcc	r5, #12
 800a8a0:	2d00      	cmp	r5, #0
 800a8a2:	4606      	mov	r6, r0
 800a8a4:	db01      	blt.n	800a8aa <_malloc_r+0x1a>
 800a8a6:	42a9      	cmp	r1, r5
 800a8a8:	d903      	bls.n	800a8b2 <_malloc_r+0x22>
 800a8aa:	230c      	movs	r3, #12
 800a8ac:	6033      	str	r3, [r6, #0]
 800a8ae:	2000      	movs	r0, #0
 800a8b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8b2:	f000 fa71 	bl	800ad98 <__malloc_lock>
 800a8b6:	4921      	ldr	r1, [pc, #132]	; (800a93c <_malloc_r+0xac>)
 800a8b8:	680a      	ldr	r2, [r1, #0]
 800a8ba:	4614      	mov	r4, r2
 800a8bc:	b99c      	cbnz	r4, 800a8e6 <_malloc_r+0x56>
 800a8be:	4f20      	ldr	r7, [pc, #128]	; (800a940 <_malloc_r+0xb0>)
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	b923      	cbnz	r3, 800a8ce <_malloc_r+0x3e>
 800a8c4:	4621      	mov	r1, r4
 800a8c6:	4630      	mov	r0, r6
 800a8c8:	f000 f854 	bl	800a974 <_sbrk_r>
 800a8cc:	6038      	str	r0, [r7, #0]
 800a8ce:	4629      	mov	r1, r5
 800a8d0:	4630      	mov	r0, r6
 800a8d2:	f000 f84f 	bl	800a974 <_sbrk_r>
 800a8d6:	1c43      	adds	r3, r0, #1
 800a8d8:	d123      	bne.n	800a922 <_malloc_r+0x92>
 800a8da:	230c      	movs	r3, #12
 800a8dc:	4630      	mov	r0, r6
 800a8de:	6033      	str	r3, [r6, #0]
 800a8e0:	f000 fa60 	bl	800ada4 <__malloc_unlock>
 800a8e4:	e7e3      	b.n	800a8ae <_malloc_r+0x1e>
 800a8e6:	6823      	ldr	r3, [r4, #0]
 800a8e8:	1b5b      	subs	r3, r3, r5
 800a8ea:	d417      	bmi.n	800a91c <_malloc_r+0x8c>
 800a8ec:	2b0b      	cmp	r3, #11
 800a8ee:	d903      	bls.n	800a8f8 <_malloc_r+0x68>
 800a8f0:	6023      	str	r3, [r4, #0]
 800a8f2:	441c      	add	r4, r3
 800a8f4:	6025      	str	r5, [r4, #0]
 800a8f6:	e004      	b.n	800a902 <_malloc_r+0x72>
 800a8f8:	6863      	ldr	r3, [r4, #4]
 800a8fa:	42a2      	cmp	r2, r4
 800a8fc:	bf0c      	ite	eq
 800a8fe:	600b      	streq	r3, [r1, #0]
 800a900:	6053      	strne	r3, [r2, #4]
 800a902:	4630      	mov	r0, r6
 800a904:	f000 fa4e 	bl	800ada4 <__malloc_unlock>
 800a908:	f104 000b 	add.w	r0, r4, #11
 800a90c:	1d23      	adds	r3, r4, #4
 800a90e:	f020 0007 	bic.w	r0, r0, #7
 800a912:	1ac2      	subs	r2, r0, r3
 800a914:	d0cc      	beq.n	800a8b0 <_malloc_r+0x20>
 800a916:	1a1b      	subs	r3, r3, r0
 800a918:	50a3      	str	r3, [r4, r2]
 800a91a:	e7c9      	b.n	800a8b0 <_malloc_r+0x20>
 800a91c:	4622      	mov	r2, r4
 800a91e:	6864      	ldr	r4, [r4, #4]
 800a920:	e7cc      	b.n	800a8bc <_malloc_r+0x2c>
 800a922:	1cc4      	adds	r4, r0, #3
 800a924:	f024 0403 	bic.w	r4, r4, #3
 800a928:	42a0      	cmp	r0, r4
 800a92a:	d0e3      	beq.n	800a8f4 <_malloc_r+0x64>
 800a92c:	1a21      	subs	r1, r4, r0
 800a92e:	4630      	mov	r0, r6
 800a930:	f000 f820 	bl	800a974 <_sbrk_r>
 800a934:	3001      	adds	r0, #1
 800a936:	d1dd      	bne.n	800a8f4 <_malloc_r+0x64>
 800a938:	e7cf      	b.n	800a8da <_malloc_r+0x4a>
 800a93a:	bf00      	nop
 800a93c:	20000298 	.word	0x20000298
 800a940:	2000029c 	.word	0x2000029c

0800a944 <iprintf>:
 800a944:	b40f      	push	{r0, r1, r2, r3}
 800a946:	4b0a      	ldr	r3, [pc, #40]	; (800a970 <iprintf+0x2c>)
 800a948:	b513      	push	{r0, r1, r4, lr}
 800a94a:	681c      	ldr	r4, [r3, #0]
 800a94c:	b124      	cbz	r4, 800a958 <iprintf+0x14>
 800a94e:	69a3      	ldr	r3, [r4, #24]
 800a950:	b913      	cbnz	r3, 800a958 <iprintf+0x14>
 800a952:	4620      	mov	r0, r4
 800a954:	f000 f980 	bl	800ac58 <__sinit>
 800a958:	ab05      	add	r3, sp, #20
 800a95a:	4620      	mov	r0, r4
 800a95c:	9a04      	ldr	r2, [sp, #16]
 800a95e:	68a1      	ldr	r1, [r4, #8]
 800a960:	9301      	str	r3, [sp, #4]
 800a962:	f000 fba9 	bl	800b0b8 <_vfiprintf_r>
 800a966:	b002      	add	sp, #8
 800a968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a96c:	b004      	add	sp, #16
 800a96e:	4770      	bx	lr
 800a970:	2000001c 	.word	0x2000001c

0800a974 <_sbrk_r>:
 800a974:	b538      	push	{r3, r4, r5, lr}
 800a976:	2300      	movs	r3, #0
 800a978:	4d05      	ldr	r5, [pc, #20]	; (800a990 <_sbrk_r+0x1c>)
 800a97a:	4604      	mov	r4, r0
 800a97c:	4608      	mov	r0, r1
 800a97e:	602b      	str	r3, [r5, #0]
 800a980:	f7f7 faac 	bl	8001edc <_sbrk>
 800a984:	1c43      	adds	r3, r0, #1
 800a986:	d102      	bne.n	800a98e <_sbrk_r+0x1a>
 800a988:	682b      	ldr	r3, [r5, #0]
 800a98a:	b103      	cbz	r3, 800a98e <_sbrk_r+0x1a>
 800a98c:	6023      	str	r3, [r4, #0]
 800a98e:	bd38      	pop	{r3, r4, r5, pc}
 800a990:	2000097c 	.word	0x2000097c

0800a994 <siprintf>:
 800a994:	b40e      	push	{r1, r2, r3}
 800a996:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a99a:	b500      	push	{lr}
 800a99c:	b09c      	sub	sp, #112	; 0x70
 800a99e:	ab1d      	add	r3, sp, #116	; 0x74
 800a9a0:	9002      	str	r0, [sp, #8]
 800a9a2:	9006      	str	r0, [sp, #24]
 800a9a4:	9107      	str	r1, [sp, #28]
 800a9a6:	9104      	str	r1, [sp, #16]
 800a9a8:	4808      	ldr	r0, [pc, #32]	; (800a9cc <siprintf+0x38>)
 800a9aa:	4909      	ldr	r1, [pc, #36]	; (800a9d0 <siprintf+0x3c>)
 800a9ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9b0:	9105      	str	r1, [sp, #20]
 800a9b2:	6800      	ldr	r0, [r0, #0]
 800a9b4:	a902      	add	r1, sp, #8
 800a9b6:	9301      	str	r3, [sp, #4]
 800a9b8:	f000 fa56 	bl	800ae68 <_svfiprintf_r>
 800a9bc:	2200      	movs	r2, #0
 800a9be:	9b02      	ldr	r3, [sp, #8]
 800a9c0:	701a      	strb	r2, [r3, #0]
 800a9c2:	b01c      	add	sp, #112	; 0x70
 800a9c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9c8:	b003      	add	sp, #12
 800a9ca:	4770      	bx	lr
 800a9cc:	2000001c 	.word	0x2000001c
 800a9d0:	ffff0208 	.word	0xffff0208

0800a9d4 <strncpy>:
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	b510      	push	{r4, lr}
 800a9d8:	3901      	subs	r1, #1
 800a9da:	b132      	cbz	r2, 800a9ea <strncpy+0x16>
 800a9dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a9e0:	3a01      	subs	r2, #1
 800a9e2:	f803 4b01 	strb.w	r4, [r3], #1
 800a9e6:	2c00      	cmp	r4, #0
 800a9e8:	d1f7      	bne.n	800a9da <strncpy+0x6>
 800a9ea:	2100      	movs	r1, #0
 800a9ec:	441a      	add	r2, r3
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d100      	bne.n	800a9f4 <strncpy+0x20>
 800a9f2:	bd10      	pop	{r4, pc}
 800a9f4:	f803 1b01 	strb.w	r1, [r3], #1
 800a9f8:	e7f9      	b.n	800a9ee <strncpy+0x1a>

0800a9fa <strnlen>:
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	b510      	push	{r4, lr}
 800a9fe:	4401      	add	r1, r0
 800aa00:	428a      	cmp	r2, r1
 800aa02:	4613      	mov	r3, r2
 800aa04:	d101      	bne.n	800aa0a <strnlen+0x10>
 800aa06:	1a18      	subs	r0, r3, r0
 800aa08:	bd10      	pop	{r4, pc}
 800aa0a:	781c      	ldrb	r4, [r3, #0]
 800aa0c:	3201      	adds	r2, #1
 800aa0e:	2c00      	cmp	r4, #0
 800aa10:	d1f6      	bne.n	800aa00 <strnlen+0x6>
 800aa12:	e7f8      	b.n	800aa06 <strnlen+0xc>

0800aa14 <_strtol_l.isra.0>:
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa1a:	4686      	mov	lr, r0
 800aa1c:	d001      	beq.n	800aa22 <_strtol_l.isra.0+0xe>
 800aa1e:	2b24      	cmp	r3, #36	; 0x24
 800aa20:	d906      	bls.n	800aa30 <_strtol_l.isra.0+0x1c>
 800aa22:	f7ff fea7 	bl	800a774 <__errno>
 800aa26:	2316      	movs	r3, #22
 800aa28:	6003      	str	r3, [r0, #0]
 800aa2a:	2000      	movs	r0, #0
 800aa2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa30:	468c      	mov	ip, r1
 800aa32:	4e3a      	ldr	r6, [pc, #232]	; (800ab1c <_strtol_l.isra.0+0x108>)
 800aa34:	4660      	mov	r0, ip
 800aa36:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800aa3a:	5da5      	ldrb	r5, [r4, r6]
 800aa3c:	f015 0508 	ands.w	r5, r5, #8
 800aa40:	d1f8      	bne.n	800aa34 <_strtol_l.isra.0+0x20>
 800aa42:	2c2d      	cmp	r4, #45	; 0x2d
 800aa44:	d133      	bne.n	800aaae <_strtol_l.isra.0+0x9a>
 800aa46:	f04f 0801 	mov.w	r8, #1
 800aa4a:	f89c 4000 	ldrb.w	r4, [ip]
 800aa4e:	f100 0c02 	add.w	ip, r0, #2
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d05d      	beq.n	800ab12 <_strtol_l.isra.0+0xfe>
 800aa56:	2b10      	cmp	r3, #16
 800aa58:	d10c      	bne.n	800aa74 <_strtol_l.isra.0+0x60>
 800aa5a:	2c30      	cmp	r4, #48	; 0x30
 800aa5c:	d10a      	bne.n	800aa74 <_strtol_l.isra.0+0x60>
 800aa5e:	f89c 0000 	ldrb.w	r0, [ip]
 800aa62:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800aa66:	2858      	cmp	r0, #88	; 0x58
 800aa68:	d14e      	bne.n	800ab08 <_strtol_l.isra.0+0xf4>
 800aa6a:	2310      	movs	r3, #16
 800aa6c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800aa70:	f10c 0c02 	add.w	ip, ip, #2
 800aa74:	2500      	movs	r5, #0
 800aa76:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800aa7a:	3f01      	subs	r7, #1
 800aa7c:	fbb7 f9f3 	udiv	r9, r7, r3
 800aa80:	4628      	mov	r0, r5
 800aa82:	fb03 7a19 	mls	sl, r3, r9, r7
 800aa86:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800aa8a:	2e09      	cmp	r6, #9
 800aa8c:	d818      	bhi.n	800aac0 <_strtol_l.isra.0+0xac>
 800aa8e:	4634      	mov	r4, r6
 800aa90:	42a3      	cmp	r3, r4
 800aa92:	dd24      	ble.n	800aade <_strtol_l.isra.0+0xca>
 800aa94:	2d00      	cmp	r5, #0
 800aa96:	db1f      	blt.n	800aad8 <_strtol_l.isra.0+0xc4>
 800aa98:	4581      	cmp	r9, r0
 800aa9a:	d31d      	bcc.n	800aad8 <_strtol_l.isra.0+0xc4>
 800aa9c:	d101      	bne.n	800aaa2 <_strtol_l.isra.0+0x8e>
 800aa9e:	45a2      	cmp	sl, r4
 800aaa0:	db1a      	blt.n	800aad8 <_strtol_l.isra.0+0xc4>
 800aaa2:	2501      	movs	r5, #1
 800aaa4:	fb00 4003 	mla	r0, r0, r3, r4
 800aaa8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800aaac:	e7eb      	b.n	800aa86 <_strtol_l.isra.0+0x72>
 800aaae:	2c2b      	cmp	r4, #43	; 0x2b
 800aab0:	bf08      	it	eq
 800aab2:	f89c 4000 	ldrbeq.w	r4, [ip]
 800aab6:	46a8      	mov	r8, r5
 800aab8:	bf08      	it	eq
 800aaba:	f100 0c02 	addeq.w	ip, r0, #2
 800aabe:	e7c8      	b.n	800aa52 <_strtol_l.isra.0+0x3e>
 800aac0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800aac4:	2e19      	cmp	r6, #25
 800aac6:	d801      	bhi.n	800aacc <_strtol_l.isra.0+0xb8>
 800aac8:	3c37      	subs	r4, #55	; 0x37
 800aaca:	e7e1      	b.n	800aa90 <_strtol_l.isra.0+0x7c>
 800aacc:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800aad0:	2e19      	cmp	r6, #25
 800aad2:	d804      	bhi.n	800aade <_strtol_l.isra.0+0xca>
 800aad4:	3c57      	subs	r4, #87	; 0x57
 800aad6:	e7db      	b.n	800aa90 <_strtol_l.isra.0+0x7c>
 800aad8:	f04f 35ff 	mov.w	r5, #4294967295
 800aadc:	e7e4      	b.n	800aaa8 <_strtol_l.isra.0+0x94>
 800aade:	2d00      	cmp	r5, #0
 800aae0:	da08      	bge.n	800aaf4 <_strtol_l.isra.0+0xe0>
 800aae2:	2322      	movs	r3, #34	; 0x22
 800aae4:	4638      	mov	r0, r7
 800aae6:	f8ce 3000 	str.w	r3, [lr]
 800aaea:	2a00      	cmp	r2, #0
 800aaec:	d09e      	beq.n	800aa2c <_strtol_l.isra.0+0x18>
 800aaee:	f10c 31ff 	add.w	r1, ip, #4294967295
 800aaf2:	e007      	b.n	800ab04 <_strtol_l.isra.0+0xf0>
 800aaf4:	f1b8 0f00 	cmp.w	r8, #0
 800aaf8:	d000      	beq.n	800aafc <_strtol_l.isra.0+0xe8>
 800aafa:	4240      	negs	r0, r0
 800aafc:	2a00      	cmp	r2, #0
 800aafe:	d095      	beq.n	800aa2c <_strtol_l.isra.0+0x18>
 800ab00:	2d00      	cmp	r5, #0
 800ab02:	d1f4      	bne.n	800aaee <_strtol_l.isra.0+0xda>
 800ab04:	6011      	str	r1, [r2, #0]
 800ab06:	e791      	b.n	800aa2c <_strtol_l.isra.0+0x18>
 800ab08:	2430      	movs	r4, #48	; 0x30
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d1b2      	bne.n	800aa74 <_strtol_l.isra.0+0x60>
 800ab0e:	2308      	movs	r3, #8
 800ab10:	e7b0      	b.n	800aa74 <_strtol_l.isra.0+0x60>
 800ab12:	2c30      	cmp	r4, #48	; 0x30
 800ab14:	d0a3      	beq.n	800aa5e <_strtol_l.isra.0+0x4a>
 800ab16:	230a      	movs	r3, #10
 800ab18:	e7ac      	b.n	800aa74 <_strtol_l.isra.0+0x60>
 800ab1a:	bf00      	nop
 800ab1c:	0800cd0d 	.word	0x0800cd0d

0800ab20 <strtol>:
 800ab20:	4613      	mov	r3, r2
 800ab22:	460a      	mov	r2, r1
 800ab24:	4601      	mov	r1, r0
 800ab26:	4802      	ldr	r0, [pc, #8]	; (800ab30 <strtol+0x10>)
 800ab28:	6800      	ldr	r0, [r0, #0]
 800ab2a:	f7ff bf73 	b.w	800aa14 <_strtol_l.isra.0>
 800ab2e:	bf00      	nop
 800ab30:	2000001c 	.word	0x2000001c

0800ab34 <_vsniprintf_r>:
 800ab34:	b530      	push	{r4, r5, lr}
 800ab36:	1e14      	subs	r4, r2, #0
 800ab38:	4605      	mov	r5, r0
 800ab3a:	b09b      	sub	sp, #108	; 0x6c
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	da05      	bge.n	800ab4c <_vsniprintf_r+0x18>
 800ab40:	238b      	movs	r3, #139	; 0x8b
 800ab42:	f04f 30ff 	mov.w	r0, #4294967295
 800ab46:	602b      	str	r3, [r5, #0]
 800ab48:	b01b      	add	sp, #108	; 0x6c
 800ab4a:	bd30      	pop	{r4, r5, pc}
 800ab4c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ab50:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ab54:	bf0c      	ite	eq
 800ab56:	4623      	moveq	r3, r4
 800ab58:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ab5c:	9302      	str	r3, [sp, #8]
 800ab5e:	9305      	str	r3, [sp, #20]
 800ab60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab64:	4602      	mov	r2, r0
 800ab66:	9100      	str	r1, [sp, #0]
 800ab68:	9104      	str	r1, [sp, #16]
 800ab6a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ab6e:	4669      	mov	r1, sp
 800ab70:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ab72:	4628      	mov	r0, r5
 800ab74:	f000 f978 	bl	800ae68 <_svfiprintf_r>
 800ab78:	1c43      	adds	r3, r0, #1
 800ab7a:	bfbc      	itt	lt
 800ab7c:	238b      	movlt	r3, #139	; 0x8b
 800ab7e:	602b      	strlt	r3, [r5, #0]
 800ab80:	2c00      	cmp	r4, #0
 800ab82:	d0e1      	beq.n	800ab48 <_vsniprintf_r+0x14>
 800ab84:	2200      	movs	r2, #0
 800ab86:	9b00      	ldr	r3, [sp, #0]
 800ab88:	701a      	strb	r2, [r3, #0]
 800ab8a:	e7dd      	b.n	800ab48 <_vsniprintf_r+0x14>

0800ab8c <vsniprintf>:
 800ab8c:	b507      	push	{r0, r1, r2, lr}
 800ab8e:	9300      	str	r3, [sp, #0]
 800ab90:	4613      	mov	r3, r2
 800ab92:	460a      	mov	r2, r1
 800ab94:	4601      	mov	r1, r0
 800ab96:	4803      	ldr	r0, [pc, #12]	; (800aba4 <vsniprintf+0x18>)
 800ab98:	6800      	ldr	r0, [r0, #0]
 800ab9a:	f7ff ffcb 	bl	800ab34 <_vsniprintf_r>
 800ab9e:	b003      	add	sp, #12
 800aba0:	f85d fb04 	ldr.w	pc, [sp], #4
 800aba4:	2000001c 	.word	0x2000001c

0800aba8 <std>:
 800aba8:	2300      	movs	r3, #0
 800abaa:	b510      	push	{r4, lr}
 800abac:	4604      	mov	r4, r0
 800abae:	e9c0 3300 	strd	r3, r3, [r0]
 800abb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800abb6:	6083      	str	r3, [r0, #8]
 800abb8:	8181      	strh	r1, [r0, #12]
 800abba:	6643      	str	r3, [r0, #100]	; 0x64
 800abbc:	81c2      	strh	r2, [r0, #14]
 800abbe:	6183      	str	r3, [r0, #24]
 800abc0:	4619      	mov	r1, r3
 800abc2:	2208      	movs	r2, #8
 800abc4:	305c      	adds	r0, #92	; 0x5c
 800abc6:	f7ff fe0f 	bl	800a7e8 <memset>
 800abca:	4b05      	ldr	r3, [pc, #20]	; (800abe0 <std+0x38>)
 800abcc:	6224      	str	r4, [r4, #32]
 800abce:	6263      	str	r3, [r4, #36]	; 0x24
 800abd0:	4b04      	ldr	r3, [pc, #16]	; (800abe4 <std+0x3c>)
 800abd2:	62a3      	str	r3, [r4, #40]	; 0x28
 800abd4:	4b04      	ldr	r3, [pc, #16]	; (800abe8 <std+0x40>)
 800abd6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800abd8:	4b04      	ldr	r3, [pc, #16]	; (800abec <std+0x44>)
 800abda:	6323      	str	r3, [r4, #48]	; 0x30
 800abdc:	bd10      	pop	{r4, pc}
 800abde:	bf00      	nop
 800abe0:	0800b645 	.word	0x0800b645
 800abe4:	0800b667 	.word	0x0800b667
 800abe8:	0800b69f 	.word	0x0800b69f
 800abec:	0800b6c3 	.word	0x0800b6c3

0800abf0 <_cleanup_r>:
 800abf0:	4901      	ldr	r1, [pc, #4]	; (800abf8 <_cleanup_r+0x8>)
 800abf2:	f000 b8af 	b.w	800ad54 <_fwalk_reent>
 800abf6:	bf00      	nop
 800abf8:	0800b99d 	.word	0x0800b99d

0800abfc <__sfmoreglue>:
 800abfc:	b570      	push	{r4, r5, r6, lr}
 800abfe:	2568      	movs	r5, #104	; 0x68
 800ac00:	1e4a      	subs	r2, r1, #1
 800ac02:	4355      	muls	r5, r2
 800ac04:	460e      	mov	r6, r1
 800ac06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ac0a:	f7ff fe41 	bl	800a890 <_malloc_r>
 800ac0e:	4604      	mov	r4, r0
 800ac10:	b140      	cbz	r0, 800ac24 <__sfmoreglue+0x28>
 800ac12:	2100      	movs	r1, #0
 800ac14:	e9c0 1600 	strd	r1, r6, [r0]
 800ac18:	300c      	adds	r0, #12
 800ac1a:	60a0      	str	r0, [r4, #8]
 800ac1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ac20:	f7ff fde2 	bl	800a7e8 <memset>
 800ac24:	4620      	mov	r0, r4
 800ac26:	bd70      	pop	{r4, r5, r6, pc}

0800ac28 <__sfp_lock_acquire>:
 800ac28:	4801      	ldr	r0, [pc, #4]	; (800ac30 <__sfp_lock_acquire+0x8>)
 800ac2a:	f000 b8b3 	b.w	800ad94 <__retarget_lock_acquire_recursive>
 800ac2e:	bf00      	nop
 800ac30:	20000978 	.word	0x20000978

0800ac34 <__sfp_lock_release>:
 800ac34:	4801      	ldr	r0, [pc, #4]	; (800ac3c <__sfp_lock_release+0x8>)
 800ac36:	f000 b8ae 	b.w	800ad96 <__retarget_lock_release_recursive>
 800ac3a:	bf00      	nop
 800ac3c:	20000978 	.word	0x20000978

0800ac40 <__sinit_lock_acquire>:
 800ac40:	4801      	ldr	r0, [pc, #4]	; (800ac48 <__sinit_lock_acquire+0x8>)
 800ac42:	f000 b8a7 	b.w	800ad94 <__retarget_lock_acquire_recursive>
 800ac46:	bf00      	nop
 800ac48:	20000973 	.word	0x20000973

0800ac4c <__sinit_lock_release>:
 800ac4c:	4801      	ldr	r0, [pc, #4]	; (800ac54 <__sinit_lock_release+0x8>)
 800ac4e:	f000 b8a2 	b.w	800ad96 <__retarget_lock_release_recursive>
 800ac52:	bf00      	nop
 800ac54:	20000973 	.word	0x20000973

0800ac58 <__sinit>:
 800ac58:	b510      	push	{r4, lr}
 800ac5a:	4604      	mov	r4, r0
 800ac5c:	f7ff fff0 	bl	800ac40 <__sinit_lock_acquire>
 800ac60:	69a3      	ldr	r3, [r4, #24]
 800ac62:	b11b      	cbz	r3, 800ac6c <__sinit+0x14>
 800ac64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac68:	f7ff bff0 	b.w	800ac4c <__sinit_lock_release>
 800ac6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ac70:	6523      	str	r3, [r4, #80]	; 0x50
 800ac72:	4b13      	ldr	r3, [pc, #76]	; (800acc0 <__sinit+0x68>)
 800ac74:	4a13      	ldr	r2, [pc, #76]	; (800acc4 <__sinit+0x6c>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	62a2      	str	r2, [r4, #40]	; 0x28
 800ac7a:	42a3      	cmp	r3, r4
 800ac7c:	bf08      	it	eq
 800ac7e:	2301      	moveq	r3, #1
 800ac80:	4620      	mov	r0, r4
 800ac82:	bf08      	it	eq
 800ac84:	61a3      	streq	r3, [r4, #24]
 800ac86:	f000 f81f 	bl	800acc8 <__sfp>
 800ac8a:	6060      	str	r0, [r4, #4]
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	f000 f81b 	bl	800acc8 <__sfp>
 800ac92:	60a0      	str	r0, [r4, #8]
 800ac94:	4620      	mov	r0, r4
 800ac96:	f000 f817 	bl	800acc8 <__sfp>
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	2104      	movs	r1, #4
 800ac9e:	60e0      	str	r0, [r4, #12]
 800aca0:	6860      	ldr	r0, [r4, #4]
 800aca2:	f7ff ff81 	bl	800aba8 <std>
 800aca6:	2201      	movs	r2, #1
 800aca8:	2109      	movs	r1, #9
 800acaa:	68a0      	ldr	r0, [r4, #8]
 800acac:	f7ff ff7c 	bl	800aba8 <std>
 800acb0:	2202      	movs	r2, #2
 800acb2:	2112      	movs	r1, #18
 800acb4:	68e0      	ldr	r0, [r4, #12]
 800acb6:	f7ff ff77 	bl	800aba8 <std>
 800acba:	2301      	movs	r3, #1
 800acbc:	61a3      	str	r3, [r4, #24]
 800acbe:	e7d1      	b.n	800ac64 <__sinit+0xc>
 800acc0:	0800cd08 	.word	0x0800cd08
 800acc4:	0800abf1 	.word	0x0800abf1

0800acc8 <__sfp>:
 800acc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acca:	4607      	mov	r7, r0
 800accc:	f7ff ffac 	bl	800ac28 <__sfp_lock_acquire>
 800acd0:	4b1e      	ldr	r3, [pc, #120]	; (800ad4c <__sfp+0x84>)
 800acd2:	681e      	ldr	r6, [r3, #0]
 800acd4:	69b3      	ldr	r3, [r6, #24]
 800acd6:	b913      	cbnz	r3, 800acde <__sfp+0x16>
 800acd8:	4630      	mov	r0, r6
 800acda:	f7ff ffbd 	bl	800ac58 <__sinit>
 800acde:	3648      	adds	r6, #72	; 0x48
 800ace0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ace4:	3b01      	subs	r3, #1
 800ace6:	d503      	bpl.n	800acf0 <__sfp+0x28>
 800ace8:	6833      	ldr	r3, [r6, #0]
 800acea:	b30b      	cbz	r3, 800ad30 <__sfp+0x68>
 800acec:	6836      	ldr	r6, [r6, #0]
 800acee:	e7f7      	b.n	800ace0 <__sfp+0x18>
 800acf0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800acf4:	b9d5      	cbnz	r5, 800ad2c <__sfp+0x64>
 800acf6:	4b16      	ldr	r3, [pc, #88]	; (800ad50 <__sfp+0x88>)
 800acf8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800acfc:	60e3      	str	r3, [r4, #12]
 800acfe:	6665      	str	r5, [r4, #100]	; 0x64
 800ad00:	f000 f847 	bl	800ad92 <__retarget_lock_init_recursive>
 800ad04:	f7ff ff96 	bl	800ac34 <__sfp_lock_release>
 800ad08:	2208      	movs	r2, #8
 800ad0a:	4629      	mov	r1, r5
 800ad0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ad10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ad14:	6025      	str	r5, [r4, #0]
 800ad16:	61a5      	str	r5, [r4, #24]
 800ad18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ad1c:	f7ff fd64 	bl	800a7e8 <memset>
 800ad20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ad24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ad28:	4620      	mov	r0, r4
 800ad2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad2c:	3468      	adds	r4, #104	; 0x68
 800ad2e:	e7d9      	b.n	800ace4 <__sfp+0x1c>
 800ad30:	2104      	movs	r1, #4
 800ad32:	4638      	mov	r0, r7
 800ad34:	f7ff ff62 	bl	800abfc <__sfmoreglue>
 800ad38:	4604      	mov	r4, r0
 800ad3a:	6030      	str	r0, [r6, #0]
 800ad3c:	2800      	cmp	r0, #0
 800ad3e:	d1d5      	bne.n	800acec <__sfp+0x24>
 800ad40:	f7ff ff78 	bl	800ac34 <__sfp_lock_release>
 800ad44:	230c      	movs	r3, #12
 800ad46:	603b      	str	r3, [r7, #0]
 800ad48:	e7ee      	b.n	800ad28 <__sfp+0x60>
 800ad4a:	bf00      	nop
 800ad4c:	0800cd08 	.word	0x0800cd08
 800ad50:	ffff0001 	.word	0xffff0001

0800ad54 <_fwalk_reent>:
 800ad54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad58:	4606      	mov	r6, r0
 800ad5a:	4688      	mov	r8, r1
 800ad5c:	2700      	movs	r7, #0
 800ad5e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ad62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad66:	f1b9 0901 	subs.w	r9, r9, #1
 800ad6a:	d505      	bpl.n	800ad78 <_fwalk_reent+0x24>
 800ad6c:	6824      	ldr	r4, [r4, #0]
 800ad6e:	2c00      	cmp	r4, #0
 800ad70:	d1f7      	bne.n	800ad62 <_fwalk_reent+0xe>
 800ad72:	4638      	mov	r0, r7
 800ad74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad78:	89ab      	ldrh	r3, [r5, #12]
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d907      	bls.n	800ad8e <_fwalk_reent+0x3a>
 800ad7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad82:	3301      	adds	r3, #1
 800ad84:	d003      	beq.n	800ad8e <_fwalk_reent+0x3a>
 800ad86:	4629      	mov	r1, r5
 800ad88:	4630      	mov	r0, r6
 800ad8a:	47c0      	blx	r8
 800ad8c:	4307      	orrs	r7, r0
 800ad8e:	3568      	adds	r5, #104	; 0x68
 800ad90:	e7e9      	b.n	800ad66 <_fwalk_reent+0x12>

0800ad92 <__retarget_lock_init_recursive>:
 800ad92:	4770      	bx	lr

0800ad94 <__retarget_lock_acquire_recursive>:
 800ad94:	4770      	bx	lr

0800ad96 <__retarget_lock_release_recursive>:
 800ad96:	4770      	bx	lr

0800ad98 <__malloc_lock>:
 800ad98:	4801      	ldr	r0, [pc, #4]	; (800ada0 <__malloc_lock+0x8>)
 800ad9a:	f7ff bffb 	b.w	800ad94 <__retarget_lock_acquire_recursive>
 800ad9e:	bf00      	nop
 800ada0:	20000974 	.word	0x20000974

0800ada4 <__malloc_unlock>:
 800ada4:	4801      	ldr	r0, [pc, #4]	; (800adac <__malloc_unlock+0x8>)
 800ada6:	f7ff bff6 	b.w	800ad96 <__retarget_lock_release_recursive>
 800adaa:	bf00      	nop
 800adac:	20000974 	.word	0x20000974

0800adb0 <__ssputs_r>:
 800adb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adb4:	688e      	ldr	r6, [r1, #8]
 800adb6:	4682      	mov	sl, r0
 800adb8:	429e      	cmp	r6, r3
 800adba:	460c      	mov	r4, r1
 800adbc:	4690      	mov	r8, r2
 800adbe:	461f      	mov	r7, r3
 800adc0:	d838      	bhi.n	800ae34 <__ssputs_r+0x84>
 800adc2:	898a      	ldrh	r2, [r1, #12]
 800adc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800adc8:	d032      	beq.n	800ae30 <__ssputs_r+0x80>
 800adca:	6825      	ldr	r5, [r4, #0]
 800adcc:	6909      	ldr	r1, [r1, #16]
 800adce:	3301      	adds	r3, #1
 800add0:	eba5 0901 	sub.w	r9, r5, r1
 800add4:	6965      	ldr	r5, [r4, #20]
 800add6:	444b      	add	r3, r9
 800add8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800addc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ade0:	106d      	asrs	r5, r5, #1
 800ade2:	429d      	cmp	r5, r3
 800ade4:	bf38      	it	cc
 800ade6:	461d      	movcc	r5, r3
 800ade8:	0553      	lsls	r3, r2, #21
 800adea:	d531      	bpl.n	800ae50 <__ssputs_r+0xa0>
 800adec:	4629      	mov	r1, r5
 800adee:	f7ff fd4f 	bl	800a890 <_malloc_r>
 800adf2:	4606      	mov	r6, r0
 800adf4:	b950      	cbnz	r0, 800ae0c <__ssputs_r+0x5c>
 800adf6:	230c      	movs	r3, #12
 800adf8:	f04f 30ff 	mov.w	r0, #4294967295
 800adfc:	f8ca 3000 	str.w	r3, [sl]
 800ae00:	89a3      	ldrh	r3, [r4, #12]
 800ae02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae06:	81a3      	strh	r3, [r4, #12]
 800ae08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae0c:	464a      	mov	r2, r9
 800ae0e:	6921      	ldr	r1, [r4, #16]
 800ae10:	f000 fe84 	bl	800bb1c <memcpy>
 800ae14:	89a3      	ldrh	r3, [r4, #12]
 800ae16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ae1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae1e:	81a3      	strh	r3, [r4, #12]
 800ae20:	6126      	str	r6, [r4, #16]
 800ae22:	444e      	add	r6, r9
 800ae24:	6026      	str	r6, [r4, #0]
 800ae26:	463e      	mov	r6, r7
 800ae28:	6165      	str	r5, [r4, #20]
 800ae2a:	eba5 0509 	sub.w	r5, r5, r9
 800ae2e:	60a5      	str	r5, [r4, #8]
 800ae30:	42be      	cmp	r6, r7
 800ae32:	d900      	bls.n	800ae36 <__ssputs_r+0x86>
 800ae34:	463e      	mov	r6, r7
 800ae36:	4632      	mov	r2, r6
 800ae38:	4641      	mov	r1, r8
 800ae3a:	6820      	ldr	r0, [r4, #0]
 800ae3c:	f000 fe7c 	bl	800bb38 <memmove>
 800ae40:	68a3      	ldr	r3, [r4, #8]
 800ae42:	6822      	ldr	r2, [r4, #0]
 800ae44:	1b9b      	subs	r3, r3, r6
 800ae46:	4432      	add	r2, r6
 800ae48:	2000      	movs	r0, #0
 800ae4a:	60a3      	str	r3, [r4, #8]
 800ae4c:	6022      	str	r2, [r4, #0]
 800ae4e:	e7db      	b.n	800ae08 <__ssputs_r+0x58>
 800ae50:	462a      	mov	r2, r5
 800ae52:	f000 fe8b 	bl	800bb6c <_realloc_r>
 800ae56:	4606      	mov	r6, r0
 800ae58:	2800      	cmp	r0, #0
 800ae5a:	d1e1      	bne.n	800ae20 <__ssputs_r+0x70>
 800ae5c:	4650      	mov	r0, sl
 800ae5e:	6921      	ldr	r1, [r4, #16]
 800ae60:	f7ff fcca 	bl	800a7f8 <_free_r>
 800ae64:	e7c7      	b.n	800adf6 <__ssputs_r+0x46>
	...

0800ae68 <_svfiprintf_r>:
 800ae68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae6c:	4698      	mov	r8, r3
 800ae6e:	898b      	ldrh	r3, [r1, #12]
 800ae70:	4607      	mov	r7, r0
 800ae72:	061b      	lsls	r3, r3, #24
 800ae74:	460d      	mov	r5, r1
 800ae76:	4614      	mov	r4, r2
 800ae78:	b09d      	sub	sp, #116	; 0x74
 800ae7a:	d50e      	bpl.n	800ae9a <_svfiprintf_r+0x32>
 800ae7c:	690b      	ldr	r3, [r1, #16]
 800ae7e:	b963      	cbnz	r3, 800ae9a <_svfiprintf_r+0x32>
 800ae80:	2140      	movs	r1, #64	; 0x40
 800ae82:	f7ff fd05 	bl	800a890 <_malloc_r>
 800ae86:	6028      	str	r0, [r5, #0]
 800ae88:	6128      	str	r0, [r5, #16]
 800ae8a:	b920      	cbnz	r0, 800ae96 <_svfiprintf_r+0x2e>
 800ae8c:	230c      	movs	r3, #12
 800ae8e:	603b      	str	r3, [r7, #0]
 800ae90:	f04f 30ff 	mov.w	r0, #4294967295
 800ae94:	e0d1      	b.n	800b03a <_svfiprintf_r+0x1d2>
 800ae96:	2340      	movs	r3, #64	; 0x40
 800ae98:	616b      	str	r3, [r5, #20]
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	9309      	str	r3, [sp, #36]	; 0x24
 800ae9e:	2320      	movs	r3, #32
 800aea0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aea4:	2330      	movs	r3, #48	; 0x30
 800aea6:	f04f 0901 	mov.w	r9, #1
 800aeaa:	f8cd 800c 	str.w	r8, [sp, #12]
 800aeae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b054 <_svfiprintf_r+0x1ec>
 800aeb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aeb6:	4623      	mov	r3, r4
 800aeb8:	469a      	mov	sl, r3
 800aeba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aebe:	b10a      	cbz	r2, 800aec4 <_svfiprintf_r+0x5c>
 800aec0:	2a25      	cmp	r2, #37	; 0x25
 800aec2:	d1f9      	bne.n	800aeb8 <_svfiprintf_r+0x50>
 800aec4:	ebba 0b04 	subs.w	fp, sl, r4
 800aec8:	d00b      	beq.n	800aee2 <_svfiprintf_r+0x7a>
 800aeca:	465b      	mov	r3, fp
 800aecc:	4622      	mov	r2, r4
 800aece:	4629      	mov	r1, r5
 800aed0:	4638      	mov	r0, r7
 800aed2:	f7ff ff6d 	bl	800adb0 <__ssputs_r>
 800aed6:	3001      	adds	r0, #1
 800aed8:	f000 80aa 	beq.w	800b030 <_svfiprintf_r+0x1c8>
 800aedc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aede:	445a      	add	r2, fp
 800aee0:	9209      	str	r2, [sp, #36]	; 0x24
 800aee2:	f89a 3000 	ldrb.w	r3, [sl]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	f000 80a2 	beq.w	800b030 <_svfiprintf_r+0x1c8>
 800aeec:	2300      	movs	r3, #0
 800aeee:	f04f 32ff 	mov.w	r2, #4294967295
 800aef2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aef6:	f10a 0a01 	add.w	sl, sl, #1
 800aefa:	9304      	str	r3, [sp, #16]
 800aefc:	9307      	str	r3, [sp, #28]
 800aefe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af02:	931a      	str	r3, [sp, #104]	; 0x68
 800af04:	4654      	mov	r4, sl
 800af06:	2205      	movs	r2, #5
 800af08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af0c:	4851      	ldr	r0, [pc, #324]	; (800b054 <_svfiprintf_r+0x1ec>)
 800af0e:	f000 fdf7 	bl	800bb00 <memchr>
 800af12:	9a04      	ldr	r2, [sp, #16]
 800af14:	b9d8      	cbnz	r0, 800af4e <_svfiprintf_r+0xe6>
 800af16:	06d0      	lsls	r0, r2, #27
 800af18:	bf44      	itt	mi
 800af1a:	2320      	movmi	r3, #32
 800af1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af20:	0711      	lsls	r1, r2, #28
 800af22:	bf44      	itt	mi
 800af24:	232b      	movmi	r3, #43	; 0x2b
 800af26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af2a:	f89a 3000 	ldrb.w	r3, [sl]
 800af2e:	2b2a      	cmp	r3, #42	; 0x2a
 800af30:	d015      	beq.n	800af5e <_svfiprintf_r+0xf6>
 800af32:	4654      	mov	r4, sl
 800af34:	2000      	movs	r0, #0
 800af36:	f04f 0c0a 	mov.w	ip, #10
 800af3a:	9a07      	ldr	r2, [sp, #28]
 800af3c:	4621      	mov	r1, r4
 800af3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af42:	3b30      	subs	r3, #48	; 0x30
 800af44:	2b09      	cmp	r3, #9
 800af46:	d94e      	bls.n	800afe6 <_svfiprintf_r+0x17e>
 800af48:	b1b0      	cbz	r0, 800af78 <_svfiprintf_r+0x110>
 800af4a:	9207      	str	r2, [sp, #28]
 800af4c:	e014      	b.n	800af78 <_svfiprintf_r+0x110>
 800af4e:	eba0 0308 	sub.w	r3, r0, r8
 800af52:	fa09 f303 	lsl.w	r3, r9, r3
 800af56:	4313      	orrs	r3, r2
 800af58:	46a2      	mov	sl, r4
 800af5a:	9304      	str	r3, [sp, #16]
 800af5c:	e7d2      	b.n	800af04 <_svfiprintf_r+0x9c>
 800af5e:	9b03      	ldr	r3, [sp, #12]
 800af60:	1d19      	adds	r1, r3, #4
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	9103      	str	r1, [sp, #12]
 800af66:	2b00      	cmp	r3, #0
 800af68:	bfbb      	ittet	lt
 800af6a:	425b      	neglt	r3, r3
 800af6c:	f042 0202 	orrlt.w	r2, r2, #2
 800af70:	9307      	strge	r3, [sp, #28]
 800af72:	9307      	strlt	r3, [sp, #28]
 800af74:	bfb8      	it	lt
 800af76:	9204      	strlt	r2, [sp, #16]
 800af78:	7823      	ldrb	r3, [r4, #0]
 800af7a:	2b2e      	cmp	r3, #46	; 0x2e
 800af7c:	d10c      	bne.n	800af98 <_svfiprintf_r+0x130>
 800af7e:	7863      	ldrb	r3, [r4, #1]
 800af80:	2b2a      	cmp	r3, #42	; 0x2a
 800af82:	d135      	bne.n	800aff0 <_svfiprintf_r+0x188>
 800af84:	9b03      	ldr	r3, [sp, #12]
 800af86:	3402      	adds	r4, #2
 800af88:	1d1a      	adds	r2, r3, #4
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	9203      	str	r2, [sp, #12]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	bfb8      	it	lt
 800af92:	f04f 33ff 	movlt.w	r3, #4294967295
 800af96:	9305      	str	r3, [sp, #20]
 800af98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b064 <_svfiprintf_r+0x1fc>
 800af9c:	2203      	movs	r2, #3
 800af9e:	4650      	mov	r0, sl
 800afa0:	7821      	ldrb	r1, [r4, #0]
 800afa2:	f000 fdad 	bl	800bb00 <memchr>
 800afa6:	b140      	cbz	r0, 800afba <_svfiprintf_r+0x152>
 800afa8:	2340      	movs	r3, #64	; 0x40
 800afaa:	eba0 000a 	sub.w	r0, r0, sl
 800afae:	fa03 f000 	lsl.w	r0, r3, r0
 800afb2:	9b04      	ldr	r3, [sp, #16]
 800afb4:	3401      	adds	r4, #1
 800afb6:	4303      	orrs	r3, r0
 800afb8:	9304      	str	r3, [sp, #16]
 800afba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afbe:	2206      	movs	r2, #6
 800afc0:	4825      	ldr	r0, [pc, #148]	; (800b058 <_svfiprintf_r+0x1f0>)
 800afc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afc6:	f000 fd9b 	bl	800bb00 <memchr>
 800afca:	2800      	cmp	r0, #0
 800afcc:	d038      	beq.n	800b040 <_svfiprintf_r+0x1d8>
 800afce:	4b23      	ldr	r3, [pc, #140]	; (800b05c <_svfiprintf_r+0x1f4>)
 800afd0:	bb1b      	cbnz	r3, 800b01a <_svfiprintf_r+0x1b2>
 800afd2:	9b03      	ldr	r3, [sp, #12]
 800afd4:	3307      	adds	r3, #7
 800afd6:	f023 0307 	bic.w	r3, r3, #7
 800afda:	3308      	adds	r3, #8
 800afdc:	9303      	str	r3, [sp, #12]
 800afde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afe0:	4433      	add	r3, r6
 800afe2:	9309      	str	r3, [sp, #36]	; 0x24
 800afe4:	e767      	b.n	800aeb6 <_svfiprintf_r+0x4e>
 800afe6:	460c      	mov	r4, r1
 800afe8:	2001      	movs	r0, #1
 800afea:	fb0c 3202 	mla	r2, ip, r2, r3
 800afee:	e7a5      	b.n	800af3c <_svfiprintf_r+0xd4>
 800aff0:	2300      	movs	r3, #0
 800aff2:	f04f 0c0a 	mov.w	ip, #10
 800aff6:	4619      	mov	r1, r3
 800aff8:	3401      	adds	r4, #1
 800affa:	9305      	str	r3, [sp, #20]
 800affc:	4620      	mov	r0, r4
 800affe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b002:	3a30      	subs	r2, #48	; 0x30
 800b004:	2a09      	cmp	r2, #9
 800b006:	d903      	bls.n	800b010 <_svfiprintf_r+0x1a8>
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d0c5      	beq.n	800af98 <_svfiprintf_r+0x130>
 800b00c:	9105      	str	r1, [sp, #20]
 800b00e:	e7c3      	b.n	800af98 <_svfiprintf_r+0x130>
 800b010:	4604      	mov	r4, r0
 800b012:	2301      	movs	r3, #1
 800b014:	fb0c 2101 	mla	r1, ip, r1, r2
 800b018:	e7f0      	b.n	800affc <_svfiprintf_r+0x194>
 800b01a:	ab03      	add	r3, sp, #12
 800b01c:	9300      	str	r3, [sp, #0]
 800b01e:	462a      	mov	r2, r5
 800b020:	4638      	mov	r0, r7
 800b022:	4b0f      	ldr	r3, [pc, #60]	; (800b060 <_svfiprintf_r+0x1f8>)
 800b024:	a904      	add	r1, sp, #16
 800b026:	f3af 8000 	nop.w
 800b02a:	1c42      	adds	r2, r0, #1
 800b02c:	4606      	mov	r6, r0
 800b02e:	d1d6      	bne.n	800afde <_svfiprintf_r+0x176>
 800b030:	89ab      	ldrh	r3, [r5, #12]
 800b032:	065b      	lsls	r3, r3, #25
 800b034:	f53f af2c 	bmi.w	800ae90 <_svfiprintf_r+0x28>
 800b038:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b03a:	b01d      	add	sp, #116	; 0x74
 800b03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b040:	ab03      	add	r3, sp, #12
 800b042:	9300      	str	r3, [sp, #0]
 800b044:	462a      	mov	r2, r5
 800b046:	4638      	mov	r0, r7
 800b048:	4b05      	ldr	r3, [pc, #20]	; (800b060 <_svfiprintf_r+0x1f8>)
 800b04a:	a904      	add	r1, sp, #16
 800b04c:	f000 f9d4 	bl	800b3f8 <_printf_i>
 800b050:	e7eb      	b.n	800b02a <_svfiprintf_r+0x1c2>
 800b052:	bf00      	nop
 800b054:	0800ce70 	.word	0x0800ce70
 800b058:	0800ce7a 	.word	0x0800ce7a
 800b05c:	00000000 	.word	0x00000000
 800b060:	0800adb1 	.word	0x0800adb1
 800b064:	0800ce76 	.word	0x0800ce76

0800b068 <__sfputc_r>:
 800b068:	6893      	ldr	r3, [r2, #8]
 800b06a:	b410      	push	{r4}
 800b06c:	3b01      	subs	r3, #1
 800b06e:	2b00      	cmp	r3, #0
 800b070:	6093      	str	r3, [r2, #8]
 800b072:	da07      	bge.n	800b084 <__sfputc_r+0x1c>
 800b074:	6994      	ldr	r4, [r2, #24]
 800b076:	42a3      	cmp	r3, r4
 800b078:	db01      	blt.n	800b07e <__sfputc_r+0x16>
 800b07a:	290a      	cmp	r1, #10
 800b07c:	d102      	bne.n	800b084 <__sfputc_r+0x1c>
 800b07e:	bc10      	pop	{r4}
 800b080:	f000 bb24 	b.w	800b6cc <__swbuf_r>
 800b084:	6813      	ldr	r3, [r2, #0]
 800b086:	1c58      	adds	r0, r3, #1
 800b088:	6010      	str	r0, [r2, #0]
 800b08a:	7019      	strb	r1, [r3, #0]
 800b08c:	4608      	mov	r0, r1
 800b08e:	bc10      	pop	{r4}
 800b090:	4770      	bx	lr

0800b092 <__sfputs_r>:
 800b092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b094:	4606      	mov	r6, r0
 800b096:	460f      	mov	r7, r1
 800b098:	4614      	mov	r4, r2
 800b09a:	18d5      	adds	r5, r2, r3
 800b09c:	42ac      	cmp	r4, r5
 800b09e:	d101      	bne.n	800b0a4 <__sfputs_r+0x12>
 800b0a0:	2000      	movs	r0, #0
 800b0a2:	e007      	b.n	800b0b4 <__sfputs_r+0x22>
 800b0a4:	463a      	mov	r2, r7
 800b0a6:	4630      	mov	r0, r6
 800b0a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0ac:	f7ff ffdc 	bl	800b068 <__sfputc_r>
 800b0b0:	1c43      	adds	r3, r0, #1
 800b0b2:	d1f3      	bne.n	800b09c <__sfputs_r+0xa>
 800b0b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b0b8 <_vfiprintf_r>:
 800b0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0bc:	460d      	mov	r5, r1
 800b0be:	4614      	mov	r4, r2
 800b0c0:	4698      	mov	r8, r3
 800b0c2:	4606      	mov	r6, r0
 800b0c4:	b09d      	sub	sp, #116	; 0x74
 800b0c6:	b118      	cbz	r0, 800b0d0 <_vfiprintf_r+0x18>
 800b0c8:	6983      	ldr	r3, [r0, #24]
 800b0ca:	b90b      	cbnz	r3, 800b0d0 <_vfiprintf_r+0x18>
 800b0cc:	f7ff fdc4 	bl	800ac58 <__sinit>
 800b0d0:	4b89      	ldr	r3, [pc, #548]	; (800b2f8 <_vfiprintf_r+0x240>)
 800b0d2:	429d      	cmp	r5, r3
 800b0d4:	d11b      	bne.n	800b10e <_vfiprintf_r+0x56>
 800b0d6:	6875      	ldr	r5, [r6, #4]
 800b0d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b0da:	07d9      	lsls	r1, r3, #31
 800b0dc:	d405      	bmi.n	800b0ea <_vfiprintf_r+0x32>
 800b0de:	89ab      	ldrh	r3, [r5, #12]
 800b0e0:	059a      	lsls	r2, r3, #22
 800b0e2:	d402      	bmi.n	800b0ea <_vfiprintf_r+0x32>
 800b0e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b0e6:	f7ff fe55 	bl	800ad94 <__retarget_lock_acquire_recursive>
 800b0ea:	89ab      	ldrh	r3, [r5, #12]
 800b0ec:	071b      	lsls	r3, r3, #28
 800b0ee:	d501      	bpl.n	800b0f4 <_vfiprintf_r+0x3c>
 800b0f0:	692b      	ldr	r3, [r5, #16]
 800b0f2:	b9eb      	cbnz	r3, 800b130 <_vfiprintf_r+0x78>
 800b0f4:	4629      	mov	r1, r5
 800b0f6:	4630      	mov	r0, r6
 800b0f8:	f000 fb4c 	bl	800b794 <__swsetup_r>
 800b0fc:	b1c0      	cbz	r0, 800b130 <_vfiprintf_r+0x78>
 800b0fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b100:	07dc      	lsls	r4, r3, #31
 800b102:	d50e      	bpl.n	800b122 <_vfiprintf_r+0x6a>
 800b104:	f04f 30ff 	mov.w	r0, #4294967295
 800b108:	b01d      	add	sp, #116	; 0x74
 800b10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b10e:	4b7b      	ldr	r3, [pc, #492]	; (800b2fc <_vfiprintf_r+0x244>)
 800b110:	429d      	cmp	r5, r3
 800b112:	d101      	bne.n	800b118 <_vfiprintf_r+0x60>
 800b114:	68b5      	ldr	r5, [r6, #8]
 800b116:	e7df      	b.n	800b0d8 <_vfiprintf_r+0x20>
 800b118:	4b79      	ldr	r3, [pc, #484]	; (800b300 <_vfiprintf_r+0x248>)
 800b11a:	429d      	cmp	r5, r3
 800b11c:	bf08      	it	eq
 800b11e:	68f5      	ldreq	r5, [r6, #12]
 800b120:	e7da      	b.n	800b0d8 <_vfiprintf_r+0x20>
 800b122:	89ab      	ldrh	r3, [r5, #12]
 800b124:	0598      	lsls	r0, r3, #22
 800b126:	d4ed      	bmi.n	800b104 <_vfiprintf_r+0x4c>
 800b128:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b12a:	f7ff fe34 	bl	800ad96 <__retarget_lock_release_recursive>
 800b12e:	e7e9      	b.n	800b104 <_vfiprintf_r+0x4c>
 800b130:	2300      	movs	r3, #0
 800b132:	9309      	str	r3, [sp, #36]	; 0x24
 800b134:	2320      	movs	r3, #32
 800b136:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b13a:	2330      	movs	r3, #48	; 0x30
 800b13c:	f04f 0901 	mov.w	r9, #1
 800b140:	f8cd 800c 	str.w	r8, [sp, #12]
 800b144:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800b304 <_vfiprintf_r+0x24c>
 800b148:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b14c:	4623      	mov	r3, r4
 800b14e:	469a      	mov	sl, r3
 800b150:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b154:	b10a      	cbz	r2, 800b15a <_vfiprintf_r+0xa2>
 800b156:	2a25      	cmp	r2, #37	; 0x25
 800b158:	d1f9      	bne.n	800b14e <_vfiprintf_r+0x96>
 800b15a:	ebba 0b04 	subs.w	fp, sl, r4
 800b15e:	d00b      	beq.n	800b178 <_vfiprintf_r+0xc0>
 800b160:	465b      	mov	r3, fp
 800b162:	4622      	mov	r2, r4
 800b164:	4629      	mov	r1, r5
 800b166:	4630      	mov	r0, r6
 800b168:	f7ff ff93 	bl	800b092 <__sfputs_r>
 800b16c:	3001      	adds	r0, #1
 800b16e:	f000 80aa 	beq.w	800b2c6 <_vfiprintf_r+0x20e>
 800b172:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b174:	445a      	add	r2, fp
 800b176:	9209      	str	r2, [sp, #36]	; 0x24
 800b178:	f89a 3000 	ldrb.w	r3, [sl]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	f000 80a2 	beq.w	800b2c6 <_vfiprintf_r+0x20e>
 800b182:	2300      	movs	r3, #0
 800b184:	f04f 32ff 	mov.w	r2, #4294967295
 800b188:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b18c:	f10a 0a01 	add.w	sl, sl, #1
 800b190:	9304      	str	r3, [sp, #16]
 800b192:	9307      	str	r3, [sp, #28]
 800b194:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b198:	931a      	str	r3, [sp, #104]	; 0x68
 800b19a:	4654      	mov	r4, sl
 800b19c:	2205      	movs	r2, #5
 800b19e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1a2:	4858      	ldr	r0, [pc, #352]	; (800b304 <_vfiprintf_r+0x24c>)
 800b1a4:	f000 fcac 	bl	800bb00 <memchr>
 800b1a8:	9a04      	ldr	r2, [sp, #16]
 800b1aa:	b9d8      	cbnz	r0, 800b1e4 <_vfiprintf_r+0x12c>
 800b1ac:	06d1      	lsls	r1, r2, #27
 800b1ae:	bf44      	itt	mi
 800b1b0:	2320      	movmi	r3, #32
 800b1b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1b6:	0713      	lsls	r3, r2, #28
 800b1b8:	bf44      	itt	mi
 800b1ba:	232b      	movmi	r3, #43	; 0x2b
 800b1bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1c0:	f89a 3000 	ldrb.w	r3, [sl]
 800b1c4:	2b2a      	cmp	r3, #42	; 0x2a
 800b1c6:	d015      	beq.n	800b1f4 <_vfiprintf_r+0x13c>
 800b1c8:	4654      	mov	r4, sl
 800b1ca:	2000      	movs	r0, #0
 800b1cc:	f04f 0c0a 	mov.w	ip, #10
 800b1d0:	9a07      	ldr	r2, [sp, #28]
 800b1d2:	4621      	mov	r1, r4
 800b1d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1d8:	3b30      	subs	r3, #48	; 0x30
 800b1da:	2b09      	cmp	r3, #9
 800b1dc:	d94e      	bls.n	800b27c <_vfiprintf_r+0x1c4>
 800b1de:	b1b0      	cbz	r0, 800b20e <_vfiprintf_r+0x156>
 800b1e0:	9207      	str	r2, [sp, #28]
 800b1e2:	e014      	b.n	800b20e <_vfiprintf_r+0x156>
 800b1e4:	eba0 0308 	sub.w	r3, r0, r8
 800b1e8:	fa09 f303 	lsl.w	r3, r9, r3
 800b1ec:	4313      	orrs	r3, r2
 800b1ee:	46a2      	mov	sl, r4
 800b1f0:	9304      	str	r3, [sp, #16]
 800b1f2:	e7d2      	b.n	800b19a <_vfiprintf_r+0xe2>
 800b1f4:	9b03      	ldr	r3, [sp, #12]
 800b1f6:	1d19      	adds	r1, r3, #4
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	9103      	str	r1, [sp, #12]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	bfbb      	ittet	lt
 800b200:	425b      	neglt	r3, r3
 800b202:	f042 0202 	orrlt.w	r2, r2, #2
 800b206:	9307      	strge	r3, [sp, #28]
 800b208:	9307      	strlt	r3, [sp, #28]
 800b20a:	bfb8      	it	lt
 800b20c:	9204      	strlt	r2, [sp, #16]
 800b20e:	7823      	ldrb	r3, [r4, #0]
 800b210:	2b2e      	cmp	r3, #46	; 0x2e
 800b212:	d10c      	bne.n	800b22e <_vfiprintf_r+0x176>
 800b214:	7863      	ldrb	r3, [r4, #1]
 800b216:	2b2a      	cmp	r3, #42	; 0x2a
 800b218:	d135      	bne.n	800b286 <_vfiprintf_r+0x1ce>
 800b21a:	9b03      	ldr	r3, [sp, #12]
 800b21c:	3402      	adds	r4, #2
 800b21e:	1d1a      	adds	r2, r3, #4
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	9203      	str	r2, [sp, #12]
 800b224:	2b00      	cmp	r3, #0
 800b226:	bfb8      	it	lt
 800b228:	f04f 33ff 	movlt.w	r3, #4294967295
 800b22c:	9305      	str	r3, [sp, #20]
 800b22e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b314 <_vfiprintf_r+0x25c>
 800b232:	2203      	movs	r2, #3
 800b234:	4650      	mov	r0, sl
 800b236:	7821      	ldrb	r1, [r4, #0]
 800b238:	f000 fc62 	bl	800bb00 <memchr>
 800b23c:	b140      	cbz	r0, 800b250 <_vfiprintf_r+0x198>
 800b23e:	2340      	movs	r3, #64	; 0x40
 800b240:	eba0 000a 	sub.w	r0, r0, sl
 800b244:	fa03 f000 	lsl.w	r0, r3, r0
 800b248:	9b04      	ldr	r3, [sp, #16]
 800b24a:	3401      	adds	r4, #1
 800b24c:	4303      	orrs	r3, r0
 800b24e:	9304      	str	r3, [sp, #16]
 800b250:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b254:	2206      	movs	r2, #6
 800b256:	482c      	ldr	r0, [pc, #176]	; (800b308 <_vfiprintf_r+0x250>)
 800b258:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b25c:	f000 fc50 	bl	800bb00 <memchr>
 800b260:	2800      	cmp	r0, #0
 800b262:	d03f      	beq.n	800b2e4 <_vfiprintf_r+0x22c>
 800b264:	4b29      	ldr	r3, [pc, #164]	; (800b30c <_vfiprintf_r+0x254>)
 800b266:	bb1b      	cbnz	r3, 800b2b0 <_vfiprintf_r+0x1f8>
 800b268:	9b03      	ldr	r3, [sp, #12]
 800b26a:	3307      	adds	r3, #7
 800b26c:	f023 0307 	bic.w	r3, r3, #7
 800b270:	3308      	adds	r3, #8
 800b272:	9303      	str	r3, [sp, #12]
 800b274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b276:	443b      	add	r3, r7
 800b278:	9309      	str	r3, [sp, #36]	; 0x24
 800b27a:	e767      	b.n	800b14c <_vfiprintf_r+0x94>
 800b27c:	460c      	mov	r4, r1
 800b27e:	2001      	movs	r0, #1
 800b280:	fb0c 3202 	mla	r2, ip, r2, r3
 800b284:	e7a5      	b.n	800b1d2 <_vfiprintf_r+0x11a>
 800b286:	2300      	movs	r3, #0
 800b288:	f04f 0c0a 	mov.w	ip, #10
 800b28c:	4619      	mov	r1, r3
 800b28e:	3401      	adds	r4, #1
 800b290:	9305      	str	r3, [sp, #20]
 800b292:	4620      	mov	r0, r4
 800b294:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b298:	3a30      	subs	r2, #48	; 0x30
 800b29a:	2a09      	cmp	r2, #9
 800b29c:	d903      	bls.n	800b2a6 <_vfiprintf_r+0x1ee>
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d0c5      	beq.n	800b22e <_vfiprintf_r+0x176>
 800b2a2:	9105      	str	r1, [sp, #20]
 800b2a4:	e7c3      	b.n	800b22e <_vfiprintf_r+0x176>
 800b2a6:	4604      	mov	r4, r0
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2ae:	e7f0      	b.n	800b292 <_vfiprintf_r+0x1da>
 800b2b0:	ab03      	add	r3, sp, #12
 800b2b2:	9300      	str	r3, [sp, #0]
 800b2b4:	462a      	mov	r2, r5
 800b2b6:	4630      	mov	r0, r6
 800b2b8:	4b15      	ldr	r3, [pc, #84]	; (800b310 <_vfiprintf_r+0x258>)
 800b2ba:	a904      	add	r1, sp, #16
 800b2bc:	f3af 8000 	nop.w
 800b2c0:	4607      	mov	r7, r0
 800b2c2:	1c78      	adds	r0, r7, #1
 800b2c4:	d1d6      	bne.n	800b274 <_vfiprintf_r+0x1bc>
 800b2c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2c8:	07d9      	lsls	r1, r3, #31
 800b2ca:	d405      	bmi.n	800b2d8 <_vfiprintf_r+0x220>
 800b2cc:	89ab      	ldrh	r3, [r5, #12]
 800b2ce:	059a      	lsls	r2, r3, #22
 800b2d0:	d402      	bmi.n	800b2d8 <_vfiprintf_r+0x220>
 800b2d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2d4:	f7ff fd5f 	bl	800ad96 <__retarget_lock_release_recursive>
 800b2d8:	89ab      	ldrh	r3, [r5, #12]
 800b2da:	065b      	lsls	r3, r3, #25
 800b2dc:	f53f af12 	bmi.w	800b104 <_vfiprintf_r+0x4c>
 800b2e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2e2:	e711      	b.n	800b108 <_vfiprintf_r+0x50>
 800b2e4:	ab03      	add	r3, sp, #12
 800b2e6:	9300      	str	r3, [sp, #0]
 800b2e8:	462a      	mov	r2, r5
 800b2ea:	4630      	mov	r0, r6
 800b2ec:	4b08      	ldr	r3, [pc, #32]	; (800b310 <_vfiprintf_r+0x258>)
 800b2ee:	a904      	add	r1, sp, #16
 800b2f0:	f000 f882 	bl	800b3f8 <_printf_i>
 800b2f4:	e7e4      	b.n	800b2c0 <_vfiprintf_r+0x208>
 800b2f6:	bf00      	nop
 800b2f8:	0800ce30 	.word	0x0800ce30
 800b2fc:	0800ce50 	.word	0x0800ce50
 800b300:	0800ce10 	.word	0x0800ce10
 800b304:	0800ce70 	.word	0x0800ce70
 800b308:	0800ce7a 	.word	0x0800ce7a
 800b30c:	00000000 	.word	0x00000000
 800b310:	0800b093 	.word	0x0800b093
 800b314:	0800ce76 	.word	0x0800ce76

0800b318 <_printf_common>:
 800b318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b31c:	4616      	mov	r6, r2
 800b31e:	4699      	mov	r9, r3
 800b320:	688a      	ldr	r2, [r1, #8]
 800b322:	690b      	ldr	r3, [r1, #16]
 800b324:	4607      	mov	r7, r0
 800b326:	4293      	cmp	r3, r2
 800b328:	bfb8      	it	lt
 800b32a:	4613      	movlt	r3, r2
 800b32c:	6033      	str	r3, [r6, #0]
 800b32e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b332:	460c      	mov	r4, r1
 800b334:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b338:	b10a      	cbz	r2, 800b33e <_printf_common+0x26>
 800b33a:	3301      	adds	r3, #1
 800b33c:	6033      	str	r3, [r6, #0]
 800b33e:	6823      	ldr	r3, [r4, #0]
 800b340:	0699      	lsls	r1, r3, #26
 800b342:	bf42      	ittt	mi
 800b344:	6833      	ldrmi	r3, [r6, #0]
 800b346:	3302      	addmi	r3, #2
 800b348:	6033      	strmi	r3, [r6, #0]
 800b34a:	6825      	ldr	r5, [r4, #0]
 800b34c:	f015 0506 	ands.w	r5, r5, #6
 800b350:	d106      	bne.n	800b360 <_printf_common+0x48>
 800b352:	f104 0a19 	add.w	sl, r4, #25
 800b356:	68e3      	ldr	r3, [r4, #12]
 800b358:	6832      	ldr	r2, [r6, #0]
 800b35a:	1a9b      	subs	r3, r3, r2
 800b35c:	42ab      	cmp	r3, r5
 800b35e:	dc28      	bgt.n	800b3b2 <_printf_common+0x9a>
 800b360:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b364:	1e13      	subs	r3, r2, #0
 800b366:	6822      	ldr	r2, [r4, #0]
 800b368:	bf18      	it	ne
 800b36a:	2301      	movne	r3, #1
 800b36c:	0692      	lsls	r2, r2, #26
 800b36e:	d42d      	bmi.n	800b3cc <_printf_common+0xb4>
 800b370:	4649      	mov	r1, r9
 800b372:	4638      	mov	r0, r7
 800b374:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b378:	47c0      	blx	r8
 800b37a:	3001      	adds	r0, #1
 800b37c:	d020      	beq.n	800b3c0 <_printf_common+0xa8>
 800b37e:	6823      	ldr	r3, [r4, #0]
 800b380:	68e5      	ldr	r5, [r4, #12]
 800b382:	f003 0306 	and.w	r3, r3, #6
 800b386:	2b04      	cmp	r3, #4
 800b388:	bf18      	it	ne
 800b38a:	2500      	movne	r5, #0
 800b38c:	6832      	ldr	r2, [r6, #0]
 800b38e:	f04f 0600 	mov.w	r6, #0
 800b392:	68a3      	ldr	r3, [r4, #8]
 800b394:	bf08      	it	eq
 800b396:	1aad      	subeq	r5, r5, r2
 800b398:	6922      	ldr	r2, [r4, #16]
 800b39a:	bf08      	it	eq
 800b39c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	bfc4      	itt	gt
 800b3a4:	1a9b      	subgt	r3, r3, r2
 800b3a6:	18ed      	addgt	r5, r5, r3
 800b3a8:	341a      	adds	r4, #26
 800b3aa:	42b5      	cmp	r5, r6
 800b3ac:	d11a      	bne.n	800b3e4 <_printf_common+0xcc>
 800b3ae:	2000      	movs	r0, #0
 800b3b0:	e008      	b.n	800b3c4 <_printf_common+0xac>
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	4652      	mov	r2, sl
 800b3b6:	4649      	mov	r1, r9
 800b3b8:	4638      	mov	r0, r7
 800b3ba:	47c0      	blx	r8
 800b3bc:	3001      	adds	r0, #1
 800b3be:	d103      	bne.n	800b3c8 <_printf_common+0xb0>
 800b3c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3c8:	3501      	adds	r5, #1
 800b3ca:	e7c4      	b.n	800b356 <_printf_common+0x3e>
 800b3cc:	2030      	movs	r0, #48	; 0x30
 800b3ce:	18e1      	adds	r1, r4, r3
 800b3d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b3d4:	1c5a      	adds	r2, r3, #1
 800b3d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b3da:	4422      	add	r2, r4
 800b3dc:	3302      	adds	r3, #2
 800b3de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b3e2:	e7c5      	b.n	800b370 <_printf_common+0x58>
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	4622      	mov	r2, r4
 800b3e8:	4649      	mov	r1, r9
 800b3ea:	4638      	mov	r0, r7
 800b3ec:	47c0      	blx	r8
 800b3ee:	3001      	adds	r0, #1
 800b3f0:	d0e6      	beq.n	800b3c0 <_printf_common+0xa8>
 800b3f2:	3601      	adds	r6, #1
 800b3f4:	e7d9      	b.n	800b3aa <_printf_common+0x92>
	...

0800b3f8 <_printf_i>:
 800b3f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b3fc:	460c      	mov	r4, r1
 800b3fe:	7e27      	ldrb	r7, [r4, #24]
 800b400:	4691      	mov	r9, r2
 800b402:	2f78      	cmp	r7, #120	; 0x78
 800b404:	4680      	mov	r8, r0
 800b406:	469a      	mov	sl, r3
 800b408:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b40a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b40e:	d807      	bhi.n	800b420 <_printf_i+0x28>
 800b410:	2f62      	cmp	r7, #98	; 0x62
 800b412:	d80a      	bhi.n	800b42a <_printf_i+0x32>
 800b414:	2f00      	cmp	r7, #0
 800b416:	f000 80d9 	beq.w	800b5cc <_printf_i+0x1d4>
 800b41a:	2f58      	cmp	r7, #88	; 0x58
 800b41c:	f000 80a4 	beq.w	800b568 <_printf_i+0x170>
 800b420:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b424:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b428:	e03a      	b.n	800b4a0 <_printf_i+0xa8>
 800b42a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b42e:	2b15      	cmp	r3, #21
 800b430:	d8f6      	bhi.n	800b420 <_printf_i+0x28>
 800b432:	a001      	add	r0, pc, #4	; (adr r0, 800b438 <_printf_i+0x40>)
 800b434:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b438:	0800b491 	.word	0x0800b491
 800b43c:	0800b4a5 	.word	0x0800b4a5
 800b440:	0800b421 	.word	0x0800b421
 800b444:	0800b421 	.word	0x0800b421
 800b448:	0800b421 	.word	0x0800b421
 800b44c:	0800b421 	.word	0x0800b421
 800b450:	0800b4a5 	.word	0x0800b4a5
 800b454:	0800b421 	.word	0x0800b421
 800b458:	0800b421 	.word	0x0800b421
 800b45c:	0800b421 	.word	0x0800b421
 800b460:	0800b421 	.word	0x0800b421
 800b464:	0800b5b3 	.word	0x0800b5b3
 800b468:	0800b4d5 	.word	0x0800b4d5
 800b46c:	0800b595 	.word	0x0800b595
 800b470:	0800b421 	.word	0x0800b421
 800b474:	0800b421 	.word	0x0800b421
 800b478:	0800b5d5 	.word	0x0800b5d5
 800b47c:	0800b421 	.word	0x0800b421
 800b480:	0800b4d5 	.word	0x0800b4d5
 800b484:	0800b421 	.word	0x0800b421
 800b488:	0800b421 	.word	0x0800b421
 800b48c:	0800b59d 	.word	0x0800b59d
 800b490:	680b      	ldr	r3, [r1, #0]
 800b492:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b496:	1d1a      	adds	r2, r3, #4
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	600a      	str	r2, [r1, #0]
 800b49c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	e0a4      	b.n	800b5ee <_printf_i+0x1f6>
 800b4a4:	6825      	ldr	r5, [r4, #0]
 800b4a6:	6808      	ldr	r0, [r1, #0]
 800b4a8:	062e      	lsls	r6, r5, #24
 800b4aa:	f100 0304 	add.w	r3, r0, #4
 800b4ae:	d50a      	bpl.n	800b4c6 <_printf_i+0xce>
 800b4b0:	6805      	ldr	r5, [r0, #0]
 800b4b2:	600b      	str	r3, [r1, #0]
 800b4b4:	2d00      	cmp	r5, #0
 800b4b6:	da03      	bge.n	800b4c0 <_printf_i+0xc8>
 800b4b8:	232d      	movs	r3, #45	; 0x2d
 800b4ba:	426d      	negs	r5, r5
 800b4bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4c0:	230a      	movs	r3, #10
 800b4c2:	485e      	ldr	r0, [pc, #376]	; (800b63c <_printf_i+0x244>)
 800b4c4:	e019      	b.n	800b4fa <_printf_i+0x102>
 800b4c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b4ca:	6805      	ldr	r5, [r0, #0]
 800b4cc:	600b      	str	r3, [r1, #0]
 800b4ce:	bf18      	it	ne
 800b4d0:	b22d      	sxthne	r5, r5
 800b4d2:	e7ef      	b.n	800b4b4 <_printf_i+0xbc>
 800b4d4:	680b      	ldr	r3, [r1, #0]
 800b4d6:	6825      	ldr	r5, [r4, #0]
 800b4d8:	1d18      	adds	r0, r3, #4
 800b4da:	6008      	str	r0, [r1, #0]
 800b4dc:	0628      	lsls	r0, r5, #24
 800b4de:	d501      	bpl.n	800b4e4 <_printf_i+0xec>
 800b4e0:	681d      	ldr	r5, [r3, #0]
 800b4e2:	e002      	b.n	800b4ea <_printf_i+0xf2>
 800b4e4:	0669      	lsls	r1, r5, #25
 800b4e6:	d5fb      	bpl.n	800b4e0 <_printf_i+0xe8>
 800b4e8:	881d      	ldrh	r5, [r3, #0]
 800b4ea:	2f6f      	cmp	r7, #111	; 0x6f
 800b4ec:	bf0c      	ite	eq
 800b4ee:	2308      	moveq	r3, #8
 800b4f0:	230a      	movne	r3, #10
 800b4f2:	4852      	ldr	r0, [pc, #328]	; (800b63c <_printf_i+0x244>)
 800b4f4:	2100      	movs	r1, #0
 800b4f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b4fa:	6866      	ldr	r6, [r4, #4]
 800b4fc:	2e00      	cmp	r6, #0
 800b4fe:	bfa8      	it	ge
 800b500:	6821      	ldrge	r1, [r4, #0]
 800b502:	60a6      	str	r6, [r4, #8]
 800b504:	bfa4      	itt	ge
 800b506:	f021 0104 	bicge.w	r1, r1, #4
 800b50a:	6021      	strge	r1, [r4, #0]
 800b50c:	b90d      	cbnz	r5, 800b512 <_printf_i+0x11a>
 800b50e:	2e00      	cmp	r6, #0
 800b510:	d04d      	beq.n	800b5ae <_printf_i+0x1b6>
 800b512:	4616      	mov	r6, r2
 800b514:	fbb5 f1f3 	udiv	r1, r5, r3
 800b518:	fb03 5711 	mls	r7, r3, r1, r5
 800b51c:	5dc7      	ldrb	r7, [r0, r7]
 800b51e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b522:	462f      	mov	r7, r5
 800b524:	42bb      	cmp	r3, r7
 800b526:	460d      	mov	r5, r1
 800b528:	d9f4      	bls.n	800b514 <_printf_i+0x11c>
 800b52a:	2b08      	cmp	r3, #8
 800b52c:	d10b      	bne.n	800b546 <_printf_i+0x14e>
 800b52e:	6823      	ldr	r3, [r4, #0]
 800b530:	07df      	lsls	r7, r3, #31
 800b532:	d508      	bpl.n	800b546 <_printf_i+0x14e>
 800b534:	6923      	ldr	r3, [r4, #16]
 800b536:	6861      	ldr	r1, [r4, #4]
 800b538:	4299      	cmp	r1, r3
 800b53a:	bfde      	ittt	le
 800b53c:	2330      	movle	r3, #48	; 0x30
 800b53e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b542:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b546:	1b92      	subs	r2, r2, r6
 800b548:	6122      	str	r2, [r4, #16]
 800b54a:	464b      	mov	r3, r9
 800b54c:	4621      	mov	r1, r4
 800b54e:	4640      	mov	r0, r8
 800b550:	f8cd a000 	str.w	sl, [sp]
 800b554:	aa03      	add	r2, sp, #12
 800b556:	f7ff fedf 	bl	800b318 <_printf_common>
 800b55a:	3001      	adds	r0, #1
 800b55c:	d14c      	bne.n	800b5f8 <_printf_i+0x200>
 800b55e:	f04f 30ff 	mov.w	r0, #4294967295
 800b562:	b004      	add	sp, #16
 800b564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b568:	4834      	ldr	r0, [pc, #208]	; (800b63c <_printf_i+0x244>)
 800b56a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b56e:	680e      	ldr	r6, [r1, #0]
 800b570:	6823      	ldr	r3, [r4, #0]
 800b572:	f856 5b04 	ldr.w	r5, [r6], #4
 800b576:	061f      	lsls	r7, r3, #24
 800b578:	600e      	str	r6, [r1, #0]
 800b57a:	d514      	bpl.n	800b5a6 <_printf_i+0x1ae>
 800b57c:	07d9      	lsls	r1, r3, #31
 800b57e:	bf44      	itt	mi
 800b580:	f043 0320 	orrmi.w	r3, r3, #32
 800b584:	6023      	strmi	r3, [r4, #0]
 800b586:	b91d      	cbnz	r5, 800b590 <_printf_i+0x198>
 800b588:	6823      	ldr	r3, [r4, #0]
 800b58a:	f023 0320 	bic.w	r3, r3, #32
 800b58e:	6023      	str	r3, [r4, #0]
 800b590:	2310      	movs	r3, #16
 800b592:	e7af      	b.n	800b4f4 <_printf_i+0xfc>
 800b594:	6823      	ldr	r3, [r4, #0]
 800b596:	f043 0320 	orr.w	r3, r3, #32
 800b59a:	6023      	str	r3, [r4, #0]
 800b59c:	2378      	movs	r3, #120	; 0x78
 800b59e:	4828      	ldr	r0, [pc, #160]	; (800b640 <_printf_i+0x248>)
 800b5a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b5a4:	e7e3      	b.n	800b56e <_printf_i+0x176>
 800b5a6:	065e      	lsls	r6, r3, #25
 800b5a8:	bf48      	it	mi
 800b5aa:	b2ad      	uxthmi	r5, r5
 800b5ac:	e7e6      	b.n	800b57c <_printf_i+0x184>
 800b5ae:	4616      	mov	r6, r2
 800b5b0:	e7bb      	b.n	800b52a <_printf_i+0x132>
 800b5b2:	680b      	ldr	r3, [r1, #0]
 800b5b4:	6826      	ldr	r6, [r4, #0]
 800b5b6:	1d1d      	adds	r5, r3, #4
 800b5b8:	6960      	ldr	r0, [r4, #20]
 800b5ba:	600d      	str	r5, [r1, #0]
 800b5bc:	0635      	lsls	r5, r6, #24
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	d501      	bpl.n	800b5c6 <_printf_i+0x1ce>
 800b5c2:	6018      	str	r0, [r3, #0]
 800b5c4:	e002      	b.n	800b5cc <_printf_i+0x1d4>
 800b5c6:	0671      	lsls	r1, r6, #25
 800b5c8:	d5fb      	bpl.n	800b5c2 <_printf_i+0x1ca>
 800b5ca:	8018      	strh	r0, [r3, #0]
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	4616      	mov	r6, r2
 800b5d0:	6123      	str	r3, [r4, #16]
 800b5d2:	e7ba      	b.n	800b54a <_printf_i+0x152>
 800b5d4:	680b      	ldr	r3, [r1, #0]
 800b5d6:	1d1a      	adds	r2, r3, #4
 800b5d8:	600a      	str	r2, [r1, #0]
 800b5da:	681e      	ldr	r6, [r3, #0]
 800b5dc:	2100      	movs	r1, #0
 800b5de:	4630      	mov	r0, r6
 800b5e0:	6862      	ldr	r2, [r4, #4]
 800b5e2:	f000 fa8d 	bl	800bb00 <memchr>
 800b5e6:	b108      	cbz	r0, 800b5ec <_printf_i+0x1f4>
 800b5e8:	1b80      	subs	r0, r0, r6
 800b5ea:	6060      	str	r0, [r4, #4]
 800b5ec:	6863      	ldr	r3, [r4, #4]
 800b5ee:	6123      	str	r3, [r4, #16]
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5f6:	e7a8      	b.n	800b54a <_printf_i+0x152>
 800b5f8:	4632      	mov	r2, r6
 800b5fa:	4649      	mov	r1, r9
 800b5fc:	4640      	mov	r0, r8
 800b5fe:	6923      	ldr	r3, [r4, #16]
 800b600:	47d0      	blx	sl
 800b602:	3001      	adds	r0, #1
 800b604:	d0ab      	beq.n	800b55e <_printf_i+0x166>
 800b606:	6823      	ldr	r3, [r4, #0]
 800b608:	079b      	lsls	r3, r3, #30
 800b60a:	d413      	bmi.n	800b634 <_printf_i+0x23c>
 800b60c:	68e0      	ldr	r0, [r4, #12]
 800b60e:	9b03      	ldr	r3, [sp, #12]
 800b610:	4298      	cmp	r0, r3
 800b612:	bfb8      	it	lt
 800b614:	4618      	movlt	r0, r3
 800b616:	e7a4      	b.n	800b562 <_printf_i+0x16a>
 800b618:	2301      	movs	r3, #1
 800b61a:	4632      	mov	r2, r6
 800b61c:	4649      	mov	r1, r9
 800b61e:	4640      	mov	r0, r8
 800b620:	47d0      	blx	sl
 800b622:	3001      	adds	r0, #1
 800b624:	d09b      	beq.n	800b55e <_printf_i+0x166>
 800b626:	3501      	adds	r5, #1
 800b628:	68e3      	ldr	r3, [r4, #12]
 800b62a:	9903      	ldr	r1, [sp, #12]
 800b62c:	1a5b      	subs	r3, r3, r1
 800b62e:	42ab      	cmp	r3, r5
 800b630:	dcf2      	bgt.n	800b618 <_printf_i+0x220>
 800b632:	e7eb      	b.n	800b60c <_printf_i+0x214>
 800b634:	2500      	movs	r5, #0
 800b636:	f104 0619 	add.w	r6, r4, #25
 800b63a:	e7f5      	b.n	800b628 <_printf_i+0x230>
 800b63c:	0800ce81 	.word	0x0800ce81
 800b640:	0800ce92 	.word	0x0800ce92

0800b644 <__sread>:
 800b644:	b510      	push	{r4, lr}
 800b646:	460c      	mov	r4, r1
 800b648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b64c:	f000 fab4 	bl	800bbb8 <_read_r>
 800b650:	2800      	cmp	r0, #0
 800b652:	bfab      	itete	ge
 800b654:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b656:	89a3      	ldrhlt	r3, [r4, #12]
 800b658:	181b      	addge	r3, r3, r0
 800b65a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b65e:	bfac      	ite	ge
 800b660:	6563      	strge	r3, [r4, #84]	; 0x54
 800b662:	81a3      	strhlt	r3, [r4, #12]
 800b664:	bd10      	pop	{r4, pc}

0800b666 <__swrite>:
 800b666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b66a:	461f      	mov	r7, r3
 800b66c:	898b      	ldrh	r3, [r1, #12]
 800b66e:	4605      	mov	r5, r0
 800b670:	05db      	lsls	r3, r3, #23
 800b672:	460c      	mov	r4, r1
 800b674:	4616      	mov	r6, r2
 800b676:	d505      	bpl.n	800b684 <__swrite+0x1e>
 800b678:	2302      	movs	r3, #2
 800b67a:	2200      	movs	r2, #0
 800b67c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b680:	f000 f9c8 	bl	800ba14 <_lseek_r>
 800b684:	89a3      	ldrh	r3, [r4, #12]
 800b686:	4632      	mov	r2, r6
 800b688:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b68c:	81a3      	strh	r3, [r4, #12]
 800b68e:	4628      	mov	r0, r5
 800b690:	463b      	mov	r3, r7
 800b692:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b69a:	f000 b869 	b.w	800b770 <_write_r>

0800b69e <__sseek>:
 800b69e:	b510      	push	{r4, lr}
 800b6a0:	460c      	mov	r4, r1
 800b6a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6a6:	f000 f9b5 	bl	800ba14 <_lseek_r>
 800b6aa:	1c43      	adds	r3, r0, #1
 800b6ac:	89a3      	ldrh	r3, [r4, #12]
 800b6ae:	bf15      	itete	ne
 800b6b0:	6560      	strne	r0, [r4, #84]	; 0x54
 800b6b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b6b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b6ba:	81a3      	strheq	r3, [r4, #12]
 800b6bc:	bf18      	it	ne
 800b6be:	81a3      	strhne	r3, [r4, #12]
 800b6c0:	bd10      	pop	{r4, pc}

0800b6c2 <__sclose>:
 800b6c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6c6:	f000 b8d3 	b.w	800b870 <_close_r>
	...

0800b6cc <__swbuf_r>:
 800b6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ce:	460e      	mov	r6, r1
 800b6d0:	4614      	mov	r4, r2
 800b6d2:	4605      	mov	r5, r0
 800b6d4:	b118      	cbz	r0, 800b6de <__swbuf_r+0x12>
 800b6d6:	6983      	ldr	r3, [r0, #24]
 800b6d8:	b90b      	cbnz	r3, 800b6de <__swbuf_r+0x12>
 800b6da:	f7ff fabd 	bl	800ac58 <__sinit>
 800b6de:	4b21      	ldr	r3, [pc, #132]	; (800b764 <__swbuf_r+0x98>)
 800b6e0:	429c      	cmp	r4, r3
 800b6e2:	d12b      	bne.n	800b73c <__swbuf_r+0x70>
 800b6e4:	686c      	ldr	r4, [r5, #4]
 800b6e6:	69a3      	ldr	r3, [r4, #24]
 800b6e8:	60a3      	str	r3, [r4, #8]
 800b6ea:	89a3      	ldrh	r3, [r4, #12]
 800b6ec:	071a      	lsls	r2, r3, #28
 800b6ee:	d52f      	bpl.n	800b750 <__swbuf_r+0x84>
 800b6f0:	6923      	ldr	r3, [r4, #16]
 800b6f2:	b36b      	cbz	r3, 800b750 <__swbuf_r+0x84>
 800b6f4:	6923      	ldr	r3, [r4, #16]
 800b6f6:	6820      	ldr	r0, [r4, #0]
 800b6f8:	b2f6      	uxtb	r6, r6
 800b6fa:	1ac0      	subs	r0, r0, r3
 800b6fc:	6963      	ldr	r3, [r4, #20]
 800b6fe:	4637      	mov	r7, r6
 800b700:	4283      	cmp	r3, r0
 800b702:	dc04      	bgt.n	800b70e <__swbuf_r+0x42>
 800b704:	4621      	mov	r1, r4
 800b706:	4628      	mov	r0, r5
 800b708:	f000 f948 	bl	800b99c <_fflush_r>
 800b70c:	bb30      	cbnz	r0, 800b75c <__swbuf_r+0x90>
 800b70e:	68a3      	ldr	r3, [r4, #8]
 800b710:	3001      	adds	r0, #1
 800b712:	3b01      	subs	r3, #1
 800b714:	60a3      	str	r3, [r4, #8]
 800b716:	6823      	ldr	r3, [r4, #0]
 800b718:	1c5a      	adds	r2, r3, #1
 800b71a:	6022      	str	r2, [r4, #0]
 800b71c:	701e      	strb	r6, [r3, #0]
 800b71e:	6963      	ldr	r3, [r4, #20]
 800b720:	4283      	cmp	r3, r0
 800b722:	d004      	beq.n	800b72e <__swbuf_r+0x62>
 800b724:	89a3      	ldrh	r3, [r4, #12]
 800b726:	07db      	lsls	r3, r3, #31
 800b728:	d506      	bpl.n	800b738 <__swbuf_r+0x6c>
 800b72a:	2e0a      	cmp	r6, #10
 800b72c:	d104      	bne.n	800b738 <__swbuf_r+0x6c>
 800b72e:	4621      	mov	r1, r4
 800b730:	4628      	mov	r0, r5
 800b732:	f000 f933 	bl	800b99c <_fflush_r>
 800b736:	b988      	cbnz	r0, 800b75c <__swbuf_r+0x90>
 800b738:	4638      	mov	r0, r7
 800b73a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b73c:	4b0a      	ldr	r3, [pc, #40]	; (800b768 <__swbuf_r+0x9c>)
 800b73e:	429c      	cmp	r4, r3
 800b740:	d101      	bne.n	800b746 <__swbuf_r+0x7a>
 800b742:	68ac      	ldr	r4, [r5, #8]
 800b744:	e7cf      	b.n	800b6e6 <__swbuf_r+0x1a>
 800b746:	4b09      	ldr	r3, [pc, #36]	; (800b76c <__swbuf_r+0xa0>)
 800b748:	429c      	cmp	r4, r3
 800b74a:	bf08      	it	eq
 800b74c:	68ec      	ldreq	r4, [r5, #12]
 800b74e:	e7ca      	b.n	800b6e6 <__swbuf_r+0x1a>
 800b750:	4621      	mov	r1, r4
 800b752:	4628      	mov	r0, r5
 800b754:	f000 f81e 	bl	800b794 <__swsetup_r>
 800b758:	2800      	cmp	r0, #0
 800b75a:	d0cb      	beq.n	800b6f4 <__swbuf_r+0x28>
 800b75c:	f04f 37ff 	mov.w	r7, #4294967295
 800b760:	e7ea      	b.n	800b738 <__swbuf_r+0x6c>
 800b762:	bf00      	nop
 800b764:	0800ce30 	.word	0x0800ce30
 800b768:	0800ce50 	.word	0x0800ce50
 800b76c:	0800ce10 	.word	0x0800ce10

0800b770 <_write_r>:
 800b770:	b538      	push	{r3, r4, r5, lr}
 800b772:	4604      	mov	r4, r0
 800b774:	4608      	mov	r0, r1
 800b776:	4611      	mov	r1, r2
 800b778:	2200      	movs	r2, #0
 800b77a:	4d05      	ldr	r5, [pc, #20]	; (800b790 <_write_r+0x20>)
 800b77c:	602a      	str	r2, [r5, #0]
 800b77e:	461a      	mov	r2, r3
 800b780:	f7f6 fb52 	bl	8001e28 <_write>
 800b784:	1c43      	adds	r3, r0, #1
 800b786:	d102      	bne.n	800b78e <_write_r+0x1e>
 800b788:	682b      	ldr	r3, [r5, #0]
 800b78a:	b103      	cbz	r3, 800b78e <_write_r+0x1e>
 800b78c:	6023      	str	r3, [r4, #0]
 800b78e:	bd38      	pop	{r3, r4, r5, pc}
 800b790:	2000097c 	.word	0x2000097c

0800b794 <__swsetup_r>:
 800b794:	4b32      	ldr	r3, [pc, #200]	; (800b860 <__swsetup_r+0xcc>)
 800b796:	b570      	push	{r4, r5, r6, lr}
 800b798:	681d      	ldr	r5, [r3, #0]
 800b79a:	4606      	mov	r6, r0
 800b79c:	460c      	mov	r4, r1
 800b79e:	b125      	cbz	r5, 800b7aa <__swsetup_r+0x16>
 800b7a0:	69ab      	ldr	r3, [r5, #24]
 800b7a2:	b913      	cbnz	r3, 800b7aa <__swsetup_r+0x16>
 800b7a4:	4628      	mov	r0, r5
 800b7a6:	f7ff fa57 	bl	800ac58 <__sinit>
 800b7aa:	4b2e      	ldr	r3, [pc, #184]	; (800b864 <__swsetup_r+0xd0>)
 800b7ac:	429c      	cmp	r4, r3
 800b7ae:	d10f      	bne.n	800b7d0 <__swsetup_r+0x3c>
 800b7b0:	686c      	ldr	r4, [r5, #4]
 800b7b2:	89a3      	ldrh	r3, [r4, #12]
 800b7b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7b8:	0719      	lsls	r1, r3, #28
 800b7ba:	d42c      	bmi.n	800b816 <__swsetup_r+0x82>
 800b7bc:	06dd      	lsls	r5, r3, #27
 800b7be:	d411      	bmi.n	800b7e4 <__swsetup_r+0x50>
 800b7c0:	2309      	movs	r3, #9
 800b7c2:	6033      	str	r3, [r6, #0]
 800b7c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b7c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7cc:	81a3      	strh	r3, [r4, #12]
 800b7ce:	e03e      	b.n	800b84e <__swsetup_r+0xba>
 800b7d0:	4b25      	ldr	r3, [pc, #148]	; (800b868 <__swsetup_r+0xd4>)
 800b7d2:	429c      	cmp	r4, r3
 800b7d4:	d101      	bne.n	800b7da <__swsetup_r+0x46>
 800b7d6:	68ac      	ldr	r4, [r5, #8]
 800b7d8:	e7eb      	b.n	800b7b2 <__swsetup_r+0x1e>
 800b7da:	4b24      	ldr	r3, [pc, #144]	; (800b86c <__swsetup_r+0xd8>)
 800b7dc:	429c      	cmp	r4, r3
 800b7de:	bf08      	it	eq
 800b7e0:	68ec      	ldreq	r4, [r5, #12]
 800b7e2:	e7e6      	b.n	800b7b2 <__swsetup_r+0x1e>
 800b7e4:	0758      	lsls	r0, r3, #29
 800b7e6:	d512      	bpl.n	800b80e <__swsetup_r+0x7a>
 800b7e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7ea:	b141      	cbz	r1, 800b7fe <__swsetup_r+0x6a>
 800b7ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7f0:	4299      	cmp	r1, r3
 800b7f2:	d002      	beq.n	800b7fa <__swsetup_r+0x66>
 800b7f4:	4630      	mov	r0, r6
 800b7f6:	f7fe ffff 	bl	800a7f8 <_free_r>
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	6363      	str	r3, [r4, #52]	; 0x34
 800b7fe:	89a3      	ldrh	r3, [r4, #12]
 800b800:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b804:	81a3      	strh	r3, [r4, #12]
 800b806:	2300      	movs	r3, #0
 800b808:	6063      	str	r3, [r4, #4]
 800b80a:	6923      	ldr	r3, [r4, #16]
 800b80c:	6023      	str	r3, [r4, #0]
 800b80e:	89a3      	ldrh	r3, [r4, #12]
 800b810:	f043 0308 	orr.w	r3, r3, #8
 800b814:	81a3      	strh	r3, [r4, #12]
 800b816:	6923      	ldr	r3, [r4, #16]
 800b818:	b94b      	cbnz	r3, 800b82e <__swsetup_r+0x9a>
 800b81a:	89a3      	ldrh	r3, [r4, #12]
 800b81c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b824:	d003      	beq.n	800b82e <__swsetup_r+0x9a>
 800b826:	4621      	mov	r1, r4
 800b828:	4630      	mov	r0, r6
 800b82a:	f000 f929 	bl	800ba80 <__smakebuf_r>
 800b82e:	89a0      	ldrh	r0, [r4, #12]
 800b830:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b834:	f010 0301 	ands.w	r3, r0, #1
 800b838:	d00a      	beq.n	800b850 <__swsetup_r+0xbc>
 800b83a:	2300      	movs	r3, #0
 800b83c:	60a3      	str	r3, [r4, #8]
 800b83e:	6963      	ldr	r3, [r4, #20]
 800b840:	425b      	negs	r3, r3
 800b842:	61a3      	str	r3, [r4, #24]
 800b844:	6923      	ldr	r3, [r4, #16]
 800b846:	b943      	cbnz	r3, 800b85a <__swsetup_r+0xc6>
 800b848:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b84c:	d1ba      	bne.n	800b7c4 <__swsetup_r+0x30>
 800b84e:	bd70      	pop	{r4, r5, r6, pc}
 800b850:	0781      	lsls	r1, r0, #30
 800b852:	bf58      	it	pl
 800b854:	6963      	ldrpl	r3, [r4, #20]
 800b856:	60a3      	str	r3, [r4, #8]
 800b858:	e7f4      	b.n	800b844 <__swsetup_r+0xb0>
 800b85a:	2000      	movs	r0, #0
 800b85c:	e7f7      	b.n	800b84e <__swsetup_r+0xba>
 800b85e:	bf00      	nop
 800b860:	2000001c 	.word	0x2000001c
 800b864:	0800ce30 	.word	0x0800ce30
 800b868:	0800ce50 	.word	0x0800ce50
 800b86c:	0800ce10 	.word	0x0800ce10

0800b870 <_close_r>:
 800b870:	b538      	push	{r3, r4, r5, lr}
 800b872:	2300      	movs	r3, #0
 800b874:	4d05      	ldr	r5, [pc, #20]	; (800b88c <_close_r+0x1c>)
 800b876:	4604      	mov	r4, r0
 800b878:	4608      	mov	r0, r1
 800b87a:	602b      	str	r3, [r5, #0]
 800b87c:	f7f6 fafe 	bl	8001e7c <_close>
 800b880:	1c43      	adds	r3, r0, #1
 800b882:	d102      	bne.n	800b88a <_close_r+0x1a>
 800b884:	682b      	ldr	r3, [r5, #0]
 800b886:	b103      	cbz	r3, 800b88a <_close_r+0x1a>
 800b888:	6023      	str	r3, [r4, #0]
 800b88a:	bd38      	pop	{r3, r4, r5, pc}
 800b88c:	2000097c 	.word	0x2000097c

0800b890 <__sflush_r>:
 800b890:	898a      	ldrh	r2, [r1, #12]
 800b892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b896:	4605      	mov	r5, r0
 800b898:	0710      	lsls	r0, r2, #28
 800b89a:	460c      	mov	r4, r1
 800b89c:	d458      	bmi.n	800b950 <__sflush_r+0xc0>
 800b89e:	684b      	ldr	r3, [r1, #4]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	dc05      	bgt.n	800b8b0 <__sflush_r+0x20>
 800b8a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	dc02      	bgt.n	800b8b0 <__sflush_r+0x20>
 800b8aa:	2000      	movs	r0, #0
 800b8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b8b2:	2e00      	cmp	r6, #0
 800b8b4:	d0f9      	beq.n	800b8aa <__sflush_r+0x1a>
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b8bc:	682f      	ldr	r7, [r5, #0]
 800b8be:	602b      	str	r3, [r5, #0]
 800b8c0:	d032      	beq.n	800b928 <__sflush_r+0x98>
 800b8c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b8c4:	89a3      	ldrh	r3, [r4, #12]
 800b8c6:	075a      	lsls	r2, r3, #29
 800b8c8:	d505      	bpl.n	800b8d6 <__sflush_r+0x46>
 800b8ca:	6863      	ldr	r3, [r4, #4]
 800b8cc:	1ac0      	subs	r0, r0, r3
 800b8ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b8d0:	b10b      	cbz	r3, 800b8d6 <__sflush_r+0x46>
 800b8d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b8d4:	1ac0      	subs	r0, r0, r3
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	4602      	mov	r2, r0
 800b8da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b8dc:	4628      	mov	r0, r5
 800b8de:	6a21      	ldr	r1, [r4, #32]
 800b8e0:	47b0      	blx	r6
 800b8e2:	1c43      	adds	r3, r0, #1
 800b8e4:	89a3      	ldrh	r3, [r4, #12]
 800b8e6:	d106      	bne.n	800b8f6 <__sflush_r+0x66>
 800b8e8:	6829      	ldr	r1, [r5, #0]
 800b8ea:	291d      	cmp	r1, #29
 800b8ec:	d82c      	bhi.n	800b948 <__sflush_r+0xb8>
 800b8ee:	4a2a      	ldr	r2, [pc, #168]	; (800b998 <__sflush_r+0x108>)
 800b8f0:	40ca      	lsrs	r2, r1
 800b8f2:	07d6      	lsls	r6, r2, #31
 800b8f4:	d528      	bpl.n	800b948 <__sflush_r+0xb8>
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	6062      	str	r2, [r4, #4]
 800b8fa:	6922      	ldr	r2, [r4, #16]
 800b8fc:	04d9      	lsls	r1, r3, #19
 800b8fe:	6022      	str	r2, [r4, #0]
 800b900:	d504      	bpl.n	800b90c <__sflush_r+0x7c>
 800b902:	1c42      	adds	r2, r0, #1
 800b904:	d101      	bne.n	800b90a <__sflush_r+0x7a>
 800b906:	682b      	ldr	r3, [r5, #0]
 800b908:	b903      	cbnz	r3, 800b90c <__sflush_r+0x7c>
 800b90a:	6560      	str	r0, [r4, #84]	; 0x54
 800b90c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b90e:	602f      	str	r7, [r5, #0]
 800b910:	2900      	cmp	r1, #0
 800b912:	d0ca      	beq.n	800b8aa <__sflush_r+0x1a>
 800b914:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b918:	4299      	cmp	r1, r3
 800b91a:	d002      	beq.n	800b922 <__sflush_r+0x92>
 800b91c:	4628      	mov	r0, r5
 800b91e:	f7fe ff6b 	bl	800a7f8 <_free_r>
 800b922:	2000      	movs	r0, #0
 800b924:	6360      	str	r0, [r4, #52]	; 0x34
 800b926:	e7c1      	b.n	800b8ac <__sflush_r+0x1c>
 800b928:	6a21      	ldr	r1, [r4, #32]
 800b92a:	2301      	movs	r3, #1
 800b92c:	4628      	mov	r0, r5
 800b92e:	47b0      	blx	r6
 800b930:	1c41      	adds	r1, r0, #1
 800b932:	d1c7      	bne.n	800b8c4 <__sflush_r+0x34>
 800b934:	682b      	ldr	r3, [r5, #0]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d0c4      	beq.n	800b8c4 <__sflush_r+0x34>
 800b93a:	2b1d      	cmp	r3, #29
 800b93c:	d001      	beq.n	800b942 <__sflush_r+0xb2>
 800b93e:	2b16      	cmp	r3, #22
 800b940:	d101      	bne.n	800b946 <__sflush_r+0xb6>
 800b942:	602f      	str	r7, [r5, #0]
 800b944:	e7b1      	b.n	800b8aa <__sflush_r+0x1a>
 800b946:	89a3      	ldrh	r3, [r4, #12]
 800b948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b94c:	81a3      	strh	r3, [r4, #12]
 800b94e:	e7ad      	b.n	800b8ac <__sflush_r+0x1c>
 800b950:	690f      	ldr	r7, [r1, #16]
 800b952:	2f00      	cmp	r7, #0
 800b954:	d0a9      	beq.n	800b8aa <__sflush_r+0x1a>
 800b956:	0793      	lsls	r3, r2, #30
 800b958:	bf18      	it	ne
 800b95a:	2300      	movne	r3, #0
 800b95c:	680e      	ldr	r6, [r1, #0]
 800b95e:	bf08      	it	eq
 800b960:	694b      	ldreq	r3, [r1, #20]
 800b962:	eba6 0807 	sub.w	r8, r6, r7
 800b966:	600f      	str	r7, [r1, #0]
 800b968:	608b      	str	r3, [r1, #8]
 800b96a:	f1b8 0f00 	cmp.w	r8, #0
 800b96e:	dd9c      	ble.n	800b8aa <__sflush_r+0x1a>
 800b970:	4643      	mov	r3, r8
 800b972:	463a      	mov	r2, r7
 800b974:	4628      	mov	r0, r5
 800b976:	6a21      	ldr	r1, [r4, #32]
 800b978:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b97a:	47b0      	blx	r6
 800b97c:	2800      	cmp	r0, #0
 800b97e:	dc06      	bgt.n	800b98e <__sflush_r+0xfe>
 800b980:	89a3      	ldrh	r3, [r4, #12]
 800b982:	f04f 30ff 	mov.w	r0, #4294967295
 800b986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b98a:	81a3      	strh	r3, [r4, #12]
 800b98c:	e78e      	b.n	800b8ac <__sflush_r+0x1c>
 800b98e:	4407      	add	r7, r0
 800b990:	eba8 0800 	sub.w	r8, r8, r0
 800b994:	e7e9      	b.n	800b96a <__sflush_r+0xda>
 800b996:	bf00      	nop
 800b998:	20400001 	.word	0x20400001

0800b99c <_fflush_r>:
 800b99c:	b538      	push	{r3, r4, r5, lr}
 800b99e:	690b      	ldr	r3, [r1, #16]
 800b9a0:	4605      	mov	r5, r0
 800b9a2:	460c      	mov	r4, r1
 800b9a4:	b913      	cbnz	r3, 800b9ac <_fflush_r+0x10>
 800b9a6:	2500      	movs	r5, #0
 800b9a8:	4628      	mov	r0, r5
 800b9aa:	bd38      	pop	{r3, r4, r5, pc}
 800b9ac:	b118      	cbz	r0, 800b9b6 <_fflush_r+0x1a>
 800b9ae:	6983      	ldr	r3, [r0, #24]
 800b9b0:	b90b      	cbnz	r3, 800b9b6 <_fflush_r+0x1a>
 800b9b2:	f7ff f951 	bl	800ac58 <__sinit>
 800b9b6:	4b14      	ldr	r3, [pc, #80]	; (800ba08 <_fflush_r+0x6c>)
 800b9b8:	429c      	cmp	r4, r3
 800b9ba:	d11b      	bne.n	800b9f4 <_fflush_r+0x58>
 800b9bc:	686c      	ldr	r4, [r5, #4]
 800b9be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d0ef      	beq.n	800b9a6 <_fflush_r+0xa>
 800b9c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b9c8:	07d0      	lsls	r0, r2, #31
 800b9ca:	d404      	bmi.n	800b9d6 <_fflush_r+0x3a>
 800b9cc:	0599      	lsls	r1, r3, #22
 800b9ce:	d402      	bmi.n	800b9d6 <_fflush_r+0x3a>
 800b9d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9d2:	f7ff f9df 	bl	800ad94 <__retarget_lock_acquire_recursive>
 800b9d6:	4628      	mov	r0, r5
 800b9d8:	4621      	mov	r1, r4
 800b9da:	f7ff ff59 	bl	800b890 <__sflush_r>
 800b9de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b9e0:	4605      	mov	r5, r0
 800b9e2:	07da      	lsls	r2, r3, #31
 800b9e4:	d4e0      	bmi.n	800b9a8 <_fflush_r+0xc>
 800b9e6:	89a3      	ldrh	r3, [r4, #12]
 800b9e8:	059b      	lsls	r3, r3, #22
 800b9ea:	d4dd      	bmi.n	800b9a8 <_fflush_r+0xc>
 800b9ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b9ee:	f7ff f9d2 	bl	800ad96 <__retarget_lock_release_recursive>
 800b9f2:	e7d9      	b.n	800b9a8 <_fflush_r+0xc>
 800b9f4:	4b05      	ldr	r3, [pc, #20]	; (800ba0c <_fflush_r+0x70>)
 800b9f6:	429c      	cmp	r4, r3
 800b9f8:	d101      	bne.n	800b9fe <_fflush_r+0x62>
 800b9fa:	68ac      	ldr	r4, [r5, #8]
 800b9fc:	e7df      	b.n	800b9be <_fflush_r+0x22>
 800b9fe:	4b04      	ldr	r3, [pc, #16]	; (800ba10 <_fflush_r+0x74>)
 800ba00:	429c      	cmp	r4, r3
 800ba02:	bf08      	it	eq
 800ba04:	68ec      	ldreq	r4, [r5, #12]
 800ba06:	e7da      	b.n	800b9be <_fflush_r+0x22>
 800ba08:	0800ce30 	.word	0x0800ce30
 800ba0c:	0800ce50 	.word	0x0800ce50
 800ba10:	0800ce10 	.word	0x0800ce10

0800ba14 <_lseek_r>:
 800ba14:	b538      	push	{r3, r4, r5, lr}
 800ba16:	4604      	mov	r4, r0
 800ba18:	4608      	mov	r0, r1
 800ba1a:	4611      	mov	r1, r2
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	4d05      	ldr	r5, [pc, #20]	; (800ba34 <_lseek_r+0x20>)
 800ba20:	602a      	str	r2, [r5, #0]
 800ba22:	461a      	mov	r2, r3
 800ba24:	f7f6 fa4e 	bl	8001ec4 <_lseek>
 800ba28:	1c43      	adds	r3, r0, #1
 800ba2a:	d102      	bne.n	800ba32 <_lseek_r+0x1e>
 800ba2c:	682b      	ldr	r3, [r5, #0]
 800ba2e:	b103      	cbz	r3, 800ba32 <_lseek_r+0x1e>
 800ba30:	6023      	str	r3, [r4, #0]
 800ba32:	bd38      	pop	{r3, r4, r5, pc}
 800ba34:	2000097c 	.word	0x2000097c

0800ba38 <__swhatbuf_r>:
 800ba38:	b570      	push	{r4, r5, r6, lr}
 800ba3a:	460e      	mov	r6, r1
 800ba3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba40:	4614      	mov	r4, r2
 800ba42:	2900      	cmp	r1, #0
 800ba44:	461d      	mov	r5, r3
 800ba46:	b096      	sub	sp, #88	; 0x58
 800ba48:	da07      	bge.n	800ba5a <__swhatbuf_r+0x22>
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	602b      	str	r3, [r5, #0]
 800ba4e:	89b3      	ldrh	r3, [r6, #12]
 800ba50:	061a      	lsls	r2, r3, #24
 800ba52:	d410      	bmi.n	800ba76 <__swhatbuf_r+0x3e>
 800ba54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba58:	e00e      	b.n	800ba78 <__swhatbuf_r+0x40>
 800ba5a:	466a      	mov	r2, sp
 800ba5c:	f000 f8be 	bl	800bbdc <_fstat_r>
 800ba60:	2800      	cmp	r0, #0
 800ba62:	dbf2      	blt.n	800ba4a <__swhatbuf_r+0x12>
 800ba64:	9a01      	ldr	r2, [sp, #4]
 800ba66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ba6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ba6e:	425a      	negs	r2, r3
 800ba70:	415a      	adcs	r2, r3
 800ba72:	602a      	str	r2, [r5, #0]
 800ba74:	e7ee      	b.n	800ba54 <__swhatbuf_r+0x1c>
 800ba76:	2340      	movs	r3, #64	; 0x40
 800ba78:	2000      	movs	r0, #0
 800ba7a:	6023      	str	r3, [r4, #0]
 800ba7c:	b016      	add	sp, #88	; 0x58
 800ba7e:	bd70      	pop	{r4, r5, r6, pc}

0800ba80 <__smakebuf_r>:
 800ba80:	898b      	ldrh	r3, [r1, #12]
 800ba82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ba84:	079d      	lsls	r5, r3, #30
 800ba86:	4606      	mov	r6, r0
 800ba88:	460c      	mov	r4, r1
 800ba8a:	d507      	bpl.n	800ba9c <__smakebuf_r+0x1c>
 800ba8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ba90:	6023      	str	r3, [r4, #0]
 800ba92:	6123      	str	r3, [r4, #16]
 800ba94:	2301      	movs	r3, #1
 800ba96:	6163      	str	r3, [r4, #20]
 800ba98:	b002      	add	sp, #8
 800ba9a:	bd70      	pop	{r4, r5, r6, pc}
 800ba9c:	466a      	mov	r2, sp
 800ba9e:	ab01      	add	r3, sp, #4
 800baa0:	f7ff ffca 	bl	800ba38 <__swhatbuf_r>
 800baa4:	9900      	ldr	r1, [sp, #0]
 800baa6:	4605      	mov	r5, r0
 800baa8:	4630      	mov	r0, r6
 800baaa:	f7fe fef1 	bl	800a890 <_malloc_r>
 800baae:	b948      	cbnz	r0, 800bac4 <__smakebuf_r+0x44>
 800bab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bab4:	059a      	lsls	r2, r3, #22
 800bab6:	d4ef      	bmi.n	800ba98 <__smakebuf_r+0x18>
 800bab8:	f023 0303 	bic.w	r3, r3, #3
 800babc:	f043 0302 	orr.w	r3, r3, #2
 800bac0:	81a3      	strh	r3, [r4, #12]
 800bac2:	e7e3      	b.n	800ba8c <__smakebuf_r+0xc>
 800bac4:	4b0d      	ldr	r3, [pc, #52]	; (800bafc <__smakebuf_r+0x7c>)
 800bac6:	62b3      	str	r3, [r6, #40]	; 0x28
 800bac8:	89a3      	ldrh	r3, [r4, #12]
 800baca:	6020      	str	r0, [r4, #0]
 800bacc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bad0:	81a3      	strh	r3, [r4, #12]
 800bad2:	9b00      	ldr	r3, [sp, #0]
 800bad4:	6120      	str	r0, [r4, #16]
 800bad6:	6163      	str	r3, [r4, #20]
 800bad8:	9b01      	ldr	r3, [sp, #4]
 800bada:	b15b      	cbz	r3, 800baf4 <__smakebuf_r+0x74>
 800badc:	4630      	mov	r0, r6
 800bade:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bae2:	f000 f88d 	bl	800bc00 <_isatty_r>
 800bae6:	b128      	cbz	r0, 800baf4 <__smakebuf_r+0x74>
 800bae8:	89a3      	ldrh	r3, [r4, #12]
 800baea:	f023 0303 	bic.w	r3, r3, #3
 800baee:	f043 0301 	orr.w	r3, r3, #1
 800baf2:	81a3      	strh	r3, [r4, #12]
 800baf4:	89a0      	ldrh	r0, [r4, #12]
 800baf6:	4305      	orrs	r5, r0
 800baf8:	81a5      	strh	r5, [r4, #12]
 800bafa:	e7cd      	b.n	800ba98 <__smakebuf_r+0x18>
 800bafc:	0800abf1 	.word	0x0800abf1

0800bb00 <memchr>:
 800bb00:	4603      	mov	r3, r0
 800bb02:	b510      	push	{r4, lr}
 800bb04:	b2c9      	uxtb	r1, r1
 800bb06:	4402      	add	r2, r0
 800bb08:	4293      	cmp	r3, r2
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	d101      	bne.n	800bb12 <memchr+0x12>
 800bb0e:	2000      	movs	r0, #0
 800bb10:	e003      	b.n	800bb1a <memchr+0x1a>
 800bb12:	7804      	ldrb	r4, [r0, #0]
 800bb14:	3301      	adds	r3, #1
 800bb16:	428c      	cmp	r4, r1
 800bb18:	d1f6      	bne.n	800bb08 <memchr+0x8>
 800bb1a:	bd10      	pop	{r4, pc}

0800bb1c <memcpy>:
 800bb1c:	440a      	add	r2, r1
 800bb1e:	4291      	cmp	r1, r2
 800bb20:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb24:	d100      	bne.n	800bb28 <memcpy+0xc>
 800bb26:	4770      	bx	lr
 800bb28:	b510      	push	{r4, lr}
 800bb2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb2e:	4291      	cmp	r1, r2
 800bb30:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb34:	d1f9      	bne.n	800bb2a <memcpy+0xe>
 800bb36:	bd10      	pop	{r4, pc}

0800bb38 <memmove>:
 800bb38:	4288      	cmp	r0, r1
 800bb3a:	b510      	push	{r4, lr}
 800bb3c:	eb01 0402 	add.w	r4, r1, r2
 800bb40:	d902      	bls.n	800bb48 <memmove+0x10>
 800bb42:	4284      	cmp	r4, r0
 800bb44:	4623      	mov	r3, r4
 800bb46:	d807      	bhi.n	800bb58 <memmove+0x20>
 800bb48:	1e43      	subs	r3, r0, #1
 800bb4a:	42a1      	cmp	r1, r4
 800bb4c:	d008      	beq.n	800bb60 <memmove+0x28>
 800bb4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb52:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb56:	e7f8      	b.n	800bb4a <memmove+0x12>
 800bb58:	4601      	mov	r1, r0
 800bb5a:	4402      	add	r2, r0
 800bb5c:	428a      	cmp	r2, r1
 800bb5e:	d100      	bne.n	800bb62 <memmove+0x2a>
 800bb60:	bd10      	pop	{r4, pc}
 800bb62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb6a:	e7f7      	b.n	800bb5c <memmove+0x24>

0800bb6c <_realloc_r>:
 800bb6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb6e:	4607      	mov	r7, r0
 800bb70:	4614      	mov	r4, r2
 800bb72:	460e      	mov	r6, r1
 800bb74:	b921      	cbnz	r1, 800bb80 <_realloc_r+0x14>
 800bb76:	4611      	mov	r1, r2
 800bb78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bb7c:	f7fe be88 	b.w	800a890 <_malloc_r>
 800bb80:	b922      	cbnz	r2, 800bb8c <_realloc_r+0x20>
 800bb82:	f7fe fe39 	bl	800a7f8 <_free_r>
 800bb86:	4625      	mov	r5, r4
 800bb88:	4628      	mov	r0, r5
 800bb8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb8c:	f000 f848 	bl	800bc20 <_malloc_usable_size_r>
 800bb90:	42a0      	cmp	r0, r4
 800bb92:	d20f      	bcs.n	800bbb4 <_realloc_r+0x48>
 800bb94:	4621      	mov	r1, r4
 800bb96:	4638      	mov	r0, r7
 800bb98:	f7fe fe7a 	bl	800a890 <_malloc_r>
 800bb9c:	4605      	mov	r5, r0
 800bb9e:	2800      	cmp	r0, #0
 800bba0:	d0f2      	beq.n	800bb88 <_realloc_r+0x1c>
 800bba2:	4631      	mov	r1, r6
 800bba4:	4622      	mov	r2, r4
 800bba6:	f7ff ffb9 	bl	800bb1c <memcpy>
 800bbaa:	4631      	mov	r1, r6
 800bbac:	4638      	mov	r0, r7
 800bbae:	f7fe fe23 	bl	800a7f8 <_free_r>
 800bbb2:	e7e9      	b.n	800bb88 <_realloc_r+0x1c>
 800bbb4:	4635      	mov	r5, r6
 800bbb6:	e7e7      	b.n	800bb88 <_realloc_r+0x1c>

0800bbb8 <_read_r>:
 800bbb8:	b538      	push	{r3, r4, r5, lr}
 800bbba:	4604      	mov	r4, r0
 800bbbc:	4608      	mov	r0, r1
 800bbbe:	4611      	mov	r1, r2
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	4d05      	ldr	r5, [pc, #20]	; (800bbd8 <_read_r+0x20>)
 800bbc4:	602a      	str	r2, [r5, #0]
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	f7f6 f910 	bl	8001dec <_read>
 800bbcc:	1c43      	adds	r3, r0, #1
 800bbce:	d102      	bne.n	800bbd6 <_read_r+0x1e>
 800bbd0:	682b      	ldr	r3, [r5, #0]
 800bbd2:	b103      	cbz	r3, 800bbd6 <_read_r+0x1e>
 800bbd4:	6023      	str	r3, [r4, #0]
 800bbd6:	bd38      	pop	{r3, r4, r5, pc}
 800bbd8:	2000097c 	.word	0x2000097c

0800bbdc <_fstat_r>:
 800bbdc:	b538      	push	{r3, r4, r5, lr}
 800bbde:	2300      	movs	r3, #0
 800bbe0:	4d06      	ldr	r5, [pc, #24]	; (800bbfc <_fstat_r+0x20>)
 800bbe2:	4604      	mov	r4, r0
 800bbe4:	4608      	mov	r0, r1
 800bbe6:	4611      	mov	r1, r2
 800bbe8:	602b      	str	r3, [r5, #0]
 800bbea:	f7f6 f952 	bl	8001e92 <_fstat>
 800bbee:	1c43      	adds	r3, r0, #1
 800bbf0:	d102      	bne.n	800bbf8 <_fstat_r+0x1c>
 800bbf2:	682b      	ldr	r3, [r5, #0]
 800bbf4:	b103      	cbz	r3, 800bbf8 <_fstat_r+0x1c>
 800bbf6:	6023      	str	r3, [r4, #0]
 800bbf8:	bd38      	pop	{r3, r4, r5, pc}
 800bbfa:	bf00      	nop
 800bbfc:	2000097c 	.word	0x2000097c

0800bc00 <_isatty_r>:
 800bc00:	b538      	push	{r3, r4, r5, lr}
 800bc02:	2300      	movs	r3, #0
 800bc04:	4d05      	ldr	r5, [pc, #20]	; (800bc1c <_isatty_r+0x1c>)
 800bc06:	4604      	mov	r4, r0
 800bc08:	4608      	mov	r0, r1
 800bc0a:	602b      	str	r3, [r5, #0]
 800bc0c:	f7f6 f950 	bl	8001eb0 <_isatty>
 800bc10:	1c43      	adds	r3, r0, #1
 800bc12:	d102      	bne.n	800bc1a <_isatty_r+0x1a>
 800bc14:	682b      	ldr	r3, [r5, #0]
 800bc16:	b103      	cbz	r3, 800bc1a <_isatty_r+0x1a>
 800bc18:	6023      	str	r3, [r4, #0]
 800bc1a:	bd38      	pop	{r3, r4, r5, pc}
 800bc1c:	2000097c 	.word	0x2000097c

0800bc20 <_malloc_usable_size_r>:
 800bc20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc24:	1f18      	subs	r0, r3, #4
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	bfbc      	itt	lt
 800bc2a:	580b      	ldrlt	r3, [r1, r0]
 800bc2c:	18c0      	addlt	r0, r0, r3
 800bc2e:	4770      	bx	lr

0800bc30 <_init>:
 800bc30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc32:	bf00      	nop
 800bc34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc36:	bc08      	pop	{r3}
 800bc38:	469e      	mov	lr, r3
 800bc3a:	4770      	bx	lr

0800bc3c <_fini>:
 800bc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc3e:	bf00      	nop
 800bc40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc42:	bc08      	pop	{r3}
 800bc44:	469e      	mov	lr, r3
 800bc46:	4770      	bx	lr
