
RCFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010f3c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001804  08011128  08011128  00021128  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801292c  0801292c  000301f0  2**0
                  CONTENTS
  4 .ARM          00000000  0801292c  0801292c  000301f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801292c  0801292c  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801292c  0801292c  0002292c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012930  08012930  00022930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08012934  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a60  200001f0  08012b24  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c50  08012b24  00030c50  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eee9  00000000  00000000  00030219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000474f  00000000  00000000  0004f102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001648  00000000  00000000  00053858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001450  00000000  00000000  00054ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f5b4  00000000  00000000  000562f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e503  00000000  00000000  000758a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a6c31  00000000  00000000  00093da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013a9d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073f8  00000000  00000000  0013aa2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001f0 	.word	0x200001f0
 8000204:	00000000 	.word	0x00000000
 8000208:	0801110c 	.word	0x0801110c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001f4 	.word	0x200001f4
 8000224:	0801110c 	.word	0x0801110c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_d2uiz>:
 8000b60:	004a      	lsls	r2, r1, #1
 8000b62:	d211      	bcs.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d211      	bcs.n	8000b8e <__aeabi_d2uiz+0x2e>
 8000b6a:	d50d      	bpl.n	8000b88 <__aeabi_d2uiz+0x28>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d40e      	bmi.n	8000b94 <__aeabi_d2uiz+0x34>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_d2uiz+0x3a>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0000 	mov.w	r0, #0
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2f>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba8:	bf24      	itt	cs
 8000baa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bb2:	d90d      	bls.n	8000bd0 <__aeabi_d2f+0x30>
 8000bb4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bbc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd4:	d121      	bne.n	8000c1a <__aeabi_d2f+0x7a>
 8000bd6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bda:	bfbc      	itt	lt
 8000bdc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	4770      	bxlt	lr
 8000be2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bea:	f1c2 0218 	rsb	r2, r2, #24
 8000bee:	f1c2 0c20 	rsb	ip, r2, #32
 8000bf2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bfa:	bf18      	it	ne
 8000bfc:	f040 0001 	orrne.w	r0, r0, #1
 8000c00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c0c:	ea40 000c 	orr.w	r0, r0, ip
 8000c10:	fa23 f302 	lsr.w	r3, r3, r2
 8000c14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c18:	e7cc      	b.n	8000bb4 <__aeabi_d2f+0x14>
 8000c1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1e:	d107      	bne.n	8000c30 <__aeabi_d2f+0x90>
 8000c20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c24:	bf1e      	ittt	ne
 8000c26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2e:	4770      	bxne	lr
 8000c30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop

08000c40 <__aeabi_frsub>:
 8000c40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c44:	e002      	b.n	8000c4c <__addsf3>
 8000c46:	bf00      	nop

08000c48 <__aeabi_fsub>:
 8000c48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c4c <__addsf3>:
 8000c4c:	0042      	lsls	r2, r0, #1
 8000c4e:	bf1f      	itttt	ne
 8000c50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c54:	ea92 0f03 	teqne	r2, r3
 8000c58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c60:	d06a      	beq.n	8000d38 <__addsf3+0xec>
 8000c62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c6a:	bfc1      	itttt	gt
 8000c6c:	18d2      	addgt	r2, r2, r3
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	4048      	eorgt	r0, r1
 8000c72:	4041      	eorgt	r1, r0
 8000c74:	bfb8      	it	lt
 8000c76:	425b      	neglt	r3, r3
 8000c78:	2b19      	cmp	r3, #25
 8000c7a:	bf88      	it	hi
 8000c7c:	4770      	bxhi	lr
 8000c7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c8a:	bf18      	it	ne
 8000c8c:	4240      	negne	r0, r0
 8000c8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4249      	negne	r1, r1
 8000c9e:	ea92 0f03 	teq	r2, r3
 8000ca2:	d03f      	beq.n	8000d24 <__addsf3+0xd8>
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cac:	eb10 000c 	adds.w	r0, r0, ip
 8000cb0:	f1c3 0320 	rsb	r3, r3, #32
 8000cb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cbc:	d502      	bpl.n	8000cc4 <__addsf3+0x78>
 8000cbe:	4249      	negs	r1, r1
 8000cc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc8:	d313      	bcc.n	8000cf2 <__addsf3+0xa6>
 8000cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cce:	d306      	bcc.n	8000cde <__addsf3+0x92>
 8000cd0:	0840      	lsrs	r0, r0, #1
 8000cd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd6:	f102 0201 	add.w	r2, r2, #1
 8000cda:	2afe      	cmp	r2, #254	; 0xfe
 8000cdc:	d251      	bcs.n	8000d82 <__addsf3+0x136>
 8000cde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000ce2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce6:	bf08      	it	eq
 8000ce8:	f020 0001 	biceq.w	r0, r0, #1
 8000cec:	ea40 0003 	orr.w	r0, r0, r3
 8000cf0:	4770      	bx	lr
 8000cf2:	0049      	lsls	r1, r1, #1
 8000cf4:	eb40 0000 	adc.w	r0, r0, r0
 8000cf8:	3a01      	subs	r2, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d00:	d2ed      	bcs.n	8000cde <__addsf3+0x92>
 8000d02:	fab0 fc80 	clz	ip, r0
 8000d06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d12:	bfaa      	itet	ge
 8000d14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d18:	4252      	neglt	r2, r2
 8000d1a:	4318      	orrge	r0, r3
 8000d1c:	bfbc      	itt	lt
 8000d1e:	40d0      	lsrlt	r0, r2
 8000d20:	4318      	orrlt	r0, r3
 8000d22:	4770      	bx	lr
 8000d24:	f092 0f00 	teq	r2, #0
 8000d28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d2c:	bf06      	itte	eq
 8000d2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d32:	3201      	addeq	r2, #1
 8000d34:	3b01      	subne	r3, #1
 8000d36:	e7b5      	b.n	8000ca4 <__addsf3+0x58>
 8000d38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d40:	bf18      	it	ne
 8000d42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d46:	d021      	beq.n	8000d8c <__addsf3+0x140>
 8000d48:	ea92 0f03 	teq	r2, r3
 8000d4c:	d004      	beq.n	8000d58 <__addsf3+0x10c>
 8000d4e:	f092 0f00 	teq	r2, #0
 8000d52:	bf08      	it	eq
 8000d54:	4608      	moveq	r0, r1
 8000d56:	4770      	bx	lr
 8000d58:	ea90 0f01 	teq	r0, r1
 8000d5c:	bf1c      	itt	ne
 8000d5e:	2000      	movne	r0, #0
 8000d60:	4770      	bxne	lr
 8000d62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d66:	d104      	bne.n	8000d72 <__addsf3+0x126>
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	bf28      	it	cs
 8000d6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d70:	4770      	bx	lr
 8000d72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d76:	bf3c      	itt	cc
 8000d78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d7c:	4770      	bxcc	lr
 8000d7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d8a:	4770      	bx	lr
 8000d8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d90:	bf16      	itet	ne
 8000d92:	4608      	movne	r0, r1
 8000d94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d98:	4601      	movne	r1, r0
 8000d9a:	0242      	lsls	r2, r0, #9
 8000d9c:	bf06      	itte	eq
 8000d9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000da2:	ea90 0f01 	teqeq	r0, r1
 8000da6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000daa:	4770      	bx	lr

08000dac <__aeabi_ui2f>:
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e004      	b.n	8000dbc <__aeabi_i2f+0x8>
 8000db2:	bf00      	nop

08000db4 <__aeabi_i2f>:
 8000db4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db8:	bf48      	it	mi
 8000dba:	4240      	negmi	r0, r0
 8000dbc:	ea5f 0c00 	movs.w	ip, r0
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc8:	4601      	mov	r1, r0
 8000dca:	f04f 0000 	mov.w	r0, #0
 8000dce:	e01c      	b.n	8000e0a <__aeabi_l2f+0x2a>

08000dd0 <__aeabi_ul2f>:
 8000dd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd4:	bf08      	it	eq
 8000dd6:	4770      	bxeq	lr
 8000dd8:	f04f 0300 	mov.w	r3, #0
 8000ddc:	e00a      	b.n	8000df4 <__aeabi_l2f+0x14>
 8000dde:	bf00      	nop

08000de0 <__aeabi_l2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dec:	d502      	bpl.n	8000df4 <__aeabi_l2f+0x14>
 8000dee:	4240      	negs	r0, r0
 8000df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df4:	ea5f 0c01 	movs.w	ip, r1
 8000df8:	bf02      	ittt	eq
 8000dfa:	4684      	moveq	ip, r0
 8000dfc:	4601      	moveq	r1, r0
 8000dfe:	2000      	moveq	r0, #0
 8000e00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e04:	bf08      	it	eq
 8000e06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0e:	fabc f28c 	clz	r2, ip
 8000e12:	3a08      	subs	r2, #8
 8000e14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e18:	db10      	blt.n	8000e3c <__aeabi_l2f+0x5c>
 8000e1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1e:	4463      	add	r3, ip
 8000e20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e24:	f1c2 0220 	rsb	r2, r2, #32
 8000e28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e30:	eb43 0002 	adc.w	r0, r3, r2
 8000e34:	bf08      	it	eq
 8000e36:	f020 0001 	biceq.w	r0, r0, #1
 8000e3a:	4770      	bx	lr
 8000e3c:	f102 0220 	add.w	r2, r2, #32
 8000e40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e44:	f1c2 0220 	rsb	r2, r2, #32
 8000e48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e50:	eb43 0002 	adc.w	r0, r3, r2
 8000e54:	bf08      	it	eq
 8000e56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fmul>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d06f      	beq.n	8000f54 <__aeabi_fmul+0xf8>
 8000e74:	441a      	add	r2, r3
 8000e76:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7a:	0240      	lsls	r0, r0, #9
 8000e7c:	bf18      	it	ne
 8000e7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e82:	d01e      	beq.n	8000ec2 <__aeabi_fmul+0x66>
 8000e84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e90:	fba0 3101 	umull	r3, r1, r0, r1
 8000e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e9c:	bf3e      	ittt	cc
 8000e9e:	0049      	lslcc	r1, r1, #1
 8000ea0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ea4:	005b      	lslcc	r3, r3, #1
 8000ea6:	ea40 0001 	orr.w	r0, r0, r1
 8000eaa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000eae:	2afd      	cmp	r2, #253	; 0xfd
 8000eb0:	d81d      	bhi.n	8000eee <__aeabi_fmul+0x92>
 8000eb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eba:	bf08      	it	eq
 8000ebc:	f020 0001 	biceq.w	r0, r0, #1
 8000ec0:	4770      	bx	lr
 8000ec2:	f090 0f00 	teq	r0, #0
 8000ec6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000eca:	bf08      	it	eq
 8000ecc:	0249      	lsleq	r1, r1, #9
 8000ece:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ed6:	3a7f      	subs	r2, #127	; 0x7f
 8000ed8:	bfc2      	ittt	gt
 8000eda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ede:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee2:	4770      	bxgt	lr
 8000ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	3a01      	subs	r2, #1
 8000eee:	dc5d      	bgt.n	8000fac <__aeabi_fmul+0x150>
 8000ef0:	f112 0f19 	cmn.w	r2, #25
 8000ef4:	bfdc      	itt	le
 8000ef6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000efa:	4770      	bxle	lr
 8000efc:	f1c2 0200 	rsb	r2, r2, #0
 8000f00:	0041      	lsls	r1, r0, #1
 8000f02:	fa21 f102 	lsr.w	r1, r1, r2
 8000f06:	f1c2 0220 	rsb	r2, r2, #32
 8000f0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f12:	f140 0000 	adc.w	r0, r0, #0
 8000f16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f1a:	bf08      	it	eq
 8000f1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f20:	4770      	bx	lr
 8000f22:	f092 0f00 	teq	r2, #0
 8000f26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f2a:	bf02      	ittt	eq
 8000f2c:	0040      	lsleq	r0, r0, #1
 8000f2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f32:	3a01      	subeq	r2, #1
 8000f34:	d0f9      	beq.n	8000f2a <__aeabi_fmul+0xce>
 8000f36:	ea40 000c 	orr.w	r0, r0, ip
 8000f3a:	f093 0f00 	teq	r3, #0
 8000f3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f42:	bf02      	ittt	eq
 8000f44:	0049      	lsleq	r1, r1, #1
 8000f46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f4a:	3b01      	subeq	r3, #1
 8000f4c:	d0f9      	beq.n	8000f42 <__aeabi_fmul+0xe6>
 8000f4e:	ea41 010c 	orr.w	r1, r1, ip
 8000f52:	e78f      	b.n	8000e74 <__aeabi_fmul+0x18>
 8000f54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f58:	ea92 0f0c 	teq	r2, ip
 8000f5c:	bf18      	it	ne
 8000f5e:	ea93 0f0c 	teqne	r3, ip
 8000f62:	d00a      	beq.n	8000f7a <__aeabi_fmul+0x11e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1d8      	bne.n	8000f22 <__aeabi_fmul+0xc6>
 8000f70:	ea80 0001 	eor.w	r0, r0, r1
 8000f74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f78:	4770      	bx	lr
 8000f7a:	f090 0f00 	teq	r0, #0
 8000f7e:	bf17      	itett	ne
 8000f80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f84:	4608      	moveq	r0, r1
 8000f86:	f091 0f00 	teqne	r1, #0
 8000f8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f8e:	d014      	beq.n	8000fba <__aeabi_fmul+0x15e>
 8000f90:	ea92 0f0c 	teq	r2, ip
 8000f94:	d101      	bne.n	8000f9a <__aeabi_fmul+0x13e>
 8000f96:	0242      	lsls	r2, r0, #9
 8000f98:	d10f      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000f9a:	ea93 0f0c 	teq	r3, ip
 8000f9e:	d103      	bne.n	8000fa8 <__aeabi_fmul+0x14c>
 8000fa0:	024b      	lsls	r3, r1, #9
 8000fa2:	bf18      	it	ne
 8000fa4:	4608      	movne	r0, r1
 8000fa6:	d108      	bne.n	8000fba <__aeabi_fmul+0x15e>
 8000fa8:	ea80 0001 	eor.w	r0, r0, r1
 8000fac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb8:	4770      	bx	lr
 8000fba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fbe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fc2:	4770      	bx	lr

08000fc4 <__aeabi_fdiv>:
 8000fc4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fcc:	bf1e      	ittt	ne
 8000fce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fd2:	ea92 0f0c 	teqne	r2, ip
 8000fd6:	ea93 0f0c 	teqne	r3, ip
 8000fda:	d069      	beq.n	80010b0 <__aeabi_fdiv+0xec>
 8000fdc:	eba2 0203 	sub.w	r2, r2, r3
 8000fe0:	ea80 0c01 	eor.w	ip, r0, r1
 8000fe4:	0249      	lsls	r1, r1, #9
 8000fe6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fea:	d037      	beq.n	800105c <__aeabi_fdiv+0x98>
 8000fec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ff0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ff4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ffc:	428b      	cmp	r3, r1
 8000ffe:	bf38      	it	cc
 8001000:	005b      	lslcc	r3, r3, #1
 8001002:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001006:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800100a:	428b      	cmp	r3, r1
 800100c:	bf24      	itt	cs
 800100e:	1a5b      	subcs	r3, r3, r1
 8001010:	ea40 000c 	orrcs.w	r0, r0, ip
 8001014:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001018:	bf24      	itt	cs
 800101a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800101e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001022:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001026:	bf24      	itt	cs
 8001028:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001034:	bf24      	itt	cs
 8001036:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800103a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800103e:	011b      	lsls	r3, r3, #4
 8001040:	bf18      	it	ne
 8001042:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001046:	d1e0      	bne.n	800100a <__aeabi_fdiv+0x46>
 8001048:	2afd      	cmp	r2, #253	; 0xfd
 800104a:	f63f af50 	bhi.w	8000eee <__aeabi_fmul+0x92>
 800104e:	428b      	cmp	r3, r1
 8001050:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001054:	bf08      	it	eq
 8001056:	f020 0001 	biceq.w	r0, r0, #1
 800105a:	4770      	bx	lr
 800105c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001060:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001064:	327f      	adds	r2, #127	; 0x7f
 8001066:	bfc2      	ittt	gt
 8001068:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800106c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001070:	4770      	bxgt	lr
 8001072:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	3a01      	subs	r2, #1
 800107c:	e737      	b.n	8000eee <__aeabi_fmul+0x92>
 800107e:	f092 0f00 	teq	r2, #0
 8001082:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8001086:	bf02      	ittt	eq
 8001088:	0040      	lsleq	r0, r0, #1
 800108a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800108e:	3a01      	subeq	r2, #1
 8001090:	d0f9      	beq.n	8001086 <__aeabi_fdiv+0xc2>
 8001092:	ea40 000c 	orr.w	r0, r0, ip
 8001096:	f093 0f00 	teq	r3, #0
 800109a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800109e:	bf02      	ittt	eq
 80010a0:	0049      	lsleq	r1, r1, #1
 80010a2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80010a6:	3b01      	subeq	r3, #1
 80010a8:	d0f9      	beq.n	800109e <__aeabi_fdiv+0xda>
 80010aa:	ea41 010c 	orr.w	r1, r1, ip
 80010ae:	e795      	b.n	8000fdc <__aeabi_fdiv+0x18>
 80010b0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010b4:	ea92 0f0c 	teq	r2, ip
 80010b8:	d108      	bne.n	80010cc <__aeabi_fdiv+0x108>
 80010ba:	0242      	lsls	r2, r0, #9
 80010bc:	f47f af7d 	bne.w	8000fba <__aeabi_fmul+0x15e>
 80010c0:	ea93 0f0c 	teq	r3, ip
 80010c4:	f47f af70 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010c8:	4608      	mov	r0, r1
 80010ca:	e776      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010cc:	ea93 0f0c 	teq	r3, ip
 80010d0:	d104      	bne.n	80010dc <__aeabi_fdiv+0x118>
 80010d2:	024b      	lsls	r3, r1, #9
 80010d4:	f43f af4c 	beq.w	8000f70 <__aeabi_fmul+0x114>
 80010d8:	4608      	mov	r0, r1
 80010da:	e76e      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010dc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010e0:	bf18      	it	ne
 80010e2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010e6:	d1ca      	bne.n	800107e <__aeabi_fdiv+0xba>
 80010e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010ec:	f47f af5c 	bne.w	8000fa8 <__aeabi_fmul+0x14c>
 80010f0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010f4:	f47f af3c 	bne.w	8000f70 <__aeabi_fmul+0x114>
 80010f8:	e75f      	b.n	8000fba <__aeabi_fmul+0x15e>
 80010fa:	bf00      	nop

080010fc <__gesf2>:
 80010fc:	f04f 3cff 	mov.w	ip, #4294967295
 8001100:	e006      	b.n	8001110 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__lesf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	e002      	b.n	8001110 <__cmpsf2+0x4>
 800110a:	bf00      	nop

0800110c <__cmpsf2>:
 800110c:	f04f 0c01 	mov.w	ip, #1
 8001110:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800111c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001120:	bf18      	it	ne
 8001122:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001126:	d011      	beq.n	800114c <__cmpsf2+0x40>
 8001128:	b001      	add	sp, #4
 800112a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800112e:	bf18      	it	ne
 8001130:	ea90 0f01 	teqne	r0, r1
 8001134:	bf58      	it	pl
 8001136:	ebb2 0003 	subspl.w	r0, r2, r3
 800113a:	bf88      	it	hi
 800113c:	17c8      	asrhi	r0, r1, #31
 800113e:	bf38      	it	cc
 8001140:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001144:	bf18      	it	ne
 8001146:	f040 0001 	orrne.w	r0, r0, #1
 800114a:	4770      	bx	lr
 800114c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001150:	d102      	bne.n	8001158 <__cmpsf2+0x4c>
 8001152:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001156:	d105      	bne.n	8001164 <__cmpsf2+0x58>
 8001158:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800115c:	d1e4      	bne.n	8001128 <__cmpsf2+0x1c>
 800115e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001162:	d0e1      	beq.n	8001128 <__cmpsf2+0x1c>
 8001164:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop

0800116c <__aeabi_cfrcmple>:
 800116c:	4684      	mov	ip, r0
 800116e:	4608      	mov	r0, r1
 8001170:	4661      	mov	r1, ip
 8001172:	e7ff      	b.n	8001174 <__aeabi_cfcmpeq>

08001174 <__aeabi_cfcmpeq>:
 8001174:	b50f      	push	{r0, r1, r2, r3, lr}
 8001176:	f7ff ffc9 	bl	800110c <__cmpsf2>
 800117a:	2800      	cmp	r0, #0
 800117c:	bf48      	it	mi
 800117e:	f110 0f00 	cmnmi.w	r0, #0
 8001182:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001184 <__aeabi_fcmpeq>:
 8001184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001188:	f7ff fff4 	bl	8001174 <__aeabi_cfcmpeq>
 800118c:	bf0c      	ite	eq
 800118e:	2001      	moveq	r0, #1
 8001190:	2000      	movne	r0, #0
 8001192:	f85d fb08 	ldr.w	pc, [sp], #8
 8001196:	bf00      	nop

08001198 <__aeabi_fcmplt>:
 8001198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800119c:	f7ff ffea 	bl	8001174 <__aeabi_cfcmpeq>
 80011a0:	bf34      	ite	cc
 80011a2:	2001      	movcc	r0, #1
 80011a4:	2000      	movcs	r0, #0
 80011a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011aa:	bf00      	nop

080011ac <__aeabi_fcmple>:
 80011ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011b0:	f7ff ffe0 	bl	8001174 <__aeabi_cfcmpeq>
 80011b4:	bf94      	ite	ls
 80011b6:	2001      	movls	r0, #1
 80011b8:	2000      	movhi	r0, #0
 80011ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80011be:	bf00      	nop

080011c0 <__aeabi_fcmpge>:
 80011c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011c4:	f7ff ffd2 	bl	800116c <__aeabi_cfrcmple>
 80011c8:	bf94      	ite	ls
 80011ca:	2001      	movls	r0, #1
 80011cc:	2000      	movhi	r0, #0
 80011ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80011d2:	bf00      	nop

080011d4 <__aeabi_fcmpgt>:
 80011d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d8:	f7ff ffc8 	bl	800116c <__aeabi_cfrcmple>
 80011dc:	bf34      	ite	cc
 80011de:	2001      	movcc	r0, #1
 80011e0:	2000      	movcs	r0, #0
 80011e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011e6:	bf00      	nop

080011e8 <__aeabi_f2iz>:
 80011e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011ec:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011f0:	d30f      	bcc.n	8001212 <__aeabi_f2iz+0x2a>
 80011f2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011f6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011fa:	d90d      	bls.n	8001218 <__aeabi_f2iz+0x30>
 80011fc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001200:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001204:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001208:	fa23 f002 	lsr.w	r0, r3, r2
 800120c:	bf18      	it	ne
 800120e:	4240      	negne	r0, r0
 8001210:	4770      	bx	lr
 8001212:	f04f 0000 	mov.w	r0, #0
 8001216:	4770      	bx	lr
 8001218:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800121c:	d101      	bne.n	8001222 <__aeabi_f2iz+0x3a>
 800121e:	0242      	lsls	r2, r0, #9
 8001220:	d105      	bne.n	800122e <__aeabi_f2iz+0x46>
 8001222:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001226:	bf08      	it	eq
 8001228:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800122c:	4770      	bx	lr
 800122e:	f04f 0000 	mov.w	r0, #0
 8001232:	4770      	bx	lr

08001234 <__aeabi_f2uiz>:
 8001234:	0042      	lsls	r2, r0, #1
 8001236:	d20e      	bcs.n	8001256 <__aeabi_f2uiz+0x22>
 8001238:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800123c:	d30b      	bcc.n	8001256 <__aeabi_f2uiz+0x22>
 800123e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001242:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001246:	d409      	bmi.n	800125c <__aeabi_f2uiz+0x28>
 8001248:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800124c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001250:	fa23 f002 	lsr.w	r0, r3, r2
 8001254:	4770      	bx	lr
 8001256:	f04f 0000 	mov.w	r0, #0
 800125a:	4770      	bx	lr
 800125c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001260:	d101      	bne.n	8001266 <__aeabi_f2uiz+0x32>
 8001262:	0242      	lsls	r2, r0, #9
 8001264:	d102      	bne.n	800126c <__aeabi_f2uiz+0x38>
 8001266:	f04f 30ff 	mov.w	r0, #4294967295
 800126a:	4770      	bx	lr
 800126c:	f04f 0000 	mov.w	r0, #0
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop

08001274 <__aeabi_d2lz>:
 8001274:	b538      	push	{r3, r4, r5, lr}
 8001276:	460c      	mov	r4, r1
 8001278:	4605      	mov	r5, r0
 800127a:	4621      	mov	r1, r4
 800127c:	4628      	mov	r0, r5
 800127e:	2200      	movs	r2, #0
 8001280:	2300      	movs	r3, #0
 8001282:	f7ff fc07 	bl	8000a94 <__aeabi_dcmplt>
 8001286:	b928      	cbnz	r0, 8001294 <__aeabi_d2lz+0x20>
 8001288:	4628      	mov	r0, r5
 800128a:	4621      	mov	r1, r4
 800128c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001290:	f000 b80a 	b.w	80012a8 <__aeabi_d2ulz>
 8001294:	4628      	mov	r0, r5
 8001296:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800129a:	f000 f805 	bl	80012a8 <__aeabi_d2ulz>
 800129e:	4240      	negs	r0, r0
 80012a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80012a4:	bd38      	pop	{r3, r4, r5, pc}
 80012a6:	bf00      	nop

080012a8 <__aeabi_d2ulz>:
 80012a8:	b5d0      	push	{r4, r6, r7, lr}
 80012aa:	2200      	movs	r2, #0
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <__aeabi_d2ulz+0x34>)
 80012ae:	4606      	mov	r6, r0
 80012b0:	460f      	mov	r7, r1
 80012b2:	f7ff f97d 	bl	80005b0 <__aeabi_dmul>
 80012b6:	f7ff fc53 	bl	8000b60 <__aeabi_d2uiz>
 80012ba:	4604      	mov	r4, r0
 80012bc:	f7ff f8fe 	bl	80004bc <__aeabi_ui2d>
 80012c0:	2200      	movs	r2, #0
 80012c2:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <__aeabi_d2ulz+0x38>)
 80012c4:	f7ff f974 	bl	80005b0 <__aeabi_dmul>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4630      	mov	r0, r6
 80012ce:	4639      	mov	r1, r7
 80012d0:	f7fe ffb6 	bl	8000240 <__aeabi_dsub>
 80012d4:	f7ff fc44 	bl	8000b60 <__aeabi_d2uiz>
 80012d8:	4621      	mov	r1, r4
 80012da:	bdd0      	pop	{r4, r6, r7, pc}
 80012dc:	3df00000 	.word	0x3df00000
 80012e0:	41f00000 	.word	0x41f00000

080012e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b096      	sub	sp, #88	; 0x58
 80012e8:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ea:	f001 fa03 	bl	80026f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ee:	f000 f853 	bl	8001398 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012f2:	f000 fc55 	bl	8001ba0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80012f6:	f000 fc29 	bl	8001b4c <MX_USART1_UART_Init>
  MX_UART4_Init();
 80012fa:	f000 fbfd 	bl	8001af8 <MX_UART4_Init>
  MX_ADC1_Init();
 80012fe:	f000 f8a3 	bl	8001448 <MX_ADC1_Init>
  MX_RTC_Init();
 8001302:	f000 f8df 	bl	80014c4 <MX_RTC_Init>
  MX_TIM1_Init();
 8001306:	f000 f927 	bl	8001558 <MX_TIM1_Init>
  MX_TIM2_Init();
 800130a:	f000 f975 	bl	80015f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800130e:	f000 f9c7 	bl	80016a0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001312:	f000 fa19 	bl	8001748 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001316:	f000 fa6b 	bl	80017f0 <MX_TIM5_Init>
  MX_TIM6_Init();
 800131a:	f000 fabd 	bl	8001898 <MX_TIM6_Init>
  MX_TIM7_Init();
 800131e:	f000 faf1 	bl	8001904 <MX_TIM7_Init>
  MX_TIM8_Init();
 8001322:	f000 fb25 	bl	8001970 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  RCF_init(&l_rcfHandle,
 8001326:	4638      	mov	r0, r7
 8001328:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <main+0x84>)
 800132a:	9308      	str	r3, [sp, #32]
 800132c:	4b0f      	ldr	r3, [pc, #60]	; (800136c <main+0x88>)
 800132e:	9307      	str	r3, [sp, #28]
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <main+0x8c>)
 8001332:	9306      	str	r3, [sp, #24]
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <main+0x90>)
 8001336:	9305      	str	r3, [sp, #20]
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <main+0x94>)
 800133a:	9304      	str	r3, [sp, #16]
 800133c:	4b0f      	ldr	r3, [pc, #60]	; (800137c <main+0x98>)
 800133e:	9303      	str	r3, [sp, #12]
 8001340:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <main+0x9c>)
 8001342:	9302      	str	r3, [sp, #8]
 8001344:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <main+0xa0>)
 8001346:	9301      	str	r3, [sp, #4]
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <main+0xa4>)
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <main+0xa8>)
 800134e:	4a10      	ldr	r2, [pc, #64]	; (8001390 <main+0xac>)
 8001350:	4910      	ldr	r1, [pc, #64]	; (8001394 <main+0xb0>)
 8001352:	f009 fe3f 	bl	800afd4 <RCF_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    RCF_update(&l_rcfHandle);
 8001356:	463b      	mov	r3, r7
 8001358:	4618      	mov	r0, r3
 800135a:	f009 ff97 	bl	800b28c <RCF_update>

    UTI_delayUs(STP_MAIN_LOOP_DELAY_IN_US);
 800135e:	f242 7010 	movw	r0, #10000	; 0x2710
 8001362:	f00a fa9d 	bl	800b8a0 <UTI_delayUs>
    RCF_update(&l_rcfHandle);
 8001366:	e7f6      	b.n	8001356 <main+0x72>
 8001368:	20000a60 	.word	0x20000a60
 800136c:	20000870 	.word	0x20000870
 8001370:	20000840 	.word	0x20000840
 8001374:	200008e4 	.word	0x200008e4
 8001378:	20000570 	.word	0x20000570
 800137c:	20000b88 	.word	0x20000b88
 8001380:	200008f8 	.word	0x200008f8
 8001384:	200006d8 	.word	0x200006d8
 8001388:	20000624 	.word	0x20000624
 800138c:	2000078c 	.word	0x2000078c
 8001390:	20000ad4 	.word	0x20000ad4
 8001394:	200009ac 	.word	0x200009ac

08001398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b096      	sub	sp, #88	; 0x58
 800139c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013a2:	2228      	movs	r2, #40	; 0x28
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f00a fdb2 	bl	800bf10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ac:	f107 031c 	add.w	r3, r7, #28
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]
 80013ca:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80013cc:	230a      	movs	r3, #10
 80013ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013d0:	2301      	movs	r3, #1
 80013d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013d4:	2310      	movs	r3, #16
 80013d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80013d8:	2301      	movs	r3, #1
 80013da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013dc:	2300      	movs	r3, #0
 80013de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013e4:	4618      	mov	r0, r3
 80013e6:	f002 fb9b 	bl	8003b20 <HAL_RCC_OscConfig>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80013f0:	f000 fcea 	bl	8001dc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f4:	230f      	movs	r3, #15
 80013f6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013f8:	2300      	movs	r3, #0
 80013fa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013fc:	2300      	movs	r3, #0
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001400:	2300      	movs	r3, #0
 8001402:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001404:	2300      	movs	r3, #0
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001408:	f107 031c 	add.w	r3, r7, #28
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f002 fef6 	bl	8004200 <HAL_RCC_ClockConfig>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800141a:	f000 fcd5 	bl	8001dc8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800141e:	2303      	movs	r3, #3
 8001420:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001422:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001426:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001428:	2300      	movs	r3, #0
 800142a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	4618      	mov	r0, r3
 8001430:	f003 f926 	bl	8004680 <HAL_RCCEx_PeriphCLKConfig>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800143a:	f000 fcc5 	bl	8001dc8 <Error_Handler>
  }
}
 800143e:	bf00      	nop
 8001440:	3758      	adds	r7, #88	; 0x58
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
	...

08001448 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001458:	4b18      	ldr	r3, [pc, #96]	; (80014bc <MX_ADC1_Init+0x74>)
 800145a:	4a19      	ldr	r2, [pc, #100]	; (80014c0 <MX_ADC1_Init+0x78>)
 800145c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800145e:	4b17      	ldr	r3, [pc, #92]	; (80014bc <MX_ADC1_Init+0x74>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001464:	4b15      	ldr	r3, [pc, #84]	; (80014bc <MX_ADC1_Init+0x74>)
 8001466:	2200      	movs	r2, #0
 8001468:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800146a:	4b14      	ldr	r3, [pc, #80]	; (80014bc <MX_ADC1_Init+0x74>)
 800146c:	2200      	movs	r2, #0
 800146e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001470:	4b12      	ldr	r3, [pc, #72]	; (80014bc <MX_ADC1_Init+0x74>)
 8001472:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001476:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001478:	4b10      	ldr	r3, [pc, #64]	; (80014bc <MX_ADC1_Init+0x74>)
 800147a:	2200      	movs	r2, #0
 800147c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800147e:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <MX_ADC1_Init+0x74>)
 8001480:	2201      	movs	r2, #1
 8001482:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001484:	480d      	ldr	r0, [pc, #52]	; (80014bc <MX_ADC1_Init+0x74>)
 8001486:	f001 f9bb 	bl	8002800 <HAL_ADC_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001490:	f000 fc9a 	bl	8001dc8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001494:	2305      	movs	r3, #5
 8001496:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001498:	2301      	movs	r3, #1
 800149a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	4619      	mov	r1, r3
 80014a4:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_ADC1_Init+0x74>)
 80014a6:	f001 fb75 	bl	8002b94 <HAL_ADC_ConfigChannel>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80014b0:	f000 fc8a 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014b4:	bf00      	nop
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000840 	.word	0x20000840
 80014c0:	40012400 	.word	0x40012400

080014c4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	2100      	movs	r1, #0
 80014ce:	460a      	mov	r2, r1
 80014d0:	801a      	strh	r2, [r3, #0]
 80014d2:	460a      	mov	r2, r1
 80014d4:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80014d6:	2300      	movs	r3, #0
 80014d8:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80014da:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <MX_RTC_Init+0x8c>)
 80014dc:	4a1d      	ldr	r2, [pc, #116]	; (8001554 <MX_RTC_Init+0x90>)
 80014de:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80014e0:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <MX_RTC_Init+0x8c>)
 80014e2:	f04f 32ff 	mov.w	r2, #4294967295
 80014e6:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80014e8:	4b19      	ldr	r3, [pc, #100]	; (8001550 <MX_RTC_Init+0x8c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80014ee:	4818      	ldr	r0, [pc, #96]	; (8001550 <MX_RTC_Init+0x8c>)
 80014f0:	f003 fae2 	bl	8004ab8 <HAL_RTC_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 80014fa:	f000 fc65 	bl	8001dc8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80014fe:	2300      	movs	r3, #0
 8001500:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001502:	2300      	movs	r3, #0
 8001504:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001506:	2300      	movs	r3, #0
 8001508:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	2201      	movs	r2, #1
 800150e:	4619      	mov	r1, r3
 8001510:	480f      	ldr	r0, [pc, #60]	; (8001550 <MX_RTC_Init+0x8c>)
 8001512:	f003 fb9b 	bl	8004c4c <HAL_RTC_SetTime>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 800151c:	f000 fc54 	bl	8001dc8 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001520:	2301      	movs	r3, #1
 8001522:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001524:	2301      	movs	r3, #1
 8001526:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8001528:	2301      	movs	r3, #1
 800152a:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 800152c:	2300      	movs	r3, #0
 800152e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001530:	463b      	mov	r3, r7
 8001532:	2201      	movs	r2, #1
 8001534:	4619      	mov	r1, r3
 8001536:	4806      	ldr	r0, [pc, #24]	; (8001550 <MX_RTC_Init+0x8c>)
 8001538:	f003 fd54 	bl	8004fe4 <HAL_RTC_SetDate>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001542:	f000 fc41 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200008e4 	.word	0x200008e4
 8001554:	40002800 	.word	0x40002800

08001558 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800155e:	f107 0308 	add.w	r3, r7, #8
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800156c:	463b      	mov	r3, r7
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001574:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <MX_TIM1_Init+0x98>)
 8001576:	4a1f      	ldr	r2, [pc, #124]	; (80015f4 <MX_TIM1_Init+0x9c>)
 8001578:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 800157a:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <MX_TIM1_Init+0x98>)
 800157c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001580:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001582:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <MX_TIM1_Init+0x98>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8001588:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <MX_TIM1_Init+0x98>)
 800158a:	22f9      	movs	r2, #249	; 0xf9
 800158c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800158e:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <MX_TIM1_Init+0x98>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001594:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <MX_TIM1_Init+0x98>)
 8001596:	2200      	movs	r2, #0
 8001598:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800159a:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <MX_TIM1_Init+0x98>)
 800159c:	2280      	movs	r2, #128	; 0x80
 800159e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015a0:	4813      	ldr	r0, [pc, #76]	; (80015f0 <MX_TIM1_Init+0x98>)
 80015a2:	f004 f941 	bl	8005828 <HAL_TIM_Base_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80015ac:	f000 fc0c 	bl	8001dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015b6:	f107 0308 	add.w	r3, r7, #8
 80015ba:	4619      	mov	r1, r3
 80015bc:	480c      	ldr	r0, [pc, #48]	; (80015f0 <MX_TIM1_Init+0x98>)
 80015be:	f005 fa6b 	bl	8006a98 <HAL_TIM_ConfigClockSource>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80015c8:	f000 fbfe 	bl	8001dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015cc:	2300      	movs	r3, #0
 80015ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015d4:	463b      	mov	r3, r7
 80015d6:	4619      	mov	r1, r3
 80015d8:	4805      	ldr	r0, [pc, #20]	; (80015f0 <MX_TIM1_Init+0x98>)
 80015da:	f006 f9b9 	bl	8007950 <HAL_TIMEx_MasterConfigSynchronization>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80015e4:	f000 fbf0 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015e8:	bf00      	nop
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	200009ac 	.word	0x200009ac
 80015f4:	40012c00 	.word	0x40012c00

080015f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08c      	sub	sp, #48	; 0x30
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015fe:	f107 030c 	add.w	r3, r7, #12
 8001602:	2224      	movs	r2, #36	; 0x24
 8001604:	2100      	movs	r1, #0
 8001606:	4618      	mov	r0, r3
 8001608:	f00a fc82 	bl	800bf10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001614:	4b21      	ldr	r3, [pc, #132]	; (800169c <MX_TIM2_Init+0xa4>)
 8001616:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800161a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800161c:	4b1f      	ldr	r3, [pc, #124]	; (800169c <MX_TIM2_Init+0xa4>)
 800161e:	2200      	movs	r2, #0
 8001620:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001622:	4b1e      	ldr	r3, [pc, #120]	; (800169c <MX_TIM2_Init+0xa4>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001628:	4b1c      	ldr	r3, [pc, #112]	; (800169c <MX_TIM2_Init+0xa4>)
 800162a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800162e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001630:	4b1a      	ldr	r3, [pc, #104]	; (800169c <MX_TIM2_Init+0xa4>)
 8001632:	2200      	movs	r2, #0
 8001634:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001636:	4b19      	ldr	r3, [pc, #100]	; (800169c <MX_TIM2_Init+0xa4>)
 8001638:	2280      	movs	r2, #128	; 0x80
 800163a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800163c:	2303      	movs	r3, #3
 800163e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001640:	2300      	movs	r3, #0
 8001642:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001644:	2301      	movs	r3, #1
 8001646:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001648:	2300      	movs	r3, #0
 800164a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800164c:	230a      	movs	r3, #10
 800164e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001650:	2300      	movs	r3, #0
 8001652:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001654:	2301      	movs	r3, #1
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001658:	2300      	movs	r3, #0
 800165a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800165c:	2300      	movs	r3, #0
 800165e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	4619      	mov	r1, r3
 8001666:	480d      	ldr	r0, [pc, #52]	; (800169c <MX_TIM2_Init+0xa4>)
 8001668:	f004 fcd0 	bl	800600c <HAL_TIM_Encoder_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001672:	f000 fba9 	bl	8001dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001676:	2300      	movs	r3, #0
 8001678:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	4619      	mov	r1, r3
 8001682:	4806      	ldr	r0, [pc, #24]	; (800169c <MX_TIM2_Init+0xa4>)
 8001684:	f006 f964 	bl	8007950 <HAL_TIMEx_MasterConfigSynchronization>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800168e:	f000 fb9b 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001692:	bf00      	nop
 8001694:	3730      	adds	r7, #48	; 0x30
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000ad4 	.word	0x20000ad4

080016a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08c      	sub	sp, #48	; 0x30
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016a6:	f107 030c 	add.w	r3, r7, #12
 80016aa:	2224      	movs	r2, #36	; 0x24
 80016ac:	2100      	movs	r1, #0
 80016ae:	4618      	mov	r0, r3
 80016b0:	f00a fc2e 	bl	800bf10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016bc:	4b20      	ldr	r3, [pc, #128]	; (8001740 <MX_TIM3_Init+0xa0>)
 80016be:	4a21      	ldr	r2, [pc, #132]	; (8001744 <MX_TIM3_Init+0xa4>)
 80016c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016c2:	4b1f      	ldr	r3, [pc, #124]	; (8001740 <MX_TIM3_Init+0xa0>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c8:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <MX_TIM3_Init+0xa0>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80016ce:	4b1c      	ldr	r3, [pc, #112]	; (8001740 <MX_TIM3_Init+0xa0>)
 80016d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016d4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d6:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <MX_TIM3_Init+0xa0>)
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016dc:	4b18      	ldr	r3, [pc, #96]	; (8001740 <MX_TIM3_Init+0xa0>)
 80016de:	2280      	movs	r2, #128	; 0x80
 80016e0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016e2:	2303      	movs	r3, #3
 80016e4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016ea:	2301      	movs	r3, #1
 80016ec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80016f2:	230a      	movs	r3, #10
 80016f4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016f6:	2300      	movs	r3, #0
 80016f8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016fa:	2301      	movs	r3, #1
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016fe:	2300      	movs	r3, #0
 8001700:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001706:	f107 030c 	add.w	r3, r7, #12
 800170a:	4619      	mov	r1, r3
 800170c:	480c      	ldr	r0, [pc, #48]	; (8001740 <MX_TIM3_Init+0xa0>)
 800170e:	f004 fc7d 	bl	800600c <HAL_TIM_Encoder_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001718:	f000 fb56 	bl	8001dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800171c:	2300      	movs	r3, #0
 800171e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001720:	2300      	movs	r3, #0
 8001722:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001724:	1d3b      	adds	r3, r7, #4
 8001726:	4619      	mov	r1, r3
 8001728:	4805      	ldr	r0, [pc, #20]	; (8001740 <MX_TIM3_Init+0xa0>)
 800172a:	f006 f911 	bl	8007950 <HAL_TIMEx_MasterConfigSynchronization>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001734:	f000 fb48 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001738:	bf00      	nop
 800173a:	3730      	adds	r7, #48	; 0x30
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	2000078c 	.word	0x2000078c
 8001744:	40000400 	.word	0x40000400

08001748 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08c      	sub	sp, #48	; 0x30
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800174e:	f107 030c 	add.w	r3, r7, #12
 8001752:	2224      	movs	r2, #36	; 0x24
 8001754:	2100      	movs	r1, #0
 8001756:	4618      	mov	r0, r3
 8001758:	f00a fbda 	bl	800bf10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800175c:	1d3b      	adds	r3, r7, #4
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001764:	4b20      	ldr	r3, [pc, #128]	; (80017e8 <MX_TIM4_Init+0xa0>)
 8001766:	4a21      	ldr	r2, [pc, #132]	; (80017ec <MX_TIM4_Init+0xa4>)
 8001768:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800176a:	4b1f      	ldr	r3, [pc, #124]	; (80017e8 <MX_TIM4_Init+0xa0>)
 800176c:	2200      	movs	r2, #0
 800176e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001770:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <MX_TIM4_Init+0xa0>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001776:	4b1c      	ldr	r3, [pc, #112]	; (80017e8 <MX_TIM4_Init+0xa0>)
 8001778:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800177c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800177e:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <MX_TIM4_Init+0xa0>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001784:	4b18      	ldr	r3, [pc, #96]	; (80017e8 <MX_TIM4_Init+0xa0>)
 8001786:	2280      	movs	r2, #128	; 0x80
 8001788:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800178a:	2303      	movs	r3, #3
 800178c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001792:	2301      	movs	r3, #1
 8001794:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001796:	2300      	movs	r3, #0
 8001798:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800179a:	230a      	movs	r3, #10
 800179c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800179e:	2300      	movs	r3, #0
 80017a0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017a2:	2301      	movs	r3, #1
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017a6:	2300      	movs	r3, #0
 80017a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80017ae:	f107 030c 	add.w	r3, r7, #12
 80017b2:	4619      	mov	r1, r3
 80017b4:	480c      	ldr	r0, [pc, #48]	; (80017e8 <MX_TIM4_Init+0xa0>)
 80017b6:	f004 fc29 	bl	800600c <HAL_TIM_Encoder_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80017c0:	f000 fb02 	bl	8001dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c4:	2300      	movs	r3, #0
 80017c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	4619      	mov	r1, r3
 80017d0:	4805      	ldr	r0, [pc, #20]	; (80017e8 <MX_TIM4_Init+0xa0>)
 80017d2:	f006 f8bd 	bl	8007950 <HAL_TIMEx_MasterConfigSynchronization>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80017dc:	f000 faf4 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80017e0:	bf00      	nop
 80017e2:	3730      	adds	r7, #48	; 0x30
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000624 	.word	0x20000624
 80017ec:	40000800 	.word	0x40000800

080017f0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08c      	sub	sp, #48	; 0x30
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017f6:	f107 030c 	add.w	r3, r7, #12
 80017fa:	2224      	movs	r2, #36	; 0x24
 80017fc:	2100      	movs	r1, #0
 80017fe:	4618      	mov	r0, r3
 8001800:	f00a fb86 	bl	800bf10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800180c:	4b20      	ldr	r3, [pc, #128]	; (8001890 <MX_TIM5_Init+0xa0>)
 800180e:	4a21      	ldr	r2, [pc, #132]	; (8001894 <MX_TIM5_Init+0xa4>)
 8001810:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001812:	4b1f      	ldr	r3, [pc, #124]	; (8001890 <MX_TIM5_Init+0xa0>)
 8001814:	2200      	movs	r2, #0
 8001816:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001818:	4b1d      	ldr	r3, [pc, #116]	; (8001890 <MX_TIM5_Init+0xa0>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800181e:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <MX_TIM5_Init+0xa0>)
 8001820:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001824:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001826:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <MX_TIM5_Init+0xa0>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800182c:	4b18      	ldr	r3, [pc, #96]	; (8001890 <MX_TIM5_Init+0xa0>)
 800182e:	2280      	movs	r2, #128	; 0x80
 8001830:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001832:	2303      	movs	r3, #3
 8001834:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800183a:	2301      	movs	r3, #1
 800183c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800183e:	2300      	movs	r3, #0
 8001840:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001842:	230a      	movs	r3, #10
 8001844:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001846:	2300      	movs	r3, #0
 8001848:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800184a:	2301      	movs	r3, #1
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800184e:	2300      	movs	r3, #0
 8001850:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001856:	f107 030c 	add.w	r3, r7, #12
 800185a:	4619      	mov	r1, r3
 800185c:	480c      	ldr	r0, [pc, #48]	; (8001890 <MX_TIM5_Init+0xa0>)
 800185e:	f004 fbd5 	bl	800600c <HAL_TIM_Encoder_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001868:	f000 faae 	bl	8001dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800186c:	2300      	movs	r3, #0
 800186e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001870:	2300      	movs	r3, #0
 8001872:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001874:	1d3b      	adds	r3, r7, #4
 8001876:	4619      	mov	r1, r3
 8001878:	4805      	ldr	r0, [pc, #20]	; (8001890 <MX_TIM5_Init+0xa0>)
 800187a:	f006 f869 	bl	8007950 <HAL_TIMEx_MasterConfigSynchronization>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001884:	f000 faa0 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001888:	bf00      	nop
 800188a:	3730      	adds	r7, #48	; 0x30
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	200006d8 	.word	0x200006d8
 8001894:	40000c00 	.word	0x40000c00

08001898 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800189e:	463b      	mov	r3, r7
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <MX_TIM6_Init+0x64>)
 80018a8:	4a15      	ldr	r2, [pc, #84]	; (8001900 <MX_TIM6_Init+0x68>)
 80018aa:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7;
 80018ac:	4b13      	ldr	r3, [pc, #76]	; (80018fc <MX_TIM6_Init+0x64>)
 80018ae:	2207      	movs	r2, #7
 80018b0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b2:	4b12      	ldr	r3, [pc, #72]	; (80018fc <MX_TIM6_Init+0x64>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80018b8:	4b10      	ldr	r3, [pc, #64]	; (80018fc <MX_TIM6_Init+0x64>)
 80018ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018be:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018c0:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <MX_TIM6_Init+0x64>)
 80018c2:	2280      	movs	r2, #128	; 0x80
 80018c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80018c6:	480d      	ldr	r0, [pc, #52]	; (80018fc <MX_TIM6_Init+0x64>)
 80018c8:	f003 ffae 	bl	8005828 <HAL_TIM_Base_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80018d2:	f000 fa79 	bl	8001dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d6:	2300      	movs	r3, #0
 80018d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018da:	2300      	movs	r3, #0
 80018dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80018de:	463b      	mov	r3, r7
 80018e0:	4619      	mov	r1, r3
 80018e2:	4806      	ldr	r0, [pc, #24]	; (80018fc <MX_TIM6_Init+0x64>)
 80018e4:	f006 f834 	bl	8007950 <HAL_TIMEx_MasterConfigSynchronization>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80018ee:	f000 fa6b 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200008f8 	.word	0x200008f8
 8001900:	40001000 	.word	0x40001000

08001904 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800190a:	463b      	mov	r3, r7
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001912:	4b15      	ldr	r3, [pc, #84]	; (8001968 <MX_TIM7_Init+0x64>)
 8001914:	4a15      	ldr	r2, [pc, #84]	; (800196c <MX_TIM7_Init+0x68>)
 8001916:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7;
 8001918:	4b13      	ldr	r3, [pc, #76]	; (8001968 <MX_TIM7_Init+0x64>)
 800191a:	2207      	movs	r2, #7
 800191c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800191e:	4b12      	ldr	r3, [pc, #72]	; (8001968 <MX_TIM7_Init+0x64>)
 8001920:	2200      	movs	r2, #0
 8001922:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001924:	4b10      	ldr	r3, [pc, #64]	; (8001968 <MX_TIM7_Init+0x64>)
 8001926:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800192a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800192c:	4b0e      	ldr	r3, [pc, #56]	; (8001968 <MX_TIM7_Init+0x64>)
 800192e:	2280      	movs	r2, #128	; 0x80
 8001930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001932:	480d      	ldr	r0, [pc, #52]	; (8001968 <MX_TIM7_Init+0x64>)
 8001934:	f003 ff78 	bl	8005828 <HAL_TIM_Base_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800193e:	f000 fa43 	bl	8001dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001942:	2300      	movs	r3, #0
 8001944:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800194a:	463b      	mov	r3, r7
 800194c:	4619      	mov	r1, r3
 800194e:	4806      	ldr	r0, [pc, #24]	; (8001968 <MX_TIM7_Init+0x64>)
 8001950:	f005 fffe 	bl	8007950 <HAL_TIMEx_MasterConfigSynchronization>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800195a:	f000 fa35 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000b88 	.word	0x20000b88
 800196c:	40001400 	.word	0x40001400

08001970 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b096      	sub	sp, #88	; 0x58
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001976:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	609a      	str	r2, [r3, #8]
 8001982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001984:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800198e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	60da      	str	r2, [r3, #12]
 800199c:	611a      	str	r2, [r3, #16]
 800199e:	615a      	str	r2, [r3, #20]
 80019a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	2220      	movs	r2, #32
 80019a6:	2100      	movs	r1, #0
 80019a8:	4618      	mov	r0, r3
 80019aa:	f00a fab1 	bl	800bf10 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80019ae:	4b50      	ldr	r3, [pc, #320]	; (8001af0 <MX_TIM8_Init+0x180>)
 80019b0:	4a50      	ldr	r2, [pc, #320]	; (8001af4 <MX_TIM8_Init+0x184>)
 80019b2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7;
 80019b4:	4b4e      	ldr	r3, [pc, #312]	; (8001af0 <MX_TIM8_Init+0x180>)
 80019b6:	2207      	movs	r2, #7
 80019b8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80019ba:	4b4d      	ldr	r3, [pc, #308]	; (8001af0 <MX_TIM8_Init+0x180>)
 80019bc:	2220      	movs	r2, #32
 80019be:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100;
 80019c0:	4b4b      	ldr	r3, [pc, #300]	; (8001af0 <MX_TIM8_Init+0x180>)
 80019c2:	2264      	movs	r2, #100	; 0x64
 80019c4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c6:	4b4a      	ldr	r3, [pc, #296]	; (8001af0 <MX_TIM8_Init+0x180>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80019cc:	4b48      	ldr	r3, [pc, #288]	; (8001af0 <MX_TIM8_Init+0x180>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019d2:	4b47      	ldr	r3, [pc, #284]	; (8001af0 <MX_TIM8_Init+0x180>)
 80019d4:	2280      	movs	r2, #128	; 0x80
 80019d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80019d8:	4845      	ldr	r0, [pc, #276]	; (8001af0 <MX_TIM8_Init+0x180>)
 80019da:	f003 ff25 	bl	8005828 <HAL_TIM_Base_Init>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 80019e4:	f000 f9f0 	bl	8001dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ec:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80019ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019f2:	4619      	mov	r1, r3
 80019f4:	483e      	ldr	r0, [pc, #248]	; (8001af0 <MX_TIM8_Init+0x180>)
 80019f6:	f005 f84f 	bl	8006a98 <HAL_TIM_ConfigClockSource>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001a00:	f000 f9e2 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001a04:	483a      	ldr	r0, [pc, #232]	; (8001af0 <MX_TIM8_Init+0x180>)
 8001a06:	f004 f8fd 	bl	8005c04 <HAL_TIM_PWM_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001a10:	f000 f9da 	bl	8001dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a14:	2300      	movs	r3, #0
 8001a16:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a20:	4619      	mov	r1, r3
 8001a22:	4833      	ldr	r0, [pc, #204]	; (8001af0 <MX_TIM8_Init+0x180>)
 8001a24:	f005 ff94 	bl	8007950 <HAL_TIMEx_MasterConfigSynchronization>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8001a2e:	f000 f9cb 	bl	8001dc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a32:	2360      	movs	r3, #96	; 0x60
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a46:	2300      	movs	r3, #0
 8001a48:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a52:	2200      	movs	r2, #0
 8001a54:	4619      	mov	r1, r3
 8001a56:	4826      	ldr	r0, [pc, #152]	; (8001af0 <MX_TIM8_Init+0x180>)
 8001a58:	f004 fe80 	bl	800675c <HAL_TIM_PWM_ConfigChannel>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8001a62:	f000 f9b1 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a6a:	2204      	movs	r2, #4
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4820      	ldr	r0, [pc, #128]	; (8001af0 <MX_TIM8_Init+0x180>)
 8001a70:	f004 fe74 	bl	800675c <HAL_TIM_PWM_ConfigChannel>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8001a7a:	f000 f9a5 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a82:	2208      	movs	r2, #8
 8001a84:	4619      	mov	r1, r3
 8001a86:	481a      	ldr	r0, [pc, #104]	; (8001af0 <MX_TIM8_Init+0x180>)
 8001a88:	f004 fe68 	bl	800675c <HAL_TIM_PWM_ConfigChannel>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8001a92:	f000 f999 	bl	8001dc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a9a:	220c      	movs	r2, #12
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4814      	ldr	r0, [pc, #80]	; (8001af0 <MX_TIM8_Init+0x180>)
 8001aa0:	f004 fe5c 	bl	800675c <HAL_TIM_PWM_ConfigChannel>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8001aaa:	f000 f98d 	bl	8001dc8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ac2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ac6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4807      	ldr	r0, [pc, #28]	; (8001af0 <MX_TIM8_Init+0x180>)
 8001ad2:	f006 f80d 	bl	8007af0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_TIM8_Init+0x170>
  {
    Error_Handler();
 8001adc:	f000 f974 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001ae0:	4803      	ldr	r0, [pc, #12]	; (8001af0 <MX_TIM8_Init+0x180>)
 8001ae2:	f000 fb9b 	bl	800221c <HAL_TIM_MspPostInit>

}
 8001ae6:	bf00      	nop
 8001ae8:	3758      	adds	r7, #88	; 0x58
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000570 	.word	0x20000570
 8001af4:	40013400 	.word	0x40013400

08001af8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001afc:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <MX_UART4_Init+0x4c>)
 8001afe:	4a12      	ldr	r2, [pc, #72]	; (8001b48 <MX_UART4_Init+0x50>)
 8001b00:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001b02:	4b10      	ldr	r3, [pc, #64]	; (8001b44 <MX_UART4_Init+0x4c>)
 8001b04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b08:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <MX_UART4_Init+0x4c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <MX_UART4_Init+0x4c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001b16:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <MX_UART4_Init+0x4c>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001b1c:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <MX_UART4_Init+0x4c>)
 8001b1e:	220c      	movs	r2, #12
 8001b20:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b22:	4b08      	ldr	r3, [pc, #32]	; (8001b44 <MX_UART4_Init+0x4c>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b28:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <MX_UART4_Init+0x4c>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001b2e:	4805      	ldr	r0, [pc, #20]	; (8001b44 <MX_UART4_Init+0x4c>)
 8001b30:	f006 f8c6 	bl	8007cc0 <HAL_UART_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001b3a:	f000 f945 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000a60 	.word	0x20000a60
 8001b48:	40004c00 	.word	0x40004c00

08001b4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <MX_USART1_UART_Init+0x4c>)
 8001b52:	4a12      	ldr	r2, [pc, #72]	; (8001b9c <MX_USART1_UART_Init+0x50>)
 8001b54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b56:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <MX_USART1_UART_Init+0x4c>)
 8001b58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <MX_USART1_UART_Init+0x4c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b64:	4b0c      	ldr	r3, [pc, #48]	; (8001b98 <MX_USART1_UART_Init+0x4c>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b6a:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <MX_USART1_UART_Init+0x4c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b70:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <MX_USART1_UART_Init+0x4c>)
 8001b72:	220c      	movs	r2, #12
 8001b74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b76:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <MX_USART1_UART_Init+0x4c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b7c:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <MX_USART1_UART_Init+0x4c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b82:	4805      	ldr	r0, [pc, #20]	; (8001b98 <MX_USART1_UART_Init+0x4c>)
 8001b84:	f006 f89c 	bl	8007cc0 <HAL_UART_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b8e:	f000 f91b 	bl	8001dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20000870 	.word	0x20000870
 8001b9c:	40013800 	.word	0x40013800

08001ba0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba6:	f107 0310 	add.w	r3, r7, #16
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb4:	4b4e      	ldr	r3, [pc, #312]	; (8001cf0 <MX_GPIO_Init+0x150>)
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	4a4d      	ldr	r2, [pc, #308]	; (8001cf0 <MX_GPIO_Init+0x150>)
 8001bba:	f043 0310 	orr.w	r3, r3, #16
 8001bbe:	6193      	str	r3, [r2, #24]
 8001bc0:	4b4b      	ldr	r3, [pc, #300]	; (8001cf0 <MX_GPIO_Init+0x150>)
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	f003 0310 	and.w	r3, r3, #16
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bcc:	4b48      	ldr	r3, [pc, #288]	; (8001cf0 <MX_GPIO_Init+0x150>)
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	4a47      	ldr	r2, [pc, #284]	; (8001cf0 <MX_GPIO_Init+0x150>)
 8001bd2:	f043 0304 	orr.w	r3, r3, #4
 8001bd6:	6193      	str	r3, [r2, #24]
 8001bd8:	4b45      	ldr	r3, [pc, #276]	; (8001cf0 <MX_GPIO_Init+0x150>)
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be4:	4b42      	ldr	r3, [pc, #264]	; (8001cf0 <MX_GPIO_Init+0x150>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	4a41      	ldr	r2, [pc, #260]	; (8001cf0 <MX_GPIO_Init+0x150>)
 8001bea:	f043 0308 	orr.w	r3, r3, #8
 8001bee:	6193      	str	r3, [r2, #24]
 8001bf0:	4b3f      	ldr	r3, [pc, #252]	; (8001cf0 <MX_GPIO_Init+0x150>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	607b      	str	r3, [r7, #4]
 8001bfa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bfc:	4b3c      	ldr	r3, [pc, #240]	; (8001cf0 <MX_GPIO_Init+0x150>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	4a3b      	ldr	r2, [pc, #236]	; (8001cf0 <MX_GPIO_Init+0x150>)
 8001c02:	f043 0320 	orr.w	r3, r3, #32
 8001c06:	6193      	str	r3, [r2, #24]
 8001c08:	4b39      	ldr	r3, [pc, #228]	; (8001cf0 <MX_GPIO_Init+0x150>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	f003 0320 	and.w	r3, r3, #32
 8001c10:	603b      	str	r3, [r7, #0]
 8001c12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BLUE_LED_Pin|BLUETOOTH_SPI_CMD_Pin|BLUETOOTH_SPI_CS_Pin|MOTOR_REAR_LEFT_OUT_1_Pin
 8001c14:	2200      	movs	r2, #0
 8001c16:	f243 013a 	movw	r1, #12346	; 0x303a
 8001c1a:	4836      	ldr	r0, [pc, #216]	; (8001cf4 <MX_GPIO_Init+0x154>)
 8001c1c:	f001 ff1a 	bl	8003a54 <HAL_GPIO_WritePin>
                          |MOTOR_REAR_LEFT_OUT_2_Pin|MOTOR_FRONT_RIGHT_OUT_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUETOOTH_SPI_CLK_GPIO_Port, BLUETOOTH_SPI_CLK_Pin, GPIO_PIN_RESET);
 8001c20:	2200      	movs	r2, #0
 8001c22:	2110      	movs	r1, #16
 8001c24:	4834      	ldr	r0, [pc, #208]	; (8001cf8 <MX_GPIO_Init+0x158>)
 8001c26:	f001 ff15 	bl	8003a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_REAR_RIGHT_OUT_1_Pin|MOTOR_REAR_RIGHT_OUT_2_Pin|MOTOR_FRONT_LEFT_OUT_2_Pin|MOTOR_FRONT_LEFT_OUT_1_Pin, GPIO_PIN_RESET);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2133      	movs	r1, #51	; 0x33
 8001c2e:	4833      	ldr	r0, [pc, #204]	; (8001cfc <MX_GPIO_Init+0x15c>)
 8001c30:	f001 ff10 	bl	8003a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_FRONT_RIGHT_OUT_1_GPIO_Port, MOTOR_FRONT_RIGHT_OUT_1_Pin, GPIO_PIN_RESET);
 8001c34:	2200      	movs	r2, #0
 8001c36:	2104      	movs	r1, #4
 8001c38:	4831      	ldr	r0, [pc, #196]	; (8001d00 <MX_GPIO_Init+0x160>)
 8001c3a:	f001 ff0b 	bl	8003a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8001c3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c44:	2301      	movs	r3, #1
 8001c46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8001c50:	f107 0310 	add.w	r3, r7, #16
 8001c54:	4619      	mov	r1, r3
 8001c56:	4827      	ldr	r0, [pc, #156]	; (8001cf4 <MX_GPIO_Init+0x154>)
 8001c58:	f001 fc42 	bl	80034e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_RESET_Pin BLUETOOTH_SPI_DAT_Pin */
  GPIO_InitStruct.Pin = SW_RESET_Pin|BLUETOOTH_SPI_DAT_Pin;
 8001c5c:	2305      	movs	r3, #5
 8001c5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c68:	f107 0310 	add.w	r3, r7, #16
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4821      	ldr	r0, [pc, #132]	; (8001cf4 <MX_GPIO_Init+0x154>)
 8001c70:	f001 fc36 	bl	80034e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLUETOOTH_SPI_CMD_Pin BLUETOOTH_SPI_CS_Pin MOTOR_REAR_LEFT_OUT_1_Pin MOTOR_REAR_LEFT_OUT_2_Pin
                           MOTOR_FRONT_RIGHT_OUT_2_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_CMD_Pin|BLUETOOTH_SPI_CS_Pin|MOTOR_REAR_LEFT_OUT_1_Pin|MOTOR_REAR_LEFT_OUT_2_Pin
 8001c74:	f241 033a 	movw	r3, #4154	; 0x103a
 8001c78:	613b      	str	r3, [r7, #16]
                          |MOTOR_FRONT_RIGHT_OUT_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c82:	2303      	movs	r3, #3
 8001c84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c86:	f107 0310 	add.w	r3, r7, #16
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4819      	ldr	r0, [pc, #100]	; (8001cf4 <MX_GPIO_Init+0x154>)
 8001c8e:	f001 fc27 	bl	80034e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUETOOTH_SPI_CLK_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_CLK_Pin;
 8001c92:	2310      	movs	r3, #16
 8001c94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c96:	2301      	movs	r3, #1
 8001c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUETOOTH_SPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001ca2:	f107 0310 	add.w	r3, r7, #16
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4813      	ldr	r0, [pc, #76]	; (8001cf8 <MX_GPIO_Init+0x158>)
 8001caa:	f001 fc19 	bl	80034e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_REAR_RIGHT_OUT_1_Pin MOTOR_REAR_RIGHT_OUT_2_Pin MOTOR_FRONT_LEFT_OUT_2_Pin MOTOR_FRONT_LEFT_OUT_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_REAR_RIGHT_OUT_1_Pin|MOTOR_REAR_RIGHT_OUT_2_Pin|MOTOR_FRONT_LEFT_OUT_2_Pin|MOTOR_FRONT_LEFT_OUT_1_Pin;
 8001cae:	2333      	movs	r3, #51	; 0x33
 8001cb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cbe:	f107 0310 	add.w	r3, r7, #16
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	480d      	ldr	r0, [pc, #52]	; (8001cfc <MX_GPIO_Init+0x15c>)
 8001cc6:	f001 fc0b 	bl	80034e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_FRONT_RIGHT_OUT_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_FRONT_RIGHT_OUT_1_Pin;
 8001cca:	2304      	movs	r3, #4
 8001ccc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MOTOR_FRONT_RIGHT_OUT_1_GPIO_Port, &GPIO_InitStruct);
 8001cda:	f107 0310 	add.w	r3, r7, #16
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4807      	ldr	r0, [pc, #28]	; (8001d00 <MX_GPIO_Init+0x160>)
 8001ce2:	f001 fbfd 	bl	80034e0 <HAL_GPIO_Init>

}
 8001ce6:	bf00      	nop
 8001ce8:	3720      	adds	r7, #32
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40011000 	.word	0x40011000
 8001cf8:	40010800 	.word	0x40010800
 8001cfc:	40010c00 	.word	0x40010c00
 8001d00:	40011400 	.word	0x40011400

08001d04 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  if ((htim == &htim2) || (htim == &htim3) || (htim == &htim4) || (htim == &htim5))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a0b      	ldr	r2, [pc, #44]	; (8001d3c <HAL_TIM_IC_CaptureCallback+0x38>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d00b      	beq.n	8001d2c <HAL_TIM_IC_CaptureCallback+0x28>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a0a      	ldr	r2, [pc, #40]	; (8001d40 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d007      	beq.n	8001d2c <HAL_TIM_IC_CaptureCallback+0x28>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a09      	ldr	r2, [pc, #36]	; (8001d44 <HAL_TIM_IC_CaptureCallback+0x40>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d003      	beq.n	8001d2c <HAL_TIM_IC_CaptureCallback+0x28>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a08      	ldr	r2, [pc, #32]	; (8001d48 <HAL_TIM_IC_CaptureCallback+0x44>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d103      	bne.n	8001d34 <HAL_TIM_IC_CaptureCallback+0x30>
  {
    DRV_updateEncoder(htim);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f007 fa2d 	bl	800918c <DRV_updateEncoder>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8001d32:	bf00      	nop
 8001d34:	bf00      	nop
}
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000ad4 	.word	0x20000ad4
 8001d40:	2000078c 	.word	0x2000078c
 8001d44:	20000624 	.word	0x20000624
 8001d48:	200006d8 	.word	0x200006d8

08001d4c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check whether the handle of the triggering timer requires a LED update */
  if (htim == &htim1)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a08      	ldr	r2, [pc, #32]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d102      	bne.n	8001d62 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    LED_update();
 8001d5c:	f008 fc36 	bl	800a5cc <LED_update>
  else if (htim == &htim6)
  {
    CHR_overflow();
  }

  return;
 8001d60:	e006      	b.n	8001d70 <HAL_TIM_PeriodElapsedCallback+0x24>
  else if (htim == &htim6)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a05      	ldr	r2, [pc, #20]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d102      	bne.n	8001d70 <HAL_TIM_PeriodElapsedCallback+0x24>
    CHR_overflow();
 8001d6a:	f007 f853 	bl	8008e14 <CHR_overflow>
  return;
 8001d6e:	bf00      	nop
 8001d70:	bf00      	nop
}
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	200009ac 	.word	0x200009ac
 8001d7c:	200008f8 	.word	0x200008f8

08001d80 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Nothing to do */
  return;
 8001d88:	bf00      	nop
}
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr
	...

08001d94 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Check the handle of the UART triggering this callback and actually receive date */
  if (huart == &huart1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a08      	ldr	r2, [pc, #32]	; (8001dc0 <HAL_UART_RxCpltCallback+0x2c>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d102      	bne.n	8001daa <HAL_UART_RxCpltCallback+0x16>
  {
    CON_receiveData();
 8001da4:	f007 f904 	bl	8008fb0 <CON_receiveData>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8001da8:	e006      	b.n	8001db8 <HAL_UART_RxCpltCallback+0x24>
  else if (huart == &huart4)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a05      	ldr	r2, [pc, #20]	; (8001dc4 <HAL_UART_RxCpltCallback+0x30>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d102      	bne.n	8001db8 <HAL_UART_RxCpltCallback+0x24>
    MAS_receiveData();
 8001db2:	f008 fd6f 	bl	800a894 <MAS_receiveData>
  return;
 8001db6:	bf00      	nop
 8001db8:	bf00      	nop
}
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20000870 	.word	0x20000870
 8001dc4:	20000a60 	.word	0x20000a60

08001dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dcc:	b672      	cpsid	i
}
 8001dce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  LOG_error("Error_Handler() triggered");
 8001dd0:	4902      	ldr	r1, [pc, #8]	; (8001ddc <Error_Handler+0x14>)
 8001dd2:	2003      	movs	r0, #3
 8001dd4:	f008 fccc 	bl	800a770 <LOG_log>

  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <Error_Handler+0x10>
 8001dda:	bf00      	nop
 8001ddc:	08011128 	.word	0x08011128

08001de0 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
     LOG_error("Wrong parameters: %s@%d", file, line);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	4904      	ldr	r1, [pc, #16]	; (8001e00 <assert_failed+0x20>)
 8001df0:	2003      	movs	r0, #3
 8001df2:	f008 fcbd 	bl	800a770 <LOG_log>

    return;
 8001df6:	bf00      	nop
  /* USER CODE END 6 */
}
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	08011144 	.word	0x08011144

08001e04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e0a:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <HAL_MspInit+0x5c>)
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	4a14      	ldr	r2, [pc, #80]	; (8001e60 <HAL_MspInit+0x5c>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	6193      	str	r3, [r2, #24]
 8001e16:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <HAL_MspInit+0x5c>)
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e22:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <HAL_MspInit+0x5c>)
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	4a0e      	ldr	r2, [pc, #56]	; (8001e60 <HAL_MspInit+0x5c>)
 8001e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e2c:	61d3      	str	r3, [r2, #28]
 8001e2e:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <HAL_MspInit+0x5c>)
 8001e30:	69db      	ldr	r3, [r3, #28]
 8001e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e36:	607b      	str	r3, [r7, #4]
 8001e38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e3a:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <HAL_MspInit+0x60>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <HAL_MspInit+0x60>)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e56:	bf00      	nop
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40010000 	.word	0x40010000

08001e68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	f107 0310 	add.w	r3, r7, #16
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a14      	ldr	r2, [pc, #80]	; (8001ed4 <HAL_ADC_MspInit+0x6c>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d121      	bne.n	8001ecc <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e88:	4b13      	ldr	r3, [pc, #76]	; (8001ed8 <HAL_ADC_MspInit+0x70>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	4a12      	ldr	r2, [pc, #72]	; (8001ed8 <HAL_ADC_MspInit+0x70>)
 8001e8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e92:	6193      	str	r3, [r2, #24]
 8001e94:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <HAL_ADC_MspInit+0x70>)
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea0:	4b0d      	ldr	r3, [pc, #52]	; (8001ed8 <HAL_ADC_MspInit+0x70>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	4a0c      	ldr	r2, [pc, #48]	; (8001ed8 <HAL_ADC_MspInit+0x70>)
 8001ea6:	f043 0304 	orr.w	r3, r3, #4
 8001eaa:	6193      	str	r3, [r2, #24]
 8001eac:	4b0a      	ldr	r3, [pc, #40]	; (8001ed8 <HAL_ADC_MspInit+0x70>)
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	f003 0304 	and.w	r3, r3, #4
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = BATTERY_ADC_Pin;
 8001eb8:	2320      	movs	r3, #32
 8001eba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATTERY_ADC_GPIO_Port, &GPIO_InitStruct);
 8001ec0:	f107 0310 	add.w	r3, r7, #16
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4805      	ldr	r0, [pc, #20]	; (8001edc <HAL_ADC_MspInit+0x74>)
 8001ec8:	f001 fb0a 	bl	80034e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ecc:	bf00      	nop
 8001ece:	3720      	adds	r7, #32
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40012400 	.word	0x40012400
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40010800 	.word	0x40010800

08001ee0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a0b      	ldr	r2, [pc, #44]	; (8001f1c <HAL_RTC_MspInit+0x3c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d110      	bne.n	8001f14 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001ef2:	f001 fe09 	bl	8003b08 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <HAL_RTC_MspInit+0x40>)
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	4a09      	ldr	r2, [pc, #36]	; (8001f20 <HAL_RTC_MspInit+0x40>)
 8001efc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f00:	61d3      	str	r3, [r2, #28]
 8001f02:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <HAL_RTC_MspInit+0x40>)
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f0e:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <HAL_RTC_MspInit+0x44>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001f14:	bf00      	nop
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40002800 	.word	0x40002800
 8001f20:	40021000 	.word	0x40021000
 8001f24:	4242043c 	.word	0x4242043c

08001f28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a2c      	ldr	r2, [pc, #176]	; (8001fe8 <HAL_TIM_Base_MspInit+0xc0>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d114      	bne.n	8001f64 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f3a:	4b2c      	ldr	r3, [pc, #176]	; (8001fec <HAL_TIM_Base_MspInit+0xc4>)
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	4a2b      	ldr	r2, [pc, #172]	; (8001fec <HAL_TIM_Base_MspInit+0xc4>)
 8001f40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f44:	6193      	str	r3, [r2, #24]
 8001f46:	4b29      	ldr	r3, [pc, #164]	; (8001fec <HAL_TIM_Base_MspInit+0xc4>)
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 6, 0);
 8001f52:	2200      	movs	r2, #0
 8001f54:	2106      	movs	r1, #6
 8001f56:	2019      	movs	r0, #25
 8001f58:	f001 f92c 	bl	80031b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001f5c:	2019      	movs	r0, #25
 8001f5e:	f001 f955 	bl	800320c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001f62:	e03c      	b.n	8001fde <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM6)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a21      	ldr	r2, [pc, #132]	; (8001ff0 <HAL_TIM_Base_MspInit+0xc8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d114      	bne.n	8001f98 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f6e:	4b1f      	ldr	r3, [pc, #124]	; (8001fec <HAL_TIM_Base_MspInit+0xc4>)
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	4a1e      	ldr	r2, [pc, #120]	; (8001fec <HAL_TIM_Base_MspInit+0xc4>)
 8001f74:	f043 0310 	orr.w	r3, r3, #16
 8001f78:	61d3      	str	r3, [r2, #28]
 8001f7a:	4b1c      	ldr	r3, [pc, #112]	; (8001fec <HAL_TIM_Base_MspInit+0xc4>)
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	f003 0310 	and.w	r3, r3, #16
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2100      	movs	r1, #0
 8001f8a:	2036      	movs	r0, #54	; 0x36
 8001f8c:	f001 f912 	bl	80031b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001f90:	2036      	movs	r0, #54	; 0x36
 8001f92:	f001 f93b 	bl	800320c <HAL_NVIC_EnableIRQ>
}
 8001f96:	e022      	b.n	8001fde <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM7)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a15      	ldr	r2, [pc, #84]	; (8001ff4 <HAL_TIM_Base_MspInit+0xcc>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d10c      	bne.n	8001fbc <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001fa2:	4b12      	ldr	r3, [pc, #72]	; (8001fec <HAL_TIM_Base_MspInit+0xc4>)
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	4a11      	ldr	r2, [pc, #68]	; (8001fec <HAL_TIM_Base_MspInit+0xc4>)
 8001fa8:	f043 0320 	orr.w	r3, r3, #32
 8001fac:	61d3      	str	r3, [r2, #28]
 8001fae:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <HAL_TIM_Base_MspInit+0xc4>)
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f003 0320 	and.w	r3, r3, #32
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
}
 8001fba:	e010      	b.n	8001fde <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM8)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a0d      	ldr	r2, [pc, #52]	; (8001ff8 <HAL_TIM_Base_MspInit+0xd0>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d10b      	bne.n	8001fde <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001fc6:	4b09      	ldr	r3, [pc, #36]	; (8001fec <HAL_TIM_Base_MspInit+0xc4>)
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	4a08      	ldr	r2, [pc, #32]	; (8001fec <HAL_TIM_Base_MspInit+0xc4>)
 8001fcc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fd0:	6193      	str	r3, [r2, #24]
 8001fd2:	4b06      	ldr	r3, [pc, #24]	; (8001fec <HAL_TIM_Base_MspInit+0xc4>)
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
}
 8001fde:	bf00      	nop
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40012c00 	.word	0x40012c00
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40001000 	.word	0x40001000
 8001ff4:	40001400 	.word	0x40001400
 8001ff8:	40013400 	.word	0x40013400

08001ffc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b090      	sub	sp, #64	; 0x40
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800201a:	d157      	bne.n	80020cc <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800201c:	4b78      	ldr	r3, [pc, #480]	; (8002200 <HAL_TIM_Encoder_MspInit+0x204>)
 800201e:	69db      	ldr	r3, [r3, #28]
 8002020:	4a77      	ldr	r2, [pc, #476]	; (8002200 <HAL_TIM_Encoder_MspInit+0x204>)
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	61d3      	str	r3, [r2, #28]
 8002028:	4b75      	ldr	r3, [pc, #468]	; (8002200 <HAL_TIM_Encoder_MspInit+0x204>)
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	62bb      	str	r3, [r7, #40]	; 0x28
 8002032:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002034:	4b72      	ldr	r3, [pc, #456]	; (8002200 <HAL_TIM_Encoder_MspInit+0x204>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	4a71      	ldr	r2, [pc, #452]	; (8002200 <HAL_TIM_Encoder_MspInit+0x204>)
 800203a:	f043 0304 	orr.w	r3, r3, #4
 800203e:	6193      	str	r3, [r2, #24]
 8002040:	4b6f      	ldr	r3, [pc, #444]	; (8002200 <HAL_TIM_Encoder_MspInit+0x204>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	627b      	str	r3, [r7, #36]	; 0x24
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800204c:	4b6c      	ldr	r3, [pc, #432]	; (8002200 <HAL_TIM_Encoder_MspInit+0x204>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	4a6b      	ldr	r2, [pc, #428]	; (8002200 <HAL_TIM_Encoder_MspInit+0x204>)
 8002052:	f043 0308 	orr.w	r3, r3, #8
 8002056:	6193      	str	r3, [r2, #24]
 8002058:	4b69      	ldr	r3, [pc, #420]	; (8002200 <HAL_TIM_Encoder_MspInit+0x204>)
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	623b      	str	r3, [r7, #32]
 8002062:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_FRONT_RIGHT_IN_1_Pin;
 8002064:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002068:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800206a:	2300      	movs	r3, #0
 800206c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENCODER_FRONT_RIGHT_IN_1_GPIO_Port, &GPIO_InitStruct);
 8002072:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002076:	4619      	mov	r1, r3
 8002078:	4862      	ldr	r0, [pc, #392]	; (8002204 <HAL_TIM_Encoder_MspInit+0x208>)
 800207a:	f001 fa31 	bl	80034e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER_FRONT_RIGHT_IN_2_Pin;
 800207e:	2308      	movs	r3, #8
 8002080:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002082:	2300      	movs	r3, #0
 8002084:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENCODER_FRONT_RIGHT_IN_2_GPIO_Port, &GPIO_InitStruct);
 800208a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800208e:	4619      	mov	r1, r3
 8002090:	485d      	ldr	r0, [pc, #372]	; (8002208 <HAL_TIM_Encoder_MspInit+0x20c>)
 8002092:	f001 fa25 	bl	80034e0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002096:	4b5d      	ldr	r3, [pc, #372]	; (800220c <HAL_TIM_Encoder_MspInit+0x210>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800209c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800209e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020a6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80020aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020b4:	4a55      	ldr	r2, [pc, #340]	; (800220c <HAL_TIM_Encoder_MspInit+0x210>)
 80020b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020b8:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 80020ba:	2200      	movs	r2, #0
 80020bc:	2104      	movs	r1, #4
 80020be:	201c      	movs	r0, #28
 80020c0:	f001 f878 	bl	80031b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020c4:	201c      	movs	r0, #28
 80020c6:	f001 f8a1 	bl	800320c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80020ca:	e094      	b.n	80021f6 <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM3)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a4f      	ldr	r2, [pc, #316]	; (8002210 <HAL_TIM_Encoder_MspInit+0x214>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d12c      	bne.n	8002130 <HAL_TIM_Encoder_MspInit+0x134>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020d6:	4b4a      	ldr	r3, [pc, #296]	; (8002200 <HAL_TIM_Encoder_MspInit+0x204>)
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	4a49      	ldr	r2, [pc, #292]	; (8002200 <HAL_TIM_Encoder_MspInit+0x204>)
 80020dc:	f043 0302 	orr.w	r3, r3, #2
 80020e0:	61d3      	str	r3, [r2, #28]
 80020e2:	4b47      	ldr	r3, [pc, #284]	; (8002200 <HAL_TIM_Encoder_MspInit+0x204>)
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	61fb      	str	r3, [r7, #28]
 80020ec:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ee:	4b44      	ldr	r3, [pc, #272]	; (8002200 <HAL_TIM_Encoder_MspInit+0x204>)
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	4a43      	ldr	r2, [pc, #268]	; (8002200 <HAL_TIM_Encoder_MspInit+0x204>)
 80020f4:	f043 0304 	orr.w	r3, r3, #4
 80020f8:	6193      	str	r3, [r2, #24]
 80020fa:	4b41      	ldr	r3, [pc, #260]	; (8002200 <HAL_TIM_Encoder_MspInit+0x204>)
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	61bb      	str	r3, [r7, #24]
 8002104:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENCODER_FRONT_LEFT_IN_1_Pin|ENCODER_FRONT_LEFT_IN_2_Pin;
 8002106:	23c0      	movs	r3, #192	; 0xc0
 8002108:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800210a:	2300      	movs	r3, #0
 800210c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002112:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002116:	4619      	mov	r1, r3
 8002118:	483a      	ldr	r0, [pc, #232]	; (8002204 <HAL_TIM_Encoder_MspInit+0x208>)
 800211a:	f001 f9e1 	bl	80034e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 4, 0);
 800211e:	2200      	movs	r2, #0
 8002120:	2104      	movs	r1, #4
 8002122:	201d      	movs	r0, #29
 8002124:	f001 f846 	bl	80031b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002128:	201d      	movs	r0, #29
 800212a:	f001 f86f 	bl	800320c <HAL_NVIC_EnableIRQ>
}
 800212e:	e062      	b.n	80021f6 <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM4)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a37      	ldr	r2, [pc, #220]	; (8002214 <HAL_TIM_Encoder_MspInit+0x218>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d12c      	bne.n	8002194 <HAL_TIM_Encoder_MspInit+0x198>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800213a:	4b31      	ldr	r3, [pc, #196]	; (8002200 <HAL_TIM_Encoder_MspInit+0x204>)
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	4a30      	ldr	r2, [pc, #192]	; (8002200 <HAL_TIM_Encoder_MspInit+0x204>)
 8002140:	f043 0304 	orr.w	r3, r3, #4
 8002144:	61d3      	str	r3, [r2, #28]
 8002146:	4b2e      	ldr	r3, [pc, #184]	; (8002200 <HAL_TIM_Encoder_MspInit+0x204>)
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002152:	4b2b      	ldr	r3, [pc, #172]	; (8002200 <HAL_TIM_Encoder_MspInit+0x204>)
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	4a2a      	ldr	r2, [pc, #168]	; (8002200 <HAL_TIM_Encoder_MspInit+0x204>)
 8002158:	f043 0308 	orr.w	r3, r3, #8
 800215c:	6193      	str	r3, [r2, #24]
 800215e:	4b28      	ldr	r3, [pc, #160]	; (8002200 <HAL_TIM_Encoder_MspInit+0x204>)
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	613b      	str	r3, [r7, #16]
 8002168:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENCODER_REAR_LEFT_IN_1_Pin|ENCODER_REAR_LEFT_IN_2_Pin;
 800216a:	23c0      	movs	r3, #192	; 0xc0
 800216c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800216e:	2300      	movs	r3, #0
 8002170:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002172:	2300      	movs	r3, #0
 8002174:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002176:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800217a:	4619      	mov	r1, r3
 800217c:	4822      	ldr	r0, [pc, #136]	; (8002208 <HAL_TIM_Encoder_MspInit+0x20c>)
 800217e:	f001 f9af 	bl	80034e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 4, 0);
 8002182:	2200      	movs	r2, #0
 8002184:	2104      	movs	r1, #4
 8002186:	201e      	movs	r0, #30
 8002188:	f001 f814 	bl	80031b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800218c:	201e      	movs	r0, #30
 800218e:	f001 f83d 	bl	800320c <HAL_NVIC_EnableIRQ>
}
 8002192:	e030      	b.n	80021f6 <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM5)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a1f      	ldr	r2, [pc, #124]	; (8002218 <HAL_TIM_Encoder_MspInit+0x21c>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d12b      	bne.n	80021f6 <HAL_TIM_Encoder_MspInit+0x1fa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800219e:	4b18      	ldr	r3, [pc, #96]	; (8002200 <HAL_TIM_Encoder_MspInit+0x204>)
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	4a17      	ldr	r2, [pc, #92]	; (8002200 <HAL_TIM_Encoder_MspInit+0x204>)
 80021a4:	f043 0308 	orr.w	r3, r3, #8
 80021a8:	61d3      	str	r3, [r2, #28]
 80021aa:	4b15      	ldr	r3, [pc, #84]	; (8002200 <HAL_TIM_Encoder_MspInit+0x204>)
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b6:	4b12      	ldr	r3, [pc, #72]	; (8002200 <HAL_TIM_Encoder_MspInit+0x204>)
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	4a11      	ldr	r2, [pc, #68]	; (8002200 <HAL_TIM_Encoder_MspInit+0x204>)
 80021bc:	f043 0304 	orr.w	r3, r3, #4
 80021c0:	6193      	str	r3, [r2, #24]
 80021c2:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <HAL_TIM_Encoder_MspInit+0x204>)
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	f003 0304 	and.w	r3, r3, #4
 80021ca:	60bb      	str	r3, [r7, #8]
 80021cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_REAR_RIGHT_IN_1_Pin|ENCODER_REAR_RIGHT_IN_2_Pin;
 80021ce:	2303      	movs	r3, #3
 80021d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021d2:	2300      	movs	r3, #0
 80021d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021de:	4619      	mov	r1, r3
 80021e0:	4808      	ldr	r0, [pc, #32]	; (8002204 <HAL_TIM_Encoder_MspInit+0x208>)
 80021e2:	f001 f97d 	bl	80034e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 4, 0);
 80021e6:	2200      	movs	r2, #0
 80021e8:	2104      	movs	r1, #4
 80021ea:	2032      	movs	r0, #50	; 0x32
 80021ec:	f000 ffe2 	bl	80031b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80021f0:	2032      	movs	r0, #50	; 0x32
 80021f2:	f001 f80b 	bl	800320c <HAL_NVIC_EnableIRQ>
}
 80021f6:	bf00      	nop
 80021f8:	3740      	adds	r7, #64	; 0x40
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40021000 	.word	0x40021000
 8002204:	40010800 	.word	0x40010800
 8002208:	40010c00 	.word	0x40010c00
 800220c:	40010000 	.word	0x40010000
 8002210:	40000400 	.word	0x40000400
 8002214:	40000800 	.word	0x40000800
 8002218:	40000c00 	.word	0x40000c00

0800221c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b088      	sub	sp, #32
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002224:	f107 0310 	add.w	r3, r7, #16
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	609a      	str	r2, [r3, #8]
 8002230:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM8)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a10      	ldr	r2, [pc, #64]	; (8002278 <HAL_TIM_MspPostInit+0x5c>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d118      	bne.n	800226e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800223c:	4b0f      	ldr	r3, [pc, #60]	; (800227c <HAL_TIM_MspPostInit+0x60>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	4a0e      	ldr	r2, [pc, #56]	; (800227c <HAL_TIM_MspPostInit+0x60>)
 8002242:	f043 0310 	orr.w	r3, r3, #16
 8002246:	6193      	str	r3, [r2, #24]
 8002248:	4b0c      	ldr	r3, [pc, #48]	; (800227c <HAL_TIM_MspPostInit+0x60>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	f003 0310 	and.w	r3, r3, #16
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	68fb      	ldr	r3, [r7, #12]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_REAR_RIGHT_PWM_Pin|MOTOR_REAR_LEFT_PWM_Pin|MOTOR_FRONT_RIGHT_PWM_Pin|MOTOR_FRONT_LEFT_PWM_Pin;
 8002254:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002258:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225a:	2302      	movs	r3, #2
 800225c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800225e:	2303      	movs	r3, #3
 8002260:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002262:	f107 0310 	add.w	r3, r7, #16
 8002266:	4619      	mov	r1, r3
 8002268:	4805      	ldr	r0, [pc, #20]	; (8002280 <HAL_TIM_MspPostInit+0x64>)
 800226a:	f001 f939 	bl	80034e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800226e:	bf00      	nop
 8002270:	3720      	adds	r7, #32
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40013400 	.word	0x40013400
 800227c:	40021000 	.word	0x40021000
 8002280:	40011000 	.word	0x40011000

08002284 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08a      	sub	sp, #40	; 0x28
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228c:	f107 0318 	add.w	r3, r7, #24
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a40      	ldr	r2, [pc, #256]	; (80023a0 <HAL_UART_MspInit+0x11c>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d13a      	bne.n	800231a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80022a4:	4b3f      	ldr	r3, [pc, #252]	; (80023a4 <HAL_UART_MspInit+0x120>)
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	4a3e      	ldr	r2, [pc, #248]	; (80023a4 <HAL_UART_MspInit+0x120>)
 80022aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80022ae:	61d3      	str	r3, [r2, #28]
 80022b0:	4b3c      	ldr	r3, [pc, #240]	; (80023a4 <HAL_UART_MspInit+0x120>)
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022bc:	4b39      	ldr	r3, [pc, #228]	; (80023a4 <HAL_UART_MspInit+0x120>)
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	4a38      	ldr	r2, [pc, #224]	; (80023a4 <HAL_UART_MspInit+0x120>)
 80022c2:	f043 0310 	orr.w	r3, r3, #16
 80022c6:	6193      	str	r3, [r2, #24]
 80022c8:	4b36      	ldr	r3, [pc, #216]	; (80023a4 <HAL_UART_MspInit+0x120>)
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	f003 0310 	and.w	r3, r3, #16
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = MASTER_USART_TX_Pin;
 80022d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022da:	2302      	movs	r3, #2
 80022dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022de:	2303      	movs	r3, #3
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MASTER_USART_TX_GPIO_Port, &GPIO_InitStruct);
 80022e2:	f107 0318 	add.w	r3, r7, #24
 80022e6:	4619      	mov	r1, r3
 80022e8:	482f      	ldr	r0, [pc, #188]	; (80023a8 <HAL_UART_MspInit+0x124>)
 80022ea:	f001 f8f9 	bl	80034e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MASTER_USART_RX_Pin;
 80022ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022f4:	2300      	movs	r3, #0
 80022f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MASTER_USART_RX_GPIO_Port, &GPIO_InitStruct);
 80022fc:	f107 0318 	add.w	r3, r7, #24
 8002300:	4619      	mov	r1, r3
 8002302:	4829      	ldr	r0, [pc, #164]	; (80023a8 <HAL_UART_MspInit+0x124>)
 8002304:	f001 f8ec 	bl	80034e0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8002308:	2200      	movs	r2, #0
 800230a:	2105      	movs	r1, #5
 800230c:	2034      	movs	r0, #52	; 0x34
 800230e:	f000 ff51 	bl	80031b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002312:	2034      	movs	r0, #52	; 0x34
 8002314:	f000 ff7a 	bl	800320c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002318:	e03e      	b.n	8002398 <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART1)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a23      	ldr	r2, [pc, #140]	; (80023ac <HAL_UART_MspInit+0x128>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d139      	bne.n	8002398 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002324:	4b1f      	ldr	r3, [pc, #124]	; (80023a4 <HAL_UART_MspInit+0x120>)
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	4a1e      	ldr	r2, [pc, #120]	; (80023a4 <HAL_UART_MspInit+0x120>)
 800232a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800232e:	6193      	str	r3, [r2, #24]
 8002330:	4b1c      	ldr	r3, [pc, #112]	; (80023a4 <HAL_UART_MspInit+0x120>)
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233c:	4b19      	ldr	r3, [pc, #100]	; (80023a4 <HAL_UART_MspInit+0x120>)
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	4a18      	ldr	r2, [pc, #96]	; (80023a4 <HAL_UART_MspInit+0x120>)
 8002342:	f043 0304 	orr.w	r3, r3, #4
 8002346:	6193      	str	r3, [r2, #24]
 8002348:	4b16      	ldr	r3, [pc, #88]	; (80023a4 <HAL_UART_MspInit+0x120>)
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	60bb      	str	r3, [r7, #8]
 8002352:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CONSOLE_USART_TX_Pin;
 8002354:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235a:	2302      	movs	r3, #2
 800235c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800235e:	2303      	movs	r3, #3
 8002360:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CONSOLE_USART_TX_GPIO_Port, &GPIO_InitStruct);
 8002362:	f107 0318 	add.w	r3, r7, #24
 8002366:	4619      	mov	r1, r3
 8002368:	4811      	ldr	r0, [pc, #68]	; (80023b0 <HAL_UART_MspInit+0x12c>)
 800236a:	f001 f8b9 	bl	80034e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CONSOLE_USART_RX_Pin;
 800236e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002372:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002374:	2300      	movs	r3, #0
 8002376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(CONSOLE_USART_RX_GPIO_Port, &GPIO_InitStruct);
 800237c:	f107 0318 	add.w	r3, r7, #24
 8002380:	4619      	mov	r1, r3
 8002382:	480b      	ldr	r0, [pc, #44]	; (80023b0 <HAL_UART_MspInit+0x12c>)
 8002384:	f001 f8ac 	bl	80034e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002388:	2200      	movs	r2, #0
 800238a:	2105      	movs	r1, #5
 800238c:	2025      	movs	r0, #37	; 0x25
 800238e:	f000 ff11 	bl	80031b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002392:	2025      	movs	r0, #37	; 0x25
 8002394:	f000 ff3a 	bl	800320c <HAL_NVIC_EnableIRQ>
}
 8002398:	bf00      	nop
 800239a:	3728      	adds	r7, #40	; 0x28
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40004c00 	.word	0x40004c00
 80023a4:	40021000 	.word	0x40021000
 80023a8:	40011000 	.word	0x40011000
 80023ac:	40013800 	.word	0x40013800
 80023b0:	40010800 	.word	0x40010800

080023b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  LOG_error("NMI_Handler() triggered");
 80023b8:	4902      	ldr	r1, [pc, #8]	; (80023c4 <NMI_Handler+0x10>)
 80023ba:	2003      	movs	r0, #3
 80023bc:	f008 f9d8 	bl	800a770 <LOG_log>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023c0:	e7fe      	b.n	80023c0 <NMI_Handler+0xc>
 80023c2:	bf00      	nop
 80023c4:	0801115c 	.word	0x0801115c

080023c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  LOG_error("HardFault_Handler() triggered");
 80023cc:	4902      	ldr	r1, [pc, #8]	; (80023d8 <HardFault_Handler+0x10>)
 80023ce:	2003      	movs	r0, #3
 80023d0:	f008 f9ce 	bl	800a770 <LOG_log>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023d4:	e7fe      	b.n	80023d4 <HardFault_Handler+0xc>
 80023d6:	bf00      	nop
 80023d8:	08011174 	.word	0x08011174

080023dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  LOG_error("MemManage_Handler() triggered");
 80023e0:	4902      	ldr	r1, [pc, #8]	; (80023ec <MemManage_Handler+0x10>)
 80023e2:	2003      	movs	r0, #3
 80023e4:	f008 f9c4 	bl	800a770 <LOG_log>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023e8:	e7fe      	b.n	80023e8 <MemManage_Handler+0xc>
 80023ea:	bf00      	nop
 80023ec:	08011194 	.word	0x08011194

080023f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  LOG_error("BusFault_Handler() triggered");
 80023f4:	4902      	ldr	r1, [pc, #8]	; (8002400 <BusFault_Handler+0x10>)
 80023f6:	2003      	movs	r0, #3
 80023f8:	f008 f9ba 	bl	800a770 <LOG_log>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023fc:	e7fe      	b.n	80023fc <BusFault_Handler+0xc>
 80023fe:	bf00      	nop
 8002400:	080111b4 	.word	0x080111b4

08002404 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  LOG_error("UsageFault_Handler() triggered");
 8002408:	4902      	ldr	r1, [pc, #8]	; (8002414 <UsageFault_Handler+0x10>)
 800240a:	2003      	movs	r0, #3
 800240c:	f008 f9b0 	bl	800a770 <LOG_log>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002410:	e7fe      	b.n	8002410 <UsageFault_Handler+0xc>
 8002412:	bf00      	nop
 8002414:	080111d4 	.word	0x080111d4

08002418 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
  LOG_error("SVC_Handler() triggered");
 800241c:	4902      	ldr	r1, [pc, #8]	; (8002428 <SVC_Handler+0x10>)
 800241e:	2003      	movs	r0, #3
 8002420:	f008 f9a6 	bl	800a770 <LOG_log>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002424:	bf00      	nop
 8002426:	bd80      	pop	{r7, pc}
 8002428:	080111f4 	.word	0x080111f4

0800242c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  LOG_error("DebugMon_Handler() triggered");
 8002430:	4902      	ldr	r1, [pc, #8]	; (800243c <DebugMon_Handler+0x10>)
 8002432:	2003      	movs	r0, #3
 8002434:	f008 f99c 	bl	800a770 <LOG_log>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}
 800243c:	0801120c 	.word	0x0801120c

08002440 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  LOG_error("PendSV_Handler() triggered");
 8002444:	4902      	ldr	r1, [pc, #8]	; (8002450 <PendSV_Handler+0x10>)
 8002446:	2003      	movs	r0, #3
 8002448:	f008 f992 	bl	800a770 <LOG_log>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800244c:	bf00      	nop
 800244e:	bd80      	pop	{r7, pc}
 8002450:	0801122c 	.word	0x0801122c

08002454 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002458:	f000 f992 	bl	8002780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800245c:	bf00      	nop
 800245e:	bd80      	pop	{r7, pc}

08002460 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002464:	4802      	ldr	r0, [pc, #8]	; (8002470 <TIM1_UP_IRQHandler+0x10>)
 8002466:	f004 f851 	bl	800650c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	200009ac 	.word	0x200009ac

08002474 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002478:	4802      	ldr	r0, [pc, #8]	; (8002484 <TIM2_IRQHandler+0x10>)
 800247a:	f004 f847 	bl	800650c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000ad4 	.word	0x20000ad4

08002488 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800248c:	4802      	ldr	r0, [pc, #8]	; (8002498 <TIM3_IRQHandler+0x10>)
 800248e:	f004 f83d 	bl	800650c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	2000078c 	.word	0x2000078c

0800249c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80024a0:	4802      	ldr	r0, [pc, #8]	; (80024ac <TIM4_IRQHandler+0x10>)
 80024a2:	f004 f833 	bl	800650c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	20000624 	.word	0x20000624

080024b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024b4:	4802      	ldr	r0, [pc, #8]	; (80024c0 <USART1_IRQHandler+0x10>)
 80024b6:	f005 fd89 	bl	8007fcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000870 	.word	0x20000870

080024c4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80024c8:	4802      	ldr	r0, [pc, #8]	; (80024d4 <TIM5_IRQHandler+0x10>)
 80024ca:	f004 f81f 	bl	800650c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	200006d8 	.word	0x200006d8

080024d8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80024dc:	4802      	ldr	r0, [pc, #8]	; (80024e8 <UART4_IRQHandler+0x10>)
 80024de:	f005 fd75 	bl	8007fcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000a60 	.word	0x20000a60

080024ec <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80024f0:	4802      	ldr	r0, [pc, #8]	; (80024fc <TIM6_IRQHandler+0x10>)
 80024f2:	f004 f80b 	bl	800650c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	200008f8 	.word	0x200008f8

08002500 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
	return 1;
 8002504:	2301      	movs	r3, #1
}
 8002506:	4618      	mov	r0, r3
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr

0800250e <_kill>:

int _kill(int pid, int sig)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b082      	sub	sp, #8
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
 8002516:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002518:	f009 fcc0 	bl	800be9c <__errno>
 800251c:	4603      	mov	r3, r0
 800251e:	2216      	movs	r2, #22
 8002520:	601a      	str	r2, [r3, #0]
	return -1;
 8002522:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <_exit>:

void _exit (int status)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002536:	f04f 31ff 	mov.w	r1, #4294967295
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7ff ffe7 	bl	800250e <_kill>
	while (1) {}		/* Make sure we hang here */
 8002540:	e7fe      	b.n	8002540 <_exit+0x12>

08002542 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b086      	sub	sp, #24
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800254e:	2300      	movs	r3, #0
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	e00a      	b.n	800256a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002554:	f3af 8000 	nop.w
 8002558:	4601      	mov	r1, r0
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	60ba      	str	r2, [r7, #8]
 8002560:	b2ca      	uxtb	r2, r1
 8002562:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	3301      	adds	r3, #1
 8002568:	617b      	str	r3, [r7, #20]
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	429a      	cmp	r2, r3
 8002570:	dbf0      	blt.n	8002554 <_read+0x12>
	}

return len;
 8002572:	687b      	ldr	r3, [r7, #4]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d00a      	beq.n	80025a4 <_write+0x28>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2b02      	cmp	r3, #2
 8002592:	d007      	beq.n	80025a4 <_write+0x28>
  {
    errno = EBADF;
 8002594:	f009 fc82 	bl	800be9c <__errno>
 8002598:	4603      	mov	r3, r0
 800259a:	2209      	movs	r2, #9
 800259c:	601a      	str	r2, [r3, #0]
    return -1;
 800259e:	f04f 33ff 	mov.w	r3, #4294967295
 80025a2:	e00f      	b.n	80025c4 <_write+0x48>
  }

  if (g_RCF_printOutput == RCF_PRINT_OUTPUT_TO_CONSOLE)
 80025a4:	4b09      	ldr	r3, [pc, #36]	; (80025cc <_write+0x50>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d105      	bne.n	80025b8 <_write+0x3c>
  {
    CON_sendString(ptr, len);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4619      	mov	r1, r3
 80025b0:	68b8      	ldr	r0, [r7, #8]
 80025b2:	f006 fd4b 	bl	800904c <CON_sendString>
 80025b6:	e004      	b.n	80025c2 <_write+0x46>
  }
  else
  {
    MAS_sendString(ptr, len);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4619      	mov	r1, r3
 80025bc:	68b8      	ldr	r0, [r7, #8]
 80025be:	f008 f9b7 	bl	800a930 <MAS_sendString>
  }

  return len;
 80025c2:	687b      	ldr	r3, [r7, #4]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	20000c40 	.word	0x20000c40

080025d0 <_close>:

int _close(int file)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
	return -1;
 80025d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025dc:	4618      	mov	r0, r3
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr

080025e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025f6:	605a      	str	r2, [r3, #4]
	return 0;
 80025f8:	2300      	movs	r3, #0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr

08002604 <_isatty>:

int _isatty(int file)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
	return 1;
 800260c:	2301      	movs	r3, #1
}
 800260e:	4618      	mov	r0, r3
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
	return 0;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr

08002630 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002638:	4a14      	ldr	r2, [pc, #80]	; (800268c <_sbrk+0x5c>)
 800263a:	4b15      	ldr	r3, [pc, #84]	; (8002690 <_sbrk+0x60>)
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002644:	4b13      	ldr	r3, [pc, #76]	; (8002694 <_sbrk+0x64>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d102      	bne.n	8002652 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800264c:	4b11      	ldr	r3, [pc, #68]	; (8002694 <_sbrk+0x64>)
 800264e:	4a12      	ldr	r2, [pc, #72]	; (8002698 <_sbrk+0x68>)
 8002650:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002652:	4b10      	ldr	r3, [pc, #64]	; (8002694 <_sbrk+0x64>)
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4413      	add	r3, r2
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	429a      	cmp	r2, r3
 800265e:	d207      	bcs.n	8002670 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002660:	f009 fc1c 	bl	800be9c <__errno>
 8002664:	4603      	mov	r3, r0
 8002666:	220c      	movs	r2, #12
 8002668:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800266a:	f04f 33ff 	mov.w	r3, #4294967295
 800266e:	e009      	b.n	8002684 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002670:	4b08      	ldr	r3, [pc, #32]	; (8002694 <_sbrk+0x64>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002676:	4b07      	ldr	r3, [pc, #28]	; (8002694 <_sbrk+0x64>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4413      	add	r3, r2
 800267e:	4a05      	ldr	r2, [pc, #20]	; (8002694 <_sbrk+0x64>)
 8002680:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002682:	68fb      	ldr	r3, [r7, #12]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	2000c000 	.word	0x2000c000
 8002690:	00000400 	.word	0x00000400
 8002694:	2000020c 	.word	0x2000020c
 8002698:	20000c50 	.word	0x20000c50

0800269c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026a0:	bf00      	nop
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr

080026a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026a8:	480c      	ldr	r0, [pc, #48]	; (80026dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026aa:	490d      	ldr	r1, [pc, #52]	; (80026e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026ac:	4a0d      	ldr	r2, [pc, #52]	; (80026e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026b0:	e002      	b.n	80026b8 <LoopCopyDataInit>

080026b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026b6:	3304      	adds	r3, #4

080026b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026bc:	d3f9      	bcc.n	80026b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026be:	4a0a      	ldr	r2, [pc, #40]	; (80026e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026c0:	4c0a      	ldr	r4, [pc, #40]	; (80026ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80026c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c4:	e001      	b.n	80026ca <LoopFillZerobss>

080026c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026c8:	3204      	adds	r2, #4

080026ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026cc:	d3fb      	bcc.n	80026c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026ce:	f7ff ffe5 	bl	800269c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026d2:	f009 fbe9 	bl	800bea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026d6:	f7fe fe05 	bl	80012e4 <main>
  bx lr
 80026da:	4770      	bx	lr
  ldr r0, =_sdata
 80026dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026e0:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80026e4:	08012934 	.word	0x08012934
  ldr r2, =_sbss
 80026e8:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80026ec:	20000c50 	.word	0x20000c50

080026f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026f0:	e7fe      	b.n	80026f0 <ADC1_2_IRQHandler>
	...

080026f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026f8:	4b08      	ldr	r3, [pc, #32]	; (800271c <HAL_Init+0x28>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a07      	ldr	r2, [pc, #28]	; (800271c <HAL_Init+0x28>)
 80026fe:	f043 0310 	orr.w	r3, r3, #16
 8002702:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002704:	2003      	movs	r0, #3
 8002706:	f000 fd35 	bl	8003174 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800270a:	2000      	movs	r0, #0
 800270c:	f000 f808 	bl	8002720 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002710:	f7ff fb78 	bl	8001e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40022000 	.word	0x40022000

08002720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002728:	4b12      	ldr	r3, [pc, #72]	; (8002774 <HAL_InitTick+0x54>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	4b12      	ldr	r3, [pc, #72]	; (8002778 <HAL_InitTick+0x58>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	4619      	mov	r1, r3
 8002732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002736:	fbb3 f3f1 	udiv	r3, r3, r1
 800273a:	fbb2 f3f3 	udiv	r3, r2, r3
 800273e:	4618      	mov	r0, r3
 8002740:	f000 fd80 	bl	8003244 <HAL_SYSTICK_Config>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e00e      	b.n	800276c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b0f      	cmp	r3, #15
 8002752:	d80a      	bhi.n	800276a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002754:	2200      	movs	r2, #0
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	f04f 30ff 	mov.w	r0, #4294967295
 800275c:	f000 fd2a 	bl	80031b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002760:	4a06      	ldr	r2, [pc, #24]	; (800277c <HAL_InitTick+0x5c>)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002766:	2300      	movs	r3, #0
 8002768:	e000      	b.n	800276c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
}
 800276c:	4618      	mov	r0, r3
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	20000000 	.word	0x20000000
 8002778:	20000008 	.word	0x20000008
 800277c:	20000004 	.word	0x20000004

08002780 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002784:	4b05      	ldr	r3, [pc, #20]	; (800279c <HAL_IncTick+0x1c>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	461a      	mov	r2, r3
 800278a:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <HAL_IncTick+0x20>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4413      	add	r3, r2
 8002790:	4a03      	ldr	r2, [pc, #12]	; (80027a0 <HAL_IncTick+0x20>)
 8002792:	6013      	str	r3, [r2, #0]
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr
 800279c:	20000008 	.word	0x20000008
 80027a0:	20000c3c 	.word	0x20000c3c

080027a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  return uwTick;
 80027a8:	4b02      	ldr	r3, [pc, #8]	; (80027b4 <HAL_GetTick+0x10>)
 80027aa:	681b      	ldr	r3, [r3, #0]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr
 80027b4:	20000c3c 	.word	0x20000c3c

080027b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027c0:	f7ff fff0 	bl	80027a4 <HAL_GetTick>
 80027c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d0:	d005      	beq.n	80027de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027d2:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <HAL_Delay+0x44>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	461a      	mov	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4413      	add	r3, r2
 80027dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027de:	bf00      	nop
 80027e0:	f7ff ffe0 	bl	80027a4 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d8f7      	bhi.n	80027e0 <HAL_Delay+0x28>
  {
  }
}
 80027f0:	bf00      	nop
 80027f2:	bf00      	nop
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000008 	.word	0x20000008

08002800 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002808:	2300      	movs	r3, #0
 800280a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800280c:	2300      	movs	r3, #0
 800280e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e188      	b.n	8002b34 <HAL_ADC_Init+0x334>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a8c      	ldr	r2, [pc, #560]	; (8002a58 <HAL_ADC_Init+0x258>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d00e      	beq.n	800284a <HAL_ADC_Init+0x4a>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a8a      	ldr	r2, [pc, #552]	; (8002a5c <HAL_ADC_Init+0x25c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d009      	beq.n	800284a <HAL_ADC_Init+0x4a>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a89      	ldr	r2, [pc, #548]	; (8002a60 <HAL_ADC_Init+0x260>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d004      	beq.n	800284a <HAL_ADC_Init+0x4a>
 8002840:	f240 11b3 	movw	r1, #435	; 0x1b3
 8002844:	4887      	ldr	r0, [pc, #540]	; (8002a64 <HAL_ADC_Init+0x264>)
 8002846:	f7ff facb 	bl	8001de0 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d009      	beq.n	8002866 <HAL_ADC_Init+0x66>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800285a:	d004      	beq.n	8002866 <HAL_ADC_Init+0x66>
 800285c:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8002860:	4880      	ldr	r0, [pc, #512]	; (8002a64 <HAL_ADC_Init+0x264>)
 8002862:	f7ff fabd 	bl	8001de0 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d009      	beq.n	8002882 <HAL_ADC_Init+0x82>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002876:	d004      	beq.n	8002882 <HAL_ADC_Init+0x82>
 8002878:	f240 11b5 	movw	r1, #437	; 0x1b5
 800287c:	4879      	ldr	r0, [pc, #484]	; (8002a64 <HAL_ADC_Init+0x264>)
 800287e:	f7ff faaf 	bl	8001de0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	7b1b      	ldrb	r3, [r3, #12]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d008      	beq.n	800289c <HAL_ADC_Init+0x9c>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	7b1b      	ldrb	r3, [r3, #12]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d004      	beq.n	800289c <HAL_ADC_Init+0x9c>
 8002892:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8002896:	4873      	ldr	r0, [pc, #460]	; (8002a64 <HAL_ADC_Init+0x264>)
 8002898:	f7ff faa2 	bl	8001de0 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d044      	beq.n	800292e <HAL_ADC_Init+0x12e>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69db      	ldr	r3, [r3, #28]
 80028a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028ac:	d03f      	beq.n	800292e <HAL_ADC_Init+0x12e>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80028b6:	d03a      	beq.n	800292e <HAL_ADC_Init+0x12e>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69db      	ldr	r3, [r3, #28]
 80028bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80028c0:	d035      	beq.n	800292e <HAL_ADC_Init+0x12e>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 80028ca:	d030      	beq.n	800292e <HAL_ADC_Init+0x12e>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80028d4:	d02b      	beq.n	800292e <HAL_ADC_Init+0x12e>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d027      	beq.n	800292e <HAL_ADC_Init+0x12e>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028e6:	d022      	beq.n	800292e <HAL_ADC_Init+0x12e>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80028f0:	d01d      	beq.n	800292e <HAL_ADC_Init+0x12e>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 80028fa:	d018      	beq.n	800292e <HAL_ADC_Init+0x12e>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002904:	d013      	beq.n	800292e <HAL_ADC_Init+0x12e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800290e:	d00e      	beq.n	800292e <HAL_ADC_Init+0x12e>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002918:	d009      	beq.n	800292e <HAL_ADC_Init+0x12e>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002922:	d004      	beq.n	800292e <HAL_ADC_Init+0x12e>
 8002924:	f240 11b7 	movw	r1, #439	; 0x1b7
 8002928:	484e      	ldr	r0, [pc, #312]	; (8002a64 <HAL_ADC_Init+0x264>)
 800292a:	f7ff fa59 	bl	8001de0 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d02a      	beq.n	800298c <HAL_ADC_Init+0x18c>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_ADC_Init+0x146>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	2b10      	cmp	r3, #16
 8002944:	d904      	bls.n	8002950 <HAL_ADC_Init+0x150>
 8002946:	f240 11bb 	movw	r1, #443	; 0x1bb
 800294a:	4846      	ldr	r0, [pc, #280]	; (8002a64 <HAL_ADC_Init+0x264>)
 800294c:	f7ff fa48 	bl	8001de0 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	7d1b      	ldrb	r3, [r3, #20]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d008      	beq.n	800296a <HAL_ADC_Init+0x16a>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	7d1b      	ldrb	r3, [r3, #20]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d004      	beq.n	800296a <HAL_ADC_Init+0x16a>
 8002960:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8002964:	483f      	ldr	r0, [pc, #252]	; (8002a64 <HAL_ADC_Init+0x264>)
 8002966:	f7ff fa3b 	bl	8001de0 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	7d1b      	ldrb	r3, [r3, #20]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00c      	beq.n	800298c <HAL_ADC_Init+0x18c>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_ADC_Init+0x182>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	2b08      	cmp	r3, #8
 8002980:	d904      	bls.n	800298c <HAL_ADC_Init+0x18c>
 8002982:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002986:	4837      	ldr	r0, [pc, #220]	; (8002a64 <HAL_ADC_Init+0x264>)
 8002988:	f7ff fa2a 	bl	8001de0 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002990:	2b00      	cmp	r3, #0
 8002992:	d109      	bne.n	80029a8 <HAL_ADC_Init+0x1a8>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff fa60 	bl	8001e68 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 fabf 	bl	8002f2c <ADC_ConversionStop_Disable>
 80029ae:	4603      	mov	r3, r0
 80029b0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b6:	f003 0310 	and.w	r3, r3, #16
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f040 80b1 	bne.w	8002b22 <HAL_ADC_Init+0x322>
 80029c0:	7dfb      	ldrb	r3, [r7, #23]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f040 80ad 	bne.w	8002b22 <HAL_ADC_Init+0x322>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029d0:	f023 0302 	bic.w	r3, r3, #2
 80029d4:	f043 0202 	orr.w	r2, r3, #2
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	491e      	ldr	r1, [pc, #120]	; (8002a60 <HAL_ADC_Init+0x260>)
 80029e6:	428b      	cmp	r3, r1
 80029e8:	d10a      	bne.n	8002a00 <HAL_ADC_Init+0x200>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80029f2:	d002      	beq.n	80029fa <HAL_ADC_Init+0x1fa>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	e004      	b.n	8002a04 <HAL_ADC_Init+0x204>
 80029fa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80029fe:	e001      	b.n	8002a04 <HAL_ADC_Init+0x204>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a04:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	7b1b      	ldrb	r3, [r3, #12]
 8002a0a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a0c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a0e:	68ba      	ldr	r2, [r7, #8]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a1c:	d003      	beq.n	8002a26 <HAL_ADC_Init+0x226>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d102      	bne.n	8002a2c <HAL_ADC_Init+0x22c>
 8002a26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a2a:	e000      	b.n	8002a2e <HAL_ADC_Init+0x22e>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	7d1b      	ldrb	r3, [r3, #20]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d121      	bne.n	8002a80 <HAL_ADC_Init+0x280>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	7b1b      	ldrb	r3, [r3, #12]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d111      	bne.n	8002a68 <HAL_ADC_Init+0x268>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	035a      	lsls	r2, r3, #13
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	e013      	b.n	8002a80 <HAL_ADC_Init+0x280>
 8002a58:	40012400 	.word	0x40012400
 8002a5c:	40012800 	.word	0x40012800
 8002a60:	40013c00 	.word	0x40013c00
 8002a64:	08011248 	.word	0x08011248
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6c:	f043 0220 	orr.w	r2, r3, #32
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a78:	f043 0201 	orr.w	r2, r3, #1
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	4b28      	ldr	r3, [pc, #160]	; (8002b3c <HAL_ADC_Init+0x33c>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6812      	ldr	r2, [r2, #0]
 8002aa2:	68b9      	ldr	r1, [r7, #8]
 8002aa4:	430b      	orrs	r3, r1
 8002aa6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ab0:	d003      	beq.n	8002aba <HAL_ADC_Init+0x2ba>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d104      	bne.n	8002ac4 <HAL_ADC_Init+0x2c4>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	051b      	lsls	r3, r3, #20
 8002ac2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aca:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	4b18      	ldr	r3, [pc, #96]	; (8002b40 <HAL_ADC_Init+0x340>)
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	68ba      	ldr	r2, [r7, #8]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d10b      	bne.n	8002b00 <HAL_ADC_Init+0x300>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af2:	f023 0303 	bic.w	r3, r3, #3
 8002af6:	f043 0201 	orr.w	r2, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002afe:	e018      	b.n	8002b32 <HAL_ADC_Init+0x332>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b04:	f023 0312 	bic.w	r3, r3, #18
 8002b08:	f043 0210 	orr.w	r2, r3, #16
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	f043 0201 	orr.w	r2, r3, #1
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b20:	e007      	b.n	8002b32 <HAL_ADC_Init+0x332>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b26:	f043 0210 	orr.w	r2, r3, #16
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002b32:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	ffe1f7fd 	.word	0xffe1f7fd
 8002b40:	ff1f0efe 	.word	0xff1f0efe

08002b44 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a0c      	ldr	r2, [pc, #48]	; (8002b84 <HAL_ADC_GetValue+0x40>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d00e      	beq.n	8002b74 <HAL_ADC_GetValue+0x30>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a0b      	ldr	r2, [pc, #44]	; (8002b88 <HAL_ADC_GetValue+0x44>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d009      	beq.n	8002b74 <HAL_ADC_GetValue+0x30>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a09      	ldr	r2, [pc, #36]	; (8002b8c <HAL_ADC_GetValue+0x48>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d004      	beq.n	8002b74 <HAL_ADC_GetValue+0x30>
 8002b6a:	f240 61ef 	movw	r1, #1775	; 0x6ef
 8002b6e:	4808      	ldr	r0, [pc, #32]	; (8002b90 <HAL_ADC_GetValue+0x4c>)
 8002b70:	f7ff f936 	bl	8001de0 <assert_failed>

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40012400 	.word	0x40012400
 8002b88:	40012800 	.word	0x40012800
 8002b8c:	40013c00 	.word	0x40013c00
 8002b90:	08011248 	.word	0x08011248

08002b94 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a8b      	ldr	r2, [pc, #556]	; (8002dd8 <HAL_ADC_ConfigChannel+0x244>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d00e      	beq.n	8002bce <HAL_ADC_ConfigChannel+0x3a>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a89      	ldr	r2, [pc, #548]	; (8002ddc <HAL_ADC_ConfigChannel+0x248>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d009      	beq.n	8002bce <HAL_ADC_ConfigChannel+0x3a>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a88      	ldr	r2, [pc, #544]	; (8002de0 <HAL_ADC_ConfigChannel+0x24c>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d004      	beq.n	8002bce <HAL_ADC_ConfigChannel+0x3a>
 8002bc4:	f240 71dd 	movw	r1, #2013	; 0x7dd
 8002bc8:	4886      	ldr	r0, [pc, #536]	; (8002de4 <HAL_ADC_ConfigChannel+0x250>)
 8002bca:	f7ff f909 	bl	8001de0 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d048      	beq.n	8002c68 <HAL_ADC_ConfigChannel+0xd4>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d044      	beq.n	8002c68 <HAL_ADC_ConfigChannel+0xd4>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d040      	beq.n	8002c68 <HAL_ADC_ConfigChannel+0xd4>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2b03      	cmp	r3, #3
 8002bec:	d03c      	beq.n	8002c68 <HAL_ADC_ConfigChannel+0xd4>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d038      	beq.n	8002c68 <HAL_ADC_ConfigChannel+0xd4>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b05      	cmp	r3, #5
 8002bfc:	d034      	beq.n	8002c68 <HAL_ADC_ConfigChannel+0xd4>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2b06      	cmp	r3, #6
 8002c04:	d030      	beq.n	8002c68 <HAL_ADC_ConfigChannel+0xd4>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2b07      	cmp	r3, #7
 8002c0c:	d02c      	beq.n	8002c68 <HAL_ADC_ConfigChannel+0xd4>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d028      	beq.n	8002c68 <HAL_ADC_ConfigChannel+0xd4>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b09      	cmp	r3, #9
 8002c1c:	d024      	beq.n	8002c68 <HAL_ADC_ConfigChannel+0xd4>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b0a      	cmp	r3, #10
 8002c24:	d020      	beq.n	8002c68 <HAL_ADC_ConfigChannel+0xd4>
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2b0b      	cmp	r3, #11
 8002c2c:	d01c      	beq.n	8002c68 <HAL_ADC_ConfigChannel+0xd4>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2b0c      	cmp	r3, #12
 8002c34:	d018      	beq.n	8002c68 <HAL_ADC_ConfigChannel+0xd4>
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2b0d      	cmp	r3, #13
 8002c3c:	d014      	beq.n	8002c68 <HAL_ADC_ConfigChannel+0xd4>
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2b0e      	cmp	r3, #14
 8002c44:	d010      	beq.n	8002c68 <HAL_ADC_ConfigChannel+0xd4>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2b0f      	cmp	r3, #15
 8002c4c:	d00c      	beq.n	8002c68 <HAL_ADC_ConfigChannel+0xd4>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b10      	cmp	r3, #16
 8002c54:	d008      	beq.n	8002c68 <HAL_ADC_ConfigChannel+0xd4>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2b11      	cmp	r3, #17
 8002c5c:	d004      	beq.n	8002c68 <HAL_ADC_ConfigChannel+0xd4>
 8002c5e:	f240 71de 	movw	r1, #2014	; 0x7de
 8002c62:	4860      	ldr	r0, [pc, #384]	; (8002de4 <HAL_ADC_ConfigChannel+0x250>)
 8002c64:	f7ff f8bc 	bl	8001de0 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d040      	beq.n	8002cf2 <HAL_ADC_ConfigChannel+0x15e>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d03c      	beq.n	8002cf2 <HAL_ADC_ConfigChannel+0x15e>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b03      	cmp	r3, #3
 8002c7e:	d038      	beq.n	8002cf2 <HAL_ADC_ConfigChannel+0x15e>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d034      	beq.n	8002cf2 <HAL_ADC_ConfigChannel+0x15e>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b05      	cmp	r3, #5
 8002c8e:	d030      	beq.n	8002cf2 <HAL_ADC_ConfigChannel+0x15e>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b06      	cmp	r3, #6
 8002c96:	d02c      	beq.n	8002cf2 <HAL_ADC_ConfigChannel+0x15e>
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b07      	cmp	r3, #7
 8002c9e:	d028      	beq.n	8002cf2 <HAL_ADC_ConfigChannel+0x15e>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d024      	beq.n	8002cf2 <HAL_ADC_ConfigChannel+0x15e>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b09      	cmp	r3, #9
 8002cae:	d020      	beq.n	8002cf2 <HAL_ADC_ConfigChannel+0x15e>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b0a      	cmp	r3, #10
 8002cb6:	d01c      	beq.n	8002cf2 <HAL_ADC_ConfigChannel+0x15e>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	2b0b      	cmp	r3, #11
 8002cbe:	d018      	beq.n	8002cf2 <HAL_ADC_ConfigChannel+0x15e>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2b0c      	cmp	r3, #12
 8002cc6:	d014      	beq.n	8002cf2 <HAL_ADC_ConfigChannel+0x15e>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2b0d      	cmp	r3, #13
 8002cce:	d010      	beq.n	8002cf2 <HAL_ADC_ConfigChannel+0x15e>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2b0e      	cmp	r3, #14
 8002cd6:	d00c      	beq.n	8002cf2 <HAL_ADC_ConfigChannel+0x15e>
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b0f      	cmp	r3, #15
 8002cde:	d008      	beq.n	8002cf2 <HAL_ADC_ConfigChannel+0x15e>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2b10      	cmp	r3, #16
 8002ce6:	d004      	beq.n	8002cf2 <HAL_ADC_ConfigChannel+0x15e>
 8002ce8:	f240 71df 	movw	r1, #2015	; 0x7df
 8002cec:	483d      	ldr	r0, [pc, #244]	; (8002de4 <HAL_ADC_ConfigChannel+0x250>)
 8002cee:	f7ff f877 	bl	8001de0 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d020      	beq.n	8002d3c <HAL_ADC_ConfigChannel+0x1a8>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d01c      	beq.n	8002d3c <HAL_ADC_ConfigChannel+0x1a8>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d018      	beq.n	8002d3c <HAL_ADC_ConfigChannel+0x1a8>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	2b03      	cmp	r3, #3
 8002d10:	d014      	beq.n	8002d3c <HAL_ADC_ConfigChannel+0x1a8>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d010      	beq.n	8002d3c <HAL_ADC_ConfigChannel+0x1a8>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	2b05      	cmp	r3, #5
 8002d20:	d00c      	beq.n	8002d3c <HAL_ADC_ConfigChannel+0x1a8>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	2b06      	cmp	r3, #6
 8002d28:	d008      	beq.n	8002d3c <HAL_ADC_ConfigChannel+0x1a8>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2b07      	cmp	r3, #7
 8002d30:	d004      	beq.n	8002d3c <HAL_ADC_ConfigChannel+0x1a8>
 8002d32:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8002d36:	482b      	ldr	r0, [pc, #172]	; (8002de4 <HAL_ADC_ConfigChannel+0x250>)
 8002d38:	f7ff f852 	bl	8001de0 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d101      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x1b6>
 8002d46:	2302      	movs	r3, #2
 8002d48:	e0e5      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x382>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	2b06      	cmp	r3, #6
 8002d58:	d81c      	bhi.n	8002d94 <HAL_ADC_ConfigChannel+0x200>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	4613      	mov	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	3b05      	subs	r3, #5
 8002d6c:	221f      	movs	r2, #31
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	43db      	mvns	r3, r3
 8002d74:	4019      	ands	r1, r3
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	3b05      	subs	r3, #5
 8002d86:	fa00 f203 	lsl.w	r2, r0, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	635a      	str	r2, [r3, #52]	; 0x34
 8002d92:	e045      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x28c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b0c      	cmp	r3, #12
 8002d9a:	d825      	bhi.n	8002de8 <HAL_ADC_ConfigChannel+0x254>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	3b23      	subs	r3, #35	; 0x23
 8002dae:	221f      	movs	r2, #31
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	4019      	ands	r1, r3
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	6818      	ldr	r0, [r3, #0]
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	3b23      	subs	r3, #35	; 0x23
 8002dc8:	fa00 f203 	lsl.w	r2, r0, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	631a      	str	r2, [r3, #48]	; 0x30
 8002dd4:	e024      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x28c>
 8002dd6:	bf00      	nop
 8002dd8:	40012400 	.word	0x40012400
 8002ddc:	40012800 	.word	0x40012800
 8002de0:	40013c00 	.word	0x40013c00
 8002de4:	08011248 	.word	0x08011248
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	4613      	mov	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	3b41      	subs	r3, #65	; 0x41
 8002dfa:	221f      	movs	r2, #31
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	4019      	ands	r1, r3
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	3b41      	subs	r3, #65	; 0x41
 8002e14:	fa00 f203 	lsl.w	r2, r0, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b09      	cmp	r3, #9
 8002e26:	d91c      	bls.n	8002e62 <HAL_ADC_ConfigChannel+0x2ce>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68d9      	ldr	r1, [r3, #12]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	4613      	mov	r3, r2
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	4413      	add	r3, r2
 8002e38:	3b1e      	subs	r3, #30
 8002e3a:	2207      	movs	r2, #7
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	43db      	mvns	r3, r3
 8002e42:	4019      	ands	r1, r3
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	6898      	ldr	r0, [r3, #8]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	4413      	add	r3, r2
 8002e52:	3b1e      	subs	r3, #30
 8002e54:	fa00 f203 	lsl.w	r2, r0, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	60da      	str	r2, [r3, #12]
 8002e60:	e019      	b.n	8002e96 <HAL_ADC_ConfigChannel+0x302>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6919      	ldr	r1, [r3, #16]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	4413      	add	r3, r2
 8002e72:	2207      	movs	r2, #7
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	4019      	ands	r1, r3
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	6898      	ldr	r0, [r3, #8]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	4613      	mov	r3, r2
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	4413      	add	r3, r2
 8002e8a:	fa00 f203 	lsl.w	r2, r0, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2b10      	cmp	r3, #16
 8002e9c:	d003      	beq.n	8002ea6 <HAL_ADC_ConfigChannel+0x312>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ea2:	2b11      	cmp	r3, #17
 8002ea4:	d132      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x378>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a1d      	ldr	r2, [pc, #116]	; (8002f20 <HAL_ADC_ConfigChannel+0x38c>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d125      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x368>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d126      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x378>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689a      	ldr	r2, [r3, #8]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002ecc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b10      	cmp	r3, #16
 8002ed4:	d11a      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x378>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ed6:	4b13      	ldr	r3, [pc, #76]	; (8002f24 <HAL_ADC_ConfigChannel+0x390>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a13      	ldr	r2, [pc, #76]	; (8002f28 <HAL_ADC_ConfigChannel+0x394>)
 8002edc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee0:	0c9a      	lsrs	r2, r3, #18
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	4413      	add	r3, r2
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002eec:	e002      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x360>
          {
            wait_loop_index--;
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f9      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x35a>
 8002efa:	e007      	b.n	8002f0c <HAL_ADC_ConfigChannel+0x378>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f00:	f043 0220 	orr.w	r2, r3, #32
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40012400 	.word	0x40012400
 8002f24:	20000000 	.word	0x20000000
 8002f28:	431bde83 	.word	0x431bde83

08002f2c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f34:	2300      	movs	r3, #0
 8002f36:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d12e      	bne.n	8002fa4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 0201 	bic.w	r2, r2, #1
 8002f54:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f56:	f7ff fc25 	bl	80027a4 <HAL_GetTick>
 8002f5a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002f5c:	e01b      	b.n	8002f96 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f5e:	f7ff fc21 	bl	80027a4 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d914      	bls.n	8002f96 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d10d      	bne.n	8002f96 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7e:	f043 0210 	orr.w	r2, r3, #16
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8a:	f043 0201 	orr.w	r2, r3, #1
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e007      	b.n	8002fa6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d0dc      	beq.n	8002f5e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f003 0307 	and.w	r3, r3, #7
 8002fbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fc0:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fcc:	4013      	ands	r3, r2
 8002fce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fe0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fe2:	4a04      	ldr	r2, [pc, #16]	; (8002ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	60d3      	str	r3, [r2, #12]
}
 8002fe8:	bf00      	nop
 8002fea:	3714      	adds	r7, #20
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bc80      	pop	{r7}
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	e000ed00 	.word	0xe000ed00

08002ff8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ffc:	4b04      	ldr	r3, [pc, #16]	; (8003010 <__NVIC_GetPriorityGrouping+0x18>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	0a1b      	lsrs	r3, r3, #8
 8003002:	f003 0307 	and.w	r3, r3, #7
}
 8003006:	4618      	mov	r0, r3
 8003008:	46bd      	mov	sp, r7
 800300a:	bc80      	pop	{r7}
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	e000ed00 	.word	0xe000ed00

08003014 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800301e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003022:	2b00      	cmp	r3, #0
 8003024:	db0b      	blt.n	800303e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003026:	79fb      	ldrb	r3, [r7, #7]
 8003028:	f003 021f 	and.w	r2, r3, #31
 800302c:	4906      	ldr	r1, [pc, #24]	; (8003048 <__NVIC_EnableIRQ+0x34>)
 800302e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003032:	095b      	lsrs	r3, r3, #5
 8003034:	2001      	movs	r0, #1
 8003036:	fa00 f202 	lsl.w	r2, r0, r2
 800303a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	bc80      	pop	{r7}
 8003046:	4770      	bx	lr
 8003048:	e000e100 	.word	0xe000e100

0800304c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	6039      	str	r1, [r7, #0]
 8003056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305c:	2b00      	cmp	r3, #0
 800305e:	db0a      	blt.n	8003076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	b2da      	uxtb	r2, r3
 8003064:	490c      	ldr	r1, [pc, #48]	; (8003098 <__NVIC_SetPriority+0x4c>)
 8003066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306a:	0112      	lsls	r2, r2, #4
 800306c:	b2d2      	uxtb	r2, r2
 800306e:	440b      	add	r3, r1
 8003070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003074:	e00a      	b.n	800308c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	b2da      	uxtb	r2, r3
 800307a:	4908      	ldr	r1, [pc, #32]	; (800309c <__NVIC_SetPriority+0x50>)
 800307c:	79fb      	ldrb	r3, [r7, #7]
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	3b04      	subs	r3, #4
 8003084:	0112      	lsls	r2, r2, #4
 8003086:	b2d2      	uxtb	r2, r2
 8003088:	440b      	add	r3, r1
 800308a:	761a      	strb	r2, [r3, #24]
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	bc80      	pop	{r7}
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	e000e100 	.word	0xe000e100
 800309c:	e000ed00 	.word	0xe000ed00

080030a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b089      	sub	sp, #36	; 0x24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	f1c3 0307 	rsb	r3, r3, #7
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	bf28      	it	cs
 80030be:	2304      	movcs	r3, #4
 80030c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	3304      	adds	r3, #4
 80030c6:	2b06      	cmp	r3, #6
 80030c8:	d902      	bls.n	80030d0 <NVIC_EncodePriority+0x30>
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	3b03      	subs	r3, #3
 80030ce:	e000      	b.n	80030d2 <NVIC_EncodePriority+0x32>
 80030d0:	2300      	movs	r3, #0
 80030d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d4:	f04f 32ff 	mov.w	r2, #4294967295
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	43da      	mvns	r2, r3
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	401a      	ands	r2, r3
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030e8:	f04f 31ff 	mov.w	r1, #4294967295
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	fa01 f303 	lsl.w	r3, r1, r3
 80030f2:	43d9      	mvns	r1, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f8:	4313      	orrs	r3, r2
         );
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3724      	adds	r7, #36	; 0x24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr

08003104 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003108:	f3bf 8f4f 	dsb	sy
}
 800310c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800310e:	4b06      	ldr	r3, [pc, #24]	; (8003128 <__NVIC_SystemReset+0x24>)
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003116:	4904      	ldr	r1, [pc, #16]	; (8003128 <__NVIC_SystemReset+0x24>)
 8003118:	4b04      	ldr	r3, [pc, #16]	; (800312c <__NVIC_SystemReset+0x28>)
 800311a:	4313      	orrs	r3, r2
 800311c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800311e:	f3bf 8f4f 	dsb	sy
}
 8003122:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003124:	bf00      	nop
 8003126:	e7fd      	b.n	8003124 <__NVIC_SystemReset+0x20>
 8003128:	e000ed00 	.word	0xe000ed00
 800312c:	05fa0004 	.word	0x05fa0004

08003130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3b01      	subs	r3, #1
 800313c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003140:	d301      	bcc.n	8003146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003142:	2301      	movs	r3, #1
 8003144:	e00f      	b.n	8003166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003146:	4a0a      	ldr	r2, [pc, #40]	; (8003170 <SysTick_Config+0x40>)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3b01      	subs	r3, #1
 800314c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800314e:	210f      	movs	r1, #15
 8003150:	f04f 30ff 	mov.w	r0, #4294967295
 8003154:	f7ff ff7a 	bl	800304c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003158:	4b05      	ldr	r3, [pc, #20]	; (8003170 <SysTick_Config+0x40>)
 800315a:	2200      	movs	r2, #0
 800315c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800315e:	4b04      	ldr	r3, [pc, #16]	; (8003170 <SysTick_Config+0x40>)
 8003160:	2207      	movs	r2, #7
 8003162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	e000e010 	.word	0xe000e010

08003174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b07      	cmp	r3, #7
 8003180:	d00f      	beq.n	80031a2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b06      	cmp	r3, #6
 8003186:	d00c      	beq.n	80031a2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b05      	cmp	r3, #5
 800318c:	d009      	beq.n	80031a2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b04      	cmp	r3, #4
 8003192:	d006      	beq.n	80031a2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b03      	cmp	r3, #3
 8003198:	d003      	beq.n	80031a2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800319a:	2192      	movs	r1, #146	; 0x92
 800319c:	4804      	ldr	r0, [pc, #16]	; (80031b0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800319e:	f7fe fe1f 	bl	8001de0 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7ff ff04 	bl	8002fb0 <__NVIC_SetPriorityGrouping>
}
 80031a8:	bf00      	nop
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	08011280 	.word	0x08011280

080031b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
 80031c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b0f      	cmp	r3, #15
 80031ca:	d903      	bls.n	80031d4 <HAL_NVIC_SetPriority+0x20>
 80031cc:	21aa      	movs	r1, #170	; 0xaa
 80031ce:	480e      	ldr	r0, [pc, #56]	; (8003208 <HAL_NVIC_SetPriority+0x54>)
 80031d0:	f7fe fe06 	bl	8001de0 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2b0f      	cmp	r3, #15
 80031d8:	d903      	bls.n	80031e2 <HAL_NVIC_SetPriority+0x2e>
 80031da:	21ab      	movs	r1, #171	; 0xab
 80031dc:	480a      	ldr	r0, [pc, #40]	; (8003208 <HAL_NVIC_SetPriority+0x54>)
 80031de:	f7fe fdff 	bl	8001de0 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031e2:	f7ff ff09 	bl	8002ff8 <__NVIC_GetPriorityGrouping>
 80031e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	68b9      	ldr	r1, [r7, #8]
 80031ec:	6978      	ldr	r0, [r7, #20]
 80031ee:	f7ff ff57 	bl	80030a0 <NVIC_EncodePriority>
 80031f2:	4602      	mov	r2, r0
 80031f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031f8:	4611      	mov	r1, r2
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff ff26 	bl	800304c <__NVIC_SetPriority>
}
 8003200:	bf00      	nop
 8003202:	3718      	adds	r7, #24
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	08011280 	.word	0x08011280

0800320c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	4603      	mov	r3, r0
 8003214:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321a:	2b00      	cmp	r3, #0
 800321c:	da03      	bge.n	8003226 <HAL_NVIC_EnableIRQ+0x1a>
 800321e:	21be      	movs	r1, #190	; 0xbe
 8003220:	4805      	ldr	r0, [pc, #20]	; (8003238 <HAL_NVIC_EnableIRQ+0x2c>)
 8003222:	f7fe fddd 	bl	8001de0 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff fef2 	bl	8003014 <__NVIC_EnableIRQ>
}
 8003230:	bf00      	nop
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	08011280 	.word	0x08011280

0800323c <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003240:	f7ff ff60 	bl	8003104 <__NVIC_SystemReset>

08003244 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f7ff ff6f 	bl	8003130 <SysTick_Config>
 8003252:	4603      	mov	r3, r0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3708      	adds	r7, #8
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003264:	2300      	movs	r3, #0
 8003266:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800326e:	2b02      	cmp	r3, #2
 8003270:	d008      	beq.n	8003284 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2204      	movs	r2, #4
 8003276:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e020      	b.n	80032c6 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 020e 	bic.w	r2, r2, #14
 8003292:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0201 	bic.w	r2, r2, #1
 80032a2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ac:	2101      	movs	r1, #1
 80032ae:	fa01 f202 	lsl.w	r2, r1, r2
 80032b2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr

080032d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032d8:	2300      	movs	r3, #0
 80032da:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d005      	beq.n	80032f2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2204      	movs	r2, #4
 80032ea:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	73fb      	strb	r3, [r7, #15]
 80032f0:	e0d6      	b.n	80034a0 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 020e 	bic.w	r2, r2, #14
 8003300:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0201 	bic.w	r2, r2, #1
 8003310:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	461a      	mov	r2, r3
 8003318:	4b64      	ldr	r3, [pc, #400]	; (80034ac <HAL_DMA_Abort_IT+0x1dc>)
 800331a:	429a      	cmp	r2, r3
 800331c:	d958      	bls.n	80033d0 <HAL_DMA_Abort_IT+0x100>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a63      	ldr	r2, [pc, #396]	; (80034b0 <HAL_DMA_Abort_IT+0x1e0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d04f      	beq.n	80033c8 <HAL_DMA_Abort_IT+0xf8>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a61      	ldr	r2, [pc, #388]	; (80034b4 <HAL_DMA_Abort_IT+0x1e4>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d048      	beq.n	80033c4 <HAL_DMA_Abort_IT+0xf4>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a60      	ldr	r2, [pc, #384]	; (80034b8 <HAL_DMA_Abort_IT+0x1e8>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d040      	beq.n	80033be <HAL_DMA_Abort_IT+0xee>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a5e      	ldr	r2, [pc, #376]	; (80034bc <HAL_DMA_Abort_IT+0x1ec>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d038      	beq.n	80033b8 <HAL_DMA_Abort_IT+0xe8>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a5d      	ldr	r2, [pc, #372]	; (80034c0 <HAL_DMA_Abort_IT+0x1f0>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d030      	beq.n	80033b2 <HAL_DMA_Abort_IT+0xe2>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a5b      	ldr	r2, [pc, #364]	; (80034c4 <HAL_DMA_Abort_IT+0x1f4>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d028      	beq.n	80033ac <HAL_DMA_Abort_IT+0xdc>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a53      	ldr	r2, [pc, #332]	; (80034ac <HAL_DMA_Abort_IT+0x1dc>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d020      	beq.n	80033a6 <HAL_DMA_Abort_IT+0xd6>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a57      	ldr	r2, [pc, #348]	; (80034c8 <HAL_DMA_Abort_IT+0x1f8>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d019      	beq.n	80033a2 <HAL_DMA_Abort_IT+0xd2>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a56      	ldr	r2, [pc, #344]	; (80034cc <HAL_DMA_Abort_IT+0x1fc>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d012      	beq.n	800339e <HAL_DMA_Abort_IT+0xce>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a54      	ldr	r2, [pc, #336]	; (80034d0 <HAL_DMA_Abort_IT+0x200>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d00a      	beq.n	8003398 <HAL_DMA_Abort_IT+0xc8>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a53      	ldr	r2, [pc, #332]	; (80034d4 <HAL_DMA_Abort_IT+0x204>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d102      	bne.n	8003392 <HAL_DMA_Abort_IT+0xc2>
 800338c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003390:	e01b      	b.n	80033ca <HAL_DMA_Abort_IT+0xfa>
 8003392:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003396:	e018      	b.n	80033ca <HAL_DMA_Abort_IT+0xfa>
 8003398:	f44f 7380 	mov.w	r3, #256	; 0x100
 800339c:	e015      	b.n	80033ca <HAL_DMA_Abort_IT+0xfa>
 800339e:	2310      	movs	r3, #16
 80033a0:	e013      	b.n	80033ca <HAL_DMA_Abort_IT+0xfa>
 80033a2:	2301      	movs	r3, #1
 80033a4:	e011      	b.n	80033ca <HAL_DMA_Abort_IT+0xfa>
 80033a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033aa:	e00e      	b.n	80033ca <HAL_DMA_Abort_IT+0xfa>
 80033ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80033b0:	e00b      	b.n	80033ca <HAL_DMA_Abort_IT+0xfa>
 80033b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033b6:	e008      	b.n	80033ca <HAL_DMA_Abort_IT+0xfa>
 80033b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033bc:	e005      	b.n	80033ca <HAL_DMA_Abort_IT+0xfa>
 80033be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033c2:	e002      	b.n	80033ca <HAL_DMA_Abort_IT+0xfa>
 80033c4:	2310      	movs	r3, #16
 80033c6:	e000      	b.n	80033ca <HAL_DMA_Abort_IT+0xfa>
 80033c8:	2301      	movs	r3, #1
 80033ca:	4a43      	ldr	r2, [pc, #268]	; (80034d8 <HAL_DMA_Abort_IT+0x208>)
 80033cc:	6053      	str	r3, [r2, #4]
 80033ce:	e057      	b.n	8003480 <HAL_DMA_Abort_IT+0x1b0>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a36      	ldr	r2, [pc, #216]	; (80034b0 <HAL_DMA_Abort_IT+0x1e0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d04f      	beq.n	800347a <HAL_DMA_Abort_IT+0x1aa>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a35      	ldr	r2, [pc, #212]	; (80034b4 <HAL_DMA_Abort_IT+0x1e4>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d048      	beq.n	8003476 <HAL_DMA_Abort_IT+0x1a6>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a33      	ldr	r2, [pc, #204]	; (80034b8 <HAL_DMA_Abort_IT+0x1e8>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d040      	beq.n	8003470 <HAL_DMA_Abort_IT+0x1a0>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a32      	ldr	r2, [pc, #200]	; (80034bc <HAL_DMA_Abort_IT+0x1ec>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d038      	beq.n	800346a <HAL_DMA_Abort_IT+0x19a>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a30      	ldr	r2, [pc, #192]	; (80034c0 <HAL_DMA_Abort_IT+0x1f0>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d030      	beq.n	8003464 <HAL_DMA_Abort_IT+0x194>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a2f      	ldr	r2, [pc, #188]	; (80034c4 <HAL_DMA_Abort_IT+0x1f4>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d028      	beq.n	800345e <HAL_DMA_Abort_IT+0x18e>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a26      	ldr	r2, [pc, #152]	; (80034ac <HAL_DMA_Abort_IT+0x1dc>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d020      	beq.n	8003458 <HAL_DMA_Abort_IT+0x188>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a2b      	ldr	r2, [pc, #172]	; (80034c8 <HAL_DMA_Abort_IT+0x1f8>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d019      	beq.n	8003454 <HAL_DMA_Abort_IT+0x184>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a29      	ldr	r2, [pc, #164]	; (80034cc <HAL_DMA_Abort_IT+0x1fc>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d012      	beq.n	8003450 <HAL_DMA_Abort_IT+0x180>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a28      	ldr	r2, [pc, #160]	; (80034d0 <HAL_DMA_Abort_IT+0x200>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d00a      	beq.n	800344a <HAL_DMA_Abort_IT+0x17a>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a26      	ldr	r2, [pc, #152]	; (80034d4 <HAL_DMA_Abort_IT+0x204>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d102      	bne.n	8003444 <HAL_DMA_Abort_IT+0x174>
 800343e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003442:	e01b      	b.n	800347c <HAL_DMA_Abort_IT+0x1ac>
 8003444:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003448:	e018      	b.n	800347c <HAL_DMA_Abort_IT+0x1ac>
 800344a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800344e:	e015      	b.n	800347c <HAL_DMA_Abort_IT+0x1ac>
 8003450:	2310      	movs	r3, #16
 8003452:	e013      	b.n	800347c <HAL_DMA_Abort_IT+0x1ac>
 8003454:	2301      	movs	r3, #1
 8003456:	e011      	b.n	800347c <HAL_DMA_Abort_IT+0x1ac>
 8003458:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800345c:	e00e      	b.n	800347c <HAL_DMA_Abort_IT+0x1ac>
 800345e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003462:	e00b      	b.n	800347c <HAL_DMA_Abort_IT+0x1ac>
 8003464:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003468:	e008      	b.n	800347c <HAL_DMA_Abort_IT+0x1ac>
 800346a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800346e:	e005      	b.n	800347c <HAL_DMA_Abort_IT+0x1ac>
 8003470:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003474:	e002      	b.n	800347c <HAL_DMA_Abort_IT+0x1ac>
 8003476:	2310      	movs	r3, #16
 8003478:	e000      	b.n	800347c <HAL_DMA_Abort_IT+0x1ac>
 800347a:	2301      	movs	r3, #1
 800347c:	4a17      	ldr	r2, [pc, #92]	; (80034dc <HAL_DMA_Abort_IT+0x20c>)
 800347e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	4798      	blx	r3
    } 
  }
  return status;
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40020080 	.word	0x40020080
 80034b0:	40020008 	.word	0x40020008
 80034b4:	4002001c 	.word	0x4002001c
 80034b8:	40020030 	.word	0x40020030
 80034bc:	40020044 	.word	0x40020044
 80034c0:	40020058 	.word	0x40020058
 80034c4:	4002006c 	.word	0x4002006c
 80034c8:	40020408 	.word	0x40020408
 80034cc:	4002041c 	.word	0x4002041c
 80034d0:	40020430 	.word	0x40020430
 80034d4:	40020444 	.word	0x40020444
 80034d8:	40020400 	.word	0x40020400
 80034dc:	40020000 	.word	0x40020000

080034e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08a      	sub	sp, #40	; 0x28
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034ea:	2300      	movs	r3, #0
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80034ee:	2300      	movs	r3, #0
 80034f0:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4aa9      	ldr	r2, [pc, #676]	; (800379c <HAL_GPIO_Init+0x2bc>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d01b      	beq.n	8003532 <HAL_GPIO_Init+0x52>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4aa8      	ldr	r2, [pc, #672]	; (80037a0 <HAL_GPIO_Init+0x2c0>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d017      	beq.n	8003532 <HAL_GPIO_Init+0x52>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4aa7      	ldr	r2, [pc, #668]	; (80037a4 <HAL_GPIO_Init+0x2c4>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d013      	beq.n	8003532 <HAL_GPIO_Init+0x52>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4aa6      	ldr	r2, [pc, #664]	; (80037a8 <HAL_GPIO_Init+0x2c8>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d00f      	beq.n	8003532 <HAL_GPIO_Init+0x52>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4aa5      	ldr	r2, [pc, #660]	; (80037ac <HAL_GPIO_Init+0x2cc>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d00b      	beq.n	8003532 <HAL_GPIO_Init+0x52>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4aa4      	ldr	r2, [pc, #656]	; (80037b0 <HAL_GPIO_Init+0x2d0>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d007      	beq.n	8003532 <HAL_GPIO_Init+0x52>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4aa3      	ldr	r2, [pc, #652]	; (80037b4 <HAL_GPIO_Init+0x2d4>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d003      	beq.n	8003532 <HAL_GPIO_Init+0x52>
 800352a:	21bd      	movs	r1, #189	; 0xbd
 800352c:	48a2      	ldr	r0, [pc, #648]	; (80037b8 <HAL_GPIO_Init+0x2d8>)
 800352e:	f7fe fc57 	bl	8001de0 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	b29b      	uxth	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	d005      	beq.n	8003548 <HAL_GPIO_Init+0x68>
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	0c1b      	lsrs	r3, r3, #16
 8003542:	041b      	lsls	r3, r3, #16
 8003544:	2b00      	cmp	r3, #0
 8003546:	d003      	beq.n	8003550 <HAL_GPIO_Init+0x70>
 8003548:	21be      	movs	r1, #190	; 0xbe
 800354a:	489b      	ldr	r0, [pc, #620]	; (80037b8 <HAL_GPIO_Init+0x2d8>)
 800354c:	f7fe fc48 	bl	8001de0 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 8235 	beq.w	80039c4 <HAL_GPIO_Init+0x4e4>
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b01      	cmp	r3, #1
 8003560:	f000 8230 	beq.w	80039c4 <HAL_GPIO_Init+0x4e4>
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b11      	cmp	r3, #17
 800356a:	f000 822b 	beq.w	80039c4 <HAL_GPIO_Init+0x4e4>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b02      	cmp	r3, #2
 8003574:	f000 8226 	beq.w	80039c4 <HAL_GPIO_Init+0x4e4>
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2b12      	cmp	r3, #18
 800357e:	f000 8221 	beq.w	80039c4 <HAL_GPIO_Init+0x4e4>
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	4a8d      	ldr	r2, [pc, #564]	; (80037bc <HAL_GPIO_Init+0x2dc>)
 8003588:	4293      	cmp	r3, r2
 800358a:	f000 821b 	beq.w	80039c4 <HAL_GPIO_Init+0x4e4>
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	4a8b      	ldr	r2, [pc, #556]	; (80037c0 <HAL_GPIO_Init+0x2e0>)
 8003594:	4293      	cmp	r3, r2
 8003596:	f000 8215 	beq.w	80039c4 <HAL_GPIO_Init+0x4e4>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	4a89      	ldr	r2, [pc, #548]	; (80037c4 <HAL_GPIO_Init+0x2e4>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	f000 820f 	beq.w	80039c4 <HAL_GPIO_Init+0x4e4>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	4a87      	ldr	r2, [pc, #540]	; (80037c8 <HAL_GPIO_Init+0x2e8>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	f000 8209 	beq.w	80039c4 <HAL_GPIO_Init+0x4e4>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	4a85      	ldr	r2, [pc, #532]	; (80037cc <HAL_GPIO_Init+0x2ec>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	f000 8203 	beq.w	80039c4 <HAL_GPIO_Init+0x4e4>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	4a83      	ldr	r2, [pc, #524]	; (80037d0 <HAL_GPIO_Init+0x2f0>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	f000 81fd 	beq.w	80039c4 <HAL_GPIO_Init+0x4e4>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b03      	cmp	r3, #3
 80035d0:	f000 81f8 	beq.w	80039c4 <HAL_GPIO_Init+0x4e4>
 80035d4:	21bf      	movs	r1, #191	; 0xbf
 80035d6:	4878      	ldr	r0, [pc, #480]	; (80037b8 <HAL_GPIO_Init+0x2d8>)
 80035d8:	f7fe fc02 	bl	8001de0 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035dc:	e1f2      	b.n	80039c4 <HAL_GPIO_Init+0x4e4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80035de:	2201      	movs	r2, #1
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	69fa      	ldr	r2, [r7, #28]
 80035ee:	4013      	ands	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	f040 81e1 	bne.w	80039be <HAL_GPIO_Init+0x4de>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a67      	ldr	r2, [pc, #412]	; (800379c <HAL_GPIO_Init+0x2bc>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d01b      	beq.n	800363c <HAL_GPIO_Init+0x15c>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a66      	ldr	r2, [pc, #408]	; (80037a0 <HAL_GPIO_Init+0x2c0>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d017      	beq.n	800363c <HAL_GPIO_Init+0x15c>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a65      	ldr	r2, [pc, #404]	; (80037a4 <HAL_GPIO_Init+0x2c4>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d013      	beq.n	800363c <HAL_GPIO_Init+0x15c>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a64      	ldr	r2, [pc, #400]	; (80037a8 <HAL_GPIO_Init+0x2c8>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d00f      	beq.n	800363c <HAL_GPIO_Init+0x15c>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a63      	ldr	r2, [pc, #396]	; (80037ac <HAL_GPIO_Init+0x2cc>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d00b      	beq.n	800363c <HAL_GPIO_Init+0x15c>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a62      	ldr	r2, [pc, #392]	; (80037b0 <HAL_GPIO_Init+0x2d0>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d007      	beq.n	800363c <HAL_GPIO_Init+0x15c>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a61      	ldr	r2, [pc, #388]	; (80037b4 <HAL_GPIO_Init+0x2d4>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d003      	beq.n	800363c <HAL_GPIO_Init+0x15c>
 8003634:	21cd      	movs	r1, #205	; 0xcd
 8003636:	4860      	ldr	r0, [pc, #384]	; (80037b8 <HAL_GPIO_Init+0x2d8>)
 8003638:	f7fe fbd2 	bl	8001de0 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	4a63      	ldr	r2, [pc, #396]	; (80037d0 <HAL_GPIO_Init+0x2f0>)
 8003642:	4293      	cmp	r3, r2
 8003644:	f000 80c6 	beq.w	80037d4 <HAL_GPIO_Init+0x2f4>
 8003648:	4a61      	ldr	r2, [pc, #388]	; (80037d0 <HAL_GPIO_Init+0x2f0>)
 800364a:	4293      	cmp	r3, r2
 800364c:	f200 80ec 	bhi.w	8003828 <HAL_GPIO_Init+0x348>
 8003650:	4a5c      	ldr	r2, [pc, #368]	; (80037c4 <HAL_GPIO_Init+0x2e4>)
 8003652:	4293      	cmp	r3, r2
 8003654:	f000 80be 	beq.w	80037d4 <HAL_GPIO_Init+0x2f4>
 8003658:	4a5a      	ldr	r2, [pc, #360]	; (80037c4 <HAL_GPIO_Init+0x2e4>)
 800365a:	4293      	cmp	r3, r2
 800365c:	f200 80e4 	bhi.w	8003828 <HAL_GPIO_Init+0x348>
 8003660:	4a5a      	ldr	r2, [pc, #360]	; (80037cc <HAL_GPIO_Init+0x2ec>)
 8003662:	4293      	cmp	r3, r2
 8003664:	f000 80b6 	beq.w	80037d4 <HAL_GPIO_Init+0x2f4>
 8003668:	4a58      	ldr	r2, [pc, #352]	; (80037cc <HAL_GPIO_Init+0x2ec>)
 800366a:	4293      	cmp	r3, r2
 800366c:	f200 80dc 	bhi.w	8003828 <HAL_GPIO_Init+0x348>
 8003670:	4a53      	ldr	r2, [pc, #332]	; (80037c0 <HAL_GPIO_Init+0x2e0>)
 8003672:	4293      	cmp	r3, r2
 8003674:	f000 80ae 	beq.w	80037d4 <HAL_GPIO_Init+0x2f4>
 8003678:	4a51      	ldr	r2, [pc, #324]	; (80037c0 <HAL_GPIO_Init+0x2e0>)
 800367a:	4293      	cmp	r3, r2
 800367c:	f200 80d4 	bhi.w	8003828 <HAL_GPIO_Init+0x348>
 8003680:	4a51      	ldr	r2, [pc, #324]	; (80037c8 <HAL_GPIO_Init+0x2e8>)
 8003682:	4293      	cmp	r3, r2
 8003684:	f000 80a6 	beq.w	80037d4 <HAL_GPIO_Init+0x2f4>
 8003688:	4a4f      	ldr	r2, [pc, #316]	; (80037c8 <HAL_GPIO_Init+0x2e8>)
 800368a:	4293      	cmp	r3, r2
 800368c:	f200 80cc 	bhi.w	8003828 <HAL_GPIO_Init+0x348>
 8003690:	2b12      	cmp	r3, #18
 8003692:	d82b      	bhi.n	80036ec <HAL_GPIO_Init+0x20c>
 8003694:	2b12      	cmp	r3, #18
 8003696:	f200 80c7 	bhi.w	8003828 <HAL_GPIO_Init+0x348>
 800369a:	a201      	add	r2, pc, #4	; (adr r2, 80036a0 <HAL_GPIO_Init+0x1c0>)
 800369c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a0:	080037d5 	.word	0x080037d5
 80036a4:	080036f5 	.word	0x080036f5
 80036a8:	08003747 	.word	0x08003747
 80036ac:	08003823 	.word	0x08003823
 80036b0:	08003829 	.word	0x08003829
 80036b4:	08003829 	.word	0x08003829
 80036b8:	08003829 	.word	0x08003829
 80036bc:	08003829 	.word	0x08003829
 80036c0:	08003829 	.word	0x08003829
 80036c4:	08003829 	.word	0x08003829
 80036c8:	08003829 	.word	0x08003829
 80036cc:	08003829 	.word	0x08003829
 80036d0:	08003829 	.word	0x08003829
 80036d4:	08003829 	.word	0x08003829
 80036d8:	08003829 	.word	0x08003829
 80036dc:	08003829 	.word	0x08003829
 80036e0:	08003829 	.word	0x08003829
 80036e4:	0800371d 	.word	0x0800371d
 80036e8:	08003771 	.word	0x08003771
 80036ec:	4a33      	ldr	r2, [pc, #204]	; (80037bc <HAL_GPIO_Init+0x2dc>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d070      	beq.n	80037d4 <HAL_GPIO_Init+0x2f4>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80036f2:	e099      	b.n	8003828 <HAL_GPIO_Init+0x348>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d00b      	beq.n	8003714 <HAL_GPIO_Init+0x234>
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d007      	beq.n	8003714 <HAL_GPIO_Init+0x234>
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	2b03      	cmp	r3, #3
 800370a:	d003      	beq.n	8003714 <HAL_GPIO_Init+0x234>
 800370c:	21d5      	movs	r1, #213	; 0xd5
 800370e:	482a      	ldr	r0, [pc, #168]	; (80037b8 <HAL_GPIO_Init+0x2d8>)
 8003710:	f7fe fb66 	bl	8001de0 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	623b      	str	r3, [r7, #32]
          break;
 800371a:	e086      	b.n	800382a <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	2b02      	cmp	r3, #2
 8003722:	d00b      	beq.n	800373c <HAL_GPIO_Init+0x25c>
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d007      	beq.n	800373c <HAL_GPIO_Init+0x25c>
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	2b03      	cmp	r3, #3
 8003732:	d003      	beq.n	800373c <HAL_GPIO_Init+0x25c>
 8003734:	21dc      	movs	r1, #220	; 0xdc
 8003736:	4820      	ldr	r0, [pc, #128]	; (80037b8 <HAL_GPIO_Init+0x2d8>)
 8003738:	f7fe fb52 	bl	8001de0 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	3304      	adds	r3, #4
 8003742:	623b      	str	r3, [r7, #32]
          break;
 8003744:	e071      	b.n	800382a <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	2b02      	cmp	r3, #2
 800374c:	d00b      	beq.n	8003766 <HAL_GPIO_Init+0x286>
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d007      	beq.n	8003766 <HAL_GPIO_Init+0x286>
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	2b03      	cmp	r3, #3
 800375c:	d003      	beq.n	8003766 <HAL_GPIO_Init+0x286>
 800375e:	21e3      	movs	r1, #227	; 0xe3
 8003760:	4815      	ldr	r0, [pc, #84]	; (80037b8 <HAL_GPIO_Init+0x2d8>)
 8003762:	f7fe fb3d 	bl	8001de0 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	3308      	adds	r3, #8
 800376c:	623b      	str	r3, [r7, #32]
          break;
 800376e:	e05c      	b.n	800382a <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	2b02      	cmp	r3, #2
 8003776:	d00b      	beq.n	8003790 <HAL_GPIO_Init+0x2b0>
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d007      	beq.n	8003790 <HAL_GPIO_Init+0x2b0>
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	2b03      	cmp	r3, #3
 8003786:	d003      	beq.n	8003790 <HAL_GPIO_Init+0x2b0>
 8003788:	21ea      	movs	r1, #234	; 0xea
 800378a:	480b      	ldr	r0, [pc, #44]	; (80037b8 <HAL_GPIO_Init+0x2d8>)
 800378c:	f7fe fb28 	bl	8001de0 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	330c      	adds	r3, #12
 8003796:	623b      	str	r3, [r7, #32]
          break;
 8003798:	e047      	b.n	800382a <HAL_GPIO_Init+0x34a>
 800379a:	bf00      	nop
 800379c:	40010800 	.word	0x40010800
 80037a0:	40010c00 	.word	0x40010c00
 80037a4:	40011000 	.word	0x40011000
 80037a8:	40011400 	.word	0x40011400
 80037ac:	40011800 	.word	0x40011800
 80037b0:	40011c00 	.word	0x40011c00
 80037b4:	40012000 	.word	0x40012000
 80037b8:	080112bc 	.word	0x080112bc
 80037bc:	10110000 	.word	0x10110000
 80037c0:	10210000 	.word	0x10210000
 80037c4:	10310000 	.word	0x10310000
 80037c8:	10120000 	.word	0x10120000
 80037cc:	10220000 	.word	0x10220000
 80037d0:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00b      	beq.n	80037f4 <HAL_GPIO_Init+0x314>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d007      	beq.n	80037f4 <HAL_GPIO_Init+0x314>
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d003      	beq.n	80037f4 <HAL_GPIO_Init+0x314>
 80037ec:	21f7      	movs	r1, #247	; 0xf7
 80037ee:	487c      	ldr	r0, [pc, #496]	; (80039e0 <HAL_GPIO_Init+0x500>)
 80037f0:	f7fe faf6 	bl	8001de0 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d102      	bne.n	8003802 <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80037fc:	2304      	movs	r3, #4
 80037fe:	623b      	str	r3, [r7, #32]
          break;
 8003800:	e013      	b.n	800382a <HAL_GPIO_Init+0x34a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d105      	bne.n	8003816 <HAL_GPIO_Init+0x336>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800380a:	2308      	movs	r3, #8
 800380c:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69fa      	ldr	r2, [r7, #28]
 8003812:	611a      	str	r2, [r3, #16]
          break;
 8003814:	e009      	b.n	800382a <HAL_GPIO_Init+0x34a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003816:	2308      	movs	r3, #8
 8003818:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69fa      	ldr	r2, [r7, #28]
 800381e:	615a      	str	r2, [r3, #20]
          break;
 8003820:	e003      	b.n	800382a <HAL_GPIO_Init+0x34a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003822:	2300      	movs	r3, #0
 8003824:	623b      	str	r3, [r7, #32]
          break;
 8003826:	e000      	b.n	800382a <HAL_GPIO_Init+0x34a>
          break;
 8003828:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	2bff      	cmp	r3, #255	; 0xff
 800382e:	d801      	bhi.n	8003834 <HAL_GPIO_Init+0x354>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	e001      	b.n	8003838 <HAL_GPIO_Init+0x358>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3304      	adds	r3, #4
 8003838:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	2bff      	cmp	r3, #255	; 0xff
 800383e:	d802      	bhi.n	8003846 <HAL_GPIO_Init+0x366>
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	e002      	b.n	800384c <HAL_GPIO_Init+0x36c>
 8003846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003848:	3b08      	subs	r3, #8
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	210f      	movs	r1, #15
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	fa01 f303 	lsl.w	r3, r1, r3
 800385a:	43db      	mvns	r3, r3
 800385c:	401a      	ands	r2, r3
 800385e:	6a39      	ldr	r1, [r7, #32]
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	fa01 f303 	lsl.w	r3, r1, r3
 8003866:	431a      	orrs	r2, r3
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 80a2 	beq.w	80039be <HAL_GPIO_Init+0x4de>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800387a:	4b5a      	ldr	r3, [pc, #360]	; (80039e4 <HAL_GPIO_Init+0x504>)
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	4a59      	ldr	r2, [pc, #356]	; (80039e4 <HAL_GPIO_Init+0x504>)
 8003880:	f043 0301 	orr.w	r3, r3, #1
 8003884:	6193      	str	r3, [r2, #24]
 8003886:	4b57      	ldr	r3, [pc, #348]	; (80039e4 <HAL_GPIO_Init+0x504>)
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	60bb      	str	r3, [r7, #8]
 8003890:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003892:	4a55      	ldr	r2, [pc, #340]	; (80039e8 <HAL_GPIO_Init+0x508>)
 8003894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003896:	089b      	lsrs	r3, r3, #2
 8003898:	3302      	adds	r3, #2
 800389a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800389e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80038a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a2:	f003 0303 	and.w	r3, r3, #3
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	220f      	movs	r2, #15
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
 80038ae:	43db      	mvns	r3, r3
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	4013      	ands	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a4c      	ldr	r2, [pc, #304]	; (80039ec <HAL_GPIO_Init+0x50c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d01f      	beq.n	80038fe <HAL_GPIO_Init+0x41e>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a4b      	ldr	r2, [pc, #300]	; (80039f0 <HAL_GPIO_Init+0x510>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d019      	beq.n	80038fa <HAL_GPIO_Init+0x41a>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a4a      	ldr	r2, [pc, #296]	; (80039f4 <HAL_GPIO_Init+0x514>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d013      	beq.n	80038f6 <HAL_GPIO_Init+0x416>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a49      	ldr	r2, [pc, #292]	; (80039f8 <HAL_GPIO_Init+0x518>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00d      	beq.n	80038f2 <HAL_GPIO_Init+0x412>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a48      	ldr	r2, [pc, #288]	; (80039fc <HAL_GPIO_Init+0x51c>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d007      	beq.n	80038ee <HAL_GPIO_Init+0x40e>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a47      	ldr	r2, [pc, #284]	; (8003a00 <HAL_GPIO_Init+0x520>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d101      	bne.n	80038ea <HAL_GPIO_Init+0x40a>
 80038e6:	2305      	movs	r3, #5
 80038e8:	e00a      	b.n	8003900 <HAL_GPIO_Init+0x420>
 80038ea:	2306      	movs	r3, #6
 80038ec:	e008      	b.n	8003900 <HAL_GPIO_Init+0x420>
 80038ee:	2304      	movs	r3, #4
 80038f0:	e006      	b.n	8003900 <HAL_GPIO_Init+0x420>
 80038f2:	2303      	movs	r3, #3
 80038f4:	e004      	b.n	8003900 <HAL_GPIO_Init+0x420>
 80038f6:	2302      	movs	r3, #2
 80038f8:	e002      	b.n	8003900 <HAL_GPIO_Init+0x420>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <HAL_GPIO_Init+0x420>
 80038fe:	2300      	movs	r3, #0
 8003900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003902:	f002 0203 	and.w	r2, r2, #3
 8003906:	0092      	lsls	r2, r2, #2
 8003908:	4093      	lsls	r3, r2
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	4313      	orrs	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003910:	4935      	ldr	r1, [pc, #212]	; (80039e8 <HAL_GPIO_Init+0x508>)
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	089b      	lsrs	r3, r3, #2
 8003916:	3302      	adds	r3, #2
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d006      	beq.n	8003938 <HAL_GPIO_Init+0x458>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800392a:	4b36      	ldr	r3, [pc, #216]	; (8003a04 <HAL_GPIO_Init+0x524>)
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	4935      	ldr	r1, [pc, #212]	; (8003a04 <HAL_GPIO_Init+0x524>)
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	4313      	orrs	r3, r2
 8003934:	600b      	str	r3, [r1, #0]
 8003936:	e006      	b.n	8003946 <HAL_GPIO_Init+0x466>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003938:	4b32      	ldr	r3, [pc, #200]	; (8003a04 <HAL_GPIO_Init+0x524>)
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	43db      	mvns	r3, r3
 8003940:	4930      	ldr	r1, [pc, #192]	; (8003a04 <HAL_GPIO_Init+0x524>)
 8003942:	4013      	ands	r3, r2
 8003944:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d006      	beq.n	8003960 <HAL_GPIO_Init+0x480>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003952:	4b2c      	ldr	r3, [pc, #176]	; (8003a04 <HAL_GPIO_Init+0x524>)
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	492b      	ldr	r1, [pc, #172]	; (8003a04 <HAL_GPIO_Init+0x524>)
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	4313      	orrs	r3, r2
 800395c:	604b      	str	r3, [r1, #4]
 800395e:	e006      	b.n	800396e <HAL_GPIO_Init+0x48e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003960:	4b28      	ldr	r3, [pc, #160]	; (8003a04 <HAL_GPIO_Init+0x524>)
 8003962:	685a      	ldr	r2, [r3, #4]
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	43db      	mvns	r3, r3
 8003968:	4926      	ldr	r1, [pc, #152]	; (8003a04 <HAL_GPIO_Init+0x524>)
 800396a:	4013      	ands	r3, r2
 800396c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d006      	beq.n	8003988 <HAL_GPIO_Init+0x4a8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800397a:	4b22      	ldr	r3, [pc, #136]	; (8003a04 <HAL_GPIO_Init+0x524>)
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	4921      	ldr	r1, [pc, #132]	; (8003a04 <HAL_GPIO_Init+0x524>)
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	4313      	orrs	r3, r2
 8003984:	608b      	str	r3, [r1, #8]
 8003986:	e006      	b.n	8003996 <HAL_GPIO_Init+0x4b6>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003988:	4b1e      	ldr	r3, [pc, #120]	; (8003a04 <HAL_GPIO_Init+0x524>)
 800398a:	689a      	ldr	r2, [r3, #8]
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	43db      	mvns	r3, r3
 8003990:	491c      	ldr	r1, [pc, #112]	; (8003a04 <HAL_GPIO_Init+0x524>)
 8003992:	4013      	ands	r3, r2
 8003994:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d006      	beq.n	80039b0 <HAL_GPIO_Init+0x4d0>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80039a2:	4b18      	ldr	r3, [pc, #96]	; (8003a04 <HAL_GPIO_Init+0x524>)
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	4917      	ldr	r1, [pc, #92]	; (8003a04 <HAL_GPIO_Init+0x524>)
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	60cb      	str	r3, [r1, #12]
 80039ae:	e006      	b.n	80039be <HAL_GPIO_Init+0x4de>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80039b0:	4b14      	ldr	r3, [pc, #80]	; (8003a04 <HAL_GPIO_Init+0x524>)
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	43db      	mvns	r3, r3
 80039b8:	4912      	ldr	r1, [pc, #72]	; (8003a04 <HAL_GPIO_Init+0x524>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	3301      	adds	r3, #1
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ca:	fa22 f303 	lsr.w	r3, r2, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f47f ae05 	bne.w	80035de <HAL_GPIO_Init+0xfe>
  }
}
 80039d4:	bf00      	nop
 80039d6:	bf00      	nop
 80039d8:	3728      	adds	r7, #40	; 0x28
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	080112bc 	.word	0x080112bc
 80039e4:	40021000 	.word	0x40021000
 80039e8:	40010000 	.word	0x40010000
 80039ec:	40010800 	.word	0x40010800
 80039f0:	40010c00 	.word	0x40010c00
 80039f4:	40011000 	.word	0x40011000
 80039f8:	40011400 	.word	0x40011400
 80039fc:	40011800 	.word	0x40011800
 8003a00:	40011c00 	.word	0x40011c00
 8003a04:	40010400 	.word	0x40010400

08003a08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003a14:	887b      	ldrh	r3, [r7, #2]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d004      	beq.n	8003a24 <HAL_GPIO_ReadPin+0x1c>
 8003a1a:	887b      	ldrh	r3, [r7, #2]
 8003a1c:	0c1b      	lsrs	r3, r3, #16
 8003a1e:	041b      	lsls	r3, r3, #16
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d004      	beq.n	8003a2e <HAL_GPIO_ReadPin+0x26>
 8003a24:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8003a28:	4809      	ldr	r0, [pc, #36]	; (8003a50 <HAL_GPIO_ReadPin+0x48>)
 8003a2a:	f7fe f9d9 	bl	8001de0 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	887b      	ldrh	r3, [r7, #2]
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <HAL_GPIO_ReadPin+0x38>
  {
    bitstatus = GPIO_PIN_SET;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	73fb      	strb	r3, [r7, #15]
 8003a3e:	e001      	b.n	8003a44 <HAL_GPIO_ReadPin+0x3c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a40:	2300      	movs	r3, #0
 8003a42:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	080112bc 	.word	0x080112bc

08003a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	807b      	strh	r3, [r7, #2]
 8003a60:	4613      	mov	r3, r2
 8003a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003a64:	887b      	ldrh	r3, [r7, #2]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d004      	beq.n	8003a74 <HAL_GPIO_WritePin+0x20>
 8003a6a:	887b      	ldrh	r3, [r7, #2]
 8003a6c:	0c1b      	lsrs	r3, r3, #16
 8003a6e:	041b      	lsls	r3, r3, #16
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d004      	beq.n	8003a7e <HAL_GPIO_WritePin+0x2a>
 8003a74:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8003a78:	480e      	ldr	r0, [pc, #56]	; (8003ab4 <HAL_GPIO_WritePin+0x60>)
 8003a7a:	f7fe f9b1 	bl	8001de0 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003a7e:	787b      	ldrb	r3, [r7, #1]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d007      	beq.n	8003a94 <HAL_GPIO_WritePin+0x40>
 8003a84:	787b      	ldrb	r3, [r7, #1]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d004      	beq.n	8003a94 <HAL_GPIO_WritePin+0x40>
 8003a8a:	f240 11d5 	movw	r1, #469	; 0x1d5
 8003a8e:	4809      	ldr	r0, [pc, #36]	; (8003ab4 <HAL_GPIO_WritePin+0x60>)
 8003a90:	f7fe f9a6 	bl	8001de0 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8003a94:	787b      	ldrb	r3, [r7, #1]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a9a:	887a      	ldrh	r2, [r7, #2]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003aa0:	e003      	b.n	8003aaa <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003aa2:	887b      	ldrh	r3, [r7, #2]
 8003aa4:	041a      	lsls	r2, r3, #16
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	611a      	str	r2, [r3, #16]
}
 8003aaa:	bf00      	nop
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	080112bc 	.word	0x080112bc

08003ab8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003ac4:	887b      	ldrh	r3, [r7, #2]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d004      	beq.n	8003ad4 <HAL_GPIO_TogglePin+0x1c>
 8003aca:	887b      	ldrh	r3, [r7, #2]
 8003acc:	0c1b      	lsrs	r3, r3, #16
 8003ace:	041b      	lsls	r3, r3, #16
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d004      	beq.n	8003ade <HAL_GPIO_TogglePin+0x26>
 8003ad4:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8003ad8:	480a      	ldr	r0, [pc, #40]	; (8003b04 <HAL_GPIO_TogglePin+0x4c>)
 8003ada:	f7fe f981 	bl	8001de0 <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ae4:	887a      	ldrh	r2, [r7, #2]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	041a      	lsls	r2, r3, #16
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	43d9      	mvns	r1, r3
 8003af0:	887b      	ldrh	r3, [r7, #2]
 8003af2:	400b      	ands	r3, r1
 8003af4:	431a      	orrs	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	611a      	str	r2, [r3, #16]
}
 8003afa:	bf00      	nop
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	080112bc 	.word	0x080112bc

08003b08 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003b0c:	4b03      	ldr	r3, [pc, #12]	; (8003b1c <HAL_PWR_EnableBkUpAccess+0x14>)
 8003b0e:	2201      	movs	r2, #1
 8003b10:	601a      	str	r2, [r3, #0]
}
 8003b12:	bf00      	nop
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bc80      	pop	{r7}
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	420e0020 	.word	0x420e0020

08003b20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e35c      	b.n	80041ec <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d01c      	beq.n	8003b74 <HAL_RCC_OscConfig+0x54>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d116      	bne.n	8003b74 <HAL_RCC_OscConfig+0x54>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d110      	bne.n	8003b74 <HAL_RCC_OscConfig+0x54>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10a      	bne.n	8003b74 <HAL_RCC_OscConfig+0x54>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0304 	and.w	r3, r3, #4
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d104      	bne.n	8003b74 <HAL_RCC_OscConfig+0x54>
 8003b6a:	f240 1167 	movw	r1, #359	; 0x167
 8003b6e:	48a5      	ldr	r0, [pc, #660]	; (8003e04 <HAL_RCC_OscConfig+0x2e4>)
 8003b70:	f7fe f936 	bl	8001de0 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 809a 	beq.w	8003cb6 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00e      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x88>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b92:	d009      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x88>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b9c:	d004      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x88>
 8003b9e:	f240 116d 	movw	r1, #365	; 0x16d
 8003ba2:	4898      	ldr	r0, [pc, #608]	; (8003e04 <HAL_RCC_OscConfig+0x2e4>)
 8003ba4:	f7fe f91c 	bl	8001de0 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ba8:	4b97      	ldr	r3, [pc, #604]	; (8003e08 <HAL_RCC_OscConfig+0x2e8>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f003 030c 	and.w	r3, r3, #12
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d00c      	beq.n	8003bce <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003bb4:	4b94      	ldr	r3, [pc, #592]	; (8003e08 <HAL_RCC_OscConfig+0x2e8>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 030c 	and.w	r3, r3, #12
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d112      	bne.n	8003be6 <HAL_RCC_OscConfig+0xc6>
 8003bc0:	4b91      	ldr	r3, [pc, #580]	; (8003e08 <HAL_RCC_OscConfig+0x2e8>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bcc:	d10b      	bne.n	8003be6 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bce:	4b8e      	ldr	r3, [pc, #568]	; (8003e08 <HAL_RCC_OscConfig+0x2e8>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d06c      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x194>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d168      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e302      	b.n	80041ec <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bee:	d106      	bne.n	8003bfe <HAL_RCC_OscConfig+0xde>
 8003bf0:	4b85      	ldr	r3, [pc, #532]	; (8003e08 <HAL_RCC_OscConfig+0x2e8>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a84      	ldr	r2, [pc, #528]	; (8003e08 <HAL_RCC_OscConfig+0x2e8>)
 8003bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bfa:	6013      	str	r3, [r2, #0]
 8003bfc:	e02e      	b.n	8003c5c <HAL_RCC_OscConfig+0x13c>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10c      	bne.n	8003c20 <HAL_RCC_OscConfig+0x100>
 8003c06:	4b80      	ldr	r3, [pc, #512]	; (8003e08 <HAL_RCC_OscConfig+0x2e8>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a7f      	ldr	r2, [pc, #508]	; (8003e08 <HAL_RCC_OscConfig+0x2e8>)
 8003c0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	4b7d      	ldr	r3, [pc, #500]	; (8003e08 <HAL_RCC_OscConfig+0x2e8>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a7c      	ldr	r2, [pc, #496]	; (8003e08 <HAL_RCC_OscConfig+0x2e8>)
 8003c18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	e01d      	b.n	8003c5c <HAL_RCC_OscConfig+0x13c>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c28:	d10c      	bne.n	8003c44 <HAL_RCC_OscConfig+0x124>
 8003c2a:	4b77      	ldr	r3, [pc, #476]	; (8003e08 <HAL_RCC_OscConfig+0x2e8>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a76      	ldr	r2, [pc, #472]	; (8003e08 <HAL_RCC_OscConfig+0x2e8>)
 8003c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	4b74      	ldr	r3, [pc, #464]	; (8003e08 <HAL_RCC_OscConfig+0x2e8>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a73      	ldr	r2, [pc, #460]	; (8003e08 <HAL_RCC_OscConfig+0x2e8>)
 8003c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	e00b      	b.n	8003c5c <HAL_RCC_OscConfig+0x13c>
 8003c44:	4b70      	ldr	r3, [pc, #448]	; (8003e08 <HAL_RCC_OscConfig+0x2e8>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a6f      	ldr	r2, [pc, #444]	; (8003e08 <HAL_RCC_OscConfig+0x2e8>)
 8003c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c4e:	6013      	str	r3, [r2, #0]
 8003c50:	4b6d      	ldr	r3, [pc, #436]	; (8003e08 <HAL_RCC_OscConfig+0x2e8>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a6c      	ldr	r2, [pc, #432]	; (8003e08 <HAL_RCC_OscConfig+0x2e8>)
 8003c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d013      	beq.n	8003c8c <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c64:	f7fe fd9e 	bl	80027a4 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c6c:	f7fe fd9a 	bl	80027a4 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b64      	cmp	r3, #100	; 0x64
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e2b6      	b.n	80041ec <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c7e:	4b62      	ldr	r3, [pc, #392]	; (8003e08 <HAL_RCC_OscConfig+0x2e8>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0f0      	beq.n	8003c6c <HAL_RCC_OscConfig+0x14c>
 8003c8a:	e014      	b.n	8003cb6 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8c:	f7fe fd8a 	bl	80027a4 <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c94:	f7fe fd86 	bl	80027a4 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b64      	cmp	r3, #100	; 0x64
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e2a2      	b.n	80041ec <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ca6:	4b58      	ldr	r3, [pc, #352]	; (8003e08 <HAL_RCC_OscConfig+0x2e8>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1f0      	bne.n	8003c94 <HAL_RCC_OscConfig+0x174>
 8003cb2:	e000      	b.n	8003cb6 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d079      	beq.n	8003db6 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d008      	beq.n	8003cdc <HAL_RCC_OscConfig+0x1bc>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d004      	beq.n	8003cdc <HAL_RCC_OscConfig+0x1bc>
 8003cd2:	f240 11a1 	movw	r1, #417	; 0x1a1
 8003cd6:	484b      	ldr	r0, [pc, #300]	; (8003e04 <HAL_RCC_OscConfig+0x2e4>)
 8003cd8:	f7fe f882 	bl	8001de0 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	2b1f      	cmp	r3, #31
 8003ce2:	d904      	bls.n	8003cee <HAL_RCC_OscConfig+0x1ce>
 8003ce4:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8003ce8:	4846      	ldr	r0, [pc, #280]	; (8003e04 <HAL_RCC_OscConfig+0x2e4>)
 8003cea:	f7fe f879 	bl	8001de0 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cee:	4b46      	ldr	r3, [pc, #280]	; (8003e08 <HAL_RCC_OscConfig+0x2e8>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f003 030c 	and.w	r3, r3, #12
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00b      	beq.n	8003d12 <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003cfa:	4b43      	ldr	r3, [pc, #268]	; (8003e08 <HAL_RCC_OscConfig+0x2e8>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f003 030c 	and.w	r3, r3, #12
 8003d02:	2b08      	cmp	r3, #8
 8003d04:	d11c      	bne.n	8003d40 <HAL_RCC_OscConfig+0x220>
 8003d06:	4b40      	ldr	r3, [pc, #256]	; (8003e08 <HAL_RCC_OscConfig+0x2e8>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d116      	bne.n	8003d40 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d12:	4b3d      	ldr	r3, [pc, #244]	; (8003e08 <HAL_RCC_OscConfig+0x2e8>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d005      	beq.n	8003d2a <HAL_RCC_OscConfig+0x20a>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d001      	beq.n	8003d2a <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e260      	b.n	80041ec <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2a:	4b37      	ldr	r3, [pc, #220]	; (8003e08 <HAL_RCC_OscConfig+0x2e8>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	4933      	ldr	r1, [pc, #204]	; (8003e08 <HAL_RCC_OscConfig+0x2e8>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d3e:	e03a      	b.n	8003db6 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d020      	beq.n	8003d8a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d48:	4b30      	ldr	r3, [pc, #192]	; (8003e0c <HAL_RCC_OscConfig+0x2ec>)
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4e:	f7fe fd29 	bl	80027a4 <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d54:	e008      	b.n	8003d68 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d56:	f7fe fd25 	bl	80027a4 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e241      	b.n	80041ec <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d68:	4b27      	ldr	r3, [pc, #156]	; (8003e08 <HAL_RCC_OscConfig+0x2e8>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0f0      	beq.n	8003d56 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d74:	4b24      	ldr	r3, [pc, #144]	; (8003e08 <HAL_RCC_OscConfig+0x2e8>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	4921      	ldr	r1, [pc, #132]	; (8003e08 <HAL_RCC_OscConfig+0x2e8>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	600b      	str	r3, [r1, #0]
 8003d88:	e015      	b.n	8003db6 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d8a:	4b20      	ldr	r3, [pc, #128]	; (8003e0c <HAL_RCC_OscConfig+0x2ec>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d90:	f7fe fd08 	bl	80027a4 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d98:	f7fe fd04 	bl	80027a4 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e220      	b.n	80041ec <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003daa:	4b17      	ldr	r3, [pc, #92]	; (8003e08 <HAL_RCC_OscConfig+0x2e8>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f0      	bne.n	8003d98 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0308 	and.w	r3, r3, #8
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d048      	beq.n	8003e54 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d008      	beq.n	8003ddc <HAL_RCC_OscConfig+0x2bc>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d004      	beq.n	8003ddc <HAL_RCC_OscConfig+0x2bc>
 8003dd2:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8003dd6:	480b      	ldr	r0, [pc, #44]	; (8003e04 <HAL_RCC_OscConfig+0x2e4>)
 8003dd8:	f7fe f802 	bl	8001de0 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d021      	beq.n	8003e28 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003de4:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <HAL_RCC_OscConfig+0x2f0>)
 8003de6:	2201      	movs	r2, #1
 8003de8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dea:	f7fe fcdb 	bl	80027a4 <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003df0:	e010      	b.n	8003e14 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003df2:	f7fe fcd7 	bl	80027a4 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d909      	bls.n	8003e14 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e1f3      	b.n	80041ec <HAL_RCC_OscConfig+0x6cc>
 8003e04:	080112f8 	.word	0x080112f8
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	42420000 	.word	0x42420000
 8003e10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e14:	4b67      	ldr	r3, [pc, #412]	; (8003fb4 <HAL_RCC_OscConfig+0x494>)
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0e8      	beq.n	8003df2 <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e20:	2001      	movs	r0, #1
 8003e22:	f000 fc0f 	bl	8004644 <RCC_Delay>
 8003e26:	e015      	b.n	8003e54 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e28:	4b63      	ldr	r3, [pc, #396]	; (8003fb8 <HAL_RCC_OscConfig+0x498>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e2e:	f7fe fcb9 	bl	80027a4 <HAL_GetTick>
 8003e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e34:	e008      	b.n	8003e48 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e36:	f7fe fcb5 	bl	80027a4 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e1d1      	b.n	80041ec <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e48:	4b5a      	ldr	r3, [pc, #360]	; (8003fb4 <HAL_RCC_OscConfig+0x494>)
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1f0      	bne.n	8003e36 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 80c0 	beq.w	8003fe2 <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e62:	2300      	movs	r3, #0
 8003e64:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00c      	beq.n	8003e88 <HAL_RCC_OscConfig+0x368>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d008      	beq.n	8003e88 <HAL_RCC_OscConfig+0x368>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	2b05      	cmp	r3, #5
 8003e7c:	d004      	beq.n	8003e88 <HAL_RCC_OscConfig+0x368>
 8003e7e:	f240 2111 	movw	r1, #529	; 0x211
 8003e82:	484e      	ldr	r0, [pc, #312]	; (8003fbc <HAL_RCC_OscConfig+0x49c>)
 8003e84:	f7fd ffac 	bl	8001de0 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e88:	4b4a      	ldr	r3, [pc, #296]	; (8003fb4 <HAL_RCC_OscConfig+0x494>)
 8003e8a:	69db      	ldr	r3, [r3, #28]
 8003e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10d      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e94:	4b47      	ldr	r3, [pc, #284]	; (8003fb4 <HAL_RCC_OscConfig+0x494>)
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	4a46      	ldr	r2, [pc, #280]	; (8003fb4 <HAL_RCC_OscConfig+0x494>)
 8003e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e9e:	61d3      	str	r3, [r2, #28]
 8003ea0:	4b44      	ldr	r3, [pc, #272]	; (8003fb4 <HAL_RCC_OscConfig+0x494>)
 8003ea2:	69db      	ldr	r3, [r3, #28]
 8003ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea8:	60bb      	str	r3, [r7, #8]
 8003eaa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eac:	2301      	movs	r3, #1
 8003eae:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eb0:	4b43      	ldr	r3, [pc, #268]	; (8003fc0 <HAL_RCC_OscConfig+0x4a0>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d118      	bne.n	8003eee <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ebc:	4b40      	ldr	r3, [pc, #256]	; (8003fc0 <HAL_RCC_OscConfig+0x4a0>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a3f      	ldr	r2, [pc, #252]	; (8003fc0 <HAL_RCC_OscConfig+0x4a0>)
 8003ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ec8:	f7fe fc6c 	bl	80027a4 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ed0:	f7fe fc68 	bl	80027a4 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b64      	cmp	r3, #100	; 0x64
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e184      	b.n	80041ec <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee2:	4b37      	ldr	r3, [pc, #220]	; (8003fc0 <HAL_RCC_OscConfig+0x4a0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0f0      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d106      	bne.n	8003f04 <HAL_RCC_OscConfig+0x3e4>
 8003ef6:	4b2f      	ldr	r3, [pc, #188]	; (8003fb4 <HAL_RCC_OscConfig+0x494>)
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	4a2e      	ldr	r2, [pc, #184]	; (8003fb4 <HAL_RCC_OscConfig+0x494>)
 8003efc:	f043 0301 	orr.w	r3, r3, #1
 8003f00:	6213      	str	r3, [r2, #32]
 8003f02:	e02d      	b.n	8003f60 <HAL_RCC_OscConfig+0x440>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10c      	bne.n	8003f26 <HAL_RCC_OscConfig+0x406>
 8003f0c:	4b29      	ldr	r3, [pc, #164]	; (8003fb4 <HAL_RCC_OscConfig+0x494>)
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	4a28      	ldr	r2, [pc, #160]	; (8003fb4 <HAL_RCC_OscConfig+0x494>)
 8003f12:	f023 0301 	bic.w	r3, r3, #1
 8003f16:	6213      	str	r3, [r2, #32]
 8003f18:	4b26      	ldr	r3, [pc, #152]	; (8003fb4 <HAL_RCC_OscConfig+0x494>)
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	4a25      	ldr	r2, [pc, #148]	; (8003fb4 <HAL_RCC_OscConfig+0x494>)
 8003f1e:	f023 0304 	bic.w	r3, r3, #4
 8003f22:	6213      	str	r3, [r2, #32]
 8003f24:	e01c      	b.n	8003f60 <HAL_RCC_OscConfig+0x440>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	2b05      	cmp	r3, #5
 8003f2c:	d10c      	bne.n	8003f48 <HAL_RCC_OscConfig+0x428>
 8003f2e:	4b21      	ldr	r3, [pc, #132]	; (8003fb4 <HAL_RCC_OscConfig+0x494>)
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	4a20      	ldr	r2, [pc, #128]	; (8003fb4 <HAL_RCC_OscConfig+0x494>)
 8003f34:	f043 0304 	orr.w	r3, r3, #4
 8003f38:	6213      	str	r3, [r2, #32]
 8003f3a:	4b1e      	ldr	r3, [pc, #120]	; (8003fb4 <HAL_RCC_OscConfig+0x494>)
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	4a1d      	ldr	r2, [pc, #116]	; (8003fb4 <HAL_RCC_OscConfig+0x494>)
 8003f40:	f043 0301 	orr.w	r3, r3, #1
 8003f44:	6213      	str	r3, [r2, #32]
 8003f46:	e00b      	b.n	8003f60 <HAL_RCC_OscConfig+0x440>
 8003f48:	4b1a      	ldr	r3, [pc, #104]	; (8003fb4 <HAL_RCC_OscConfig+0x494>)
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	4a19      	ldr	r2, [pc, #100]	; (8003fb4 <HAL_RCC_OscConfig+0x494>)
 8003f4e:	f023 0301 	bic.w	r3, r3, #1
 8003f52:	6213      	str	r3, [r2, #32]
 8003f54:	4b17      	ldr	r3, [pc, #92]	; (8003fb4 <HAL_RCC_OscConfig+0x494>)
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	4a16      	ldr	r2, [pc, #88]	; (8003fb4 <HAL_RCC_OscConfig+0x494>)
 8003f5a:	f023 0304 	bic.w	r3, r3, #4
 8003f5e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d015      	beq.n	8003f94 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f68:	f7fe fc1c 	bl	80027a4 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f6e:	e00a      	b.n	8003f86 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f70:	f7fe fc18 	bl	80027a4 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e132      	b.n	80041ec <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f86:	4b0b      	ldr	r3, [pc, #44]	; (8003fb4 <HAL_RCC_OscConfig+0x494>)
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d0ee      	beq.n	8003f70 <HAL_RCC_OscConfig+0x450>
 8003f92:	e01d      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f94:	f7fe fc06 	bl	80027a4 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f9a:	e013      	b.n	8003fc4 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f9c:	f7fe fc02 	bl	80027a4 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d90a      	bls.n	8003fc4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e11c      	b.n	80041ec <HAL_RCC_OscConfig+0x6cc>
 8003fb2:	bf00      	nop
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	42420480 	.word	0x42420480
 8003fbc:	080112f8 	.word	0x080112f8
 8003fc0:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc4:	4b8b      	ldr	r3, [pc, #556]	; (80041f4 <HAL_RCC_OscConfig+0x6d4>)
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1e5      	bne.n	8003f9c <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003fd0:	7dfb      	ldrb	r3, [r7, #23]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d105      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fd6:	4b87      	ldr	r3, [pc, #540]	; (80041f4 <HAL_RCC_OscConfig+0x6d4>)
 8003fd8:	69db      	ldr	r3, [r3, #28]
 8003fda:	4a86      	ldr	r2, [pc, #536]	; (80041f4 <HAL_RCC_OscConfig+0x6d4>)
 8003fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fe0:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00c      	beq.n	8004004 <HAL_RCC_OscConfig+0x4e4>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d008      	beq.n	8004004 <HAL_RCC_OscConfig+0x4e4>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d004      	beq.n	8004004 <HAL_RCC_OscConfig+0x4e4>
 8003ffa:	f240 21af 	movw	r1, #687	; 0x2af
 8003ffe:	487e      	ldr	r0, [pc, #504]	; (80041f8 <HAL_RCC_OscConfig+0x6d8>)
 8004000:	f7fd feee 	bl	8001de0 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	69db      	ldr	r3, [r3, #28]
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 80ee 	beq.w	80041ea <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800400e:	4b79      	ldr	r3, [pc, #484]	; (80041f4 <HAL_RCC_OscConfig+0x6d4>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f003 030c 	and.w	r3, r3, #12
 8004016:	2b08      	cmp	r3, #8
 8004018:	f000 80ce 	beq.w	80041b8 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	2b02      	cmp	r3, #2
 8004022:	f040 80b2 	bne.w	800418a <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d009      	beq.n	8004042 <HAL_RCC_OscConfig+0x522>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004036:	d004      	beq.n	8004042 <HAL_RCC_OscConfig+0x522>
 8004038:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 800403c:	486e      	ldr	r0, [pc, #440]	; (80041f8 <HAL_RCC_OscConfig+0x6d8>)
 800403e:	f7fd fecf 	bl	8001de0 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	2b00      	cmp	r3, #0
 8004048:	d04a      	beq.n	80040e0 <HAL_RCC_OscConfig+0x5c0>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004052:	d045      	beq.n	80040e0 <HAL_RCC_OscConfig+0x5c0>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800405c:	d040      	beq.n	80040e0 <HAL_RCC_OscConfig+0x5c0>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004066:	d03b      	beq.n	80040e0 <HAL_RCC_OscConfig+0x5c0>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004070:	d036      	beq.n	80040e0 <HAL_RCC_OscConfig+0x5c0>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800407a:	d031      	beq.n	80040e0 <HAL_RCC_OscConfig+0x5c0>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004084:	d02c      	beq.n	80040e0 <HAL_RCC_OscConfig+0x5c0>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800408e:	d027      	beq.n	80040e0 <HAL_RCC_OscConfig+0x5c0>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004098:	d022      	beq.n	80040e0 <HAL_RCC_OscConfig+0x5c0>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80040a2:	d01d      	beq.n	80040e0 <HAL_RCC_OscConfig+0x5c0>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80040ac:	d018      	beq.n	80040e0 <HAL_RCC_OscConfig+0x5c0>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80040b6:	d013      	beq.n	80040e0 <HAL_RCC_OscConfig+0x5c0>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80040c0:	d00e      	beq.n	80040e0 <HAL_RCC_OscConfig+0x5c0>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 80040ca:	d009      	beq.n	80040e0 <HAL_RCC_OscConfig+0x5c0>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80040d4:	d004      	beq.n	80040e0 <HAL_RCC_OscConfig+0x5c0>
 80040d6:	f240 21b9 	movw	r1, #697	; 0x2b9
 80040da:	4847      	ldr	r0, [pc, #284]	; (80041f8 <HAL_RCC_OscConfig+0x6d8>)
 80040dc:	f7fd fe80 	bl	8001de0 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e0:	4b46      	ldr	r3, [pc, #280]	; (80041fc <HAL_RCC_OscConfig+0x6dc>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e6:	f7fe fb5d 	bl	80027a4 <HAL_GetTick>
 80040ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040ec:	e008      	b.n	8004100 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ee:	f7fe fb59 	bl	80027a4 <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d901      	bls.n	8004100 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e075      	b.n	80041ec <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004100:	4b3c      	ldr	r3, [pc, #240]	; (80041f4 <HAL_RCC_OscConfig+0x6d4>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1f0      	bne.n	80040ee <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004114:	d116      	bne.n	8004144 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d009      	beq.n	8004132 <HAL_RCC_OscConfig+0x612>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004126:	d004      	beq.n	8004132 <HAL_RCC_OscConfig+0x612>
 8004128:	f240 21cf 	movw	r1, #719	; 0x2cf
 800412c:	4832      	ldr	r0, [pc, #200]	; (80041f8 <HAL_RCC_OscConfig+0x6d8>)
 800412e:	f7fd fe57 	bl	8001de0 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004132:	4b30      	ldr	r3, [pc, #192]	; (80041f4 <HAL_RCC_OscConfig+0x6d4>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	492d      	ldr	r1, [pc, #180]	; (80041f4 <HAL_RCC_OscConfig+0x6d4>)
 8004140:	4313      	orrs	r3, r2
 8004142:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004144:	4b2b      	ldr	r3, [pc, #172]	; (80041f4 <HAL_RCC_OscConfig+0x6d4>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a19      	ldr	r1, [r3, #32]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	430b      	orrs	r3, r1
 8004156:	4927      	ldr	r1, [pc, #156]	; (80041f4 <HAL_RCC_OscConfig+0x6d4>)
 8004158:	4313      	orrs	r3, r2
 800415a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800415c:	4b27      	ldr	r3, [pc, #156]	; (80041fc <HAL_RCC_OscConfig+0x6dc>)
 800415e:	2201      	movs	r2, #1
 8004160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004162:	f7fe fb1f 	bl	80027a4 <HAL_GetTick>
 8004166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004168:	e008      	b.n	800417c <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800416a:	f7fe fb1b 	bl	80027a4 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d901      	bls.n	800417c <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e037      	b.n	80041ec <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800417c:	4b1d      	ldr	r3, [pc, #116]	; (80041f4 <HAL_RCC_OscConfig+0x6d4>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d0f0      	beq.n	800416a <HAL_RCC_OscConfig+0x64a>
 8004188:	e02f      	b.n	80041ea <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800418a:	4b1c      	ldr	r3, [pc, #112]	; (80041fc <HAL_RCC_OscConfig+0x6dc>)
 800418c:	2200      	movs	r2, #0
 800418e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004190:	f7fe fb08 	bl	80027a4 <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004198:	f7fe fb04 	bl	80027a4 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e020      	b.n	80041ec <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041aa:	4b12      	ldr	r3, [pc, #72]	; (80041f4 <HAL_RCC_OscConfig+0x6d4>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1f0      	bne.n	8004198 <HAL_RCC_OscConfig+0x678>
 80041b6:	e018      	b.n	80041ea <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	69db      	ldr	r3, [r3, #28]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d101      	bne.n	80041c4 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e013      	b.n	80041ec <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041c4:	4b0b      	ldr	r3, [pc, #44]	; (80041f4 <HAL_RCC_OscConfig+0x6d4>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d106      	bne.n	80041e6 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d001      	beq.n	80041ea <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3718      	adds	r7, #24
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40021000 	.word	0x40021000
 80041f8:	080112f8 	.word	0x080112f8
 80041fc:	42420060 	.word	0x42420060

08004200 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e176      	b.n	8004502 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b00      	cmp	r3, #0
 800421e:	d116      	bne.n	800424e <HAL_RCC_ClockConfig+0x4e>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d110      	bne.n	800424e <HAL_RCC_ClockConfig+0x4e>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10a      	bne.n	800424e <HAL_RCC_ClockConfig+0x4e>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0308 	and.w	r3, r3, #8
 8004240:	2b00      	cmp	r3, #0
 8004242:	d104      	bne.n	800424e <HAL_RCC_ClockConfig+0x4e>
 8004244:	f44f 714e 	mov.w	r1, #824	; 0x338
 8004248:	4874      	ldr	r0, [pc, #464]	; (800441c <HAL_RCC_ClockConfig+0x21c>)
 800424a:	f7fd fdc9 	bl	8001de0 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00a      	beq.n	800426a <HAL_RCC_ClockConfig+0x6a>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d007      	beq.n	800426a <HAL_RCC_ClockConfig+0x6a>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2b02      	cmp	r3, #2
 800425e:	d004      	beq.n	800426a <HAL_RCC_ClockConfig+0x6a>
 8004260:	f240 3139 	movw	r1, #825	; 0x339
 8004264:	486d      	ldr	r0, [pc, #436]	; (800441c <HAL_RCC_ClockConfig+0x21c>)
 8004266:	f7fd fdbb 	bl	8001de0 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800426a:	4b6d      	ldr	r3, [pc, #436]	; (8004420 <HAL_RCC_ClockConfig+0x220>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0307 	and.w	r3, r3, #7
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	429a      	cmp	r2, r3
 8004276:	d910      	bls.n	800429a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004278:	4b69      	ldr	r3, [pc, #420]	; (8004420 <HAL_RCC_ClockConfig+0x220>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f023 0207 	bic.w	r2, r3, #7
 8004280:	4967      	ldr	r1, [pc, #412]	; (8004420 <HAL_RCC_ClockConfig+0x220>)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	4313      	orrs	r3, r2
 8004286:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004288:	4b65      	ldr	r3, [pc, #404]	; (8004420 <HAL_RCC_ClockConfig+0x220>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	429a      	cmp	r2, r3
 8004294:	d001      	beq.n	800429a <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e133      	b.n	8004502 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d049      	beq.n	800433a <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0304 	and.w	r3, r3, #4
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d005      	beq.n	80042be <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042b2:	4b5c      	ldr	r3, [pc, #368]	; (8004424 <HAL_RCC_ClockConfig+0x224>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	4a5b      	ldr	r2, [pc, #364]	; (8004424 <HAL_RCC_ClockConfig+0x224>)
 80042b8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80042bc:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0308 	and.w	r3, r3, #8
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d005      	beq.n	80042d6 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042ca:	4b56      	ldr	r3, [pc, #344]	; (8004424 <HAL_RCC_ClockConfig+0x224>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	4a55      	ldr	r2, [pc, #340]	; (8004424 <HAL_RCC_ClockConfig+0x224>)
 80042d0:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80042d4:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d024      	beq.n	8004328 <HAL_RCC_ClockConfig+0x128>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	2b80      	cmp	r3, #128	; 0x80
 80042e4:	d020      	beq.n	8004328 <HAL_RCC_ClockConfig+0x128>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	2b90      	cmp	r3, #144	; 0x90
 80042ec:	d01c      	beq.n	8004328 <HAL_RCC_ClockConfig+0x128>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	2ba0      	cmp	r3, #160	; 0xa0
 80042f4:	d018      	beq.n	8004328 <HAL_RCC_ClockConfig+0x128>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	2bb0      	cmp	r3, #176	; 0xb0
 80042fc:	d014      	beq.n	8004328 <HAL_RCC_ClockConfig+0x128>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	2bc0      	cmp	r3, #192	; 0xc0
 8004304:	d010      	beq.n	8004328 <HAL_RCC_ClockConfig+0x128>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	2bd0      	cmp	r3, #208	; 0xd0
 800430c:	d00c      	beq.n	8004328 <HAL_RCC_ClockConfig+0x128>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	2be0      	cmp	r3, #224	; 0xe0
 8004314:	d008      	beq.n	8004328 <HAL_RCC_ClockConfig+0x128>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	2bf0      	cmp	r3, #240	; 0xf0
 800431c:	d004      	beq.n	8004328 <HAL_RCC_ClockConfig+0x128>
 800431e:	f240 315f 	movw	r1, #863	; 0x35f
 8004322:	483e      	ldr	r0, [pc, #248]	; (800441c <HAL_RCC_ClockConfig+0x21c>)
 8004324:	f7fd fd5c 	bl	8001de0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004328:	4b3e      	ldr	r3, [pc, #248]	; (8004424 <HAL_RCC_ClockConfig+0x224>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	493b      	ldr	r1, [pc, #236]	; (8004424 <HAL_RCC_ClockConfig+0x224>)
 8004336:	4313      	orrs	r3, r2
 8004338:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d051      	beq.n	80043ea <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00c      	beq.n	8004368 <HAL_RCC_ClockConfig+0x168>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d008      	beq.n	8004368 <HAL_RCC_ClockConfig+0x168>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2b02      	cmp	r3, #2
 800435c:	d004      	beq.n	8004368 <HAL_RCC_ClockConfig+0x168>
 800435e:	f240 3166 	movw	r1, #870	; 0x366
 8004362:	482e      	ldr	r0, [pc, #184]	; (800441c <HAL_RCC_ClockConfig+0x21c>)
 8004364:	f7fd fd3c 	bl	8001de0 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d107      	bne.n	8004380 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004370:	4b2c      	ldr	r3, [pc, #176]	; (8004424 <HAL_RCC_ClockConfig+0x224>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d115      	bne.n	80043a8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e0c0      	b.n	8004502 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2b02      	cmp	r3, #2
 8004386:	d107      	bne.n	8004398 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004388:	4b26      	ldr	r3, [pc, #152]	; (8004424 <HAL_RCC_ClockConfig+0x224>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d109      	bne.n	80043a8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e0b4      	b.n	8004502 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004398:	4b22      	ldr	r3, [pc, #136]	; (8004424 <HAL_RCC_ClockConfig+0x224>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e0ac      	b.n	8004502 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043a8:	4b1e      	ldr	r3, [pc, #120]	; (8004424 <HAL_RCC_ClockConfig+0x224>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f023 0203 	bic.w	r2, r3, #3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	491b      	ldr	r1, [pc, #108]	; (8004424 <HAL_RCC_ClockConfig+0x224>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043ba:	f7fe f9f3 	bl	80027a4 <HAL_GetTick>
 80043be:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043c0:	e00a      	b.n	80043d8 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043c2:	f7fe f9ef 	bl	80027a4 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e094      	b.n	8004502 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043d8:	4b12      	ldr	r3, [pc, #72]	; (8004424 <HAL_RCC_ClockConfig+0x224>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f003 020c 	and.w	r2, r3, #12
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d1eb      	bne.n	80043c2 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043ea:	4b0d      	ldr	r3, [pc, #52]	; (8004420 <HAL_RCC_ClockConfig+0x220>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d217      	bcs.n	8004428 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043f8:	4b09      	ldr	r3, [pc, #36]	; (8004420 <HAL_RCC_ClockConfig+0x220>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f023 0207 	bic.w	r2, r3, #7
 8004400:	4907      	ldr	r1, [pc, #28]	; (8004420 <HAL_RCC_ClockConfig+0x220>)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	4313      	orrs	r3, r2
 8004406:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004408:	4b05      	ldr	r3, [pc, #20]	; (8004420 <HAL_RCC_ClockConfig+0x220>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0307 	and.w	r3, r3, #7
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	429a      	cmp	r2, r3
 8004414:	d008      	beq.n	8004428 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e073      	b.n	8004502 <HAL_RCC_ClockConfig+0x302>
 800441a:	bf00      	nop
 800441c:	080112f8 	.word	0x080112f8
 8004420:	40022000 	.word	0x40022000
 8004424:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b00      	cmp	r3, #0
 8004432:	d025      	beq.n	8004480 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d018      	beq.n	800446e <HAL_RCC_ClockConfig+0x26e>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004444:	d013      	beq.n	800446e <HAL_RCC_ClockConfig+0x26e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800444e:	d00e      	beq.n	800446e <HAL_RCC_ClockConfig+0x26e>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004458:	d009      	beq.n	800446e <HAL_RCC_ClockConfig+0x26e>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004462:	d004      	beq.n	800446e <HAL_RCC_ClockConfig+0x26e>
 8004464:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8004468:	4828      	ldr	r0, [pc, #160]	; (800450c <HAL_RCC_ClockConfig+0x30c>)
 800446a:	f7fd fcb9 	bl	8001de0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800446e:	4b28      	ldr	r3, [pc, #160]	; (8004510 <HAL_RCC_ClockConfig+0x310>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	4925      	ldr	r1, [pc, #148]	; (8004510 <HAL_RCC_ClockConfig+0x310>)
 800447c:	4313      	orrs	r3, r2
 800447e:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0308 	and.w	r3, r3, #8
 8004488:	2b00      	cmp	r3, #0
 800448a:	d026      	beq.n	80044da <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d018      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x2c6>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800449c:	d013      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x2c6>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80044a6:	d00e      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x2c6>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80044b0:	d009      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x2c6>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044ba:	d004      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x2c6>
 80044bc:	f240 31ab 	movw	r1, #939	; 0x3ab
 80044c0:	4812      	ldr	r0, [pc, #72]	; (800450c <HAL_RCC_ClockConfig+0x30c>)
 80044c2:	f7fd fc8d 	bl	8001de0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80044c6:	4b12      	ldr	r3, [pc, #72]	; (8004510 <HAL_RCC_ClockConfig+0x310>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	490e      	ldr	r1, [pc, #56]	; (8004510 <HAL_RCC_ClockConfig+0x310>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044da:	f000 f821 	bl	8004520 <HAL_RCC_GetSysClockFreq>
 80044de:	4602      	mov	r2, r0
 80044e0:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <HAL_RCC_ClockConfig+0x310>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	091b      	lsrs	r3, r3, #4
 80044e6:	f003 030f 	and.w	r3, r3, #15
 80044ea:	490a      	ldr	r1, [pc, #40]	; (8004514 <HAL_RCC_ClockConfig+0x314>)
 80044ec:	5ccb      	ldrb	r3, [r1, r3]
 80044ee:	fa22 f303 	lsr.w	r3, r2, r3
 80044f2:	4a09      	ldr	r2, [pc, #36]	; (8004518 <HAL_RCC_ClockConfig+0x318>)
 80044f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80044f6:	4b09      	ldr	r3, [pc, #36]	; (800451c <HAL_RCC_ClockConfig+0x31c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7fe f910 	bl	8002720 <HAL_InitTick>

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	080112f8 	.word	0x080112f8
 8004510:	40021000 	.word	0x40021000
 8004514:	0801244c 	.word	0x0801244c
 8004518:	20000000 	.word	0x20000000
 800451c:	20000004 	.word	0x20000004

08004520 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004520:	b490      	push	{r4, r7}
 8004522:	b08a      	sub	sp, #40	; 0x28
 8004524:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004526:	4b2a      	ldr	r3, [pc, #168]	; (80045d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004528:	1d3c      	adds	r4, r7, #4
 800452a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800452c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004530:	f240 2301 	movw	r3, #513	; 0x201
 8004534:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004536:	2300      	movs	r3, #0
 8004538:	61fb      	str	r3, [r7, #28]
 800453a:	2300      	movs	r3, #0
 800453c:	61bb      	str	r3, [r7, #24]
 800453e:	2300      	movs	r3, #0
 8004540:	627b      	str	r3, [r7, #36]	; 0x24
 8004542:	2300      	movs	r3, #0
 8004544:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004546:	2300      	movs	r3, #0
 8004548:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800454a:	4b22      	ldr	r3, [pc, #136]	; (80045d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	f003 030c 	and.w	r3, r3, #12
 8004556:	2b04      	cmp	r3, #4
 8004558:	d002      	beq.n	8004560 <HAL_RCC_GetSysClockFreq+0x40>
 800455a:	2b08      	cmp	r3, #8
 800455c:	d003      	beq.n	8004566 <HAL_RCC_GetSysClockFreq+0x46>
 800455e:	e02d      	b.n	80045bc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004560:	4b1d      	ldr	r3, [pc, #116]	; (80045d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004562:	623b      	str	r3, [r7, #32]
      break;
 8004564:	e02d      	b.n	80045c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	0c9b      	lsrs	r3, r3, #18
 800456a:	f003 030f 	and.w	r3, r3, #15
 800456e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004572:	4413      	add	r3, r2
 8004574:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004578:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d013      	beq.n	80045ac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004584:	4b13      	ldr	r3, [pc, #76]	; (80045d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	0c5b      	lsrs	r3, r3, #17
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004592:	4413      	add	r3, r2
 8004594:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004598:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	4a0e      	ldr	r2, [pc, #56]	; (80045d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800459e:	fb02 f203 	mul.w	r2, r2, r3
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a8:	627b      	str	r3, [r7, #36]	; 0x24
 80045aa:	e004      	b.n	80045b6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	4a0b      	ldr	r2, [pc, #44]	; (80045dc <HAL_RCC_GetSysClockFreq+0xbc>)
 80045b0:	fb02 f303 	mul.w	r3, r2, r3
 80045b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	623b      	str	r3, [r7, #32]
      break;
 80045ba:	e002      	b.n	80045c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045bc:	4b06      	ldr	r3, [pc, #24]	; (80045d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045be:	623b      	str	r3, [r7, #32]
      break;
 80045c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045c2:	6a3b      	ldr	r3, [r7, #32]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3728      	adds	r7, #40	; 0x28
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bc90      	pop	{r4, r7}
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	08011330 	.word	0x08011330
 80045d4:	40021000 	.word	0x40021000
 80045d8:	007a1200 	.word	0x007a1200
 80045dc:	003d0900 	.word	0x003d0900

080045e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045e4:	4b02      	ldr	r3, [pc, #8]	; (80045f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80045e6:	681b      	ldr	r3, [r3, #0]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bc80      	pop	{r7}
 80045ee:	4770      	bx	lr
 80045f0:	20000000 	.word	0x20000000

080045f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045f8:	f7ff fff2 	bl	80045e0 <HAL_RCC_GetHCLKFreq>
 80045fc:	4602      	mov	r2, r0
 80045fe:	4b05      	ldr	r3, [pc, #20]	; (8004614 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	0a1b      	lsrs	r3, r3, #8
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	4903      	ldr	r1, [pc, #12]	; (8004618 <HAL_RCC_GetPCLK1Freq+0x24>)
 800460a:	5ccb      	ldrb	r3, [r1, r3]
 800460c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004610:	4618      	mov	r0, r3
 8004612:	bd80      	pop	{r7, pc}
 8004614:	40021000 	.word	0x40021000
 8004618:	0801245c 	.word	0x0801245c

0800461c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004620:	f7ff ffde 	bl	80045e0 <HAL_RCC_GetHCLKFreq>
 8004624:	4602      	mov	r2, r0
 8004626:	4b05      	ldr	r3, [pc, #20]	; (800463c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	0adb      	lsrs	r3, r3, #11
 800462c:	f003 0307 	and.w	r3, r3, #7
 8004630:	4903      	ldr	r1, [pc, #12]	; (8004640 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004632:	5ccb      	ldrb	r3, [r1, r3]
 8004634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004638:	4618      	mov	r0, r3
 800463a:	bd80      	pop	{r7, pc}
 800463c:	40021000 	.word	0x40021000
 8004640:	0801245c 	.word	0x0801245c

08004644 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800464c:	4b0a      	ldr	r3, [pc, #40]	; (8004678 <RCC_Delay+0x34>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a0a      	ldr	r2, [pc, #40]	; (800467c <RCC_Delay+0x38>)
 8004652:	fba2 2303 	umull	r2, r3, r2, r3
 8004656:	0a5b      	lsrs	r3, r3, #9
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	fb02 f303 	mul.w	r3, r2, r3
 800465e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004660:	bf00      	nop
  }
  while (Delay --);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	1e5a      	subs	r2, r3, #1
 8004666:	60fa      	str	r2, [r7, #12]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1f9      	bne.n	8004660 <RCC_Delay+0x1c>
}
 800466c:	bf00      	nop
 800466e:	bf00      	nop
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	bc80      	pop	{r7}
 8004676:	4770      	bx	lr
 8004678:	20000000 	.word	0x20000000
 800467c:	10624dd3 	.word	0x10624dd3

08004680 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	613b      	str	r3, [r7, #16]
 800468c:	2300      	movs	r3, #0
 800468e:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	2b00      	cmp	r3, #0
 800469a:	d11b      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d115      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0304 	and.w	r3, r3, #4
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10f      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0308 	and.w	r3, r3, #8
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d109      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0310 	and.w	r3, r3, #16
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d103      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80046cc:	216c      	movs	r1, #108	; 0x6c
 80046ce:	4873      	ldr	r0, [pc, #460]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80046d0:	f7fd fb86 	bl	8001de0 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 8095 	beq.w	800480c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    FlagStatus pwrclkchanged = RESET;
 80046e2:	2300      	movs	r3, #0
 80046e4:	75fb      	strb	r3, [r7, #23]

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d012      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x94>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046f6:	d00d      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x94>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004700:	d008      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800470a:	d003      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x94>
 800470c:	2174      	movs	r1, #116	; 0x74
 800470e:	4863      	ldr	r0, [pc, #396]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004710:	f7fd fb66 	bl	8001de0 <assert_failed>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004714:	4b62      	ldr	r3, [pc, #392]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004716:	69db      	ldr	r3, [r3, #28]
 8004718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10d      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004720:	4b5f      	ldr	r3, [pc, #380]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004722:	69db      	ldr	r3, [r3, #28]
 8004724:	4a5e      	ldr	r2, [pc, #376]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800472a:	61d3      	str	r3, [r2, #28]
 800472c:	4b5c      	ldr	r3, [pc, #368]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800472e:	69db      	ldr	r3, [r3, #28]
 8004730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004734:	60bb      	str	r3, [r7, #8]
 8004736:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004738:	2301      	movs	r3, #1
 800473a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800473c:	4b59      	ldr	r3, [pc, #356]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004744:	2b00      	cmp	r3, #0
 8004746:	d118      	bne.n	800477a <HAL_RCCEx_PeriphCLKConfig+0xfa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004748:	4b56      	ldr	r3, [pc, #344]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a55      	ldr	r2, [pc, #340]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800474e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004752:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004754:	f7fe f826 	bl	80027a4 <HAL_GetTick>
 8004758:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800475a:	e008      	b.n	800476e <HAL_RCCEx_PeriphCLKConfig+0xee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800475c:	f7fe f822 	bl	80027a4 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b64      	cmp	r3, #100	; 0x64
 8004768:	d901      	bls.n	800476e <HAL_RCCEx_PeriphCLKConfig+0xee>
        {
          return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e092      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x214>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800476e:	4b4d      	ldr	r3, [pc, #308]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0f0      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xdc>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800477a:	4b49      	ldr	r3, [pc, #292]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004782:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d02e      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	429a      	cmp	r2, r3
 8004796:	d027      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004798:	4b41      	ldr	r3, [pc, #260]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047a0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047a2:	4b41      	ldr	r3, [pc, #260]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80047a4:	2201      	movs	r2, #1
 80047a6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047a8:	4b3f      	ldr	r3, [pc, #252]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80047ae:	4a3c      	ldr	r2, [pc, #240]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d014      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047be:	f7fd fff1 	bl	80027a4 <HAL_GetTick>
 80047c2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c4:	e00a      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x15c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c6:	f7fd ffed 	bl	80027a4 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d901      	bls.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x15c>
          {
            return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e05b      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x214>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047dc:	4b30      	ldr	r3, [pc, #192]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0ee      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x146>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047e8:	4b2d      	ldr	r3, [pc, #180]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	492a      	ldr	r1, [pc, #168]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80047fa:	7dfb      	ldrb	r3, [r7, #23]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d105      	bne.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004800:	4b27      	ldr	r3, [pc, #156]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004802:	69db      	ldr	r3, [r3, #28]
 8004804:	4a26      	ldr	r2, [pc, #152]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004806:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800480a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d01f      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d012      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004828:	d00d      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004832:	d008      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800483c:	d003      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 800483e:	21b9      	movs	r1, #185	; 0xb9
 8004840:	4816      	ldr	r0, [pc, #88]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004842:	f7fd facd 	bl	8001de0 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004846:	4b16      	ldr	r3, [pc, #88]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	4913      	ldr	r1, [pc, #76]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004854:	4313      	orrs	r3, r2
 8004856:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0310 	and.w	r3, r3, #16
 8004860:	2b00      	cmp	r3, #0
 8004862:	d016      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800486c:	d008      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d004      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004876:	f240 1115 	movw	r1, #277	; 0x115
 800487a:	4808      	ldr	r0, [pc, #32]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800487c:	f7fd fab0 	bl	8001de0 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004880:	4b07      	ldr	r3, [pc, #28]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	4904      	ldr	r1, [pc, #16]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800488e:	4313      	orrs	r3, r2
 8004890:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3718      	adds	r7, #24
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	08011340 	.word	0x08011340
 80048a0:	40021000 	.word	0x40021000
 80048a4:	40007000 	.word	0x40007000
 80048a8:	42420440 	.word	0x42420440

080048ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80048ac:	b590      	push	{r4, r7, lr}
 80048ae:	b08d      	sub	sp, #52	; 0x34
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80048b4:	4b7a      	ldr	r3, [pc, #488]	; (8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>)
 80048b6:	f107 040c 	add.w	r4, r7, #12
 80048ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80048c0:	f240 2301 	movw	r3, #513	; 0x201
 80048c4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24
 80048ca:	2300      	movs	r3, #0
 80048cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048ce:	2300      	movs	r3, #0
 80048d0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80048d2:	2300      	movs	r3, #0
 80048d4:	61fb      	str	r3, [r7, #28]
 80048d6:	2300      	movs	r3, #0
 80048d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d118      	bne.n	8004916 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d113      	bne.n	8004916 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10e      	bne.n	8004916 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f003 0308 	and.w	r3, r3, #8
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d109      	bne.n	8004916 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f003 0310 	and.w	r3, r3, #16
 8004908:	2b00      	cmp	r3, #0
 800490a:	d104      	bne.n	8004916 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 800490c:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8004910:	4864      	ldr	r0, [pc, #400]	; (8004aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>)
 8004912:	f7fd fa65 	bl	8001de0 <assert_failed>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	3b01      	subs	r3, #1
 800491a:	2b0f      	cmp	r3, #15
 800491c:	f200 80b6 	bhi.w	8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8004920:	a201      	add	r2, pc, #4	; (adr r2, 8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>)
 8004922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004926:	bf00      	nop
 8004928:	08004a0b 	.word	0x08004a0b
 800492c:	08004a71 	.word	0x08004a71
 8004930:	08004a8d 	.word	0x08004a8d
 8004934:	080049fb 	.word	0x080049fb
 8004938:	08004a8d 	.word	0x08004a8d
 800493c:	08004a8d 	.word	0x08004a8d
 8004940:	08004a8d 	.word	0x08004a8d
 8004944:	08004a03 	.word	0x08004a03
 8004948:	08004a8d 	.word	0x08004a8d
 800494c:	08004a8d 	.word	0x08004a8d
 8004950:	08004a8d 	.word	0x08004a8d
 8004954:	08004a8d 	.word	0x08004a8d
 8004958:	08004a8d 	.word	0x08004a8d
 800495c:	08004a8d 	.word	0x08004a8d
 8004960:	08004a8d 	.word	0x08004a8d
 8004964:	08004969 	.word	0x08004969
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8004968:	4b4f      	ldr	r3, [pc, #316]	; (8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800496e:	4b4e      	ldr	r3, [pc, #312]	; (8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004976:	2b00      	cmp	r3, #0
 8004978:	f000 808a 	beq.w	8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	0c9b      	lsrs	r3, r3, #18
 8004980:	f003 030f 	and.w	r3, r3, #15
 8004984:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004988:	4413      	add	r3, r2
 800498a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800498e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d018      	beq.n	80049cc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800499a:	4b43      	ldr	r3, [pc, #268]	; (8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	0c5b      	lsrs	r3, r3, #17
 80049a0:	f003 0301 	and.w	r3, r3, #1
 80049a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80049a8:	4413      	add	r3, r2
 80049aa:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80049ae:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00d      	beq.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80049ba:	4a3c      	ldr	r2, [pc, #240]	; (8004aac <HAL_RCCEx_GetPeriphCLKFreq+0x200>)
 80049bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049be:	fbb2 f2f3 	udiv	r2, r2, r3
 80049c2:	6a3b      	ldr	r3, [r7, #32]
 80049c4:	fb02 f303 	mul.w	r3, r2, r3
 80049c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049ca:	e004      	b.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049cc:	6a3b      	ldr	r3, [r7, #32]
 80049ce:	4a38      	ldr	r2, [pc, #224]	; (8004ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 80049d0:	fb02 f303 	mul.w	r3, r2, r3
 80049d4:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80049d6:	4b34      	ldr	r3, [pc, #208]	; (8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049e2:	d102      	bne.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 80049e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e6:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 80049e8:	e052      	b.n	8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          frequency = (pllclk * 2) / 3;
 80049ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	4a31      	ldr	r2, [pc, #196]	; (8004ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 80049f0:	fba2 2303 	umull	r2, r3, r2, r3
 80049f4:	085b      	lsrs	r3, r3, #1
 80049f6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80049f8:	e04a      	b.n	8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80049fa:	f7ff fd91 	bl	8004520 <HAL_RCC_GetSysClockFreq>
 80049fe:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004a00:	e049      	b.n	8004a96 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8004a02:	f7ff fd8d 	bl	8004520 <HAL_RCC_GetSysClockFreq>
 8004a06:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004a08:	e045      	b.n	8004a96 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8004a0a:	4b27      	ldr	r3, [pc, #156]	; (8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a1a:	d108      	bne.n	8004a2e <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        frequency = LSE_VALUE;
 8004a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a2c:	e01f      	b.n	8004a6e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a38:	d109      	bne.n	8004a4e <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8004a3a:	4b1b      	ldr	r3, [pc, #108]	; (8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
      {
        frequency = LSI_VALUE;
 8004a46:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004a4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a4c:	e00f      	b.n	8004a6e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a58:	d11c      	bne.n	8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 8004a5a:	4b13      	ldr	r3, [pc, #76]	; (8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d016      	beq.n	8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
      {
        frequency = HSE_VALUE / 128U;
 8004a66:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004a6a:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8004a6c:	e012      	b.n	8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 8004a6e:	e011      	b.n	8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004a70:	f7ff fdd4 	bl	800461c <HAL_RCC_GetPCLK2Freq>
 8004a74:	4602      	mov	r2, r0
 8004a76:	4b0c      	ldr	r3, [pc, #48]	; (8004aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	0b9b      	lsrs	r3, r3, #14
 8004a7c:	f003 0303 	and.w	r3, r3, #3
 8004a80:	3301      	adds	r3, #1
 8004a82:	005b      	lsls	r3, r3, #1
 8004a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a88:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004a8a:	e004      	b.n	8004a96 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
    default:
    {
      break;
 8004a8c:	bf00      	nop
 8004a8e:	e002      	b.n	8004a96 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
      break;
 8004a90:	bf00      	nop
 8004a92:	e000      	b.n	8004a96 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
      break;
 8004a94:	bf00      	nop
    }
  }
  return (frequency);
 8004a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3734      	adds	r7, #52	; 0x34
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd90      	pop	{r4, r7, pc}
 8004aa0:	0801137c 	.word	0x0801137c
 8004aa4:	08011340 	.word	0x08011340
 8004aa8:	40021000 	.word	0x40021000
 8004aac:	007a1200 	.word	0x007a1200
 8004ab0:	003d0900 	.word	0x003d0900
 8004ab4:	aaaaaaab 	.word	0xaaaaaaab

08004ab8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e0b4      	b.n	8004c38 <HAL_RTC_Init+0x180>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a5b      	ldr	r2, [pc, #364]	; (8004c40 <HAL_RTC_Init+0x188>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d004      	beq.n	8004ae2 <HAL_RTC_Init+0x2a>
 8004ad8:	f240 111d 	movw	r1, #285	; 0x11d
 8004adc:	4859      	ldr	r0, [pc, #356]	; (8004c44 <HAL_RTC_Init+0x18c>)
 8004ade:	f7fd f97f 	bl	8001de0 <assert_failed>
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d012      	beq.n	8004b10 <HAL_RTC_Init+0x58>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	2b80      	cmp	r3, #128	; 0x80
 8004af0:	d00e      	beq.n	8004b10 <HAL_RTC_Init+0x58>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004afa:	d009      	beq.n	8004b10 <HAL_RTC_Init+0x58>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b04:	d004      	beq.n	8004b10 <HAL_RTC_Init+0x58>
 8004b06:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004b0a:	484e      	ldr	r0, [pc, #312]	; (8004c44 <HAL_RTC_Init+0x18c>)
 8004b0c:	f7fd f968 	bl	8001de0 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b18:	d309      	bcc.n	8004b2e <HAL_RTC_Init+0x76>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b22:	d004      	beq.n	8004b2e <HAL_RTC_Init+0x76>
 8004b24:	f240 111f 	movw	r1, #287	; 0x11f
 8004b28:	4846      	ldr	r0, [pc, #280]	; (8004c44 <HAL_RTC_Init+0x18c>)
 8004b2a:	f7fd f959 	bl	8001de0 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	7c5b      	ldrb	r3, [r3, #17]
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d105      	bne.n	8004b44 <HAL_RTC_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7fd f9ce 	bl	8001ee0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 fbca 	bl	80052e4 <HAL_RTC_WaitForSynchro>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d004      	beq.n	8004b60 <HAL_RTC_Init+0xa8>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2204      	movs	r2, #4
 8004b5a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e06b      	b.n	8004c38 <HAL_RTC_Init+0x180>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 fc83 	bl	800546c <RTC_EnterInitMode>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d004      	beq.n	8004b76 <HAL_RTC_Init+0xbe>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2204      	movs	r2, #4
 8004b70:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e060      	b.n	8004c38 <HAL_RTC_Init+0x180>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0207 	bic.w	r2, r2, #7
 8004b84:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d005      	beq.n	8004b9a <HAL_RTC_Init+0xe2>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004b8e:	4b2e      	ldr	r3, [pc, #184]	; (8004c48 <HAL_RTC_Init+0x190>)
 8004b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b92:	4a2d      	ldr	r2, [pc, #180]	; (8004c48 <HAL_RTC_Init+0x190>)
 8004b94:	f023 0301 	bic.w	r3, r3, #1
 8004b98:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004b9a:	4b2b      	ldr	r3, [pc, #172]	; (8004c48 <HAL_RTC_Init+0x190>)
 8004b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	4928      	ldr	r1, [pc, #160]	; (8004c48 <HAL_RTC_Init+0x190>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb4:	d003      	beq.n	8004bbe <HAL_RTC_Init+0x106>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	60fb      	str	r3, [r7, #12]
 8004bbc:	e00e      	b.n	8004bdc <HAL_RTC_Init+0x124>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004bbe:	2001      	movs	r0, #1
 8004bc0:	f7ff fe74 	bl	80048ac <HAL_RCCEx_GetPeriphCLKFreq>
 8004bc4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d104      	bne.n	8004bd6 <HAL_RTC_Init+0x11e>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2204      	movs	r2, #4
 8004bd0:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e030      	b.n	8004c38 <HAL_RTC_Init+0x180>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f023 010f 	bic.w	r1, r3, #15
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	0c1a      	lsrs	r2, r3, #16
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	0c1b      	lsrs	r3, r3, #16
 8004bfa:	041b      	lsls	r3, r3, #16
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	b291      	uxth	r1, r2
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6812      	ldr	r2, [r2, #0]
 8004c04:	430b      	orrs	r3, r1
 8004c06:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 fc57 	bl	80054bc <RTC_ExitInitMode>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d004      	beq.n	8004c1e <HAL_RTC_Init+0x166>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2204      	movs	r2, #4
 8004c18:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e00c      	b.n	8004c38 <HAL_RTC_Init+0x180>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8004c36:	2300      	movs	r3, #0
  }
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	40002800 	.word	0x40002800
 8004c44:	0801138c 	.word	0x0801138c
 8004c48:	40006c00 	.word	0x40006c00

08004c4c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004c4c:	b590      	push	{r4, r7, lr}
 8004c4e:	b087      	sub	sp, #28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	617b      	str	r3, [r7, #20]
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d002      	beq.n	8004c6c <HAL_RTC_SetTime+0x20>
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d101      	bne.n	8004c70 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e0cd      	b.n	8004e0c <HAL_RTC_SetTime+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d007      	beq.n	8004c86 <HAL_RTC_SetTime+0x3a>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d004      	beq.n	8004c86 <HAL_RTC_SetTime+0x3a>
 8004c7c:	f240 21ca 	movw	r1, #714	; 0x2ca
 8004c80:	4864      	ldr	r0, [pc, #400]	; (8004e14 <HAL_RTC_SetTime+0x1c8>)
 8004c82:	f7fd f8ad 	bl	8001de0 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	7c1b      	ldrb	r3, [r3, #16]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d101      	bne.n	8004c92 <HAL_RTC_SetTime+0x46>
 8004c8e:	2302      	movs	r3, #2
 8004c90:	e0bc      	b.n	8004e0c <HAL_RTC_SetTime+0x1c0>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2201      	movs	r2, #1
 8004c96:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d12e      	bne.n	8004d02 <HAL_RTC_SetTime+0xb6>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	2b17      	cmp	r3, #23
 8004caa:	d904      	bls.n	8004cb6 <HAL_RTC_SetTime+0x6a>
 8004cac:	f240 21d3 	movw	r1, #723	; 0x2d3
 8004cb0:	4858      	ldr	r0, [pc, #352]	; (8004e14 <HAL_RTC_SetTime+0x1c8>)
 8004cb2:	f7fd f895 	bl	8001de0 <assert_failed>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	785b      	ldrb	r3, [r3, #1]
 8004cba:	2b3b      	cmp	r3, #59	; 0x3b
 8004cbc:	d904      	bls.n	8004cc8 <HAL_RTC_SetTime+0x7c>
 8004cbe:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 8004cc2:	4854      	ldr	r0, [pc, #336]	; (8004e14 <HAL_RTC_SetTime+0x1c8>)
 8004cc4:	f7fd f88c 	bl	8001de0 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	789b      	ldrb	r3, [r3, #2]
 8004ccc:	2b3b      	cmp	r3, #59	; 0x3b
 8004cce:	d904      	bls.n	8004cda <HAL_RTC_SetTime+0x8e>
 8004cd0:	f240 21d5 	movw	r1, #725	; 0x2d5
 8004cd4:	484f      	ldr	r0, [pc, #316]	; (8004e14 <HAL_RTC_SetTime+0x1c8>)
 8004cd6:	f7fd f883 	bl	8001de0 <assert_failed>

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004ce4:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	785b      	ldrb	r3, [r3, #1]
 8004cec:	4619      	mov	r1, r3
 8004cee:	460b      	mov	r3, r1
 8004cf0:	011b      	lsls	r3, r3, #4
 8004cf2:	1a5b      	subs	r3, r3, r1
 8004cf4:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004cf6:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004cfc:	4413      	add	r3, r2
 8004cfe:	617b      	str	r3, [r7, #20]
 8004d00:	e045      	b.n	8004d8e <HAL_RTC_SetTime+0x142>
  }
  else
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f000 fc1d 	bl	8005546 <RTC_Bcd2ToByte>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b17      	cmp	r3, #23
 8004d10:	d904      	bls.n	8004d1c <HAL_RTC_SetTime+0xd0>
 8004d12:	f240 21dd 	movw	r1, #733	; 0x2dd
 8004d16:	483f      	ldr	r0, [pc, #252]	; (8004e14 <HAL_RTC_SetTime+0x1c8>)
 8004d18:	f7fd f862 	bl	8001de0 <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	785b      	ldrb	r3, [r3, #1]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 fc10 	bl	8005546 <RTC_Bcd2ToByte>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b3b      	cmp	r3, #59	; 0x3b
 8004d2a:	d904      	bls.n	8004d36 <HAL_RTC_SetTime+0xea>
 8004d2c:	f240 21de 	movw	r1, #734	; 0x2de
 8004d30:	4838      	ldr	r0, [pc, #224]	; (8004e14 <HAL_RTC_SetTime+0x1c8>)
 8004d32:	f7fd f855 	bl	8001de0 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	789b      	ldrb	r3, [r3, #2]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f000 fc03 	bl	8005546 <RTC_Bcd2ToByte>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b3b      	cmp	r3, #59	; 0x3b
 8004d44:	d904      	bls.n	8004d50 <HAL_RTC_SetTime+0x104>
 8004d46:	f240 21df 	movw	r1, #735	; 0x2df
 8004d4a:	4832      	ldr	r0, [pc, #200]	; (8004e14 <HAL_RTC_SetTime+0x1c8>)
 8004d4c:	f7fd f848 	bl	8001de0 <assert_failed>

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f000 fbf6 	bl	8005546 <RTC_Bcd2ToByte>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004d62:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	785b      	ldrb	r3, [r3, #1]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 fbeb 	bl	8005546 <RTC_Bcd2ToByte>
 8004d70:	4603      	mov	r3, r0
 8004d72:	461a      	mov	r2, r3
 8004d74:	4613      	mov	r3, r2
 8004d76:	011b      	lsls	r3, r3, #4
 8004d78:	1a9b      	subs	r3, r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004d7c:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	789b      	ldrb	r3, [r3, #2]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 fbdf 	bl	8005546 <RTC_Bcd2ToByte>
 8004d88:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004d8a:	4423      	add	r3, r4
 8004d8c:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004d8e:	6979      	ldr	r1, [r7, #20]
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f000 fb04 	bl	800539e <RTC_WriteTimeCounter>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d007      	beq.n	8004dac <HAL_RTC_SetTime+0x160>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2204      	movs	r2, #4
 8004da0:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e02f      	b.n	8004e0c <HAL_RTC_SetTime+0x1c0>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 0205 	bic.w	r2, r2, #5
 8004dba:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f000 fb15 	bl	80053ec <RTC_ReadAlarmCounter>
 8004dc2:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dca:	d018      	beq.n	8004dfe <HAL_RTC_SetTime+0x1b2>
    {
      if (counter_alarm < counter_time)
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d214      	bcs.n	8004dfe <HAL_RTC_SetTime+0x1b2>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004dda:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004dde:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004de0:	6939      	ldr	r1, [r7, #16]
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f000 fb1b 	bl	800541e <RTC_WriteAlarmCounter>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d007      	beq.n	8004dfe <HAL_RTC_SetTime+0x1b2>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2204      	movs	r2, #4
 8004df2:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e006      	b.n	8004e0c <HAL_RTC_SetTime+0x1c0>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2201      	movs	r2, #1
 8004e02:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004e0a:	2300      	movs	r3, #0
  }
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	371c      	adds	r7, #28
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd90      	pop	{r4, r7, pc}
 8004e14:	0801138c 	.word	0x0801138c

08004e18 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b088      	sub	sp, #32
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	60b9      	str	r1, [r7, #8]
 8004e22:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	61bb      	str	r3, [r7, #24]
 8004e28:	2300      	movs	r3, #0
 8004e2a:	61fb      	str	r3, [r7, #28]
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	617b      	str	r3, [r7, #20]
 8004e30:	2300      	movs	r3, #0
 8004e32:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d002      	beq.n	8004e40 <HAL_RTC_GetTime+0x28>
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e0c0      	b.n	8004fc6 <HAL_RTC_GetTime+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d007      	beq.n	8004e5a <HAL_RTC_GetTime+0x42>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d004      	beq.n	8004e5a <HAL_RTC_GetTime+0x42>
 8004e50:	f240 312d 	movw	r1, #813	; 0x32d
 8004e54:	485e      	ldr	r0, [pc, #376]	; (8004fd0 <HAL_RTC_GetTime+0x1b8>)
 8004e56:	f7fc ffc3 	bl	8001de0 <assert_failed>

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f003 0304 	and.w	r3, r3, #4
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <HAL_RTC_GetTime+0x54>
  {
    return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e0ac      	b.n	8004fc6 <HAL_RTC_GetTime+0x1ae>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f000 fa66 	bl	800533e <RTC_ReadTimeCounter>
 8004e72:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	4a57      	ldr	r2, [pc, #348]	; (8004fd4 <HAL_RTC_GetTime+0x1bc>)
 8004e78:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7c:	0adb      	lsrs	r3, r3, #11
 8004e7e:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	4b54      	ldr	r3, [pc, #336]	; (8004fd4 <HAL_RTC_GetTime+0x1bc>)
 8004e84:	fba3 1302 	umull	r1, r3, r3, r2
 8004e88:	0adb      	lsrs	r3, r3, #11
 8004e8a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004e8e:	fb01 f303 	mul.w	r3, r1, r3
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	4a50      	ldr	r2, [pc, #320]	; (8004fd8 <HAL_RTC_GetTime+0x1c0>)
 8004e96:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9a:	095b      	lsrs	r3, r3, #5
 8004e9c:	b2da      	uxtb	r2, r3
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	4a4b      	ldr	r2, [pc, #300]	; (8004fd4 <HAL_RTC_GetTime+0x1bc>)
 8004ea6:	fba2 1203 	umull	r1, r2, r2, r3
 8004eaa:	0ad2      	lsrs	r2, r2, #11
 8004eac:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004eb0:	fb01 f202 	mul.w	r2, r1, r2
 8004eb4:	1a9a      	subs	r2, r3, r2
 8004eb6:	4b48      	ldr	r3, [pc, #288]	; (8004fd8 <HAL_RTC_GetTime+0x1c0>)
 8004eb8:	fba3 1302 	umull	r1, r3, r3, r2
 8004ebc:	0959      	lsrs	r1, r3, #5
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	011b      	lsls	r3, r3, #4
 8004ec2:	1a5b      	subs	r3, r3, r1
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	1ad1      	subs	r1, r2, r3
 8004ec8:	b2ca      	uxtb	r2, r1
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	2b17      	cmp	r3, #23
 8004ed2:	d955      	bls.n	8004f80 <HAL_RTC_GetTime+0x168>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	4a41      	ldr	r2, [pc, #260]	; (8004fdc <HAL_RTC_GetTime+0x1c4>)
 8004ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8004edc:	091b      	lsrs	r3, r3, #4
 8004ede:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8004ee0:	6939      	ldr	r1, [r7, #16]
 8004ee2:	4b3e      	ldr	r3, [pc, #248]	; (8004fdc <HAL_RTC_GetTime+0x1c4>)
 8004ee4:	fba3 2301 	umull	r2, r3, r3, r1
 8004ee8:	091a      	lsrs	r2, r3, #4
 8004eea:	4613      	mov	r3, r2
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	4413      	add	r3, r2
 8004ef0:	00db      	lsls	r3, r3, #3
 8004ef2:	1aca      	subs	r2, r1, r3
 8004ef4:	b2d2      	uxtb	r2, r2
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f000 fa76 	bl	80053ec <RTC_ReadAlarmCounter>
 8004f00:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f08:	d008      	beq.n	8004f1c <HAL_RTC_GetTime+0x104>
 8004f0a:	69fa      	ldr	r2, [r7, #28]
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d904      	bls.n	8004f1c <HAL_RTC_GetTime+0x104>
    {
      counter_alarm -= counter_time;
 8004f12:	69fa      	ldr	r2, [r7, #28]
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	61fb      	str	r3, [r7, #28]
 8004f1a:	e002      	b.n	8004f22 <HAL_RTC_GetTime+0x10a>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8004f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f20:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	4a2e      	ldr	r2, [pc, #184]	; (8004fe0 <HAL_RTC_GetTime+0x1c8>)
 8004f26:	fb02 f303 	mul.w	r3, r2, r3
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004f30:	69b9      	ldr	r1, [r7, #24]
 8004f32:	68f8      	ldr	r0, [r7, #12]
 8004f34:	f000 fa33 	bl	800539e <RTC_WriteTimeCounter>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <HAL_RTC_GetTime+0x12a>
    {
      return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e041      	b.n	8004fc6 <HAL_RTC_GetTime+0x1ae>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f48:	d00c      	beq.n	8004f64 <HAL_RTC_GetTime+0x14c>
    {
      counter_alarm += counter_time;
 8004f4a:	69fa      	ldr	r2, [r7, #28]
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	4413      	add	r3, r2
 8004f50:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004f52:	69f9      	ldr	r1, [r7, #28]
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f000 fa62 	bl	800541e <RTC_WriteAlarmCounter>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d00a      	beq.n	8004f76 <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e030      	b.n	8004fc6 <HAL_RTC_GetTime+0x1ae>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004f64:	69f9      	ldr	r1, [r7, #28]
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 fa59 	bl	800541e <RTC_WriteAlarmCounter>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e027      	b.n	8004fc6 <HAL_RTC_GetTime+0x1ae>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8004f76:	6979      	ldr	r1, [r7, #20]
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f000 fb01 	bl	8005580 <RTC_DateUpdate>
 8004f7e:	e003      	b.n	8004f88 <HAL_RTC_GetTime+0x170>
  }
  else
  {
    sTime->Hours = hours;
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d01a      	beq.n	8004fc4 <HAL_RTC_GetTime+0x1ac>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f000 faba 	bl	800550c <RTC_ByteToBcd2>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	785b      	ldrb	r3, [r3, #1]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f000 fab1 	bl	800550c <RTC_ByteToBcd2>
 8004faa:	4603      	mov	r3, r0
 8004fac:	461a      	mov	r2, r3
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	789b      	ldrb	r3, [r3, #2]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 faa8 	bl	800550c <RTC_ByteToBcd2>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3720      	adds	r7, #32
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	0801138c 	.word	0x0801138c
 8004fd4:	91a2b3c5 	.word	0x91a2b3c5
 8004fd8:	88888889 	.word	0x88888889
 8004fdc:	aaaaaaab 	.word	0xaaaaaaab
 8004fe0:	00015180 	.word	0x00015180

08004fe4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b088      	sub	sp, #32
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	61fb      	str	r3, [r7, #28]
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	61bb      	str	r3, [r7, #24]
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d002      	beq.n	8005008 <HAL_RTC_SetDate+0x24>
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d101      	bne.n	800500c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e0fc      	b.n	8005206 <HAL_RTC_SetDate+0x222>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d007      	beq.n	8005022 <HAL_RTC_SetDate+0x3e>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d004      	beq.n	8005022 <HAL_RTC_SetDate+0x3e>
 8005018:	f44f 7167 	mov.w	r1, #924	; 0x39c
 800501c:	487c      	ldr	r0, [pc, #496]	; (8005210 <HAL_RTC_SetDate+0x22c>)
 800501e:	f7fc fedf 	bl	8001de0 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	7c1b      	ldrb	r3, [r3, #16]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d101      	bne.n	800502e <HAL_RTC_SetDate+0x4a>
 800502a:	2302      	movs	r3, #2
 800502c:	e0eb      	b.n	8005206 <HAL_RTC_SetDate+0x222>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2201      	movs	r2, #1
 8005032:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2202      	movs	r2, #2
 8005038:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d12f      	bne.n	80050a0 <HAL_RTC_SetDate+0xbc>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	78db      	ldrb	r3, [r3, #3]
 8005044:	2b63      	cmp	r3, #99	; 0x63
 8005046:	d904      	bls.n	8005052 <HAL_RTC_SetDate+0x6e>
 8005048:	f240 31a5 	movw	r1, #933	; 0x3a5
 800504c:	4870      	ldr	r0, [pc, #448]	; (8005210 <HAL_RTC_SetDate+0x22c>)
 800504e:	f7fc fec7 	bl	8001de0 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	785b      	ldrb	r3, [r3, #1]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <HAL_RTC_SetDate+0x7e>
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	785b      	ldrb	r3, [r3, #1]
 800505e:	2b0c      	cmp	r3, #12
 8005060:	d904      	bls.n	800506c <HAL_RTC_SetDate+0x88>
 8005062:	f240 31a6 	movw	r1, #934	; 0x3a6
 8005066:	486a      	ldr	r0, [pc, #424]	; (8005210 <HAL_RTC_SetDate+0x22c>)
 8005068:	f7fc feba 	bl	8001de0 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	789b      	ldrb	r3, [r3, #2]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d003      	beq.n	800507c <HAL_RTC_SetDate+0x98>
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	789b      	ldrb	r3, [r3, #2]
 8005078:	2b1f      	cmp	r3, #31
 800507a:	d904      	bls.n	8005086 <HAL_RTC_SetDate+0xa2>
 800507c:	f240 31a7 	movw	r1, #935	; 0x3a7
 8005080:	4863      	ldr	r0, [pc, #396]	; (8005210 <HAL_RTC_SetDate+0x22c>)
 8005082:	f7fc fead 	bl	8001de0 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	78da      	ldrb	r2, [r3, #3]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	785a      	ldrb	r2, [r3, #1]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	789a      	ldrb	r2, [r3, #2]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	739a      	strb	r2, [r3, #14]
 800509e:	e051      	b.n	8005144 <HAL_RTC_SetDate+0x160>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	78db      	ldrb	r3, [r3, #3]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f000 fa4e 	bl	8005546 <RTC_Bcd2ToByte>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b63      	cmp	r3, #99	; 0x63
 80050ae:	d904      	bls.n	80050ba <HAL_RTC_SetDate+0xd6>
 80050b0:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 80050b4:	4856      	ldr	r0, [pc, #344]	; (8005210 <HAL_RTC_SetDate+0x22c>)
 80050b6:	f7fc fe93 	bl	8001de0 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	785b      	ldrb	r3, [r3, #1]
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 fa41 	bl	8005546 <RTC_Bcd2ToByte>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d007      	beq.n	80050da <HAL_RTC_SetDate+0xf6>
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	785b      	ldrb	r3, [r3, #1]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 fa39 	bl	8005546 <RTC_Bcd2ToByte>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b0c      	cmp	r3, #12
 80050d8:	d904      	bls.n	80050e4 <HAL_RTC_SetDate+0x100>
 80050da:	f240 31b1 	movw	r1, #945	; 0x3b1
 80050de:	484c      	ldr	r0, [pc, #304]	; (8005210 <HAL_RTC_SetDate+0x22c>)
 80050e0:	f7fc fe7e 	bl	8001de0 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	789b      	ldrb	r3, [r3, #2]
 80050e8:	4618      	mov	r0, r3
 80050ea:	f000 fa2c 	bl	8005546 <RTC_Bcd2ToByte>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d007      	beq.n	8005104 <HAL_RTC_SetDate+0x120>
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	789b      	ldrb	r3, [r3, #2]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f000 fa24 	bl	8005546 <RTC_Bcd2ToByte>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b1f      	cmp	r3, #31
 8005102:	d904      	bls.n	800510e <HAL_RTC_SetDate+0x12a>
 8005104:	f240 31b2 	movw	r1, #946	; 0x3b2
 8005108:	4841      	ldr	r0, [pc, #260]	; (8005210 <HAL_RTC_SetDate+0x22c>)
 800510a:	f7fc fe69 	bl	8001de0 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	78db      	ldrb	r3, [r3, #3]
 8005112:	4618      	mov	r0, r3
 8005114:	f000 fa17 	bl	8005546 <RTC_Bcd2ToByte>
 8005118:	4603      	mov	r3, r0
 800511a:	461a      	mov	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	785b      	ldrb	r3, [r3, #1]
 8005124:	4618      	mov	r0, r3
 8005126:	f000 fa0e 	bl	8005546 <RTC_Bcd2ToByte>
 800512a:	4603      	mov	r3, r0
 800512c:	461a      	mov	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	789b      	ldrb	r3, [r3, #2]
 8005136:	4618      	mov	r0, r3
 8005138:	f000 fa05 	bl	8005546 <RTC_Bcd2ToByte>
 800513c:	4603      	mov	r3, r0
 800513e:	461a      	mov	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	7bdb      	ldrb	r3, [r3, #15]
 8005148:	4618      	mov	r0, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	7b59      	ldrb	r1, [r3, #13]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	7b9b      	ldrb	r3, [r3, #14]
 8005152:	461a      	mov	r2, r3
 8005154:	f000 faf0 	bl	8005738 <RTC_WeekDayNum>
 8005158:	4603      	mov	r3, r0
 800515a:	461a      	mov	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	7b1a      	ldrb	r2, [r3, #12]
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f000 f8e8 	bl	800533e <RTC_ReadTimeCounter>
 800516e:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	4a28      	ldr	r2, [pc, #160]	; (8005214 <HAL_RTC_SetDate+0x230>)
 8005174:	fba2 2303 	umull	r2, r3, r2, r3
 8005178:	0adb      	lsrs	r3, r3, #11
 800517a:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	2b18      	cmp	r3, #24
 8005180:	d93a      	bls.n	80051f8 <HAL_RTC_SetDate+0x214>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	4a24      	ldr	r2, [pc, #144]	; (8005218 <HAL_RTC_SetDate+0x234>)
 8005186:	fba2 2303 	umull	r2, r3, r2, r3
 800518a:	091b      	lsrs	r3, r3, #4
 800518c:	4a23      	ldr	r2, [pc, #140]	; (800521c <HAL_RTC_SetDate+0x238>)
 800518e:	fb02 f303 	mul.w	r3, r2, r3
 8005192:	69fa      	ldr	r2, [r7, #28]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005198:	69f9      	ldr	r1, [r7, #28]
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f000 f8ff 	bl	800539e <RTC_WriteTimeCounter>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d007      	beq.n	80051b6 <HAL_RTC_SetDate+0x1d2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2204      	movs	r2, #4
 80051aa:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e027      	b.n	8005206 <HAL_RTC_SetDate+0x222>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f000 f918 	bl	80053ec <RTC_ReadAlarmCounter>
 80051bc:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c4:	d018      	beq.n	80051f8 <HAL_RTC_SetDate+0x214>
    {
      if (counter_alarm < counter_time)
 80051c6:	69ba      	ldr	r2, [r7, #24]
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d214      	bcs.n	80051f8 <HAL_RTC_SetDate+0x214>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80051d4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80051d8:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80051da:	69b9      	ldr	r1, [r7, #24]
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 f91e 	bl	800541e <RTC_WriteAlarmCounter>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d007      	beq.n	80051f8 <HAL_RTC_SetDate+0x214>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2204      	movs	r2, #4
 80051ec:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e006      	b.n	8005206 <HAL_RTC_SetDate+0x222>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2201      	movs	r2, #1
 80051fc:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3720      	adds	r7, #32
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	0801138c 	.word	0x0801138c
 8005214:	91a2b3c5 	.word	0x91a2b3c5
 8005218:	aaaaaaab 	.word	0xaaaaaaab
 800521c:	00015180 	.word	0x00015180

08005220 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 800522c:	f107 0314 	add.w	r3, r7, #20
 8005230:	2100      	movs	r1, #0
 8005232:	460a      	mov	r2, r1
 8005234:	801a      	strh	r2, [r3, #0]
 8005236:	460a      	mov	r2, r1
 8005238:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d002      	beq.n	8005246 <HAL_RTC_GetDate+0x26>
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e045      	b.n	80052d6 <HAL_RTC_GetDate+0xb6>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d007      	beq.n	8005260 <HAL_RTC_GetDate+0x40>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d004      	beq.n	8005260 <HAL_RTC_GetDate+0x40>
 8005256:	f240 410e 	movw	r1, #1038	; 0x40e
 800525a:	4821      	ldr	r0, [pc, #132]	; (80052e0 <HAL_RTC_GetDate+0xc0>)
 800525c:	f7fc fdc0 	bl	8001de0 <assert_failed>

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8005260:	f107 0314 	add.w	r3, r7, #20
 8005264:	2200      	movs	r2, #0
 8005266:	4619      	mov	r1, r3
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f7ff fdd5 	bl	8004e18 <HAL_RTC_GetTime>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <HAL_RTC_GetDate+0x58>
  {
    return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e02e      	b.n	80052d6 <HAL_RTC_GetDate+0xb6>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	7b1a      	ldrb	r2, [r3, #12]
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	7bda      	ldrb	r2, [r3, #15]
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	7b5a      	ldrb	r2, [r3, #13]
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	7b9a      	ldrb	r2, [r3, #14]
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d01a      	beq.n	80052d4 <HAL_RTC_GetDate+0xb4>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	78db      	ldrb	r3, [r3, #3]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f000 f932 	bl	800550c <RTC_ByteToBcd2>
 80052a8:	4603      	mov	r3, r0
 80052aa:	461a      	mov	r2, r3
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	785b      	ldrb	r3, [r3, #1]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f000 f929 	bl	800550c <RTC_ByteToBcd2>
 80052ba:	4603      	mov	r3, r0
 80052bc:	461a      	mov	r2, r3
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	789b      	ldrb	r3, [r3, #2]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 f920 	bl	800550c <RTC_ByteToBcd2>
 80052cc:	4603      	mov	r3, r0
 80052ce:	461a      	mov	r2, r3
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80052d4:	2300      	movs	r3, #0
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3718      	adds	r7, #24
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	0801138c 	.word	0x0801138c

080052e4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052ec:	2300      	movs	r3, #0
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d101      	bne.n	80052fa <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e01d      	b.n	8005336 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 0208 	bic.w	r2, r2, #8
 8005308:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800530a:	f7fd fa4b 	bl	80027a4 <HAL_GetTick>
 800530e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005310:	e009      	b.n	8005326 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005312:	f7fd fa47 	bl	80027a4 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005320:	d901      	bls.n	8005326 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e007      	b.n	8005336 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f003 0308 	and.w	r3, r3, #8
 8005330:	2b00      	cmp	r3, #0
 8005332:	d0ee      	beq.n	8005312 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800533e:	b480      	push	{r7}
 8005340:	b087      	sub	sp, #28
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8005346:	2300      	movs	r3, #0
 8005348:	827b      	strh	r3, [r7, #18]
 800534a:	2300      	movs	r3, #0
 800534c:	823b      	strh	r3, [r7, #16]
 800534e:	2300      	movs	r3, #0
 8005350:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	69db      	ldr	r3, [r3, #28]
 8005364:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800536e:	8a7a      	ldrh	r2, [r7, #18]
 8005370:	8a3b      	ldrh	r3, [r7, #16]
 8005372:	429a      	cmp	r2, r3
 8005374:	d008      	beq.n	8005388 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8005376:	8a3b      	ldrh	r3, [r7, #16]
 8005378:	041a      	lsls	r2, r3, #16
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	69db      	ldr	r3, [r3, #28]
 8005380:	b29b      	uxth	r3, r3
 8005382:	4313      	orrs	r3, r2
 8005384:	617b      	str	r3, [r7, #20]
 8005386:	e004      	b.n	8005392 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005388:	8a7b      	ldrh	r3, [r7, #18]
 800538a:	041a      	lsls	r2, r3, #16
 800538c:	89fb      	ldrh	r3, [r7, #14]
 800538e:	4313      	orrs	r3, r2
 8005390:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8005392:	697b      	ldr	r3, [r7, #20]
}
 8005394:	4618      	mov	r0, r3
 8005396:	371c      	adds	r7, #28
 8005398:	46bd      	mov	sp, r7
 800539a:	bc80      	pop	{r7}
 800539c:	4770      	bx	lr

0800539e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b084      	sub	sp, #16
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
 80053a6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053a8:	2300      	movs	r3, #0
 80053aa:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f85d 	bl	800546c <RTC_EnterInitMode>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d002      	beq.n	80053be <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	73fb      	strb	r3, [r7, #15]
 80053bc:	e011      	b.n	80053e2 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	0c12      	lsrs	r2, r2, #16
 80053c6:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	b292      	uxth	r2, r2
 80053d0:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f872 	bl	80054bc <RTC_ExitInitMode>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80053e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	81fb      	strh	r3, [r7, #14]
 80053f8:	2300      	movs	r3, #0
 80053fa:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800540c:	89fb      	ldrh	r3, [r7, #14]
 800540e:	041a      	lsls	r2, r3, #16
 8005410:	89bb      	ldrh	r3, [r7, #12]
 8005412:	4313      	orrs	r3, r2
}
 8005414:	4618      	mov	r0, r3
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	bc80      	pop	{r7}
 800541c:	4770      	bx	lr

0800541e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b084      	sub	sp, #16
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
 8005426:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005428:	2300      	movs	r3, #0
 800542a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f81d 	bl	800546c <RTC_EnterInitMode>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	73fb      	strb	r3, [r7, #15]
 800543c:	e011      	b.n	8005462 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	0c12      	lsrs	r2, r2, #16
 8005446:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	b292      	uxth	r2, r2
 8005450:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f832 	bl	80054bc <RTC_ExitInitMode>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005462:	7bfb      	ldrb	r3, [r7, #15]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005474:	2300      	movs	r3, #0
 8005476:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005478:	f7fd f994 	bl	80027a4 <HAL_GetTick>
 800547c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800547e:	e009      	b.n	8005494 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005480:	f7fd f990 	bl	80027a4 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800548e:	d901      	bls.n	8005494 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e00f      	b.n	80054b4 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f003 0320 	and.w	r3, r3, #32
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d0ee      	beq.n	8005480 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f042 0210 	orr.w	r2, r2, #16
 80054b0:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054c4:	2300      	movs	r3, #0
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f022 0210 	bic.w	r2, r2, #16
 80054d6:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80054d8:	f7fd f964 	bl	80027a4 <HAL_GetTick>
 80054dc:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80054de:	e009      	b.n	80054f4 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80054e0:	f7fd f960 	bl	80027a4 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054ee:	d901      	bls.n	80054f4 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e007      	b.n	8005504 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f003 0320 	and.w	r3, r3, #32
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d0ee      	beq.n	80054e0 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	4603      	mov	r3, r0
 8005514:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005516:	2300      	movs	r3, #0
 8005518:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800551a:	e005      	b.n	8005528 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	3301      	adds	r3, #1
 8005520:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005522:	79fb      	ldrb	r3, [r7, #7]
 8005524:	3b0a      	subs	r3, #10
 8005526:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005528:	79fb      	ldrb	r3, [r7, #7]
 800552a:	2b09      	cmp	r3, #9
 800552c:	d8f6      	bhi.n	800551c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	b2db      	uxtb	r3, r3
 8005532:	011b      	lsls	r3, r3, #4
 8005534:	b2da      	uxtb	r2, r3
 8005536:	79fb      	ldrb	r3, [r7, #7]
 8005538:	4313      	orrs	r3, r2
 800553a:	b2db      	uxtb	r3, r3
}
 800553c:	4618      	mov	r0, r3
 800553e:	3714      	adds	r7, #20
 8005540:	46bd      	mov	sp, r7
 8005542:	bc80      	pop	{r7}
 8005544:	4770      	bx	lr

08005546 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005546:	b480      	push	{r7}
 8005548:	b085      	sub	sp, #20
 800554a:	af00      	add	r7, sp, #0
 800554c:	4603      	mov	r3, r0
 800554e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005550:	2300      	movs	r3, #0
 8005552:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005554:	79fb      	ldrb	r3, [r7, #7]
 8005556:	091b      	lsrs	r3, r3, #4
 8005558:	b2db      	uxtb	r3, r3
 800555a:	461a      	mov	r2, r3
 800555c:	4613      	mov	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005566:	79fb      	ldrb	r3, [r7, #7]
 8005568:	f003 030f 	and.w	r3, r3, #15
 800556c:	b2da      	uxtb	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	b2db      	uxtb	r3, r3
 8005572:	4413      	add	r3, r2
 8005574:	b2db      	uxtb	r3, r3
}
 8005576:	4618      	mov	r0, r3
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	bc80      	pop	{r7}
 800557e:	4770      	bx	lr

08005580 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800558a:	2300      	movs	r3, #0
 800558c:	617b      	str	r3, [r7, #20]
 800558e:	2300      	movs	r3, #0
 8005590:	613b      	str	r3, [r7, #16]
 8005592:	2300      	movs	r3, #0
 8005594:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8005596:	2300      	movs	r3, #0
 8005598:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	7bdb      	ldrb	r3, [r3, #15]
 800559e:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	7b5b      	ldrb	r3, [r3, #13]
 80055a4:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	7b9b      	ldrb	r3, [r3, #14]
 80055aa:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80055ac:	2300      	movs	r3, #0
 80055ae:	60bb      	str	r3, [r7, #8]
 80055b0:	e06f      	b.n	8005692 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d011      	beq.n	80055dc <RTC_DateUpdate+0x5c>
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	2b03      	cmp	r3, #3
 80055bc:	d00e      	beq.n	80055dc <RTC_DateUpdate+0x5c>
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	2b05      	cmp	r3, #5
 80055c2:	d00b      	beq.n	80055dc <RTC_DateUpdate+0x5c>
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	2b07      	cmp	r3, #7
 80055c8:	d008      	beq.n	80055dc <RTC_DateUpdate+0x5c>
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	2b08      	cmp	r3, #8
 80055ce:	d005      	beq.n	80055dc <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	2b0a      	cmp	r3, #10
 80055d4:	d002      	beq.n	80055dc <RTC_DateUpdate+0x5c>
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	2b0c      	cmp	r3, #12
 80055da:	d117      	bne.n	800560c <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2b1e      	cmp	r3, #30
 80055e0:	d803      	bhi.n	80055ea <RTC_DateUpdate+0x6a>
      {
        day++;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	3301      	adds	r3, #1
 80055e6:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80055e8:	e050      	b.n	800568c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	2b0c      	cmp	r3, #12
 80055ee:	d005      	beq.n	80055fc <RTC_DateUpdate+0x7c>
        {
          month++;
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	3301      	adds	r3, #1
 80055f4:	613b      	str	r3, [r7, #16]
          day = 1U;
 80055f6:	2301      	movs	r3, #1
 80055f8:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80055fa:	e047      	b.n	800568c <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80055fc:	2301      	movs	r3, #1
 80055fe:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005600:	2301      	movs	r3, #1
 8005602:	60fb      	str	r3, [r7, #12]
          year++;
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	3301      	adds	r3, #1
 8005608:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800560a:	e03f      	b.n	800568c <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	2b04      	cmp	r3, #4
 8005610:	d008      	beq.n	8005624 <RTC_DateUpdate+0xa4>
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	2b06      	cmp	r3, #6
 8005616:	d005      	beq.n	8005624 <RTC_DateUpdate+0xa4>
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	2b09      	cmp	r3, #9
 800561c:	d002      	beq.n	8005624 <RTC_DateUpdate+0xa4>
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	2b0b      	cmp	r3, #11
 8005622:	d10c      	bne.n	800563e <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2b1d      	cmp	r3, #29
 8005628:	d803      	bhi.n	8005632 <RTC_DateUpdate+0xb2>
      {
        day++;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	3301      	adds	r3, #1
 800562e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005630:	e02c      	b.n	800568c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	3301      	adds	r3, #1
 8005636:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005638:	2301      	movs	r3, #1
 800563a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800563c:	e026      	b.n	800568c <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	2b02      	cmp	r3, #2
 8005642:	d123      	bne.n	800568c <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2b1b      	cmp	r3, #27
 8005648:	d803      	bhi.n	8005652 <RTC_DateUpdate+0xd2>
      {
        day++;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	3301      	adds	r3, #1
 800564e:	60fb      	str	r3, [r7, #12]
 8005650:	e01c      	b.n	800568c <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2b1c      	cmp	r3, #28
 8005656:	d111      	bne.n	800567c <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	b29b      	uxth	r3, r3
 800565c:	4618      	mov	r0, r3
 800565e:	f000 f839 	bl	80056d4 <RTC_IsLeapYear>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d003      	beq.n	8005670 <RTC_DateUpdate+0xf0>
        {
          day++;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	3301      	adds	r3, #1
 800566c:	60fb      	str	r3, [r7, #12]
 800566e:	e00d      	b.n	800568c <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	3301      	adds	r3, #1
 8005674:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005676:	2301      	movs	r3, #1
 8005678:	60fb      	str	r3, [r7, #12]
 800567a:	e007      	b.n	800568c <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2b1d      	cmp	r3, #29
 8005680:	d104      	bne.n	800568c <RTC_DateUpdate+0x10c>
      {
        month++;
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	3301      	adds	r3, #1
 8005686:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005688:	2301      	movs	r3, #1
 800568a:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	3301      	adds	r3, #1
 8005690:	60bb      	str	r3, [r7, #8]
 8005692:	68ba      	ldr	r2, [r7, #8]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	429a      	cmp	r2, r3
 8005698:	d38b      	bcc.n	80055b2 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	b2da      	uxtb	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	b2da      	uxtb	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	b2d2      	uxtb	r2, r2
 80056ba:	4619      	mov	r1, r3
 80056bc:	6978      	ldr	r0, [r7, #20]
 80056be:	f000 f83b 	bl	8005738 <RTC_WeekDayNum>
 80056c2:	4603      	mov	r3, r0
 80056c4:	461a      	mov	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	731a      	strb	r2, [r3, #12]
}
 80056ca:	bf00      	nop
 80056cc:	3718      	adds	r7, #24
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
	...

080056d4 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	4603      	mov	r3, r0
 80056dc:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80056de:	88fb      	ldrh	r3, [r7, #6]
 80056e0:	f003 0303 	and.w	r3, r3, #3
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	e01d      	b.n	800572a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80056ee:	88fb      	ldrh	r3, [r7, #6]
 80056f0:	4a10      	ldr	r2, [pc, #64]	; (8005734 <RTC_IsLeapYear+0x60>)
 80056f2:	fba2 1203 	umull	r1, r2, r2, r3
 80056f6:	0952      	lsrs	r2, r2, #5
 80056f8:	2164      	movs	r1, #100	; 0x64
 80056fa:	fb01 f202 	mul.w	r2, r1, r2
 80056fe:	1a9b      	subs	r3, r3, r2
 8005700:	b29b      	uxth	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005706:	2301      	movs	r3, #1
 8005708:	e00f      	b.n	800572a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800570a:	88fb      	ldrh	r3, [r7, #6]
 800570c:	4a09      	ldr	r2, [pc, #36]	; (8005734 <RTC_IsLeapYear+0x60>)
 800570e:	fba2 1203 	umull	r1, r2, r2, r3
 8005712:	09d2      	lsrs	r2, r2, #7
 8005714:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005718:	fb01 f202 	mul.w	r2, r1, r2
 800571c:	1a9b      	subs	r3, r3, r2
 800571e:	b29b      	uxth	r3, r3
 8005720:	2b00      	cmp	r3, #0
 8005722:	d101      	bne.n	8005728 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8005724:	2301      	movs	r3, #1
 8005726:	e000      	b.n	800572a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8005728:	2300      	movs	r3, #0
  }
}
 800572a:	4618      	mov	r0, r3
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	bc80      	pop	{r7}
 8005732:	4770      	bx	lr
 8005734:	51eb851f 	.word	0x51eb851f

08005738 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	460b      	mov	r3, r1
 8005742:	70fb      	strb	r3, [r7, #3]
 8005744:	4613      	mov	r3, r2
 8005746:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8005748:	2300      	movs	r3, #0
 800574a:	60bb      	str	r3, [r7, #8]
 800574c:	2300      	movs	r3, #0
 800574e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005756:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005758:	78fb      	ldrb	r3, [r7, #3]
 800575a:	2b02      	cmp	r3, #2
 800575c:	d82d      	bhi.n	80057ba <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800575e:	78fa      	ldrb	r2, [r7, #3]
 8005760:	4613      	mov	r3, r2
 8005762:	005b      	lsls	r3, r3, #1
 8005764:	4413      	add	r3, r2
 8005766:	00db      	lsls	r3, r3, #3
 8005768:	1a9b      	subs	r3, r3, r2
 800576a:	4a2c      	ldr	r2, [pc, #176]	; (800581c <RTC_WeekDayNum+0xe4>)
 800576c:	fba2 2303 	umull	r2, r3, r2, r3
 8005770:	085a      	lsrs	r2, r3, #1
 8005772:	78bb      	ldrb	r3, [r7, #2]
 8005774:	441a      	add	r2, r3
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	441a      	add	r2, r3
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	3b01      	subs	r3, #1
 800577e:	089b      	lsrs	r3, r3, #2
 8005780:	441a      	add	r2, r3
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	3b01      	subs	r3, #1
 8005786:	4926      	ldr	r1, [pc, #152]	; (8005820 <RTC_WeekDayNum+0xe8>)
 8005788:	fba1 1303 	umull	r1, r3, r1, r3
 800578c:	095b      	lsrs	r3, r3, #5
 800578e:	1ad2      	subs	r2, r2, r3
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	3b01      	subs	r3, #1
 8005794:	4922      	ldr	r1, [pc, #136]	; (8005820 <RTC_WeekDayNum+0xe8>)
 8005796:	fba1 1303 	umull	r1, r3, r1, r3
 800579a:	09db      	lsrs	r3, r3, #7
 800579c:	4413      	add	r3, r2
 800579e:	1d1a      	adds	r2, r3, #4
 80057a0:	4b20      	ldr	r3, [pc, #128]	; (8005824 <RTC_WeekDayNum+0xec>)
 80057a2:	fba3 1302 	umull	r1, r3, r3, r2
 80057a6:	1ad1      	subs	r1, r2, r3
 80057a8:	0849      	lsrs	r1, r1, #1
 80057aa:	440b      	add	r3, r1
 80057ac:	0899      	lsrs	r1, r3, #2
 80057ae:	460b      	mov	r3, r1
 80057b0:	00db      	lsls	r3, r3, #3
 80057b2:	1a5b      	subs	r3, r3, r1
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	60fb      	str	r3, [r7, #12]
 80057b8:	e029      	b.n	800580e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80057ba:	78fa      	ldrb	r2, [r7, #3]
 80057bc:	4613      	mov	r3, r2
 80057be:	005b      	lsls	r3, r3, #1
 80057c0:	4413      	add	r3, r2
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	1a9b      	subs	r3, r3, r2
 80057c6:	4a15      	ldr	r2, [pc, #84]	; (800581c <RTC_WeekDayNum+0xe4>)
 80057c8:	fba2 2303 	umull	r2, r3, r2, r3
 80057cc:	085a      	lsrs	r2, r3, #1
 80057ce:	78bb      	ldrb	r3, [r7, #2]
 80057d0:	441a      	add	r2, r3
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	441a      	add	r2, r3
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	089b      	lsrs	r3, r3, #2
 80057da:	441a      	add	r2, r3
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	4910      	ldr	r1, [pc, #64]	; (8005820 <RTC_WeekDayNum+0xe8>)
 80057e0:	fba1 1303 	umull	r1, r3, r1, r3
 80057e4:	095b      	lsrs	r3, r3, #5
 80057e6:	1ad2      	subs	r2, r2, r3
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	490d      	ldr	r1, [pc, #52]	; (8005820 <RTC_WeekDayNum+0xe8>)
 80057ec:	fba1 1303 	umull	r1, r3, r1, r3
 80057f0:	09db      	lsrs	r3, r3, #7
 80057f2:	4413      	add	r3, r2
 80057f4:	1c9a      	adds	r2, r3, #2
 80057f6:	4b0b      	ldr	r3, [pc, #44]	; (8005824 <RTC_WeekDayNum+0xec>)
 80057f8:	fba3 1302 	umull	r1, r3, r3, r2
 80057fc:	1ad1      	subs	r1, r2, r3
 80057fe:	0849      	lsrs	r1, r1, #1
 8005800:	440b      	add	r3, r1
 8005802:	0899      	lsrs	r1, r3, #2
 8005804:	460b      	mov	r3, r1
 8005806:	00db      	lsls	r3, r3, #3
 8005808:	1a5b      	subs	r3, r3, r1
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	b2db      	uxtb	r3, r3
}
 8005812:	4618      	mov	r0, r3
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	bc80      	pop	{r7}
 800581a:	4770      	bx	lr
 800581c:	38e38e39 	.word	0x38e38e39
 8005820:	51eb851f 	.word	0x51eb851f
 8005824:	24924925 	.word	0x24924925

08005828 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e0b2      	b.n	80059a0 <HAL_TIM_Base_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a5a      	ldr	r2, [pc, #360]	; (80059a8 <HAL_TIM_Base_Init+0x180>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d027      	beq.n	8005894 <HAL_TIM_Base_Init+0x6c>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a58      	ldr	r2, [pc, #352]	; (80059ac <HAL_TIM_Base_Init+0x184>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d022      	beq.n	8005894 <HAL_TIM_Base_Init+0x6c>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005856:	d01d      	beq.n	8005894 <HAL_TIM_Base_Init+0x6c>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a54      	ldr	r2, [pc, #336]	; (80059b0 <HAL_TIM_Base_Init+0x188>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d018      	beq.n	8005894 <HAL_TIM_Base_Init+0x6c>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a53      	ldr	r2, [pc, #332]	; (80059b4 <HAL_TIM_Base_Init+0x18c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d013      	beq.n	8005894 <HAL_TIM_Base_Init+0x6c>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a51      	ldr	r2, [pc, #324]	; (80059b8 <HAL_TIM_Base_Init+0x190>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d00e      	beq.n	8005894 <HAL_TIM_Base_Init+0x6c>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a50      	ldr	r2, [pc, #320]	; (80059bc <HAL_TIM_Base_Init+0x194>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d009      	beq.n	8005894 <HAL_TIM_Base_Init+0x6c>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a4e      	ldr	r2, [pc, #312]	; (80059c0 <HAL_TIM_Base_Init+0x198>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d004      	beq.n	8005894 <HAL_TIM_Base_Init+0x6c>
 800588a:	f240 1113 	movw	r1, #275	; 0x113
 800588e:	484d      	ldr	r0, [pc, #308]	; (80059c4 <HAL_TIM_Base_Init+0x19c>)
 8005890:	f7fc faa6 	bl	8001de0 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d014      	beq.n	80058c6 <HAL_TIM_Base_Init+0x9e>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	2b10      	cmp	r3, #16
 80058a2:	d010      	beq.n	80058c6 <HAL_TIM_Base_Init+0x9e>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	2b20      	cmp	r3, #32
 80058aa:	d00c      	beq.n	80058c6 <HAL_TIM_Base_Init+0x9e>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	2b40      	cmp	r3, #64	; 0x40
 80058b2:	d008      	beq.n	80058c6 <HAL_TIM_Base_Init+0x9e>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	2b60      	cmp	r3, #96	; 0x60
 80058ba:	d004      	beq.n	80058c6 <HAL_TIM_Base_Init+0x9e>
 80058bc:	f44f 718a 	mov.w	r1, #276	; 0x114
 80058c0:	4840      	ldr	r0, [pc, #256]	; (80059c4 <HAL_TIM_Base_Init+0x19c>)
 80058c2:	f7fc fa8d 	bl	8001de0 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00e      	beq.n	80058ec <HAL_TIM_Base_Init+0xc4>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058d6:	d009      	beq.n	80058ec <HAL_TIM_Base_Init+0xc4>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058e0:	d004      	beq.n	80058ec <HAL_TIM_Base_Init+0xc4>
 80058e2:	f240 1115 	movw	r1, #277	; 0x115
 80058e6:	4837      	ldr	r0, [pc, #220]	; (80059c4 <HAL_TIM_Base_Init+0x19c>)
 80058e8:	f7fc fa7a 	bl	8001de0 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d008      	beq.n	8005906 <HAL_TIM_Base_Init+0xde>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	2b80      	cmp	r3, #128	; 0x80
 80058fa:	d004      	beq.n	8005906 <HAL_TIM_Base_Init+0xde>
 80058fc:	f44f 718b 	mov.w	r1, #278	; 0x116
 8005900:	4830      	ldr	r0, [pc, #192]	; (80059c4 <HAL_TIM_Base_Init+0x19c>)
 8005902:	f7fc fa6d 	bl	8001de0 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800590c:	b2db      	uxtb	r3, r3
 800590e:	2b00      	cmp	r3, #0
 8005910:	d111      	bne.n	8005936 <HAL_TIM_Base_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f001 ffc0 	bl	80078a0 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005924:	2b00      	cmp	r3, #0
 8005926:	d102      	bne.n	800592e <HAL_TIM_Base_Init+0x106>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a27      	ldr	r2, [pc, #156]	; (80059c8 <HAL_TIM_Base_Init+0x1a0>)
 800592c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2202      	movs	r2, #2
 800593a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	3304      	adds	r3, #4
 8005946:	4619      	mov	r1, r3
 8005948:	4610      	mov	r0, r2
 800594a:	f001 fbff 	bl	800714c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3708      	adds	r7, #8
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	40012c00 	.word	0x40012c00
 80059ac:	40013400 	.word	0x40013400
 80059b0:	40000400 	.word	0x40000400
 80059b4:	40000800 	.word	0x40000800
 80059b8:	40000c00 	.word	0x40000c00
 80059bc:	40001000 	.word	0x40001000
 80059c0:	40001400 	.word	0x40001400
 80059c4:	080113c4 	.word	0x080113c4
 80059c8:	08001f29 	.word	0x08001f29

080059cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a39      	ldr	r2, [pc, #228]	; (8005ac0 <HAL_TIM_Base_Start+0xf4>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d027      	beq.n	8005a2e <HAL_TIM_Base_Start+0x62>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a38      	ldr	r2, [pc, #224]	; (8005ac4 <HAL_TIM_Base_Start+0xf8>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d022      	beq.n	8005a2e <HAL_TIM_Base_Start+0x62>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f0:	d01d      	beq.n	8005a2e <HAL_TIM_Base_Start+0x62>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a34      	ldr	r2, [pc, #208]	; (8005ac8 <HAL_TIM_Base_Start+0xfc>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d018      	beq.n	8005a2e <HAL_TIM_Base_Start+0x62>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a32      	ldr	r2, [pc, #200]	; (8005acc <HAL_TIM_Base_Start+0x100>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d013      	beq.n	8005a2e <HAL_TIM_Base_Start+0x62>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a31      	ldr	r2, [pc, #196]	; (8005ad0 <HAL_TIM_Base_Start+0x104>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d00e      	beq.n	8005a2e <HAL_TIM_Base_Start+0x62>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a2f      	ldr	r2, [pc, #188]	; (8005ad4 <HAL_TIM_Base_Start+0x108>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d009      	beq.n	8005a2e <HAL_TIM_Base_Start+0x62>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a2e      	ldr	r2, [pc, #184]	; (8005ad8 <HAL_TIM_Base_Start+0x10c>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d004      	beq.n	8005a2e <HAL_TIM_Base_Start+0x62>
 8005a24:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8005a28:	482c      	ldr	r0, [pc, #176]	; (8005adc <HAL_TIM_Base_Start+0x110>)
 8005a2a:	f7fc f9d9 	bl	8001de0 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d001      	beq.n	8005a3e <HAL_TIM_Base_Start+0x72>
  {
    return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e03c      	b.n	8005ab8 <HAL_TIM_Base_Start+0xec>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2202      	movs	r2, #2
 8005a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a1d      	ldr	r2, [pc, #116]	; (8005ac0 <HAL_TIM_Base_Start+0xf4>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d018      	beq.n	8005a82 <HAL_TIM_Base_Start+0xb6>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a1b      	ldr	r2, [pc, #108]	; (8005ac4 <HAL_TIM_Base_Start+0xf8>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d013      	beq.n	8005a82 <HAL_TIM_Base_Start+0xb6>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a62:	d00e      	beq.n	8005a82 <HAL_TIM_Base_Start+0xb6>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a17      	ldr	r2, [pc, #92]	; (8005ac8 <HAL_TIM_Base_Start+0xfc>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d009      	beq.n	8005a82 <HAL_TIM_Base_Start+0xb6>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a16      	ldr	r2, [pc, #88]	; (8005acc <HAL_TIM_Base_Start+0x100>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d004      	beq.n	8005a82 <HAL_TIM_Base_Start+0xb6>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a14      	ldr	r2, [pc, #80]	; (8005ad0 <HAL_TIM_Base_Start+0x104>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d111      	bne.n	8005aa6 <HAL_TIM_Base_Start+0xda>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f003 0307 	and.w	r3, r3, #7
 8005a8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2b06      	cmp	r3, #6
 8005a92:	d010      	beq.n	8005ab6 <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f042 0201 	orr.w	r2, r2, #1
 8005aa2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aa4:	e007      	b.n	8005ab6 <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f042 0201 	orr.w	r2, r2, #1
 8005ab4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	40012c00 	.word	0x40012c00
 8005ac4:	40013400 	.word	0x40013400
 8005ac8:	40000400 	.word	0x40000400
 8005acc:	40000800 	.word	0x40000800
 8005ad0:	40000c00 	.word	0x40000c00
 8005ad4:	40001000 	.word	0x40001000
 8005ad8:	40001400 	.word	0x40001400
 8005adc:	080113c4 	.word	0x080113c4

08005ae0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a3d      	ldr	r2, [pc, #244]	; (8005be4 <HAL_TIM_Base_Start_IT+0x104>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d027      	beq.n	8005b42 <HAL_TIM_Base_Start_IT+0x62>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a3c      	ldr	r2, [pc, #240]	; (8005be8 <HAL_TIM_Base_Start_IT+0x108>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d022      	beq.n	8005b42 <HAL_TIM_Base_Start_IT+0x62>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b04:	d01d      	beq.n	8005b42 <HAL_TIM_Base_Start_IT+0x62>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a38      	ldr	r2, [pc, #224]	; (8005bec <HAL_TIM_Base_Start_IT+0x10c>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d018      	beq.n	8005b42 <HAL_TIM_Base_Start_IT+0x62>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a36      	ldr	r2, [pc, #216]	; (8005bf0 <HAL_TIM_Base_Start_IT+0x110>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d013      	beq.n	8005b42 <HAL_TIM_Base_Start_IT+0x62>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a35      	ldr	r2, [pc, #212]	; (8005bf4 <HAL_TIM_Base_Start_IT+0x114>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d00e      	beq.n	8005b42 <HAL_TIM_Base_Start_IT+0x62>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a33      	ldr	r2, [pc, #204]	; (8005bf8 <HAL_TIM_Base_Start_IT+0x118>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d009      	beq.n	8005b42 <HAL_TIM_Base_Start_IT+0x62>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a32      	ldr	r2, [pc, #200]	; (8005bfc <HAL_TIM_Base_Start_IT+0x11c>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d004      	beq.n	8005b42 <HAL_TIM_Base_Start_IT+0x62>
 8005b38:	f240 11cf 	movw	r1, #463	; 0x1cf
 8005b3c:	4830      	ldr	r0, [pc, #192]	; (8005c00 <HAL_TIM_Base_Start_IT+0x120>)
 8005b3e:	f7fc f94f 	bl	8001de0 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d001      	beq.n	8005b52 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e044      	b.n	8005bdc <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2202      	movs	r2, #2
 8005b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68da      	ldr	r2, [r3, #12]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f042 0201 	orr.w	r2, r2, #1
 8005b68:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a1d      	ldr	r2, [pc, #116]	; (8005be4 <HAL_TIM_Base_Start_IT+0x104>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d018      	beq.n	8005ba6 <HAL_TIM_Base_Start_IT+0xc6>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a1b      	ldr	r2, [pc, #108]	; (8005be8 <HAL_TIM_Base_Start_IT+0x108>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d013      	beq.n	8005ba6 <HAL_TIM_Base_Start_IT+0xc6>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b86:	d00e      	beq.n	8005ba6 <HAL_TIM_Base_Start_IT+0xc6>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a17      	ldr	r2, [pc, #92]	; (8005bec <HAL_TIM_Base_Start_IT+0x10c>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d009      	beq.n	8005ba6 <HAL_TIM_Base_Start_IT+0xc6>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a16      	ldr	r2, [pc, #88]	; (8005bf0 <HAL_TIM_Base_Start_IT+0x110>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d004      	beq.n	8005ba6 <HAL_TIM_Base_Start_IT+0xc6>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a14      	ldr	r2, [pc, #80]	; (8005bf4 <HAL_TIM_Base_Start_IT+0x114>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d111      	bne.n	8005bca <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f003 0307 	and.w	r3, r3, #7
 8005bb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2b06      	cmp	r3, #6
 8005bb6:	d010      	beq.n	8005bda <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f042 0201 	orr.w	r2, r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bc8:	e007      	b.n	8005bda <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f042 0201 	orr.w	r2, r2, #1
 8005bd8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	40012c00 	.word	0x40012c00
 8005be8:	40013400 	.word	0x40013400
 8005bec:	40000400 	.word	0x40000400
 8005bf0:	40000800 	.word	0x40000800
 8005bf4:	40000c00 	.word	0x40000c00
 8005bf8:	40001000 	.word	0x40001000
 8005bfc:	40001400 	.word	0x40001400
 8005c00:	080113c4 	.word	0x080113c4

08005c04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e0b2      	b.n	8005d7c <HAL_TIM_PWM_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a5a      	ldr	r2, [pc, #360]	; (8005d84 <HAL_TIM_PWM_Init+0x180>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d027      	beq.n	8005c70 <HAL_TIM_PWM_Init+0x6c>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a58      	ldr	r2, [pc, #352]	; (8005d88 <HAL_TIM_PWM_Init+0x184>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d022      	beq.n	8005c70 <HAL_TIM_PWM_Init+0x6c>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c32:	d01d      	beq.n	8005c70 <HAL_TIM_PWM_Init+0x6c>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a54      	ldr	r2, [pc, #336]	; (8005d8c <HAL_TIM_PWM_Init+0x188>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d018      	beq.n	8005c70 <HAL_TIM_PWM_Init+0x6c>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a53      	ldr	r2, [pc, #332]	; (8005d90 <HAL_TIM_PWM_Init+0x18c>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d013      	beq.n	8005c70 <HAL_TIM_PWM_Init+0x6c>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a51      	ldr	r2, [pc, #324]	; (8005d94 <HAL_TIM_PWM_Init+0x190>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d00e      	beq.n	8005c70 <HAL_TIM_PWM_Init+0x6c>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a50      	ldr	r2, [pc, #320]	; (8005d98 <HAL_TIM_PWM_Init+0x194>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d009      	beq.n	8005c70 <HAL_TIM_PWM_Init+0x6c>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a4e      	ldr	r2, [pc, #312]	; (8005d9c <HAL_TIM_PWM_Init+0x198>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d004      	beq.n	8005c70 <HAL_TIM_PWM_Init+0x6c>
 8005c66:	f240 5113 	movw	r1, #1299	; 0x513
 8005c6a:	484d      	ldr	r0, [pc, #308]	; (8005da0 <HAL_TIM_PWM_Init+0x19c>)
 8005c6c:	f7fc f8b8 	bl	8001de0 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d014      	beq.n	8005ca2 <HAL_TIM_PWM_Init+0x9e>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	2b10      	cmp	r3, #16
 8005c7e:	d010      	beq.n	8005ca2 <HAL_TIM_PWM_Init+0x9e>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	2b20      	cmp	r3, #32
 8005c86:	d00c      	beq.n	8005ca2 <HAL_TIM_PWM_Init+0x9e>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	2b40      	cmp	r3, #64	; 0x40
 8005c8e:	d008      	beq.n	8005ca2 <HAL_TIM_PWM_Init+0x9e>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	2b60      	cmp	r3, #96	; 0x60
 8005c96:	d004      	beq.n	8005ca2 <HAL_TIM_PWM_Init+0x9e>
 8005c98:	f240 5114 	movw	r1, #1300	; 0x514
 8005c9c:	4840      	ldr	r0, [pc, #256]	; (8005da0 <HAL_TIM_PWM_Init+0x19c>)
 8005c9e:	f7fc f89f 	bl	8001de0 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00e      	beq.n	8005cc8 <HAL_TIM_PWM_Init+0xc4>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cb2:	d009      	beq.n	8005cc8 <HAL_TIM_PWM_Init+0xc4>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cbc:	d004      	beq.n	8005cc8 <HAL_TIM_PWM_Init+0xc4>
 8005cbe:	f240 5115 	movw	r1, #1301	; 0x515
 8005cc2:	4837      	ldr	r0, [pc, #220]	; (8005da0 <HAL_TIM_PWM_Init+0x19c>)
 8005cc4:	f7fc f88c 	bl	8001de0 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d008      	beq.n	8005ce2 <HAL_TIM_PWM_Init+0xde>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	2b80      	cmp	r3, #128	; 0x80
 8005cd6:	d004      	beq.n	8005ce2 <HAL_TIM_PWM_Init+0xde>
 8005cd8:	f240 5116 	movw	r1, #1302	; 0x516
 8005cdc:	4830      	ldr	r0, [pc, #192]	; (8005da0 <HAL_TIM_PWM_Init+0x19c>)
 8005cde:	f7fc f87f 	bl	8001de0 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d111      	bne.n	8005d12 <HAL_TIM_PWM_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f001 fdd2 	bl	80078a0 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d102      	bne.n	8005d0a <HAL_TIM_PWM_Init+0x106>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a27      	ldr	r2, [pc, #156]	; (8005da4 <HAL_TIM_PWM_Init+0x1a0>)
 8005d08:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2202      	movs	r2, #2
 8005d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	3304      	adds	r3, #4
 8005d22:	4619      	mov	r1, r3
 8005d24:	4610      	mov	r0, r2
 8005d26:	f001 fa11 	bl	800714c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3708      	adds	r7, #8
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	40012c00 	.word	0x40012c00
 8005d88:	40013400 	.word	0x40013400
 8005d8c:	40000400 	.word	0x40000400
 8005d90:	40000800 	.word	0x40000800
 8005d94:	40000c00 	.word	0x40000c00
 8005d98:	40001000 	.word	0x40001000
 8005d9c:	40001400 	.word	0x40001400
 8005da0:	080113c4 	.word	0x080113c4
 8005da4:	08005da9 	.word	0x08005da9

08005da8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bc80      	pop	{r7}
 8005db8:	4770      	bx	lr
	...

08005dbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a8a      	ldr	r2, [pc, #552]	; (8005ff4 <HAL_TIM_PWM_Start+0x238>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d10b      	bne.n	8005de8 <HAL_TIM_PWM_Start+0x2c>
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d062      	beq.n	8005e9c <HAL_TIM_PWM_Start+0xe0>
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	2b04      	cmp	r3, #4
 8005dda:	d05f      	beq.n	8005e9c <HAL_TIM_PWM_Start+0xe0>
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	2b08      	cmp	r3, #8
 8005de0:	d05c      	beq.n	8005e9c <HAL_TIM_PWM_Start+0xe0>
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b0c      	cmp	r3, #12
 8005de6:	d059      	beq.n	8005e9c <HAL_TIM_PWM_Start+0xe0>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a82      	ldr	r2, [pc, #520]	; (8005ff8 <HAL_TIM_PWM_Start+0x23c>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d10b      	bne.n	8005e0a <HAL_TIM_PWM_Start+0x4e>
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d051      	beq.n	8005e9c <HAL_TIM_PWM_Start+0xe0>
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	2b04      	cmp	r3, #4
 8005dfc:	d04e      	beq.n	8005e9c <HAL_TIM_PWM_Start+0xe0>
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	2b08      	cmp	r3, #8
 8005e02:	d04b      	beq.n	8005e9c <HAL_TIM_PWM_Start+0xe0>
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	2b0c      	cmp	r3, #12
 8005e08:	d048      	beq.n	8005e9c <HAL_TIM_PWM_Start+0xe0>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e12:	d10b      	bne.n	8005e2c <HAL_TIM_PWM_Start+0x70>
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d040      	beq.n	8005e9c <HAL_TIM_PWM_Start+0xe0>
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	2b04      	cmp	r3, #4
 8005e1e:	d03d      	beq.n	8005e9c <HAL_TIM_PWM_Start+0xe0>
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	2b08      	cmp	r3, #8
 8005e24:	d03a      	beq.n	8005e9c <HAL_TIM_PWM_Start+0xe0>
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	2b0c      	cmp	r3, #12
 8005e2a:	d037      	beq.n	8005e9c <HAL_TIM_PWM_Start+0xe0>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a72      	ldr	r2, [pc, #456]	; (8005ffc <HAL_TIM_PWM_Start+0x240>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d10b      	bne.n	8005e4e <HAL_TIM_PWM_Start+0x92>
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d02f      	beq.n	8005e9c <HAL_TIM_PWM_Start+0xe0>
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	d02c      	beq.n	8005e9c <HAL_TIM_PWM_Start+0xe0>
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2b08      	cmp	r3, #8
 8005e46:	d029      	beq.n	8005e9c <HAL_TIM_PWM_Start+0xe0>
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	2b0c      	cmp	r3, #12
 8005e4c:	d026      	beq.n	8005e9c <HAL_TIM_PWM_Start+0xe0>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a6b      	ldr	r2, [pc, #428]	; (8006000 <HAL_TIM_PWM_Start+0x244>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d10b      	bne.n	8005e70 <HAL_TIM_PWM_Start+0xb4>
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d01e      	beq.n	8005e9c <HAL_TIM_PWM_Start+0xe0>
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	2b04      	cmp	r3, #4
 8005e62:	d01b      	beq.n	8005e9c <HAL_TIM_PWM_Start+0xe0>
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	2b08      	cmp	r3, #8
 8005e68:	d018      	beq.n	8005e9c <HAL_TIM_PWM_Start+0xe0>
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	2b0c      	cmp	r3, #12
 8005e6e:	d015      	beq.n	8005e9c <HAL_TIM_PWM_Start+0xe0>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a63      	ldr	r2, [pc, #396]	; (8006004 <HAL_TIM_PWM_Start+0x248>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d10b      	bne.n	8005e92 <HAL_TIM_PWM_Start+0xd6>
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00d      	beq.n	8005e9c <HAL_TIM_PWM_Start+0xe0>
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	2b04      	cmp	r3, #4
 8005e84:	d00a      	beq.n	8005e9c <HAL_TIM_PWM_Start+0xe0>
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b08      	cmp	r3, #8
 8005e8a:	d007      	beq.n	8005e9c <HAL_TIM_PWM_Start+0xe0>
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	2b0c      	cmp	r3, #12
 8005e90:	d004      	beq.n	8005e9c <HAL_TIM_PWM_Start+0xe0>
 8005e92:	f240 5199 	movw	r1, #1433	; 0x599
 8005e96:	485c      	ldr	r0, [pc, #368]	; (8006008 <HAL_TIM_PWM_Start+0x24c>)
 8005e98:	f7fb ffa2 	bl	8001de0 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d109      	bne.n	8005eb6 <HAL_TIM_PWM_Start+0xfa>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	bf14      	ite	ne
 8005eae:	2301      	movne	r3, #1
 8005eb0:	2300      	moveq	r3, #0
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	e022      	b.n	8005efc <HAL_TIM_PWM_Start+0x140>
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	2b04      	cmp	r3, #4
 8005eba:	d109      	bne.n	8005ed0 <HAL_TIM_PWM_Start+0x114>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	bf14      	ite	ne
 8005ec8:	2301      	movne	r3, #1
 8005eca:	2300      	moveq	r3, #0
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	e015      	b.n	8005efc <HAL_TIM_PWM_Start+0x140>
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	2b08      	cmp	r3, #8
 8005ed4:	d109      	bne.n	8005eea <HAL_TIM_PWM_Start+0x12e>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	bf14      	ite	ne
 8005ee2:	2301      	movne	r3, #1
 8005ee4:	2300      	moveq	r3, #0
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	e008      	b.n	8005efc <HAL_TIM_PWM_Start+0x140>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	bf14      	ite	ne
 8005ef6:	2301      	movne	r3, #1
 8005ef8:	2300      	moveq	r3, #0
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d001      	beq.n	8005f04 <HAL_TIM_PWM_Start+0x148>
  {
    return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e072      	b.n	8005fea <HAL_TIM_PWM_Start+0x22e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d104      	bne.n	8005f14 <HAL_TIM_PWM_Start+0x158>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f12:	e013      	b.n	8005f3c <HAL_TIM_PWM_Start+0x180>
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	2b04      	cmp	r3, #4
 8005f18:	d104      	bne.n	8005f24 <HAL_TIM_PWM_Start+0x168>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f22:	e00b      	b.n	8005f3c <HAL_TIM_PWM_Start+0x180>
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	2b08      	cmp	r3, #8
 8005f28:	d104      	bne.n	8005f34 <HAL_TIM_PWM_Start+0x178>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f32:	e003      	b.n	8005f3c <HAL_TIM_PWM_Start+0x180>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2202      	movs	r2, #2
 8005f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2201      	movs	r2, #1
 8005f42:	6839      	ldr	r1, [r7, #0]
 8005f44:	4618      	mov	r0, r3
 8005f46:	f001 fc4b 	bl	80077e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a29      	ldr	r2, [pc, #164]	; (8005ff4 <HAL_TIM_PWM_Start+0x238>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d004      	beq.n	8005f5e <HAL_TIM_PWM_Start+0x1a2>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a27      	ldr	r2, [pc, #156]	; (8005ff8 <HAL_TIM_PWM_Start+0x23c>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d101      	bne.n	8005f62 <HAL_TIM_PWM_Start+0x1a6>
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e000      	b.n	8005f64 <HAL_TIM_PWM_Start+0x1a8>
 8005f62:	2300      	movs	r3, #0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d007      	beq.n	8005f78 <HAL_TIM_PWM_Start+0x1bc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f76:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a1d      	ldr	r2, [pc, #116]	; (8005ff4 <HAL_TIM_PWM_Start+0x238>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d018      	beq.n	8005fb4 <HAL_TIM_PWM_Start+0x1f8>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a1c      	ldr	r2, [pc, #112]	; (8005ff8 <HAL_TIM_PWM_Start+0x23c>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d013      	beq.n	8005fb4 <HAL_TIM_PWM_Start+0x1f8>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f94:	d00e      	beq.n	8005fb4 <HAL_TIM_PWM_Start+0x1f8>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a18      	ldr	r2, [pc, #96]	; (8005ffc <HAL_TIM_PWM_Start+0x240>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d009      	beq.n	8005fb4 <HAL_TIM_PWM_Start+0x1f8>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a16      	ldr	r2, [pc, #88]	; (8006000 <HAL_TIM_PWM_Start+0x244>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d004      	beq.n	8005fb4 <HAL_TIM_PWM_Start+0x1f8>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a15      	ldr	r2, [pc, #84]	; (8006004 <HAL_TIM_PWM_Start+0x248>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d111      	bne.n	8005fd8 <HAL_TIM_PWM_Start+0x21c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f003 0307 	and.w	r3, r3, #7
 8005fbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2b06      	cmp	r3, #6
 8005fc4:	d010      	beq.n	8005fe8 <HAL_TIM_PWM_Start+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f042 0201 	orr.w	r2, r2, #1
 8005fd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fd6:	e007      	b.n	8005fe8 <HAL_TIM_PWM_Start+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f042 0201 	orr.w	r2, r2, #1
 8005fe6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	40012c00 	.word	0x40012c00
 8005ff8:	40013400 	.word	0x40013400
 8005ffc:	40000400 	.word	0x40000400
 8006000:	40000800 	.word	0x40000800
 8006004:	40000c00 	.word	0x40000c00
 8006008:	080113c4 	.word	0x080113c4

0800600c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d101      	bne.n	8006020 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800601c:	2301      	movs	r3, #1
 800601e:	e192      	b.n	8006346 <HAL_TIM_Encoder_Init+0x33a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a7d      	ldr	r2, [pc, #500]	; (800621c <HAL_TIM_Encoder_Init+0x210>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d01d      	beq.n	8006066 <HAL_TIM_Encoder_Init+0x5a>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a7c      	ldr	r2, [pc, #496]	; (8006220 <HAL_TIM_Encoder_Init+0x214>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d018      	beq.n	8006066 <HAL_TIM_Encoder_Init+0x5a>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800603c:	d013      	beq.n	8006066 <HAL_TIM_Encoder_Init+0x5a>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a78      	ldr	r2, [pc, #480]	; (8006224 <HAL_TIM_Encoder_Init+0x218>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d00e      	beq.n	8006066 <HAL_TIM_Encoder_Init+0x5a>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a76      	ldr	r2, [pc, #472]	; (8006228 <HAL_TIM_Encoder_Init+0x21c>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d009      	beq.n	8006066 <HAL_TIM_Encoder_Init+0x5a>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a75      	ldr	r2, [pc, #468]	; (800622c <HAL_TIM_Encoder_Init+0x220>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d004      	beq.n	8006066 <HAL_TIM_Encoder_Init+0x5a>
 800605c:	f640 318e 	movw	r1, #2958	; 0xb8e
 8006060:	4873      	ldr	r0, [pc, #460]	; (8006230 <HAL_TIM_Encoder_Init+0x224>)
 8006062:	f7fb febd 	bl	8001de0 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d014      	beq.n	8006098 <HAL_TIM_Encoder_Init+0x8c>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	2b10      	cmp	r3, #16
 8006074:	d010      	beq.n	8006098 <HAL_TIM_Encoder_Init+0x8c>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	2b20      	cmp	r3, #32
 800607c:	d00c      	beq.n	8006098 <HAL_TIM_Encoder_Init+0x8c>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	2b40      	cmp	r3, #64	; 0x40
 8006084:	d008      	beq.n	8006098 <HAL_TIM_Encoder_Init+0x8c>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	2b60      	cmp	r3, #96	; 0x60
 800608c:	d004      	beq.n	8006098 <HAL_TIM_Encoder_Init+0x8c>
 800608e:	f640 318f 	movw	r1, #2959	; 0xb8f
 8006092:	4867      	ldr	r0, [pc, #412]	; (8006230 <HAL_TIM_Encoder_Init+0x224>)
 8006094:	f7fb fea4 	bl	8001de0 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00e      	beq.n	80060be <HAL_TIM_Encoder_Init+0xb2>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	691b      	ldr	r3, [r3, #16]
 80060a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060a8:	d009      	beq.n	80060be <HAL_TIM_Encoder_Init+0xb2>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060b2:	d004      	beq.n	80060be <HAL_TIM_Encoder_Init+0xb2>
 80060b4:	f44f 6139 	mov.w	r1, #2960	; 0xb90
 80060b8:	485d      	ldr	r0, [pc, #372]	; (8006230 <HAL_TIM_Encoder_Init+0x224>)
 80060ba:	f7fb fe91 	bl	8001de0 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d008      	beq.n	80060d8 <HAL_TIM_Encoder_Init+0xcc>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	2b80      	cmp	r3, #128	; 0x80
 80060cc:	d004      	beq.n	80060d8 <HAL_TIM_Encoder_Init+0xcc>
 80060ce:	f640 3191 	movw	r1, #2961	; 0xb91
 80060d2:	4857      	ldr	r0, [pc, #348]	; (8006230 <HAL_TIM_Encoder_Init+0x224>)
 80060d4:	f7fb fe84 	bl	8001de0 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d00c      	beq.n	80060fa <HAL_TIM_Encoder_Init+0xee>
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d008      	beq.n	80060fa <HAL_TIM_Encoder_Init+0xee>
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2b03      	cmp	r3, #3
 80060ee:	d004      	beq.n	80060fa <HAL_TIM_Encoder_Init+0xee>
 80060f0:	f640 3192 	movw	r1, #2962	; 0xb92
 80060f4:	484e      	ldr	r0, [pc, #312]	; (8006230 <HAL_TIM_Encoder_Init+0x224>)
 80060f6:	f7fb fe73 	bl	8001de0 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d00c      	beq.n	800611c <HAL_TIM_Encoder_Init+0x110>
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	2b02      	cmp	r3, #2
 8006108:	d008      	beq.n	800611c <HAL_TIM_Encoder_Init+0x110>
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	2b03      	cmp	r3, #3
 8006110:	d004      	beq.n	800611c <HAL_TIM_Encoder_Init+0x110>
 8006112:	f640 3193 	movw	r1, #2963	; 0xb93
 8006116:	4846      	ldr	r0, [pc, #280]	; (8006230 <HAL_TIM_Encoder_Init+0x224>)
 8006118:	f7fb fe62 	bl	8001de0 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d00c      	beq.n	800613e <HAL_TIM_Encoder_Init+0x132>
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	2b02      	cmp	r3, #2
 800612a:	d008      	beq.n	800613e <HAL_TIM_Encoder_Init+0x132>
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	2b03      	cmp	r3, #3
 8006132:	d004      	beq.n	800613e <HAL_TIM_Encoder_Init+0x132>
 8006134:	f640 3194 	movw	r1, #2964	; 0xb94
 8006138:	483d      	ldr	r0, [pc, #244]	; (8006230 <HAL_TIM_Encoder_Init+0x224>)
 800613a:	f7fb fe51 	bl	8001de0 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d008      	beq.n	8006158 <HAL_TIM_Encoder_Init+0x14c>
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	2b02      	cmp	r3, #2
 800614c:	d004      	beq.n	8006158 <HAL_TIM_Encoder_Init+0x14c>
 800614e:	f640 3195 	movw	r1, #2965	; 0xb95
 8006152:	4837      	ldr	r0, [pc, #220]	; (8006230 <HAL_TIM_Encoder_Init+0x224>)
 8006154:	f7fb fe44 	bl	8001de0 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d008      	beq.n	8006172 <HAL_TIM_Encoder_Init+0x166>
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	2b02      	cmp	r3, #2
 8006166:	d004      	beq.n	8006172 <HAL_TIM_Encoder_Init+0x166>
 8006168:	f640 3196 	movw	r1, #2966	; 0xb96
 800616c:	4830      	ldr	r0, [pc, #192]	; (8006230 <HAL_TIM_Encoder_Init+0x224>)
 800616e:	f7fb fe37 	bl	8001de0 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d010      	beq.n	800619c <HAL_TIM_Encoder_Init+0x190>
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	2b04      	cmp	r3, #4
 8006180:	d00c      	beq.n	800619c <HAL_TIM_Encoder_Init+0x190>
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	2b08      	cmp	r3, #8
 8006188:	d008      	beq.n	800619c <HAL_TIM_Encoder_Init+0x190>
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	2b0c      	cmp	r3, #12
 8006190:	d004      	beq.n	800619c <HAL_TIM_Encoder_Init+0x190>
 8006192:	f640 3197 	movw	r1, #2967	; 0xb97
 8006196:	4826      	ldr	r0, [pc, #152]	; (8006230 <HAL_TIM_Encoder_Init+0x224>)
 8006198:	f7fb fe22 	bl	8001de0 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	69db      	ldr	r3, [r3, #28]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d010      	beq.n	80061c6 <HAL_TIM_Encoder_Init+0x1ba>
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	69db      	ldr	r3, [r3, #28]
 80061a8:	2b04      	cmp	r3, #4
 80061aa:	d00c      	beq.n	80061c6 <HAL_TIM_Encoder_Init+0x1ba>
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	69db      	ldr	r3, [r3, #28]
 80061b0:	2b08      	cmp	r3, #8
 80061b2:	d008      	beq.n	80061c6 <HAL_TIM_Encoder_Init+0x1ba>
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	69db      	ldr	r3, [r3, #28]
 80061b8:	2b0c      	cmp	r3, #12
 80061ba:	d004      	beq.n	80061c6 <HAL_TIM_Encoder_Init+0x1ba>
 80061bc:	f640 3198 	movw	r1, #2968	; 0xb98
 80061c0:	481b      	ldr	r0, [pc, #108]	; (8006230 <HAL_TIM_Encoder_Init+0x224>)
 80061c2:	f7fb fe0d 	bl	8001de0 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	2b0f      	cmp	r3, #15
 80061cc:	d904      	bls.n	80061d8 <HAL_TIM_Encoder_Init+0x1cc>
 80061ce:	f640 3199 	movw	r1, #2969	; 0xb99
 80061d2:	4817      	ldr	r0, [pc, #92]	; (8006230 <HAL_TIM_Encoder_Init+0x224>)
 80061d4:	f7fb fe04 	bl	8001de0 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	6a1b      	ldr	r3, [r3, #32]
 80061dc:	2b0f      	cmp	r3, #15
 80061de:	d904      	bls.n	80061ea <HAL_TIM_Encoder_Init+0x1de>
 80061e0:	f640 319a 	movw	r1, #2970	; 0xb9a
 80061e4:	4812      	ldr	r0, [pc, #72]	; (8006230 <HAL_TIM_Encoder_Init+0x224>)
 80061e6:	f7fb fdfb 	bl	8001de0 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d120      	bne.n	8006238 <HAL_TIM_Encoder_Init+0x22c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f001 fb4e 	bl	80078a0 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006208:	2b00      	cmp	r3, #0
 800620a:	d102      	bne.n	8006212 <HAL_TIM_Encoder_Init+0x206>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a09      	ldr	r2, [pc, #36]	; (8006234 <HAL_TIM_Encoder_Init+0x228>)
 8006210:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	4798      	blx	r3
 800621a:	e00d      	b.n	8006238 <HAL_TIM_Encoder_Init+0x22c>
 800621c:	40012c00 	.word	0x40012c00
 8006220:	40013400 	.word	0x40013400
 8006224:	40000400 	.word	0x40000400
 8006228:	40000800 	.word	0x40000800
 800622c:	40000c00 	.word	0x40000c00
 8006230:	080113c4 	.word	0x080113c4
 8006234:	08001ffd 	.word	0x08001ffd
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2202      	movs	r2, #2
 800623c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	6812      	ldr	r2, [r2, #0]
 800624a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800624e:	f023 0307 	bic.w	r3, r3, #7
 8006252:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	3304      	adds	r3, #4
 800625c:	4619      	mov	r1, r3
 800625e:	4610      	mov	r0, r2
 8006260:	f000 ff74 	bl	800714c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	697a      	ldr	r2, [r7, #20]
 8006282:	4313      	orrs	r3, r2
 8006284:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800628c:	f023 0303 	bic.w	r3, r3, #3
 8006290:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	689a      	ldr	r2, [r3, #8]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	021b      	lsls	r3, r3, #8
 800629c:	4313      	orrs	r3, r2
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80062aa:	f023 030c 	bic.w	r3, r3, #12
 80062ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	68da      	ldr	r2, [r3, #12]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	69db      	ldr	r3, [r3, #28]
 80062c4:	021b      	lsls	r3, r3, #8
 80062c6:	4313      	orrs	r3, r2
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	011a      	lsls	r2, r3, #4
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	031b      	lsls	r3, r3, #12
 80062da:	4313      	orrs	r3, r2
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	4313      	orrs	r3, r2
 80062e0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80062e8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	695b      	ldr	r3, [r3, #20]
 80062f2:	011b      	lsls	r3, r3, #4
 80062f4:	4313      	orrs	r3, r2
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3718      	adds	r7, #24
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop

08006350 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006360:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006368:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006370:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006378:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a5d      	ldr	r2, [pc, #372]	; (80064f4 <HAL_TIM_Encoder_Start_IT+0x1a4>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d01d      	beq.n	80063c0 <HAL_TIM_Encoder_Start_IT+0x70>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a5b      	ldr	r2, [pc, #364]	; (80064f8 <HAL_TIM_Encoder_Start_IT+0x1a8>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d018      	beq.n	80063c0 <HAL_TIM_Encoder_Start_IT+0x70>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006396:	d013      	beq.n	80063c0 <HAL_TIM_Encoder_Start_IT+0x70>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a57      	ldr	r2, [pc, #348]	; (80064fc <HAL_TIM_Encoder_Start_IT+0x1ac>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d00e      	beq.n	80063c0 <HAL_TIM_Encoder_Start_IT+0x70>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a56      	ldr	r2, [pc, #344]	; (8006500 <HAL_TIM_Encoder_Start_IT+0x1b0>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d009      	beq.n	80063c0 <HAL_TIM_Encoder_Start_IT+0x70>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a54      	ldr	r2, [pc, #336]	; (8006504 <HAL_TIM_Encoder_Start_IT+0x1b4>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d004      	beq.n	80063c0 <HAL_TIM_Encoder_Start_IT+0x70>
 80063b6:	f640 41e4 	movw	r1, #3300	; 0xce4
 80063ba:	4853      	ldr	r0, [pc, #332]	; (8006508 <HAL_TIM_Encoder_Start_IT+0x1b8>)
 80063bc:	f7fb fd10 	bl	8001de0 <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d110      	bne.n	80063e8 <HAL_TIM_Encoder_Start_IT+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80063c6:	7bfb      	ldrb	r3, [r7, #15]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d102      	bne.n	80063d2 <HAL_TIM_Encoder_Start_IT+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80063cc:	7b7b      	ldrb	r3, [r7, #13]
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d001      	beq.n	80063d6 <HAL_TIM_Encoder_Start_IT+0x86>
    {
      return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e089      	b.n	80064ea <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2202      	movs	r2, #2
 80063da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2202      	movs	r2, #2
 80063e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063e6:	e031      	b.n	800644c <HAL_TIM_Encoder_Start_IT+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	2b04      	cmp	r3, #4
 80063ec:	d110      	bne.n	8006410 <HAL_TIM_Encoder_Start_IT+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80063ee:	7bbb      	ldrb	r3, [r7, #14]
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d102      	bne.n	80063fa <HAL_TIM_Encoder_Start_IT+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80063f4:	7b3b      	ldrb	r3, [r7, #12]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d001      	beq.n	80063fe <HAL_TIM_Encoder_Start_IT+0xae>
    {
      return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e075      	b.n	80064ea <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2202      	movs	r2, #2
 8006402:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2202      	movs	r2, #2
 800640a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800640e:	e01d      	b.n	800644c <HAL_TIM_Encoder_Start_IT+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006410:	7bfb      	ldrb	r3, [r7, #15]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d108      	bne.n	8006428 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006416:	7bbb      	ldrb	r3, [r7, #14]
 8006418:	2b01      	cmp	r3, #1
 800641a:	d105      	bne.n	8006428 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800641c:	7b7b      	ldrb	r3, [r7, #13]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d102      	bne.n	8006428 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006422:	7b3b      	ldrb	r3, [r7, #12]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d001      	beq.n	800642c <HAL_TIM_Encoder_Start_IT+0xdc>
    {
      return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e05e      	b.n	80064ea <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2202      	movs	r2, #2
 8006430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2202      	movs	r2, #2
 8006440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d003      	beq.n	800645a <HAL_TIM_Encoder_Start_IT+0x10a>
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	2b04      	cmp	r3, #4
 8006456:	d010      	beq.n	800647a <HAL_TIM_Encoder_Start_IT+0x12a>
 8006458:	e01f      	b.n	800649a <HAL_TIM_Encoder_Start_IT+0x14a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2201      	movs	r2, #1
 8006460:	2100      	movs	r1, #0
 8006462:	4618      	mov	r0, r3
 8006464:	f001 f9bc 	bl	80077e0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68da      	ldr	r2, [r3, #12]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f042 0202 	orr.w	r2, r2, #2
 8006476:	60da      	str	r2, [r3, #12]
      break;
 8006478:	e02e      	b.n	80064d8 <HAL_TIM_Encoder_Start_IT+0x188>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2201      	movs	r2, #1
 8006480:	2104      	movs	r1, #4
 8006482:	4618      	mov	r0, r3
 8006484:	f001 f9ac 	bl	80077e0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68da      	ldr	r2, [r3, #12]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f042 0204 	orr.w	r2, r2, #4
 8006496:	60da      	str	r2, [r3, #12]
      break;
 8006498:	e01e      	b.n	80064d8 <HAL_TIM_Encoder_Start_IT+0x188>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2201      	movs	r2, #1
 80064a0:	2100      	movs	r1, #0
 80064a2:	4618      	mov	r0, r3
 80064a4:	f001 f99c 	bl	80077e0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2201      	movs	r2, #1
 80064ae:	2104      	movs	r1, #4
 80064b0:	4618      	mov	r0, r3
 80064b2:	f001 f995 	bl	80077e0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68da      	ldr	r2, [r3, #12]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f042 0202 	orr.w	r2, r2, #2
 80064c4:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68da      	ldr	r2, [r3, #12]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f042 0204 	orr.w	r2, r2, #4
 80064d4:	60da      	str	r2, [r3, #12]
      break;
 80064d6:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f042 0201 	orr.w	r2, r2, #1
 80064e6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	40012c00 	.word	0x40012c00
 80064f8:	40013400 	.word	0x40013400
 80064fc:	40000400 	.word	0x40000400
 8006500:	40000800 	.word	0x40000800
 8006504:	40000c00 	.word	0x40000c00
 8006508:	080113c4 	.word	0x080113c4

0800650c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b02      	cmp	r3, #2
 8006520:	d128      	bne.n	8006574 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	f003 0302 	and.w	r3, r3, #2
 800652c:	2b02      	cmp	r3, #2
 800652e:	d121      	bne.n	8006574 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f06f 0202 	mvn.w	r2, #2
 8006538:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2201      	movs	r2, #1
 800653e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	f003 0303 	and.w	r3, r3, #3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d005      	beq.n	800655a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	4798      	blx	r3
 8006558:	e009      	b.n	800656e <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	f003 0304 	and.w	r3, r3, #4
 800657e:	2b04      	cmp	r3, #4
 8006580:	d128      	bne.n	80065d4 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	f003 0304 	and.w	r3, r3, #4
 800658c:	2b04      	cmp	r3, #4
 800658e:	d121      	bne.n	80065d4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f06f 0204 	mvn.w	r2, #4
 8006598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2202      	movs	r2, #2
 800659e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d005      	beq.n	80065ba <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	4798      	blx	r3
 80065b8:	e009      	b.n	80065ce <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	f003 0308 	and.w	r3, r3, #8
 80065de:	2b08      	cmp	r3, #8
 80065e0:	d128      	bne.n	8006634 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	f003 0308 	and.w	r3, r3, #8
 80065ec:	2b08      	cmp	r3, #8
 80065ee:	d121      	bne.n	8006634 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f06f 0208 	mvn.w	r2, #8
 80065f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2204      	movs	r2, #4
 80065fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	69db      	ldr	r3, [r3, #28]
 8006606:	f003 0303 	and.w	r3, r3, #3
 800660a:	2b00      	cmp	r3, #0
 800660c:	d005      	beq.n	800661a <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	4798      	blx	r3
 8006618:	e009      	b.n	800662e <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	f003 0310 	and.w	r3, r3, #16
 800663e:	2b10      	cmp	r3, #16
 8006640:	d128      	bne.n	8006694 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	f003 0310 	and.w	r3, r3, #16
 800664c:	2b10      	cmp	r3, #16
 800664e:	d121      	bne.n	8006694 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f06f 0210 	mvn.w	r2, #16
 8006658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2208      	movs	r2, #8
 800665e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	69db      	ldr	r3, [r3, #28]
 8006666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800666a:	2b00      	cmp	r3, #0
 800666c:	d005      	beq.n	800667a <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	4798      	blx	r3
 8006678:	e009      	b.n	800668e <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	f003 0301 	and.w	r3, r3, #1
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d110      	bne.n	80066c4 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	f003 0301 	and.w	r3, r3, #1
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d109      	bne.n	80066c4 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f06f 0201 	mvn.w	r2, #1
 80066b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ce:	2b80      	cmp	r3, #128	; 0x80
 80066d0:	d110      	bne.n	80066f4 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066dc:	2b80      	cmp	r3, #128	; 0x80
 80066de:	d109      	bne.n	80066f4 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066fe:	2b40      	cmp	r3, #64	; 0x40
 8006700:	d110      	bne.n	8006724 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800670c:	2b40      	cmp	r3, #64	; 0x40
 800670e:	d109      	bne.n	8006724 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	f003 0320 	and.w	r3, r3, #32
 800672e:	2b20      	cmp	r3, #32
 8006730:	d110      	bne.n	8006754 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	f003 0320 	and.w	r3, r3, #32
 800673c:	2b20      	cmp	r3, #32
 800673e:	d109      	bne.n	8006754 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f06f 0220 	mvn.w	r2, #32
 8006748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006754:	bf00      	nop
 8006756:	3708      	adds	r7, #8
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d010      	beq.n	8006790 <HAL_TIM_PWM_ConfigChannel+0x34>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2b04      	cmp	r3, #4
 8006772:	d00d      	beq.n	8006790 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2b08      	cmp	r3, #8
 8006778:	d00a      	beq.n	8006790 <HAL_TIM_PWM_ConfigChannel+0x34>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2b0c      	cmp	r3, #12
 800677e:	d007      	beq.n	8006790 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2b3c      	cmp	r3, #60	; 0x3c
 8006784:	d004      	beq.n	8006790 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006786:	f241 0127 	movw	r1, #4135	; 0x1027
 800678a:	4890      	ldr	r0, [pc, #576]	; (80069cc <HAL_TIM_PWM_ConfigChannel+0x270>)
 800678c:	f7fb fb28 	bl	8001de0 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2b60      	cmp	r3, #96	; 0x60
 8006796:	d008      	beq.n	80067aa <HAL_TIM_PWM_ConfigChannel+0x4e>
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2b70      	cmp	r3, #112	; 0x70
 800679e:	d004      	beq.n	80067aa <HAL_TIM_PWM_ConfigChannel+0x4e>
 80067a0:	f241 0128 	movw	r1, #4136	; 0x1028
 80067a4:	4889      	ldr	r0, [pc, #548]	; (80069cc <HAL_TIM_PWM_ConfigChannel+0x270>)
 80067a6:	f7fb fb1b 	bl	8001de0 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d008      	beq.n	80067c4 <HAL_TIM_PWM_ConfigChannel+0x68>
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d004      	beq.n	80067c4 <HAL_TIM_PWM_ConfigChannel+0x68>
 80067ba:	f241 0129 	movw	r1, #4137	; 0x1029
 80067be:	4883      	ldr	r0, [pc, #524]	; (80069cc <HAL_TIM_PWM_ConfigChannel+0x270>)
 80067c0:	f7fb fb0e 	bl	8001de0 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	691b      	ldr	r3, [r3, #16]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d008      	beq.n	80067de <HAL_TIM_PWM_ConfigChannel+0x82>
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	2b04      	cmp	r3, #4
 80067d2:	d004      	beq.n	80067de <HAL_TIM_PWM_ConfigChannel+0x82>
 80067d4:	f241 012a 	movw	r1, #4138	; 0x102a
 80067d8:	487c      	ldr	r0, [pc, #496]	; (80069cc <HAL_TIM_PWM_ConfigChannel+0x270>)
 80067da:	f7fb fb01 	bl	8001de0 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d101      	bne.n	80067ec <HAL_TIM_PWM_ConfigChannel+0x90>
 80067e8:	2302      	movs	r3, #2
 80067ea:	e145      	b.n	8006a78 <HAL_TIM_PWM_ConfigChannel+0x31c>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b0c      	cmp	r3, #12
 80067f8:	f200 8138 	bhi.w	8006a6c <HAL_TIM_PWM_ConfigChannel+0x310>
 80067fc:	a201      	add	r2, pc, #4	; (adr r2, 8006804 <HAL_TIM_PWM_ConfigChannel+0xa8>)
 80067fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006802:	bf00      	nop
 8006804:	08006839 	.word	0x08006839
 8006808:	08006a6d 	.word	0x08006a6d
 800680c:	08006a6d 	.word	0x08006a6d
 8006810:	08006a6d 	.word	0x08006a6d
 8006814:	080068bf 	.word	0x080068bf
 8006818:	08006a6d 	.word	0x08006a6d
 800681c:	08006a6d 	.word	0x08006a6d
 8006820:	08006a6d 	.word	0x08006a6d
 8006824:	08006947 	.word	0x08006947
 8006828:	08006a6d 	.word	0x08006a6d
 800682c:	08006a6d 	.word	0x08006a6d
 8006830:	08006a6d 	.word	0x08006a6d
 8006834:	080069e5 	.word	0x080069e5
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a64      	ldr	r2, [pc, #400]	; (80069d0 <HAL_TIM_PWM_ConfigChannel+0x274>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d01d      	beq.n	800687e <HAL_TIM_PWM_ConfigChannel+0x122>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a63      	ldr	r2, [pc, #396]	; (80069d4 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d018      	beq.n	800687e <HAL_TIM_PWM_ConfigChannel+0x122>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006854:	d013      	beq.n	800687e <HAL_TIM_PWM_ConfigChannel+0x122>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a5f      	ldr	r2, [pc, #380]	; (80069d8 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d00e      	beq.n	800687e <HAL_TIM_PWM_ConfigChannel+0x122>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a5d      	ldr	r2, [pc, #372]	; (80069dc <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d009      	beq.n	800687e <HAL_TIM_PWM_ConfigChannel+0x122>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a5c      	ldr	r2, [pc, #368]	; (80069e0 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d004      	beq.n	800687e <HAL_TIM_PWM_ConfigChannel+0x122>
 8006874:	f241 0134 	movw	r1, #4148	; 0x1034
 8006878:	4854      	ldr	r0, [pc, #336]	; (80069cc <HAL_TIM_PWM_ConfigChannel+0x270>)
 800687a:	f7fb fab1 	bl	8001de0 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68b9      	ldr	r1, [r7, #8]
 8006884:	4618      	mov	r0, r3
 8006886:	f000 fcdb 	bl	8007240 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	699a      	ldr	r2, [r3, #24]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f042 0208 	orr.w	r2, r2, #8
 8006898:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	699a      	ldr	r2, [r3, #24]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f022 0204 	bic.w	r2, r2, #4
 80068a8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	6999      	ldr	r1, [r3, #24]
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	691a      	ldr	r2, [r3, #16]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	430a      	orrs	r2, r1
 80068ba:	619a      	str	r2, [r3, #24]
      break;
 80068bc:	e0d7      	b.n	8006a6e <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a43      	ldr	r2, [pc, #268]	; (80069d0 <HAL_TIM_PWM_ConfigChannel+0x274>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d01d      	beq.n	8006904 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a41      	ldr	r2, [pc, #260]	; (80069d4 <HAL_TIM_PWM_ConfigChannel+0x278>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d018      	beq.n	8006904 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068da:	d013      	beq.n	8006904 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a3d      	ldr	r2, [pc, #244]	; (80069d8 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d00e      	beq.n	8006904 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a3c      	ldr	r2, [pc, #240]	; (80069dc <HAL_TIM_PWM_ConfigChannel+0x280>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d009      	beq.n	8006904 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a3a      	ldr	r2, [pc, #232]	; (80069e0 <HAL_TIM_PWM_ConfigChannel+0x284>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d004      	beq.n	8006904 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80068fa:	f241 0145 	movw	r1, #4165	; 0x1045
 80068fe:	4833      	ldr	r0, [pc, #204]	; (80069cc <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006900:	f7fb fa6e 	bl	8001de0 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68b9      	ldr	r1, [r7, #8]
 800690a:	4618      	mov	r0, r3
 800690c:	f000 fd32 	bl	8007374 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	699a      	ldr	r2, [r3, #24]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800691e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	699a      	ldr	r2, [r3, #24]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800692e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	6999      	ldr	r1, [r3, #24]
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	021a      	lsls	r2, r3, #8
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	430a      	orrs	r2, r1
 8006942:	619a      	str	r2, [r3, #24]
      break;
 8006944:	e093      	b.n	8006a6e <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a21      	ldr	r2, [pc, #132]	; (80069d0 <HAL_TIM_PWM_ConfigChannel+0x274>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d01d      	beq.n	800698c <HAL_TIM_PWM_ConfigChannel+0x230>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a1f      	ldr	r2, [pc, #124]	; (80069d4 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d018      	beq.n	800698c <HAL_TIM_PWM_ConfigChannel+0x230>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006962:	d013      	beq.n	800698c <HAL_TIM_PWM_ConfigChannel+0x230>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a1b      	ldr	r2, [pc, #108]	; (80069d8 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d00e      	beq.n	800698c <HAL_TIM_PWM_ConfigChannel+0x230>
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a1a      	ldr	r2, [pc, #104]	; (80069dc <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d009      	beq.n	800698c <HAL_TIM_PWM_ConfigChannel+0x230>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a18      	ldr	r2, [pc, #96]	; (80069e0 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d004      	beq.n	800698c <HAL_TIM_PWM_ConfigChannel+0x230>
 8006982:	f241 0156 	movw	r1, #4182	; 0x1056
 8006986:	4811      	ldr	r0, [pc, #68]	; (80069cc <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006988:	f7fb fa2a 	bl	8001de0 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68b9      	ldr	r1, [r7, #8]
 8006992:	4618      	mov	r0, r3
 8006994:	f000 fd8c 	bl	80074b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	69da      	ldr	r2, [r3, #28]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f042 0208 	orr.w	r2, r2, #8
 80069a6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	69da      	ldr	r2, [r3, #28]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f022 0204 	bic.w	r2, r2, #4
 80069b6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	69d9      	ldr	r1, [r3, #28]
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	691a      	ldr	r2, [r3, #16]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	61da      	str	r2, [r3, #28]
      break;
 80069ca:	e050      	b.n	8006a6e <HAL_TIM_PWM_ConfigChannel+0x312>
 80069cc:	080113c4 	.word	0x080113c4
 80069d0:	40012c00 	.word	0x40012c00
 80069d4:	40013400 	.word	0x40013400
 80069d8:	40000400 	.word	0x40000400
 80069dc:	40000800 	.word	0x40000800
 80069e0:	40000c00 	.word	0x40000c00
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a25      	ldr	r2, [pc, #148]	; (8006a80 <HAL_TIM_PWM_ConfigChannel+0x324>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d01d      	beq.n	8006a2a <HAL_TIM_PWM_ConfigChannel+0x2ce>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a24      	ldr	r2, [pc, #144]	; (8006a84 <HAL_TIM_PWM_ConfigChannel+0x328>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d018      	beq.n	8006a2a <HAL_TIM_PWM_ConfigChannel+0x2ce>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a00:	d013      	beq.n	8006a2a <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a20      	ldr	r2, [pc, #128]	; (8006a88 <HAL_TIM_PWM_ConfigChannel+0x32c>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d00e      	beq.n	8006a2a <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a1e      	ldr	r2, [pc, #120]	; (8006a8c <HAL_TIM_PWM_ConfigChannel+0x330>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d009      	beq.n	8006a2a <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a1d      	ldr	r2, [pc, #116]	; (8006a90 <HAL_TIM_PWM_ConfigChannel+0x334>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d004      	beq.n	8006a2a <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006a20:	f241 0167 	movw	r1, #4199	; 0x1067
 8006a24:	481b      	ldr	r0, [pc, #108]	; (8006a94 <HAL_TIM_PWM_ConfigChannel+0x338>)
 8006a26:	f7fb f9db 	bl	8001de0 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68b9      	ldr	r1, [r7, #8]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f000 fddb 	bl	80075ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	69da      	ldr	r2, [r3, #28]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	69da      	ldr	r2, [r3, #28]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	69d9      	ldr	r1, [r3, #28]
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	021a      	lsls	r2, r3, #8
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	430a      	orrs	r2, r1
 8006a68:	61da      	str	r2, [r3, #28]
      break;
 8006a6a:	e000      	b.n	8006a6e <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    default:
      break;
 8006a6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	40012c00 	.word	0x40012c00
 8006a84:	40013400 	.word	0x40013400
 8006a88:	40000400 	.word	0x40000400
 8006a8c:	40000800 	.word	0x40000800
 8006a90:	40000c00 	.word	0x40000c00
 8006a94:	080113c4 	.word	0x080113c4

08006a98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d101      	bne.n	8006ab0 <HAL_TIM_ConfigClockSource+0x18>
 8006aac:	2302      	movs	r3, #2
 8006aae:	e2f5      	b.n	800709c <HAL_TIM_ConfigClockSource+0x604>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2202      	movs	r2, #2
 8006abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ac8:	d029      	beq.n	8006b1e <HAL_TIM_ConfigClockSource+0x86>
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ad2:	d024      	beq.n	8006b1e <HAL_TIM_ConfigClockSource+0x86>
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d020      	beq.n	8006b1e <HAL_TIM_ConfigClockSource+0x86>
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2b10      	cmp	r3, #16
 8006ae2:	d01c      	beq.n	8006b1e <HAL_TIM_ConfigClockSource+0x86>
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2b20      	cmp	r3, #32
 8006aea:	d018      	beq.n	8006b1e <HAL_TIM_ConfigClockSource+0x86>
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2b30      	cmp	r3, #48	; 0x30
 8006af2:	d014      	beq.n	8006b1e <HAL_TIM_ConfigClockSource+0x86>
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b40      	cmp	r3, #64	; 0x40
 8006afa:	d010      	beq.n	8006b1e <HAL_TIM_ConfigClockSource+0x86>
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2b50      	cmp	r3, #80	; 0x50
 8006b02:	d00c      	beq.n	8006b1e <HAL_TIM_ConfigClockSource+0x86>
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2b60      	cmp	r3, #96	; 0x60
 8006b0a:	d008      	beq.n	8006b1e <HAL_TIM_ConfigClockSource+0x86>
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b70      	cmp	r3, #112	; 0x70
 8006b12:	d004      	beq.n	8006b1e <HAL_TIM_ConfigClockSource+0x86>
 8006b14:	f241 4132 	movw	r1, #5170	; 0x1432
 8006b18:	487c      	ldr	r0, [pc, #496]	; (8006d0c <HAL_TIM_ConfigClockSource+0x274>)
 8006b1a:	f7fb f961 	bl	8001de0 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b2c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b34:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b46:	f000 80f1 	beq.w	8006d2c <HAL_TIM_ConfigClockSource+0x294>
 8006b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b4e:	f200 8299 	bhi.w	8007084 <HAL_TIM_ConfigClockSource+0x5ec>
 8006b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b56:	d02d      	beq.n	8006bb4 <HAL_TIM_ConfigClockSource+0x11c>
 8006b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b5c:	f200 8292 	bhi.w	8007084 <HAL_TIM_ConfigClockSource+0x5ec>
 8006b60:	2b70      	cmp	r3, #112	; 0x70
 8006b62:	d05d      	beq.n	8006c20 <HAL_TIM_ConfigClockSource+0x188>
 8006b64:	2b70      	cmp	r3, #112	; 0x70
 8006b66:	f200 828d 	bhi.w	8007084 <HAL_TIM_ConfigClockSource+0x5ec>
 8006b6a:	2b60      	cmp	r3, #96	; 0x60
 8006b6c:	f000 81a5 	beq.w	8006eba <HAL_TIM_ConfigClockSource+0x422>
 8006b70:	2b60      	cmp	r3, #96	; 0x60
 8006b72:	f200 8287 	bhi.w	8007084 <HAL_TIM_ConfigClockSource+0x5ec>
 8006b76:	2b50      	cmp	r3, #80	; 0x50
 8006b78:	f000 8149 	beq.w	8006e0e <HAL_TIM_ConfigClockSource+0x376>
 8006b7c:	2b50      	cmp	r3, #80	; 0x50
 8006b7e:	f200 8281 	bhi.w	8007084 <HAL_TIM_ConfigClockSource+0x5ec>
 8006b82:	2b40      	cmp	r3, #64	; 0x40
 8006b84:	f000 81fc 	beq.w	8006f80 <HAL_TIM_ConfigClockSource+0x4e8>
 8006b88:	2b40      	cmp	r3, #64	; 0x40
 8006b8a:	f200 827b 	bhi.w	8007084 <HAL_TIM_ConfigClockSource+0x5ec>
 8006b8e:	2b30      	cmp	r3, #48	; 0x30
 8006b90:	f000 824c 	beq.w	800702c <HAL_TIM_ConfigClockSource+0x594>
 8006b94:	2b30      	cmp	r3, #48	; 0x30
 8006b96:	f200 8275 	bhi.w	8007084 <HAL_TIM_ConfigClockSource+0x5ec>
 8006b9a:	2b20      	cmp	r3, #32
 8006b9c:	f000 8246 	beq.w	800702c <HAL_TIM_ConfigClockSource+0x594>
 8006ba0:	2b20      	cmp	r3, #32
 8006ba2:	f200 826f 	bhi.w	8007084 <HAL_TIM_ConfigClockSource+0x5ec>
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	f000 8240 	beq.w	800702c <HAL_TIM_ConfigClockSource+0x594>
 8006bac:	2b10      	cmp	r3, #16
 8006bae:	f000 823d 	beq.w	800702c <HAL_TIM_ConfigClockSource+0x594>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006bb2:	e267      	b.n	8007084 <HAL_TIM_ConfigClockSource+0x5ec>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a55      	ldr	r2, [pc, #340]	; (8006d10 <HAL_TIM_ConfigClockSource+0x278>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	f000 8264 	beq.w	8007088 <HAL_TIM_ConfigClockSource+0x5f0>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a53      	ldr	r2, [pc, #332]	; (8006d14 <HAL_TIM_ConfigClockSource+0x27c>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	f000 825e 	beq.w	8007088 <HAL_TIM_ConfigClockSource+0x5f0>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bd4:	f000 8258 	beq.w	8007088 <HAL_TIM_ConfigClockSource+0x5f0>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a4e      	ldr	r2, [pc, #312]	; (8006d18 <HAL_TIM_ConfigClockSource+0x280>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	f000 8252 	beq.w	8007088 <HAL_TIM_ConfigClockSource+0x5f0>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a4c      	ldr	r2, [pc, #304]	; (8006d1c <HAL_TIM_ConfigClockSource+0x284>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	f000 824c 	beq.w	8007088 <HAL_TIM_ConfigClockSource+0x5f0>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a4a      	ldr	r2, [pc, #296]	; (8006d20 <HAL_TIM_ConfigClockSource+0x288>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	f000 8246 	beq.w	8007088 <HAL_TIM_ConfigClockSource+0x5f0>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a48      	ldr	r2, [pc, #288]	; (8006d24 <HAL_TIM_ConfigClockSource+0x28c>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	f000 8240 	beq.w	8007088 <HAL_TIM_ConfigClockSource+0x5f0>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a46      	ldr	r2, [pc, #280]	; (8006d28 <HAL_TIM_ConfigClockSource+0x290>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	f000 823a 	beq.w	8007088 <HAL_TIM_ConfigClockSource+0x5f0>
 8006c14:	f241 413e 	movw	r1, #5182	; 0x143e
 8006c18:	483c      	ldr	r0, [pc, #240]	; (8006d0c <HAL_TIM_ConfigClockSource+0x274>)
 8006c1a:	f7fb f8e1 	bl	8001de0 <assert_failed>
      break;
 8006c1e:	e233      	b.n	8007088 <HAL_TIM_ConfigClockSource+0x5f0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a3a      	ldr	r2, [pc, #232]	; (8006d10 <HAL_TIM_ConfigClockSource+0x278>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d01d      	beq.n	8006c66 <HAL_TIM_ConfigClockSource+0x1ce>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a39      	ldr	r2, [pc, #228]	; (8006d14 <HAL_TIM_ConfigClockSource+0x27c>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d018      	beq.n	8006c66 <HAL_TIM_ConfigClockSource+0x1ce>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c3c:	d013      	beq.n	8006c66 <HAL_TIM_ConfigClockSource+0x1ce>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a35      	ldr	r2, [pc, #212]	; (8006d18 <HAL_TIM_ConfigClockSource+0x280>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d00e      	beq.n	8006c66 <HAL_TIM_ConfigClockSource+0x1ce>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a33      	ldr	r2, [pc, #204]	; (8006d1c <HAL_TIM_ConfigClockSource+0x284>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d009      	beq.n	8006c66 <HAL_TIM_ConfigClockSource+0x1ce>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a32      	ldr	r2, [pc, #200]	; (8006d20 <HAL_TIM_ConfigClockSource+0x288>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d004      	beq.n	8006c66 <HAL_TIM_ConfigClockSource+0x1ce>
 8006c5c:	f241 4145 	movw	r1, #5189	; 0x1445
 8006c60:	482a      	ldr	r0, [pc, #168]	; (8006d0c <HAL_TIM_ConfigClockSource+0x274>)
 8006c62:	f7fb f8bd 	bl	8001de0 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d013      	beq.n	8006c96 <HAL_TIM_ConfigClockSource+0x1fe>
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c76:	d00e      	beq.n	8006c96 <HAL_TIM_ConfigClockSource+0x1fe>
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c80:	d009      	beq.n	8006c96 <HAL_TIM_ConfigClockSource+0x1fe>
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c8a:	d004      	beq.n	8006c96 <HAL_TIM_ConfigClockSource+0x1fe>
 8006c8c:	f241 4148 	movw	r1, #5192	; 0x1448
 8006c90:	481e      	ldr	r0, [pc, #120]	; (8006d0c <HAL_TIM_ConfigClockSource+0x274>)
 8006c92:	f7fb f8a5 	bl	8001de0 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c9e:	d014      	beq.n	8006cca <HAL_TIM_ConfigClockSource+0x232>
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d010      	beq.n	8006cca <HAL_TIM_ConfigClockSource+0x232>
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00c      	beq.n	8006cca <HAL_TIM_ConfigClockSource+0x232>
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d008      	beq.n	8006cca <HAL_TIM_ConfigClockSource+0x232>
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	2b0a      	cmp	r3, #10
 8006cbe:	d004      	beq.n	8006cca <HAL_TIM_ConfigClockSource+0x232>
 8006cc0:	f241 4149 	movw	r1, #5193	; 0x1449
 8006cc4:	4811      	ldr	r0, [pc, #68]	; (8006d0c <HAL_TIM_ConfigClockSource+0x274>)
 8006cc6:	f7fb f88b 	bl	8001de0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	2b0f      	cmp	r3, #15
 8006cd0:	d904      	bls.n	8006cdc <HAL_TIM_ConfigClockSource+0x244>
 8006cd2:	f241 414a 	movw	r1, #5194	; 0x144a
 8006cd6:	480d      	ldr	r0, [pc, #52]	; (8006d0c <HAL_TIM_ConfigClockSource+0x274>)
 8006cd8:	f7fb f882 	bl	8001de0 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6818      	ldr	r0, [r3, #0]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	6899      	ldr	r1, [r3, #8]
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	685a      	ldr	r2, [r3, #4]
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	f000 fd59 	bl	80077a2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006cfe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	609a      	str	r2, [r3, #8]
      break;
 8006d08:	e1bf      	b.n	800708a <HAL_TIM_ConfigClockSource+0x5f2>
 8006d0a:	bf00      	nop
 8006d0c:	080113c4 	.word	0x080113c4
 8006d10:	40012c00 	.word	0x40012c00
 8006d14:	40013400 	.word	0x40013400
 8006d18:	40000400 	.word	0x40000400
 8006d1c:	40000800 	.word	0x40000800
 8006d20:	40000c00 	.word	0x40000c00
 8006d24:	40001000 	.word	0x40001000
 8006d28:	40001400 	.word	0x40001400
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a8d      	ldr	r2, [pc, #564]	; (8006f68 <HAL_TIM_ConfigClockSource+0x4d0>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d01d      	beq.n	8006d72 <HAL_TIM_ConfigClockSource+0x2da>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a8c      	ldr	r2, [pc, #560]	; (8006f6c <HAL_TIM_ConfigClockSource+0x4d4>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d018      	beq.n	8006d72 <HAL_TIM_ConfigClockSource+0x2da>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d48:	d013      	beq.n	8006d72 <HAL_TIM_ConfigClockSource+0x2da>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a88      	ldr	r2, [pc, #544]	; (8006f70 <HAL_TIM_ConfigClockSource+0x4d8>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d00e      	beq.n	8006d72 <HAL_TIM_ConfigClockSource+0x2da>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a86      	ldr	r2, [pc, #536]	; (8006f74 <HAL_TIM_ConfigClockSource+0x4dc>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d009      	beq.n	8006d72 <HAL_TIM_ConfigClockSource+0x2da>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a85      	ldr	r2, [pc, #532]	; (8006f78 <HAL_TIM_ConfigClockSource+0x4e0>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d004      	beq.n	8006d72 <HAL_TIM_ConfigClockSource+0x2da>
 8006d68:	f241 415d 	movw	r1, #5213	; 0x145d
 8006d6c:	4883      	ldr	r0, [pc, #524]	; (8006f7c <HAL_TIM_ConfigClockSource+0x4e4>)
 8006d6e:	f7fb f837 	bl	8001de0 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d013      	beq.n	8006da2 <HAL_TIM_ConfigClockSource+0x30a>
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d82:	d00e      	beq.n	8006da2 <HAL_TIM_ConfigClockSource+0x30a>
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d8c:	d009      	beq.n	8006da2 <HAL_TIM_ConfigClockSource+0x30a>
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006d96:	d004      	beq.n	8006da2 <HAL_TIM_ConfigClockSource+0x30a>
 8006d98:	f44f 51a3 	mov.w	r1, #5216	; 0x1460
 8006d9c:	4877      	ldr	r0, [pc, #476]	; (8006f7c <HAL_TIM_ConfigClockSource+0x4e4>)
 8006d9e:	f7fb f81f 	bl	8001de0 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006daa:	d014      	beq.n	8006dd6 <HAL_TIM_ConfigClockSource+0x33e>
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d010      	beq.n	8006dd6 <HAL_TIM_ConfigClockSource+0x33e>
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00c      	beq.n	8006dd6 <HAL_TIM_ConfigClockSource+0x33e>
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d008      	beq.n	8006dd6 <HAL_TIM_ConfigClockSource+0x33e>
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	2b0a      	cmp	r3, #10
 8006dca:	d004      	beq.n	8006dd6 <HAL_TIM_ConfigClockSource+0x33e>
 8006dcc:	f241 4161 	movw	r1, #5217	; 0x1461
 8006dd0:	486a      	ldr	r0, [pc, #424]	; (8006f7c <HAL_TIM_ConfigClockSource+0x4e4>)
 8006dd2:	f7fb f805 	bl	8001de0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	2b0f      	cmp	r3, #15
 8006ddc:	d904      	bls.n	8006de8 <HAL_TIM_ConfigClockSource+0x350>
 8006dde:	f241 4162 	movw	r1, #5218	; 0x1462
 8006de2:	4866      	ldr	r0, [pc, #408]	; (8006f7c <HAL_TIM_ConfigClockSource+0x4e4>)
 8006de4:	f7fa fffc 	bl	8001de0 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6818      	ldr	r0, [r3, #0]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	6899      	ldr	r1, [r3, #8]
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	685a      	ldr	r2, [r3, #4]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	f000 fcd3 	bl	80077a2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	689a      	ldr	r2, [r3, #8]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e0a:	609a      	str	r2, [r3, #8]
      break;
 8006e0c:	e13d      	b.n	800708a <HAL_TIM_ConfigClockSource+0x5f2>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a55      	ldr	r2, [pc, #340]	; (8006f68 <HAL_TIM_ConfigClockSource+0x4d0>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d01d      	beq.n	8006e54 <HAL_TIM_ConfigClockSource+0x3bc>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a53      	ldr	r2, [pc, #332]	; (8006f6c <HAL_TIM_ConfigClockSource+0x4d4>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d018      	beq.n	8006e54 <HAL_TIM_ConfigClockSource+0x3bc>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e2a:	d013      	beq.n	8006e54 <HAL_TIM_ConfigClockSource+0x3bc>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a4f      	ldr	r2, [pc, #316]	; (8006f70 <HAL_TIM_ConfigClockSource+0x4d8>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d00e      	beq.n	8006e54 <HAL_TIM_ConfigClockSource+0x3bc>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a4e      	ldr	r2, [pc, #312]	; (8006f74 <HAL_TIM_ConfigClockSource+0x4dc>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d009      	beq.n	8006e54 <HAL_TIM_ConfigClockSource+0x3bc>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a4c      	ldr	r2, [pc, #304]	; (8006f78 <HAL_TIM_ConfigClockSource+0x4e0>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d004      	beq.n	8006e54 <HAL_TIM_ConfigClockSource+0x3bc>
 8006e4a:	f241 4171 	movw	r1, #5233	; 0x1471
 8006e4e:	484b      	ldr	r0, [pc, #300]	; (8006f7c <HAL_TIM_ConfigClockSource+0x4e4>)
 8006e50:	f7fa ffc6 	bl	8001de0 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e5c:	d014      	beq.n	8006e88 <HAL_TIM_ConfigClockSource+0x3f0>
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d010      	beq.n	8006e88 <HAL_TIM_ConfigClockSource+0x3f0>
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00c      	beq.n	8006e88 <HAL_TIM_ConfigClockSource+0x3f0>
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d008      	beq.n	8006e88 <HAL_TIM_ConfigClockSource+0x3f0>
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	2b0a      	cmp	r3, #10
 8006e7c:	d004      	beq.n	8006e88 <HAL_TIM_ConfigClockSource+0x3f0>
 8006e7e:	f241 4174 	movw	r1, #5236	; 0x1474
 8006e82:	483e      	ldr	r0, [pc, #248]	; (8006f7c <HAL_TIM_ConfigClockSource+0x4e4>)
 8006e84:	f7fa ffac 	bl	8001de0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	2b0f      	cmp	r3, #15
 8006e8e:	d904      	bls.n	8006e9a <HAL_TIM_ConfigClockSource+0x402>
 8006e90:	f241 4175 	movw	r1, #5237	; 0x1475
 8006e94:	4839      	ldr	r0, [pc, #228]	; (8006f7c <HAL_TIM_ConfigClockSource+0x4e4>)
 8006e96:	f7fa ffa3 	bl	8001de0 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6818      	ldr	r0, [r3, #0]
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	6859      	ldr	r1, [r3, #4]
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	f000 fc04 	bl	80076b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2150      	movs	r1, #80	; 0x50
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 fc5b 	bl	800776e <TIM_ITRx_SetConfig>
      break;
 8006eb8:	e0e7      	b.n	800708a <HAL_TIM_ConfigClockSource+0x5f2>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a2a      	ldr	r2, [pc, #168]	; (8006f68 <HAL_TIM_ConfigClockSource+0x4d0>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d01d      	beq.n	8006f00 <HAL_TIM_ConfigClockSource+0x468>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a28      	ldr	r2, [pc, #160]	; (8006f6c <HAL_TIM_ConfigClockSource+0x4d4>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d018      	beq.n	8006f00 <HAL_TIM_ConfigClockSource+0x468>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ed6:	d013      	beq.n	8006f00 <HAL_TIM_ConfigClockSource+0x468>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a24      	ldr	r2, [pc, #144]	; (8006f70 <HAL_TIM_ConfigClockSource+0x4d8>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d00e      	beq.n	8006f00 <HAL_TIM_ConfigClockSource+0x468>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a23      	ldr	r2, [pc, #140]	; (8006f74 <HAL_TIM_ConfigClockSource+0x4dc>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d009      	beq.n	8006f00 <HAL_TIM_ConfigClockSource+0x468>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a21      	ldr	r2, [pc, #132]	; (8006f78 <HAL_TIM_ConfigClockSource+0x4e0>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d004      	beq.n	8006f00 <HAL_TIM_ConfigClockSource+0x468>
 8006ef6:	f241 4181 	movw	r1, #5249	; 0x1481
 8006efa:	4820      	ldr	r0, [pc, #128]	; (8006f7c <HAL_TIM_ConfigClockSource+0x4e4>)
 8006efc:	f7fa ff70 	bl	8001de0 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f08:	d014      	beq.n	8006f34 <HAL_TIM_ConfigClockSource+0x49c>
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d010      	beq.n	8006f34 <HAL_TIM_ConfigClockSource+0x49c>
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00c      	beq.n	8006f34 <HAL_TIM_ConfigClockSource+0x49c>
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d008      	beq.n	8006f34 <HAL_TIM_ConfigClockSource+0x49c>
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	2b0a      	cmp	r3, #10
 8006f28:	d004      	beq.n	8006f34 <HAL_TIM_ConfigClockSource+0x49c>
 8006f2a:	f241 4184 	movw	r1, #5252	; 0x1484
 8006f2e:	4813      	ldr	r0, [pc, #76]	; (8006f7c <HAL_TIM_ConfigClockSource+0x4e4>)
 8006f30:	f7fa ff56 	bl	8001de0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	2b0f      	cmp	r3, #15
 8006f3a:	d904      	bls.n	8006f46 <HAL_TIM_ConfigClockSource+0x4ae>
 8006f3c:	f241 4185 	movw	r1, #5253	; 0x1485
 8006f40:	480e      	ldr	r0, [pc, #56]	; (8006f7c <HAL_TIM_ConfigClockSource+0x4e4>)
 8006f42:	f7fa ff4d 	bl	8001de0 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6818      	ldr	r0, [r3, #0]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	6859      	ldr	r1, [r3, #4]
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	461a      	mov	r2, r3
 8006f54:	f000 fbdc 	bl	8007710 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2160      	movs	r1, #96	; 0x60
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f000 fc05 	bl	800776e <TIM_ITRx_SetConfig>
      break;
 8006f64:	e091      	b.n	800708a <HAL_TIM_ConfigClockSource+0x5f2>
 8006f66:	bf00      	nop
 8006f68:	40012c00 	.word	0x40012c00
 8006f6c:	40013400 	.word	0x40013400
 8006f70:	40000400 	.word	0x40000400
 8006f74:	40000800 	.word	0x40000800
 8006f78:	40000c00 	.word	0x40000c00
 8006f7c:	080113c4 	.word	0x080113c4
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a47      	ldr	r2, [pc, #284]	; (80070a4 <HAL_TIM_ConfigClockSource+0x60c>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d01d      	beq.n	8006fc6 <HAL_TIM_ConfigClockSource+0x52e>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a46      	ldr	r2, [pc, #280]	; (80070a8 <HAL_TIM_ConfigClockSource+0x610>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d018      	beq.n	8006fc6 <HAL_TIM_ConfigClockSource+0x52e>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f9c:	d013      	beq.n	8006fc6 <HAL_TIM_ConfigClockSource+0x52e>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a42      	ldr	r2, [pc, #264]	; (80070ac <HAL_TIM_ConfigClockSource+0x614>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d00e      	beq.n	8006fc6 <HAL_TIM_ConfigClockSource+0x52e>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a40      	ldr	r2, [pc, #256]	; (80070b0 <HAL_TIM_ConfigClockSource+0x618>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d009      	beq.n	8006fc6 <HAL_TIM_ConfigClockSource+0x52e>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a3f      	ldr	r2, [pc, #252]	; (80070b4 <HAL_TIM_ConfigClockSource+0x61c>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d004      	beq.n	8006fc6 <HAL_TIM_ConfigClockSource+0x52e>
 8006fbc:	f241 4191 	movw	r1, #5265	; 0x1491
 8006fc0:	483d      	ldr	r0, [pc, #244]	; (80070b8 <HAL_TIM_ConfigClockSource+0x620>)
 8006fc2:	f7fa ff0d 	bl	8001de0 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fce:	d014      	beq.n	8006ffa <HAL_TIM_ConfigClockSource+0x562>
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d010      	beq.n	8006ffa <HAL_TIM_ConfigClockSource+0x562>
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00c      	beq.n	8006ffa <HAL_TIM_ConfigClockSource+0x562>
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d008      	beq.n	8006ffa <HAL_TIM_ConfigClockSource+0x562>
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	2b0a      	cmp	r3, #10
 8006fee:	d004      	beq.n	8006ffa <HAL_TIM_ConfigClockSource+0x562>
 8006ff0:	f241 4194 	movw	r1, #5268	; 0x1494
 8006ff4:	4830      	ldr	r0, [pc, #192]	; (80070b8 <HAL_TIM_ConfigClockSource+0x620>)
 8006ff6:	f7fa fef3 	bl	8001de0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	2b0f      	cmp	r3, #15
 8007000:	d904      	bls.n	800700c <HAL_TIM_ConfigClockSource+0x574>
 8007002:	f241 4195 	movw	r1, #5269	; 0x1495
 8007006:	482c      	ldr	r0, [pc, #176]	; (80070b8 <HAL_TIM_ConfigClockSource+0x620>)
 8007008:	f7fa feea 	bl	8001de0 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6818      	ldr	r0, [r3, #0]
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	6859      	ldr	r1, [r3, #4]
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	461a      	mov	r2, r3
 800701a:	f000 fb4b 	bl	80076b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2140      	movs	r1, #64	; 0x40
 8007024:	4618      	mov	r0, r3
 8007026:	f000 fba2 	bl	800776e <TIM_ITRx_SetConfig>
      break;
 800702a:	e02e      	b.n	800708a <HAL_TIM_ConfigClockSource+0x5f2>
        assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a1c      	ldr	r2, [pc, #112]	; (80070a4 <HAL_TIM_ConfigClockSource+0x60c>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d01d      	beq.n	8007072 <HAL_TIM_ConfigClockSource+0x5da>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a1b      	ldr	r2, [pc, #108]	; (80070a8 <HAL_TIM_ConfigClockSource+0x610>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d018      	beq.n	8007072 <HAL_TIM_ConfigClockSource+0x5da>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007048:	d013      	beq.n	8007072 <HAL_TIM_ConfigClockSource+0x5da>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a17      	ldr	r2, [pc, #92]	; (80070ac <HAL_TIM_ConfigClockSource+0x614>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d00e      	beq.n	8007072 <HAL_TIM_ConfigClockSource+0x5da>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a15      	ldr	r2, [pc, #84]	; (80070b0 <HAL_TIM_ConfigClockSource+0x618>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d009      	beq.n	8007072 <HAL_TIM_ConfigClockSource+0x5da>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a14      	ldr	r2, [pc, #80]	; (80070b4 <HAL_TIM_ConfigClockSource+0x61c>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d004      	beq.n	8007072 <HAL_TIM_ConfigClockSource+0x5da>
 8007068:	f241 41a4 	movw	r1, #5284	; 0x14a4
 800706c:	4812      	ldr	r0, [pc, #72]	; (80070b8 <HAL_TIM_ConfigClockSource+0x620>)
 800706e:	f7fa feb7 	bl	8001de0 <assert_failed>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4619      	mov	r1, r3
 800707c:	4610      	mov	r0, r2
 800707e:	f000 fb76 	bl	800776e <TIM_ITRx_SetConfig>
        break;
 8007082:	e002      	b.n	800708a <HAL_TIM_ConfigClockSource+0x5f2>
      break;
 8007084:	bf00      	nop
 8007086:	e000      	b.n	800708a <HAL_TIM_ConfigClockSource+0x5f2>
      break;
 8007088:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2201      	movs	r2, #1
 800708e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}
 80070a4:	40012c00 	.word	0x40012c00
 80070a8:	40013400 	.word	0x40013400
 80070ac:	40000400 	.word	0x40000400
 80070b0:	40000800 	.word	0x40000800
 80070b4:	40000c00 	.word	0x40000c00
 80070b8:	080113c4 	.word	0x080113c4

080070bc <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80070c4:	bf00      	nop
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bc80      	pop	{r7}
 80070cc:	4770      	bx	lr

080070ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070ce:	b480      	push	{r7}
 80070d0:	b083      	sub	sp, #12
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070d6:	bf00      	nop
 80070d8:	370c      	adds	r7, #12
 80070da:	46bd      	mov	sp, r7
 80070dc:	bc80      	pop	{r7}
 80070de:	4770      	bx	lr

080070e0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bc80      	pop	{r7}
 80070f0:	4770      	bx	lr

080070f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070f2:	b480      	push	{r7}
 80070f4:	b083      	sub	sp, #12
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070fa:	bf00      	nop
 80070fc:	370c      	adds	r7, #12
 80070fe:	46bd      	mov	sp, r7
 8007100:	bc80      	pop	{r7}
 8007102:	4770      	bx	lr

08007104 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800710c:	bf00      	nop
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	bc80      	pop	{r7}
 8007114:	4770      	bx	lr

08007116 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007116:	b480      	push	{r7}
 8007118:	b083      	sub	sp, #12
 800711a:	af00      	add	r7, sp, #0
 800711c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800711e:	bf00      	nop
 8007120:	370c      	adds	r7, #12
 8007122:	46bd      	mov	sp, r7
 8007124:	bc80      	pop	{r7}
 8007126:	4770      	bx	lr

08007128 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007130:	bf00      	nop
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	bc80      	pop	{r7}
 8007138:	4770      	bx	lr

0800713a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800713a:	b480      	push	{r7}
 800713c:	b083      	sub	sp, #12
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007142:	bf00      	nop
 8007144:	370c      	adds	r7, #12
 8007146:	46bd      	mov	sp, r7
 8007148:	bc80      	pop	{r7}
 800714a:	4770      	bx	lr

0800714c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800714c:	b480      	push	{r7}
 800714e:	b085      	sub	sp, #20
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a33      	ldr	r2, [pc, #204]	; (800722c <TIM_Base_SetConfig+0xe0>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d013      	beq.n	800718c <TIM_Base_SetConfig+0x40>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a32      	ldr	r2, [pc, #200]	; (8007230 <TIM_Base_SetConfig+0xe4>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d00f      	beq.n	800718c <TIM_Base_SetConfig+0x40>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007172:	d00b      	beq.n	800718c <TIM_Base_SetConfig+0x40>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a2f      	ldr	r2, [pc, #188]	; (8007234 <TIM_Base_SetConfig+0xe8>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d007      	beq.n	800718c <TIM_Base_SetConfig+0x40>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a2e      	ldr	r2, [pc, #184]	; (8007238 <TIM_Base_SetConfig+0xec>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d003      	beq.n	800718c <TIM_Base_SetConfig+0x40>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a2d      	ldr	r2, [pc, #180]	; (800723c <TIM_Base_SetConfig+0xf0>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d108      	bne.n	800719e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007192:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	4313      	orrs	r3, r2
 800719c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4a22      	ldr	r2, [pc, #136]	; (800722c <TIM_Base_SetConfig+0xe0>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d013      	beq.n	80071ce <TIM_Base_SetConfig+0x82>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	4a21      	ldr	r2, [pc, #132]	; (8007230 <TIM_Base_SetConfig+0xe4>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d00f      	beq.n	80071ce <TIM_Base_SetConfig+0x82>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071b4:	d00b      	beq.n	80071ce <TIM_Base_SetConfig+0x82>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4a1e      	ldr	r2, [pc, #120]	; (8007234 <TIM_Base_SetConfig+0xe8>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d007      	beq.n	80071ce <TIM_Base_SetConfig+0x82>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a1d      	ldr	r2, [pc, #116]	; (8007238 <TIM_Base_SetConfig+0xec>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d003      	beq.n	80071ce <TIM_Base_SetConfig+0x82>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a1c      	ldr	r2, [pc, #112]	; (800723c <TIM_Base_SetConfig+0xf0>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d108      	bne.n	80071e0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	68db      	ldr	r3, [r3, #12]
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	4313      	orrs	r3, r2
 80071de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	695b      	ldr	r3, [r3, #20]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	689a      	ldr	r2, [r3, #8]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4a09      	ldr	r2, [pc, #36]	; (800722c <TIM_Base_SetConfig+0xe0>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d003      	beq.n	8007214 <TIM_Base_SetConfig+0xc8>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a08      	ldr	r2, [pc, #32]	; (8007230 <TIM_Base_SetConfig+0xe4>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d103      	bne.n	800721c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	691a      	ldr	r2, [r3, #16]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	615a      	str	r2, [r3, #20]
}
 8007222:	bf00      	nop
 8007224:	3714      	adds	r7, #20
 8007226:	46bd      	mov	sp, r7
 8007228:	bc80      	pop	{r7}
 800722a:	4770      	bx	lr
 800722c:	40012c00 	.word	0x40012c00
 8007230:	40013400 	.word	0x40013400
 8007234:	40000400 	.word	0x40000400
 8007238:	40000800 	.word	0x40000800
 800723c:	40000c00 	.word	0x40000c00

08007240 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b086      	sub	sp, #24
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a1b      	ldr	r3, [r3, #32]
 800724e:	f023 0201 	bic.w	r2, r3, #1
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a1b      	ldr	r3, [r3, #32]
 800725a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800726e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f023 0303 	bic.w	r3, r3, #3
 8007276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	4313      	orrs	r3, r2
 8007280:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	f023 0302 	bic.w	r3, r3, #2
 8007288:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	4313      	orrs	r3, r2
 8007292:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4a34      	ldr	r2, [pc, #208]	; (8007368 <TIM_OC1_SetConfig+0x128>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d003      	beq.n	80072a4 <TIM_OC1_SetConfig+0x64>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a33      	ldr	r2, [pc, #204]	; (800736c <TIM_OC1_SetConfig+0x12c>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d119      	bne.n	80072d8 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d008      	beq.n	80072be <TIM_OC1_SetConfig+0x7e>
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	2b08      	cmp	r3, #8
 80072b2:	d004      	beq.n	80072be <TIM_OC1_SetConfig+0x7e>
 80072b4:	f641 2141 	movw	r1, #6721	; 0x1a41
 80072b8:	482d      	ldr	r0, [pc, #180]	; (8007370 <TIM_OC1_SetConfig+0x130>)
 80072ba:	f7fa fd91 	bl	8001de0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	f023 0308 	bic.w	r3, r3, #8
 80072c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	f023 0304 	bic.w	r3, r3, #4
 80072d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a23      	ldr	r2, [pc, #140]	; (8007368 <TIM_OC1_SetConfig+0x128>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d003      	beq.n	80072e8 <TIM_OC1_SetConfig+0xa8>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4a22      	ldr	r2, [pc, #136]	; (800736c <TIM_OC1_SetConfig+0x12c>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d12d      	bne.n	8007344 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	699b      	ldr	r3, [r3, #24]
 80072ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072f0:	d008      	beq.n	8007304 <TIM_OC1_SetConfig+0xc4>
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	699b      	ldr	r3, [r3, #24]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d004      	beq.n	8007304 <TIM_OC1_SetConfig+0xc4>
 80072fa:	f641 214e 	movw	r1, #6734	; 0x1a4e
 80072fe:	481c      	ldr	r0, [pc, #112]	; (8007370 <TIM_OC1_SetConfig+0x130>)
 8007300:	f7fa fd6e 	bl	8001de0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	695b      	ldr	r3, [r3, #20]
 8007308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800730c:	d008      	beq.n	8007320 <TIM_OC1_SetConfig+0xe0>
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	695b      	ldr	r3, [r3, #20]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d004      	beq.n	8007320 <TIM_OC1_SetConfig+0xe0>
 8007316:	f641 214f 	movw	r1, #6735	; 0x1a4f
 800731a:	4815      	ldr	r0, [pc, #84]	; (8007370 <TIM_OC1_SetConfig+0x130>)
 800731c:	f7fa fd60 	bl	8001de0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007326:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800732e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	695b      	ldr	r3, [r3, #20]
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	4313      	orrs	r3, r2
 8007338:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	699b      	ldr	r3, [r3, #24]
 800733e:	693a      	ldr	r2, [r7, #16]
 8007340:	4313      	orrs	r3, r2
 8007342:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	693a      	ldr	r2, [r7, #16]
 8007348:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	685a      	ldr	r2, [r3, #4]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	697a      	ldr	r2, [r7, #20]
 800735c:	621a      	str	r2, [r3, #32]
}
 800735e:	bf00      	nop
 8007360:	3718      	adds	r7, #24
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	40012c00 	.word	0x40012c00
 800736c:	40013400 	.word	0x40013400
 8007370:	080113c4 	.word	0x080113c4

08007374 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	f023 0210 	bic.w	r2, r3, #16
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a1b      	ldr	r3, [r3, #32]
 800738e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	021b      	lsls	r3, r3, #8
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	f023 0320 	bic.w	r3, r3, #32
 80073be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	011b      	lsls	r3, r3, #4
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a35      	ldr	r2, [pc, #212]	; (80074a4 <TIM_OC2_SetConfig+0x130>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d003      	beq.n	80073dc <TIM_OC2_SetConfig+0x68>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a34      	ldr	r2, [pc, #208]	; (80074a8 <TIM_OC2_SetConfig+0x134>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d11a      	bne.n	8007412 <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d008      	beq.n	80073f6 <TIM_OC2_SetConfig+0x82>
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	2b08      	cmp	r3, #8
 80073ea:	d004      	beq.n	80073f6 <TIM_OC2_SetConfig+0x82>
 80073ec:	f641 218c 	movw	r1, #6796	; 0x1a8c
 80073f0:	482e      	ldr	r0, [pc, #184]	; (80074ac <TIM_OC2_SetConfig+0x138>)
 80073f2:	f7fa fcf5 	bl	8001de0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	011b      	lsls	r3, r3, #4
 8007404:	697a      	ldr	r2, [r7, #20]
 8007406:	4313      	orrs	r3, r2
 8007408:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007410:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4a23      	ldr	r2, [pc, #140]	; (80074a4 <TIM_OC2_SetConfig+0x130>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d003      	beq.n	8007422 <TIM_OC2_SetConfig+0xae>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a22      	ldr	r2, [pc, #136]	; (80074a8 <TIM_OC2_SetConfig+0x134>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d12f      	bne.n	8007482 <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	699b      	ldr	r3, [r3, #24]
 8007426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800742a:	d008      	beq.n	800743e <TIM_OC2_SetConfig+0xca>
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	699b      	ldr	r3, [r3, #24]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d004      	beq.n	800743e <TIM_OC2_SetConfig+0xca>
 8007434:	f641 219a 	movw	r1, #6810	; 0x1a9a
 8007438:	481c      	ldr	r0, [pc, #112]	; (80074ac <TIM_OC2_SetConfig+0x138>)
 800743a:	f7fa fcd1 	bl	8001de0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	695b      	ldr	r3, [r3, #20]
 8007442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007446:	d008      	beq.n	800745a <TIM_OC2_SetConfig+0xe6>
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	695b      	ldr	r3, [r3, #20]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d004      	beq.n	800745a <TIM_OC2_SetConfig+0xe6>
 8007450:	f641 219b 	movw	r1, #6811	; 0x1a9b
 8007454:	4815      	ldr	r0, [pc, #84]	; (80074ac <TIM_OC2_SetConfig+0x138>)
 8007456:	f7fa fcc3 	bl	8001de0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007460:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007468:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	693a      	ldr	r2, [r7, #16]
 8007472:	4313      	orrs	r3, r2
 8007474:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	4313      	orrs	r3, r2
 8007480:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	685a      	ldr	r2, [r3, #4]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	697a      	ldr	r2, [r7, #20]
 800749a:	621a      	str	r2, [r3, #32]
}
 800749c:	bf00      	nop
 800749e:	3718      	adds	r7, #24
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	40012c00 	.word	0x40012c00
 80074a8:	40013400 	.word	0x40013400
 80074ac:	080113c4 	.word	0x080113c4

080074b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b086      	sub	sp, #24
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a1b      	ldr	r3, [r3, #32]
 80074be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a1b      	ldr	r3, [r3, #32]
 80074ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	69db      	ldr	r3, [r3, #28]
 80074d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f023 0303 	bic.w	r3, r3, #3
 80074e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	021b      	lsls	r3, r3, #8
 8007500:	697a      	ldr	r2, [r7, #20]
 8007502:	4313      	orrs	r3, r2
 8007504:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a35      	ldr	r2, [pc, #212]	; (80075e0 <TIM_OC3_SetConfig+0x130>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d003      	beq.n	8007516 <TIM_OC3_SetConfig+0x66>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a34      	ldr	r2, [pc, #208]	; (80075e4 <TIM_OC3_SetConfig+0x134>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d11a      	bne.n	800754c <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d008      	beq.n	8007530 <TIM_OC3_SetConfig+0x80>
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	2b08      	cmp	r3, #8
 8007524:	d004      	beq.n	8007530 <TIM_OC3_SetConfig+0x80>
 8007526:	f641 21d7 	movw	r1, #6871	; 0x1ad7
 800752a:	482f      	ldr	r0, [pc, #188]	; (80075e8 <TIM_OC3_SetConfig+0x138>)
 800752c:	f7fa fc58 	bl	8001de0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007536:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	021b      	lsls	r3, r3, #8
 800753e:	697a      	ldr	r2, [r7, #20]
 8007540:	4313      	orrs	r3, r2
 8007542:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800754a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a24      	ldr	r2, [pc, #144]	; (80075e0 <TIM_OC3_SetConfig+0x130>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d003      	beq.n	800755c <TIM_OC3_SetConfig+0xac>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a23      	ldr	r2, [pc, #140]	; (80075e4 <TIM_OC3_SetConfig+0x134>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d12f      	bne.n	80075bc <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	699b      	ldr	r3, [r3, #24]
 8007560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007564:	d008      	beq.n	8007578 <TIM_OC3_SetConfig+0xc8>
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	699b      	ldr	r3, [r3, #24]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d004      	beq.n	8007578 <TIM_OC3_SetConfig+0xc8>
 800756e:	f641 21e4 	movw	r1, #6884	; 0x1ae4
 8007572:	481d      	ldr	r0, [pc, #116]	; (80075e8 <TIM_OC3_SetConfig+0x138>)
 8007574:	f7fa fc34 	bl	8001de0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	695b      	ldr	r3, [r3, #20]
 800757c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007580:	d008      	beq.n	8007594 <TIM_OC3_SetConfig+0xe4>
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	695b      	ldr	r3, [r3, #20]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d004      	beq.n	8007594 <TIM_OC3_SetConfig+0xe4>
 800758a:	f641 21e5 	movw	r1, #6885	; 0x1ae5
 800758e:	4816      	ldr	r0, [pc, #88]	; (80075e8 <TIM_OC3_SetConfig+0x138>)
 8007590:	f7fa fc26 	bl	8001de0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800759a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	695b      	ldr	r3, [r3, #20]
 80075a8:	011b      	lsls	r3, r3, #4
 80075aa:	693a      	ldr	r2, [r7, #16]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	699b      	ldr	r3, [r3, #24]
 80075b4:	011b      	lsls	r3, r3, #4
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	693a      	ldr	r2, [r7, #16]
 80075c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	68fa      	ldr	r2, [r7, #12]
 80075c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	685a      	ldr	r2, [r3, #4]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	697a      	ldr	r2, [r7, #20]
 80075d4:	621a      	str	r2, [r3, #32]
}
 80075d6:	bf00      	nop
 80075d8:	3718      	adds	r7, #24
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	40012c00 	.word	0x40012c00
 80075e4:	40013400 	.word	0x40013400
 80075e8:	080113c4 	.word	0x080113c4

080075ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b086      	sub	sp, #24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a1b      	ldr	r3, [r3, #32]
 80075fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6a1b      	ldr	r3, [r3, #32]
 8007606:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	69db      	ldr	r3, [r3, #28]
 8007612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800761a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	021b      	lsls	r3, r3, #8
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	4313      	orrs	r3, r2
 800762e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007636:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	031b      	lsls	r3, r3, #12
 800763e:	693a      	ldr	r2, [r7, #16]
 8007640:	4313      	orrs	r3, r2
 8007642:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4a18      	ldr	r2, [pc, #96]	; (80076a8 <TIM_OC4_SetConfig+0xbc>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d003      	beq.n	8007654 <TIM_OC4_SetConfig+0x68>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4a17      	ldr	r2, [pc, #92]	; (80076ac <TIM_OC4_SetConfig+0xc0>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d117      	bne.n	8007684 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	695b      	ldr	r3, [r3, #20]
 8007658:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800765c:	d008      	beq.n	8007670 <TIM_OC4_SetConfig+0x84>
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	695b      	ldr	r3, [r3, #20]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d004      	beq.n	8007670 <TIM_OC4_SetConfig+0x84>
 8007666:	f641 3123 	movw	r1, #6947	; 0x1b23
 800766a:	4811      	ldr	r0, [pc, #68]	; (80076b0 <TIM_OC4_SetConfig+0xc4>)
 800766c:	f7fa fbb8 	bl	8001de0 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007676:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	695b      	ldr	r3, [r3, #20]
 800767c:	019b      	lsls	r3, r3, #6
 800767e:	697a      	ldr	r2, [r7, #20]
 8007680:	4313      	orrs	r3, r2
 8007682:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	697a      	ldr	r2, [r7, #20]
 8007688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	685a      	ldr	r2, [r3, #4]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	693a      	ldr	r2, [r7, #16]
 800769c:	621a      	str	r2, [r3, #32]
}
 800769e:	bf00      	nop
 80076a0:	3718      	adds	r7, #24
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	40012c00 	.word	0x40012c00
 80076ac:	40013400 	.word	0x40013400
 80076b0:	080113c4 	.word	0x080113c4

080076b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b087      	sub	sp, #28
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6a1b      	ldr	r3, [r3, #32]
 80076c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6a1b      	ldr	r3, [r3, #32]
 80076ca:	f023 0201 	bic.w	r2, r3, #1
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	699b      	ldr	r3, [r3, #24]
 80076d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80076de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	011b      	lsls	r3, r3, #4
 80076e4:	693a      	ldr	r2, [r7, #16]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	f023 030a 	bic.w	r3, r3, #10
 80076f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80076f2:	697a      	ldr	r2, [r7, #20]
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	693a      	ldr	r2, [r7, #16]
 80076fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	697a      	ldr	r2, [r7, #20]
 8007704:	621a      	str	r2, [r3, #32]
}
 8007706:	bf00      	nop
 8007708:	371c      	adds	r7, #28
 800770a:	46bd      	mov	sp, r7
 800770c:	bc80      	pop	{r7}
 800770e:	4770      	bx	lr

08007710 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007710:	b480      	push	{r7}
 8007712:	b087      	sub	sp, #28
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6a1b      	ldr	r3, [r3, #32]
 8007720:	f023 0210 	bic.w	r2, r3, #16
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	699b      	ldr	r3, [r3, #24]
 800772c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6a1b      	ldr	r3, [r3, #32]
 8007732:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800773a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	031b      	lsls	r3, r3, #12
 8007740:	697a      	ldr	r2, [r7, #20]
 8007742:	4313      	orrs	r3, r2
 8007744:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800774c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	011b      	lsls	r3, r3, #4
 8007752:	693a      	ldr	r2, [r7, #16]
 8007754:	4313      	orrs	r3, r2
 8007756:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	693a      	ldr	r2, [r7, #16]
 8007762:	621a      	str	r2, [r3, #32]
}
 8007764:	bf00      	nop
 8007766:	371c      	adds	r7, #28
 8007768:	46bd      	mov	sp, r7
 800776a:	bc80      	pop	{r7}
 800776c:	4770      	bx	lr

0800776e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800776e:	b480      	push	{r7}
 8007770:	b085      	sub	sp, #20
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
 8007776:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007784:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007786:	683a      	ldr	r2, [r7, #0]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	4313      	orrs	r3, r2
 800778c:	f043 0307 	orr.w	r3, r3, #7
 8007790:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	609a      	str	r2, [r3, #8]
}
 8007798:	bf00      	nop
 800779a:	3714      	adds	r7, #20
 800779c:	46bd      	mov	sp, r7
 800779e:	bc80      	pop	{r7}
 80077a0:	4770      	bx	lr

080077a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077a2:	b480      	push	{r7}
 80077a4:	b087      	sub	sp, #28
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	60f8      	str	r0, [r7, #12]
 80077aa:	60b9      	str	r1, [r7, #8]
 80077ac:	607a      	str	r2, [r7, #4]
 80077ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	021a      	lsls	r2, r3, #8
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	431a      	orrs	r2, r3
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	697a      	ldr	r2, [r7, #20]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	697a      	ldr	r2, [r7, #20]
 80077d4:	609a      	str	r2, [r3, #8]
}
 80077d6:	bf00      	nop
 80077d8:	371c      	adds	r7, #28
 80077da:	46bd      	mov	sp, r7
 80077dc:	bc80      	pop	{r7}
 80077de:	4770      	bx	lr

080077e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b086      	sub	sp, #24
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	4a26      	ldr	r2, [pc, #152]	; (8007888 <TIM_CCxChannelCmd+0xa8>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d018      	beq.n	8007826 <TIM_CCxChannelCmd+0x46>
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	4a25      	ldr	r2, [pc, #148]	; (800788c <TIM_CCxChannelCmd+0xac>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d014      	beq.n	8007826 <TIM_CCxChannelCmd+0x46>
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007802:	d010      	beq.n	8007826 <TIM_CCxChannelCmd+0x46>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	4a22      	ldr	r2, [pc, #136]	; (8007890 <TIM_CCxChannelCmd+0xb0>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d00c      	beq.n	8007826 <TIM_CCxChannelCmd+0x46>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	4a21      	ldr	r2, [pc, #132]	; (8007894 <TIM_CCxChannelCmd+0xb4>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d008      	beq.n	8007826 <TIM_CCxChannelCmd+0x46>
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	4a20      	ldr	r2, [pc, #128]	; (8007898 <TIM_CCxChannelCmd+0xb8>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d004      	beq.n	8007826 <TIM_CCxChannelCmd+0x46>
 800781c:	f641 5109 	movw	r1, #7433	; 0x1d09
 8007820:	481e      	ldr	r0, [pc, #120]	; (800789c <TIM_CCxChannelCmd+0xbc>)
 8007822:	f7fa fadd 	bl	8001de0 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d010      	beq.n	800784e <TIM_CCxChannelCmd+0x6e>
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	2b04      	cmp	r3, #4
 8007830:	d00d      	beq.n	800784e <TIM_CCxChannelCmd+0x6e>
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	2b08      	cmp	r3, #8
 8007836:	d00a      	beq.n	800784e <TIM_CCxChannelCmd+0x6e>
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	2b0c      	cmp	r3, #12
 800783c:	d007      	beq.n	800784e <TIM_CCxChannelCmd+0x6e>
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	2b3c      	cmp	r3, #60	; 0x3c
 8007842:	d004      	beq.n	800784e <TIM_CCxChannelCmd+0x6e>
 8007844:	f641 510a 	movw	r1, #7434	; 0x1d0a
 8007848:	4814      	ldr	r0, [pc, #80]	; (800789c <TIM_CCxChannelCmd+0xbc>)
 800784a:	f7fa fac9 	bl	8001de0 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	f003 031f 	and.w	r3, r3, #31
 8007854:	2201      	movs	r2, #1
 8007856:	fa02 f303 	lsl.w	r3, r2, r3
 800785a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6a1a      	ldr	r2, [r3, #32]
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	43db      	mvns	r3, r3
 8007864:	401a      	ands	r2, r3
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6a1a      	ldr	r2, [r3, #32]
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	f003 031f 	and.w	r3, r3, #31
 8007874:	6879      	ldr	r1, [r7, #4]
 8007876:	fa01 f303 	lsl.w	r3, r1, r3
 800787a:	431a      	orrs	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	621a      	str	r2, [r3, #32]
}
 8007880:	bf00      	nop
 8007882:	3718      	adds	r7, #24
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	40012c00 	.word	0x40012c00
 800788c:	40013400 	.word	0x40013400
 8007890:	40000400 	.word	0x40000400
 8007894:	40000800 	.word	0x40000800
 8007898:	40000c00 	.word	0x40000c00
 800789c:	080113c4 	.word	0x080113c4

080078a0 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a1c      	ldr	r2, [pc, #112]	; (800791c <TIM_ResetCallback+0x7c>)
 80078ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a1b      	ldr	r2, [pc, #108]	; (8007920 <TIM_ResetCallback+0x80>)
 80078b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a1a      	ldr	r2, [pc, #104]	; (8007924 <TIM_ResetCallback+0x84>)
 80078bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a19      	ldr	r2, [pc, #100]	; (8007928 <TIM_ResetCallback+0x88>)
 80078c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a18      	ldr	r2, [pc, #96]	; (800792c <TIM_ResetCallback+0x8c>)
 80078cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a17      	ldr	r2, [pc, #92]	; (8007930 <TIM_ResetCallback+0x90>)
 80078d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a16      	ldr	r2, [pc, #88]	; (8007934 <TIM_ResetCallback+0x94>)
 80078dc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a15      	ldr	r2, [pc, #84]	; (8007938 <TIM_ResetCallback+0x98>)
 80078e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a14      	ldr	r2, [pc, #80]	; (800793c <TIM_ResetCallback+0x9c>)
 80078ec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a13      	ldr	r2, [pc, #76]	; (8007940 <TIM_ResetCallback+0xa0>)
 80078f4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a12      	ldr	r2, [pc, #72]	; (8007944 <TIM_ResetCallback+0xa4>)
 80078fc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a11      	ldr	r2, [pc, #68]	; (8007948 <TIM_ResetCallback+0xa8>)
 8007904:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4a10      	ldr	r2, [pc, #64]	; (800794c <TIM_ResetCallback+0xac>)
 800790c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8007910:	bf00      	nop
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	bc80      	pop	{r7}
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	08001d4d 	.word	0x08001d4d
 8007920:	080070bd 	.word	0x080070bd
 8007924:	08007117 	.word	0x08007117
 8007928:	08007129 	.word	0x08007129
 800792c:	08001d05 	.word	0x08001d05
 8007930:	080070e1 	.word	0x080070e1
 8007934:	080070cf 	.word	0x080070cf
 8007938:	080070f3 	.word	0x080070f3
 800793c:	08007105 	.word	0x08007105
 8007940:	0800713b 	.word	0x0800713b
 8007944:	08007c89 	.word	0x08007c89
 8007948:	08007c9b 	.word	0x08007c9b
 800794c:	08007cad 	.word	0x08007cad

08007950 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a5c      	ldr	r2, [pc, #368]	; (8007ad0 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d027      	beq.n	80079b4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a5a      	ldr	r2, [pc, #360]	; (8007ad4 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d022      	beq.n	80079b4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007976:	d01d      	beq.n	80079b4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a56      	ldr	r2, [pc, #344]	; (8007ad8 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d018      	beq.n	80079b4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a55      	ldr	r2, [pc, #340]	; (8007adc <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d013      	beq.n	80079b4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a53      	ldr	r2, [pc, #332]	; (8007ae0 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d00e      	beq.n	80079b4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a52      	ldr	r2, [pc, #328]	; (8007ae4 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d009      	beq.n	80079b4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a50      	ldr	r2, [pc, #320]	; (8007ae8 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d004      	beq.n	80079b4 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80079aa:	f240 7186 	movw	r1, #1926	; 0x786
 80079ae:	484f      	ldr	r0, [pc, #316]	; (8007aec <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 80079b0:	f7fa fa16 	bl	8001de0 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d020      	beq.n	80079fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2b10      	cmp	r3, #16
 80079c2:	d01c      	beq.n	80079fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2b20      	cmp	r3, #32
 80079ca:	d018      	beq.n	80079fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2b30      	cmp	r3, #48	; 0x30
 80079d2:	d014      	beq.n	80079fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2b40      	cmp	r3, #64	; 0x40
 80079da:	d010      	beq.n	80079fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2b50      	cmp	r3, #80	; 0x50
 80079e2:	d00c      	beq.n	80079fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2b60      	cmp	r3, #96	; 0x60
 80079ea:	d008      	beq.n	80079fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	2b70      	cmp	r3, #112	; 0x70
 80079f2:	d004      	beq.n	80079fe <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80079f4:	f240 7187 	movw	r1, #1927	; 0x787
 80079f8:	483c      	ldr	r0, [pc, #240]	; (8007aec <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 80079fa:	f7fa f9f1 	bl	8001de0 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	2b80      	cmp	r3, #128	; 0x80
 8007a04:	d008      	beq.n	8007a18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d004      	beq.n	8007a18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a0e:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 8007a12:	4836      	ldr	r0, [pc, #216]	; (8007aec <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8007a14:	f7fa f9e4 	bl	8001de0 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d101      	bne.n	8007a26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007a22:	2302      	movs	r3, #2
 8007a24:	e050      	b.n	8007ac8 <HAL_TIMEx_MasterConfigSynchronization+0x178>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2202      	movs	r2, #2
 8007a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68fa      	ldr	r2, [r7, #12]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a1a      	ldr	r2, [pc, #104]	; (8007ad0 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d018      	beq.n	8007a9c <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a19      	ldr	r2, [pc, #100]	; (8007ad4 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d013      	beq.n	8007a9c <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a7c:	d00e      	beq.n	8007a9c <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a15      	ldr	r2, [pc, #84]	; (8007ad8 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d009      	beq.n	8007a9c <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a13      	ldr	r2, [pc, #76]	; (8007adc <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d004      	beq.n	8007a9c <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a12      	ldr	r2, [pc, #72]	; (8007ae0 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d10c      	bne.n	8007ab6 <HAL_TIMEx_MasterConfigSynchronization+0x166>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007aa2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	68ba      	ldr	r2, [r7, #8]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	68ba      	ldr	r2, [r7, #8]
 8007ab4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2201      	movs	r2, #1
 8007aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3710      	adds	r7, #16
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	40012c00 	.word	0x40012c00
 8007ad4:	40013400 	.word	0x40013400
 8007ad8:	40000400 	.word	0x40000400
 8007adc:	40000800 	.word	0x40000800
 8007ae0:	40000c00 	.word	0x40000c00
 8007ae4:	40001000 	.word	0x40001000
 8007ae8:	40001400 	.word	0x40001400
 8007aec:	080113fc 	.word	0x080113fc

08007af0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007afa:	2300      	movs	r3, #0
 8007afc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a5e      	ldr	r2, [pc, #376]	; (8007c7c <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d009      	beq.n	8007b1c <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a5c      	ldr	r2, [pc, #368]	; (8007c80 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d004      	beq.n	8007b1c <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8007b12:	f240 71c3 	movw	r1, #1987	; 0x7c3
 8007b16:	485b      	ldr	r0, [pc, #364]	; (8007c84 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007b18:	f7fa f962 	bl	8001de0 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b24:	d008      	beq.n	8007b38 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d004      	beq.n	8007b38 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 8007b2e:	f240 71c4 	movw	r1, #1988	; 0x7c4
 8007b32:	4854      	ldr	r0, [pc, #336]	; (8007c84 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007b34:	f7fa f954 	bl	8001de0 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b40:	d008      	beq.n	8007b54 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d004      	beq.n	8007b54 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 8007b4a:	f240 71c5 	movw	r1, #1989	; 0x7c5
 8007b4e:	484d      	ldr	r0, [pc, #308]	; (8007c84 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007b50:	f7fa f946 	bl	8001de0 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d013      	beq.n	8007b84 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b64:	d00e      	beq.n	8007b84 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b6e:	d009      	beq.n	8007b84 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b78:	d004      	beq.n	8007b84 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8007b7a:	f240 71c6 	movw	r1, #1990	; 0x7c6
 8007b7e:	4841      	ldr	r0, [pc, #260]	; (8007c84 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007b80:	f7fa f92e 	bl	8001de0 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	2bff      	cmp	r3, #255	; 0xff
 8007b8a:	d904      	bls.n	8007b96 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8007b8c:	f240 71c7 	movw	r1, #1991	; 0x7c7
 8007b90:	483c      	ldr	r0, [pc, #240]	; (8007c84 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007b92:	f7fa f925 	bl	8001de0 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b9e:	d008      	beq.n	8007bb2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d004      	beq.n	8007bb2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007ba8:	f44f 61f9 	mov.w	r1, #1992	; 0x7c8
 8007bac:	4835      	ldr	r0, [pc, #212]	; (8007c84 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007bae:	f7fa f917 	bl	8001de0 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d009      	beq.n	8007bce <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	695b      	ldr	r3, [r3, #20]
 8007bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bc2:	d004      	beq.n	8007bce <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007bc4:	f240 71c9 	movw	r1, #1993	; 0x7c9
 8007bc8:	482e      	ldr	r0, [pc, #184]	; (8007c84 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007bca:	f7fa f909 	bl	8001de0 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	69db      	ldr	r3, [r3, #28]
 8007bd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bd6:	d008      	beq.n	8007bea <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	69db      	ldr	r3, [r3, #28]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d004      	beq.n	8007bea <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8007be0:	f240 71ca 	movw	r1, #1994	; 0x7ca
 8007be4:	4827      	ldr	r0, [pc, #156]	; (8007c84 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007be6:	f7fa f8fb 	bl	8001de0 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d101      	bne.n	8007bf8 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 8007bf4:	2302      	movs	r3, #2
 8007bf6:	e03d      	b.n	8007c74 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	695b      	ldr	r3, [r3, #20]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	69db      	ldr	r3, [r3, #28]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	40012c00 	.word	0x40012c00
 8007c80:	40013400 	.word	0x40013400
 8007c84:	080113fc 	.word	0x080113fc

08007c88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c90:	bf00      	nop
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bc80      	pop	{r7}
 8007c98:	4770      	bx	lr

08007c9a <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007c9a:	b480      	push	{r7}
 8007c9c:	b083      	sub	sp, #12
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8007ca2:	bf00      	nop
 8007ca4:	370c      	adds	r7, #12
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bc80      	pop	{r7}
 8007caa:	4770      	bx	lr

08007cac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007cb4:	bf00      	nop
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bc80      	pop	{r7}
 8007cbc:	4770      	bx	lr
	...

08007cc0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d101      	bne.n	8007cd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	e0a7      	b.n	8007e22 <HAL_UART_Init+0x162>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	699b      	ldr	r3, [r3, #24]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d02c      	beq.n	8007d34 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a53      	ldr	r2, [pc, #332]	; (8007e2c <HAL_UART_Init+0x16c>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d00e      	beq.n	8007d02 <HAL_UART_Init+0x42>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a51      	ldr	r2, [pc, #324]	; (8007e30 <HAL_UART_Init+0x170>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d009      	beq.n	8007d02 <HAL_UART_Init+0x42>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a50      	ldr	r2, [pc, #320]	; (8007e34 <HAL_UART_Init+0x174>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d004      	beq.n	8007d02 <HAL_UART_Init+0x42>
 8007cf8:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8007cfc:	484e      	ldr	r0, [pc, #312]	; (8007e38 <HAL_UART_Init+0x178>)
 8007cfe:	f7fa f86f 	bl	8001de0 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	699b      	ldr	r3, [r3, #24]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d032      	beq.n	8007d70 <HAL_UART_Init+0xb0>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	699b      	ldr	r3, [r3, #24]
 8007d0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d12:	d02d      	beq.n	8007d70 <HAL_UART_Init+0xb0>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	699b      	ldr	r3, [r3, #24]
 8007d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d1c:	d028      	beq.n	8007d70 <HAL_UART_Init+0xb0>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	699b      	ldr	r3, [r3, #24]
 8007d22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d26:	d023      	beq.n	8007d70 <HAL_UART_Init+0xb0>
 8007d28:	f240 116d 	movw	r1, #365	; 0x16d
 8007d2c:	4842      	ldr	r0, [pc, #264]	; (8007e38 <HAL_UART_Init+0x178>)
 8007d2e:	f7fa f857 	bl	8001de0 <assert_failed>
 8007d32:	e01d      	b.n	8007d70 <HAL_UART_Init+0xb0>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a3c      	ldr	r2, [pc, #240]	; (8007e2c <HAL_UART_Init+0x16c>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d018      	beq.n	8007d70 <HAL_UART_Init+0xb0>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a3b      	ldr	r2, [pc, #236]	; (8007e30 <HAL_UART_Init+0x170>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d013      	beq.n	8007d70 <HAL_UART_Init+0xb0>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a39      	ldr	r2, [pc, #228]	; (8007e34 <HAL_UART_Init+0x174>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d00e      	beq.n	8007d70 <HAL_UART_Init+0xb0>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a39      	ldr	r2, [pc, #228]	; (8007e3c <HAL_UART_Init+0x17c>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d009      	beq.n	8007d70 <HAL_UART_Init+0xb0>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a37      	ldr	r2, [pc, #220]	; (8007e40 <HAL_UART_Init+0x180>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d004      	beq.n	8007d70 <HAL_UART_Init+0xb0>
 8007d66:	f240 1171 	movw	r1, #369	; 0x171
 8007d6a:	4833      	ldr	r0, [pc, #204]	; (8007e38 <HAL_UART_Init+0x178>)
 8007d6c:	f7fa f838 	bl	8001de0 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d009      	beq.n	8007d8c <HAL_UART_Init+0xcc>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d80:	d004      	beq.n	8007d8c <HAL_UART_Init+0xcc>
 8007d82:	f240 1173 	movw	r1, #371	; 0x173
 8007d86:	482c      	ldr	r0, [pc, #176]	; (8007e38 <HAL_UART_Init+0x178>)
 8007d88:	f7fa f82a 	bl	8001de0 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d111      	bne.n	8007dbc <HAL_UART_Init+0xfc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 fb05 	bl	80083b0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d102      	bne.n	8007db4 <HAL_UART_Init+0xf4>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a24      	ldr	r2, [pc, #144]	; (8007e44 <HAL_UART_Init+0x184>)
 8007db2:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2224      	movs	r2, #36	; 0x24
 8007dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68da      	ldr	r2, [r3, #12]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007dd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 fcf9 	bl	80087cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	691a      	ldr	r2, [r3, #16]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007de8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	695a      	ldr	r2, [r3, #20]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007df8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	68da      	ldr	r2, [r3, #12]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2220      	movs	r2, #32
 8007e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2220      	movs	r2, #32
 8007e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3708      	adds	r7, #8
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	40013800 	.word	0x40013800
 8007e30:	40004400 	.word	0x40004400
 8007e34:	40004800 	.word	0x40004800
 8007e38:	08011438 	.word	0x08011438
 8007e3c:	40004c00 	.word	0x40004c00
 8007e40:	40005000 	.word	0x40005000
 8007e44:	08002285 	.word	0x08002285

08007e48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b08a      	sub	sp, #40	; 0x28
 8007e4c:	af02      	add	r7, sp, #8
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	60b9      	str	r1, [r7, #8]
 8007e52:	603b      	str	r3, [r7, #0]
 8007e54:	4613      	mov	r3, r2
 8007e56:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	2b20      	cmp	r3, #32
 8007e66:	d17c      	bne.n	8007f62 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d002      	beq.n	8007e74 <HAL_UART_Transmit+0x2c>
 8007e6e:	88fb      	ldrh	r3, [r7, #6]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d101      	bne.n	8007e78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	e075      	b.n	8007f64 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d101      	bne.n	8007e86 <HAL_UART_Transmit+0x3e>
 8007e82:	2302      	movs	r3, #2
 8007e84:	e06e      	b.n	8007f64 <HAL_UART_Transmit+0x11c>
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2200      	movs	r2, #0
 8007e92:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2221      	movs	r2, #33	; 0x21
 8007e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e9c:	f7fa fc82 	bl	80027a4 <HAL_GetTick>
 8007ea0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	88fa      	ldrh	r2, [r7, #6]
 8007ea6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	88fa      	ldrh	r2, [r7, #6]
 8007eac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eb6:	d108      	bne.n	8007eca <HAL_UART_Transmit+0x82>
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d104      	bne.n	8007eca <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	61bb      	str	r3, [r7, #24]
 8007ec8:	e003      	b.n	8007ed2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007eda:	e02a      	b.n	8007f32 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	9300      	str	r3, [sp, #0]
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	2180      	movs	r1, #128	; 0x80
 8007ee6:	68f8      	ldr	r0, [r7, #12]
 8007ee8:	f000 fa98 	bl	800841c <UART_WaitOnFlagUntilTimeout>
 8007eec:	4603      	mov	r3, r0
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d001      	beq.n	8007ef6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007ef2:	2303      	movs	r3, #3
 8007ef4:	e036      	b.n	8007f64 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d10b      	bne.n	8007f14 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	881b      	ldrh	r3, [r3, #0]
 8007f00:	461a      	mov	r2, r3
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f0a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	3302      	adds	r3, #2
 8007f10:	61bb      	str	r3, [r7, #24]
 8007f12:	e007      	b.n	8007f24 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	781a      	ldrb	r2, [r3, #0]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	3301      	adds	r3, #1
 8007f22:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	b29a      	uxth	r2, r3
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d1cf      	bne.n	8007edc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	2200      	movs	r2, #0
 8007f44:	2140      	movs	r1, #64	; 0x40
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f000 fa68 	bl	800841c <UART_WaitOnFlagUntilTimeout>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d001      	beq.n	8007f56 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007f52:	2303      	movs	r3, #3
 8007f54:	e006      	b.n	8007f64 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2220      	movs	r2, #32
 8007f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	e000      	b.n	8007f64 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007f62:	2302      	movs	r3, #2
  }
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3720      	adds	r7, #32
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	4613      	mov	r3, r2
 8007f78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	2b20      	cmp	r3, #32
 8007f84:	d11d      	bne.n	8007fc2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d002      	beq.n	8007f92 <HAL_UART_Receive_IT+0x26>
 8007f8c:	88fb      	ldrh	r3, [r7, #6]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d101      	bne.n	8007f96 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e016      	b.n	8007fc4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d101      	bne.n	8007fa4 <HAL_UART_Receive_IT+0x38>
 8007fa0:	2302      	movs	r3, #2
 8007fa2:	e00f      	b.n	8007fc4 <HAL_UART_Receive_IT+0x58>
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007fb2:	88fb      	ldrh	r3, [r7, #6]
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	68b9      	ldr	r1, [r7, #8]
 8007fb8:	68f8      	ldr	r0, [r7, #12]
 8007fba:	f000 fa79 	bl	80084b0 <UART_Start_Receive_IT>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	e000      	b.n	8007fc4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007fc2:	2302      	movs	r3, #2
  }
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3710      	adds	r7, #16
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b08a      	sub	sp, #40	; 0x28
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	695b      	ldr	r3, [r3, #20]
 8007fea:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007fec:	2300      	movs	r3, #0
 8007fee:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff6:	f003 030f 	and.w	r3, r3, #15
 8007ffa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d10d      	bne.n	800801e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008004:	f003 0320 	and.w	r3, r3, #32
 8008008:	2b00      	cmp	r3, #0
 800800a:	d008      	beq.n	800801e <HAL_UART_IRQHandler+0x52>
 800800c:	6a3b      	ldr	r3, [r7, #32]
 800800e:	f003 0320 	and.w	r3, r3, #32
 8008012:	2b00      	cmp	r3, #0
 8008014:	d003      	beq.n	800801e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 fb2c 	bl	8008674 <UART_Receive_IT>
      return;
 800801c:	e180      	b.n	8008320 <HAL_UART_IRQHandler+0x354>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	2b00      	cmp	r3, #0
 8008022:	f000 80b4 	beq.w	800818e <HAL_UART_IRQHandler+0x1c2>
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	f003 0301 	and.w	r3, r3, #1
 800802c:	2b00      	cmp	r3, #0
 800802e:	d105      	bne.n	800803c <HAL_UART_IRQHandler+0x70>
 8008030:	6a3b      	ldr	r3, [r7, #32]
 8008032:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008036:	2b00      	cmp	r3, #0
 8008038:	f000 80a9 	beq.w	800818e <HAL_UART_IRQHandler+0x1c2>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800803c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803e:	f003 0301 	and.w	r3, r3, #1
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00a      	beq.n	800805c <HAL_UART_IRQHandler+0x90>
 8008046:	6a3b      	ldr	r3, [r7, #32]
 8008048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800804c:	2b00      	cmp	r3, #0
 800804e:	d005      	beq.n	800805c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008054:	f043 0201 	orr.w	r2, r3, #1
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800805c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805e:	f003 0304 	and.w	r3, r3, #4
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00a      	beq.n	800807c <HAL_UART_IRQHandler+0xb0>
 8008066:	69fb      	ldr	r3, [r7, #28]
 8008068:	f003 0301 	and.w	r3, r3, #1
 800806c:	2b00      	cmp	r3, #0
 800806e:	d005      	beq.n	800807c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008074:	f043 0202 	orr.w	r2, r3, #2
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800807c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807e:	f003 0302 	and.w	r3, r3, #2
 8008082:	2b00      	cmp	r3, #0
 8008084:	d00a      	beq.n	800809c <HAL_UART_IRQHandler+0xd0>
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	f003 0301 	and.w	r3, r3, #1
 800808c:	2b00      	cmp	r3, #0
 800808e:	d005      	beq.n	800809c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008094:	f043 0204 	orr.w	r2, r3, #4
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800809c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809e:	f003 0308 	and.w	r3, r3, #8
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00f      	beq.n	80080c6 <HAL_UART_IRQHandler+0xfa>
 80080a6:	6a3b      	ldr	r3, [r7, #32]
 80080a8:	f003 0320 	and.w	r3, r3, #32
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d104      	bne.n	80080ba <HAL_UART_IRQHandler+0xee>
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	f003 0301 	and.w	r3, r3, #1
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d005      	beq.n	80080c6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080be:	f043 0208 	orr.w	r2, r3, #8
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f000 8123 	beq.w	8008316 <HAL_UART_IRQHandler+0x34a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80080d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d2:	f003 0320 	and.w	r3, r3, #32
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d007      	beq.n	80080ea <HAL_UART_IRQHandler+0x11e>
 80080da:	6a3b      	ldr	r3, [r7, #32]
 80080dc:	f003 0320 	and.w	r3, r3, #32
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d002      	beq.n	80080ea <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 fac5 	bl	8008674 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	695b      	ldr	r3, [r3, #20]
 80080f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	bf14      	ite	ne
 80080f8:	2301      	movne	r3, #1
 80080fa:	2300      	moveq	r3, #0
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008104:	f003 0308 	and.w	r3, r3, #8
 8008108:	2b00      	cmp	r3, #0
 800810a:	d102      	bne.n	8008112 <HAL_UART_IRQHandler+0x146>
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d033      	beq.n	800817a <HAL_UART_IRQHandler+0x1ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fa05 	bl	8008522 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	695b      	ldr	r3, [r3, #20]
 800811e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008122:	2b00      	cmp	r3, #0
 8008124:	d024      	beq.n	8008170 <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	695a      	ldr	r2, [r3, #20]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008134:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800813a:	2b00      	cmp	r3, #0
 800813c:	d013      	beq.n	8008166 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008142:	4a79      	ldr	r2, [pc, #484]	; (8008328 <HAL_UART_IRQHandler+0x35c>)
 8008144:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800814a:	4618      	mov	r0, r3
 800814c:	f7fb f8c0 	bl	80032d0 <HAL_DMA_Abort_IT>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d019      	beq.n	800818a <HAL_UART_IRQHandler+0x1be>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800815a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008160:	4610      	mov	r0, r2
 8008162:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008164:	e011      	b.n	800818a <HAL_UART_IRQHandler+0x1be>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800816e:	e00c      	b.n	800818a <HAL_UART_IRQHandler+0x1be>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008178:	e007      	b.n	800818a <HAL_UART_IRQHandler+0x1be>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008188:	e0c5      	b.n	8008316 <HAL_UART_IRQHandler+0x34a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800818a:	bf00      	nop
    return;
 800818c:	e0c3      	b.n	8008316 <HAL_UART_IRQHandler+0x34a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008192:	2b01      	cmp	r3, #1
 8008194:	f040 80a3 	bne.w	80082de <HAL_UART_IRQHandler+0x312>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819a:	f003 0310 	and.w	r3, r3, #16
 800819e:	2b00      	cmp	r3, #0
 80081a0:	f000 809d 	beq.w	80082de <HAL_UART_IRQHandler+0x312>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80081a4:	6a3b      	ldr	r3, [r7, #32]
 80081a6:	f003 0310 	and.w	r3, r3, #16
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	f000 8097 	beq.w	80082de <HAL_UART_IRQHandler+0x312>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80081b0:	2300      	movs	r3, #0
 80081b2:	60fb      	str	r3, [r7, #12]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	60fb      	str	r3, [r7, #12]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	60fb      	str	r3, [r7, #12]
 80081c4:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	695b      	ldr	r3, [r3, #20]
 80081cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d04f      	beq.n	8008274 <HAL_UART_IRQHandler+0x2a8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80081de:	8a3b      	ldrh	r3, [r7, #16]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f000 809a 	beq.w	800831a <HAL_UART_IRQHandler+0x34e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80081ea:	8a3a      	ldrh	r2, [r7, #16]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	f080 8094 	bcs.w	800831a <HAL_UART_IRQHandler+0x34e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	8a3a      	ldrh	r2, [r7, #16]
 80081f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081fc:	699b      	ldr	r3, [r3, #24]
 80081fe:	2b20      	cmp	r3, #32
 8008200:	d02b      	beq.n	800825a <HAL_UART_IRQHandler+0x28e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68da      	ldr	r2, [r3, #12]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008210:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	695a      	ldr	r2, [r3, #20]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f022 0201 	bic.w	r2, r2, #1
 8008220:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	695a      	ldr	r2, [r3, #20]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008230:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2220      	movs	r2, #32
 8008236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68da      	ldr	r2, [r3, #12]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f022 0210 	bic.w	r2, r2, #16
 800824e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008254:	4618      	mov	r0, r3
 8008256:	f7fb f801 	bl	800325c <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8008266:	b292      	uxth	r2, r2
 8008268:	1a8a      	subs	r2, r1, r2
 800826a:	b292      	uxth	r2, r2
 800826c:	4611      	mov	r1, r2
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
      return;
 8008272:	e052      	b.n	800831a <HAL_UART_IRQHandler+0x34e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800827c:	b29b      	uxth	r3, r3
 800827e:	1ad3      	subs	r3, r2, r3
 8008280:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008286:	b29b      	uxth	r3, r3
 8008288:	2b00      	cmp	r3, #0
 800828a:	d048      	beq.n	800831e <HAL_UART_IRQHandler+0x352>
          &&(nb_rx_data > 0U) )
 800828c:	8a7b      	ldrh	r3, [r7, #18]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d045      	beq.n	800831e <HAL_UART_IRQHandler+0x352>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	68da      	ldr	r2, [r3, #12]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80082a0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	695a      	ldr	r2, [r3, #20]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f022 0201 	bic.w	r2, r2, #1
 80082b0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2220      	movs	r2, #32
 80082b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68da      	ldr	r2, [r3, #12]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f022 0210 	bic.w	r2, r2, #16
 80082ce:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082d4:	8a7a      	ldrh	r2, [r7, #18]
 80082d6:	4611      	mov	r1, r2
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
      return;
 80082dc:	e01f      	b.n	800831e <HAL_UART_IRQHandler+0x352>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80082de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d008      	beq.n	80082fa <HAL_UART_IRQHandler+0x32e>
 80082e8:	6a3b      	ldr	r3, [r7, #32]
 80082ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d003      	beq.n	80082fa <HAL_UART_IRQHandler+0x32e>
  {
    UART_Transmit_IT(huart);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 f956 	bl	80085a4 <UART_Transmit_IT>
    return;
 80082f8:	e012      	b.n	8008320 <HAL_UART_IRQHandler+0x354>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80082fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00d      	beq.n	8008320 <HAL_UART_IRQHandler+0x354>
 8008304:	6a3b      	ldr	r3, [r7, #32]
 8008306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800830a:	2b00      	cmp	r3, #0
 800830c:	d008      	beq.n	8008320 <HAL_UART_IRQHandler+0x354>
  {
    UART_EndTransmit_IT(huart);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 f997 	bl	8008642 <UART_EndTransmit_IT>
    return;
 8008314:	e004      	b.n	8008320 <HAL_UART_IRQHandler+0x354>
    return;
 8008316:	bf00      	nop
 8008318:	e002      	b.n	8008320 <HAL_UART_IRQHandler+0x354>
      return;
 800831a:	bf00      	nop
 800831c:	e000      	b.n	8008320 <HAL_UART_IRQHandler+0x354>
      return;
 800831e:	bf00      	nop
  }
}
 8008320:	3728      	adds	r7, #40	; 0x28
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	0800857b 	.word	0x0800857b

0800832c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008334:	bf00      	nop
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	bc80      	pop	{r7}
 800833c:	4770      	bx	lr

0800833e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800833e:	b480      	push	{r7}
 8008340:	b083      	sub	sp, #12
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008346:	bf00      	nop
 8008348:	370c      	adds	r7, #12
 800834a:	46bd      	mov	sp, r7
 800834c:	bc80      	pop	{r7}
 800834e:	4770      	bx	lr

08008350 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008358:	bf00      	nop
 800835a:	370c      	adds	r7, #12
 800835c:	46bd      	mov	sp, r7
 800835e:	bc80      	pop	{r7}
 8008360:	4770      	bx	lr

08008362 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008362:	b480      	push	{r7}
 8008364:	b083      	sub	sp, #12
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800836a:	bf00      	nop
 800836c:	370c      	adds	r7, #12
 800836e:	46bd      	mov	sp, r7
 8008370:	bc80      	pop	{r7}
 8008372:	4770      	bx	lr

08008374 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800837c:	bf00      	nop
 800837e:	370c      	adds	r7, #12
 8008380:	46bd      	mov	sp, r7
 8008382:	bc80      	pop	{r7}
 8008384:	4770      	bx	lr

08008386 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008386:	b480      	push	{r7}
 8008388:	b083      	sub	sp, #12
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800838e:	bf00      	nop
 8008390:	370c      	adds	r7, #12
 8008392:	46bd      	mov	sp, r7
 8008394:	bc80      	pop	{r7}
 8008396:	4770      	bx	lr

08008398 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	460b      	mov	r3, r1
 80083a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80083a4:	bf00      	nop
 80083a6:	370c      	adds	r7, #12
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bc80      	pop	{r7}
 80083ac:	4770      	bx	lr
	...

080083b0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a0f      	ldr	r2, [pc, #60]	; (80083f8 <UART_InitCallbacksToDefault+0x48>)
 80083bc:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	4a0e      	ldr	r2, [pc, #56]	; (80083fc <UART_InitCallbacksToDefault+0x4c>)
 80083c2:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a0e      	ldr	r2, [pc, #56]	; (8008400 <UART_InitCallbacksToDefault+0x50>)
 80083c8:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4a0d      	ldr	r2, [pc, #52]	; (8008404 <UART_InitCallbacksToDefault+0x54>)
 80083ce:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a0d      	ldr	r2, [pc, #52]	; (8008408 <UART_InitCallbacksToDefault+0x58>)
 80083d4:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4a0c      	ldr	r2, [pc, #48]	; (800840c <UART_InitCallbacksToDefault+0x5c>)
 80083da:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a0c      	ldr	r2, [pc, #48]	; (8008410 <UART_InitCallbacksToDefault+0x60>)
 80083e0:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a0b      	ldr	r2, [pc, #44]	; (8008414 <UART_InitCallbacksToDefault+0x64>)
 80083e6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4a0b      	ldr	r2, [pc, #44]	; (8008418 <UART_InitCallbacksToDefault+0x68>)
 80083ec:	669a      	str	r2, [r3, #104]	; 0x68

}
 80083ee:	bf00      	nop
 80083f0:	370c      	adds	r7, #12
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bc80      	pop	{r7}
 80083f6:	4770      	bx	lr
 80083f8:	0800832d 	.word	0x0800832d
 80083fc:	08001d81 	.word	0x08001d81
 8008400:	0800833f 	.word	0x0800833f
 8008404:	08001d95 	.word	0x08001d95
 8008408:	08008351 	.word	0x08008351
 800840c:	08008363 	.word	0x08008363
 8008410:	08008375 	.word	0x08008375
 8008414:	08008387 	.word	0x08008387
 8008418:	08008399 	.word	0x08008399

0800841c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	603b      	str	r3, [r7, #0]
 8008428:	4613      	mov	r3, r2
 800842a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800842c:	e02c      	b.n	8008488 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800842e:	69bb      	ldr	r3, [r7, #24]
 8008430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008434:	d028      	beq.n	8008488 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d007      	beq.n	800844c <UART_WaitOnFlagUntilTimeout+0x30>
 800843c:	f7fa f9b2 	bl	80027a4 <HAL_GetTick>
 8008440:	4602      	mov	r2, r0
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	1ad3      	subs	r3, r2, r3
 8008446:	69ba      	ldr	r2, [r7, #24]
 8008448:	429a      	cmp	r2, r3
 800844a:	d21d      	bcs.n	8008488 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	68da      	ldr	r2, [r3, #12]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800845a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	695a      	ldr	r2, [r3, #20]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f022 0201 	bic.w	r2, r2, #1
 800846a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2220      	movs	r2, #32
 8008470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2220      	movs	r2, #32
 8008478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2200      	movs	r2, #0
 8008480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008484:	2303      	movs	r3, #3
 8008486:	e00f      	b.n	80084a8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	681a      	ldr	r2, [r3, #0]
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	4013      	ands	r3, r2
 8008492:	68ba      	ldr	r2, [r7, #8]
 8008494:	429a      	cmp	r2, r3
 8008496:	bf0c      	ite	eq
 8008498:	2301      	moveq	r3, #1
 800849a:	2300      	movne	r3, #0
 800849c:	b2db      	uxtb	r3, r3
 800849e:	461a      	mov	r2, r3
 80084a0:	79fb      	ldrb	r3, [r7, #7]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d0c3      	beq.n	800842e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b085      	sub	sp, #20
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	4613      	mov	r3, r2
 80084bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	88fa      	ldrh	r2, [r7, #6]
 80084c8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	88fa      	ldrh	r2, [r7, #6]
 80084ce:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2200      	movs	r2, #0
 80084d4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2222      	movs	r2, #34	; 0x22
 80084da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68da      	ldr	r2, [r3, #12]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084f4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	695a      	ldr	r2, [r3, #20]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f042 0201 	orr.w	r2, r2, #1
 8008504:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68da      	ldr	r2, [r3, #12]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f042 0220 	orr.w	r2, r2, #32
 8008514:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008516:	2300      	movs	r3, #0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3714      	adds	r7, #20
 800851c:	46bd      	mov	sp, r7
 800851e:	bc80      	pop	{r7}
 8008520:	4770      	bx	lr

08008522 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008522:	b480      	push	{r7}
 8008524:	b083      	sub	sp, #12
 8008526:	af00      	add	r7, sp, #0
 8008528:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68da      	ldr	r2, [r3, #12]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008538:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	695a      	ldr	r2, [r3, #20]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f022 0201 	bic.w	r2, r2, #1
 8008548:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800854e:	2b01      	cmp	r3, #1
 8008550:	d107      	bne.n	8008562 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	68da      	ldr	r2, [r3, #12]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f022 0210 	bic.w	r2, r2, #16
 8008560:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2220      	movs	r2, #32
 8008566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008570:	bf00      	nop
 8008572:	370c      	adds	r7, #12
 8008574:	46bd      	mov	sp, r7
 8008576:	bc80      	pop	{r7}
 8008578:	4770      	bx	lr

0800857a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b084      	sub	sp, #16
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008586:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2200      	movs	r2, #0
 800858c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008598:	68f8      	ldr	r0, [r7, #12]
 800859a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800859c:	bf00      	nop
 800859e:	3710      	adds	r7, #16
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	2b21      	cmp	r3, #33	; 0x21
 80085b6:	d13e      	bne.n	8008636 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085c0:	d114      	bne.n	80085ec <UART_Transmit_IT+0x48>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d110      	bne.n	80085ec <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a1b      	ldr	r3, [r3, #32]
 80085ce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	881b      	ldrh	r3, [r3, #0]
 80085d4:	461a      	mov	r2, r3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085de:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6a1b      	ldr	r3, [r3, #32]
 80085e4:	1c9a      	adds	r2, r3, #2
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	621a      	str	r2, [r3, #32]
 80085ea:	e008      	b.n	80085fe <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6a1b      	ldr	r3, [r3, #32]
 80085f0:	1c59      	adds	r1, r3, #1
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	6211      	str	r1, [r2, #32]
 80085f6:	781a      	ldrb	r2, [r3, #0]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008602:	b29b      	uxth	r3, r3
 8008604:	3b01      	subs	r3, #1
 8008606:	b29b      	uxth	r3, r3
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	4619      	mov	r1, r3
 800860c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800860e:	2b00      	cmp	r3, #0
 8008610:	d10f      	bne.n	8008632 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	68da      	ldr	r2, [r3, #12]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008620:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68da      	ldr	r2, [r3, #12]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008630:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008632:	2300      	movs	r3, #0
 8008634:	e000      	b.n	8008638 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008636:	2302      	movs	r3, #2
  }
}
 8008638:	4618      	mov	r0, r3
 800863a:	3714      	adds	r7, #20
 800863c:	46bd      	mov	sp, r7
 800863e:	bc80      	pop	{r7}
 8008640:	4770      	bx	lr

08008642 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b082      	sub	sp, #8
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	68da      	ldr	r2, [r3, #12]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008658:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2220      	movs	r2, #32
 800865e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	3708      	adds	r7, #8
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b086      	sub	sp, #24
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008682:	b2db      	uxtb	r3, r3
 8008684:	2b22      	cmp	r3, #34	; 0x22
 8008686:	f040 809b 	bne.w	80087c0 <UART_Receive_IT+0x14c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008692:	d117      	bne.n	80086c4 <UART_Receive_IT+0x50>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d113      	bne.n	80086c4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800869c:	2300      	movs	r3, #0
 800869e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a4:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	685b      	ldr	r3, [r3, #4]
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086b2:	b29a      	uxth	r2, r3
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086bc:	1c9a      	adds	r2, r3, #2
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	629a      	str	r2, [r3, #40]	; 0x28
 80086c2:	e026      	b.n	8008712 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c8:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80086ca:	2300      	movs	r3, #0
 80086cc:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086d6:	d007      	beq.n	80086e8 <UART_Receive_IT+0x74>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d10a      	bne.n	80086f6 <UART_Receive_IT+0x82>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d106      	bne.n	80086f6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	b2da      	uxtb	r2, r3
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	701a      	strb	r2, [r3, #0]
 80086f4:	e008      	b.n	8008708 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008702:	b2da      	uxtb	r2, r3
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800870c:	1c5a      	adds	r2, r3, #1
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008716:	b29b      	uxth	r3, r3
 8008718:	3b01      	subs	r3, #1
 800871a:	b29b      	uxth	r3, r3
 800871c:	687a      	ldr	r2, [r7, #4]
 800871e:	4619      	mov	r1, r3
 8008720:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008722:	2b00      	cmp	r3, #0
 8008724:	d14a      	bne.n	80087bc <UART_Receive_IT+0x148>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	68da      	ldr	r2, [r3, #12]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f022 0220 	bic.w	r2, r2, #32
 8008734:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	68da      	ldr	r2, [r3, #12]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008744:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	695a      	ldr	r2, [r3, #20]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f022 0201 	bic.w	r2, r2, #1
 8008754:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2220      	movs	r2, #32
 800875a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008762:	2b01      	cmp	r3, #1
 8008764:	d124      	bne.n	80087b0 <UART_Receive_IT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	68da      	ldr	r2, [r3, #12]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f022 0210 	bic.w	r2, r2, #16
 800877a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f003 0310 	and.w	r3, r3, #16
 8008786:	2b10      	cmp	r3, #16
 8008788:	d10a      	bne.n	80087a0 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800878a:	2300      	movs	r3, #0
 800878c:	60fb      	str	r3, [r7, #12]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	60fb      	str	r3, [r7, #12]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	60fb      	str	r3, [r7, #12]
 800879e:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80087a8:	4611      	mov	r1, r2
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	4798      	blx	r3
 80087ae:	e003      	b.n	80087b8 <UART_Receive_IT+0x144>
      else
      {
       /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	4798      	blx	r3
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80087b8:	2300      	movs	r3, #0
 80087ba:	e002      	b.n	80087c2 <UART_Receive_IT+0x14e>
    }
    return HAL_OK;
 80087bc:	2300      	movs	r3, #0
 80087be:	e000      	b.n	80087c2 <UART_Receive_IT+0x14e>
  }
  else
  {
    return HAL_BUSY;
 80087c0:	2302      	movs	r3, #2
  }
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3718      	adds	r7, #24
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
	...

080087cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	4a5f      	ldr	r2, [pc, #380]	; (8008958 <UART_SetConfig+0x18c>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d904      	bls.n	80087e8 <UART_SetConfig+0x1c>
 80087de:	f640 6153 	movw	r1, #3667	; 0xe53
 80087e2:	485e      	ldr	r0, [pc, #376]	; (800895c <UART_SetConfig+0x190>)
 80087e4:	f7f9 fafc 	bl	8001de0 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d009      	beq.n	8008804 <UART_SetConfig+0x38>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087f8:	d004      	beq.n	8008804 <UART_SetConfig+0x38>
 80087fa:	f640 6154 	movw	r1, #3668	; 0xe54
 80087fe:	4857      	ldr	r0, [pc, #348]	; (800895c <UART_SetConfig+0x190>)
 8008800:	f7f9 faee 	bl	8001de0 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	691b      	ldr	r3, [r3, #16]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00e      	beq.n	800882a <UART_SetConfig+0x5e>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008814:	d009      	beq.n	800882a <UART_SetConfig+0x5e>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800881e:	d004      	beq.n	800882a <UART_SetConfig+0x5e>
 8008820:	f640 6155 	movw	r1, #3669	; 0xe55
 8008824:	484d      	ldr	r0, [pc, #308]	; (800895c <UART_SetConfig+0x190>)
 8008826:	f7f9 fadb 	bl	8001de0 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	695a      	ldr	r2, [r3, #20]
 800882e:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8008832:	4013      	ands	r3, r2
 8008834:	2b00      	cmp	r3, #0
 8008836:	d103      	bne.n	8008840 <UART_SetConfig+0x74>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	695b      	ldr	r3, [r3, #20]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d104      	bne.n	800884a <UART_SetConfig+0x7e>
 8008840:	f640 6156 	movw	r1, #3670	; 0xe56
 8008844:	4845      	ldr	r0, [pc, #276]	; (800895c <UART_SetConfig+0x190>)
 8008846:	f7f9 facb 	bl	8001de0 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	691b      	ldr	r3, [r3, #16]
 8008850:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	68da      	ldr	r2, [r3, #12]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	430a      	orrs	r2, r1
 800885e:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	689a      	ldr	r2, [r3, #8]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	691b      	ldr	r3, [r3, #16]
 8008868:	431a      	orrs	r2, r3
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	695b      	ldr	r3, [r3, #20]
 800886e:	4313      	orrs	r3, r2
 8008870:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800887c:	f023 030c 	bic.w	r3, r3, #12
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	6812      	ldr	r2, [r2, #0]
 8008884:	68b9      	ldr	r1, [r7, #8]
 8008886:	430b      	orrs	r3, r1
 8008888:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	695b      	ldr	r3, [r3, #20]
 8008890:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	699a      	ldr	r2, [r3, #24]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	430a      	orrs	r2, r1
 800889e:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a2e      	ldr	r2, [pc, #184]	; (8008960 <UART_SetConfig+0x194>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d103      	bne.n	80088b2 <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80088aa:	f7fb feb7 	bl	800461c <HAL_RCC_GetPCLK2Freq>
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	e002      	b.n	80088b8 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80088b2:	f7fb fe9f 	bl	80045f4 <HAL_RCC_GetPCLK1Freq>
 80088b6:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80088b8:	68fa      	ldr	r2, [r7, #12]
 80088ba:	4613      	mov	r3, r2
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	4413      	add	r3, r2
 80088c0:	009a      	lsls	r2, r3, #2
 80088c2:	441a      	add	r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80088ce:	4a25      	ldr	r2, [pc, #148]	; (8008964 <UART_SetConfig+0x198>)
 80088d0:	fba2 2303 	umull	r2, r3, r2, r3
 80088d4:	095b      	lsrs	r3, r3, #5
 80088d6:	0119      	lsls	r1, r3, #4
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	4613      	mov	r3, r2
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	4413      	add	r3, r2
 80088e0:	009a      	lsls	r2, r3, #2
 80088e2:	441a      	add	r2, r3
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80088ee:	4b1d      	ldr	r3, [pc, #116]	; (8008964 <UART_SetConfig+0x198>)
 80088f0:	fba3 0302 	umull	r0, r3, r3, r2
 80088f4:	095b      	lsrs	r3, r3, #5
 80088f6:	2064      	movs	r0, #100	; 0x64
 80088f8:	fb00 f303 	mul.w	r3, r0, r3
 80088fc:	1ad3      	subs	r3, r2, r3
 80088fe:	011b      	lsls	r3, r3, #4
 8008900:	3332      	adds	r3, #50	; 0x32
 8008902:	4a18      	ldr	r2, [pc, #96]	; (8008964 <UART_SetConfig+0x198>)
 8008904:	fba2 2303 	umull	r2, r3, r2, r3
 8008908:	095b      	lsrs	r3, r3, #5
 800890a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800890e:	4419      	add	r1, r3
 8008910:	68fa      	ldr	r2, [r7, #12]
 8008912:	4613      	mov	r3, r2
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	4413      	add	r3, r2
 8008918:	009a      	lsls	r2, r3, #2
 800891a:	441a      	add	r2, r3
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	fbb2 f2f3 	udiv	r2, r2, r3
 8008926:	4b0f      	ldr	r3, [pc, #60]	; (8008964 <UART_SetConfig+0x198>)
 8008928:	fba3 0302 	umull	r0, r3, r3, r2
 800892c:	095b      	lsrs	r3, r3, #5
 800892e:	2064      	movs	r0, #100	; 0x64
 8008930:	fb00 f303 	mul.w	r3, r0, r3
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	011b      	lsls	r3, r3, #4
 8008938:	3332      	adds	r3, #50	; 0x32
 800893a:	4a0a      	ldr	r2, [pc, #40]	; (8008964 <UART_SetConfig+0x198>)
 800893c:	fba2 2303 	umull	r2, r3, r2, r3
 8008940:	095b      	lsrs	r3, r3, #5
 8008942:	f003 020f 	and.w	r2, r3, #15
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	440a      	add	r2, r1
 800894c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800894e:	bf00      	nop
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	0044aa20 	.word	0x0044aa20
 800895c:	08011438 	.word	0x08011438
 8008960:	40013800 	.word	0x40013800
 8008964:	51eb851f 	.word	0x51eb851f

08008968 <BAT_init>:
} T_ADC_Context;

static T_ADC_Context g_ADC_context;

void BAT_init(ADC_HandleTypeDef *p_adcHandle)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing battery check");
 8008970:	4905      	ldr	r1, [pc, #20]	; (8008988 <BAT_init+0x20>)
 8008972:	2001      	movs	r0, #1
 8008974:	f001 fefc 	bl	800a770 <LOG_log>

  g_ADC_context.adcHandle = p_adcHandle;
 8008978:	4a04      	ldr	r2, [pc, #16]	; (800898c <BAT_init+0x24>)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6013      	str	r3, [r2, #0]

  return;
 800897e:	bf00      	nop
}
 8008980:	3708      	adds	r7, #8
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	08011474 	.word	0x08011474
 800898c:	20000210 	.word	0x20000210

08008990 <BAT_update>:

void BAT_update(uint32_t *p_voltageInMv)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  uint32_t l_adcRawData;
  float    l_voltageInV;

  l_adcRawData = HAL_ADC_GetValue(g_ADC_context.adcHandle);
 8008998:	4b18      	ldr	r3, [pc, #96]	; (80089fc <BAT_update+0x6c>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4618      	mov	r0, r3
 800899e:	f7fa f8d1 	bl	8002b44 <HAL_ADC_GetValue>
 80089a2:	60f8      	str	r0, [r7, #12]

  /* Apply conversion based on STM32 reference voltage & resolution */
  l_voltageInV  = (l_adcRawData * 3.30f ) / 4096.0f;
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f7f8 fa01 	bl	8000dac <__aeabi_ui2f>
 80089aa:	4603      	mov	r3, r0
 80089ac:	4914      	ldr	r1, [pc, #80]	; (8008a00 <BAT_update+0x70>)
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7f8 fa54 	bl	8000e5c <__aeabi_fmul>
 80089b4:	4603      	mov	r3, r0
 80089b6:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7f8 fb02 	bl	8000fc4 <__aeabi_fdiv>
 80089c0:	4603      	mov	r3, r0
 80089c2:	60bb      	str	r3, [r7, #8]

  /* Consider voltage divider used between the battery & the ADC input */
  l_voltageInV *= 11.0f;
 80089c4:	490f      	ldr	r1, [pc, #60]	; (8008a04 <BAT_update+0x74>)
 80089c6:	68b8      	ldr	r0, [r7, #8]
 80089c8:	f7f8 fa48 	bl	8000e5c <__aeabi_fmul>
 80089cc:	4603      	mov	r3, r0
 80089ce:	60bb      	str	r3, [r7, #8]

  *p_voltageInMv = (uint32_t)(l_voltageInV * 1000.0f);
 80089d0:	490d      	ldr	r1, [pc, #52]	; (8008a08 <BAT_update+0x78>)
 80089d2:	68b8      	ldr	r0, [r7, #8]
 80089d4:	f7f8 fa42 	bl	8000e5c <__aeabi_fmul>
 80089d8:	4603      	mov	r3, r0
 80089da:	4618      	mov	r0, r3
 80089dc:	f7f8 fc2a 	bl	8001234 <__aeabi_f2uiz>
 80089e0:	4602      	mov	r2, r0
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	601a      	str	r2, [r3, #0]

  LOG_debug("Battery level: %u mV", *p_voltageInMv);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	461a      	mov	r2, r3
 80089ec:	4907      	ldr	r1, [pc, #28]	; (8008a0c <BAT_update+0x7c>)
 80089ee:	2000      	movs	r0, #0
 80089f0:	f001 febe 	bl	800a770 <LOG_log>

  return;
 80089f4:	bf00      	nop
}
 80089f6:	3710      	adds	r7, #16
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bd80      	pop	{r7, pc}
 80089fc:	20000210 	.word	0x20000210
 8008a00:	40533333 	.word	0x40533333
 8008a04:	41300000 	.word	0x41300000
 8008a08:	447a0000 	.word	0x447a0000
 8008a0c:	08011490 	.word	0x08011490

08008a10 <BLU_sendCommand>:
static void         BLU_sendCommand(uint32_t  p_command);
static void         BLU_readData   (uint8_t  *p_buffer );
static T_BLU_BUTTON BLU_getButton  (uint8_t  *p_buffer );

static void BLU_sendCommand(uint32_t p_command)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  uint32_t l_bitValue;

  for (l_bitValue = 0x01; l_bitValue < 0x0100; l_bitValue <<= 1)
 8008a18:	2301      	movs	r3, #1
 8008a1a:	60fb      	str	r3, [r7, #12]
 8008a1c:	e02c      	b.n	8008a78 <BLU_sendCommand+0x68>
  {
    if ((l_bitValue & p_command) != 0)
 8008a1e:	68fa      	ldr	r2, [r7, #12]
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	4013      	ands	r3, r2
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d006      	beq.n	8008a36 <BLU_sendCommand+0x26>
    {
      SET_BIT(GPIOC->ODR, BLUETOOTH_SPI_CMD_Pin);
 8008a28:	4b18      	ldr	r3, [pc, #96]	; (8008a8c <BLU_sendCommand+0x7c>)
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	4a17      	ldr	r2, [pc, #92]	; (8008a8c <BLU_sendCommand+0x7c>)
 8008a2e:	f043 0302 	orr.w	r3, r3, #2
 8008a32:	60d3      	str	r3, [r2, #12]
 8008a34:	e005      	b.n	8008a42 <BLU_sendCommand+0x32>
    }
    else
    {
      CLEAR_BIT(GPIOC->ODR, BLUETOOTH_SPI_CMD_Pin);
 8008a36:	4b15      	ldr	r3, [pc, #84]	; (8008a8c <BLU_sendCommand+0x7c>)
 8008a38:	68db      	ldr	r3, [r3, #12]
 8008a3a:	4a14      	ldr	r2, [pc, #80]	; (8008a8c <BLU_sendCommand+0x7c>)
 8008a3c:	f023 0302 	bic.w	r3, r3, #2
 8008a40:	60d3      	str	r3, [r2, #12]
    }

    SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 8008a42:	4b13      	ldr	r3, [pc, #76]	; (8008a90 <BLU_sendCommand+0x80>)
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	4a12      	ldr	r2, [pc, #72]	; (8008a90 <BLU_sendCommand+0x80>)
 8008a48:	f043 0310 	orr.w	r3, r3, #16
 8008a4c:	60d3      	str	r3, [r2, #12]
    UTI_delayUs(5);
 8008a4e:	2005      	movs	r0, #5
 8008a50:	f002 ff26 	bl	800b8a0 <UTI_delayUs>
    CLEAR_BIT(GPIOA->ODR, BLUETOOTH_SPI_CLK_Pin);
 8008a54:	4b0e      	ldr	r3, [pc, #56]	; (8008a90 <BLU_sendCommand+0x80>)
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	4a0d      	ldr	r2, [pc, #52]	; (8008a90 <BLU_sendCommand+0x80>)
 8008a5a:	f023 0310 	bic.w	r3, r3, #16
 8008a5e:	60d3      	str	r3, [r2, #12]
    UTI_delayUs(5);
 8008a60:	2005      	movs	r0, #5
 8008a62:	f002 ff1d 	bl	800b8a0 <UTI_delayUs>
    SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 8008a66:	4b0a      	ldr	r3, [pc, #40]	; (8008a90 <BLU_sendCommand+0x80>)
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	4a09      	ldr	r2, [pc, #36]	; (8008a90 <BLU_sendCommand+0x80>)
 8008a6c:	f043 0310 	orr.w	r3, r3, #16
 8008a70:	60d3      	str	r3, [r2, #12]
  for (l_bitValue = 0x01; l_bitValue < 0x0100; l_bitValue <<= 1)
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	005b      	lsls	r3, r3, #1
 8008a76:	60fb      	str	r3, [r7, #12]
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2bff      	cmp	r3, #255	; 0xff
 8008a7c:	d9cf      	bls.n	8008a1e <BLU_sendCommand+0xe>
  }
  UTI_delayUs(16);
 8008a7e:	2010      	movs	r0, #16
 8008a80:	f002 ff0e 	bl	800b8a0 <UTI_delayUs>

  return;
 8008a84:	bf00      	nop
}
 8008a86:	3710      	adds	r7, #16
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	40011000 	.word	0x40011000
 8008a90:	40010800 	.word	0x40010800

08008a94 <BLU_readData>:

static void BLU_readData(uint8_t *p_buffer)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  uint32_t l_index;
  uint32_t l_bitValue;

  /* Reset buffer */
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	60fb      	str	r3, [r7, #12]
 8008aa0:	e007      	b.n	8008ab2 <BLU_readData+0x1e>
  {
    p_buffer[l_index] = 0x00;
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	701a      	strb	r2, [r3, #0]
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	60fb      	str	r3, [r7, #12]
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2b06      	cmp	r3, #6
 8008ab6:	d9f4      	bls.n	8008aa2 <BLU_readData+0xe>
  }

  CLEAR_BIT(GPIOC->ODR, BLUETOOTH_SPI_CS_Pin);
 8008ab8:	4b2a      	ldr	r3, [pc, #168]	; (8008b64 <BLU_readData+0xd0>)
 8008aba:	68db      	ldr	r3, [r3, #12]
 8008abc:	4a29      	ldr	r2, [pc, #164]	; (8008b64 <BLU_readData+0xd0>)
 8008abe:	f023 0308 	bic.w	r3, r3, #8
 8008ac2:	60d3      	str	r3, [r2, #12]

  BLU_sendCommand(0x01);
 8008ac4:	2001      	movs	r0, #1
 8008ac6:	f7ff ffa3 	bl	8008a10 <BLU_sendCommand>
  BLU_sendCommand(0x42);
 8008aca:	2042      	movs	r0, #66	; 0x42
 8008acc:	f7ff ffa0 	bl	8008a10 <BLU_sendCommand>

  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	60fb      	str	r3, [r7, #12]
 8008ad4:	e038      	b.n	8008b48 <BLU_readData+0xb4>
  {
    for (l_bitValue = 0x01; l_bitValue < 0x100; l_bitValue <<= 1)
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	60bb      	str	r3, [r7, #8]
 8008ada:	e02c      	b.n	8008b36 <BLU_readData+0xa2>
    {
      SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 8008adc:	4b22      	ldr	r3, [pc, #136]	; (8008b68 <BLU_readData+0xd4>)
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	4a21      	ldr	r2, [pc, #132]	; (8008b68 <BLU_readData+0xd4>)
 8008ae2:	f043 0310 	orr.w	r3, r3, #16
 8008ae6:	60d3      	str	r3, [r2, #12]
      UTI_delayUs(5);
 8008ae8:	2005      	movs	r0, #5
 8008aea:	f002 fed9 	bl	800b8a0 <UTI_delayUs>
      CLEAR_BIT(GPIOA->ODR, BLUETOOTH_SPI_CLK_Pin);
 8008aee:	4b1e      	ldr	r3, [pc, #120]	; (8008b68 <BLU_readData+0xd4>)
 8008af0:	68db      	ldr	r3, [r3, #12]
 8008af2:	4a1d      	ldr	r2, [pc, #116]	; (8008b68 <BLU_readData+0xd4>)
 8008af4:	f023 0310 	bic.w	r3, r3, #16
 8008af8:	60d3      	str	r3, [r2, #12]
      UTI_delayUs(5);
 8008afa:	2005      	movs	r0, #5
 8008afc:	f002 fed0 	bl	800b8a0 <UTI_delayUs>
      SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 8008b00:	4b19      	ldr	r3, [pc, #100]	; (8008b68 <BLU_readData+0xd4>)
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	4a18      	ldr	r2, [pc, #96]	; (8008b68 <BLU_readData+0xd4>)
 8008b06:	f043 0310 	orr.w	r3, r3, #16
 8008b0a:	60d3      	str	r3, [r2, #12]

      if (READ_BIT(GPIOC->IDR, BLUETOOTH_SPI_DAT_Pin) != GPIO_PIN_RESET)
 8008b0c:	4b15      	ldr	r3, [pc, #84]	; (8008b64 <BLU_readData+0xd0>)
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	f003 0304 	and.w	r3, r3, #4
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d00b      	beq.n	8008b30 <BLU_readData+0x9c>
      {
        p_buffer[l_index] |= l_bitValue;
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	7819      	ldrb	r1, [r3, #0]
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	b2da      	uxtb	r2, r3
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	4403      	add	r3, r0
 8008b2a:	430a      	orrs	r2, r1
 8008b2c:	b2d2      	uxtb	r2, r2
 8008b2e:	701a      	strb	r2, [r3, #0]
    for (l_bitValue = 0x01; l_bitValue < 0x100; l_bitValue <<= 1)
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	005b      	lsls	r3, r3, #1
 8008b34:	60bb      	str	r3, [r7, #8]
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	2bff      	cmp	r3, #255	; 0xff
 8008b3a:	d9cf      	bls.n	8008adc <BLU_readData+0x48>
      else
      {
        ; /* Nothing to do */
      }
    }
      UTI_delayUs(16);
 8008b3c:	2010      	movs	r0, #16
 8008b3e:	f002 feaf 	bl	800b8a0 <UTI_delayUs>
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	3301      	adds	r3, #1
 8008b46:	60fb      	str	r3, [r7, #12]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2b06      	cmp	r3, #6
 8008b4c:	d9c3      	bls.n	8008ad6 <BLU_readData+0x42>
  }

  SET_BIT(GPIOC->ODR, BLUETOOTH_SPI_CS_Pin);
 8008b4e:	4b05      	ldr	r3, [pc, #20]	; (8008b64 <BLU_readData+0xd0>)
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	4a04      	ldr	r2, [pc, #16]	; (8008b64 <BLU_readData+0xd0>)
 8008b54:	f043 0308 	orr.w	r3, r3, #8
 8008b58:	60d3      	str	r3, [r2, #12]

  return;
 8008b5a:	bf00      	nop
}
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	40011000 	.word	0x40011000
 8008b68:	40010800 	.word	0x40010800

08008b6c <BLU_getButton>:

static T_BLU_BUTTON BLU_getButton(uint8_t *p_buffer)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b085      	sub	sp, #20
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  uint32_t l_buttonRawValue;
  uint32_t l_index;

  l_buttonRawValue = (p_buffer[BLU_BUTTON_HIGH_OFFSET] << 8) | p_buffer[BLU_BUTTON_LOW_OFFSET];
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	3302      	adds	r3, #2
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	021b      	lsls	r3, r3, #8
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	3201      	adds	r2, #1
 8008b80:	7812      	ldrb	r2, [r2, #0]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	60bb      	str	r3, [r7, #8]

  /* Ignore BLU_BUTTON_NONE value as it is not directly coded in raw data */
  for (l_index = BLU_BUTTON_SELECT; l_index < BLU_BUTTON_COUNT_VALUE; l_index++)
 8008b86:	2301      	movs	r3, #1
 8008b88:	60fb      	str	r3, [r7, #12]
 8008b8a:	e00f      	b.n	8008bac <BLU_getButton+0x40>
  {
    /* Stop decoding button data on 1st match (do not deal with multiple presses case) */
    if ((l_buttonRawValue & (1 << (l_index - 1))) == 0)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	3b01      	subs	r3, #1
 8008b90:	2201      	movs	r2, #1
 8008b92:	fa02 f303 	lsl.w	r3, r2, r3
 8008b96:	461a      	mov	r2, r3
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	4013      	ands	r3, r2
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d102      	bne.n	8008ba6 <BLU_getButton+0x3a>
    {
      return l_index;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	e006      	b.n	8008bb4 <BLU_getButton+0x48>
  for (l_index = BLU_BUTTON_SELECT; l_index < BLU_BUTTON_COUNT_VALUE; l_index++)
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	3301      	adds	r3, #1
 8008baa:	60fb      	str	r3, [r7, #12]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	2b10      	cmp	r3, #16
 8008bb0:	d9ec      	bls.n	8008b8c <BLU_getButton+0x20>
    {
      ; /* Nothing to do */
    }
  }

  return BLU_BUTTON_NONE;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3714      	adds	r7, #20
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bc80      	pop	{r7}
 8008bbc:	4770      	bx	lr
	...

08008bc0 <BLU_init>:

void BLU_init(void)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	af00      	add	r7, sp, #0
  LOG_info("Initializing bluetooth control");
 8008bc4:	4904      	ldr	r1, [pc, #16]	; (8008bd8 <BLU_init+0x18>)
 8008bc6:	2001      	movs	r0, #1
 8008bc8:	f001 fdd2 	bl	800a770 <LOG_log>

  BLU_initData(&g_BLU_context.lastData);
 8008bcc:	4803      	ldr	r0, [pc, #12]	; (8008bdc <BLU_init+0x1c>)
 8008bce:	f000 f807 	bl	8008be0 <BLU_initData>

  return;
 8008bd2:	bf00      	nop
}
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	080114a8 	.word	0x080114a8
 8008bdc:	20000214 	.word	0x20000214

08008be0 <BLU_initData>:

void BLU_initData(T_BLU_Data *p_data)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  p_data->leftX  = BLU_DATA_DEFAUT_DIRECTION;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2280      	movs	r2, #128	; 0x80
 8008bec:	601a      	str	r2, [r3, #0]
  p_data->leftY  = BLU_DATA_DEFAUT_DIRECTION;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2280      	movs	r2, #128	; 0x80
 8008bf2:	605a      	str	r2, [r3, #4]
  p_data->rightX = BLU_DATA_DEFAUT_DIRECTION;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2280      	movs	r2, #128	; 0x80
 8008bf8:	609a      	str	r2, [r3, #8]
  p_data->rightY = BLU_DATA_DEFAUT_DIRECTION;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2280      	movs	r2, #128	; 0x80
 8008bfe:	60da      	str	r2, [r3, #12]
  p_data->button = BLU_BUTTON_NONE;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	741a      	strb	r2, [r3, #16]

  return;
 8008c06:	bf00      	nop
}
 8008c08:	370c      	adds	r7, #12
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bc80      	pop	{r7}
 8008c0e:	4770      	bx	lr

08008c10 <BLU_receiveData>:

void BLU_receiveData(T_BLU_Data *p_data)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b08c      	sub	sp, #48	; 0x30
 8008c14:	af02      	add	r7, sp, #8
 8008c16:	6078      	str	r0, [r7, #4]
  uint8_t    l_buffer[BLU_DATA_BUFFER_LENGTH];
  T_BLU_Data l_readData;

  /* Read raw data */
  BLU_readData(l_buffer);
 8008c18:	f107 0320 	add.w	r3, r7, #32
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7ff ff39 	bl	8008a94 <BLU_readData>

  /* Start and decode raw data */
  l_readData.leftX  = l_buffer[BLU_LEFT_X_OFFSET ];
 8008c22:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008c26:	60fb      	str	r3, [r7, #12]
  l_readData.leftY  = l_buffer[BLU_LEFT_Y_OFFSET ];
 8008c28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008c2c:	613b      	str	r3, [r7, #16]
  l_readData.rightX = l_buffer[BLU_RIGHT_X_OFFSET];
 8008c2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c32:	617b      	str	r3, [r7, #20]
  l_readData.rightY = l_buffer[BLU_RIGHT_Y_OFFSET];
 8008c34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008c38:	61bb      	str	r3, [r7, #24]
  l_readData.button = BLU_getButton(l_buffer);
 8008c3a:	f107 0320 	add.w	r3, r7, #32
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7ff ff94 	bl	8008b6c <BLU_getButton>
 8008c44:	4603      	mov	r3, r0
 8008c46:	773b      	strb	r3, [r7, #28]

  /* Deal with startup condition, while read data is not valid yet */
  if  ((l_readData.leftX == 255 && l_readData.leftY == 255 && l_readData.rightX == 255 && l_readData.rightY ==255)
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2bff      	cmp	r3, #255	; 0xff
 8008c4c:	d108      	bne.n	8008c60 <BLU_receiveData+0x50>
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	2bff      	cmp	r3, #255	; 0xff
 8008c52:	d105      	bne.n	8008c60 <BLU_receiveData+0x50>
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	2bff      	cmp	r3, #255	; 0xff
 8008c58:	d102      	bne.n	8008c60 <BLU_receiveData+0x50>
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	2bff      	cmp	r3, #255	; 0xff
 8008c5e:	d00b      	beq.n	8008c78 <BLU_receiveData+0x68>
    || (l_readData.leftX ==   0 && l_readData.leftY ==   0 && l_readData.rightX ==   0 && l_readData.rightY ==  0))
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d10e      	bne.n	8008c84 <BLU_receiveData+0x74>
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d10b      	bne.n	8008c84 <BLU_receiveData+0x74>
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d108      	bne.n	8008c84 <BLU_receiveData+0x74>
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d105      	bne.n	8008c84 <BLU_receiveData+0x74>
  {
    BLU_initData(&l_readData);
 8008c78:	f107 030c 	add.w	r3, r7, #12
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	f7ff ffaf 	bl	8008be0 <BLU_initData>
 8008c82:	e053      	b.n	8008d2c <BLU_receiveData+0x11c>
  }
  /* Use a confirmation mechanism, on 2 cycles, as glitches are observed */
  else if ((l_readData.leftX  == g_BLU_context.lastData.leftX) &&
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	4b33      	ldr	r3, [pc, #204]	; (8008d54 <BLU_receiveData+0x144>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d14e      	bne.n	8008d2c <BLU_receiveData+0x11c>
           (l_readData.leftY  == g_BLU_context.lastData.leftY) &&
 8008c8e:	693a      	ldr	r2, [r7, #16]
 8008c90:	4b30      	ldr	r3, [pc, #192]	; (8008d54 <BLU_receiveData+0x144>)
 8008c92:	685b      	ldr	r3, [r3, #4]
  else if ((l_readData.leftX  == g_BLU_context.lastData.leftX) &&
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d149      	bne.n	8008d2c <BLU_receiveData+0x11c>
           (l_readData.rightX == g_BLU_context.lastData.rightX) &&
 8008c98:	697a      	ldr	r2, [r7, #20]
 8008c9a:	4b2e      	ldr	r3, [pc, #184]	; (8008d54 <BLU_receiveData+0x144>)
 8008c9c:	689b      	ldr	r3, [r3, #8]
           (l_readData.leftY  == g_BLU_context.lastData.leftY) &&
 8008c9e:	429a      	cmp	r2, r3
 8008ca0:	d144      	bne.n	8008d2c <BLU_receiveData+0x11c>
           (l_readData.rightY == g_BLU_context.lastData.rightY) &&
 8008ca2:	69ba      	ldr	r2, [r7, #24]
 8008ca4:	4b2b      	ldr	r3, [pc, #172]	; (8008d54 <BLU_receiveData+0x144>)
 8008ca6:	68db      	ldr	r3, [r3, #12]
           (l_readData.rightX == g_BLU_context.lastData.rightX) &&
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d13f      	bne.n	8008d2c <BLU_receiveData+0x11c>
           (l_readData.button == g_BLU_context.lastData.button))
 8008cac:	7f3a      	ldrb	r2, [r7, #28]
 8008cae:	4b29      	ldr	r3, [pc, #164]	; (8008d54 <BLU_receiveData+0x144>)
 8008cb0:	7c1b      	ldrb	r3, [r3, #16]
           (l_readData.rightY == g_BLU_context.lastData.rightY) &&
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d13a      	bne.n	8008d2c <BLU_receiveData+0x11c>
  {
    /* Normalize directions data in range [-MAX..MAX] */
    p_data->leftX  = UTI_normalizeIntValue(l_readData.leftX , 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, false);
 8008cb6:	68f8      	ldr	r0, [r7, #12]
 8008cb8:	2300      	movs	r3, #0
 8008cba:	9301      	str	r3, [sp, #4]
 8008cbc:	2328      	movs	r3, #40	; 0x28
 8008cbe:	9300      	str	r3, [sp, #0]
 8008cc0:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8008cc4:	22ff      	movs	r2, #255	; 0xff
 8008cc6:	2100      	movs	r1, #0
 8008cc8:	f002 feb1 	bl	800ba2e <UTI_normalizeIntValue>
 8008ccc:	4602      	mov	r2, r0
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	601a      	str	r2, [r3, #0]
    p_data->leftY  = UTI_normalizeIntValue(l_readData.leftY , 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, true );
 8008cd2:	6938      	ldr	r0, [r7, #16]
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	9301      	str	r3, [sp, #4]
 8008cd8:	2328      	movs	r3, #40	; 0x28
 8008cda:	9300      	str	r3, [sp, #0]
 8008cdc:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8008ce0:	22ff      	movs	r2, #255	; 0xff
 8008ce2:	2100      	movs	r1, #0
 8008ce4:	f002 fea3 	bl	800ba2e <UTI_normalizeIntValue>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	605a      	str	r2, [r3, #4]
    p_data->rightX = UTI_normalizeIntValue(l_readData.rightX, 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, false);
 8008cee:	6978      	ldr	r0, [r7, #20]
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	9301      	str	r3, [sp, #4]
 8008cf4:	2328      	movs	r3, #40	; 0x28
 8008cf6:	9300      	str	r3, [sp, #0]
 8008cf8:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8008cfc:	22ff      	movs	r2, #255	; 0xff
 8008cfe:	2100      	movs	r1, #0
 8008d00:	f002 fe95 	bl	800ba2e <UTI_normalizeIntValue>
 8008d04:	4602      	mov	r2, r0
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	609a      	str	r2, [r3, #8]
    p_data->rightY = UTI_normalizeIntValue(l_readData.rightY, 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, true );
 8008d0a:	69b8      	ldr	r0, [r7, #24]
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	9301      	str	r3, [sp, #4]
 8008d10:	2328      	movs	r3, #40	; 0x28
 8008d12:	9300      	str	r3, [sp, #0]
 8008d14:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8008d18:	22ff      	movs	r2, #255	; 0xff
 8008d1a:	2100      	movs	r1, #0
 8008d1c:	f002 fe87 	bl	800ba2e <UTI_normalizeIntValue>
 8008d20:	4602      	mov	r2, r0
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	60da      	str	r2, [r3, #12]
    p_data->button = l_readData.button;
 8008d26:	7f3a      	ldrb	r2, [r7, #28]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	741a      	strb	r2, [r3, #16]
  {
    ; /* Nothing to do */
  }

  /* Saved received data for later use in confirmation mechanism */
  g_BLU_context.lastData.leftX  = l_readData.leftX;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	4a09      	ldr	r2, [pc, #36]	; (8008d54 <BLU_receiveData+0x144>)
 8008d30:	6013      	str	r3, [r2, #0]
  g_BLU_context.lastData.leftY  = l_readData.leftY;
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	4a07      	ldr	r2, [pc, #28]	; (8008d54 <BLU_receiveData+0x144>)
 8008d36:	6053      	str	r3, [r2, #4]
  g_BLU_context.lastData.rightX = l_readData.rightX;
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	4a06      	ldr	r2, [pc, #24]	; (8008d54 <BLU_receiveData+0x144>)
 8008d3c:	6093      	str	r3, [r2, #8]
  g_BLU_context.lastData.rightY = l_readData.rightY;
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	4a04      	ldr	r2, [pc, #16]	; (8008d54 <BLU_receiveData+0x144>)
 8008d42:	60d3      	str	r3, [r2, #12]
  g_BLU_context.lastData.button = l_readData.button;
 8008d44:	7f3a      	ldrb	r2, [r7, #28]
 8008d46:	4b03      	ldr	r3, [pc, #12]	; (8008d54 <BLU_receiveData+0x144>)
 8008d48:	741a      	strb	r2, [r3, #16]

  return;
 8008d4a:	bf00      	nop
}
 8008d4c:	3728      	adds	r7, #40	; 0x28
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	20000214 	.word	0x20000214

08008d58 <CHR_init>:
} T_CHR_Context;

static T_CHR_Context g_CHR_context;

void CHR_init(TIM_HandleTypeDef *p_usTimerHandle)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing micro-second chronometer");
 8008d60:	4907      	ldr	r1, [pc, #28]	; (8008d80 <CHR_init+0x28>)
 8008d62:	2001      	movs	r0, #1
 8008d64:	f001 fd04 	bl	800a770 <LOG_log>

  g_CHR_context.timerHandle = p_usTimerHandle;
 8008d68:	4a06      	ldr	r2, [pc, #24]	; (8008d84 <CHR_init+0x2c>)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6013      	str	r3, [r2, #0]
  g_CHR_context.isStarted   = false;
 8008d6e:	4b05      	ldr	r3, [pc, #20]	; (8008d84 <CHR_init+0x2c>)
 8008d70:	2200      	movs	r2, #0
 8008d72:	711a      	strb	r2, [r3, #4]

  CHR_reset();
 8008d74:	f000 f85a 	bl	8008e2c <CHR_reset>

  return;
 8008d78:	bf00      	nop
}
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	080114c8 	.word	0x080114c8
 8008d84:	20000228 	.word	0x20000228

08008d88 <CHR_start>:

void CHR_start(void)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef l_halReturnCode;

  if (g_CHR_context.isStarted == true)
 8008d8e:	4b11      	ldr	r3, [pc, #68]	; (8008dd4 <CHR_start+0x4c>)
 8008d90:	791b      	ldrb	r3, [r3, #4]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d004      	beq.n	8008da0 <CHR_start+0x18>
  {
    LOG_error("Trying to start chronometer twice");
 8008d96:	4910      	ldr	r1, [pc, #64]	; (8008dd8 <CHR_start+0x50>)
 8008d98:	2003      	movs	r0, #3
 8008d9a:	f001 fce9 	bl	800a770 <LOG_log>
    {
      g_CHR_context.isStarted = true;
    }
  }

  return;
 8008d9e:	e016      	b.n	8008dce <CHR_start+0x46>
    CHR_reset();
 8008da0:	f000 f844 	bl	8008e2c <CHR_reset>
    l_halReturnCode = HAL_TIM_Base_Start_IT(g_CHR_context.timerHandle);
 8008da4:	4b0b      	ldr	r3, [pc, #44]	; (8008dd4 <CHR_start+0x4c>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7fc fe99 	bl	8005ae0 <HAL_TIM_Base_Start_IT>
 8008dae:	4603      	mov	r3, r0
 8008db0:	71fb      	strb	r3, [r7, #7]
    if (l_halReturnCode != HAL_OK)
 8008db2:	79fb      	ldrb	r3, [r7, #7]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d006      	beq.n	8008dc6 <CHR_start+0x3e>
      LOG_error("HAL_TIM_Base_Start_IT() returned an error code: %d", l_halReturnCode);
 8008db8:	79fb      	ldrb	r3, [r7, #7]
 8008dba:	461a      	mov	r2, r3
 8008dbc:	4907      	ldr	r1, [pc, #28]	; (8008ddc <CHR_start+0x54>)
 8008dbe:	2003      	movs	r0, #3
 8008dc0:	f001 fcd6 	bl	800a770 <LOG_log>
  return;
 8008dc4:	e003      	b.n	8008dce <CHR_start+0x46>
      g_CHR_context.isStarted = true;
 8008dc6:	4b03      	ldr	r3, [pc, #12]	; (8008dd4 <CHR_start+0x4c>)
 8008dc8:	2201      	movs	r2, #1
 8008dca:	711a      	strb	r2, [r3, #4]
  return;
 8008dcc:	bf00      	nop
}
 8008dce:	3708      	adds	r7, #8
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	20000228 	.word	0x20000228
 8008dd8:	080114f0 	.word	0x080114f0
 8008ddc:	08011514 	.word	0x08011514

08008de0 <CHR_getTimeUs>:

  return;
}

uint32_t CHR_getTimeUs(void)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
  uint32_t l_currentTimeInUs;

  if (g_CHR_context.wasOverflowed == true)
 8008de6:	4b09      	ldr	r3, [pc, #36]	; (8008e0c <CHR_getTimeUs+0x2c>)
 8008de8:	795b      	ldrb	r3, [r3, #5]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d003      	beq.n	8008df6 <CHR_getTimeUs+0x16>
  {
    LOG_warning("Chronometer overflowed");
 8008dee:	4908      	ldr	r1, [pc, #32]	; (8008e10 <CHR_getTimeUs+0x30>)
 8008df0:	2002      	movs	r0, #2
 8008df2:	f001 fcbd 	bl	800a770 <LOG_log>
  else
  {
    ; /* Nothing to do */
  }

  l_currentTimeInUs = __HAL_TIM_GET_COUNTER(g_CHR_context.timerHandle);
 8008df6:	4b05      	ldr	r3, [pc, #20]	; (8008e0c <CHR_getTimeUs+0x2c>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dfe:	607b      	str	r3, [r7, #4]

  return l_currentTimeInUs;
 8008e00:	687b      	ldr	r3, [r7, #4]
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3708      	adds	r7, #8
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	20000228 	.word	0x20000228
 8008e10:	080115b0 	.word	0x080115b0

08008e14 <CHR_overflow>:

void CHR_overflow(void)
{
 8008e14:	b480      	push	{r7}
 8008e16:	af00      	add	r7, sp, #0
  g_CHR_context.wasOverflowed = true;
 8008e18:	4b03      	ldr	r3, [pc, #12]	; (8008e28 <CHR_overflow+0x14>)
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	715a      	strb	r2, [r3, #5]

  return;
 8008e1e:	bf00      	nop
}
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bc80      	pop	{r7}
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	20000228 	.word	0x20000228

08008e2c <CHR_reset>:

void CHR_reset(void)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	af00      	add	r7, sp, #0
  __HAL_TIM_SET_COUNTER(g_CHR_context.timerHandle, 0);
 8008e30:	4b08      	ldr	r3, [pc, #32]	; (8008e54 <CHR_reset+0x28>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	2200      	movs	r2, #0
 8008e38:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_TIM_CLEAR_IT   (g_CHR_context.timerHandle, TIM_IT_UPDATE);
 8008e3a:	4b06      	ldr	r3, [pc, #24]	; (8008e54 <CHR_reset+0x28>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f06f 0201 	mvn.w	r2, #1
 8008e44:	611a      	str	r2, [r3, #16]

  g_CHR_context.wasOverflowed = false;
 8008e46:	4b03      	ldr	r3, [pc, #12]	; (8008e54 <CHR_reset+0x28>)
 8008e48:	2200      	movs	r2, #0
 8008e4a:	715a      	strb	r2, [r3, #5]

  return;
 8008e4c:	bf00      	nop
}
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bc80      	pop	{r7}
 8008e52:	4770      	bx	lr
 8008e54:	20000228 	.word	0x20000228

08008e58 <CBU_init>:
#include "circular_buffer.h"

#include "log.h"

void CBU_init(T_CBU_Handle *p_buffer)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  uint32_t l_index;

  LOG_debug("Initializing circular buffer");
 8008e60:	490e      	ldr	r1, [pc, #56]	; (8008e9c <CBU_init+0x44>)
 8008e62:	2000      	movs	r0, #0
 8008e64:	f001 fc84 	bl	800a770 <LOG_log>

  for (l_index = 0; l_index < CST_CIRCULAR_BUFFER_MAX_ELEMENTS; l_index++)
 8008e68:	2300      	movs	r3, #0
 8008e6a:	60fb      	str	r3, [r7, #12]
 8008e6c:	e008      	b.n	8008e80 <CBU_init+0x28>
  {
    p_buffer->elements[l_index] = 0.0f;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	f04f 0100 	mov.w	r1, #0
 8008e76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (l_index = 0; l_index < CST_CIRCULAR_BUFFER_MAX_ELEMENTS; l_index++)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	3301      	adds	r3, #1
 8008e7e:	60fb      	str	r3, [r7, #12]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2b09      	cmp	r3, #9
 8008e84:	d9f3      	bls.n	8008e6e <CBU_init+0x16>
  }

  p_buffer->count = 0;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  p_buffer->index = 0;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	629a      	str	r2, [r3, #40]	; 0x28

  return;
 8008e92:	bf00      	nop
}
 8008e94:	3710      	adds	r7, #16
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	080115c8 	.word	0x080115c8

08008ea0 <CBU_push>:

void CBU_push(T_CBU_Handle *p_buffer, float p_element)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  if (p_buffer->index == CST_CIRCULAR_BUFFER_MAX_ELEMENTS - 1)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eae:	2b09      	cmp	r3, #9
 8008eb0:	d103      	bne.n	8008eba <CBU_push+0x1a>
  {
    p_buffer->index = 0;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	629a      	str	r2, [r3, #40]	; 0x28
 8008eb8:	e004      	b.n	8008ec4 <CBU_push+0x24>
  }
  else
  {
    p_buffer->index++;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ebe:	1c5a      	adds	r2, r3, #1
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  p_buffer->elements[p_buffer->index] = p_element;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6839      	ldr	r1, [r7, #0]
 8008ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  if (p_buffer->count < CST_CIRCULAR_BUFFER_MAX_ELEMENTS)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed4:	2b09      	cmp	r3, #9
 8008ed6:	d805      	bhi.n	8008ee4 <CBU_push+0x44>
  {
    p_buffer->count++;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008edc:	1c5a      	adds	r2, r3, #1
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	62da      	str	r2, [r3, #44]	; 0x2c
  else
  {
    ; /* Nothing to do */
  }

  return;
 8008ee2:	bf00      	nop
 8008ee4:	bf00      	nop
}
 8008ee6:	370c      	adds	r7, #12
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bc80      	pop	{r7}
 8008eec:	4770      	bx	lr

08008eee <CBU_getAverage>:
{
  return p_buffer->count;
}

float CBU_getAverage(T_CBU_Handle *p_buffer)
{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b086      	sub	sp, #24
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
  uint32_t l_index;
  uint32_t l_count;
  float    l_average;

  l_index   = p_buffer->index;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008efa:	617b      	str	r3, [r7, #20]
  l_count   = 0;
 8008efc:	2300      	movs	r3, #0
 8008efe:	613b      	str	r3, [r7, #16]
  l_average = 0.0f;
 8008f00:	f04f 0300 	mov.w	r3, #0
 8008f04:	60fb      	str	r3, [r7, #12]

  while (l_count < p_buffer->count)
 8008f06:	e015      	b.n	8008f34 <CBU_getAverage+0x46>
  {
    l_average += p_buffer->elements[l_index];
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	697a      	ldr	r2, [r7, #20]
 8008f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f10:	4619      	mov	r1, r3
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	f7f7 fe9a 	bl	8000c4c <__addsf3>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	60fb      	str	r3, [r7, #12]

    if (l_index == CST_CIRCULAR_BUFFER_MAX_ELEMENTS - 1)
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	2b09      	cmp	r3, #9
 8008f20:	d102      	bne.n	8008f28 <CBU_getAverage+0x3a>
    {
      l_index = 0;
 8008f22:	2300      	movs	r3, #0
 8008f24:	617b      	str	r3, [r7, #20]
 8008f26:	e002      	b.n	8008f2e <CBU_getAverage+0x40>
    }
    else
    {
      l_index++;
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	617b      	str	r3, [r7, #20]
    }

    l_count++;
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	3301      	adds	r3, #1
 8008f32:	613b      	str	r3, [r7, #16]
  while (l_count < p_buffer->count)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f38:	693a      	ldr	r2, [r7, #16]
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d3e4      	bcc.n	8008f08 <CBU_getAverage+0x1a>
  }

  l_average /= (float)p_buffer->count;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7f7 ff32 	bl	8000dac <__aeabi_ui2f>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	68f8      	ldr	r0, [r7, #12]
 8008f4e:	f7f8 f839 	bl	8000fc4 <__aeabi_fdiv>
 8008f52:	4603      	mov	r3, r0
 8008f54:	60fb      	str	r3, [r7, #12]

  return l_average;
 8008f56:	68fb      	ldr	r3, [r7, #12]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3718      	adds	r7, #24
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <CON_init>:
} T_CON_Context;

static T_CON_Context g_CON_context;

void CON_init(UART_HandleTypeDef *p_uartHandle)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing console");
 8008f68:	490d      	ldr	r1, [pc, #52]	; (8008fa0 <CON_init+0x40>)
 8008f6a:	2001      	movs	r0, #1
 8008f6c:	f001 fc00 	bl	800a770 <LOG_log>

  g_CON_context.uartHandle     = p_uartHandle;
 8008f70:	4a0c      	ldr	r2, [pc, #48]	; (8008fa4 <CON_init+0x44>)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6013      	str	r3, [r2, #0]
  g_CON_context.dataSize       = 0;
 8008f76:	4b0b      	ldr	r3, [pc, #44]	; (8008fa4 <CON_init+0x44>)
 8008f78:	2200      	movs	r2, #0
 8008f7a:	61da      	str	r2, [r3, #28]
  g_CON_context.isDataComplete = false;
 8008f7c:	4b09      	ldr	r3, [pc, #36]	; (8008fa4 <CON_init+0x44>)
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f883 2020 	strb.w	r2, [r3, #32]

  SFO_initData(&g_CON_context.data);
 8008f84:	4808      	ldr	r0, [pc, #32]	; (8008fa8 <CON_init+0x48>)
 8008f86:	f002 fb4f 	bl	800b628 <SFO_initData>

  HAL_UART_Receive_IT(g_CON_context.uartHandle, &g_CON_context.datum, 1);
 8008f8a:	4b06      	ldr	r3, [pc, #24]	; (8008fa4 <CON_init+0x44>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	4906      	ldr	r1, [pc, #24]	; (8008fac <CON_init+0x4c>)
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7fe ffea 	bl	8007f6c <HAL_UART_Receive_IT>

  return;
 8008f98:	bf00      	nop
}
 8008f9a:	3708      	adds	r7, #8
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	0801162c 	.word	0x0801162c
 8008fa4:	20000230 	.word	0x20000230
 8008fa8:	20000235 	.word	0x20000235
 8008fac:	20000234 	.word	0x20000234

08008fb0 <CON_receiveData>:

void CON_receiveData(void)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	af00      	add	r7, sp, #0
  /* If previous command was not processed yet, drop datum, */
  /* which will lead to an error, showing a design issue... */
  if (g_CON_context.isDataComplete == true)
 8008fb4:	4b11      	ldr	r3, [pc, #68]	; (8008ffc <CON_receiveData+0x4c>)
 8008fb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d115      	bne.n	8008fea <CON_receiveData+0x3a>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (g_CON_context.datum == '\r')
 8008fbe:	4b0f      	ldr	r3, [pc, #60]	; (8008ffc <CON_receiveData+0x4c>)
 8008fc0:	791b      	ldrb	r3, [r3, #4]
 8008fc2:	2b0d      	cmp	r3, #13
 8008fc4:	d104      	bne.n	8008fd0 <CON_receiveData+0x20>
    {
      g_CON_context.isDataComplete = true;
 8008fc6:	4b0d      	ldr	r3, [pc, #52]	; (8008ffc <CON_receiveData+0x4c>)
 8008fc8:	2201      	movs	r2, #1
 8008fca:	f883 2020 	strb.w	r2, [r3, #32]
 8008fce:	e00c      	b.n	8008fea <CON_receiveData+0x3a>
    }
    else
    {
      g_CON_context.data[g_CON_context.dataSize] = g_CON_context.datum;
 8008fd0:	4b0a      	ldr	r3, [pc, #40]	; (8008ffc <CON_receiveData+0x4c>)
 8008fd2:	69db      	ldr	r3, [r3, #28]
 8008fd4:	4a09      	ldr	r2, [pc, #36]	; (8008ffc <CON_receiveData+0x4c>)
 8008fd6:	7911      	ldrb	r1, [r2, #4]
 8008fd8:	4a08      	ldr	r2, [pc, #32]	; (8008ffc <CON_receiveData+0x4c>)
 8008fda:	4413      	add	r3, r2
 8008fdc:	460a      	mov	r2, r1
 8008fde:	715a      	strb	r2, [r3, #5]
      g_CON_context.dataSize++;
 8008fe0:	4b06      	ldr	r3, [pc, #24]	; (8008ffc <CON_receiveData+0x4c>)
 8008fe2:	69db      	ldr	r3, [r3, #28]
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	4a05      	ldr	r2, [pc, #20]	; (8008ffc <CON_receiveData+0x4c>)
 8008fe8:	61d3      	str	r3, [r2, #28]
    }
  }

  HAL_UART_Receive_IT(g_CON_context.uartHandle, &g_CON_context.datum, 1);
 8008fea:	4b04      	ldr	r3, [pc, #16]	; (8008ffc <CON_receiveData+0x4c>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	4903      	ldr	r1, [pc, #12]	; (8009000 <CON_receiveData+0x50>)
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f7fe ffba 	bl	8007f6c <HAL_UART_Receive_IT>

  return;
 8008ff8:	bf00      	nop
}
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	20000230 	.word	0x20000230
 8009000:	20000234 	.word	0x20000234

08009004 <CON_updateFifo>:

void CON_updateFifo(T_SFO_Handle *p_fifo)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  if (g_CON_context.isDataComplete == false)
 800900c:	4b0d      	ldr	r3, [pc, #52]	; (8009044 <CON_updateFifo+0x40>)
 800900e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009012:	f083 0301 	eor.w	r3, r3, #1
 8009016:	b2db      	uxtb	r3, r3
 8009018:	2b00      	cmp	r3, #0
 800901a:	d10e      	bne.n	800903a <CON_updateFifo+0x36>
  {
    ; /* Nothing to do */
  }
  else
  {
    SFO_push    (p_fifo, &g_CON_context.data);
 800901c:	490a      	ldr	r1, [pc, #40]	; (8009048 <CON_updateFifo+0x44>)
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f002 fb28 	bl	800b674 <SFO_push>
    SFO_initData(        &g_CON_context.data);
 8009024:	4808      	ldr	r0, [pc, #32]	; (8009048 <CON_updateFifo+0x44>)
 8009026:	f002 faff 	bl	800b628 <SFO_initData>

    g_CON_context.dataSize       = 0;
 800902a:	4b06      	ldr	r3, [pc, #24]	; (8009044 <CON_updateFifo+0x40>)
 800902c:	2200      	movs	r2, #0
 800902e:	61da      	str	r2, [r3, #28]
    g_CON_context.isDataComplete = false;
 8009030:	4b04      	ldr	r3, [pc, #16]	; (8009044 <CON_updateFifo+0x40>)
 8009032:	2200      	movs	r2, #0
 8009034:	f883 2020 	strb.w	r2, [r3, #32]
  }

  return;
 8009038:	bf00      	nop
 800903a:	bf00      	nop
}
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
 8009042:	bf00      	nop
 8009044:	20000230 	.word	0x20000230
 8009048:	20000235 	.word	0x20000235

0800904c <CON_sendString>:

void CON_sendString(char *p_string, uint32_t p_length)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  /* As this method is using for logging/debug, we will not deal with failure cases */
  (void)HAL_UART_Transmit(g_CON_context.uartHandle,
 8009056:	4b06      	ldr	r3, [pc, #24]	; (8009070 <CON_sendString+0x24>)
 8009058:	6818      	ldr	r0, [r3, #0]
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	b29a      	uxth	r2, r3
 800905e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009062:	6879      	ldr	r1, [r7, #4]
 8009064:	f7fe fef0 	bl	8007e48 <HAL_UART_Transmit>
               (uint8_t *)p_string,
                          p_length,
                          CST_UART_TRANSMIT_TIMEOUT_IN_MS);

  return;
 8009068:	bf00      	nop
}
 800906a:	3708      	adds	r7, #8
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}
 8009070:	20000230 	.word	0x20000230

08009074 <DRV_init>:
void DRV_init(TIM_HandleTypeDef *p_pwmTimerHandle,
              TIM_HandleTypeDef *p_rearLeftEncoderTimerHandle,
              TIM_HandleTypeDef *p_rearRightEncoderTimerHandle,
              TIM_HandleTypeDef *p_frontRightEncoderTimerHandle,
              TIM_HandleTypeDef *p_frontLeftEncoderTimerHandle)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b08c      	sub	sp, #48	; 0x30
 8009078:	af08      	add	r7, sp, #32
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	607a      	str	r2, [r7, #4]
 8009080:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing Drive module");
 8009082:	4935      	ldr	r1, [pc, #212]	; (8009158 <DRV_init+0xe4>)
 8009084:	2001      	movs	r0, #1
 8009086:	f001 fb73 	bl	800a770 <LOG_log>

  g_DRV_context.selectPressedStartTimeInS = 0;
 800908a:	4b34      	ldr	r3, [pc, #208]	; (800915c <DRV_init+0xe8>)
 800908c:	2200      	movs	r2, #0
 800908e:	601a      	str	r2, [r3, #0]

  /* Setup all 4 wheels */
  WHL_init(&g_DRV_context.wheelFrontRight,
 8009090:	2301      	movs	r3, #1
 8009092:	9306      	str	r3, [sp, #24]
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	9305      	str	r3, [sp, #20]
 8009098:	2301      	movs	r3, #1
 800909a:	9304      	str	r3, [sp, #16]
 800909c:	230c      	movs	r3, #12
 800909e:	9303      	str	r3, [sp, #12]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	9302      	str	r3, [sp, #8]
 80090a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090a8:	9301      	str	r3, [sp, #4]
 80090aa:	4b2d      	ldr	r3, [pc, #180]	; (8009160 <DRV_init+0xec>)
 80090ac:	9300      	str	r3, [sp, #0]
 80090ae:	2304      	movs	r3, #4
 80090b0:	4a2c      	ldr	r2, [pc, #176]	; (8009164 <DRV_init+0xf0>)
 80090b2:	492d      	ldr	r1, [pc, #180]	; (8009168 <DRV_init+0xf4>)
 80090b4:	482d      	ldr	r0, [pc, #180]	; (800916c <DRV_init+0xf8>)
 80090b6:	f002 fd4d 	bl	800bb54 <WHL_init>
            TIM_CHANNEL_4,
            true,
            p_frontRightEncoderTimerHandle,
            STP_DEFAULT_MOTORS_MODE);

  WHL_init(&g_DRV_context.wheelFrontLeft,
 80090ba:	2301      	movs	r3, #1
 80090bc:	9306      	str	r3, [sp, #24]
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	9305      	str	r3, [sp, #20]
 80090c2:	2300      	movs	r3, #0
 80090c4:	9304      	str	r3, [sp, #16]
 80090c6:	2308      	movs	r3, #8
 80090c8:	9303      	str	r3, [sp, #12]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	9302      	str	r3, [sp, #8]
 80090ce:	2310      	movs	r3, #16
 80090d0:	9301      	str	r3, [sp, #4]
 80090d2:	4b27      	ldr	r3, [pc, #156]	; (8009170 <DRV_init+0xfc>)
 80090d4:	9300      	str	r3, [sp, #0]
 80090d6:	2320      	movs	r3, #32
 80090d8:	4a25      	ldr	r2, [pc, #148]	; (8009170 <DRV_init+0xfc>)
 80090da:	4926      	ldr	r1, [pc, #152]	; (8009174 <DRV_init+0x100>)
 80090dc:	4826      	ldr	r0, [pc, #152]	; (8009178 <DRV_init+0x104>)
 80090de:	f002 fd39 	bl	800bb54 <WHL_init>
            TIM_CHANNEL_3,
            false,
            p_frontLeftEncoderTimerHandle,
            STP_DEFAULT_MOTORS_MODE);

  WHL_init(&g_DRV_context.wheelRearLeft,
 80090e2:	2301      	movs	r3, #1
 80090e4:	9306      	str	r3, [sp, #24]
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	9305      	str	r3, [sp, #20]
 80090ea:	2300      	movs	r3, #0
 80090ec:	9304      	str	r3, [sp, #16]
 80090ee:	2304      	movs	r3, #4
 80090f0:	9303      	str	r3, [sp, #12]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	9302      	str	r3, [sp, #8]
 80090f6:	2320      	movs	r3, #32
 80090f8:	9301      	str	r3, [sp, #4]
 80090fa:	4b19      	ldr	r3, [pc, #100]	; (8009160 <DRV_init+0xec>)
 80090fc:	9300      	str	r3, [sp, #0]
 80090fe:	2310      	movs	r3, #16
 8009100:	4a17      	ldr	r2, [pc, #92]	; (8009160 <DRV_init+0xec>)
 8009102:	491e      	ldr	r1, [pc, #120]	; (800917c <DRV_init+0x108>)
 8009104:	481e      	ldr	r0, [pc, #120]	; (8009180 <DRV_init+0x10c>)
 8009106:	f002 fd25 	bl	800bb54 <WHL_init>
            TIM_CHANNEL_2,
            false,
            p_rearLeftEncoderTimerHandle,
            STP_DEFAULT_MOTORS_MODE);

  WHL_init(&g_DRV_context.wheelRearRight,
 800910a:	2301      	movs	r3, #1
 800910c:	9306      	str	r3, [sp, #24]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	9305      	str	r3, [sp, #20]
 8009112:	2301      	movs	r3, #1
 8009114:	9304      	str	r3, [sp, #16]
 8009116:	2300      	movs	r3, #0
 8009118:	9303      	str	r3, [sp, #12]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	9302      	str	r3, [sp, #8]
 800911e:	2302      	movs	r3, #2
 8009120:	9301      	str	r3, [sp, #4]
 8009122:	4b13      	ldr	r3, [pc, #76]	; (8009170 <DRV_init+0xfc>)
 8009124:	9300      	str	r3, [sp, #0]
 8009126:	2301      	movs	r3, #1
 8009128:	4a11      	ldr	r2, [pc, #68]	; (8009170 <DRV_init+0xfc>)
 800912a:	4916      	ldr	r1, [pc, #88]	; (8009184 <DRV_init+0x110>)
 800912c:	4816      	ldr	r0, [pc, #88]	; (8009188 <DRV_init+0x114>)
 800912e:	f002 fd11 	bl	800bb54 <WHL_init>
            true,
            p_rearRightEncoderTimerHandle,
            STP_DEFAULT_MOTORS_MODE);

  /* Consider that bluetooth controller is OFF by default. Pressing START is needed. */
  g_DRV_context.isBluetoothOn = false;
 8009132:	4b0a      	ldr	r3, [pc, #40]	; (800915c <DRV_init+0xe8>)
 8009134:	2200      	movs	r2, #0
 8009136:	711a      	strb	r2, [r3, #4]

  /* Activate motors or not by default (de-activating them is used for debug) */
  g_DRV_context.areMotorsOn = STP_DEFAULT_MOTORS_MODE;
 8009138:	4b08      	ldr	r3, [pc, #32]	; (800915c <DRV_init+0xe8>)
 800913a:	2201      	movs	r2, #1
 800913c:	715a      	strb	r2, [r3, #5]

  /* Use wheels PIDs by default */
  g_DRV_context.isPidModeOn = true;
 800913e:	4b07      	ldr	r3, [pc, #28]	; (800915c <DRV_init+0xe8>)
 8009140:	2201      	movs	r2, #1
 8009142:	719a      	strb	r2, [r3, #6]

  /* Start with default drive mode (different in debug and in release) */
  g_DRV_context.mode = STP_DEFAULT_DRIVE_MODE;
 8009144:	4b05      	ldr	r3, [pc, #20]	; (800915c <DRV_init+0xe8>)
 8009146:	2202      	movs	r2, #2
 8009148:	71da      	strb	r2, [r3, #7]

  DRV_logInfo(false);
 800914a:	2000      	movs	r0, #0
 800914c:	f000 fcf2 	bl	8009b34 <DRV_logInfo>

  return;
 8009150:	bf00      	nop
}
 8009152:	3710      	adds	r7, #16
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}
 8009158:	08011644 	.word	0x08011644
 800915c:	20000254 	.word	0x20000254
 8009160:	40011000 	.word	0x40011000
 8009164:	40011400 	.word	0x40011400
 8009168:	08011660 	.word	0x08011660
 800916c:	2000025c 	.word	0x2000025c
 8009170:	40010c00 	.word	0x40010c00
 8009174:	0801166c 	.word	0x0801166c
 8009178:	20000300 	.word	0x20000300
 800917c:	08011678 	.word	0x08011678
 8009180:	200003a4 	.word	0x200003a4
 8009184:	08011684 	.word	0x08011684
 8009188:	20000448 	.word	0x20000448

0800918c <DRV_updateEncoder>:

void DRV_updateEncoder(TIM_HandleTypeDef *p_encoderTimerHandle)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  int16_t l_count;

  l_count = __HAL_TIM_GET_COUNTER(p_encoderTimerHandle);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919a:	81fb      	strh	r3, [r7, #14]

  /* Check the handle of the triggering timer and update encoder accordingly */
  if (p_encoderTimerHandle == g_DRV_context.wheelFrontRight.encoder.timerHandle)
 800919c:	4b1b      	ldr	r3, [pc, #108]	; (800920c <DRV_updateEncoder+0x80>)
 800919e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d106      	bne.n	80091b4 <DRV_updateEncoder+0x28>
  {
    WHL_updateEncoder(&g_DRV_context.wheelFrontRight, l_count);
 80091a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80091aa:	4619      	mov	r1, r3
 80091ac:	4818      	ldr	r0, [pc, #96]	; (8009210 <DRV_updateEncoder+0x84>)
 80091ae:	f002 fd46 	bl	800bc3e <WHL_updateEncoder>
  else
  {
    ; /* Nothing to do */
  }

  return;
 80091b2:	e026      	b.n	8009202 <DRV_updateEncoder+0x76>
  else if (p_encoderTimerHandle == g_DRV_context.wheelFrontLeft.encoder.timerHandle)
 80091b4:	4b15      	ldr	r3, [pc, #84]	; (800920c <DRV_updateEncoder+0x80>)
 80091b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d106      	bne.n	80091ce <DRV_updateEncoder+0x42>
    WHL_updateEncoder(&g_DRV_context.wheelFrontLeft, l_count);
 80091c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80091c4:	4619      	mov	r1, r3
 80091c6:	4813      	ldr	r0, [pc, #76]	; (8009214 <DRV_updateEncoder+0x88>)
 80091c8:	f002 fd39 	bl	800bc3e <WHL_updateEncoder>
  return;
 80091cc:	e019      	b.n	8009202 <DRV_updateEncoder+0x76>
  else if (p_encoderTimerHandle == g_DRV_context.wheelRearRight.encoder.timerHandle)
 80091ce:	4b0f      	ldr	r3, [pc, #60]	; (800920c <DRV_updateEncoder+0x80>)
 80091d0:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 80091d4:	687a      	ldr	r2, [r7, #4]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d106      	bne.n	80091e8 <DRV_updateEncoder+0x5c>
    WHL_updateEncoder(&g_DRV_context.wheelRearRight, l_count);
 80091da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80091de:	4619      	mov	r1, r3
 80091e0:	480d      	ldr	r0, [pc, #52]	; (8009218 <DRV_updateEncoder+0x8c>)
 80091e2:	f002 fd2c 	bl	800bc3e <WHL_updateEncoder>
  return;
 80091e6:	e00c      	b.n	8009202 <DRV_updateEncoder+0x76>
  else if (p_encoderTimerHandle == g_DRV_context.wheelRearLeft.encoder.timerHandle)
 80091e8:	4b08      	ldr	r3, [pc, #32]	; (800920c <DRV_updateEncoder+0x80>)
 80091ea:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d106      	bne.n	8009202 <DRV_updateEncoder+0x76>
    WHL_updateEncoder(&g_DRV_context.wheelRearLeft, l_count);
 80091f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80091f8:	4619      	mov	r1, r3
 80091fa:	4808      	ldr	r0, [pc, #32]	; (800921c <DRV_updateEncoder+0x90>)
 80091fc:	f002 fd1f 	bl	800bc3e <WHL_updateEncoder>
  return;
 8009200:	bf00      	nop
 8009202:	bf00      	nop
}
 8009204:	3710      	adds	r7, #16
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	20000254 	.word	0x20000254
 8009210:	2000025c 	.word	0x2000025c
 8009214:	20000300 	.word	0x20000300
 8009218:	20000448 	.word	0x20000448
 800921c:	200003a4 	.word	0x200003a4

08009220 <DRV_updateAverageSpeeds>:

void DRV_updateAverageSpeeds(void)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	af00      	add	r7, sp, #0
  /* Update all 4 wheels average speeds */
  WHL_updateAverageSpeed(&g_DRV_context.wheelFrontRight);
 8009224:	4806      	ldr	r0, [pc, #24]	; (8009240 <DRV_updateAverageSpeeds+0x20>)
 8009226:	f002 fd8f 	bl	800bd48 <WHL_updateAverageSpeed>
  WHL_updateAverageSpeed(&g_DRV_context.wheelFrontLeft );
 800922a:	4806      	ldr	r0, [pc, #24]	; (8009244 <DRV_updateAverageSpeeds+0x24>)
 800922c:	f002 fd8c 	bl	800bd48 <WHL_updateAverageSpeed>
  WHL_updateAverageSpeed(&g_DRV_context.wheelRearRight );
 8009230:	4805      	ldr	r0, [pc, #20]	; (8009248 <DRV_updateAverageSpeeds+0x28>)
 8009232:	f002 fd89 	bl	800bd48 <WHL_updateAverageSpeed>
  WHL_updateAverageSpeed(&g_DRV_context.wheelRearLeft  );
 8009236:	4805      	ldr	r0, [pc, #20]	; (800924c <DRV_updateAverageSpeeds+0x2c>)
 8009238:	f002 fd86 	bl	800bd48 <WHL_updateAverageSpeed>

  return;
 800923c:	bf00      	nop
}
 800923e:	bd80      	pop	{r7, pc}
 8009240:	2000025c 	.word	0x2000025c
 8009244:	20000300 	.word	0x20000300
 8009248:	20000448 	.word	0x20000448
 800924c:	200003a4 	.word	0x200003a4

08009250 <DRV_updateFromBluetooth>:

void DRV_updateFromBluetooth(T_BLU_Data *p_bluetoothData, bool p_logInfo)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	460b      	mov	r3, r1
 800925a:	70fb      	strb	r3, [r7, #3]
  uint32_t l_currentTimeInS;
  uint32_t l_speed;

  if (p_bluetoothData->button == BLU_BUTTON_START)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	7c1b      	ldrb	r3, [r3, #16]
 8009260:	2b04      	cmp	r3, #4
 8009262:	d10f      	bne.n	8009284 <DRV_updateFromBluetooth+0x34>
  {
    if (g_DRV_context.isBluetoothOn == false)
 8009264:	4ba6      	ldr	r3, [pc, #664]	; (8009500 <DRV_updateFromBluetooth+0x2b0>)
 8009266:	791b      	ldrb	r3, [r3, #4]
 8009268:	f083 0301 	eor.w	r3, r3, #1
 800926c:	b2db      	uxtb	r3, r3
 800926e:	2b00      	cmp	r3, #0
 8009270:	f000 8141 	beq.w	80094f6 <DRV_updateFromBluetooth+0x2a6>
    {
      LOG_info("Bluetooth controller detected ON");
 8009274:	49a3      	ldr	r1, [pc, #652]	; (8009504 <DRV_updateFromBluetooth+0x2b4>)
 8009276:	2001      	movs	r0, #1
 8009278:	f001 fa7a 	bl	800a770 <LOG_log>
      g_DRV_context.isBluetoothOn = true;
 800927c:	4ba0      	ldr	r3, [pc, #640]	; (8009500 <DRV_updateFromBluetooth+0x2b0>)
 800927e:	2201      	movs	r2, #1
 8009280:	711a      	strb	r2, [r3, #4]
        ; /* Nothing to do */
      }
    }
  }

  return;
 8009282:	e138      	b.n	80094f6 <DRV_updateFromBluetooth+0x2a6>
  else if (g_DRV_context.isBluetoothOn == false)
 8009284:	4b9e      	ldr	r3, [pc, #632]	; (8009500 <DRV_updateFromBluetooth+0x2b0>)
 8009286:	791b      	ldrb	r3, [r3, #4]
 8009288:	f083 0301 	eor.w	r3, r3, #1
 800928c:	b2db      	uxtb	r3, r3
 800928e:	2b00      	cmp	r3, #0
 8009290:	f040 8131 	bne.w	80094f6 <DRV_updateFromBluetooth+0x2a6>
    l_currentTimeInS = UTI_getTimeS();
 8009294:	f002 fb2e 	bl	800b8f4 <UTI_getTimeS>
 8009298:	60f8      	str	r0, [r7, #12]
    switch (p_bluetoothData->button)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	7c1b      	ldrb	r3, [r3, #16]
 800929e:	3b01      	subs	r3, #1
 80092a0:	2b0f      	cmp	r3, #15
 80092a2:	d861      	bhi.n	8009368 <DRV_updateFromBluetooth+0x118>
 80092a4:	a201      	add	r2, pc, #4	; (adr r2, 80092ac <DRV_updateFromBluetooth+0x5c>)
 80092a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092aa:	bf00      	nop
 80092ac:	08009341 	.word	0x08009341
 80092b0:	08009369 	.word	0x08009369
 80092b4:	08009369 	.word	0x08009369
 80092b8:	08009369 	.word	0x08009369
 80092bc:	08009369 	.word	0x08009369
 80092c0:	08009369 	.word	0x08009369
 80092c4:	08009369 	.word	0x08009369
 80092c8:	08009369 	.word	0x08009369
 80092cc:	08009369 	.word	0x08009369
 80092d0:	08009369 	.word	0x08009369
 80092d4:	08009369 	.word	0x08009369
 80092d8:	08009369 	.word	0x08009369
 80092dc:	08009369 	.word	0x08009369
 80092e0:	08009325 	.word	0x08009325
 80092e4:	08009309 	.word	0x08009309
 80092e8:	080092ed 	.word	0x080092ed
        if (g_DRV_context.mode != DRV_MODE_MANUAL_FIXED_SPEED)
 80092ec:	4b84      	ldr	r3, [pc, #528]	; (8009500 <DRV_updateFromBluetooth+0x2b0>)
 80092ee:	79db      	ldrb	r3, [r3, #7]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d03b      	beq.n	800936c <DRV_updateFromBluetooth+0x11c>
          DRV_stop();
 80092f4:	f000 ff06 	bl	800a104 <DRV_stop>
          g_DRV_context.mode = DRV_MODE_MANUAL_FIXED_SPEED;
 80092f8:	4b81      	ldr	r3, [pc, #516]	; (8009500 <DRV_updateFromBluetooth+0x2b0>)
 80092fa:	2200      	movs	r2, #0
 80092fc:	71da      	strb	r2, [r3, #7]
          LOG_info("Drive mode now DRV_MODE_MANUAL_FIXED_SPEED");
 80092fe:	4982      	ldr	r1, [pc, #520]	; (8009508 <DRV_updateFromBluetooth+0x2b8>)
 8009300:	2001      	movs	r0, #1
 8009302:	f001 fa35 	bl	800a770 <LOG_log>
        break;
 8009306:	e031      	b.n	800936c <DRV_updateFromBluetooth+0x11c>
        if (g_DRV_context.mode != DRV_MODE_MANUAL_VARIABLE_SPEED)
 8009308:	4b7d      	ldr	r3, [pc, #500]	; (8009500 <DRV_updateFromBluetooth+0x2b0>)
 800930a:	79db      	ldrb	r3, [r3, #7]
 800930c:	2b01      	cmp	r3, #1
 800930e:	d02f      	beq.n	8009370 <DRV_updateFromBluetooth+0x120>
          DRV_stop();
 8009310:	f000 fef8 	bl	800a104 <DRV_stop>
          g_DRV_context.mode = DRV_MODE_MANUAL_VARIABLE_SPEED;
 8009314:	4b7a      	ldr	r3, [pc, #488]	; (8009500 <DRV_updateFromBluetooth+0x2b0>)
 8009316:	2201      	movs	r2, #1
 8009318:	71da      	strb	r2, [r3, #7]
          LOG_info("Drive mode now DRV_MODE_MANUAL_VARIABLE_SPEED");
 800931a:	497c      	ldr	r1, [pc, #496]	; (800950c <DRV_updateFromBluetooth+0x2bc>)
 800931c:	2001      	movs	r0, #1
 800931e:	f001 fa27 	bl	800a770 <LOG_log>
        break;
 8009322:	e025      	b.n	8009370 <DRV_updateFromBluetooth+0x120>
        if (g_DRV_context.mode != DRV_MODE_MASTER_BOARD_CONTROL)
 8009324:	4b76      	ldr	r3, [pc, #472]	; (8009500 <DRV_updateFromBluetooth+0x2b0>)
 8009326:	79db      	ldrb	r3, [r3, #7]
 8009328:	2b02      	cmp	r3, #2
 800932a:	d023      	beq.n	8009374 <DRV_updateFromBluetooth+0x124>
          DRV_stop();
 800932c:	f000 feea 	bl	800a104 <DRV_stop>
          g_DRV_context.mode = DRV_MODE_MASTER_BOARD_CONTROL;
 8009330:	4b73      	ldr	r3, [pc, #460]	; (8009500 <DRV_updateFromBluetooth+0x2b0>)
 8009332:	2202      	movs	r2, #2
 8009334:	71da      	strb	r2, [r3, #7]
          LOG_info("Drive mode now DRV_MODE_MASTER_BOARD_CONTROL");
 8009336:	4976      	ldr	r1, [pc, #472]	; (8009510 <DRV_updateFromBluetooth+0x2c0>)
 8009338:	2001      	movs	r0, #1
 800933a:	f001 fa19 	bl	800a770 <LOG_log>
        break;
 800933e:	e019      	b.n	8009374 <DRV_updateFromBluetooth+0x124>
        if (g_DRV_context.selectPressedStartTimeInS == 0)
 8009340:	4b6f      	ldr	r3, [pc, #444]	; (8009500 <DRV_updateFromBluetooth+0x2b0>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d105      	bne.n	8009354 <DRV_updateFromBluetooth+0x104>
          g_DRV_context.selectPressedStartTimeInS = l_currentTimeInS;
 8009348:	4a6d      	ldr	r2, [pc, #436]	; (8009500 <DRV_updateFromBluetooth+0x2b0>)
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6013      	str	r3, [r2, #0]
          DRV_toggleMotorsState();
 800934e:	f000 fd51 	bl	8009df4 <DRV_toggleMotorsState>
        break;
 8009352:	e011      	b.n	8009378 <DRV_updateFromBluetooth+0x128>
        else if (l_currentTimeInS - g_DRV_context.selectPressedStartTimeInS < STP_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 8009354:	4b6a      	ldr	r3, [pc, #424]	; (8009500 <DRV_updateFromBluetooth+0x2b0>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	1ad3      	subs	r3, r2, r3
 800935c:	2b01      	cmp	r3, #1
 800935e:	d90b      	bls.n	8009378 <DRV_updateFromBluetooth+0x128>
          g_DRV_context.selectPressedStartTimeInS = 0;
 8009360:	4b67      	ldr	r3, [pc, #412]	; (8009500 <DRV_updateFromBluetooth+0x2b0>)
 8009362:	2200      	movs	r2, #0
 8009364:	601a      	str	r2, [r3, #0]
        break;
 8009366:	e007      	b.n	8009378 <DRV_updateFromBluetooth+0x128>
        break;
 8009368:	bf00      	nop
 800936a:	e006      	b.n	800937a <DRV_updateFromBluetooth+0x12a>
        break;
 800936c:	bf00      	nop
 800936e:	e004      	b.n	800937a <DRV_updateFromBluetooth+0x12a>
        break;
 8009370:	bf00      	nop
 8009372:	e002      	b.n	800937a <DRV_updateFromBluetooth+0x12a>
        break;
 8009374:	bf00      	nop
 8009376:	e000      	b.n	800937a <DRV_updateFromBluetooth+0x12a>
        break;
 8009378:	bf00      	nop
    if (g_DRV_context.mode == DRV_MODE_MASTER_BOARD_CONTROL)
 800937a:	4b61      	ldr	r3, [pc, #388]	; (8009500 <DRV_updateFromBluetooth+0x2b0>)
 800937c:	79db      	ldrb	r3, [r3, #7]
 800937e:	2b02      	cmp	r3, #2
 8009380:	f000 80b9 	beq.w	80094f6 <DRV_updateFromBluetooth+0x2a6>
      if (p_bluetoothData->leftY > STP_JOYSTICKS_THRESHOLD)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	2b0f      	cmp	r3, #15
 800938a:	dd0c      	ble.n	80093a6 <DRV_updateFromBluetooth+0x156>
        l_speed = g_DRV_context.mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : p_bluetoothData->leftY;
 800938c:	4b5c      	ldr	r3, [pc, #368]	; (8009500 <DRV_updateFromBluetooth+0x2b0>)
 800938e:	79db      	ldrb	r3, [r3, #7]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d002      	beq.n	800939a <DRV_updateFromBluetooth+0x14a>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	e000      	b.n	800939c <DRV_updateFromBluetooth+0x14c>
 800939a:	2314      	movs	r3, #20
 800939c:	60bb      	str	r3, [r7, #8]
        DRV_moveForward(l_speed);
 800939e:	68b8      	ldr	r0, [r7, #8]
 80093a0:	f000 fece 	bl	800a140 <DRV_moveForward>
 80093a4:	e0a0      	b.n	80094e8 <DRV_updateFromBluetooth+0x298>
      else if (p_bluetoothData->rightY > STP_JOYSTICKS_THRESHOLD)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	2b0f      	cmp	r3, #15
 80093ac:	dd0c      	ble.n	80093c8 <DRV_updateFromBluetooth+0x178>
        l_speed = g_DRV_context.mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : p_bluetoothData->rightY;
 80093ae:	4b54      	ldr	r3, [pc, #336]	; (8009500 <DRV_updateFromBluetooth+0x2b0>)
 80093b0:	79db      	ldrb	r3, [r3, #7]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d002      	beq.n	80093bc <DRV_updateFromBluetooth+0x16c>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	e000      	b.n	80093be <DRV_updateFromBluetooth+0x16e>
 80093bc:	2314      	movs	r3, #20
 80093be:	60bb      	str	r3, [r7, #8]
        DRV_moveForward(l_speed);
 80093c0:	68b8      	ldr	r0, [r7, #8]
 80093c2:	f000 febd 	bl	800a140 <DRV_moveForward>
 80093c6:	e08f      	b.n	80094e8 <DRV_updateFromBluetooth+0x298>
      else if (p_bluetoothData->leftY < -STP_JOYSTICKS_THRESHOLD)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	f113 0f0f 	cmn.w	r3, #15
 80093d0:	da0d      	bge.n	80093ee <DRV_updateFromBluetooth+0x19e>
        l_speed = g_DRV_context.mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->leftY;
 80093d2:	4b4b      	ldr	r3, [pc, #300]	; (8009500 <DRV_updateFromBluetooth+0x2b0>)
 80093d4:	79db      	ldrb	r3, [r3, #7]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d003      	beq.n	80093e2 <DRV_updateFromBluetooth+0x192>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	425b      	negs	r3, r3
 80093e0:	e000      	b.n	80093e4 <DRV_updateFromBluetooth+0x194>
 80093e2:	2314      	movs	r3, #20
 80093e4:	60bb      	str	r3, [r7, #8]
        DRV_moveBackward(l_speed);
 80093e6:	68b8      	ldr	r0, [r7, #8]
 80093e8:	f000 fed4 	bl	800a194 <DRV_moveBackward>
 80093ec:	e07c      	b.n	80094e8 <DRV_updateFromBluetooth+0x298>
      else if (p_bluetoothData->rightY < -STP_JOYSTICKS_THRESHOLD)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	f113 0f0f 	cmn.w	r3, #15
 80093f6:	da0d      	bge.n	8009414 <DRV_updateFromBluetooth+0x1c4>
        l_speed = g_DRV_context.mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->rightY;
 80093f8:	4b41      	ldr	r3, [pc, #260]	; (8009500 <DRV_updateFromBluetooth+0x2b0>)
 80093fa:	79db      	ldrb	r3, [r3, #7]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d003      	beq.n	8009408 <DRV_updateFromBluetooth+0x1b8>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	425b      	negs	r3, r3
 8009406:	e000      	b.n	800940a <DRV_updateFromBluetooth+0x1ba>
 8009408:	2314      	movs	r3, #20
 800940a:	60bb      	str	r3, [r7, #8]
        DRV_moveBackward(l_speed);
 800940c:	68b8      	ldr	r0, [r7, #8]
 800940e:	f000 fec1 	bl	800a194 <DRV_moveBackward>
 8009412:	e069      	b.n	80094e8 <DRV_updateFromBluetooth+0x298>
      else if (p_bluetoothData->leftX < -STP_JOYSTICKS_THRESHOLD)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f113 0f0f 	cmn.w	r3, #15
 800941c:	da0d      	bge.n	800943a <DRV_updateFromBluetooth+0x1ea>
        l_speed = g_DRV_context.mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->leftX;
 800941e:	4b38      	ldr	r3, [pc, #224]	; (8009500 <DRV_updateFromBluetooth+0x2b0>)
 8009420:	79db      	ldrb	r3, [r3, #7]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d003      	beq.n	800942e <DRV_updateFromBluetooth+0x1de>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	425b      	negs	r3, r3
 800942c:	e000      	b.n	8009430 <DRV_updateFromBluetooth+0x1e0>
 800942e:	2314      	movs	r3, #20
 8009430:	60bb      	str	r3, [r7, #8]
        DRV_turnLeft(l_speed);
 8009432:	68b8      	ldr	r0, [r7, #8]
 8009434:	f000 ff80 	bl	800a338 <DRV_turnLeft>
 8009438:	e056      	b.n	80094e8 <DRV_updateFromBluetooth+0x298>
      else if (p_bluetoothData->leftX > STP_JOYSTICKS_THRESHOLD)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2b0f      	cmp	r3, #15
 8009440:	dd0c      	ble.n	800945c <DRV_updateFromBluetooth+0x20c>
        l_speed = g_DRV_context.mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : p_bluetoothData->leftX;
 8009442:	4b2f      	ldr	r3, [pc, #188]	; (8009500 <DRV_updateFromBluetooth+0x2b0>)
 8009444:	79db      	ldrb	r3, [r3, #7]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d002      	beq.n	8009450 <DRV_updateFromBluetooth+0x200>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	e000      	b.n	8009452 <DRV_updateFromBluetooth+0x202>
 8009450:	2314      	movs	r3, #20
 8009452:	60bb      	str	r3, [r7, #8]
        DRV_turnRight(l_speed);
 8009454:	68b8      	ldr	r0, [r7, #8]
 8009456:	f000 ff99 	bl	800a38c <DRV_turnRight>
 800945a:	e045      	b.n	80094e8 <DRV_updateFromBluetooth+0x298>
      else if (p_bluetoothData->rightX < -STP_JOYSTICKS_THRESHOLD)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	f113 0f0f 	cmn.w	r3, #15
 8009464:	da0d      	bge.n	8009482 <DRV_updateFromBluetooth+0x232>
        l_speed = g_DRV_context.mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->rightX;
 8009466:	4b26      	ldr	r3, [pc, #152]	; (8009500 <DRV_updateFromBluetooth+0x2b0>)
 8009468:	79db      	ldrb	r3, [r3, #7]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d003      	beq.n	8009476 <DRV_updateFromBluetooth+0x226>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	425b      	negs	r3, r3
 8009474:	e000      	b.n	8009478 <DRV_updateFromBluetooth+0x228>
 8009476:	2314      	movs	r3, #20
 8009478:	60bb      	str	r3, [r7, #8]
        DRV_translateLeft(l_speed);
 800947a:	68b8      	ldr	r0, [r7, #8]
 800947c:	f000 ffb0 	bl	800a3e0 <DRV_translateLeft>
 8009480:	e032      	b.n	80094e8 <DRV_updateFromBluetooth+0x298>
      else if (p_bluetoothData->rightX > STP_JOYSTICKS_THRESHOLD)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	689b      	ldr	r3, [r3, #8]
 8009486:	2b0f      	cmp	r3, #15
 8009488:	dd0c      	ble.n	80094a4 <DRV_updateFromBluetooth+0x254>
        l_speed = g_DRV_context.mode == DRV_MODE_MANUAL_FIXED_SPEED ? STP_JOYSTICKS_FIXED_SPEED : p_bluetoothData->rightX;
 800948a:	4b1d      	ldr	r3, [pc, #116]	; (8009500 <DRV_updateFromBluetooth+0x2b0>)
 800948c:	79db      	ldrb	r3, [r3, #7]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d002      	beq.n	8009498 <DRV_updateFromBluetooth+0x248>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	689b      	ldr	r3, [r3, #8]
 8009496:	e000      	b.n	800949a <DRV_updateFromBluetooth+0x24a>
 8009498:	2314      	movs	r3, #20
 800949a:	60bb      	str	r3, [r7, #8]
        DRV_translateRight(l_speed);
 800949c:	68b8      	ldr	r0, [r7, #8]
 800949e:	f000 ffc9 	bl	800a434 <DRV_translateRight>
 80094a2:	e021      	b.n	80094e8 <DRV_updateFromBluetooth+0x298>
      else if (p_bluetoothData->button == BLU_BUTTON_L1)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	7c1b      	ldrb	r3, [r3, #16]
 80094a8:	2b0b      	cmp	r3, #11
 80094aa:	d103      	bne.n	80094b4 <DRV_updateFromBluetooth+0x264>
        DRV_moveForwardLeft(STP_BUTTONS_FIXED_SPEED);
 80094ac:	2028      	movs	r0, #40	; 0x28
 80094ae:	f000 fec5 	bl	800a23c <DRV_moveForwardLeft>
 80094b2:	e019      	b.n	80094e8 <DRV_updateFromBluetooth+0x298>
      else if (p_bluetoothData->button == BLU_BUTTON_L2)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	7c1b      	ldrb	r3, [r3, #16]
 80094b8:	2b09      	cmp	r3, #9
 80094ba:	d103      	bne.n	80094c4 <DRV_updateFromBluetooth+0x274>
        DRV_moveBackwardRight(STP_BUTTONS_FIXED_SPEED);
 80094bc:	2028      	movs	r0, #40	; 0x28
 80094be:	f000 fee7 	bl	800a290 <DRV_moveBackwardRight>
 80094c2:	e011      	b.n	80094e8 <DRV_updateFromBluetooth+0x298>
      else if (p_bluetoothData->button == BLU_BUTTON_R1)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	7c1b      	ldrb	r3, [r3, #16]
 80094c8:	2b0c      	cmp	r3, #12
 80094ca:	d103      	bne.n	80094d4 <DRV_updateFromBluetooth+0x284>
        DRV_moveForwardRight(STP_BUTTONS_FIXED_SPEED);
 80094cc:	2028      	movs	r0, #40	; 0x28
 80094ce:	f000 fe8b 	bl	800a1e8 <DRV_moveForwardRight>
 80094d2:	e009      	b.n	80094e8 <DRV_updateFromBluetooth+0x298>
      else if (p_bluetoothData->button == BLU_BUTTON_R2)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	7c1b      	ldrb	r3, [r3, #16]
 80094d8:	2b0a      	cmp	r3, #10
 80094da:	d103      	bne.n	80094e4 <DRV_updateFromBluetooth+0x294>
        DRV_moveBackwardLeft(STP_BUTTONS_FIXED_SPEED);
 80094dc:	2028      	movs	r0, #40	; 0x28
 80094de:	f000 ff01 	bl	800a2e4 <DRV_moveBackwardLeft>
 80094e2:	e001      	b.n	80094e8 <DRV_updateFromBluetooth+0x298>
        DRV_stop();
 80094e4:	f000 fe0e 	bl	800a104 <DRV_stop>
      if (p_logInfo == true)
 80094e8:	78fb      	ldrb	r3, [r7, #3]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d003      	beq.n	80094f6 <DRV_updateFromBluetooth+0x2a6>
        DRV_logInfo(true);
 80094ee:	2001      	movs	r0, #1
 80094f0:	f000 fb20 	bl	8009b34 <DRV_logInfo>
  return;
 80094f4:	bf00      	nop
 80094f6:	bf00      	nop
}
 80094f8:	3710      	adds	r7, #16
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	20000254 	.word	0x20000254
 8009504:	08011690 	.word	0x08011690
 8009508:	080116b4 	.word	0x080116b4
 800950c:	080116e0 	.word	0x080116e0
 8009510:	08011710 	.word	0x08011710

08009514 <DRV_updateFromCommands>:

void DRV_updateFromCommands(T_SFO_Handle *p_commandsFifo, bool p_logInfo)
{
 8009514:	b590      	push	{r4, r7, lr}
 8009516:	b091      	sub	sp, #68	; 0x44
 8009518:	af02      	add	r7, sp, #8
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	460b      	mov	r3, r1
 800951e:	70fb      	strb	r3, [r7, #3]
  int32_t    l_rearRightSpeed;
  int32_t    l_rearLeftSpeed;
  float      l_value;

  /* Ignore master board data when a manual mode is selected */
  if (g_DRV_context.mode != DRV_MODE_MASTER_BOARD_CONTROL)
 8009520:	4bba      	ldr	r3, [pc, #744]	; (800980c <DRV_updateFromCommands+0x2f8>)
 8009522:	79db      	ldrb	r3, [r3, #7]
 8009524:	2b02      	cmp	r3, #2
 8009526:	f040 8299 	bne.w	8009a5c <DRV_updateFromCommands+0x548>
  }
  else
  {
    /* Deal with only one command per cycle. If a FIFO overflow occurs, */
    /* FIFO string will report an error, showing us a design issue...   */
    if (SFO_getCount(p_commandsFifo) != 0)
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f002 f920 	bl	800b770 <SFO_getCount>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	f000 827b 	beq.w	8009a2e <DRV_updateFromCommands+0x51a>
    {
      SFO_logInfo(p_commandsFifo);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f002 f925 	bl	800b788 <SFO_logInfo>
      SFO_pop    (p_commandsFifo         , &l_command);
 800953e:	f107 0320 	add.w	r3, r7, #32
 8009542:	4619      	mov	r1, r3
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f002 f8d3 	bl	800b6f0 <SFO_pop>
      LOG_info   ("Drive got command: %s",  l_command);
 800954a:	f107 0320 	add.w	r3, r7, #32
 800954e:	461a      	mov	r2, r3
 8009550:	49af      	ldr	r1, [pc, #700]	; (8009810 <DRV_updateFromCommands+0x2fc>)
 8009552:	2001      	movs	r0, #1
 8009554:	f001 f90c 	bl	800a770 <LOG_log>

      /* Most commands expect PID mode */
      g_DRV_context.isPidModeOn = true;
 8009558:	4bac      	ldr	r3, [pc, #688]	; (800980c <DRV_updateFromCommands+0x2f8>)
 800955a:	2201      	movs	r2, #1
 800955c:	719a      	strb	r2, [r3, #6]

      /* Stop */
      if ((l_command[0] == 'S') && (l_command[1] == 'T'))
 800955e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009562:	2b53      	cmp	r3, #83	; 0x53
 8009564:	d116      	bne.n	8009594 <DRV_updateFromCommands+0x80>
 8009566:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800956a:	2b54      	cmp	r3, #84	; 0x54
 800956c:	d112      	bne.n	8009594 <DRV_updateFromCommands+0x80>
      {
        DRV_setDirectionsStop();
 800956e:	f000 fc81 	bl	8009e74 <DRV_setDirectionsStop>

        WHL_setPidTarget(&g_DRV_context.wheelFrontRight, 0);
 8009572:	2100      	movs	r1, #0
 8009574:	48a7      	ldr	r0, [pc, #668]	; (8009814 <DRV_updateFromCommands+0x300>)
 8009576:	f002 fbc5 	bl	800bd04 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelFrontLeft , 0);
 800957a:	2100      	movs	r1, #0
 800957c:	48a6      	ldr	r0, [pc, #664]	; (8009818 <DRV_updateFromCommands+0x304>)
 800957e:	f002 fbc1 	bl	800bd04 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearRight , 0);
 8009582:	2100      	movs	r1, #0
 8009584:	48a5      	ldr	r0, [pc, #660]	; (800981c <DRV_updateFromCommands+0x308>)
 8009586:	f002 fbbd 	bl	800bd04 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearLeft  , 0);
 800958a:	2100      	movs	r1, #0
 800958c:	48a4      	ldr	r0, [pc, #656]	; (8009820 <DRV_updateFromCommands+0x30c>)
 800958e:	f002 fbb9 	bl	800bd04 <WHL_setPidTarget>
 8009592:	e24c      	b.n	8009a2e <DRV_updateFromCommands+0x51a>
      }
      /* Forward Straight */
      else if ((l_command[0] == 'F') && (l_command[1] == 'S'))
 8009594:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009598:	2b46      	cmp	r3, #70	; 0x46
 800959a:	d123      	bne.n	80095e4 <DRV_updateFromCommands+0xd0>
 800959c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80095a0:	2b53      	cmp	r3, #83	; 0x53
 80095a2:	d11f      	bne.n	80095e4 <DRV_updateFromCommands+0xd0>
      {
        DRV_getSpeedFromCommand(&l_command[2], &l_speed);
 80095a4:	f107 021c 	add.w	r2, r7, #28
 80095a8:	f107 0320 	add.w	r3, r7, #32
 80095ac:	3302      	adds	r3, #2
 80095ae:	4611      	mov	r1, r2
 80095b0:	4618      	mov	r0, r3
 80095b2:	f000 fb19 	bl	8009be8 <DRV_getSpeedFromCommand>

        DRV_setDirectionsForward();
 80095b6:	f000 fc79 	bl	8009eac <DRV_setDirectionsForward>

        WHL_setPidTarget(&g_DRV_context.wheelFrontRight, l_speed);
 80095ba:	69fb      	ldr	r3, [r7, #28]
 80095bc:	4619      	mov	r1, r3
 80095be:	4895      	ldr	r0, [pc, #596]	; (8009814 <DRV_updateFromCommands+0x300>)
 80095c0:	f002 fba0 	bl	800bd04 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelFrontLeft , l_speed);
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	4619      	mov	r1, r3
 80095c8:	4893      	ldr	r0, [pc, #588]	; (8009818 <DRV_updateFromCommands+0x304>)
 80095ca:	f002 fb9b 	bl	800bd04 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearRight , l_speed);
 80095ce:	69fb      	ldr	r3, [r7, #28]
 80095d0:	4619      	mov	r1, r3
 80095d2:	4892      	ldr	r0, [pc, #584]	; (800981c <DRV_updateFromCommands+0x308>)
 80095d4:	f002 fb96 	bl	800bd04 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearLeft  , l_speed);
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	4619      	mov	r1, r3
 80095dc:	4890      	ldr	r0, [pc, #576]	; (8009820 <DRV_updateFromCommands+0x30c>)
 80095de:	f002 fb91 	bl	800bd04 <WHL_setPidTarget>
 80095e2:	e224      	b.n	8009a2e <DRV_updateFromCommands+0x51a>
      }
      /* Move Backward */
      else if ((l_command[0] == 'B') && (l_command[1] == 'S'))
 80095e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80095e8:	2b42      	cmp	r3, #66	; 0x42
 80095ea:	d123      	bne.n	8009634 <DRV_updateFromCommands+0x120>
 80095ec:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80095f0:	2b53      	cmp	r3, #83	; 0x53
 80095f2:	d11f      	bne.n	8009634 <DRV_updateFromCommands+0x120>
      {
        DRV_getSpeedFromCommand(&l_command[2], &l_speed);
 80095f4:	f107 021c 	add.w	r2, r7, #28
 80095f8:	f107 0320 	add.w	r3, r7, #32
 80095fc:	3302      	adds	r3, #2
 80095fe:	4611      	mov	r1, r2
 8009600:	4618      	mov	r0, r3
 8009602:	f000 faf1 	bl	8009be8 <DRV_getSpeedFromCommand>

        DRV_setDirectionsBackward();
 8009606:	f000 fc6d 	bl	8009ee4 <DRV_setDirectionsBackward>

        WHL_setPidTarget(&g_DRV_context.wheelFrontRight, l_speed);
 800960a:	69fb      	ldr	r3, [r7, #28]
 800960c:	4619      	mov	r1, r3
 800960e:	4881      	ldr	r0, [pc, #516]	; (8009814 <DRV_updateFromCommands+0x300>)
 8009610:	f002 fb78 	bl	800bd04 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelFrontLeft , l_speed);
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	4619      	mov	r1, r3
 8009618:	487f      	ldr	r0, [pc, #508]	; (8009818 <DRV_updateFromCommands+0x304>)
 800961a:	f002 fb73 	bl	800bd04 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearRight , l_speed);
 800961e:	69fb      	ldr	r3, [r7, #28]
 8009620:	4619      	mov	r1, r3
 8009622:	487e      	ldr	r0, [pc, #504]	; (800981c <DRV_updateFromCommands+0x308>)
 8009624:	f002 fb6e 	bl	800bd04 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearLeft  , l_speed);
 8009628:	69fb      	ldr	r3, [r7, #28]
 800962a:	4619      	mov	r1, r3
 800962c:	487c      	ldr	r0, [pc, #496]	; (8009820 <DRV_updateFromCommands+0x30c>)
 800962e:	f002 fb69 	bl	800bd04 <WHL_setPidTarget>
 8009632:	e1fc      	b.n	8009a2e <DRV_updateFromCommands+0x51a>
      }
      /* TuRn (i.e. Rotate) Left */
      else if ((l_command[0] == 'R') && (l_command[1] == 'L'))
 8009634:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009638:	2b52      	cmp	r3, #82	; 0x52
 800963a:	d123      	bne.n	8009684 <DRV_updateFromCommands+0x170>
 800963c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009640:	2b4c      	cmp	r3, #76	; 0x4c
 8009642:	d11f      	bne.n	8009684 <DRV_updateFromCommands+0x170>
      {
        DRV_getSpeedFromCommand(&l_command[2], &l_speed);
 8009644:	f107 021c 	add.w	r2, r7, #28
 8009648:	f107 0320 	add.w	r3, r7, #32
 800964c:	3302      	adds	r3, #2
 800964e:	4611      	mov	r1, r2
 8009650:	4618      	mov	r0, r3
 8009652:	f000 fac9 	bl	8009be8 <DRV_getSpeedFromCommand>

        DRV_setDirectionsTurnLeft();
 8009656:	f000 fca1 	bl	8009f9c <DRV_setDirectionsTurnLeft>

        WHL_setPidTarget(&g_DRV_context.wheelFrontRight, l_speed);
 800965a:	69fb      	ldr	r3, [r7, #28]
 800965c:	4619      	mov	r1, r3
 800965e:	486d      	ldr	r0, [pc, #436]	; (8009814 <DRV_updateFromCommands+0x300>)
 8009660:	f002 fb50 	bl	800bd04 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelFrontLeft , l_speed);
 8009664:	69fb      	ldr	r3, [r7, #28]
 8009666:	4619      	mov	r1, r3
 8009668:	486b      	ldr	r0, [pc, #428]	; (8009818 <DRV_updateFromCommands+0x304>)
 800966a:	f002 fb4b 	bl	800bd04 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearRight , l_speed);
 800966e:	69fb      	ldr	r3, [r7, #28]
 8009670:	4619      	mov	r1, r3
 8009672:	486a      	ldr	r0, [pc, #424]	; (800981c <DRV_updateFromCommands+0x308>)
 8009674:	f002 fb46 	bl	800bd04 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearLeft  , l_speed);
 8009678:	69fb      	ldr	r3, [r7, #28]
 800967a:	4619      	mov	r1, r3
 800967c:	4868      	ldr	r0, [pc, #416]	; (8009820 <DRV_updateFromCommands+0x30c>)
 800967e:	f002 fb41 	bl	800bd04 <WHL_setPidTarget>
 8009682:	e1d4      	b.n	8009a2e <DRV_updateFromCommands+0x51a>
      }
      /* TuRn (i.e. Rotate) Right */
      else if ((l_command[0] == 'R') && (l_command[1] == 'R'))
 8009684:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009688:	2b52      	cmp	r3, #82	; 0x52
 800968a:	d123      	bne.n	80096d4 <DRV_updateFromCommands+0x1c0>
 800968c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009690:	2b52      	cmp	r3, #82	; 0x52
 8009692:	d11f      	bne.n	80096d4 <DRV_updateFromCommands+0x1c0>
      {
        DRV_getSpeedFromCommand(&l_command[2], &l_speed);
 8009694:	f107 021c 	add.w	r2, r7, #28
 8009698:	f107 0320 	add.w	r3, r7, #32
 800969c:	3302      	adds	r3, #2
 800969e:	4611      	mov	r1, r2
 80096a0:	4618      	mov	r0, r3
 80096a2:	f000 faa1 	bl	8009be8 <DRV_getSpeedFromCommand>

        DRV_setDirectionsTurnRight();
 80096a6:	f000 fc95 	bl	8009fd4 <DRV_setDirectionsTurnRight>

        WHL_setPidTarget(&g_DRV_context.wheelFrontRight, l_speed);
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	4619      	mov	r1, r3
 80096ae:	4859      	ldr	r0, [pc, #356]	; (8009814 <DRV_updateFromCommands+0x300>)
 80096b0:	f002 fb28 	bl	800bd04 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelFrontLeft , l_speed);
 80096b4:	69fb      	ldr	r3, [r7, #28]
 80096b6:	4619      	mov	r1, r3
 80096b8:	4857      	ldr	r0, [pc, #348]	; (8009818 <DRV_updateFromCommands+0x304>)
 80096ba:	f002 fb23 	bl	800bd04 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearRight , l_speed);
 80096be:	69fb      	ldr	r3, [r7, #28]
 80096c0:	4619      	mov	r1, r3
 80096c2:	4856      	ldr	r0, [pc, #344]	; (800981c <DRV_updateFromCommands+0x308>)
 80096c4:	f002 fb1e 	bl	800bd04 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearLeft  , l_speed);
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	4619      	mov	r1, r3
 80096cc:	4854      	ldr	r0, [pc, #336]	; (8009820 <DRV_updateFromCommands+0x30c>)
 80096ce:	f002 fb19 	bl	800bd04 <WHL_setPidTarget>
 80096d2:	e1ac      	b.n	8009a2e <DRV_updateFromCommands+0x51a>
      }
      /* Translate Left */
      else if ((l_command[0] == 'T') && (l_command[1] == 'L'))
 80096d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80096d8:	2b54      	cmp	r3, #84	; 0x54
 80096da:	d123      	bne.n	8009724 <DRV_updateFromCommands+0x210>
 80096dc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80096e0:	2b4c      	cmp	r3, #76	; 0x4c
 80096e2:	d11f      	bne.n	8009724 <DRV_updateFromCommands+0x210>
      {
        DRV_getSpeedFromCommand(&l_command[2], &l_speed);
 80096e4:	f107 021c 	add.w	r2, r7, #28
 80096e8:	f107 0320 	add.w	r3, r7, #32
 80096ec:	3302      	adds	r3, #2
 80096ee:	4611      	mov	r1, r2
 80096f0:	4618      	mov	r0, r3
 80096f2:	f000 fa79 	bl	8009be8 <DRV_getSpeedFromCommand>

        DRV_setDirectionsTranslateLeft();
 80096f6:	f000 fc89 	bl	800a00c <DRV_setDirectionsTranslateLeft>

        WHL_setPidTarget(&g_DRV_context.wheelFrontRight, l_speed);
 80096fa:	69fb      	ldr	r3, [r7, #28]
 80096fc:	4619      	mov	r1, r3
 80096fe:	4845      	ldr	r0, [pc, #276]	; (8009814 <DRV_updateFromCommands+0x300>)
 8009700:	f002 fb00 	bl	800bd04 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelFrontLeft , l_speed);
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	4619      	mov	r1, r3
 8009708:	4843      	ldr	r0, [pc, #268]	; (8009818 <DRV_updateFromCommands+0x304>)
 800970a:	f002 fafb 	bl	800bd04 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearRight , l_speed);
 800970e:	69fb      	ldr	r3, [r7, #28]
 8009710:	4619      	mov	r1, r3
 8009712:	4842      	ldr	r0, [pc, #264]	; (800981c <DRV_updateFromCommands+0x308>)
 8009714:	f002 faf6 	bl	800bd04 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearLeft  , l_speed);
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	4619      	mov	r1, r3
 800971c:	4840      	ldr	r0, [pc, #256]	; (8009820 <DRV_updateFromCommands+0x30c>)
 800971e:	f002 faf1 	bl	800bd04 <WHL_setPidTarget>
 8009722:	e184      	b.n	8009a2e <DRV_updateFromCommands+0x51a>
      }
      /* Translate Right */
      else if ((l_command[0] == 'T') && (l_command[1] == 'R'))
 8009724:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009728:	2b54      	cmp	r3, #84	; 0x54
 800972a:	d123      	bne.n	8009774 <DRV_updateFromCommands+0x260>
 800972c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009730:	2b52      	cmp	r3, #82	; 0x52
 8009732:	d11f      	bne.n	8009774 <DRV_updateFromCommands+0x260>
      {
        DRV_getSpeedFromCommand(&l_command[2], &l_speed);
 8009734:	f107 021c 	add.w	r2, r7, #28
 8009738:	f107 0320 	add.w	r3, r7, #32
 800973c:	3302      	adds	r3, #2
 800973e:	4611      	mov	r1, r2
 8009740:	4618      	mov	r0, r3
 8009742:	f000 fa51 	bl	8009be8 <DRV_getSpeedFromCommand>

        DRV_setDirectionsTranslateRight();
 8009746:	f000 fc7d 	bl	800a044 <DRV_setDirectionsTranslateRight>

        WHL_setPidTarget(&g_DRV_context.wheelFrontRight, l_speed);
 800974a:	69fb      	ldr	r3, [r7, #28]
 800974c:	4619      	mov	r1, r3
 800974e:	4831      	ldr	r0, [pc, #196]	; (8009814 <DRV_updateFromCommands+0x300>)
 8009750:	f002 fad8 	bl	800bd04 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelFrontLeft , l_speed);
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	4619      	mov	r1, r3
 8009758:	482f      	ldr	r0, [pc, #188]	; (8009818 <DRV_updateFromCommands+0x304>)
 800975a:	f002 fad3 	bl	800bd04 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearRight , l_speed);
 800975e:	69fb      	ldr	r3, [r7, #28]
 8009760:	4619      	mov	r1, r3
 8009762:	482e      	ldr	r0, [pc, #184]	; (800981c <DRV_updateFromCommands+0x308>)
 8009764:	f002 face 	bl	800bd04 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearLeft  , l_speed);
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	4619      	mov	r1, r3
 800976c:	482c      	ldr	r0, [pc, #176]	; (8009820 <DRV_updateFromCommands+0x30c>)
 800976e:	f002 fac9 	bl	800bd04 <WHL_setPidTarget>
 8009772:	e15c      	b.n	8009a2e <DRV_updateFromCommands+0x51a>
      }
      /* Forward Left */
      else if ((l_command[0] == 'F') && (l_command[1] == 'L'))
 8009774:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009778:	2b46      	cmp	r3, #70	; 0x46
 800977a:	d121      	bne.n	80097c0 <DRV_updateFromCommands+0x2ac>
 800977c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009780:	2b4c      	cmp	r3, #76	; 0x4c
 8009782:	d11d      	bne.n	80097c0 <DRV_updateFromCommands+0x2ac>
      {
        DRV_getSpeedFromCommand(&l_command[2], &l_speed);
 8009784:	f107 021c 	add.w	r2, r7, #28
 8009788:	f107 0320 	add.w	r3, r7, #32
 800978c:	3302      	adds	r3, #2
 800978e:	4611      	mov	r1, r2
 8009790:	4618      	mov	r0, r3
 8009792:	f000 fa29 	bl	8009be8 <DRV_getSpeedFromCommand>

        DRV_setDirectionsForwardLeft();
 8009796:	f000 fbd1 	bl	8009f3c <DRV_setDirectionsForwardLeft>

        WHL_setPidTarget(&g_DRV_context.wheelFrontRight, l_speed);
 800979a:	69fb      	ldr	r3, [r7, #28]
 800979c:	4619      	mov	r1, r3
 800979e:	481d      	ldr	r0, [pc, #116]	; (8009814 <DRV_updateFromCommands+0x300>)
 80097a0:	f002 fab0 	bl	800bd04 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelFrontLeft ,       0);
 80097a4:	2100      	movs	r1, #0
 80097a6:	481c      	ldr	r0, [pc, #112]	; (8009818 <DRV_updateFromCommands+0x304>)
 80097a8:	f002 faac 	bl	800bd04 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearRight ,       0);
 80097ac:	2100      	movs	r1, #0
 80097ae:	481b      	ldr	r0, [pc, #108]	; (800981c <DRV_updateFromCommands+0x308>)
 80097b0:	f002 faa8 	bl	800bd04 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearLeft  , l_speed);
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	4619      	mov	r1, r3
 80097b8:	4819      	ldr	r0, [pc, #100]	; (8009820 <DRV_updateFromCommands+0x30c>)
 80097ba:	f002 faa3 	bl	800bd04 <WHL_setPidTarget>
 80097be:	e136      	b.n	8009a2e <DRV_updateFromCommands+0x51a>
      }
      /* Forward Right */
      else if ((l_command[0] == 'F') && (l_command[1] == 'R'))
 80097c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80097c4:	2b46      	cmp	r3, #70	; 0x46
 80097c6:	d12d      	bne.n	8009824 <DRV_updateFromCommands+0x310>
 80097c8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80097cc:	2b52      	cmp	r3, #82	; 0x52
 80097ce:	d129      	bne.n	8009824 <DRV_updateFromCommands+0x310>
      {
        DRV_getSpeedFromCommand(&l_command[2], &l_speed);
 80097d0:	f107 021c 	add.w	r2, r7, #28
 80097d4:	f107 0320 	add.w	r3, r7, #32
 80097d8:	3302      	adds	r3, #2
 80097da:	4611      	mov	r1, r2
 80097dc:	4618      	mov	r0, r3
 80097de:	f000 fa03 	bl	8009be8 <DRV_getSpeedFromCommand>

        DRV_setDirectionsForwardRight();
 80097e2:	f000 fb9b 	bl	8009f1c <DRV_setDirectionsForwardRight>

        WHL_setPidTarget(&g_DRV_context.wheelFrontRight,       0);
 80097e6:	2100      	movs	r1, #0
 80097e8:	480a      	ldr	r0, [pc, #40]	; (8009814 <DRV_updateFromCommands+0x300>)
 80097ea:	f002 fa8b 	bl	800bd04 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelFrontLeft , l_speed);
 80097ee:	69fb      	ldr	r3, [r7, #28]
 80097f0:	4619      	mov	r1, r3
 80097f2:	4809      	ldr	r0, [pc, #36]	; (8009818 <DRV_updateFromCommands+0x304>)
 80097f4:	f002 fa86 	bl	800bd04 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearRight , l_speed);
 80097f8:	69fb      	ldr	r3, [r7, #28]
 80097fa:	4619      	mov	r1, r3
 80097fc:	4807      	ldr	r0, [pc, #28]	; (800981c <DRV_updateFromCommands+0x308>)
 80097fe:	f002 fa81 	bl	800bd04 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearLeft  ,       0);
 8009802:	2100      	movs	r1, #0
 8009804:	4806      	ldr	r0, [pc, #24]	; (8009820 <DRV_updateFromCommands+0x30c>)
 8009806:	f002 fa7d 	bl	800bd04 <WHL_setPidTarget>
 800980a:	e110      	b.n	8009a2e <DRV_updateFromCommands+0x51a>
 800980c:	20000254 	.word	0x20000254
 8009810:	08011740 	.word	0x08011740
 8009814:	2000025c 	.word	0x2000025c
 8009818:	20000300 	.word	0x20000300
 800981c:	20000448 	.word	0x20000448
 8009820:	200003a4 	.word	0x200003a4
      }
      /* Backward Left */
      else if ((l_command[0] == 'B') && (l_command[1] == 'L'))
 8009824:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009828:	2b42      	cmp	r3, #66	; 0x42
 800982a:	d121      	bne.n	8009870 <DRV_updateFromCommands+0x35c>
 800982c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009830:	2b4c      	cmp	r3, #76	; 0x4c
 8009832:	d11d      	bne.n	8009870 <DRV_updateFromCommands+0x35c>
      {
        DRV_getSpeedFromCommand(&l_command[2], &l_speed);
 8009834:	f107 021c 	add.w	r2, r7, #28
 8009838:	f107 0320 	add.w	r3, r7, #32
 800983c:	3302      	adds	r3, #2
 800983e:	4611      	mov	r1, r2
 8009840:	4618      	mov	r0, r3
 8009842:	f000 f9d1 	bl	8009be8 <DRV_getSpeedFromCommand>

        DRV_setDirectionsBackwardLeft();
 8009846:	f000 fb99 	bl	8009f7c <DRV_setDirectionsBackwardLeft>

        WHL_setPidTarget(&g_DRV_context.wheelFrontRight,       0);
 800984a:	2100      	movs	r1, #0
 800984c:	4885      	ldr	r0, [pc, #532]	; (8009a64 <DRV_updateFromCommands+0x550>)
 800984e:	f002 fa59 	bl	800bd04 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelFrontLeft , l_speed);
 8009852:	69fb      	ldr	r3, [r7, #28]
 8009854:	4619      	mov	r1, r3
 8009856:	4884      	ldr	r0, [pc, #528]	; (8009a68 <DRV_updateFromCommands+0x554>)
 8009858:	f002 fa54 	bl	800bd04 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearRight , l_speed);
 800985c:	69fb      	ldr	r3, [r7, #28]
 800985e:	4619      	mov	r1, r3
 8009860:	4882      	ldr	r0, [pc, #520]	; (8009a6c <DRV_updateFromCommands+0x558>)
 8009862:	f002 fa4f 	bl	800bd04 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearLeft  ,       0);
 8009866:	2100      	movs	r1, #0
 8009868:	4881      	ldr	r0, [pc, #516]	; (8009a70 <DRV_updateFromCommands+0x55c>)
 800986a:	f002 fa4b 	bl	800bd04 <WHL_setPidTarget>
 800986e:	e0de      	b.n	8009a2e <DRV_updateFromCommands+0x51a>
      }
      /* Backward Right */
      else if ((l_command[0] == 'B') && (l_command[1] == 'R'))
 8009870:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009874:	2b42      	cmp	r3, #66	; 0x42
 8009876:	d121      	bne.n	80098bc <DRV_updateFromCommands+0x3a8>
 8009878:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800987c:	2b52      	cmp	r3, #82	; 0x52
 800987e:	d11d      	bne.n	80098bc <DRV_updateFromCommands+0x3a8>
      {
        DRV_getSpeedFromCommand(&l_command[2], &l_speed);
 8009880:	f107 021c 	add.w	r2, r7, #28
 8009884:	f107 0320 	add.w	r3, r7, #32
 8009888:	3302      	adds	r3, #2
 800988a:	4611      	mov	r1, r2
 800988c:	4618      	mov	r0, r3
 800988e:	f000 f9ab 	bl	8009be8 <DRV_getSpeedFromCommand>

        DRV_setDirectionsBackwardRight();
 8009892:	f000 fb63 	bl	8009f5c <DRV_setDirectionsBackwardRight>

        WHL_setPidTarget(&g_DRV_context.wheelFrontRight, l_speed);
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	4619      	mov	r1, r3
 800989a:	4872      	ldr	r0, [pc, #456]	; (8009a64 <DRV_updateFromCommands+0x550>)
 800989c:	f002 fa32 	bl	800bd04 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelFrontLeft ,       0);
 80098a0:	2100      	movs	r1, #0
 80098a2:	4871      	ldr	r0, [pc, #452]	; (8009a68 <DRV_updateFromCommands+0x554>)
 80098a4:	f002 fa2e 	bl	800bd04 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearRight ,       0);
 80098a8:	2100      	movs	r1, #0
 80098aa:	4870      	ldr	r0, [pc, #448]	; (8009a6c <DRV_updateFromCommands+0x558>)
 80098ac:	f002 fa2a 	bl	800bd04 <WHL_setPidTarget>
        WHL_setPidTarget(&g_DRV_context.wheelRearLeft  , l_speed);
 80098b0:	69fb      	ldr	r3, [r7, #28]
 80098b2:	4619      	mov	r1, r3
 80098b4:	486e      	ldr	r0, [pc, #440]	; (8009a70 <DRV_updateFromCommands+0x55c>)
 80098b6:	f002 fa25 	bl	800bd04 <WHL_setPidTarget>
 80098ba:	e0b8      	b.n	8009a2e <DRV_updateFromCommands+0x51a>
      }
      /* Custom */
      else if (l_command[0] == 'C')
 80098bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80098c0:	2b43      	cmp	r3, #67	; 0x43
 80098c2:	d138      	bne.n	8009936 <DRV_updateFromCommands+0x422>
      {
        g_DRV_context.isPidModeOn = false;
 80098c4:	4b6b      	ldr	r3, [pc, #428]	; (8009a74 <DRV_updateFromCommands+0x560>)
 80098c6:	2200      	movs	r2, #0
 80098c8:	719a      	strb	r2, [r3, #6]

        DRV_getSpeedsFromCommand(&l_command[1],
 80098ca:	f107 0410 	add.w	r4, r7, #16
 80098ce:	f107 0214 	add.w	r2, r7, #20
 80098d2:	f107 0118 	add.w	r1, r7, #24
 80098d6:	f107 0320 	add.w	r3, r7, #32
 80098da:	1c58      	adds	r0, r3, #1
 80098dc:	f107 030c 	add.w	r3, r7, #12
 80098e0:	9300      	str	r3, [sp, #0]
 80098e2:	4623      	mov	r3, r4
 80098e4:	f000 f9a8 	bl	8009c38 <DRV_getSpeedsFromCommand>
                                 &l_frontRightSpeed,
                                 &l_frontLeftSpeed,
                                 &l_rearRightSpeed,
                                 &l_rearLeftSpeed);

        DRV_setDirectionsCustom(l_frontRightSpeed,
 80098e8:	69b8      	ldr	r0, [r7, #24]
 80098ea:	6979      	ldr	r1, [r7, #20]
 80098ec:	693a      	ldr	r2, [r7, #16]
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f000 fbc4 	bl	800a07c <DRV_setDirectionsCustom>
                                l_frontLeftSpeed,
                                l_rearRightSpeed,
                                l_rearLeftSpeed);

        WHL_setDirectTarget(&g_DRV_context.wheelFrontRight, abs(l_frontRightSpeed));
 80098f4:	69bb      	ldr	r3, [r7, #24]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	bfb8      	it	lt
 80098fa:	425b      	neglt	r3, r3
 80098fc:	4619      	mov	r1, r3
 80098fe:	4859      	ldr	r0, [pc, #356]	; (8009a64 <DRV_updateFromCommands+0x550>)
 8009900:	f002 fa14 	bl	800bd2c <WHL_setDirectTarget>
        WHL_setDirectTarget(&g_DRV_context.wheelFrontLeft , abs(l_frontLeftSpeed ));
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	2b00      	cmp	r3, #0
 8009908:	bfb8      	it	lt
 800990a:	425b      	neglt	r3, r3
 800990c:	4619      	mov	r1, r3
 800990e:	4856      	ldr	r0, [pc, #344]	; (8009a68 <DRV_updateFromCommands+0x554>)
 8009910:	f002 fa0c 	bl	800bd2c <WHL_setDirectTarget>
        WHL_setDirectTarget(&g_DRV_context.wheelRearRight , abs(l_rearRightSpeed ));
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	2b00      	cmp	r3, #0
 8009918:	bfb8      	it	lt
 800991a:	425b      	neglt	r3, r3
 800991c:	4619      	mov	r1, r3
 800991e:	4853      	ldr	r0, [pc, #332]	; (8009a6c <DRV_updateFromCommands+0x558>)
 8009920:	f002 fa04 	bl	800bd2c <WHL_setDirectTarget>
        WHL_setDirectTarget(&g_DRV_context.wheelRearLeft  , abs(l_rearLeftSpeed  ));
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2b00      	cmp	r3, #0
 8009928:	bfb8      	it	lt
 800992a:	425b      	neglt	r3, r3
 800992c:	4619      	mov	r1, r3
 800992e:	4850      	ldr	r0, [pc, #320]	; (8009a70 <DRV_updateFromCommands+0x55c>)
 8009930:	f002 f9fc 	bl	800bd2c <WHL_setDirectTarget>
 8009934:	e07b      	b.n	8009a2e <DRV_updateFromCommands+0x51a>
      }
      else if ((l_command[0] == 'K') && (l_command[1] == 'P'))
 8009936:	f897 3020 	ldrb.w	r3, [r7, #32]
 800993a:	2b4b      	cmp	r3, #75	; 0x4b
 800993c:	d122      	bne.n	8009984 <DRV_updateFromCommands+0x470>
 800993e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009942:	2b50      	cmp	r3, #80	; 0x50
 8009944:	d11e      	bne.n	8009984 <DRV_updateFromCommands+0x470>
      {
        l_value = atof(&l_command[2]);
 8009946:	f107 0320 	add.w	r3, r7, #32
 800994a:	3302      	adds	r3, #2
 800994c:	4618      	mov	r0, r3
 800994e:	f002 fa9d 	bl	800be8c <atof>
 8009952:	4602      	mov	r2, r0
 8009954:	460b      	mov	r3, r1
 8009956:	4610      	mov	r0, r2
 8009958:	4619      	mov	r1, r3
 800995a:	f7f7 f921 	bl	8000ba0 <__aeabi_d2f>
 800995e:	4603      	mov	r3, r0
 8009960:	637b      	str	r3, [r7, #52]	; 0x34

        WHL_setPidKp(&g_DRV_context.wheelFrontRight, l_value);
 8009962:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009964:	483f      	ldr	r0, [pc, #252]	; (8009a64 <DRV_updateFromCommands+0x550>)
 8009966:	f002 f9a0 	bl	800bcaa <WHL_setPidKp>
        WHL_setPidKp(&g_DRV_context.wheelFrontLeft , l_value);
 800996a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800996c:	483e      	ldr	r0, [pc, #248]	; (8009a68 <DRV_updateFromCommands+0x554>)
 800996e:	f002 f99c 	bl	800bcaa <WHL_setPidKp>
        WHL_setPidKp(&g_DRV_context.wheelRearRight , l_value);
 8009972:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009974:	483d      	ldr	r0, [pc, #244]	; (8009a6c <DRV_updateFromCommands+0x558>)
 8009976:	f002 f998 	bl	800bcaa <WHL_setPidKp>
        WHL_setPidKp(&g_DRV_context.wheelRearLeft  , l_value);
 800997a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800997c:	483c      	ldr	r0, [pc, #240]	; (8009a70 <DRV_updateFromCommands+0x55c>)
 800997e:	f002 f994 	bl	800bcaa <WHL_setPidKp>
 8009982:	e054      	b.n	8009a2e <DRV_updateFromCommands+0x51a>
      }
      else if ((l_command[0] == 'K') && (l_command[1] == 'I'))
 8009984:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009988:	2b4b      	cmp	r3, #75	; 0x4b
 800998a:	d122      	bne.n	80099d2 <DRV_updateFromCommands+0x4be>
 800998c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009990:	2b49      	cmp	r3, #73	; 0x49
 8009992:	d11e      	bne.n	80099d2 <DRV_updateFromCommands+0x4be>
      {
        l_value = atof(&l_command[2]);
 8009994:	f107 0320 	add.w	r3, r7, #32
 8009998:	3302      	adds	r3, #2
 800999a:	4618      	mov	r0, r3
 800999c:	f002 fa76 	bl	800be8c <atof>
 80099a0:	4602      	mov	r2, r0
 80099a2:	460b      	mov	r3, r1
 80099a4:	4610      	mov	r0, r2
 80099a6:	4619      	mov	r1, r3
 80099a8:	f7f7 f8fa 	bl	8000ba0 <__aeabi_d2f>
 80099ac:	4603      	mov	r3, r0
 80099ae:	637b      	str	r3, [r7, #52]	; 0x34

        WHL_setPidKi(&g_DRV_context.wheelFrontRight, l_value);
 80099b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80099b2:	482c      	ldr	r0, [pc, #176]	; (8009a64 <DRV_updateFromCommands+0x550>)
 80099b4:	f002 f988 	bl	800bcc8 <WHL_setPidKi>
        WHL_setPidKi(&g_DRV_context.wheelFrontLeft , l_value);
 80099b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80099ba:	482b      	ldr	r0, [pc, #172]	; (8009a68 <DRV_updateFromCommands+0x554>)
 80099bc:	f002 f984 	bl	800bcc8 <WHL_setPidKi>
        WHL_setPidKi(&g_DRV_context.wheelRearRight , l_value);
 80099c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80099c2:	482a      	ldr	r0, [pc, #168]	; (8009a6c <DRV_updateFromCommands+0x558>)
 80099c4:	f002 f980 	bl	800bcc8 <WHL_setPidKi>
        WHL_setPidKi(&g_DRV_context.wheelRearLeft  , l_value);
 80099c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80099ca:	4829      	ldr	r0, [pc, #164]	; (8009a70 <DRV_updateFromCommands+0x55c>)
 80099cc:	f002 f97c 	bl	800bcc8 <WHL_setPidKi>
 80099d0:	e02d      	b.n	8009a2e <DRV_updateFromCommands+0x51a>
      }
      else if ((l_command[0] == 'K') && (l_command[1] == 'D'))
 80099d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80099d6:	2b4b      	cmp	r3, #75	; 0x4b
 80099d8:	d122      	bne.n	8009a20 <DRV_updateFromCommands+0x50c>
 80099da:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80099de:	2b44      	cmp	r3, #68	; 0x44
 80099e0:	d11e      	bne.n	8009a20 <DRV_updateFromCommands+0x50c>
      {
        l_value = atof(&l_command[2]);
 80099e2:	f107 0320 	add.w	r3, r7, #32
 80099e6:	3302      	adds	r3, #2
 80099e8:	4618      	mov	r0, r3
 80099ea:	f002 fa4f 	bl	800be8c <atof>
 80099ee:	4602      	mov	r2, r0
 80099f0:	460b      	mov	r3, r1
 80099f2:	4610      	mov	r0, r2
 80099f4:	4619      	mov	r1, r3
 80099f6:	f7f7 f8d3 	bl	8000ba0 <__aeabi_d2f>
 80099fa:	4603      	mov	r3, r0
 80099fc:	637b      	str	r3, [r7, #52]	; 0x34

        WHL_setPidKd(&g_DRV_context.wheelFrontRight, l_value);
 80099fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009a00:	4818      	ldr	r0, [pc, #96]	; (8009a64 <DRV_updateFromCommands+0x550>)
 8009a02:	f002 f970 	bl	800bce6 <WHL_setPidKd>
        WHL_setPidKd(&g_DRV_context.wheelFrontLeft , l_value);
 8009a06:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009a08:	4817      	ldr	r0, [pc, #92]	; (8009a68 <DRV_updateFromCommands+0x554>)
 8009a0a:	f002 f96c 	bl	800bce6 <WHL_setPidKd>
        WHL_setPidKd(&g_DRV_context.wheelRearRight , l_value);
 8009a0e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009a10:	4816      	ldr	r0, [pc, #88]	; (8009a6c <DRV_updateFromCommands+0x558>)
 8009a12:	f002 f968 	bl	800bce6 <WHL_setPidKd>
        WHL_setPidKd(&g_DRV_context.wheelRearLeft  , l_value);
 8009a16:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009a18:	4815      	ldr	r0, [pc, #84]	; (8009a70 <DRV_updateFromCommands+0x55c>)
 8009a1a:	f002 f964 	bl	800bce6 <WHL_setPidKd>
 8009a1e:	e006      	b.n	8009a2e <DRV_updateFromCommands+0x51a>
      }
      else
      {
        LOG_error("Drive got unsupported command: '%s'", l_command);
 8009a20:	f107 0320 	add.w	r3, r7, #32
 8009a24:	461a      	mov	r2, r3
 8009a26:	4914      	ldr	r1, [pc, #80]	; (8009a78 <DRV_updateFromCommands+0x564>)
 8009a28:	2003      	movs	r0, #3
 8009a2a:	f000 fea1 	bl	800a770 <LOG_log>
      }
    }

    if (g_DRV_context.isPidModeOn == true)
 8009a2e:	4b11      	ldr	r3, [pc, #68]	; (8009a74 <DRV_updateFromCommands+0x560>)
 8009a30:	799b      	ldrb	r3, [r3, #6]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d00b      	beq.n	8009a4e <DRV_updateFromCommands+0x53a>
    {
      /* Update all 4 wheels PIDs, adjusting speeds, to reach targets */
      WHL_updatePidSpeed(&g_DRV_context.wheelFrontRight);
 8009a36:	480b      	ldr	r0, [pc, #44]	; (8009a64 <DRV_updateFromCommands+0x550>)
 8009a38:	f002 f9bc 	bl	800bdb4 <WHL_updatePidSpeed>
      WHL_updatePidSpeed(&g_DRV_context.wheelFrontLeft );
 8009a3c:	480a      	ldr	r0, [pc, #40]	; (8009a68 <DRV_updateFromCommands+0x554>)
 8009a3e:	f002 f9b9 	bl	800bdb4 <WHL_updatePidSpeed>
      WHL_updatePidSpeed(&g_DRV_context.wheelRearRight );
 8009a42:	480a      	ldr	r0, [pc, #40]	; (8009a6c <DRV_updateFromCommands+0x558>)
 8009a44:	f002 f9b6 	bl	800bdb4 <WHL_updatePidSpeed>
      WHL_updatePidSpeed(&g_DRV_context.wheelRearLeft  );
 8009a48:	4809      	ldr	r0, [pc, #36]	; (8009a70 <DRV_updateFromCommands+0x55c>)
 8009a4a:	f002 f9b3 	bl	800bdb4 <WHL_updatePidSpeed>
    else
    {
      /* Nothing to do */
    }

    if (p_logInfo == true)
 8009a4e:	78fb      	ldrb	r3, [r7, #3]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d003      	beq.n	8009a5c <DRV_updateFromCommands+0x548>
    {
      DRV_logInfo(true);
 8009a54:	2001      	movs	r0, #1
 8009a56:	f000 f86d 	bl	8009b34 <DRV_logInfo>
    {
      ; /* Nothing to do */
    }
  }

  return;
 8009a5a:	bf00      	nop
 8009a5c:	bf00      	nop
}
 8009a5e:	373c      	adds	r7, #60	; 0x3c
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd90      	pop	{r4, r7, pc}
 8009a64:	2000025c 	.word	0x2000025c
 8009a68:	20000300 	.word	0x20000300
 8009a6c:	20000448 	.word	0x20000448
 8009a70:	200003a4 	.word	0x200003a4
 8009a74:	20000254 	.word	0x20000254
 8009a78:	08011758 	.word	0x08011758

08009a7c <DRV_reportVelocity>:

void DRV_reportVelocity(void)
{
 8009a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a7e:	b08f      	sub	sp, #60	; 0x3c
 8009a80:	af04      	add	r7, sp, #16
  float l_averageSpeedRearRight;
  float l_averageSpeedRearLeft;
  char  l_buffer[CST_MASTER_VELOCITY_STRING_LENGTH];

  /* Ignore velocity reporting when a manual mode is selected */
  if (g_DRV_context.mode != DRV_MODE_MASTER_BOARD_CONTROL)
 8009a82:	4b21      	ldr	r3, [pc, #132]	; (8009b08 <DRV_reportVelocity+0x8c>)
 8009a84:	79db      	ldrb	r3, [r3, #7]
 8009a86:	2b02      	cmp	r3, #2
 8009a88:	d13a      	bne.n	8009b00 <DRV_reportVelocity+0x84>
  {
    ; /* Nothing to do */
  }
  else
  {
    (void)memset((void *)l_buffer, 0, CST_MASTER_VELOCITY_STRING_LENGTH);
 8009a8a:	463b      	mov	r3, r7
 8009a8c:	2215      	movs	r2, #21
 8009a8e:	2100      	movs	r1, #0
 8009a90:	4618      	mov	r0, r3
 8009a92:	f002 fa3d 	bl	800bf10 <memset>

    l_averageSpeedFrontRight = WHL_getAverageSpeed(&g_DRV_context.wheelFrontRight);
 8009a96:	481d      	ldr	r0, [pc, #116]	; (8009b0c <DRV_reportVelocity+0x90>)
 8009a98:	f002 f9ac 	bl	800bdf4 <WHL_getAverageSpeed>
 8009a9c:	6278      	str	r0, [r7, #36]	; 0x24
    l_averageSpeedFrontLeft  = WHL_getAverageSpeed(&g_DRV_context.wheelFrontLeft );
 8009a9e:	481c      	ldr	r0, [pc, #112]	; (8009b10 <DRV_reportVelocity+0x94>)
 8009aa0:	f002 f9a8 	bl	800bdf4 <WHL_getAverageSpeed>
 8009aa4:	6238      	str	r0, [r7, #32]
    l_averageSpeedRearRight  = WHL_getAverageSpeed(&g_DRV_context.wheelRearRight );
 8009aa6:	481b      	ldr	r0, [pc, #108]	; (8009b14 <DRV_reportVelocity+0x98>)
 8009aa8:	f002 f9a4 	bl	800bdf4 <WHL_getAverageSpeed>
 8009aac:	61f8      	str	r0, [r7, #28]
    l_averageSpeedRearLeft   = WHL_getAverageSpeed(&g_DRV_context.wheelRearLeft  );
 8009aae:	481a      	ldr	r0, [pc, #104]	; (8009b18 <DRV_reportVelocity+0x9c>)
 8009ab0:	f002 f9a0 	bl	800bdf4 <WHL_getAverageSpeed>
 8009ab4:	61b8      	str	r0, [r7, #24]

    (void)snprintf(l_buffer,
 8009ab6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ab8:	f7f7 fb96 	bl	80011e8 <__aeabi_f2iz>
 8009abc:	4606      	mov	r6, r0
 8009abe:	6a38      	ldr	r0, [r7, #32]
 8009ac0:	f7f7 fb92 	bl	80011e8 <__aeabi_f2iz>
 8009ac4:	4604      	mov	r4, r0
 8009ac6:	69f8      	ldr	r0, [r7, #28]
 8009ac8:	f7f7 fb8e 	bl	80011e8 <__aeabi_f2iz>
 8009acc:	4605      	mov	r5, r0
 8009ace:	69b8      	ldr	r0, [r7, #24]
 8009ad0:	f7f7 fb8a 	bl	80011e8 <__aeabi_f2iz>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	4638      	mov	r0, r7
 8009ad8:	9302      	str	r3, [sp, #8]
 8009ada:	9501      	str	r5, [sp, #4]
 8009adc:	9400      	str	r4, [sp, #0]
 8009ade:	4633      	mov	r3, r6
 8009ae0:	4a0e      	ldr	r2, [pc, #56]	; (8009b1c <DRV_reportVelocity+0xa0>)
 8009ae2:	2115      	movs	r1, #21
 8009ae4:	f003 f960 	bl	800cda8 <sniprintf>
              (int)l_averageSpeedFrontRight,
              (int)l_averageSpeedFrontLeft ,
              (int)l_averageSpeedRearRight ,
              (int)l_averageSpeedRearLeft  );

    MAS_sendString(l_buffer, strnlen(l_buffer, CST_MASTER_VELOCITY_STRING_LENGTH));
 8009ae8:	463b      	mov	r3, r7
 8009aea:	2115      	movs	r1, #21
 8009aec:	4618      	mov	r0, r3
 8009aee:	f003 fa31 	bl	800cf54 <strnlen>
 8009af2:	4602      	mov	r2, r0
 8009af4:	463b      	mov	r3, r7
 8009af6:	4611      	mov	r1, r2
 8009af8:	4618      	mov	r0, r3
 8009afa:	f000 ff19 	bl	800a930 <MAS_sendString>
  }

  return;
 8009afe:	bf00      	nop
 8009b00:	bf00      	nop
}
 8009b02:	372c      	adds	r7, #44	; 0x2c
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b08:	20000254 	.word	0x20000254
 8009b0c:	2000025c 	.word	0x2000025c
 8009b10:	20000300 	.word	0x20000300
 8009b14:	20000448 	.word	0x20000448
 8009b18:	200003a4 	.word	0x200003a4
 8009b1c:	0801177c 	.word	0x0801177c

08009b20 <DRV_getMode>:

T_DRV_MODE DRV_getMode(void)
{
 8009b20:	b480      	push	{r7}
 8009b22:	af00      	add	r7, sp, #0
  return g_DRV_context.mode;
 8009b24:	4b02      	ldr	r3, [pc, #8]	; (8009b30 <DRV_getMode+0x10>)
 8009b26:	79db      	ldrb	r3, [r3, #7]
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bc80      	pop	{r7}
 8009b2e:	4770      	bx	lr
 8009b30:	20000254 	.word	0x20000254

08009b34 <DRV_logInfo>:

void DRV_logInfo(bool p_compactLog)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b082      	sub	sp, #8
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	71fb      	strb	r3, [r7, #7]
  if (g_DRV_context.mode == DRV_MODE_MANUAL_FIXED_SPEED)
 8009b3e:	4b1f      	ldr	r3, [pc, #124]	; (8009bbc <DRV_logInfo+0x88>)
 8009b40:	79db      	ldrb	r3, [r3, #7]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d104      	bne.n	8009b50 <DRV_logInfo+0x1c>
  {
    LOG_info("Drive mode  : MANUAL FIXED SPEED");
 8009b46:	491e      	ldr	r1, [pc, #120]	; (8009bc0 <DRV_logInfo+0x8c>)
 8009b48:	2001      	movs	r0, #1
 8009b4a:	f000 fe11 	bl	800a770 <LOG_log>
 8009b4e:	e018      	b.n	8009b82 <DRV_logInfo+0x4e>
  }
  else if (g_DRV_context.mode == DRV_MODE_MANUAL_VARIABLE_SPEED)
 8009b50:	4b1a      	ldr	r3, [pc, #104]	; (8009bbc <DRV_logInfo+0x88>)
 8009b52:	79db      	ldrb	r3, [r3, #7]
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	d104      	bne.n	8009b62 <DRV_logInfo+0x2e>
  {
    LOG_info("Drive mode  : MANUAL VARIABLE SPEED");
 8009b58:	491a      	ldr	r1, [pc, #104]	; (8009bc4 <DRV_logInfo+0x90>)
 8009b5a:	2001      	movs	r0, #1
 8009b5c:	f000 fe08 	bl	800a770 <LOG_log>
 8009b60:	e00f      	b.n	8009b82 <DRV_logInfo+0x4e>
  }
  else if (g_DRV_context.mode == DRV_MODE_MASTER_BOARD_CONTROL)
 8009b62:	4b16      	ldr	r3, [pc, #88]	; (8009bbc <DRV_logInfo+0x88>)
 8009b64:	79db      	ldrb	r3, [r3, #7]
 8009b66:	2b02      	cmp	r3, #2
 8009b68:	d104      	bne.n	8009b74 <DRV_logInfo+0x40>
  {
    LOG_info("Drive mode  : MASTER BOARD CONTROL");
 8009b6a:	4917      	ldr	r1, [pc, #92]	; (8009bc8 <DRV_logInfo+0x94>)
 8009b6c:	2001      	movs	r0, #1
 8009b6e:	f000 fdff 	bl	800a770 <LOG_log>
 8009b72:	e006      	b.n	8009b82 <DRV_logInfo+0x4e>
  }
  else
  {
    LOG_error("Unsupported drive mode: %u", g_DRV_context.mode);
 8009b74:	4b11      	ldr	r3, [pc, #68]	; (8009bbc <DRV_logInfo+0x88>)
 8009b76:	79db      	ldrb	r3, [r3, #7]
 8009b78:	461a      	mov	r2, r3
 8009b7a:	4914      	ldr	r1, [pc, #80]	; (8009bcc <DRV_logInfo+0x98>)
 8009b7c:	2003      	movs	r0, #3
 8009b7e:	f000 fdf7 	bl	800a770 <LOG_log>
  }

  if (g_DRV_context.areMotorsOn == true)
 8009b82:	4b0e      	ldr	r3, [pc, #56]	; (8009bbc <DRV_logInfo+0x88>)
 8009b84:	795b      	ldrb	r3, [r3, #5]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d004      	beq.n	8009b94 <DRV_logInfo+0x60>
  {
    LOG_info("Drive motors: ON");
 8009b8a:	4911      	ldr	r1, [pc, #68]	; (8009bd0 <DRV_logInfo+0x9c>)
 8009b8c:	2001      	movs	r0, #1
 8009b8e:	f000 fdef 	bl	800a770 <LOG_log>
 8009b92:	e003      	b.n	8009b9c <DRV_logInfo+0x68>
  }
  else
  {
    LOG_info("Drive motors: OFF");
 8009b94:	490f      	ldr	r1, [pc, #60]	; (8009bd4 <DRV_logInfo+0xa0>)
 8009b96:	2001      	movs	r0, #1
 8009b98:	f000 fdea 	bl	800a770 <LOG_log>
  }

  WHL_logInfo(&g_DRV_context.wheelFrontRight);
 8009b9c:	480e      	ldr	r0, [pc, #56]	; (8009bd8 <DRV_logInfo+0xa4>)
 8009b9e:	f002 f935 	bl	800be0c <WHL_logInfo>
  WHL_logInfo(&g_DRV_context.wheelFrontLeft );
 8009ba2:	480e      	ldr	r0, [pc, #56]	; (8009bdc <DRV_logInfo+0xa8>)
 8009ba4:	f002 f932 	bl	800be0c <WHL_logInfo>
  WHL_logInfo(&g_DRV_context.wheelRearRight );
 8009ba8:	480d      	ldr	r0, [pc, #52]	; (8009be0 <DRV_logInfo+0xac>)
 8009baa:	f002 f92f 	bl	800be0c <WHL_logInfo>
  WHL_logInfo(&g_DRV_context.wheelRearLeft  );
 8009bae:	480d      	ldr	r0, [pc, #52]	; (8009be4 <DRV_logInfo+0xb0>)
 8009bb0:	f002 f92c 	bl	800be0c <WHL_logInfo>

  return;
 8009bb4:	bf00      	nop
}
 8009bb6:	3708      	adds	r7, #8
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	20000254 	.word	0x20000254
 8009bc0:	08011790 	.word	0x08011790
 8009bc4:	080117b4 	.word	0x080117b4
 8009bc8:	080117d8 	.word	0x080117d8
 8009bcc:	080117fc 	.word	0x080117fc
 8009bd0:	08011818 	.word	0x08011818
 8009bd4:	0801182c 	.word	0x0801182c
 8009bd8:	2000025c 	.word	0x2000025c
 8009bdc:	20000300 	.word	0x20000300
 8009be0:	20000448 	.word	0x20000448
 8009be4:	200003a4 	.word	0x200003a4

08009be8 <DRV_getSpeedFromCommand>:

static void DRV_getSpeedFromCommand(char *p_string, uint32_t *p_speed)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b086      	sub	sp, #24
 8009bec:	af02      	add	r7, sp, #8
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	6039      	str	r1, [r7, #0]
  uint32_t l_speed;

  l_speed = atoi(p_string);
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f002 f94d 	bl	800be92 <atoi>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	60fb      	str	r3, [r7, #12]

  /* Check that speed is in allowed range */
  if ((l_speed < STP_MASTER_MIN_SPEED) || (l_speed > STP_MASTER_MAX_SPEED))
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2b19      	cmp	r3, #25
 8009c00:	d905      	bls.n	8009c0e <DRV_getSpeedFromCommand+0x26>
  {
    LOG_error("Drive got out of range speed: %u", l_speed);
 8009c02:	68fa      	ldr	r2, [r7, #12]
 8009c04:	490b      	ldr	r1, [pc, #44]	; (8009c34 <DRV_getSpeedFromCommand+0x4c>)
 8009c06:	2003      	movs	r0, #3
 8009c08:	f000 fdb2 	bl	800a770 <LOG_log>
                                     STP_DRIVE_MIN_SPEED,
                                     STP_DRIVE_MAX_SPEED,
                                     false);
  }

  return;
 8009c0c:	e00e      	b.n	8009c2c <DRV_getSpeedFromCommand+0x44>
    *p_speed = UTI_normalizeIntValue(l_speed ,
 8009c0e:	68f8      	ldr	r0, [r7, #12]
 8009c10:	2300      	movs	r3, #0
 8009c12:	9301      	str	r3, [sp, #4]
 8009c14:	2328      	movs	r3, #40	; 0x28
 8009c16:	9300      	str	r3, [sp, #0]
 8009c18:	2300      	movs	r3, #0
 8009c1a:	2219      	movs	r2, #25
 8009c1c:	2100      	movs	r1, #0
 8009c1e:	f001 ff06 	bl	800ba2e <UTI_normalizeIntValue>
 8009c22:	4603      	mov	r3, r0
 8009c24:	461a      	mov	r2, r3
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	601a      	str	r2, [r3, #0]
  return;
 8009c2a:	bf00      	nop
}
 8009c2c:	3710      	adds	r7, #16
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
 8009c32:	bf00      	nop
 8009c34:	08011840 	.word	0x08011840

08009c38 <DRV_getSpeedsFromCommand>:
static void DRV_getSpeedsFromCommand(char    *p_string,
                                     int32_t *p_frontRightSpeed,
                                     int32_t *p_frontLeftSpeed,
                                     int32_t *p_rearRightSpeed,
                                     int32_t *p_rearLeftSpeed)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b08a      	sub	sp, #40	; 0x28
 8009c3c:	af02      	add	r7, sp, #8
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	60b9      	str	r1, [r7, #8]
 8009c42:	607a      	str	r2, [r7, #4]
 8009c44:	603b      	str	r3, [r7, #0]
  int32_t l_frontRightSpeed = 0;
 8009c46:	2300      	movs	r3, #0
 8009c48:	61fb      	str	r3, [r7, #28]
  int32_t l_frontLeftSpeed  = 0;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	61bb      	str	r3, [r7, #24]
  int32_t l_rearRightSpeed  = 0;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	617b      	str	r3, [r7, #20]
  int32_t l_rearLeftSpeed   = 0;
 8009c52:	2300      	movs	r3, #0
 8009c54:	613b      	str	r3, [r7, #16]

  *p_frontRightSpeed = 0;
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	601a      	str	r2, [r3, #0]
  *p_frontLeftSpeed  = 0;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	601a      	str	r2, [r3, #0]
  *p_rearRightSpeed  = 0;
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	2200      	movs	r2, #0
 8009c66:	601a      	str	r2, [r3, #0]
  *p_rearLeftSpeed   = 0;
 8009c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	601a      	str	r2, [r3, #0]

  (void)sscanf(p_string,
 8009c6e:	f107 0118 	add.w	r1, r7, #24
 8009c72:	f107 021c 	add.w	r2, r7, #28
 8009c76:	f107 0310 	add.w	r3, r7, #16
 8009c7a:	9301      	str	r3, [sp, #4]
 8009c7c:	f107 0314 	add.w	r3, r7, #20
 8009c80:	9300      	str	r3, [sp, #0]
 8009c82:	460b      	mov	r3, r1
 8009c84:	4959      	ldr	r1, [pc, #356]	; (8009dec <DRV_getSpeedsFromCommand+0x1b4>)
 8009c86:	68f8      	ldr	r0, [r7, #12]
 8009c88:	f003 f8e2 	bl	800ce50 <siscanf>
               &l_frontLeftSpeed,
               &l_rearRightSpeed,
               &l_rearLeftSpeed);

  /* Make sure that all speed is in allowed range */
  l_frontRightSpeed = UTI_clampIntValue(l_frontRightSpeed, -STP_MASTER_MAX_SPEED, STP_MASTER_MAX_SPEED, true, 0);
 8009c8c:	69f8      	ldr	r0, [r7, #28]
 8009c8e:	2300      	movs	r3, #0
 8009c90:	9300      	str	r3, [sp, #0]
 8009c92:	2301      	movs	r3, #1
 8009c94:	2219      	movs	r2, #25
 8009c96:	f06f 0118 	mvn.w	r1, #24
 8009c9a:	f001 fe73 	bl	800b984 <UTI_clampIntValue>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	61fb      	str	r3, [r7, #28]
  l_frontLeftSpeed  = UTI_clampIntValue(l_frontLeftSpeed , -STP_MASTER_MAX_SPEED, STP_MASTER_MAX_SPEED, true, 0);
 8009ca2:	69b8      	ldr	r0, [r7, #24]
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	9300      	str	r3, [sp, #0]
 8009ca8:	2301      	movs	r3, #1
 8009caa:	2219      	movs	r2, #25
 8009cac:	f06f 0118 	mvn.w	r1, #24
 8009cb0:	f001 fe68 	bl	800b984 <UTI_clampIntValue>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	61bb      	str	r3, [r7, #24]
  l_rearRightSpeed  = UTI_clampIntValue(l_rearRightSpeed , -STP_MASTER_MAX_SPEED, STP_MASTER_MAX_SPEED, true, 0);
 8009cb8:	6978      	ldr	r0, [r7, #20]
 8009cba:	2300      	movs	r3, #0
 8009cbc:	9300      	str	r3, [sp, #0]
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	2219      	movs	r2, #25
 8009cc2:	f06f 0118 	mvn.w	r1, #24
 8009cc6:	f001 fe5d 	bl	800b984 <UTI_clampIntValue>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	617b      	str	r3, [r7, #20]
  l_rearLeftSpeed   = UTI_clampIntValue(l_rearLeftSpeed  , -STP_MASTER_MAX_SPEED, STP_MASTER_MAX_SPEED, true, 0);
 8009cce:	6938      	ldr	r0, [r7, #16]
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	9300      	str	r3, [sp, #0]
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	2219      	movs	r2, #25
 8009cd8:	f06f 0118 	mvn.w	r1, #24
 8009cdc:	f001 fe52 	bl	800b984 <UTI_clampIntValue>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	613b      	str	r3, [r7, #16]

  if ((l_frontRightSpeed < -STP_MASTER_MAX_SPEED) || (l_frontRightSpeed > STP_MASTER_MAX_SPEED)
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	f113 0f19 	cmn.w	r3, #25
 8009cea:	db17      	blt.n	8009d1c <DRV_getSpeedsFromCommand+0xe4>
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	2b19      	cmp	r3, #25
 8009cf0:	dc14      	bgt.n	8009d1c <DRV_getSpeedsFromCommand+0xe4>
   || (l_frontLeftSpeed  < -STP_MASTER_MAX_SPEED) || (l_frontLeftSpeed  > STP_MASTER_MAX_SPEED)
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	f113 0f19 	cmn.w	r3, #25
 8009cf8:	db10      	blt.n	8009d1c <DRV_getSpeedsFromCommand+0xe4>
 8009cfa:	69bb      	ldr	r3, [r7, #24]
 8009cfc:	2b19      	cmp	r3, #25
 8009cfe:	dc0d      	bgt.n	8009d1c <DRV_getSpeedsFromCommand+0xe4>
   || (l_rearRightSpeed  < -STP_MASTER_MAX_SPEED) || (l_rearRightSpeed  > STP_MASTER_MAX_SPEED)
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	f113 0f19 	cmn.w	r3, #25
 8009d06:	db09      	blt.n	8009d1c <DRV_getSpeedsFromCommand+0xe4>
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	2b19      	cmp	r3, #25
 8009d0c:	dc06      	bgt.n	8009d1c <DRV_getSpeedsFromCommand+0xe4>
   || (l_rearLeftSpeed   < -STP_MASTER_MAX_SPEED) || (l_rearLeftSpeed   > STP_MASTER_MAX_SPEED))
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	f113 0f19 	cmn.w	r3, #25
 8009d14:	db02      	blt.n	8009d1c <DRV_getSpeedsFromCommand+0xe4>
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	2b19      	cmp	r3, #25
 8009d1a:	dd0b      	ble.n	8009d34 <DRV_getSpeedsFromCommand+0xfc>
  {
    LOG_error("Got out of range speed(s) / clamped speed(s): %d %d %d %d",
 8009d1c:	69f9      	ldr	r1, [r7, #28]
 8009d1e:	69b8      	ldr	r0, [r7, #24]
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	693a      	ldr	r2, [r7, #16]
 8009d24:	9201      	str	r2, [sp, #4]
 8009d26:	9300      	str	r3, [sp, #0]
 8009d28:	4603      	mov	r3, r0
 8009d2a:	460a      	mov	r2, r1
 8009d2c:	4930      	ldr	r1, [pc, #192]	; (8009df0 <DRV_getSpeedsFromCommand+0x1b8>)
 8009d2e:	2003      	movs	r0, #3
 8009d30:	f000 fd1e 	bl	800a770 <LOG_log>
  else
  {
    /* Nothing to do */
  }

  *p_frontRightSpeed = UTI_normalizeIntValue(abs(l_frontRightSpeed),
 8009d34:	69fb      	ldr	r3, [r7, #28]
 8009d36:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 8009d3a:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8009d3e:	69fb      	ldr	r3, [r7, #28]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	bfd4      	ite	le
 8009d44:	2301      	movle	r3, #1
 8009d46:	2300      	movgt	r3, #0
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	9301      	str	r3, [sp, #4]
 8009d4c:	2328      	movs	r3, #40	; 0x28
 8009d4e:	9300      	str	r3, [sp, #0]
 8009d50:	2300      	movs	r3, #0
 8009d52:	2219      	movs	r2, #25
 8009d54:	2100      	movs	r1, #0
 8009d56:	f001 fe6a 	bl	800ba2e <UTI_normalizeIntValue>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	601a      	str	r2, [r3, #0]
                                             STP_MASTER_MAX_SPEED,
                                             STP_DRIVE_MIN_SPEED,
                                             STP_DRIVE_MAX_SPEED,
                                             l_frontRightSpeed > 0 ? false : true);

  *p_frontLeftSpeed  = UTI_normalizeIntValue(abs(l_frontLeftSpeed),
 8009d60:	69bb      	ldr	r3, [r7, #24]
 8009d62:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 8009d66:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8009d6a:	69bb      	ldr	r3, [r7, #24]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	bfd4      	ite	le
 8009d70:	2301      	movle	r3, #1
 8009d72:	2300      	movgt	r3, #0
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	9301      	str	r3, [sp, #4]
 8009d78:	2328      	movs	r3, #40	; 0x28
 8009d7a:	9300      	str	r3, [sp, #0]
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	2219      	movs	r2, #25
 8009d80:	2100      	movs	r1, #0
 8009d82:	f001 fe54 	bl	800ba2e <UTI_normalizeIntValue>
 8009d86:	4602      	mov	r2, r0
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	601a      	str	r2, [r3, #0]
                                             STP_MASTER_MAX_SPEED,
                                             STP_DRIVE_MIN_SPEED,
                                             STP_DRIVE_MAX_SPEED,
                                             l_frontLeftSpeed > 0 ? false : true);

  *p_rearRightSpeed  = UTI_normalizeIntValue(abs(l_rearRightSpeed),
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 8009d92:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	bfd4      	ite	le
 8009d9c:	2301      	movle	r3, #1
 8009d9e:	2300      	movgt	r3, #0
 8009da0:	b2db      	uxtb	r3, r3
 8009da2:	9301      	str	r3, [sp, #4]
 8009da4:	2328      	movs	r3, #40	; 0x28
 8009da6:	9300      	str	r3, [sp, #0]
 8009da8:	2300      	movs	r3, #0
 8009daa:	2219      	movs	r2, #25
 8009dac:	2100      	movs	r1, #0
 8009dae:	f001 fe3e 	bl	800ba2e <UTI_normalizeIntValue>
 8009db2:	4602      	mov	r2, r0
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	601a      	str	r2, [r3, #0]
                                             STP_MASTER_MAX_SPEED,
                                             STP_DRIVE_MIN_SPEED,
                                             STP_DRIVE_MAX_SPEED,
                                             l_rearRightSpeed > 0 ? false : true);

  *p_rearLeftSpeed   = UTI_normalizeIntValue(abs(l_rearLeftSpeed),
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 8009dbe:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	bfd4      	ite	le
 8009dc8:	2301      	movle	r3, #1
 8009dca:	2300      	movgt	r3, #0
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	9301      	str	r3, [sp, #4]
 8009dd0:	2328      	movs	r3, #40	; 0x28
 8009dd2:	9300      	str	r3, [sp, #0]
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	2219      	movs	r2, #25
 8009dd8:	2100      	movs	r1, #0
 8009dda:	f001 fe28 	bl	800ba2e <UTI_normalizeIntValue>
 8009dde:	4602      	mov	r2, r0
 8009de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de2:	601a      	str	r2, [r3, #0]
                                             STP_MASTER_MAX_SPEED,
                                             STP_DRIVE_MIN_SPEED,
                                             STP_DRIVE_MAX_SPEED,
                                             l_rearLeftSpeed > 0 ? false : true);

  return;
 8009de4:	bf00      	nop
}
 8009de6:	3720      	adds	r7, #32
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	08011864 	.word	0x08011864
 8009df0:	08011874 	.word	0x08011874

08009df4 <DRV_toggleMotorsState>:

static void DRV_toggleMotorsState(void)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	af00      	add	r7, sp, #0
  if (g_DRV_context.areMotorsOn == false)
 8009df8:	4b17      	ldr	r3, [pc, #92]	; (8009e58 <DRV_toggleMotorsState+0x64>)
 8009dfa:	795b      	ldrb	r3, [r3, #5]
 8009dfc:	f083 0301 	eor.w	r3, r3, #1
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d013      	beq.n	8009e2e <DRV_toggleMotorsState+0x3a>
  {
    LOG_info("Drive turning motor ON");
 8009e06:	4915      	ldr	r1, [pc, #84]	; (8009e5c <DRV_toggleMotorsState+0x68>)
 8009e08:	2001      	movs	r0, #1
 8009e0a:	f000 fcb1 	bl	800a770 <LOG_log>

    WHL_turnMotorOn(&g_DRV_context.wheelFrontRight);
 8009e0e:	4814      	ldr	r0, [pc, #80]	; (8009e60 <DRV_toggleMotorsState+0x6c>)
 8009e10:	f001 fef6 	bl	800bc00 <WHL_turnMotorOn>
    WHL_turnMotorOn(&g_DRV_context.wheelFrontLeft );
 8009e14:	4813      	ldr	r0, [pc, #76]	; (8009e64 <DRV_toggleMotorsState+0x70>)
 8009e16:	f001 fef3 	bl	800bc00 <WHL_turnMotorOn>
    WHL_turnMotorOn(&g_DRV_context.wheelRearRight );
 8009e1a:	4813      	ldr	r0, [pc, #76]	; (8009e68 <DRV_toggleMotorsState+0x74>)
 8009e1c:	f001 fef0 	bl	800bc00 <WHL_turnMotorOn>
    WHL_turnMotorOn(&g_DRV_context.wheelRearLeft  );
 8009e20:	4812      	ldr	r0, [pc, #72]	; (8009e6c <DRV_toggleMotorsState+0x78>)
 8009e22:	f001 feed 	bl	800bc00 <WHL_turnMotorOn>

    g_DRV_context.areMotorsOn = true;
 8009e26:	4b0c      	ldr	r3, [pc, #48]	; (8009e58 <DRV_toggleMotorsState+0x64>)
 8009e28:	2201      	movs	r2, #1
 8009e2a:	715a      	strb	r2, [r3, #5]
    WHL_turnMotorOff(&g_DRV_context.wheelRearLeft  );

    g_DRV_context.areMotorsOn = false;
  }

  return;
 8009e2c:	e013      	b.n	8009e56 <DRV_toggleMotorsState+0x62>
    LOG_info("Drive turning motor OFF");
 8009e2e:	4910      	ldr	r1, [pc, #64]	; (8009e70 <DRV_toggleMotorsState+0x7c>)
 8009e30:	2001      	movs	r0, #1
 8009e32:	f000 fc9d 	bl	800a770 <LOG_log>
    WHL_turnMotorOff(&g_DRV_context.wheelFrontRight);
 8009e36:	480a      	ldr	r0, [pc, #40]	; (8009e60 <DRV_toggleMotorsState+0x6c>)
 8009e38:	f001 feef 	bl	800bc1a <WHL_turnMotorOff>
    WHL_turnMotorOff(&g_DRV_context.wheelFrontLeft );
 8009e3c:	4809      	ldr	r0, [pc, #36]	; (8009e64 <DRV_toggleMotorsState+0x70>)
 8009e3e:	f001 feec 	bl	800bc1a <WHL_turnMotorOff>
    WHL_turnMotorOff(&g_DRV_context.wheelRearRight );
 8009e42:	4809      	ldr	r0, [pc, #36]	; (8009e68 <DRV_toggleMotorsState+0x74>)
 8009e44:	f001 fee9 	bl	800bc1a <WHL_turnMotorOff>
    WHL_turnMotorOff(&g_DRV_context.wheelRearLeft  );
 8009e48:	4808      	ldr	r0, [pc, #32]	; (8009e6c <DRV_toggleMotorsState+0x78>)
 8009e4a:	f001 fee6 	bl	800bc1a <WHL_turnMotorOff>
    g_DRV_context.areMotorsOn = false;
 8009e4e:	4b02      	ldr	r3, [pc, #8]	; (8009e58 <DRV_toggleMotorsState+0x64>)
 8009e50:	2200      	movs	r2, #0
 8009e52:	715a      	strb	r2, [r3, #5]
  return;
 8009e54:	bf00      	nop
}
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	20000254 	.word	0x20000254
 8009e5c:	080118b0 	.word	0x080118b0
 8009e60:	2000025c 	.word	0x2000025c
 8009e64:	20000300 	.word	0x20000300
 8009e68:	20000448 	.word	0x20000448
 8009e6c:	200003a4 	.word	0x200003a4
 8009e70:	080118c8 	.word	0x080118c8

08009e74 <DRV_setDirectionsStop>:

static void DRV_setDirectionsStop(void)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	af00      	add	r7, sp, #0
  WHL_setDirection(&g_DRV_context.wheelFrontRight, MTR_DIRECTION_STOP);
 8009e78:	2100      	movs	r1, #0
 8009e7a:	4808      	ldr	r0, [pc, #32]	; (8009e9c <DRV_setDirectionsStop+0x28>)
 8009e7c:	f001 feef 	bl	800bc5e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelFrontLeft , MTR_DIRECTION_STOP);
 8009e80:	2100      	movs	r1, #0
 8009e82:	4807      	ldr	r0, [pc, #28]	; (8009ea0 <DRV_setDirectionsStop+0x2c>)
 8009e84:	f001 feeb 	bl	800bc5e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearRight , MTR_DIRECTION_STOP);
 8009e88:	2100      	movs	r1, #0
 8009e8a:	4806      	ldr	r0, [pc, #24]	; (8009ea4 <DRV_setDirectionsStop+0x30>)
 8009e8c:	f001 fee7 	bl	800bc5e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearLeft  , MTR_DIRECTION_STOP);
 8009e90:	2100      	movs	r1, #0
 8009e92:	4805      	ldr	r0, [pc, #20]	; (8009ea8 <DRV_setDirectionsStop+0x34>)
 8009e94:	f001 fee3 	bl	800bc5e <WHL_setDirection>

  return;
 8009e98:	bf00      	nop
}
 8009e9a:	bd80      	pop	{r7, pc}
 8009e9c:	2000025c 	.word	0x2000025c
 8009ea0:	20000300 	.word	0x20000300
 8009ea4:	20000448 	.word	0x20000448
 8009ea8:	200003a4 	.word	0x200003a4

08009eac <DRV_setDirectionsForward>:

static void DRV_setDirectionsForward(void)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	af00      	add	r7, sp, #0
  WHL_setDirection(&g_DRV_context.wheelFrontRight, MTR_DIRECTION_FORWARD);
 8009eb0:	2101      	movs	r1, #1
 8009eb2:	4808      	ldr	r0, [pc, #32]	; (8009ed4 <DRV_setDirectionsForward+0x28>)
 8009eb4:	f001 fed3 	bl	800bc5e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelFrontLeft , MTR_DIRECTION_FORWARD);
 8009eb8:	2101      	movs	r1, #1
 8009eba:	4807      	ldr	r0, [pc, #28]	; (8009ed8 <DRV_setDirectionsForward+0x2c>)
 8009ebc:	f001 fecf 	bl	800bc5e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearRight , MTR_DIRECTION_FORWARD);
 8009ec0:	2101      	movs	r1, #1
 8009ec2:	4806      	ldr	r0, [pc, #24]	; (8009edc <DRV_setDirectionsForward+0x30>)
 8009ec4:	f001 fecb 	bl	800bc5e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearLeft  , MTR_DIRECTION_FORWARD);
 8009ec8:	2101      	movs	r1, #1
 8009eca:	4805      	ldr	r0, [pc, #20]	; (8009ee0 <DRV_setDirectionsForward+0x34>)
 8009ecc:	f001 fec7 	bl	800bc5e <WHL_setDirection>

  return;
 8009ed0:	bf00      	nop
}
 8009ed2:	bd80      	pop	{r7, pc}
 8009ed4:	2000025c 	.word	0x2000025c
 8009ed8:	20000300 	.word	0x20000300
 8009edc:	20000448 	.word	0x20000448
 8009ee0:	200003a4 	.word	0x200003a4

08009ee4 <DRV_setDirectionsBackward>:

static void DRV_setDirectionsBackward(void)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	af00      	add	r7, sp, #0
  WHL_setDirection(&g_DRV_context.wheelFrontRight, MTR_DIRECTION_BACKWARD);
 8009ee8:	2102      	movs	r1, #2
 8009eea:	4808      	ldr	r0, [pc, #32]	; (8009f0c <DRV_setDirectionsBackward+0x28>)
 8009eec:	f001 feb7 	bl	800bc5e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelFrontLeft , MTR_DIRECTION_BACKWARD);
 8009ef0:	2102      	movs	r1, #2
 8009ef2:	4807      	ldr	r0, [pc, #28]	; (8009f10 <DRV_setDirectionsBackward+0x2c>)
 8009ef4:	f001 feb3 	bl	800bc5e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearRight , MTR_DIRECTION_BACKWARD);
 8009ef8:	2102      	movs	r1, #2
 8009efa:	4806      	ldr	r0, [pc, #24]	; (8009f14 <DRV_setDirectionsBackward+0x30>)
 8009efc:	f001 feaf 	bl	800bc5e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearLeft  , MTR_DIRECTION_BACKWARD);
 8009f00:	2102      	movs	r1, #2
 8009f02:	4805      	ldr	r0, [pc, #20]	; (8009f18 <DRV_setDirectionsBackward+0x34>)
 8009f04:	f001 feab 	bl	800bc5e <WHL_setDirection>

  return;
 8009f08:	bf00      	nop
}
 8009f0a:	bd80      	pop	{r7, pc}
 8009f0c:	2000025c 	.word	0x2000025c
 8009f10:	20000300 	.word	0x20000300
 8009f14:	20000448 	.word	0x20000448
 8009f18:	200003a4 	.word	0x200003a4

08009f1c <DRV_setDirectionsForwardRight>:

static void DRV_setDirectionsForwardRight(void)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	af00      	add	r7, sp, #0
  WHL_setDirection(&g_DRV_context.wheelFrontLeft, MTR_DIRECTION_FORWARD);
 8009f20:	2101      	movs	r1, #1
 8009f22:	4804      	ldr	r0, [pc, #16]	; (8009f34 <DRV_setDirectionsForwardRight+0x18>)
 8009f24:	f001 fe9b 	bl	800bc5e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearRight, MTR_DIRECTION_FORWARD);
 8009f28:	2101      	movs	r1, #1
 8009f2a:	4803      	ldr	r0, [pc, #12]	; (8009f38 <DRV_setDirectionsForwardRight+0x1c>)
 8009f2c:	f001 fe97 	bl	800bc5e <WHL_setDirection>

  return;
 8009f30:	bf00      	nop
}
 8009f32:	bd80      	pop	{r7, pc}
 8009f34:	20000300 	.word	0x20000300
 8009f38:	20000448 	.word	0x20000448

08009f3c <DRV_setDirectionsForwardLeft>:

static void DRV_setDirectionsForwardLeft(void)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	af00      	add	r7, sp, #0
  WHL_setDirection(&g_DRV_context.wheelFrontRight, MTR_DIRECTION_FORWARD);
 8009f40:	2101      	movs	r1, #1
 8009f42:	4804      	ldr	r0, [pc, #16]	; (8009f54 <DRV_setDirectionsForwardLeft+0x18>)
 8009f44:	f001 fe8b 	bl	800bc5e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearLeft  , MTR_DIRECTION_FORWARD);
 8009f48:	2101      	movs	r1, #1
 8009f4a:	4803      	ldr	r0, [pc, #12]	; (8009f58 <DRV_setDirectionsForwardLeft+0x1c>)
 8009f4c:	f001 fe87 	bl	800bc5e <WHL_setDirection>

  return;
 8009f50:	bf00      	nop
}
 8009f52:	bd80      	pop	{r7, pc}
 8009f54:	2000025c 	.word	0x2000025c
 8009f58:	200003a4 	.word	0x200003a4

08009f5c <DRV_setDirectionsBackwardRight>:

static void DRV_setDirectionsBackwardRight(void)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	af00      	add	r7, sp, #0
  WHL_setDirection(&g_DRV_context.wheelFrontRight, MTR_DIRECTION_BACKWARD);
 8009f60:	2102      	movs	r1, #2
 8009f62:	4804      	ldr	r0, [pc, #16]	; (8009f74 <DRV_setDirectionsBackwardRight+0x18>)
 8009f64:	f001 fe7b 	bl	800bc5e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearLeft  , MTR_DIRECTION_BACKWARD);
 8009f68:	2102      	movs	r1, #2
 8009f6a:	4803      	ldr	r0, [pc, #12]	; (8009f78 <DRV_setDirectionsBackwardRight+0x1c>)
 8009f6c:	f001 fe77 	bl	800bc5e <WHL_setDirection>

  return;
 8009f70:	bf00      	nop
}
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	2000025c 	.word	0x2000025c
 8009f78:	200003a4 	.word	0x200003a4

08009f7c <DRV_setDirectionsBackwardLeft>:

static void DRV_setDirectionsBackwardLeft(void)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	af00      	add	r7, sp, #0
  WHL_setDirection(&g_DRV_context.wheelFrontLeft, MTR_DIRECTION_BACKWARD);
 8009f80:	2102      	movs	r1, #2
 8009f82:	4804      	ldr	r0, [pc, #16]	; (8009f94 <DRV_setDirectionsBackwardLeft+0x18>)
 8009f84:	f001 fe6b 	bl	800bc5e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearRight, MTR_DIRECTION_BACKWARD);
 8009f88:	2102      	movs	r1, #2
 8009f8a:	4803      	ldr	r0, [pc, #12]	; (8009f98 <DRV_setDirectionsBackwardLeft+0x1c>)
 8009f8c:	f001 fe67 	bl	800bc5e <WHL_setDirection>

  return;
 8009f90:	bf00      	nop
}
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	20000300 	.word	0x20000300
 8009f98:	20000448 	.word	0x20000448

08009f9c <DRV_setDirectionsTurnLeft>:

static void DRV_setDirectionsTurnLeft(void)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	af00      	add	r7, sp, #0
  WHL_setDirection(&g_DRV_context.wheelFrontRight, MTR_DIRECTION_FORWARD );
 8009fa0:	2101      	movs	r1, #1
 8009fa2:	4808      	ldr	r0, [pc, #32]	; (8009fc4 <DRV_setDirectionsTurnLeft+0x28>)
 8009fa4:	f001 fe5b 	bl	800bc5e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelFrontLeft , MTR_DIRECTION_BACKWARD);
 8009fa8:	2102      	movs	r1, #2
 8009faa:	4807      	ldr	r0, [pc, #28]	; (8009fc8 <DRV_setDirectionsTurnLeft+0x2c>)
 8009fac:	f001 fe57 	bl	800bc5e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearRight , MTR_DIRECTION_FORWARD );
 8009fb0:	2101      	movs	r1, #1
 8009fb2:	4806      	ldr	r0, [pc, #24]	; (8009fcc <DRV_setDirectionsTurnLeft+0x30>)
 8009fb4:	f001 fe53 	bl	800bc5e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearLeft  , MTR_DIRECTION_BACKWARD);
 8009fb8:	2102      	movs	r1, #2
 8009fba:	4805      	ldr	r0, [pc, #20]	; (8009fd0 <DRV_setDirectionsTurnLeft+0x34>)
 8009fbc:	f001 fe4f 	bl	800bc5e <WHL_setDirection>

  return;
 8009fc0:	bf00      	nop
}
 8009fc2:	bd80      	pop	{r7, pc}
 8009fc4:	2000025c 	.word	0x2000025c
 8009fc8:	20000300 	.word	0x20000300
 8009fcc:	20000448 	.word	0x20000448
 8009fd0:	200003a4 	.word	0x200003a4

08009fd4 <DRV_setDirectionsTurnRight>:

static void DRV_setDirectionsTurnRight(void)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	af00      	add	r7, sp, #0
  WHL_setDirection(&g_DRV_context.wheelFrontRight, MTR_DIRECTION_BACKWARD);
 8009fd8:	2102      	movs	r1, #2
 8009fda:	4808      	ldr	r0, [pc, #32]	; (8009ffc <DRV_setDirectionsTurnRight+0x28>)
 8009fdc:	f001 fe3f 	bl	800bc5e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelFrontLeft , MTR_DIRECTION_FORWARD );
 8009fe0:	2101      	movs	r1, #1
 8009fe2:	4807      	ldr	r0, [pc, #28]	; (800a000 <DRV_setDirectionsTurnRight+0x2c>)
 8009fe4:	f001 fe3b 	bl	800bc5e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearRight , MTR_DIRECTION_BACKWARD);
 8009fe8:	2102      	movs	r1, #2
 8009fea:	4806      	ldr	r0, [pc, #24]	; (800a004 <DRV_setDirectionsTurnRight+0x30>)
 8009fec:	f001 fe37 	bl	800bc5e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearLeft  , MTR_DIRECTION_FORWARD );
 8009ff0:	2101      	movs	r1, #1
 8009ff2:	4805      	ldr	r0, [pc, #20]	; (800a008 <DRV_setDirectionsTurnRight+0x34>)
 8009ff4:	f001 fe33 	bl	800bc5e <WHL_setDirection>

  return;
 8009ff8:	bf00      	nop
}
 8009ffa:	bd80      	pop	{r7, pc}
 8009ffc:	2000025c 	.word	0x2000025c
 800a000:	20000300 	.word	0x20000300
 800a004:	20000448 	.word	0x20000448
 800a008:	200003a4 	.word	0x200003a4

0800a00c <DRV_setDirectionsTranslateLeft>:

static void DRV_setDirectionsTranslateLeft(void)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	af00      	add	r7, sp, #0
  WHL_setDirection(&g_DRV_context.wheelFrontRight, MTR_DIRECTION_FORWARD );
 800a010:	2101      	movs	r1, #1
 800a012:	4808      	ldr	r0, [pc, #32]	; (800a034 <DRV_setDirectionsTranslateLeft+0x28>)
 800a014:	f001 fe23 	bl	800bc5e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelFrontLeft , MTR_DIRECTION_BACKWARD);
 800a018:	2102      	movs	r1, #2
 800a01a:	4807      	ldr	r0, [pc, #28]	; (800a038 <DRV_setDirectionsTranslateLeft+0x2c>)
 800a01c:	f001 fe1f 	bl	800bc5e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearRight , MTR_DIRECTION_BACKWARD);
 800a020:	2102      	movs	r1, #2
 800a022:	4806      	ldr	r0, [pc, #24]	; (800a03c <DRV_setDirectionsTranslateLeft+0x30>)
 800a024:	f001 fe1b 	bl	800bc5e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearLeft  , MTR_DIRECTION_FORWARD );
 800a028:	2101      	movs	r1, #1
 800a02a:	4805      	ldr	r0, [pc, #20]	; (800a040 <DRV_setDirectionsTranslateLeft+0x34>)
 800a02c:	f001 fe17 	bl	800bc5e <WHL_setDirection>

  return;
 800a030:	bf00      	nop
}
 800a032:	bd80      	pop	{r7, pc}
 800a034:	2000025c 	.word	0x2000025c
 800a038:	20000300 	.word	0x20000300
 800a03c:	20000448 	.word	0x20000448
 800a040:	200003a4 	.word	0x200003a4

0800a044 <DRV_setDirectionsTranslateRight>:

static void DRV_setDirectionsTranslateRight(void)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	af00      	add	r7, sp, #0
  WHL_setDirection(&g_DRV_context.wheelFrontRight, MTR_DIRECTION_BACKWARD);
 800a048:	2102      	movs	r1, #2
 800a04a:	4808      	ldr	r0, [pc, #32]	; (800a06c <DRV_setDirectionsTranslateRight+0x28>)
 800a04c:	f001 fe07 	bl	800bc5e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelFrontLeft , MTR_DIRECTION_FORWARD );
 800a050:	2101      	movs	r1, #1
 800a052:	4807      	ldr	r0, [pc, #28]	; (800a070 <DRV_setDirectionsTranslateRight+0x2c>)
 800a054:	f001 fe03 	bl	800bc5e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearRight , MTR_DIRECTION_FORWARD );
 800a058:	2101      	movs	r1, #1
 800a05a:	4806      	ldr	r0, [pc, #24]	; (800a074 <DRV_setDirectionsTranslateRight+0x30>)
 800a05c:	f001 fdff 	bl	800bc5e <WHL_setDirection>
  WHL_setDirection(&g_DRV_context.wheelRearLeft  , MTR_DIRECTION_BACKWARD);
 800a060:	2102      	movs	r1, #2
 800a062:	4805      	ldr	r0, [pc, #20]	; (800a078 <DRV_setDirectionsTranslateRight+0x34>)
 800a064:	f001 fdfb 	bl	800bc5e <WHL_setDirection>

  return;
 800a068:	bf00      	nop
}
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	2000025c 	.word	0x2000025c
 800a070:	20000300 	.word	0x20000300
 800a074:	20000448 	.word	0x20000448
 800a078:	200003a4 	.word	0x200003a4

0800a07c <DRV_setDirectionsCustom>:

static void DRV_setDirectionsCustom(int32_t p_frontRightSpeed,
                                    int32_t p_frontLeftSpeed,
                                    int32_t p_rearRightSpeed,
                                    int32_t p_rearLeftSpeed)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	60b9      	str	r1, [r7, #8]
 800a086:	607a      	str	r2, [r7, #4]
 800a088:	603b      	str	r3, [r7, #0]
  if (p_frontRightSpeed >= 0)
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	db04      	blt.n	800a09a <DRV_setDirectionsCustom+0x1e>
  {
    WHL_setDirection(&g_DRV_context.wheelFrontRight, MTR_DIRECTION_FORWARD);
 800a090:	2101      	movs	r1, #1
 800a092:	4818      	ldr	r0, [pc, #96]	; (800a0f4 <DRV_setDirectionsCustom+0x78>)
 800a094:	f001 fde3 	bl	800bc5e <WHL_setDirection>
 800a098:	e003      	b.n	800a0a2 <DRV_setDirectionsCustom+0x26>
  }
  else
  {
    WHL_setDirection(&g_DRV_context.wheelFrontRight, MTR_DIRECTION_BACKWARD);
 800a09a:	2102      	movs	r1, #2
 800a09c:	4815      	ldr	r0, [pc, #84]	; (800a0f4 <DRV_setDirectionsCustom+0x78>)
 800a09e:	f001 fdde 	bl	800bc5e <WHL_setDirection>
  }

  if (p_frontLeftSpeed >= 0)
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	db04      	blt.n	800a0b2 <DRV_setDirectionsCustom+0x36>
  {
    WHL_setDirection(&g_DRV_context.wheelFrontLeft, MTR_DIRECTION_FORWARD);
 800a0a8:	2101      	movs	r1, #1
 800a0aa:	4813      	ldr	r0, [pc, #76]	; (800a0f8 <DRV_setDirectionsCustom+0x7c>)
 800a0ac:	f001 fdd7 	bl	800bc5e <WHL_setDirection>
 800a0b0:	e003      	b.n	800a0ba <DRV_setDirectionsCustom+0x3e>
  }
  else
  {
    WHL_setDirection(&g_DRV_context.wheelFrontLeft, MTR_DIRECTION_BACKWARD);
 800a0b2:	2102      	movs	r1, #2
 800a0b4:	4810      	ldr	r0, [pc, #64]	; (800a0f8 <DRV_setDirectionsCustom+0x7c>)
 800a0b6:	f001 fdd2 	bl	800bc5e <WHL_setDirection>
  }

  if (p_rearRightSpeed >= 0)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	db04      	blt.n	800a0ca <DRV_setDirectionsCustom+0x4e>
  {
    WHL_setDirection(&g_DRV_context.wheelRearRight, MTR_DIRECTION_FORWARD);
 800a0c0:	2101      	movs	r1, #1
 800a0c2:	480e      	ldr	r0, [pc, #56]	; (800a0fc <DRV_setDirectionsCustom+0x80>)
 800a0c4:	f001 fdcb 	bl	800bc5e <WHL_setDirection>
 800a0c8:	e003      	b.n	800a0d2 <DRV_setDirectionsCustom+0x56>
  }
  else
  {
    WHL_setDirection(&g_DRV_context.wheelRearRight, MTR_DIRECTION_BACKWARD);
 800a0ca:	2102      	movs	r1, #2
 800a0cc:	480b      	ldr	r0, [pc, #44]	; (800a0fc <DRV_setDirectionsCustom+0x80>)
 800a0ce:	f001 fdc6 	bl	800bc5e <WHL_setDirection>
  }

  if (p_rearLeftSpeed >= 0)
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	db04      	blt.n	800a0e2 <DRV_setDirectionsCustom+0x66>
  {
    WHL_setDirection(&g_DRV_context.wheelRearLeft, MTR_DIRECTION_FORWARD);
 800a0d8:	2101      	movs	r1, #1
 800a0da:	4809      	ldr	r0, [pc, #36]	; (800a100 <DRV_setDirectionsCustom+0x84>)
 800a0dc:	f001 fdbf 	bl	800bc5e <WHL_setDirection>
  else
  {
    WHL_setDirection(&g_DRV_context.wheelRearLeft, MTR_DIRECTION_BACKWARD);
  }

  return;
 800a0e0:	e004      	b.n	800a0ec <DRV_setDirectionsCustom+0x70>
    WHL_setDirection(&g_DRV_context.wheelRearLeft, MTR_DIRECTION_BACKWARD);
 800a0e2:	2102      	movs	r1, #2
 800a0e4:	4806      	ldr	r0, [pc, #24]	; (800a100 <DRV_setDirectionsCustom+0x84>)
 800a0e6:	f001 fdba 	bl	800bc5e <WHL_setDirection>
  return;
 800a0ea:	bf00      	nop
}
 800a0ec:	3710      	adds	r7, #16
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	2000025c 	.word	0x2000025c
 800a0f8:	20000300 	.word	0x20000300
 800a0fc:	20000448 	.word	0x20000448
 800a100:	200003a4 	.word	0x200003a4

0800a104 <DRV_stop>:


static void DRV_stop(void)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	af00      	add	r7, sp, #0
  DRV_setDirectionsStop();
 800a108:	f7ff feb4 	bl	8009e74 <DRV_setDirectionsStop>

  WHL_setSpeed(&g_DRV_context.wheelFrontRight, 0);
 800a10c:	2100      	movs	r1, #0
 800a10e:	4808      	ldr	r0, [pc, #32]	; (800a130 <DRV_stop+0x2c>)
 800a110:	f001 fdb6 	bl	800bc80 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelFrontLeft , 0);
 800a114:	2100      	movs	r1, #0
 800a116:	4807      	ldr	r0, [pc, #28]	; (800a134 <DRV_stop+0x30>)
 800a118:	f001 fdb2 	bl	800bc80 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearRight , 0);
 800a11c:	2100      	movs	r1, #0
 800a11e:	4806      	ldr	r0, [pc, #24]	; (800a138 <DRV_stop+0x34>)
 800a120:	f001 fdae 	bl	800bc80 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearLeft  , 0);
 800a124:	2100      	movs	r1, #0
 800a126:	4805      	ldr	r0, [pc, #20]	; (800a13c <DRV_stop+0x38>)
 800a128:	f001 fdaa 	bl	800bc80 <WHL_setSpeed>

  return;
 800a12c:	bf00      	nop
}
 800a12e:	bd80      	pop	{r7, pc}
 800a130:	2000025c 	.word	0x2000025c
 800a134:	20000300 	.word	0x20000300
 800a138:	20000448 	.word	0x20000448
 800a13c:	200003a4 	.word	0x200003a4

0800a140 <DRV_moveForward>:

static void DRV_moveForward(uint32_t p_speed)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b082      	sub	sp, #8
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  LOG_debug("Moving forward @%u", p_speed);
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	490d      	ldr	r1, [pc, #52]	; (800a180 <DRV_moveForward+0x40>)
 800a14c:	2000      	movs	r0, #0
 800a14e:	f000 fb0f 	bl	800a770 <LOG_log>

  DRV_setDirectionsForward();
 800a152:	f7ff feab 	bl	8009eac <DRV_setDirectionsForward>

  WHL_setSpeed(&g_DRV_context.wheelFrontRight, p_speed);
 800a156:	6879      	ldr	r1, [r7, #4]
 800a158:	480a      	ldr	r0, [pc, #40]	; (800a184 <DRV_moveForward+0x44>)
 800a15a:	f001 fd91 	bl	800bc80 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelFrontLeft , p_speed);
 800a15e:	6879      	ldr	r1, [r7, #4]
 800a160:	4809      	ldr	r0, [pc, #36]	; (800a188 <DRV_moveForward+0x48>)
 800a162:	f001 fd8d 	bl	800bc80 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearRight , p_speed);
 800a166:	6879      	ldr	r1, [r7, #4]
 800a168:	4808      	ldr	r0, [pc, #32]	; (800a18c <DRV_moveForward+0x4c>)
 800a16a:	f001 fd89 	bl	800bc80 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearLeft  , p_speed);
 800a16e:	6879      	ldr	r1, [r7, #4]
 800a170:	4807      	ldr	r0, [pc, #28]	; (800a190 <DRV_moveForward+0x50>)
 800a172:	f001 fd85 	bl	800bc80 <WHL_setSpeed>

  return;
 800a176:	bf00      	nop
}
 800a178:	3708      	adds	r7, #8
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
 800a17e:	bf00      	nop
 800a180:	080118e0 	.word	0x080118e0
 800a184:	2000025c 	.word	0x2000025c
 800a188:	20000300 	.word	0x20000300
 800a18c:	20000448 	.word	0x20000448
 800a190:	200003a4 	.word	0x200003a4

0800a194 <DRV_moveBackward>:

static void DRV_moveBackward(uint32_t p_speed)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  LOG_debug("Moving backward @%u", p_speed);
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	490d      	ldr	r1, [pc, #52]	; (800a1d4 <DRV_moveBackward+0x40>)
 800a1a0:	2000      	movs	r0, #0
 800a1a2:	f000 fae5 	bl	800a770 <LOG_log>

  DRV_setDirectionsBackward();
 800a1a6:	f7ff fe9d 	bl	8009ee4 <DRV_setDirectionsBackward>

  WHL_setSpeed(&g_DRV_context.wheelFrontRight, p_speed);
 800a1aa:	6879      	ldr	r1, [r7, #4]
 800a1ac:	480a      	ldr	r0, [pc, #40]	; (800a1d8 <DRV_moveBackward+0x44>)
 800a1ae:	f001 fd67 	bl	800bc80 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelFrontLeft , p_speed);
 800a1b2:	6879      	ldr	r1, [r7, #4]
 800a1b4:	4809      	ldr	r0, [pc, #36]	; (800a1dc <DRV_moveBackward+0x48>)
 800a1b6:	f001 fd63 	bl	800bc80 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearRight , p_speed);
 800a1ba:	6879      	ldr	r1, [r7, #4]
 800a1bc:	4808      	ldr	r0, [pc, #32]	; (800a1e0 <DRV_moveBackward+0x4c>)
 800a1be:	f001 fd5f 	bl	800bc80 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearLeft  , p_speed);
 800a1c2:	6879      	ldr	r1, [r7, #4]
 800a1c4:	4807      	ldr	r0, [pc, #28]	; (800a1e4 <DRV_moveBackward+0x50>)
 800a1c6:	f001 fd5b 	bl	800bc80 <WHL_setSpeed>

  return;
 800a1ca:	bf00      	nop
}
 800a1cc:	3708      	adds	r7, #8
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	080118f4 	.word	0x080118f4
 800a1d8:	2000025c 	.word	0x2000025c
 800a1dc:	20000300 	.word	0x20000300
 800a1e0:	20000448 	.word	0x20000448
 800a1e4:	200003a4 	.word	0x200003a4

0800a1e8 <DRV_moveForwardRight>:

static void DRV_moveForwardRight(uint32_t p_speed)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  LOG_debug("Moving forward-right @%u", p_speed);
 800a1f0:	687a      	ldr	r2, [r7, #4]
 800a1f2:	490d      	ldr	r1, [pc, #52]	; (800a228 <DRV_moveForwardRight+0x40>)
 800a1f4:	2000      	movs	r0, #0
 800a1f6:	f000 fabb 	bl	800a770 <LOG_log>

  DRV_setDirectionsForwardRight();
 800a1fa:	f7ff fe8f 	bl	8009f1c <DRV_setDirectionsForwardRight>

  WHL_setSpeed(&g_DRV_context.wheelFrontRight,       0);
 800a1fe:	2100      	movs	r1, #0
 800a200:	480a      	ldr	r0, [pc, #40]	; (800a22c <DRV_moveForwardRight+0x44>)
 800a202:	f001 fd3d 	bl	800bc80 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelFrontLeft , p_speed);
 800a206:	6879      	ldr	r1, [r7, #4]
 800a208:	4809      	ldr	r0, [pc, #36]	; (800a230 <DRV_moveForwardRight+0x48>)
 800a20a:	f001 fd39 	bl	800bc80 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearRight , p_speed);
 800a20e:	6879      	ldr	r1, [r7, #4]
 800a210:	4808      	ldr	r0, [pc, #32]	; (800a234 <DRV_moveForwardRight+0x4c>)
 800a212:	f001 fd35 	bl	800bc80 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearLeft  ,       0);
 800a216:	2100      	movs	r1, #0
 800a218:	4807      	ldr	r0, [pc, #28]	; (800a238 <DRV_moveForwardRight+0x50>)
 800a21a:	f001 fd31 	bl	800bc80 <WHL_setSpeed>

  return;
 800a21e:	bf00      	nop
}
 800a220:	3708      	adds	r7, #8
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop
 800a228:	08011908 	.word	0x08011908
 800a22c:	2000025c 	.word	0x2000025c
 800a230:	20000300 	.word	0x20000300
 800a234:	20000448 	.word	0x20000448
 800a238:	200003a4 	.word	0x200003a4

0800a23c <DRV_moveForwardLeft>:

static void DRV_moveForwardLeft(uint32_t p_speed)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b082      	sub	sp, #8
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  LOG_debug("Moving forward-left @%u", p_speed);
 800a244:	687a      	ldr	r2, [r7, #4]
 800a246:	490d      	ldr	r1, [pc, #52]	; (800a27c <DRV_moveForwardLeft+0x40>)
 800a248:	2000      	movs	r0, #0
 800a24a:	f000 fa91 	bl	800a770 <LOG_log>

  DRV_setDirectionsForwardLeft();
 800a24e:	f7ff fe75 	bl	8009f3c <DRV_setDirectionsForwardLeft>

  WHL_setSpeed(&g_DRV_context.wheelFrontRight, p_speed);
 800a252:	6879      	ldr	r1, [r7, #4]
 800a254:	480a      	ldr	r0, [pc, #40]	; (800a280 <DRV_moveForwardLeft+0x44>)
 800a256:	f001 fd13 	bl	800bc80 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelFrontLeft ,       0);
 800a25a:	2100      	movs	r1, #0
 800a25c:	4809      	ldr	r0, [pc, #36]	; (800a284 <DRV_moveForwardLeft+0x48>)
 800a25e:	f001 fd0f 	bl	800bc80 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearRight ,       0);
 800a262:	2100      	movs	r1, #0
 800a264:	4808      	ldr	r0, [pc, #32]	; (800a288 <DRV_moveForwardLeft+0x4c>)
 800a266:	f001 fd0b 	bl	800bc80 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearLeft  , p_speed);
 800a26a:	6879      	ldr	r1, [r7, #4]
 800a26c:	4807      	ldr	r0, [pc, #28]	; (800a28c <DRV_moveForwardLeft+0x50>)
 800a26e:	f001 fd07 	bl	800bc80 <WHL_setSpeed>

  return;
 800a272:	bf00      	nop
}
 800a274:	3708      	adds	r7, #8
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	08011924 	.word	0x08011924
 800a280:	2000025c 	.word	0x2000025c
 800a284:	20000300 	.word	0x20000300
 800a288:	20000448 	.word	0x20000448
 800a28c:	200003a4 	.word	0x200003a4

0800a290 <DRV_moveBackwardRight>:

static void DRV_moveBackwardRight(uint32_t p_speed)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b082      	sub	sp, #8
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  LOG_debug("Moving backward-right @%u", p_speed);
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	490d      	ldr	r1, [pc, #52]	; (800a2d0 <DRV_moveBackwardRight+0x40>)
 800a29c:	2000      	movs	r0, #0
 800a29e:	f000 fa67 	bl	800a770 <LOG_log>

  DRV_setDirectionsBackwardRight();
 800a2a2:	f7ff fe5b 	bl	8009f5c <DRV_setDirectionsBackwardRight>

  WHL_setSpeed(&g_DRV_context.wheelFrontRight, p_speed);
 800a2a6:	6879      	ldr	r1, [r7, #4]
 800a2a8:	480a      	ldr	r0, [pc, #40]	; (800a2d4 <DRV_moveBackwardRight+0x44>)
 800a2aa:	f001 fce9 	bl	800bc80 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelFrontLeft ,       0);
 800a2ae:	2100      	movs	r1, #0
 800a2b0:	4809      	ldr	r0, [pc, #36]	; (800a2d8 <DRV_moveBackwardRight+0x48>)
 800a2b2:	f001 fce5 	bl	800bc80 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearRight ,       0);
 800a2b6:	2100      	movs	r1, #0
 800a2b8:	4808      	ldr	r0, [pc, #32]	; (800a2dc <DRV_moveBackwardRight+0x4c>)
 800a2ba:	f001 fce1 	bl	800bc80 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearLeft  , p_speed);
 800a2be:	6879      	ldr	r1, [r7, #4]
 800a2c0:	4807      	ldr	r0, [pc, #28]	; (800a2e0 <DRV_moveBackwardRight+0x50>)
 800a2c2:	f001 fcdd 	bl	800bc80 <WHL_setSpeed>

  return;
 800a2c6:	bf00      	nop
}
 800a2c8:	3708      	adds	r7, #8
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	0801193c 	.word	0x0801193c
 800a2d4:	2000025c 	.word	0x2000025c
 800a2d8:	20000300 	.word	0x20000300
 800a2dc:	20000448 	.word	0x20000448
 800a2e0:	200003a4 	.word	0x200003a4

0800a2e4 <DRV_moveBackwardLeft>:

static void DRV_moveBackwardLeft(uint32_t p_speed)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  LOG_debug("Moving backward-left @%u", p_speed);
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	490d      	ldr	r1, [pc, #52]	; (800a324 <DRV_moveBackwardLeft+0x40>)
 800a2f0:	2000      	movs	r0, #0
 800a2f2:	f000 fa3d 	bl	800a770 <LOG_log>

  DRV_setDirectionsBackwardLeft();
 800a2f6:	f7ff fe41 	bl	8009f7c <DRV_setDirectionsBackwardLeft>

  WHL_setSpeed(&g_DRV_context.wheelFrontRight,       0);
 800a2fa:	2100      	movs	r1, #0
 800a2fc:	480a      	ldr	r0, [pc, #40]	; (800a328 <DRV_moveBackwardLeft+0x44>)
 800a2fe:	f001 fcbf 	bl	800bc80 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelFrontLeft , p_speed);
 800a302:	6879      	ldr	r1, [r7, #4]
 800a304:	4809      	ldr	r0, [pc, #36]	; (800a32c <DRV_moveBackwardLeft+0x48>)
 800a306:	f001 fcbb 	bl	800bc80 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearRight , p_speed);
 800a30a:	6879      	ldr	r1, [r7, #4]
 800a30c:	4808      	ldr	r0, [pc, #32]	; (800a330 <DRV_moveBackwardLeft+0x4c>)
 800a30e:	f001 fcb7 	bl	800bc80 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearLeft  ,       0);
 800a312:	2100      	movs	r1, #0
 800a314:	4807      	ldr	r0, [pc, #28]	; (800a334 <DRV_moveBackwardLeft+0x50>)
 800a316:	f001 fcb3 	bl	800bc80 <WHL_setSpeed>

  return;
 800a31a:	bf00      	nop
}
 800a31c:	3708      	adds	r7, #8
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	08011958 	.word	0x08011958
 800a328:	2000025c 	.word	0x2000025c
 800a32c:	20000300 	.word	0x20000300
 800a330:	20000448 	.word	0x20000448
 800a334:	200003a4 	.word	0x200003a4

0800a338 <DRV_turnLeft>:

static void DRV_turnLeft(uint32_t p_speed)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  LOG_debug("Turning left @%u", p_speed);
 800a340:	687a      	ldr	r2, [r7, #4]
 800a342:	490d      	ldr	r1, [pc, #52]	; (800a378 <DRV_turnLeft+0x40>)
 800a344:	2000      	movs	r0, #0
 800a346:	f000 fa13 	bl	800a770 <LOG_log>

  DRV_setDirectionsTurnLeft();
 800a34a:	f7ff fe27 	bl	8009f9c <DRV_setDirectionsTurnLeft>

  WHL_setSpeed(&g_DRV_context.wheelFrontRight, p_speed);
 800a34e:	6879      	ldr	r1, [r7, #4]
 800a350:	480a      	ldr	r0, [pc, #40]	; (800a37c <DRV_turnLeft+0x44>)
 800a352:	f001 fc95 	bl	800bc80 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelFrontLeft , p_speed);
 800a356:	6879      	ldr	r1, [r7, #4]
 800a358:	4809      	ldr	r0, [pc, #36]	; (800a380 <DRV_turnLeft+0x48>)
 800a35a:	f001 fc91 	bl	800bc80 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearRight , p_speed);
 800a35e:	6879      	ldr	r1, [r7, #4]
 800a360:	4808      	ldr	r0, [pc, #32]	; (800a384 <DRV_turnLeft+0x4c>)
 800a362:	f001 fc8d 	bl	800bc80 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearLeft  , p_speed);
 800a366:	6879      	ldr	r1, [r7, #4]
 800a368:	4807      	ldr	r0, [pc, #28]	; (800a388 <DRV_turnLeft+0x50>)
 800a36a:	f001 fc89 	bl	800bc80 <WHL_setSpeed>

  return;
 800a36e:	bf00      	nop
}
 800a370:	3708      	adds	r7, #8
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	08011974 	.word	0x08011974
 800a37c:	2000025c 	.word	0x2000025c
 800a380:	20000300 	.word	0x20000300
 800a384:	20000448 	.word	0x20000448
 800a388:	200003a4 	.word	0x200003a4

0800a38c <DRV_turnRight>:

static void DRV_turnRight(uint32_t p_speed)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b082      	sub	sp, #8
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  LOG_debug("Turning right @%u", p_speed);
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	490d      	ldr	r1, [pc, #52]	; (800a3cc <DRV_turnRight+0x40>)
 800a398:	2000      	movs	r0, #0
 800a39a:	f000 f9e9 	bl	800a770 <LOG_log>

  DRV_setDirectionsTurnRight();
 800a39e:	f7ff fe19 	bl	8009fd4 <DRV_setDirectionsTurnRight>

  WHL_setSpeed(&g_DRV_context.wheelFrontRight, p_speed);
 800a3a2:	6879      	ldr	r1, [r7, #4]
 800a3a4:	480a      	ldr	r0, [pc, #40]	; (800a3d0 <DRV_turnRight+0x44>)
 800a3a6:	f001 fc6b 	bl	800bc80 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelFrontLeft , p_speed);
 800a3aa:	6879      	ldr	r1, [r7, #4]
 800a3ac:	4809      	ldr	r0, [pc, #36]	; (800a3d4 <DRV_turnRight+0x48>)
 800a3ae:	f001 fc67 	bl	800bc80 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearRight , p_speed);
 800a3b2:	6879      	ldr	r1, [r7, #4]
 800a3b4:	4808      	ldr	r0, [pc, #32]	; (800a3d8 <DRV_turnRight+0x4c>)
 800a3b6:	f001 fc63 	bl	800bc80 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearLeft  , p_speed);
 800a3ba:	6879      	ldr	r1, [r7, #4]
 800a3bc:	4807      	ldr	r0, [pc, #28]	; (800a3dc <DRV_turnRight+0x50>)
 800a3be:	f001 fc5f 	bl	800bc80 <WHL_setSpeed>

  return;
 800a3c2:	bf00      	nop
}
 800a3c4:	3708      	adds	r7, #8
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	08011988 	.word	0x08011988
 800a3d0:	2000025c 	.word	0x2000025c
 800a3d4:	20000300 	.word	0x20000300
 800a3d8:	20000448 	.word	0x20000448
 800a3dc:	200003a4 	.word	0x200003a4

0800a3e0 <DRV_translateLeft>:

static void DRV_translateLeft(uint32_t p_speed)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b082      	sub	sp, #8
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  LOG_debug("Translating left @%u", p_speed);
 800a3e8:	687a      	ldr	r2, [r7, #4]
 800a3ea:	490d      	ldr	r1, [pc, #52]	; (800a420 <DRV_translateLeft+0x40>)
 800a3ec:	2000      	movs	r0, #0
 800a3ee:	f000 f9bf 	bl	800a770 <LOG_log>

  DRV_setDirectionsTranslateLeft();
 800a3f2:	f7ff fe0b 	bl	800a00c <DRV_setDirectionsTranslateLeft>

  WHL_setSpeed(&g_DRV_context.wheelFrontRight, p_speed);
 800a3f6:	6879      	ldr	r1, [r7, #4]
 800a3f8:	480a      	ldr	r0, [pc, #40]	; (800a424 <DRV_translateLeft+0x44>)
 800a3fa:	f001 fc41 	bl	800bc80 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelFrontLeft , p_speed);
 800a3fe:	6879      	ldr	r1, [r7, #4]
 800a400:	4809      	ldr	r0, [pc, #36]	; (800a428 <DRV_translateLeft+0x48>)
 800a402:	f001 fc3d 	bl	800bc80 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearRight , p_speed);
 800a406:	6879      	ldr	r1, [r7, #4]
 800a408:	4808      	ldr	r0, [pc, #32]	; (800a42c <DRV_translateLeft+0x4c>)
 800a40a:	f001 fc39 	bl	800bc80 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearLeft  , p_speed);
 800a40e:	6879      	ldr	r1, [r7, #4]
 800a410:	4807      	ldr	r0, [pc, #28]	; (800a430 <DRV_translateLeft+0x50>)
 800a412:	f001 fc35 	bl	800bc80 <WHL_setSpeed>

  return;
 800a416:	bf00      	nop
}
 800a418:	3708      	adds	r7, #8
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
 800a41e:	bf00      	nop
 800a420:	0801199c 	.word	0x0801199c
 800a424:	2000025c 	.word	0x2000025c
 800a428:	20000300 	.word	0x20000300
 800a42c:	20000448 	.word	0x20000448
 800a430:	200003a4 	.word	0x200003a4

0800a434 <DRV_translateRight>:

static void DRV_translateRight(uint32_t p_speed)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  LOG_debug("Translating right @%u", p_speed);
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	490d      	ldr	r1, [pc, #52]	; (800a474 <DRV_translateRight+0x40>)
 800a440:	2000      	movs	r0, #0
 800a442:	f000 f995 	bl	800a770 <LOG_log>

  DRV_setDirectionsTranslateRight();
 800a446:	f7ff fdfd 	bl	800a044 <DRV_setDirectionsTranslateRight>

  WHL_setSpeed(&g_DRV_context.wheelFrontRight, p_speed);
 800a44a:	6879      	ldr	r1, [r7, #4]
 800a44c:	480a      	ldr	r0, [pc, #40]	; (800a478 <DRV_translateRight+0x44>)
 800a44e:	f001 fc17 	bl	800bc80 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelFrontLeft , p_speed);
 800a452:	6879      	ldr	r1, [r7, #4]
 800a454:	4809      	ldr	r0, [pc, #36]	; (800a47c <DRV_translateRight+0x48>)
 800a456:	f001 fc13 	bl	800bc80 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearRight , p_speed);
 800a45a:	6879      	ldr	r1, [r7, #4]
 800a45c:	4808      	ldr	r0, [pc, #32]	; (800a480 <DRV_translateRight+0x4c>)
 800a45e:	f001 fc0f 	bl	800bc80 <WHL_setSpeed>
  WHL_setSpeed(&g_DRV_context.wheelRearLeft  , p_speed);
 800a462:	6879      	ldr	r1, [r7, #4]
 800a464:	4807      	ldr	r0, [pc, #28]	; (800a484 <DRV_translateRight+0x50>)
 800a466:	f001 fc0b 	bl	800bc80 <WHL_setSpeed>

  return;
 800a46a:	bf00      	nop
}
 800a46c:	3708      	adds	r7, #8
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}
 800a472:	bf00      	nop
 800a474:	080119b4 	.word	0x080119b4
 800a478:	2000025c 	.word	0x2000025c
 800a47c:	20000300 	.word	0x20000300
 800a480:	20000448 	.word	0x20000448
 800a484:	200003a4 	.word	0x200003a4

0800a488 <ENC_init>:

void ENC_init(T_ENC_Handle      *p_handle,
              char              *p_name,
              bool               p_invertOnUpdate,
              TIM_HandleTypeDef *p_encoderTimerHandle)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	603b      	str	r3, [r7, #0]
 800a494:	4613      	mov	r3, r2
 800a496:	71fb      	strb	r3, [r7, #7]
  LOG_info("Initializing encoder module for %s", p_name);
 800a498:	68ba      	ldr	r2, [r7, #8]
 800a49a:	490a      	ldr	r1, [pc, #40]	; (800a4c4 <ENC_init+0x3c>)
 800a49c:	2001      	movs	r0, #1
 800a49e:	f000 f967 	bl	800a770 <LOG_log>

  p_handle->name           = p_name;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	68ba      	ldr	r2, [r7, #8]
 800a4a6:	601a      	str	r2, [r3, #0]
  p_handle->invertOnUpdate = p_invertOnUpdate;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	79fa      	ldrb	r2, [r7, #7]
 800a4ac:	721a      	strb	r2, [r3, #8]
  p_handle->timerHandle    = p_encoderTimerHandle;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	683a      	ldr	r2, [r7, #0]
 800a4b2:	60da      	str	r2, [r3, #12]

  ENC_reset(p_handle);
 800a4b4:	68f8      	ldr	r0, [r7, #12]
 800a4b6:	f000 f807 	bl	800a4c8 <ENC_reset>

  return;
 800a4ba:	bf00      	nop
}
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	080119cc 	.word	0x080119cc

0800a4c8 <ENC_reset>:

void ENC_reset(T_ENC_Handle *p_handle)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b083      	sub	sp, #12
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  p_handle->value = 0;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	605a      	str	r2, [r3, #4]

  __HAL_TIM_SET_COUNTER(p_handle->timerHandle, 0);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	68db      	ldr	r3, [r3, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800a4e0:	bf00      	nop
}
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bc80      	pop	{r7}
 800a4e8:	4770      	bx	lr

0800a4ea <ENC_update>:

void ENC_update(T_ENC_Handle *p_handle, int32_t p_value)
{
 800a4ea:	b480      	push	{r7}
 800a4ec:	b083      	sub	sp, #12
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
 800a4f2:	6039      	str	r1, [r7, #0]
  if (p_handle->invertOnUpdate == false)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	7a1b      	ldrb	r3, [r3, #8]
 800a4f8:	f083 0301 	eor.w	r3, r3, #1
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d003      	beq.n	800a50a <ENC_update+0x20>
  {
    p_handle->value = p_value;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	683a      	ldr	r2, [r7, #0]
 800a506:	605a      	str	r2, [r3, #4]
  else
  {
    p_handle->value = -p_value;
  }

  return;
 800a508:	e004      	b.n	800a514 <ENC_update+0x2a>
    p_handle->value = -p_value;
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	425a      	negs	r2, r3
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	605a      	str	r2, [r3, #4]
  return;
 800a512:	bf00      	nop
}
 800a514:	370c      	adds	r7, #12
 800a516:	46bd      	mov	sp, r7
 800a518:	bc80      	pop	{r7}
 800a51a:	4770      	bx	lr

0800a51c <ENC_getCount>:

int32_t ENC_getCount(T_ENC_Handle *p_handle)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b084      	sub	sp, #16
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  int32_t l_count;

  l_count = p_handle->value;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	60fb      	str	r3, [r7, #12]

  ENC_reset(p_handle);
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f7ff ffcc 	bl	800a4c8 <ENC_reset>

  return l_count;
 800a530:	68fb      	ldr	r3, [r7, #12]
}
 800a532:	4618      	mov	r0, r3
 800a534:	3710      	adds	r7, #16
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
	...

0800a53c <LED_setMode>:
} T_LED_Context;

static T_LED_Context g_LED_context;

void LED_setMode(T_LED_MODE p_mode)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b082      	sub	sp, #8
 800a540:	af00      	add	r7, sp, #0
 800a542:	4603      	mov	r3, r0
 800a544:	71fb      	strb	r3, [r7, #7]
  if (p_mode != g_LED_context.mode)
 800a546:	4b1b      	ldr	r3, [pc, #108]	; (800a5b4 <LED_setMode+0x78>)
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	79fa      	ldrb	r2, [r7, #7]
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d02d      	beq.n	800a5ac <LED_setMode+0x70>
  {
    switch (p_mode)
 800a550:	79fb      	ldrb	r3, [r7, #7]
 800a552:	2b04      	cmp	r3, #4
 800a554:	d825      	bhi.n	800a5a2 <LED_setMode+0x66>
 800a556:	a201      	add	r2, pc, #4	; (adr r2, 800a55c <LED_setMode+0x20>)
 800a558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a55c:	0800a571 	.word	0x0800a571
 800a560:	0800a57b 	.word	0x0800a57b
 800a564:	0800a585 	.word	0x0800a585
 800a568:	0800a58f 	.word	0x0800a58f
 800a56c:	0800a599 	.word	0x0800a599
    {
      case LED_MODE_FORCED_OFF:
        LOG_info("Turning LED OFF");
 800a570:	4911      	ldr	r1, [pc, #68]	; (800a5b8 <LED_setMode+0x7c>)
 800a572:	2001      	movs	r0, #1
 800a574:	f000 f8fc 	bl	800a770 <LOG_log>
        break;
 800a578:	e014      	b.n	800a5a4 <LED_setMode+0x68>

      case LED_MODE_FORCED_ON:
        LOG_info("Turning LED ON");
 800a57a:	4910      	ldr	r1, [pc, #64]	; (800a5bc <LED_setMode+0x80>)
 800a57c:	2001      	movs	r0, #1
 800a57e:	f000 f8f7 	bl	800a770 <LOG_log>
        break;
 800a582:	e00f      	b.n	800a5a4 <LED_setMode+0x68>

      case LED_MODE_BLINK_SLOW:
        LOG_info("Setting LED to blink slow");
 800a584:	490e      	ldr	r1, [pc, #56]	; (800a5c0 <LED_setMode+0x84>)
 800a586:	2001      	movs	r0, #1
 800a588:	f000 f8f2 	bl	800a770 <LOG_log>
        break;
 800a58c:	e00a      	b.n	800a5a4 <LED_setMode+0x68>

      case LED_MODE_BLINK_MEDIUM:
        LOG_info("Setting LED to blink medium");
 800a58e:	490d      	ldr	r1, [pc, #52]	; (800a5c4 <LED_setMode+0x88>)
 800a590:	2001      	movs	r0, #1
 800a592:	f000 f8ed 	bl	800a770 <LOG_log>
        break;
 800a596:	e005      	b.n	800a5a4 <LED_setMode+0x68>

      case LED_MODE_BLINK_FAST:
        LOG_info("Setting LED to blink fast");
 800a598:	490b      	ldr	r1, [pc, #44]	; (800a5c8 <LED_setMode+0x8c>)
 800a59a:	2001      	movs	r0, #1
 800a59c:	f000 f8e8 	bl	800a770 <LOG_log>
        break;
 800a5a0:	e000      	b.n	800a5a4 <LED_setMode+0x68>

      default:
        ; /* Nothing to do */
        break;
 800a5a2:	bf00      	nop
    }

    g_LED_context.mode = p_mode;
 800a5a4:	4a03      	ldr	r2, [pc, #12]	; (800a5b4 <LED_setMode+0x78>)
 800a5a6:	79fb      	ldrb	r3, [r7, #7]
 800a5a8:	7013      	strb	r3, [r2, #0]
  else
  {
    ; /* Nothong to do */
  }

  return;
 800a5aa:	bf00      	nop
 800a5ac:	bf00      	nop
}
 800a5ae:	3708      	adds	r7, #8
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}
 800a5b4:	200004ec 	.word	0x200004ec
 800a5b8:	08011a08 	.word	0x08011a08
 800a5bc:	08011a18 	.word	0x08011a18
 800a5c0:	08011a28 	.word	0x08011a28
 800a5c4:	08011a44 	.word	0x08011a44
 800a5c8:	08011a60 	.word	0x08011a60

0800a5cc <LED_update>:
{
  return g_LED_context.mode;
}

void LED_update(void)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	af00      	add	r7, sp, #0
  static uint32_t l_blinkCounter = 0;

  switch (g_LED_context.mode)
 800a5d0:	4b2a      	ldr	r3, [pc, #168]	; (800a67c <LED_update+0xb0>)
 800a5d2:	781b      	ldrb	r3, [r3, #0]
 800a5d4:	2b04      	cmp	r3, #4
 800a5d6:	d849      	bhi.n	800a66c <LED_update+0xa0>
 800a5d8:	a201      	add	r2, pc, #4	; (adr r2, 800a5e0 <LED_update+0x14>)
 800a5da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5de:	bf00      	nop
 800a5e0:	0800a5f5 	.word	0x0800a5f5
 800a5e4:	0800a603 	.word	0x0800a603
 800a5e8:	0800a611 	.word	0x0800a611
 800a5ec:	0800a63f 	.word	0x0800a63f
 800a5f0:	0800a661 	.word	0x0800a661
  {
    case LED_MODE_FORCED_OFF:
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a5fa:	4821      	ldr	r0, [pc, #132]	; (800a680 <LED_update+0xb4>)
 800a5fc:	f7f9 fa2a 	bl	8003a54 <HAL_GPIO_WritePin>
      break;
 800a600:	e039      	b.n	800a676 <LED_update+0xaa>

    case LED_MODE_FORCED_ON:
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 800a602:	2200      	movs	r2, #0
 800a604:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a608:	481d      	ldr	r0, [pc, #116]	; (800a680 <LED_update+0xb4>)
 800a60a:	f7f9 fa23 	bl	8003a54 <HAL_GPIO_WritePin>
      break;
 800a60e:	e032      	b.n	800a676 <LED_update+0xaa>

    case LED_MODE_BLINK_SLOW:
      l_blinkCounter++;
 800a610:	4b1c      	ldr	r3, [pc, #112]	; (800a684 <LED_update+0xb8>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	3301      	adds	r3, #1
 800a616:	4a1b      	ldr	r2, [pc, #108]	; (800a684 <LED_update+0xb8>)
 800a618:	6013      	str	r3, [r2, #0]
      if (l_blinkCounter % 5 == 0)
 800a61a:	4b1a      	ldr	r3, [pc, #104]	; (800a684 <LED_update+0xb8>)
 800a61c:	6819      	ldr	r1, [r3, #0]
 800a61e:	4b1a      	ldr	r3, [pc, #104]	; (800a688 <LED_update+0xbc>)
 800a620:	fba3 2301 	umull	r2, r3, r3, r1
 800a624:	089a      	lsrs	r2, r3, #2
 800a626:	4613      	mov	r3, r2
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	4413      	add	r3, r2
 800a62c:	1aca      	subs	r2, r1, r3
 800a62e:	2a00      	cmp	r2, #0
 800a630:	d11e      	bne.n	800a670 <LED_update+0xa4>
      {
        HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 800a632:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a636:	4812      	ldr	r0, [pc, #72]	; (800a680 <LED_update+0xb4>)
 800a638:	f7f9 fa3e 	bl	8003ab8 <HAL_GPIO_TogglePin>
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 800a63c:	e018      	b.n	800a670 <LED_update+0xa4>

    case LED_MODE_BLINK_MEDIUM:
      l_blinkCounter++;
 800a63e:	4b11      	ldr	r3, [pc, #68]	; (800a684 <LED_update+0xb8>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	3301      	adds	r3, #1
 800a644:	4a0f      	ldr	r2, [pc, #60]	; (800a684 <LED_update+0xb8>)
 800a646:	6013      	str	r3, [r2, #0]
      if (l_blinkCounter % 2 == 0)
 800a648:	4b0e      	ldr	r3, [pc, #56]	; (800a684 <LED_update+0xb8>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f003 0301 	and.w	r3, r3, #1
 800a650:	2b00      	cmp	r3, #0
 800a652:	d10f      	bne.n	800a674 <LED_update+0xa8>
      {
        HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 800a654:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a658:	4809      	ldr	r0, [pc, #36]	; (800a680 <LED_update+0xb4>)
 800a65a:	f7f9 fa2d 	bl	8003ab8 <HAL_GPIO_TogglePin>
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 800a65e:	e009      	b.n	800a674 <LED_update+0xa8>

    case LED_MODE_BLINK_FAST:
      HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 800a660:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a664:	4806      	ldr	r0, [pc, #24]	; (800a680 <LED_update+0xb4>)
 800a666:	f7f9 fa27 	bl	8003ab8 <HAL_GPIO_TogglePin>
      break;
 800a66a:	e004      	b.n	800a676 <LED_update+0xaa>

    default:
      ; /* Nothing to do */
      break;
 800a66c:	bf00      	nop
 800a66e:	e002      	b.n	800a676 <LED_update+0xaa>
      break;
 800a670:	bf00      	nop
 800a672:	e000      	b.n	800a676 <LED_update+0xaa>
      break;
 800a674:	bf00      	nop
  }

  return;
 800a676:	bf00      	nop
}
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	bf00      	nop
 800a67c:	200004ec 	.word	0x200004ec
 800a680:	40011000 	.word	0x40011000
 800a684:	200004f0 	.word	0x200004f0
 800a688:	cccccccd 	.word	0xcccccccd

0800a68c <LOG_init>:
{
  "DEBUG", "INFO", "WARNING", "ERROR"
};

void LOG_init(bool p_isLogOn)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
 800a692:	4603      	mov	r3, r0
 800a694:	71fb      	strb	r3, [r7, #7]
  g_LOG_context.isOn = p_isLogOn;
 800a696:	4a05      	ldr	r2, [pc, #20]	; (800a6ac <LOG_init+0x20>)
 800a698:	79fb      	ldrb	r3, [r7, #7]
 800a69a:	7013      	strb	r3, [r2, #0]

  LOG_info("LOG initialized");
 800a69c:	4904      	ldr	r1, [pc, #16]	; (800a6b0 <LOG_init+0x24>)
 800a69e:	2001      	movs	r0, #1
 800a6a0:	f000 f866 	bl	800a770 <LOG_log>

  return;
 800a6a4:	bf00      	nop
}
 800a6a6:	3708      	adds	r7, #8
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}
 800a6ac:	200004f4 	.word	0x200004f4
 800a6b0:	08011a9c 	.word	0x08011a9c

0800a6b4 <LOG_toggleOnOff>:

void LOG_toggleOnOff(void)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	af00      	add	r7, sp, #0
  if (g_LOG_context.isOn == true)
 800a6b8:	4b0a      	ldr	r3, [pc, #40]	; (800a6e4 <LOG_toggleOnOff+0x30>)
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d007      	beq.n	800a6d0 <LOG_toggleOnOff+0x1c>
  {
    LOG_info("Turning LOG OFF");
 800a6c0:	4909      	ldr	r1, [pc, #36]	; (800a6e8 <LOG_toggleOnOff+0x34>)
 800a6c2:	2001      	movs	r0, #1
 800a6c4:	f000 f854 	bl	800a770 <LOG_log>

    g_LOG_context.isOn = false;
 800a6c8:	4b06      	ldr	r3, [pc, #24]	; (800a6e4 <LOG_toggleOnOff+0x30>)
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	701a      	strb	r2, [r3, #0]
    g_LOG_context.isOn = true;

    LOG_info("Turning LOG ON");
  }

  return;
 800a6ce:	e007      	b.n	800a6e0 <LOG_toggleOnOff+0x2c>
    g_LOG_context.isOn = true;
 800a6d0:	4b04      	ldr	r3, [pc, #16]	; (800a6e4 <LOG_toggleOnOff+0x30>)
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	701a      	strb	r2, [r3, #0]
    LOG_info("Turning LOG ON");
 800a6d6:	4905      	ldr	r1, [pc, #20]	; (800a6ec <LOG_toggleOnOff+0x38>)
 800a6d8:	2001      	movs	r0, #1
 800a6da:	f000 f849 	bl	800a770 <LOG_log>
  return;
 800a6de:	bf00      	nop
}
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop
 800a6e4:	200004f4 	.word	0x200004f4
 800a6e8:	08011aac 	.word	0x08011aac
 800a6ec:	08011abc 	.word	0x08011abc

0800a6f0 <LOG_setLevel>:

void LOG_setLevel(T_LOG_LEVEL p_level)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b083      	sub	sp, #12
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	71fb      	strb	r3, [r7, #7]
  g_LOG_context.level = p_level;
 800a6fa:	4a04      	ldr	r2, [pc, #16]	; (800a70c <LOG_setLevel+0x1c>)
 800a6fc:	79fb      	ldrb	r3, [r7, #7]
 800a6fe:	7053      	strb	r3, [r2, #1]

  return;
 800a700:	bf00      	nop
}
 800a702:	370c      	adds	r7, #12
 800a704:	46bd      	mov	sp, r7
 800a706:	bc80      	pop	{r7}
 800a708:	4770      	bx	lr
 800a70a:	bf00      	nop
 800a70c:	200004f4 	.word	0x200004f4

0800a710 <LOG_increaseLevel>:

void LOG_increaseLevel(void)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	af00      	add	r7, sp, #0
  /* Display more detailed logs */
  if (g_LOG_context.level > LOG_LEVEL_DEBUG)
 800a714:	4b08      	ldr	r3, [pc, #32]	; (800a738 <LOG_increaseLevel+0x28>)
 800a716:	785b      	ldrb	r3, [r3, #1]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d00a      	beq.n	800a732 <LOG_increaseLevel+0x22>
  {
    LOG_info("Increasing LOG level");
 800a71c:	4907      	ldr	r1, [pc, #28]	; (800a73c <LOG_increaseLevel+0x2c>)
 800a71e:	2001      	movs	r0, #1
 800a720:	f000 f826 	bl	800a770 <LOG_log>

    g_LOG_context.level--;
 800a724:	4b04      	ldr	r3, [pc, #16]	; (800a738 <LOG_increaseLevel+0x28>)
 800a726:	785b      	ldrb	r3, [r3, #1]
 800a728:	3b01      	subs	r3, #1
 800a72a:	b2da      	uxtb	r2, r3
 800a72c:	4b02      	ldr	r3, [pc, #8]	; (800a738 <LOG_increaseLevel+0x28>)
 800a72e:	705a      	strb	r2, [r3, #1]
  else
  {
    ; /* Nothing to do */
  }

  return;
 800a730:	bf00      	nop
 800a732:	bf00      	nop
}
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	200004f4 	.word	0x200004f4
 800a73c:	08011acc 	.word	0x08011acc

0800a740 <LOG_decreaseLevel>:

void LOG_decreaseLevel(void)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	af00      	add	r7, sp, #0
  /* Display less detailed logs */
  if (g_LOG_context.level < LOG_LEVEL_ERROR)
 800a744:	4b08      	ldr	r3, [pc, #32]	; (800a768 <LOG_decreaseLevel+0x28>)
 800a746:	785b      	ldrb	r3, [r3, #1]
 800a748:	2b02      	cmp	r3, #2
 800a74a:	d80a      	bhi.n	800a762 <LOG_decreaseLevel+0x22>
  {
    LOG_info("Decreasing LOG level");
 800a74c:	4907      	ldr	r1, [pc, #28]	; (800a76c <LOG_decreaseLevel+0x2c>)
 800a74e:	2001      	movs	r0, #1
 800a750:	f000 f80e 	bl	800a770 <LOG_log>

    g_LOG_context.level++;
 800a754:	4b04      	ldr	r3, [pc, #16]	; (800a768 <LOG_decreaseLevel+0x28>)
 800a756:	785b      	ldrb	r3, [r3, #1]
 800a758:	3301      	adds	r3, #1
 800a75a:	b2da      	uxtb	r2, r3
 800a75c:	4b02      	ldr	r3, [pc, #8]	; (800a768 <LOG_decreaseLevel+0x28>)
 800a75e:	705a      	strb	r2, [r3, #1]
  else
  {
    ; /* Nothing to do */
  }

  return;
 800a760:	bf00      	nop
 800a762:	bf00      	nop
}
 800a764:	bd80      	pop	{r7, pc}
 800a766:	bf00      	nop
 800a768:	200004f4 	.word	0x200004f4
 800a76c:	08011ae4 	.word	0x08011ae4

0800a770 <LOG_log>:

void LOG_log(T_LOG_LEVEL p_level, const char *p_format, ...)
{
 800a770:	b40e      	push	{r1, r2, r3}
 800a772:	b590      	push	{r4, r7, lr}
 800a774:	b0a6      	sub	sp, #152	; 0x98
 800a776:	af02      	add	r7, sp, #8
 800a778:	4603      	mov	r3, r0
 800a77a:	71fb      	strb	r3, [r7, #7]
  char            l_buffer[CST_CONSOLE_TX_MAX_STRING_LENGTH];
  va_list         l_argumentsList;
  RTC_TimeTypeDef l_time;

  if ((g_LOG_context.isOn == true) && (p_level >= g_LOG_context.level))
 800a77c:	4b2c      	ldr	r3, [pc, #176]	; (800a830 <LOG_log+0xc0>)
 800a77e:	781b      	ldrb	r3, [r3, #0]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d04e      	beq.n	800a822 <LOG_log+0xb2>
 800a784:	4b2a      	ldr	r3, [pc, #168]	; (800a830 <LOG_log+0xc0>)
 800a786:	785b      	ldrb	r3, [r3, #1]
 800a788:	79fa      	ldrb	r2, [r7, #7]
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d349      	bcc.n	800a822 <LOG_log+0xb2>
  {
    UTI_getTimeRtc(&l_time);
 800a78e:	f107 0308 	add.w	r3, r7, #8
 800a792:	4618      	mov	r0, r3
 800a794:	f001 f8c0 	bl	800b918 <UTI_getTimeRtc>

    va_start(l_argumentsList, p_format);
 800a798:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800a79c:	60fb      	str	r3, [r7, #12]

    (void)sprintf  ( l_buffer, "%-7s - %02x:%02x:%02x - ", g_LOG_levelStrings[p_level], l_time.Hours, l_time.Minutes, l_time.Seconds);
 800a79e:	79fb      	ldrb	r3, [r7, #7]
 800a7a0:	4a24      	ldr	r2, [pc, #144]	; (800a834 <LOG_log+0xc4>)
 800a7a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a7a6:	7a3b      	ldrb	r3, [r7, #8]
 800a7a8:	461c      	mov	r4, r3
 800a7aa:	7a7b      	ldrb	r3, [r7, #9]
 800a7ac:	7ab9      	ldrb	r1, [r7, #10]
 800a7ae:	f107 0010 	add.w	r0, r7, #16
 800a7b2:	9101      	str	r1, [sp, #4]
 800a7b4:	9300      	str	r3, [sp, #0]
 800a7b6:	4623      	mov	r3, r4
 800a7b8:	491f      	ldr	r1, [pc, #124]	; (800a838 <LOG_log+0xc8>)
 800a7ba:	f002 fb29 	bl	800ce10 <siprintf>
    /* 21 is the length of string "%-7s - %02x:%02x:%02x - ". 2 is the length of string "\r\n". */
    /* So we start and write format right after the former and we keep space for the latter.    */
    (void)vsnprintf(&l_buffer[21], CST_CONSOLE_TX_MAX_STRING_LENGTH - 21 - 2, p_format, l_argumentsList);
 800a7be:	f107 0310 	add.w	r3, r7, #16
 800a7c2:	f103 0015 	add.w	r0, r3, #21
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800a7cc:	2169      	movs	r1, #105	; 0x69
 800a7ce:	f003 fab3 	bl	800dd38 <vsniprintf>
    (void)strcat   ( l_buffer    , "\r\n");
 800a7d2:	f107 0310 	add.w	r3, r7, #16
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f7f5 fd26 	bl	8000228 <strlen>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	461a      	mov	r2, r3
 800a7e0:	f107 0310 	add.w	r3, r7, #16
 800a7e4:	4413      	add	r3, r2
 800a7e6:	4a15      	ldr	r2, [pc, #84]	; (800a83c <LOG_log+0xcc>)
 800a7e8:	8811      	ldrh	r1, [r2, #0]
 800a7ea:	7892      	ldrb	r2, [r2, #2]
 800a7ec:	8019      	strh	r1, [r3, #0]
 800a7ee:	709a      	strb	r2, [r3, #2]

    /* -1 is there to consider the end/null character, which strnlen() does not count */
    if (strnlen(l_buffer, CST_CONSOLE_TX_MAX_STRING_LENGTH) == CST_CONSOLE_TX_MAX_STRING_LENGTH - 1)
 800a7f0:	f107 0310 	add.w	r3, r7, #16
 800a7f4:	2180      	movs	r1, #128	; 0x80
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f002 fbac 	bl	800cf54 <strnlen>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b7f      	cmp	r3, #127	; 0x7f
 800a800:	d108      	bne.n	800a814 <LOG_log+0xa4>
    {
      /* At -1, we got the end/null character. At -2 & 3, we got "\r\n". */
      l_buffer[CST_CONSOLE_TX_MAX_STRING_LENGTH - 4] = '.';
 800a802:	232e      	movs	r3, #46	; 0x2e
 800a804:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
      l_buffer[CST_CONSOLE_TX_MAX_STRING_LENGTH - 5] = '.';
 800a808:	232e      	movs	r3, #46	; 0x2e
 800a80a:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
      l_buffer[CST_CONSOLE_TX_MAX_STRING_LENGTH - 6] = '.';
 800a80e:	232e      	movs	r3, #46	; 0x2e
 800a810:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
    else
    {
      ; /* Nothing to do */
    }

    (void)printf("%s", l_buffer);
 800a814:	f107 0310 	add.w	r3, r7, #16
 800a818:	4619      	mov	r1, r3
 800a81a:	4809      	ldr	r0, [pc, #36]	; (800a840 <LOG_log+0xd0>)
 800a81c:	f002 fa98 	bl	800cd50 <iprintf>
  else
  {
    ; /* Nothing to do */
  }

  return;
 800a820:	bf00      	nop
 800a822:	bf00      	nop
}
 800a824:	3790      	adds	r7, #144	; 0x90
 800a826:	46bd      	mov	sp, r7
 800a828:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a82c:	b003      	add	sp, #12
 800a82e:	4770      	bx	lr
 800a830:	200004f4 	.word	0x200004f4
 800a834:	2000000c 	.word	0x2000000c
 800a838:	08011afc 	.word	0x08011afc
 800a83c:	08011b18 	.word	0x08011b18
 800a840:	08011b1c 	.word	0x08011b1c

0800a844 <MAS_init>:
} T_MAS_Context;

static T_MAS_Context g_MAS_context;

void MAS_init(UART_HandleTypeDef *p_uartHandle)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b082      	sub	sp, #8
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing master connection");
 800a84c:	490d      	ldr	r1, [pc, #52]	; (800a884 <MAS_init+0x40>)
 800a84e:	2001      	movs	r0, #1
 800a850:	f7ff ff8e 	bl	800a770 <LOG_log>

  g_MAS_context.uartHandle     = p_uartHandle;
 800a854:	4a0c      	ldr	r2, [pc, #48]	; (800a888 <MAS_init+0x44>)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6013      	str	r3, [r2, #0]
  g_MAS_context.dataSize       = 0;
 800a85a:	4b0b      	ldr	r3, [pc, #44]	; (800a888 <MAS_init+0x44>)
 800a85c:	2200      	movs	r2, #0
 800a85e:	61da      	str	r2, [r3, #28]
  g_MAS_context.isDataComplete = false;
 800a860:	4b09      	ldr	r3, [pc, #36]	; (800a888 <MAS_init+0x44>)
 800a862:	2200      	movs	r2, #0
 800a864:	f883 2020 	strb.w	r2, [r3, #32]

  SFO_initData(&g_MAS_context.data);
 800a868:	4808      	ldr	r0, [pc, #32]	; (800a88c <MAS_init+0x48>)
 800a86a:	f000 fedd 	bl	800b628 <SFO_initData>

  HAL_UART_Receive_IT(g_MAS_context.uartHandle, &g_MAS_context.datum, 1);
 800a86e:	4b06      	ldr	r3, [pc, #24]	; (800a888 <MAS_init+0x44>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	2201      	movs	r2, #1
 800a874:	4906      	ldr	r1, [pc, #24]	; (800a890 <MAS_init+0x4c>)
 800a876:	4618      	mov	r0, r3
 800a878:	f7fd fb78 	bl	8007f6c <HAL_UART_Receive_IT>

  return;
 800a87c:	bf00      	nop
}
 800a87e:	3708      	adds	r7, #8
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}
 800a884:	08011b20 	.word	0x08011b20
 800a888:	200004f8 	.word	0x200004f8
 800a88c:	200004fd 	.word	0x200004fd
 800a890:	200004fc 	.word	0x200004fc

0800a894 <MAS_receiveData>:

void MAS_receiveData(void)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	af00      	add	r7, sp, #0
  /* If previous command was not processed yet, drop datum, */
  /* which will lead to an error, showing a design issue... */
  if (g_MAS_context.isDataComplete == true)
 800a898:	4b11      	ldr	r3, [pc, #68]	; (800a8e0 <MAS_receiveData+0x4c>)
 800a89a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d115      	bne.n	800a8ce <MAS_receiveData+0x3a>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (g_MAS_context.datum == '\r')
 800a8a2:	4b0f      	ldr	r3, [pc, #60]	; (800a8e0 <MAS_receiveData+0x4c>)
 800a8a4:	791b      	ldrb	r3, [r3, #4]
 800a8a6:	2b0d      	cmp	r3, #13
 800a8a8:	d104      	bne.n	800a8b4 <MAS_receiveData+0x20>
    {
      g_MAS_context.isDataComplete = true;
 800a8aa:	4b0d      	ldr	r3, [pc, #52]	; (800a8e0 <MAS_receiveData+0x4c>)
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	f883 2020 	strb.w	r2, [r3, #32]
 800a8b2:	e00c      	b.n	800a8ce <MAS_receiveData+0x3a>
    }
    else
    {
      g_MAS_context.data[g_MAS_context.dataSize] = g_MAS_context.datum;
 800a8b4:	4b0a      	ldr	r3, [pc, #40]	; (800a8e0 <MAS_receiveData+0x4c>)
 800a8b6:	69db      	ldr	r3, [r3, #28]
 800a8b8:	4a09      	ldr	r2, [pc, #36]	; (800a8e0 <MAS_receiveData+0x4c>)
 800a8ba:	7911      	ldrb	r1, [r2, #4]
 800a8bc:	4a08      	ldr	r2, [pc, #32]	; (800a8e0 <MAS_receiveData+0x4c>)
 800a8be:	4413      	add	r3, r2
 800a8c0:	460a      	mov	r2, r1
 800a8c2:	715a      	strb	r2, [r3, #5]
      g_MAS_context.dataSize++;
 800a8c4:	4b06      	ldr	r3, [pc, #24]	; (800a8e0 <MAS_receiveData+0x4c>)
 800a8c6:	69db      	ldr	r3, [r3, #28]
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	4a05      	ldr	r2, [pc, #20]	; (800a8e0 <MAS_receiveData+0x4c>)
 800a8cc:	61d3      	str	r3, [r2, #28]
    }
  }

  HAL_UART_Receive_IT(g_MAS_context.uartHandle, &g_MAS_context.datum, 1);
 800a8ce:	4b04      	ldr	r3, [pc, #16]	; (800a8e0 <MAS_receiveData+0x4c>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	4903      	ldr	r1, [pc, #12]	; (800a8e4 <MAS_receiveData+0x50>)
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f7fd fb48 	bl	8007f6c <HAL_UART_Receive_IT>

  return;
 800a8dc:	bf00      	nop
}
 800a8de:	bd80      	pop	{r7, pc}
 800a8e0:	200004f8 	.word	0x200004f8
 800a8e4:	200004fc 	.word	0x200004fc

0800a8e8 <MAS_updateFifo>:

void MAS_updateFifo(T_SFO_Handle *p_fifo)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b082      	sub	sp, #8
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  if (g_MAS_context.isDataComplete == false)
 800a8f0:	4b0d      	ldr	r3, [pc, #52]	; (800a928 <MAS_updateFifo+0x40>)
 800a8f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a8f6:	f083 0301 	eor.w	r3, r3, #1
 800a8fa:	b2db      	uxtb	r3, r3
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d10e      	bne.n	800a91e <MAS_updateFifo+0x36>
  {
    ; /* Nothing to do */
  }
  else
  {
    SFO_push    (p_fifo, &g_MAS_context.data);
 800a900:	490a      	ldr	r1, [pc, #40]	; (800a92c <MAS_updateFifo+0x44>)
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f000 feb6 	bl	800b674 <SFO_push>
    SFO_initData(        &g_MAS_context.data );
 800a908:	4808      	ldr	r0, [pc, #32]	; (800a92c <MAS_updateFifo+0x44>)
 800a90a:	f000 fe8d 	bl	800b628 <SFO_initData>

    g_MAS_context.dataSize       = 0;
 800a90e:	4b06      	ldr	r3, [pc, #24]	; (800a928 <MAS_updateFifo+0x40>)
 800a910:	2200      	movs	r2, #0
 800a912:	61da      	str	r2, [r3, #28]
    g_MAS_context.isDataComplete = false;
 800a914:	4b04      	ldr	r3, [pc, #16]	; (800a928 <MAS_updateFifo+0x40>)
 800a916:	2200      	movs	r2, #0
 800a918:	f883 2020 	strb.w	r2, [r3, #32]
  }

  return;
 800a91c:	bf00      	nop
 800a91e:	bf00      	nop
}
 800a920:	3708      	adds	r7, #8
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
 800a926:	bf00      	nop
 800a928:	200004f8 	.word	0x200004f8
 800a92c:	200004fd 	.word	0x200004fd

0800a930 <MAS_sendString>:

void MAS_sendString(char *p_string, uint32_t p_length)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b082      	sub	sp, #8
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	6039      	str	r1, [r7, #0]
  /* As this method is using for logging/debug, we will not deal with failure cases */
 (void)HAL_UART_Transmit(g_MAS_context.uartHandle,
 800a93a:	4b06      	ldr	r3, [pc, #24]	; (800a954 <MAS_sendString+0x24>)
 800a93c:	6818      	ldr	r0, [r3, #0]
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	b29a      	uxth	r2, r3
 800a942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a946:	6879      	ldr	r1, [r7, #4]
 800a948:	f7fd fa7e 	bl	8007e48 <HAL_UART_Transmit>
              (uint8_t *)p_string,
                         p_length,
                         CST_UART_TRANSMIT_TIMEOUT_IN_MS);

  return;
 800a94c:	bf00      	nop
}
 800a94e:	3708      	adds	r7, #8
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}
 800a954:	200004f8 	.word	0x200004f8

0800a958 <MTR_init>:
              uint32_t           p_dirPin1,
              GPIO_TypeDef      *p_dirPin2Port,
              uint32_t           p_dirPin2,
              TIM_HandleTypeDef *p_pwmTimerHandle,
              uint32_t           p_pwmChannel)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b084      	sub	sp, #16
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	60f8      	str	r0, [r7, #12]
 800a960:	60b9      	str	r1, [r7, #8]
 800a962:	607a      	str	r2, [r7, #4]
 800a964:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing motor module for %s", p_name);
 800a966:	68ba      	ldr	r2, [r7, #8]
 800a968:	4912      	ldr	r1, [pc, #72]	; (800a9b4 <MTR_init+0x5c>)
 800a96a:	2001      	movs	r0, #1
 800a96c:	f7ff ff00 	bl	800a770 <LOG_log>

  p_handle->name           = p_name;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	68ba      	ldr	r2, [r7, #8]
 800a974:	601a      	str	r2, [r3, #0]
  p_handle->dirPin1Port    = p_dirPin1Port;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	605a      	str	r2, [r3, #4]
  p_handle->dirPin1        = p_dirPin1;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	683a      	ldr	r2, [r7, #0]
 800a980:	609a      	str	r2, [r3, #8]
  p_handle->dirPin2Port    = p_dirPin2Port;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	69ba      	ldr	r2, [r7, #24]
 800a986:	60da      	str	r2, [r3, #12]
  p_handle->dirPin2        = p_dirPin2;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	69fa      	ldr	r2, [r7, #28]
 800a98c:	611a      	str	r2, [r3, #16]
  p_handle->pwmTimerHandle = p_pwmTimerHandle;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	6a3a      	ldr	r2, [r7, #32]
 800a992:	61da      	str	r2, [r3, #28]
  p_handle->pwmChannel     = p_pwmChannel;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a998:	621a      	str	r2, [r3, #32]

  MTR_setDirection(p_handle, MTR_DIRECTION_STOP);
 800a99a:	2100      	movs	r1, #0
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	f000 f80b 	bl	800a9b8 <MTR_setDirection>
  MTR_setSpeed    (p_handle, 0                 );
 800a9a2:	2100      	movs	r1, #0
 800a9a4:	68f8      	ldr	r0, [r7, #12]
 800a9a6:	f000 f87f 	bl	800aaa8 <MTR_setSpeed>

  return;
 800a9aa:	bf00      	nop
}
 800a9ac:	3710      	adds	r7, #16
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	08011b40 	.word	0x08011b40

0800a9b8 <MTR_setDirection>:

void MTR_setDirection(T_MTR_Handle *p_handle, T_MTR_DIRECTION p_direction)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	70fb      	strb	r3, [r7, #3]
  if (p_direction == p_handle->direction)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	7d1b      	ldrb	r3, [r3, #20]
 800a9c8:	78fa      	ldrb	r2, [r7, #3]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d056      	beq.n	800aa7c <MTR_setDirection+0xc4>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (p_direction == MTR_DIRECTION_STOP)
 800a9ce:	78fb      	ldrb	r3, [r7, #3]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d119      	bne.n	800aa08 <MTR_setDirection+0x50>
    {
      LOG_debug("%s motor STOP", p_handle->name);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	461a      	mov	r2, r3
 800a9da:	492a      	ldr	r1, [pc, #168]	; (800aa84 <MTR_setDirection+0xcc>)
 800a9dc:	2000      	movs	r0, #0
 800a9de:	f7ff fec7 	bl	800a770 <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_RESET);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6858      	ldr	r0, [r3, #4]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	689b      	ldr	r3, [r3, #8]
 800a9ea:	b29b      	uxth	r3, r3
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	f7f9 f830 	bl	8003a54 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_RESET);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	68d8      	ldr	r0, [r3, #12]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	691b      	ldr	r3, [r3, #16]
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	2200      	movs	r2, #0
 800aa00:	4619      	mov	r1, r3
 800aa02:	f7f9 f827 	bl	8003a54 <HAL_GPIO_WritePin>
 800aa06:	e035      	b.n	800aa74 <MTR_setDirection+0xbc>
    }
    else if (p_direction == MTR_DIRECTION_FORWARD)
 800aa08:	78fb      	ldrb	r3, [r7, #3]
 800aa0a:	2b01      	cmp	r3, #1
 800aa0c:	d119      	bne.n	800aa42 <MTR_setDirection+0x8a>
    {
      LOG_debug("%s motor go FORWARD", p_handle->name);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	461a      	mov	r2, r3
 800aa14:	491c      	ldr	r1, [pc, #112]	; (800aa88 <MTR_setDirection+0xd0>)
 800aa16:	2000      	movs	r0, #0
 800aa18:	f7ff feaa 	bl	800a770 <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_SET  );
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6858      	ldr	r0, [r3, #4]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	689b      	ldr	r3, [r3, #8]
 800aa24:	b29b      	uxth	r3, r3
 800aa26:	2201      	movs	r2, #1
 800aa28:	4619      	mov	r1, r3
 800aa2a:	f7f9 f813 	bl	8003a54 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_RESET);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	68d8      	ldr	r0, [r3, #12]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	691b      	ldr	r3, [r3, #16]
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	2200      	movs	r2, #0
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	f7f9 f80a 	bl	8003a54 <HAL_GPIO_WritePin>
 800aa40:	e018      	b.n	800aa74 <MTR_setDirection+0xbc>
    }
    else
    {
      LOG_debug("%s motor go BACKWARD", p_handle->name);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	461a      	mov	r2, r3
 800aa48:	4910      	ldr	r1, [pc, #64]	; (800aa8c <MTR_setDirection+0xd4>)
 800aa4a:	2000      	movs	r0, #0
 800aa4c:	f7ff fe90 	bl	800a770 <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_RESET);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6858      	ldr	r0, [r3, #4]
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	689b      	ldr	r3, [r3, #8]
 800aa58:	b29b      	uxth	r3, r3
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	f7f8 fff9 	bl	8003a54 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_SET  );
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	68d8      	ldr	r0, [r3, #12]
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	691b      	ldr	r3, [r3, #16]
 800aa6a:	b29b      	uxth	r3, r3
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	4619      	mov	r1, r3
 800aa70:	f7f8 fff0 	bl	8003a54 <HAL_GPIO_WritePin>
    }

    p_handle->direction = p_direction;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	78fa      	ldrb	r2, [r7, #3]
 800aa78:	751a      	strb	r2, [r3, #20]
  }

  return;
 800aa7a:	bf00      	nop
 800aa7c:	bf00      	nop
}
 800aa7e:	3708      	adds	r7, #8
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}
 800aa84:	08011b64 	.word	0x08011b64
 800aa88:	08011b74 	.word	0x08011b74
 800aa8c:	08011b88 	.word	0x08011b88

0800aa90 <MTR_getDirection>:

T_MTR_DIRECTION MTR_getDirection(T_MTR_Handle *p_handle)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b083      	sub	sp, #12
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  return p_handle->direction;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	7d1b      	ldrb	r3, [r3, #20]
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	370c      	adds	r7, #12
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bc80      	pop	{r7}
 800aaa4:	4770      	bx	lr
	...

0800aaa8 <MTR_setSpeed>:

void MTR_setSpeed(T_MTR_Handle *p_handle, uint32_t p_speed)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b082      	sub	sp, #8
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	6039      	str	r1, [r7, #0]
  if (p_speed == p_handle->speed)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	699b      	ldr	r3, [r3, #24]
 800aab6:	683a      	ldr	r2, [r7, #0]
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d02d      	beq.n	800ab18 <MTR_setSpeed+0x70>
  {
    ; /* Nothing to do */
  }
  else
  {
    LOG_debug("Setting  %s motor speed to %u", p_handle->name, p_speed);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	4917      	ldr	r1, [pc, #92]	; (800ab20 <MTR_setSpeed+0x78>)
 800aac4:	2000      	movs	r0, #0
 800aac6:	f7ff fe53 	bl	800a770 <LOG_log>

    __HAL_TIM_SET_COMPARE(p_handle->pwmTimerHandle, p_handle->pwmChannel, p_speed);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a1b      	ldr	r3, [r3, #32]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d105      	bne.n	800aade <MTR_setSpeed+0x36>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	69db      	ldr	r3, [r3, #28]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	683a      	ldr	r2, [r7, #0]
 800aada:	635a      	str	r2, [r3, #52]	; 0x34
 800aadc:	e018      	b.n	800ab10 <MTR_setSpeed+0x68>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6a1b      	ldr	r3, [r3, #32]
 800aae2:	2b04      	cmp	r3, #4
 800aae4:	d105      	bne.n	800aaf2 <MTR_setSpeed+0x4a>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	69db      	ldr	r3, [r3, #28]
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	6393      	str	r3, [r2, #56]	; 0x38
 800aaf0:	e00e      	b.n	800ab10 <MTR_setSpeed+0x68>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6a1b      	ldr	r3, [r3, #32]
 800aaf6:	2b08      	cmp	r3, #8
 800aaf8:	d105      	bne.n	800ab06 <MTR_setSpeed+0x5e>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	69db      	ldr	r3, [r3, #28]
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	63d3      	str	r3, [r2, #60]	; 0x3c
 800ab04:	e004      	b.n	800ab10 <MTR_setSpeed+0x68>
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	69db      	ldr	r3, [r3, #28]
 800ab0a:	681a      	ldr	r2, [r3, #0]
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	6413      	str	r3, [r2, #64]	; 0x40

    p_handle->speed = p_speed;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	683a      	ldr	r2, [r7, #0]
 800ab14:	619a      	str	r2, [r3, #24]
  }

  return;
 800ab16:	bf00      	nop
 800ab18:	bf00      	nop
}
 800ab1a:	3708      	adds	r7, #8
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}
 800ab20:	08011ba0 	.word	0x08011ba0

0800ab24 <MTR_getSpeed>:

uint32_t MTR_getSpeed(T_MTR_Handle *p_handle)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b083      	sub	sp, #12
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  return p_handle->speed;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	699b      	ldr	r3, [r3, #24]
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	370c      	adds	r7, #12
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bc80      	pop	{r7}
 800ab38:	4770      	bx	lr
	...

0800ab3c <PID_init>:
               float         p_kd,
               float         p_targetValue,
               float         p_minValue,
               float         p_maxValue,
               float         p_antiWindUpFactor)
{
 800ab3c:	b590      	push	{r4, r7, lr}
 800ab3e:	b085      	sub	sp, #20
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	60f8      	str	r0, [r7, #12]
 800ab44:	60b9      	str	r1, [r7, #8]
 800ab46:	607a      	str	r2, [r7, #4]
 800ab48:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing PID module for %s", p_name);
 800ab4a:	68ba      	ldr	r2, [r7, #8]
 800ab4c:	492d      	ldr	r1, [pc, #180]	; (800ac04 <PID_init+0xc8>)
 800ab4e:	2001      	movs	r0, #1
 800ab50:	f7ff fe0e 	bl	800a770 <LOG_log>

  p_handle->name            = p_name;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	68ba      	ldr	r2, [r7, #8]
 800ab58:	601a      	str	r2, [r3, #0]
  p_handle->kp              = p_kp;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	687a      	ldr	r2, [r7, #4]
 800ab5e:	605a      	str	r2, [r3, #4]
  p_handle->ki              = p_ki;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	683a      	ldr	r2, [r7, #0]
 800ab64:	609a      	str	r2, [r3, #8]
  p_handle->kd              = p_kd;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	6a3a      	ldr	r2, [r7, #32]
 800ab6a:	60da      	str	r2, [r3, #12]
  p_handle->targetValue     = p_targetValue;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab70:	611a      	str	r2, [r3, #16]
  p_handle->minValue        = p_minValue;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab76:	615a      	str	r2, [r3, #20]
  p_handle->maxValue        = p_maxValue;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab7c:	619a      	str	r2, [r3, #24]
  p_handle->antiWindUpValue = p_antiWindUpFactor * UTI_MAX(abs(p_handle->minValue), abs(p_handle->maxValue));
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	695b      	ldr	r3, [r3, #20]
 800ab82:	4618      	mov	r0, r3
 800ab84:	f7f6 fb30 	bl	80011e8 <__aeabi_f2iz>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 800ab8e:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	699b      	ldr	r3, [r3, #24]
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7f6 fb26 	bl	80011e8 <__aeabi_f2iz>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	bfb8      	it	lt
 800aba2:	425b      	neglt	r3, r3
 800aba4:	429c      	cmp	r4, r3
 800aba6:	dd0d      	ble.n	800abc4 <PID_init+0x88>
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	695b      	ldr	r3, [r3, #20]
 800abac:	4618      	mov	r0, r3
 800abae:	f7f6 fb1b 	bl	80011e8 <__aeabi_f2iz>
 800abb2:	4603      	mov	r3, r0
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	bfb8      	it	lt
 800abb8:	425b      	neglt	r3, r3
 800abba:	4618      	mov	r0, r3
 800abbc:	f7f6 f8fa 	bl	8000db4 <__aeabi_i2f>
 800abc0:	4603      	mov	r3, r0
 800abc2:	e00c      	b.n	800abde <PID_init+0xa2>
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	699b      	ldr	r3, [r3, #24]
 800abc8:	4618      	mov	r0, r3
 800abca:	f7f6 fb0d 	bl	80011e8 <__aeabi_f2iz>
 800abce:	4603      	mov	r3, r0
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	bfb8      	it	lt
 800abd4:	425b      	neglt	r3, r3
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7f6 f8ec 	bl	8000db4 <__aeabi_i2f>
 800abdc:	4603      	mov	r3, r0
 800abde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800abe0:	4618      	mov	r0, r3
 800abe2:	f7f6 f93b 	bl	8000e5c <__aeabi_fmul>
 800abe6:	4603      	mov	r3, r0
 800abe8:	461a      	mov	r2, r3
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	61da      	str	r2, [r3, #28]

  PID_reset  (p_handle       );
 800abee:	68f8      	ldr	r0, [r7, #12]
 800abf0:	f000 f80a 	bl	800ac08 <PID_reset>
  PID_logInfo(p_handle, false);
 800abf4:	2100      	movs	r1, #0
 800abf6:	68f8      	ldr	r0, [r7, #12]
 800abf8:	f000 f91c 	bl	800ae34 <PID_logInfo>

  return;
 800abfc:	bf00      	nop
}
 800abfe:	3714      	adds	r7, #20
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd90      	pop	{r4, r7, pc}
 800ac04:	08011c54 	.word	0x08011c54

0800ac08 <PID_reset>:

void PID_reset(T_PID_Handle *p_handle)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b083      	sub	sp, #12
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  p_handle->pValue        = 0.0f;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f04f 0200 	mov.w	r2, #0
 800ac16:	621a      	str	r2, [r3, #32]
  p_handle->iValue        = 0.0f;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f04f 0200 	mov.w	r2, #0
 800ac1e:	625a      	str	r2, [r3, #36]	; 0x24
  p_handle->dValue        = 0.0f;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f04f 0200 	mov.w	r2, #0
 800ac26:	629a      	str	r2, [r3, #40]	; 0x28
  p_handle->computedValue = 0.0f;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f04f 0200 	mov.w	r2, #0
 800ac2e:	62da      	str	r2, [r3, #44]	; 0x2c
  p_handle->lastError     = 0.0f;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f04f 0200 	mov.w	r2, #0
 800ac36:	631a      	str	r2, [r3, #48]	; 0x30

  return;
 800ac38:	bf00      	nop
}
 800ac3a:	370c      	adds	r7, #12
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bc80      	pop	{r7}
 800ac40:	4770      	bx	lr

0800ac42 <PID_setKp>:

void PID_setKp(T_PID_Handle *p_handle, float p_kp)
{
 800ac42:	b480      	push	{r7}
 800ac44:	b083      	sub	sp, #12
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
 800ac4a:	6039      	str	r1, [r7, #0]
  p_handle->kp = p_kp;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	683a      	ldr	r2, [r7, #0]
 800ac50:	605a      	str	r2, [r3, #4]

  return;
 800ac52:	bf00      	nop
}
 800ac54:	370c      	adds	r7, #12
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bc80      	pop	{r7}
 800ac5a:	4770      	bx	lr

0800ac5c <PID_setKi>:

void PID_setKi(T_PID_Handle *p_handle, float p_ki)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b083      	sub	sp, #12
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
  p_handle->ki = p_ki;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	683a      	ldr	r2, [r7, #0]
 800ac6a:	609a      	str	r2, [r3, #8]

  return;
 800ac6c:	bf00      	nop
}
 800ac6e:	370c      	adds	r7, #12
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bc80      	pop	{r7}
 800ac74:	4770      	bx	lr

0800ac76 <PID_setKd>:

void PID_setKd(T_PID_Handle *p_handle, float p_kd)
{
 800ac76:	b480      	push	{r7}
 800ac78:	b083      	sub	sp, #12
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	6078      	str	r0, [r7, #4]
 800ac7e:	6039      	str	r1, [r7, #0]
  p_handle->kd = p_kd;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	683a      	ldr	r2, [r7, #0]
 800ac84:	60da      	str	r2, [r3, #12]

  return;
 800ac86:	bf00      	nop
}
 800ac88:	370c      	adds	r7, #12
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bc80      	pop	{r7}
 800ac8e:	4770      	bx	lr

0800ac90 <PID_setTargetValue>:

void PID_setTargetValue(T_PID_Handle *p_handle, float p_targetValue)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b083      	sub	sp, #12
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	6039      	str	r1, [r7, #0]
  p_handle->targetValue = p_targetValue;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	683a      	ldr	r2, [r7, #0]
 800ac9e:	611a      	str	r2, [r3, #16]

  return;
 800aca0:	bf00      	nop
}
 800aca2:	370c      	adds	r7, #12
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bc80      	pop	{r7}
 800aca8:	4770      	bx	lr

0800acaa <PID_getTargetValue>:
{
  return p_handle->kd;
}

float PID_getTargetValue(T_PID_Handle *p_handle)
{
 800acaa:	b480      	push	{r7}
 800acac:	b083      	sub	sp, #12
 800acae:	af00      	add	r7, sp, #0
 800acb0:	6078      	str	r0, [r7, #4]
  return p_handle->targetValue;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	691b      	ldr	r3, [r3, #16]
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	370c      	adds	r7, #12
 800acba:	46bd      	mov	sp, r7
 800acbc:	bc80      	pop	{r7}
 800acbe:	4770      	bx	lr

0800acc0 <PID_update>:
{
  return p_handle->antiWindUpValue;
}

float PID_update(T_PID_Handle *p_handle, float p_currentValue, uint32_t p_timeDelta)
{
 800acc0:	b5b0      	push	{r4, r5, r7, lr}
 800acc2:	b088      	sub	sp, #32
 800acc4:	af02      	add	r7, sp, #8
 800acc6:	60f8      	str	r0, [r7, #12]
 800acc8:	60b9      	str	r1, [r7, #8]
 800acca:	607a      	str	r2, [r7, #4]
  int32_t l_currentError;

  l_currentError = p_handle->targetValue - p_currentValue;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	691b      	ldr	r3, [r3, #16]
 800acd0:	68b9      	ldr	r1, [r7, #8]
 800acd2:	4618      	mov	r0, r3
 800acd4:	f7f5 ffb8 	bl	8000c48 <__aeabi_fsub>
 800acd8:	4603      	mov	r3, r0
 800acda:	4618      	mov	r0, r3
 800acdc:	f7f6 fa84 	bl	80011e8 <__aeabi_f2iz>
 800ace0:	4603      	mov	r3, r0
 800ace2:	617b      	str	r3, [r7, #20]

  p_handle->pValue    =  l_currentError;
 800ace4:	6978      	ldr	r0, [r7, #20]
 800ace6:	f7f6 f865 	bl	8000db4 <__aeabi_i2f>
 800acea:	4602      	mov	r2, r0
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	621a      	str	r2, [r3, #32]
  p_handle->iValue   +=  l_currentError * p_timeDelta;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	687a      	ldr	r2, [r7, #4]
 800acf8:	fb02 f303 	mul.w	r3, r2, r3
 800acfc:	4618      	mov	r0, r3
 800acfe:	f7f6 f855 	bl	8000dac <__aeabi_ui2f>
 800ad02:	4603      	mov	r3, r0
 800ad04:	4619      	mov	r1, r3
 800ad06:	4620      	mov	r0, r4
 800ad08:	f7f5 ffa0 	bl	8000c4c <__addsf3>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	461a      	mov	r2, r3
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	625a      	str	r2, [r3, #36]	; 0x24
  p_handle->iValue    =  UTI_clampIntValue(p_handle->iValue, -p_handle->antiWindUpValue, p_handle->antiWindUpValue, true, 0);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f7f6 fa65 	bl	80011e8 <__aeabi_f2iz>
 800ad1e:	4604      	mov	r4, r0
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	69db      	ldr	r3, [r3, #28]
 800ad24:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f7f6 fa5d 	bl	80011e8 <__aeabi_f2iz>
 800ad2e:	4605      	mov	r5, r0
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	69db      	ldr	r3, [r3, #28]
 800ad34:	4618      	mov	r0, r3
 800ad36:	f7f6 fa57 	bl	80011e8 <__aeabi_f2iz>
 800ad3a:	4602      	mov	r2, r0
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	9300      	str	r3, [sp, #0]
 800ad40:	2301      	movs	r3, #1
 800ad42:	4629      	mov	r1, r5
 800ad44:	4620      	mov	r0, r4
 800ad46:	f000 fe1d 	bl	800b984 <UTI_clampIntValue>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f7f6 f831 	bl	8000db4 <__aeabi_i2f>
 800ad52:	4602      	mov	r2, r0
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	625a      	str	r2, [r3, #36]	; 0x24
  p_handle->dValue    = (l_currentError - p_handle->lastError) / p_timeDelta;
 800ad58:	6978      	ldr	r0, [r7, #20]
 800ad5a:	f7f6 f82b 	bl	8000db4 <__aeabi_i2f>
 800ad5e:	4602      	mov	r2, r0
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad64:	4619      	mov	r1, r3
 800ad66:	4610      	mov	r0, r2
 800ad68:	f7f5 ff6e 	bl	8000c48 <__aeabi_fsub>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	461c      	mov	r4, r3
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f7f6 f81b 	bl	8000dac <__aeabi_ui2f>
 800ad76:	4603      	mov	r3, r0
 800ad78:	4619      	mov	r1, r3
 800ad7a:	4620      	mov	r0, r4
 800ad7c:	f7f6 f922 	bl	8000fc4 <__aeabi_fdiv>
 800ad80:	4603      	mov	r3, r0
 800ad82:	461a      	mov	r2, r3
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	629a      	str	r2, [r3, #40]	; 0x28
  p_handle->lastError =  l_currentError;
 800ad88:	6978      	ldr	r0, [r7, #20]
 800ad8a:	f7f6 f813 	bl	8000db4 <__aeabi_i2f>
 800ad8e:	4602      	mov	r2, r0
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	631a      	str	r2, [r3, #48]	; 0x30

  p_handle->computedValue = p_handle->kp * p_handle->pValue + p_handle->ki * p_handle->iValue + p_handle->kd * p_handle->dValue;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	685a      	ldr	r2, [r3, #4]
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	6a1b      	ldr	r3, [r3, #32]
 800ad9c:	4619      	mov	r1, r3
 800ad9e:	4610      	mov	r0, r2
 800ada0:	f7f6 f85c 	bl	8000e5c <__aeabi_fmul>
 800ada4:	4603      	mov	r3, r0
 800ada6:	461c      	mov	r4, r3
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	689a      	ldr	r2, [r3, #8]
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb0:	4619      	mov	r1, r3
 800adb2:	4610      	mov	r0, r2
 800adb4:	f7f6 f852 	bl	8000e5c <__aeabi_fmul>
 800adb8:	4603      	mov	r3, r0
 800adba:	4619      	mov	r1, r3
 800adbc:	4620      	mov	r0, r4
 800adbe:	f7f5 ff45 	bl	8000c4c <__addsf3>
 800adc2:	4603      	mov	r3, r0
 800adc4:	461c      	mov	r4, r3
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	68da      	ldr	r2, [r3, #12]
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adce:	4619      	mov	r1, r3
 800add0:	4610      	mov	r0, r2
 800add2:	f7f6 f843 	bl	8000e5c <__aeabi_fmul>
 800add6:	4603      	mov	r3, r0
 800add8:	4619      	mov	r1, r3
 800adda:	4620      	mov	r0, r4
 800addc:	f7f5 ff36 	bl	8000c4c <__addsf3>
 800ade0:	4603      	mov	r3, r0
 800ade2:	461a      	mov	r2, r3
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	62da      	str	r2, [r3, #44]	; 0x2c
  p_handle->computedValue = UTI_clampIntValue(p_handle->computedValue, p_handle->minValue, p_handle->maxValue, true, 0);
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adec:	4618      	mov	r0, r3
 800adee:	f7f6 f9fb 	bl	80011e8 <__aeabi_f2iz>
 800adf2:	4604      	mov	r4, r0
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	695b      	ldr	r3, [r3, #20]
 800adf8:	4618      	mov	r0, r3
 800adfa:	f7f6 f9f5 	bl	80011e8 <__aeabi_f2iz>
 800adfe:	4605      	mov	r5, r0
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	699b      	ldr	r3, [r3, #24]
 800ae04:	4618      	mov	r0, r3
 800ae06:	f7f6 f9ef 	bl	80011e8 <__aeabi_f2iz>
 800ae0a:	4602      	mov	r2, r0
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	9300      	str	r3, [sp, #0]
 800ae10:	2301      	movs	r3, #1
 800ae12:	4629      	mov	r1, r5
 800ae14:	4620      	mov	r0, r4
 800ae16:	f000 fdb5 	bl	800b984 <UTI_clampIntValue>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f7f5 ffc9 	bl	8000db4 <__aeabi_i2f>
 800ae22:	4602      	mov	r2, r0
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	62da      	str	r2, [r3, #44]	; 0x2c

  return p_handle->computedValue;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3718      	adds	r7, #24
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bdb0      	pop	{r4, r5, r7, pc}

0800ae34 <PID_logInfo>:

void PID_logInfo(T_PID_Handle *p_handle, bool p_compactLog)
{
 800ae34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae38:	b08f      	sub	sp, #60	; 0x3c
 800ae3a:	af0a      	add	r7, sp, #40	; 0x28
 800ae3c:	60f8      	str	r0, [r7, #12]
 800ae3e:	460b      	mov	r3, r1
 800ae40:	72fb      	strb	r3, [r7, #11]
  if (p_compactLog == false)
 800ae42:	7afb      	ldrb	r3, [r7, #11]
 800ae44:	f083 0301 	eor.w	r3, r3, #1
 800ae48:	b2db      	uxtb	r3, r3
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d07a      	beq.n	800af44 <PID_logInfo+0x110>
  {
    LOG_info("% PID detailed data:", p_handle->name);
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	461a      	mov	r2, r3
 800ae54:	4959      	ldr	r1, [pc, #356]	; (800afbc <PID_logInfo+0x188>)
 800ae56:	2001      	movs	r0, #1
 800ae58:	f7ff fc8a 	bl	800a770 <LOG_log>
    LOG_info(" kp = %6.2f -  ki = %6.2f -     kd = %6.2f", p_handle->kp         , p_handle->ki      , p_handle->kd             );
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	4618      	mov	r0, r3
 800ae62:	f7f5 fb4d 	bl	8000500 <__aeabi_f2d>
 800ae66:	4680      	mov	r8, r0
 800ae68:	4689      	mov	r9, r1
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	689b      	ldr	r3, [r3, #8]
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7f5 fb46 	bl	8000500 <__aeabi_f2d>
 800ae74:	4604      	mov	r4, r0
 800ae76:	460d      	mov	r5, r1
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	68db      	ldr	r3, [r3, #12]
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f7f5 fb3f 	bl	8000500 <__aeabi_f2d>
 800ae82:	4602      	mov	r2, r0
 800ae84:	460b      	mov	r3, r1
 800ae86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ae8a:	e9cd 4500 	strd	r4, r5, [sp]
 800ae8e:	4642      	mov	r2, r8
 800ae90:	464b      	mov	r3, r9
 800ae92:	494b      	ldr	r1, [pc, #300]	; (800afc0 <PID_logInfo+0x18c>)
 800ae94:	2001      	movs	r0, #1
 800ae96:	f7ff fc6b 	bl	800a770 <LOG_log>
    LOG_info("  p = %6.2f -   i = %6.2f -      d = %6.2f", p_handle->pValue     , p_handle->iValue  , p_handle->dValue         );
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	6a1b      	ldr	r3, [r3, #32]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7f5 fb2e 	bl	8000500 <__aeabi_f2d>
 800aea4:	4680      	mov	r8, r0
 800aea6:	4689      	mov	r9, r1
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeac:	4618      	mov	r0, r3
 800aeae:	f7f5 fb27 	bl	8000500 <__aeabi_f2d>
 800aeb2:	4604      	mov	r4, r0
 800aeb4:	460d      	mov	r5, r1
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeba:	4618      	mov	r0, r3
 800aebc:	f7f5 fb20 	bl	8000500 <__aeabi_f2d>
 800aec0:	4602      	mov	r2, r0
 800aec2:	460b      	mov	r3, r1
 800aec4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800aec8:	e9cd 4500 	strd	r4, r5, [sp]
 800aecc:	4642      	mov	r2, r8
 800aece:	464b      	mov	r3, r9
 800aed0:	493c      	ldr	r1, [pc, #240]	; (800afc4 <PID_logInfo+0x190>)
 800aed2:	2001      	movs	r0, #1
 800aed4:	f7ff fc4c 	bl	800a770 <LOG_log>
    LOG_info("min = %6.2f - max = %6.2f - a.w.up = %6.2f", p_handle->minValue   , p_handle->maxValue, p_handle->antiWindUpValue);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	695b      	ldr	r3, [r3, #20]
 800aedc:	4618      	mov	r0, r3
 800aede:	f7f5 fb0f 	bl	8000500 <__aeabi_f2d>
 800aee2:	4680      	mov	r8, r0
 800aee4:	4689      	mov	r9, r1
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	699b      	ldr	r3, [r3, #24]
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7f5 fb08 	bl	8000500 <__aeabi_f2d>
 800aef0:	4604      	mov	r4, r0
 800aef2:	460d      	mov	r5, r1
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	69db      	ldr	r3, [r3, #28]
 800aef8:	4618      	mov	r0, r3
 800aefa:	f7f5 fb01 	bl	8000500 <__aeabi_f2d>
 800aefe:	4602      	mov	r2, r0
 800af00:	460b      	mov	r3, r1
 800af02:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800af06:	e9cd 4500 	strd	r4, r5, [sp]
 800af0a:	4642      	mov	r2, r8
 800af0c:	464b      	mov	r3, r9
 800af0e:	492e      	ldr	r1, [pc, #184]	; (800afc8 <PID_logInfo+0x194>)
 800af10:	2001      	movs	r0, #1
 800af12:	f7ff fc2d 	bl	800a770 <LOG_log>
    LOG_info("  t = %6.2f - val = %6.2f               "  , p_handle->targetValue, p_handle->computedValue                      );
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	691b      	ldr	r3, [r3, #16]
 800af1a:	4618      	mov	r0, r3
 800af1c:	f7f5 faf0 	bl	8000500 <__aeabi_f2d>
 800af20:	4604      	mov	r4, r0
 800af22:	460d      	mov	r5, r1
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af28:	4618      	mov	r0, r3
 800af2a:	f7f5 fae9 	bl	8000500 <__aeabi_f2d>
 800af2e:	4602      	mov	r2, r0
 800af30:	460b      	mov	r3, r1
 800af32:	e9cd 2300 	strd	r2, r3, [sp]
 800af36:	4622      	mov	r2, r4
 800af38:	462b      	mov	r3, r5
 800af3a:	4924      	ldr	r1, [pc, #144]	; (800afcc <PID_logInfo+0x198>)
 800af3c:	2001      	movs	r0, #1
 800af3e:	f7ff fc17 	bl	800a770 <LOG_log>
             p_handle->dValue,
             p_handle->targetValue,
             p_handle->computedValue);
  }

  return;
 800af42:	e036      	b.n	800afb2 <PID_logInfo+0x17e>
    LOG_info("%s PID: p = %6.2f - i = %6.2f - d = %6.2f - t = %6.2f - val = %6.2f",
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681e      	ldr	r6, [r3, #0]
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	6a1b      	ldr	r3, [r3, #32]
 800af4c:	4618      	mov	r0, r3
 800af4e:	f7f5 fad7 	bl	8000500 <__aeabi_f2d>
 800af52:	4604      	mov	r4, r0
 800af54:	460d      	mov	r5, r1
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af5a:	4618      	mov	r0, r3
 800af5c:	f7f5 fad0 	bl	8000500 <__aeabi_f2d>
 800af60:	4680      	mov	r8, r0
 800af62:	4689      	mov	r9, r1
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af68:	4618      	mov	r0, r3
 800af6a:	f7f5 fac9 	bl	8000500 <__aeabi_f2d>
 800af6e:	4682      	mov	sl, r0
 800af70:	468b      	mov	fp, r1
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	691b      	ldr	r3, [r3, #16]
 800af76:	4618      	mov	r0, r3
 800af78:	f7f5 fac2 	bl	8000500 <__aeabi_f2d>
 800af7c:	e9c7 0100 	strd	r0, r1, [r7]
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af84:	4618      	mov	r0, r3
 800af86:	f7f5 fabb 	bl	8000500 <__aeabi_f2d>
 800af8a:	4602      	mov	r2, r0
 800af8c:	460b      	mov	r3, r1
 800af8e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800af92:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af96:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800af9a:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800af9e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800afa2:	e9cd 4500 	strd	r4, r5, [sp]
 800afa6:	4632      	mov	r2, r6
 800afa8:	4909      	ldr	r1, [pc, #36]	; (800afd0 <PID_logInfo+0x19c>)
 800afaa:	2001      	movs	r0, #1
 800afac:	f7ff fbe0 	bl	800a770 <LOG_log>
  return;
 800afb0:	bf00      	nop
}
 800afb2:	3714      	adds	r7, #20
 800afb4:	46bd      	mov	sp, r7
 800afb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afba:	bf00      	nop
 800afbc:	08011c74 	.word	0x08011c74
 800afc0:	08011c8c 	.word	0x08011c8c
 800afc4:	08011cb8 	.word	0x08011cb8
 800afc8:	08011ce4 	.word	0x08011ce4
 800afcc:	08011d10 	.word	0x08011d10
 800afd0:	08011d3c 	.word	0x08011d3c

0800afd4 <RCF_init>:
              TIM_HandleTypeDef  *p_htim8 ,
              RTC_HandleTypeDef  *p_hrtc  ,
              ADC_HandleTypeDef  *p_hadc1 ,
              UART_HandleTypeDef *p_huart1,
              UART_HandleTypeDef *p_huart4)
{
 800afd4:	b590      	push	{r4, r7, lr}
 800afd6:	b089      	sub	sp, #36	; 0x24
 800afd8:	af02      	add	r7, sp, #8
 800afda:	60f8      	str	r0, [r7, #12]
 800afdc:	60b9      	str	r1, [r7, #8]
 800afde:	607a      	str	r2, [r7, #4]
 800afe0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef l_halReturnCode;

  LOG_info("Initializing RCFW module");
 800afe2:	499c      	ldr	r1, [pc, #624]	; (800b254 <RCF_init+0x280>)
 800afe4:	2001      	movs	r0, #1
 800afe6:	f7ff fbc3 	bl	800a770 <LOG_log>

  p_handle->htim1  = p_htim1 ;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	68ba      	ldr	r2, [r7, #8]
 800afee:	601a      	str	r2, [r3, #0]
  p_handle->htim2  = p_htim2 ;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	687a      	ldr	r2, [r7, #4]
 800aff4:	605a      	str	r2, [r3, #4]
  p_handle->htim3  = p_htim3 ;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	683a      	ldr	r2, [r7, #0]
 800affa:	609a      	str	r2, [r3, #8]
  p_handle->htim4  = p_htim4 ;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b000:	60da      	str	r2, [r3, #12]
  p_handle->htim5  = p_htim5 ;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b006:	611a      	str	r2, [r3, #16]
  p_handle->htim6  = p_htim6 ;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b00c:	615a      	str	r2, [r3, #20]
  p_handle->htim7  = p_htim7 ;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b012:	619a      	str	r2, [r3, #24]
  p_handle->htim8  = p_htim8 ;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b018:	61da      	str	r2, [r3, #28]
  p_handle->hrtc   = p_hrtc  ;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b01e:	625a      	str	r2, [r3, #36]	; 0x24
  p_handle->hadc1  = p_hadc1 ;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b024:	621a      	str	r2, [r3, #32]
  p_handle->huart1 = p_huart1;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b02a:	629a      	str	r2, [r3, #40]	; 0x28
  p_handle->huart4 = p_huart4;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b030:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Setup local variables */
  l_halReturnCode = HAL_OK;
 800b032:	2300      	movs	r3, #0
 800b034:	74fb      	strb	r3, [r7, #19]

  /* Setup global variables */
  SFO_init    (&g_RCF_context.commandsFifo );
 800b036:	4888      	ldr	r0, [pc, #544]	; (800b258 <RCF_init+0x284>)
 800b038:	f000 fb04 	bl	800b644 <SFO_init>
  BLU_initData(&g_RCF_context.bluetoothData);
 800b03c:	4887      	ldr	r0, [pc, #540]	; (800b25c <RCF_init+0x288>)
 800b03e:	f7fd fdcf 	bl	8008be0 <BLU_initData>

  g_RCF_context.padUpPressedStartTimeInS    = 0;
 800b042:	4b85      	ldr	r3, [pc, #532]	; (800b258 <RCF_init+0x284>)
 800b044:	2200      	movs	r2, #0
 800b046:	621a      	str	r2, [r3, #32]
  g_RCF_context.padDownPressedStartTimeInS  = 0;
 800b048:	4b83      	ldr	r3, [pc, #524]	; (800b258 <RCF_init+0x284>)
 800b04a:	2200      	movs	r2, #0
 800b04c:	625a      	str	r2, [r3, #36]	; 0x24
  g_RCF_context.padLeftPressedStartTimeInS  = 0;
 800b04e:	4b82      	ldr	r3, [pc, #520]	; (800b258 <RCF_init+0x284>)
 800b050:	2200      	movs	r2, #0
 800b052:	629a      	str	r2, [r3, #40]	; 0x28
  g_RCF_context.padRightPressedStartTimeInS = 0;
 800b054:	4b80      	ldr	r3, [pc, #512]	; (800b258 <RCF_init+0x284>)
 800b056:	2200      	movs	r2, #0
 800b058:	62da      	str	r2, [r3, #44]	; 0x2c
  g_RCF_context.swResetPollingLastTimeInS   = 0;
 800b05a:	4b7f      	ldr	r3, [pc, #508]	; (800b258 <RCF_init+0x284>)
 800b05c:	2200      	movs	r2, #0
 800b05e:	631a      	str	r2, [r3, #48]	; 0x30
  g_RCF_context.batteryPollingLastTimeInS   = 0;
 800b060:	4b7d      	ldr	r3, [pc, #500]	; (800b258 <RCF_init+0x284>)
 800b062:	2200      	movs	r2, #0
 800b064:	635a      	str	r2, [r3, #52]	; 0x34
  g_RCF_context.ledModeUpdateLastTimeInS    = 0;
 800b066:	4b7c      	ldr	r3, [pc, #496]	; (800b258 <RCF_init+0x284>)
 800b068:	2200      	movs	r2, #0
 800b06a:	639a      	str	r2, [r3, #56]	; 0x38
  g_RCF_context.driveLogInfoLastTimeInS     = 0;
 800b06c:	4b7a      	ldr	r3, [pc, #488]	; (800b258 <RCF_init+0x284>)
 800b06e:	2200      	movs	r2, #0
 800b070:	63da      	str	r2, [r3, #60]	; 0x3c
  g_RCF_context.velocityReportLastTimeInMs  = 0;
 800b072:	4b79      	ldr	r3, [pc, #484]	; (800b258 <RCF_init+0x284>)
 800b074:	2200      	movs	r2, #0
 800b076:	641a      	str	r2, [r3, #64]	; 0x40
  g_RCF_printOutput                         = RCF_PRINT_OUTPUT_TO_CONSOLE;
 800b078:	4b79      	ldr	r3, [pc, #484]	; (800b260 <RCF_init+0x28c>)
 800b07a:	2200      	movs	r2, #0
 800b07c:	701a      	strb	r2, [r3, #0]

  /* Setup console */
  CON_init(p_handle->huart1);
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b082:	4618      	mov	r0, r3
 800b084:	f7fd ff6c 	bl	8008f60 <CON_init>

  /* Setup master connection */
  MAS_init(p_handle->huart4);
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b08c:	4618      	mov	r0, r3
 800b08e:	f7ff fbd9 	bl	800a844 <MAS_init>

#ifdef DEBUG

  /* Temporary delay/workaround to deal with debugger connection issue */
  for (int i = 0; i < 10; i++)
 800b092:	2300      	movs	r3, #0
 800b094:	617b      	str	r3, [r7, #20]
 800b096:	e006      	b.n	800b0a6 <RCF_init+0xd2>
  {
    UTI_delayMs(1000);
 800b098:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b09c:	f000 fc18 	bl	800b8d0 <UTI_delayMs>
  for (int i = 0; i < 10; i++)
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	617b      	str	r3, [r7, #20]
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	2b09      	cmp	r3, #9
 800b0aa:	ddf5      	ble.n	800b098 <RCF_init+0xc4>
  }

#endif

  /* Setup and start using logs */
  LOG_init    (STP_DEFAULT_IS_LOG_ON);
 800b0ac:	2001      	movs	r0, #1
 800b0ae:	f7ff faed 	bl	800a68c <LOG_init>
  LOG_setLevel(STP_DEFAULT_LOG_LEVEL);
 800b0b2:	2000      	movs	r0, #0
 800b0b4:	f7ff fb1c 	bl	800a6f0 <LOG_setLevel>
  LOG_info    ("Starting RCFW"      );
 800b0b8:	496a      	ldr	r1, [pc, #424]	; (800b264 <RCF_init+0x290>)
 800b0ba:	2001      	movs	r0, #1
 800b0bc:	f7ff fb58 	bl	800a770 <LOG_log>

  /* Display RCFW banner */
  RCF_displayRcfwBanner();
 800b0c0:	f000 f962 	bl	800b388 <RCF_displayRcfwBanner>

  /* Initialize utilities & chronometer (used by wheels' encoders) */
  UTI_init (p_handle->htim7 , p_handle->hrtc );
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	699a      	ldr	r2, [r3, #24]
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	4610      	mov	r0, r2
 800b0d0:	f000 fbb8 	bl	800b844 <UTI_init>
  CHR_init (p_handle->htim6);
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	695b      	ldr	r3, [r3, #20]
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f7fd fe3d 	bl	8008d58 <CHR_init>
  CHR_start();
 800b0de:	f7fd fe53 	bl	8008d88 <CHR_start>

  LOG_info("Started TIMER 6 & 7 (utilities & chronometer)");
 800b0e2:	4961      	ldr	r1, [pc, #388]	; (800b268 <RCF_init+0x294>)
 800b0e4:	2001      	movs	r0, #1
 800b0e6:	f7ff fb43 	bl	800a770 <LOG_log>

  /* Initialize Timer 1 & green LED */
  l_halReturnCode = HAL_TIM_Base_Start_IT(p_handle->htim1);
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7fa fcf6 	bl	8005ae0 <HAL_TIM_Base_Start_IT>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	74fb      	strb	r3, [r7, #19]

  if (l_halReturnCode != HAL_OK)
 800b0f8:	7cfb      	ldrb	r3, [r7, #19]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d006      	beq.n	800b10c <RCF_init+0x138>
  {
    LOG_error("HAL_TIM_Base_Start_IT(&htim1) returned an error code: %d", l_halReturnCode);
 800b0fe:	7cfb      	ldrb	r3, [r7, #19]
 800b100:	461a      	mov	r2, r3
 800b102:	495a      	ldr	r1, [pc, #360]	; (800b26c <RCF_init+0x298>)
 800b104:	2003      	movs	r0, #3
 800b106:	f7ff fb33 	bl	800a770 <LOG_log>
 800b10a:	e003      	b.n	800b114 <RCF_init+0x140>
  }
  else
  {
    LOG_info("Started TIMER 1 (green LED)");
 800b10c:	4958      	ldr	r1, [pc, #352]	; (800b270 <RCF_init+0x29c>)
 800b10e:	2001      	movs	r0, #1
 800b110:	f7ff fb2e 	bl	800a770 <LOG_log>
  }

  LED_setMode(LED_MODE_BLINK_FAST);
 800b114:	2004      	movs	r0, #4
 800b116:	f7ff fa11 	bl	800a53c <LED_setMode>

  /* Initialize Timers 2, 3, 4 & 5 */
  l_halReturnCode  = HAL_TIM_Encoder_Start_IT(p_handle->htim2, TIM_CHANNEL_ALL);
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	213c      	movs	r1, #60	; 0x3c
 800b120:	4618      	mov	r0, r3
 800b122:	f7fb f915 	bl	8006350 <HAL_TIM_Encoder_Start_IT>
 800b126:	4603      	mov	r3, r0
 800b128:	74fb      	strb	r3, [r7, #19]
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(p_handle->htim3, TIM_CHANNEL_ALL);
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	689b      	ldr	r3, [r3, #8]
 800b12e:	213c      	movs	r1, #60	; 0x3c
 800b130:	4618      	mov	r0, r3
 800b132:	f7fb f90d 	bl	8006350 <HAL_TIM_Encoder_Start_IT>
 800b136:	4603      	mov	r3, r0
 800b138:	461a      	mov	r2, r3
 800b13a:	7cfb      	ldrb	r3, [r7, #19]
 800b13c:	4313      	orrs	r3, r2
 800b13e:	74fb      	strb	r3, [r7, #19]
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(p_handle->htim4, TIM_CHANNEL_ALL);
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	68db      	ldr	r3, [r3, #12]
 800b144:	213c      	movs	r1, #60	; 0x3c
 800b146:	4618      	mov	r0, r3
 800b148:	f7fb f902 	bl	8006350 <HAL_TIM_Encoder_Start_IT>
 800b14c:	4603      	mov	r3, r0
 800b14e:	461a      	mov	r2, r3
 800b150:	7cfb      	ldrb	r3, [r7, #19]
 800b152:	4313      	orrs	r3, r2
 800b154:	74fb      	strb	r3, [r7, #19]
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(p_handle->htim5, TIM_CHANNEL_ALL);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	691b      	ldr	r3, [r3, #16]
 800b15a:	213c      	movs	r1, #60	; 0x3c
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7fb f8f7 	bl	8006350 <HAL_TIM_Encoder_Start_IT>
 800b162:	4603      	mov	r3, r0
 800b164:	461a      	mov	r2, r3
 800b166:	7cfb      	ldrb	r3, [r7, #19]
 800b168:	4313      	orrs	r3, r2
 800b16a:	74fb      	strb	r3, [r7, #19]

  if (l_halReturnCode != HAL_OK)
 800b16c:	7cfb      	ldrb	r3, [r7, #19]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d006      	beq.n	800b180 <RCF_init+0x1ac>
  {
    LOG_error("HAL_TIM_Encoder_Start_IT(&htimX) returned error code(s): %d", l_halReturnCode);
 800b172:	7cfb      	ldrb	r3, [r7, #19]
 800b174:	461a      	mov	r2, r3
 800b176:	493f      	ldr	r1, [pc, #252]	; (800b274 <RCF_init+0x2a0>)
 800b178:	2003      	movs	r0, #3
 800b17a:	f7ff faf9 	bl	800a770 <LOG_log>
 800b17e:	e003      	b.n	800b188 <RCF_init+0x1b4>
  }
  else
  {
    LOG_info("Started TIMER 2, 3, 4, 5 (encoders)");
 800b180:	493d      	ldr	r1, [pc, #244]	; (800b278 <RCF_init+0x2a4>)
 800b182:	2001      	movs	r0, #1
 800b184:	f7ff faf4 	bl	800a770 <LOG_log>
  }

  /* Initialize Timer 8 */
  l_halReturnCode = HAL_TIM_Base_Start(p_handle->htim8);
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	69db      	ldr	r3, [r3, #28]
 800b18c:	4618      	mov	r0, r3
 800b18e:	f7fa fc1d 	bl	80059cc <HAL_TIM_Base_Start>
 800b192:	4603      	mov	r3, r0
 800b194:	74fb      	strb	r3, [r7, #19]

  if (l_halReturnCode != HAL_OK)
 800b196:	7cfb      	ldrb	r3, [r7, #19]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d006      	beq.n	800b1aa <RCF_init+0x1d6>
  {
    LOG_error("HAL_TIM_Base_Start(&htim8) returned an error code: %d", l_halReturnCode);
 800b19c:	7cfb      	ldrb	r3, [r7, #19]
 800b19e:	461a      	mov	r2, r3
 800b1a0:	4936      	ldr	r1, [pc, #216]	; (800b27c <RCF_init+0x2a8>)
 800b1a2:	2003      	movs	r0, #3
 800b1a4:	f7ff fae4 	bl	800a770 <LOG_log>
 800b1a8:	e003      	b.n	800b1b2 <RCF_init+0x1de>
  }
  else
  {
    LOG_info("Started TIMER 8 (PWM channels)");
 800b1aa:	4935      	ldr	r1, [pc, #212]	; (800b280 <RCF_init+0x2ac>)
 800b1ac:	2001      	movs	r0, #1
 800b1ae:	f7ff fadf 	bl	800a770 <LOG_log>
  }

  /* Initialize battery monitor */
  BAT_init(p_handle->hadc1);
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	6a1b      	ldr	r3, [r3, #32]
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7fd fbd6 	bl	8008968 <BAT_init>

  /* Initialize PWM channels */
  l_halReturnCode  = HAL_TIM_PWM_Start(p_handle->htim8, TIM_CHANNEL_1);
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	69db      	ldr	r3, [r3, #28]
 800b1c0:	2100      	movs	r1, #0
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f7fa fdfa 	bl	8005dbc <HAL_TIM_PWM_Start>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	74fb      	strb	r3, [r7, #19]
  l_halReturnCode |= HAL_TIM_PWM_Start(p_handle->htim8, TIM_CHANNEL_2);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	69db      	ldr	r3, [r3, #28]
 800b1d0:	2104      	movs	r1, #4
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f7fa fdf2 	bl	8005dbc <HAL_TIM_PWM_Start>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	461a      	mov	r2, r3
 800b1dc:	7cfb      	ldrb	r3, [r7, #19]
 800b1de:	4313      	orrs	r3, r2
 800b1e0:	74fb      	strb	r3, [r7, #19]
  l_halReturnCode |= HAL_TIM_PWM_Start(p_handle->htim8, TIM_CHANNEL_3);
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	69db      	ldr	r3, [r3, #28]
 800b1e6:	2108      	movs	r1, #8
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f7fa fde7 	bl	8005dbc <HAL_TIM_PWM_Start>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	461a      	mov	r2, r3
 800b1f2:	7cfb      	ldrb	r3, [r7, #19]
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	74fb      	strb	r3, [r7, #19]
  l_halReturnCode |= HAL_TIM_PWM_Start(p_handle->htim8, TIM_CHANNEL_4);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	69db      	ldr	r3, [r3, #28]
 800b1fc:	210c      	movs	r1, #12
 800b1fe:	4618      	mov	r0, r3
 800b200:	f7fa fddc 	bl	8005dbc <HAL_TIM_PWM_Start>
 800b204:	4603      	mov	r3, r0
 800b206:	461a      	mov	r2, r3
 800b208:	7cfb      	ldrb	r3, [r7, #19]
 800b20a:	4313      	orrs	r3, r2
 800b20c:	74fb      	strb	r3, [r7, #19]

  if (l_halReturnCode != HAL_OK)
 800b20e:	7cfb      	ldrb	r3, [r7, #19]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d006      	beq.n	800b222 <RCF_init+0x24e>
  {
    LOG_error("HAL_TIM_PWM_Start(&htim8) returned error code(s): %d", l_halReturnCode);
 800b214:	7cfb      	ldrb	r3, [r7, #19]
 800b216:	461a      	mov	r2, r3
 800b218:	491a      	ldr	r1, [pc, #104]	; (800b284 <RCF_init+0x2b0>)
 800b21a:	2003      	movs	r0, #3
 800b21c:	f7ff faa8 	bl	800a770 <LOG_log>
 800b220:	e003      	b.n	800b22a <RCF_init+0x256>
  }
  else
  {
    LOG_info("Started PWM channels");
 800b222:	4919      	ldr	r1, [pc, #100]	; (800b288 <RCF_init+0x2b4>)
 800b224:	2001      	movs	r0, #1
 800b226:	f7ff faa3 	bl	800a770 <LOG_log>
  }

  /* Initialize bluetooth control */
  BLU_init();
 800b22a:	f7fd fcc9 	bl	8008bc0 <BLU_init>

  /* Initialize driving module */
  DRV_init(p_handle->htim8, p_handle->htim4, p_handle->htim5, p_handle->htim2, p_handle->htim3);
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	69d8      	ldr	r0, [r3, #28]
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	68d9      	ldr	r1, [r3, #12]
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	691a      	ldr	r2, [r3, #16]
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	685c      	ldr	r4, [r3, #4]
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	689b      	ldr	r3, [r3, #8]
 800b242:	9300      	str	r3, [sp, #0]
 800b244:	4623      	mov	r3, r4
 800b246:	f7fd ff15 	bl	8009074 <DRV_init>

  return;
 800b24a:	bf00      	nop
}
 800b24c:	371c      	adds	r7, #28
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd90      	pop	{r4, r7, pc}
 800b252:	bf00      	nop
 800b254:	08011d80 	.word	0x08011d80
 800b258:	2000051c 	.word	0x2000051c
 800b25c:	20000528 	.word	0x20000528
 800b260:	20000c40 	.word	0x20000c40
 800b264:	08011d9c 	.word	0x08011d9c
 800b268:	08011dac 	.word	0x08011dac
 800b26c:	08011ddc 	.word	0x08011ddc
 800b270:	08011e18 	.word	0x08011e18
 800b274:	08011e34 	.word	0x08011e34
 800b278:	08011e70 	.word	0x08011e70
 800b27c:	08011e94 	.word	0x08011e94
 800b280:	08011ecc 	.word	0x08011ecc
 800b284:	08011eec 	.word	0x08011eec
 800b288:	08011f24 	.word	0x08011f24

0800b28c <RCF_update>:

void RCF_update(T_RCF_Handle *p_handle)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b086      	sub	sp, #24
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  uint32_t   l_currentTimeInS;
  uint32_t   l_currentTimeInMs;
  uint32_t   l_voltageInMv;

  /* Setup local variables */
  l_driveMode       = STP_DEFAULT_DRIVE_MODE;
 800b294:	2302      	movs	r3, #2
 800b296:	75fb      	strb	r3, [r7, #23]
  l_currentTimeInS  = 0;
 800b298:	2300      	movs	r3, #0
 800b29a:	613b      	str	r3, [r7, #16]
  l_currentTimeInMs = 0;
 800b29c:	2300      	movs	r3, #0
 800b29e:	60fb      	str	r3, [r7, #12]
  l_voltageInMv     = 0;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	60bb      	str	r3, [r7, #8]

  l_driveMode       = DRV_getMode  ();
 800b2a4:	f7fe fc3c 	bl	8009b20 <DRV_getMode>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	75fb      	strb	r3, [r7, #23]
  l_currentTimeInS  = UTI_getTimeS ();
 800b2ac:	f000 fb22 	bl	800b8f4 <UTI_getTimeS>
 800b2b0:	6138      	str	r0, [r7, #16]
  l_currentTimeInMs = UTI_getTimeMs();
 800b2b2:	f000 fb18 	bl	800b8e6 <UTI_getTimeMs>
 800b2b6:	60f8      	str	r0, [r7, #12]

  if ((STP_SW_RESET_POLLING_PERIOD_IN_S != 0) &&
      (l_currentTimeInS - g_RCF_context.swResetPollingLastTimeInS >= STP_SW_RESET_POLLING_PERIOD_IN_S))
 800b2b8:	4b31      	ldr	r3, [pc, #196]	; (800b380 <RCF_update+0xf4>)
 800b2ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  if ((STP_SW_RESET_POLLING_PERIOD_IN_S != 0) &&
 800b2bc:	693a      	ldr	r2, [r7, #16]
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d004      	beq.n	800b2cc <RCF_update+0x40>
  {
    RCF_updateSwReset();
 800b2c2:	f000 f8bd 	bl	800b440 <RCF_updateSwReset>

    g_RCF_context.swResetPollingLastTimeInS = l_currentTimeInS;
 800b2c6:	4a2e      	ldr	r2, [pc, #184]	; (800b380 <RCF_update+0xf4>)
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	6313      	str	r3, [r2, #48]	; 0x30
  {
    ; /* Nothing to do */
  }

  if ((STP_BATTERY_POLLING_PERIOD_IN_S != 0) &&
      (l_currentTimeInS - g_RCF_context.batteryPollingLastTimeInS >= STP_BATTERY_POLLING_PERIOD_IN_S))
 800b2cc:	4b2c      	ldr	r3, [pc, #176]	; (800b380 <RCF_update+0xf4>)
 800b2ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2d0:	693a      	ldr	r2, [r7, #16]
 800b2d2:	1ad3      	subs	r3, r2, r3
  if ((STP_BATTERY_POLLING_PERIOD_IN_S != 0) &&
 800b2d4:	2b09      	cmp	r3, #9
 800b2d6:	d907      	bls.n	800b2e8 <RCF_update+0x5c>
  {
    BAT_update(&l_voltageInMv);
 800b2d8:	f107 0308 	add.w	r3, r7, #8
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f7fd fb57 	bl	8008990 <BAT_update>

    g_RCF_context.batteryPollingLastTimeInS = l_currentTimeInS;
 800b2e2:	4a27      	ldr	r2, [pc, #156]	; (800b380 <RCF_update+0xf4>)
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	6353      	str	r3, [r2, #52]	; 0x34
  {
    ; /* Nothing to do */
  }

  if ((STP_LED_UPDATE_MODE_PERIOD_IN_S != 0) &&
      (l_currentTimeInS - g_RCF_context.ledModeUpdateLastTimeInS >= STP_LED_UPDATE_MODE_PERIOD_IN_S))
 800b2e8:	4b25      	ldr	r3, [pc, #148]	; (800b380 <RCF_update+0xf4>)
 800b2ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((STP_LED_UPDATE_MODE_PERIOD_IN_S != 0) &&
 800b2ec:	693a      	ldr	r2, [r7, #16]
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d008      	beq.n	800b304 <RCF_update+0x78>
  {
    RCF_updateLedMode (l_driveMode, l_voltageInMv);
 800b2f2:	68ba      	ldr	r2, [r7, #8]
 800b2f4:	7dfb      	ldrb	r3, [r7, #23]
 800b2f6:	4611      	mov	r1, r2
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f000 f961 	bl	800b5c0 <RCF_updateLedMode>

    g_RCF_context.ledModeUpdateLastTimeInS = l_currentTimeInS;
 800b2fe:	4a20      	ldr	r2, [pc, #128]	; (800b380 <RCF_update+0xf4>)
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	6393      	str	r3, [r2, #56]	; 0x38
  else
  {
    ; /* Nothing to do */
  }

  CON_updateFifo(&g_RCF_context.commandsFifo);
 800b304:	481e      	ldr	r0, [pc, #120]	; (800b380 <RCF_update+0xf4>)
 800b306:	f7fd fe7d 	bl	8009004 <CON_updateFifo>
  MAS_updateFifo(&g_RCF_context.commandsFifo);
 800b30a:	481d      	ldr	r0, [pc, #116]	; (800b380 <RCF_update+0xf4>)
 800b30c:	f7ff faec 	bl	800a8e8 <MAS_updateFifo>

  BLU_receiveData   (&g_RCF_context.bluetoothData);
 800b310:	481c      	ldr	r0, [pc, #112]	; (800b384 <RCF_update+0xf8>)
 800b312:	f7fd fc7d 	bl	8008c10 <BLU_receiveData>
  RCF_updateLogSetup(&g_RCF_context.bluetoothData, l_currentTimeInS);
 800b316:	6939      	ldr	r1, [r7, #16]
 800b318:	481a      	ldr	r0, [pc, #104]	; (800b384 <RCF_update+0xf8>)
 800b31a:	f000 f8cd 	bl	800b4b8 <RCF_updateLogSetup>

  DRV_updateAverageSpeeds();
 800b31e:	f7fd ff7f 	bl	8009220 <DRV_updateAverageSpeeds>

  /* Restart chronometer (used to compute average speeds) */
  CHR_reset();
 800b322:	f7fd fd83 	bl	8008e2c <CHR_reset>

  if ((STP_DRIVE_LOG_INFO_PERIOD_IN_S != 0) &&
      (l_currentTimeInS - g_RCF_context.driveLogInfoLastTimeInS >= STP_DRIVE_LOG_INFO_PERIOD_IN_S))
 800b326:	4b16      	ldr	r3, [pc, #88]	; (800b380 <RCF_update+0xf4>)
 800b328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b32a:	693a      	ldr	r2, [r7, #16]
 800b32c:	1ad3      	subs	r3, r2, r3
  if ((STP_DRIVE_LOG_INFO_PERIOD_IN_S != 0) &&
 800b32e:	2b04      	cmp	r3, #4
 800b330:	d90b      	bls.n	800b34a <RCF_update+0xbe>
  {
    DRV_updateFromBluetooth(&g_RCF_context.bluetoothData, true);
 800b332:	2101      	movs	r1, #1
 800b334:	4813      	ldr	r0, [pc, #76]	; (800b384 <RCF_update+0xf8>)
 800b336:	f7fd ff8b 	bl	8009250 <DRV_updateFromBluetooth>
    DRV_updateFromCommands (&g_RCF_context.commandsFifo , true);
 800b33a:	2101      	movs	r1, #1
 800b33c:	4810      	ldr	r0, [pc, #64]	; (800b380 <RCF_update+0xf4>)
 800b33e:	f7fe f8e9 	bl	8009514 <DRV_updateFromCommands>

    g_RCF_context.driveLogInfoLastTimeInS = l_currentTimeInS;
 800b342:	4a0f      	ldr	r2, [pc, #60]	; (800b380 <RCF_update+0xf4>)
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	63d3      	str	r3, [r2, #60]	; 0x3c
 800b348:	e007      	b.n	800b35a <RCF_update+0xce>
  }
  else
  {
    DRV_updateFromBluetooth(&g_RCF_context.bluetoothData, false);
 800b34a:	2100      	movs	r1, #0
 800b34c:	480d      	ldr	r0, [pc, #52]	; (800b384 <RCF_update+0xf8>)
 800b34e:	f7fd ff7f 	bl	8009250 <DRV_updateFromBluetooth>
    DRV_updateFromCommands(&g_RCF_context.commandsFifo  , false);
 800b352:	2100      	movs	r1, #0
 800b354:	480a      	ldr	r0, [pc, #40]	; (800b380 <RCF_update+0xf4>)
 800b356:	f7fe f8dd 	bl	8009514 <DRV_updateFromCommands>
  }

  if ((STP_VELOCITY_REPORT_PERIOD_IN_MS != 0) &&
      (l_currentTimeInMs - g_RCF_context.velocityReportLastTimeInMs >= STP_VELOCITY_REPORT_PERIOD_IN_MS))
 800b35a:	4b09      	ldr	r3, [pc, #36]	; (800b380 <RCF_update+0xf4>)
 800b35c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b35e:	68fa      	ldr	r2, [r7, #12]
 800b360:	1ad3      	subs	r3, r2, r3
  if ((STP_VELOCITY_REPORT_PERIOD_IN_MS != 0) &&
 800b362:	f241 3287 	movw	r2, #4999	; 0x1387
 800b366:	4293      	cmp	r3, r2
 800b368:	d905      	bls.n	800b376 <RCF_update+0xea>
  {
    DRV_reportVelocity();
 800b36a:	f7fe fb87 	bl	8009a7c <DRV_reportVelocity>

    g_RCF_context.velocityReportLastTimeInMs = l_currentTimeInMs;
 800b36e:	4a04      	ldr	r2, [pc, #16]	; (800b380 <RCF_update+0xf4>)
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	6413      	str	r3, [r2, #64]	; 0x40
  else
  {
    ; /* Nothing to do */
  }

  return;
 800b374:	bf00      	nop
 800b376:	bf00      	nop
}
 800b378:	3718      	adds	r7, #24
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop
 800b380:	2000051c 	.word	0x2000051c
 800b384:	20000528 	.word	0x20000528

0800b388 <RCF_displayRcfwBanner>:

static void RCF_displayRcfwBanner(void)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	af00      	add	r7, sp, #0
  /* Used ASCII art generator from https://patorjk.com with font called "Colossal" */
  LOG_info("");
 800b38c:	4914      	ldr	r1, [pc, #80]	; (800b3e0 <RCF_displayRcfwBanner+0x58>)
 800b38e:	2001      	movs	r0, #1
 800b390:	f7ff f9ee 	bl	800a770 <LOG_log>
  LOG_info("    8888888b.        .d8888b.       8888888888      888       888"  );
 800b394:	4913      	ldr	r1, [pc, #76]	; (800b3e4 <RCF_displayRcfwBanner+0x5c>)
 800b396:	2001      	movs	r0, #1
 800b398:	f7ff f9ea 	bl	800a770 <LOG_log>
  LOG_info("    888   Y88b      d88P  Y88b      888             888   o   888"  );
 800b39c:	4912      	ldr	r1, [pc, #72]	; (800b3e8 <RCF_displayRcfwBanner+0x60>)
 800b39e:	2001      	movs	r0, #1
 800b3a0:	f7ff f9e6 	bl	800a770 <LOG_log>
  LOG_info("    888    888      888    888      888             888  d8b  888"  );
 800b3a4:	4911      	ldr	r1, [pc, #68]	; (800b3ec <RCF_displayRcfwBanner+0x64>)
 800b3a6:	2001      	movs	r0, #1
 800b3a8:	f7ff f9e2 	bl	800a770 <LOG_log>
  LOG_info("    888   d88P      888             8888888         888 d888b 888"  );
 800b3ac:	4910      	ldr	r1, [pc, #64]	; (800b3f0 <RCF_displayRcfwBanner+0x68>)
 800b3ae:	2001      	movs	r0, #1
 800b3b0:	f7ff f9de 	bl	800a770 <LOG_log>
  LOG_info("    8888888P\"       888             888             888d88888b888" );
 800b3b4:	490f      	ldr	r1, [pc, #60]	; (800b3f4 <RCF_displayRcfwBanner+0x6c>)
 800b3b6:	2001      	movs	r0, #1
 800b3b8:	f7ff f9da 	bl	800a770 <LOG_log>
  LOG_info("    888 T88b        888    888      888             88888P Y88888"  );
 800b3bc:	490e      	ldr	r1, [pc, #56]	; (800b3f8 <RCF_displayRcfwBanner+0x70>)
 800b3be:	2001      	movs	r0, #1
 800b3c0:	f7ff f9d6 	bl	800a770 <LOG_log>
  LOG_info("    888  T88b       Y88b  d88P      888             8888P   Y8888"  );
 800b3c4:	490d      	ldr	r1, [pc, #52]	; (800b3fc <RCF_displayRcfwBanner+0x74>)
 800b3c6:	2001      	movs	r0, #1
 800b3c8:	f7ff f9d2 	bl	800a770 <LOG_log>
  LOG_info("    888   T88b       \"Y8888P\"       888             888P     Y888");
 800b3cc:	490c      	ldr	r1, [pc, #48]	; (800b400 <RCF_displayRcfwBanner+0x78>)
 800b3ce:	2001      	movs	r0, #1
 800b3d0:	f7ff f9ce 	bl	800a770 <LOG_log>
  LOG_info("");
 800b3d4:	4902      	ldr	r1, [pc, #8]	; (800b3e0 <RCF_displayRcfwBanner+0x58>)
 800b3d6:	2001      	movs	r0, #1
 800b3d8:	f7ff f9ca 	bl	800a770 <LOG_log>

  return;
 800b3dc:	bf00      	nop
}
 800b3de:	bd80      	pop	{r7, pc}
 800b3e0:	08011f3c 	.word	0x08011f3c
 800b3e4:	08011f40 	.word	0x08011f40
 800b3e8:	08011f84 	.word	0x08011f84
 800b3ec:	08011fc8 	.word	0x08011fc8
 800b3f0:	0801200c 	.word	0x0801200c
 800b3f4:	08012050 	.word	0x08012050
 800b3f8:	08012094 	.word	0x08012094
 800b3fc:	080120d8 	.word	0x080120d8
 800b400:	0801211c 	.word	0x0801211c

0800b404 <RCF_togglePrintOutput>:

static void RCF_togglePrintOutput(void)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	af00      	add	r7, sp, #0
  if (g_RCF_printOutput == RCF_PRINT_OUTPUT_TO_CONSOLE)
 800b408:	4b0a      	ldr	r3, [pc, #40]	; (800b434 <RCF_togglePrintOutput+0x30>)
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d107      	bne.n	800b420 <RCF_togglePrintOutput+0x1c>
  {
    LOG_info("Directing print to MASTER");
 800b410:	4909      	ldr	r1, [pc, #36]	; (800b438 <RCF_togglePrintOutput+0x34>)
 800b412:	2001      	movs	r0, #1
 800b414:	f7ff f9ac 	bl	800a770 <LOG_log>

    g_RCF_printOutput = RCF_PRINT_OUTPUT_TO_MASTER;
 800b418:	4b06      	ldr	r3, [pc, #24]	; (800b434 <RCF_togglePrintOutput+0x30>)
 800b41a:	2201      	movs	r2, #1
 800b41c:	701a      	strb	r2, [r3, #0]
    LOG_info("Directing print to CONSOLE");

    g_RCF_printOutput = RCF_PRINT_OUTPUT_TO_CONSOLE;
  }

  return;
 800b41e:	e007      	b.n	800b430 <RCF_togglePrintOutput+0x2c>
    LOG_info("Directing print to CONSOLE");
 800b420:	4906      	ldr	r1, [pc, #24]	; (800b43c <RCF_togglePrintOutput+0x38>)
 800b422:	2001      	movs	r0, #1
 800b424:	f7ff f9a4 	bl	800a770 <LOG_log>
    g_RCF_printOutput = RCF_PRINT_OUTPUT_TO_CONSOLE;
 800b428:	4b02      	ldr	r3, [pc, #8]	; (800b434 <RCF_togglePrintOutput+0x30>)
 800b42a:	2200      	movs	r2, #0
 800b42c:	701a      	strb	r2, [r3, #0]
  return;
 800b42e:	bf00      	nop
}
 800b430:	bd80      	pop	{r7, pc}
 800b432:	bf00      	nop
 800b434:	20000c40 	.word	0x20000c40
 800b438:	08012160 	.word	0x08012160
 800b43c:	0801217c 	.word	0x0801217c

0800b440 <RCF_updateSwReset>:

static void RCF_updateSwReset(void)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b082      	sub	sp, #8
 800b444:	af00      	add	r7, sp, #0
  GPIO_PinState l_pinState;

  l_pinState = HAL_GPIO_ReadPin(SW_RESET_GPIO_Port, SW_RESET_Pin);
 800b446:	2101      	movs	r1, #1
 800b448:	4816      	ldr	r0, [pc, #88]	; (800b4a4 <RCF_updateSwReset+0x64>)
 800b44a:	f7f8 fadd 	bl	8003a08 <HAL_GPIO_ReadPin>
 800b44e:	4603      	mov	r3, r0
 800b450:	71fb      	strb	r3, [r7, #7]

  if (l_pinState == GPIO_PIN_SET)
 800b452:	79fb      	ldrb	r3, [r7, #7]
 800b454:	2b01      	cmp	r3, #1
 800b456:	d021      	beq.n	800b49c <RCF_updateSwReset+0x5c>
  {
    ; /* Nothing to do */
  }
  else
  {
    LOG_info("SW reset will be triggered in 3s");
 800b458:	4913      	ldr	r1, [pc, #76]	; (800b4a8 <RCF_updateSwReset+0x68>)
 800b45a:	2001      	movs	r0, #1
 800b45c:	f7ff f988 	bl	800a770 <LOG_log>
    HAL_Delay(1000);
 800b460:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b464:	f7f7 f9a8 	bl	80027b8 <HAL_Delay>
    LOG_info("SW reset will be triggered in 2s");
 800b468:	4910      	ldr	r1, [pc, #64]	; (800b4ac <RCF_updateSwReset+0x6c>)
 800b46a:	2001      	movs	r0, #1
 800b46c:	f7ff f980 	bl	800a770 <LOG_log>
    HAL_Delay(1000);
 800b470:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b474:	f7f7 f9a0 	bl	80027b8 <HAL_Delay>
    LOG_info("SW reset will be triggered in 1s");
 800b478:	490d      	ldr	r1, [pc, #52]	; (800b4b0 <RCF_updateSwReset+0x70>)
 800b47a:	2001      	movs	r0, #1
 800b47c:	f7ff f978 	bl	800a770 <LOG_log>
    HAL_Delay(1000);
 800b480:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b484:	f7f7 f998 	bl	80027b8 <HAL_Delay>
    LOG_info("Resetting...");
 800b488:	490a      	ldr	r1, [pc, #40]	; (800b4b4 <RCF_updateSwReset+0x74>)
 800b48a:	2001      	movs	r0, #1
 800b48c:	f7ff f970 	bl	800a770 <LOG_log>
    HAL_Delay(100);
 800b490:	2064      	movs	r0, #100	; 0x64
 800b492:	f7f7 f991 	bl	80027b8 <HAL_Delay>

    HAL_NVIC_SystemReset();
 800b496:	f7f7 fed1 	bl	800323c <HAL_NVIC_SystemReset>
  }

  return;
 800b49a:	bf00      	nop
 800b49c:	bf00      	nop
}
 800b49e:	3708      	adds	r7, #8
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	40011000 	.word	0x40011000
 800b4a8:	08012198 	.word	0x08012198
 800b4ac:	080121bc 	.word	0x080121bc
 800b4b0:	080121e0 	.word	0x080121e0
 800b4b4:	08012204 	.word	0x08012204

0800b4b8 <RCF_updateLogSetup>:

static void RCF_updateLogSetup(T_BLU_Data *p_data, uint32_t p_timeInS)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	6039      	str	r1, [r7, #0]
  switch (p_data->button)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	7c1b      	ldrb	r3, [r3, #16]
 800b4c6:	3b05      	subs	r3, #5
 800b4c8:	2b03      	cmp	r3, #3
 800b4ca:	d85b      	bhi.n	800b584 <RCF_updateLogSetup+0xcc>
 800b4cc:	a201      	add	r2, pc, #4	; (adr r2, 800b4d4 <RCF_updateLogSetup+0x1c>)
 800b4ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4d2:	bf00      	nop
 800b4d4:	0800b4e5 	.word	0x0800b4e5
 800b4d8:	0800b55d 	.word	0x0800b55d
 800b4dc:	0800b50d 	.word	0x0800b50d
 800b4e0:	0800b535 	.word	0x0800b535
  {
    case BLU_BUTTON_PAD_UP:
      if (g_RCF_context.padUpPressedStartTimeInS == 0)
 800b4e4:	4b35      	ldr	r3, [pc, #212]	; (800b5bc <RCF_updateLogSetup+0x104>)
 800b4e6:	6a1b      	ldr	r3, [r3, #32]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d105      	bne.n	800b4f8 <RCF_updateLogSetup+0x40>
      {
        g_RCF_context.padUpPressedStartTimeInS = p_timeInS;
 800b4ec:	4a33      	ldr	r2, [pc, #204]	; (800b5bc <RCF_updateLogSetup+0x104>)
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	6213      	str	r3, [r2, #32]

        LOG_increaseLevel();
 800b4f2:	f7ff f90d 	bl	800a710 <LOG_increaseLevel>
      }
      else
      {
        g_RCF_context.padUpPressedStartTimeInS = 0;
      }
      break;
 800b4f6:	e047      	b.n	800b588 <RCF_updateLogSetup+0xd0>
      else if (p_timeInS - g_RCF_context.padUpPressedStartTimeInS < STP_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 800b4f8:	4b30      	ldr	r3, [pc, #192]	; (800b5bc <RCF_updateLogSetup+0x104>)
 800b4fa:	6a1b      	ldr	r3, [r3, #32]
 800b4fc:	683a      	ldr	r2, [r7, #0]
 800b4fe:	1ad3      	subs	r3, r2, r3
 800b500:	2b01      	cmp	r3, #1
 800b502:	d941      	bls.n	800b588 <RCF_updateLogSetup+0xd0>
        g_RCF_context.padUpPressedStartTimeInS = 0;
 800b504:	4b2d      	ldr	r3, [pc, #180]	; (800b5bc <RCF_updateLogSetup+0x104>)
 800b506:	2200      	movs	r2, #0
 800b508:	621a      	str	r2, [r3, #32]
      break;
 800b50a:	e03d      	b.n	800b588 <RCF_updateLogSetup+0xd0>

    case BLU_BUTTON_PAD_DOWN:
      if (g_RCF_context.padDownPressedStartTimeInS == 0)
 800b50c:	4b2b      	ldr	r3, [pc, #172]	; (800b5bc <RCF_updateLogSetup+0x104>)
 800b50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b510:	2b00      	cmp	r3, #0
 800b512:	d105      	bne.n	800b520 <RCF_updateLogSetup+0x68>
      {
        g_RCF_context.padDownPressedStartTimeInS = p_timeInS;
 800b514:	4a29      	ldr	r2, [pc, #164]	; (800b5bc <RCF_updateLogSetup+0x104>)
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	6253      	str	r3, [r2, #36]	; 0x24

        LOG_decreaseLevel();
 800b51a:	f7ff f911 	bl	800a740 <LOG_decreaseLevel>
      }
      else
      {
        g_RCF_context.padDownPressedStartTimeInS = 0;
      }
      break;
 800b51e:	e035      	b.n	800b58c <RCF_updateLogSetup+0xd4>
      else if (p_timeInS - g_RCF_context.padDownPressedStartTimeInS < STP_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 800b520:	4b26      	ldr	r3, [pc, #152]	; (800b5bc <RCF_updateLogSetup+0x104>)
 800b522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b524:	683a      	ldr	r2, [r7, #0]
 800b526:	1ad3      	subs	r3, r2, r3
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d92f      	bls.n	800b58c <RCF_updateLogSetup+0xd4>
        g_RCF_context.padDownPressedStartTimeInS = 0;
 800b52c:	4b23      	ldr	r3, [pc, #140]	; (800b5bc <RCF_updateLogSetup+0x104>)
 800b52e:	2200      	movs	r2, #0
 800b530:	625a      	str	r2, [r3, #36]	; 0x24
      break;
 800b532:	e02b      	b.n	800b58c <RCF_updateLogSetup+0xd4>

    case BLU_BUTTON_PAD_LEFT:
      if (g_RCF_context.padLeftPressedStartTimeInS == 0)
 800b534:	4b21      	ldr	r3, [pc, #132]	; (800b5bc <RCF_updateLogSetup+0x104>)
 800b536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d105      	bne.n	800b548 <RCF_updateLogSetup+0x90>
      {
        g_RCF_context.padLeftPressedStartTimeInS = p_timeInS;
 800b53c:	4a1f      	ldr	r2, [pc, #124]	; (800b5bc <RCF_updateLogSetup+0x104>)
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	6293      	str	r3, [r2, #40]	; 0x28

        LOG_toggleOnOff();
 800b542:	f7ff f8b7 	bl	800a6b4 <LOG_toggleOnOff>
      }
      else
      {
        g_RCF_context.padLeftPressedStartTimeInS = 0;
      }
      break;
 800b546:	e023      	b.n	800b590 <RCF_updateLogSetup+0xd8>
      else if (p_timeInS - g_RCF_context.padLeftPressedStartTimeInS < STP_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 800b548:	4b1c      	ldr	r3, [pc, #112]	; (800b5bc <RCF_updateLogSetup+0x104>)
 800b54a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b54c:	683a      	ldr	r2, [r7, #0]
 800b54e:	1ad3      	subs	r3, r2, r3
 800b550:	2b01      	cmp	r3, #1
 800b552:	d91d      	bls.n	800b590 <RCF_updateLogSetup+0xd8>
        g_RCF_context.padLeftPressedStartTimeInS = 0;
 800b554:	4b19      	ldr	r3, [pc, #100]	; (800b5bc <RCF_updateLogSetup+0x104>)
 800b556:	2200      	movs	r2, #0
 800b558:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 800b55a:	e019      	b.n	800b590 <RCF_updateLogSetup+0xd8>

    case BLU_BUTTON_PAD_RIGHT:
      if (g_RCF_context.padRightPressedStartTimeInS == 0)
 800b55c:	4b17      	ldr	r3, [pc, #92]	; (800b5bc <RCF_updateLogSetup+0x104>)
 800b55e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b560:	2b00      	cmp	r3, #0
 800b562:	d105      	bne.n	800b570 <RCF_updateLogSetup+0xb8>
      {
        g_RCF_context.padRightPressedStartTimeInS = p_timeInS;
 800b564:	4a15      	ldr	r2, [pc, #84]	; (800b5bc <RCF_updateLogSetup+0x104>)
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	62d3      	str	r3, [r2, #44]	; 0x2c

        RCF_togglePrintOutput();
 800b56a:	f7ff ff4b 	bl	800b404 <RCF_togglePrintOutput>
      }
      else
      {
        g_RCF_context.padRightPressedStartTimeInS = 0;
      }
      break;
 800b56e:	e011      	b.n	800b594 <RCF_updateLogSetup+0xdc>
      else if (p_timeInS - g_RCF_context.padRightPressedStartTimeInS < STP_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 800b570:	4b12      	ldr	r3, [pc, #72]	; (800b5bc <RCF_updateLogSetup+0x104>)
 800b572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b574:	683a      	ldr	r2, [r7, #0]
 800b576:	1ad3      	subs	r3, r2, r3
 800b578:	2b01      	cmp	r3, #1
 800b57a:	d90b      	bls.n	800b594 <RCF_updateLogSetup+0xdc>
        g_RCF_context.padRightPressedStartTimeInS = 0;
 800b57c:	4b0f      	ldr	r3, [pc, #60]	; (800b5bc <RCF_updateLogSetup+0x104>)
 800b57e:	2200      	movs	r2, #0
 800b580:	62da      	str	r2, [r3, #44]	; 0x2c
      break;
 800b582:	e007      	b.n	800b594 <RCF_updateLogSetup+0xdc>

    default:
      ; /* Nothing to do */;
      break;
 800b584:	bf00      	nop
 800b586:	e006      	b.n	800b596 <RCF_updateLogSetup+0xde>
      break;
 800b588:	bf00      	nop
 800b58a:	e004      	b.n	800b596 <RCF_updateLogSetup+0xde>
      break;
 800b58c:	bf00      	nop
 800b58e:	e002      	b.n	800b596 <RCF_updateLogSetup+0xde>
      break;
 800b590:	bf00      	nop
 800b592:	e000      	b.n	800b596 <RCF_updateLogSetup+0xde>
      break;
 800b594:	bf00      	nop
  }

  if ((p_data->button != BLU_BUTTON_PAD_UP) && (p_data->button != BLU_BUTTON_PAD_DOWN))
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	7c1b      	ldrb	r3, [r3, #16]
 800b59a:	2b05      	cmp	r3, #5
 800b59c:	d00a      	beq.n	800b5b4 <RCF_updateLogSetup+0xfc>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	7c1b      	ldrb	r3, [r3, #16]
 800b5a2:	2b07      	cmp	r3, #7
 800b5a4:	d006      	beq.n	800b5b4 <RCF_updateLogSetup+0xfc>
  {
    g_RCF_context.padUpPressedStartTimeInS   = 0;
 800b5a6:	4b05      	ldr	r3, [pc, #20]	; (800b5bc <RCF_updateLogSetup+0x104>)
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	621a      	str	r2, [r3, #32]
    g_RCF_context.padDownPressedStartTimeInS = 0;
 800b5ac:	4b03      	ldr	r3, [pc, #12]	; (800b5bc <RCF_updateLogSetup+0x104>)
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	625a      	str	r2, [r3, #36]	; 0x24
  else
  {
    ; /* Nothing to do */;
  }

  return;
 800b5b2:	bf00      	nop
 800b5b4:	bf00      	nop
}
 800b5b6:	3708      	adds	r7, #8
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}
 800b5bc:	2000051c 	.word	0x2000051c

0800b5c0 <RCF_updateLedMode>:

static void RCF_updateLedMode(T_DRV_MODE p_driveMode, uint32_t p_voltageInMv)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b082      	sub	sp, #8
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	6039      	str	r1, [r7, #0]
 800b5ca:	71fb      	strb	r3, [r7, #7]
  /* Regarding LED mode, battery check is prioritary on user requests. */
  /* Ignore 0 value as we could get it at startup or while debugging.  */
  if ((p_voltageInMv != 0) && (p_voltageInMv < STP_MIN_BATTERY_LEVEL_IN_MV))
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d00d      	beq.n	800b5ee <RCF_updateLedMode+0x2e>
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	f242 720f 	movw	r2, #9999	; 0x270f
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d808      	bhi.n	800b5ee <RCF_updateLedMode+0x2e>
  {
    LOG_warning("Battery is getting low: %u mV", p_voltageInMv);
 800b5dc:	683a      	ldr	r2, [r7, #0]
 800b5de:	4911      	ldr	r1, [pc, #68]	; (800b624 <RCF_updateLedMode+0x64>)
 800b5e0:	2002      	movs	r0, #2
 800b5e2:	f7ff f8c5 	bl	800a770 <LOG_log>

    LED_setMode(LED_MODE_FORCED_OFF);
 800b5e6:	2000      	movs	r0, #0
 800b5e8:	f7fe ffa8 	bl	800a53c <LED_setMode>
 800b5ec:	e016      	b.n	800b61c <RCF_updateLedMode+0x5c>
  }
  else
  {
    switch (p_driveMode)
 800b5ee:	79fb      	ldrb	r3, [r7, #7]
 800b5f0:	2b02      	cmp	r3, #2
 800b5f2:	d00e      	beq.n	800b612 <RCF_updateLedMode+0x52>
 800b5f4:	2b02      	cmp	r3, #2
 800b5f6:	dc10      	bgt.n	800b61a <RCF_updateLedMode+0x5a>
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d002      	beq.n	800b602 <RCF_updateLedMode+0x42>
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d004      	beq.n	800b60a <RCF_updateLedMode+0x4a>
        LED_setMode(LED_MODE_BLINK_FAST);
        break;

      default:
        ; /* Nothing to do */
        break;
 800b600:	e00b      	b.n	800b61a <RCF_updateLedMode+0x5a>
        LED_setMode(LED_MODE_BLINK_SLOW);
 800b602:	2002      	movs	r0, #2
 800b604:	f7fe ff9a 	bl	800a53c <LED_setMode>
        break;
 800b608:	e008      	b.n	800b61c <RCF_updateLedMode+0x5c>
        LED_setMode(LED_MODE_BLINK_MEDIUM);
 800b60a:	2003      	movs	r0, #3
 800b60c:	f7fe ff96 	bl	800a53c <LED_setMode>
        break;
 800b610:	e004      	b.n	800b61c <RCF_updateLedMode+0x5c>
        LED_setMode(LED_MODE_BLINK_FAST);
 800b612:	2004      	movs	r0, #4
 800b614:	f7fe ff92 	bl	800a53c <LED_setMode>
        break;
 800b618:	e000      	b.n	800b61c <RCF_updateLedMode+0x5c>
        break;
 800b61a:	bf00      	nop
    }
  }

  return;
 800b61c:	bf00      	nop
}
 800b61e:	3708      	adds	r7, #8
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}
 800b624:	08012214 	.word	0x08012214

0800b628 <SFO_initData>:
#include "string_fifo.h"

#include "log.h"

void SFO_initData(T_SFO_data *p_data)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b082      	sub	sp, #8
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
  (void)memset(p_data, 0, CST_STRING_FIFO_MAX_STRING_LENGTH);
 800b630:	2214      	movs	r2, #20
 800b632:	2100      	movs	r1, #0
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f000 fc6b 	bl	800bf10 <memset>

  return;
 800b63a:	bf00      	nop
}
 800b63c:	3708      	adds	r7, #8
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
	...

0800b644 <SFO_init>:

void SFO_init(T_SFO_Handle *p_fifo)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b082      	sub	sp, #8
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  LOG_debug("String FIFO now empty");
 800b64c:	4908      	ldr	r1, [pc, #32]	; (800b670 <SFO_init+0x2c>)
 800b64e:	2000      	movs	r0, #0
 800b650:	f7ff f88e 	bl	800a770 <LOG_log>

  p_fifo->head  = NULL;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2200      	movs	r2, #0
 800b658:	601a      	str	r2, [r3, #0]
  p_fifo->tail  = NULL;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2200      	movs	r2, #0
 800b65e:	605a      	str	r2, [r3, #4]
  p_fifo->count = 0;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2200      	movs	r2, #0
 800b664:	609a      	str	r2, [r3, #8]

  return;
 800b666:	bf00      	nop
}
 800b668:	3708      	adds	r7, #8
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}
 800b66e:	bf00      	nop
 800b670:	08012234 	.word	0x08012234

0800b674 <SFO_push>:

void SFO_push(T_SFO_Handle *p_fifo, T_SFO_data *p_dataIn)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b084      	sub	sp, #16
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	6039      	str	r1, [r7, #0]
  T_SFO_Element *l_element;

  if (p_fifo->count == CST_STRING_FIFO_MAX_ELEMENTS)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	689b      	ldr	r3, [r3, #8]
 800b682:	2b0a      	cmp	r3, #10
 800b684:	d105      	bne.n	800b692 <SFO_push+0x1e>
  {
    LOG_error("SFO_push() failure - String FIFO is full (%u elements)", CST_STRING_FIFO_MAX_ELEMENTS);
 800b686:	220a      	movs	r2, #10
 800b688:	4917      	ldr	r1, [pc, #92]	; (800b6e8 <SFO_push+0x74>)
 800b68a:	2003      	movs	r0, #3
 800b68c:	f7ff f870 	bl	800a770 <LOG_log>

      p_fifo->count++;
    }
  }

  return;
 800b690:	e027      	b.n	800b6e2 <SFO_push+0x6e>
    l_element = (T_SFO_Element *)malloc(sizeof(T_SFO_Element));
 800b692:	2018      	movs	r0, #24
 800b694:	f000 fc2c 	bl	800bef0 <malloc>
 800b698:	4603      	mov	r3, r0
 800b69a:	60fb      	str	r3, [r7, #12]
    if (l_element == NULL)
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d104      	bne.n	800b6ac <SFO_push+0x38>
      LOG_error("SFO_push() failure - Could not allocate new memory");
 800b6a2:	4912      	ldr	r1, [pc, #72]	; (800b6ec <SFO_push+0x78>)
 800b6a4:	2003      	movs	r0, #3
 800b6a6:	f7ff f863 	bl	800a770 <LOG_log>
  return;
 800b6aa:	e01a      	b.n	800b6e2 <SFO_push+0x6e>
      (void)strncpy(l_element->data, *p_dataIn, CST_STRING_FIFO_MAX_STRING_LENGTH);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	2214      	movs	r2, #20
 800b6b0:	6839      	ldr	r1, [r7, #0]
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f001 fc3b 	bl	800cf2e <strncpy>
      l_element->nextElement = p_fifo->head;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681a      	ldr	r2, [r3, #0]
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	615a      	str	r2, [r3, #20]
      p_fifo->head           = l_element;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	68fa      	ldr	r2, [r7, #12]
 800b6c4:	601a      	str	r2, [r3, #0]
      if (p_fifo->tail == NULL)
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d103      	bne.n	800b6d6 <SFO_push+0x62>
        p_fifo->tail = p_fifo->head;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681a      	ldr	r2, [r3, #0]
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	605a      	str	r2, [r3, #4]
      p_fifo->count++;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	689b      	ldr	r3, [r3, #8]
 800b6da:	1c5a      	adds	r2, r3, #1
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	609a      	str	r2, [r3, #8]
  return;
 800b6e0:	bf00      	nop
}
 800b6e2:	3710      	adds	r7, #16
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	0801224c 	.word	0x0801224c
 800b6ec:	08012284 	.word	0x08012284

0800b6f0 <SFO_pop>:

void SFO_pop(T_SFO_Handle *p_fifo, T_SFO_data *p_dataOut)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	6039      	str	r1, [r7, #0]
  T_SFO_Element *l_element;

  if (p_fifo->count == 0)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	689b      	ldr	r3, [r3, #8]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d104      	bne.n	800b70c <SFO_pop+0x1c>
  {
    LOG_error("SFO_pop() failure - String FIFO is empty");
 800b702:	491a      	ldr	r1, [pc, #104]	; (800b76c <SFO_pop+0x7c>)
 800b704:	2003      	movs	r0, #3
 800b706:	f7ff f833 	bl	800a770 <LOG_log>
    {
      SFO_init(p_fifo);
    }
  }

  return;
 800b70a:	e02c      	b.n	800b766 <SFO_pop+0x76>
    (void)strncpy(*p_dataOut, p_fifo->tail->data, CST_STRING_FIFO_MAX_STRING_LENGTH);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	2214      	movs	r2, #20
 800b712:	4619      	mov	r1, r3
 800b714:	6838      	ldr	r0, [r7, #0]
 800b716:	f001 fc0a 	bl	800cf2e <strncpy>
    free(p_fifo->tail);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	685b      	ldr	r3, [r3, #4]
 800b71e:	4618      	mov	r0, r3
 800b720:	f000 fbee 	bl	800bf00 <free>
    if (p_fifo->count > 1)
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	689b      	ldr	r3, [r3, #8]
 800b728:	2b01      	cmp	r3, #1
 800b72a:	d918      	bls.n	800b75e <SFO_pop+0x6e>
      l_element = p_fifo->head;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	60fb      	str	r3, [r7, #12]
      while (l_element->nextElement != p_fifo->tail)
 800b732:	e002      	b.n	800b73a <SFO_pop+0x4a>
        l_element = l_element->nextElement;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	695b      	ldr	r3, [r3, #20]
 800b738:	60fb      	str	r3, [r7, #12]
      while (l_element->nextElement != p_fifo->tail)
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	695a      	ldr	r2, [r3, #20]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	429a      	cmp	r2, r3
 800b744:	d1f6      	bne.n	800b734 <SFO_pop+0x44>
      l_element->nextElement = NULL;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2200      	movs	r2, #0
 800b74a:	615a      	str	r2, [r3, #20]
      p_fifo->tail           = l_element;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	68fa      	ldr	r2, [r7, #12]
 800b750:	605a      	str	r2, [r3, #4]
      p_fifo->count--;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	689b      	ldr	r3, [r3, #8]
 800b756:	1e5a      	subs	r2, r3, #1
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	609a      	str	r2, [r3, #8]
  return;
 800b75c:	e003      	b.n	800b766 <SFO_pop+0x76>
      SFO_init(p_fifo);
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f7ff ff70 	bl	800b644 <SFO_init>
  return;
 800b764:	bf00      	nop
}
 800b766:	3710      	adds	r7, #16
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}
 800b76c:	080122b8 	.word	0x080122b8

0800b770 <SFO_getCount>:

uint32_t SFO_getCount(T_SFO_Handle *p_fifo)
{
 800b770:	b480      	push	{r7}
 800b772:	b083      	sub	sp, #12
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  return p_fifo->count;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	689b      	ldr	r3, [r3, #8]
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	370c      	adds	r7, #12
 800b780:	46bd      	mov	sp, r7
 800b782:	bc80      	pop	{r7}
 800b784:	4770      	bx	lr
	...

0800b788 <SFO_logInfo>:

void SFO_logInfo(T_SFO_Handle *p_fifo)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b084      	sub	sp, #16
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  T_SFO_Element *l_element;

  if (p_fifo->count == 0)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	689b      	ldr	r3, [r3, #8]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d104      	bne.n	800b7a2 <SFO_logInfo+0x1a>
  {
    LOG_info("String FIFO is empty");
 800b798:	4924      	ldr	r1, [pc, #144]	; (800b82c <SFO_logInfo+0xa4>)
 800b79a:	2001      	movs	r0, #1
 800b79c:	f7fe ffe8 	bl	800a770 <LOG_log>

      l_element = l_element->nextElement;
    }
  }

  return;
 800b7a0:	e040      	b.n	800b824 <SFO_logInfo+0x9c>
    LOG_info("String FIFO: %u element(s)", p_fifo->count);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	689b      	ldr	r3, [r3, #8]
 800b7a6:	461a      	mov	r2, r3
 800b7a8:	4921      	ldr	r1, [pc, #132]	; (800b830 <SFO_logInfo+0xa8>)
 800b7aa:	2001      	movs	r0, #1
 800b7ac:	f7fe ffe0 	bl	800a770 <LOG_log>
    l_element = p_fifo->head;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	60fb      	str	r3, [r7, #12]
    while (l_element != NULL)
 800b7b6:	e031      	b.n	800b81c <SFO_logInfo+0x94>
      if ((l_element == p_fifo->head) && (l_element == p_fifo->tail))
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	68fa      	ldr	r2, [r7, #12]
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	d10b      	bne.n	800b7da <SFO_logInfo+0x52>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	685b      	ldr	r3, [r3, #4]
 800b7c6:	68fa      	ldr	r2, [r7, #12]
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	d106      	bne.n	800b7da <SFO_logInfo+0x52>
        LOG_info("HEAD -> '%s' <- TAIL", l_element->data);
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	4918      	ldr	r1, [pc, #96]	; (800b834 <SFO_logInfo+0xac>)
 800b7d2:	2001      	movs	r0, #1
 800b7d4:	f7fe ffcc 	bl	800a770 <LOG_log>
 800b7d8:	e01d      	b.n	800b816 <SFO_logInfo+0x8e>
      else if (l_element == p_fifo->head)
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	68fa      	ldr	r2, [r7, #12]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d106      	bne.n	800b7f2 <SFO_logInfo+0x6a>
        LOG_info("HEAD -> '%s'", l_element->data);
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	461a      	mov	r2, r3
 800b7e8:	4913      	ldr	r1, [pc, #76]	; (800b838 <SFO_logInfo+0xb0>)
 800b7ea:	2001      	movs	r0, #1
 800b7ec:	f7fe ffc0 	bl	800a770 <LOG_log>
 800b7f0:	e011      	b.n	800b816 <SFO_logInfo+0x8e>
      else if (l_element == p_fifo->tail)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	685b      	ldr	r3, [r3, #4]
 800b7f6:	68fa      	ldr	r2, [r7, #12]
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d106      	bne.n	800b80a <SFO_logInfo+0x82>
        LOG_info("TAIL -> '%s'", l_element->data);
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	461a      	mov	r2, r3
 800b800:	490e      	ldr	r1, [pc, #56]	; (800b83c <SFO_logInfo+0xb4>)
 800b802:	2001      	movs	r0, #1
 800b804:	f7fe ffb4 	bl	800a770 <LOG_log>
 800b808:	e005      	b.n	800b816 <SFO_logInfo+0x8e>
        LOG_info("        '%s'", l_element->data);
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	461a      	mov	r2, r3
 800b80e:	490c      	ldr	r1, [pc, #48]	; (800b840 <SFO_logInfo+0xb8>)
 800b810:	2001      	movs	r0, #1
 800b812:	f7fe ffad 	bl	800a770 <LOG_log>
      l_element = l_element->nextElement;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	695b      	ldr	r3, [r3, #20]
 800b81a:	60fb      	str	r3, [r7, #12]
    while (l_element != NULL)
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d1ca      	bne.n	800b7b8 <SFO_logInfo+0x30>
  return;
 800b822:	bf00      	nop
}
 800b824:	3710      	adds	r7, #16
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	080122e4 	.word	0x080122e4
 800b830:	080122fc 	.word	0x080122fc
 800b834:	08012318 	.word	0x08012318
 800b838:	08012330 	.word	0x08012330
 800b83c:	08012340 	.word	0x08012340
 800b840:	08012350 	.word	0x08012350

0800b844 <UTI_init>:
static void     UTI_resetRtcTime        (RTC_TimeTypeDef *p_time);
static uint32_t UTI_turnRtcTimeToSeconds(RTC_TimeTypeDef *p_time);

void UTI_init(TIM_HandleTypeDef *p_usDelayHandle,
              RTC_HandleTypeDef *p_sTimerHandle)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b084      	sub	sp, #16
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef l_halReturnCode;

  LOG_info("Initializing utilities");
 800b84e:	4910      	ldr	r1, [pc, #64]	; (800b890 <UTI_init+0x4c>)
 800b850:	2001      	movs	r0, #1
 800b852:	f7fe ff8d 	bl	800a770 <LOG_log>

  g_UTI_context.usDelayHandle = p_usDelayHandle;
 800b856:	4a0f      	ldr	r2, [pc, #60]	; (800b894 <UTI_init+0x50>)
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6013      	str	r3, [r2, #0]
  g_UTI_context.sTimerHandle  = p_sTimerHandle ;
 800b85c:	4a0d      	ldr	r2, [pc, #52]	; (800b894 <UTI_init+0x50>)
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	6053      	str	r3, [r2, #4]

  l_halReturnCode = HAL_TIM_Base_Start(p_usDelayHandle);
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f7fa f8b2 	bl	80059cc <HAL_TIM_Base_Start>
 800b868:	4603      	mov	r3, r0
 800b86a:	73fb      	strb	r3, [r7, #15]

  if (l_halReturnCode != HAL_OK)
 800b86c:	7bfb      	ldrb	r3, [r7, #15]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d006      	beq.n	800b880 <UTI_init+0x3c>
  {
    LOG_error("HAL_TIM_Base_Start() returned an error code: %d", l_halReturnCode);
 800b872:	7bfb      	ldrb	r3, [r7, #15]
 800b874:	461a      	mov	r2, r3
 800b876:	4908      	ldr	r1, [pc, #32]	; (800b898 <UTI_init+0x54>)
 800b878:	2003      	movs	r0, #3
 800b87a:	f7fe ff79 	bl	800a770 <LOG_log>
  else
  {
    LOG_info("Micro-second delay timer started");
  }

  return;
 800b87e:	e004      	b.n	800b88a <UTI_init+0x46>
    LOG_info("Micro-second delay timer started");
 800b880:	4906      	ldr	r1, [pc, #24]	; (800b89c <UTI_init+0x58>)
 800b882:	2001      	movs	r0, #1
 800b884:	f7fe ff74 	bl	800a770 <LOG_log>
  return;
 800b888:	bf00      	nop
}
 800b88a:	3710      	adds	r7, #16
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}
 800b890:	08012360 	.word	0x08012360
 800b894:	20000560 	.word	0x20000560
 800b898:	08012378 	.word	0x08012378
 800b89c:	080123a8 	.word	0x080123a8

0800b8a0 <UTI_delayUs>:

void UTI_delayUs(uint32_t p_delay)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b083      	sub	sp, #12
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
    LOG_error("Input delay, %u, is greater than maximum allowed value: %u", p_delay, UINT32_MAX);
  }
  else
  {
    /* Reset the micro-seconds counter */
    __HAL_TIM_SET_COUNTER(g_UTI_context.usDelayHandle, 0);
 800b8a8:	4b08      	ldr	r3, [pc, #32]	; (800b8cc <UTI_delayUs+0x2c>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for the counter to reach the input micro-seconds number */
    while (__HAL_TIM_GET_COUNTER(g_UTI_context.usDelayHandle) < p_delay)
 800b8b2:	bf00      	nop
 800b8b4:	4b05      	ldr	r3, [pc, #20]	; (800b8cc <UTI_delayUs+0x2c>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8bc:	687a      	ldr	r2, [r7, #4]
 800b8be:	429a      	cmp	r2, r3
 800b8c0:	d8f8      	bhi.n	800b8b4 <UTI_delayUs+0x14>
    {
      ; /* Nothing to do */
    }
  }

  return;
 800b8c2:	bf00      	nop
}
 800b8c4:	370c      	adds	r7, #12
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bc80      	pop	{r7}
 800b8ca:	4770      	bx	lr
 800b8cc:	20000560 	.word	0x20000560

0800b8d0 <UTI_delayMs>:

void UTI_delayMs(uint32_t p_delay)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b082      	sub	sp, #8
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  HAL_Delay(p_delay);
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f7f6 ff6d 	bl	80027b8 <HAL_Delay>

  return;
 800b8de:	bf00      	nop
}
 800b8e0:	3708      	adds	r7, #8
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}

0800b8e6 <UTI_getTimeMs>:

uint32_t UTI_getTimeMs(void)
{
 800b8e6:	b580      	push	{r7, lr}
 800b8e8:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b8ea:	f7f6 ff5b 	bl	80027a4 <HAL_GetTick>
 800b8ee:	4603      	mov	r3, r0
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	bd80      	pop	{r7, pc}

0800b8f4 <UTI_getTimeS>:

uint32_t UTI_getTimeS(void)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef l_rtcTime;
  uint32_t        l_currentTimeInS;

  UTI_getTimeRtc(&l_rtcTime);
 800b8fa:	463b      	mov	r3, r7
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f000 f80b 	bl	800b918 <UTI_getTimeRtc>

  l_currentTimeInS = UTI_turnRtcTimeToSeconds(&l_rtcTime);
 800b902:	463b      	mov	r3, r7
 800b904:	4618      	mov	r0, r3
 800b906:	f000 f909 	bl	800bb1c <UTI_turnRtcTimeToSeconds>
 800b90a:	6078      	str	r0, [r7, #4]

  return l_currentTimeInS;
 800b90c:	687b      	ldr	r3, [r7, #4]
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3708      	adds	r7, #8
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}
	...

0800b918 <UTI_getTimeRtc>:

void UTI_getTimeRtc(RTC_TimeTypeDef *p_time)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b084      	sub	sp, #16
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef l_halReturnCode;
  RTC_TimeTypeDef   l_rtcTime;
  RTC_DateTypeDef   l_rtcDate;

  l_halReturnCode = HAL_RTC_GetTime(g_UTI_context.sTimerHandle, &l_rtcTime, RTC_FORMAT_BCD);
 800b920:	4b17      	ldr	r3, [pc, #92]	; (800b980 <UTI_getTimeRtc+0x68>)
 800b922:	685b      	ldr	r3, [r3, #4]
 800b924:	f107 010c 	add.w	r1, r7, #12
 800b928:	2201      	movs	r2, #1
 800b92a:	4618      	mov	r0, r3
 800b92c:	f7f9 fa74 	bl	8004e18 <HAL_RTC_GetTime>
 800b930:	4603      	mov	r3, r0
 800b932:	73fb      	strb	r3, [r7, #15]

  if (l_halReturnCode != HAL_OK)
 800b934:	7bfb      	ldrb	r3, [r7, #15]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d004      	beq.n	800b944 <UTI_getTimeRtc+0x2c>
  {
    /* As this method can be called by logging/debug, just reset time in case of failure */
    UTI_resetRtcTime(&l_rtcTime);
 800b93a:	f107 030c 	add.w	r3, r7, #12
 800b93e:	4618      	mov	r0, r3
 800b940:	f000 f8da 	bl	800baf8 <UTI_resetRtcTime>
  else
  {
    ; /* Nothing to to */
  }

  l_halReturnCode = HAL_RTC_GetDate(g_UTI_context.sTimerHandle, &l_rtcDate, RTC_FORMAT_BCD);
 800b944:	4b0e      	ldr	r3, [pc, #56]	; (800b980 <UTI_getTimeRtc+0x68>)
 800b946:	685b      	ldr	r3, [r3, #4]
 800b948:	f107 0108 	add.w	r1, r7, #8
 800b94c:	2201      	movs	r2, #1
 800b94e:	4618      	mov	r0, r3
 800b950:	f7f9 fc66 	bl	8005220 <HAL_RTC_GetDate>
 800b954:	4603      	mov	r3, r0
 800b956:	73fb      	strb	r3, [r7, #15]

  if (l_halReturnCode != HAL_OK)
 800b958:	7bfb      	ldrb	r3, [r7, #15]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d004      	beq.n	800b968 <UTI_getTimeRtc+0x50>
  {
    /* As this method can be called by logging/debug, just reset time in case of failure */
    UTI_resetRtcTime(&l_rtcTime);
 800b95e:	f107 030c 	add.w	r3, r7, #12
 800b962:	4618      	mov	r0, r3
 800b964:	f000 f8c8 	bl	800baf8 <UTI_resetRtcTime>
  else
  {
    ; /* Nothing to to */
  }

  *p_time = l_rtcTime;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	461a      	mov	r2, r3
 800b96c:	f107 030c 	add.w	r3, r7, #12
 800b970:	8819      	ldrh	r1, [r3, #0]
 800b972:	789b      	ldrb	r3, [r3, #2]
 800b974:	8011      	strh	r1, [r2, #0]
 800b976:	7093      	strb	r3, [r2, #2]

  return;
 800b978:	bf00      	nop
}
 800b97a:	3710      	adds	r7, #16
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}
 800b980:	20000560 	.word	0x20000560

0800b984 <UTI_clampIntValue>:

int32_t UTI_clampIntValue(int32_t p_value, int32_t p_minValue, int32_t p_maxValue, bool p_clampToNearest, int32_t p_clampValue)
{
 800b984:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b986:	b087      	sub	sp, #28
 800b988:	af02      	add	r7, sp, #8
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	60b9      	str	r1, [r7, #8]
 800b98e:	607a      	str	r2, [r7, #4]
 800b990:	70fb      	strb	r3, [r7, #3]
  return (int32_t)UTI_clampFloatValue(p_value, p_minValue, p_maxValue, p_clampToNearest, p_clampValue);
 800b992:	68f8      	ldr	r0, [r7, #12]
 800b994:	f7f5 fa0e 	bl	8000db4 <__aeabi_i2f>
 800b998:	4604      	mov	r4, r0
 800b99a:	68b8      	ldr	r0, [r7, #8]
 800b99c:	f7f5 fa0a 	bl	8000db4 <__aeabi_i2f>
 800b9a0:	4605      	mov	r5, r0
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f7f5 fa06 	bl	8000db4 <__aeabi_i2f>
 800b9a8:	4606      	mov	r6, r0
 800b9aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9ac:	f7f5 fa02 	bl	8000db4 <__aeabi_i2f>
 800b9b0:	4602      	mov	r2, r0
 800b9b2:	78fb      	ldrb	r3, [r7, #3]
 800b9b4:	9200      	str	r2, [sp, #0]
 800b9b6:	4632      	mov	r2, r6
 800b9b8:	4629      	mov	r1, r5
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	f000 f809 	bl	800b9d2 <UTI_clampFloatValue>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7f5 fc10 	bl	80011e8 <__aeabi_f2iz>
 800b9c8:	4603      	mov	r3, r0
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3714      	adds	r7, #20
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b9d2 <UTI_clampFloatValue>:

float UTI_clampFloatValue(float p_value, float p_minValue, float p_maxValue, bool p_clampToNearest, float p_clampValue)
{
 800b9d2:	b580      	push	{r7, lr}
 800b9d4:	b086      	sub	sp, #24
 800b9d6:	af00      	add	r7, sp, #0
 800b9d8:	60f8      	str	r0, [r7, #12]
 800b9da:	60b9      	str	r1, [r7, #8]
 800b9dc:	607a      	str	r2, [r7, #4]
 800b9de:	70fb      	strb	r3, [r7, #3]
  float l_returnValue;

  if (p_value < p_minValue)
 800b9e0:	68b9      	ldr	r1, [r7, #8]
 800b9e2:	68f8      	ldr	r0, [r7, #12]
 800b9e4:	f7f5 fbd8 	bl	8001198 <__aeabi_fcmplt>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d008      	beq.n	800ba00 <UTI_clampFloatValue+0x2e>
  {
    if (p_clampToNearest == true)
 800b9ee:	78fb      	ldrb	r3, [r7, #3]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d002      	beq.n	800b9fa <UTI_clampFloatValue+0x28>
    {
      l_returnValue = p_minValue;
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	617b      	str	r3, [r7, #20]
 800b9f8:	e014      	b.n	800ba24 <UTI_clampFloatValue+0x52>
    }
    else
    {
      l_returnValue = p_clampValue;
 800b9fa:	6a3b      	ldr	r3, [r7, #32]
 800b9fc:	617b      	str	r3, [r7, #20]
 800b9fe:	e011      	b.n	800ba24 <UTI_clampFloatValue+0x52>
    }
  }
  else if (p_value > p_maxValue)
 800ba00:	6879      	ldr	r1, [r7, #4]
 800ba02:	68f8      	ldr	r0, [r7, #12]
 800ba04:	f7f5 fbe6 	bl	80011d4 <__aeabi_fcmpgt>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d008      	beq.n	800ba20 <UTI_clampFloatValue+0x4e>
  {
    if (p_clampToNearest == true)
 800ba0e:	78fb      	ldrb	r3, [r7, #3]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d002      	beq.n	800ba1a <UTI_clampFloatValue+0x48>
    {
      l_returnValue = p_maxValue;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	617b      	str	r3, [r7, #20]
 800ba18:	e004      	b.n	800ba24 <UTI_clampFloatValue+0x52>
    }
    else
    {
      l_returnValue = p_clampValue;
 800ba1a:	6a3b      	ldr	r3, [r7, #32]
 800ba1c:	617b      	str	r3, [r7, #20]
 800ba1e:	e001      	b.n	800ba24 <UTI_clampFloatValue+0x52>
    }
  }
  else
  {
    l_returnValue = p_value;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	617b      	str	r3, [r7, #20]
  }

  return l_returnValue;
 800ba24:	697b      	ldr	r3, [r7, #20]
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3718      	adds	r7, #24
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}

0800ba2e <UTI_normalizeIntValue>:

int32_t UTI_normalizeIntValue(int32_t p_value, int32_t p_inMinValue, int32_t p_inMaxValue, int32_t p_outMinValue, int32_t p_outMaxValue, bool p_isInversionNeeded)
{
 800ba2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba32:	b086      	sub	sp, #24
 800ba34:	af02      	add	r7, sp, #8
 800ba36:	60f8      	str	r0, [r7, #12]
 800ba38:	60b9      	str	r1, [r7, #8]
 800ba3a:	607a      	str	r2, [r7, #4]
 800ba3c:	603b      	str	r3, [r7, #0]
  return (int32_t)UTI_normalizeFloatValue(p_value, p_inMinValue, p_inMaxValue, p_outMinValue, p_outMaxValue, p_isInversionNeeded);
 800ba3e:	68f8      	ldr	r0, [r7, #12]
 800ba40:	f7f5 f9b8 	bl	8000db4 <__aeabi_i2f>
 800ba44:	4604      	mov	r4, r0
 800ba46:	68b8      	ldr	r0, [r7, #8]
 800ba48:	f7f5 f9b4 	bl	8000db4 <__aeabi_i2f>
 800ba4c:	4605      	mov	r5, r0
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f7f5 f9b0 	bl	8000db4 <__aeabi_i2f>
 800ba54:	4606      	mov	r6, r0
 800ba56:	6838      	ldr	r0, [r7, #0]
 800ba58:	f7f5 f9ac 	bl	8000db4 <__aeabi_i2f>
 800ba5c:	4680      	mov	r8, r0
 800ba5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba60:	f7f5 f9a8 	bl	8000db4 <__aeabi_i2f>
 800ba64:	4602      	mov	r2, r0
 800ba66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ba6a:	9301      	str	r3, [sp, #4]
 800ba6c:	9200      	str	r2, [sp, #0]
 800ba6e:	4643      	mov	r3, r8
 800ba70:	4632      	mov	r2, r6
 800ba72:	4629      	mov	r1, r5
 800ba74:	4620      	mov	r0, r4
 800ba76:	f000 f80a 	bl	800ba8e <UTI_normalizeFloatValue>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f7f5 fbb3 	bl	80011e8 <__aeabi_f2iz>
 800ba82:	4603      	mov	r3, r0
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3710      	adds	r7, #16
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ba8e <UTI_normalizeFloatValue>:

float UTI_normalizeFloatValue(float p_value, float p_inMinValue, float p_inMaxValue, float p_outMinValue, float p_outMaxValue, bool p_isInversionNeeded)
{
 800ba8e:	b590      	push	{r4, r7, lr}
 800ba90:	b087      	sub	sp, #28
 800ba92:	af00      	add	r7, sp, #0
 800ba94:	60f8      	str	r0, [r7, #12]
 800ba96:	60b9      	str	r1, [r7, #8]
 800ba98:	607a      	str	r2, [r7, #4]
 800ba9a:	603b      	str	r3, [r7, #0]
  float l_returnValue;
  float l_ratio;

  l_ratio       = (p_outMaxValue - p_outMinValue) / (p_inMaxValue - p_inMinValue);
 800ba9c:	6839      	ldr	r1, [r7, #0]
 800ba9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800baa0:	f7f5 f8d2 	bl	8000c48 <__aeabi_fsub>
 800baa4:	4603      	mov	r3, r0
 800baa6:	461c      	mov	r4, r3
 800baa8:	68b9      	ldr	r1, [r7, #8]
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f7f5 f8cc 	bl	8000c48 <__aeabi_fsub>
 800bab0:	4603      	mov	r3, r0
 800bab2:	4619      	mov	r1, r3
 800bab4:	4620      	mov	r0, r4
 800bab6:	f7f5 fa85 	bl	8000fc4 <__aeabi_fdiv>
 800baba:	4603      	mov	r3, r0
 800babc:	613b      	str	r3, [r7, #16]
  l_returnValue =  (p_value - p_inMinValue) * l_ratio + p_outMinValue;
 800babe:	68b9      	ldr	r1, [r7, #8]
 800bac0:	68f8      	ldr	r0, [r7, #12]
 800bac2:	f7f5 f8c1 	bl	8000c48 <__aeabi_fsub>
 800bac6:	4603      	mov	r3, r0
 800bac8:	6939      	ldr	r1, [r7, #16]
 800baca:	4618      	mov	r0, r3
 800bacc:	f7f5 f9c6 	bl	8000e5c <__aeabi_fmul>
 800bad0:	4603      	mov	r3, r0
 800bad2:	4619      	mov	r1, r3
 800bad4:	6838      	ldr	r0, [r7, #0]
 800bad6:	f7f5 f8b9 	bl	8000c4c <__addsf3>
 800bada:	4603      	mov	r3, r0
 800badc:	617b      	str	r3, [r7, #20]

  if (p_isInversionNeeded == true)
 800bade:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d003      	beq.n	800baee <UTI_normalizeFloatValue+0x60>
  {
    l_returnValue *= -1.0f;
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800baec:	617b      	str	r3, [r7, #20]
  else
  {
    ; /* Nothing to do */
  }

  return l_returnValue;
 800baee:	697b      	ldr	r3, [r7, #20]
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	371c      	adds	r7, #28
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd90      	pop	{r4, r7, pc}

0800baf8 <UTI_resetRtcTime>:

static void UTI_resetRtcTime(RTC_TimeTypeDef *p_time)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b083      	sub	sp, #12
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  p_time->Hours   = 0;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2200      	movs	r2, #0
 800bb04:	701a      	strb	r2, [r3, #0]
  p_time->Minutes = 0;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	705a      	strb	r2, [r3, #1]
  p_time->Seconds = 0;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	709a      	strb	r2, [r3, #2]

  return;
 800bb12:	bf00      	nop
}
 800bb14:	370c      	adds	r7, #12
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bc80      	pop	{r7}
 800bb1a:	4770      	bx	lr

0800bb1c <UTI_turnRtcTimeToSeconds>:

static uint32_t UTI_turnRtcTimeToSeconds(RTC_TimeTypeDef *p_time)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b083      	sub	sp, #12
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
  return p_time->Hours * 3600 + p_time->Minutes * 60 + p_time->Seconds;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	461a      	mov	r2, r3
 800bb2a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800bb2e:	fb03 f202 	mul.w	r2, r3, r2
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	785b      	ldrb	r3, [r3, #1]
 800bb36:	4619      	mov	r1, r3
 800bb38:	460b      	mov	r3, r1
 800bb3a:	011b      	lsls	r3, r3, #4
 800bb3c:	1a5b      	subs	r3, r3, r1
 800bb3e:	009b      	lsls	r3, r3, #2
 800bb40:	4413      	add	r3, r2
 800bb42:	687a      	ldr	r2, [r7, #4]
 800bb44:	7892      	ldrb	r2, [r2, #2]
 800bb46:	4413      	add	r3, r2
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	370c      	adds	r7, #12
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bc80      	pop	{r7}
 800bb50:	4770      	bx	lr
	...

0800bb54 <WHL_init>:
              TIM_HandleTypeDef *p_pwmTimerHandle,
              uint32_t           p_pwmChannel,
              bool               p_invertOnUpdate,
              TIM_HandleTypeDef *p_encoderTimerHandle,
              bool               p_isMotorOn)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b08a      	sub	sp, #40	; 0x28
 800bb58:	af06      	add	r7, sp, #24
 800bb5a:	60f8      	str	r0, [r7, #12]
 800bb5c:	60b9      	str	r1, [r7, #8]
 800bb5e:	607a      	str	r2, [r7, #4]
 800bb60:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing wheel module for %s", p_name);
 800bb62:	68ba      	ldr	r2, [r7, #8]
 800bb64:	4924      	ldr	r1, [pc, #144]	; (800bbf8 <WHL_init+0xa4>)
 800bb66:	2001      	movs	r0, #1
 800bb68:	f7fe fe02 	bl	800a770 <LOG_log>

  p_handle->name = p_name;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	68ba      	ldr	r2, [r7, #8]
 800bb70:	601a      	str	r2, [r3, #0]

  /* Setup motor (with a 0 speed & stopped direction, at this point) */
  MTR_init(&p_handle->motor,
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	1d18      	adds	r0, r3, #4
 800bb76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb78:	9303      	str	r3, [sp, #12]
 800bb7a:	6a3b      	ldr	r3, [r7, #32]
 800bb7c:	9302      	str	r3, [sp, #8]
 800bb7e:	69fb      	ldr	r3, [r7, #28]
 800bb80:	9301      	str	r3, [sp, #4]
 800bb82:	69bb      	ldr	r3, [r7, #24]
 800bb84:	9300      	str	r3, [sp, #0]
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	687a      	ldr	r2, [r7, #4]
 800bb8a:	68b9      	ldr	r1, [r7, #8]
 800bb8c:	f7fe fee4 	bl	800a958 <MTR_init>
            p_dirPin2,
            p_pwmTimerHandle,
            p_pwmChannel);

  /* Setup encoder */
  ENC_init(&p_handle->encoder,
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800bb96:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800bb9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb9c:	68b9      	ldr	r1, [r7, #8]
 800bb9e:	f7fe fc73 	bl	800a488 <ENC_init>
            p_name,
            p_invertOnUpdate,
            p_encoderTimerHandle);

  /* Setup speed buffer */
  CBU_init(&p_handle->speedBuffer);
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	336c      	adds	r3, #108	; 0x6c
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7fd f956 	bl	8008e58 <CBU_init>

  /* Setup average speed */
  p_handle->averageSpeed = 0;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	f04f 0200 	mov.w	r2, #0
 800bbb2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Setup PID (with a target speed to 0) */
  PID_init(&p_handle->pid,
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800bbbc:	f04f 0300 	mov.w	r3, #0
 800bbc0:	9304      	str	r3, [sp, #16]
 800bbc2:	4b0e      	ldr	r3, [pc, #56]	; (800bbfc <WHL_init+0xa8>)
 800bbc4:	9303      	str	r3, [sp, #12]
 800bbc6:	f04f 0300 	mov.w	r3, #0
 800bbca:	9302      	str	r3, [sp, #8]
 800bbcc:	f04f 0300 	mov.w	r3, #0
 800bbd0:	9301      	str	r3, [sp, #4]
 800bbd2:	f04f 0300 	mov.w	r3, #0
 800bbd6:	9300      	str	r3, [sp, #0]
 800bbd8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800bbdc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800bbe0:	68b9      	ldr	r1, [r7, #8]
 800bbe2:	f7fe ffab 	bl	800ab3c <PID_init>
            0,
            STP_DRIVE_MIN_SPEED,
            STP_DRIVE_MAX_SPEED,
            STP_DRIVE_PID_ANTI_WIND_UP_FACTOR);

  p_handle->isMotorOn = p_isMotorOn;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800bbec:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return;
 800bbf0:	bf00      	nop
}
 800bbf2:	3710      	adds	r7, #16
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	080123cc 	.word	0x080123cc
 800bbfc:	42200000 	.word	0x42200000

0800bc00 <WHL_turnMotorOn>:

void WHL_turnMotorOn(T_WHL_Handle *p_handle)
{
 800bc00:	b480      	push	{r7}
 800bc02:	b083      	sub	sp, #12
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  p_handle->isMotorOn = true;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return;
 800bc10:	bf00      	nop
}
 800bc12:	370c      	adds	r7, #12
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bc80      	pop	{r7}
 800bc18:	4770      	bx	lr

0800bc1a <WHL_turnMotorOff>:

void WHL_turnMotorOff(T_WHL_Handle *p_handle)
{
 800bc1a:	b580      	push	{r7, lr}
 800bc1c:	b082      	sub	sp, #8
 800bc1e:	af00      	add	r7, sp, #0
 800bc20:	6078      	str	r0, [r7, #4]
  MTR_setSpeed(&p_handle->motor, 0);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	3304      	adds	r3, #4
 800bc26:	2100      	movs	r1, #0
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f7fe ff3d 	bl	800aaa8 <MTR_setSpeed>

  p_handle->isMotorOn = false;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2200      	movs	r2, #0
 800bc32:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return;
 800bc36:	bf00      	nop
}
 800bc38:	3708      	adds	r7, #8
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}

0800bc3e <WHL_updateEncoder>:

void WHL_updateEncoder(T_WHL_Handle *p_handle,
                       uint32_t      p_count)
{
 800bc3e:	b580      	push	{r7, lr}
 800bc40:	b082      	sub	sp, #8
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	6078      	str	r0, [r7, #4]
 800bc46:	6039      	str	r1, [r7, #0]
  ENC_update(&p_handle->encoder, p_count);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	3328      	adds	r3, #40	; 0x28
 800bc4c:	683a      	ldr	r2, [r7, #0]
 800bc4e:	4611      	mov	r1, r2
 800bc50:	4618      	mov	r0, r3
 800bc52:	f7fe fc4a 	bl	800a4ea <ENC_update>

  return;
 800bc56:	bf00      	nop
}
 800bc58:	3708      	adds	r7, #8
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}

0800bc5e <WHL_setDirection>:

void WHL_setDirection(T_WHL_Handle *p_handle, T_MTR_DIRECTION p_direction)
{
 800bc5e:	b580      	push	{r7, lr}
 800bc60:	b082      	sub	sp, #8
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	6078      	str	r0, [r7, #4]
 800bc66:	460b      	mov	r3, r1
 800bc68:	70fb      	strb	r3, [r7, #3]
  MTR_setDirection(&p_handle->motor, p_direction);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	3304      	adds	r3, #4
 800bc6e:	78fa      	ldrb	r2, [r7, #3]
 800bc70:	4611      	mov	r1, r2
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7fe fea0 	bl	800a9b8 <MTR_setDirection>

  return;
 800bc78:	bf00      	nop
}
 800bc7a:	3708      	adds	r7, #8
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}

0800bc80 <WHL_setSpeed>:

void WHL_setSpeed(T_WHL_Handle *p_handle, uint32_t p_speed)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b082      	sub	sp, #8
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
 800bc88:	6039      	str	r1, [r7, #0]
  if (p_handle->isMotorOn == true)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d006      	beq.n	800bca2 <WHL_setSpeed+0x22>
  {
    MTR_setSpeed(&p_handle->motor, p_speed);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	3304      	adds	r3, #4
 800bc98:	6839      	ldr	r1, [r7, #0]
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f7fe ff04 	bl	800aaa8 <MTR_setSpeed>
  else
  {
    ; /* Nothing to do */
  }

  return;
 800bca0:	bf00      	nop
 800bca2:	bf00      	nop
}
 800bca4:	3708      	adds	r7, #8
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}

0800bcaa <WHL_setPidKp>:

void WHL_setPidKp(T_WHL_Handle *p_handle, float p_kp)
{
 800bcaa:	b580      	push	{r7, lr}
 800bcac:	b082      	sub	sp, #8
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	6078      	str	r0, [r7, #4]
 800bcb2:	6039      	str	r1, [r7, #0]
  PID_setKp(&p_handle->pid, p_kp);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	3338      	adds	r3, #56	; 0x38
 800bcb8:	6839      	ldr	r1, [r7, #0]
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f7fe ffc1 	bl	800ac42 <PID_setKp>

  return;
 800bcc0:	bf00      	nop
}
 800bcc2:	3708      	adds	r7, #8
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <WHL_setPidKi>:

void WHL_setPidKi(T_WHL_Handle *p_handle, float p_ki)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b082      	sub	sp, #8
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	6039      	str	r1, [r7, #0]
  PID_setKi(&p_handle->pid, p_ki);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	3338      	adds	r3, #56	; 0x38
 800bcd6:	6839      	ldr	r1, [r7, #0]
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f7fe ffbf 	bl	800ac5c <PID_setKi>

  return;
 800bcde:	bf00      	nop
}
 800bce0:	3708      	adds	r7, #8
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}

0800bce6 <WHL_setPidKd>:

void WHL_setPidKd(T_WHL_Handle *p_handle, float p_kd)
{
 800bce6:	b580      	push	{r7, lr}
 800bce8:	b082      	sub	sp, #8
 800bcea:	af00      	add	r7, sp, #0
 800bcec:	6078      	str	r0, [r7, #4]
 800bcee:	6039      	str	r1, [r7, #0]
  PID_setKd(&p_handle->pid, p_kd);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	3338      	adds	r3, #56	; 0x38
 800bcf4:	6839      	ldr	r1, [r7, #0]
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7fe ffbd 	bl	800ac76 <PID_setKd>

  return;
 800bcfc:	bf00      	nop
}
 800bcfe:	3708      	adds	r7, #8
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}

0800bd04 <WHL_setPidTarget>:

void WHL_setPidTarget(T_WHL_Handle *p_handle, uint32_t p_speed)
{
 800bd04:	b590      	push	{r4, r7, lr}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]
  PID_setTargetValue(&p_handle->pid, p_speed);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800bd14:	6838      	ldr	r0, [r7, #0]
 800bd16:	f7f5 f849 	bl	8000dac <__aeabi_ui2f>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	4620      	mov	r0, r4
 800bd20:	f7fe ffb6 	bl	800ac90 <PID_setTargetValue>

  return;
 800bd24:	bf00      	nop
}
 800bd26:	370c      	adds	r7, #12
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd90      	pop	{r4, r7, pc}

0800bd2c <WHL_setDirectTarget>:

void  WHL_setDirectTarget(T_WHL_Handle *p_handle, uint32_t p_speed)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6039      	str	r1, [r7, #0]
  WHL_setSpeed(p_handle, p_speed);
 800bd36:	6839      	ldr	r1, [r7, #0]
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f7ff ffa1 	bl	800bc80 <WHL_setSpeed>

  return;
 800bd3e:	bf00      	nop
}
 800bd40:	3708      	adds	r7, #8
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}
	...

0800bd48 <WHL_updateAverageSpeed>:

void WHL_updateAverageSpeed(T_WHL_Handle *p_handle)
{
 800bd48:	b590      	push	{r4, r7, lr}
 800bd4a:	b085      	sub	sp, #20
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  uint32_t l_elapsedTimeInUs;
  float    l_measuredSpeed;

  l_elapsedTimeInUs = CHR_getTimeUs();
 800bd50:	f7fd f846 	bl	8008de0 <CHR_getTimeUs>
 800bd54:	60f8      	str	r0, [r7, #12]

  l_measuredSpeed = (float)ENC_getCount(&p_handle->encoder) / (float)l_elapsedTimeInUs * (float)STP_DRIVE_PID_ENCODER_TO_SPEED_FACTOR;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	3328      	adds	r3, #40	; 0x28
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f7fe fbde 	bl	800a51c <ENC_getCount>
 800bd60:	4603      	mov	r3, r0
 800bd62:	4618      	mov	r0, r3
 800bd64:	f7f5 f826 	bl	8000db4 <__aeabi_i2f>
 800bd68:	4604      	mov	r4, r0
 800bd6a:	68f8      	ldr	r0, [r7, #12]
 800bd6c:	f7f5 f81e 	bl	8000dac <__aeabi_ui2f>
 800bd70:	4603      	mov	r3, r0
 800bd72:	4619      	mov	r1, r3
 800bd74:	4620      	mov	r0, r4
 800bd76:	f7f5 f925 	bl	8000fc4 <__aeabi_fdiv>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	490c      	ldr	r1, [pc, #48]	; (800bdb0 <WHL_updateAverageSpeed+0x68>)
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f7f5 f86c 	bl	8000e5c <__aeabi_fmul>
 800bd84:	4603      	mov	r3, r0
 800bd86:	60bb      	str	r3, [r7, #8]

  CBU_push(&p_handle->speedBuffer, l_measuredSpeed);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	336c      	adds	r3, #108	; 0x6c
 800bd8c:	68b9      	ldr	r1, [r7, #8]
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f7fd f886 	bl	8008ea0 <CBU_push>

  p_handle->averageSpeed = CBU_getAverage(&p_handle->speedBuffer);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	336c      	adds	r3, #108	; 0x6c
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f7fd f8a8 	bl	8008eee <CBU_getAverage>
 800bd9e:	4602      	mov	r2, r0
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  return;
 800bda6:	bf00      	nop
}
 800bda8:	3714      	adds	r7, #20
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd90      	pop	{r4, r7, pc}
 800bdae:	bf00      	nop
 800bdb0:	46c35000 	.word	0x46c35000

0800bdb4 <WHL_updatePidSpeed>:

void WHL_updatePidSpeed(T_WHL_Handle *p_handle)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b084      	sub	sp, #16
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
  uint32_t l_elapsedTimeInUs;
  float    l_pidSpeed;

  l_elapsedTimeInUs = CHR_getTimeUs();
 800bdbc:	f7fd f810 	bl	8008de0 <CHR_getTimeUs>
 800bdc0:	60f8      	str	r0, [r7, #12]

  l_pidSpeed = PID_update(&p_handle->pid, fabs(p_handle->averageSpeed), l_elapsedTimeInUs);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bdce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bdd2:	68fa      	ldr	r2, [r7, #12]
 800bdd4:	4619      	mov	r1, r3
 800bdd6:	f7fe ff73 	bl	800acc0 <PID_update>
 800bdda:	60b8      	str	r0, [r7, #8]

  WHL_setSpeed(p_handle, l_pidSpeed);
 800bddc:	68b8      	ldr	r0, [r7, #8]
 800bdde:	f7f5 fa29 	bl	8001234 <__aeabi_f2uiz>
 800bde2:	4603      	mov	r3, r0
 800bde4:	4619      	mov	r1, r3
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f7ff ff4a 	bl	800bc80 <WHL_setSpeed>

  return;
 800bdec:	bf00      	nop
}
 800bdee:	3710      	adds	r7, #16
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}

0800bdf4 <WHL_getAverageSpeed>:

float WHL_getAverageSpeed(T_WHL_Handle *p_handle)
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b083      	sub	sp, #12
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  return p_handle->averageSpeed;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
}
 800be02:	4618      	mov	r0, r3
 800be04:	370c      	adds	r7, #12
 800be06:	46bd      	mov	sp, r7
 800be08:	bc80      	pop	{r7}
 800be0a:	4770      	bx	lr

0800be0c <WHL_logInfo>:

void WHL_logInfo(T_WHL_Handle *p_handle)
{
 800be0c:	b5b0      	push	{r4, r5, r7, lr}
 800be0e:	b08a      	sub	sp, #40	; 0x28
 800be10:	af04      	add	r7, sp, #16
 800be12:	6078      	str	r0, [r7, #4]
  T_MTR_DIRECTION l_direction;
  uint32_t        l_targetSpeed;
  uint32_t        l_actualSpeed;
  int32_t         l_count;

  l_direction   = MTR_getDirection  (&p_handle->motor  );
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	3304      	adds	r3, #4
 800be18:	4618      	mov	r0, r3
 800be1a:	f7fe fe39 	bl	800aa90 <MTR_getDirection>
 800be1e:	4603      	mov	r3, r0
 800be20:	75fb      	strb	r3, [r7, #23]
  l_targetSpeed = PID_getTargetValue(&p_handle->pid    );
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	3338      	adds	r3, #56	; 0x38
 800be26:	4618      	mov	r0, r3
 800be28:	f7fe ff3f 	bl	800acaa <PID_getTargetValue>
 800be2c:	4603      	mov	r3, r0
 800be2e:	4618      	mov	r0, r3
 800be30:	f7f5 fa00 	bl	8001234 <__aeabi_f2uiz>
 800be34:	4603      	mov	r3, r0
 800be36:	613b      	str	r3, [r7, #16]
  l_actualSpeed = MTR_getSpeed      (&p_handle->motor  );
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	3304      	adds	r3, #4
 800be3c:	4618      	mov	r0, r3
 800be3e:	f7fe fe71 	bl	800ab24 <MTR_getSpeed>
 800be42:	60f8      	str	r0, [r7, #12]
  l_count       = ENC_getCount      (&p_handle->encoder);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	3328      	adds	r3, #40	; 0x28
 800be48:	4618      	mov	r0, r3
 800be4a:	f7fe fb67 	bl	800a51c <ENC_getCount>
 800be4e:	60b8      	str	r0, [r7, #8]

  LOG_info("%s direction / target / speed / count / average: %2u / %2u / %2u / %2d / %2d",
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681c      	ldr	r4, [r3, #0]
 800be54:	7dfd      	ldrb	r5, [r7, #23]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800be5c:	4618      	mov	r0, r3
 800be5e:	f7f5 f9c3 	bl	80011e8 <__aeabi_f2iz>
 800be62:	4603      	mov	r3, r0
 800be64:	9303      	str	r3, [sp, #12]
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	9302      	str	r3, [sp, #8]
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	9301      	str	r3, [sp, #4]
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	9300      	str	r3, [sp, #0]
 800be72:	462b      	mov	r3, r5
 800be74:	4622      	mov	r2, r4
 800be76:	4904      	ldr	r1, [pc, #16]	; (800be88 <WHL_logInfo+0x7c>)
 800be78:	2001      	movs	r0, #1
 800be7a:	f7fe fc79 	bl	800a770 <LOG_log>
           l_targetSpeed,
           l_actualSpeed,
           l_count,
      (int)p_handle->averageSpeed);

  return;
 800be7e:	bf00      	nop
}
 800be80:	3718      	adds	r7, #24
 800be82:	46bd      	mov	sp, r7
 800be84:	bdb0      	pop	{r4, r5, r7, pc}
 800be86:	bf00      	nop
 800be88:	080123f0 	.word	0x080123f0

0800be8c <atof>:
 800be8c:	2100      	movs	r1, #0
 800be8e:	f001 be89 	b.w	800dba4 <strtod>

0800be92 <atoi>:
 800be92:	220a      	movs	r2, #10
 800be94:	2100      	movs	r1, #0
 800be96:	f001 bf19 	b.w	800dccc <strtol>
	...

0800be9c <__errno>:
 800be9c:	4b01      	ldr	r3, [pc, #4]	; (800bea4 <__errno+0x8>)
 800be9e:	6818      	ldr	r0, [r3, #0]
 800bea0:	4770      	bx	lr
 800bea2:	bf00      	nop
 800bea4:	2000001c 	.word	0x2000001c

0800bea8 <__libc_init_array>:
 800bea8:	b570      	push	{r4, r5, r6, lr}
 800beaa:	2600      	movs	r6, #0
 800beac:	4d0c      	ldr	r5, [pc, #48]	; (800bee0 <__libc_init_array+0x38>)
 800beae:	4c0d      	ldr	r4, [pc, #52]	; (800bee4 <__libc_init_array+0x3c>)
 800beb0:	1b64      	subs	r4, r4, r5
 800beb2:	10a4      	asrs	r4, r4, #2
 800beb4:	42a6      	cmp	r6, r4
 800beb6:	d109      	bne.n	800becc <__libc_init_array+0x24>
 800beb8:	f005 f928 	bl	801110c <_init>
 800bebc:	2600      	movs	r6, #0
 800bebe:	4d0a      	ldr	r5, [pc, #40]	; (800bee8 <__libc_init_array+0x40>)
 800bec0:	4c0a      	ldr	r4, [pc, #40]	; (800beec <__libc_init_array+0x44>)
 800bec2:	1b64      	subs	r4, r4, r5
 800bec4:	10a4      	asrs	r4, r4, #2
 800bec6:	42a6      	cmp	r6, r4
 800bec8:	d105      	bne.n	800bed6 <__libc_init_array+0x2e>
 800beca:	bd70      	pop	{r4, r5, r6, pc}
 800becc:	f855 3b04 	ldr.w	r3, [r5], #4
 800bed0:	4798      	blx	r3
 800bed2:	3601      	adds	r6, #1
 800bed4:	e7ee      	b.n	800beb4 <__libc_init_array+0xc>
 800bed6:	f855 3b04 	ldr.w	r3, [r5], #4
 800beda:	4798      	blx	r3
 800bedc:	3601      	adds	r6, #1
 800bede:	e7f2      	b.n	800bec6 <__libc_init_array+0x1e>
 800bee0:	0801292c 	.word	0x0801292c
 800bee4:	0801292c 	.word	0x0801292c
 800bee8:	0801292c 	.word	0x0801292c
 800beec:	08012930 	.word	0x08012930

0800bef0 <malloc>:
 800bef0:	4b02      	ldr	r3, [pc, #8]	; (800befc <malloc+0xc>)
 800bef2:	4601      	mov	r1, r0
 800bef4:	6818      	ldr	r0, [r3, #0]
 800bef6:	f000 b85f 	b.w	800bfb8 <_malloc_r>
 800befa:	bf00      	nop
 800befc:	2000001c 	.word	0x2000001c

0800bf00 <free>:
 800bf00:	4b02      	ldr	r3, [pc, #8]	; (800bf0c <free+0xc>)
 800bf02:	4601      	mov	r1, r0
 800bf04:	6818      	ldr	r0, [r3, #0]
 800bf06:	f000 b80b 	b.w	800bf20 <_free_r>
 800bf0a:	bf00      	nop
 800bf0c:	2000001c 	.word	0x2000001c

0800bf10 <memset>:
 800bf10:	4603      	mov	r3, r0
 800bf12:	4402      	add	r2, r0
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d100      	bne.n	800bf1a <memset+0xa>
 800bf18:	4770      	bx	lr
 800bf1a:	f803 1b01 	strb.w	r1, [r3], #1
 800bf1e:	e7f9      	b.n	800bf14 <memset+0x4>

0800bf20 <_free_r>:
 800bf20:	b538      	push	{r3, r4, r5, lr}
 800bf22:	4605      	mov	r5, r0
 800bf24:	2900      	cmp	r1, #0
 800bf26:	d043      	beq.n	800bfb0 <_free_r+0x90>
 800bf28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf2c:	1f0c      	subs	r4, r1, #4
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	bfb8      	it	lt
 800bf32:	18e4      	addlt	r4, r4, r3
 800bf34:	f003 fa52 	bl	800f3dc <__malloc_lock>
 800bf38:	4a1e      	ldr	r2, [pc, #120]	; (800bfb4 <_free_r+0x94>)
 800bf3a:	6813      	ldr	r3, [r2, #0]
 800bf3c:	4610      	mov	r0, r2
 800bf3e:	b933      	cbnz	r3, 800bf4e <_free_r+0x2e>
 800bf40:	6063      	str	r3, [r4, #4]
 800bf42:	6014      	str	r4, [r2, #0]
 800bf44:	4628      	mov	r0, r5
 800bf46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf4a:	f003 ba4d 	b.w	800f3e8 <__malloc_unlock>
 800bf4e:	42a3      	cmp	r3, r4
 800bf50:	d90a      	bls.n	800bf68 <_free_r+0x48>
 800bf52:	6821      	ldr	r1, [r4, #0]
 800bf54:	1862      	adds	r2, r4, r1
 800bf56:	4293      	cmp	r3, r2
 800bf58:	bf01      	itttt	eq
 800bf5a:	681a      	ldreq	r2, [r3, #0]
 800bf5c:	685b      	ldreq	r3, [r3, #4]
 800bf5e:	1852      	addeq	r2, r2, r1
 800bf60:	6022      	streq	r2, [r4, #0]
 800bf62:	6063      	str	r3, [r4, #4]
 800bf64:	6004      	str	r4, [r0, #0]
 800bf66:	e7ed      	b.n	800bf44 <_free_r+0x24>
 800bf68:	461a      	mov	r2, r3
 800bf6a:	685b      	ldr	r3, [r3, #4]
 800bf6c:	b10b      	cbz	r3, 800bf72 <_free_r+0x52>
 800bf6e:	42a3      	cmp	r3, r4
 800bf70:	d9fa      	bls.n	800bf68 <_free_r+0x48>
 800bf72:	6811      	ldr	r1, [r2, #0]
 800bf74:	1850      	adds	r0, r2, r1
 800bf76:	42a0      	cmp	r0, r4
 800bf78:	d10b      	bne.n	800bf92 <_free_r+0x72>
 800bf7a:	6820      	ldr	r0, [r4, #0]
 800bf7c:	4401      	add	r1, r0
 800bf7e:	1850      	adds	r0, r2, r1
 800bf80:	4283      	cmp	r3, r0
 800bf82:	6011      	str	r1, [r2, #0]
 800bf84:	d1de      	bne.n	800bf44 <_free_r+0x24>
 800bf86:	6818      	ldr	r0, [r3, #0]
 800bf88:	685b      	ldr	r3, [r3, #4]
 800bf8a:	4401      	add	r1, r0
 800bf8c:	6011      	str	r1, [r2, #0]
 800bf8e:	6053      	str	r3, [r2, #4]
 800bf90:	e7d8      	b.n	800bf44 <_free_r+0x24>
 800bf92:	d902      	bls.n	800bf9a <_free_r+0x7a>
 800bf94:	230c      	movs	r3, #12
 800bf96:	602b      	str	r3, [r5, #0]
 800bf98:	e7d4      	b.n	800bf44 <_free_r+0x24>
 800bf9a:	6820      	ldr	r0, [r4, #0]
 800bf9c:	1821      	adds	r1, r4, r0
 800bf9e:	428b      	cmp	r3, r1
 800bfa0:	bf01      	itttt	eq
 800bfa2:	6819      	ldreq	r1, [r3, #0]
 800bfa4:	685b      	ldreq	r3, [r3, #4]
 800bfa6:	1809      	addeq	r1, r1, r0
 800bfa8:	6021      	streq	r1, [r4, #0]
 800bfaa:	6063      	str	r3, [r4, #4]
 800bfac:	6054      	str	r4, [r2, #4]
 800bfae:	e7c9      	b.n	800bf44 <_free_r+0x24>
 800bfb0:	bd38      	pop	{r3, r4, r5, pc}
 800bfb2:	bf00      	nop
 800bfb4:	20000568 	.word	0x20000568

0800bfb8 <_malloc_r>:
 800bfb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfba:	1ccd      	adds	r5, r1, #3
 800bfbc:	f025 0503 	bic.w	r5, r5, #3
 800bfc0:	3508      	adds	r5, #8
 800bfc2:	2d0c      	cmp	r5, #12
 800bfc4:	bf38      	it	cc
 800bfc6:	250c      	movcc	r5, #12
 800bfc8:	2d00      	cmp	r5, #0
 800bfca:	4606      	mov	r6, r0
 800bfcc:	db01      	blt.n	800bfd2 <_malloc_r+0x1a>
 800bfce:	42a9      	cmp	r1, r5
 800bfd0:	d903      	bls.n	800bfda <_malloc_r+0x22>
 800bfd2:	230c      	movs	r3, #12
 800bfd4:	6033      	str	r3, [r6, #0]
 800bfd6:	2000      	movs	r0, #0
 800bfd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfda:	f003 f9ff 	bl	800f3dc <__malloc_lock>
 800bfde:	4921      	ldr	r1, [pc, #132]	; (800c064 <_malloc_r+0xac>)
 800bfe0:	680a      	ldr	r2, [r1, #0]
 800bfe2:	4614      	mov	r4, r2
 800bfe4:	b99c      	cbnz	r4, 800c00e <_malloc_r+0x56>
 800bfe6:	4f20      	ldr	r7, [pc, #128]	; (800c068 <_malloc_r+0xb0>)
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	b923      	cbnz	r3, 800bff6 <_malloc_r+0x3e>
 800bfec:	4621      	mov	r1, r4
 800bfee:	4630      	mov	r0, r6
 800bff0:	f000 fec6 	bl	800cd80 <_sbrk_r>
 800bff4:	6038      	str	r0, [r7, #0]
 800bff6:	4629      	mov	r1, r5
 800bff8:	4630      	mov	r0, r6
 800bffa:	f000 fec1 	bl	800cd80 <_sbrk_r>
 800bffe:	1c43      	adds	r3, r0, #1
 800c000:	d123      	bne.n	800c04a <_malloc_r+0x92>
 800c002:	230c      	movs	r3, #12
 800c004:	4630      	mov	r0, r6
 800c006:	6033      	str	r3, [r6, #0]
 800c008:	f003 f9ee 	bl	800f3e8 <__malloc_unlock>
 800c00c:	e7e3      	b.n	800bfd6 <_malloc_r+0x1e>
 800c00e:	6823      	ldr	r3, [r4, #0]
 800c010:	1b5b      	subs	r3, r3, r5
 800c012:	d417      	bmi.n	800c044 <_malloc_r+0x8c>
 800c014:	2b0b      	cmp	r3, #11
 800c016:	d903      	bls.n	800c020 <_malloc_r+0x68>
 800c018:	6023      	str	r3, [r4, #0]
 800c01a:	441c      	add	r4, r3
 800c01c:	6025      	str	r5, [r4, #0]
 800c01e:	e004      	b.n	800c02a <_malloc_r+0x72>
 800c020:	6863      	ldr	r3, [r4, #4]
 800c022:	42a2      	cmp	r2, r4
 800c024:	bf0c      	ite	eq
 800c026:	600b      	streq	r3, [r1, #0]
 800c028:	6053      	strne	r3, [r2, #4]
 800c02a:	4630      	mov	r0, r6
 800c02c:	f003 f9dc 	bl	800f3e8 <__malloc_unlock>
 800c030:	f104 000b 	add.w	r0, r4, #11
 800c034:	1d23      	adds	r3, r4, #4
 800c036:	f020 0007 	bic.w	r0, r0, #7
 800c03a:	1ac2      	subs	r2, r0, r3
 800c03c:	d0cc      	beq.n	800bfd8 <_malloc_r+0x20>
 800c03e:	1a1b      	subs	r3, r3, r0
 800c040:	50a3      	str	r3, [r4, r2]
 800c042:	e7c9      	b.n	800bfd8 <_malloc_r+0x20>
 800c044:	4622      	mov	r2, r4
 800c046:	6864      	ldr	r4, [r4, #4]
 800c048:	e7cc      	b.n	800bfe4 <_malloc_r+0x2c>
 800c04a:	1cc4      	adds	r4, r0, #3
 800c04c:	f024 0403 	bic.w	r4, r4, #3
 800c050:	42a0      	cmp	r0, r4
 800c052:	d0e3      	beq.n	800c01c <_malloc_r+0x64>
 800c054:	1a21      	subs	r1, r4, r0
 800c056:	4630      	mov	r0, r6
 800c058:	f000 fe92 	bl	800cd80 <_sbrk_r>
 800c05c:	3001      	adds	r0, #1
 800c05e:	d1dd      	bne.n	800c01c <_malloc_r+0x64>
 800c060:	e7cf      	b.n	800c002 <_malloc_r+0x4a>
 800c062:	bf00      	nop
 800c064:	20000568 	.word	0x20000568
 800c068:	2000056c 	.word	0x2000056c

0800c06c <__cvt>:
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c072:	461f      	mov	r7, r3
 800c074:	bfbb      	ittet	lt
 800c076:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800c07a:	461f      	movlt	r7, r3
 800c07c:	2300      	movge	r3, #0
 800c07e:	232d      	movlt	r3, #45	; 0x2d
 800c080:	b088      	sub	sp, #32
 800c082:	4614      	mov	r4, r2
 800c084:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c086:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800c088:	7013      	strb	r3, [r2, #0]
 800c08a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c08c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800c090:	f023 0820 	bic.w	r8, r3, #32
 800c094:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c098:	d005      	beq.n	800c0a6 <__cvt+0x3a>
 800c09a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c09e:	d100      	bne.n	800c0a2 <__cvt+0x36>
 800c0a0:	3501      	adds	r5, #1
 800c0a2:	2302      	movs	r3, #2
 800c0a4:	e000      	b.n	800c0a8 <__cvt+0x3c>
 800c0a6:	2303      	movs	r3, #3
 800c0a8:	aa07      	add	r2, sp, #28
 800c0aa:	9204      	str	r2, [sp, #16]
 800c0ac:	aa06      	add	r2, sp, #24
 800c0ae:	e9cd a202 	strd	sl, r2, [sp, #8]
 800c0b2:	e9cd 3500 	strd	r3, r5, [sp]
 800c0b6:	4622      	mov	r2, r4
 800c0b8:	463b      	mov	r3, r7
 800c0ba:	f001 fefd 	bl	800deb8 <_dtoa_r>
 800c0be:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c0c2:	4606      	mov	r6, r0
 800c0c4:	d102      	bne.n	800c0cc <__cvt+0x60>
 800c0c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c0c8:	07db      	lsls	r3, r3, #31
 800c0ca:	d522      	bpl.n	800c112 <__cvt+0xa6>
 800c0cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c0d0:	eb06 0905 	add.w	r9, r6, r5
 800c0d4:	d110      	bne.n	800c0f8 <__cvt+0x8c>
 800c0d6:	7833      	ldrb	r3, [r6, #0]
 800c0d8:	2b30      	cmp	r3, #48	; 0x30
 800c0da:	d10a      	bne.n	800c0f2 <__cvt+0x86>
 800c0dc:	2200      	movs	r2, #0
 800c0de:	2300      	movs	r3, #0
 800c0e0:	4620      	mov	r0, r4
 800c0e2:	4639      	mov	r1, r7
 800c0e4:	f7f4 fccc 	bl	8000a80 <__aeabi_dcmpeq>
 800c0e8:	b918      	cbnz	r0, 800c0f2 <__cvt+0x86>
 800c0ea:	f1c5 0501 	rsb	r5, r5, #1
 800c0ee:	f8ca 5000 	str.w	r5, [sl]
 800c0f2:	f8da 3000 	ldr.w	r3, [sl]
 800c0f6:	4499      	add	r9, r3
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	4620      	mov	r0, r4
 800c0fe:	4639      	mov	r1, r7
 800c100:	f7f4 fcbe 	bl	8000a80 <__aeabi_dcmpeq>
 800c104:	b108      	cbz	r0, 800c10a <__cvt+0x9e>
 800c106:	f8cd 901c 	str.w	r9, [sp, #28]
 800c10a:	2230      	movs	r2, #48	; 0x30
 800c10c:	9b07      	ldr	r3, [sp, #28]
 800c10e:	454b      	cmp	r3, r9
 800c110:	d307      	bcc.n	800c122 <__cvt+0xb6>
 800c112:	4630      	mov	r0, r6
 800c114:	9b07      	ldr	r3, [sp, #28]
 800c116:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c118:	1b9b      	subs	r3, r3, r6
 800c11a:	6013      	str	r3, [r2, #0]
 800c11c:	b008      	add	sp, #32
 800c11e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c122:	1c59      	adds	r1, r3, #1
 800c124:	9107      	str	r1, [sp, #28]
 800c126:	701a      	strb	r2, [r3, #0]
 800c128:	e7f0      	b.n	800c10c <__cvt+0xa0>

0800c12a <__exponent>:
 800c12a:	4603      	mov	r3, r0
 800c12c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c12e:	2900      	cmp	r1, #0
 800c130:	f803 2b02 	strb.w	r2, [r3], #2
 800c134:	bfb6      	itet	lt
 800c136:	222d      	movlt	r2, #45	; 0x2d
 800c138:	222b      	movge	r2, #43	; 0x2b
 800c13a:	4249      	neglt	r1, r1
 800c13c:	2909      	cmp	r1, #9
 800c13e:	7042      	strb	r2, [r0, #1]
 800c140:	dd2b      	ble.n	800c19a <__exponent+0x70>
 800c142:	f10d 0407 	add.w	r4, sp, #7
 800c146:	46a4      	mov	ip, r4
 800c148:	270a      	movs	r7, #10
 800c14a:	fb91 f6f7 	sdiv	r6, r1, r7
 800c14e:	460a      	mov	r2, r1
 800c150:	46a6      	mov	lr, r4
 800c152:	fb07 1516 	mls	r5, r7, r6, r1
 800c156:	2a63      	cmp	r2, #99	; 0x63
 800c158:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800c15c:	4631      	mov	r1, r6
 800c15e:	f104 34ff 	add.w	r4, r4, #4294967295
 800c162:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c166:	dcf0      	bgt.n	800c14a <__exponent+0x20>
 800c168:	3130      	adds	r1, #48	; 0x30
 800c16a:	f1ae 0502 	sub.w	r5, lr, #2
 800c16e:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c172:	4629      	mov	r1, r5
 800c174:	1c44      	adds	r4, r0, #1
 800c176:	4561      	cmp	r1, ip
 800c178:	d30a      	bcc.n	800c190 <__exponent+0x66>
 800c17a:	f10d 0209 	add.w	r2, sp, #9
 800c17e:	eba2 020e 	sub.w	r2, r2, lr
 800c182:	4565      	cmp	r5, ip
 800c184:	bf88      	it	hi
 800c186:	2200      	movhi	r2, #0
 800c188:	4413      	add	r3, r2
 800c18a:	1a18      	subs	r0, r3, r0
 800c18c:	b003      	add	sp, #12
 800c18e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c190:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c194:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c198:	e7ed      	b.n	800c176 <__exponent+0x4c>
 800c19a:	2330      	movs	r3, #48	; 0x30
 800c19c:	3130      	adds	r1, #48	; 0x30
 800c19e:	7083      	strb	r3, [r0, #2]
 800c1a0:	70c1      	strb	r1, [r0, #3]
 800c1a2:	1d03      	adds	r3, r0, #4
 800c1a4:	e7f1      	b.n	800c18a <__exponent+0x60>
	...

0800c1a8 <_printf_float>:
 800c1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1ac:	b091      	sub	sp, #68	; 0x44
 800c1ae:	460c      	mov	r4, r1
 800c1b0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800c1b4:	4616      	mov	r6, r2
 800c1b6:	461f      	mov	r7, r3
 800c1b8:	4605      	mov	r5, r0
 800c1ba:	f003 f8c7 	bl	800f34c <_localeconv_r>
 800c1be:	6803      	ldr	r3, [r0, #0]
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	9309      	str	r3, [sp, #36]	; 0x24
 800c1c4:	f7f4 f830 	bl	8000228 <strlen>
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	930e      	str	r3, [sp, #56]	; 0x38
 800c1cc:	f8d8 3000 	ldr.w	r3, [r8]
 800c1d0:	900a      	str	r0, [sp, #40]	; 0x28
 800c1d2:	3307      	adds	r3, #7
 800c1d4:	f023 0307 	bic.w	r3, r3, #7
 800c1d8:	f103 0208 	add.w	r2, r3, #8
 800c1dc:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c1e0:	f8d4 b000 	ldr.w	fp, [r4]
 800c1e4:	f8c8 2000 	str.w	r2, [r8]
 800c1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c1f0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800c1f4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800c1f8:	930b      	str	r3, [sp, #44]	; 0x2c
 800c1fa:	f04f 32ff 	mov.w	r2, #4294967295
 800c1fe:	4640      	mov	r0, r8
 800c200:	4b9c      	ldr	r3, [pc, #624]	; (800c474 <_printf_float+0x2cc>)
 800c202:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c204:	f7f4 fc6e 	bl	8000ae4 <__aeabi_dcmpun>
 800c208:	bb70      	cbnz	r0, 800c268 <_printf_float+0xc0>
 800c20a:	f04f 32ff 	mov.w	r2, #4294967295
 800c20e:	4640      	mov	r0, r8
 800c210:	4b98      	ldr	r3, [pc, #608]	; (800c474 <_printf_float+0x2cc>)
 800c212:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c214:	f7f4 fc48 	bl	8000aa8 <__aeabi_dcmple>
 800c218:	bb30      	cbnz	r0, 800c268 <_printf_float+0xc0>
 800c21a:	2200      	movs	r2, #0
 800c21c:	2300      	movs	r3, #0
 800c21e:	4640      	mov	r0, r8
 800c220:	4651      	mov	r1, sl
 800c222:	f7f4 fc37 	bl	8000a94 <__aeabi_dcmplt>
 800c226:	b110      	cbz	r0, 800c22e <_printf_float+0x86>
 800c228:	232d      	movs	r3, #45	; 0x2d
 800c22a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c22e:	4b92      	ldr	r3, [pc, #584]	; (800c478 <_printf_float+0x2d0>)
 800c230:	4892      	ldr	r0, [pc, #584]	; (800c47c <_printf_float+0x2d4>)
 800c232:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c236:	bf94      	ite	ls
 800c238:	4698      	movls	r8, r3
 800c23a:	4680      	movhi	r8, r0
 800c23c:	2303      	movs	r3, #3
 800c23e:	f04f 0a00 	mov.w	sl, #0
 800c242:	6123      	str	r3, [r4, #16]
 800c244:	f02b 0304 	bic.w	r3, fp, #4
 800c248:	6023      	str	r3, [r4, #0]
 800c24a:	4633      	mov	r3, r6
 800c24c:	4621      	mov	r1, r4
 800c24e:	4628      	mov	r0, r5
 800c250:	9700      	str	r7, [sp, #0]
 800c252:	aa0f      	add	r2, sp, #60	; 0x3c
 800c254:	f000 f9d4 	bl	800c600 <_printf_common>
 800c258:	3001      	adds	r0, #1
 800c25a:	f040 8090 	bne.w	800c37e <_printf_float+0x1d6>
 800c25e:	f04f 30ff 	mov.w	r0, #4294967295
 800c262:	b011      	add	sp, #68	; 0x44
 800c264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c268:	4642      	mov	r2, r8
 800c26a:	4653      	mov	r3, sl
 800c26c:	4640      	mov	r0, r8
 800c26e:	4651      	mov	r1, sl
 800c270:	f7f4 fc38 	bl	8000ae4 <__aeabi_dcmpun>
 800c274:	b148      	cbz	r0, 800c28a <_printf_float+0xe2>
 800c276:	f1ba 0f00 	cmp.w	sl, #0
 800c27a:	bfb8      	it	lt
 800c27c:	232d      	movlt	r3, #45	; 0x2d
 800c27e:	4880      	ldr	r0, [pc, #512]	; (800c480 <_printf_float+0x2d8>)
 800c280:	bfb8      	it	lt
 800c282:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c286:	4b7f      	ldr	r3, [pc, #508]	; (800c484 <_printf_float+0x2dc>)
 800c288:	e7d3      	b.n	800c232 <_printf_float+0x8a>
 800c28a:	6863      	ldr	r3, [r4, #4]
 800c28c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800c290:	1c5a      	adds	r2, r3, #1
 800c292:	d142      	bne.n	800c31a <_printf_float+0x172>
 800c294:	2306      	movs	r3, #6
 800c296:	6063      	str	r3, [r4, #4]
 800c298:	2200      	movs	r2, #0
 800c29a:	9206      	str	r2, [sp, #24]
 800c29c:	aa0e      	add	r2, sp, #56	; 0x38
 800c29e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800c2a2:	aa0d      	add	r2, sp, #52	; 0x34
 800c2a4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800c2a8:	9203      	str	r2, [sp, #12]
 800c2aa:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800c2ae:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c2b2:	6023      	str	r3, [r4, #0]
 800c2b4:	6863      	ldr	r3, [r4, #4]
 800c2b6:	4642      	mov	r2, r8
 800c2b8:	9300      	str	r3, [sp, #0]
 800c2ba:	4628      	mov	r0, r5
 800c2bc:	4653      	mov	r3, sl
 800c2be:	910b      	str	r1, [sp, #44]	; 0x2c
 800c2c0:	f7ff fed4 	bl	800c06c <__cvt>
 800c2c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c2c6:	4680      	mov	r8, r0
 800c2c8:	2947      	cmp	r1, #71	; 0x47
 800c2ca:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c2cc:	d108      	bne.n	800c2e0 <_printf_float+0x138>
 800c2ce:	1cc8      	adds	r0, r1, #3
 800c2d0:	db02      	blt.n	800c2d8 <_printf_float+0x130>
 800c2d2:	6863      	ldr	r3, [r4, #4]
 800c2d4:	4299      	cmp	r1, r3
 800c2d6:	dd40      	ble.n	800c35a <_printf_float+0x1b2>
 800c2d8:	f1a9 0902 	sub.w	r9, r9, #2
 800c2dc:	fa5f f989 	uxtb.w	r9, r9
 800c2e0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c2e4:	d81f      	bhi.n	800c326 <_printf_float+0x17e>
 800c2e6:	464a      	mov	r2, r9
 800c2e8:	3901      	subs	r1, #1
 800c2ea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c2ee:	910d      	str	r1, [sp, #52]	; 0x34
 800c2f0:	f7ff ff1b 	bl	800c12a <__exponent>
 800c2f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c2f6:	4682      	mov	sl, r0
 800c2f8:	1813      	adds	r3, r2, r0
 800c2fa:	2a01      	cmp	r2, #1
 800c2fc:	6123      	str	r3, [r4, #16]
 800c2fe:	dc02      	bgt.n	800c306 <_printf_float+0x15e>
 800c300:	6822      	ldr	r2, [r4, #0]
 800c302:	07d2      	lsls	r2, r2, #31
 800c304:	d501      	bpl.n	800c30a <_printf_float+0x162>
 800c306:	3301      	adds	r3, #1
 800c308:	6123      	str	r3, [r4, #16]
 800c30a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d09b      	beq.n	800c24a <_printf_float+0xa2>
 800c312:	232d      	movs	r3, #45	; 0x2d
 800c314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c318:	e797      	b.n	800c24a <_printf_float+0xa2>
 800c31a:	2947      	cmp	r1, #71	; 0x47
 800c31c:	d1bc      	bne.n	800c298 <_printf_float+0xf0>
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d1ba      	bne.n	800c298 <_printf_float+0xf0>
 800c322:	2301      	movs	r3, #1
 800c324:	e7b7      	b.n	800c296 <_printf_float+0xee>
 800c326:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c32a:	d118      	bne.n	800c35e <_printf_float+0x1b6>
 800c32c:	2900      	cmp	r1, #0
 800c32e:	6863      	ldr	r3, [r4, #4]
 800c330:	dd0b      	ble.n	800c34a <_printf_float+0x1a2>
 800c332:	6121      	str	r1, [r4, #16]
 800c334:	b913      	cbnz	r3, 800c33c <_printf_float+0x194>
 800c336:	6822      	ldr	r2, [r4, #0]
 800c338:	07d0      	lsls	r0, r2, #31
 800c33a:	d502      	bpl.n	800c342 <_printf_float+0x19a>
 800c33c:	3301      	adds	r3, #1
 800c33e:	440b      	add	r3, r1
 800c340:	6123      	str	r3, [r4, #16]
 800c342:	f04f 0a00 	mov.w	sl, #0
 800c346:	65a1      	str	r1, [r4, #88]	; 0x58
 800c348:	e7df      	b.n	800c30a <_printf_float+0x162>
 800c34a:	b913      	cbnz	r3, 800c352 <_printf_float+0x1aa>
 800c34c:	6822      	ldr	r2, [r4, #0]
 800c34e:	07d2      	lsls	r2, r2, #31
 800c350:	d501      	bpl.n	800c356 <_printf_float+0x1ae>
 800c352:	3302      	adds	r3, #2
 800c354:	e7f4      	b.n	800c340 <_printf_float+0x198>
 800c356:	2301      	movs	r3, #1
 800c358:	e7f2      	b.n	800c340 <_printf_float+0x198>
 800c35a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c35e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c360:	4299      	cmp	r1, r3
 800c362:	db05      	blt.n	800c370 <_printf_float+0x1c8>
 800c364:	6823      	ldr	r3, [r4, #0]
 800c366:	6121      	str	r1, [r4, #16]
 800c368:	07d8      	lsls	r0, r3, #31
 800c36a:	d5ea      	bpl.n	800c342 <_printf_float+0x19a>
 800c36c:	1c4b      	adds	r3, r1, #1
 800c36e:	e7e7      	b.n	800c340 <_printf_float+0x198>
 800c370:	2900      	cmp	r1, #0
 800c372:	bfcc      	ite	gt
 800c374:	2201      	movgt	r2, #1
 800c376:	f1c1 0202 	rsble	r2, r1, #2
 800c37a:	4413      	add	r3, r2
 800c37c:	e7e0      	b.n	800c340 <_printf_float+0x198>
 800c37e:	6823      	ldr	r3, [r4, #0]
 800c380:	055a      	lsls	r2, r3, #21
 800c382:	d407      	bmi.n	800c394 <_printf_float+0x1ec>
 800c384:	6923      	ldr	r3, [r4, #16]
 800c386:	4642      	mov	r2, r8
 800c388:	4631      	mov	r1, r6
 800c38a:	4628      	mov	r0, r5
 800c38c:	47b8      	blx	r7
 800c38e:	3001      	adds	r0, #1
 800c390:	d12b      	bne.n	800c3ea <_printf_float+0x242>
 800c392:	e764      	b.n	800c25e <_printf_float+0xb6>
 800c394:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c398:	f240 80dd 	bls.w	800c556 <_printf_float+0x3ae>
 800c39c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	f7f4 fb6c 	bl	8000a80 <__aeabi_dcmpeq>
 800c3a8:	2800      	cmp	r0, #0
 800c3aa:	d033      	beq.n	800c414 <_printf_float+0x26c>
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	4631      	mov	r1, r6
 800c3b0:	4628      	mov	r0, r5
 800c3b2:	4a35      	ldr	r2, [pc, #212]	; (800c488 <_printf_float+0x2e0>)
 800c3b4:	47b8      	blx	r7
 800c3b6:	3001      	adds	r0, #1
 800c3b8:	f43f af51 	beq.w	800c25e <_printf_float+0xb6>
 800c3bc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c3c0:	429a      	cmp	r2, r3
 800c3c2:	db02      	blt.n	800c3ca <_printf_float+0x222>
 800c3c4:	6823      	ldr	r3, [r4, #0]
 800c3c6:	07d8      	lsls	r0, r3, #31
 800c3c8:	d50f      	bpl.n	800c3ea <_printf_float+0x242>
 800c3ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c3ce:	4631      	mov	r1, r6
 800c3d0:	4628      	mov	r0, r5
 800c3d2:	47b8      	blx	r7
 800c3d4:	3001      	adds	r0, #1
 800c3d6:	f43f af42 	beq.w	800c25e <_printf_float+0xb6>
 800c3da:	f04f 0800 	mov.w	r8, #0
 800c3de:	f104 091a 	add.w	r9, r4, #26
 800c3e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c3e4:	3b01      	subs	r3, #1
 800c3e6:	4543      	cmp	r3, r8
 800c3e8:	dc09      	bgt.n	800c3fe <_printf_float+0x256>
 800c3ea:	6823      	ldr	r3, [r4, #0]
 800c3ec:	079b      	lsls	r3, r3, #30
 800c3ee:	f100 8102 	bmi.w	800c5f6 <_printf_float+0x44e>
 800c3f2:	68e0      	ldr	r0, [r4, #12]
 800c3f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c3f6:	4298      	cmp	r0, r3
 800c3f8:	bfb8      	it	lt
 800c3fa:	4618      	movlt	r0, r3
 800c3fc:	e731      	b.n	800c262 <_printf_float+0xba>
 800c3fe:	2301      	movs	r3, #1
 800c400:	464a      	mov	r2, r9
 800c402:	4631      	mov	r1, r6
 800c404:	4628      	mov	r0, r5
 800c406:	47b8      	blx	r7
 800c408:	3001      	adds	r0, #1
 800c40a:	f43f af28 	beq.w	800c25e <_printf_float+0xb6>
 800c40e:	f108 0801 	add.w	r8, r8, #1
 800c412:	e7e6      	b.n	800c3e2 <_printf_float+0x23a>
 800c414:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c416:	2b00      	cmp	r3, #0
 800c418:	dc38      	bgt.n	800c48c <_printf_float+0x2e4>
 800c41a:	2301      	movs	r3, #1
 800c41c:	4631      	mov	r1, r6
 800c41e:	4628      	mov	r0, r5
 800c420:	4a19      	ldr	r2, [pc, #100]	; (800c488 <_printf_float+0x2e0>)
 800c422:	47b8      	blx	r7
 800c424:	3001      	adds	r0, #1
 800c426:	f43f af1a 	beq.w	800c25e <_printf_float+0xb6>
 800c42a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c42e:	4313      	orrs	r3, r2
 800c430:	d102      	bne.n	800c438 <_printf_float+0x290>
 800c432:	6823      	ldr	r3, [r4, #0]
 800c434:	07d9      	lsls	r1, r3, #31
 800c436:	d5d8      	bpl.n	800c3ea <_printf_float+0x242>
 800c438:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c43c:	4631      	mov	r1, r6
 800c43e:	4628      	mov	r0, r5
 800c440:	47b8      	blx	r7
 800c442:	3001      	adds	r0, #1
 800c444:	f43f af0b 	beq.w	800c25e <_printf_float+0xb6>
 800c448:	f04f 0900 	mov.w	r9, #0
 800c44c:	f104 0a1a 	add.w	sl, r4, #26
 800c450:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c452:	425b      	negs	r3, r3
 800c454:	454b      	cmp	r3, r9
 800c456:	dc01      	bgt.n	800c45c <_printf_float+0x2b4>
 800c458:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c45a:	e794      	b.n	800c386 <_printf_float+0x1de>
 800c45c:	2301      	movs	r3, #1
 800c45e:	4652      	mov	r2, sl
 800c460:	4631      	mov	r1, r6
 800c462:	4628      	mov	r0, r5
 800c464:	47b8      	blx	r7
 800c466:	3001      	adds	r0, #1
 800c468:	f43f aef9 	beq.w	800c25e <_printf_float+0xb6>
 800c46c:	f109 0901 	add.w	r9, r9, #1
 800c470:	e7ee      	b.n	800c450 <_printf_float+0x2a8>
 800c472:	bf00      	nop
 800c474:	7fefffff 	.word	0x7fefffff
 800c478:	08012468 	.word	0x08012468
 800c47c:	0801246c 	.word	0x0801246c
 800c480:	08012474 	.word	0x08012474
 800c484:	08012470 	.word	0x08012470
 800c488:	080128d9 	.word	0x080128d9
 800c48c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c48e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c490:	429a      	cmp	r2, r3
 800c492:	bfa8      	it	ge
 800c494:	461a      	movge	r2, r3
 800c496:	2a00      	cmp	r2, #0
 800c498:	4691      	mov	r9, r2
 800c49a:	dc37      	bgt.n	800c50c <_printf_float+0x364>
 800c49c:	f04f 0b00 	mov.w	fp, #0
 800c4a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c4a4:	f104 021a 	add.w	r2, r4, #26
 800c4a8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c4ac:	ebaa 0309 	sub.w	r3, sl, r9
 800c4b0:	455b      	cmp	r3, fp
 800c4b2:	dc33      	bgt.n	800c51c <_printf_float+0x374>
 800c4b4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c4b8:	429a      	cmp	r2, r3
 800c4ba:	db3b      	blt.n	800c534 <_printf_float+0x38c>
 800c4bc:	6823      	ldr	r3, [r4, #0]
 800c4be:	07da      	lsls	r2, r3, #31
 800c4c0:	d438      	bmi.n	800c534 <_printf_float+0x38c>
 800c4c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c4c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c4c6:	eba2 030a 	sub.w	r3, r2, sl
 800c4ca:	eba2 0901 	sub.w	r9, r2, r1
 800c4ce:	4599      	cmp	r9, r3
 800c4d0:	bfa8      	it	ge
 800c4d2:	4699      	movge	r9, r3
 800c4d4:	f1b9 0f00 	cmp.w	r9, #0
 800c4d8:	dc34      	bgt.n	800c544 <_printf_float+0x39c>
 800c4da:	f04f 0800 	mov.w	r8, #0
 800c4de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c4e2:	f104 0a1a 	add.w	sl, r4, #26
 800c4e6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800c4ea:	1a9b      	subs	r3, r3, r2
 800c4ec:	eba3 0309 	sub.w	r3, r3, r9
 800c4f0:	4543      	cmp	r3, r8
 800c4f2:	f77f af7a 	ble.w	800c3ea <_printf_float+0x242>
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	4652      	mov	r2, sl
 800c4fa:	4631      	mov	r1, r6
 800c4fc:	4628      	mov	r0, r5
 800c4fe:	47b8      	blx	r7
 800c500:	3001      	adds	r0, #1
 800c502:	f43f aeac 	beq.w	800c25e <_printf_float+0xb6>
 800c506:	f108 0801 	add.w	r8, r8, #1
 800c50a:	e7ec      	b.n	800c4e6 <_printf_float+0x33e>
 800c50c:	4613      	mov	r3, r2
 800c50e:	4631      	mov	r1, r6
 800c510:	4642      	mov	r2, r8
 800c512:	4628      	mov	r0, r5
 800c514:	47b8      	blx	r7
 800c516:	3001      	adds	r0, #1
 800c518:	d1c0      	bne.n	800c49c <_printf_float+0x2f4>
 800c51a:	e6a0      	b.n	800c25e <_printf_float+0xb6>
 800c51c:	2301      	movs	r3, #1
 800c51e:	4631      	mov	r1, r6
 800c520:	4628      	mov	r0, r5
 800c522:	920b      	str	r2, [sp, #44]	; 0x2c
 800c524:	47b8      	blx	r7
 800c526:	3001      	adds	r0, #1
 800c528:	f43f ae99 	beq.w	800c25e <_printf_float+0xb6>
 800c52c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c52e:	f10b 0b01 	add.w	fp, fp, #1
 800c532:	e7b9      	b.n	800c4a8 <_printf_float+0x300>
 800c534:	4631      	mov	r1, r6
 800c536:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c53a:	4628      	mov	r0, r5
 800c53c:	47b8      	blx	r7
 800c53e:	3001      	adds	r0, #1
 800c540:	d1bf      	bne.n	800c4c2 <_printf_float+0x31a>
 800c542:	e68c      	b.n	800c25e <_printf_float+0xb6>
 800c544:	464b      	mov	r3, r9
 800c546:	4631      	mov	r1, r6
 800c548:	4628      	mov	r0, r5
 800c54a:	eb08 020a 	add.w	r2, r8, sl
 800c54e:	47b8      	blx	r7
 800c550:	3001      	adds	r0, #1
 800c552:	d1c2      	bne.n	800c4da <_printf_float+0x332>
 800c554:	e683      	b.n	800c25e <_printf_float+0xb6>
 800c556:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c558:	2a01      	cmp	r2, #1
 800c55a:	dc01      	bgt.n	800c560 <_printf_float+0x3b8>
 800c55c:	07db      	lsls	r3, r3, #31
 800c55e:	d537      	bpl.n	800c5d0 <_printf_float+0x428>
 800c560:	2301      	movs	r3, #1
 800c562:	4642      	mov	r2, r8
 800c564:	4631      	mov	r1, r6
 800c566:	4628      	mov	r0, r5
 800c568:	47b8      	blx	r7
 800c56a:	3001      	adds	r0, #1
 800c56c:	f43f ae77 	beq.w	800c25e <_printf_float+0xb6>
 800c570:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c574:	4631      	mov	r1, r6
 800c576:	4628      	mov	r0, r5
 800c578:	47b8      	blx	r7
 800c57a:	3001      	adds	r0, #1
 800c57c:	f43f ae6f 	beq.w	800c25e <_printf_float+0xb6>
 800c580:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c584:	2200      	movs	r2, #0
 800c586:	2300      	movs	r3, #0
 800c588:	f7f4 fa7a 	bl	8000a80 <__aeabi_dcmpeq>
 800c58c:	b9d8      	cbnz	r0, 800c5c6 <_printf_float+0x41e>
 800c58e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c590:	f108 0201 	add.w	r2, r8, #1
 800c594:	3b01      	subs	r3, #1
 800c596:	4631      	mov	r1, r6
 800c598:	4628      	mov	r0, r5
 800c59a:	47b8      	blx	r7
 800c59c:	3001      	adds	r0, #1
 800c59e:	d10e      	bne.n	800c5be <_printf_float+0x416>
 800c5a0:	e65d      	b.n	800c25e <_printf_float+0xb6>
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	464a      	mov	r2, r9
 800c5a6:	4631      	mov	r1, r6
 800c5a8:	4628      	mov	r0, r5
 800c5aa:	47b8      	blx	r7
 800c5ac:	3001      	adds	r0, #1
 800c5ae:	f43f ae56 	beq.w	800c25e <_printf_float+0xb6>
 800c5b2:	f108 0801 	add.w	r8, r8, #1
 800c5b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c5b8:	3b01      	subs	r3, #1
 800c5ba:	4543      	cmp	r3, r8
 800c5bc:	dcf1      	bgt.n	800c5a2 <_printf_float+0x3fa>
 800c5be:	4653      	mov	r3, sl
 800c5c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c5c4:	e6e0      	b.n	800c388 <_printf_float+0x1e0>
 800c5c6:	f04f 0800 	mov.w	r8, #0
 800c5ca:	f104 091a 	add.w	r9, r4, #26
 800c5ce:	e7f2      	b.n	800c5b6 <_printf_float+0x40e>
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	4642      	mov	r2, r8
 800c5d4:	e7df      	b.n	800c596 <_printf_float+0x3ee>
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	464a      	mov	r2, r9
 800c5da:	4631      	mov	r1, r6
 800c5dc:	4628      	mov	r0, r5
 800c5de:	47b8      	blx	r7
 800c5e0:	3001      	adds	r0, #1
 800c5e2:	f43f ae3c 	beq.w	800c25e <_printf_float+0xb6>
 800c5e6:	f108 0801 	add.w	r8, r8, #1
 800c5ea:	68e3      	ldr	r3, [r4, #12]
 800c5ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c5ee:	1a5b      	subs	r3, r3, r1
 800c5f0:	4543      	cmp	r3, r8
 800c5f2:	dcf0      	bgt.n	800c5d6 <_printf_float+0x42e>
 800c5f4:	e6fd      	b.n	800c3f2 <_printf_float+0x24a>
 800c5f6:	f04f 0800 	mov.w	r8, #0
 800c5fa:	f104 0919 	add.w	r9, r4, #25
 800c5fe:	e7f4      	b.n	800c5ea <_printf_float+0x442>

0800c600 <_printf_common>:
 800c600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c604:	4616      	mov	r6, r2
 800c606:	4699      	mov	r9, r3
 800c608:	688a      	ldr	r2, [r1, #8]
 800c60a:	690b      	ldr	r3, [r1, #16]
 800c60c:	4607      	mov	r7, r0
 800c60e:	4293      	cmp	r3, r2
 800c610:	bfb8      	it	lt
 800c612:	4613      	movlt	r3, r2
 800c614:	6033      	str	r3, [r6, #0]
 800c616:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c61a:	460c      	mov	r4, r1
 800c61c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c620:	b10a      	cbz	r2, 800c626 <_printf_common+0x26>
 800c622:	3301      	adds	r3, #1
 800c624:	6033      	str	r3, [r6, #0]
 800c626:	6823      	ldr	r3, [r4, #0]
 800c628:	0699      	lsls	r1, r3, #26
 800c62a:	bf42      	ittt	mi
 800c62c:	6833      	ldrmi	r3, [r6, #0]
 800c62e:	3302      	addmi	r3, #2
 800c630:	6033      	strmi	r3, [r6, #0]
 800c632:	6825      	ldr	r5, [r4, #0]
 800c634:	f015 0506 	ands.w	r5, r5, #6
 800c638:	d106      	bne.n	800c648 <_printf_common+0x48>
 800c63a:	f104 0a19 	add.w	sl, r4, #25
 800c63e:	68e3      	ldr	r3, [r4, #12]
 800c640:	6832      	ldr	r2, [r6, #0]
 800c642:	1a9b      	subs	r3, r3, r2
 800c644:	42ab      	cmp	r3, r5
 800c646:	dc28      	bgt.n	800c69a <_printf_common+0x9a>
 800c648:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c64c:	1e13      	subs	r3, r2, #0
 800c64e:	6822      	ldr	r2, [r4, #0]
 800c650:	bf18      	it	ne
 800c652:	2301      	movne	r3, #1
 800c654:	0692      	lsls	r2, r2, #26
 800c656:	d42d      	bmi.n	800c6b4 <_printf_common+0xb4>
 800c658:	4649      	mov	r1, r9
 800c65a:	4638      	mov	r0, r7
 800c65c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c660:	47c0      	blx	r8
 800c662:	3001      	adds	r0, #1
 800c664:	d020      	beq.n	800c6a8 <_printf_common+0xa8>
 800c666:	6823      	ldr	r3, [r4, #0]
 800c668:	68e5      	ldr	r5, [r4, #12]
 800c66a:	f003 0306 	and.w	r3, r3, #6
 800c66e:	2b04      	cmp	r3, #4
 800c670:	bf18      	it	ne
 800c672:	2500      	movne	r5, #0
 800c674:	6832      	ldr	r2, [r6, #0]
 800c676:	f04f 0600 	mov.w	r6, #0
 800c67a:	68a3      	ldr	r3, [r4, #8]
 800c67c:	bf08      	it	eq
 800c67e:	1aad      	subeq	r5, r5, r2
 800c680:	6922      	ldr	r2, [r4, #16]
 800c682:	bf08      	it	eq
 800c684:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c688:	4293      	cmp	r3, r2
 800c68a:	bfc4      	itt	gt
 800c68c:	1a9b      	subgt	r3, r3, r2
 800c68e:	18ed      	addgt	r5, r5, r3
 800c690:	341a      	adds	r4, #26
 800c692:	42b5      	cmp	r5, r6
 800c694:	d11a      	bne.n	800c6cc <_printf_common+0xcc>
 800c696:	2000      	movs	r0, #0
 800c698:	e008      	b.n	800c6ac <_printf_common+0xac>
 800c69a:	2301      	movs	r3, #1
 800c69c:	4652      	mov	r2, sl
 800c69e:	4649      	mov	r1, r9
 800c6a0:	4638      	mov	r0, r7
 800c6a2:	47c0      	blx	r8
 800c6a4:	3001      	adds	r0, #1
 800c6a6:	d103      	bne.n	800c6b0 <_printf_common+0xb0>
 800c6a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c6ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6b0:	3501      	adds	r5, #1
 800c6b2:	e7c4      	b.n	800c63e <_printf_common+0x3e>
 800c6b4:	2030      	movs	r0, #48	; 0x30
 800c6b6:	18e1      	adds	r1, r4, r3
 800c6b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c6bc:	1c5a      	adds	r2, r3, #1
 800c6be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c6c2:	4422      	add	r2, r4
 800c6c4:	3302      	adds	r3, #2
 800c6c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c6ca:	e7c5      	b.n	800c658 <_printf_common+0x58>
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	4622      	mov	r2, r4
 800c6d0:	4649      	mov	r1, r9
 800c6d2:	4638      	mov	r0, r7
 800c6d4:	47c0      	blx	r8
 800c6d6:	3001      	adds	r0, #1
 800c6d8:	d0e6      	beq.n	800c6a8 <_printf_common+0xa8>
 800c6da:	3601      	adds	r6, #1
 800c6dc:	e7d9      	b.n	800c692 <_printf_common+0x92>
	...

0800c6e0 <_printf_i>:
 800c6e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c6e4:	460c      	mov	r4, r1
 800c6e6:	7e27      	ldrb	r7, [r4, #24]
 800c6e8:	4691      	mov	r9, r2
 800c6ea:	2f78      	cmp	r7, #120	; 0x78
 800c6ec:	4680      	mov	r8, r0
 800c6ee:	469a      	mov	sl, r3
 800c6f0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c6f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c6f6:	d807      	bhi.n	800c708 <_printf_i+0x28>
 800c6f8:	2f62      	cmp	r7, #98	; 0x62
 800c6fa:	d80a      	bhi.n	800c712 <_printf_i+0x32>
 800c6fc:	2f00      	cmp	r7, #0
 800c6fe:	f000 80d9 	beq.w	800c8b4 <_printf_i+0x1d4>
 800c702:	2f58      	cmp	r7, #88	; 0x58
 800c704:	f000 80a4 	beq.w	800c850 <_printf_i+0x170>
 800c708:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c70c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c710:	e03a      	b.n	800c788 <_printf_i+0xa8>
 800c712:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c716:	2b15      	cmp	r3, #21
 800c718:	d8f6      	bhi.n	800c708 <_printf_i+0x28>
 800c71a:	a001      	add	r0, pc, #4	; (adr r0, 800c720 <_printf_i+0x40>)
 800c71c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c720:	0800c779 	.word	0x0800c779
 800c724:	0800c78d 	.word	0x0800c78d
 800c728:	0800c709 	.word	0x0800c709
 800c72c:	0800c709 	.word	0x0800c709
 800c730:	0800c709 	.word	0x0800c709
 800c734:	0800c709 	.word	0x0800c709
 800c738:	0800c78d 	.word	0x0800c78d
 800c73c:	0800c709 	.word	0x0800c709
 800c740:	0800c709 	.word	0x0800c709
 800c744:	0800c709 	.word	0x0800c709
 800c748:	0800c709 	.word	0x0800c709
 800c74c:	0800c89b 	.word	0x0800c89b
 800c750:	0800c7bd 	.word	0x0800c7bd
 800c754:	0800c87d 	.word	0x0800c87d
 800c758:	0800c709 	.word	0x0800c709
 800c75c:	0800c709 	.word	0x0800c709
 800c760:	0800c8bd 	.word	0x0800c8bd
 800c764:	0800c709 	.word	0x0800c709
 800c768:	0800c7bd 	.word	0x0800c7bd
 800c76c:	0800c709 	.word	0x0800c709
 800c770:	0800c709 	.word	0x0800c709
 800c774:	0800c885 	.word	0x0800c885
 800c778:	680b      	ldr	r3, [r1, #0]
 800c77a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c77e:	1d1a      	adds	r2, r3, #4
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	600a      	str	r2, [r1, #0]
 800c784:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c788:	2301      	movs	r3, #1
 800c78a:	e0a4      	b.n	800c8d6 <_printf_i+0x1f6>
 800c78c:	6825      	ldr	r5, [r4, #0]
 800c78e:	6808      	ldr	r0, [r1, #0]
 800c790:	062e      	lsls	r6, r5, #24
 800c792:	f100 0304 	add.w	r3, r0, #4
 800c796:	d50a      	bpl.n	800c7ae <_printf_i+0xce>
 800c798:	6805      	ldr	r5, [r0, #0]
 800c79a:	600b      	str	r3, [r1, #0]
 800c79c:	2d00      	cmp	r5, #0
 800c79e:	da03      	bge.n	800c7a8 <_printf_i+0xc8>
 800c7a0:	232d      	movs	r3, #45	; 0x2d
 800c7a2:	426d      	negs	r5, r5
 800c7a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7a8:	230a      	movs	r3, #10
 800c7aa:	485e      	ldr	r0, [pc, #376]	; (800c924 <_printf_i+0x244>)
 800c7ac:	e019      	b.n	800c7e2 <_printf_i+0x102>
 800c7ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c7b2:	6805      	ldr	r5, [r0, #0]
 800c7b4:	600b      	str	r3, [r1, #0]
 800c7b6:	bf18      	it	ne
 800c7b8:	b22d      	sxthne	r5, r5
 800c7ba:	e7ef      	b.n	800c79c <_printf_i+0xbc>
 800c7bc:	680b      	ldr	r3, [r1, #0]
 800c7be:	6825      	ldr	r5, [r4, #0]
 800c7c0:	1d18      	adds	r0, r3, #4
 800c7c2:	6008      	str	r0, [r1, #0]
 800c7c4:	0628      	lsls	r0, r5, #24
 800c7c6:	d501      	bpl.n	800c7cc <_printf_i+0xec>
 800c7c8:	681d      	ldr	r5, [r3, #0]
 800c7ca:	e002      	b.n	800c7d2 <_printf_i+0xf2>
 800c7cc:	0669      	lsls	r1, r5, #25
 800c7ce:	d5fb      	bpl.n	800c7c8 <_printf_i+0xe8>
 800c7d0:	881d      	ldrh	r5, [r3, #0]
 800c7d2:	2f6f      	cmp	r7, #111	; 0x6f
 800c7d4:	bf0c      	ite	eq
 800c7d6:	2308      	moveq	r3, #8
 800c7d8:	230a      	movne	r3, #10
 800c7da:	4852      	ldr	r0, [pc, #328]	; (800c924 <_printf_i+0x244>)
 800c7dc:	2100      	movs	r1, #0
 800c7de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c7e2:	6866      	ldr	r6, [r4, #4]
 800c7e4:	2e00      	cmp	r6, #0
 800c7e6:	bfa8      	it	ge
 800c7e8:	6821      	ldrge	r1, [r4, #0]
 800c7ea:	60a6      	str	r6, [r4, #8]
 800c7ec:	bfa4      	itt	ge
 800c7ee:	f021 0104 	bicge.w	r1, r1, #4
 800c7f2:	6021      	strge	r1, [r4, #0]
 800c7f4:	b90d      	cbnz	r5, 800c7fa <_printf_i+0x11a>
 800c7f6:	2e00      	cmp	r6, #0
 800c7f8:	d04d      	beq.n	800c896 <_printf_i+0x1b6>
 800c7fa:	4616      	mov	r6, r2
 800c7fc:	fbb5 f1f3 	udiv	r1, r5, r3
 800c800:	fb03 5711 	mls	r7, r3, r1, r5
 800c804:	5dc7      	ldrb	r7, [r0, r7]
 800c806:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c80a:	462f      	mov	r7, r5
 800c80c:	42bb      	cmp	r3, r7
 800c80e:	460d      	mov	r5, r1
 800c810:	d9f4      	bls.n	800c7fc <_printf_i+0x11c>
 800c812:	2b08      	cmp	r3, #8
 800c814:	d10b      	bne.n	800c82e <_printf_i+0x14e>
 800c816:	6823      	ldr	r3, [r4, #0]
 800c818:	07df      	lsls	r7, r3, #31
 800c81a:	d508      	bpl.n	800c82e <_printf_i+0x14e>
 800c81c:	6923      	ldr	r3, [r4, #16]
 800c81e:	6861      	ldr	r1, [r4, #4]
 800c820:	4299      	cmp	r1, r3
 800c822:	bfde      	ittt	le
 800c824:	2330      	movle	r3, #48	; 0x30
 800c826:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c82a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c82e:	1b92      	subs	r2, r2, r6
 800c830:	6122      	str	r2, [r4, #16]
 800c832:	464b      	mov	r3, r9
 800c834:	4621      	mov	r1, r4
 800c836:	4640      	mov	r0, r8
 800c838:	f8cd a000 	str.w	sl, [sp]
 800c83c:	aa03      	add	r2, sp, #12
 800c83e:	f7ff fedf 	bl	800c600 <_printf_common>
 800c842:	3001      	adds	r0, #1
 800c844:	d14c      	bne.n	800c8e0 <_printf_i+0x200>
 800c846:	f04f 30ff 	mov.w	r0, #4294967295
 800c84a:	b004      	add	sp, #16
 800c84c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c850:	4834      	ldr	r0, [pc, #208]	; (800c924 <_printf_i+0x244>)
 800c852:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c856:	680e      	ldr	r6, [r1, #0]
 800c858:	6823      	ldr	r3, [r4, #0]
 800c85a:	f856 5b04 	ldr.w	r5, [r6], #4
 800c85e:	061f      	lsls	r7, r3, #24
 800c860:	600e      	str	r6, [r1, #0]
 800c862:	d514      	bpl.n	800c88e <_printf_i+0x1ae>
 800c864:	07d9      	lsls	r1, r3, #31
 800c866:	bf44      	itt	mi
 800c868:	f043 0320 	orrmi.w	r3, r3, #32
 800c86c:	6023      	strmi	r3, [r4, #0]
 800c86e:	b91d      	cbnz	r5, 800c878 <_printf_i+0x198>
 800c870:	6823      	ldr	r3, [r4, #0]
 800c872:	f023 0320 	bic.w	r3, r3, #32
 800c876:	6023      	str	r3, [r4, #0]
 800c878:	2310      	movs	r3, #16
 800c87a:	e7af      	b.n	800c7dc <_printf_i+0xfc>
 800c87c:	6823      	ldr	r3, [r4, #0]
 800c87e:	f043 0320 	orr.w	r3, r3, #32
 800c882:	6023      	str	r3, [r4, #0]
 800c884:	2378      	movs	r3, #120	; 0x78
 800c886:	4828      	ldr	r0, [pc, #160]	; (800c928 <_printf_i+0x248>)
 800c888:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c88c:	e7e3      	b.n	800c856 <_printf_i+0x176>
 800c88e:	065e      	lsls	r6, r3, #25
 800c890:	bf48      	it	mi
 800c892:	b2ad      	uxthmi	r5, r5
 800c894:	e7e6      	b.n	800c864 <_printf_i+0x184>
 800c896:	4616      	mov	r6, r2
 800c898:	e7bb      	b.n	800c812 <_printf_i+0x132>
 800c89a:	680b      	ldr	r3, [r1, #0]
 800c89c:	6826      	ldr	r6, [r4, #0]
 800c89e:	1d1d      	adds	r5, r3, #4
 800c8a0:	6960      	ldr	r0, [r4, #20]
 800c8a2:	600d      	str	r5, [r1, #0]
 800c8a4:	0635      	lsls	r5, r6, #24
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	d501      	bpl.n	800c8ae <_printf_i+0x1ce>
 800c8aa:	6018      	str	r0, [r3, #0]
 800c8ac:	e002      	b.n	800c8b4 <_printf_i+0x1d4>
 800c8ae:	0671      	lsls	r1, r6, #25
 800c8b0:	d5fb      	bpl.n	800c8aa <_printf_i+0x1ca>
 800c8b2:	8018      	strh	r0, [r3, #0]
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	4616      	mov	r6, r2
 800c8b8:	6123      	str	r3, [r4, #16]
 800c8ba:	e7ba      	b.n	800c832 <_printf_i+0x152>
 800c8bc:	680b      	ldr	r3, [r1, #0]
 800c8be:	1d1a      	adds	r2, r3, #4
 800c8c0:	600a      	str	r2, [r1, #0]
 800c8c2:	681e      	ldr	r6, [r3, #0]
 800c8c4:	2100      	movs	r1, #0
 800c8c6:	4630      	mov	r0, r6
 800c8c8:	6862      	ldr	r2, [r4, #4]
 800c8ca:	f002 fd6b 	bl	800f3a4 <memchr>
 800c8ce:	b108      	cbz	r0, 800c8d4 <_printf_i+0x1f4>
 800c8d0:	1b80      	subs	r0, r0, r6
 800c8d2:	6060      	str	r0, [r4, #4]
 800c8d4:	6863      	ldr	r3, [r4, #4]
 800c8d6:	6123      	str	r3, [r4, #16]
 800c8d8:	2300      	movs	r3, #0
 800c8da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8de:	e7a8      	b.n	800c832 <_printf_i+0x152>
 800c8e0:	4632      	mov	r2, r6
 800c8e2:	4649      	mov	r1, r9
 800c8e4:	4640      	mov	r0, r8
 800c8e6:	6923      	ldr	r3, [r4, #16]
 800c8e8:	47d0      	blx	sl
 800c8ea:	3001      	adds	r0, #1
 800c8ec:	d0ab      	beq.n	800c846 <_printf_i+0x166>
 800c8ee:	6823      	ldr	r3, [r4, #0]
 800c8f0:	079b      	lsls	r3, r3, #30
 800c8f2:	d413      	bmi.n	800c91c <_printf_i+0x23c>
 800c8f4:	68e0      	ldr	r0, [r4, #12]
 800c8f6:	9b03      	ldr	r3, [sp, #12]
 800c8f8:	4298      	cmp	r0, r3
 800c8fa:	bfb8      	it	lt
 800c8fc:	4618      	movlt	r0, r3
 800c8fe:	e7a4      	b.n	800c84a <_printf_i+0x16a>
 800c900:	2301      	movs	r3, #1
 800c902:	4632      	mov	r2, r6
 800c904:	4649      	mov	r1, r9
 800c906:	4640      	mov	r0, r8
 800c908:	47d0      	blx	sl
 800c90a:	3001      	adds	r0, #1
 800c90c:	d09b      	beq.n	800c846 <_printf_i+0x166>
 800c90e:	3501      	adds	r5, #1
 800c910:	68e3      	ldr	r3, [r4, #12]
 800c912:	9903      	ldr	r1, [sp, #12]
 800c914:	1a5b      	subs	r3, r3, r1
 800c916:	42ab      	cmp	r3, r5
 800c918:	dcf2      	bgt.n	800c900 <_printf_i+0x220>
 800c91a:	e7eb      	b.n	800c8f4 <_printf_i+0x214>
 800c91c:	2500      	movs	r5, #0
 800c91e:	f104 0619 	add.w	r6, r4, #25
 800c922:	e7f5      	b.n	800c910 <_printf_i+0x230>
 800c924:	08012478 	.word	0x08012478
 800c928:	08012489 	.word	0x08012489

0800c92c <_scanf_float>:
 800c92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c930:	b087      	sub	sp, #28
 800c932:	9303      	str	r3, [sp, #12]
 800c934:	688b      	ldr	r3, [r1, #8]
 800c936:	4617      	mov	r7, r2
 800c938:	1e5a      	subs	r2, r3, #1
 800c93a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c93e:	bf85      	ittet	hi
 800c940:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c944:	195b      	addhi	r3, r3, r5
 800c946:	2300      	movls	r3, #0
 800c948:	9302      	strhi	r3, [sp, #8]
 800c94a:	bf88      	it	hi
 800c94c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c950:	468b      	mov	fp, r1
 800c952:	f04f 0500 	mov.w	r5, #0
 800c956:	bf8c      	ite	hi
 800c958:	608b      	strhi	r3, [r1, #8]
 800c95a:	9302      	strls	r3, [sp, #8]
 800c95c:	680b      	ldr	r3, [r1, #0]
 800c95e:	4680      	mov	r8, r0
 800c960:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c964:	f84b 3b1c 	str.w	r3, [fp], #28
 800c968:	460c      	mov	r4, r1
 800c96a:	465e      	mov	r6, fp
 800c96c:	46aa      	mov	sl, r5
 800c96e:	46a9      	mov	r9, r5
 800c970:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c974:	9501      	str	r5, [sp, #4]
 800c976:	68a2      	ldr	r2, [r4, #8]
 800c978:	b152      	cbz	r2, 800c990 <_scanf_float+0x64>
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	781b      	ldrb	r3, [r3, #0]
 800c97e:	2b4e      	cmp	r3, #78	; 0x4e
 800c980:	d864      	bhi.n	800ca4c <_scanf_float+0x120>
 800c982:	2b40      	cmp	r3, #64	; 0x40
 800c984:	d83c      	bhi.n	800ca00 <_scanf_float+0xd4>
 800c986:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c98a:	b2c8      	uxtb	r0, r1
 800c98c:	280e      	cmp	r0, #14
 800c98e:	d93a      	bls.n	800ca06 <_scanf_float+0xda>
 800c990:	f1b9 0f00 	cmp.w	r9, #0
 800c994:	d003      	beq.n	800c99e <_scanf_float+0x72>
 800c996:	6823      	ldr	r3, [r4, #0]
 800c998:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c99c:	6023      	str	r3, [r4, #0]
 800c99e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c9a2:	f1ba 0f01 	cmp.w	sl, #1
 800c9a6:	f200 8113 	bhi.w	800cbd0 <_scanf_float+0x2a4>
 800c9aa:	455e      	cmp	r6, fp
 800c9ac:	f200 8105 	bhi.w	800cbba <_scanf_float+0x28e>
 800c9b0:	2501      	movs	r5, #1
 800c9b2:	4628      	mov	r0, r5
 800c9b4:	b007      	add	sp, #28
 800c9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ba:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c9be:	2a0d      	cmp	r2, #13
 800c9c0:	d8e6      	bhi.n	800c990 <_scanf_float+0x64>
 800c9c2:	a101      	add	r1, pc, #4	; (adr r1, 800c9c8 <_scanf_float+0x9c>)
 800c9c4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c9c8:	0800cb07 	.word	0x0800cb07
 800c9cc:	0800c991 	.word	0x0800c991
 800c9d0:	0800c991 	.word	0x0800c991
 800c9d4:	0800c991 	.word	0x0800c991
 800c9d8:	0800cb67 	.word	0x0800cb67
 800c9dc:	0800cb3f 	.word	0x0800cb3f
 800c9e0:	0800c991 	.word	0x0800c991
 800c9e4:	0800c991 	.word	0x0800c991
 800c9e8:	0800cb15 	.word	0x0800cb15
 800c9ec:	0800c991 	.word	0x0800c991
 800c9f0:	0800c991 	.word	0x0800c991
 800c9f4:	0800c991 	.word	0x0800c991
 800c9f8:	0800c991 	.word	0x0800c991
 800c9fc:	0800cacd 	.word	0x0800cacd
 800ca00:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ca04:	e7db      	b.n	800c9be <_scanf_float+0x92>
 800ca06:	290e      	cmp	r1, #14
 800ca08:	d8c2      	bhi.n	800c990 <_scanf_float+0x64>
 800ca0a:	a001      	add	r0, pc, #4	; (adr r0, 800ca10 <_scanf_float+0xe4>)
 800ca0c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ca10:	0800cabf 	.word	0x0800cabf
 800ca14:	0800c991 	.word	0x0800c991
 800ca18:	0800cabf 	.word	0x0800cabf
 800ca1c:	0800cb53 	.word	0x0800cb53
 800ca20:	0800c991 	.word	0x0800c991
 800ca24:	0800ca6d 	.word	0x0800ca6d
 800ca28:	0800caa9 	.word	0x0800caa9
 800ca2c:	0800caa9 	.word	0x0800caa9
 800ca30:	0800caa9 	.word	0x0800caa9
 800ca34:	0800caa9 	.word	0x0800caa9
 800ca38:	0800caa9 	.word	0x0800caa9
 800ca3c:	0800caa9 	.word	0x0800caa9
 800ca40:	0800caa9 	.word	0x0800caa9
 800ca44:	0800caa9 	.word	0x0800caa9
 800ca48:	0800caa9 	.word	0x0800caa9
 800ca4c:	2b6e      	cmp	r3, #110	; 0x6e
 800ca4e:	d809      	bhi.n	800ca64 <_scanf_float+0x138>
 800ca50:	2b60      	cmp	r3, #96	; 0x60
 800ca52:	d8b2      	bhi.n	800c9ba <_scanf_float+0x8e>
 800ca54:	2b54      	cmp	r3, #84	; 0x54
 800ca56:	d077      	beq.n	800cb48 <_scanf_float+0x21c>
 800ca58:	2b59      	cmp	r3, #89	; 0x59
 800ca5a:	d199      	bne.n	800c990 <_scanf_float+0x64>
 800ca5c:	2d07      	cmp	r5, #7
 800ca5e:	d197      	bne.n	800c990 <_scanf_float+0x64>
 800ca60:	2508      	movs	r5, #8
 800ca62:	e029      	b.n	800cab8 <_scanf_float+0x18c>
 800ca64:	2b74      	cmp	r3, #116	; 0x74
 800ca66:	d06f      	beq.n	800cb48 <_scanf_float+0x21c>
 800ca68:	2b79      	cmp	r3, #121	; 0x79
 800ca6a:	e7f6      	b.n	800ca5a <_scanf_float+0x12e>
 800ca6c:	6821      	ldr	r1, [r4, #0]
 800ca6e:	05c8      	lsls	r0, r1, #23
 800ca70:	d51a      	bpl.n	800caa8 <_scanf_float+0x17c>
 800ca72:	9b02      	ldr	r3, [sp, #8]
 800ca74:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ca78:	6021      	str	r1, [r4, #0]
 800ca7a:	f109 0901 	add.w	r9, r9, #1
 800ca7e:	b11b      	cbz	r3, 800ca88 <_scanf_float+0x15c>
 800ca80:	3b01      	subs	r3, #1
 800ca82:	3201      	adds	r2, #1
 800ca84:	9302      	str	r3, [sp, #8]
 800ca86:	60a2      	str	r2, [r4, #8]
 800ca88:	68a3      	ldr	r3, [r4, #8]
 800ca8a:	3b01      	subs	r3, #1
 800ca8c:	60a3      	str	r3, [r4, #8]
 800ca8e:	6923      	ldr	r3, [r4, #16]
 800ca90:	3301      	adds	r3, #1
 800ca92:	6123      	str	r3, [r4, #16]
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	3b01      	subs	r3, #1
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	607b      	str	r3, [r7, #4]
 800ca9c:	f340 8084 	ble.w	800cba8 <_scanf_float+0x27c>
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	3301      	adds	r3, #1
 800caa4:	603b      	str	r3, [r7, #0]
 800caa6:	e766      	b.n	800c976 <_scanf_float+0x4a>
 800caa8:	eb1a 0f05 	cmn.w	sl, r5
 800caac:	f47f af70 	bne.w	800c990 <_scanf_float+0x64>
 800cab0:	6822      	ldr	r2, [r4, #0]
 800cab2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800cab6:	6022      	str	r2, [r4, #0]
 800cab8:	f806 3b01 	strb.w	r3, [r6], #1
 800cabc:	e7e4      	b.n	800ca88 <_scanf_float+0x15c>
 800cabe:	6822      	ldr	r2, [r4, #0]
 800cac0:	0610      	lsls	r0, r2, #24
 800cac2:	f57f af65 	bpl.w	800c990 <_scanf_float+0x64>
 800cac6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800caca:	e7f4      	b.n	800cab6 <_scanf_float+0x18a>
 800cacc:	f1ba 0f00 	cmp.w	sl, #0
 800cad0:	d10e      	bne.n	800caf0 <_scanf_float+0x1c4>
 800cad2:	f1b9 0f00 	cmp.w	r9, #0
 800cad6:	d10e      	bne.n	800caf6 <_scanf_float+0x1ca>
 800cad8:	6822      	ldr	r2, [r4, #0]
 800cada:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800cade:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cae2:	d108      	bne.n	800caf6 <_scanf_float+0x1ca>
 800cae4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cae8:	f04f 0a01 	mov.w	sl, #1
 800caec:	6022      	str	r2, [r4, #0]
 800caee:	e7e3      	b.n	800cab8 <_scanf_float+0x18c>
 800caf0:	f1ba 0f02 	cmp.w	sl, #2
 800caf4:	d055      	beq.n	800cba2 <_scanf_float+0x276>
 800caf6:	2d01      	cmp	r5, #1
 800caf8:	d002      	beq.n	800cb00 <_scanf_float+0x1d4>
 800cafa:	2d04      	cmp	r5, #4
 800cafc:	f47f af48 	bne.w	800c990 <_scanf_float+0x64>
 800cb00:	3501      	adds	r5, #1
 800cb02:	b2ed      	uxtb	r5, r5
 800cb04:	e7d8      	b.n	800cab8 <_scanf_float+0x18c>
 800cb06:	f1ba 0f01 	cmp.w	sl, #1
 800cb0a:	f47f af41 	bne.w	800c990 <_scanf_float+0x64>
 800cb0e:	f04f 0a02 	mov.w	sl, #2
 800cb12:	e7d1      	b.n	800cab8 <_scanf_float+0x18c>
 800cb14:	b97d      	cbnz	r5, 800cb36 <_scanf_float+0x20a>
 800cb16:	f1b9 0f00 	cmp.w	r9, #0
 800cb1a:	f47f af3c 	bne.w	800c996 <_scanf_float+0x6a>
 800cb1e:	6822      	ldr	r2, [r4, #0]
 800cb20:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800cb24:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800cb28:	f47f af39 	bne.w	800c99e <_scanf_float+0x72>
 800cb2c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cb30:	2501      	movs	r5, #1
 800cb32:	6022      	str	r2, [r4, #0]
 800cb34:	e7c0      	b.n	800cab8 <_scanf_float+0x18c>
 800cb36:	2d03      	cmp	r5, #3
 800cb38:	d0e2      	beq.n	800cb00 <_scanf_float+0x1d4>
 800cb3a:	2d05      	cmp	r5, #5
 800cb3c:	e7de      	b.n	800cafc <_scanf_float+0x1d0>
 800cb3e:	2d02      	cmp	r5, #2
 800cb40:	f47f af26 	bne.w	800c990 <_scanf_float+0x64>
 800cb44:	2503      	movs	r5, #3
 800cb46:	e7b7      	b.n	800cab8 <_scanf_float+0x18c>
 800cb48:	2d06      	cmp	r5, #6
 800cb4a:	f47f af21 	bne.w	800c990 <_scanf_float+0x64>
 800cb4e:	2507      	movs	r5, #7
 800cb50:	e7b2      	b.n	800cab8 <_scanf_float+0x18c>
 800cb52:	6822      	ldr	r2, [r4, #0]
 800cb54:	0591      	lsls	r1, r2, #22
 800cb56:	f57f af1b 	bpl.w	800c990 <_scanf_float+0x64>
 800cb5a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800cb5e:	6022      	str	r2, [r4, #0]
 800cb60:	f8cd 9004 	str.w	r9, [sp, #4]
 800cb64:	e7a8      	b.n	800cab8 <_scanf_float+0x18c>
 800cb66:	6822      	ldr	r2, [r4, #0]
 800cb68:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800cb6c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800cb70:	d006      	beq.n	800cb80 <_scanf_float+0x254>
 800cb72:	0550      	lsls	r0, r2, #21
 800cb74:	f57f af0c 	bpl.w	800c990 <_scanf_float+0x64>
 800cb78:	f1b9 0f00 	cmp.w	r9, #0
 800cb7c:	f43f af0f 	beq.w	800c99e <_scanf_float+0x72>
 800cb80:	0591      	lsls	r1, r2, #22
 800cb82:	bf58      	it	pl
 800cb84:	9901      	ldrpl	r1, [sp, #4]
 800cb86:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800cb8a:	bf58      	it	pl
 800cb8c:	eba9 0101 	subpl.w	r1, r9, r1
 800cb90:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800cb94:	f04f 0900 	mov.w	r9, #0
 800cb98:	bf58      	it	pl
 800cb9a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cb9e:	6022      	str	r2, [r4, #0]
 800cba0:	e78a      	b.n	800cab8 <_scanf_float+0x18c>
 800cba2:	f04f 0a03 	mov.w	sl, #3
 800cba6:	e787      	b.n	800cab8 <_scanf_float+0x18c>
 800cba8:	4639      	mov	r1, r7
 800cbaa:	4640      	mov	r0, r8
 800cbac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cbb0:	4798      	blx	r3
 800cbb2:	2800      	cmp	r0, #0
 800cbb4:	f43f aedf 	beq.w	800c976 <_scanf_float+0x4a>
 800cbb8:	e6ea      	b.n	800c990 <_scanf_float+0x64>
 800cbba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cbbe:	463a      	mov	r2, r7
 800cbc0:	4640      	mov	r0, r8
 800cbc2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cbc6:	4798      	blx	r3
 800cbc8:	6923      	ldr	r3, [r4, #16]
 800cbca:	3b01      	subs	r3, #1
 800cbcc:	6123      	str	r3, [r4, #16]
 800cbce:	e6ec      	b.n	800c9aa <_scanf_float+0x7e>
 800cbd0:	1e6b      	subs	r3, r5, #1
 800cbd2:	2b06      	cmp	r3, #6
 800cbd4:	d825      	bhi.n	800cc22 <_scanf_float+0x2f6>
 800cbd6:	2d02      	cmp	r5, #2
 800cbd8:	d836      	bhi.n	800cc48 <_scanf_float+0x31c>
 800cbda:	455e      	cmp	r6, fp
 800cbdc:	f67f aee8 	bls.w	800c9b0 <_scanf_float+0x84>
 800cbe0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cbe4:	463a      	mov	r2, r7
 800cbe6:	4640      	mov	r0, r8
 800cbe8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cbec:	4798      	blx	r3
 800cbee:	6923      	ldr	r3, [r4, #16]
 800cbf0:	3b01      	subs	r3, #1
 800cbf2:	6123      	str	r3, [r4, #16]
 800cbf4:	e7f1      	b.n	800cbda <_scanf_float+0x2ae>
 800cbf6:	9802      	ldr	r0, [sp, #8]
 800cbf8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cbfc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800cc00:	463a      	mov	r2, r7
 800cc02:	9002      	str	r0, [sp, #8]
 800cc04:	4640      	mov	r0, r8
 800cc06:	4798      	blx	r3
 800cc08:	6923      	ldr	r3, [r4, #16]
 800cc0a:	3b01      	subs	r3, #1
 800cc0c:	6123      	str	r3, [r4, #16]
 800cc0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cc12:	fa5f fa8a 	uxtb.w	sl, sl
 800cc16:	f1ba 0f02 	cmp.w	sl, #2
 800cc1a:	d1ec      	bne.n	800cbf6 <_scanf_float+0x2ca>
 800cc1c:	3d03      	subs	r5, #3
 800cc1e:	b2ed      	uxtb	r5, r5
 800cc20:	1b76      	subs	r6, r6, r5
 800cc22:	6823      	ldr	r3, [r4, #0]
 800cc24:	05da      	lsls	r2, r3, #23
 800cc26:	d52f      	bpl.n	800cc88 <_scanf_float+0x35c>
 800cc28:	055b      	lsls	r3, r3, #21
 800cc2a:	d510      	bpl.n	800cc4e <_scanf_float+0x322>
 800cc2c:	455e      	cmp	r6, fp
 800cc2e:	f67f aebf 	bls.w	800c9b0 <_scanf_float+0x84>
 800cc32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cc36:	463a      	mov	r2, r7
 800cc38:	4640      	mov	r0, r8
 800cc3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cc3e:	4798      	blx	r3
 800cc40:	6923      	ldr	r3, [r4, #16]
 800cc42:	3b01      	subs	r3, #1
 800cc44:	6123      	str	r3, [r4, #16]
 800cc46:	e7f1      	b.n	800cc2c <_scanf_float+0x300>
 800cc48:	46aa      	mov	sl, r5
 800cc4a:	9602      	str	r6, [sp, #8]
 800cc4c:	e7df      	b.n	800cc0e <_scanf_float+0x2e2>
 800cc4e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cc52:	6923      	ldr	r3, [r4, #16]
 800cc54:	2965      	cmp	r1, #101	; 0x65
 800cc56:	f103 33ff 	add.w	r3, r3, #4294967295
 800cc5a:	f106 35ff 	add.w	r5, r6, #4294967295
 800cc5e:	6123      	str	r3, [r4, #16]
 800cc60:	d00c      	beq.n	800cc7c <_scanf_float+0x350>
 800cc62:	2945      	cmp	r1, #69	; 0x45
 800cc64:	d00a      	beq.n	800cc7c <_scanf_float+0x350>
 800cc66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cc6a:	463a      	mov	r2, r7
 800cc6c:	4640      	mov	r0, r8
 800cc6e:	4798      	blx	r3
 800cc70:	6923      	ldr	r3, [r4, #16]
 800cc72:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cc76:	3b01      	subs	r3, #1
 800cc78:	1eb5      	subs	r5, r6, #2
 800cc7a:	6123      	str	r3, [r4, #16]
 800cc7c:	463a      	mov	r2, r7
 800cc7e:	4640      	mov	r0, r8
 800cc80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cc84:	4798      	blx	r3
 800cc86:	462e      	mov	r6, r5
 800cc88:	6825      	ldr	r5, [r4, #0]
 800cc8a:	f015 0510 	ands.w	r5, r5, #16
 800cc8e:	d159      	bne.n	800cd44 <_scanf_float+0x418>
 800cc90:	7035      	strb	r5, [r6, #0]
 800cc92:	6823      	ldr	r3, [r4, #0]
 800cc94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cc98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc9c:	d11c      	bne.n	800ccd8 <_scanf_float+0x3ac>
 800cc9e:	9b01      	ldr	r3, [sp, #4]
 800cca0:	454b      	cmp	r3, r9
 800cca2:	eba3 0209 	sub.w	r2, r3, r9
 800cca6:	d124      	bne.n	800ccf2 <_scanf_float+0x3c6>
 800cca8:	2200      	movs	r2, #0
 800ccaa:	4659      	mov	r1, fp
 800ccac:	4640      	mov	r0, r8
 800ccae:	f000 ff73 	bl	800db98 <_strtod_r>
 800ccb2:	f8d4 c000 	ldr.w	ip, [r4]
 800ccb6:	9b03      	ldr	r3, [sp, #12]
 800ccb8:	f01c 0f02 	tst.w	ip, #2
 800ccbc:	4606      	mov	r6, r0
 800ccbe:	460f      	mov	r7, r1
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	d021      	beq.n	800cd08 <_scanf_float+0x3dc>
 800ccc4:	9903      	ldr	r1, [sp, #12]
 800ccc6:	1d1a      	adds	r2, r3, #4
 800ccc8:	600a      	str	r2, [r1, #0]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	e9c3 6700 	strd	r6, r7, [r3]
 800ccd0:	68e3      	ldr	r3, [r4, #12]
 800ccd2:	3301      	adds	r3, #1
 800ccd4:	60e3      	str	r3, [r4, #12]
 800ccd6:	e66c      	b.n	800c9b2 <_scanf_float+0x86>
 800ccd8:	9b04      	ldr	r3, [sp, #16]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d0e4      	beq.n	800cca8 <_scanf_float+0x37c>
 800ccde:	9905      	ldr	r1, [sp, #20]
 800cce0:	230a      	movs	r3, #10
 800cce2:	462a      	mov	r2, r5
 800cce4:	4640      	mov	r0, r8
 800cce6:	3101      	adds	r1, #1
 800cce8:	f000 ffee 	bl	800dcc8 <_strtol_r>
 800ccec:	9b04      	ldr	r3, [sp, #16]
 800ccee:	9e05      	ldr	r6, [sp, #20]
 800ccf0:	1ac2      	subs	r2, r0, r3
 800ccf2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ccf6:	429e      	cmp	r6, r3
 800ccf8:	bf28      	it	cs
 800ccfa:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ccfe:	4630      	mov	r0, r6
 800cd00:	4911      	ldr	r1, [pc, #68]	; (800cd48 <_scanf_float+0x41c>)
 800cd02:	f000 f885 	bl	800ce10 <siprintf>
 800cd06:	e7cf      	b.n	800cca8 <_scanf_float+0x37c>
 800cd08:	f01c 0f04 	tst.w	ip, #4
 800cd0c:	f103 0e04 	add.w	lr, r3, #4
 800cd10:	d003      	beq.n	800cd1a <_scanf_float+0x3ee>
 800cd12:	9903      	ldr	r1, [sp, #12]
 800cd14:	f8c1 e000 	str.w	lr, [r1]
 800cd18:	e7d7      	b.n	800ccca <_scanf_float+0x39e>
 800cd1a:	9a03      	ldr	r2, [sp, #12]
 800cd1c:	f8c2 e000 	str.w	lr, [r2]
 800cd20:	f8d3 8000 	ldr.w	r8, [r3]
 800cd24:	4602      	mov	r2, r0
 800cd26:	460b      	mov	r3, r1
 800cd28:	f7f3 fedc 	bl	8000ae4 <__aeabi_dcmpun>
 800cd2c:	b128      	cbz	r0, 800cd3a <_scanf_float+0x40e>
 800cd2e:	4807      	ldr	r0, [pc, #28]	; (800cd4c <_scanf_float+0x420>)
 800cd30:	f000 f836 	bl	800cda0 <nanf>
 800cd34:	f8c8 0000 	str.w	r0, [r8]
 800cd38:	e7ca      	b.n	800ccd0 <_scanf_float+0x3a4>
 800cd3a:	4630      	mov	r0, r6
 800cd3c:	4639      	mov	r1, r7
 800cd3e:	f7f3 ff2f 	bl	8000ba0 <__aeabi_d2f>
 800cd42:	e7f7      	b.n	800cd34 <_scanf_float+0x408>
 800cd44:	2500      	movs	r5, #0
 800cd46:	e634      	b.n	800c9b2 <_scanf_float+0x86>
 800cd48:	0801249a 	.word	0x0801249a
 800cd4c:	0801292b 	.word	0x0801292b

0800cd50 <iprintf>:
 800cd50:	b40f      	push	{r0, r1, r2, r3}
 800cd52:	4b0a      	ldr	r3, [pc, #40]	; (800cd7c <iprintf+0x2c>)
 800cd54:	b513      	push	{r0, r1, r4, lr}
 800cd56:	681c      	ldr	r4, [r3, #0]
 800cd58:	b124      	cbz	r4, 800cd64 <iprintf+0x14>
 800cd5a:	69a3      	ldr	r3, [r4, #24]
 800cd5c:	b913      	cbnz	r3, 800cd64 <iprintf+0x14>
 800cd5e:	4620      	mov	r0, r4
 800cd60:	f001 fef0 	bl	800eb44 <__sinit>
 800cd64:	ab05      	add	r3, sp, #20
 800cd66:	4620      	mov	r0, r4
 800cd68:	9a04      	ldr	r2, [sp, #16]
 800cd6a:	68a1      	ldr	r1, [r4, #8]
 800cd6c:	9301      	str	r3, [sp, #4]
 800cd6e:	f003 fb5f 	bl	8010430 <_vfiprintf_r>
 800cd72:	b002      	add	sp, #8
 800cd74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd78:	b004      	add	sp, #16
 800cd7a:	4770      	bx	lr
 800cd7c:	2000001c 	.word	0x2000001c

0800cd80 <_sbrk_r>:
 800cd80:	b538      	push	{r3, r4, r5, lr}
 800cd82:	2300      	movs	r3, #0
 800cd84:	4d05      	ldr	r5, [pc, #20]	; (800cd9c <_sbrk_r+0x1c>)
 800cd86:	4604      	mov	r4, r0
 800cd88:	4608      	mov	r0, r1
 800cd8a:	602b      	str	r3, [r5, #0]
 800cd8c:	f7f5 fc50 	bl	8002630 <_sbrk>
 800cd90:	1c43      	adds	r3, r0, #1
 800cd92:	d102      	bne.n	800cd9a <_sbrk_r+0x1a>
 800cd94:	682b      	ldr	r3, [r5, #0]
 800cd96:	b103      	cbz	r3, 800cd9a <_sbrk_r+0x1a>
 800cd98:	6023      	str	r3, [r4, #0]
 800cd9a:	bd38      	pop	{r3, r4, r5, pc}
 800cd9c:	20000c4c 	.word	0x20000c4c

0800cda0 <nanf>:
 800cda0:	4800      	ldr	r0, [pc, #0]	; (800cda4 <nanf+0x4>)
 800cda2:	4770      	bx	lr
 800cda4:	7fc00000 	.word	0x7fc00000

0800cda8 <sniprintf>:
 800cda8:	b40c      	push	{r2, r3}
 800cdaa:	b530      	push	{r4, r5, lr}
 800cdac:	4b17      	ldr	r3, [pc, #92]	; (800ce0c <sniprintf+0x64>)
 800cdae:	1e0c      	subs	r4, r1, #0
 800cdb0:	681d      	ldr	r5, [r3, #0]
 800cdb2:	b09d      	sub	sp, #116	; 0x74
 800cdb4:	da08      	bge.n	800cdc8 <sniprintf+0x20>
 800cdb6:	238b      	movs	r3, #139	; 0x8b
 800cdb8:	f04f 30ff 	mov.w	r0, #4294967295
 800cdbc:	602b      	str	r3, [r5, #0]
 800cdbe:	b01d      	add	sp, #116	; 0x74
 800cdc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cdc4:	b002      	add	sp, #8
 800cdc6:	4770      	bx	lr
 800cdc8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cdcc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cdd0:	bf0c      	ite	eq
 800cdd2:	4623      	moveq	r3, r4
 800cdd4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cdd8:	9304      	str	r3, [sp, #16]
 800cdda:	9307      	str	r3, [sp, #28]
 800cddc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cde0:	9002      	str	r0, [sp, #8]
 800cde2:	9006      	str	r0, [sp, #24]
 800cde4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cde8:	4628      	mov	r0, r5
 800cdea:	ab21      	add	r3, sp, #132	; 0x84
 800cdec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cdee:	a902      	add	r1, sp, #8
 800cdf0:	9301      	str	r3, [sp, #4]
 800cdf2:	f003 f821 	bl	800fe38 <_svfiprintf_r>
 800cdf6:	1c43      	adds	r3, r0, #1
 800cdf8:	bfbc      	itt	lt
 800cdfa:	238b      	movlt	r3, #139	; 0x8b
 800cdfc:	602b      	strlt	r3, [r5, #0]
 800cdfe:	2c00      	cmp	r4, #0
 800ce00:	d0dd      	beq.n	800cdbe <sniprintf+0x16>
 800ce02:	2200      	movs	r2, #0
 800ce04:	9b02      	ldr	r3, [sp, #8]
 800ce06:	701a      	strb	r2, [r3, #0]
 800ce08:	e7d9      	b.n	800cdbe <sniprintf+0x16>
 800ce0a:	bf00      	nop
 800ce0c:	2000001c 	.word	0x2000001c

0800ce10 <siprintf>:
 800ce10:	b40e      	push	{r1, r2, r3}
 800ce12:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ce16:	b500      	push	{lr}
 800ce18:	b09c      	sub	sp, #112	; 0x70
 800ce1a:	ab1d      	add	r3, sp, #116	; 0x74
 800ce1c:	9002      	str	r0, [sp, #8]
 800ce1e:	9006      	str	r0, [sp, #24]
 800ce20:	9107      	str	r1, [sp, #28]
 800ce22:	9104      	str	r1, [sp, #16]
 800ce24:	4808      	ldr	r0, [pc, #32]	; (800ce48 <siprintf+0x38>)
 800ce26:	4909      	ldr	r1, [pc, #36]	; (800ce4c <siprintf+0x3c>)
 800ce28:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce2c:	9105      	str	r1, [sp, #20]
 800ce2e:	6800      	ldr	r0, [r0, #0]
 800ce30:	a902      	add	r1, sp, #8
 800ce32:	9301      	str	r3, [sp, #4]
 800ce34:	f003 f800 	bl	800fe38 <_svfiprintf_r>
 800ce38:	2200      	movs	r2, #0
 800ce3a:	9b02      	ldr	r3, [sp, #8]
 800ce3c:	701a      	strb	r2, [r3, #0]
 800ce3e:	b01c      	add	sp, #112	; 0x70
 800ce40:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce44:	b003      	add	sp, #12
 800ce46:	4770      	bx	lr
 800ce48:	2000001c 	.word	0x2000001c
 800ce4c:	ffff0208 	.word	0xffff0208

0800ce50 <siscanf>:
 800ce50:	b40e      	push	{r1, r2, r3}
 800ce52:	f44f 7201 	mov.w	r2, #516	; 0x204
 800ce56:	b530      	push	{r4, r5, lr}
 800ce58:	b09c      	sub	sp, #112	; 0x70
 800ce5a:	ac1f      	add	r4, sp, #124	; 0x7c
 800ce5c:	f854 5b04 	ldr.w	r5, [r4], #4
 800ce60:	f8ad 2014 	strh.w	r2, [sp, #20]
 800ce64:	9002      	str	r0, [sp, #8]
 800ce66:	9006      	str	r0, [sp, #24]
 800ce68:	f7f3 f9de 	bl	8000228 <strlen>
 800ce6c:	4b0b      	ldr	r3, [pc, #44]	; (800ce9c <siscanf+0x4c>)
 800ce6e:	9003      	str	r0, [sp, #12]
 800ce70:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce72:	2300      	movs	r3, #0
 800ce74:	930f      	str	r3, [sp, #60]	; 0x3c
 800ce76:	9314      	str	r3, [sp, #80]	; 0x50
 800ce78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ce7c:	9007      	str	r0, [sp, #28]
 800ce7e:	4808      	ldr	r0, [pc, #32]	; (800cea0 <siscanf+0x50>)
 800ce80:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ce84:	462a      	mov	r2, r5
 800ce86:	4623      	mov	r3, r4
 800ce88:	a902      	add	r1, sp, #8
 800ce8a:	6800      	ldr	r0, [r0, #0]
 800ce8c:	9401      	str	r4, [sp, #4]
 800ce8e:	f003 f92d 	bl	80100ec <__ssvfiscanf_r>
 800ce92:	b01c      	add	sp, #112	; 0x70
 800ce94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ce98:	b003      	add	sp, #12
 800ce9a:	4770      	bx	lr
 800ce9c:	0800cec7 	.word	0x0800cec7
 800cea0:	2000001c 	.word	0x2000001c

0800cea4 <__sread>:
 800cea4:	b510      	push	{r4, lr}
 800cea6:	460c      	mov	r4, r1
 800cea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceac:	f003 fd3a 	bl	8010924 <_read_r>
 800ceb0:	2800      	cmp	r0, #0
 800ceb2:	bfab      	itete	ge
 800ceb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ceb6:	89a3      	ldrhlt	r3, [r4, #12]
 800ceb8:	181b      	addge	r3, r3, r0
 800ceba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cebe:	bfac      	ite	ge
 800cec0:	6563      	strge	r3, [r4, #84]	; 0x54
 800cec2:	81a3      	strhlt	r3, [r4, #12]
 800cec4:	bd10      	pop	{r4, pc}

0800cec6 <__seofread>:
 800cec6:	2000      	movs	r0, #0
 800cec8:	4770      	bx	lr

0800ceca <__swrite>:
 800ceca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cece:	461f      	mov	r7, r3
 800ced0:	898b      	ldrh	r3, [r1, #12]
 800ced2:	4605      	mov	r5, r0
 800ced4:	05db      	lsls	r3, r3, #23
 800ced6:	460c      	mov	r4, r1
 800ced8:	4616      	mov	r6, r2
 800ceda:	d505      	bpl.n	800cee8 <__swrite+0x1e>
 800cedc:	2302      	movs	r3, #2
 800cede:	2200      	movs	r2, #0
 800cee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cee4:	f002 fa3a 	bl	800f35c <_lseek_r>
 800cee8:	89a3      	ldrh	r3, [r4, #12]
 800ceea:	4632      	mov	r2, r6
 800ceec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cef0:	81a3      	strh	r3, [r4, #12]
 800cef2:	4628      	mov	r0, r5
 800cef4:	463b      	mov	r3, r7
 800cef6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cefa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cefe:	f000 bf29 	b.w	800dd54 <_write_r>

0800cf02 <__sseek>:
 800cf02:	b510      	push	{r4, lr}
 800cf04:	460c      	mov	r4, r1
 800cf06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf0a:	f002 fa27 	bl	800f35c <_lseek_r>
 800cf0e:	1c43      	adds	r3, r0, #1
 800cf10:	89a3      	ldrh	r3, [r4, #12]
 800cf12:	bf15      	itete	ne
 800cf14:	6560      	strne	r0, [r4, #84]	; 0x54
 800cf16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cf1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cf1e:	81a3      	strheq	r3, [r4, #12]
 800cf20:	bf18      	it	ne
 800cf22:	81a3      	strhne	r3, [r4, #12]
 800cf24:	bd10      	pop	{r4, pc}

0800cf26 <__sclose>:
 800cf26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf2a:	f000 bf25 	b.w	800dd78 <_close_r>

0800cf2e <strncpy>:
 800cf2e:	4603      	mov	r3, r0
 800cf30:	b510      	push	{r4, lr}
 800cf32:	3901      	subs	r1, #1
 800cf34:	b132      	cbz	r2, 800cf44 <strncpy+0x16>
 800cf36:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cf3a:	3a01      	subs	r2, #1
 800cf3c:	f803 4b01 	strb.w	r4, [r3], #1
 800cf40:	2c00      	cmp	r4, #0
 800cf42:	d1f7      	bne.n	800cf34 <strncpy+0x6>
 800cf44:	2100      	movs	r1, #0
 800cf46:	441a      	add	r2, r3
 800cf48:	4293      	cmp	r3, r2
 800cf4a:	d100      	bne.n	800cf4e <strncpy+0x20>
 800cf4c:	bd10      	pop	{r4, pc}
 800cf4e:	f803 1b01 	strb.w	r1, [r3], #1
 800cf52:	e7f9      	b.n	800cf48 <strncpy+0x1a>

0800cf54 <strnlen>:
 800cf54:	4602      	mov	r2, r0
 800cf56:	b510      	push	{r4, lr}
 800cf58:	4401      	add	r1, r0
 800cf5a:	428a      	cmp	r2, r1
 800cf5c:	4613      	mov	r3, r2
 800cf5e:	d101      	bne.n	800cf64 <strnlen+0x10>
 800cf60:	1a18      	subs	r0, r3, r0
 800cf62:	bd10      	pop	{r4, pc}
 800cf64:	781c      	ldrb	r4, [r3, #0]
 800cf66:	3201      	adds	r2, #1
 800cf68:	2c00      	cmp	r4, #0
 800cf6a:	d1f6      	bne.n	800cf5a <strnlen+0x6>
 800cf6c:	e7f8      	b.n	800cf60 <strnlen+0xc>

0800cf6e <sulp>:
 800cf6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf72:	460f      	mov	r7, r1
 800cf74:	4690      	mov	r8, r2
 800cf76:	f002 fdad 	bl	800fad4 <__ulp>
 800cf7a:	4604      	mov	r4, r0
 800cf7c:	460d      	mov	r5, r1
 800cf7e:	f1b8 0f00 	cmp.w	r8, #0
 800cf82:	d011      	beq.n	800cfa8 <sulp+0x3a>
 800cf84:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800cf88:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	dd0b      	ble.n	800cfa8 <sulp+0x3a>
 800cf90:	2400      	movs	r4, #0
 800cf92:	051b      	lsls	r3, r3, #20
 800cf94:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cf98:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cf9c:	4622      	mov	r2, r4
 800cf9e:	462b      	mov	r3, r5
 800cfa0:	f7f3 fb06 	bl	80005b0 <__aeabi_dmul>
 800cfa4:	4604      	mov	r4, r0
 800cfa6:	460d      	mov	r5, r1
 800cfa8:	4620      	mov	r0, r4
 800cfaa:	4629      	mov	r1, r5
 800cfac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800cfb0 <_strtod_l>:
 800cfb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfb4:	469b      	mov	fp, r3
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	b0a1      	sub	sp, #132	; 0x84
 800cfba:	931c      	str	r3, [sp, #112]	; 0x70
 800cfbc:	4ba1      	ldr	r3, [pc, #644]	; (800d244 <_strtod_l+0x294>)
 800cfbe:	4682      	mov	sl, r0
 800cfc0:	681f      	ldr	r7, [r3, #0]
 800cfc2:	460e      	mov	r6, r1
 800cfc4:	4638      	mov	r0, r7
 800cfc6:	9217      	str	r2, [sp, #92]	; 0x5c
 800cfc8:	f7f3 f92e 	bl	8000228 <strlen>
 800cfcc:	f04f 0800 	mov.w	r8, #0
 800cfd0:	4604      	mov	r4, r0
 800cfd2:	f04f 0900 	mov.w	r9, #0
 800cfd6:	961b      	str	r6, [sp, #108]	; 0x6c
 800cfd8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cfda:	781a      	ldrb	r2, [r3, #0]
 800cfdc:	2a2b      	cmp	r2, #43	; 0x2b
 800cfde:	d04c      	beq.n	800d07a <_strtod_l+0xca>
 800cfe0:	d83a      	bhi.n	800d058 <_strtod_l+0xa8>
 800cfe2:	2a0d      	cmp	r2, #13
 800cfe4:	d833      	bhi.n	800d04e <_strtod_l+0x9e>
 800cfe6:	2a08      	cmp	r2, #8
 800cfe8:	d833      	bhi.n	800d052 <_strtod_l+0xa2>
 800cfea:	2a00      	cmp	r2, #0
 800cfec:	d03d      	beq.n	800d06a <_strtod_l+0xba>
 800cfee:	2300      	movs	r3, #0
 800cff0:	930c      	str	r3, [sp, #48]	; 0x30
 800cff2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800cff4:	782b      	ldrb	r3, [r5, #0]
 800cff6:	2b30      	cmp	r3, #48	; 0x30
 800cff8:	f040 80af 	bne.w	800d15a <_strtod_l+0x1aa>
 800cffc:	786b      	ldrb	r3, [r5, #1]
 800cffe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d002:	2b58      	cmp	r3, #88	; 0x58
 800d004:	d16c      	bne.n	800d0e0 <_strtod_l+0x130>
 800d006:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d008:	4650      	mov	r0, sl
 800d00a:	9301      	str	r3, [sp, #4]
 800d00c:	ab1c      	add	r3, sp, #112	; 0x70
 800d00e:	9300      	str	r3, [sp, #0]
 800d010:	4a8d      	ldr	r2, [pc, #564]	; (800d248 <_strtod_l+0x298>)
 800d012:	f8cd b008 	str.w	fp, [sp, #8]
 800d016:	ab1d      	add	r3, sp, #116	; 0x74
 800d018:	a91b      	add	r1, sp, #108	; 0x6c
 800d01a:	f001 fe99 	bl	800ed50 <__gethex>
 800d01e:	f010 0607 	ands.w	r6, r0, #7
 800d022:	4604      	mov	r4, r0
 800d024:	d005      	beq.n	800d032 <_strtod_l+0x82>
 800d026:	2e06      	cmp	r6, #6
 800d028:	d129      	bne.n	800d07e <_strtod_l+0xce>
 800d02a:	2300      	movs	r3, #0
 800d02c:	3501      	adds	r5, #1
 800d02e:	951b      	str	r5, [sp, #108]	; 0x6c
 800d030:	930c      	str	r3, [sp, #48]	; 0x30
 800d032:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d034:	2b00      	cmp	r3, #0
 800d036:	f040 8596 	bne.w	800db66 <_strtod_l+0xbb6>
 800d03a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d03c:	b1d3      	cbz	r3, 800d074 <_strtod_l+0xc4>
 800d03e:	4642      	mov	r2, r8
 800d040:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d044:	4610      	mov	r0, r2
 800d046:	4619      	mov	r1, r3
 800d048:	b021      	add	sp, #132	; 0x84
 800d04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d04e:	2a20      	cmp	r2, #32
 800d050:	d1cd      	bne.n	800cfee <_strtod_l+0x3e>
 800d052:	3301      	adds	r3, #1
 800d054:	931b      	str	r3, [sp, #108]	; 0x6c
 800d056:	e7bf      	b.n	800cfd8 <_strtod_l+0x28>
 800d058:	2a2d      	cmp	r2, #45	; 0x2d
 800d05a:	d1c8      	bne.n	800cfee <_strtod_l+0x3e>
 800d05c:	2201      	movs	r2, #1
 800d05e:	920c      	str	r2, [sp, #48]	; 0x30
 800d060:	1c5a      	adds	r2, r3, #1
 800d062:	921b      	str	r2, [sp, #108]	; 0x6c
 800d064:	785b      	ldrb	r3, [r3, #1]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d1c3      	bne.n	800cff2 <_strtod_l+0x42>
 800d06a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d06c:	961b      	str	r6, [sp, #108]	; 0x6c
 800d06e:	2b00      	cmp	r3, #0
 800d070:	f040 8577 	bne.w	800db62 <_strtod_l+0xbb2>
 800d074:	4642      	mov	r2, r8
 800d076:	464b      	mov	r3, r9
 800d078:	e7e4      	b.n	800d044 <_strtod_l+0x94>
 800d07a:	2200      	movs	r2, #0
 800d07c:	e7ef      	b.n	800d05e <_strtod_l+0xae>
 800d07e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d080:	b13a      	cbz	r2, 800d092 <_strtod_l+0xe2>
 800d082:	2135      	movs	r1, #53	; 0x35
 800d084:	a81e      	add	r0, sp, #120	; 0x78
 800d086:	f002 fe29 	bl	800fcdc <__copybits>
 800d08a:	4650      	mov	r0, sl
 800d08c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d08e:	f002 f9f1 	bl	800f474 <_Bfree>
 800d092:	3e01      	subs	r6, #1
 800d094:	2e05      	cmp	r6, #5
 800d096:	d807      	bhi.n	800d0a8 <_strtod_l+0xf8>
 800d098:	e8df f006 	tbb	[pc, r6]
 800d09c:	1d180b0e 	.word	0x1d180b0e
 800d0a0:	030e      	.short	0x030e
 800d0a2:	f04f 0900 	mov.w	r9, #0
 800d0a6:	46c8      	mov	r8, r9
 800d0a8:	0721      	lsls	r1, r4, #28
 800d0aa:	d5c2      	bpl.n	800d032 <_strtod_l+0x82>
 800d0ac:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800d0b0:	e7bf      	b.n	800d032 <_strtod_l+0x82>
 800d0b2:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800d0b6:	e7f7      	b.n	800d0a8 <_strtod_l+0xf8>
 800d0b8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d0ba:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800d0be:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d0c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d0c6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800d0ca:	e7ed      	b.n	800d0a8 <_strtod_l+0xf8>
 800d0cc:	f04f 0800 	mov.w	r8, #0
 800d0d0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800d24c <_strtod_l+0x29c>
 800d0d4:	e7e8      	b.n	800d0a8 <_strtod_l+0xf8>
 800d0d6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800d0da:	f04f 38ff 	mov.w	r8, #4294967295
 800d0de:	e7e3      	b.n	800d0a8 <_strtod_l+0xf8>
 800d0e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d0e2:	1c5a      	adds	r2, r3, #1
 800d0e4:	921b      	str	r2, [sp, #108]	; 0x6c
 800d0e6:	785b      	ldrb	r3, [r3, #1]
 800d0e8:	2b30      	cmp	r3, #48	; 0x30
 800d0ea:	d0f9      	beq.n	800d0e0 <_strtod_l+0x130>
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d0a0      	beq.n	800d032 <_strtod_l+0x82>
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	9307      	str	r3, [sp, #28]
 800d0f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d0f6:	220a      	movs	r2, #10
 800d0f8:	9308      	str	r3, [sp, #32]
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	469b      	mov	fp, r3
 800d0fe:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800d102:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800d104:	7805      	ldrb	r5, [r0, #0]
 800d106:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800d10a:	b2d9      	uxtb	r1, r3
 800d10c:	2909      	cmp	r1, #9
 800d10e:	d926      	bls.n	800d15e <_strtod_l+0x1ae>
 800d110:	4622      	mov	r2, r4
 800d112:	4639      	mov	r1, r7
 800d114:	f003 fc58 	bl	80109c8 <strncmp>
 800d118:	2800      	cmp	r0, #0
 800d11a:	d032      	beq.n	800d182 <_strtod_l+0x1d2>
 800d11c:	2000      	movs	r0, #0
 800d11e:	462b      	mov	r3, r5
 800d120:	465c      	mov	r4, fp
 800d122:	4602      	mov	r2, r0
 800d124:	9004      	str	r0, [sp, #16]
 800d126:	2b65      	cmp	r3, #101	; 0x65
 800d128:	d001      	beq.n	800d12e <_strtod_l+0x17e>
 800d12a:	2b45      	cmp	r3, #69	; 0x45
 800d12c:	d113      	bne.n	800d156 <_strtod_l+0x1a6>
 800d12e:	b91c      	cbnz	r4, 800d138 <_strtod_l+0x188>
 800d130:	9b07      	ldr	r3, [sp, #28]
 800d132:	4303      	orrs	r3, r0
 800d134:	d099      	beq.n	800d06a <_strtod_l+0xba>
 800d136:	2400      	movs	r4, #0
 800d138:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800d13a:	1c73      	adds	r3, r6, #1
 800d13c:	931b      	str	r3, [sp, #108]	; 0x6c
 800d13e:	7873      	ldrb	r3, [r6, #1]
 800d140:	2b2b      	cmp	r3, #43	; 0x2b
 800d142:	d078      	beq.n	800d236 <_strtod_l+0x286>
 800d144:	2b2d      	cmp	r3, #45	; 0x2d
 800d146:	d07b      	beq.n	800d240 <_strtod_l+0x290>
 800d148:	2700      	movs	r7, #0
 800d14a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800d14e:	2909      	cmp	r1, #9
 800d150:	f240 8082 	bls.w	800d258 <_strtod_l+0x2a8>
 800d154:	961b      	str	r6, [sp, #108]	; 0x6c
 800d156:	2500      	movs	r5, #0
 800d158:	e09e      	b.n	800d298 <_strtod_l+0x2e8>
 800d15a:	2300      	movs	r3, #0
 800d15c:	e7c9      	b.n	800d0f2 <_strtod_l+0x142>
 800d15e:	f1bb 0f08 	cmp.w	fp, #8
 800d162:	bfd5      	itete	le
 800d164:	9906      	ldrle	r1, [sp, #24]
 800d166:	9905      	ldrgt	r1, [sp, #20]
 800d168:	fb02 3301 	mlale	r3, r2, r1, r3
 800d16c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d170:	f100 0001 	add.w	r0, r0, #1
 800d174:	bfd4      	ite	le
 800d176:	9306      	strle	r3, [sp, #24]
 800d178:	9305      	strgt	r3, [sp, #20]
 800d17a:	f10b 0b01 	add.w	fp, fp, #1
 800d17e:	901b      	str	r0, [sp, #108]	; 0x6c
 800d180:	e7bf      	b.n	800d102 <_strtod_l+0x152>
 800d182:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d184:	191a      	adds	r2, r3, r4
 800d186:	921b      	str	r2, [sp, #108]	; 0x6c
 800d188:	5d1b      	ldrb	r3, [r3, r4]
 800d18a:	f1bb 0f00 	cmp.w	fp, #0
 800d18e:	d036      	beq.n	800d1fe <_strtod_l+0x24e>
 800d190:	465c      	mov	r4, fp
 800d192:	9004      	str	r0, [sp, #16]
 800d194:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800d198:	2a09      	cmp	r2, #9
 800d19a:	d912      	bls.n	800d1c2 <_strtod_l+0x212>
 800d19c:	2201      	movs	r2, #1
 800d19e:	e7c2      	b.n	800d126 <_strtod_l+0x176>
 800d1a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d1a2:	3001      	adds	r0, #1
 800d1a4:	1c5a      	adds	r2, r3, #1
 800d1a6:	921b      	str	r2, [sp, #108]	; 0x6c
 800d1a8:	785b      	ldrb	r3, [r3, #1]
 800d1aa:	2b30      	cmp	r3, #48	; 0x30
 800d1ac:	d0f8      	beq.n	800d1a0 <_strtod_l+0x1f0>
 800d1ae:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800d1b2:	2a08      	cmp	r2, #8
 800d1b4:	f200 84dc 	bhi.w	800db70 <_strtod_l+0xbc0>
 800d1b8:	9004      	str	r0, [sp, #16]
 800d1ba:	2000      	movs	r0, #0
 800d1bc:	4604      	mov	r4, r0
 800d1be:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d1c0:	9208      	str	r2, [sp, #32]
 800d1c2:	3b30      	subs	r3, #48	; 0x30
 800d1c4:	f100 0201 	add.w	r2, r0, #1
 800d1c8:	d013      	beq.n	800d1f2 <_strtod_l+0x242>
 800d1ca:	9904      	ldr	r1, [sp, #16]
 800d1cc:	1905      	adds	r5, r0, r4
 800d1ce:	4411      	add	r1, r2
 800d1d0:	9104      	str	r1, [sp, #16]
 800d1d2:	4622      	mov	r2, r4
 800d1d4:	210a      	movs	r1, #10
 800d1d6:	42aa      	cmp	r2, r5
 800d1d8:	d113      	bne.n	800d202 <_strtod_l+0x252>
 800d1da:	1822      	adds	r2, r4, r0
 800d1dc:	2a08      	cmp	r2, #8
 800d1de:	f104 0401 	add.w	r4, r4, #1
 800d1e2:	4404      	add	r4, r0
 800d1e4:	dc1b      	bgt.n	800d21e <_strtod_l+0x26e>
 800d1e6:	220a      	movs	r2, #10
 800d1e8:	9906      	ldr	r1, [sp, #24]
 800d1ea:	fb02 3301 	mla	r3, r2, r1, r3
 800d1ee:	9306      	str	r3, [sp, #24]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d1f4:	4610      	mov	r0, r2
 800d1f6:	1c59      	adds	r1, r3, #1
 800d1f8:	911b      	str	r1, [sp, #108]	; 0x6c
 800d1fa:	785b      	ldrb	r3, [r3, #1]
 800d1fc:	e7ca      	b.n	800d194 <_strtod_l+0x1e4>
 800d1fe:	4658      	mov	r0, fp
 800d200:	e7d3      	b.n	800d1aa <_strtod_l+0x1fa>
 800d202:	2a08      	cmp	r2, #8
 800d204:	dc04      	bgt.n	800d210 <_strtod_l+0x260>
 800d206:	9f06      	ldr	r7, [sp, #24]
 800d208:	434f      	muls	r7, r1
 800d20a:	9706      	str	r7, [sp, #24]
 800d20c:	3201      	adds	r2, #1
 800d20e:	e7e2      	b.n	800d1d6 <_strtod_l+0x226>
 800d210:	1c57      	adds	r7, r2, #1
 800d212:	2f10      	cmp	r7, #16
 800d214:	bfde      	ittt	le
 800d216:	9f05      	ldrle	r7, [sp, #20]
 800d218:	434f      	mulle	r7, r1
 800d21a:	9705      	strle	r7, [sp, #20]
 800d21c:	e7f6      	b.n	800d20c <_strtod_l+0x25c>
 800d21e:	2c10      	cmp	r4, #16
 800d220:	bfdf      	itttt	le
 800d222:	220a      	movle	r2, #10
 800d224:	9905      	ldrle	r1, [sp, #20]
 800d226:	fb02 3301 	mlale	r3, r2, r1, r3
 800d22a:	9305      	strle	r3, [sp, #20]
 800d22c:	e7e0      	b.n	800d1f0 <_strtod_l+0x240>
 800d22e:	2300      	movs	r3, #0
 800d230:	2201      	movs	r2, #1
 800d232:	9304      	str	r3, [sp, #16]
 800d234:	e77c      	b.n	800d130 <_strtod_l+0x180>
 800d236:	2700      	movs	r7, #0
 800d238:	1cb3      	adds	r3, r6, #2
 800d23a:	931b      	str	r3, [sp, #108]	; 0x6c
 800d23c:	78b3      	ldrb	r3, [r6, #2]
 800d23e:	e784      	b.n	800d14a <_strtod_l+0x19a>
 800d240:	2701      	movs	r7, #1
 800d242:	e7f9      	b.n	800d238 <_strtod_l+0x288>
 800d244:	08012754 	.word	0x08012754
 800d248:	080124a0 	.word	0x080124a0
 800d24c:	7ff00000 	.word	0x7ff00000
 800d250:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d252:	1c59      	adds	r1, r3, #1
 800d254:	911b      	str	r1, [sp, #108]	; 0x6c
 800d256:	785b      	ldrb	r3, [r3, #1]
 800d258:	2b30      	cmp	r3, #48	; 0x30
 800d25a:	d0f9      	beq.n	800d250 <_strtod_l+0x2a0>
 800d25c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800d260:	2908      	cmp	r1, #8
 800d262:	f63f af78 	bhi.w	800d156 <_strtod_l+0x1a6>
 800d266:	f04f 0e0a 	mov.w	lr, #10
 800d26a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800d26e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d270:	9309      	str	r3, [sp, #36]	; 0x24
 800d272:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d274:	1c59      	adds	r1, r3, #1
 800d276:	911b      	str	r1, [sp, #108]	; 0x6c
 800d278:	785b      	ldrb	r3, [r3, #1]
 800d27a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800d27e:	2d09      	cmp	r5, #9
 800d280:	d935      	bls.n	800d2ee <_strtod_l+0x33e>
 800d282:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d284:	1b49      	subs	r1, r1, r5
 800d286:	2908      	cmp	r1, #8
 800d288:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800d28c:	dc02      	bgt.n	800d294 <_strtod_l+0x2e4>
 800d28e:	4565      	cmp	r5, ip
 800d290:	bfa8      	it	ge
 800d292:	4665      	movge	r5, ip
 800d294:	b107      	cbz	r7, 800d298 <_strtod_l+0x2e8>
 800d296:	426d      	negs	r5, r5
 800d298:	2c00      	cmp	r4, #0
 800d29a:	d14c      	bne.n	800d336 <_strtod_l+0x386>
 800d29c:	9907      	ldr	r1, [sp, #28]
 800d29e:	4301      	orrs	r1, r0
 800d2a0:	f47f aec7 	bne.w	800d032 <_strtod_l+0x82>
 800d2a4:	2a00      	cmp	r2, #0
 800d2a6:	f47f aee0 	bne.w	800d06a <_strtod_l+0xba>
 800d2aa:	2b69      	cmp	r3, #105	; 0x69
 800d2ac:	d026      	beq.n	800d2fc <_strtod_l+0x34c>
 800d2ae:	dc23      	bgt.n	800d2f8 <_strtod_l+0x348>
 800d2b0:	2b49      	cmp	r3, #73	; 0x49
 800d2b2:	d023      	beq.n	800d2fc <_strtod_l+0x34c>
 800d2b4:	2b4e      	cmp	r3, #78	; 0x4e
 800d2b6:	f47f aed8 	bne.w	800d06a <_strtod_l+0xba>
 800d2ba:	499c      	ldr	r1, [pc, #624]	; (800d52c <_strtod_l+0x57c>)
 800d2bc:	a81b      	add	r0, sp, #108	; 0x6c
 800d2be:	f001 ff95 	bl	800f1ec <__match>
 800d2c2:	2800      	cmp	r0, #0
 800d2c4:	f43f aed1 	beq.w	800d06a <_strtod_l+0xba>
 800d2c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d2ca:	781b      	ldrb	r3, [r3, #0]
 800d2cc:	2b28      	cmp	r3, #40	; 0x28
 800d2ce:	d12c      	bne.n	800d32a <_strtod_l+0x37a>
 800d2d0:	4997      	ldr	r1, [pc, #604]	; (800d530 <_strtod_l+0x580>)
 800d2d2:	aa1e      	add	r2, sp, #120	; 0x78
 800d2d4:	a81b      	add	r0, sp, #108	; 0x6c
 800d2d6:	f001 ff9d 	bl	800f214 <__hexnan>
 800d2da:	2805      	cmp	r0, #5
 800d2dc:	d125      	bne.n	800d32a <_strtod_l+0x37a>
 800d2de:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d2e0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 800d2e4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800d2e8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800d2ec:	e6a1      	b.n	800d032 <_strtod_l+0x82>
 800d2ee:	fb0e 3c0c 	mla	ip, lr, ip, r3
 800d2f2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800d2f6:	e7bc      	b.n	800d272 <_strtod_l+0x2c2>
 800d2f8:	2b6e      	cmp	r3, #110	; 0x6e
 800d2fa:	e7dc      	b.n	800d2b6 <_strtod_l+0x306>
 800d2fc:	498d      	ldr	r1, [pc, #564]	; (800d534 <_strtod_l+0x584>)
 800d2fe:	a81b      	add	r0, sp, #108	; 0x6c
 800d300:	f001 ff74 	bl	800f1ec <__match>
 800d304:	2800      	cmp	r0, #0
 800d306:	f43f aeb0 	beq.w	800d06a <_strtod_l+0xba>
 800d30a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d30c:	498a      	ldr	r1, [pc, #552]	; (800d538 <_strtod_l+0x588>)
 800d30e:	3b01      	subs	r3, #1
 800d310:	a81b      	add	r0, sp, #108	; 0x6c
 800d312:	931b      	str	r3, [sp, #108]	; 0x6c
 800d314:	f001 ff6a 	bl	800f1ec <__match>
 800d318:	b910      	cbnz	r0, 800d320 <_strtod_l+0x370>
 800d31a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d31c:	3301      	adds	r3, #1
 800d31e:	931b      	str	r3, [sp, #108]	; 0x6c
 800d320:	f04f 0800 	mov.w	r8, #0
 800d324:	f8df 9220 	ldr.w	r9, [pc, #544]	; 800d548 <_strtod_l+0x598>
 800d328:	e683      	b.n	800d032 <_strtod_l+0x82>
 800d32a:	4884      	ldr	r0, [pc, #528]	; (800d53c <_strtod_l+0x58c>)
 800d32c:	f003 fb0c 	bl	8010948 <nan>
 800d330:	4680      	mov	r8, r0
 800d332:	4689      	mov	r9, r1
 800d334:	e67d      	b.n	800d032 <_strtod_l+0x82>
 800d336:	9b04      	ldr	r3, [sp, #16]
 800d338:	f1bb 0f00 	cmp.w	fp, #0
 800d33c:	bf08      	it	eq
 800d33e:	46a3      	moveq	fp, r4
 800d340:	1aeb      	subs	r3, r5, r3
 800d342:	2c10      	cmp	r4, #16
 800d344:	9806      	ldr	r0, [sp, #24]
 800d346:	4626      	mov	r6, r4
 800d348:	9307      	str	r3, [sp, #28]
 800d34a:	bfa8      	it	ge
 800d34c:	2610      	movge	r6, #16
 800d34e:	f7f3 f8b5 	bl	80004bc <__aeabi_ui2d>
 800d352:	2c09      	cmp	r4, #9
 800d354:	4680      	mov	r8, r0
 800d356:	4689      	mov	r9, r1
 800d358:	dd13      	ble.n	800d382 <_strtod_l+0x3d2>
 800d35a:	4b79      	ldr	r3, [pc, #484]	; (800d540 <_strtod_l+0x590>)
 800d35c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d360:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d364:	f7f3 f924 	bl	80005b0 <__aeabi_dmul>
 800d368:	4680      	mov	r8, r0
 800d36a:	9805      	ldr	r0, [sp, #20]
 800d36c:	4689      	mov	r9, r1
 800d36e:	f7f3 f8a5 	bl	80004bc <__aeabi_ui2d>
 800d372:	4602      	mov	r2, r0
 800d374:	460b      	mov	r3, r1
 800d376:	4640      	mov	r0, r8
 800d378:	4649      	mov	r1, r9
 800d37a:	f7f2 ff63 	bl	8000244 <__adddf3>
 800d37e:	4680      	mov	r8, r0
 800d380:	4689      	mov	r9, r1
 800d382:	2c0f      	cmp	r4, #15
 800d384:	dc36      	bgt.n	800d3f4 <_strtod_l+0x444>
 800d386:	9b07      	ldr	r3, [sp, #28]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	f43f ae52 	beq.w	800d032 <_strtod_l+0x82>
 800d38e:	dd22      	ble.n	800d3d6 <_strtod_l+0x426>
 800d390:	2b16      	cmp	r3, #22
 800d392:	dc09      	bgt.n	800d3a8 <_strtod_l+0x3f8>
 800d394:	4c6a      	ldr	r4, [pc, #424]	; (800d540 <_strtod_l+0x590>)
 800d396:	4642      	mov	r2, r8
 800d398:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800d39c:	464b      	mov	r3, r9
 800d39e:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d3a2:	f7f3 f905 	bl	80005b0 <__aeabi_dmul>
 800d3a6:	e7c3      	b.n	800d330 <_strtod_l+0x380>
 800d3a8:	9a07      	ldr	r2, [sp, #28]
 800d3aa:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800d3ae:	4293      	cmp	r3, r2
 800d3b0:	db20      	blt.n	800d3f4 <_strtod_l+0x444>
 800d3b2:	4d63      	ldr	r5, [pc, #396]	; (800d540 <_strtod_l+0x590>)
 800d3b4:	f1c4 040f 	rsb	r4, r4, #15
 800d3b8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800d3bc:	4642      	mov	r2, r8
 800d3be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3c2:	464b      	mov	r3, r9
 800d3c4:	f7f3 f8f4 	bl	80005b0 <__aeabi_dmul>
 800d3c8:	9b07      	ldr	r3, [sp, #28]
 800d3ca:	1b1c      	subs	r4, r3, r4
 800d3cc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800d3d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d3d4:	e7e5      	b.n	800d3a2 <_strtod_l+0x3f2>
 800d3d6:	9b07      	ldr	r3, [sp, #28]
 800d3d8:	3316      	adds	r3, #22
 800d3da:	db0b      	blt.n	800d3f4 <_strtod_l+0x444>
 800d3dc:	9b04      	ldr	r3, [sp, #16]
 800d3de:	4a58      	ldr	r2, [pc, #352]	; (800d540 <_strtod_l+0x590>)
 800d3e0:	1b5d      	subs	r5, r3, r5
 800d3e2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800d3e6:	4640      	mov	r0, r8
 800d3e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d3ec:	4649      	mov	r1, r9
 800d3ee:	f7f3 fa09 	bl	8000804 <__aeabi_ddiv>
 800d3f2:	e79d      	b.n	800d330 <_strtod_l+0x380>
 800d3f4:	9b07      	ldr	r3, [sp, #28]
 800d3f6:	1ba6      	subs	r6, r4, r6
 800d3f8:	441e      	add	r6, r3
 800d3fa:	2e00      	cmp	r6, #0
 800d3fc:	dd71      	ble.n	800d4e2 <_strtod_l+0x532>
 800d3fe:	f016 030f 	ands.w	r3, r6, #15
 800d402:	d00a      	beq.n	800d41a <_strtod_l+0x46a>
 800d404:	494e      	ldr	r1, [pc, #312]	; (800d540 <_strtod_l+0x590>)
 800d406:	4642      	mov	r2, r8
 800d408:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d40c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d410:	464b      	mov	r3, r9
 800d412:	f7f3 f8cd 	bl	80005b0 <__aeabi_dmul>
 800d416:	4680      	mov	r8, r0
 800d418:	4689      	mov	r9, r1
 800d41a:	f036 060f 	bics.w	r6, r6, #15
 800d41e:	d050      	beq.n	800d4c2 <_strtod_l+0x512>
 800d420:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800d424:	dd27      	ble.n	800d476 <_strtod_l+0x4c6>
 800d426:	f04f 0b00 	mov.w	fp, #0
 800d42a:	f8cd b010 	str.w	fp, [sp, #16]
 800d42e:	f8cd b020 	str.w	fp, [sp, #32]
 800d432:	f8cd b018 	str.w	fp, [sp, #24]
 800d436:	2322      	movs	r3, #34	; 0x22
 800d438:	f04f 0800 	mov.w	r8, #0
 800d43c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800d548 <_strtod_l+0x598>
 800d440:	f8ca 3000 	str.w	r3, [sl]
 800d444:	9b08      	ldr	r3, [sp, #32]
 800d446:	2b00      	cmp	r3, #0
 800d448:	f43f adf3 	beq.w	800d032 <_strtod_l+0x82>
 800d44c:	4650      	mov	r0, sl
 800d44e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d450:	f002 f810 	bl	800f474 <_Bfree>
 800d454:	4650      	mov	r0, sl
 800d456:	9906      	ldr	r1, [sp, #24]
 800d458:	f002 f80c 	bl	800f474 <_Bfree>
 800d45c:	4650      	mov	r0, sl
 800d45e:	9904      	ldr	r1, [sp, #16]
 800d460:	f002 f808 	bl	800f474 <_Bfree>
 800d464:	4650      	mov	r0, sl
 800d466:	9908      	ldr	r1, [sp, #32]
 800d468:	f002 f804 	bl	800f474 <_Bfree>
 800d46c:	4659      	mov	r1, fp
 800d46e:	4650      	mov	r0, sl
 800d470:	f002 f800 	bl	800f474 <_Bfree>
 800d474:	e5dd      	b.n	800d032 <_strtod_l+0x82>
 800d476:	2300      	movs	r3, #0
 800d478:	4640      	mov	r0, r8
 800d47a:	4649      	mov	r1, r9
 800d47c:	461f      	mov	r7, r3
 800d47e:	1136      	asrs	r6, r6, #4
 800d480:	2e01      	cmp	r6, #1
 800d482:	dc21      	bgt.n	800d4c8 <_strtod_l+0x518>
 800d484:	b10b      	cbz	r3, 800d48a <_strtod_l+0x4da>
 800d486:	4680      	mov	r8, r0
 800d488:	4689      	mov	r9, r1
 800d48a:	4b2e      	ldr	r3, [pc, #184]	; (800d544 <_strtod_l+0x594>)
 800d48c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800d490:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800d494:	4642      	mov	r2, r8
 800d496:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d49a:	464b      	mov	r3, r9
 800d49c:	f7f3 f888 	bl	80005b0 <__aeabi_dmul>
 800d4a0:	4b29      	ldr	r3, [pc, #164]	; (800d548 <_strtod_l+0x598>)
 800d4a2:	460a      	mov	r2, r1
 800d4a4:	400b      	ands	r3, r1
 800d4a6:	4929      	ldr	r1, [pc, #164]	; (800d54c <_strtod_l+0x59c>)
 800d4a8:	4680      	mov	r8, r0
 800d4aa:	428b      	cmp	r3, r1
 800d4ac:	d8bb      	bhi.n	800d426 <_strtod_l+0x476>
 800d4ae:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d4b2:	428b      	cmp	r3, r1
 800d4b4:	bf86      	itte	hi
 800d4b6:	f04f 38ff 	movhi.w	r8, #4294967295
 800d4ba:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800d550 <_strtod_l+0x5a0>
 800d4be:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	9305      	str	r3, [sp, #20]
 800d4c6:	e07e      	b.n	800d5c6 <_strtod_l+0x616>
 800d4c8:	07f2      	lsls	r2, r6, #31
 800d4ca:	d507      	bpl.n	800d4dc <_strtod_l+0x52c>
 800d4cc:	4b1d      	ldr	r3, [pc, #116]	; (800d544 <_strtod_l+0x594>)
 800d4ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d6:	f7f3 f86b 	bl	80005b0 <__aeabi_dmul>
 800d4da:	2301      	movs	r3, #1
 800d4dc:	3701      	adds	r7, #1
 800d4de:	1076      	asrs	r6, r6, #1
 800d4e0:	e7ce      	b.n	800d480 <_strtod_l+0x4d0>
 800d4e2:	d0ee      	beq.n	800d4c2 <_strtod_l+0x512>
 800d4e4:	4276      	negs	r6, r6
 800d4e6:	f016 020f 	ands.w	r2, r6, #15
 800d4ea:	d00a      	beq.n	800d502 <_strtod_l+0x552>
 800d4ec:	4b14      	ldr	r3, [pc, #80]	; (800d540 <_strtod_l+0x590>)
 800d4ee:	4640      	mov	r0, r8
 800d4f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d4f4:	4649      	mov	r1, r9
 800d4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4fa:	f7f3 f983 	bl	8000804 <__aeabi_ddiv>
 800d4fe:	4680      	mov	r8, r0
 800d500:	4689      	mov	r9, r1
 800d502:	1136      	asrs	r6, r6, #4
 800d504:	d0dd      	beq.n	800d4c2 <_strtod_l+0x512>
 800d506:	2e1f      	cmp	r6, #31
 800d508:	dd24      	ble.n	800d554 <_strtod_l+0x5a4>
 800d50a:	f04f 0b00 	mov.w	fp, #0
 800d50e:	f8cd b010 	str.w	fp, [sp, #16]
 800d512:	f8cd b020 	str.w	fp, [sp, #32]
 800d516:	f8cd b018 	str.w	fp, [sp, #24]
 800d51a:	2322      	movs	r3, #34	; 0x22
 800d51c:	f04f 0800 	mov.w	r8, #0
 800d520:	f04f 0900 	mov.w	r9, #0
 800d524:	f8ca 3000 	str.w	r3, [sl]
 800d528:	e78c      	b.n	800d444 <_strtod_l+0x494>
 800d52a:	bf00      	nop
 800d52c:	08012475 	.word	0x08012475
 800d530:	080124b4 	.word	0x080124b4
 800d534:	0801246d 	.word	0x0801246d
 800d538:	080125f4 	.word	0x080125f4
 800d53c:	0801292b 	.word	0x0801292b
 800d540:	080127f0 	.word	0x080127f0
 800d544:	080127c8 	.word	0x080127c8
 800d548:	7ff00000 	.word	0x7ff00000
 800d54c:	7ca00000 	.word	0x7ca00000
 800d550:	7fefffff 	.word	0x7fefffff
 800d554:	f016 0310 	ands.w	r3, r6, #16
 800d558:	bf18      	it	ne
 800d55a:	236a      	movne	r3, #106	; 0x6a
 800d55c:	4640      	mov	r0, r8
 800d55e:	9305      	str	r3, [sp, #20]
 800d560:	4649      	mov	r1, r9
 800d562:	2300      	movs	r3, #0
 800d564:	4fb2      	ldr	r7, [pc, #712]	; (800d830 <_strtod_l+0x880>)
 800d566:	07f2      	lsls	r2, r6, #31
 800d568:	d504      	bpl.n	800d574 <_strtod_l+0x5c4>
 800d56a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d56e:	f7f3 f81f 	bl	80005b0 <__aeabi_dmul>
 800d572:	2301      	movs	r3, #1
 800d574:	1076      	asrs	r6, r6, #1
 800d576:	f107 0708 	add.w	r7, r7, #8
 800d57a:	d1f4      	bne.n	800d566 <_strtod_l+0x5b6>
 800d57c:	b10b      	cbz	r3, 800d582 <_strtod_l+0x5d2>
 800d57e:	4680      	mov	r8, r0
 800d580:	4689      	mov	r9, r1
 800d582:	9b05      	ldr	r3, [sp, #20]
 800d584:	b1bb      	cbz	r3, 800d5b6 <_strtod_l+0x606>
 800d586:	f3c9 530a 	ubfx	r3, r9, #20, #11
 800d58a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d58e:	2b00      	cmp	r3, #0
 800d590:	4649      	mov	r1, r9
 800d592:	dd10      	ble.n	800d5b6 <_strtod_l+0x606>
 800d594:	2b1f      	cmp	r3, #31
 800d596:	f340 812b 	ble.w	800d7f0 <_strtod_l+0x840>
 800d59a:	2b34      	cmp	r3, #52	; 0x34
 800d59c:	bfd8      	it	le
 800d59e:	f04f 32ff 	movle.w	r2, #4294967295
 800d5a2:	f04f 0800 	mov.w	r8, #0
 800d5a6:	bfcf      	iteee	gt
 800d5a8:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800d5ac:	3b20      	suble	r3, #32
 800d5ae:	fa02 f303 	lslle.w	r3, r2, r3
 800d5b2:	ea03 0901 	andle.w	r9, r3, r1
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	4640      	mov	r0, r8
 800d5bc:	4649      	mov	r1, r9
 800d5be:	f7f3 fa5f 	bl	8000a80 <__aeabi_dcmpeq>
 800d5c2:	2800      	cmp	r0, #0
 800d5c4:	d1a1      	bne.n	800d50a <_strtod_l+0x55a>
 800d5c6:	9b06      	ldr	r3, [sp, #24]
 800d5c8:	465a      	mov	r2, fp
 800d5ca:	9300      	str	r3, [sp, #0]
 800d5cc:	4650      	mov	r0, sl
 800d5ce:	4623      	mov	r3, r4
 800d5d0:	9908      	ldr	r1, [sp, #32]
 800d5d2:	f001 ffbb 	bl	800f54c <__s2b>
 800d5d6:	9008      	str	r0, [sp, #32]
 800d5d8:	2800      	cmp	r0, #0
 800d5da:	f43f af24 	beq.w	800d426 <_strtod_l+0x476>
 800d5de:	9b04      	ldr	r3, [sp, #16]
 800d5e0:	f04f 0b00 	mov.w	fp, #0
 800d5e4:	1b5d      	subs	r5, r3, r5
 800d5e6:	9b07      	ldr	r3, [sp, #28]
 800d5e8:	f8cd b010 	str.w	fp, [sp, #16]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	bfb4      	ite	lt
 800d5f0:	462b      	movlt	r3, r5
 800d5f2:	2300      	movge	r3, #0
 800d5f4:	930e      	str	r3, [sp, #56]	; 0x38
 800d5f6:	9b07      	ldr	r3, [sp, #28]
 800d5f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d5fc:	9316      	str	r3, [sp, #88]	; 0x58
 800d5fe:	9b08      	ldr	r3, [sp, #32]
 800d600:	4650      	mov	r0, sl
 800d602:	6859      	ldr	r1, [r3, #4]
 800d604:	f001 fef6 	bl	800f3f4 <_Balloc>
 800d608:	9006      	str	r0, [sp, #24]
 800d60a:	2800      	cmp	r0, #0
 800d60c:	f43f af13 	beq.w	800d436 <_strtod_l+0x486>
 800d610:	9b08      	ldr	r3, [sp, #32]
 800d612:	300c      	adds	r0, #12
 800d614:	691a      	ldr	r2, [r3, #16]
 800d616:	f103 010c 	add.w	r1, r3, #12
 800d61a:	3202      	adds	r2, #2
 800d61c:	0092      	lsls	r2, r2, #2
 800d61e:	f001 fecf 	bl	800f3c0 <memcpy>
 800d622:	ab1e      	add	r3, sp, #120	; 0x78
 800d624:	9301      	str	r3, [sp, #4]
 800d626:	ab1d      	add	r3, sp, #116	; 0x74
 800d628:	9300      	str	r3, [sp, #0]
 800d62a:	4642      	mov	r2, r8
 800d62c:	464b      	mov	r3, r9
 800d62e:	4650      	mov	r0, sl
 800d630:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800d634:	f002 fac8 	bl	800fbc8 <__d2b>
 800d638:	901c      	str	r0, [sp, #112]	; 0x70
 800d63a:	2800      	cmp	r0, #0
 800d63c:	f43f aefb 	beq.w	800d436 <_strtod_l+0x486>
 800d640:	2101      	movs	r1, #1
 800d642:	4650      	mov	r0, sl
 800d644:	f002 f81a 	bl	800f67c <__i2b>
 800d648:	4603      	mov	r3, r0
 800d64a:	9004      	str	r0, [sp, #16]
 800d64c:	2800      	cmp	r0, #0
 800d64e:	f43f aef2 	beq.w	800d436 <_strtod_l+0x486>
 800d652:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800d654:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d656:	2d00      	cmp	r5, #0
 800d658:	bfab      	itete	ge
 800d65a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800d65c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800d65e:	18ee      	addge	r6, r5, r3
 800d660:	1b5c      	sublt	r4, r3, r5
 800d662:	9b05      	ldr	r3, [sp, #20]
 800d664:	bfa8      	it	ge
 800d666:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800d668:	eba5 0503 	sub.w	r5, r5, r3
 800d66c:	4415      	add	r5, r2
 800d66e:	4b71      	ldr	r3, [pc, #452]	; (800d834 <_strtod_l+0x884>)
 800d670:	f105 35ff 	add.w	r5, r5, #4294967295
 800d674:	bfb8      	it	lt
 800d676:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800d678:	429d      	cmp	r5, r3
 800d67a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d67e:	f280 80c9 	bge.w	800d814 <_strtod_l+0x864>
 800d682:	1b5b      	subs	r3, r3, r5
 800d684:	2b1f      	cmp	r3, #31
 800d686:	f04f 0701 	mov.w	r7, #1
 800d68a:	eba2 0203 	sub.w	r2, r2, r3
 800d68e:	f300 80b6 	bgt.w	800d7fe <_strtod_l+0x84e>
 800d692:	2500      	movs	r5, #0
 800d694:	fa07 f303 	lsl.w	r3, r7, r3
 800d698:	930f      	str	r3, [sp, #60]	; 0x3c
 800d69a:	18b7      	adds	r7, r6, r2
 800d69c:	9b05      	ldr	r3, [sp, #20]
 800d69e:	42be      	cmp	r6, r7
 800d6a0:	4414      	add	r4, r2
 800d6a2:	441c      	add	r4, r3
 800d6a4:	4633      	mov	r3, r6
 800d6a6:	bfa8      	it	ge
 800d6a8:	463b      	movge	r3, r7
 800d6aa:	42a3      	cmp	r3, r4
 800d6ac:	bfa8      	it	ge
 800d6ae:	4623      	movge	r3, r4
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	bfc2      	ittt	gt
 800d6b4:	1aff      	subgt	r7, r7, r3
 800d6b6:	1ae4      	subgt	r4, r4, r3
 800d6b8:	1af6      	subgt	r6, r6, r3
 800d6ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	dd17      	ble.n	800d6f0 <_strtod_l+0x740>
 800d6c0:	461a      	mov	r2, r3
 800d6c2:	4650      	mov	r0, sl
 800d6c4:	9904      	ldr	r1, [sp, #16]
 800d6c6:	f002 f893 	bl	800f7f0 <__pow5mult>
 800d6ca:	9004      	str	r0, [sp, #16]
 800d6cc:	2800      	cmp	r0, #0
 800d6ce:	f43f aeb2 	beq.w	800d436 <_strtod_l+0x486>
 800d6d2:	4601      	mov	r1, r0
 800d6d4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d6d6:	4650      	mov	r0, sl
 800d6d8:	f001 ffe6 	bl	800f6a8 <__multiply>
 800d6dc:	9009      	str	r0, [sp, #36]	; 0x24
 800d6de:	2800      	cmp	r0, #0
 800d6e0:	f43f aea9 	beq.w	800d436 <_strtod_l+0x486>
 800d6e4:	4650      	mov	r0, sl
 800d6e6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d6e8:	f001 fec4 	bl	800f474 <_Bfree>
 800d6ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6ee:	931c      	str	r3, [sp, #112]	; 0x70
 800d6f0:	2f00      	cmp	r7, #0
 800d6f2:	f300 8093 	bgt.w	800d81c <_strtod_l+0x86c>
 800d6f6:	9b07      	ldr	r3, [sp, #28]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	dd08      	ble.n	800d70e <_strtod_l+0x75e>
 800d6fc:	4650      	mov	r0, sl
 800d6fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d700:	9906      	ldr	r1, [sp, #24]
 800d702:	f002 f875 	bl	800f7f0 <__pow5mult>
 800d706:	9006      	str	r0, [sp, #24]
 800d708:	2800      	cmp	r0, #0
 800d70a:	f43f ae94 	beq.w	800d436 <_strtod_l+0x486>
 800d70e:	2c00      	cmp	r4, #0
 800d710:	dd08      	ble.n	800d724 <_strtod_l+0x774>
 800d712:	4622      	mov	r2, r4
 800d714:	4650      	mov	r0, sl
 800d716:	9906      	ldr	r1, [sp, #24]
 800d718:	f002 f8c4 	bl	800f8a4 <__lshift>
 800d71c:	9006      	str	r0, [sp, #24]
 800d71e:	2800      	cmp	r0, #0
 800d720:	f43f ae89 	beq.w	800d436 <_strtod_l+0x486>
 800d724:	2e00      	cmp	r6, #0
 800d726:	dd08      	ble.n	800d73a <_strtod_l+0x78a>
 800d728:	4632      	mov	r2, r6
 800d72a:	4650      	mov	r0, sl
 800d72c:	9904      	ldr	r1, [sp, #16]
 800d72e:	f002 f8b9 	bl	800f8a4 <__lshift>
 800d732:	9004      	str	r0, [sp, #16]
 800d734:	2800      	cmp	r0, #0
 800d736:	f43f ae7e 	beq.w	800d436 <_strtod_l+0x486>
 800d73a:	4650      	mov	r0, sl
 800d73c:	9a06      	ldr	r2, [sp, #24]
 800d73e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d740:	f002 f938 	bl	800f9b4 <__mdiff>
 800d744:	4683      	mov	fp, r0
 800d746:	2800      	cmp	r0, #0
 800d748:	f43f ae75 	beq.w	800d436 <_strtod_l+0x486>
 800d74c:	2400      	movs	r4, #0
 800d74e:	68c3      	ldr	r3, [r0, #12]
 800d750:	9904      	ldr	r1, [sp, #16]
 800d752:	60c4      	str	r4, [r0, #12]
 800d754:	930d      	str	r3, [sp, #52]	; 0x34
 800d756:	f002 f911 	bl	800f97c <__mcmp>
 800d75a:	42a0      	cmp	r0, r4
 800d75c:	da70      	bge.n	800d840 <_strtod_l+0x890>
 800d75e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d760:	ea53 0308 	orrs.w	r3, r3, r8
 800d764:	f040 8096 	bne.w	800d894 <_strtod_l+0x8e4>
 800d768:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	f040 8091 	bne.w	800d894 <_strtod_l+0x8e4>
 800d772:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d776:	0d1b      	lsrs	r3, r3, #20
 800d778:	051b      	lsls	r3, r3, #20
 800d77a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d77e:	f240 8089 	bls.w	800d894 <_strtod_l+0x8e4>
 800d782:	f8db 3014 	ldr.w	r3, [fp, #20]
 800d786:	b923      	cbnz	r3, 800d792 <_strtod_l+0x7e2>
 800d788:	f8db 3010 	ldr.w	r3, [fp, #16]
 800d78c:	2b01      	cmp	r3, #1
 800d78e:	f340 8081 	ble.w	800d894 <_strtod_l+0x8e4>
 800d792:	4659      	mov	r1, fp
 800d794:	2201      	movs	r2, #1
 800d796:	4650      	mov	r0, sl
 800d798:	f002 f884 	bl	800f8a4 <__lshift>
 800d79c:	9904      	ldr	r1, [sp, #16]
 800d79e:	4683      	mov	fp, r0
 800d7a0:	f002 f8ec 	bl	800f97c <__mcmp>
 800d7a4:	2800      	cmp	r0, #0
 800d7a6:	dd75      	ble.n	800d894 <_strtod_l+0x8e4>
 800d7a8:	9905      	ldr	r1, [sp, #20]
 800d7aa:	464b      	mov	r3, r9
 800d7ac:	4a22      	ldr	r2, [pc, #136]	; (800d838 <_strtod_l+0x888>)
 800d7ae:	2900      	cmp	r1, #0
 800d7b0:	f000 8091 	beq.w	800d8d6 <_strtod_l+0x926>
 800d7b4:	ea02 0109 	and.w	r1, r2, r9
 800d7b8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d7bc:	f300 808b 	bgt.w	800d8d6 <_strtod_l+0x926>
 800d7c0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d7c4:	f77f aea9 	ble.w	800d51a <_strtod_l+0x56a>
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	4a1c      	ldr	r2, [pc, #112]	; (800d83c <_strtod_l+0x88c>)
 800d7cc:	4640      	mov	r0, r8
 800d7ce:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800d7d2:	4649      	mov	r1, r9
 800d7d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d7d8:	f7f2 feea 	bl	80005b0 <__aeabi_dmul>
 800d7dc:	460b      	mov	r3, r1
 800d7de:	4303      	orrs	r3, r0
 800d7e0:	bf08      	it	eq
 800d7e2:	2322      	moveq	r3, #34	; 0x22
 800d7e4:	4680      	mov	r8, r0
 800d7e6:	4689      	mov	r9, r1
 800d7e8:	bf08      	it	eq
 800d7ea:	f8ca 3000 	streq.w	r3, [sl]
 800d7ee:	e62d      	b.n	800d44c <_strtod_l+0x49c>
 800d7f0:	f04f 32ff 	mov.w	r2, #4294967295
 800d7f4:	fa02 f303 	lsl.w	r3, r2, r3
 800d7f8:	ea03 0808 	and.w	r8, r3, r8
 800d7fc:	e6db      	b.n	800d5b6 <_strtod_l+0x606>
 800d7fe:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800d802:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800d806:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800d80a:	35e2      	adds	r5, #226	; 0xe2
 800d80c:	fa07 f505 	lsl.w	r5, r7, r5
 800d810:	970f      	str	r7, [sp, #60]	; 0x3c
 800d812:	e742      	b.n	800d69a <_strtod_l+0x6ea>
 800d814:	2301      	movs	r3, #1
 800d816:	2500      	movs	r5, #0
 800d818:	930f      	str	r3, [sp, #60]	; 0x3c
 800d81a:	e73e      	b.n	800d69a <_strtod_l+0x6ea>
 800d81c:	463a      	mov	r2, r7
 800d81e:	4650      	mov	r0, sl
 800d820:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d822:	f002 f83f 	bl	800f8a4 <__lshift>
 800d826:	901c      	str	r0, [sp, #112]	; 0x70
 800d828:	2800      	cmp	r0, #0
 800d82a:	f47f af64 	bne.w	800d6f6 <_strtod_l+0x746>
 800d82e:	e602      	b.n	800d436 <_strtod_l+0x486>
 800d830:	080124c8 	.word	0x080124c8
 800d834:	fffffc02 	.word	0xfffffc02
 800d838:	7ff00000 	.word	0x7ff00000
 800d83c:	39500000 	.word	0x39500000
 800d840:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800d844:	d166      	bne.n	800d914 <_strtod_l+0x964>
 800d846:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d848:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d84c:	b35a      	cbz	r2, 800d8a6 <_strtod_l+0x8f6>
 800d84e:	4a9c      	ldr	r2, [pc, #624]	; (800dac0 <_strtod_l+0xb10>)
 800d850:	4293      	cmp	r3, r2
 800d852:	d12c      	bne.n	800d8ae <_strtod_l+0x8fe>
 800d854:	9b05      	ldr	r3, [sp, #20]
 800d856:	4640      	mov	r0, r8
 800d858:	b303      	cbz	r3, 800d89c <_strtod_l+0x8ec>
 800d85a:	464b      	mov	r3, r9
 800d85c:	4a99      	ldr	r2, [pc, #612]	; (800dac4 <_strtod_l+0xb14>)
 800d85e:	f04f 31ff 	mov.w	r1, #4294967295
 800d862:	401a      	ands	r2, r3
 800d864:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800d868:	d81b      	bhi.n	800d8a2 <_strtod_l+0x8f2>
 800d86a:	0d12      	lsrs	r2, r2, #20
 800d86c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d870:	fa01 f303 	lsl.w	r3, r1, r3
 800d874:	4298      	cmp	r0, r3
 800d876:	d11a      	bne.n	800d8ae <_strtod_l+0x8fe>
 800d878:	4b93      	ldr	r3, [pc, #588]	; (800dac8 <_strtod_l+0xb18>)
 800d87a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d87c:	429a      	cmp	r2, r3
 800d87e:	d102      	bne.n	800d886 <_strtod_l+0x8d6>
 800d880:	3001      	adds	r0, #1
 800d882:	f43f add8 	beq.w	800d436 <_strtod_l+0x486>
 800d886:	f04f 0800 	mov.w	r8, #0
 800d88a:	4b8e      	ldr	r3, [pc, #568]	; (800dac4 <_strtod_l+0xb14>)
 800d88c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d88e:	401a      	ands	r2, r3
 800d890:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800d894:	9b05      	ldr	r3, [sp, #20]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d196      	bne.n	800d7c8 <_strtod_l+0x818>
 800d89a:	e5d7      	b.n	800d44c <_strtod_l+0x49c>
 800d89c:	f04f 33ff 	mov.w	r3, #4294967295
 800d8a0:	e7e8      	b.n	800d874 <_strtod_l+0x8c4>
 800d8a2:	460b      	mov	r3, r1
 800d8a4:	e7e6      	b.n	800d874 <_strtod_l+0x8c4>
 800d8a6:	ea53 0308 	orrs.w	r3, r3, r8
 800d8aa:	f43f af7d 	beq.w	800d7a8 <_strtod_l+0x7f8>
 800d8ae:	b1e5      	cbz	r5, 800d8ea <_strtod_l+0x93a>
 800d8b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8b2:	421d      	tst	r5, r3
 800d8b4:	d0ee      	beq.n	800d894 <_strtod_l+0x8e4>
 800d8b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d8b8:	4640      	mov	r0, r8
 800d8ba:	4649      	mov	r1, r9
 800d8bc:	9a05      	ldr	r2, [sp, #20]
 800d8be:	b1c3      	cbz	r3, 800d8f2 <_strtod_l+0x942>
 800d8c0:	f7ff fb55 	bl	800cf6e <sulp>
 800d8c4:	4602      	mov	r2, r0
 800d8c6:	460b      	mov	r3, r1
 800d8c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d8cc:	f7f2 fcba 	bl	8000244 <__adddf3>
 800d8d0:	4680      	mov	r8, r0
 800d8d2:	4689      	mov	r9, r1
 800d8d4:	e7de      	b.n	800d894 <_strtod_l+0x8e4>
 800d8d6:	4013      	ands	r3, r2
 800d8d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d8dc:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800d8e0:	f04f 38ff 	mov.w	r8, #4294967295
 800d8e4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800d8e8:	e7d4      	b.n	800d894 <_strtod_l+0x8e4>
 800d8ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d8ec:	ea13 0f08 	tst.w	r3, r8
 800d8f0:	e7e0      	b.n	800d8b4 <_strtod_l+0x904>
 800d8f2:	f7ff fb3c 	bl	800cf6e <sulp>
 800d8f6:	4602      	mov	r2, r0
 800d8f8:	460b      	mov	r3, r1
 800d8fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d8fe:	f7f2 fc9f 	bl	8000240 <__aeabi_dsub>
 800d902:	2200      	movs	r2, #0
 800d904:	2300      	movs	r3, #0
 800d906:	4680      	mov	r8, r0
 800d908:	4689      	mov	r9, r1
 800d90a:	f7f3 f8b9 	bl	8000a80 <__aeabi_dcmpeq>
 800d90e:	2800      	cmp	r0, #0
 800d910:	d0c0      	beq.n	800d894 <_strtod_l+0x8e4>
 800d912:	e602      	b.n	800d51a <_strtod_l+0x56a>
 800d914:	4658      	mov	r0, fp
 800d916:	9904      	ldr	r1, [sp, #16]
 800d918:	f002 f9b2 	bl	800fc80 <__ratio>
 800d91c:	2200      	movs	r2, #0
 800d91e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d922:	4606      	mov	r6, r0
 800d924:	460f      	mov	r7, r1
 800d926:	f7f3 f8bf 	bl	8000aa8 <__aeabi_dcmple>
 800d92a:	2800      	cmp	r0, #0
 800d92c:	d075      	beq.n	800da1a <_strtod_l+0xa6a>
 800d92e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d930:	2b00      	cmp	r3, #0
 800d932:	d047      	beq.n	800d9c4 <_strtod_l+0xa14>
 800d934:	2600      	movs	r6, #0
 800d936:	4f65      	ldr	r7, [pc, #404]	; (800dacc <_strtod_l+0xb1c>)
 800d938:	4d64      	ldr	r5, [pc, #400]	; (800dacc <_strtod_l+0xb1c>)
 800d93a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d93c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d940:	0d1b      	lsrs	r3, r3, #20
 800d942:	051b      	lsls	r3, r3, #20
 800d944:	930f      	str	r3, [sp, #60]	; 0x3c
 800d946:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d948:	4b61      	ldr	r3, [pc, #388]	; (800dad0 <_strtod_l+0xb20>)
 800d94a:	429a      	cmp	r2, r3
 800d94c:	f040 80c8 	bne.w	800dae0 <_strtod_l+0xb30>
 800d950:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d954:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800d958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d95a:	4640      	mov	r0, r8
 800d95c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800d960:	4649      	mov	r1, r9
 800d962:	f002 f8b7 	bl	800fad4 <__ulp>
 800d966:	4602      	mov	r2, r0
 800d968:	460b      	mov	r3, r1
 800d96a:	4630      	mov	r0, r6
 800d96c:	4639      	mov	r1, r7
 800d96e:	f7f2 fe1f 	bl	80005b0 <__aeabi_dmul>
 800d972:	4642      	mov	r2, r8
 800d974:	464b      	mov	r3, r9
 800d976:	f7f2 fc65 	bl	8000244 <__adddf3>
 800d97a:	460b      	mov	r3, r1
 800d97c:	4951      	ldr	r1, [pc, #324]	; (800dac4 <_strtod_l+0xb14>)
 800d97e:	4a55      	ldr	r2, [pc, #340]	; (800dad4 <_strtod_l+0xb24>)
 800d980:	4019      	ands	r1, r3
 800d982:	4291      	cmp	r1, r2
 800d984:	4680      	mov	r8, r0
 800d986:	d95e      	bls.n	800da46 <_strtod_l+0xa96>
 800d988:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d98a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d98e:	4293      	cmp	r3, r2
 800d990:	d103      	bne.n	800d99a <_strtod_l+0x9ea>
 800d992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d994:	3301      	adds	r3, #1
 800d996:	f43f ad4e 	beq.w	800d436 <_strtod_l+0x486>
 800d99a:	f04f 38ff 	mov.w	r8, #4294967295
 800d99e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800dac8 <_strtod_l+0xb18>
 800d9a2:	4650      	mov	r0, sl
 800d9a4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d9a6:	f001 fd65 	bl	800f474 <_Bfree>
 800d9aa:	4650      	mov	r0, sl
 800d9ac:	9906      	ldr	r1, [sp, #24]
 800d9ae:	f001 fd61 	bl	800f474 <_Bfree>
 800d9b2:	4650      	mov	r0, sl
 800d9b4:	9904      	ldr	r1, [sp, #16]
 800d9b6:	f001 fd5d 	bl	800f474 <_Bfree>
 800d9ba:	4659      	mov	r1, fp
 800d9bc:	4650      	mov	r0, sl
 800d9be:	f001 fd59 	bl	800f474 <_Bfree>
 800d9c2:	e61c      	b.n	800d5fe <_strtod_l+0x64e>
 800d9c4:	f1b8 0f00 	cmp.w	r8, #0
 800d9c8:	d119      	bne.n	800d9fe <_strtod_l+0xa4e>
 800d9ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d9d0:	b9e3      	cbnz	r3, 800da0c <_strtod_l+0xa5c>
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	4630      	mov	r0, r6
 800d9d6:	4639      	mov	r1, r7
 800d9d8:	4b3c      	ldr	r3, [pc, #240]	; (800dacc <_strtod_l+0xb1c>)
 800d9da:	f7f3 f85b 	bl	8000a94 <__aeabi_dcmplt>
 800d9de:	b9c8      	cbnz	r0, 800da14 <_strtod_l+0xa64>
 800d9e0:	2200      	movs	r2, #0
 800d9e2:	4630      	mov	r0, r6
 800d9e4:	4639      	mov	r1, r7
 800d9e6:	4b3c      	ldr	r3, [pc, #240]	; (800dad8 <_strtod_l+0xb28>)
 800d9e8:	f7f2 fde2 	bl	80005b0 <__aeabi_dmul>
 800d9ec:	4604      	mov	r4, r0
 800d9ee:	460d      	mov	r5, r1
 800d9f0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800d9f4:	9418      	str	r4, [sp, #96]	; 0x60
 800d9f6:	9319      	str	r3, [sp, #100]	; 0x64
 800d9f8:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800d9fc:	e79d      	b.n	800d93a <_strtod_l+0x98a>
 800d9fe:	f1b8 0f01 	cmp.w	r8, #1
 800da02:	d103      	bne.n	800da0c <_strtod_l+0xa5c>
 800da04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da06:	2b00      	cmp	r3, #0
 800da08:	f43f ad87 	beq.w	800d51a <_strtod_l+0x56a>
 800da0c:	2600      	movs	r6, #0
 800da0e:	2400      	movs	r4, #0
 800da10:	4f32      	ldr	r7, [pc, #200]	; (800dadc <_strtod_l+0xb2c>)
 800da12:	e791      	b.n	800d938 <_strtod_l+0x988>
 800da14:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800da16:	4d30      	ldr	r5, [pc, #192]	; (800dad8 <_strtod_l+0xb28>)
 800da18:	e7ea      	b.n	800d9f0 <_strtod_l+0xa40>
 800da1a:	4b2f      	ldr	r3, [pc, #188]	; (800dad8 <_strtod_l+0xb28>)
 800da1c:	2200      	movs	r2, #0
 800da1e:	4630      	mov	r0, r6
 800da20:	4639      	mov	r1, r7
 800da22:	f7f2 fdc5 	bl	80005b0 <__aeabi_dmul>
 800da26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da28:	4604      	mov	r4, r0
 800da2a:	460d      	mov	r5, r1
 800da2c:	b933      	cbnz	r3, 800da3c <_strtod_l+0xa8c>
 800da2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800da32:	9010      	str	r0, [sp, #64]	; 0x40
 800da34:	9311      	str	r3, [sp, #68]	; 0x44
 800da36:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800da3a:	e77e      	b.n	800d93a <_strtod_l+0x98a>
 800da3c:	4602      	mov	r2, r0
 800da3e:	460b      	mov	r3, r1
 800da40:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800da44:	e7f7      	b.n	800da36 <_strtod_l+0xa86>
 800da46:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800da4a:	9b05      	ldr	r3, [sp, #20]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d1a8      	bne.n	800d9a2 <_strtod_l+0x9f2>
 800da50:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800da54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800da56:	0d1b      	lsrs	r3, r3, #20
 800da58:	051b      	lsls	r3, r3, #20
 800da5a:	429a      	cmp	r2, r3
 800da5c:	d1a1      	bne.n	800d9a2 <_strtod_l+0x9f2>
 800da5e:	4620      	mov	r0, r4
 800da60:	4629      	mov	r1, r5
 800da62:	f7f3 fc07 	bl	8001274 <__aeabi_d2lz>
 800da66:	f7f2 fd75 	bl	8000554 <__aeabi_l2d>
 800da6a:	4602      	mov	r2, r0
 800da6c:	460b      	mov	r3, r1
 800da6e:	4620      	mov	r0, r4
 800da70:	4629      	mov	r1, r5
 800da72:	f7f2 fbe5 	bl	8000240 <__aeabi_dsub>
 800da76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800da78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800da7c:	ea43 0308 	orr.w	r3, r3, r8
 800da80:	4313      	orrs	r3, r2
 800da82:	4604      	mov	r4, r0
 800da84:	460d      	mov	r5, r1
 800da86:	d066      	beq.n	800db56 <_strtod_l+0xba6>
 800da88:	a309      	add	r3, pc, #36	; (adr r3, 800dab0 <_strtod_l+0xb00>)
 800da8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da8e:	f7f3 f801 	bl	8000a94 <__aeabi_dcmplt>
 800da92:	2800      	cmp	r0, #0
 800da94:	f47f acda 	bne.w	800d44c <_strtod_l+0x49c>
 800da98:	a307      	add	r3, pc, #28	; (adr r3, 800dab8 <_strtod_l+0xb08>)
 800da9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da9e:	4620      	mov	r0, r4
 800daa0:	4629      	mov	r1, r5
 800daa2:	f7f3 f815 	bl	8000ad0 <__aeabi_dcmpgt>
 800daa6:	2800      	cmp	r0, #0
 800daa8:	f43f af7b 	beq.w	800d9a2 <_strtod_l+0x9f2>
 800daac:	e4ce      	b.n	800d44c <_strtod_l+0x49c>
 800daae:	bf00      	nop
 800dab0:	94a03595 	.word	0x94a03595
 800dab4:	3fdfffff 	.word	0x3fdfffff
 800dab8:	35afe535 	.word	0x35afe535
 800dabc:	3fe00000 	.word	0x3fe00000
 800dac0:	000fffff 	.word	0x000fffff
 800dac4:	7ff00000 	.word	0x7ff00000
 800dac8:	7fefffff 	.word	0x7fefffff
 800dacc:	3ff00000 	.word	0x3ff00000
 800dad0:	7fe00000 	.word	0x7fe00000
 800dad4:	7c9fffff 	.word	0x7c9fffff
 800dad8:	3fe00000 	.word	0x3fe00000
 800dadc:	bff00000 	.word	0xbff00000
 800dae0:	9b05      	ldr	r3, [sp, #20]
 800dae2:	b313      	cbz	r3, 800db2a <_strtod_l+0xb7a>
 800dae4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dae6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800daea:	d81e      	bhi.n	800db2a <_strtod_l+0xb7a>
 800daec:	a326      	add	r3, pc, #152	; (adr r3, 800db88 <_strtod_l+0xbd8>)
 800daee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf2:	4620      	mov	r0, r4
 800daf4:	4629      	mov	r1, r5
 800daf6:	f7f2 ffd7 	bl	8000aa8 <__aeabi_dcmple>
 800dafa:	b190      	cbz	r0, 800db22 <_strtod_l+0xb72>
 800dafc:	4629      	mov	r1, r5
 800dafe:	4620      	mov	r0, r4
 800db00:	f7f3 f82e 	bl	8000b60 <__aeabi_d2uiz>
 800db04:	2801      	cmp	r0, #1
 800db06:	bf38      	it	cc
 800db08:	2001      	movcc	r0, #1
 800db0a:	f7f2 fcd7 	bl	80004bc <__aeabi_ui2d>
 800db0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db10:	4604      	mov	r4, r0
 800db12:	460d      	mov	r5, r1
 800db14:	b9d3      	cbnz	r3, 800db4c <_strtod_l+0xb9c>
 800db16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800db1a:	9012      	str	r0, [sp, #72]	; 0x48
 800db1c:	9313      	str	r3, [sp, #76]	; 0x4c
 800db1e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800db22:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800db24:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800db28:	1a9f      	subs	r7, r3, r2
 800db2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800db2e:	f001 ffd1 	bl	800fad4 <__ulp>
 800db32:	4602      	mov	r2, r0
 800db34:	460b      	mov	r3, r1
 800db36:	4630      	mov	r0, r6
 800db38:	4639      	mov	r1, r7
 800db3a:	f7f2 fd39 	bl	80005b0 <__aeabi_dmul>
 800db3e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800db42:	f7f2 fb7f 	bl	8000244 <__adddf3>
 800db46:	4680      	mov	r8, r0
 800db48:	4689      	mov	r9, r1
 800db4a:	e77e      	b.n	800da4a <_strtod_l+0xa9a>
 800db4c:	4602      	mov	r2, r0
 800db4e:	460b      	mov	r3, r1
 800db50:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800db54:	e7e3      	b.n	800db1e <_strtod_l+0xb6e>
 800db56:	a30e      	add	r3, pc, #56	; (adr r3, 800db90 <_strtod_l+0xbe0>)
 800db58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db5c:	f7f2 ff9a 	bl	8000a94 <__aeabi_dcmplt>
 800db60:	e7a1      	b.n	800daa6 <_strtod_l+0xaf6>
 800db62:	2300      	movs	r3, #0
 800db64:	930c      	str	r3, [sp, #48]	; 0x30
 800db66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800db68:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800db6a:	6013      	str	r3, [r2, #0]
 800db6c:	f7ff ba65 	b.w	800d03a <_strtod_l+0x8a>
 800db70:	2b65      	cmp	r3, #101	; 0x65
 800db72:	f43f ab5c 	beq.w	800d22e <_strtod_l+0x27e>
 800db76:	2b45      	cmp	r3, #69	; 0x45
 800db78:	f43f ab59 	beq.w	800d22e <_strtod_l+0x27e>
 800db7c:	2201      	movs	r2, #1
 800db7e:	f7ff bb8d 	b.w	800d29c <_strtod_l+0x2ec>
 800db82:	bf00      	nop
 800db84:	f3af 8000 	nop.w
 800db88:	ffc00000 	.word	0xffc00000
 800db8c:	41dfffff 	.word	0x41dfffff
 800db90:	94a03595 	.word	0x94a03595
 800db94:	3fcfffff 	.word	0x3fcfffff

0800db98 <_strtod_r>:
 800db98:	4b01      	ldr	r3, [pc, #4]	; (800dba0 <_strtod_r+0x8>)
 800db9a:	f7ff ba09 	b.w	800cfb0 <_strtod_l>
 800db9e:	bf00      	nop
 800dba0:	20000084 	.word	0x20000084

0800dba4 <strtod>:
 800dba4:	460a      	mov	r2, r1
 800dba6:	4601      	mov	r1, r0
 800dba8:	4802      	ldr	r0, [pc, #8]	; (800dbb4 <strtod+0x10>)
 800dbaa:	4b03      	ldr	r3, [pc, #12]	; (800dbb8 <strtod+0x14>)
 800dbac:	6800      	ldr	r0, [r0, #0]
 800dbae:	f7ff b9ff 	b.w	800cfb0 <_strtod_l>
 800dbb2:	bf00      	nop
 800dbb4:	2000001c 	.word	0x2000001c
 800dbb8:	20000084 	.word	0x20000084

0800dbbc <_strtol_l.isra.0>:
 800dbbc:	2b01      	cmp	r3, #1
 800dbbe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbc2:	4686      	mov	lr, r0
 800dbc4:	d001      	beq.n	800dbca <_strtol_l.isra.0+0xe>
 800dbc6:	2b24      	cmp	r3, #36	; 0x24
 800dbc8:	d906      	bls.n	800dbd8 <_strtol_l.isra.0+0x1c>
 800dbca:	f7fe f967 	bl	800be9c <__errno>
 800dbce:	2316      	movs	r3, #22
 800dbd0:	6003      	str	r3, [r0, #0]
 800dbd2:	2000      	movs	r0, #0
 800dbd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbd8:	468c      	mov	ip, r1
 800dbda:	4e3a      	ldr	r6, [pc, #232]	; (800dcc4 <_strtol_l.isra.0+0x108>)
 800dbdc:	4660      	mov	r0, ip
 800dbde:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800dbe2:	5da5      	ldrb	r5, [r4, r6]
 800dbe4:	f015 0508 	ands.w	r5, r5, #8
 800dbe8:	d1f8      	bne.n	800dbdc <_strtol_l.isra.0+0x20>
 800dbea:	2c2d      	cmp	r4, #45	; 0x2d
 800dbec:	d133      	bne.n	800dc56 <_strtol_l.isra.0+0x9a>
 800dbee:	f04f 0801 	mov.w	r8, #1
 800dbf2:	f89c 4000 	ldrb.w	r4, [ip]
 800dbf6:	f100 0c02 	add.w	ip, r0, #2
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d05d      	beq.n	800dcba <_strtol_l.isra.0+0xfe>
 800dbfe:	2b10      	cmp	r3, #16
 800dc00:	d10c      	bne.n	800dc1c <_strtol_l.isra.0+0x60>
 800dc02:	2c30      	cmp	r4, #48	; 0x30
 800dc04:	d10a      	bne.n	800dc1c <_strtol_l.isra.0+0x60>
 800dc06:	f89c 0000 	ldrb.w	r0, [ip]
 800dc0a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800dc0e:	2858      	cmp	r0, #88	; 0x58
 800dc10:	d14e      	bne.n	800dcb0 <_strtol_l.isra.0+0xf4>
 800dc12:	2310      	movs	r3, #16
 800dc14:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800dc18:	f10c 0c02 	add.w	ip, ip, #2
 800dc1c:	2500      	movs	r5, #0
 800dc1e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800dc22:	3f01      	subs	r7, #1
 800dc24:	fbb7 f9f3 	udiv	r9, r7, r3
 800dc28:	4628      	mov	r0, r5
 800dc2a:	fb03 7a19 	mls	sl, r3, r9, r7
 800dc2e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800dc32:	2e09      	cmp	r6, #9
 800dc34:	d818      	bhi.n	800dc68 <_strtol_l.isra.0+0xac>
 800dc36:	4634      	mov	r4, r6
 800dc38:	42a3      	cmp	r3, r4
 800dc3a:	dd24      	ble.n	800dc86 <_strtol_l.isra.0+0xca>
 800dc3c:	2d00      	cmp	r5, #0
 800dc3e:	db1f      	blt.n	800dc80 <_strtol_l.isra.0+0xc4>
 800dc40:	4581      	cmp	r9, r0
 800dc42:	d31d      	bcc.n	800dc80 <_strtol_l.isra.0+0xc4>
 800dc44:	d101      	bne.n	800dc4a <_strtol_l.isra.0+0x8e>
 800dc46:	45a2      	cmp	sl, r4
 800dc48:	db1a      	blt.n	800dc80 <_strtol_l.isra.0+0xc4>
 800dc4a:	2501      	movs	r5, #1
 800dc4c:	fb00 4003 	mla	r0, r0, r3, r4
 800dc50:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800dc54:	e7eb      	b.n	800dc2e <_strtol_l.isra.0+0x72>
 800dc56:	2c2b      	cmp	r4, #43	; 0x2b
 800dc58:	bf08      	it	eq
 800dc5a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800dc5e:	46a8      	mov	r8, r5
 800dc60:	bf08      	it	eq
 800dc62:	f100 0c02 	addeq.w	ip, r0, #2
 800dc66:	e7c8      	b.n	800dbfa <_strtol_l.isra.0+0x3e>
 800dc68:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800dc6c:	2e19      	cmp	r6, #25
 800dc6e:	d801      	bhi.n	800dc74 <_strtol_l.isra.0+0xb8>
 800dc70:	3c37      	subs	r4, #55	; 0x37
 800dc72:	e7e1      	b.n	800dc38 <_strtol_l.isra.0+0x7c>
 800dc74:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800dc78:	2e19      	cmp	r6, #25
 800dc7a:	d804      	bhi.n	800dc86 <_strtol_l.isra.0+0xca>
 800dc7c:	3c57      	subs	r4, #87	; 0x57
 800dc7e:	e7db      	b.n	800dc38 <_strtol_l.isra.0+0x7c>
 800dc80:	f04f 35ff 	mov.w	r5, #4294967295
 800dc84:	e7e4      	b.n	800dc50 <_strtol_l.isra.0+0x94>
 800dc86:	2d00      	cmp	r5, #0
 800dc88:	da08      	bge.n	800dc9c <_strtol_l.isra.0+0xe0>
 800dc8a:	2322      	movs	r3, #34	; 0x22
 800dc8c:	4638      	mov	r0, r7
 800dc8e:	f8ce 3000 	str.w	r3, [lr]
 800dc92:	2a00      	cmp	r2, #0
 800dc94:	d09e      	beq.n	800dbd4 <_strtol_l.isra.0+0x18>
 800dc96:	f10c 31ff 	add.w	r1, ip, #4294967295
 800dc9a:	e007      	b.n	800dcac <_strtol_l.isra.0+0xf0>
 800dc9c:	f1b8 0f00 	cmp.w	r8, #0
 800dca0:	d000      	beq.n	800dca4 <_strtol_l.isra.0+0xe8>
 800dca2:	4240      	negs	r0, r0
 800dca4:	2a00      	cmp	r2, #0
 800dca6:	d095      	beq.n	800dbd4 <_strtol_l.isra.0+0x18>
 800dca8:	2d00      	cmp	r5, #0
 800dcaa:	d1f4      	bne.n	800dc96 <_strtol_l.isra.0+0xda>
 800dcac:	6011      	str	r1, [r2, #0]
 800dcae:	e791      	b.n	800dbd4 <_strtol_l.isra.0+0x18>
 800dcb0:	2430      	movs	r4, #48	; 0x30
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d1b2      	bne.n	800dc1c <_strtol_l.isra.0+0x60>
 800dcb6:	2308      	movs	r3, #8
 800dcb8:	e7b0      	b.n	800dc1c <_strtol_l.isra.0+0x60>
 800dcba:	2c30      	cmp	r4, #48	; 0x30
 800dcbc:	d0a3      	beq.n	800dc06 <_strtol_l.isra.0+0x4a>
 800dcbe:	230a      	movs	r3, #10
 800dcc0:	e7ac      	b.n	800dc1c <_strtol_l.isra.0+0x60>
 800dcc2:	bf00      	nop
 800dcc4:	080124f1 	.word	0x080124f1

0800dcc8 <_strtol_r>:
 800dcc8:	f7ff bf78 	b.w	800dbbc <_strtol_l.isra.0>

0800dccc <strtol>:
 800dccc:	4613      	mov	r3, r2
 800dcce:	460a      	mov	r2, r1
 800dcd0:	4601      	mov	r1, r0
 800dcd2:	4802      	ldr	r0, [pc, #8]	; (800dcdc <strtol+0x10>)
 800dcd4:	6800      	ldr	r0, [r0, #0]
 800dcd6:	f7ff bf71 	b.w	800dbbc <_strtol_l.isra.0>
 800dcda:	bf00      	nop
 800dcdc:	2000001c 	.word	0x2000001c

0800dce0 <_vsniprintf_r>:
 800dce0:	b530      	push	{r4, r5, lr}
 800dce2:	1e14      	subs	r4, r2, #0
 800dce4:	4605      	mov	r5, r0
 800dce6:	b09b      	sub	sp, #108	; 0x6c
 800dce8:	4618      	mov	r0, r3
 800dcea:	da05      	bge.n	800dcf8 <_vsniprintf_r+0x18>
 800dcec:	238b      	movs	r3, #139	; 0x8b
 800dcee:	f04f 30ff 	mov.w	r0, #4294967295
 800dcf2:	602b      	str	r3, [r5, #0]
 800dcf4:	b01b      	add	sp, #108	; 0x6c
 800dcf6:	bd30      	pop	{r4, r5, pc}
 800dcf8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800dcfc:	f8ad 300c 	strh.w	r3, [sp, #12]
 800dd00:	bf0c      	ite	eq
 800dd02:	4623      	moveq	r3, r4
 800dd04:	f104 33ff 	addne.w	r3, r4, #4294967295
 800dd08:	9302      	str	r3, [sp, #8]
 800dd0a:	9305      	str	r3, [sp, #20]
 800dd0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dd10:	4602      	mov	r2, r0
 800dd12:	9100      	str	r1, [sp, #0]
 800dd14:	9104      	str	r1, [sp, #16]
 800dd16:	f8ad 300e 	strh.w	r3, [sp, #14]
 800dd1a:	4669      	mov	r1, sp
 800dd1c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800dd1e:	4628      	mov	r0, r5
 800dd20:	f002 f88a 	bl	800fe38 <_svfiprintf_r>
 800dd24:	1c43      	adds	r3, r0, #1
 800dd26:	bfbc      	itt	lt
 800dd28:	238b      	movlt	r3, #139	; 0x8b
 800dd2a:	602b      	strlt	r3, [r5, #0]
 800dd2c:	2c00      	cmp	r4, #0
 800dd2e:	d0e1      	beq.n	800dcf4 <_vsniprintf_r+0x14>
 800dd30:	2200      	movs	r2, #0
 800dd32:	9b00      	ldr	r3, [sp, #0]
 800dd34:	701a      	strb	r2, [r3, #0]
 800dd36:	e7dd      	b.n	800dcf4 <_vsniprintf_r+0x14>

0800dd38 <vsniprintf>:
 800dd38:	b507      	push	{r0, r1, r2, lr}
 800dd3a:	9300      	str	r3, [sp, #0]
 800dd3c:	4613      	mov	r3, r2
 800dd3e:	460a      	mov	r2, r1
 800dd40:	4601      	mov	r1, r0
 800dd42:	4803      	ldr	r0, [pc, #12]	; (800dd50 <vsniprintf+0x18>)
 800dd44:	6800      	ldr	r0, [r0, #0]
 800dd46:	f7ff ffcb 	bl	800dce0 <_vsniprintf_r>
 800dd4a:	b003      	add	sp, #12
 800dd4c:	f85d fb04 	ldr.w	pc, [sp], #4
 800dd50:	2000001c 	.word	0x2000001c

0800dd54 <_write_r>:
 800dd54:	b538      	push	{r3, r4, r5, lr}
 800dd56:	4604      	mov	r4, r0
 800dd58:	4608      	mov	r0, r1
 800dd5a:	4611      	mov	r1, r2
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	4d05      	ldr	r5, [pc, #20]	; (800dd74 <_write_r+0x20>)
 800dd60:	602a      	str	r2, [r5, #0]
 800dd62:	461a      	mov	r2, r3
 800dd64:	f7f4 fc0a 	bl	800257c <_write>
 800dd68:	1c43      	adds	r3, r0, #1
 800dd6a:	d102      	bne.n	800dd72 <_write_r+0x1e>
 800dd6c:	682b      	ldr	r3, [r5, #0]
 800dd6e:	b103      	cbz	r3, 800dd72 <_write_r+0x1e>
 800dd70:	6023      	str	r3, [r4, #0]
 800dd72:	bd38      	pop	{r3, r4, r5, pc}
 800dd74:	20000c4c 	.word	0x20000c4c

0800dd78 <_close_r>:
 800dd78:	b538      	push	{r3, r4, r5, lr}
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	4d05      	ldr	r5, [pc, #20]	; (800dd94 <_close_r+0x1c>)
 800dd7e:	4604      	mov	r4, r0
 800dd80:	4608      	mov	r0, r1
 800dd82:	602b      	str	r3, [r5, #0]
 800dd84:	f7f4 fc24 	bl	80025d0 <_close>
 800dd88:	1c43      	adds	r3, r0, #1
 800dd8a:	d102      	bne.n	800dd92 <_close_r+0x1a>
 800dd8c:	682b      	ldr	r3, [r5, #0]
 800dd8e:	b103      	cbz	r3, 800dd92 <_close_r+0x1a>
 800dd90:	6023      	str	r3, [r4, #0]
 800dd92:	bd38      	pop	{r3, r4, r5, pc}
 800dd94:	20000c4c 	.word	0x20000c4c

0800dd98 <quorem>:
 800dd98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd9c:	6903      	ldr	r3, [r0, #16]
 800dd9e:	690c      	ldr	r4, [r1, #16]
 800dda0:	4607      	mov	r7, r0
 800dda2:	42a3      	cmp	r3, r4
 800dda4:	f2c0 8083 	blt.w	800deae <quorem+0x116>
 800dda8:	3c01      	subs	r4, #1
 800ddaa:	f100 0514 	add.w	r5, r0, #20
 800ddae:	f101 0814 	add.w	r8, r1, #20
 800ddb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ddb6:	9301      	str	r3, [sp, #4]
 800ddb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ddbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ddc0:	3301      	adds	r3, #1
 800ddc2:	429a      	cmp	r2, r3
 800ddc4:	fbb2 f6f3 	udiv	r6, r2, r3
 800ddc8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ddcc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ddd0:	d332      	bcc.n	800de38 <quorem+0xa0>
 800ddd2:	f04f 0e00 	mov.w	lr, #0
 800ddd6:	4640      	mov	r0, r8
 800ddd8:	46ac      	mov	ip, r5
 800ddda:	46f2      	mov	sl, lr
 800dddc:	f850 2b04 	ldr.w	r2, [r0], #4
 800dde0:	b293      	uxth	r3, r2
 800dde2:	fb06 e303 	mla	r3, r6, r3, lr
 800dde6:	0c12      	lsrs	r2, r2, #16
 800dde8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ddec:	fb06 e202 	mla	r2, r6, r2, lr
 800ddf0:	b29b      	uxth	r3, r3
 800ddf2:	ebaa 0303 	sub.w	r3, sl, r3
 800ddf6:	f8dc a000 	ldr.w	sl, [ip]
 800ddfa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ddfe:	fa1f fa8a 	uxth.w	sl, sl
 800de02:	4453      	add	r3, sl
 800de04:	fa1f fa82 	uxth.w	sl, r2
 800de08:	f8dc 2000 	ldr.w	r2, [ip]
 800de0c:	4581      	cmp	r9, r0
 800de0e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800de12:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800de16:	b29b      	uxth	r3, r3
 800de18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de1c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800de20:	f84c 3b04 	str.w	r3, [ip], #4
 800de24:	d2da      	bcs.n	800dddc <quorem+0x44>
 800de26:	f855 300b 	ldr.w	r3, [r5, fp]
 800de2a:	b92b      	cbnz	r3, 800de38 <quorem+0xa0>
 800de2c:	9b01      	ldr	r3, [sp, #4]
 800de2e:	3b04      	subs	r3, #4
 800de30:	429d      	cmp	r5, r3
 800de32:	461a      	mov	r2, r3
 800de34:	d32f      	bcc.n	800de96 <quorem+0xfe>
 800de36:	613c      	str	r4, [r7, #16]
 800de38:	4638      	mov	r0, r7
 800de3a:	f001 fd9f 	bl	800f97c <__mcmp>
 800de3e:	2800      	cmp	r0, #0
 800de40:	db25      	blt.n	800de8e <quorem+0xf6>
 800de42:	4628      	mov	r0, r5
 800de44:	f04f 0c00 	mov.w	ip, #0
 800de48:	3601      	adds	r6, #1
 800de4a:	f858 1b04 	ldr.w	r1, [r8], #4
 800de4e:	f8d0 e000 	ldr.w	lr, [r0]
 800de52:	b28b      	uxth	r3, r1
 800de54:	ebac 0303 	sub.w	r3, ip, r3
 800de58:	fa1f f28e 	uxth.w	r2, lr
 800de5c:	4413      	add	r3, r2
 800de5e:	0c0a      	lsrs	r2, r1, #16
 800de60:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800de64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800de68:	b29b      	uxth	r3, r3
 800de6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de6e:	45c1      	cmp	r9, r8
 800de70:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800de74:	f840 3b04 	str.w	r3, [r0], #4
 800de78:	d2e7      	bcs.n	800de4a <quorem+0xb2>
 800de7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800de7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800de82:	b922      	cbnz	r2, 800de8e <quorem+0xf6>
 800de84:	3b04      	subs	r3, #4
 800de86:	429d      	cmp	r5, r3
 800de88:	461a      	mov	r2, r3
 800de8a:	d30a      	bcc.n	800dea2 <quorem+0x10a>
 800de8c:	613c      	str	r4, [r7, #16]
 800de8e:	4630      	mov	r0, r6
 800de90:	b003      	add	sp, #12
 800de92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de96:	6812      	ldr	r2, [r2, #0]
 800de98:	3b04      	subs	r3, #4
 800de9a:	2a00      	cmp	r2, #0
 800de9c:	d1cb      	bne.n	800de36 <quorem+0x9e>
 800de9e:	3c01      	subs	r4, #1
 800dea0:	e7c6      	b.n	800de30 <quorem+0x98>
 800dea2:	6812      	ldr	r2, [r2, #0]
 800dea4:	3b04      	subs	r3, #4
 800dea6:	2a00      	cmp	r2, #0
 800dea8:	d1f0      	bne.n	800de8c <quorem+0xf4>
 800deaa:	3c01      	subs	r4, #1
 800deac:	e7eb      	b.n	800de86 <quorem+0xee>
 800deae:	2000      	movs	r0, #0
 800deb0:	e7ee      	b.n	800de90 <quorem+0xf8>
 800deb2:	0000      	movs	r0, r0
 800deb4:	0000      	movs	r0, r0
	...

0800deb8 <_dtoa_r>:
 800deb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800debc:	4616      	mov	r6, r2
 800debe:	461f      	mov	r7, r3
 800dec0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800dec2:	b099      	sub	sp, #100	; 0x64
 800dec4:	4605      	mov	r5, r0
 800dec6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800deca:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800dece:	b974      	cbnz	r4, 800deee <_dtoa_r+0x36>
 800ded0:	2010      	movs	r0, #16
 800ded2:	f7fe f80d 	bl	800bef0 <malloc>
 800ded6:	4602      	mov	r2, r0
 800ded8:	6268      	str	r0, [r5, #36]	; 0x24
 800deda:	b920      	cbnz	r0, 800dee6 <_dtoa_r+0x2e>
 800dedc:	21ea      	movs	r1, #234	; 0xea
 800dede:	4bae      	ldr	r3, [pc, #696]	; (800e198 <_dtoa_r+0x2e0>)
 800dee0:	48ae      	ldr	r0, [pc, #696]	; (800e19c <_dtoa_r+0x2e4>)
 800dee2:	f002 ff07 	bl	8010cf4 <__assert_func>
 800dee6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800deea:	6004      	str	r4, [r0, #0]
 800deec:	60c4      	str	r4, [r0, #12]
 800deee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800def0:	6819      	ldr	r1, [r3, #0]
 800def2:	b151      	cbz	r1, 800df0a <_dtoa_r+0x52>
 800def4:	685a      	ldr	r2, [r3, #4]
 800def6:	2301      	movs	r3, #1
 800def8:	4093      	lsls	r3, r2
 800defa:	604a      	str	r2, [r1, #4]
 800defc:	608b      	str	r3, [r1, #8]
 800defe:	4628      	mov	r0, r5
 800df00:	f001 fab8 	bl	800f474 <_Bfree>
 800df04:	2200      	movs	r2, #0
 800df06:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800df08:	601a      	str	r2, [r3, #0]
 800df0a:	1e3b      	subs	r3, r7, #0
 800df0c:	bfaf      	iteee	ge
 800df0e:	2300      	movge	r3, #0
 800df10:	2201      	movlt	r2, #1
 800df12:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800df16:	9305      	strlt	r3, [sp, #20]
 800df18:	bfa8      	it	ge
 800df1a:	f8c8 3000 	strge.w	r3, [r8]
 800df1e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800df22:	4b9f      	ldr	r3, [pc, #636]	; (800e1a0 <_dtoa_r+0x2e8>)
 800df24:	bfb8      	it	lt
 800df26:	f8c8 2000 	strlt.w	r2, [r8]
 800df2a:	ea33 0309 	bics.w	r3, r3, r9
 800df2e:	d119      	bne.n	800df64 <_dtoa_r+0xac>
 800df30:	f242 730f 	movw	r3, #9999	; 0x270f
 800df34:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800df36:	6013      	str	r3, [r2, #0]
 800df38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800df3c:	4333      	orrs	r3, r6
 800df3e:	f000 8580 	beq.w	800ea42 <_dtoa_r+0xb8a>
 800df42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800df44:	b953      	cbnz	r3, 800df5c <_dtoa_r+0xa4>
 800df46:	4b97      	ldr	r3, [pc, #604]	; (800e1a4 <_dtoa_r+0x2ec>)
 800df48:	e022      	b.n	800df90 <_dtoa_r+0xd8>
 800df4a:	4b97      	ldr	r3, [pc, #604]	; (800e1a8 <_dtoa_r+0x2f0>)
 800df4c:	9308      	str	r3, [sp, #32]
 800df4e:	3308      	adds	r3, #8
 800df50:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800df52:	6013      	str	r3, [r2, #0]
 800df54:	9808      	ldr	r0, [sp, #32]
 800df56:	b019      	add	sp, #100	; 0x64
 800df58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df5c:	4b91      	ldr	r3, [pc, #580]	; (800e1a4 <_dtoa_r+0x2ec>)
 800df5e:	9308      	str	r3, [sp, #32]
 800df60:	3303      	adds	r3, #3
 800df62:	e7f5      	b.n	800df50 <_dtoa_r+0x98>
 800df64:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800df68:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800df6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800df70:	2200      	movs	r2, #0
 800df72:	2300      	movs	r3, #0
 800df74:	f7f2 fd84 	bl	8000a80 <__aeabi_dcmpeq>
 800df78:	4680      	mov	r8, r0
 800df7a:	b158      	cbz	r0, 800df94 <_dtoa_r+0xdc>
 800df7c:	2301      	movs	r3, #1
 800df7e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800df80:	6013      	str	r3, [r2, #0]
 800df82:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800df84:	2b00      	cmp	r3, #0
 800df86:	f000 8559 	beq.w	800ea3c <_dtoa_r+0xb84>
 800df8a:	4888      	ldr	r0, [pc, #544]	; (800e1ac <_dtoa_r+0x2f4>)
 800df8c:	6018      	str	r0, [r3, #0]
 800df8e:	1e43      	subs	r3, r0, #1
 800df90:	9308      	str	r3, [sp, #32]
 800df92:	e7df      	b.n	800df54 <_dtoa_r+0x9c>
 800df94:	ab16      	add	r3, sp, #88	; 0x58
 800df96:	9301      	str	r3, [sp, #4]
 800df98:	ab17      	add	r3, sp, #92	; 0x5c
 800df9a:	9300      	str	r3, [sp, #0]
 800df9c:	4628      	mov	r0, r5
 800df9e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800dfa2:	f001 fe11 	bl	800fbc8 <__d2b>
 800dfa6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800dfaa:	4682      	mov	sl, r0
 800dfac:	2c00      	cmp	r4, #0
 800dfae:	d07e      	beq.n	800e0ae <_dtoa_r+0x1f6>
 800dfb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dfb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dfb6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800dfba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dfbe:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800dfc2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800dfc6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800dfca:	2200      	movs	r2, #0
 800dfcc:	4b78      	ldr	r3, [pc, #480]	; (800e1b0 <_dtoa_r+0x2f8>)
 800dfce:	f7f2 f937 	bl	8000240 <__aeabi_dsub>
 800dfd2:	a36b      	add	r3, pc, #428	; (adr r3, 800e180 <_dtoa_r+0x2c8>)
 800dfd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfd8:	f7f2 faea 	bl	80005b0 <__aeabi_dmul>
 800dfdc:	a36a      	add	r3, pc, #424	; (adr r3, 800e188 <_dtoa_r+0x2d0>)
 800dfde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfe2:	f7f2 f92f 	bl	8000244 <__adddf3>
 800dfe6:	4606      	mov	r6, r0
 800dfe8:	4620      	mov	r0, r4
 800dfea:	460f      	mov	r7, r1
 800dfec:	f7f2 fa76 	bl	80004dc <__aeabi_i2d>
 800dff0:	a367      	add	r3, pc, #412	; (adr r3, 800e190 <_dtoa_r+0x2d8>)
 800dff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff6:	f7f2 fadb 	bl	80005b0 <__aeabi_dmul>
 800dffa:	4602      	mov	r2, r0
 800dffc:	460b      	mov	r3, r1
 800dffe:	4630      	mov	r0, r6
 800e000:	4639      	mov	r1, r7
 800e002:	f7f2 f91f 	bl	8000244 <__adddf3>
 800e006:	4606      	mov	r6, r0
 800e008:	460f      	mov	r7, r1
 800e00a:	f7f2 fd81 	bl	8000b10 <__aeabi_d2iz>
 800e00e:	2200      	movs	r2, #0
 800e010:	4681      	mov	r9, r0
 800e012:	2300      	movs	r3, #0
 800e014:	4630      	mov	r0, r6
 800e016:	4639      	mov	r1, r7
 800e018:	f7f2 fd3c 	bl	8000a94 <__aeabi_dcmplt>
 800e01c:	b148      	cbz	r0, 800e032 <_dtoa_r+0x17a>
 800e01e:	4648      	mov	r0, r9
 800e020:	f7f2 fa5c 	bl	80004dc <__aeabi_i2d>
 800e024:	4632      	mov	r2, r6
 800e026:	463b      	mov	r3, r7
 800e028:	f7f2 fd2a 	bl	8000a80 <__aeabi_dcmpeq>
 800e02c:	b908      	cbnz	r0, 800e032 <_dtoa_r+0x17a>
 800e02e:	f109 39ff 	add.w	r9, r9, #4294967295
 800e032:	f1b9 0f16 	cmp.w	r9, #22
 800e036:	d857      	bhi.n	800e0e8 <_dtoa_r+0x230>
 800e038:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e03c:	4b5d      	ldr	r3, [pc, #372]	; (800e1b4 <_dtoa_r+0x2fc>)
 800e03e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800e042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e046:	f7f2 fd25 	bl	8000a94 <__aeabi_dcmplt>
 800e04a:	2800      	cmp	r0, #0
 800e04c:	d04e      	beq.n	800e0ec <_dtoa_r+0x234>
 800e04e:	2300      	movs	r3, #0
 800e050:	f109 39ff 	add.w	r9, r9, #4294967295
 800e054:	930f      	str	r3, [sp, #60]	; 0x3c
 800e056:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e058:	1b1c      	subs	r4, r3, r4
 800e05a:	1e63      	subs	r3, r4, #1
 800e05c:	9309      	str	r3, [sp, #36]	; 0x24
 800e05e:	bf49      	itett	mi
 800e060:	f1c4 0301 	rsbmi	r3, r4, #1
 800e064:	2300      	movpl	r3, #0
 800e066:	9306      	strmi	r3, [sp, #24]
 800e068:	2300      	movmi	r3, #0
 800e06a:	bf54      	ite	pl
 800e06c:	9306      	strpl	r3, [sp, #24]
 800e06e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800e070:	f1b9 0f00 	cmp.w	r9, #0
 800e074:	db3c      	blt.n	800e0f0 <_dtoa_r+0x238>
 800e076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e078:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e07c:	444b      	add	r3, r9
 800e07e:	9309      	str	r3, [sp, #36]	; 0x24
 800e080:	2300      	movs	r3, #0
 800e082:	930a      	str	r3, [sp, #40]	; 0x28
 800e084:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e086:	2b09      	cmp	r3, #9
 800e088:	d86c      	bhi.n	800e164 <_dtoa_r+0x2ac>
 800e08a:	2b05      	cmp	r3, #5
 800e08c:	bfc4      	itt	gt
 800e08e:	3b04      	subgt	r3, #4
 800e090:	9322      	strgt	r3, [sp, #136]	; 0x88
 800e092:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e094:	bfc8      	it	gt
 800e096:	2400      	movgt	r4, #0
 800e098:	f1a3 0302 	sub.w	r3, r3, #2
 800e09c:	bfd8      	it	le
 800e09e:	2401      	movle	r4, #1
 800e0a0:	2b03      	cmp	r3, #3
 800e0a2:	f200 808b 	bhi.w	800e1bc <_dtoa_r+0x304>
 800e0a6:	e8df f003 	tbb	[pc, r3]
 800e0aa:	4f2d      	.short	0x4f2d
 800e0ac:	5b4d      	.short	0x5b4d
 800e0ae:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800e0b2:	441c      	add	r4, r3
 800e0b4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800e0b8:	2b20      	cmp	r3, #32
 800e0ba:	bfc3      	ittte	gt
 800e0bc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e0c0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800e0c4:	fa09 f303 	lslgt.w	r3, r9, r3
 800e0c8:	f1c3 0320 	rsble	r3, r3, #32
 800e0cc:	bfc6      	itte	gt
 800e0ce:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e0d2:	4318      	orrgt	r0, r3
 800e0d4:	fa06 f003 	lslle.w	r0, r6, r3
 800e0d8:	f7f2 f9f0 	bl	80004bc <__aeabi_ui2d>
 800e0dc:	2301      	movs	r3, #1
 800e0de:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800e0e2:	3c01      	subs	r4, #1
 800e0e4:	9313      	str	r3, [sp, #76]	; 0x4c
 800e0e6:	e770      	b.n	800dfca <_dtoa_r+0x112>
 800e0e8:	2301      	movs	r3, #1
 800e0ea:	e7b3      	b.n	800e054 <_dtoa_r+0x19c>
 800e0ec:	900f      	str	r0, [sp, #60]	; 0x3c
 800e0ee:	e7b2      	b.n	800e056 <_dtoa_r+0x19e>
 800e0f0:	9b06      	ldr	r3, [sp, #24]
 800e0f2:	eba3 0309 	sub.w	r3, r3, r9
 800e0f6:	9306      	str	r3, [sp, #24]
 800e0f8:	f1c9 0300 	rsb	r3, r9, #0
 800e0fc:	930a      	str	r3, [sp, #40]	; 0x28
 800e0fe:	2300      	movs	r3, #0
 800e100:	930e      	str	r3, [sp, #56]	; 0x38
 800e102:	e7bf      	b.n	800e084 <_dtoa_r+0x1cc>
 800e104:	2300      	movs	r3, #0
 800e106:	930b      	str	r3, [sp, #44]	; 0x2c
 800e108:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	dc59      	bgt.n	800e1c2 <_dtoa_r+0x30a>
 800e10e:	f04f 0b01 	mov.w	fp, #1
 800e112:	465b      	mov	r3, fp
 800e114:	f8cd b008 	str.w	fp, [sp, #8]
 800e118:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800e11c:	2200      	movs	r2, #0
 800e11e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800e120:	6042      	str	r2, [r0, #4]
 800e122:	2204      	movs	r2, #4
 800e124:	f102 0614 	add.w	r6, r2, #20
 800e128:	429e      	cmp	r6, r3
 800e12a:	6841      	ldr	r1, [r0, #4]
 800e12c:	d94f      	bls.n	800e1ce <_dtoa_r+0x316>
 800e12e:	4628      	mov	r0, r5
 800e130:	f001 f960 	bl	800f3f4 <_Balloc>
 800e134:	9008      	str	r0, [sp, #32]
 800e136:	2800      	cmp	r0, #0
 800e138:	d14d      	bne.n	800e1d6 <_dtoa_r+0x31e>
 800e13a:	4602      	mov	r2, r0
 800e13c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e140:	4b1d      	ldr	r3, [pc, #116]	; (800e1b8 <_dtoa_r+0x300>)
 800e142:	e6cd      	b.n	800dee0 <_dtoa_r+0x28>
 800e144:	2301      	movs	r3, #1
 800e146:	e7de      	b.n	800e106 <_dtoa_r+0x24e>
 800e148:	2300      	movs	r3, #0
 800e14a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e14c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e14e:	eb09 0b03 	add.w	fp, r9, r3
 800e152:	f10b 0301 	add.w	r3, fp, #1
 800e156:	2b01      	cmp	r3, #1
 800e158:	9302      	str	r3, [sp, #8]
 800e15a:	bfb8      	it	lt
 800e15c:	2301      	movlt	r3, #1
 800e15e:	e7dd      	b.n	800e11c <_dtoa_r+0x264>
 800e160:	2301      	movs	r3, #1
 800e162:	e7f2      	b.n	800e14a <_dtoa_r+0x292>
 800e164:	2401      	movs	r4, #1
 800e166:	2300      	movs	r3, #0
 800e168:	940b      	str	r4, [sp, #44]	; 0x2c
 800e16a:	9322      	str	r3, [sp, #136]	; 0x88
 800e16c:	f04f 3bff 	mov.w	fp, #4294967295
 800e170:	2200      	movs	r2, #0
 800e172:	2312      	movs	r3, #18
 800e174:	f8cd b008 	str.w	fp, [sp, #8]
 800e178:	9223      	str	r2, [sp, #140]	; 0x8c
 800e17a:	e7cf      	b.n	800e11c <_dtoa_r+0x264>
 800e17c:	f3af 8000 	nop.w
 800e180:	636f4361 	.word	0x636f4361
 800e184:	3fd287a7 	.word	0x3fd287a7
 800e188:	8b60c8b3 	.word	0x8b60c8b3
 800e18c:	3fc68a28 	.word	0x3fc68a28
 800e190:	509f79fb 	.word	0x509f79fb
 800e194:	3fd34413 	.word	0x3fd34413
 800e198:	080125fe 	.word	0x080125fe
 800e19c:	08012615 	.word	0x08012615
 800e1a0:	7ff00000 	.word	0x7ff00000
 800e1a4:	080125fa 	.word	0x080125fa
 800e1a8:	080125f1 	.word	0x080125f1
 800e1ac:	080128da 	.word	0x080128da
 800e1b0:	3ff80000 	.word	0x3ff80000
 800e1b4:	080127f0 	.word	0x080127f0
 800e1b8:	08012674 	.word	0x08012674
 800e1bc:	2301      	movs	r3, #1
 800e1be:	930b      	str	r3, [sp, #44]	; 0x2c
 800e1c0:	e7d4      	b.n	800e16c <_dtoa_r+0x2b4>
 800e1c2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800e1c6:	465b      	mov	r3, fp
 800e1c8:	f8cd b008 	str.w	fp, [sp, #8]
 800e1cc:	e7a6      	b.n	800e11c <_dtoa_r+0x264>
 800e1ce:	3101      	adds	r1, #1
 800e1d0:	6041      	str	r1, [r0, #4]
 800e1d2:	0052      	lsls	r2, r2, #1
 800e1d4:	e7a6      	b.n	800e124 <_dtoa_r+0x26c>
 800e1d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e1d8:	9a08      	ldr	r2, [sp, #32]
 800e1da:	601a      	str	r2, [r3, #0]
 800e1dc:	9b02      	ldr	r3, [sp, #8]
 800e1de:	2b0e      	cmp	r3, #14
 800e1e0:	f200 80a8 	bhi.w	800e334 <_dtoa_r+0x47c>
 800e1e4:	2c00      	cmp	r4, #0
 800e1e6:	f000 80a5 	beq.w	800e334 <_dtoa_r+0x47c>
 800e1ea:	f1b9 0f00 	cmp.w	r9, #0
 800e1ee:	dd34      	ble.n	800e25a <_dtoa_r+0x3a2>
 800e1f0:	4a9a      	ldr	r2, [pc, #616]	; (800e45c <_dtoa_r+0x5a4>)
 800e1f2:	f009 030f 	and.w	r3, r9, #15
 800e1f6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e1fa:	f419 7f80 	tst.w	r9, #256	; 0x100
 800e1fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e202:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800e206:	ea4f 1429 	mov.w	r4, r9, asr #4
 800e20a:	d016      	beq.n	800e23a <_dtoa_r+0x382>
 800e20c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e210:	4b93      	ldr	r3, [pc, #588]	; (800e460 <_dtoa_r+0x5a8>)
 800e212:	2703      	movs	r7, #3
 800e214:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e218:	f7f2 faf4 	bl	8000804 <__aeabi_ddiv>
 800e21c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e220:	f004 040f 	and.w	r4, r4, #15
 800e224:	4e8e      	ldr	r6, [pc, #568]	; (800e460 <_dtoa_r+0x5a8>)
 800e226:	b954      	cbnz	r4, 800e23e <_dtoa_r+0x386>
 800e228:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e22c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e230:	f7f2 fae8 	bl	8000804 <__aeabi_ddiv>
 800e234:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e238:	e029      	b.n	800e28e <_dtoa_r+0x3d6>
 800e23a:	2702      	movs	r7, #2
 800e23c:	e7f2      	b.n	800e224 <_dtoa_r+0x36c>
 800e23e:	07e1      	lsls	r1, r4, #31
 800e240:	d508      	bpl.n	800e254 <_dtoa_r+0x39c>
 800e242:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e246:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e24a:	f7f2 f9b1 	bl	80005b0 <__aeabi_dmul>
 800e24e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e252:	3701      	adds	r7, #1
 800e254:	1064      	asrs	r4, r4, #1
 800e256:	3608      	adds	r6, #8
 800e258:	e7e5      	b.n	800e226 <_dtoa_r+0x36e>
 800e25a:	f000 80a5 	beq.w	800e3a8 <_dtoa_r+0x4f0>
 800e25e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e262:	f1c9 0400 	rsb	r4, r9, #0
 800e266:	4b7d      	ldr	r3, [pc, #500]	; (800e45c <_dtoa_r+0x5a4>)
 800e268:	f004 020f 	and.w	r2, r4, #15
 800e26c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e274:	f7f2 f99c 	bl	80005b0 <__aeabi_dmul>
 800e278:	2702      	movs	r7, #2
 800e27a:	2300      	movs	r3, #0
 800e27c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e280:	4e77      	ldr	r6, [pc, #476]	; (800e460 <_dtoa_r+0x5a8>)
 800e282:	1124      	asrs	r4, r4, #4
 800e284:	2c00      	cmp	r4, #0
 800e286:	f040 8084 	bne.w	800e392 <_dtoa_r+0x4da>
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d1d2      	bne.n	800e234 <_dtoa_r+0x37c>
 800e28e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e290:	2b00      	cmp	r3, #0
 800e292:	f000 808b 	beq.w	800e3ac <_dtoa_r+0x4f4>
 800e296:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800e29a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800e29e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	4b6f      	ldr	r3, [pc, #444]	; (800e464 <_dtoa_r+0x5ac>)
 800e2a6:	f7f2 fbf5 	bl	8000a94 <__aeabi_dcmplt>
 800e2aa:	2800      	cmp	r0, #0
 800e2ac:	d07e      	beq.n	800e3ac <_dtoa_r+0x4f4>
 800e2ae:	9b02      	ldr	r3, [sp, #8]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d07b      	beq.n	800e3ac <_dtoa_r+0x4f4>
 800e2b4:	f1bb 0f00 	cmp.w	fp, #0
 800e2b8:	dd38      	ble.n	800e32c <_dtoa_r+0x474>
 800e2ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e2be:	2200      	movs	r2, #0
 800e2c0:	4b69      	ldr	r3, [pc, #420]	; (800e468 <_dtoa_r+0x5b0>)
 800e2c2:	f7f2 f975 	bl	80005b0 <__aeabi_dmul>
 800e2c6:	465c      	mov	r4, fp
 800e2c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e2cc:	f109 38ff 	add.w	r8, r9, #4294967295
 800e2d0:	3701      	adds	r7, #1
 800e2d2:	4638      	mov	r0, r7
 800e2d4:	f7f2 f902 	bl	80004dc <__aeabi_i2d>
 800e2d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e2dc:	f7f2 f968 	bl	80005b0 <__aeabi_dmul>
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	4b62      	ldr	r3, [pc, #392]	; (800e46c <_dtoa_r+0x5b4>)
 800e2e4:	f7f1 ffae 	bl	8000244 <__adddf3>
 800e2e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800e2ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e2f0:	9611      	str	r6, [sp, #68]	; 0x44
 800e2f2:	2c00      	cmp	r4, #0
 800e2f4:	d15d      	bne.n	800e3b2 <_dtoa_r+0x4fa>
 800e2f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	4b5c      	ldr	r3, [pc, #368]	; (800e470 <_dtoa_r+0x5b8>)
 800e2fe:	f7f1 ff9f 	bl	8000240 <__aeabi_dsub>
 800e302:	4602      	mov	r2, r0
 800e304:	460b      	mov	r3, r1
 800e306:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e30a:	4633      	mov	r3, r6
 800e30c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e30e:	f7f2 fbdf 	bl	8000ad0 <__aeabi_dcmpgt>
 800e312:	2800      	cmp	r0, #0
 800e314:	f040 829e 	bne.w	800e854 <_dtoa_r+0x99c>
 800e318:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e31c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e31e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e322:	f7f2 fbb7 	bl	8000a94 <__aeabi_dcmplt>
 800e326:	2800      	cmp	r0, #0
 800e328:	f040 8292 	bne.w	800e850 <_dtoa_r+0x998>
 800e32c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800e330:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e334:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e336:	2b00      	cmp	r3, #0
 800e338:	f2c0 8153 	blt.w	800e5e2 <_dtoa_r+0x72a>
 800e33c:	f1b9 0f0e 	cmp.w	r9, #14
 800e340:	f300 814f 	bgt.w	800e5e2 <_dtoa_r+0x72a>
 800e344:	4b45      	ldr	r3, [pc, #276]	; (800e45c <_dtoa_r+0x5a4>)
 800e346:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800e34a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e34e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800e352:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e354:	2b00      	cmp	r3, #0
 800e356:	f280 80db 	bge.w	800e510 <_dtoa_r+0x658>
 800e35a:	9b02      	ldr	r3, [sp, #8]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	f300 80d7 	bgt.w	800e510 <_dtoa_r+0x658>
 800e362:	f040 8274 	bne.w	800e84e <_dtoa_r+0x996>
 800e366:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e36a:	2200      	movs	r2, #0
 800e36c:	4b40      	ldr	r3, [pc, #256]	; (800e470 <_dtoa_r+0x5b8>)
 800e36e:	f7f2 f91f 	bl	80005b0 <__aeabi_dmul>
 800e372:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e376:	f7f2 fba1 	bl	8000abc <__aeabi_dcmpge>
 800e37a:	9c02      	ldr	r4, [sp, #8]
 800e37c:	4626      	mov	r6, r4
 800e37e:	2800      	cmp	r0, #0
 800e380:	f040 824a 	bne.w	800e818 <_dtoa_r+0x960>
 800e384:	2331      	movs	r3, #49	; 0x31
 800e386:	9f08      	ldr	r7, [sp, #32]
 800e388:	f109 0901 	add.w	r9, r9, #1
 800e38c:	f807 3b01 	strb.w	r3, [r7], #1
 800e390:	e246      	b.n	800e820 <_dtoa_r+0x968>
 800e392:	07e2      	lsls	r2, r4, #31
 800e394:	d505      	bpl.n	800e3a2 <_dtoa_r+0x4ea>
 800e396:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e39a:	f7f2 f909 	bl	80005b0 <__aeabi_dmul>
 800e39e:	2301      	movs	r3, #1
 800e3a0:	3701      	adds	r7, #1
 800e3a2:	1064      	asrs	r4, r4, #1
 800e3a4:	3608      	adds	r6, #8
 800e3a6:	e76d      	b.n	800e284 <_dtoa_r+0x3cc>
 800e3a8:	2702      	movs	r7, #2
 800e3aa:	e770      	b.n	800e28e <_dtoa_r+0x3d6>
 800e3ac:	46c8      	mov	r8, r9
 800e3ae:	9c02      	ldr	r4, [sp, #8]
 800e3b0:	e78f      	b.n	800e2d2 <_dtoa_r+0x41a>
 800e3b2:	9908      	ldr	r1, [sp, #32]
 800e3b4:	4b29      	ldr	r3, [pc, #164]	; (800e45c <_dtoa_r+0x5a4>)
 800e3b6:	4421      	add	r1, r4
 800e3b8:	9112      	str	r1, [sp, #72]	; 0x48
 800e3ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e3bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e3c0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800e3c4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e3c8:	2900      	cmp	r1, #0
 800e3ca:	d055      	beq.n	800e478 <_dtoa_r+0x5c0>
 800e3cc:	2000      	movs	r0, #0
 800e3ce:	4929      	ldr	r1, [pc, #164]	; (800e474 <_dtoa_r+0x5bc>)
 800e3d0:	f7f2 fa18 	bl	8000804 <__aeabi_ddiv>
 800e3d4:	463b      	mov	r3, r7
 800e3d6:	4632      	mov	r2, r6
 800e3d8:	f7f1 ff32 	bl	8000240 <__aeabi_dsub>
 800e3dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e3e0:	9f08      	ldr	r7, [sp, #32]
 800e3e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e3e6:	f7f2 fb93 	bl	8000b10 <__aeabi_d2iz>
 800e3ea:	4604      	mov	r4, r0
 800e3ec:	f7f2 f876 	bl	80004dc <__aeabi_i2d>
 800e3f0:	4602      	mov	r2, r0
 800e3f2:	460b      	mov	r3, r1
 800e3f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e3f8:	f7f1 ff22 	bl	8000240 <__aeabi_dsub>
 800e3fc:	4602      	mov	r2, r0
 800e3fe:	460b      	mov	r3, r1
 800e400:	3430      	adds	r4, #48	; 0x30
 800e402:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e406:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e40a:	f807 4b01 	strb.w	r4, [r7], #1
 800e40e:	f7f2 fb41 	bl	8000a94 <__aeabi_dcmplt>
 800e412:	2800      	cmp	r0, #0
 800e414:	d174      	bne.n	800e500 <_dtoa_r+0x648>
 800e416:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e41a:	2000      	movs	r0, #0
 800e41c:	4911      	ldr	r1, [pc, #68]	; (800e464 <_dtoa_r+0x5ac>)
 800e41e:	f7f1 ff0f 	bl	8000240 <__aeabi_dsub>
 800e422:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e426:	f7f2 fb35 	bl	8000a94 <__aeabi_dcmplt>
 800e42a:	2800      	cmp	r0, #0
 800e42c:	f040 80b6 	bne.w	800e59c <_dtoa_r+0x6e4>
 800e430:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e432:	429f      	cmp	r7, r3
 800e434:	f43f af7a 	beq.w	800e32c <_dtoa_r+0x474>
 800e438:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e43c:	2200      	movs	r2, #0
 800e43e:	4b0a      	ldr	r3, [pc, #40]	; (800e468 <_dtoa_r+0x5b0>)
 800e440:	f7f2 f8b6 	bl	80005b0 <__aeabi_dmul>
 800e444:	2200      	movs	r2, #0
 800e446:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e44a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e44e:	4b06      	ldr	r3, [pc, #24]	; (800e468 <_dtoa_r+0x5b0>)
 800e450:	f7f2 f8ae 	bl	80005b0 <__aeabi_dmul>
 800e454:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e458:	e7c3      	b.n	800e3e2 <_dtoa_r+0x52a>
 800e45a:	bf00      	nop
 800e45c:	080127f0 	.word	0x080127f0
 800e460:	080127c8 	.word	0x080127c8
 800e464:	3ff00000 	.word	0x3ff00000
 800e468:	40240000 	.word	0x40240000
 800e46c:	401c0000 	.word	0x401c0000
 800e470:	40140000 	.word	0x40140000
 800e474:	3fe00000 	.word	0x3fe00000
 800e478:	4630      	mov	r0, r6
 800e47a:	4639      	mov	r1, r7
 800e47c:	f7f2 f898 	bl	80005b0 <__aeabi_dmul>
 800e480:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e482:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e486:	9c08      	ldr	r4, [sp, #32]
 800e488:	9314      	str	r3, [sp, #80]	; 0x50
 800e48a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e48e:	f7f2 fb3f 	bl	8000b10 <__aeabi_d2iz>
 800e492:	9015      	str	r0, [sp, #84]	; 0x54
 800e494:	f7f2 f822 	bl	80004dc <__aeabi_i2d>
 800e498:	4602      	mov	r2, r0
 800e49a:	460b      	mov	r3, r1
 800e49c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e4a0:	f7f1 fece 	bl	8000240 <__aeabi_dsub>
 800e4a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e4a6:	4606      	mov	r6, r0
 800e4a8:	3330      	adds	r3, #48	; 0x30
 800e4aa:	f804 3b01 	strb.w	r3, [r4], #1
 800e4ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e4b0:	460f      	mov	r7, r1
 800e4b2:	429c      	cmp	r4, r3
 800e4b4:	f04f 0200 	mov.w	r2, #0
 800e4b8:	d124      	bne.n	800e504 <_dtoa_r+0x64c>
 800e4ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e4be:	4bb3      	ldr	r3, [pc, #716]	; (800e78c <_dtoa_r+0x8d4>)
 800e4c0:	f7f1 fec0 	bl	8000244 <__adddf3>
 800e4c4:	4602      	mov	r2, r0
 800e4c6:	460b      	mov	r3, r1
 800e4c8:	4630      	mov	r0, r6
 800e4ca:	4639      	mov	r1, r7
 800e4cc:	f7f2 fb00 	bl	8000ad0 <__aeabi_dcmpgt>
 800e4d0:	2800      	cmp	r0, #0
 800e4d2:	d162      	bne.n	800e59a <_dtoa_r+0x6e2>
 800e4d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e4d8:	2000      	movs	r0, #0
 800e4da:	49ac      	ldr	r1, [pc, #688]	; (800e78c <_dtoa_r+0x8d4>)
 800e4dc:	f7f1 feb0 	bl	8000240 <__aeabi_dsub>
 800e4e0:	4602      	mov	r2, r0
 800e4e2:	460b      	mov	r3, r1
 800e4e4:	4630      	mov	r0, r6
 800e4e6:	4639      	mov	r1, r7
 800e4e8:	f7f2 fad4 	bl	8000a94 <__aeabi_dcmplt>
 800e4ec:	2800      	cmp	r0, #0
 800e4ee:	f43f af1d 	beq.w	800e32c <_dtoa_r+0x474>
 800e4f2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800e4f4:	1e7b      	subs	r3, r7, #1
 800e4f6:	9314      	str	r3, [sp, #80]	; 0x50
 800e4f8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800e4fc:	2b30      	cmp	r3, #48	; 0x30
 800e4fe:	d0f8      	beq.n	800e4f2 <_dtoa_r+0x63a>
 800e500:	46c1      	mov	r9, r8
 800e502:	e03a      	b.n	800e57a <_dtoa_r+0x6c2>
 800e504:	4ba2      	ldr	r3, [pc, #648]	; (800e790 <_dtoa_r+0x8d8>)
 800e506:	f7f2 f853 	bl	80005b0 <__aeabi_dmul>
 800e50a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e50e:	e7bc      	b.n	800e48a <_dtoa_r+0x5d2>
 800e510:	9f08      	ldr	r7, [sp, #32]
 800e512:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e516:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e51a:	f7f2 f973 	bl	8000804 <__aeabi_ddiv>
 800e51e:	f7f2 faf7 	bl	8000b10 <__aeabi_d2iz>
 800e522:	4604      	mov	r4, r0
 800e524:	f7f1 ffda 	bl	80004dc <__aeabi_i2d>
 800e528:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e52c:	f7f2 f840 	bl	80005b0 <__aeabi_dmul>
 800e530:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800e534:	460b      	mov	r3, r1
 800e536:	4602      	mov	r2, r0
 800e538:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e53c:	f7f1 fe80 	bl	8000240 <__aeabi_dsub>
 800e540:	f807 6b01 	strb.w	r6, [r7], #1
 800e544:	9e08      	ldr	r6, [sp, #32]
 800e546:	9b02      	ldr	r3, [sp, #8]
 800e548:	1bbe      	subs	r6, r7, r6
 800e54a:	42b3      	cmp	r3, r6
 800e54c:	d13a      	bne.n	800e5c4 <_dtoa_r+0x70c>
 800e54e:	4602      	mov	r2, r0
 800e550:	460b      	mov	r3, r1
 800e552:	f7f1 fe77 	bl	8000244 <__adddf3>
 800e556:	4602      	mov	r2, r0
 800e558:	460b      	mov	r3, r1
 800e55a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e55e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e562:	f7f2 fab5 	bl	8000ad0 <__aeabi_dcmpgt>
 800e566:	bb58      	cbnz	r0, 800e5c0 <_dtoa_r+0x708>
 800e568:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e56c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e570:	f7f2 fa86 	bl	8000a80 <__aeabi_dcmpeq>
 800e574:	b108      	cbz	r0, 800e57a <_dtoa_r+0x6c2>
 800e576:	07e1      	lsls	r1, r4, #31
 800e578:	d422      	bmi.n	800e5c0 <_dtoa_r+0x708>
 800e57a:	4628      	mov	r0, r5
 800e57c:	4651      	mov	r1, sl
 800e57e:	f000 ff79 	bl	800f474 <_Bfree>
 800e582:	2300      	movs	r3, #0
 800e584:	703b      	strb	r3, [r7, #0]
 800e586:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800e588:	f109 0001 	add.w	r0, r9, #1
 800e58c:	6018      	str	r0, [r3, #0]
 800e58e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e590:	2b00      	cmp	r3, #0
 800e592:	f43f acdf 	beq.w	800df54 <_dtoa_r+0x9c>
 800e596:	601f      	str	r7, [r3, #0]
 800e598:	e4dc      	b.n	800df54 <_dtoa_r+0x9c>
 800e59a:	4627      	mov	r7, r4
 800e59c:	463b      	mov	r3, r7
 800e59e:	461f      	mov	r7, r3
 800e5a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e5a4:	2a39      	cmp	r2, #57	; 0x39
 800e5a6:	d107      	bne.n	800e5b8 <_dtoa_r+0x700>
 800e5a8:	9a08      	ldr	r2, [sp, #32]
 800e5aa:	429a      	cmp	r2, r3
 800e5ac:	d1f7      	bne.n	800e59e <_dtoa_r+0x6e6>
 800e5ae:	2230      	movs	r2, #48	; 0x30
 800e5b0:	9908      	ldr	r1, [sp, #32]
 800e5b2:	f108 0801 	add.w	r8, r8, #1
 800e5b6:	700a      	strb	r2, [r1, #0]
 800e5b8:	781a      	ldrb	r2, [r3, #0]
 800e5ba:	3201      	adds	r2, #1
 800e5bc:	701a      	strb	r2, [r3, #0]
 800e5be:	e79f      	b.n	800e500 <_dtoa_r+0x648>
 800e5c0:	46c8      	mov	r8, r9
 800e5c2:	e7eb      	b.n	800e59c <_dtoa_r+0x6e4>
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	4b72      	ldr	r3, [pc, #456]	; (800e790 <_dtoa_r+0x8d8>)
 800e5c8:	f7f1 fff2 	bl	80005b0 <__aeabi_dmul>
 800e5cc:	4602      	mov	r2, r0
 800e5ce:	460b      	mov	r3, r1
 800e5d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	f7f2 fa52 	bl	8000a80 <__aeabi_dcmpeq>
 800e5dc:	2800      	cmp	r0, #0
 800e5de:	d098      	beq.n	800e512 <_dtoa_r+0x65a>
 800e5e0:	e7cb      	b.n	800e57a <_dtoa_r+0x6c2>
 800e5e2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e5e4:	2a00      	cmp	r2, #0
 800e5e6:	f000 80cd 	beq.w	800e784 <_dtoa_r+0x8cc>
 800e5ea:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e5ec:	2a01      	cmp	r2, #1
 800e5ee:	f300 80af 	bgt.w	800e750 <_dtoa_r+0x898>
 800e5f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e5f4:	2a00      	cmp	r2, #0
 800e5f6:	f000 80a7 	beq.w	800e748 <_dtoa_r+0x890>
 800e5fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e5fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e600:	9f06      	ldr	r7, [sp, #24]
 800e602:	9a06      	ldr	r2, [sp, #24]
 800e604:	2101      	movs	r1, #1
 800e606:	441a      	add	r2, r3
 800e608:	9206      	str	r2, [sp, #24]
 800e60a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e60c:	4628      	mov	r0, r5
 800e60e:	441a      	add	r2, r3
 800e610:	9209      	str	r2, [sp, #36]	; 0x24
 800e612:	f001 f833 	bl	800f67c <__i2b>
 800e616:	4606      	mov	r6, r0
 800e618:	2f00      	cmp	r7, #0
 800e61a:	dd0c      	ble.n	800e636 <_dtoa_r+0x77e>
 800e61c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e61e:	2b00      	cmp	r3, #0
 800e620:	dd09      	ble.n	800e636 <_dtoa_r+0x77e>
 800e622:	42bb      	cmp	r3, r7
 800e624:	bfa8      	it	ge
 800e626:	463b      	movge	r3, r7
 800e628:	9a06      	ldr	r2, [sp, #24]
 800e62a:	1aff      	subs	r7, r7, r3
 800e62c:	1ad2      	subs	r2, r2, r3
 800e62e:	9206      	str	r2, [sp, #24]
 800e630:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e632:	1ad3      	subs	r3, r2, r3
 800e634:	9309      	str	r3, [sp, #36]	; 0x24
 800e636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e638:	b1f3      	cbz	r3, 800e678 <_dtoa_r+0x7c0>
 800e63a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	f000 80a9 	beq.w	800e794 <_dtoa_r+0x8dc>
 800e642:	2c00      	cmp	r4, #0
 800e644:	dd10      	ble.n	800e668 <_dtoa_r+0x7b0>
 800e646:	4631      	mov	r1, r6
 800e648:	4622      	mov	r2, r4
 800e64a:	4628      	mov	r0, r5
 800e64c:	f001 f8d0 	bl	800f7f0 <__pow5mult>
 800e650:	4652      	mov	r2, sl
 800e652:	4601      	mov	r1, r0
 800e654:	4606      	mov	r6, r0
 800e656:	4628      	mov	r0, r5
 800e658:	f001 f826 	bl	800f6a8 <__multiply>
 800e65c:	4680      	mov	r8, r0
 800e65e:	4651      	mov	r1, sl
 800e660:	4628      	mov	r0, r5
 800e662:	f000 ff07 	bl	800f474 <_Bfree>
 800e666:	46c2      	mov	sl, r8
 800e668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e66a:	1b1a      	subs	r2, r3, r4
 800e66c:	d004      	beq.n	800e678 <_dtoa_r+0x7c0>
 800e66e:	4651      	mov	r1, sl
 800e670:	4628      	mov	r0, r5
 800e672:	f001 f8bd 	bl	800f7f0 <__pow5mult>
 800e676:	4682      	mov	sl, r0
 800e678:	2101      	movs	r1, #1
 800e67a:	4628      	mov	r0, r5
 800e67c:	f000 fffe 	bl	800f67c <__i2b>
 800e680:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e682:	4604      	mov	r4, r0
 800e684:	2b00      	cmp	r3, #0
 800e686:	f340 8087 	ble.w	800e798 <_dtoa_r+0x8e0>
 800e68a:	461a      	mov	r2, r3
 800e68c:	4601      	mov	r1, r0
 800e68e:	4628      	mov	r0, r5
 800e690:	f001 f8ae 	bl	800f7f0 <__pow5mult>
 800e694:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e696:	4604      	mov	r4, r0
 800e698:	2b01      	cmp	r3, #1
 800e69a:	f340 8080 	ble.w	800e79e <_dtoa_r+0x8e6>
 800e69e:	f04f 0800 	mov.w	r8, #0
 800e6a2:	6923      	ldr	r3, [r4, #16]
 800e6a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e6a8:	6918      	ldr	r0, [r3, #16]
 800e6aa:	f000 ff99 	bl	800f5e0 <__hi0bits>
 800e6ae:	f1c0 0020 	rsb	r0, r0, #32
 800e6b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6b4:	4418      	add	r0, r3
 800e6b6:	f010 001f 	ands.w	r0, r0, #31
 800e6ba:	f000 8092 	beq.w	800e7e2 <_dtoa_r+0x92a>
 800e6be:	f1c0 0320 	rsb	r3, r0, #32
 800e6c2:	2b04      	cmp	r3, #4
 800e6c4:	f340 808a 	ble.w	800e7dc <_dtoa_r+0x924>
 800e6c8:	f1c0 001c 	rsb	r0, r0, #28
 800e6cc:	9b06      	ldr	r3, [sp, #24]
 800e6ce:	4407      	add	r7, r0
 800e6d0:	4403      	add	r3, r0
 800e6d2:	9306      	str	r3, [sp, #24]
 800e6d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6d6:	4403      	add	r3, r0
 800e6d8:	9309      	str	r3, [sp, #36]	; 0x24
 800e6da:	9b06      	ldr	r3, [sp, #24]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	dd05      	ble.n	800e6ec <_dtoa_r+0x834>
 800e6e0:	4651      	mov	r1, sl
 800e6e2:	461a      	mov	r2, r3
 800e6e4:	4628      	mov	r0, r5
 800e6e6:	f001 f8dd 	bl	800f8a4 <__lshift>
 800e6ea:	4682      	mov	sl, r0
 800e6ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	dd05      	ble.n	800e6fe <_dtoa_r+0x846>
 800e6f2:	4621      	mov	r1, r4
 800e6f4:	461a      	mov	r2, r3
 800e6f6:	4628      	mov	r0, r5
 800e6f8:	f001 f8d4 	bl	800f8a4 <__lshift>
 800e6fc:	4604      	mov	r4, r0
 800e6fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e700:	2b00      	cmp	r3, #0
 800e702:	d070      	beq.n	800e7e6 <_dtoa_r+0x92e>
 800e704:	4621      	mov	r1, r4
 800e706:	4650      	mov	r0, sl
 800e708:	f001 f938 	bl	800f97c <__mcmp>
 800e70c:	2800      	cmp	r0, #0
 800e70e:	da6a      	bge.n	800e7e6 <_dtoa_r+0x92e>
 800e710:	2300      	movs	r3, #0
 800e712:	4651      	mov	r1, sl
 800e714:	220a      	movs	r2, #10
 800e716:	4628      	mov	r0, r5
 800e718:	f000 fece 	bl	800f4b8 <__multadd>
 800e71c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e71e:	4682      	mov	sl, r0
 800e720:	f109 39ff 	add.w	r9, r9, #4294967295
 800e724:	2b00      	cmp	r3, #0
 800e726:	f000 8193 	beq.w	800ea50 <_dtoa_r+0xb98>
 800e72a:	4631      	mov	r1, r6
 800e72c:	2300      	movs	r3, #0
 800e72e:	220a      	movs	r2, #10
 800e730:	4628      	mov	r0, r5
 800e732:	f000 fec1 	bl	800f4b8 <__multadd>
 800e736:	f1bb 0f00 	cmp.w	fp, #0
 800e73a:	4606      	mov	r6, r0
 800e73c:	f300 8093 	bgt.w	800e866 <_dtoa_r+0x9ae>
 800e740:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e742:	2b02      	cmp	r3, #2
 800e744:	dc57      	bgt.n	800e7f6 <_dtoa_r+0x93e>
 800e746:	e08e      	b.n	800e866 <_dtoa_r+0x9ae>
 800e748:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e74a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e74e:	e756      	b.n	800e5fe <_dtoa_r+0x746>
 800e750:	9b02      	ldr	r3, [sp, #8]
 800e752:	1e5c      	subs	r4, r3, #1
 800e754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e756:	42a3      	cmp	r3, r4
 800e758:	bfb7      	itett	lt
 800e75a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e75c:	1b1c      	subge	r4, r3, r4
 800e75e:	1ae2      	sublt	r2, r4, r3
 800e760:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800e762:	bfbe      	ittt	lt
 800e764:	940a      	strlt	r4, [sp, #40]	; 0x28
 800e766:	189b      	addlt	r3, r3, r2
 800e768:	930e      	strlt	r3, [sp, #56]	; 0x38
 800e76a:	9b02      	ldr	r3, [sp, #8]
 800e76c:	bfb8      	it	lt
 800e76e:	2400      	movlt	r4, #0
 800e770:	2b00      	cmp	r3, #0
 800e772:	bfbb      	ittet	lt
 800e774:	9b06      	ldrlt	r3, [sp, #24]
 800e776:	9a02      	ldrlt	r2, [sp, #8]
 800e778:	9f06      	ldrge	r7, [sp, #24]
 800e77a:	1a9f      	sublt	r7, r3, r2
 800e77c:	bfac      	ite	ge
 800e77e:	9b02      	ldrge	r3, [sp, #8]
 800e780:	2300      	movlt	r3, #0
 800e782:	e73e      	b.n	800e602 <_dtoa_r+0x74a>
 800e784:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e786:	9f06      	ldr	r7, [sp, #24]
 800e788:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800e78a:	e745      	b.n	800e618 <_dtoa_r+0x760>
 800e78c:	3fe00000 	.word	0x3fe00000
 800e790:	40240000 	.word	0x40240000
 800e794:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e796:	e76a      	b.n	800e66e <_dtoa_r+0x7b6>
 800e798:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e79a:	2b01      	cmp	r3, #1
 800e79c:	dc19      	bgt.n	800e7d2 <_dtoa_r+0x91a>
 800e79e:	9b04      	ldr	r3, [sp, #16]
 800e7a0:	b9bb      	cbnz	r3, 800e7d2 <_dtoa_r+0x91a>
 800e7a2:	9b05      	ldr	r3, [sp, #20]
 800e7a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e7a8:	b99b      	cbnz	r3, 800e7d2 <_dtoa_r+0x91a>
 800e7aa:	9b05      	ldr	r3, [sp, #20]
 800e7ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e7b0:	0d1b      	lsrs	r3, r3, #20
 800e7b2:	051b      	lsls	r3, r3, #20
 800e7b4:	b183      	cbz	r3, 800e7d8 <_dtoa_r+0x920>
 800e7b6:	f04f 0801 	mov.w	r8, #1
 800e7ba:	9b06      	ldr	r3, [sp, #24]
 800e7bc:	3301      	adds	r3, #1
 800e7be:	9306      	str	r3, [sp, #24]
 800e7c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7c2:	3301      	adds	r3, #1
 800e7c4:	9309      	str	r3, [sp, #36]	; 0x24
 800e7c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	f47f af6a 	bne.w	800e6a2 <_dtoa_r+0x7ea>
 800e7ce:	2001      	movs	r0, #1
 800e7d0:	e76f      	b.n	800e6b2 <_dtoa_r+0x7fa>
 800e7d2:	f04f 0800 	mov.w	r8, #0
 800e7d6:	e7f6      	b.n	800e7c6 <_dtoa_r+0x90e>
 800e7d8:	4698      	mov	r8, r3
 800e7da:	e7f4      	b.n	800e7c6 <_dtoa_r+0x90e>
 800e7dc:	f43f af7d 	beq.w	800e6da <_dtoa_r+0x822>
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	301c      	adds	r0, #28
 800e7e4:	e772      	b.n	800e6cc <_dtoa_r+0x814>
 800e7e6:	9b02      	ldr	r3, [sp, #8]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	dc36      	bgt.n	800e85a <_dtoa_r+0x9a2>
 800e7ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e7ee:	2b02      	cmp	r3, #2
 800e7f0:	dd33      	ble.n	800e85a <_dtoa_r+0x9a2>
 800e7f2:	f8dd b008 	ldr.w	fp, [sp, #8]
 800e7f6:	f1bb 0f00 	cmp.w	fp, #0
 800e7fa:	d10d      	bne.n	800e818 <_dtoa_r+0x960>
 800e7fc:	4621      	mov	r1, r4
 800e7fe:	465b      	mov	r3, fp
 800e800:	2205      	movs	r2, #5
 800e802:	4628      	mov	r0, r5
 800e804:	f000 fe58 	bl	800f4b8 <__multadd>
 800e808:	4601      	mov	r1, r0
 800e80a:	4604      	mov	r4, r0
 800e80c:	4650      	mov	r0, sl
 800e80e:	f001 f8b5 	bl	800f97c <__mcmp>
 800e812:	2800      	cmp	r0, #0
 800e814:	f73f adb6 	bgt.w	800e384 <_dtoa_r+0x4cc>
 800e818:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e81a:	9f08      	ldr	r7, [sp, #32]
 800e81c:	ea6f 0903 	mvn.w	r9, r3
 800e820:	f04f 0800 	mov.w	r8, #0
 800e824:	4621      	mov	r1, r4
 800e826:	4628      	mov	r0, r5
 800e828:	f000 fe24 	bl	800f474 <_Bfree>
 800e82c:	2e00      	cmp	r6, #0
 800e82e:	f43f aea4 	beq.w	800e57a <_dtoa_r+0x6c2>
 800e832:	f1b8 0f00 	cmp.w	r8, #0
 800e836:	d005      	beq.n	800e844 <_dtoa_r+0x98c>
 800e838:	45b0      	cmp	r8, r6
 800e83a:	d003      	beq.n	800e844 <_dtoa_r+0x98c>
 800e83c:	4641      	mov	r1, r8
 800e83e:	4628      	mov	r0, r5
 800e840:	f000 fe18 	bl	800f474 <_Bfree>
 800e844:	4631      	mov	r1, r6
 800e846:	4628      	mov	r0, r5
 800e848:	f000 fe14 	bl	800f474 <_Bfree>
 800e84c:	e695      	b.n	800e57a <_dtoa_r+0x6c2>
 800e84e:	2400      	movs	r4, #0
 800e850:	4626      	mov	r6, r4
 800e852:	e7e1      	b.n	800e818 <_dtoa_r+0x960>
 800e854:	46c1      	mov	r9, r8
 800e856:	4626      	mov	r6, r4
 800e858:	e594      	b.n	800e384 <_dtoa_r+0x4cc>
 800e85a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e85c:	f8dd b008 	ldr.w	fp, [sp, #8]
 800e860:	2b00      	cmp	r3, #0
 800e862:	f000 80fc 	beq.w	800ea5e <_dtoa_r+0xba6>
 800e866:	2f00      	cmp	r7, #0
 800e868:	dd05      	ble.n	800e876 <_dtoa_r+0x9be>
 800e86a:	4631      	mov	r1, r6
 800e86c:	463a      	mov	r2, r7
 800e86e:	4628      	mov	r0, r5
 800e870:	f001 f818 	bl	800f8a4 <__lshift>
 800e874:	4606      	mov	r6, r0
 800e876:	f1b8 0f00 	cmp.w	r8, #0
 800e87a:	d05c      	beq.n	800e936 <_dtoa_r+0xa7e>
 800e87c:	4628      	mov	r0, r5
 800e87e:	6871      	ldr	r1, [r6, #4]
 800e880:	f000 fdb8 	bl	800f3f4 <_Balloc>
 800e884:	4607      	mov	r7, r0
 800e886:	b928      	cbnz	r0, 800e894 <_dtoa_r+0x9dc>
 800e888:	4602      	mov	r2, r0
 800e88a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e88e:	4b7e      	ldr	r3, [pc, #504]	; (800ea88 <_dtoa_r+0xbd0>)
 800e890:	f7ff bb26 	b.w	800dee0 <_dtoa_r+0x28>
 800e894:	6932      	ldr	r2, [r6, #16]
 800e896:	f106 010c 	add.w	r1, r6, #12
 800e89a:	3202      	adds	r2, #2
 800e89c:	0092      	lsls	r2, r2, #2
 800e89e:	300c      	adds	r0, #12
 800e8a0:	f000 fd8e 	bl	800f3c0 <memcpy>
 800e8a4:	2201      	movs	r2, #1
 800e8a6:	4639      	mov	r1, r7
 800e8a8:	4628      	mov	r0, r5
 800e8aa:	f000 fffb 	bl	800f8a4 <__lshift>
 800e8ae:	46b0      	mov	r8, r6
 800e8b0:	4606      	mov	r6, r0
 800e8b2:	9b08      	ldr	r3, [sp, #32]
 800e8b4:	3301      	adds	r3, #1
 800e8b6:	9302      	str	r3, [sp, #8]
 800e8b8:	9b08      	ldr	r3, [sp, #32]
 800e8ba:	445b      	add	r3, fp
 800e8bc:	930a      	str	r3, [sp, #40]	; 0x28
 800e8be:	9b04      	ldr	r3, [sp, #16]
 800e8c0:	f003 0301 	and.w	r3, r3, #1
 800e8c4:	9309      	str	r3, [sp, #36]	; 0x24
 800e8c6:	9b02      	ldr	r3, [sp, #8]
 800e8c8:	4621      	mov	r1, r4
 800e8ca:	4650      	mov	r0, sl
 800e8cc:	f103 3bff 	add.w	fp, r3, #4294967295
 800e8d0:	f7ff fa62 	bl	800dd98 <quorem>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	4641      	mov	r1, r8
 800e8d8:	3330      	adds	r3, #48	; 0x30
 800e8da:	9004      	str	r0, [sp, #16]
 800e8dc:	4650      	mov	r0, sl
 800e8de:	930b      	str	r3, [sp, #44]	; 0x2c
 800e8e0:	f001 f84c 	bl	800f97c <__mcmp>
 800e8e4:	4632      	mov	r2, r6
 800e8e6:	9006      	str	r0, [sp, #24]
 800e8e8:	4621      	mov	r1, r4
 800e8ea:	4628      	mov	r0, r5
 800e8ec:	f001 f862 	bl	800f9b4 <__mdiff>
 800e8f0:	68c2      	ldr	r2, [r0, #12]
 800e8f2:	4607      	mov	r7, r0
 800e8f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e8f6:	bb02      	cbnz	r2, 800e93a <_dtoa_r+0xa82>
 800e8f8:	4601      	mov	r1, r0
 800e8fa:	4650      	mov	r0, sl
 800e8fc:	f001 f83e 	bl	800f97c <__mcmp>
 800e900:	4602      	mov	r2, r0
 800e902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e904:	4639      	mov	r1, r7
 800e906:	4628      	mov	r0, r5
 800e908:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800e90c:	f000 fdb2 	bl	800f474 <_Bfree>
 800e910:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e912:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e914:	9f02      	ldr	r7, [sp, #8]
 800e916:	ea43 0102 	orr.w	r1, r3, r2
 800e91a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e91c:	430b      	orrs	r3, r1
 800e91e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e920:	d10d      	bne.n	800e93e <_dtoa_r+0xa86>
 800e922:	2b39      	cmp	r3, #57	; 0x39
 800e924:	d027      	beq.n	800e976 <_dtoa_r+0xabe>
 800e926:	9a06      	ldr	r2, [sp, #24]
 800e928:	2a00      	cmp	r2, #0
 800e92a:	dd01      	ble.n	800e930 <_dtoa_r+0xa78>
 800e92c:	9b04      	ldr	r3, [sp, #16]
 800e92e:	3331      	adds	r3, #49	; 0x31
 800e930:	f88b 3000 	strb.w	r3, [fp]
 800e934:	e776      	b.n	800e824 <_dtoa_r+0x96c>
 800e936:	4630      	mov	r0, r6
 800e938:	e7b9      	b.n	800e8ae <_dtoa_r+0x9f6>
 800e93a:	2201      	movs	r2, #1
 800e93c:	e7e2      	b.n	800e904 <_dtoa_r+0xa4c>
 800e93e:	9906      	ldr	r1, [sp, #24]
 800e940:	2900      	cmp	r1, #0
 800e942:	db04      	blt.n	800e94e <_dtoa_r+0xa96>
 800e944:	9822      	ldr	r0, [sp, #136]	; 0x88
 800e946:	4301      	orrs	r1, r0
 800e948:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e94a:	4301      	orrs	r1, r0
 800e94c:	d120      	bne.n	800e990 <_dtoa_r+0xad8>
 800e94e:	2a00      	cmp	r2, #0
 800e950:	ddee      	ble.n	800e930 <_dtoa_r+0xa78>
 800e952:	4651      	mov	r1, sl
 800e954:	2201      	movs	r2, #1
 800e956:	4628      	mov	r0, r5
 800e958:	9302      	str	r3, [sp, #8]
 800e95a:	f000 ffa3 	bl	800f8a4 <__lshift>
 800e95e:	4621      	mov	r1, r4
 800e960:	4682      	mov	sl, r0
 800e962:	f001 f80b 	bl	800f97c <__mcmp>
 800e966:	2800      	cmp	r0, #0
 800e968:	9b02      	ldr	r3, [sp, #8]
 800e96a:	dc02      	bgt.n	800e972 <_dtoa_r+0xaba>
 800e96c:	d1e0      	bne.n	800e930 <_dtoa_r+0xa78>
 800e96e:	07da      	lsls	r2, r3, #31
 800e970:	d5de      	bpl.n	800e930 <_dtoa_r+0xa78>
 800e972:	2b39      	cmp	r3, #57	; 0x39
 800e974:	d1da      	bne.n	800e92c <_dtoa_r+0xa74>
 800e976:	2339      	movs	r3, #57	; 0x39
 800e978:	f88b 3000 	strb.w	r3, [fp]
 800e97c:	463b      	mov	r3, r7
 800e97e:	461f      	mov	r7, r3
 800e980:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800e984:	3b01      	subs	r3, #1
 800e986:	2a39      	cmp	r2, #57	; 0x39
 800e988:	d050      	beq.n	800ea2c <_dtoa_r+0xb74>
 800e98a:	3201      	adds	r2, #1
 800e98c:	701a      	strb	r2, [r3, #0]
 800e98e:	e749      	b.n	800e824 <_dtoa_r+0x96c>
 800e990:	2a00      	cmp	r2, #0
 800e992:	dd03      	ble.n	800e99c <_dtoa_r+0xae4>
 800e994:	2b39      	cmp	r3, #57	; 0x39
 800e996:	d0ee      	beq.n	800e976 <_dtoa_r+0xabe>
 800e998:	3301      	adds	r3, #1
 800e99a:	e7c9      	b.n	800e930 <_dtoa_r+0xa78>
 800e99c:	9a02      	ldr	r2, [sp, #8]
 800e99e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e9a0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e9a4:	428a      	cmp	r2, r1
 800e9a6:	d02a      	beq.n	800e9fe <_dtoa_r+0xb46>
 800e9a8:	4651      	mov	r1, sl
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	220a      	movs	r2, #10
 800e9ae:	4628      	mov	r0, r5
 800e9b0:	f000 fd82 	bl	800f4b8 <__multadd>
 800e9b4:	45b0      	cmp	r8, r6
 800e9b6:	4682      	mov	sl, r0
 800e9b8:	f04f 0300 	mov.w	r3, #0
 800e9bc:	f04f 020a 	mov.w	r2, #10
 800e9c0:	4641      	mov	r1, r8
 800e9c2:	4628      	mov	r0, r5
 800e9c4:	d107      	bne.n	800e9d6 <_dtoa_r+0xb1e>
 800e9c6:	f000 fd77 	bl	800f4b8 <__multadd>
 800e9ca:	4680      	mov	r8, r0
 800e9cc:	4606      	mov	r6, r0
 800e9ce:	9b02      	ldr	r3, [sp, #8]
 800e9d0:	3301      	adds	r3, #1
 800e9d2:	9302      	str	r3, [sp, #8]
 800e9d4:	e777      	b.n	800e8c6 <_dtoa_r+0xa0e>
 800e9d6:	f000 fd6f 	bl	800f4b8 <__multadd>
 800e9da:	4631      	mov	r1, r6
 800e9dc:	4680      	mov	r8, r0
 800e9de:	2300      	movs	r3, #0
 800e9e0:	220a      	movs	r2, #10
 800e9e2:	4628      	mov	r0, r5
 800e9e4:	f000 fd68 	bl	800f4b8 <__multadd>
 800e9e8:	4606      	mov	r6, r0
 800e9ea:	e7f0      	b.n	800e9ce <_dtoa_r+0xb16>
 800e9ec:	f1bb 0f00 	cmp.w	fp, #0
 800e9f0:	bfcc      	ite	gt
 800e9f2:	465f      	movgt	r7, fp
 800e9f4:	2701      	movle	r7, #1
 800e9f6:	f04f 0800 	mov.w	r8, #0
 800e9fa:	9a08      	ldr	r2, [sp, #32]
 800e9fc:	4417      	add	r7, r2
 800e9fe:	4651      	mov	r1, sl
 800ea00:	2201      	movs	r2, #1
 800ea02:	4628      	mov	r0, r5
 800ea04:	9302      	str	r3, [sp, #8]
 800ea06:	f000 ff4d 	bl	800f8a4 <__lshift>
 800ea0a:	4621      	mov	r1, r4
 800ea0c:	4682      	mov	sl, r0
 800ea0e:	f000 ffb5 	bl	800f97c <__mcmp>
 800ea12:	2800      	cmp	r0, #0
 800ea14:	dcb2      	bgt.n	800e97c <_dtoa_r+0xac4>
 800ea16:	d102      	bne.n	800ea1e <_dtoa_r+0xb66>
 800ea18:	9b02      	ldr	r3, [sp, #8]
 800ea1a:	07db      	lsls	r3, r3, #31
 800ea1c:	d4ae      	bmi.n	800e97c <_dtoa_r+0xac4>
 800ea1e:	463b      	mov	r3, r7
 800ea20:	461f      	mov	r7, r3
 800ea22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ea26:	2a30      	cmp	r2, #48	; 0x30
 800ea28:	d0fa      	beq.n	800ea20 <_dtoa_r+0xb68>
 800ea2a:	e6fb      	b.n	800e824 <_dtoa_r+0x96c>
 800ea2c:	9a08      	ldr	r2, [sp, #32]
 800ea2e:	429a      	cmp	r2, r3
 800ea30:	d1a5      	bne.n	800e97e <_dtoa_r+0xac6>
 800ea32:	2331      	movs	r3, #49	; 0x31
 800ea34:	f109 0901 	add.w	r9, r9, #1
 800ea38:	7013      	strb	r3, [r2, #0]
 800ea3a:	e6f3      	b.n	800e824 <_dtoa_r+0x96c>
 800ea3c:	4b13      	ldr	r3, [pc, #76]	; (800ea8c <_dtoa_r+0xbd4>)
 800ea3e:	f7ff baa7 	b.w	800df90 <_dtoa_r+0xd8>
 800ea42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	f47f aa80 	bne.w	800df4a <_dtoa_r+0x92>
 800ea4a:	4b11      	ldr	r3, [pc, #68]	; (800ea90 <_dtoa_r+0xbd8>)
 800ea4c:	f7ff baa0 	b.w	800df90 <_dtoa_r+0xd8>
 800ea50:	f1bb 0f00 	cmp.w	fp, #0
 800ea54:	dc03      	bgt.n	800ea5e <_dtoa_r+0xba6>
 800ea56:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ea58:	2b02      	cmp	r3, #2
 800ea5a:	f73f aecc 	bgt.w	800e7f6 <_dtoa_r+0x93e>
 800ea5e:	9f08      	ldr	r7, [sp, #32]
 800ea60:	4621      	mov	r1, r4
 800ea62:	4650      	mov	r0, sl
 800ea64:	f7ff f998 	bl	800dd98 <quorem>
 800ea68:	9a08      	ldr	r2, [sp, #32]
 800ea6a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ea6e:	f807 3b01 	strb.w	r3, [r7], #1
 800ea72:	1aba      	subs	r2, r7, r2
 800ea74:	4593      	cmp	fp, r2
 800ea76:	ddb9      	ble.n	800e9ec <_dtoa_r+0xb34>
 800ea78:	4651      	mov	r1, sl
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	220a      	movs	r2, #10
 800ea7e:	4628      	mov	r0, r5
 800ea80:	f000 fd1a 	bl	800f4b8 <__multadd>
 800ea84:	4682      	mov	sl, r0
 800ea86:	e7eb      	b.n	800ea60 <_dtoa_r+0xba8>
 800ea88:	08012674 	.word	0x08012674
 800ea8c:	080128d9 	.word	0x080128d9
 800ea90:	080125f1 	.word	0x080125f1

0800ea94 <std>:
 800ea94:	2300      	movs	r3, #0
 800ea96:	b510      	push	{r4, lr}
 800ea98:	4604      	mov	r4, r0
 800ea9a:	e9c0 3300 	strd	r3, r3, [r0]
 800ea9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eaa2:	6083      	str	r3, [r0, #8]
 800eaa4:	8181      	strh	r1, [r0, #12]
 800eaa6:	6643      	str	r3, [r0, #100]	; 0x64
 800eaa8:	81c2      	strh	r2, [r0, #14]
 800eaaa:	6183      	str	r3, [r0, #24]
 800eaac:	4619      	mov	r1, r3
 800eaae:	2208      	movs	r2, #8
 800eab0:	305c      	adds	r0, #92	; 0x5c
 800eab2:	f7fd fa2d 	bl	800bf10 <memset>
 800eab6:	4b05      	ldr	r3, [pc, #20]	; (800eacc <std+0x38>)
 800eab8:	6224      	str	r4, [r4, #32]
 800eaba:	6263      	str	r3, [r4, #36]	; 0x24
 800eabc:	4b04      	ldr	r3, [pc, #16]	; (800ead0 <std+0x3c>)
 800eabe:	62a3      	str	r3, [r4, #40]	; 0x28
 800eac0:	4b04      	ldr	r3, [pc, #16]	; (800ead4 <std+0x40>)
 800eac2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eac4:	4b04      	ldr	r3, [pc, #16]	; (800ead8 <std+0x44>)
 800eac6:	6323      	str	r3, [r4, #48]	; 0x30
 800eac8:	bd10      	pop	{r4, pc}
 800eaca:	bf00      	nop
 800eacc:	0800cea5 	.word	0x0800cea5
 800ead0:	0800cecb 	.word	0x0800cecb
 800ead4:	0800cf03 	.word	0x0800cf03
 800ead8:	0800cf27 	.word	0x0800cf27

0800eadc <_cleanup_r>:
 800eadc:	4901      	ldr	r1, [pc, #4]	; (800eae4 <_cleanup_r+0x8>)
 800eade:	f000 b8af 	b.w	800ec40 <_fwalk_reent>
 800eae2:	bf00      	nop
 800eae4:	08010e3d 	.word	0x08010e3d

0800eae8 <__sfmoreglue>:
 800eae8:	b570      	push	{r4, r5, r6, lr}
 800eaea:	2568      	movs	r5, #104	; 0x68
 800eaec:	1e4a      	subs	r2, r1, #1
 800eaee:	4355      	muls	r5, r2
 800eaf0:	460e      	mov	r6, r1
 800eaf2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800eaf6:	f7fd fa5f 	bl	800bfb8 <_malloc_r>
 800eafa:	4604      	mov	r4, r0
 800eafc:	b140      	cbz	r0, 800eb10 <__sfmoreglue+0x28>
 800eafe:	2100      	movs	r1, #0
 800eb00:	e9c0 1600 	strd	r1, r6, [r0]
 800eb04:	300c      	adds	r0, #12
 800eb06:	60a0      	str	r0, [r4, #8]
 800eb08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eb0c:	f7fd fa00 	bl	800bf10 <memset>
 800eb10:	4620      	mov	r0, r4
 800eb12:	bd70      	pop	{r4, r5, r6, pc}

0800eb14 <__sfp_lock_acquire>:
 800eb14:	4801      	ldr	r0, [pc, #4]	; (800eb1c <__sfp_lock_acquire+0x8>)
 800eb16:	f000 bc1e 	b.w	800f356 <__retarget_lock_acquire_recursive>
 800eb1a:	bf00      	nop
 800eb1c:	20000c49 	.word	0x20000c49

0800eb20 <__sfp_lock_release>:
 800eb20:	4801      	ldr	r0, [pc, #4]	; (800eb28 <__sfp_lock_release+0x8>)
 800eb22:	f000 bc19 	b.w	800f358 <__retarget_lock_release_recursive>
 800eb26:	bf00      	nop
 800eb28:	20000c49 	.word	0x20000c49

0800eb2c <__sinit_lock_acquire>:
 800eb2c:	4801      	ldr	r0, [pc, #4]	; (800eb34 <__sinit_lock_acquire+0x8>)
 800eb2e:	f000 bc12 	b.w	800f356 <__retarget_lock_acquire_recursive>
 800eb32:	bf00      	nop
 800eb34:	20000c44 	.word	0x20000c44

0800eb38 <__sinit_lock_release>:
 800eb38:	4801      	ldr	r0, [pc, #4]	; (800eb40 <__sinit_lock_release+0x8>)
 800eb3a:	f000 bc0d 	b.w	800f358 <__retarget_lock_release_recursive>
 800eb3e:	bf00      	nop
 800eb40:	20000c44 	.word	0x20000c44

0800eb44 <__sinit>:
 800eb44:	b510      	push	{r4, lr}
 800eb46:	4604      	mov	r4, r0
 800eb48:	f7ff fff0 	bl	800eb2c <__sinit_lock_acquire>
 800eb4c:	69a3      	ldr	r3, [r4, #24]
 800eb4e:	b11b      	cbz	r3, 800eb58 <__sinit+0x14>
 800eb50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb54:	f7ff bff0 	b.w	800eb38 <__sinit_lock_release>
 800eb58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800eb5c:	6523      	str	r3, [r4, #80]	; 0x50
 800eb5e:	4b13      	ldr	r3, [pc, #76]	; (800ebac <__sinit+0x68>)
 800eb60:	4a13      	ldr	r2, [pc, #76]	; (800ebb0 <__sinit+0x6c>)
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	62a2      	str	r2, [r4, #40]	; 0x28
 800eb66:	42a3      	cmp	r3, r4
 800eb68:	bf08      	it	eq
 800eb6a:	2301      	moveq	r3, #1
 800eb6c:	4620      	mov	r0, r4
 800eb6e:	bf08      	it	eq
 800eb70:	61a3      	streq	r3, [r4, #24]
 800eb72:	f000 f81f 	bl	800ebb4 <__sfp>
 800eb76:	6060      	str	r0, [r4, #4]
 800eb78:	4620      	mov	r0, r4
 800eb7a:	f000 f81b 	bl	800ebb4 <__sfp>
 800eb7e:	60a0      	str	r0, [r4, #8]
 800eb80:	4620      	mov	r0, r4
 800eb82:	f000 f817 	bl	800ebb4 <__sfp>
 800eb86:	2200      	movs	r2, #0
 800eb88:	2104      	movs	r1, #4
 800eb8a:	60e0      	str	r0, [r4, #12]
 800eb8c:	6860      	ldr	r0, [r4, #4]
 800eb8e:	f7ff ff81 	bl	800ea94 <std>
 800eb92:	2201      	movs	r2, #1
 800eb94:	2109      	movs	r1, #9
 800eb96:	68a0      	ldr	r0, [r4, #8]
 800eb98:	f7ff ff7c 	bl	800ea94 <std>
 800eb9c:	2202      	movs	r2, #2
 800eb9e:	2112      	movs	r1, #18
 800eba0:	68e0      	ldr	r0, [r4, #12]
 800eba2:	f7ff ff77 	bl	800ea94 <std>
 800eba6:	2301      	movs	r3, #1
 800eba8:	61a3      	str	r3, [r4, #24]
 800ebaa:	e7d1      	b.n	800eb50 <__sinit+0xc>
 800ebac:	08012464 	.word	0x08012464
 800ebb0:	0800eadd 	.word	0x0800eadd

0800ebb4 <__sfp>:
 800ebb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebb6:	4607      	mov	r7, r0
 800ebb8:	f7ff ffac 	bl	800eb14 <__sfp_lock_acquire>
 800ebbc:	4b1e      	ldr	r3, [pc, #120]	; (800ec38 <__sfp+0x84>)
 800ebbe:	681e      	ldr	r6, [r3, #0]
 800ebc0:	69b3      	ldr	r3, [r6, #24]
 800ebc2:	b913      	cbnz	r3, 800ebca <__sfp+0x16>
 800ebc4:	4630      	mov	r0, r6
 800ebc6:	f7ff ffbd 	bl	800eb44 <__sinit>
 800ebca:	3648      	adds	r6, #72	; 0x48
 800ebcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ebd0:	3b01      	subs	r3, #1
 800ebd2:	d503      	bpl.n	800ebdc <__sfp+0x28>
 800ebd4:	6833      	ldr	r3, [r6, #0]
 800ebd6:	b30b      	cbz	r3, 800ec1c <__sfp+0x68>
 800ebd8:	6836      	ldr	r6, [r6, #0]
 800ebda:	e7f7      	b.n	800ebcc <__sfp+0x18>
 800ebdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ebe0:	b9d5      	cbnz	r5, 800ec18 <__sfp+0x64>
 800ebe2:	4b16      	ldr	r3, [pc, #88]	; (800ec3c <__sfp+0x88>)
 800ebe4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ebe8:	60e3      	str	r3, [r4, #12]
 800ebea:	6665      	str	r5, [r4, #100]	; 0x64
 800ebec:	f000 fbb2 	bl	800f354 <__retarget_lock_init_recursive>
 800ebf0:	f7ff ff96 	bl	800eb20 <__sfp_lock_release>
 800ebf4:	2208      	movs	r2, #8
 800ebf6:	4629      	mov	r1, r5
 800ebf8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ebfc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ec00:	6025      	str	r5, [r4, #0]
 800ec02:	61a5      	str	r5, [r4, #24]
 800ec04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ec08:	f7fd f982 	bl	800bf10 <memset>
 800ec0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ec10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ec14:	4620      	mov	r0, r4
 800ec16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec18:	3468      	adds	r4, #104	; 0x68
 800ec1a:	e7d9      	b.n	800ebd0 <__sfp+0x1c>
 800ec1c:	2104      	movs	r1, #4
 800ec1e:	4638      	mov	r0, r7
 800ec20:	f7ff ff62 	bl	800eae8 <__sfmoreglue>
 800ec24:	4604      	mov	r4, r0
 800ec26:	6030      	str	r0, [r6, #0]
 800ec28:	2800      	cmp	r0, #0
 800ec2a:	d1d5      	bne.n	800ebd8 <__sfp+0x24>
 800ec2c:	f7ff ff78 	bl	800eb20 <__sfp_lock_release>
 800ec30:	230c      	movs	r3, #12
 800ec32:	603b      	str	r3, [r7, #0]
 800ec34:	e7ee      	b.n	800ec14 <__sfp+0x60>
 800ec36:	bf00      	nop
 800ec38:	08012464 	.word	0x08012464
 800ec3c:	ffff0001 	.word	0xffff0001

0800ec40 <_fwalk_reent>:
 800ec40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec44:	4606      	mov	r6, r0
 800ec46:	4688      	mov	r8, r1
 800ec48:	2700      	movs	r7, #0
 800ec4a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ec4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ec52:	f1b9 0901 	subs.w	r9, r9, #1
 800ec56:	d505      	bpl.n	800ec64 <_fwalk_reent+0x24>
 800ec58:	6824      	ldr	r4, [r4, #0]
 800ec5a:	2c00      	cmp	r4, #0
 800ec5c:	d1f7      	bne.n	800ec4e <_fwalk_reent+0xe>
 800ec5e:	4638      	mov	r0, r7
 800ec60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec64:	89ab      	ldrh	r3, [r5, #12]
 800ec66:	2b01      	cmp	r3, #1
 800ec68:	d907      	bls.n	800ec7a <_fwalk_reent+0x3a>
 800ec6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ec6e:	3301      	adds	r3, #1
 800ec70:	d003      	beq.n	800ec7a <_fwalk_reent+0x3a>
 800ec72:	4629      	mov	r1, r5
 800ec74:	4630      	mov	r0, r6
 800ec76:	47c0      	blx	r8
 800ec78:	4307      	orrs	r7, r0
 800ec7a:	3568      	adds	r5, #104	; 0x68
 800ec7c:	e7e9      	b.n	800ec52 <_fwalk_reent+0x12>

0800ec7e <rshift>:
 800ec7e:	6903      	ldr	r3, [r0, #16]
 800ec80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec84:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ec88:	f100 0414 	add.w	r4, r0, #20
 800ec8c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ec90:	dd46      	ble.n	800ed20 <rshift+0xa2>
 800ec92:	f011 011f 	ands.w	r1, r1, #31
 800ec96:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ec9a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ec9e:	d10c      	bne.n	800ecba <rshift+0x3c>
 800eca0:	4629      	mov	r1, r5
 800eca2:	f100 0710 	add.w	r7, r0, #16
 800eca6:	42b1      	cmp	r1, r6
 800eca8:	d335      	bcc.n	800ed16 <rshift+0x98>
 800ecaa:	1a9b      	subs	r3, r3, r2
 800ecac:	009b      	lsls	r3, r3, #2
 800ecae:	1eea      	subs	r2, r5, #3
 800ecb0:	4296      	cmp	r6, r2
 800ecb2:	bf38      	it	cc
 800ecb4:	2300      	movcc	r3, #0
 800ecb6:	4423      	add	r3, r4
 800ecb8:	e015      	b.n	800ece6 <rshift+0x68>
 800ecba:	46a1      	mov	r9, r4
 800ecbc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ecc0:	f1c1 0820 	rsb	r8, r1, #32
 800ecc4:	40cf      	lsrs	r7, r1
 800ecc6:	f105 0e04 	add.w	lr, r5, #4
 800ecca:	4576      	cmp	r6, lr
 800eccc:	46f4      	mov	ip, lr
 800ecce:	d816      	bhi.n	800ecfe <rshift+0x80>
 800ecd0:	1a9b      	subs	r3, r3, r2
 800ecd2:	009a      	lsls	r2, r3, #2
 800ecd4:	3a04      	subs	r2, #4
 800ecd6:	3501      	adds	r5, #1
 800ecd8:	42ae      	cmp	r6, r5
 800ecda:	bf38      	it	cc
 800ecdc:	2200      	movcc	r2, #0
 800ecde:	18a3      	adds	r3, r4, r2
 800ece0:	50a7      	str	r7, [r4, r2]
 800ece2:	b107      	cbz	r7, 800ece6 <rshift+0x68>
 800ece4:	3304      	adds	r3, #4
 800ece6:	42a3      	cmp	r3, r4
 800ece8:	eba3 0204 	sub.w	r2, r3, r4
 800ecec:	bf08      	it	eq
 800ecee:	2300      	moveq	r3, #0
 800ecf0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ecf4:	6102      	str	r2, [r0, #16]
 800ecf6:	bf08      	it	eq
 800ecf8:	6143      	streq	r3, [r0, #20]
 800ecfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ecfe:	f8dc c000 	ldr.w	ip, [ip]
 800ed02:	fa0c fc08 	lsl.w	ip, ip, r8
 800ed06:	ea4c 0707 	orr.w	r7, ip, r7
 800ed0a:	f849 7b04 	str.w	r7, [r9], #4
 800ed0e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ed12:	40cf      	lsrs	r7, r1
 800ed14:	e7d9      	b.n	800ecca <rshift+0x4c>
 800ed16:	f851 cb04 	ldr.w	ip, [r1], #4
 800ed1a:	f847 cf04 	str.w	ip, [r7, #4]!
 800ed1e:	e7c2      	b.n	800eca6 <rshift+0x28>
 800ed20:	4623      	mov	r3, r4
 800ed22:	e7e0      	b.n	800ece6 <rshift+0x68>

0800ed24 <__hexdig_fun>:
 800ed24:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ed28:	2b09      	cmp	r3, #9
 800ed2a:	d802      	bhi.n	800ed32 <__hexdig_fun+0xe>
 800ed2c:	3820      	subs	r0, #32
 800ed2e:	b2c0      	uxtb	r0, r0
 800ed30:	4770      	bx	lr
 800ed32:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ed36:	2b05      	cmp	r3, #5
 800ed38:	d801      	bhi.n	800ed3e <__hexdig_fun+0x1a>
 800ed3a:	3847      	subs	r0, #71	; 0x47
 800ed3c:	e7f7      	b.n	800ed2e <__hexdig_fun+0xa>
 800ed3e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ed42:	2b05      	cmp	r3, #5
 800ed44:	d801      	bhi.n	800ed4a <__hexdig_fun+0x26>
 800ed46:	3827      	subs	r0, #39	; 0x27
 800ed48:	e7f1      	b.n	800ed2e <__hexdig_fun+0xa>
 800ed4a:	2000      	movs	r0, #0
 800ed4c:	4770      	bx	lr
	...

0800ed50 <__gethex>:
 800ed50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed54:	b08b      	sub	sp, #44	; 0x2c
 800ed56:	9306      	str	r3, [sp, #24]
 800ed58:	4bb9      	ldr	r3, [pc, #740]	; (800f040 <__gethex+0x2f0>)
 800ed5a:	9002      	str	r0, [sp, #8]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	468b      	mov	fp, r1
 800ed60:	4618      	mov	r0, r3
 800ed62:	4690      	mov	r8, r2
 800ed64:	9303      	str	r3, [sp, #12]
 800ed66:	f7f1 fa5f 	bl	8000228 <strlen>
 800ed6a:	4682      	mov	sl, r0
 800ed6c:	9b03      	ldr	r3, [sp, #12]
 800ed6e:	f8db 2000 	ldr.w	r2, [fp]
 800ed72:	4403      	add	r3, r0
 800ed74:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ed78:	9307      	str	r3, [sp, #28]
 800ed7a:	1c93      	adds	r3, r2, #2
 800ed7c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ed80:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ed84:	32fe      	adds	r2, #254	; 0xfe
 800ed86:	18d1      	adds	r1, r2, r3
 800ed88:	461f      	mov	r7, r3
 800ed8a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ed8e:	9101      	str	r1, [sp, #4]
 800ed90:	2830      	cmp	r0, #48	; 0x30
 800ed92:	d0f8      	beq.n	800ed86 <__gethex+0x36>
 800ed94:	f7ff ffc6 	bl	800ed24 <__hexdig_fun>
 800ed98:	4604      	mov	r4, r0
 800ed9a:	2800      	cmp	r0, #0
 800ed9c:	d13a      	bne.n	800ee14 <__gethex+0xc4>
 800ed9e:	4652      	mov	r2, sl
 800eda0:	4638      	mov	r0, r7
 800eda2:	9903      	ldr	r1, [sp, #12]
 800eda4:	f001 fe10 	bl	80109c8 <strncmp>
 800eda8:	4605      	mov	r5, r0
 800edaa:	2800      	cmp	r0, #0
 800edac:	d166      	bne.n	800ee7c <__gethex+0x12c>
 800edae:	f817 000a 	ldrb.w	r0, [r7, sl]
 800edb2:	eb07 060a 	add.w	r6, r7, sl
 800edb6:	f7ff ffb5 	bl	800ed24 <__hexdig_fun>
 800edba:	2800      	cmp	r0, #0
 800edbc:	d060      	beq.n	800ee80 <__gethex+0x130>
 800edbe:	4633      	mov	r3, r6
 800edc0:	7818      	ldrb	r0, [r3, #0]
 800edc2:	461f      	mov	r7, r3
 800edc4:	2830      	cmp	r0, #48	; 0x30
 800edc6:	f103 0301 	add.w	r3, r3, #1
 800edca:	d0f9      	beq.n	800edc0 <__gethex+0x70>
 800edcc:	f7ff ffaa 	bl	800ed24 <__hexdig_fun>
 800edd0:	2301      	movs	r3, #1
 800edd2:	fab0 f480 	clz	r4, r0
 800edd6:	4635      	mov	r5, r6
 800edd8:	0964      	lsrs	r4, r4, #5
 800edda:	9301      	str	r3, [sp, #4]
 800eddc:	463a      	mov	r2, r7
 800edde:	4616      	mov	r6, r2
 800ede0:	7830      	ldrb	r0, [r6, #0]
 800ede2:	3201      	adds	r2, #1
 800ede4:	f7ff ff9e 	bl	800ed24 <__hexdig_fun>
 800ede8:	2800      	cmp	r0, #0
 800edea:	d1f8      	bne.n	800edde <__gethex+0x8e>
 800edec:	4652      	mov	r2, sl
 800edee:	4630      	mov	r0, r6
 800edf0:	9903      	ldr	r1, [sp, #12]
 800edf2:	f001 fde9 	bl	80109c8 <strncmp>
 800edf6:	b980      	cbnz	r0, 800ee1a <__gethex+0xca>
 800edf8:	b94d      	cbnz	r5, 800ee0e <__gethex+0xbe>
 800edfa:	eb06 050a 	add.w	r5, r6, sl
 800edfe:	462a      	mov	r2, r5
 800ee00:	4616      	mov	r6, r2
 800ee02:	7830      	ldrb	r0, [r6, #0]
 800ee04:	3201      	adds	r2, #1
 800ee06:	f7ff ff8d 	bl	800ed24 <__hexdig_fun>
 800ee0a:	2800      	cmp	r0, #0
 800ee0c:	d1f8      	bne.n	800ee00 <__gethex+0xb0>
 800ee0e:	1bad      	subs	r5, r5, r6
 800ee10:	00ad      	lsls	r5, r5, #2
 800ee12:	e004      	b.n	800ee1e <__gethex+0xce>
 800ee14:	2400      	movs	r4, #0
 800ee16:	4625      	mov	r5, r4
 800ee18:	e7e0      	b.n	800eddc <__gethex+0x8c>
 800ee1a:	2d00      	cmp	r5, #0
 800ee1c:	d1f7      	bne.n	800ee0e <__gethex+0xbe>
 800ee1e:	7833      	ldrb	r3, [r6, #0]
 800ee20:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ee24:	2b50      	cmp	r3, #80	; 0x50
 800ee26:	d139      	bne.n	800ee9c <__gethex+0x14c>
 800ee28:	7873      	ldrb	r3, [r6, #1]
 800ee2a:	2b2b      	cmp	r3, #43	; 0x2b
 800ee2c:	d02a      	beq.n	800ee84 <__gethex+0x134>
 800ee2e:	2b2d      	cmp	r3, #45	; 0x2d
 800ee30:	d02c      	beq.n	800ee8c <__gethex+0x13c>
 800ee32:	f04f 0900 	mov.w	r9, #0
 800ee36:	1c71      	adds	r1, r6, #1
 800ee38:	7808      	ldrb	r0, [r1, #0]
 800ee3a:	f7ff ff73 	bl	800ed24 <__hexdig_fun>
 800ee3e:	1e43      	subs	r3, r0, #1
 800ee40:	b2db      	uxtb	r3, r3
 800ee42:	2b18      	cmp	r3, #24
 800ee44:	d82a      	bhi.n	800ee9c <__gethex+0x14c>
 800ee46:	f1a0 0210 	sub.w	r2, r0, #16
 800ee4a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ee4e:	f7ff ff69 	bl	800ed24 <__hexdig_fun>
 800ee52:	1e43      	subs	r3, r0, #1
 800ee54:	b2db      	uxtb	r3, r3
 800ee56:	2b18      	cmp	r3, #24
 800ee58:	d91b      	bls.n	800ee92 <__gethex+0x142>
 800ee5a:	f1b9 0f00 	cmp.w	r9, #0
 800ee5e:	d000      	beq.n	800ee62 <__gethex+0x112>
 800ee60:	4252      	negs	r2, r2
 800ee62:	4415      	add	r5, r2
 800ee64:	f8cb 1000 	str.w	r1, [fp]
 800ee68:	b1d4      	cbz	r4, 800eea0 <__gethex+0x150>
 800ee6a:	9b01      	ldr	r3, [sp, #4]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	bf14      	ite	ne
 800ee70:	2700      	movne	r7, #0
 800ee72:	2706      	moveq	r7, #6
 800ee74:	4638      	mov	r0, r7
 800ee76:	b00b      	add	sp, #44	; 0x2c
 800ee78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee7c:	463e      	mov	r6, r7
 800ee7e:	4625      	mov	r5, r4
 800ee80:	2401      	movs	r4, #1
 800ee82:	e7cc      	b.n	800ee1e <__gethex+0xce>
 800ee84:	f04f 0900 	mov.w	r9, #0
 800ee88:	1cb1      	adds	r1, r6, #2
 800ee8a:	e7d5      	b.n	800ee38 <__gethex+0xe8>
 800ee8c:	f04f 0901 	mov.w	r9, #1
 800ee90:	e7fa      	b.n	800ee88 <__gethex+0x138>
 800ee92:	230a      	movs	r3, #10
 800ee94:	fb03 0202 	mla	r2, r3, r2, r0
 800ee98:	3a10      	subs	r2, #16
 800ee9a:	e7d6      	b.n	800ee4a <__gethex+0xfa>
 800ee9c:	4631      	mov	r1, r6
 800ee9e:	e7e1      	b.n	800ee64 <__gethex+0x114>
 800eea0:	4621      	mov	r1, r4
 800eea2:	1bf3      	subs	r3, r6, r7
 800eea4:	3b01      	subs	r3, #1
 800eea6:	2b07      	cmp	r3, #7
 800eea8:	dc0a      	bgt.n	800eec0 <__gethex+0x170>
 800eeaa:	9802      	ldr	r0, [sp, #8]
 800eeac:	f000 faa2 	bl	800f3f4 <_Balloc>
 800eeb0:	4604      	mov	r4, r0
 800eeb2:	b940      	cbnz	r0, 800eec6 <__gethex+0x176>
 800eeb4:	4602      	mov	r2, r0
 800eeb6:	21de      	movs	r1, #222	; 0xde
 800eeb8:	4b62      	ldr	r3, [pc, #392]	; (800f044 <__gethex+0x2f4>)
 800eeba:	4863      	ldr	r0, [pc, #396]	; (800f048 <__gethex+0x2f8>)
 800eebc:	f001 ff1a 	bl	8010cf4 <__assert_func>
 800eec0:	3101      	adds	r1, #1
 800eec2:	105b      	asrs	r3, r3, #1
 800eec4:	e7ef      	b.n	800eea6 <__gethex+0x156>
 800eec6:	f04f 0b00 	mov.w	fp, #0
 800eeca:	f100 0914 	add.w	r9, r0, #20
 800eece:	f1ca 0301 	rsb	r3, sl, #1
 800eed2:	f8cd 9010 	str.w	r9, [sp, #16]
 800eed6:	f8cd b004 	str.w	fp, [sp, #4]
 800eeda:	9308      	str	r3, [sp, #32]
 800eedc:	42b7      	cmp	r7, r6
 800eede:	d33f      	bcc.n	800ef60 <__gethex+0x210>
 800eee0:	9f04      	ldr	r7, [sp, #16]
 800eee2:	9b01      	ldr	r3, [sp, #4]
 800eee4:	f847 3b04 	str.w	r3, [r7], #4
 800eee8:	eba7 0709 	sub.w	r7, r7, r9
 800eeec:	10bf      	asrs	r7, r7, #2
 800eeee:	6127      	str	r7, [r4, #16]
 800eef0:	4618      	mov	r0, r3
 800eef2:	f000 fb75 	bl	800f5e0 <__hi0bits>
 800eef6:	017f      	lsls	r7, r7, #5
 800eef8:	f8d8 6000 	ldr.w	r6, [r8]
 800eefc:	1a3f      	subs	r7, r7, r0
 800eefe:	42b7      	cmp	r7, r6
 800ef00:	dd62      	ble.n	800efc8 <__gethex+0x278>
 800ef02:	1bbf      	subs	r7, r7, r6
 800ef04:	4639      	mov	r1, r7
 800ef06:	4620      	mov	r0, r4
 800ef08:	f000 ff0b 	bl	800fd22 <__any_on>
 800ef0c:	4682      	mov	sl, r0
 800ef0e:	b1a8      	cbz	r0, 800ef3c <__gethex+0x1ec>
 800ef10:	f04f 0a01 	mov.w	sl, #1
 800ef14:	1e7b      	subs	r3, r7, #1
 800ef16:	1159      	asrs	r1, r3, #5
 800ef18:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ef1c:	f003 021f 	and.w	r2, r3, #31
 800ef20:	fa0a f202 	lsl.w	r2, sl, r2
 800ef24:	420a      	tst	r2, r1
 800ef26:	d009      	beq.n	800ef3c <__gethex+0x1ec>
 800ef28:	4553      	cmp	r3, sl
 800ef2a:	dd05      	ble.n	800ef38 <__gethex+0x1e8>
 800ef2c:	4620      	mov	r0, r4
 800ef2e:	1eb9      	subs	r1, r7, #2
 800ef30:	f000 fef7 	bl	800fd22 <__any_on>
 800ef34:	2800      	cmp	r0, #0
 800ef36:	d144      	bne.n	800efc2 <__gethex+0x272>
 800ef38:	f04f 0a02 	mov.w	sl, #2
 800ef3c:	4639      	mov	r1, r7
 800ef3e:	4620      	mov	r0, r4
 800ef40:	f7ff fe9d 	bl	800ec7e <rshift>
 800ef44:	443d      	add	r5, r7
 800ef46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ef4a:	42ab      	cmp	r3, r5
 800ef4c:	da4a      	bge.n	800efe4 <__gethex+0x294>
 800ef4e:	4621      	mov	r1, r4
 800ef50:	9802      	ldr	r0, [sp, #8]
 800ef52:	f000 fa8f 	bl	800f474 <_Bfree>
 800ef56:	2300      	movs	r3, #0
 800ef58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ef5a:	27a3      	movs	r7, #163	; 0xa3
 800ef5c:	6013      	str	r3, [r2, #0]
 800ef5e:	e789      	b.n	800ee74 <__gethex+0x124>
 800ef60:	1e73      	subs	r3, r6, #1
 800ef62:	9a07      	ldr	r2, [sp, #28]
 800ef64:	9305      	str	r3, [sp, #20]
 800ef66:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ef6a:	4293      	cmp	r3, r2
 800ef6c:	d019      	beq.n	800efa2 <__gethex+0x252>
 800ef6e:	f1bb 0f20 	cmp.w	fp, #32
 800ef72:	d107      	bne.n	800ef84 <__gethex+0x234>
 800ef74:	9b04      	ldr	r3, [sp, #16]
 800ef76:	9a01      	ldr	r2, [sp, #4]
 800ef78:	f843 2b04 	str.w	r2, [r3], #4
 800ef7c:	9304      	str	r3, [sp, #16]
 800ef7e:	2300      	movs	r3, #0
 800ef80:	469b      	mov	fp, r3
 800ef82:	9301      	str	r3, [sp, #4]
 800ef84:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ef88:	f7ff fecc 	bl	800ed24 <__hexdig_fun>
 800ef8c:	9b01      	ldr	r3, [sp, #4]
 800ef8e:	f000 000f 	and.w	r0, r0, #15
 800ef92:	fa00 f00b 	lsl.w	r0, r0, fp
 800ef96:	4303      	orrs	r3, r0
 800ef98:	9301      	str	r3, [sp, #4]
 800ef9a:	f10b 0b04 	add.w	fp, fp, #4
 800ef9e:	9b05      	ldr	r3, [sp, #20]
 800efa0:	e00d      	b.n	800efbe <__gethex+0x26e>
 800efa2:	9b05      	ldr	r3, [sp, #20]
 800efa4:	9a08      	ldr	r2, [sp, #32]
 800efa6:	4413      	add	r3, r2
 800efa8:	42bb      	cmp	r3, r7
 800efaa:	d3e0      	bcc.n	800ef6e <__gethex+0x21e>
 800efac:	4618      	mov	r0, r3
 800efae:	4652      	mov	r2, sl
 800efb0:	9903      	ldr	r1, [sp, #12]
 800efb2:	9309      	str	r3, [sp, #36]	; 0x24
 800efb4:	f001 fd08 	bl	80109c8 <strncmp>
 800efb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efba:	2800      	cmp	r0, #0
 800efbc:	d1d7      	bne.n	800ef6e <__gethex+0x21e>
 800efbe:	461e      	mov	r6, r3
 800efc0:	e78c      	b.n	800eedc <__gethex+0x18c>
 800efc2:	f04f 0a03 	mov.w	sl, #3
 800efc6:	e7b9      	b.n	800ef3c <__gethex+0x1ec>
 800efc8:	da09      	bge.n	800efde <__gethex+0x28e>
 800efca:	1bf7      	subs	r7, r6, r7
 800efcc:	4621      	mov	r1, r4
 800efce:	463a      	mov	r2, r7
 800efd0:	9802      	ldr	r0, [sp, #8]
 800efd2:	f000 fc67 	bl	800f8a4 <__lshift>
 800efd6:	4604      	mov	r4, r0
 800efd8:	1bed      	subs	r5, r5, r7
 800efda:	f100 0914 	add.w	r9, r0, #20
 800efde:	f04f 0a00 	mov.w	sl, #0
 800efe2:	e7b0      	b.n	800ef46 <__gethex+0x1f6>
 800efe4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800efe8:	42a8      	cmp	r0, r5
 800efea:	dd71      	ble.n	800f0d0 <__gethex+0x380>
 800efec:	1b45      	subs	r5, r0, r5
 800efee:	42ae      	cmp	r6, r5
 800eff0:	dc34      	bgt.n	800f05c <__gethex+0x30c>
 800eff2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eff6:	2b02      	cmp	r3, #2
 800eff8:	d028      	beq.n	800f04c <__gethex+0x2fc>
 800effa:	2b03      	cmp	r3, #3
 800effc:	d02a      	beq.n	800f054 <__gethex+0x304>
 800effe:	2b01      	cmp	r3, #1
 800f000:	d115      	bne.n	800f02e <__gethex+0x2de>
 800f002:	42ae      	cmp	r6, r5
 800f004:	d113      	bne.n	800f02e <__gethex+0x2de>
 800f006:	2e01      	cmp	r6, #1
 800f008:	d10b      	bne.n	800f022 <__gethex+0x2d2>
 800f00a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f00e:	9a06      	ldr	r2, [sp, #24]
 800f010:	2762      	movs	r7, #98	; 0x62
 800f012:	6013      	str	r3, [r2, #0]
 800f014:	2301      	movs	r3, #1
 800f016:	6123      	str	r3, [r4, #16]
 800f018:	f8c9 3000 	str.w	r3, [r9]
 800f01c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f01e:	601c      	str	r4, [r3, #0]
 800f020:	e728      	b.n	800ee74 <__gethex+0x124>
 800f022:	4620      	mov	r0, r4
 800f024:	1e71      	subs	r1, r6, #1
 800f026:	f000 fe7c 	bl	800fd22 <__any_on>
 800f02a:	2800      	cmp	r0, #0
 800f02c:	d1ed      	bne.n	800f00a <__gethex+0x2ba>
 800f02e:	4621      	mov	r1, r4
 800f030:	9802      	ldr	r0, [sp, #8]
 800f032:	f000 fa1f 	bl	800f474 <_Bfree>
 800f036:	2300      	movs	r3, #0
 800f038:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f03a:	2750      	movs	r7, #80	; 0x50
 800f03c:	6013      	str	r3, [r2, #0]
 800f03e:	e719      	b.n	800ee74 <__gethex+0x124>
 800f040:	08012754 	.word	0x08012754
 800f044:	08012674 	.word	0x08012674
 800f048:	080126e8 	.word	0x080126e8
 800f04c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d1ed      	bne.n	800f02e <__gethex+0x2de>
 800f052:	e7da      	b.n	800f00a <__gethex+0x2ba>
 800f054:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f056:	2b00      	cmp	r3, #0
 800f058:	d1d7      	bne.n	800f00a <__gethex+0x2ba>
 800f05a:	e7e8      	b.n	800f02e <__gethex+0x2de>
 800f05c:	1e6f      	subs	r7, r5, #1
 800f05e:	f1ba 0f00 	cmp.w	sl, #0
 800f062:	d132      	bne.n	800f0ca <__gethex+0x37a>
 800f064:	b127      	cbz	r7, 800f070 <__gethex+0x320>
 800f066:	4639      	mov	r1, r7
 800f068:	4620      	mov	r0, r4
 800f06a:	f000 fe5a 	bl	800fd22 <__any_on>
 800f06e:	4682      	mov	sl, r0
 800f070:	2101      	movs	r1, #1
 800f072:	117b      	asrs	r3, r7, #5
 800f074:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f078:	f007 071f 	and.w	r7, r7, #31
 800f07c:	fa01 f707 	lsl.w	r7, r1, r7
 800f080:	421f      	tst	r7, r3
 800f082:	f04f 0702 	mov.w	r7, #2
 800f086:	4629      	mov	r1, r5
 800f088:	4620      	mov	r0, r4
 800f08a:	bf18      	it	ne
 800f08c:	f04a 0a02 	orrne.w	sl, sl, #2
 800f090:	1b76      	subs	r6, r6, r5
 800f092:	f7ff fdf4 	bl	800ec7e <rshift>
 800f096:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f09a:	f1ba 0f00 	cmp.w	sl, #0
 800f09e:	d048      	beq.n	800f132 <__gethex+0x3e2>
 800f0a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f0a4:	2b02      	cmp	r3, #2
 800f0a6:	d015      	beq.n	800f0d4 <__gethex+0x384>
 800f0a8:	2b03      	cmp	r3, #3
 800f0aa:	d017      	beq.n	800f0dc <__gethex+0x38c>
 800f0ac:	2b01      	cmp	r3, #1
 800f0ae:	d109      	bne.n	800f0c4 <__gethex+0x374>
 800f0b0:	f01a 0f02 	tst.w	sl, #2
 800f0b4:	d006      	beq.n	800f0c4 <__gethex+0x374>
 800f0b6:	f8d9 0000 	ldr.w	r0, [r9]
 800f0ba:	ea4a 0a00 	orr.w	sl, sl, r0
 800f0be:	f01a 0f01 	tst.w	sl, #1
 800f0c2:	d10e      	bne.n	800f0e2 <__gethex+0x392>
 800f0c4:	f047 0710 	orr.w	r7, r7, #16
 800f0c8:	e033      	b.n	800f132 <__gethex+0x3e2>
 800f0ca:	f04f 0a01 	mov.w	sl, #1
 800f0ce:	e7cf      	b.n	800f070 <__gethex+0x320>
 800f0d0:	2701      	movs	r7, #1
 800f0d2:	e7e2      	b.n	800f09a <__gethex+0x34a>
 800f0d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f0d6:	f1c3 0301 	rsb	r3, r3, #1
 800f0da:	9315      	str	r3, [sp, #84]	; 0x54
 800f0dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d0f0      	beq.n	800f0c4 <__gethex+0x374>
 800f0e2:	f04f 0c00 	mov.w	ip, #0
 800f0e6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f0ea:	f104 0314 	add.w	r3, r4, #20
 800f0ee:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f0f2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0fc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f100:	d01c      	beq.n	800f13c <__gethex+0x3ec>
 800f102:	3201      	adds	r2, #1
 800f104:	6002      	str	r2, [r0, #0]
 800f106:	2f02      	cmp	r7, #2
 800f108:	f104 0314 	add.w	r3, r4, #20
 800f10c:	d13d      	bne.n	800f18a <__gethex+0x43a>
 800f10e:	f8d8 2000 	ldr.w	r2, [r8]
 800f112:	3a01      	subs	r2, #1
 800f114:	42b2      	cmp	r2, r6
 800f116:	d10a      	bne.n	800f12e <__gethex+0x3de>
 800f118:	2201      	movs	r2, #1
 800f11a:	1171      	asrs	r1, r6, #5
 800f11c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f120:	f006 061f 	and.w	r6, r6, #31
 800f124:	fa02 f606 	lsl.w	r6, r2, r6
 800f128:	421e      	tst	r6, r3
 800f12a:	bf18      	it	ne
 800f12c:	4617      	movne	r7, r2
 800f12e:	f047 0720 	orr.w	r7, r7, #32
 800f132:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f134:	601c      	str	r4, [r3, #0]
 800f136:	9b06      	ldr	r3, [sp, #24]
 800f138:	601d      	str	r5, [r3, #0]
 800f13a:	e69b      	b.n	800ee74 <__gethex+0x124>
 800f13c:	4299      	cmp	r1, r3
 800f13e:	f843 cc04 	str.w	ip, [r3, #-4]
 800f142:	d8d8      	bhi.n	800f0f6 <__gethex+0x3a6>
 800f144:	68a3      	ldr	r3, [r4, #8]
 800f146:	459b      	cmp	fp, r3
 800f148:	db17      	blt.n	800f17a <__gethex+0x42a>
 800f14a:	6861      	ldr	r1, [r4, #4]
 800f14c:	9802      	ldr	r0, [sp, #8]
 800f14e:	3101      	adds	r1, #1
 800f150:	f000 f950 	bl	800f3f4 <_Balloc>
 800f154:	4681      	mov	r9, r0
 800f156:	b918      	cbnz	r0, 800f160 <__gethex+0x410>
 800f158:	4602      	mov	r2, r0
 800f15a:	2184      	movs	r1, #132	; 0x84
 800f15c:	4b19      	ldr	r3, [pc, #100]	; (800f1c4 <__gethex+0x474>)
 800f15e:	e6ac      	b.n	800eeba <__gethex+0x16a>
 800f160:	6922      	ldr	r2, [r4, #16]
 800f162:	f104 010c 	add.w	r1, r4, #12
 800f166:	3202      	adds	r2, #2
 800f168:	0092      	lsls	r2, r2, #2
 800f16a:	300c      	adds	r0, #12
 800f16c:	f000 f928 	bl	800f3c0 <memcpy>
 800f170:	4621      	mov	r1, r4
 800f172:	9802      	ldr	r0, [sp, #8]
 800f174:	f000 f97e 	bl	800f474 <_Bfree>
 800f178:	464c      	mov	r4, r9
 800f17a:	6923      	ldr	r3, [r4, #16]
 800f17c:	1c5a      	adds	r2, r3, #1
 800f17e:	6122      	str	r2, [r4, #16]
 800f180:	2201      	movs	r2, #1
 800f182:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f186:	615a      	str	r2, [r3, #20]
 800f188:	e7bd      	b.n	800f106 <__gethex+0x3b6>
 800f18a:	6922      	ldr	r2, [r4, #16]
 800f18c:	455a      	cmp	r2, fp
 800f18e:	dd0b      	ble.n	800f1a8 <__gethex+0x458>
 800f190:	2101      	movs	r1, #1
 800f192:	4620      	mov	r0, r4
 800f194:	f7ff fd73 	bl	800ec7e <rshift>
 800f198:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f19c:	3501      	adds	r5, #1
 800f19e:	42ab      	cmp	r3, r5
 800f1a0:	f6ff aed5 	blt.w	800ef4e <__gethex+0x1fe>
 800f1a4:	2701      	movs	r7, #1
 800f1a6:	e7c2      	b.n	800f12e <__gethex+0x3de>
 800f1a8:	f016 061f 	ands.w	r6, r6, #31
 800f1ac:	d0fa      	beq.n	800f1a4 <__gethex+0x454>
 800f1ae:	449a      	add	sl, r3
 800f1b0:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800f1b4:	f000 fa14 	bl	800f5e0 <__hi0bits>
 800f1b8:	f1c6 0620 	rsb	r6, r6, #32
 800f1bc:	42b0      	cmp	r0, r6
 800f1be:	dbe7      	blt.n	800f190 <__gethex+0x440>
 800f1c0:	e7f0      	b.n	800f1a4 <__gethex+0x454>
 800f1c2:	bf00      	nop
 800f1c4:	08012674 	.word	0x08012674

0800f1c8 <L_shift>:
 800f1c8:	f1c2 0208 	rsb	r2, r2, #8
 800f1cc:	0092      	lsls	r2, r2, #2
 800f1ce:	b570      	push	{r4, r5, r6, lr}
 800f1d0:	f1c2 0620 	rsb	r6, r2, #32
 800f1d4:	6843      	ldr	r3, [r0, #4]
 800f1d6:	6804      	ldr	r4, [r0, #0]
 800f1d8:	fa03 f506 	lsl.w	r5, r3, r6
 800f1dc:	432c      	orrs	r4, r5
 800f1de:	40d3      	lsrs	r3, r2
 800f1e0:	6004      	str	r4, [r0, #0]
 800f1e2:	f840 3f04 	str.w	r3, [r0, #4]!
 800f1e6:	4288      	cmp	r0, r1
 800f1e8:	d3f4      	bcc.n	800f1d4 <L_shift+0xc>
 800f1ea:	bd70      	pop	{r4, r5, r6, pc}

0800f1ec <__match>:
 800f1ec:	b530      	push	{r4, r5, lr}
 800f1ee:	6803      	ldr	r3, [r0, #0]
 800f1f0:	3301      	adds	r3, #1
 800f1f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f1f6:	b914      	cbnz	r4, 800f1fe <__match+0x12>
 800f1f8:	6003      	str	r3, [r0, #0]
 800f1fa:	2001      	movs	r0, #1
 800f1fc:	bd30      	pop	{r4, r5, pc}
 800f1fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f202:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f206:	2d19      	cmp	r5, #25
 800f208:	bf98      	it	ls
 800f20a:	3220      	addls	r2, #32
 800f20c:	42a2      	cmp	r2, r4
 800f20e:	d0f0      	beq.n	800f1f2 <__match+0x6>
 800f210:	2000      	movs	r0, #0
 800f212:	e7f3      	b.n	800f1fc <__match+0x10>

0800f214 <__hexnan>:
 800f214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f218:	2500      	movs	r5, #0
 800f21a:	680b      	ldr	r3, [r1, #0]
 800f21c:	4682      	mov	sl, r0
 800f21e:	115e      	asrs	r6, r3, #5
 800f220:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f224:	f013 031f 	ands.w	r3, r3, #31
 800f228:	bf18      	it	ne
 800f22a:	3604      	addne	r6, #4
 800f22c:	1f37      	subs	r7, r6, #4
 800f22e:	4690      	mov	r8, r2
 800f230:	46b9      	mov	r9, r7
 800f232:	463c      	mov	r4, r7
 800f234:	46ab      	mov	fp, r5
 800f236:	b087      	sub	sp, #28
 800f238:	6801      	ldr	r1, [r0, #0]
 800f23a:	9301      	str	r3, [sp, #4]
 800f23c:	f846 5c04 	str.w	r5, [r6, #-4]
 800f240:	9502      	str	r5, [sp, #8]
 800f242:	784a      	ldrb	r2, [r1, #1]
 800f244:	1c4b      	adds	r3, r1, #1
 800f246:	9303      	str	r3, [sp, #12]
 800f248:	b342      	cbz	r2, 800f29c <__hexnan+0x88>
 800f24a:	4610      	mov	r0, r2
 800f24c:	9105      	str	r1, [sp, #20]
 800f24e:	9204      	str	r2, [sp, #16]
 800f250:	f7ff fd68 	bl	800ed24 <__hexdig_fun>
 800f254:	2800      	cmp	r0, #0
 800f256:	d14f      	bne.n	800f2f8 <__hexnan+0xe4>
 800f258:	9a04      	ldr	r2, [sp, #16]
 800f25a:	9905      	ldr	r1, [sp, #20]
 800f25c:	2a20      	cmp	r2, #32
 800f25e:	d818      	bhi.n	800f292 <__hexnan+0x7e>
 800f260:	9b02      	ldr	r3, [sp, #8]
 800f262:	459b      	cmp	fp, r3
 800f264:	dd13      	ble.n	800f28e <__hexnan+0x7a>
 800f266:	454c      	cmp	r4, r9
 800f268:	d206      	bcs.n	800f278 <__hexnan+0x64>
 800f26a:	2d07      	cmp	r5, #7
 800f26c:	dc04      	bgt.n	800f278 <__hexnan+0x64>
 800f26e:	462a      	mov	r2, r5
 800f270:	4649      	mov	r1, r9
 800f272:	4620      	mov	r0, r4
 800f274:	f7ff ffa8 	bl	800f1c8 <L_shift>
 800f278:	4544      	cmp	r4, r8
 800f27a:	d950      	bls.n	800f31e <__hexnan+0x10a>
 800f27c:	2300      	movs	r3, #0
 800f27e:	f1a4 0904 	sub.w	r9, r4, #4
 800f282:	f844 3c04 	str.w	r3, [r4, #-4]
 800f286:	461d      	mov	r5, r3
 800f288:	464c      	mov	r4, r9
 800f28a:	f8cd b008 	str.w	fp, [sp, #8]
 800f28e:	9903      	ldr	r1, [sp, #12]
 800f290:	e7d7      	b.n	800f242 <__hexnan+0x2e>
 800f292:	2a29      	cmp	r2, #41	; 0x29
 800f294:	d156      	bne.n	800f344 <__hexnan+0x130>
 800f296:	3102      	adds	r1, #2
 800f298:	f8ca 1000 	str.w	r1, [sl]
 800f29c:	f1bb 0f00 	cmp.w	fp, #0
 800f2a0:	d050      	beq.n	800f344 <__hexnan+0x130>
 800f2a2:	454c      	cmp	r4, r9
 800f2a4:	d206      	bcs.n	800f2b4 <__hexnan+0xa0>
 800f2a6:	2d07      	cmp	r5, #7
 800f2a8:	dc04      	bgt.n	800f2b4 <__hexnan+0xa0>
 800f2aa:	462a      	mov	r2, r5
 800f2ac:	4649      	mov	r1, r9
 800f2ae:	4620      	mov	r0, r4
 800f2b0:	f7ff ff8a 	bl	800f1c8 <L_shift>
 800f2b4:	4544      	cmp	r4, r8
 800f2b6:	d934      	bls.n	800f322 <__hexnan+0x10e>
 800f2b8:	4623      	mov	r3, r4
 800f2ba:	f1a8 0204 	sub.w	r2, r8, #4
 800f2be:	f853 1b04 	ldr.w	r1, [r3], #4
 800f2c2:	429f      	cmp	r7, r3
 800f2c4:	f842 1f04 	str.w	r1, [r2, #4]!
 800f2c8:	d2f9      	bcs.n	800f2be <__hexnan+0xaa>
 800f2ca:	1b3b      	subs	r3, r7, r4
 800f2cc:	f023 0303 	bic.w	r3, r3, #3
 800f2d0:	3304      	adds	r3, #4
 800f2d2:	3401      	adds	r4, #1
 800f2d4:	3e03      	subs	r6, #3
 800f2d6:	42b4      	cmp	r4, r6
 800f2d8:	bf88      	it	hi
 800f2da:	2304      	movhi	r3, #4
 800f2dc:	2200      	movs	r2, #0
 800f2de:	4443      	add	r3, r8
 800f2e0:	f843 2b04 	str.w	r2, [r3], #4
 800f2e4:	429f      	cmp	r7, r3
 800f2e6:	d2fb      	bcs.n	800f2e0 <__hexnan+0xcc>
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	b91b      	cbnz	r3, 800f2f4 <__hexnan+0xe0>
 800f2ec:	4547      	cmp	r7, r8
 800f2ee:	d127      	bne.n	800f340 <__hexnan+0x12c>
 800f2f0:	2301      	movs	r3, #1
 800f2f2:	603b      	str	r3, [r7, #0]
 800f2f4:	2005      	movs	r0, #5
 800f2f6:	e026      	b.n	800f346 <__hexnan+0x132>
 800f2f8:	3501      	adds	r5, #1
 800f2fa:	2d08      	cmp	r5, #8
 800f2fc:	f10b 0b01 	add.w	fp, fp, #1
 800f300:	dd06      	ble.n	800f310 <__hexnan+0xfc>
 800f302:	4544      	cmp	r4, r8
 800f304:	d9c3      	bls.n	800f28e <__hexnan+0x7a>
 800f306:	2300      	movs	r3, #0
 800f308:	2501      	movs	r5, #1
 800f30a:	f844 3c04 	str.w	r3, [r4, #-4]
 800f30e:	3c04      	subs	r4, #4
 800f310:	6822      	ldr	r2, [r4, #0]
 800f312:	f000 000f 	and.w	r0, r0, #15
 800f316:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f31a:	6022      	str	r2, [r4, #0]
 800f31c:	e7b7      	b.n	800f28e <__hexnan+0x7a>
 800f31e:	2508      	movs	r5, #8
 800f320:	e7b5      	b.n	800f28e <__hexnan+0x7a>
 800f322:	9b01      	ldr	r3, [sp, #4]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d0df      	beq.n	800f2e8 <__hexnan+0xd4>
 800f328:	f04f 32ff 	mov.w	r2, #4294967295
 800f32c:	f1c3 0320 	rsb	r3, r3, #32
 800f330:	fa22 f303 	lsr.w	r3, r2, r3
 800f334:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f338:	401a      	ands	r2, r3
 800f33a:	f846 2c04 	str.w	r2, [r6, #-4]
 800f33e:	e7d3      	b.n	800f2e8 <__hexnan+0xd4>
 800f340:	3f04      	subs	r7, #4
 800f342:	e7d1      	b.n	800f2e8 <__hexnan+0xd4>
 800f344:	2004      	movs	r0, #4
 800f346:	b007      	add	sp, #28
 800f348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f34c <_localeconv_r>:
 800f34c:	4800      	ldr	r0, [pc, #0]	; (800f350 <_localeconv_r+0x4>)
 800f34e:	4770      	bx	lr
 800f350:	20000174 	.word	0x20000174

0800f354 <__retarget_lock_init_recursive>:
 800f354:	4770      	bx	lr

0800f356 <__retarget_lock_acquire_recursive>:
 800f356:	4770      	bx	lr

0800f358 <__retarget_lock_release_recursive>:
 800f358:	4770      	bx	lr
	...

0800f35c <_lseek_r>:
 800f35c:	b538      	push	{r3, r4, r5, lr}
 800f35e:	4604      	mov	r4, r0
 800f360:	4608      	mov	r0, r1
 800f362:	4611      	mov	r1, r2
 800f364:	2200      	movs	r2, #0
 800f366:	4d05      	ldr	r5, [pc, #20]	; (800f37c <_lseek_r+0x20>)
 800f368:	602a      	str	r2, [r5, #0]
 800f36a:	461a      	mov	r2, r3
 800f36c:	f7f3 f954 	bl	8002618 <_lseek>
 800f370:	1c43      	adds	r3, r0, #1
 800f372:	d102      	bne.n	800f37a <_lseek_r+0x1e>
 800f374:	682b      	ldr	r3, [r5, #0]
 800f376:	b103      	cbz	r3, 800f37a <_lseek_r+0x1e>
 800f378:	6023      	str	r3, [r4, #0]
 800f37a:	bd38      	pop	{r3, r4, r5, pc}
 800f37c:	20000c4c 	.word	0x20000c4c

0800f380 <__ascii_mbtowc>:
 800f380:	b082      	sub	sp, #8
 800f382:	b901      	cbnz	r1, 800f386 <__ascii_mbtowc+0x6>
 800f384:	a901      	add	r1, sp, #4
 800f386:	b142      	cbz	r2, 800f39a <__ascii_mbtowc+0x1a>
 800f388:	b14b      	cbz	r3, 800f39e <__ascii_mbtowc+0x1e>
 800f38a:	7813      	ldrb	r3, [r2, #0]
 800f38c:	600b      	str	r3, [r1, #0]
 800f38e:	7812      	ldrb	r2, [r2, #0]
 800f390:	1e10      	subs	r0, r2, #0
 800f392:	bf18      	it	ne
 800f394:	2001      	movne	r0, #1
 800f396:	b002      	add	sp, #8
 800f398:	4770      	bx	lr
 800f39a:	4610      	mov	r0, r2
 800f39c:	e7fb      	b.n	800f396 <__ascii_mbtowc+0x16>
 800f39e:	f06f 0001 	mvn.w	r0, #1
 800f3a2:	e7f8      	b.n	800f396 <__ascii_mbtowc+0x16>

0800f3a4 <memchr>:
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	b510      	push	{r4, lr}
 800f3a8:	b2c9      	uxtb	r1, r1
 800f3aa:	4402      	add	r2, r0
 800f3ac:	4293      	cmp	r3, r2
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	d101      	bne.n	800f3b6 <memchr+0x12>
 800f3b2:	2000      	movs	r0, #0
 800f3b4:	e003      	b.n	800f3be <memchr+0x1a>
 800f3b6:	7804      	ldrb	r4, [r0, #0]
 800f3b8:	3301      	adds	r3, #1
 800f3ba:	428c      	cmp	r4, r1
 800f3bc:	d1f6      	bne.n	800f3ac <memchr+0x8>
 800f3be:	bd10      	pop	{r4, pc}

0800f3c0 <memcpy>:
 800f3c0:	440a      	add	r2, r1
 800f3c2:	4291      	cmp	r1, r2
 800f3c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800f3c8:	d100      	bne.n	800f3cc <memcpy+0xc>
 800f3ca:	4770      	bx	lr
 800f3cc:	b510      	push	{r4, lr}
 800f3ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f3d2:	4291      	cmp	r1, r2
 800f3d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f3d8:	d1f9      	bne.n	800f3ce <memcpy+0xe>
 800f3da:	bd10      	pop	{r4, pc}

0800f3dc <__malloc_lock>:
 800f3dc:	4801      	ldr	r0, [pc, #4]	; (800f3e4 <__malloc_lock+0x8>)
 800f3de:	f7ff bfba 	b.w	800f356 <__retarget_lock_acquire_recursive>
 800f3e2:	bf00      	nop
 800f3e4:	20000c45 	.word	0x20000c45

0800f3e8 <__malloc_unlock>:
 800f3e8:	4801      	ldr	r0, [pc, #4]	; (800f3f0 <__malloc_unlock+0x8>)
 800f3ea:	f7ff bfb5 	b.w	800f358 <__retarget_lock_release_recursive>
 800f3ee:	bf00      	nop
 800f3f0:	20000c45 	.word	0x20000c45

0800f3f4 <_Balloc>:
 800f3f4:	b570      	push	{r4, r5, r6, lr}
 800f3f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f3f8:	4604      	mov	r4, r0
 800f3fa:	460d      	mov	r5, r1
 800f3fc:	b976      	cbnz	r6, 800f41c <_Balloc+0x28>
 800f3fe:	2010      	movs	r0, #16
 800f400:	f7fc fd76 	bl	800bef0 <malloc>
 800f404:	4602      	mov	r2, r0
 800f406:	6260      	str	r0, [r4, #36]	; 0x24
 800f408:	b920      	cbnz	r0, 800f414 <_Balloc+0x20>
 800f40a:	2166      	movs	r1, #102	; 0x66
 800f40c:	4b17      	ldr	r3, [pc, #92]	; (800f46c <_Balloc+0x78>)
 800f40e:	4818      	ldr	r0, [pc, #96]	; (800f470 <_Balloc+0x7c>)
 800f410:	f001 fc70 	bl	8010cf4 <__assert_func>
 800f414:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f418:	6006      	str	r6, [r0, #0]
 800f41a:	60c6      	str	r6, [r0, #12]
 800f41c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f41e:	68f3      	ldr	r3, [r6, #12]
 800f420:	b183      	cbz	r3, 800f444 <_Balloc+0x50>
 800f422:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f424:	68db      	ldr	r3, [r3, #12]
 800f426:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f42a:	b9b8      	cbnz	r0, 800f45c <_Balloc+0x68>
 800f42c:	2101      	movs	r1, #1
 800f42e:	fa01 f605 	lsl.w	r6, r1, r5
 800f432:	1d72      	adds	r2, r6, #5
 800f434:	4620      	mov	r0, r4
 800f436:	0092      	lsls	r2, r2, #2
 800f438:	f000 fc94 	bl	800fd64 <_calloc_r>
 800f43c:	b160      	cbz	r0, 800f458 <_Balloc+0x64>
 800f43e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f442:	e00e      	b.n	800f462 <_Balloc+0x6e>
 800f444:	2221      	movs	r2, #33	; 0x21
 800f446:	2104      	movs	r1, #4
 800f448:	4620      	mov	r0, r4
 800f44a:	f000 fc8b 	bl	800fd64 <_calloc_r>
 800f44e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f450:	60f0      	str	r0, [r6, #12]
 800f452:	68db      	ldr	r3, [r3, #12]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d1e4      	bne.n	800f422 <_Balloc+0x2e>
 800f458:	2000      	movs	r0, #0
 800f45a:	bd70      	pop	{r4, r5, r6, pc}
 800f45c:	6802      	ldr	r2, [r0, #0]
 800f45e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f462:	2300      	movs	r3, #0
 800f464:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f468:	e7f7      	b.n	800f45a <_Balloc+0x66>
 800f46a:	bf00      	nop
 800f46c:	080125fe 	.word	0x080125fe
 800f470:	08012768 	.word	0x08012768

0800f474 <_Bfree>:
 800f474:	b570      	push	{r4, r5, r6, lr}
 800f476:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f478:	4605      	mov	r5, r0
 800f47a:	460c      	mov	r4, r1
 800f47c:	b976      	cbnz	r6, 800f49c <_Bfree+0x28>
 800f47e:	2010      	movs	r0, #16
 800f480:	f7fc fd36 	bl	800bef0 <malloc>
 800f484:	4602      	mov	r2, r0
 800f486:	6268      	str	r0, [r5, #36]	; 0x24
 800f488:	b920      	cbnz	r0, 800f494 <_Bfree+0x20>
 800f48a:	218a      	movs	r1, #138	; 0x8a
 800f48c:	4b08      	ldr	r3, [pc, #32]	; (800f4b0 <_Bfree+0x3c>)
 800f48e:	4809      	ldr	r0, [pc, #36]	; (800f4b4 <_Bfree+0x40>)
 800f490:	f001 fc30 	bl	8010cf4 <__assert_func>
 800f494:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f498:	6006      	str	r6, [r0, #0]
 800f49a:	60c6      	str	r6, [r0, #12]
 800f49c:	b13c      	cbz	r4, 800f4ae <_Bfree+0x3a>
 800f49e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f4a0:	6862      	ldr	r2, [r4, #4]
 800f4a2:	68db      	ldr	r3, [r3, #12]
 800f4a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f4a8:	6021      	str	r1, [r4, #0]
 800f4aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f4ae:	bd70      	pop	{r4, r5, r6, pc}
 800f4b0:	080125fe 	.word	0x080125fe
 800f4b4:	08012768 	.word	0x08012768

0800f4b8 <__multadd>:
 800f4b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4bc:	4698      	mov	r8, r3
 800f4be:	460c      	mov	r4, r1
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	690e      	ldr	r6, [r1, #16]
 800f4c4:	4607      	mov	r7, r0
 800f4c6:	f101 0014 	add.w	r0, r1, #20
 800f4ca:	6805      	ldr	r5, [r0, #0]
 800f4cc:	3301      	adds	r3, #1
 800f4ce:	b2a9      	uxth	r1, r5
 800f4d0:	fb02 8101 	mla	r1, r2, r1, r8
 800f4d4:	0c2d      	lsrs	r5, r5, #16
 800f4d6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f4da:	fb02 c505 	mla	r5, r2, r5, ip
 800f4de:	b289      	uxth	r1, r1
 800f4e0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f4e4:	429e      	cmp	r6, r3
 800f4e6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f4ea:	f840 1b04 	str.w	r1, [r0], #4
 800f4ee:	dcec      	bgt.n	800f4ca <__multadd+0x12>
 800f4f0:	f1b8 0f00 	cmp.w	r8, #0
 800f4f4:	d022      	beq.n	800f53c <__multadd+0x84>
 800f4f6:	68a3      	ldr	r3, [r4, #8]
 800f4f8:	42b3      	cmp	r3, r6
 800f4fa:	dc19      	bgt.n	800f530 <__multadd+0x78>
 800f4fc:	6861      	ldr	r1, [r4, #4]
 800f4fe:	4638      	mov	r0, r7
 800f500:	3101      	adds	r1, #1
 800f502:	f7ff ff77 	bl	800f3f4 <_Balloc>
 800f506:	4605      	mov	r5, r0
 800f508:	b928      	cbnz	r0, 800f516 <__multadd+0x5e>
 800f50a:	4602      	mov	r2, r0
 800f50c:	21b5      	movs	r1, #181	; 0xb5
 800f50e:	4b0d      	ldr	r3, [pc, #52]	; (800f544 <__multadd+0x8c>)
 800f510:	480d      	ldr	r0, [pc, #52]	; (800f548 <__multadd+0x90>)
 800f512:	f001 fbef 	bl	8010cf4 <__assert_func>
 800f516:	6922      	ldr	r2, [r4, #16]
 800f518:	f104 010c 	add.w	r1, r4, #12
 800f51c:	3202      	adds	r2, #2
 800f51e:	0092      	lsls	r2, r2, #2
 800f520:	300c      	adds	r0, #12
 800f522:	f7ff ff4d 	bl	800f3c0 <memcpy>
 800f526:	4621      	mov	r1, r4
 800f528:	4638      	mov	r0, r7
 800f52a:	f7ff ffa3 	bl	800f474 <_Bfree>
 800f52e:	462c      	mov	r4, r5
 800f530:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f534:	3601      	adds	r6, #1
 800f536:	f8c3 8014 	str.w	r8, [r3, #20]
 800f53a:	6126      	str	r6, [r4, #16]
 800f53c:	4620      	mov	r0, r4
 800f53e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f542:	bf00      	nop
 800f544:	08012674 	.word	0x08012674
 800f548:	08012768 	.word	0x08012768

0800f54c <__s2b>:
 800f54c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f550:	4615      	mov	r5, r2
 800f552:	2209      	movs	r2, #9
 800f554:	461f      	mov	r7, r3
 800f556:	3308      	adds	r3, #8
 800f558:	460c      	mov	r4, r1
 800f55a:	fb93 f3f2 	sdiv	r3, r3, r2
 800f55e:	4606      	mov	r6, r0
 800f560:	2201      	movs	r2, #1
 800f562:	2100      	movs	r1, #0
 800f564:	429a      	cmp	r2, r3
 800f566:	db09      	blt.n	800f57c <__s2b+0x30>
 800f568:	4630      	mov	r0, r6
 800f56a:	f7ff ff43 	bl	800f3f4 <_Balloc>
 800f56e:	b940      	cbnz	r0, 800f582 <__s2b+0x36>
 800f570:	4602      	mov	r2, r0
 800f572:	21ce      	movs	r1, #206	; 0xce
 800f574:	4b18      	ldr	r3, [pc, #96]	; (800f5d8 <__s2b+0x8c>)
 800f576:	4819      	ldr	r0, [pc, #100]	; (800f5dc <__s2b+0x90>)
 800f578:	f001 fbbc 	bl	8010cf4 <__assert_func>
 800f57c:	0052      	lsls	r2, r2, #1
 800f57e:	3101      	adds	r1, #1
 800f580:	e7f0      	b.n	800f564 <__s2b+0x18>
 800f582:	9b08      	ldr	r3, [sp, #32]
 800f584:	2d09      	cmp	r5, #9
 800f586:	6143      	str	r3, [r0, #20]
 800f588:	f04f 0301 	mov.w	r3, #1
 800f58c:	6103      	str	r3, [r0, #16]
 800f58e:	dd16      	ble.n	800f5be <__s2b+0x72>
 800f590:	f104 0909 	add.w	r9, r4, #9
 800f594:	46c8      	mov	r8, r9
 800f596:	442c      	add	r4, r5
 800f598:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f59c:	4601      	mov	r1, r0
 800f59e:	220a      	movs	r2, #10
 800f5a0:	4630      	mov	r0, r6
 800f5a2:	3b30      	subs	r3, #48	; 0x30
 800f5a4:	f7ff ff88 	bl	800f4b8 <__multadd>
 800f5a8:	45a0      	cmp	r8, r4
 800f5aa:	d1f5      	bne.n	800f598 <__s2b+0x4c>
 800f5ac:	f1a5 0408 	sub.w	r4, r5, #8
 800f5b0:	444c      	add	r4, r9
 800f5b2:	1b2d      	subs	r5, r5, r4
 800f5b4:	1963      	adds	r3, r4, r5
 800f5b6:	42bb      	cmp	r3, r7
 800f5b8:	db04      	blt.n	800f5c4 <__s2b+0x78>
 800f5ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5be:	2509      	movs	r5, #9
 800f5c0:	340a      	adds	r4, #10
 800f5c2:	e7f6      	b.n	800f5b2 <__s2b+0x66>
 800f5c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f5c8:	4601      	mov	r1, r0
 800f5ca:	220a      	movs	r2, #10
 800f5cc:	4630      	mov	r0, r6
 800f5ce:	3b30      	subs	r3, #48	; 0x30
 800f5d0:	f7ff ff72 	bl	800f4b8 <__multadd>
 800f5d4:	e7ee      	b.n	800f5b4 <__s2b+0x68>
 800f5d6:	bf00      	nop
 800f5d8:	08012674 	.word	0x08012674
 800f5dc:	08012768 	.word	0x08012768

0800f5e0 <__hi0bits>:
 800f5e0:	0c02      	lsrs	r2, r0, #16
 800f5e2:	0412      	lsls	r2, r2, #16
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	b9ca      	cbnz	r2, 800f61c <__hi0bits+0x3c>
 800f5e8:	0403      	lsls	r3, r0, #16
 800f5ea:	2010      	movs	r0, #16
 800f5ec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f5f0:	bf04      	itt	eq
 800f5f2:	021b      	lsleq	r3, r3, #8
 800f5f4:	3008      	addeq	r0, #8
 800f5f6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f5fa:	bf04      	itt	eq
 800f5fc:	011b      	lsleq	r3, r3, #4
 800f5fe:	3004      	addeq	r0, #4
 800f600:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f604:	bf04      	itt	eq
 800f606:	009b      	lsleq	r3, r3, #2
 800f608:	3002      	addeq	r0, #2
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	db05      	blt.n	800f61a <__hi0bits+0x3a>
 800f60e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800f612:	f100 0001 	add.w	r0, r0, #1
 800f616:	bf08      	it	eq
 800f618:	2020      	moveq	r0, #32
 800f61a:	4770      	bx	lr
 800f61c:	2000      	movs	r0, #0
 800f61e:	e7e5      	b.n	800f5ec <__hi0bits+0xc>

0800f620 <__lo0bits>:
 800f620:	6803      	ldr	r3, [r0, #0]
 800f622:	4602      	mov	r2, r0
 800f624:	f013 0007 	ands.w	r0, r3, #7
 800f628:	d00b      	beq.n	800f642 <__lo0bits+0x22>
 800f62a:	07d9      	lsls	r1, r3, #31
 800f62c:	d422      	bmi.n	800f674 <__lo0bits+0x54>
 800f62e:	0798      	lsls	r0, r3, #30
 800f630:	bf49      	itett	mi
 800f632:	085b      	lsrmi	r3, r3, #1
 800f634:	089b      	lsrpl	r3, r3, #2
 800f636:	2001      	movmi	r0, #1
 800f638:	6013      	strmi	r3, [r2, #0]
 800f63a:	bf5c      	itt	pl
 800f63c:	2002      	movpl	r0, #2
 800f63e:	6013      	strpl	r3, [r2, #0]
 800f640:	4770      	bx	lr
 800f642:	b299      	uxth	r1, r3
 800f644:	b909      	cbnz	r1, 800f64a <__lo0bits+0x2a>
 800f646:	2010      	movs	r0, #16
 800f648:	0c1b      	lsrs	r3, r3, #16
 800f64a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f64e:	bf04      	itt	eq
 800f650:	0a1b      	lsreq	r3, r3, #8
 800f652:	3008      	addeq	r0, #8
 800f654:	0719      	lsls	r1, r3, #28
 800f656:	bf04      	itt	eq
 800f658:	091b      	lsreq	r3, r3, #4
 800f65a:	3004      	addeq	r0, #4
 800f65c:	0799      	lsls	r1, r3, #30
 800f65e:	bf04      	itt	eq
 800f660:	089b      	lsreq	r3, r3, #2
 800f662:	3002      	addeq	r0, #2
 800f664:	07d9      	lsls	r1, r3, #31
 800f666:	d403      	bmi.n	800f670 <__lo0bits+0x50>
 800f668:	085b      	lsrs	r3, r3, #1
 800f66a:	f100 0001 	add.w	r0, r0, #1
 800f66e:	d003      	beq.n	800f678 <__lo0bits+0x58>
 800f670:	6013      	str	r3, [r2, #0]
 800f672:	4770      	bx	lr
 800f674:	2000      	movs	r0, #0
 800f676:	4770      	bx	lr
 800f678:	2020      	movs	r0, #32
 800f67a:	4770      	bx	lr

0800f67c <__i2b>:
 800f67c:	b510      	push	{r4, lr}
 800f67e:	460c      	mov	r4, r1
 800f680:	2101      	movs	r1, #1
 800f682:	f7ff feb7 	bl	800f3f4 <_Balloc>
 800f686:	4602      	mov	r2, r0
 800f688:	b928      	cbnz	r0, 800f696 <__i2b+0x1a>
 800f68a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f68e:	4b04      	ldr	r3, [pc, #16]	; (800f6a0 <__i2b+0x24>)
 800f690:	4804      	ldr	r0, [pc, #16]	; (800f6a4 <__i2b+0x28>)
 800f692:	f001 fb2f 	bl	8010cf4 <__assert_func>
 800f696:	2301      	movs	r3, #1
 800f698:	6144      	str	r4, [r0, #20]
 800f69a:	6103      	str	r3, [r0, #16]
 800f69c:	bd10      	pop	{r4, pc}
 800f69e:	bf00      	nop
 800f6a0:	08012674 	.word	0x08012674
 800f6a4:	08012768 	.word	0x08012768

0800f6a8 <__multiply>:
 800f6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6ac:	4614      	mov	r4, r2
 800f6ae:	690a      	ldr	r2, [r1, #16]
 800f6b0:	6923      	ldr	r3, [r4, #16]
 800f6b2:	460d      	mov	r5, r1
 800f6b4:	429a      	cmp	r2, r3
 800f6b6:	bfbe      	ittt	lt
 800f6b8:	460b      	movlt	r3, r1
 800f6ba:	4625      	movlt	r5, r4
 800f6bc:	461c      	movlt	r4, r3
 800f6be:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800f6c2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f6c6:	68ab      	ldr	r3, [r5, #8]
 800f6c8:	6869      	ldr	r1, [r5, #4]
 800f6ca:	eb0a 0709 	add.w	r7, sl, r9
 800f6ce:	42bb      	cmp	r3, r7
 800f6d0:	b085      	sub	sp, #20
 800f6d2:	bfb8      	it	lt
 800f6d4:	3101      	addlt	r1, #1
 800f6d6:	f7ff fe8d 	bl	800f3f4 <_Balloc>
 800f6da:	b930      	cbnz	r0, 800f6ea <__multiply+0x42>
 800f6dc:	4602      	mov	r2, r0
 800f6de:	f240 115d 	movw	r1, #349	; 0x15d
 800f6e2:	4b41      	ldr	r3, [pc, #260]	; (800f7e8 <__multiply+0x140>)
 800f6e4:	4841      	ldr	r0, [pc, #260]	; (800f7ec <__multiply+0x144>)
 800f6e6:	f001 fb05 	bl	8010cf4 <__assert_func>
 800f6ea:	f100 0614 	add.w	r6, r0, #20
 800f6ee:	4633      	mov	r3, r6
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800f6f6:	4543      	cmp	r3, r8
 800f6f8:	d31e      	bcc.n	800f738 <__multiply+0x90>
 800f6fa:	f105 0c14 	add.w	ip, r5, #20
 800f6fe:	f104 0314 	add.w	r3, r4, #20
 800f702:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800f706:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800f70a:	9202      	str	r2, [sp, #8]
 800f70c:	ebac 0205 	sub.w	r2, ip, r5
 800f710:	3a15      	subs	r2, #21
 800f712:	f022 0203 	bic.w	r2, r2, #3
 800f716:	3204      	adds	r2, #4
 800f718:	f105 0115 	add.w	r1, r5, #21
 800f71c:	458c      	cmp	ip, r1
 800f71e:	bf38      	it	cc
 800f720:	2204      	movcc	r2, #4
 800f722:	9201      	str	r2, [sp, #4]
 800f724:	9a02      	ldr	r2, [sp, #8]
 800f726:	9303      	str	r3, [sp, #12]
 800f728:	429a      	cmp	r2, r3
 800f72a:	d808      	bhi.n	800f73e <__multiply+0x96>
 800f72c:	2f00      	cmp	r7, #0
 800f72e:	dc55      	bgt.n	800f7dc <__multiply+0x134>
 800f730:	6107      	str	r7, [r0, #16]
 800f732:	b005      	add	sp, #20
 800f734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f738:	f843 2b04 	str.w	r2, [r3], #4
 800f73c:	e7db      	b.n	800f6f6 <__multiply+0x4e>
 800f73e:	f8b3 a000 	ldrh.w	sl, [r3]
 800f742:	f1ba 0f00 	cmp.w	sl, #0
 800f746:	d020      	beq.n	800f78a <__multiply+0xe2>
 800f748:	46b1      	mov	r9, r6
 800f74a:	2200      	movs	r2, #0
 800f74c:	f105 0e14 	add.w	lr, r5, #20
 800f750:	f85e 4b04 	ldr.w	r4, [lr], #4
 800f754:	f8d9 b000 	ldr.w	fp, [r9]
 800f758:	b2a1      	uxth	r1, r4
 800f75a:	fa1f fb8b 	uxth.w	fp, fp
 800f75e:	fb0a b101 	mla	r1, sl, r1, fp
 800f762:	4411      	add	r1, r2
 800f764:	f8d9 2000 	ldr.w	r2, [r9]
 800f768:	0c24      	lsrs	r4, r4, #16
 800f76a:	0c12      	lsrs	r2, r2, #16
 800f76c:	fb0a 2404 	mla	r4, sl, r4, r2
 800f770:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800f774:	b289      	uxth	r1, r1
 800f776:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f77a:	45f4      	cmp	ip, lr
 800f77c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800f780:	f849 1b04 	str.w	r1, [r9], #4
 800f784:	d8e4      	bhi.n	800f750 <__multiply+0xa8>
 800f786:	9901      	ldr	r1, [sp, #4]
 800f788:	5072      	str	r2, [r6, r1]
 800f78a:	9a03      	ldr	r2, [sp, #12]
 800f78c:	3304      	adds	r3, #4
 800f78e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f792:	f1b9 0f00 	cmp.w	r9, #0
 800f796:	d01f      	beq.n	800f7d8 <__multiply+0x130>
 800f798:	46b6      	mov	lr, r6
 800f79a:	f04f 0a00 	mov.w	sl, #0
 800f79e:	6834      	ldr	r4, [r6, #0]
 800f7a0:	f105 0114 	add.w	r1, r5, #20
 800f7a4:	880a      	ldrh	r2, [r1, #0]
 800f7a6:	f8be b002 	ldrh.w	fp, [lr, #2]
 800f7aa:	b2a4      	uxth	r4, r4
 800f7ac:	fb09 b202 	mla	r2, r9, r2, fp
 800f7b0:	4492      	add	sl, r2
 800f7b2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f7b6:	f84e 4b04 	str.w	r4, [lr], #4
 800f7ba:	f851 4b04 	ldr.w	r4, [r1], #4
 800f7be:	f8be 2000 	ldrh.w	r2, [lr]
 800f7c2:	0c24      	lsrs	r4, r4, #16
 800f7c4:	fb09 2404 	mla	r4, r9, r4, r2
 800f7c8:	458c      	cmp	ip, r1
 800f7ca:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800f7ce:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f7d2:	d8e7      	bhi.n	800f7a4 <__multiply+0xfc>
 800f7d4:	9a01      	ldr	r2, [sp, #4]
 800f7d6:	50b4      	str	r4, [r6, r2]
 800f7d8:	3604      	adds	r6, #4
 800f7da:	e7a3      	b.n	800f724 <__multiply+0x7c>
 800f7dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d1a5      	bne.n	800f730 <__multiply+0x88>
 800f7e4:	3f01      	subs	r7, #1
 800f7e6:	e7a1      	b.n	800f72c <__multiply+0x84>
 800f7e8:	08012674 	.word	0x08012674
 800f7ec:	08012768 	.word	0x08012768

0800f7f0 <__pow5mult>:
 800f7f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7f4:	4615      	mov	r5, r2
 800f7f6:	f012 0203 	ands.w	r2, r2, #3
 800f7fa:	4606      	mov	r6, r0
 800f7fc:	460f      	mov	r7, r1
 800f7fe:	d007      	beq.n	800f810 <__pow5mult+0x20>
 800f800:	4c25      	ldr	r4, [pc, #148]	; (800f898 <__pow5mult+0xa8>)
 800f802:	3a01      	subs	r2, #1
 800f804:	2300      	movs	r3, #0
 800f806:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f80a:	f7ff fe55 	bl	800f4b8 <__multadd>
 800f80e:	4607      	mov	r7, r0
 800f810:	10ad      	asrs	r5, r5, #2
 800f812:	d03d      	beq.n	800f890 <__pow5mult+0xa0>
 800f814:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f816:	b97c      	cbnz	r4, 800f838 <__pow5mult+0x48>
 800f818:	2010      	movs	r0, #16
 800f81a:	f7fc fb69 	bl	800bef0 <malloc>
 800f81e:	4602      	mov	r2, r0
 800f820:	6270      	str	r0, [r6, #36]	; 0x24
 800f822:	b928      	cbnz	r0, 800f830 <__pow5mult+0x40>
 800f824:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f828:	4b1c      	ldr	r3, [pc, #112]	; (800f89c <__pow5mult+0xac>)
 800f82a:	481d      	ldr	r0, [pc, #116]	; (800f8a0 <__pow5mult+0xb0>)
 800f82c:	f001 fa62 	bl	8010cf4 <__assert_func>
 800f830:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f834:	6004      	str	r4, [r0, #0]
 800f836:	60c4      	str	r4, [r0, #12]
 800f838:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f83c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f840:	b94c      	cbnz	r4, 800f856 <__pow5mult+0x66>
 800f842:	f240 2171 	movw	r1, #625	; 0x271
 800f846:	4630      	mov	r0, r6
 800f848:	f7ff ff18 	bl	800f67c <__i2b>
 800f84c:	2300      	movs	r3, #0
 800f84e:	4604      	mov	r4, r0
 800f850:	f8c8 0008 	str.w	r0, [r8, #8]
 800f854:	6003      	str	r3, [r0, #0]
 800f856:	f04f 0900 	mov.w	r9, #0
 800f85a:	07eb      	lsls	r3, r5, #31
 800f85c:	d50a      	bpl.n	800f874 <__pow5mult+0x84>
 800f85e:	4639      	mov	r1, r7
 800f860:	4622      	mov	r2, r4
 800f862:	4630      	mov	r0, r6
 800f864:	f7ff ff20 	bl	800f6a8 <__multiply>
 800f868:	4680      	mov	r8, r0
 800f86a:	4639      	mov	r1, r7
 800f86c:	4630      	mov	r0, r6
 800f86e:	f7ff fe01 	bl	800f474 <_Bfree>
 800f872:	4647      	mov	r7, r8
 800f874:	106d      	asrs	r5, r5, #1
 800f876:	d00b      	beq.n	800f890 <__pow5mult+0xa0>
 800f878:	6820      	ldr	r0, [r4, #0]
 800f87a:	b938      	cbnz	r0, 800f88c <__pow5mult+0x9c>
 800f87c:	4622      	mov	r2, r4
 800f87e:	4621      	mov	r1, r4
 800f880:	4630      	mov	r0, r6
 800f882:	f7ff ff11 	bl	800f6a8 <__multiply>
 800f886:	6020      	str	r0, [r4, #0]
 800f888:	f8c0 9000 	str.w	r9, [r0]
 800f88c:	4604      	mov	r4, r0
 800f88e:	e7e4      	b.n	800f85a <__pow5mult+0x6a>
 800f890:	4638      	mov	r0, r7
 800f892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f896:	bf00      	nop
 800f898:	080128b8 	.word	0x080128b8
 800f89c:	080125fe 	.word	0x080125fe
 800f8a0:	08012768 	.word	0x08012768

0800f8a4 <__lshift>:
 800f8a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8a8:	460c      	mov	r4, r1
 800f8aa:	4607      	mov	r7, r0
 800f8ac:	4691      	mov	r9, r2
 800f8ae:	6923      	ldr	r3, [r4, #16]
 800f8b0:	6849      	ldr	r1, [r1, #4]
 800f8b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f8b6:	68a3      	ldr	r3, [r4, #8]
 800f8b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f8bc:	f108 0601 	add.w	r6, r8, #1
 800f8c0:	42b3      	cmp	r3, r6
 800f8c2:	db0b      	blt.n	800f8dc <__lshift+0x38>
 800f8c4:	4638      	mov	r0, r7
 800f8c6:	f7ff fd95 	bl	800f3f4 <_Balloc>
 800f8ca:	4605      	mov	r5, r0
 800f8cc:	b948      	cbnz	r0, 800f8e2 <__lshift+0x3e>
 800f8ce:	4602      	mov	r2, r0
 800f8d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f8d4:	4b27      	ldr	r3, [pc, #156]	; (800f974 <__lshift+0xd0>)
 800f8d6:	4828      	ldr	r0, [pc, #160]	; (800f978 <__lshift+0xd4>)
 800f8d8:	f001 fa0c 	bl	8010cf4 <__assert_func>
 800f8dc:	3101      	adds	r1, #1
 800f8de:	005b      	lsls	r3, r3, #1
 800f8e0:	e7ee      	b.n	800f8c0 <__lshift+0x1c>
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	f100 0114 	add.w	r1, r0, #20
 800f8e8:	f100 0210 	add.w	r2, r0, #16
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	4553      	cmp	r3, sl
 800f8f0:	db33      	blt.n	800f95a <__lshift+0xb6>
 800f8f2:	6920      	ldr	r0, [r4, #16]
 800f8f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f8f8:	f104 0314 	add.w	r3, r4, #20
 800f8fc:	f019 091f 	ands.w	r9, r9, #31
 800f900:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f904:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f908:	d02b      	beq.n	800f962 <__lshift+0xbe>
 800f90a:	468a      	mov	sl, r1
 800f90c:	2200      	movs	r2, #0
 800f90e:	f1c9 0e20 	rsb	lr, r9, #32
 800f912:	6818      	ldr	r0, [r3, #0]
 800f914:	fa00 f009 	lsl.w	r0, r0, r9
 800f918:	4302      	orrs	r2, r0
 800f91a:	f84a 2b04 	str.w	r2, [sl], #4
 800f91e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f922:	459c      	cmp	ip, r3
 800f924:	fa22 f20e 	lsr.w	r2, r2, lr
 800f928:	d8f3      	bhi.n	800f912 <__lshift+0x6e>
 800f92a:	ebac 0304 	sub.w	r3, ip, r4
 800f92e:	3b15      	subs	r3, #21
 800f930:	f023 0303 	bic.w	r3, r3, #3
 800f934:	3304      	adds	r3, #4
 800f936:	f104 0015 	add.w	r0, r4, #21
 800f93a:	4584      	cmp	ip, r0
 800f93c:	bf38      	it	cc
 800f93e:	2304      	movcc	r3, #4
 800f940:	50ca      	str	r2, [r1, r3]
 800f942:	b10a      	cbz	r2, 800f948 <__lshift+0xa4>
 800f944:	f108 0602 	add.w	r6, r8, #2
 800f948:	3e01      	subs	r6, #1
 800f94a:	4638      	mov	r0, r7
 800f94c:	4621      	mov	r1, r4
 800f94e:	612e      	str	r6, [r5, #16]
 800f950:	f7ff fd90 	bl	800f474 <_Bfree>
 800f954:	4628      	mov	r0, r5
 800f956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f95a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f95e:	3301      	adds	r3, #1
 800f960:	e7c5      	b.n	800f8ee <__lshift+0x4a>
 800f962:	3904      	subs	r1, #4
 800f964:	f853 2b04 	ldr.w	r2, [r3], #4
 800f968:	459c      	cmp	ip, r3
 800f96a:	f841 2f04 	str.w	r2, [r1, #4]!
 800f96e:	d8f9      	bhi.n	800f964 <__lshift+0xc0>
 800f970:	e7ea      	b.n	800f948 <__lshift+0xa4>
 800f972:	bf00      	nop
 800f974:	08012674 	.word	0x08012674
 800f978:	08012768 	.word	0x08012768

0800f97c <__mcmp>:
 800f97c:	4603      	mov	r3, r0
 800f97e:	690a      	ldr	r2, [r1, #16]
 800f980:	6900      	ldr	r0, [r0, #16]
 800f982:	b530      	push	{r4, r5, lr}
 800f984:	1a80      	subs	r0, r0, r2
 800f986:	d10d      	bne.n	800f9a4 <__mcmp+0x28>
 800f988:	3314      	adds	r3, #20
 800f98a:	3114      	adds	r1, #20
 800f98c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f990:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f994:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f998:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f99c:	4295      	cmp	r5, r2
 800f99e:	d002      	beq.n	800f9a6 <__mcmp+0x2a>
 800f9a0:	d304      	bcc.n	800f9ac <__mcmp+0x30>
 800f9a2:	2001      	movs	r0, #1
 800f9a4:	bd30      	pop	{r4, r5, pc}
 800f9a6:	42a3      	cmp	r3, r4
 800f9a8:	d3f4      	bcc.n	800f994 <__mcmp+0x18>
 800f9aa:	e7fb      	b.n	800f9a4 <__mcmp+0x28>
 800f9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f9b0:	e7f8      	b.n	800f9a4 <__mcmp+0x28>
	...

0800f9b4 <__mdiff>:
 800f9b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9b8:	460c      	mov	r4, r1
 800f9ba:	4606      	mov	r6, r0
 800f9bc:	4611      	mov	r1, r2
 800f9be:	4620      	mov	r0, r4
 800f9c0:	4692      	mov	sl, r2
 800f9c2:	f7ff ffdb 	bl	800f97c <__mcmp>
 800f9c6:	1e05      	subs	r5, r0, #0
 800f9c8:	d111      	bne.n	800f9ee <__mdiff+0x3a>
 800f9ca:	4629      	mov	r1, r5
 800f9cc:	4630      	mov	r0, r6
 800f9ce:	f7ff fd11 	bl	800f3f4 <_Balloc>
 800f9d2:	4602      	mov	r2, r0
 800f9d4:	b928      	cbnz	r0, 800f9e2 <__mdiff+0x2e>
 800f9d6:	f240 2132 	movw	r1, #562	; 0x232
 800f9da:	4b3c      	ldr	r3, [pc, #240]	; (800facc <__mdiff+0x118>)
 800f9dc:	483c      	ldr	r0, [pc, #240]	; (800fad0 <__mdiff+0x11c>)
 800f9de:	f001 f989 	bl	8010cf4 <__assert_func>
 800f9e2:	2301      	movs	r3, #1
 800f9e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f9e8:	4610      	mov	r0, r2
 800f9ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9ee:	bfa4      	itt	ge
 800f9f0:	4653      	movge	r3, sl
 800f9f2:	46a2      	movge	sl, r4
 800f9f4:	4630      	mov	r0, r6
 800f9f6:	f8da 1004 	ldr.w	r1, [sl, #4]
 800f9fa:	bfa6      	itte	ge
 800f9fc:	461c      	movge	r4, r3
 800f9fe:	2500      	movge	r5, #0
 800fa00:	2501      	movlt	r5, #1
 800fa02:	f7ff fcf7 	bl	800f3f4 <_Balloc>
 800fa06:	4602      	mov	r2, r0
 800fa08:	b918      	cbnz	r0, 800fa12 <__mdiff+0x5e>
 800fa0a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fa0e:	4b2f      	ldr	r3, [pc, #188]	; (800facc <__mdiff+0x118>)
 800fa10:	e7e4      	b.n	800f9dc <__mdiff+0x28>
 800fa12:	f100 0814 	add.w	r8, r0, #20
 800fa16:	f8da 7010 	ldr.w	r7, [sl, #16]
 800fa1a:	60c5      	str	r5, [r0, #12]
 800fa1c:	f04f 0c00 	mov.w	ip, #0
 800fa20:	f10a 0514 	add.w	r5, sl, #20
 800fa24:	f10a 0010 	add.w	r0, sl, #16
 800fa28:	46c2      	mov	sl, r8
 800fa2a:	6926      	ldr	r6, [r4, #16]
 800fa2c:	f104 0914 	add.w	r9, r4, #20
 800fa30:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800fa34:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fa38:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800fa3c:	f859 3b04 	ldr.w	r3, [r9], #4
 800fa40:	fa1f f18b 	uxth.w	r1, fp
 800fa44:	4461      	add	r1, ip
 800fa46:	fa1f fc83 	uxth.w	ip, r3
 800fa4a:	0c1b      	lsrs	r3, r3, #16
 800fa4c:	eba1 010c 	sub.w	r1, r1, ip
 800fa50:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fa54:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800fa58:	b289      	uxth	r1, r1
 800fa5a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800fa5e:	454e      	cmp	r6, r9
 800fa60:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800fa64:	f84a 3b04 	str.w	r3, [sl], #4
 800fa68:	d8e6      	bhi.n	800fa38 <__mdiff+0x84>
 800fa6a:	1b33      	subs	r3, r6, r4
 800fa6c:	3b15      	subs	r3, #21
 800fa6e:	f023 0303 	bic.w	r3, r3, #3
 800fa72:	3415      	adds	r4, #21
 800fa74:	3304      	adds	r3, #4
 800fa76:	42a6      	cmp	r6, r4
 800fa78:	bf38      	it	cc
 800fa7a:	2304      	movcc	r3, #4
 800fa7c:	441d      	add	r5, r3
 800fa7e:	4443      	add	r3, r8
 800fa80:	461e      	mov	r6, r3
 800fa82:	462c      	mov	r4, r5
 800fa84:	4574      	cmp	r4, lr
 800fa86:	d30e      	bcc.n	800faa6 <__mdiff+0xf2>
 800fa88:	f10e 0103 	add.w	r1, lr, #3
 800fa8c:	1b49      	subs	r1, r1, r5
 800fa8e:	f021 0103 	bic.w	r1, r1, #3
 800fa92:	3d03      	subs	r5, #3
 800fa94:	45ae      	cmp	lr, r5
 800fa96:	bf38      	it	cc
 800fa98:	2100      	movcc	r1, #0
 800fa9a:	4419      	add	r1, r3
 800fa9c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800faa0:	b18b      	cbz	r3, 800fac6 <__mdiff+0x112>
 800faa2:	6117      	str	r7, [r2, #16]
 800faa4:	e7a0      	b.n	800f9e8 <__mdiff+0x34>
 800faa6:	f854 8b04 	ldr.w	r8, [r4], #4
 800faaa:	fa1f f188 	uxth.w	r1, r8
 800faae:	4461      	add	r1, ip
 800fab0:	1408      	asrs	r0, r1, #16
 800fab2:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800fab6:	b289      	uxth	r1, r1
 800fab8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800fabc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fac0:	f846 1b04 	str.w	r1, [r6], #4
 800fac4:	e7de      	b.n	800fa84 <__mdiff+0xd0>
 800fac6:	3f01      	subs	r7, #1
 800fac8:	e7e8      	b.n	800fa9c <__mdiff+0xe8>
 800faca:	bf00      	nop
 800facc:	08012674 	.word	0x08012674
 800fad0:	08012768 	.word	0x08012768

0800fad4 <__ulp>:
 800fad4:	4b11      	ldr	r3, [pc, #68]	; (800fb1c <__ulp+0x48>)
 800fad6:	400b      	ands	r3, r1
 800fad8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800fadc:	2b00      	cmp	r3, #0
 800fade:	dd02      	ble.n	800fae6 <__ulp+0x12>
 800fae0:	2000      	movs	r0, #0
 800fae2:	4619      	mov	r1, r3
 800fae4:	4770      	bx	lr
 800fae6:	425b      	negs	r3, r3
 800fae8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800faec:	f04f 0000 	mov.w	r0, #0
 800faf0:	f04f 0100 	mov.w	r1, #0
 800faf4:	ea4f 5223 	mov.w	r2, r3, asr #20
 800faf8:	da04      	bge.n	800fb04 <__ulp+0x30>
 800fafa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800fafe:	fa43 f102 	asr.w	r1, r3, r2
 800fb02:	4770      	bx	lr
 800fb04:	f1a2 0314 	sub.w	r3, r2, #20
 800fb08:	2b1e      	cmp	r3, #30
 800fb0a:	bfd6      	itet	le
 800fb0c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800fb10:	2301      	movgt	r3, #1
 800fb12:	fa22 f303 	lsrle.w	r3, r2, r3
 800fb16:	4618      	mov	r0, r3
 800fb18:	4770      	bx	lr
 800fb1a:	bf00      	nop
 800fb1c:	7ff00000 	.word	0x7ff00000

0800fb20 <__b2d>:
 800fb20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb24:	6907      	ldr	r7, [r0, #16]
 800fb26:	f100 0914 	add.w	r9, r0, #20
 800fb2a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800fb2e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800fb32:	f1a7 0804 	sub.w	r8, r7, #4
 800fb36:	4630      	mov	r0, r6
 800fb38:	f7ff fd52 	bl	800f5e0 <__hi0bits>
 800fb3c:	f1c0 0320 	rsb	r3, r0, #32
 800fb40:	280a      	cmp	r0, #10
 800fb42:	600b      	str	r3, [r1, #0]
 800fb44:	491f      	ldr	r1, [pc, #124]	; (800fbc4 <__b2d+0xa4>)
 800fb46:	dc17      	bgt.n	800fb78 <__b2d+0x58>
 800fb48:	45c1      	cmp	r9, r8
 800fb4a:	bf28      	it	cs
 800fb4c:	2200      	movcs	r2, #0
 800fb4e:	f1c0 0c0b 	rsb	ip, r0, #11
 800fb52:	fa26 f30c 	lsr.w	r3, r6, ip
 800fb56:	bf38      	it	cc
 800fb58:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800fb5c:	ea43 0501 	orr.w	r5, r3, r1
 800fb60:	f100 0315 	add.w	r3, r0, #21
 800fb64:	fa06 f303 	lsl.w	r3, r6, r3
 800fb68:	fa22 f20c 	lsr.w	r2, r2, ip
 800fb6c:	ea43 0402 	orr.w	r4, r3, r2
 800fb70:	4620      	mov	r0, r4
 800fb72:	4629      	mov	r1, r5
 800fb74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb78:	45c1      	cmp	r9, r8
 800fb7a:	bf2e      	itee	cs
 800fb7c:	2200      	movcs	r2, #0
 800fb7e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800fb82:	f1a7 0808 	subcc.w	r8, r7, #8
 800fb86:	f1b0 030b 	subs.w	r3, r0, #11
 800fb8a:	d016      	beq.n	800fbba <__b2d+0x9a>
 800fb8c:	f1c3 0720 	rsb	r7, r3, #32
 800fb90:	fa22 f107 	lsr.w	r1, r2, r7
 800fb94:	45c8      	cmp	r8, r9
 800fb96:	fa06 f603 	lsl.w	r6, r6, r3
 800fb9a:	ea46 0601 	orr.w	r6, r6, r1
 800fb9e:	bf94      	ite	ls
 800fba0:	2100      	movls	r1, #0
 800fba2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800fba6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800fbaa:	fa02 f003 	lsl.w	r0, r2, r3
 800fbae:	40f9      	lsrs	r1, r7
 800fbb0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800fbb4:	ea40 0401 	orr.w	r4, r0, r1
 800fbb8:	e7da      	b.n	800fb70 <__b2d+0x50>
 800fbba:	4614      	mov	r4, r2
 800fbbc:	ea46 0501 	orr.w	r5, r6, r1
 800fbc0:	e7d6      	b.n	800fb70 <__b2d+0x50>
 800fbc2:	bf00      	nop
 800fbc4:	3ff00000 	.word	0x3ff00000

0800fbc8 <__d2b>:
 800fbc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800fbcc:	2101      	movs	r1, #1
 800fbce:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800fbd2:	4690      	mov	r8, r2
 800fbd4:	461d      	mov	r5, r3
 800fbd6:	f7ff fc0d 	bl	800f3f4 <_Balloc>
 800fbda:	4604      	mov	r4, r0
 800fbdc:	b930      	cbnz	r0, 800fbec <__d2b+0x24>
 800fbde:	4602      	mov	r2, r0
 800fbe0:	f240 310a 	movw	r1, #778	; 0x30a
 800fbe4:	4b24      	ldr	r3, [pc, #144]	; (800fc78 <__d2b+0xb0>)
 800fbe6:	4825      	ldr	r0, [pc, #148]	; (800fc7c <__d2b+0xb4>)
 800fbe8:	f001 f884 	bl	8010cf4 <__assert_func>
 800fbec:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800fbf0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800fbf4:	bb2d      	cbnz	r5, 800fc42 <__d2b+0x7a>
 800fbf6:	9301      	str	r3, [sp, #4]
 800fbf8:	f1b8 0300 	subs.w	r3, r8, #0
 800fbfc:	d026      	beq.n	800fc4c <__d2b+0x84>
 800fbfe:	4668      	mov	r0, sp
 800fc00:	9300      	str	r3, [sp, #0]
 800fc02:	f7ff fd0d 	bl	800f620 <__lo0bits>
 800fc06:	9900      	ldr	r1, [sp, #0]
 800fc08:	b1f0      	cbz	r0, 800fc48 <__d2b+0x80>
 800fc0a:	9a01      	ldr	r2, [sp, #4]
 800fc0c:	f1c0 0320 	rsb	r3, r0, #32
 800fc10:	fa02 f303 	lsl.w	r3, r2, r3
 800fc14:	430b      	orrs	r3, r1
 800fc16:	40c2      	lsrs	r2, r0
 800fc18:	6163      	str	r3, [r4, #20]
 800fc1a:	9201      	str	r2, [sp, #4]
 800fc1c:	9b01      	ldr	r3, [sp, #4]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	bf14      	ite	ne
 800fc22:	2102      	movne	r1, #2
 800fc24:	2101      	moveq	r1, #1
 800fc26:	61a3      	str	r3, [r4, #24]
 800fc28:	6121      	str	r1, [r4, #16]
 800fc2a:	b1c5      	cbz	r5, 800fc5e <__d2b+0x96>
 800fc2c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fc30:	4405      	add	r5, r0
 800fc32:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fc36:	603d      	str	r5, [r7, #0]
 800fc38:	6030      	str	r0, [r6, #0]
 800fc3a:	4620      	mov	r0, r4
 800fc3c:	b002      	add	sp, #8
 800fc3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fc46:	e7d6      	b.n	800fbf6 <__d2b+0x2e>
 800fc48:	6161      	str	r1, [r4, #20]
 800fc4a:	e7e7      	b.n	800fc1c <__d2b+0x54>
 800fc4c:	a801      	add	r0, sp, #4
 800fc4e:	f7ff fce7 	bl	800f620 <__lo0bits>
 800fc52:	2101      	movs	r1, #1
 800fc54:	9b01      	ldr	r3, [sp, #4]
 800fc56:	6121      	str	r1, [r4, #16]
 800fc58:	6163      	str	r3, [r4, #20]
 800fc5a:	3020      	adds	r0, #32
 800fc5c:	e7e5      	b.n	800fc2a <__d2b+0x62>
 800fc5e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800fc62:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fc66:	6038      	str	r0, [r7, #0]
 800fc68:	6918      	ldr	r0, [r3, #16]
 800fc6a:	f7ff fcb9 	bl	800f5e0 <__hi0bits>
 800fc6e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800fc72:	6031      	str	r1, [r6, #0]
 800fc74:	e7e1      	b.n	800fc3a <__d2b+0x72>
 800fc76:	bf00      	nop
 800fc78:	08012674 	.word	0x08012674
 800fc7c:	08012768 	.word	0x08012768

0800fc80 <__ratio>:
 800fc80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc84:	4688      	mov	r8, r1
 800fc86:	4669      	mov	r1, sp
 800fc88:	4681      	mov	r9, r0
 800fc8a:	f7ff ff49 	bl	800fb20 <__b2d>
 800fc8e:	460f      	mov	r7, r1
 800fc90:	4604      	mov	r4, r0
 800fc92:	460d      	mov	r5, r1
 800fc94:	4640      	mov	r0, r8
 800fc96:	a901      	add	r1, sp, #4
 800fc98:	f7ff ff42 	bl	800fb20 <__b2d>
 800fc9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fca0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fca4:	468b      	mov	fp, r1
 800fca6:	eba3 0c02 	sub.w	ip, r3, r2
 800fcaa:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fcae:	1a9b      	subs	r3, r3, r2
 800fcb0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	bfd5      	itete	le
 800fcb8:	460a      	movle	r2, r1
 800fcba:	462a      	movgt	r2, r5
 800fcbc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fcc0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fcc4:	bfd8      	it	le
 800fcc6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fcca:	465b      	mov	r3, fp
 800fccc:	4602      	mov	r2, r0
 800fcce:	4639      	mov	r1, r7
 800fcd0:	4620      	mov	r0, r4
 800fcd2:	f7f0 fd97 	bl	8000804 <__aeabi_ddiv>
 800fcd6:	b003      	add	sp, #12
 800fcd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fcdc <__copybits>:
 800fcdc:	3901      	subs	r1, #1
 800fcde:	b570      	push	{r4, r5, r6, lr}
 800fce0:	1149      	asrs	r1, r1, #5
 800fce2:	6914      	ldr	r4, [r2, #16]
 800fce4:	3101      	adds	r1, #1
 800fce6:	f102 0314 	add.w	r3, r2, #20
 800fcea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fcee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fcf2:	1f05      	subs	r5, r0, #4
 800fcf4:	42a3      	cmp	r3, r4
 800fcf6:	d30c      	bcc.n	800fd12 <__copybits+0x36>
 800fcf8:	1aa3      	subs	r3, r4, r2
 800fcfa:	3b11      	subs	r3, #17
 800fcfc:	f023 0303 	bic.w	r3, r3, #3
 800fd00:	3211      	adds	r2, #17
 800fd02:	42a2      	cmp	r2, r4
 800fd04:	bf88      	it	hi
 800fd06:	2300      	movhi	r3, #0
 800fd08:	4418      	add	r0, r3
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	4288      	cmp	r0, r1
 800fd0e:	d305      	bcc.n	800fd1c <__copybits+0x40>
 800fd10:	bd70      	pop	{r4, r5, r6, pc}
 800fd12:	f853 6b04 	ldr.w	r6, [r3], #4
 800fd16:	f845 6f04 	str.w	r6, [r5, #4]!
 800fd1a:	e7eb      	b.n	800fcf4 <__copybits+0x18>
 800fd1c:	f840 3b04 	str.w	r3, [r0], #4
 800fd20:	e7f4      	b.n	800fd0c <__copybits+0x30>

0800fd22 <__any_on>:
 800fd22:	f100 0214 	add.w	r2, r0, #20
 800fd26:	6900      	ldr	r0, [r0, #16]
 800fd28:	114b      	asrs	r3, r1, #5
 800fd2a:	4298      	cmp	r0, r3
 800fd2c:	b510      	push	{r4, lr}
 800fd2e:	db11      	blt.n	800fd54 <__any_on+0x32>
 800fd30:	dd0a      	ble.n	800fd48 <__any_on+0x26>
 800fd32:	f011 011f 	ands.w	r1, r1, #31
 800fd36:	d007      	beq.n	800fd48 <__any_on+0x26>
 800fd38:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fd3c:	fa24 f001 	lsr.w	r0, r4, r1
 800fd40:	fa00 f101 	lsl.w	r1, r0, r1
 800fd44:	428c      	cmp	r4, r1
 800fd46:	d10b      	bne.n	800fd60 <__any_on+0x3e>
 800fd48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fd4c:	4293      	cmp	r3, r2
 800fd4e:	d803      	bhi.n	800fd58 <__any_on+0x36>
 800fd50:	2000      	movs	r0, #0
 800fd52:	bd10      	pop	{r4, pc}
 800fd54:	4603      	mov	r3, r0
 800fd56:	e7f7      	b.n	800fd48 <__any_on+0x26>
 800fd58:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fd5c:	2900      	cmp	r1, #0
 800fd5e:	d0f5      	beq.n	800fd4c <__any_on+0x2a>
 800fd60:	2001      	movs	r0, #1
 800fd62:	e7f6      	b.n	800fd52 <__any_on+0x30>

0800fd64 <_calloc_r>:
 800fd64:	b538      	push	{r3, r4, r5, lr}
 800fd66:	fb02 f501 	mul.w	r5, r2, r1
 800fd6a:	4629      	mov	r1, r5
 800fd6c:	f7fc f924 	bl	800bfb8 <_malloc_r>
 800fd70:	4604      	mov	r4, r0
 800fd72:	b118      	cbz	r0, 800fd7c <_calloc_r+0x18>
 800fd74:	462a      	mov	r2, r5
 800fd76:	2100      	movs	r1, #0
 800fd78:	f7fc f8ca 	bl	800bf10 <memset>
 800fd7c:	4620      	mov	r0, r4
 800fd7e:	bd38      	pop	{r3, r4, r5, pc}

0800fd80 <__ssputs_r>:
 800fd80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd84:	688e      	ldr	r6, [r1, #8]
 800fd86:	4682      	mov	sl, r0
 800fd88:	429e      	cmp	r6, r3
 800fd8a:	460c      	mov	r4, r1
 800fd8c:	4690      	mov	r8, r2
 800fd8e:	461f      	mov	r7, r3
 800fd90:	d838      	bhi.n	800fe04 <__ssputs_r+0x84>
 800fd92:	898a      	ldrh	r2, [r1, #12]
 800fd94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fd98:	d032      	beq.n	800fe00 <__ssputs_r+0x80>
 800fd9a:	6825      	ldr	r5, [r4, #0]
 800fd9c:	6909      	ldr	r1, [r1, #16]
 800fd9e:	3301      	adds	r3, #1
 800fda0:	eba5 0901 	sub.w	r9, r5, r1
 800fda4:	6965      	ldr	r5, [r4, #20]
 800fda6:	444b      	add	r3, r9
 800fda8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fdac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fdb0:	106d      	asrs	r5, r5, #1
 800fdb2:	429d      	cmp	r5, r3
 800fdb4:	bf38      	it	cc
 800fdb6:	461d      	movcc	r5, r3
 800fdb8:	0553      	lsls	r3, r2, #21
 800fdba:	d531      	bpl.n	800fe20 <__ssputs_r+0xa0>
 800fdbc:	4629      	mov	r1, r5
 800fdbe:	f7fc f8fb 	bl	800bfb8 <_malloc_r>
 800fdc2:	4606      	mov	r6, r0
 800fdc4:	b950      	cbnz	r0, 800fddc <__ssputs_r+0x5c>
 800fdc6:	230c      	movs	r3, #12
 800fdc8:	f04f 30ff 	mov.w	r0, #4294967295
 800fdcc:	f8ca 3000 	str.w	r3, [sl]
 800fdd0:	89a3      	ldrh	r3, [r4, #12]
 800fdd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fdd6:	81a3      	strh	r3, [r4, #12]
 800fdd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fddc:	464a      	mov	r2, r9
 800fdde:	6921      	ldr	r1, [r4, #16]
 800fde0:	f7ff faee 	bl	800f3c0 <memcpy>
 800fde4:	89a3      	ldrh	r3, [r4, #12]
 800fde6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fdea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fdee:	81a3      	strh	r3, [r4, #12]
 800fdf0:	6126      	str	r6, [r4, #16]
 800fdf2:	444e      	add	r6, r9
 800fdf4:	6026      	str	r6, [r4, #0]
 800fdf6:	463e      	mov	r6, r7
 800fdf8:	6165      	str	r5, [r4, #20]
 800fdfa:	eba5 0509 	sub.w	r5, r5, r9
 800fdfe:	60a5      	str	r5, [r4, #8]
 800fe00:	42be      	cmp	r6, r7
 800fe02:	d900      	bls.n	800fe06 <__ssputs_r+0x86>
 800fe04:	463e      	mov	r6, r7
 800fe06:	4632      	mov	r2, r6
 800fe08:	4641      	mov	r1, r8
 800fe0a:	6820      	ldr	r0, [r4, #0]
 800fe0c:	f001 f8c8 	bl	8010fa0 <memmove>
 800fe10:	68a3      	ldr	r3, [r4, #8]
 800fe12:	6822      	ldr	r2, [r4, #0]
 800fe14:	1b9b      	subs	r3, r3, r6
 800fe16:	4432      	add	r2, r6
 800fe18:	2000      	movs	r0, #0
 800fe1a:	60a3      	str	r3, [r4, #8]
 800fe1c:	6022      	str	r2, [r4, #0]
 800fe1e:	e7db      	b.n	800fdd8 <__ssputs_r+0x58>
 800fe20:	462a      	mov	r2, r5
 800fe22:	f001 f8d7 	bl	8010fd4 <_realloc_r>
 800fe26:	4606      	mov	r6, r0
 800fe28:	2800      	cmp	r0, #0
 800fe2a:	d1e1      	bne.n	800fdf0 <__ssputs_r+0x70>
 800fe2c:	4650      	mov	r0, sl
 800fe2e:	6921      	ldr	r1, [r4, #16]
 800fe30:	f7fc f876 	bl	800bf20 <_free_r>
 800fe34:	e7c7      	b.n	800fdc6 <__ssputs_r+0x46>
	...

0800fe38 <_svfiprintf_r>:
 800fe38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe3c:	4698      	mov	r8, r3
 800fe3e:	898b      	ldrh	r3, [r1, #12]
 800fe40:	4607      	mov	r7, r0
 800fe42:	061b      	lsls	r3, r3, #24
 800fe44:	460d      	mov	r5, r1
 800fe46:	4614      	mov	r4, r2
 800fe48:	b09d      	sub	sp, #116	; 0x74
 800fe4a:	d50e      	bpl.n	800fe6a <_svfiprintf_r+0x32>
 800fe4c:	690b      	ldr	r3, [r1, #16]
 800fe4e:	b963      	cbnz	r3, 800fe6a <_svfiprintf_r+0x32>
 800fe50:	2140      	movs	r1, #64	; 0x40
 800fe52:	f7fc f8b1 	bl	800bfb8 <_malloc_r>
 800fe56:	6028      	str	r0, [r5, #0]
 800fe58:	6128      	str	r0, [r5, #16]
 800fe5a:	b920      	cbnz	r0, 800fe66 <_svfiprintf_r+0x2e>
 800fe5c:	230c      	movs	r3, #12
 800fe5e:	603b      	str	r3, [r7, #0]
 800fe60:	f04f 30ff 	mov.w	r0, #4294967295
 800fe64:	e0d1      	b.n	801000a <_svfiprintf_r+0x1d2>
 800fe66:	2340      	movs	r3, #64	; 0x40
 800fe68:	616b      	str	r3, [r5, #20]
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	9309      	str	r3, [sp, #36]	; 0x24
 800fe6e:	2320      	movs	r3, #32
 800fe70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fe74:	2330      	movs	r3, #48	; 0x30
 800fe76:	f04f 0901 	mov.w	r9, #1
 800fe7a:	f8cd 800c 	str.w	r8, [sp, #12]
 800fe7e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010024 <_svfiprintf_r+0x1ec>
 800fe82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fe86:	4623      	mov	r3, r4
 800fe88:	469a      	mov	sl, r3
 800fe8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe8e:	b10a      	cbz	r2, 800fe94 <_svfiprintf_r+0x5c>
 800fe90:	2a25      	cmp	r2, #37	; 0x25
 800fe92:	d1f9      	bne.n	800fe88 <_svfiprintf_r+0x50>
 800fe94:	ebba 0b04 	subs.w	fp, sl, r4
 800fe98:	d00b      	beq.n	800feb2 <_svfiprintf_r+0x7a>
 800fe9a:	465b      	mov	r3, fp
 800fe9c:	4622      	mov	r2, r4
 800fe9e:	4629      	mov	r1, r5
 800fea0:	4638      	mov	r0, r7
 800fea2:	f7ff ff6d 	bl	800fd80 <__ssputs_r>
 800fea6:	3001      	adds	r0, #1
 800fea8:	f000 80aa 	beq.w	8010000 <_svfiprintf_r+0x1c8>
 800feac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800feae:	445a      	add	r2, fp
 800feb0:	9209      	str	r2, [sp, #36]	; 0x24
 800feb2:	f89a 3000 	ldrb.w	r3, [sl]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	f000 80a2 	beq.w	8010000 <_svfiprintf_r+0x1c8>
 800febc:	2300      	movs	r3, #0
 800febe:	f04f 32ff 	mov.w	r2, #4294967295
 800fec2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fec6:	f10a 0a01 	add.w	sl, sl, #1
 800feca:	9304      	str	r3, [sp, #16]
 800fecc:	9307      	str	r3, [sp, #28]
 800fece:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fed2:	931a      	str	r3, [sp, #104]	; 0x68
 800fed4:	4654      	mov	r4, sl
 800fed6:	2205      	movs	r2, #5
 800fed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fedc:	4851      	ldr	r0, [pc, #324]	; (8010024 <_svfiprintf_r+0x1ec>)
 800fede:	f7ff fa61 	bl	800f3a4 <memchr>
 800fee2:	9a04      	ldr	r2, [sp, #16]
 800fee4:	b9d8      	cbnz	r0, 800ff1e <_svfiprintf_r+0xe6>
 800fee6:	06d0      	lsls	r0, r2, #27
 800fee8:	bf44      	itt	mi
 800feea:	2320      	movmi	r3, #32
 800feec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fef0:	0711      	lsls	r1, r2, #28
 800fef2:	bf44      	itt	mi
 800fef4:	232b      	movmi	r3, #43	; 0x2b
 800fef6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fefa:	f89a 3000 	ldrb.w	r3, [sl]
 800fefe:	2b2a      	cmp	r3, #42	; 0x2a
 800ff00:	d015      	beq.n	800ff2e <_svfiprintf_r+0xf6>
 800ff02:	4654      	mov	r4, sl
 800ff04:	2000      	movs	r0, #0
 800ff06:	f04f 0c0a 	mov.w	ip, #10
 800ff0a:	9a07      	ldr	r2, [sp, #28]
 800ff0c:	4621      	mov	r1, r4
 800ff0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff12:	3b30      	subs	r3, #48	; 0x30
 800ff14:	2b09      	cmp	r3, #9
 800ff16:	d94e      	bls.n	800ffb6 <_svfiprintf_r+0x17e>
 800ff18:	b1b0      	cbz	r0, 800ff48 <_svfiprintf_r+0x110>
 800ff1a:	9207      	str	r2, [sp, #28]
 800ff1c:	e014      	b.n	800ff48 <_svfiprintf_r+0x110>
 800ff1e:	eba0 0308 	sub.w	r3, r0, r8
 800ff22:	fa09 f303 	lsl.w	r3, r9, r3
 800ff26:	4313      	orrs	r3, r2
 800ff28:	46a2      	mov	sl, r4
 800ff2a:	9304      	str	r3, [sp, #16]
 800ff2c:	e7d2      	b.n	800fed4 <_svfiprintf_r+0x9c>
 800ff2e:	9b03      	ldr	r3, [sp, #12]
 800ff30:	1d19      	adds	r1, r3, #4
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	9103      	str	r1, [sp, #12]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	bfbb      	ittet	lt
 800ff3a:	425b      	neglt	r3, r3
 800ff3c:	f042 0202 	orrlt.w	r2, r2, #2
 800ff40:	9307      	strge	r3, [sp, #28]
 800ff42:	9307      	strlt	r3, [sp, #28]
 800ff44:	bfb8      	it	lt
 800ff46:	9204      	strlt	r2, [sp, #16]
 800ff48:	7823      	ldrb	r3, [r4, #0]
 800ff4a:	2b2e      	cmp	r3, #46	; 0x2e
 800ff4c:	d10c      	bne.n	800ff68 <_svfiprintf_r+0x130>
 800ff4e:	7863      	ldrb	r3, [r4, #1]
 800ff50:	2b2a      	cmp	r3, #42	; 0x2a
 800ff52:	d135      	bne.n	800ffc0 <_svfiprintf_r+0x188>
 800ff54:	9b03      	ldr	r3, [sp, #12]
 800ff56:	3402      	adds	r4, #2
 800ff58:	1d1a      	adds	r2, r3, #4
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	9203      	str	r2, [sp, #12]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	bfb8      	it	lt
 800ff62:	f04f 33ff 	movlt.w	r3, #4294967295
 800ff66:	9305      	str	r3, [sp, #20]
 800ff68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010034 <_svfiprintf_r+0x1fc>
 800ff6c:	2203      	movs	r2, #3
 800ff6e:	4650      	mov	r0, sl
 800ff70:	7821      	ldrb	r1, [r4, #0]
 800ff72:	f7ff fa17 	bl	800f3a4 <memchr>
 800ff76:	b140      	cbz	r0, 800ff8a <_svfiprintf_r+0x152>
 800ff78:	2340      	movs	r3, #64	; 0x40
 800ff7a:	eba0 000a 	sub.w	r0, r0, sl
 800ff7e:	fa03 f000 	lsl.w	r0, r3, r0
 800ff82:	9b04      	ldr	r3, [sp, #16]
 800ff84:	3401      	adds	r4, #1
 800ff86:	4303      	orrs	r3, r0
 800ff88:	9304      	str	r3, [sp, #16]
 800ff8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff8e:	2206      	movs	r2, #6
 800ff90:	4825      	ldr	r0, [pc, #148]	; (8010028 <_svfiprintf_r+0x1f0>)
 800ff92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ff96:	f7ff fa05 	bl	800f3a4 <memchr>
 800ff9a:	2800      	cmp	r0, #0
 800ff9c:	d038      	beq.n	8010010 <_svfiprintf_r+0x1d8>
 800ff9e:	4b23      	ldr	r3, [pc, #140]	; (801002c <_svfiprintf_r+0x1f4>)
 800ffa0:	bb1b      	cbnz	r3, 800ffea <_svfiprintf_r+0x1b2>
 800ffa2:	9b03      	ldr	r3, [sp, #12]
 800ffa4:	3307      	adds	r3, #7
 800ffa6:	f023 0307 	bic.w	r3, r3, #7
 800ffaa:	3308      	adds	r3, #8
 800ffac:	9303      	str	r3, [sp, #12]
 800ffae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffb0:	4433      	add	r3, r6
 800ffb2:	9309      	str	r3, [sp, #36]	; 0x24
 800ffb4:	e767      	b.n	800fe86 <_svfiprintf_r+0x4e>
 800ffb6:	460c      	mov	r4, r1
 800ffb8:	2001      	movs	r0, #1
 800ffba:	fb0c 3202 	mla	r2, ip, r2, r3
 800ffbe:	e7a5      	b.n	800ff0c <_svfiprintf_r+0xd4>
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	f04f 0c0a 	mov.w	ip, #10
 800ffc6:	4619      	mov	r1, r3
 800ffc8:	3401      	adds	r4, #1
 800ffca:	9305      	str	r3, [sp, #20]
 800ffcc:	4620      	mov	r0, r4
 800ffce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ffd2:	3a30      	subs	r2, #48	; 0x30
 800ffd4:	2a09      	cmp	r2, #9
 800ffd6:	d903      	bls.n	800ffe0 <_svfiprintf_r+0x1a8>
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d0c5      	beq.n	800ff68 <_svfiprintf_r+0x130>
 800ffdc:	9105      	str	r1, [sp, #20]
 800ffde:	e7c3      	b.n	800ff68 <_svfiprintf_r+0x130>
 800ffe0:	4604      	mov	r4, r0
 800ffe2:	2301      	movs	r3, #1
 800ffe4:	fb0c 2101 	mla	r1, ip, r1, r2
 800ffe8:	e7f0      	b.n	800ffcc <_svfiprintf_r+0x194>
 800ffea:	ab03      	add	r3, sp, #12
 800ffec:	9300      	str	r3, [sp, #0]
 800ffee:	462a      	mov	r2, r5
 800fff0:	4638      	mov	r0, r7
 800fff2:	4b0f      	ldr	r3, [pc, #60]	; (8010030 <_svfiprintf_r+0x1f8>)
 800fff4:	a904      	add	r1, sp, #16
 800fff6:	f7fc f8d7 	bl	800c1a8 <_printf_float>
 800fffa:	1c42      	adds	r2, r0, #1
 800fffc:	4606      	mov	r6, r0
 800fffe:	d1d6      	bne.n	800ffae <_svfiprintf_r+0x176>
 8010000:	89ab      	ldrh	r3, [r5, #12]
 8010002:	065b      	lsls	r3, r3, #25
 8010004:	f53f af2c 	bmi.w	800fe60 <_svfiprintf_r+0x28>
 8010008:	9809      	ldr	r0, [sp, #36]	; 0x24
 801000a:	b01d      	add	sp, #116	; 0x74
 801000c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010010:	ab03      	add	r3, sp, #12
 8010012:	9300      	str	r3, [sp, #0]
 8010014:	462a      	mov	r2, r5
 8010016:	4638      	mov	r0, r7
 8010018:	4b05      	ldr	r3, [pc, #20]	; (8010030 <_svfiprintf_r+0x1f8>)
 801001a:	a904      	add	r1, sp, #16
 801001c:	f7fc fb60 	bl	800c6e0 <_printf_i>
 8010020:	e7eb      	b.n	800fffa <_svfiprintf_r+0x1c2>
 8010022:	bf00      	nop
 8010024:	080128c4 	.word	0x080128c4
 8010028:	080128ce 	.word	0x080128ce
 801002c:	0800c1a9 	.word	0x0800c1a9
 8010030:	0800fd81 	.word	0x0800fd81
 8010034:	080128ca 	.word	0x080128ca

08010038 <_sungetc_r>:
 8010038:	b538      	push	{r3, r4, r5, lr}
 801003a:	1c4b      	adds	r3, r1, #1
 801003c:	4614      	mov	r4, r2
 801003e:	d103      	bne.n	8010048 <_sungetc_r+0x10>
 8010040:	f04f 35ff 	mov.w	r5, #4294967295
 8010044:	4628      	mov	r0, r5
 8010046:	bd38      	pop	{r3, r4, r5, pc}
 8010048:	8993      	ldrh	r3, [r2, #12]
 801004a:	b2cd      	uxtb	r5, r1
 801004c:	f023 0320 	bic.w	r3, r3, #32
 8010050:	8193      	strh	r3, [r2, #12]
 8010052:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010054:	6852      	ldr	r2, [r2, #4]
 8010056:	b18b      	cbz	r3, 801007c <_sungetc_r+0x44>
 8010058:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801005a:	4293      	cmp	r3, r2
 801005c:	dd08      	ble.n	8010070 <_sungetc_r+0x38>
 801005e:	6823      	ldr	r3, [r4, #0]
 8010060:	1e5a      	subs	r2, r3, #1
 8010062:	6022      	str	r2, [r4, #0]
 8010064:	f803 5c01 	strb.w	r5, [r3, #-1]
 8010068:	6863      	ldr	r3, [r4, #4]
 801006a:	3301      	adds	r3, #1
 801006c:	6063      	str	r3, [r4, #4]
 801006e:	e7e9      	b.n	8010044 <_sungetc_r+0xc>
 8010070:	4621      	mov	r1, r4
 8010072:	f000 fd39 	bl	8010ae8 <__submore>
 8010076:	2800      	cmp	r0, #0
 8010078:	d0f1      	beq.n	801005e <_sungetc_r+0x26>
 801007a:	e7e1      	b.n	8010040 <_sungetc_r+0x8>
 801007c:	6921      	ldr	r1, [r4, #16]
 801007e:	6823      	ldr	r3, [r4, #0]
 8010080:	b151      	cbz	r1, 8010098 <_sungetc_r+0x60>
 8010082:	4299      	cmp	r1, r3
 8010084:	d208      	bcs.n	8010098 <_sungetc_r+0x60>
 8010086:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801008a:	42a9      	cmp	r1, r5
 801008c:	d104      	bne.n	8010098 <_sungetc_r+0x60>
 801008e:	3b01      	subs	r3, #1
 8010090:	3201      	adds	r2, #1
 8010092:	6023      	str	r3, [r4, #0]
 8010094:	6062      	str	r2, [r4, #4]
 8010096:	e7d5      	b.n	8010044 <_sungetc_r+0xc>
 8010098:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801009c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80100a0:	6363      	str	r3, [r4, #52]	; 0x34
 80100a2:	2303      	movs	r3, #3
 80100a4:	63a3      	str	r3, [r4, #56]	; 0x38
 80100a6:	4623      	mov	r3, r4
 80100a8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80100ac:	6023      	str	r3, [r4, #0]
 80100ae:	2301      	movs	r3, #1
 80100b0:	e7dc      	b.n	801006c <_sungetc_r+0x34>

080100b2 <__ssrefill_r>:
 80100b2:	b510      	push	{r4, lr}
 80100b4:	460c      	mov	r4, r1
 80100b6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80100b8:	b169      	cbz	r1, 80100d6 <__ssrefill_r+0x24>
 80100ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80100be:	4299      	cmp	r1, r3
 80100c0:	d001      	beq.n	80100c6 <__ssrefill_r+0x14>
 80100c2:	f7fb ff2d 	bl	800bf20 <_free_r>
 80100c6:	2000      	movs	r0, #0
 80100c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80100ca:	6360      	str	r0, [r4, #52]	; 0x34
 80100cc:	6063      	str	r3, [r4, #4]
 80100ce:	b113      	cbz	r3, 80100d6 <__ssrefill_r+0x24>
 80100d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80100d2:	6023      	str	r3, [r4, #0]
 80100d4:	bd10      	pop	{r4, pc}
 80100d6:	6923      	ldr	r3, [r4, #16]
 80100d8:	f04f 30ff 	mov.w	r0, #4294967295
 80100dc:	6023      	str	r3, [r4, #0]
 80100de:	2300      	movs	r3, #0
 80100e0:	6063      	str	r3, [r4, #4]
 80100e2:	89a3      	ldrh	r3, [r4, #12]
 80100e4:	f043 0320 	orr.w	r3, r3, #32
 80100e8:	81a3      	strh	r3, [r4, #12]
 80100ea:	e7f3      	b.n	80100d4 <__ssrefill_r+0x22>

080100ec <__ssvfiscanf_r>:
 80100ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100f0:	460c      	mov	r4, r1
 80100f2:	2100      	movs	r1, #0
 80100f4:	4606      	mov	r6, r0
 80100f6:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80100fa:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80100fe:	49b3      	ldr	r1, [pc, #716]	; (80103cc <__ssvfiscanf_r+0x2e0>)
 8010100:	f10d 0804 	add.w	r8, sp, #4
 8010104:	91a0      	str	r1, [sp, #640]	; 0x280
 8010106:	49b2      	ldr	r1, [pc, #712]	; (80103d0 <__ssvfiscanf_r+0x2e4>)
 8010108:	4fb2      	ldr	r7, [pc, #712]	; (80103d4 <__ssvfiscanf_r+0x2e8>)
 801010a:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 80103d8 <__ssvfiscanf_r+0x2ec>
 801010e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8010112:	91a1      	str	r1, [sp, #644]	; 0x284
 8010114:	9300      	str	r3, [sp, #0]
 8010116:	f892 a000 	ldrb.w	sl, [r2]
 801011a:	f1ba 0f00 	cmp.w	sl, #0
 801011e:	f000 8153 	beq.w	80103c8 <__ssvfiscanf_r+0x2dc>
 8010122:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8010126:	1c55      	adds	r5, r2, #1
 8010128:	f013 0308 	ands.w	r3, r3, #8
 801012c:	d019      	beq.n	8010162 <__ssvfiscanf_r+0x76>
 801012e:	6863      	ldr	r3, [r4, #4]
 8010130:	2b00      	cmp	r3, #0
 8010132:	dd0f      	ble.n	8010154 <__ssvfiscanf_r+0x68>
 8010134:	6823      	ldr	r3, [r4, #0]
 8010136:	781a      	ldrb	r2, [r3, #0]
 8010138:	5cba      	ldrb	r2, [r7, r2]
 801013a:	0712      	lsls	r2, r2, #28
 801013c:	d401      	bmi.n	8010142 <__ssvfiscanf_r+0x56>
 801013e:	462a      	mov	r2, r5
 8010140:	e7e9      	b.n	8010116 <__ssvfiscanf_r+0x2a>
 8010142:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010144:	3301      	adds	r3, #1
 8010146:	3201      	adds	r2, #1
 8010148:	9245      	str	r2, [sp, #276]	; 0x114
 801014a:	6862      	ldr	r2, [r4, #4]
 801014c:	6023      	str	r3, [r4, #0]
 801014e:	3a01      	subs	r2, #1
 8010150:	6062      	str	r2, [r4, #4]
 8010152:	e7ec      	b.n	801012e <__ssvfiscanf_r+0x42>
 8010154:	4621      	mov	r1, r4
 8010156:	4630      	mov	r0, r6
 8010158:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801015a:	4798      	blx	r3
 801015c:	2800      	cmp	r0, #0
 801015e:	d0e9      	beq.n	8010134 <__ssvfiscanf_r+0x48>
 8010160:	e7ed      	b.n	801013e <__ssvfiscanf_r+0x52>
 8010162:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8010166:	f040 8086 	bne.w	8010276 <__ssvfiscanf_r+0x18a>
 801016a:	9341      	str	r3, [sp, #260]	; 0x104
 801016c:	9343      	str	r3, [sp, #268]	; 0x10c
 801016e:	7853      	ldrb	r3, [r2, #1]
 8010170:	2b2a      	cmp	r3, #42	; 0x2a
 8010172:	bf04      	itt	eq
 8010174:	2310      	moveq	r3, #16
 8010176:	1c95      	addeq	r5, r2, #2
 8010178:	f04f 020a 	mov.w	r2, #10
 801017c:	bf08      	it	eq
 801017e:	9341      	streq	r3, [sp, #260]	; 0x104
 8010180:	46ab      	mov	fp, r5
 8010182:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8010186:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801018a:	2b09      	cmp	r3, #9
 801018c:	d91d      	bls.n	80101ca <__ssvfiscanf_r+0xde>
 801018e:	2203      	movs	r2, #3
 8010190:	4891      	ldr	r0, [pc, #580]	; (80103d8 <__ssvfiscanf_r+0x2ec>)
 8010192:	f7ff f907 	bl	800f3a4 <memchr>
 8010196:	b140      	cbz	r0, 80101aa <__ssvfiscanf_r+0xbe>
 8010198:	2301      	movs	r3, #1
 801019a:	465d      	mov	r5, fp
 801019c:	eba0 0009 	sub.w	r0, r0, r9
 80101a0:	fa03 f000 	lsl.w	r0, r3, r0
 80101a4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80101a6:	4318      	orrs	r0, r3
 80101a8:	9041      	str	r0, [sp, #260]	; 0x104
 80101aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80101ae:	2b78      	cmp	r3, #120	; 0x78
 80101b0:	d806      	bhi.n	80101c0 <__ssvfiscanf_r+0xd4>
 80101b2:	2b57      	cmp	r3, #87	; 0x57
 80101b4:	d810      	bhi.n	80101d8 <__ssvfiscanf_r+0xec>
 80101b6:	2b25      	cmp	r3, #37	; 0x25
 80101b8:	d05d      	beq.n	8010276 <__ssvfiscanf_r+0x18a>
 80101ba:	d857      	bhi.n	801026c <__ssvfiscanf_r+0x180>
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d075      	beq.n	80102ac <__ssvfiscanf_r+0x1c0>
 80101c0:	2303      	movs	r3, #3
 80101c2:	9347      	str	r3, [sp, #284]	; 0x11c
 80101c4:	230a      	movs	r3, #10
 80101c6:	9342      	str	r3, [sp, #264]	; 0x108
 80101c8:	e082      	b.n	80102d0 <__ssvfiscanf_r+0x1e4>
 80101ca:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80101cc:	465d      	mov	r5, fp
 80101ce:	fb02 1303 	mla	r3, r2, r3, r1
 80101d2:	3b30      	subs	r3, #48	; 0x30
 80101d4:	9343      	str	r3, [sp, #268]	; 0x10c
 80101d6:	e7d3      	b.n	8010180 <__ssvfiscanf_r+0x94>
 80101d8:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80101dc:	2a20      	cmp	r2, #32
 80101de:	d8ef      	bhi.n	80101c0 <__ssvfiscanf_r+0xd4>
 80101e0:	a101      	add	r1, pc, #4	; (adr r1, 80101e8 <__ssvfiscanf_r+0xfc>)
 80101e2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80101e6:	bf00      	nop
 80101e8:	080102bb 	.word	0x080102bb
 80101ec:	080101c1 	.word	0x080101c1
 80101f0:	080101c1 	.word	0x080101c1
 80101f4:	08010319 	.word	0x08010319
 80101f8:	080101c1 	.word	0x080101c1
 80101fc:	080101c1 	.word	0x080101c1
 8010200:	080101c1 	.word	0x080101c1
 8010204:	080101c1 	.word	0x080101c1
 8010208:	080101c1 	.word	0x080101c1
 801020c:	080101c1 	.word	0x080101c1
 8010210:	080101c1 	.word	0x080101c1
 8010214:	0801032f 	.word	0x0801032f
 8010218:	08010305 	.word	0x08010305
 801021c:	08010273 	.word	0x08010273
 8010220:	08010273 	.word	0x08010273
 8010224:	08010273 	.word	0x08010273
 8010228:	080101c1 	.word	0x080101c1
 801022c:	08010309 	.word	0x08010309
 8010230:	080101c1 	.word	0x080101c1
 8010234:	080101c1 	.word	0x080101c1
 8010238:	080101c1 	.word	0x080101c1
 801023c:	080101c1 	.word	0x080101c1
 8010240:	0801033f 	.word	0x0801033f
 8010244:	08010311 	.word	0x08010311
 8010248:	080102b3 	.word	0x080102b3
 801024c:	080101c1 	.word	0x080101c1
 8010250:	080101c1 	.word	0x080101c1
 8010254:	0801033b 	.word	0x0801033b
 8010258:	080101c1 	.word	0x080101c1
 801025c:	08010305 	.word	0x08010305
 8010260:	080101c1 	.word	0x080101c1
 8010264:	080101c1 	.word	0x080101c1
 8010268:	080102bb 	.word	0x080102bb
 801026c:	3b45      	subs	r3, #69	; 0x45
 801026e:	2b02      	cmp	r3, #2
 8010270:	d8a6      	bhi.n	80101c0 <__ssvfiscanf_r+0xd4>
 8010272:	2305      	movs	r3, #5
 8010274:	e02b      	b.n	80102ce <__ssvfiscanf_r+0x1e2>
 8010276:	6863      	ldr	r3, [r4, #4]
 8010278:	2b00      	cmp	r3, #0
 801027a:	dd0d      	ble.n	8010298 <__ssvfiscanf_r+0x1ac>
 801027c:	6823      	ldr	r3, [r4, #0]
 801027e:	781a      	ldrb	r2, [r3, #0]
 8010280:	4552      	cmp	r2, sl
 8010282:	f040 80a1 	bne.w	80103c8 <__ssvfiscanf_r+0x2dc>
 8010286:	3301      	adds	r3, #1
 8010288:	6862      	ldr	r2, [r4, #4]
 801028a:	6023      	str	r3, [r4, #0]
 801028c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801028e:	3a01      	subs	r2, #1
 8010290:	3301      	adds	r3, #1
 8010292:	6062      	str	r2, [r4, #4]
 8010294:	9345      	str	r3, [sp, #276]	; 0x114
 8010296:	e752      	b.n	801013e <__ssvfiscanf_r+0x52>
 8010298:	4621      	mov	r1, r4
 801029a:	4630      	mov	r0, r6
 801029c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801029e:	4798      	blx	r3
 80102a0:	2800      	cmp	r0, #0
 80102a2:	d0eb      	beq.n	801027c <__ssvfiscanf_r+0x190>
 80102a4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80102a6:	2800      	cmp	r0, #0
 80102a8:	f040 8084 	bne.w	80103b4 <__ssvfiscanf_r+0x2c8>
 80102ac:	f04f 30ff 	mov.w	r0, #4294967295
 80102b0:	e086      	b.n	80103c0 <__ssvfiscanf_r+0x2d4>
 80102b2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80102b4:	f042 0220 	orr.w	r2, r2, #32
 80102b8:	9241      	str	r2, [sp, #260]	; 0x104
 80102ba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80102bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80102c0:	9241      	str	r2, [sp, #260]	; 0x104
 80102c2:	2210      	movs	r2, #16
 80102c4:	2b6f      	cmp	r3, #111	; 0x6f
 80102c6:	bf34      	ite	cc
 80102c8:	2303      	movcc	r3, #3
 80102ca:	2304      	movcs	r3, #4
 80102cc:	9242      	str	r2, [sp, #264]	; 0x108
 80102ce:	9347      	str	r3, [sp, #284]	; 0x11c
 80102d0:	6863      	ldr	r3, [r4, #4]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	dd41      	ble.n	801035a <__ssvfiscanf_r+0x26e>
 80102d6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80102d8:	0659      	lsls	r1, r3, #25
 80102da:	d404      	bmi.n	80102e6 <__ssvfiscanf_r+0x1fa>
 80102dc:	6823      	ldr	r3, [r4, #0]
 80102de:	781a      	ldrb	r2, [r3, #0]
 80102e0:	5cba      	ldrb	r2, [r7, r2]
 80102e2:	0712      	lsls	r2, r2, #28
 80102e4:	d440      	bmi.n	8010368 <__ssvfiscanf_r+0x27c>
 80102e6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80102e8:	2b02      	cmp	r3, #2
 80102ea:	dc4f      	bgt.n	801038c <__ssvfiscanf_r+0x2a0>
 80102ec:	466b      	mov	r3, sp
 80102ee:	4622      	mov	r2, r4
 80102f0:	4630      	mov	r0, r6
 80102f2:	a941      	add	r1, sp, #260	; 0x104
 80102f4:	f000 f9cc 	bl	8010690 <_scanf_chars>
 80102f8:	2801      	cmp	r0, #1
 80102fa:	d065      	beq.n	80103c8 <__ssvfiscanf_r+0x2dc>
 80102fc:	2802      	cmp	r0, #2
 80102fe:	f47f af1e 	bne.w	801013e <__ssvfiscanf_r+0x52>
 8010302:	e7cf      	b.n	80102a4 <__ssvfiscanf_r+0x1b8>
 8010304:	220a      	movs	r2, #10
 8010306:	e7dd      	b.n	80102c4 <__ssvfiscanf_r+0x1d8>
 8010308:	2300      	movs	r3, #0
 801030a:	9342      	str	r3, [sp, #264]	; 0x108
 801030c:	2303      	movs	r3, #3
 801030e:	e7de      	b.n	80102ce <__ssvfiscanf_r+0x1e2>
 8010310:	2308      	movs	r3, #8
 8010312:	9342      	str	r3, [sp, #264]	; 0x108
 8010314:	2304      	movs	r3, #4
 8010316:	e7da      	b.n	80102ce <__ssvfiscanf_r+0x1e2>
 8010318:	4629      	mov	r1, r5
 801031a:	4640      	mov	r0, r8
 801031c:	f000 fb1a 	bl	8010954 <__sccl>
 8010320:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010322:	4605      	mov	r5, r0
 8010324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010328:	9341      	str	r3, [sp, #260]	; 0x104
 801032a:	2301      	movs	r3, #1
 801032c:	e7cf      	b.n	80102ce <__ssvfiscanf_r+0x1e2>
 801032e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010334:	9341      	str	r3, [sp, #260]	; 0x104
 8010336:	2300      	movs	r3, #0
 8010338:	e7c9      	b.n	80102ce <__ssvfiscanf_r+0x1e2>
 801033a:	2302      	movs	r3, #2
 801033c:	e7c7      	b.n	80102ce <__ssvfiscanf_r+0x1e2>
 801033e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8010340:	06c3      	lsls	r3, r0, #27
 8010342:	f53f aefc 	bmi.w	801013e <__ssvfiscanf_r+0x52>
 8010346:	9b00      	ldr	r3, [sp, #0]
 8010348:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801034a:	1d19      	adds	r1, r3, #4
 801034c:	9100      	str	r1, [sp, #0]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	07c0      	lsls	r0, r0, #31
 8010352:	bf4c      	ite	mi
 8010354:	801a      	strhmi	r2, [r3, #0]
 8010356:	601a      	strpl	r2, [r3, #0]
 8010358:	e6f1      	b.n	801013e <__ssvfiscanf_r+0x52>
 801035a:	4621      	mov	r1, r4
 801035c:	4630      	mov	r0, r6
 801035e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010360:	4798      	blx	r3
 8010362:	2800      	cmp	r0, #0
 8010364:	d0b7      	beq.n	80102d6 <__ssvfiscanf_r+0x1ea>
 8010366:	e79d      	b.n	80102a4 <__ssvfiscanf_r+0x1b8>
 8010368:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801036a:	3201      	adds	r2, #1
 801036c:	9245      	str	r2, [sp, #276]	; 0x114
 801036e:	6862      	ldr	r2, [r4, #4]
 8010370:	3a01      	subs	r2, #1
 8010372:	2a00      	cmp	r2, #0
 8010374:	6062      	str	r2, [r4, #4]
 8010376:	dd02      	ble.n	801037e <__ssvfiscanf_r+0x292>
 8010378:	3301      	adds	r3, #1
 801037a:	6023      	str	r3, [r4, #0]
 801037c:	e7ae      	b.n	80102dc <__ssvfiscanf_r+0x1f0>
 801037e:	4621      	mov	r1, r4
 8010380:	4630      	mov	r0, r6
 8010382:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010384:	4798      	blx	r3
 8010386:	2800      	cmp	r0, #0
 8010388:	d0a8      	beq.n	80102dc <__ssvfiscanf_r+0x1f0>
 801038a:	e78b      	b.n	80102a4 <__ssvfiscanf_r+0x1b8>
 801038c:	2b04      	cmp	r3, #4
 801038e:	dc06      	bgt.n	801039e <__ssvfiscanf_r+0x2b2>
 8010390:	466b      	mov	r3, sp
 8010392:	4622      	mov	r2, r4
 8010394:	4630      	mov	r0, r6
 8010396:	a941      	add	r1, sp, #260	; 0x104
 8010398:	f000 f9d2 	bl	8010740 <_scanf_i>
 801039c:	e7ac      	b.n	80102f8 <__ssvfiscanf_r+0x20c>
 801039e:	4b0f      	ldr	r3, [pc, #60]	; (80103dc <__ssvfiscanf_r+0x2f0>)
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	f43f aecc 	beq.w	801013e <__ssvfiscanf_r+0x52>
 80103a6:	466b      	mov	r3, sp
 80103a8:	4622      	mov	r2, r4
 80103aa:	4630      	mov	r0, r6
 80103ac:	a941      	add	r1, sp, #260	; 0x104
 80103ae:	f7fc fabd 	bl	800c92c <_scanf_float>
 80103b2:	e7a1      	b.n	80102f8 <__ssvfiscanf_r+0x20c>
 80103b4:	89a3      	ldrh	r3, [r4, #12]
 80103b6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80103ba:	bf18      	it	ne
 80103bc:	f04f 30ff 	movne.w	r0, #4294967295
 80103c0:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80103c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103c8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80103ca:	e7f9      	b.n	80103c0 <__ssvfiscanf_r+0x2d4>
 80103cc:	08010039 	.word	0x08010039
 80103d0:	080100b3 	.word	0x080100b3
 80103d4:	080124f1 	.word	0x080124f1
 80103d8:	080128ca 	.word	0x080128ca
 80103dc:	0800c92d 	.word	0x0800c92d

080103e0 <__sfputc_r>:
 80103e0:	6893      	ldr	r3, [r2, #8]
 80103e2:	b410      	push	{r4}
 80103e4:	3b01      	subs	r3, #1
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	6093      	str	r3, [r2, #8]
 80103ea:	da07      	bge.n	80103fc <__sfputc_r+0x1c>
 80103ec:	6994      	ldr	r4, [r2, #24]
 80103ee:	42a3      	cmp	r3, r4
 80103f0:	db01      	blt.n	80103f6 <__sfputc_r+0x16>
 80103f2:	290a      	cmp	r1, #10
 80103f4:	d102      	bne.n	80103fc <__sfputc_r+0x1c>
 80103f6:	bc10      	pop	{r4}
 80103f8:	f000 bbae 	b.w	8010b58 <__swbuf_r>
 80103fc:	6813      	ldr	r3, [r2, #0]
 80103fe:	1c58      	adds	r0, r3, #1
 8010400:	6010      	str	r0, [r2, #0]
 8010402:	7019      	strb	r1, [r3, #0]
 8010404:	4608      	mov	r0, r1
 8010406:	bc10      	pop	{r4}
 8010408:	4770      	bx	lr

0801040a <__sfputs_r>:
 801040a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801040c:	4606      	mov	r6, r0
 801040e:	460f      	mov	r7, r1
 8010410:	4614      	mov	r4, r2
 8010412:	18d5      	adds	r5, r2, r3
 8010414:	42ac      	cmp	r4, r5
 8010416:	d101      	bne.n	801041c <__sfputs_r+0x12>
 8010418:	2000      	movs	r0, #0
 801041a:	e007      	b.n	801042c <__sfputs_r+0x22>
 801041c:	463a      	mov	r2, r7
 801041e:	4630      	mov	r0, r6
 8010420:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010424:	f7ff ffdc 	bl	80103e0 <__sfputc_r>
 8010428:	1c43      	adds	r3, r0, #1
 801042a:	d1f3      	bne.n	8010414 <__sfputs_r+0xa>
 801042c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010430 <_vfiprintf_r>:
 8010430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010434:	460d      	mov	r5, r1
 8010436:	4614      	mov	r4, r2
 8010438:	4698      	mov	r8, r3
 801043a:	4606      	mov	r6, r0
 801043c:	b09d      	sub	sp, #116	; 0x74
 801043e:	b118      	cbz	r0, 8010448 <_vfiprintf_r+0x18>
 8010440:	6983      	ldr	r3, [r0, #24]
 8010442:	b90b      	cbnz	r3, 8010448 <_vfiprintf_r+0x18>
 8010444:	f7fe fb7e 	bl	800eb44 <__sinit>
 8010448:	4b89      	ldr	r3, [pc, #548]	; (8010670 <_vfiprintf_r+0x240>)
 801044a:	429d      	cmp	r5, r3
 801044c:	d11b      	bne.n	8010486 <_vfiprintf_r+0x56>
 801044e:	6875      	ldr	r5, [r6, #4]
 8010450:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010452:	07d9      	lsls	r1, r3, #31
 8010454:	d405      	bmi.n	8010462 <_vfiprintf_r+0x32>
 8010456:	89ab      	ldrh	r3, [r5, #12]
 8010458:	059a      	lsls	r2, r3, #22
 801045a:	d402      	bmi.n	8010462 <_vfiprintf_r+0x32>
 801045c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801045e:	f7fe ff7a 	bl	800f356 <__retarget_lock_acquire_recursive>
 8010462:	89ab      	ldrh	r3, [r5, #12]
 8010464:	071b      	lsls	r3, r3, #28
 8010466:	d501      	bpl.n	801046c <_vfiprintf_r+0x3c>
 8010468:	692b      	ldr	r3, [r5, #16]
 801046a:	b9eb      	cbnz	r3, 80104a8 <_vfiprintf_r+0x78>
 801046c:	4629      	mov	r1, r5
 801046e:	4630      	mov	r0, r6
 8010470:	f000 fbd2 	bl	8010c18 <__swsetup_r>
 8010474:	b1c0      	cbz	r0, 80104a8 <_vfiprintf_r+0x78>
 8010476:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010478:	07dc      	lsls	r4, r3, #31
 801047a:	d50e      	bpl.n	801049a <_vfiprintf_r+0x6a>
 801047c:	f04f 30ff 	mov.w	r0, #4294967295
 8010480:	b01d      	add	sp, #116	; 0x74
 8010482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010486:	4b7b      	ldr	r3, [pc, #492]	; (8010674 <_vfiprintf_r+0x244>)
 8010488:	429d      	cmp	r5, r3
 801048a:	d101      	bne.n	8010490 <_vfiprintf_r+0x60>
 801048c:	68b5      	ldr	r5, [r6, #8]
 801048e:	e7df      	b.n	8010450 <_vfiprintf_r+0x20>
 8010490:	4b79      	ldr	r3, [pc, #484]	; (8010678 <_vfiprintf_r+0x248>)
 8010492:	429d      	cmp	r5, r3
 8010494:	bf08      	it	eq
 8010496:	68f5      	ldreq	r5, [r6, #12]
 8010498:	e7da      	b.n	8010450 <_vfiprintf_r+0x20>
 801049a:	89ab      	ldrh	r3, [r5, #12]
 801049c:	0598      	lsls	r0, r3, #22
 801049e:	d4ed      	bmi.n	801047c <_vfiprintf_r+0x4c>
 80104a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80104a2:	f7fe ff59 	bl	800f358 <__retarget_lock_release_recursive>
 80104a6:	e7e9      	b.n	801047c <_vfiprintf_r+0x4c>
 80104a8:	2300      	movs	r3, #0
 80104aa:	9309      	str	r3, [sp, #36]	; 0x24
 80104ac:	2320      	movs	r3, #32
 80104ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80104b2:	2330      	movs	r3, #48	; 0x30
 80104b4:	f04f 0901 	mov.w	r9, #1
 80104b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80104bc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 801067c <_vfiprintf_r+0x24c>
 80104c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80104c4:	4623      	mov	r3, r4
 80104c6:	469a      	mov	sl, r3
 80104c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104cc:	b10a      	cbz	r2, 80104d2 <_vfiprintf_r+0xa2>
 80104ce:	2a25      	cmp	r2, #37	; 0x25
 80104d0:	d1f9      	bne.n	80104c6 <_vfiprintf_r+0x96>
 80104d2:	ebba 0b04 	subs.w	fp, sl, r4
 80104d6:	d00b      	beq.n	80104f0 <_vfiprintf_r+0xc0>
 80104d8:	465b      	mov	r3, fp
 80104da:	4622      	mov	r2, r4
 80104dc:	4629      	mov	r1, r5
 80104de:	4630      	mov	r0, r6
 80104e0:	f7ff ff93 	bl	801040a <__sfputs_r>
 80104e4:	3001      	adds	r0, #1
 80104e6:	f000 80aa 	beq.w	801063e <_vfiprintf_r+0x20e>
 80104ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80104ec:	445a      	add	r2, fp
 80104ee:	9209      	str	r2, [sp, #36]	; 0x24
 80104f0:	f89a 3000 	ldrb.w	r3, [sl]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	f000 80a2 	beq.w	801063e <_vfiprintf_r+0x20e>
 80104fa:	2300      	movs	r3, #0
 80104fc:	f04f 32ff 	mov.w	r2, #4294967295
 8010500:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010504:	f10a 0a01 	add.w	sl, sl, #1
 8010508:	9304      	str	r3, [sp, #16]
 801050a:	9307      	str	r3, [sp, #28]
 801050c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010510:	931a      	str	r3, [sp, #104]	; 0x68
 8010512:	4654      	mov	r4, sl
 8010514:	2205      	movs	r2, #5
 8010516:	f814 1b01 	ldrb.w	r1, [r4], #1
 801051a:	4858      	ldr	r0, [pc, #352]	; (801067c <_vfiprintf_r+0x24c>)
 801051c:	f7fe ff42 	bl	800f3a4 <memchr>
 8010520:	9a04      	ldr	r2, [sp, #16]
 8010522:	b9d8      	cbnz	r0, 801055c <_vfiprintf_r+0x12c>
 8010524:	06d1      	lsls	r1, r2, #27
 8010526:	bf44      	itt	mi
 8010528:	2320      	movmi	r3, #32
 801052a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801052e:	0713      	lsls	r3, r2, #28
 8010530:	bf44      	itt	mi
 8010532:	232b      	movmi	r3, #43	; 0x2b
 8010534:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010538:	f89a 3000 	ldrb.w	r3, [sl]
 801053c:	2b2a      	cmp	r3, #42	; 0x2a
 801053e:	d015      	beq.n	801056c <_vfiprintf_r+0x13c>
 8010540:	4654      	mov	r4, sl
 8010542:	2000      	movs	r0, #0
 8010544:	f04f 0c0a 	mov.w	ip, #10
 8010548:	9a07      	ldr	r2, [sp, #28]
 801054a:	4621      	mov	r1, r4
 801054c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010550:	3b30      	subs	r3, #48	; 0x30
 8010552:	2b09      	cmp	r3, #9
 8010554:	d94e      	bls.n	80105f4 <_vfiprintf_r+0x1c4>
 8010556:	b1b0      	cbz	r0, 8010586 <_vfiprintf_r+0x156>
 8010558:	9207      	str	r2, [sp, #28]
 801055a:	e014      	b.n	8010586 <_vfiprintf_r+0x156>
 801055c:	eba0 0308 	sub.w	r3, r0, r8
 8010560:	fa09 f303 	lsl.w	r3, r9, r3
 8010564:	4313      	orrs	r3, r2
 8010566:	46a2      	mov	sl, r4
 8010568:	9304      	str	r3, [sp, #16]
 801056a:	e7d2      	b.n	8010512 <_vfiprintf_r+0xe2>
 801056c:	9b03      	ldr	r3, [sp, #12]
 801056e:	1d19      	adds	r1, r3, #4
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	9103      	str	r1, [sp, #12]
 8010574:	2b00      	cmp	r3, #0
 8010576:	bfbb      	ittet	lt
 8010578:	425b      	neglt	r3, r3
 801057a:	f042 0202 	orrlt.w	r2, r2, #2
 801057e:	9307      	strge	r3, [sp, #28]
 8010580:	9307      	strlt	r3, [sp, #28]
 8010582:	bfb8      	it	lt
 8010584:	9204      	strlt	r2, [sp, #16]
 8010586:	7823      	ldrb	r3, [r4, #0]
 8010588:	2b2e      	cmp	r3, #46	; 0x2e
 801058a:	d10c      	bne.n	80105a6 <_vfiprintf_r+0x176>
 801058c:	7863      	ldrb	r3, [r4, #1]
 801058e:	2b2a      	cmp	r3, #42	; 0x2a
 8010590:	d135      	bne.n	80105fe <_vfiprintf_r+0x1ce>
 8010592:	9b03      	ldr	r3, [sp, #12]
 8010594:	3402      	adds	r4, #2
 8010596:	1d1a      	adds	r2, r3, #4
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	9203      	str	r2, [sp, #12]
 801059c:	2b00      	cmp	r3, #0
 801059e:	bfb8      	it	lt
 80105a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80105a4:	9305      	str	r3, [sp, #20]
 80105a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801068c <_vfiprintf_r+0x25c>
 80105aa:	2203      	movs	r2, #3
 80105ac:	4650      	mov	r0, sl
 80105ae:	7821      	ldrb	r1, [r4, #0]
 80105b0:	f7fe fef8 	bl	800f3a4 <memchr>
 80105b4:	b140      	cbz	r0, 80105c8 <_vfiprintf_r+0x198>
 80105b6:	2340      	movs	r3, #64	; 0x40
 80105b8:	eba0 000a 	sub.w	r0, r0, sl
 80105bc:	fa03 f000 	lsl.w	r0, r3, r0
 80105c0:	9b04      	ldr	r3, [sp, #16]
 80105c2:	3401      	adds	r4, #1
 80105c4:	4303      	orrs	r3, r0
 80105c6:	9304      	str	r3, [sp, #16]
 80105c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105cc:	2206      	movs	r2, #6
 80105ce:	482c      	ldr	r0, [pc, #176]	; (8010680 <_vfiprintf_r+0x250>)
 80105d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80105d4:	f7fe fee6 	bl	800f3a4 <memchr>
 80105d8:	2800      	cmp	r0, #0
 80105da:	d03f      	beq.n	801065c <_vfiprintf_r+0x22c>
 80105dc:	4b29      	ldr	r3, [pc, #164]	; (8010684 <_vfiprintf_r+0x254>)
 80105de:	bb1b      	cbnz	r3, 8010628 <_vfiprintf_r+0x1f8>
 80105e0:	9b03      	ldr	r3, [sp, #12]
 80105e2:	3307      	adds	r3, #7
 80105e4:	f023 0307 	bic.w	r3, r3, #7
 80105e8:	3308      	adds	r3, #8
 80105ea:	9303      	str	r3, [sp, #12]
 80105ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105ee:	443b      	add	r3, r7
 80105f0:	9309      	str	r3, [sp, #36]	; 0x24
 80105f2:	e767      	b.n	80104c4 <_vfiprintf_r+0x94>
 80105f4:	460c      	mov	r4, r1
 80105f6:	2001      	movs	r0, #1
 80105f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80105fc:	e7a5      	b.n	801054a <_vfiprintf_r+0x11a>
 80105fe:	2300      	movs	r3, #0
 8010600:	f04f 0c0a 	mov.w	ip, #10
 8010604:	4619      	mov	r1, r3
 8010606:	3401      	adds	r4, #1
 8010608:	9305      	str	r3, [sp, #20]
 801060a:	4620      	mov	r0, r4
 801060c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010610:	3a30      	subs	r2, #48	; 0x30
 8010612:	2a09      	cmp	r2, #9
 8010614:	d903      	bls.n	801061e <_vfiprintf_r+0x1ee>
 8010616:	2b00      	cmp	r3, #0
 8010618:	d0c5      	beq.n	80105a6 <_vfiprintf_r+0x176>
 801061a:	9105      	str	r1, [sp, #20]
 801061c:	e7c3      	b.n	80105a6 <_vfiprintf_r+0x176>
 801061e:	4604      	mov	r4, r0
 8010620:	2301      	movs	r3, #1
 8010622:	fb0c 2101 	mla	r1, ip, r1, r2
 8010626:	e7f0      	b.n	801060a <_vfiprintf_r+0x1da>
 8010628:	ab03      	add	r3, sp, #12
 801062a:	9300      	str	r3, [sp, #0]
 801062c:	462a      	mov	r2, r5
 801062e:	4630      	mov	r0, r6
 8010630:	4b15      	ldr	r3, [pc, #84]	; (8010688 <_vfiprintf_r+0x258>)
 8010632:	a904      	add	r1, sp, #16
 8010634:	f7fb fdb8 	bl	800c1a8 <_printf_float>
 8010638:	4607      	mov	r7, r0
 801063a:	1c78      	adds	r0, r7, #1
 801063c:	d1d6      	bne.n	80105ec <_vfiprintf_r+0x1bc>
 801063e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010640:	07d9      	lsls	r1, r3, #31
 8010642:	d405      	bmi.n	8010650 <_vfiprintf_r+0x220>
 8010644:	89ab      	ldrh	r3, [r5, #12]
 8010646:	059a      	lsls	r2, r3, #22
 8010648:	d402      	bmi.n	8010650 <_vfiprintf_r+0x220>
 801064a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801064c:	f7fe fe84 	bl	800f358 <__retarget_lock_release_recursive>
 8010650:	89ab      	ldrh	r3, [r5, #12]
 8010652:	065b      	lsls	r3, r3, #25
 8010654:	f53f af12 	bmi.w	801047c <_vfiprintf_r+0x4c>
 8010658:	9809      	ldr	r0, [sp, #36]	; 0x24
 801065a:	e711      	b.n	8010480 <_vfiprintf_r+0x50>
 801065c:	ab03      	add	r3, sp, #12
 801065e:	9300      	str	r3, [sp, #0]
 8010660:	462a      	mov	r2, r5
 8010662:	4630      	mov	r0, r6
 8010664:	4b08      	ldr	r3, [pc, #32]	; (8010688 <_vfiprintf_r+0x258>)
 8010666:	a904      	add	r1, sp, #16
 8010668:	f7fc f83a 	bl	800c6e0 <_printf_i>
 801066c:	e7e4      	b.n	8010638 <_vfiprintf_r+0x208>
 801066e:	bf00      	nop
 8010670:	080126a8 	.word	0x080126a8
 8010674:	080126c8 	.word	0x080126c8
 8010678:	08012688 	.word	0x08012688
 801067c:	080128c4 	.word	0x080128c4
 8010680:	080128ce 	.word	0x080128ce
 8010684:	0800c1a9 	.word	0x0800c1a9
 8010688:	0801040b 	.word	0x0801040b
 801068c:	080128ca 	.word	0x080128ca

08010690 <_scanf_chars>:
 8010690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010694:	4615      	mov	r5, r2
 8010696:	688a      	ldr	r2, [r1, #8]
 8010698:	4680      	mov	r8, r0
 801069a:	460c      	mov	r4, r1
 801069c:	b932      	cbnz	r2, 80106ac <_scanf_chars+0x1c>
 801069e:	698a      	ldr	r2, [r1, #24]
 80106a0:	2a00      	cmp	r2, #0
 80106a2:	bf0c      	ite	eq
 80106a4:	2201      	moveq	r2, #1
 80106a6:	f04f 32ff 	movne.w	r2, #4294967295
 80106aa:	608a      	str	r2, [r1, #8]
 80106ac:	2700      	movs	r7, #0
 80106ae:	6822      	ldr	r2, [r4, #0]
 80106b0:	f8df 9088 	ldr.w	r9, [pc, #136]	; 801073c <_scanf_chars+0xac>
 80106b4:	06d1      	lsls	r1, r2, #27
 80106b6:	bf5f      	itttt	pl
 80106b8:	681a      	ldrpl	r2, [r3, #0]
 80106ba:	1d11      	addpl	r1, r2, #4
 80106bc:	6019      	strpl	r1, [r3, #0]
 80106be:	6816      	ldrpl	r6, [r2, #0]
 80106c0:	69a0      	ldr	r0, [r4, #24]
 80106c2:	b188      	cbz	r0, 80106e8 <_scanf_chars+0x58>
 80106c4:	2801      	cmp	r0, #1
 80106c6:	d107      	bne.n	80106d8 <_scanf_chars+0x48>
 80106c8:	682b      	ldr	r3, [r5, #0]
 80106ca:	781a      	ldrb	r2, [r3, #0]
 80106cc:	6963      	ldr	r3, [r4, #20]
 80106ce:	5c9b      	ldrb	r3, [r3, r2]
 80106d0:	b953      	cbnz	r3, 80106e8 <_scanf_chars+0x58>
 80106d2:	bb27      	cbnz	r7, 801071e <_scanf_chars+0x8e>
 80106d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106d8:	2802      	cmp	r0, #2
 80106da:	d120      	bne.n	801071e <_scanf_chars+0x8e>
 80106dc:	682b      	ldr	r3, [r5, #0]
 80106de:	781b      	ldrb	r3, [r3, #0]
 80106e0:	f813 3009 	ldrb.w	r3, [r3, r9]
 80106e4:	071b      	lsls	r3, r3, #28
 80106e6:	d41a      	bmi.n	801071e <_scanf_chars+0x8e>
 80106e8:	6823      	ldr	r3, [r4, #0]
 80106ea:	3701      	adds	r7, #1
 80106ec:	06da      	lsls	r2, r3, #27
 80106ee:	bf5e      	ittt	pl
 80106f0:	682b      	ldrpl	r3, [r5, #0]
 80106f2:	781b      	ldrbpl	r3, [r3, #0]
 80106f4:	f806 3b01 	strbpl.w	r3, [r6], #1
 80106f8:	682a      	ldr	r2, [r5, #0]
 80106fa:	686b      	ldr	r3, [r5, #4]
 80106fc:	3201      	adds	r2, #1
 80106fe:	602a      	str	r2, [r5, #0]
 8010700:	68a2      	ldr	r2, [r4, #8]
 8010702:	3b01      	subs	r3, #1
 8010704:	3a01      	subs	r2, #1
 8010706:	606b      	str	r3, [r5, #4]
 8010708:	60a2      	str	r2, [r4, #8]
 801070a:	b142      	cbz	r2, 801071e <_scanf_chars+0x8e>
 801070c:	2b00      	cmp	r3, #0
 801070e:	dcd7      	bgt.n	80106c0 <_scanf_chars+0x30>
 8010710:	4629      	mov	r1, r5
 8010712:	4640      	mov	r0, r8
 8010714:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010718:	4798      	blx	r3
 801071a:	2800      	cmp	r0, #0
 801071c:	d0d0      	beq.n	80106c0 <_scanf_chars+0x30>
 801071e:	6823      	ldr	r3, [r4, #0]
 8010720:	f013 0310 	ands.w	r3, r3, #16
 8010724:	d105      	bne.n	8010732 <_scanf_chars+0xa2>
 8010726:	68e2      	ldr	r2, [r4, #12]
 8010728:	3201      	adds	r2, #1
 801072a:	60e2      	str	r2, [r4, #12]
 801072c:	69a2      	ldr	r2, [r4, #24]
 801072e:	b102      	cbz	r2, 8010732 <_scanf_chars+0xa2>
 8010730:	7033      	strb	r3, [r6, #0]
 8010732:	6923      	ldr	r3, [r4, #16]
 8010734:	2000      	movs	r0, #0
 8010736:	441f      	add	r7, r3
 8010738:	6127      	str	r7, [r4, #16]
 801073a:	e7cb      	b.n	80106d4 <_scanf_chars+0x44>
 801073c:	080124f1 	.word	0x080124f1

08010740 <_scanf_i>:
 8010740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010744:	460c      	mov	r4, r1
 8010746:	4698      	mov	r8, r3
 8010748:	4b72      	ldr	r3, [pc, #456]	; (8010914 <_scanf_i+0x1d4>)
 801074a:	b087      	sub	sp, #28
 801074c:	4682      	mov	sl, r0
 801074e:	4616      	mov	r6, r2
 8010750:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010754:	ab03      	add	r3, sp, #12
 8010756:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801075a:	4b6f      	ldr	r3, [pc, #444]	; (8010918 <_scanf_i+0x1d8>)
 801075c:	69a1      	ldr	r1, [r4, #24]
 801075e:	4a6f      	ldr	r2, [pc, #444]	; (801091c <_scanf_i+0x1dc>)
 8010760:	4627      	mov	r7, r4
 8010762:	2903      	cmp	r1, #3
 8010764:	bf18      	it	ne
 8010766:	461a      	movne	r2, r3
 8010768:	68a3      	ldr	r3, [r4, #8]
 801076a:	9201      	str	r2, [sp, #4]
 801076c:	1e5a      	subs	r2, r3, #1
 801076e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010772:	bf81      	itttt	hi
 8010774:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010778:	eb03 0905 	addhi.w	r9, r3, r5
 801077c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010780:	60a3      	strhi	r3, [r4, #8]
 8010782:	f857 3b1c 	ldr.w	r3, [r7], #28
 8010786:	bf98      	it	ls
 8010788:	f04f 0900 	movls.w	r9, #0
 801078c:	463d      	mov	r5, r7
 801078e:	f04f 0b00 	mov.w	fp, #0
 8010792:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8010796:	6023      	str	r3, [r4, #0]
 8010798:	6831      	ldr	r1, [r6, #0]
 801079a:	ab03      	add	r3, sp, #12
 801079c:	2202      	movs	r2, #2
 801079e:	7809      	ldrb	r1, [r1, #0]
 80107a0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80107a4:	f7fe fdfe 	bl	800f3a4 <memchr>
 80107a8:	b328      	cbz	r0, 80107f6 <_scanf_i+0xb6>
 80107aa:	f1bb 0f01 	cmp.w	fp, #1
 80107ae:	d159      	bne.n	8010864 <_scanf_i+0x124>
 80107b0:	6862      	ldr	r2, [r4, #4]
 80107b2:	b92a      	cbnz	r2, 80107c0 <_scanf_i+0x80>
 80107b4:	2308      	movs	r3, #8
 80107b6:	6822      	ldr	r2, [r4, #0]
 80107b8:	6063      	str	r3, [r4, #4]
 80107ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80107be:	6022      	str	r2, [r4, #0]
 80107c0:	6822      	ldr	r2, [r4, #0]
 80107c2:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80107c6:	6022      	str	r2, [r4, #0]
 80107c8:	68a2      	ldr	r2, [r4, #8]
 80107ca:	1e51      	subs	r1, r2, #1
 80107cc:	60a1      	str	r1, [r4, #8]
 80107ce:	b192      	cbz	r2, 80107f6 <_scanf_i+0xb6>
 80107d0:	6832      	ldr	r2, [r6, #0]
 80107d2:	1c51      	adds	r1, r2, #1
 80107d4:	6031      	str	r1, [r6, #0]
 80107d6:	7812      	ldrb	r2, [r2, #0]
 80107d8:	f805 2b01 	strb.w	r2, [r5], #1
 80107dc:	6872      	ldr	r2, [r6, #4]
 80107de:	3a01      	subs	r2, #1
 80107e0:	2a00      	cmp	r2, #0
 80107e2:	6072      	str	r2, [r6, #4]
 80107e4:	dc07      	bgt.n	80107f6 <_scanf_i+0xb6>
 80107e6:	4631      	mov	r1, r6
 80107e8:	4650      	mov	r0, sl
 80107ea:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80107ee:	4790      	blx	r2
 80107f0:	2800      	cmp	r0, #0
 80107f2:	f040 8085 	bne.w	8010900 <_scanf_i+0x1c0>
 80107f6:	f10b 0b01 	add.w	fp, fp, #1
 80107fa:	f1bb 0f03 	cmp.w	fp, #3
 80107fe:	d1cb      	bne.n	8010798 <_scanf_i+0x58>
 8010800:	6863      	ldr	r3, [r4, #4]
 8010802:	b90b      	cbnz	r3, 8010808 <_scanf_i+0xc8>
 8010804:	230a      	movs	r3, #10
 8010806:	6063      	str	r3, [r4, #4]
 8010808:	6863      	ldr	r3, [r4, #4]
 801080a:	4945      	ldr	r1, [pc, #276]	; (8010920 <_scanf_i+0x1e0>)
 801080c:	6960      	ldr	r0, [r4, #20]
 801080e:	1ac9      	subs	r1, r1, r3
 8010810:	f000 f8a0 	bl	8010954 <__sccl>
 8010814:	f04f 0b00 	mov.w	fp, #0
 8010818:	68a3      	ldr	r3, [r4, #8]
 801081a:	6822      	ldr	r2, [r4, #0]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d03d      	beq.n	801089c <_scanf_i+0x15c>
 8010820:	6831      	ldr	r1, [r6, #0]
 8010822:	6960      	ldr	r0, [r4, #20]
 8010824:	f891 c000 	ldrb.w	ip, [r1]
 8010828:	f810 000c 	ldrb.w	r0, [r0, ip]
 801082c:	2800      	cmp	r0, #0
 801082e:	d035      	beq.n	801089c <_scanf_i+0x15c>
 8010830:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8010834:	d124      	bne.n	8010880 <_scanf_i+0x140>
 8010836:	0510      	lsls	r0, r2, #20
 8010838:	d522      	bpl.n	8010880 <_scanf_i+0x140>
 801083a:	f10b 0b01 	add.w	fp, fp, #1
 801083e:	f1b9 0f00 	cmp.w	r9, #0
 8010842:	d003      	beq.n	801084c <_scanf_i+0x10c>
 8010844:	3301      	adds	r3, #1
 8010846:	f109 39ff 	add.w	r9, r9, #4294967295
 801084a:	60a3      	str	r3, [r4, #8]
 801084c:	6873      	ldr	r3, [r6, #4]
 801084e:	3b01      	subs	r3, #1
 8010850:	2b00      	cmp	r3, #0
 8010852:	6073      	str	r3, [r6, #4]
 8010854:	dd1b      	ble.n	801088e <_scanf_i+0x14e>
 8010856:	6833      	ldr	r3, [r6, #0]
 8010858:	3301      	adds	r3, #1
 801085a:	6033      	str	r3, [r6, #0]
 801085c:	68a3      	ldr	r3, [r4, #8]
 801085e:	3b01      	subs	r3, #1
 8010860:	60a3      	str	r3, [r4, #8]
 8010862:	e7d9      	b.n	8010818 <_scanf_i+0xd8>
 8010864:	f1bb 0f02 	cmp.w	fp, #2
 8010868:	d1ae      	bne.n	80107c8 <_scanf_i+0x88>
 801086a:	6822      	ldr	r2, [r4, #0]
 801086c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8010870:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8010874:	d1bf      	bne.n	80107f6 <_scanf_i+0xb6>
 8010876:	2310      	movs	r3, #16
 8010878:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801087c:	6063      	str	r3, [r4, #4]
 801087e:	e7a2      	b.n	80107c6 <_scanf_i+0x86>
 8010880:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8010884:	6022      	str	r2, [r4, #0]
 8010886:	780b      	ldrb	r3, [r1, #0]
 8010888:	f805 3b01 	strb.w	r3, [r5], #1
 801088c:	e7de      	b.n	801084c <_scanf_i+0x10c>
 801088e:	4631      	mov	r1, r6
 8010890:	4650      	mov	r0, sl
 8010892:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010896:	4798      	blx	r3
 8010898:	2800      	cmp	r0, #0
 801089a:	d0df      	beq.n	801085c <_scanf_i+0x11c>
 801089c:	6823      	ldr	r3, [r4, #0]
 801089e:	05d9      	lsls	r1, r3, #23
 80108a0:	d50d      	bpl.n	80108be <_scanf_i+0x17e>
 80108a2:	42bd      	cmp	r5, r7
 80108a4:	d909      	bls.n	80108ba <_scanf_i+0x17a>
 80108a6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80108aa:	4632      	mov	r2, r6
 80108ac:	4650      	mov	r0, sl
 80108ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80108b2:	f105 39ff 	add.w	r9, r5, #4294967295
 80108b6:	4798      	blx	r3
 80108b8:	464d      	mov	r5, r9
 80108ba:	42bd      	cmp	r5, r7
 80108bc:	d028      	beq.n	8010910 <_scanf_i+0x1d0>
 80108be:	6822      	ldr	r2, [r4, #0]
 80108c0:	f012 0210 	ands.w	r2, r2, #16
 80108c4:	d113      	bne.n	80108ee <_scanf_i+0x1ae>
 80108c6:	702a      	strb	r2, [r5, #0]
 80108c8:	4639      	mov	r1, r7
 80108ca:	6863      	ldr	r3, [r4, #4]
 80108cc:	4650      	mov	r0, sl
 80108ce:	9e01      	ldr	r6, [sp, #4]
 80108d0:	47b0      	blx	r6
 80108d2:	f8d8 3000 	ldr.w	r3, [r8]
 80108d6:	6821      	ldr	r1, [r4, #0]
 80108d8:	1d1a      	adds	r2, r3, #4
 80108da:	f8c8 2000 	str.w	r2, [r8]
 80108de:	f011 0f20 	tst.w	r1, #32
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	d00f      	beq.n	8010906 <_scanf_i+0x1c6>
 80108e6:	6018      	str	r0, [r3, #0]
 80108e8:	68e3      	ldr	r3, [r4, #12]
 80108ea:	3301      	adds	r3, #1
 80108ec:	60e3      	str	r3, [r4, #12]
 80108ee:	2000      	movs	r0, #0
 80108f0:	1bed      	subs	r5, r5, r7
 80108f2:	44ab      	add	fp, r5
 80108f4:	6925      	ldr	r5, [r4, #16]
 80108f6:	445d      	add	r5, fp
 80108f8:	6125      	str	r5, [r4, #16]
 80108fa:	b007      	add	sp, #28
 80108fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010900:	f04f 0b00 	mov.w	fp, #0
 8010904:	e7ca      	b.n	801089c <_scanf_i+0x15c>
 8010906:	07ca      	lsls	r2, r1, #31
 8010908:	bf4c      	ite	mi
 801090a:	8018      	strhmi	r0, [r3, #0]
 801090c:	6018      	strpl	r0, [r3, #0]
 801090e:	e7eb      	b.n	80108e8 <_scanf_i+0x1a8>
 8010910:	2001      	movs	r0, #1
 8010912:	e7f2      	b.n	80108fa <_scanf_i+0x1ba>
 8010914:	08012440 	.word	0x08012440
 8010918:	08010ae5 	.word	0x08010ae5
 801091c:	0800dcc9 	.word	0x0800dcc9
 8010920:	080128ee 	.word	0x080128ee

08010924 <_read_r>:
 8010924:	b538      	push	{r3, r4, r5, lr}
 8010926:	4604      	mov	r4, r0
 8010928:	4608      	mov	r0, r1
 801092a:	4611      	mov	r1, r2
 801092c:	2200      	movs	r2, #0
 801092e:	4d05      	ldr	r5, [pc, #20]	; (8010944 <_read_r+0x20>)
 8010930:	602a      	str	r2, [r5, #0]
 8010932:	461a      	mov	r2, r3
 8010934:	f7f1 fe05 	bl	8002542 <_read>
 8010938:	1c43      	adds	r3, r0, #1
 801093a:	d102      	bne.n	8010942 <_read_r+0x1e>
 801093c:	682b      	ldr	r3, [r5, #0]
 801093e:	b103      	cbz	r3, 8010942 <_read_r+0x1e>
 8010940:	6023      	str	r3, [r4, #0]
 8010942:	bd38      	pop	{r3, r4, r5, pc}
 8010944:	20000c4c 	.word	0x20000c4c

08010948 <nan>:
 8010948:	2000      	movs	r0, #0
 801094a:	4901      	ldr	r1, [pc, #4]	; (8010950 <nan+0x8>)
 801094c:	4770      	bx	lr
 801094e:	bf00      	nop
 8010950:	7ff80000 	.word	0x7ff80000

08010954 <__sccl>:
 8010954:	b570      	push	{r4, r5, r6, lr}
 8010956:	780b      	ldrb	r3, [r1, #0]
 8010958:	4604      	mov	r4, r0
 801095a:	2b5e      	cmp	r3, #94	; 0x5e
 801095c:	bf13      	iteet	ne
 801095e:	2200      	movne	r2, #0
 8010960:	2201      	moveq	r2, #1
 8010962:	784b      	ldrbeq	r3, [r1, #1]
 8010964:	1c48      	addne	r0, r1, #1
 8010966:	bf08      	it	eq
 8010968:	1c88      	addeq	r0, r1, #2
 801096a:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801096e:	1e61      	subs	r1, r4, #1
 8010970:	f801 2f01 	strb.w	r2, [r1, #1]!
 8010974:	42a9      	cmp	r1, r5
 8010976:	d1fb      	bne.n	8010970 <__sccl+0x1c>
 8010978:	b90b      	cbnz	r3, 801097e <__sccl+0x2a>
 801097a:	3801      	subs	r0, #1
 801097c:	bd70      	pop	{r4, r5, r6, pc}
 801097e:	f082 0101 	eor.w	r1, r2, #1
 8010982:	54e1      	strb	r1, [r4, r3]
 8010984:	1c42      	adds	r2, r0, #1
 8010986:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 801098a:	4610      	mov	r0, r2
 801098c:	2d2d      	cmp	r5, #45	; 0x2d
 801098e:	f102 36ff 	add.w	r6, r2, #4294967295
 8010992:	d006      	beq.n	80109a2 <__sccl+0x4e>
 8010994:	2d5d      	cmp	r5, #93	; 0x5d
 8010996:	d0f1      	beq.n	801097c <__sccl+0x28>
 8010998:	b90d      	cbnz	r5, 801099e <__sccl+0x4a>
 801099a:	4630      	mov	r0, r6
 801099c:	e7ee      	b.n	801097c <__sccl+0x28>
 801099e:	462b      	mov	r3, r5
 80109a0:	e7ef      	b.n	8010982 <__sccl+0x2e>
 80109a2:	7816      	ldrb	r6, [r2, #0]
 80109a4:	2e5d      	cmp	r6, #93	; 0x5d
 80109a6:	d0fa      	beq.n	801099e <__sccl+0x4a>
 80109a8:	42b3      	cmp	r3, r6
 80109aa:	dcf8      	bgt.n	801099e <__sccl+0x4a>
 80109ac:	4618      	mov	r0, r3
 80109ae:	3001      	adds	r0, #1
 80109b0:	4286      	cmp	r6, r0
 80109b2:	5421      	strb	r1, [r4, r0]
 80109b4:	dcfb      	bgt.n	80109ae <__sccl+0x5a>
 80109b6:	43d8      	mvns	r0, r3
 80109b8:	4430      	add	r0, r6
 80109ba:	42b3      	cmp	r3, r6
 80109bc:	bfa8      	it	ge
 80109be:	2000      	movge	r0, #0
 80109c0:	1c5d      	adds	r5, r3, #1
 80109c2:	182b      	adds	r3, r5, r0
 80109c4:	3202      	adds	r2, #2
 80109c6:	e7de      	b.n	8010986 <__sccl+0x32>

080109c8 <strncmp>:
 80109c8:	b510      	push	{r4, lr}
 80109ca:	b16a      	cbz	r2, 80109e8 <strncmp+0x20>
 80109cc:	3901      	subs	r1, #1
 80109ce:	1884      	adds	r4, r0, r2
 80109d0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80109d4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80109d8:	4293      	cmp	r3, r2
 80109da:	d103      	bne.n	80109e4 <strncmp+0x1c>
 80109dc:	42a0      	cmp	r0, r4
 80109de:	d001      	beq.n	80109e4 <strncmp+0x1c>
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d1f5      	bne.n	80109d0 <strncmp+0x8>
 80109e4:	1a98      	subs	r0, r3, r2
 80109e6:	bd10      	pop	{r4, pc}
 80109e8:	4610      	mov	r0, r2
 80109ea:	e7fc      	b.n	80109e6 <strncmp+0x1e>

080109ec <_strtoul_l.isra.0>:
 80109ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80109f0:	468c      	mov	ip, r1
 80109f2:	4686      	mov	lr, r0
 80109f4:	4e3a      	ldr	r6, [pc, #232]	; (8010ae0 <_strtoul_l.isra.0+0xf4>)
 80109f6:	4660      	mov	r0, ip
 80109f8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80109fc:	5da5      	ldrb	r5, [r4, r6]
 80109fe:	f015 0508 	ands.w	r5, r5, #8
 8010a02:	d1f8      	bne.n	80109f6 <_strtoul_l.isra.0+0xa>
 8010a04:	2c2d      	cmp	r4, #45	; 0x2d
 8010a06:	d134      	bne.n	8010a72 <_strtoul_l.isra.0+0x86>
 8010a08:	f04f 0801 	mov.w	r8, #1
 8010a0c:	f89c 4000 	ldrb.w	r4, [ip]
 8010a10:	f100 0c02 	add.w	ip, r0, #2
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d05e      	beq.n	8010ad6 <_strtoul_l.isra.0+0xea>
 8010a18:	2b10      	cmp	r3, #16
 8010a1a:	d10c      	bne.n	8010a36 <_strtoul_l.isra.0+0x4a>
 8010a1c:	2c30      	cmp	r4, #48	; 0x30
 8010a1e:	d10a      	bne.n	8010a36 <_strtoul_l.isra.0+0x4a>
 8010a20:	f89c 0000 	ldrb.w	r0, [ip]
 8010a24:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8010a28:	2858      	cmp	r0, #88	; 0x58
 8010a2a:	d14f      	bne.n	8010acc <_strtoul_l.isra.0+0xe0>
 8010a2c:	2310      	movs	r3, #16
 8010a2e:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8010a32:	f10c 0c02 	add.w	ip, ip, #2
 8010a36:	f04f 37ff 	mov.w	r7, #4294967295
 8010a3a:	fbb7 f7f3 	udiv	r7, r7, r3
 8010a3e:	2500      	movs	r5, #0
 8010a40:	fb03 f907 	mul.w	r9, r3, r7
 8010a44:	4628      	mov	r0, r5
 8010a46:	ea6f 0909 	mvn.w	r9, r9
 8010a4a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8010a4e:	2e09      	cmp	r6, #9
 8010a50:	d818      	bhi.n	8010a84 <_strtoul_l.isra.0+0x98>
 8010a52:	4634      	mov	r4, r6
 8010a54:	42a3      	cmp	r3, r4
 8010a56:	dd24      	ble.n	8010aa2 <_strtoul_l.isra.0+0xb6>
 8010a58:	2d00      	cmp	r5, #0
 8010a5a:	db1f      	blt.n	8010a9c <_strtoul_l.isra.0+0xb0>
 8010a5c:	4287      	cmp	r7, r0
 8010a5e:	d31d      	bcc.n	8010a9c <_strtoul_l.isra.0+0xb0>
 8010a60:	d101      	bne.n	8010a66 <_strtoul_l.isra.0+0x7a>
 8010a62:	45a1      	cmp	r9, r4
 8010a64:	db1a      	blt.n	8010a9c <_strtoul_l.isra.0+0xb0>
 8010a66:	2501      	movs	r5, #1
 8010a68:	fb00 4003 	mla	r0, r0, r3, r4
 8010a6c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8010a70:	e7eb      	b.n	8010a4a <_strtoul_l.isra.0+0x5e>
 8010a72:	2c2b      	cmp	r4, #43	; 0x2b
 8010a74:	bf08      	it	eq
 8010a76:	f89c 4000 	ldrbeq.w	r4, [ip]
 8010a7a:	46a8      	mov	r8, r5
 8010a7c:	bf08      	it	eq
 8010a7e:	f100 0c02 	addeq.w	ip, r0, #2
 8010a82:	e7c7      	b.n	8010a14 <_strtoul_l.isra.0+0x28>
 8010a84:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8010a88:	2e19      	cmp	r6, #25
 8010a8a:	d801      	bhi.n	8010a90 <_strtoul_l.isra.0+0xa4>
 8010a8c:	3c37      	subs	r4, #55	; 0x37
 8010a8e:	e7e1      	b.n	8010a54 <_strtoul_l.isra.0+0x68>
 8010a90:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8010a94:	2e19      	cmp	r6, #25
 8010a96:	d804      	bhi.n	8010aa2 <_strtoul_l.isra.0+0xb6>
 8010a98:	3c57      	subs	r4, #87	; 0x57
 8010a9a:	e7db      	b.n	8010a54 <_strtoul_l.isra.0+0x68>
 8010a9c:	f04f 35ff 	mov.w	r5, #4294967295
 8010aa0:	e7e4      	b.n	8010a6c <_strtoul_l.isra.0+0x80>
 8010aa2:	2d00      	cmp	r5, #0
 8010aa4:	da07      	bge.n	8010ab6 <_strtoul_l.isra.0+0xca>
 8010aa6:	2322      	movs	r3, #34	; 0x22
 8010aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8010aac:	f8ce 3000 	str.w	r3, [lr]
 8010ab0:	b942      	cbnz	r2, 8010ac4 <_strtoul_l.isra.0+0xd8>
 8010ab2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ab6:	f1b8 0f00 	cmp.w	r8, #0
 8010aba:	d000      	beq.n	8010abe <_strtoul_l.isra.0+0xd2>
 8010abc:	4240      	negs	r0, r0
 8010abe:	2a00      	cmp	r2, #0
 8010ac0:	d0f7      	beq.n	8010ab2 <_strtoul_l.isra.0+0xc6>
 8010ac2:	b10d      	cbz	r5, 8010ac8 <_strtoul_l.isra.0+0xdc>
 8010ac4:	f10c 31ff 	add.w	r1, ip, #4294967295
 8010ac8:	6011      	str	r1, [r2, #0]
 8010aca:	e7f2      	b.n	8010ab2 <_strtoul_l.isra.0+0xc6>
 8010acc:	2430      	movs	r4, #48	; 0x30
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d1b1      	bne.n	8010a36 <_strtoul_l.isra.0+0x4a>
 8010ad2:	2308      	movs	r3, #8
 8010ad4:	e7af      	b.n	8010a36 <_strtoul_l.isra.0+0x4a>
 8010ad6:	2c30      	cmp	r4, #48	; 0x30
 8010ad8:	d0a2      	beq.n	8010a20 <_strtoul_l.isra.0+0x34>
 8010ada:	230a      	movs	r3, #10
 8010adc:	e7ab      	b.n	8010a36 <_strtoul_l.isra.0+0x4a>
 8010ade:	bf00      	nop
 8010ae0:	080124f1 	.word	0x080124f1

08010ae4 <_strtoul_r>:
 8010ae4:	f7ff bf82 	b.w	80109ec <_strtoul_l.isra.0>

08010ae8 <__submore>:
 8010ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010aec:	460c      	mov	r4, r1
 8010aee:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010af0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010af4:	4299      	cmp	r1, r3
 8010af6:	d11b      	bne.n	8010b30 <__submore+0x48>
 8010af8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010afc:	f7fb fa5c 	bl	800bfb8 <_malloc_r>
 8010b00:	b918      	cbnz	r0, 8010b0a <__submore+0x22>
 8010b02:	f04f 30ff 	mov.w	r0, #4294967295
 8010b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b0e:	63a3      	str	r3, [r4, #56]	; 0x38
 8010b10:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8010b14:	6360      	str	r0, [r4, #52]	; 0x34
 8010b16:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8010b1a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8010b1e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8010b22:	7043      	strb	r3, [r0, #1]
 8010b24:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8010b28:	7003      	strb	r3, [r0, #0]
 8010b2a:	6020      	str	r0, [r4, #0]
 8010b2c:	2000      	movs	r0, #0
 8010b2e:	e7ea      	b.n	8010b06 <__submore+0x1e>
 8010b30:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8010b32:	0077      	lsls	r7, r6, #1
 8010b34:	463a      	mov	r2, r7
 8010b36:	f000 fa4d 	bl	8010fd4 <_realloc_r>
 8010b3a:	4605      	mov	r5, r0
 8010b3c:	2800      	cmp	r0, #0
 8010b3e:	d0e0      	beq.n	8010b02 <__submore+0x1a>
 8010b40:	eb00 0806 	add.w	r8, r0, r6
 8010b44:	4601      	mov	r1, r0
 8010b46:	4632      	mov	r2, r6
 8010b48:	4640      	mov	r0, r8
 8010b4a:	f7fe fc39 	bl	800f3c0 <memcpy>
 8010b4e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8010b52:	f8c4 8000 	str.w	r8, [r4]
 8010b56:	e7e9      	b.n	8010b2c <__submore+0x44>

08010b58 <__swbuf_r>:
 8010b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b5a:	460e      	mov	r6, r1
 8010b5c:	4614      	mov	r4, r2
 8010b5e:	4605      	mov	r5, r0
 8010b60:	b118      	cbz	r0, 8010b6a <__swbuf_r+0x12>
 8010b62:	6983      	ldr	r3, [r0, #24]
 8010b64:	b90b      	cbnz	r3, 8010b6a <__swbuf_r+0x12>
 8010b66:	f7fd ffed 	bl	800eb44 <__sinit>
 8010b6a:	4b21      	ldr	r3, [pc, #132]	; (8010bf0 <__swbuf_r+0x98>)
 8010b6c:	429c      	cmp	r4, r3
 8010b6e:	d12b      	bne.n	8010bc8 <__swbuf_r+0x70>
 8010b70:	686c      	ldr	r4, [r5, #4]
 8010b72:	69a3      	ldr	r3, [r4, #24]
 8010b74:	60a3      	str	r3, [r4, #8]
 8010b76:	89a3      	ldrh	r3, [r4, #12]
 8010b78:	071a      	lsls	r2, r3, #28
 8010b7a:	d52f      	bpl.n	8010bdc <__swbuf_r+0x84>
 8010b7c:	6923      	ldr	r3, [r4, #16]
 8010b7e:	b36b      	cbz	r3, 8010bdc <__swbuf_r+0x84>
 8010b80:	6923      	ldr	r3, [r4, #16]
 8010b82:	6820      	ldr	r0, [r4, #0]
 8010b84:	b2f6      	uxtb	r6, r6
 8010b86:	1ac0      	subs	r0, r0, r3
 8010b88:	6963      	ldr	r3, [r4, #20]
 8010b8a:	4637      	mov	r7, r6
 8010b8c:	4283      	cmp	r3, r0
 8010b8e:	dc04      	bgt.n	8010b9a <__swbuf_r+0x42>
 8010b90:	4621      	mov	r1, r4
 8010b92:	4628      	mov	r0, r5
 8010b94:	f000 f952 	bl	8010e3c <_fflush_r>
 8010b98:	bb30      	cbnz	r0, 8010be8 <__swbuf_r+0x90>
 8010b9a:	68a3      	ldr	r3, [r4, #8]
 8010b9c:	3001      	adds	r0, #1
 8010b9e:	3b01      	subs	r3, #1
 8010ba0:	60a3      	str	r3, [r4, #8]
 8010ba2:	6823      	ldr	r3, [r4, #0]
 8010ba4:	1c5a      	adds	r2, r3, #1
 8010ba6:	6022      	str	r2, [r4, #0]
 8010ba8:	701e      	strb	r6, [r3, #0]
 8010baa:	6963      	ldr	r3, [r4, #20]
 8010bac:	4283      	cmp	r3, r0
 8010bae:	d004      	beq.n	8010bba <__swbuf_r+0x62>
 8010bb0:	89a3      	ldrh	r3, [r4, #12]
 8010bb2:	07db      	lsls	r3, r3, #31
 8010bb4:	d506      	bpl.n	8010bc4 <__swbuf_r+0x6c>
 8010bb6:	2e0a      	cmp	r6, #10
 8010bb8:	d104      	bne.n	8010bc4 <__swbuf_r+0x6c>
 8010bba:	4621      	mov	r1, r4
 8010bbc:	4628      	mov	r0, r5
 8010bbe:	f000 f93d 	bl	8010e3c <_fflush_r>
 8010bc2:	b988      	cbnz	r0, 8010be8 <__swbuf_r+0x90>
 8010bc4:	4638      	mov	r0, r7
 8010bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bc8:	4b0a      	ldr	r3, [pc, #40]	; (8010bf4 <__swbuf_r+0x9c>)
 8010bca:	429c      	cmp	r4, r3
 8010bcc:	d101      	bne.n	8010bd2 <__swbuf_r+0x7a>
 8010bce:	68ac      	ldr	r4, [r5, #8]
 8010bd0:	e7cf      	b.n	8010b72 <__swbuf_r+0x1a>
 8010bd2:	4b09      	ldr	r3, [pc, #36]	; (8010bf8 <__swbuf_r+0xa0>)
 8010bd4:	429c      	cmp	r4, r3
 8010bd6:	bf08      	it	eq
 8010bd8:	68ec      	ldreq	r4, [r5, #12]
 8010bda:	e7ca      	b.n	8010b72 <__swbuf_r+0x1a>
 8010bdc:	4621      	mov	r1, r4
 8010bde:	4628      	mov	r0, r5
 8010be0:	f000 f81a 	bl	8010c18 <__swsetup_r>
 8010be4:	2800      	cmp	r0, #0
 8010be6:	d0cb      	beq.n	8010b80 <__swbuf_r+0x28>
 8010be8:	f04f 37ff 	mov.w	r7, #4294967295
 8010bec:	e7ea      	b.n	8010bc4 <__swbuf_r+0x6c>
 8010bee:	bf00      	nop
 8010bf0:	080126a8 	.word	0x080126a8
 8010bf4:	080126c8 	.word	0x080126c8
 8010bf8:	08012688 	.word	0x08012688

08010bfc <__ascii_wctomb>:
 8010bfc:	4603      	mov	r3, r0
 8010bfe:	4608      	mov	r0, r1
 8010c00:	b141      	cbz	r1, 8010c14 <__ascii_wctomb+0x18>
 8010c02:	2aff      	cmp	r2, #255	; 0xff
 8010c04:	d904      	bls.n	8010c10 <__ascii_wctomb+0x14>
 8010c06:	228a      	movs	r2, #138	; 0x8a
 8010c08:	f04f 30ff 	mov.w	r0, #4294967295
 8010c0c:	601a      	str	r2, [r3, #0]
 8010c0e:	4770      	bx	lr
 8010c10:	2001      	movs	r0, #1
 8010c12:	700a      	strb	r2, [r1, #0]
 8010c14:	4770      	bx	lr
	...

08010c18 <__swsetup_r>:
 8010c18:	4b32      	ldr	r3, [pc, #200]	; (8010ce4 <__swsetup_r+0xcc>)
 8010c1a:	b570      	push	{r4, r5, r6, lr}
 8010c1c:	681d      	ldr	r5, [r3, #0]
 8010c1e:	4606      	mov	r6, r0
 8010c20:	460c      	mov	r4, r1
 8010c22:	b125      	cbz	r5, 8010c2e <__swsetup_r+0x16>
 8010c24:	69ab      	ldr	r3, [r5, #24]
 8010c26:	b913      	cbnz	r3, 8010c2e <__swsetup_r+0x16>
 8010c28:	4628      	mov	r0, r5
 8010c2a:	f7fd ff8b 	bl	800eb44 <__sinit>
 8010c2e:	4b2e      	ldr	r3, [pc, #184]	; (8010ce8 <__swsetup_r+0xd0>)
 8010c30:	429c      	cmp	r4, r3
 8010c32:	d10f      	bne.n	8010c54 <__swsetup_r+0x3c>
 8010c34:	686c      	ldr	r4, [r5, #4]
 8010c36:	89a3      	ldrh	r3, [r4, #12]
 8010c38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010c3c:	0719      	lsls	r1, r3, #28
 8010c3e:	d42c      	bmi.n	8010c9a <__swsetup_r+0x82>
 8010c40:	06dd      	lsls	r5, r3, #27
 8010c42:	d411      	bmi.n	8010c68 <__swsetup_r+0x50>
 8010c44:	2309      	movs	r3, #9
 8010c46:	6033      	str	r3, [r6, #0]
 8010c48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8010c50:	81a3      	strh	r3, [r4, #12]
 8010c52:	e03e      	b.n	8010cd2 <__swsetup_r+0xba>
 8010c54:	4b25      	ldr	r3, [pc, #148]	; (8010cec <__swsetup_r+0xd4>)
 8010c56:	429c      	cmp	r4, r3
 8010c58:	d101      	bne.n	8010c5e <__swsetup_r+0x46>
 8010c5a:	68ac      	ldr	r4, [r5, #8]
 8010c5c:	e7eb      	b.n	8010c36 <__swsetup_r+0x1e>
 8010c5e:	4b24      	ldr	r3, [pc, #144]	; (8010cf0 <__swsetup_r+0xd8>)
 8010c60:	429c      	cmp	r4, r3
 8010c62:	bf08      	it	eq
 8010c64:	68ec      	ldreq	r4, [r5, #12]
 8010c66:	e7e6      	b.n	8010c36 <__swsetup_r+0x1e>
 8010c68:	0758      	lsls	r0, r3, #29
 8010c6a:	d512      	bpl.n	8010c92 <__swsetup_r+0x7a>
 8010c6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010c6e:	b141      	cbz	r1, 8010c82 <__swsetup_r+0x6a>
 8010c70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010c74:	4299      	cmp	r1, r3
 8010c76:	d002      	beq.n	8010c7e <__swsetup_r+0x66>
 8010c78:	4630      	mov	r0, r6
 8010c7a:	f7fb f951 	bl	800bf20 <_free_r>
 8010c7e:	2300      	movs	r3, #0
 8010c80:	6363      	str	r3, [r4, #52]	; 0x34
 8010c82:	89a3      	ldrh	r3, [r4, #12]
 8010c84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010c88:	81a3      	strh	r3, [r4, #12]
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	6063      	str	r3, [r4, #4]
 8010c8e:	6923      	ldr	r3, [r4, #16]
 8010c90:	6023      	str	r3, [r4, #0]
 8010c92:	89a3      	ldrh	r3, [r4, #12]
 8010c94:	f043 0308 	orr.w	r3, r3, #8
 8010c98:	81a3      	strh	r3, [r4, #12]
 8010c9a:	6923      	ldr	r3, [r4, #16]
 8010c9c:	b94b      	cbnz	r3, 8010cb2 <__swsetup_r+0x9a>
 8010c9e:	89a3      	ldrh	r3, [r4, #12]
 8010ca0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010ca8:	d003      	beq.n	8010cb2 <__swsetup_r+0x9a>
 8010caa:	4621      	mov	r1, r4
 8010cac:	4630      	mov	r0, r6
 8010cae:	f000 f937 	bl	8010f20 <__smakebuf_r>
 8010cb2:	89a0      	ldrh	r0, [r4, #12]
 8010cb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010cb8:	f010 0301 	ands.w	r3, r0, #1
 8010cbc:	d00a      	beq.n	8010cd4 <__swsetup_r+0xbc>
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	60a3      	str	r3, [r4, #8]
 8010cc2:	6963      	ldr	r3, [r4, #20]
 8010cc4:	425b      	negs	r3, r3
 8010cc6:	61a3      	str	r3, [r4, #24]
 8010cc8:	6923      	ldr	r3, [r4, #16]
 8010cca:	b943      	cbnz	r3, 8010cde <__swsetup_r+0xc6>
 8010ccc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010cd0:	d1ba      	bne.n	8010c48 <__swsetup_r+0x30>
 8010cd2:	bd70      	pop	{r4, r5, r6, pc}
 8010cd4:	0781      	lsls	r1, r0, #30
 8010cd6:	bf58      	it	pl
 8010cd8:	6963      	ldrpl	r3, [r4, #20]
 8010cda:	60a3      	str	r3, [r4, #8]
 8010cdc:	e7f4      	b.n	8010cc8 <__swsetup_r+0xb0>
 8010cde:	2000      	movs	r0, #0
 8010ce0:	e7f7      	b.n	8010cd2 <__swsetup_r+0xba>
 8010ce2:	bf00      	nop
 8010ce4:	2000001c 	.word	0x2000001c
 8010ce8:	080126a8 	.word	0x080126a8
 8010cec:	080126c8 	.word	0x080126c8
 8010cf0:	08012688 	.word	0x08012688

08010cf4 <__assert_func>:
 8010cf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010cf6:	4614      	mov	r4, r2
 8010cf8:	461a      	mov	r2, r3
 8010cfa:	4b09      	ldr	r3, [pc, #36]	; (8010d20 <__assert_func+0x2c>)
 8010cfc:	4605      	mov	r5, r0
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	68d8      	ldr	r0, [r3, #12]
 8010d02:	b14c      	cbz	r4, 8010d18 <__assert_func+0x24>
 8010d04:	4b07      	ldr	r3, [pc, #28]	; (8010d24 <__assert_func+0x30>)
 8010d06:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010d0a:	9100      	str	r1, [sp, #0]
 8010d0c:	462b      	mov	r3, r5
 8010d0e:	4906      	ldr	r1, [pc, #24]	; (8010d28 <__assert_func+0x34>)
 8010d10:	f000 f8d0 	bl	8010eb4 <fiprintf>
 8010d14:	f000 f984 	bl	8011020 <abort>
 8010d18:	4b04      	ldr	r3, [pc, #16]	; (8010d2c <__assert_func+0x38>)
 8010d1a:	461c      	mov	r4, r3
 8010d1c:	e7f3      	b.n	8010d06 <__assert_func+0x12>
 8010d1e:	bf00      	nop
 8010d20:	2000001c 	.word	0x2000001c
 8010d24:	080128f0 	.word	0x080128f0
 8010d28:	080128fd 	.word	0x080128fd
 8010d2c:	0801292b 	.word	0x0801292b

08010d30 <__sflush_r>:
 8010d30:	898a      	ldrh	r2, [r1, #12]
 8010d32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d36:	4605      	mov	r5, r0
 8010d38:	0710      	lsls	r0, r2, #28
 8010d3a:	460c      	mov	r4, r1
 8010d3c:	d458      	bmi.n	8010df0 <__sflush_r+0xc0>
 8010d3e:	684b      	ldr	r3, [r1, #4]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	dc05      	bgt.n	8010d50 <__sflush_r+0x20>
 8010d44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	dc02      	bgt.n	8010d50 <__sflush_r+0x20>
 8010d4a:	2000      	movs	r0, #0
 8010d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010d52:	2e00      	cmp	r6, #0
 8010d54:	d0f9      	beq.n	8010d4a <__sflush_r+0x1a>
 8010d56:	2300      	movs	r3, #0
 8010d58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010d5c:	682f      	ldr	r7, [r5, #0]
 8010d5e:	602b      	str	r3, [r5, #0]
 8010d60:	d032      	beq.n	8010dc8 <__sflush_r+0x98>
 8010d62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010d64:	89a3      	ldrh	r3, [r4, #12]
 8010d66:	075a      	lsls	r2, r3, #29
 8010d68:	d505      	bpl.n	8010d76 <__sflush_r+0x46>
 8010d6a:	6863      	ldr	r3, [r4, #4]
 8010d6c:	1ac0      	subs	r0, r0, r3
 8010d6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010d70:	b10b      	cbz	r3, 8010d76 <__sflush_r+0x46>
 8010d72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010d74:	1ac0      	subs	r0, r0, r3
 8010d76:	2300      	movs	r3, #0
 8010d78:	4602      	mov	r2, r0
 8010d7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010d7c:	4628      	mov	r0, r5
 8010d7e:	6a21      	ldr	r1, [r4, #32]
 8010d80:	47b0      	blx	r6
 8010d82:	1c43      	adds	r3, r0, #1
 8010d84:	89a3      	ldrh	r3, [r4, #12]
 8010d86:	d106      	bne.n	8010d96 <__sflush_r+0x66>
 8010d88:	6829      	ldr	r1, [r5, #0]
 8010d8a:	291d      	cmp	r1, #29
 8010d8c:	d82c      	bhi.n	8010de8 <__sflush_r+0xb8>
 8010d8e:	4a2a      	ldr	r2, [pc, #168]	; (8010e38 <__sflush_r+0x108>)
 8010d90:	40ca      	lsrs	r2, r1
 8010d92:	07d6      	lsls	r6, r2, #31
 8010d94:	d528      	bpl.n	8010de8 <__sflush_r+0xb8>
 8010d96:	2200      	movs	r2, #0
 8010d98:	6062      	str	r2, [r4, #4]
 8010d9a:	6922      	ldr	r2, [r4, #16]
 8010d9c:	04d9      	lsls	r1, r3, #19
 8010d9e:	6022      	str	r2, [r4, #0]
 8010da0:	d504      	bpl.n	8010dac <__sflush_r+0x7c>
 8010da2:	1c42      	adds	r2, r0, #1
 8010da4:	d101      	bne.n	8010daa <__sflush_r+0x7a>
 8010da6:	682b      	ldr	r3, [r5, #0]
 8010da8:	b903      	cbnz	r3, 8010dac <__sflush_r+0x7c>
 8010daa:	6560      	str	r0, [r4, #84]	; 0x54
 8010dac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010dae:	602f      	str	r7, [r5, #0]
 8010db0:	2900      	cmp	r1, #0
 8010db2:	d0ca      	beq.n	8010d4a <__sflush_r+0x1a>
 8010db4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010db8:	4299      	cmp	r1, r3
 8010dba:	d002      	beq.n	8010dc2 <__sflush_r+0x92>
 8010dbc:	4628      	mov	r0, r5
 8010dbe:	f7fb f8af 	bl	800bf20 <_free_r>
 8010dc2:	2000      	movs	r0, #0
 8010dc4:	6360      	str	r0, [r4, #52]	; 0x34
 8010dc6:	e7c1      	b.n	8010d4c <__sflush_r+0x1c>
 8010dc8:	6a21      	ldr	r1, [r4, #32]
 8010dca:	2301      	movs	r3, #1
 8010dcc:	4628      	mov	r0, r5
 8010dce:	47b0      	blx	r6
 8010dd0:	1c41      	adds	r1, r0, #1
 8010dd2:	d1c7      	bne.n	8010d64 <__sflush_r+0x34>
 8010dd4:	682b      	ldr	r3, [r5, #0]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d0c4      	beq.n	8010d64 <__sflush_r+0x34>
 8010dda:	2b1d      	cmp	r3, #29
 8010ddc:	d001      	beq.n	8010de2 <__sflush_r+0xb2>
 8010dde:	2b16      	cmp	r3, #22
 8010de0:	d101      	bne.n	8010de6 <__sflush_r+0xb6>
 8010de2:	602f      	str	r7, [r5, #0]
 8010de4:	e7b1      	b.n	8010d4a <__sflush_r+0x1a>
 8010de6:	89a3      	ldrh	r3, [r4, #12]
 8010de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010dec:	81a3      	strh	r3, [r4, #12]
 8010dee:	e7ad      	b.n	8010d4c <__sflush_r+0x1c>
 8010df0:	690f      	ldr	r7, [r1, #16]
 8010df2:	2f00      	cmp	r7, #0
 8010df4:	d0a9      	beq.n	8010d4a <__sflush_r+0x1a>
 8010df6:	0793      	lsls	r3, r2, #30
 8010df8:	bf18      	it	ne
 8010dfa:	2300      	movne	r3, #0
 8010dfc:	680e      	ldr	r6, [r1, #0]
 8010dfe:	bf08      	it	eq
 8010e00:	694b      	ldreq	r3, [r1, #20]
 8010e02:	eba6 0807 	sub.w	r8, r6, r7
 8010e06:	600f      	str	r7, [r1, #0]
 8010e08:	608b      	str	r3, [r1, #8]
 8010e0a:	f1b8 0f00 	cmp.w	r8, #0
 8010e0e:	dd9c      	ble.n	8010d4a <__sflush_r+0x1a>
 8010e10:	4643      	mov	r3, r8
 8010e12:	463a      	mov	r2, r7
 8010e14:	4628      	mov	r0, r5
 8010e16:	6a21      	ldr	r1, [r4, #32]
 8010e18:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010e1a:	47b0      	blx	r6
 8010e1c:	2800      	cmp	r0, #0
 8010e1e:	dc06      	bgt.n	8010e2e <__sflush_r+0xfe>
 8010e20:	89a3      	ldrh	r3, [r4, #12]
 8010e22:	f04f 30ff 	mov.w	r0, #4294967295
 8010e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e2a:	81a3      	strh	r3, [r4, #12]
 8010e2c:	e78e      	b.n	8010d4c <__sflush_r+0x1c>
 8010e2e:	4407      	add	r7, r0
 8010e30:	eba8 0800 	sub.w	r8, r8, r0
 8010e34:	e7e9      	b.n	8010e0a <__sflush_r+0xda>
 8010e36:	bf00      	nop
 8010e38:	20400001 	.word	0x20400001

08010e3c <_fflush_r>:
 8010e3c:	b538      	push	{r3, r4, r5, lr}
 8010e3e:	690b      	ldr	r3, [r1, #16]
 8010e40:	4605      	mov	r5, r0
 8010e42:	460c      	mov	r4, r1
 8010e44:	b913      	cbnz	r3, 8010e4c <_fflush_r+0x10>
 8010e46:	2500      	movs	r5, #0
 8010e48:	4628      	mov	r0, r5
 8010e4a:	bd38      	pop	{r3, r4, r5, pc}
 8010e4c:	b118      	cbz	r0, 8010e56 <_fflush_r+0x1a>
 8010e4e:	6983      	ldr	r3, [r0, #24]
 8010e50:	b90b      	cbnz	r3, 8010e56 <_fflush_r+0x1a>
 8010e52:	f7fd fe77 	bl	800eb44 <__sinit>
 8010e56:	4b14      	ldr	r3, [pc, #80]	; (8010ea8 <_fflush_r+0x6c>)
 8010e58:	429c      	cmp	r4, r3
 8010e5a:	d11b      	bne.n	8010e94 <_fflush_r+0x58>
 8010e5c:	686c      	ldr	r4, [r5, #4]
 8010e5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d0ef      	beq.n	8010e46 <_fflush_r+0xa>
 8010e66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010e68:	07d0      	lsls	r0, r2, #31
 8010e6a:	d404      	bmi.n	8010e76 <_fflush_r+0x3a>
 8010e6c:	0599      	lsls	r1, r3, #22
 8010e6e:	d402      	bmi.n	8010e76 <_fflush_r+0x3a>
 8010e70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010e72:	f7fe fa70 	bl	800f356 <__retarget_lock_acquire_recursive>
 8010e76:	4628      	mov	r0, r5
 8010e78:	4621      	mov	r1, r4
 8010e7a:	f7ff ff59 	bl	8010d30 <__sflush_r>
 8010e7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010e80:	4605      	mov	r5, r0
 8010e82:	07da      	lsls	r2, r3, #31
 8010e84:	d4e0      	bmi.n	8010e48 <_fflush_r+0xc>
 8010e86:	89a3      	ldrh	r3, [r4, #12]
 8010e88:	059b      	lsls	r3, r3, #22
 8010e8a:	d4dd      	bmi.n	8010e48 <_fflush_r+0xc>
 8010e8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010e8e:	f7fe fa63 	bl	800f358 <__retarget_lock_release_recursive>
 8010e92:	e7d9      	b.n	8010e48 <_fflush_r+0xc>
 8010e94:	4b05      	ldr	r3, [pc, #20]	; (8010eac <_fflush_r+0x70>)
 8010e96:	429c      	cmp	r4, r3
 8010e98:	d101      	bne.n	8010e9e <_fflush_r+0x62>
 8010e9a:	68ac      	ldr	r4, [r5, #8]
 8010e9c:	e7df      	b.n	8010e5e <_fflush_r+0x22>
 8010e9e:	4b04      	ldr	r3, [pc, #16]	; (8010eb0 <_fflush_r+0x74>)
 8010ea0:	429c      	cmp	r4, r3
 8010ea2:	bf08      	it	eq
 8010ea4:	68ec      	ldreq	r4, [r5, #12]
 8010ea6:	e7da      	b.n	8010e5e <_fflush_r+0x22>
 8010ea8:	080126a8 	.word	0x080126a8
 8010eac:	080126c8 	.word	0x080126c8
 8010eb0:	08012688 	.word	0x08012688

08010eb4 <fiprintf>:
 8010eb4:	b40e      	push	{r1, r2, r3}
 8010eb6:	b503      	push	{r0, r1, lr}
 8010eb8:	4601      	mov	r1, r0
 8010eba:	ab03      	add	r3, sp, #12
 8010ebc:	4805      	ldr	r0, [pc, #20]	; (8010ed4 <fiprintf+0x20>)
 8010ebe:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ec2:	6800      	ldr	r0, [r0, #0]
 8010ec4:	9301      	str	r3, [sp, #4]
 8010ec6:	f7ff fab3 	bl	8010430 <_vfiprintf_r>
 8010eca:	b002      	add	sp, #8
 8010ecc:	f85d eb04 	ldr.w	lr, [sp], #4
 8010ed0:	b003      	add	sp, #12
 8010ed2:	4770      	bx	lr
 8010ed4:	2000001c 	.word	0x2000001c

08010ed8 <__swhatbuf_r>:
 8010ed8:	b570      	push	{r4, r5, r6, lr}
 8010eda:	460e      	mov	r6, r1
 8010edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ee0:	4614      	mov	r4, r2
 8010ee2:	2900      	cmp	r1, #0
 8010ee4:	461d      	mov	r5, r3
 8010ee6:	b096      	sub	sp, #88	; 0x58
 8010ee8:	da07      	bge.n	8010efa <__swhatbuf_r+0x22>
 8010eea:	2300      	movs	r3, #0
 8010eec:	602b      	str	r3, [r5, #0]
 8010eee:	89b3      	ldrh	r3, [r6, #12]
 8010ef0:	061a      	lsls	r2, r3, #24
 8010ef2:	d410      	bmi.n	8010f16 <__swhatbuf_r+0x3e>
 8010ef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ef8:	e00e      	b.n	8010f18 <__swhatbuf_r+0x40>
 8010efa:	466a      	mov	r2, sp
 8010efc:	f000 f898 	bl	8011030 <_fstat_r>
 8010f00:	2800      	cmp	r0, #0
 8010f02:	dbf2      	blt.n	8010eea <__swhatbuf_r+0x12>
 8010f04:	9a01      	ldr	r2, [sp, #4]
 8010f06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010f0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010f0e:	425a      	negs	r2, r3
 8010f10:	415a      	adcs	r2, r3
 8010f12:	602a      	str	r2, [r5, #0]
 8010f14:	e7ee      	b.n	8010ef4 <__swhatbuf_r+0x1c>
 8010f16:	2340      	movs	r3, #64	; 0x40
 8010f18:	2000      	movs	r0, #0
 8010f1a:	6023      	str	r3, [r4, #0]
 8010f1c:	b016      	add	sp, #88	; 0x58
 8010f1e:	bd70      	pop	{r4, r5, r6, pc}

08010f20 <__smakebuf_r>:
 8010f20:	898b      	ldrh	r3, [r1, #12]
 8010f22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010f24:	079d      	lsls	r5, r3, #30
 8010f26:	4606      	mov	r6, r0
 8010f28:	460c      	mov	r4, r1
 8010f2a:	d507      	bpl.n	8010f3c <__smakebuf_r+0x1c>
 8010f2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010f30:	6023      	str	r3, [r4, #0]
 8010f32:	6123      	str	r3, [r4, #16]
 8010f34:	2301      	movs	r3, #1
 8010f36:	6163      	str	r3, [r4, #20]
 8010f38:	b002      	add	sp, #8
 8010f3a:	bd70      	pop	{r4, r5, r6, pc}
 8010f3c:	466a      	mov	r2, sp
 8010f3e:	ab01      	add	r3, sp, #4
 8010f40:	f7ff ffca 	bl	8010ed8 <__swhatbuf_r>
 8010f44:	9900      	ldr	r1, [sp, #0]
 8010f46:	4605      	mov	r5, r0
 8010f48:	4630      	mov	r0, r6
 8010f4a:	f7fb f835 	bl	800bfb8 <_malloc_r>
 8010f4e:	b948      	cbnz	r0, 8010f64 <__smakebuf_r+0x44>
 8010f50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f54:	059a      	lsls	r2, r3, #22
 8010f56:	d4ef      	bmi.n	8010f38 <__smakebuf_r+0x18>
 8010f58:	f023 0303 	bic.w	r3, r3, #3
 8010f5c:	f043 0302 	orr.w	r3, r3, #2
 8010f60:	81a3      	strh	r3, [r4, #12]
 8010f62:	e7e3      	b.n	8010f2c <__smakebuf_r+0xc>
 8010f64:	4b0d      	ldr	r3, [pc, #52]	; (8010f9c <__smakebuf_r+0x7c>)
 8010f66:	62b3      	str	r3, [r6, #40]	; 0x28
 8010f68:	89a3      	ldrh	r3, [r4, #12]
 8010f6a:	6020      	str	r0, [r4, #0]
 8010f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f70:	81a3      	strh	r3, [r4, #12]
 8010f72:	9b00      	ldr	r3, [sp, #0]
 8010f74:	6120      	str	r0, [r4, #16]
 8010f76:	6163      	str	r3, [r4, #20]
 8010f78:	9b01      	ldr	r3, [sp, #4]
 8010f7a:	b15b      	cbz	r3, 8010f94 <__smakebuf_r+0x74>
 8010f7c:	4630      	mov	r0, r6
 8010f7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f82:	f000 f867 	bl	8011054 <_isatty_r>
 8010f86:	b128      	cbz	r0, 8010f94 <__smakebuf_r+0x74>
 8010f88:	89a3      	ldrh	r3, [r4, #12]
 8010f8a:	f023 0303 	bic.w	r3, r3, #3
 8010f8e:	f043 0301 	orr.w	r3, r3, #1
 8010f92:	81a3      	strh	r3, [r4, #12]
 8010f94:	89a0      	ldrh	r0, [r4, #12]
 8010f96:	4305      	orrs	r5, r0
 8010f98:	81a5      	strh	r5, [r4, #12]
 8010f9a:	e7cd      	b.n	8010f38 <__smakebuf_r+0x18>
 8010f9c:	0800eadd 	.word	0x0800eadd

08010fa0 <memmove>:
 8010fa0:	4288      	cmp	r0, r1
 8010fa2:	b510      	push	{r4, lr}
 8010fa4:	eb01 0402 	add.w	r4, r1, r2
 8010fa8:	d902      	bls.n	8010fb0 <memmove+0x10>
 8010faa:	4284      	cmp	r4, r0
 8010fac:	4623      	mov	r3, r4
 8010fae:	d807      	bhi.n	8010fc0 <memmove+0x20>
 8010fb0:	1e43      	subs	r3, r0, #1
 8010fb2:	42a1      	cmp	r1, r4
 8010fb4:	d008      	beq.n	8010fc8 <memmove+0x28>
 8010fb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010fba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010fbe:	e7f8      	b.n	8010fb2 <memmove+0x12>
 8010fc0:	4601      	mov	r1, r0
 8010fc2:	4402      	add	r2, r0
 8010fc4:	428a      	cmp	r2, r1
 8010fc6:	d100      	bne.n	8010fca <memmove+0x2a>
 8010fc8:	bd10      	pop	{r4, pc}
 8010fca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010fce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010fd2:	e7f7      	b.n	8010fc4 <memmove+0x24>

08010fd4 <_realloc_r>:
 8010fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fd6:	4607      	mov	r7, r0
 8010fd8:	4614      	mov	r4, r2
 8010fda:	460e      	mov	r6, r1
 8010fdc:	b921      	cbnz	r1, 8010fe8 <_realloc_r+0x14>
 8010fde:	4611      	mov	r1, r2
 8010fe0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010fe4:	f7fa bfe8 	b.w	800bfb8 <_malloc_r>
 8010fe8:	b922      	cbnz	r2, 8010ff4 <_realloc_r+0x20>
 8010fea:	f7fa ff99 	bl	800bf20 <_free_r>
 8010fee:	4625      	mov	r5, r4
 8010ff0:	4628      	mov	r0, r5
 8010ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ff4:	f000 f83e 	bl	8011074 <_malloc_usable_size_r>
 8010ff8:	42a0      	cmp	r0, r4
 8010ffa:	d20f      	bcs.n	801101c <_realloc_r+0x48>
 8010ffc:	4621      	mov	r1, r4
 8010ffe:	4638      	mov	r0, r7
 8011000:	f7fa ffda 	bl	800bfb8 <_malloc_r>
 8011004:	4605      	mov	r5, r0
 8011006:	2800      	cmp	r0, #0
 8011008:	d0f2      	beq.n	8010ff0 <_realloc_r+0x1c>
 801100a:	4631      	mov	r1, r6
 801100c:	4622      	mov	r2, r4
 801100e:	f7fe f9d7 	bl	800f3c0 <memcpy>
 8011012:	4631      	mov	r1, r6
 8011014:	4638      	mov	r0, r7
 8011016:	f7fa ff83 	bl	800bf20 <_free_r>
 801101a:	e7e9      	b.n	8010ff0 <_realloc_r+0x1c>
 801101c:	4635      	mov	r5, r6
 801101e:	e7e7      	b.n	8010ff0 <_realloc_r+0x1c>

08011020 <abort>:
 8011020:	2006      	movs	r0, #6
 8011022:	b508      	push	{r3, lr}
 8011024:	f000 f856 	bl	80110d4 <raise>
 8011028:	2001      	movs	r0, #1
 801102a:	f7f1 fa80 	bl	800252e <_exit>
	...

08011030 <_fstat_r>:
 8011030:	b538      	push	{r3, r4, r5, lr}
 8011032:	2300      	movs	r3, #0
 8011034:	4d06      	ldr	r5, [pc, #24]	; (8011050 <_fstat_r+0x20>)
 8011036:	4604      	mov	r4, r0
 8011038:	4608      	mov	r0, r1
 801103a:	4611      	mov	r1, r2
 801103c:	602b      	str	r3, [r5, #0]
 801103e:	f7f1 fad2 	bl	80025e6 <_fstat>
 8011042:	1c43      	adds	r3, r0, #1
 8011044:	d102      	bne.n	801104c <_fstat_r+0x1c>
 8011046:	682b      	ldr	r3, [r5, #0]
 8011048:	b103      	cbz	r3, 801104c <_fstat_r+0x1c>
 801104a:	6023      	str	r3, [r4, #0]
 801104c:	bd38      	pop	{r3, r4, r5, pc}
 801104e:	bf00      	nop
 8011050:	20000c4c 	.word	0x20000c4c

08011054 <_isatty_r>:
 8011054:	b538      	push	{r3, r4, r5, lr}
 8011056:	2300      	movs	r3, #0
 8011058:	4d05      	ldr	r5, [pc, #20]	; (8011070 <_isatty_r+0x1c>)
 801105a:	4604      	mov	r4, r0
 801105c:	4608      	mov	r0, r1
 801105e:	602b      	str	r3, [r5, #0]
 8011060:	f7f1 fad0 	bl	8002604 <_isatty>
 8011064:	1c43      	adds	r3, r0, #1
 8011066:	d102      	bne.n	801106e <_isatty_r+0x1a>
 8011068:	682b      	ldr	r3, [r5, #0]
 801106a:	b103      	cbz	r3, 801106e <_isatty_r+0x1a>
 801106c:	6023      	str	r3, [r4, #0]
 801106e:	bd38      	pop	{r3, r4, r5, pc}
 8011070:	20000c4c 	.word	0x20000c4c

08011074 <_malloc_usable_size_r>:
 8011074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011078:	1f18      	subs	r0, r3, #4
 801107a:	2b00      	cmp	r3, #0
 801107c:	bfbc      	itt	lt
 801107e:	580b      	ldrlt	r3, [r1, r0]
 8011080:	18c0      	addlt	r0, r0, r3
 8011082:	4770      	bx	lr

08011084 <_raise_r>:
 8011084:	291f      	cmp	r1, #31
 8011086:	b538      	push	{r3, r4, r5, lr}
 8011088:	4604      	mov	r4, r0
 801108a:	460d      	mov	r5, r1
 801108c:	d904      	bls.n	8011098 <_raise_r+0x14>
 801108e:	2316      	movs	r3, #22
 8011090:	6003      	str	r3, [r0, #0]
 8011092:	f04f 30ff 	mov.w	r0, #4294967295
 8011096:	bd38      	pop	{r3, r4, r5, pc}
 8011098:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801109a:	b112      	cbz	r2, 80110a2 <_raise_r+0x1e>
 801109c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80110a0:	b94b      	cbnz	r3, 80110b6 <_raise_r+0x32>
 80110a2:	4620      	mov	r0, r4
 80110a4:	f000 f830 	bl	8011108 <_getpid_r>
 80110a8:	462a      	mov	r2, r5
 80110aa:	4601      	mov	r1, r0
 80110ac:	4620      	mov	r0, r4
 80110ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80110b2:	f000 b817 	b.w	80110e4 <_kill_r>
 80110b6:	2b01      	cmp	r3, #1
 80110b8:	d00a      	beq.n	80110d0 <_raise_r+0x4c>
 80110ba:	1c59      	adds	r1, r3, #1
 80110bc:	d103      	bne.n	80110c6 <_raise_r+0x42>
 80110be:	2316      	movs	r3, #22
 80110c0:	6003      	str	r3, [r0, #0]
 80110c2:	2001      	movs	r0, #1
 80110c4:	e7e7      	b.n	8011096 <_raise_r+0x12>
 80110c6:	2400      	movs	r4, #0
 80110c8:	4628      	mov	r0, r5
 80110ca:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80110ce:	4798      	blx	r3
 80110d0:	2000      	movs	r0, #0
 80110d2:	e7e0      	b.n	8011096 <_raise_r+0x12>

080110d4 <raise>:
 80110d4:	4b02      	ldr	r3, [pc, #8]	; (80110e0 <raise+0xc>)
 80110d6:	4601      	mov	r1, r0
 80110d8:	6818      	ldr	r0, [r3, #0]
 80110da:	f7ff bfd3 	b.w	8011084 <_raise_r>
 80110de:	bf00      	nop
 80110e0:	2000001c 	.word	0x2000001c

080110e4 <_kill_r>:
 80110e4:	b538      	push	{r3, r4, r5, lr}
 80110e6:	2300      	movs	r3, #0
 80110e8:	4d06      	ldr	r5, [pc, #24]	; (8011104 <_kill_r+0x20>)
 80110ea:	4604      	mov	r4, r0
 80110ec:	4608      	mov	r0, r1
 80110ee:	4611      	mov	r1, r2
 80110f0:	602b      	str	r3, [r5, #0]
 80110f2:	f7f1 fa0c 	bl	800250e <_kill>
 80110f6:	1c43      	adds	r3, r0, #1
 80110f8:	d102      	bne.n	8011100 <_kill_r+0x1c>
 80110fa:	682b      	ldr	r3, [r5, #0]
 80110fc:	b103      	cbz	r3, 8011100 <_kill_r+0x1c>
 80110fe:	6023      	str	r3, [r4, #0]
 8011100:	bd38      	pop	{r3, r4, r5, pc}
 8011102:	bf00      	nop
 8011104:	20000c4c 	.word	0x20000c4c

08011108 <_getpid_r>:
 8011108:	f7f1 b9fa 	b.w	8002500 <_getpid>

0801110c <_init>:
 801110c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801110e:	bf00      	nop
 8011110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011112:	bc08      	pop	{r3}
 8011114:	469e      	mov	lr, r3
 8011116:	4770      	bx	lr

08011118 <_fini>:
 8011118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801111a:	bf00      	nop
 801111c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801111e:	bc08      	pop	{r3}
 8011120:	469e      	mov	lr, r3
 8011122:	4770      	bx	lr
