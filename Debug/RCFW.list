
RCFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e340  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000149c  0800e528  0800e528  0001e528  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f9c4  0800f9c4  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800f9c4  0800f9c4  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f9c4  0800f9c4  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f9c4  0800f9c4  0001f9c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f9c8  0800f9c8  0001f9c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800f9cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009d0  200001ec  0800fbb8  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bbc  0800fbb8  00020bbc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001baf6  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000402b  00000000  00000000  0003bd0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c0  00000000  00000000  0003fd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012f8  00000000  00000000  000411f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ee8b  00000000  00000000  000424f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c732  00000000  00000000  0006137b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5ec8  00000000  00000000  0007daad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00123975  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006728  00000000  00000000  001239c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200001ec 	.word	0x200001ec
 8000204:	00000000 	.word	0x00000000
 8000208:	0800e510 	.word	0x0800e510

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200001f0 	.word	0x200001f0
 8000224:	0800e510 	.word	0x0800e510

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpun>:
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	d102      	bne.n	8000af4 <__aeabi_dcmpun+0x10>
 8000aee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000af2:	d10a      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000af4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x20>
 8000afe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b02:	d102      	bne.n	8000b0a <__aeabi_dcmpun+0x26>
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	f04f 0001 	mov.w	r0, #1
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_d2iz>:
 8000b10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b18:	d215      	bcs.n	8000b46 <__aeabi_d2iz+0x36>
 8000b1a:	d511      	bpl.n	8000b40 <__aeabi_d2iz+0x30>
 8000b1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b24:	d912      	bls.n	8000b4c <__aeabi_d2iz+0x3c>
 8000b26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	4240      	negne	r0, r0
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4a:	d105      	bne.n	8000b58 <__aeabi_d2iz+0x48>
 8000b4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	bf08      	it	eq
 8000b52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_frsub>:
 8000b60:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b64:	e002      	b.n	8000b6c <__addsf3>
 8000b66:	bf00      	nop

08000b68 <__aeabi_fsub>:
 8000b68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b6c <__addsf3>:
 8000b6c:	0042      	lsls	r2, r0, #1
 8000b6e:	bf1f      	itttt	ne
 8000b70:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b74:	ea92 0f03 	teqne	r2, r3
 8000b78:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b7c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b80:	d06a      	beq.n	8000c58 <__addsf3+0xec>
 8000b82:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b86:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8a:	bfc1      	itttt	gt
 8000b8c:	18d2      	addgt	r2, r2, r3
 8000b8e:	4041      	eorgt	r1, r0
 8000b90:	4048      	eorgt	r0, r1
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	bfb8      	it	lt
 8000b96:	425b      	neglt	r3, r3
 8000b98:	2b19      	cmp	r3, #25
 8000b9a:	bf88      	it	hi
 8000b9c:	4770      	bxhi	lr
 8000b9e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bb6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bba:	bf18      	it	ne
 8000bbc:	4249      	negne	r1, r1
 8000bbe:	ea92 0f03 	teq	r2, r3
 8000bc2:	d03f      	beq.n	8000c44 <__addsf3+0xd8>
 8000bc4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bcc:	eb10 000c 	adds.w	r0, r0, ip
 8000bd0:	f1c3 0320 	rsb	r3, r3, #32
 8000bd4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bdc:	d502      	bpl.n	8000be4 <__addsf3+0x78>
 8000bde:	4249      	negs	r1, r1
 8000be0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be8:	d313      	bcc.n	8000c12 <__addsf3+0xa6>
 8000bea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bee:	d306      	bcc.n	8000bfe <__addsf3+0x92>
 8000bf0:	0840      	lsrs	r0, r0, #1
 8000bf2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bf6:	f102 0201 	add.w	r2, r2, #1
 8000bfa:	2afe      	cmp	r2, #254	; 0xfe
 8000bfc:	d251      	bcs.n	8000ca2 <__addsf3+0x136>
 8000bfe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	ea40 0003 	orr.w	r0, r0, r3
 8000c10:	4770      	bx	lr
 8000c12:	0049      	lsls	r1, r1, #1
 8000c14:	eb40 0000 	adc.w	r0, r0, r0
 8000c18:	3a01      	subs	r2, #1
 8000c1a:	bf28      	it	cs
 8000c1c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c20:	d2ed      	bcs.n	8000bfe <__addsf3+0x92>
 8000c22:	fab0 fc80 	clz	ip, r0
 8000c26:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c2e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c32:	bfaa      	itet	ge
 8000c34:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c38:	4252      	neglt	r2, r2
 8000c3a:	4318      	orrge	r0, r3
 8000c3c:	bfbc      	itt	lt
 8000c3e:	40d0      	lsrlt	r0, r2
 8000c40:	4318      	orrlt	r0, r3
 8000c42:	4770      	bx	lr
 8000c44:	f092 0f00 	teq	r2, #0
 8000c48:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c4c:	bf06      	itte	eq
 8000c4e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c52:	3201      	addeq	r2, #1
 8000c54:	3b01      	subne	r3, #1
 8000c56:	e7b5      	b.n	8000bc4 <__addsf3+0x58>
 8000c58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c60:	bf18      	it	ne
 8000c62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c66:	d021      	beq.n	8000cac <__addsf3+0x140>
 8000c68:	ea92 0f03 	teq	r2, r3
 8000c6c:	d004      	beq.n	8000c78 <__addsf3+0x10c>
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	bf08      	it	eq
 8000c74:	4608      	moveq	r0, r1
 8000c76:	4770      	bx	lr
 8000c78:	ea90 0f01 	teq	r0, r1
 8000c7c:	bf1c      	itt	ne
 8000c7e:	2000      	movne	r0, #0
 8000c80:	4770      	bxne	lr
 8000c82:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c86:	d104      	bne.n	8000c92 <__addsf3+0x126>
 8000c88:	0040      	lsls	r0, r0, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c90:	4770      	bx	lr
 8000c92:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c96:	bf3c      	itt	cc
 8000c98:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bxcc	lr
 8000c9e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ca6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000caa:	4770      	bx	lr
 8000cac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb0:	bf16      	itet	ne
 8000cb2:	4608      	movne	r0, r1
 8000cb4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb8:	4601      	movne	r1, r0
 8000cba:	0242      	lsls	r2, r0, #9
 8000cbc:	bf06      	itte	eq
 8000cbe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc2:	ea90 0f01 	teqeq	r0, r1
 8000cc6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_ui2f>:
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e004      	b.n	8000cdc <__aeabi_i2f+0x8>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_i2f>:
 8000cd4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	bf48      	it	mi
 8000cda:	4240      	negmi	r0, r0
 8000cdc:	ea5f 0c00 	movs.w	ip, r0
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce8:	4601      	mov	r1, r0
 8000cea:	f04f 0000 	mov.w	r0, #0
 8000cee:	e01c      	b.n	8000d2a <__aeabi_l2f+0x2a>

08000cf0 <__aeabi_ul2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	e00a      	b.n	8000d14 <__aeabi_l2f+0x14>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_l2f>:
 8000d00:	ea50 0201 	orrs.w	r2, r0, r1
 8000d04:	bf08      	it	eq
 8000d06:	4770      	bxeq	lr
 8000d08:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__aeabi_l2f+0x14>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	ea5f 0c01 	movs.w	ip, r1
 8000d18:	bf02      	ittt	eq
 8000d1a:	4684      	moveq	ip, r0
 8000d1c:	4601      	moveq	r1, r0
 8000d1e:	2000      	moveq	r0, #0
 8000d20:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d24:	bf08      	it	eq
 8000d26:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d2e:	fabc f28c 	clz	r2, ip
 8000d32:	3a08      	subs	r2, #8
 8000d34:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d38:	db10      	blt.n	8000d5c <__aeabi_l2f+0x5c>
 8000d3a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3e:	4463      	add	r3, ip
 8000d40:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d44:	f1c2 0220 	rsb	r2, r2, #32
 8000d48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d50:	eb43 0002 	adc.w	r0, r3, r2
 8000d54:	bf08      	it	eq
 8000d56:	f020 0001 	biceq.w	r0, r0, #1
 8000d5a:	4770      	bx	lr
 8000d5c:	f102 0220 	add.w	r2, r2, #32
 8000d60:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d64:	f1c2 0220 	rsb	r2, r2, #32
 8000d68:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d6c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d70:	eb43 0002 	adc.w	r0, r3, r2
 8000d74:	bf08      	it	eq
 8000d76:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7a:	4770      	bx	lr

08000d7c <__aeabi_fmul>:
 8000d7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d84:	bf1e      	ittt	ne
 8000d86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8a:	ea92 0f0c 	teqne	r2, ip
 8000d8e:	ea93 0f0c 	teqne	r3, ip
 8000d92:	d06f      	beq.n	8000e74 <__aeabi_fmul+0xf8>
 8000d94:	441a      	add	r2, r3
 8000d96:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9a:	0240      	lsls	r0, r0, #9
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da2:	d01e      	beq.n	8000de2 <__aeabi_fmul+0x66>
 8000da4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db0:	fba0 3101 	umull	r3, r1, r0, r1
 8000db4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dbc:	bf3e      	ittt	cc
 8000dbe:	0049      	lslcc	r1, r1, #1
 8000dc0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc4:	005b      	lslcc	r3, r3, #1
 8000dc6:	ea40 0001 	orr.w	r0, r0, r1
 8000dca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dce:	2afd      	cmp	r2, #253	; 0xfd
 8000dd0:	d81d      	bhi.n	8000e0e <__aeabi_fmul+0x92>
 8000dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dda:	bf08      	it	eq
 8000ddc:	f020 0001 	biceq.w	r0, r0, #1
 8000de0:	4770      	bx	lr
 8000de2:	f090 0f00 	teq	r0, #0
 8000de6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dea:	bf08      	it	eq
 8000dec:	0249      	lsleq	r1, r1, #9
 8000dee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000df6:	3a7f      	subs	r2, #127	; 0x7f
 8000df8:	bfc2      	ittt	gt
 8000dfa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dfe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e02:	4770      	bxgt	lr
 8000e04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e08:	f04f 0300 	mov.w	r3, #0
 8000e0c:	3a01      	subs	r2, #1
 8000e0e:	dc5d      	bgt.n	8000ecc <__aeabi_fmul+0x150>
 8000e10:	f112 0f19 	cmn.w	r2, #25
 8000e14:	bfdc      	itt	le
 8000e16:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1a:	4770      	bxle	lr
 8000e1c:	f1c2 0200 	rsb	r2, r2, #0
 8000e20:	0041      	lsls	r1, r0, #1
 8000e22:	fa21 f102 	lsr.w	r1, r1, r2
 8000e26:	f1c2 0220 	rsb	r2, r2, #32
 8000e2a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e32:	f140 0000 	adc.w	r0, r0, #0
 8000e36:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3a:	bf08      	it	eq
 8000e3c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e40:	4770      	bx	lr
 8000e42:	f092 0f00 	teq	r2, #0
 8000e46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0040      	lsleq	r0, r0, #1
 8000e4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e52:	3a01      	subeq	r2, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fmul+0xce>
 8000e56:	ea40 000c 	orr.w	r0, r0, ip
 8000e5a:	f093 0f00 	teq	r3, #0
 8000e5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0049      	lsleq	r1, r1, #1
 8000e66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6a:	3b01      	subeq	r3, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fmul+0xe6>
 8000e6e:	ea41 010c 	orr.w	r1, r1, ip
 8000e72:	e78f      	b.n	8000d94 <__aeabi_fmul+0x18>
 8000e74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	bf18      	it	ne
 8000e7e:	ea93 0f0c 	teqne	r3, ip
 8000e82:	d00a      	beq.n	8000e9a <__aeabi_fmul+0x11e>
 8000e84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e88:	bf18      	it	ne
 8000e8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e8e:	d1d8      	bne.n	8000e42 <__aeabi_fmul+0xc6>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	4770      	bx	lr
 8000e9a:	f090 0f00 	teq	r0, #0
 8000e9e:	bf17      	itett	ne
 8000ea0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea4:	4608      	moveq	r0, r1
 8000ea6:	f091 0f00 	teqne	r1, #0
 8000eaa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eae:	d014      	beq.n	8000eda <__aeabi_fmul+0x15e>
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	d101      	bne.n	8000eba <__aeabi_fmul+0x13e>
 8000eb6:	0242      	lsls	r2, r0, #9
 8000eb8:	d10f      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000eba:	ea93 0f0c 	teq	r3, ip
 8000ebe:	d103      	bne.n	8000ec8 <__aeabi_fmul+0x14c>
 8000ec0:	024b      	lsls	r3, r1, #9
 8000ec2:	bf18      	it	ne
 8000ec4:	4608      	movne	r0, r1
 8000ec6:	d108      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed8:	4770      	bx	lr
 8000eda:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ede:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_fdiv>:
 8000ee4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eec:	bf1e      	ittt	ne
 8000eee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef2:	ea92 0f0c 	teqne	r2, ip
 8000ef6:	ea93 0f0c 	teqne	r3, ip
 8000efa:	d069      	beq.n	8000fd0 <__aeabi_fdiv+0xec>
 8000efc:	eba2 0203 	sub.w	r2, r2, r3
 8000f00:	ea80 0c01 	eor.w	ip, r0, r1
 8000f04:	0249      	lsls	r1, r1, #9
 8000f06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0a:	d037      	beq.n	8000f7c <__aeabi_fdiv+0x98>
 8000f0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	bf38      	it	cc
 8000f20:	005b      	lslcc	r3, r3, #1
 8000f22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	bf24      	itt	cs
 8000f2e:	1a5b      	subcs	r3, r3, r1
 8000f30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f38:	bf24      	itt	cs
 8000f3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f46:	bf24      	itt	cs
 8000f48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	bf18      	it	ne
 8000f62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f66:	d1e0      	bne.n	8000f2a <__aeabi_fdiv+0x46>
 8000f68:	2afd      	cmp	r2, #253	; 0xfd
 8000f6a:	f63f af50 	bhi.w	8000e0e <__aeabi_fmul+0x92>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f74:	bf08      	it	eq
 8000f76:	f020 0001 	biceq.w	r0, r0, #1
 8000f7a:	4770      	bx	lr
 8000f7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f84:	327f      	adds	r2, #127	; 0x7f
 8000f86:	bfc2      	ittt	gt
 8000f88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f90:	4770      	bxgt	lr
 8000f92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	3a01      	subs	r2, #1
 8000f9c:	e737      	b.n	8000e0e <__aeabi_fmul+0x92>
 8000f9e:	f092 0f00 	teq	r2, #0
 8000fa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fa6:	bf02      	ittt	eq
 8000fa8:	0040      	lsleq	r0, r0, #1
 8000faa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fae:	3a01      	subeq	r2, #1
 8000fb0:	d0f9      	beq.n	8000fa6 <__aeabi_fdiv+0xc2>
 8000fb2:	ea40 000c 	orr.w	r0, r0, ip
 8000fb6:	f093 0f00 	teq	r3, #0
 8000fba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	bf02      	ittt	eq
 8000fc0:	0049      	lsleq	r1, r1, #1
 8000fc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fc6:	3b01      	subeq	r3, #1
 8000fc8:	d0f9      	beq.n	8000fbe <__aeabi_fdiv+0xda>
 8000fca:	ea41 010c 	orr.w	r1, r1, ip
 8000fce:	e795      	b.n	8000efc <__aeabi_fdiv+0x18>
 8000fd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd4:	ea92 0f0c 	teq	r2, ip
 8000fd8:	d108      	bne.n	8000fec <__aeabi_fdiv+0x108>
 8000fda:	0242      	lsls	r2, r0, #9
 8000fdc:	f47f af7d 	bne.w	8000eda <__aeabi_fmul+0x15e>
 8000fe0:	ea93 0f0c 	teq	r3, ip
 8000fe4:	f47f af70 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e776      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000fec:	ea93 0f0c 	teq	r3, ip
 8000ff0:	d104      	bne.n	8000ffc <__aeabi_fdiv+0x118>
 8000ff2:	024b      	lsls	r3, r1, #9
 8000ff4:	f43f af4c 	beq.w	8000e90 <__aeabi_fmul+0x114>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	e76e      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000ffc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001000:	bf18      	it	ne
 8001002:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001006:	d1ca      	bne.n	8000f9e <__aeabi_fdiv+0xba>
 8001008:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800100c:	f47f af5c 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8001010:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001014:	f47f af3c 	bne.w	8000e90 <__aeabi_fmul+0x114>
 8001018:	e75f      	b.n	8000eda <__aeabi_fmul+0x15e>
 800101a:	bf00      	nop

0800101c <__aeabi_f2iz>:
 800101c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001020:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001024:	d30f      	bcc.n	8001046 <__aeabi_f2iz+0x2a>
 8001026:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800102a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800102e:	d90d      	bls.n	800104c <__aeabi_f2iz+0x30>
 8001030:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001034:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001038:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800103c:	fa23 f002 	lsr.w	r0, r3, r2
 8001040:	bf18      	it	ne
 8001042:	4240      	negne	r0, r0
 8001044:	4770      	bx	lr
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	4770      	bx	lr
 800104c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001050:	d101      	bne.n	8001056 <__aeabi_f2iz+0x3a>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	d105      	bne.n	8001062 <__aeabi_f2iz+0x46>
 8001056:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800105a:	bf08      	it	eq
 800105c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001060:	4770      	bx	lr
 8001062:	f04f 0000 	mov.w	r0, #0
 8001066:	4770      	bx	lr

08001068 <__aeabi_f2uiz>:
 8001068:	0042      	lsls	r2, r0, #1
 800106a:	d20e      	bcs.n	800108a <__aeabi_f2uiz+0x22>
 800106c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001070:	d30b      	bcc.n	800108a <__aeabi_f2uiz+0x22>
 8001072:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001076:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800107a:	d409      	bmi.n	8001090 <__aeabi_f2uiz+0x28>
 800107c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001080:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001084:	fa23 f002 	lsr.w	r0, r3, r2
 8001088:	4770      	bx	lr
 800108a:	f04f 0000 	mov.w	r0, #0
 800108e:	4770      	bx	lr
 8001090:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001094:	d101      	bne.n	800109a <__aeabi_f2uiz+0x32>
 8001096:	0242      	lsls	r2, r0, #9
 8001098:	d102      	bne.n	80010a0 <__aeabi_f2uiz+0x38>
 800109a:	f04f 30ff 	mov.w	r0, #4294967295
 800109e:	4770      	bx	lr
 80010a0:	f04f 0000 	mov.w	r0, #0
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <MAIN_displayRcfwBanner>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void MAIN_displayRcfwBanner(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* Used ASCII art generator from https://patorjk.com with font called "Colossal" */
  LOG_info("");
 80010ac:	4914      	ldr	r1, [pc, #80]	; (8001100 <MAIN_displayRcfwBanner+0x58>)
 80010ae:	2001      	movs	r0, #1
 80010b0:	f009 fd5c 	bl	800ab6c <LOG_log>
  LOG_info("    8888888b.        .d8888b.       8888888888      888       888"  );
 80010b4:	4913      	ldr	r1, [pc, #76]	; (8001104 <MAIN_displayRcfwBanner+0x5c>)
 80010b6:	2001      	movs	r0, #1
 80010b8:	f009 fd58 	bl	800ab6c <LOG_log>
  LOG_info("    888   Y88b      d88P  Y88b      888             888   o   888"  );
 80010bc:	4912      	ldr	r1, [pc, #72]	; (8001108 <MAIN_displayRcfwBanner+0x60>)
 80010be:	2001      	movs	r0, #1
 80010c0:	f009 fd54 	bl	800ab6c <LOG_log>
  LOG_info("    888    888      888    888      888             888  d8b  888"  );
 80010c4:	4911      	ldr	r1, [pc, #68]	; (800110c <MAIN_displayRcfwBanner+0x64>)
 80010c6:	2001      	movs	r0, #1
 80010c8:	f009 fd50 	bl	800ab6c <LOG_log>
  LOG_info("    888   d88P      888             8888888         888 d888b 888"  );
 80010cc:	4910      	ldr	r1, [pc, #64]	; (8001110 <MAIN_displayRcfwBanner+0x68>)
 80010ce:	2001      	movs	r0, #1
 80010d0:	f009 fd4c 	bl	800ab6c <LOG_log>
  LOG_info("    8888888P\"       888             888             888d88888b888" );
 80010d4:	490f      	ldr	r1, [pc, #60]	; (8001114 <MAIN_displayRcfwBanner+0x6c>)
 80010d6:	2001      	movs	r0, #1
 80010d8:	f009 fd48 	bl	800ab6c <LOG_log>
  LOG_info("    888 T88b        888    888      888             88888P Y88888"  );
 80010dc:	490e      	ldr	r1, [pc, #56]	; (8001118 <MAIN_displayRcfwBanner+0x70>)
 80010de:	2001      	movs	r0, #1
 80010e0:	f009 fd44 	bl	800ab6c <LOG_log>
  LOG_info("    888  T88b       Y88b  d88P      888             8888P   Y8888"  );
 80010e4:	490d      	ldr	r1, [pc, #52]	; (800111c <MAIN_displayRcfwBanner+0x74>)
 80010e6:	2001      	movs	r0, #1
 80010e8:	f009 fd40 	bl	800ab6c <LOG_log>
  LOG_info("    888   T88b       \"Y8888P\"       888             888P     Y888");
 80010ec:	490c      	ldr	r1, [pc, #48]	; (8001120 <MAIN_displayRcfwBanner+0x78>)
 80010ee:	2001      	movs	r0, #1
 80010f0:	f009 fd3c 	bl	800ab6c <LOG_log>
  LOG_info("");
 80010f4:	4902      	ldr	r1, [pc, #8]	; (8001100 <MAIN_displayRcfwBanner+0x58>)
 80010f6:	2001      	movs	r0, #1
 80010f8:	f009 fd38 	bl	800ab6c <LOG_log>

  return;
 80010fc:	bf00      	nop
}
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	0800e528 	.word	0x0800e528
 8001104:	0800e52c 	.word	0x0800e52c
 8001108:	0800e570 	.word	0x0800e570
 800110c:	0800e5b4 	.word	0x0800e5b4
 8001110:	0800e5f8 	.word	0x0800e5f8
 8001114:	0800e63c 	.word	0x0800e63c
 8001118:	0800e680 	.word	0x0800e680
 800111c:	0800e6c4 	.word	0x0800e6c4
 8001120:	0800e708 	.word	0x0800e708

08001124 <MAIN_togglePrintOutput>:

static void MAIN_togglePrintOutput(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  if (g_MAIN_printOutput == MAIN_PRINT_OUTPUT_TO_CONSOLE)
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <MAIN_togglePrintOutput+0x30>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d107      	bne.n	8001140 <MAIN_togglePrintOutput+0x1c>
  {
    LOG_info("Directing print to MASTER");
 8001130:	4909      	ldr	r1, [pc, #36]	; (8001158 <MAIN_togglePrintOutput+0x34>)
 8001132:	2001      	movs	r0, #1
 8001134:	f009 fd1a 	bl	800ab6c <LOG_log>

    g_MAIN_printOutput = MAIN_PRINT_OUTPUT_TO_MASTER;
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <MAIN_togglePrintOutput+0x30>)
 800113a:	2201      	movs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
    LOG_info("Directing print to CONSOLE");

    g_MAIN_printOutput = MAIN_PRINT_OUTPUT_TO_CONSOLE;
  }

  return;
 800113e:	e007      	b.n	8001150 <MAIN_togglePrintOutput+0x2c>
    LOG_info("Directing print to CONSOLE");
 8001140:	4906      	ldr	r1, [pc, #24]	; (800115c <MAIN_togglePrintOutput+0x38>)
 8001142:	2001      	movs	r0, #1
 8001144:	f009 fd12 	bl	800ab6c <LOG_log>
    g_MAIN_printOutput = MAIN_PRINT_OUTPUT_TO_CONSOLE;
 8001148:	4b02      	ldr	r3, [pc, #8]	; (8001154 <MAIN_togglePrintOutput+0x30>)
 800114a:	2200      	movs	r2, #0
 800114c:	701a      	strb	r2, [r3, #0]
  return;
 800114e:	bf00      	nop
}
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200009c8 	.word	0x200009c8
 8001158:	0800e74c 	.word	0x0800e74c
 800115c:	0800e768 	.word	0x0800e768

08001160 <MAIN_updateLogSetup>:

static void MAIN_updateLogSetup(T_BLU_Data *p_data)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef l_time;
  RTC_DateTypeDef l_date;

  /* As this method is using for logging/debug, we will not deal with failure cases */
  (void)HAL_RTC_GetTime(&hrtc, &l_time, RTC_FORMAT_BCD);
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	2201      	movs	r2, #1
 800116e:	4619      	mov	r1, r3
 8001170:	4857      	ldr	r0, [pc, #348]	; (80012d0 <MAIN_updateLogSetup+0x170>)
 8001172:	f004 f98f 	bl	8005494 <HAL_RTC_GetTime>
  (void)HAL_RTC_GetDate(&hrtc, &l_date, RTC_FORMAT_BCD);
 8001176:	f107 0308 	add.w	r3, r7, #8
 800117a:	2201      	movs	r2, #1
 800117c:	4619      	mov	r1, r3
 800117e:	4854      	ldr	r0, [pc, #336]	; (80012d0 <MAIN_updateLogSetup+0x170>)
 8001180:	f004 fb8c 	bl	800589c <HAL_RTC_GetDate>

  switch (p_data->button)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	7c1b      	ldrb	r3, [r3, #16]
 8001188:	3b05      	subs	r3, #5
 800118a:	2b03      	cmp	r3, #3
 800118c:	f200 8084 	bhi.w	8001298 <MAIN_updateLogSetup+0x138>
 8001190:	a201      	add	r2, pc, #4	; (adr r2, 8001198 <MAIN_updateLogSetup+0x38>)
 8001192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001196:	bf00      	nop
 8001198:	080011a9 	.word	0x080011a9
 800119c:	0800125d 	.word	0x0800125d
 80011a0:	080011e5 	.word	0x080011e5
 80011a4:	08001221 	.word	0x08001221
  {
    case BLU_BUTTON_PAD_UP:
      if (g_MAIN_padUpPressedStartTime == 0)
 80011a8:	4b4a      	ldr	r3, [pc, #296]	; (80012d4 <MAIN_updateLogSetup+0x174>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d10a      	bne.n	80011c6 <MAIN_updateLogSetup+0x66>
      {
        g_MAIN_padUpPressedStartTime = UTI_turnRtcTimeToSeconds(&l_time);
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	4618      	mov	r0, r3
 80011b6:	f00a f940 	bl	800b43a <UTI_turnRtcTimeToSeconds>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4a45      	ldr	r2, [pc, #276]	; (80012d4 <MAIN_updateLogSetup+0x174>)
 80011be:	6013      	str	r3, [r2, #0]

        LOG_increaseLevel();
 80011c0:	f009 fca4 	bl	800ab0c <LOG_increaseLevel>
      }
      else
      {
        g_MAIN_padUpPressedStartTime = 0;
      }
      break;
 80011c4:	e06a      	b.n	800129c <MAIN_updateLogSetup+0x13c>
      else if (UTI_turnRtcTimeToSeconds(&l_time) - g_MAIN_padUpPressedStartTime < STP_PAD_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	4618      	mov	r0, r3
 80011cc:	f00a f935 	bl	800b43a <UTI_turnRtcTimeToSeconds>
 80011d0:	4602      	mov	r2, r0
 80011d2:	4b40      	ldr	r3, [pc, #256]	; (80012d4 <MAIN_updateLogSetup+0x174>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d95f      	bls.n	800129c <MAIN_updateLogSetup+0x13c>
        g_MAIN_padUpPressedStartTime = 0;
 80011dc:	4b3d      	ldr	r3, [pc, #244]	; (80012d4 <MAIN_updateLogSetup+0x174>)
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
      break;
 80011e2:	e05b      	b.n	800129c <MAIN_updateLogSetup+0x13c>

    case BLU_BUTTON_PAD_DOWN:
      if (g_MAIN_padDownPressedStartTime == 0)
 80011e4:	4b3c      	ldr	r3, [pc, #240]	; (80012d8 <MAIN_updateLogSetup+0x178>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d10a      	bne.n	8001202 <MAIN_updateLogSetup+0xa2>
      {
        g_MAIN_padDownPressedStartTime = UTI_turnRtcTimeToSeconds(&l_time);
 80011ec:	f107 030c 	add.w	r3, r7, #12
 80011f0:	4618      	mov	r0, r3
 80011f2:	f00a f922 	bl	800b43a <UTI_turnRtcTimeToSeconds>
 80011f6:	4603      	mov	r3, r0
 80011f8:	4a37      	ldr	r2, [pc, #220]	; (80012d8 <MAIN_updateLogSetup+0x178>)
 80011fa:	6013      	str	r3, [r2, #0]

        LOG_decreaseLevel();
 80011fc:	f009 fc9e 	bl	800ab3c <LOG_decreaseLevel>
      }
      else
      {
        g_MAIN_padDownPressedStartTime = 0;
      }
      break;
 8001200:	e04e      	b.n	80012a0 <MAIN_updateLogSetup+0x140>
      else if (UTI_turnRtcTimeToSeconds(&l_time) - g_MAIN_padDownPressedStartTime < STP_PAD_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 8001202:	f107 030c 	add.w	r3, r7, #12
 8001206:	4618      	mov	r0, r3
 8001208:	f00a f917 	bl	800b43a <UTI_turnRtcTimeToSeconds>
 800120c:	4602      	mov	r2, r0
 800120e:	4b32      	ldr	r3, [pc, #200]	; (80012d8 <MAIN_updateLogSetup+0x178>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b01      	cmp	r3, #1
 8001216:	d943      	bls.n	80012a0 <MAIN_updateLogSetup+0x140>
        g_MAIN_padDownPressedStartTime = 0;
 8001218:	4b2f      	ldr	r3, [pc, #188]	; (80012d8 <MAIN_updateLogSetup+0x178>)
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
      break;
 800121e:	e03f      	b.n	80012a0 <MAIN_updateLogSetup+0x140>

    case BLU_BUTTON_PAD_LEFT:
      if (g_MAIN_padLeftPressedStartTime == 0)
 8001220:	4b2e      	ldr	r3, [pc, #184]	; (80012dc <MAIN_updateLogSetup+0x17c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d10a      	bne.n	800123e <MAIN_updateLogSetup+0xde>
      {
        g_MAIN_padLeftPressedStartTime = UTI_turnRtcTimeToSeconds(&l_time);
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	4618      	mov	r0, r3
 800122e:	f00a f904 	bl	800b43a <UTI_turnRtcTimeToSeconds>
 8001232:	4603      	mov	r3, r0
 8001234:	4a29      	ldr	r2, [pc, #164]	; (80012dc <MAIN_updateLogSetup+0x17c>)
 8001236:	6013      	str	r3, [r2, #0]

        LOG_toggleOnOff();
 8001238:	f009 fc3a 	bl	800aab0 <LOG_toggleOnOff>
      }
      else
      {
        g_MAIN_padLeftPressedStartTime = 0;
      }
      break;
 800123c:	e032      	b.n	80012a4 <MAIN_updateLogSetup+0x144>
      else if (UTI_turnRtcTimeToSeconds(&l_time) - g_MAIN_padLeftPressedStartTime < STP_PAD_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 800123e:	f107 030c 	add.w	r3, r7, #12
 8001242:	4618      	mov	r0, r3
 8001244:	f00a f8f9 	bl	800b43a <UTI_turnRtcTimeToSeconds>
 8001248:	4602      	mov	r2, r0
 800124a:	4b24      	ldr	r3, [pc, #144]	; (80012dc <MAIN_updateLogSetup+0x17c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b01      	cmp	r3, #1
 8001252:	d927      	bls.n	80012a4 <MAIN_updateLogSetup+0x144>
        g_MAIN_padLeftPressedStartTime = 0;
 8001254:	4b21      	ldr	r3, [pc, #132]	; (80012dc <MAIN_updateLogSetup+0x17c>)
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
      break;
 800125a:	e023      	b.n	80012a4 <MAIN_updateLogSetup+0x144>

    case BLU_BUTTON_PAD_RIGHT:
      if (g_MAIN_padRightPressedStartTime == 0)
 800125c:	4b20      	ldr	r3, [pc, #128]	; (80012e0 <MAIN_updateLogSetup+0x180>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d10a      	bne.n	800127a <MAIN_updateLogSetup+0x11a>
      {
        g_MAIN_padRightPressedStartTime = UTI_turnRtcTimeToSeconds(&l_time);
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	4618      	mov	r0, r3
 800126a:	f00a f8e6 	bl	800b43a <UTI_turnRtcTimeToSeconds>
 800126e:	4603      	mov	r3, r0
 8001270:	4a1b      	ldr	r2, [pc, #108]	; (80012e0 <MAIN_updateLogSetup+0x180>)
 8001272:	6013      	str	r3, [r2, #0]

        MAIN_togglePrintOutput();
 8001274:	f7ff ff56 	bl	8001124 <MAIN_togglePrintOutput>
      }
      else
      {
        g_MAIN_padRightPressedStartTime = 0;
      }
      break;
 8001278:	e016      	b.n	80012a8 <MAIN_updateLogSetup+0x148>
      else if (UTI_turnRtcTimeToSeconds(&l_time) - g_MAIN_padRightPressedStartTime < STP_PAD_BUTTONS_DEBOUNCE_PERIOD_IN_S)
 800127a:	f107 030c 	add.w	r3, r7, #12
 800127e:	4618      	mov	r0, r3
 8001280:	f00a f8db 	bl	800b43a <UTI_turnRtcTimeToSeconds>
 8001284:	4602      	mov	r2, r0
 8001286:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <MAIN_updateLogSetup+0x180>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b01      	cmp	r3, #1
 800128e:	d90b      	bls.n	80012a8 <MAIN_updateLogSetup+0x148>
        g_MAIN_padRightPressedStartTime = 0;
 8001290:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <MAIN_updateLogSetup+0x180>)
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
      break;
 8001296:	e007      	b.n	80012a8 <MAIN_updateLogSetup+0x148>

    default:
      ; /* Nothing to do */;
      break;
 8001298:	bf00      	nop
 800129a:	e006      	b.n	80012aa <MAIN_updateLogSetup+0x14a>
      break;
 800129c:	bf00      	nop
 800129e:	e004      	b.n	80012aa <MAIN_updateLogSetup+0x14a>
      break;
 80012a0:	bf00      	nop
 80012a2:	e002      	b.n	80012aa <MAIN_updateLogSetup+0x14a>
      break;
 80012a4:	bf00      	nop
 80012a6:	e000      	b.n	80012aa <MAIN_updateLogSetup+0x14a>
      break;
 80012a8:	bf00      	nop
  }

  if ((p_data->button != BLU_BUTTON_PAD_UP) && (p_data->button != BLU_BUTTON_PAD_DOWN))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	7c1b      	ldrb	r3, [r3, #16]
 80012ae:	2b05      	cmp	r3, #5
 80012b0:	d00a      	beq.n	80012c8 <MAIN_updateLogSetup+0x168>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	7c1b      	ldrb	r3, [r3, #16]
 80012b6:	2b07      	cmp	r3, #7
 80012b8:	d006      	beq.n	80012c8 <MAIN_updateLogSetup+0x168>
  {
    g_MAIN_padUpPressedStartTime   = 0;
 80012ba:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <MAIN_updateLogSetup+0x174>)
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
    g_MAIN_padDownPressedStartTime = 0;
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <MAIN_updateLogSetup+0x178>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */;
  }

  return;
 80012c6:	bf00      	nop
 80012c8:	bf00      	nop
}
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	2000084c 	.word	0x2000084c
 80012d4:	20000208 	.word	0x20000208
 80012d8:	2000020c 	.word	0x2000020c
 80012dc:	20000210 	.word	0x20000210
 80012e0:	20000214 	.word	0x20000214

080012e4 <MAIN_updateLedMode>:

static void MAIN_updateLedMode(T_DRV_MODE p_driveMode, uint32_t p_voltageInMv)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	6039      	str	r1, [r7, #0]
 80012ee:	71fb      	strb	r3, [r7, #7]
  /* Regarding LED mode, battery check is prioritary on user requests. */
  /* Ignore 0 value as we could get it at startup or while debugging.  */
  if ((p_voltageInMv != 0) && (p_voltageInMv < MAIN_MIN_BATTERY_LEVEL_IN_MV))
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d00d      	beq.n	8001312 <MAIN_updateLedMode+0x2e>
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	f242 720f 	movw	r2, #9999	; 0x270f
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d808      	bhi.n	8001312 <MAIN_updateLedMode+0x2e>
  {
    LOG_warning("Battery is getting low: %u mV", p_voltageInMv);
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	4911      	ldr	r1, [pc, #68]	; (8001348 <MAIN_updateLedMode+0x64>)
 8001304:	2002      	movs	r0, #2
 8001306:	f009 fc31 	bl	800ab6c <LOG_log>

    LED_setMode(LED_MODE_FORCED_OFF);
 800130a:	2000      	movs	r0, #0
 800130c:	f009 fb0e 	bl	800a92c <LED_setMode>
 8001310:	e016      	b.n	8001340 <MAIN_updateLedMode+0x5c>
  }
  else
  {
    switch (p_driveMode)
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	2b02      	cmp	r3, #2
 8001316:	d00e      	beq.n	8001336 <MAIN_updateLedMode+0x52>
 8001318:	2b02      	cmp	r3, #2
 800131a:	dc10      	bgt.n	800133e <MAIN_updateLedMode+0x5a>
 800131c:	2b00      	cmp	r3, #0
 800131e:	d002      	beq.n	8001326 <MAIN_updateLedMode+0x42>
 8001320:	2b01      	cmp	r3, #1
 8001322:	d004      	beq.n	800132e <MAIN_updateLedMode+0x4a>
        LED_setMode(LED_MODE_BLINK_FAST);
        break;

      default:
        ; /* Nothing to do */
        break;
 8001324:	e00b      	b.n	800133e <MAIN_updateLedMode+0x5a>
        LED_setMode(LED_MODE_BLINK_SLOW);
 8001326:	2002      	movs	r0, #2
 8001328:	f009 fb00 	bl	800a92c <LED_setMode>
        break;
 800132c:	e008      	b.n	8001340 <MAIN_updateLedMode+0x5c>
        LED_setMode(LED_MODE_BLINK_MEDIUM);
 800132e:	2003      	movs	r0, #3
 8001330:	f009 fafc 	bl	800a92c <LED_setMode>
        break;
 8001334:	e004      	b.n	8001340 <MAIN_updateLedMode+0x5c>
        LED_setMode(LED_MODE_BLINK_FAST);
 8001336:	2004      	movs	r0, #4
 8001338:	f009 faf8 	bl	800a92c <LED_setMode>
        break;
 800133c:	e000      	b.n	8001340 <MAIN_updateLedMode+0x5c>
        break;
 800133e:	bf00      	nop
    }
  }

  return;
 8001340:	bf00      	nop
}
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	0800e784 	.word	0x0800e784

0800134c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08e      	sub	sp, #56	; 0x38
 8001350:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001352:	f001 fb2f 	bl	80029b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001356:	f000 f9a5 	bl	80016a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800135a:	f000 fda7 	bl	8001eac <MX_GPIO_Init>
  MX_TIM1_Init();
 800135e:	f000 fa81 	bl	8001864 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001362:	f000 fd79 	bl	8001e58 <MX_USART1_UART_Init>
  MX_UART4_Init();
 8001366:	f000 fd4d 	bl	8001e04 <MX_UART4_Init>
  MX_ADC1_Init();
 800136a:	f000 f9f3 	bl	8001754 <MX_ADC1_Init>
  MX_TIM8_Init();
 800136e:	f000 fc85 	bl	8001c7c <MX_TIM8_Init>
  MX_RTC_Init();
 8001372:	f000 fa2d 	bl	80017d0 <MX_RTC_Init>
  MX_TIM7_Init();
 8001376:	f000 fc4b 	bl	8001c10 <MX_TIM7_Init>
  MX_TIM2_Init();
 800137a:	f000 fac3 	bl	8001904 <MX_TIM2_Init>
  MX_TIM3_Init();
 800137e:	f000 fb15 	bl	80019ac <MX_TIM3_Init>
  MX_TIM4_Init();
 8001382:	f000 fb67 	bl	8001a54 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001386:	f000 fbb9 	bl	8001afc <MX_TIM5_Init>
  MX_TIM6_Init();
 800138a:	f000 fc0b 	bl	8001ba4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* Setup global variables */
  g_MAIN_padUpPressedStartTime    = 0;
 800138e:	4ba7      	ldr	r3, [pc, #668]	; (800162c <main+0x2e0>)
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
  g_MAIN_padDownPressedStartTime  = 0;
 8001394:	4ba6      	ldr	r3, [pc, #664]	; (8001630 <main+0x2e4>)
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
  g_MAIN_padLeftPressedStartTime  = 0;
 800139a:	4ba6      	ldr	r3, [pc, #664]	; (8001634 <main+0x2e8>)
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
  g_MAIN_padRightPressedStartTime = 0;
 80013a0:	4ba5      	ldr	r3, [pc, #660]	; (8001638 <main+0x2ec>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
  g_MAIN_printOutput              = MAIN_PRINT_OUTPUT_TO_CONSOLE;
 80013a6:	4ba5      	ldr	r3, [pc, #660]	; (800163c <main+0x2f0>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]

  /* Initialize commands string FIFO */
  SFO_init(&l_commandsFifo);
 80013ac:	f107 031c 	add.w	r3, r7, #28
 80013b0:	4618      	mov	r0, r3
 80013b2:	f009 feed 	bl	800b190 <SFO_init>

  /* Setup console */
  CON_init(&huart1);
 80013b6:	48a2      	ldr	r0, [pc, #648]	; (8001640 <main+0x2f4>)
 80013b8:	f008 f950 	bl	800965c <CON_init>

  /* Setup master connection */
  MAS_init(&huart4);
 80013bc:	48a1      	ldr	r0, [pc, #644]	; (8001644 <main+0x2f8>)
 80013be:	f009 fc67 	bl	800ac90 <MAS_init>
//  {
//    HAL_Delay(1000);
//  }

  /* Setup and start using logs */
  LOG_init    (&hrtc, STP_DEFAULT_IS_LOG_ON);
 80013c2:	2101      	movs	r1, #1
 80013c4:	48a0      	ldr	r0, [pc, #640]	; (8001648 <main+0x2fc>)
 80013c6:	f009 fb59 	bl	800aa7c <LOG_init>
  LOG_setLevel(STP_DEFAULT_LOG_LEVEL       );
 80013ca:	2000      	movs	r0, #0
 80013cc:	f009 fb8e 	bl	800aaec <LOG_setLevel>
  LOG_info    ("Starting RCFW"             );
 80013d0:	499e      	ldr	r1, [pc, #632]	; (800164c <main+0x300>)
 80013d2:	2001      	movs	r0, #1
 80013d4:	f009 fbca 	bl	800ab6c <LOG_log>

  /* Display RCFW banner */
  MAIN_displayRcfwBanner();
 80013d8:	f7ff fe66 	bl	80010a8 <MAIN_displayRcfwBanner>

  /* Initialize Timer 6 */
  l_halReturnCode = HAL_TIM_Base_Start(&htim6);
 80013dc:	489c      	ldr	r0, [pc, #624]	; (8001650 <main+0x304>)
 80013de:	f004 fe33 	bl	8006048 <HAL_TIM_Base_Start>
 80013e2:	4603      	mov	r3, r0
 80013e4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  if (l_halReturnCode != HAL_OK)
 80013e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d007      	beq.n	8001400 <main+0xb4>
  {
    LOG_error("HAL_TIM_Base_Start(&htim6) returned an error code: %d", l_halReturnCode);
 80013f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80013f4:	461a      	mov	r2, r3
 80013f6:	4997      	ldr	r1, [pc, #604]	; (8001654 <main+0x308>)
 80013f8:	2003      	movs	r0, #3
 80013fa:	f009 fbb7 	bl	800ab6c <LOG_log>
 80013fe:	e003      	b.n	8001408 <main+0xbc>
  }
  else
  {
    LOG_info("Started TIMER 6 (time measurement)");
 8001400:	4995      	ldr	r1, [pc, #596]	; (8001658 <main+0x30c>)
 8001402:	2001      	movs	r0, #1
 8001404:	f009 fbb2 	bl	800ab6c <LOG_log>
  }

  /* Initialize Timer 7 and delay function in utilities */
  UTI_init(&htim7);
 8001408:	4894      	ldr	r0, [pc, #592]	; (800165c <main+0x310>)
 800140a:	f009 ffc1 	bl	800b390 <UTI_init>

  l_halReturnCode = HAL_TIM_Base_Start_IT(&htim7);
 800140e:	4893      	ldr	r0, [pc, #588]	; (800165c <main+0x310>)
 8001410:	f004 fea4 	bl	800615c <HAL_TIM_Base_Start_IT>
 8001414:	4603      	mov	r3, r0
 8001416:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  if (l_halReturnCode != HAL_OK)
 800141a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800141e:	2b00      	cmp	r3, #0
 8001420:	d007      	beq.n	8001432 <main+0xe6>
  {
    LOG_error("HAL_TIM_Base_Start_IT(&htim7) returned an error code: %d", l_halReturnCode);
 8001422:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001426:	461a      	mov	r2, r3
 8001428:	498d      	ldr	r1, [pc, #564]	; (8001660 <main+0x314>)
 800142a:	2003      	movs	r0, #3
 800142c:	f009 fb9e 	bl	800ab6c <LOG_log>
 8001430:	e003      	b.n	800143a <main+0xee>
  }
  else
  {
    LOG_info("Started TIMER 7 (utilities/delay)");
 8001432:	498c      	ldr	r1, [pc, #560]	; (8001664 <main+0x318>)
 8001434:	2001      	movs	r0, #1
 8001436:	f009 fb99 	bl	800ab6c <LOG_log>
  }

  /* Initialize Timer 1 & green LED */
  LED_setMode(LED_MODE_BLINK_FAST);
 800143a:	2004      	movs	r0, #4
 800143c:	f009 fa76 	bl	800a92c <LED_setMode>

  l_halReturnCode = HAL_TIM_Base_Start_IT(&htim1);
 8001440:	4889      	ldr	r0, [pc, #548]	; (8001668 <main+0x31c>)
 8001442:	f004 fe8b 	bl	800615c <HAL_TIM_Base_Start_IT>
 8001446:	4603      	mov	r3, r0
 8001448:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  if (l_halReturnCode != HAL_OK)
 800144c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001450:	2b00      	cmp	r3, #0
 8001452:	d007      	beq.n	8001464 <main+0x118>
  {
    LOG_error("HAL_TIM_Base_Start_IT(&htim1) returned an error code: %d", l_halReturnCode);
 8001454:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001458:	461a      	mov	r2, r3
 800145a:	4984      	ldr	r1, [pc, #528]	; (800166c <main+0x320>)
 800145c:	2003      	movs	r0, #3
 800145e:	f009 fb85 	bl	800ab6c <LOG_log>
 8001462:	e003      	b.n	800146c <main+0x120>
  }
  else
  {
    LOG_info("Started TIMER 1 (green LED)");
 8001464:	4982      	ldr	r1, [pc, #520]	; (8001670 <main+0x324>)
 8001466:	2001      	movs	r0, #1
 8001468:	f009 fb80 	bl	800ab6c <LOG_log>
  }

  /* Initialize Timers 2, 3, 4 & 5 */
  l_halReturnCode  = HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 800146c:	213c      	movs	r1, #60	; 0x3c
 800146e:	4881      	ldr	r0, [pc, #516]	; (8001674 <main+0x328>)
 8001470:	f005 faac 	bl	80069cc <HAL_TIM_Encoder_Start_IT>
 8001474:	4603      	mov	r3, r0
 8001476:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 800147a:	213c      	movs	r1, #60	; 0x3c
 800147c:	487e      	ldr	r0, [pc, #504]	; (8001678 <main+0x32c>)
 800147e:	f005 faa5 	bl	80069cc <HAL_TIM_Encoder_Start_IT>
 8001482:	4603      	mov	r3, r0
 8001484:	461a      	mov	r2, r3
 8001486:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800148a:	4313      	orrs	r3, r2
 800148c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8001490:	213c      	movs	r1, #60	; 0x3c
 8001492:	487a      	ldr	r0, [pc, #488]	; (800167c <main+0x330>)
 8001494:	f005 fa9a 	bl	80069cc <HAL_TIM_Encoder_Start_IT>
 8001498:	4603      	mov	r3, r0
 800149a:	461a      	mov	r2, r3
 800149c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80014a0:	4313      	orrs	r3, r2
 80014a2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 80014a6:	213c      	movs	r1, #60	; 0x3c
 80014a8:	4875      	ldr	r0, [pc, #468]	; (8001680 <main+0x334>)
 80014aa:	f005 fa8f 	bl	80069cc <HAL_TIM_Encoder_Start_IT>
 80014ae:	4603      	mov	r3, r0
 80014b0:	461a      	mov	r2, r3
 80014b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80014b6:	4313      	orrs	r3, r2
 80014b8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  if (l_halReturnCode != HAL_OK)
 80014bc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d007      	beq.n	80014d4 <main+0x188>
  {
    LOG_error("HAL_TIM_Encoder_Start_IT(&htimX) returned error code(s): %d", l_halReturnCode);
 80014c4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80014c8:	461a      	mov	r2, r3
 80014ca:	496e      	ldr	r1, [pc, #440]	; (8001684 <main+0x338>)
 80014cc:	2003      	movs	r0, #3
 80014ce:	f009 fb4d 	bl	800ab6c <LOG_log>
 80014d2:	e003      	b.n	80014dc <main+0x190>
  }
  else
  {
    LOG_info("Started TIMER 2, 3, 4, 5 (encoders)");
 80014d4:	496c      	ldr	r1, [pc, #432]	; (8001688 <main+0x33c>)
 80014d6:	2001      	movs	r0, #1
 80014d8:	f009 fb48 	bl	800ab6c <LOG_log>
  }

  /* Initialize Timer 8 */
  l_halReturnCode = HAL_TIM_Base_Start(&htim8);
 80014dc:	486b      	ldr	r0, [pc, #428]	; (800168c <main+0x340>)
 80014de:	f004 fdb3 	bl	8006048 <HAL_TIM_Base_Start>
 80014e2:	4603      	mov	r3, r0
 80014e4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  if (l_halReturnCode != HAL_OK)
 80014e8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d007      	beq.n	8001500 <main+0x1b4>
  {
    LOG_error("HAL_TIM_Base_Start(&htim8) returned an error code: %d", l_halReturnCode);
 80014f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80014f4:	461a      	mov	r2, r3
 80014f6:	4966      	ldr	r1, [pc, #408]	; (8001690 <main+0x344>)
 80014f8:	2003      	movs	r0, #3
 80014fa:	f009 fb37 	bl	800ab6c <LOG_log>
 80014fe:	e003      	b.n	8001508 <main+0x1bc>
  }
  else
  {
    LOG_info("Started TIMER 8 (PWM channels)");
 8001500:	4964      	ldr	r1, [pc, #400]	; (8001694 <main+0x348>)
 8001502:	2001      	movs	r0, #1
 8001504:	f009 fb32 	bl	800ab6c <LOG_log>
  }

  /* Initialize battery monitor */
  BAT_init(&hadc1, &hrtc);
 8001508:	494f      	ldr	r1, [pc, #316]	; (8001648 <main+0x2fc>)
 800150a:	4863      	ldr	r0, [pc, #396]	; (8001698 <main+0x34c>)
 800150c:	f007 fd72 	bl	8008ff4 <BAT_init>

  /* Initialize PWM channels */
  l_halReturnCode  = HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001510:	2100      	movs	r1, #0
 8001512:	485e      	ldr	r0, [pc, #376]	; (800168c <main+0x340>)
 8001514:	f004 ff90 	bl	8006438 <HAL_TIM_PWM_Start>
 8001518:	4603      	mov	r3, r0
 800151a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  l_halReturnCode |= HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800151e:	2104      	movs	r1, #4
 8001520:	485a      	ldr	r0, [pc, #360]	; (800168c <main+0x340>)
 8001522:	f004 ff89 	bl	8006438 <HAL_TIM_PWM_Start>
 8001526:	4603      	mov	r3, r0
 8001528:	461a      	mov	r2, r3
 800152a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800152e:	4313      	orrs	r3, r2
 8001530:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  l_halReturnCode |= HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001534:	2108      	movs	r1, #8
 8001536:	4855      	ldr	r0, [pc, #340]	; (800168c <main+0x340>)
 8001538:	f004 ff7e 	bl	8006438 <HAL_TIM_PWM_Start>
 800153c:	4603      	mov	r3, r0
 800153e:	461a      	mov	r2, r3
 8001540:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001544:	4313      	orrs	r3, r2
 8001546:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  l_halReturnCode |= HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 800154a:	210c      	movs	r1, #12
 800154c:	484f      	ldr	r0, [pc, #316]	; (800168c <main+0x340>)
 800154e:	f004 ff73 	bl	8006438 <HAL_TIM_PWM_Start>
 8001552:	4603      	mov	r3, r0
 8001554:	461a      	mov	r2, r3
 8001556:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800155a:	4313      	orrs	r3, r2
 800155c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

  if (l_halReturnCode != HAL_OK)
 8001560:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001564:	2b00      	cmp	r3, #0
 8001566:	d007      	beq.n	8001578 <main+0x22c>
  {
    LOG_error("HAL_TIM_PWM_Start(&htim8) returned error code(s): %d", l_halReturnCode);
 8001568:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800156c:	461a      	mov	r2, r3
 800156e:	494b      	ldr	r1, [pc, #300]	; (800169c <main+0x350>)
 8001570:	2003      	movs	r0, #3
 8001572:	f009 fafb 	bl	800ab6c <LOG_log>
 8001576:	e003      	b.n	8001580 <main+0x234>
  }
  else
  {
    LOG_info("Started PWM channels");
 8001578:	4949      	ldr	r1, [pc, #292]	; (80016a0 <main+0x354>)
 800157a:	2001      	movs	r0, #1
 800157c:	f009 faf6 	bl	800ab6c <LOG_log>
  }

  /* Initialize bluetooth control and data */
  BLU_init    ();
 8001580:	f007 ff1c 	bl	80093bc <BLU_init>
  BLU_initData(&l_bluetoothData);
 8001584:	f107 0308 	add.w	r3, r7, #8
 8001588:	4618      	mov	r0, r3
 800158a:	f007 ff27 	bl	80093dc <BLU_initData>

  /* Initialize driving module */
  DRV_init(&htim8, &htim2, &htim3, &htim4, &htim5);
 800158e:	4b3c      	ldr	r3, [pc, #240]	; (8001680 <main+0x334>)
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	4b3a      	ldr	r3, [pc, #232]	; (800167c <main+0x330>)
 8001594:	4a38      	ldr	r2, [pc, #224]	; (8001678 <main+0x32c>)
 8001596:	4937      	ldr	r1, [pc, #220]	; (8001674 <main+0x328>)
 8001598:	483c      	ldr	r0, [pc, #240]	; (800168c <main+0x340>)
 800159a:	f008 f8ef 	bl	800977c <DRV_init>
  DRV_logInfo();
 800159e:	f008 fd5b 	bl	800a058 <DRV_logInfo>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  /* Initialize time measurement for master board control */
  l_lastTime = __HAL_TIM_GET_COUNTER(&htim6);
 80015a2:	4b2b      	ldr	r3, [pc, #172]	; (8001650 <main+0x304>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a8:	85fb      	strh	r3, [r7, #46]	; 0x2e

  while (1)
  {
    BLU_receiveData        (&l_bluetoothData);
 80015aa:	f107 0308 	add.w	r3, r7, #8
 80015ae:	4618      	mov	r0, r3
 80015b0:	f007 ff2c 	bl	800940c <BLU_receiveData>
    //DRV_updateFromBluetooth(&l_bluetoothData);

    l_driveMode = DRV_getMode();
 80015b4:	f008 fd46 	bl	800a044 <DRV_getMode>
 80015b8:	4603      	mov	r3, r0
 80015ba:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    BAT_update         (&l_voltageInMv            );
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	4618      	mov	r0, r3
 80015c2:	f007 fd65 	bl	8009090 <BAT_update>
    MAIN_updateLedMode (l_driveMode, l_voltageInMv);
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80015cc:	4611      	mov	r1, r2
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fe88 	bl	80012e4 <MAIN_updateLedMode>
    MAIN_updateLogSetup(&l_bluetoothData          );
 80015d4:	f107 0308 	add.w	r3, r7, #8
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fdc1 	bl	8001160 <MAIN_updateLogSetup>

    UTI_delayUs(MAIN_LOOP_DELAY_IN_MS);
 80015de:	f242 7010 	movw	r0, #10000	; 0x2710
 80015e2:	f009 fee9 	bl	800b3b8 <UTI_delayUs>

    CON_updateFifo(&l_commandsFifo);
 80015e6:	f107 031c 	add.w	r3, r7, #28
 80015ea:	4618      	mov	r0, r3
 80015ec:	f008 f88e 	bl	800970c <CON_updateFifo>
    MAS_updateFifo(&l_commandsFifo);
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	4618      	mov	r0, r3
 80015f6:	f009 fba3 	bl	800ad40 <MAS_updateFifo>

    l_currentTime = __HAL_TIM_GET_COUNTER(&htim6);
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <main+0x304>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001600:	857b      	strh	r3, [r7, #42]	; 0x2a
    l_deltaTime   = l_lastTime - l_currentTime;
 8001602:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001604:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	853b      	strh	r3, [r7, #40]	; 0x28
    l_lastTime    = l_currentTime;
 800160a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800160c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    DRV_updateFromMaster(&l_commandsFifo, l_deltaTime);
 800160e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001610:	f107 031c 	add.w	r3, r7, #28
 8001614:	4611      	mov	r1, r2
 8001616:	4618      	mov	r0, r3
 8001618:	f008 fb1e 	bl	8009c58 <DRV_updateFromMaster>
    DRV_updateFromBluetooth(&l_bluetoothData, l_deltaTime);
 800161c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800161e:	f107 0308 	add.w	r3, r7, #8
 8001622:	4611      	mov	r1, r2
 8001624:	4618      	mov	r0, r3
 8001626:	f008 f9d5 	bl	80099d4 <DRV_updateFromBluetooth>
    BLU_receiveData        (&l_bluetoothData);
 800162a:	e7be      	b.n	80015aa <main+0x25e>
 800162c:	20000208 	.word	0x20000208
 8001630:	2000020c 	.word	0x2000020c
 8001634:	20000210 	.word	0x20000210
 8001638:	20000214 	.word	0x20000214
 800163c:	200009c8 	.word	0x200009c8
 8001640:	200007d8 	.word	0x200007d8
 8001644:	200009cc 	.word	0x200009cc
 8001648:	2000084c 	.word	0x2000084c
 800164c:	0800e7a4 	.word	0x0800e7a4
 8001650:	20000860 	.word	0x20000860
 8001654:	0800e7b4 	.word	0x0800e7b4
 8001658:	0800e7ec 	.word	0x0800e7ec
 800165c:	20000af4 	.word	0x20000af4
 8001660:	0800e810 	.word	0x0800e810
 8001664:	0800e84c 	.word	0x0800e84c
 8001668:	20000914 	.word	0x20000914
 800166c:	0800e870 	.word	0x0800e870
 8001670:	0800e8ac 	.word	0x0800e8ac
 8001674:	20000a40 	.word	0x20000a40
 8001678:	200006f4 	.word	0x200006f4
 800167c:	2000058c 	.word	0x2000058c
 8001680:	20000640 	.word	0x20000640
 8001684:	0800e8c8 	.word	0x0800e8c8
 8001688:	0800e904 	.word	0x0800e904
 800168c:	200004d8 	.word	0x200004d8
 8001690:	0800e928 	.word	0x0800e928
 8001694:	0800e960 	.word	0x0800e960
 8001698:	200007a8 	.word	0x200007a8
 800169c:	0800e980 	.word	0x0800e980
 80016a0:	0800e9b8 	.word	0x0800e9b8

080016a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b096      	sub	sp, #88	; 0x58
 80016a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016ae:	2228      	movs	r2, #40	; 0x28
 80016b0:	2100      	movs	r1, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f009 ff92 	bl	800b5dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b8:	f107 031c 	add.w	r3, r7, #28
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]
 80016d4:	611a      	str	r2, [r3, #16]
 80016d6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80016d8:	230a      	movs	r3, #10
 80016da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016dc:	2301      	movs	r3, #1
 80016de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016e0:	2310      	movs	r3, #16
 80016e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80016e4:	2301      	movs	r3, #1
 80016e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016f0:	4618      	mov	r0, r3
 80016f2:	f002 fd53 	bl	800419c <HAL_RCC_OscConfig>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80016fc:	f000 fcd6 	bl	80020ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001700:	230f      	movs	r3, #15
 8001702:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001704:	2300      	movs	r3, #0
 8001706:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001708:	2300      	movs	r3, #0
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800170c:	2300      	movs	r3, #0
 800170e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001710:	2300      	movs	r3, #0
 8001712:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001714:	f107 031c 	add.w	r3, r7, #28
 8001718:	2100      	movs	r1, #0
 800171a:	4618      	mov	r0, r3
 800171c:	f003 f8ae 	bl	800487c <HAL_RCC_ClockConfig>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001726:	f000 fcc1 	bl	80020ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800172a:	2303      	movs	r3, #3
 800172c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800172e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001732:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	4618      	mov	r0, r3
 800173c:	f003 fade 	bl	8004cfc <HAL_RCCEx_PeriphCLKConfig>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001746:	f000 fcb1 	bl	80020ac <Error_Handler>
  }
}
 800174a:	bf00      	nop
 800174c:	3758      	adds	r7, #88	; 0x58
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001764:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <MX_ADC1_Init+0x74>)
 8001766:	4a19      	ldr	r2, [pc, #100]	; (80017cc <MX_ADC1_Init+0x78>)
 8001768:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800176a:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <MX_ADC1_Init+0x74>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001770:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <MX_ADC1_Init+0x74>)
 8001772:	2200      	movs	r2, #0
 8001774:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001776:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <MX_ADC1_Init+0x74>)
 8001778:	2200      	movs	r2, #0
 800177a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <MX_ADC1_Init+0x74>)
 800177e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001782:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001784:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <MX_ADC1_Init+0x74>)
 8001786:	2200      	movs	r2, #0
 8001788:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800178a:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <MX_ADC1_Init+0x74>)
 800178c:	2201      	movs	r2, #1
 800178e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001790:	480d      	ldr	r0, [pc, #52]	; (80017c8 <MX_ADC1_Init+0x74>)
 8001792:	f001 f971 	bl	8002a78 <HAL_ADC_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800179c:	f000 fc86 	bl	80020ac <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80017a0:	2305      	movs	r3, #5
 80017a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017a4:	2301      	movs	r3, #1
 80017a6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	4619      	mov	r1, r3
 80017b0:	4805      	ldr	r0, [pc, #20]	; (80017c8 <MX_ADC1_Init+0x74>)
 80017b2:	f001 fd13 	bl	80031dc <HAL_ADC_ConfigChannel>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80017bc:	f000 fc76 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017c0:	bf00      	nop
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	200007a8 	.word	0x200007a8
 80017cc:	40012400 	.word	0x40012400

080017d0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	2100      	movs	r1, #0
 80017da:	460a      	mov	r2, r1
 80017dc:	801a      	strh	r2, [r3, #0]
 80017de:	460a      	mov	r2, r1
 80017e0:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80017e2:	2300      	movs	r3, #0
 80017e4:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80017e6:	4b1d      	ldr	r3, [pc, #116]	; (800185c <MX_RTC_Init+0x8c>)
 80017e8:	4a1d      	ldr	r2, [pc, #116]	; (8001860 <MX_RTC_Init+0x90>)
 80017ea:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80017ec:	4b1b      	ldr	r3, [pc, #108]	; (800185c <MX_RTC_Init+0x8c>)
 80017ee:	f04f 32ff 	mov.w	r2, #4294967295
 80017f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80017f4:	4b19      	ldr	r3, [pc, #100]	; (800185c <MX_RTC_Init+0x8c>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80017fa:	4818      	ldr	r0, [pc, #96]	; (800185c <MX_RTC_Init+0x8c>)
 80017fc:	f003 fc9a 	bl	8005134 <HAL_RTC_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 8001806:	f000 fc51 	bl	80020ac <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800180a:	2300      	movs	r3, #0
 800180c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800180e:	2300      	movs	r3, #0
 8001810:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001812:	2300      	movs	r3, #0
 8001814:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001816:	1d3b      	adds	r3, r7, #4
 8001818:	2201      	movs	r2, #1
 800181a:	4619      	mov	r1, r3
 800181c:	480f      	ldr	r0, [pc, #60]	; (800185c <MX_RTC_Init+0x8c>)
 800181e:	f003 fd53 	bl	80052c8 <HAL_RTC_SetTime>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8001828:	f000 fc40 	bl	80020ac <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800182c:	2301      	movs	r3, #1
 800182e:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001830:	2301      	movs	r3, #1
 8001832:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8001834:	2301      	movs	r3, #1
 8001836:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8001838:	2300      	movs	r3, #0
 800183a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800183c:	463b      	mov	r3, r7
 800183e:	2201      	movs	r2, #1
 8001840:	4619      	mov	r1, r3
 8001842:	4806      	ldr	r0, [pc, #24]	; (800185c <MX_RTC_Init+0x8c>)
 8001844:	f003 ff0c 	bl	8005660 <HAL_RTC_SetDate>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800184e:	f000 fc2d 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	2000084c 	.word	0x2000084c
 8001860:	40002800 	.word	0x40002800

08001864 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800186a:	f107 0308 	add.w	r3, r7, #8
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001878:	463b      	mov	r3, r7
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001880:	4b1e      	ldr	r3, [pc, #120]	; (80018fc <MX_TIM1_Init+0x98>)
 8001882:	4a1f      	ldr	r2, [pc, #124]	; (8001900 <MX_TIM1_Init+0x9c>)
 8001884:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 8001886:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <MX_TIM1_Init+0x98>)
 8001888:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800188c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188e:	4b1b      	ldr	r3, [pc, #108]	; (80018fc <MX_TIM1_Init+0x98>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8001894:	4b19      	ldr	r3, [pc, #100]	; (80018fc <MX_TIM1_Init+0x98>)
 8001896:	22f9      	movs	r2, #249	; 0xf9
 8001898:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800189a:	4b18      	ldr	r3, [pc, #96]	; (80018fc <MX_TIM1_Init+0x98>)
 800189c:	2200      	movs	r2, #0
 800189e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018a0:	4b16      	ldr	r3, [pc, #88]	; (80018fc <MX_TIM1_Init+0x98>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <MX_TIM1_Init+0x98>)
 80018a8:	2280      	movs	r2, #128	; 0x80
 80018aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018ac:	4813      	ldr	r0, [pc, #76]	; (80018fc <MX_TIM1_Init+0x98>)
 80018ae:	f004 faf9 	bl	8005ea4 <HAL_TIM_Base_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80018b8:	f000 fbf8 	bl	80020ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018c2:	f107 0308 	add.w	r3, r7, #8
 80018c6:	4619      	mov	r1, r3
 80018c8:	480c      	ldr	r0, [pc, #48]	; (80018fc <MX_TIM1_Init+0x98>)
 80018ca:	f005 fc23 	bl	8007114 <HAL_TIM_ConfigClockSource>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80018d4:	f000 fbea 	bl	80020ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d8:	2300      	movs	r3, #0
 80018da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018dc:	2300      	movs	r3, #0
 80018de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018e0:	463b      	mov	r3, r7
 80018e2:	4619      	mov	r1, r3
 80018e4:	4805      	ldr	r0, [pc, #20]	; (80018fc <MX_TIM1_Init+0x98>)
 80018e6:	f006 fb71 	bl	8007fcc <HAL_TIMEx_MasterConfigSynchronization>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80018f0:	f000 fbdc 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018f4:	bf00      	nop
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000914 	.word	0x20000914
 8001900:	40012c00 	.word	0x40012c00

08001904 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08c      	sub	sp, #48	; 0x30
 8001908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800190a:	f107 030c 	add.w	r3, r7, #12
 800190e:	2224      	movs	r2, #36	; 0x24
 8001910:	2100      	movs	r1, #0
 8001912:	4618      	mov	r0, r3
 8001914:	f009 fe62 	bl	800b5dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001920:	4b21      	ldr	r3, [pc, #132]	; (80019a8 <MX_TIM2_Init+0xa4>)
 8001922:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001926:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001928:	4b1f      	ldr	r3, [pc, #124]	; (80019a8 <MX_TIM2_Init+0xa4>)
 800192a:	2200      	movs	r2, #0
 800192c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192e:	4b1e      	ldr	r3, [pc, #120]	; (80019a8 <MX_TIM2_Init+0xa4>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001934:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <MX_TIM2_Init+0xa4>)
 8001936:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800193a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800193c:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <MX_TIM2_Init+0xa4>)
 800193e:	2200      	movs	r2, #0
 8001940:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001942:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <MX_TIM2_Init+0xa4>)
 8001944:	2280      	movs	r2, #128	; 0x80
 8001946:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001948:	2303      	movs	r3, #3
 800194a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800194c:	2300      	movs	r3, #0
 800194e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001950:	2301      	movs	r3, #1
 8001952:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001954:	2300      	movs	r3, #0
 8001956:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001958:	230a      	movs	r3, #10
 800195a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800195c:	2300      	movs	r3, #0
 800195e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001960:	2301      	movs	r3, #1
 8001962:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001964:	2300      	movs	r3, #0
 8001966:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001968:	2300      	movs	r3, #0
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800196c:	f107 030c 	add.w	r3, r7, #12
 8001970:	4619      	mov	r1, r3
 8001972:	480d      	ldr	r0, [pc, #52]	; (80019a8 <MX_TIM2_Init+0xa4>)
 8001974:	f004 fe88 	bl	8006688 <HAL_TIM_Encoder_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800197e:	f000 fb95 	bl	80020ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001982:	2300      	movs	r3, #0
 8001984:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	4619      	mov	r1, r3
 800198e:	4806      	ldr	r0, [pc, #24]	; (80019a8 <MX_TIM2_Init+0xa4>)
 8001990:	f006 fb1c 	bl	8007fcc <HAL_TIMEx_MasterConfigSynchronization>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800199a:	f000 fb87 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800199e:	bf00      	nop
 80019a0:	3730      	adds	r7, #48	; 0x30
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000a40 	.word	0x20000a40

080019ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08c      	sub	sp, #48	; 0x30
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019b2:	f107 030c 	add.w	r3, r7, #12
 80019b6:	2224      	movs	r2, #36	; 0x24
 80019b8:	2100      	movs	r1, #0
 80019ba:	4618      	mov	r0, r3
 80019bc:	f009 fe0e 	bl	800b5dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019c8:	4b20      	ldr	r3, [pc, #128]	; (8001a4c <MX_TIM3_Init+0xa0>)
 80019ca:	4a21      	ldr	r2, [pc, #132]	; (8001a50 <MX_TIM3_Init+0xa4>)
 80019cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019ce:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <MX_TIM3_Init+0xa0>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d4:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <MX_TIM3_Init+0xa0>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80019da:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <MX_TIM3_Init+0xa0>)
 80019dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e2:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <MX_TIM3_Init+0xa0>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019e8:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <MX_TIM3_Init+0xa0>)
 80019ea:	2280      	movs	r2, #128	; 0x80
 80019ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019ee:	2303      	movs	r3, #3
 80019f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019f6:	2301      	movs	r3, #1
 80019f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019fa:	2300      	movs	r3, #0
 80019fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80019fe:	230a      	movs	r3, #10
 8001a00:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a02:	2300      	movs	r3, #0
 8001a04:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a06:	2301      	movs	r3, #1
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a12:	f107 030c 	add.w	r3, r7, #12
 8001a16:	4619      	mov	r1, r3
 8001a18:	480c      	ldr	r0, [pc, #48]	; (8001a4c <MX_TIM3_Init+0xa0>)
 8001a1a:	f004 fe35 	bl	8006688 <HAL_TIM_Encoder_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001a24:	f000 fb42 	bl	80020ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	4619      	mov	r1, r3
 8001a34:	4805      	ldr	r0, [pc, #20]	; (8001a4c <MX_TIM3_Init+0xa0>)
 8001a36:	f006 fac9 	bl	8007fcc <HAL_TIMEx_MasterConfigSynchronization>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001a40:	f000 fb34 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a44:	bf00      	nop
 8001a46:	3730      	adds	r7, #48	; 0x30
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	200006f4 	.word	0x200006f4
 8001a50:	40000400 	.word	0x40000400

08001a54 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08c      	sub	sp, #48	; 0x30
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a5a:	f107 030c 	add.w	r3, r7, #12
 8001a5e:	2224      	movs	r2, #36	; 0x24
 8001a60:	2100      	movs	r1, #0
 8001a62:	4618      	mov	r0, r3
 8001a64:	f009 fdba 	bl	800b5dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a70:	4b20      	ldr	r3, [pc, #128]	; (8001af4 <MX_TIM4_Init+0xa0>)
 8001a72:	4a21      	ldr	r2, [pc, #132]	; (8001af8 <MX_TIM4_Init+0xa4>)
 8001a74:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a76:	4b1f      	ldr	r3, [pc, #124]	; (8001af4 <MX_TIM4_Init+0xa0>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a7c:	4b1d      	ldr	r3, [pc, #116]	; (8001af4 <MX_TIM4_Init+0xa0>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001a82:	4b1c      	ldr	r3, [pc, #112]	; (8001af4 <MX_TIM4_Init+0xa0>)
 8001a84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a88:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a8a:	4b1a      	ldr	r3, [pc, #104]	; (8001af4 <MX_TIM4_Init+0xa0>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a90:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <MX_TIM4_Init+0xa0>)
 8001a92:	2280      	movs	r2, #128	; 0x80
 8001a94:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a96:	2303      	movs	r3, #3
 8001a98:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001aa6:	230a      	movs	r3, #10
 8001aa8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001aba:	f107 030c 	add.w	r3, r7, #12
 8001abe:	4619      	mov	r1, r3
 8001ac0:	480c      	ldr	r0, [pc, #48]	; (8001af4 <MX_TIM4_Init+0xa0>)
 8001ac2:	f004 fde1 	bl	8006688 <HAL_TIM_Encoder_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001acc:	f000 faee 	bl	80020ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	4619      	mov	r1, r3
 8001adc:	4805      	ldr	r0, [pc, #20]	; (8001af4 <MX_TIM4_Init+0xa0>)
 8001ade:	f006 fa75 	bl	8007fcc <HAL_TIMEx_MasterConfigSynchronization>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001ae8:	f000 fae0 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001aec:	bf00      	nop
 8001aee:	3730      	adds	r7, #48	; 0x30
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	2000058c 	.word	0x2000058c
 8001af8:	40000800 	.word	0x40000800

08001afc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08c      	sub	sp, #48	; 0x30
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b02:	f107 030c 	add.w	r3, r7, #12
 8001b06:	2224      	movs	r2, #36	; 0x24
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f009 fd66 	bl	800b5dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b18:	4b20      	ldr	r3, [pc, #128]	; (8001b9c <MX_TIM5_Init+0xa0>)
 8001b1a:	4a21      	ldr	r2, [pc, #132]	; (8001ba0 <MX_TIM5_Init+0xa4>)
 8001b1c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001b1e:	4b1f      	ldr	r3, [pc, #124]	; (8001b9c <MX_TIM5_Init+0xa0>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b24:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <MX_TIM5_Init+0xa0>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001b2a:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <MX_TIM5_Init+0xa0>)
 8001b2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b30:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b32:	4b1a      	ldr	r3, [pc, #104]	; (8001b9c <MX_TIM5_Init+0xa0>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b38:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <MX_TIM5_Init+0xa0>)
 8001b3a:	2280      	movs	r2, #128	; 0x80
 8001b3c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b46:	2301      	movs	r3, #1
 8001b48:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001b4e:	230a      	movs	r3, #10
 8001b50:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b52:	2300      	movs	r3, #0
 8001b54:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b56:	2301      	movs	r3, #1
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001b62:	f107 030c 	add.w	r3, r7, #12
 8001b66:	4619      	mov	r1, r3
 8001b68:	480c      	ldr	r0, [pc, #48]	; (8001b9c <MX_TIM5_Init+0xa0>)
 8001b6a:	f004 fd8d 	bl	8006688 <HAL_TIM_Encoder_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001b74:	f000 fa9a 	bl	80020ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	4619      	mov	r1, r3
 8001b84:	4805      	ldr	r0, [pc, #20]	; (8001b9c <MX_TIM5_Init+0xa0>)
 8001b86:	f006 fa21 	bl	8007fcc <HAL_TIMEx_MasterConfigSynchronization>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001b90:	f000 fa8c 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001b94:	bf00      	nop
 8001b96:	3730      	adds	r7, #48	; 0x30
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000640 	.word	0x20000640
 8001ba0:	40000c00 	.word	0x40000c00

08001ba4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001baa:	463b      	mov	r3, r7
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001bb2:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <MX_TIM6_Init+0x64>)
 8001bb4:	4a15      	ldr	r2, [pc, #84]	; (8001c0c <MX_TIM6_Init+0x68>)
 8001bb6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7;
 8001bb8:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <MX_TIM6_Init+0x64>)
 8001bba:	2207      	movs	r2, #7
 8001bbc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bbe:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <MX_TIM6_Init+0x64>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001bc4:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <MX_TIM6_Init+0x64>)
 8001bc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bca:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bcc:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <MX_TIM6_Init+0x64>)
 8001bce:	2280      	movs	r2, #128	; 0x80
 8001bd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001bd2:	480d      	ldr	r0, [pc, #52]	; (8001c08 <MX_TIM6_Init+0x64>)
 8001bd4:	f004 f966 	bl	8005ea4 <HAL_TIM_Base_Init>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001bde:	f000 fa65 	bl	80020ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be6:	2300      	movs	r3, #0
 8001be8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001bea:	463b      	mov	r3, r7
 8001bec:	4619      	mov	r1, r3
 8001bee:	4806      	ldr	r0, [pc, #24]	; (8001c08 <MX_TIM6_Init+0x64>)
 8001bf0:	f006 f9ec 	bl	8007fcc <HAL_TIMEx_MasterConfigSynchronization>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001bfa:	f000 fa57 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000860 	.word	0x20000860
 8001c0c:	40001000 	.word	0x40001000

08001c10 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c16:	463b      	mov	r3, r7
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001c1e:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <MX_TIM7_Init+0x64>)
 8001c20:	4a15      	ldr	r2, [pc, #84]	; (8001c78 <MX_TIM7_Init+0x68>)
 8001c22:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7;
 8001c24:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <MX_TIM7_Init+0x64>)
 8001c26:	2207      	movs	r2, #7
 8001c28:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2a:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <MX_TIM7_Init+0x64>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001c30:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <MX_TIM7_Init+0x64>)
 8001c32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c36:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c38:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <MX_TIM7_Init+0x64>)
 8001c3a:	2280      	movs	r2, #128	; 0x80
 8001c3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001c3e:	480d      	ldr	r0, [pc, #52]	; (8001c74 <MX_TIM7_Init+0x64>)
 8001c40:	f004 f930 	bl	8005ea4 <HAL_TIM_Base_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001c4a:	f000 fa2f 	bl	80020ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c52:	2300      	movs	r3, #0
 8001c54:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001c56:	463b      	mov	r3, r7
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4806      	ldr	r0, [pc, #24]	; (8001c74 <MX_TIM7_Init+0x64>)
 8001c5c:	f006 f9b6 	bl	8007fcc <HAL_TIMEx_MasterConfigSynchronization>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001c66:	f000 fa21 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20000af4 	.word	0x20000af4
 8001c78:	40001400 	.word	0x40001400

08001c7c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b096      	sub	sp, #88	; 0x58
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
 8001c8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	60da      	str	r2, [r3, #12]
 8001ca8:	611a      	str	r2, [r3, #16]
 8001caa:	615a      	str	r2, [r3, #20]
 8001cac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cae:	1d3b      	adds	r3, r7, #4
 8001cb0:	2220      	movs	r2, #32
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f009 fc91 	bl	800b5dc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001cba:	4b50      	ldr	r3, [pc, #320]	; (8001dfc <MX_TIM8_Init+0x180>)
 8001cbc:	4a50      	ldr	r2, [pc, #320]	; (8001e00 <MX_TIM8_Init+0x184>)
 8001cbe:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7;
 8001cc0:	4b4e      	ldr	r3, [pc, #312]	; (8001dfc <MX_TIM8_Init+0x180>)
 8001cc2:	2207      	movs	r2, #7
 8001cc4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc6:	4b4d      	ldr	r3, [pc, #308]	; (8001dfc <MX_TIM8_Init+0x180>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100;
 8001ccc:	4b4b      	ldr	r3, [pc, #300]	; (8001dfc <MX_TIM8_Init+0x180>)
 8001cce:	2264      	movs	r2, #100	; 0x64
 8001cd0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cd2:	4b4a      	ldr	r3, [pc, #296]	; (8001dfc <MX_TIM8_Init+0x180>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001cd8:	4b48      	ldr	r3, [pc, #288]	; (8001dfc <MX_TIM8_Init+0x180>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001cde:	4b47      	ldr	r3, [pc, #284]	; (8001dfc <MX_TIM8_Init+0x180>)
 8001ce0:	2280      	movs	r2, #128	; 0x80
 8001ce2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001ce4:	4845      	ldr	r0, [pc, #276]	; (8001dfc <MX_TIM8_Init+0x180>)
 8001ce6:	f004 f8dd 	bl	8005ea4 <HAL_TIM_Base_Init>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001cf0:	f000 f9dc 	bl	80020ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cf8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001cfa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cfe:	4619      	mov	r1, r3
 8001d00:	483e      	ldr	r0, [pc, #248]	; (8001dfc <MX_TIM8_Init+0x180>)
 8001d02:	f005 fa07 	bl	8007114 <HAL_TIM_ConfigClockSource>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001d0c:	f000 f9ce 	bl	80020ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001d10:	483a      	ldr	r0, [pc, #232]	; (8001dfc <MX_TIM8_Init+0x180>)
 8001d12:	f004 fab5 	bl	8006280 <HAL_TIM_PWM_Init>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001d1c:	f000 f9c6 	bl	80020ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d20:	2300      	movs	r3, #0
 8001d22:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d24:	2300      	movs	r3, #0
 8001d26:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001d28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4833      	ldr	r0, [pc, #204]	; (8001dfc <MX_TIM8_Init+0x180>)
 8001d30:	f006 f94c 	bl	8007fcc <HAL_TIMEx_MasterConfigSynchronization>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8001d3a:	f000 f9b7 	bl	80020ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d3e:	2360      	movs	r3, #96	; 0x60
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d46:	2300      	movs	r3, #0
 8001d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d52:	2300      	movs	r3, #0
 8001d54:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d56:	2300      	movs	r3, #0
 8001d58:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d5e:	2200      	movs	r2, #0
 8001d60:	4619      	mov	r1, r3
 8001d62:	4826      	ldr	r0, [pc, #152]	; (8001dfc <MX_TIM8_Init+0x180>)
 8001d64:	f005 f838 	bl	8006dd8 <HAL_TIM_PWM_ConfigChannel>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8001d6e:	f000 f99d 	bl	80020ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d76:	2204      	movs	r2, #4
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4820      	ldr	r0, [pc, #128]	; (8001dfc <MX_TIM8_Init+0x180>)
 8001d7c:	f005 f82c 	bl	8006dd8 <HAL_TIM_PWM_ConfigChannel>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8001d86:	f000 f991 	bl	80020ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d8e:	2208      	movs	r2, #8
 8001d90:	4619      	mov	r1, r3
 8001d92:	481a      	ldr	r0, [pc, #104]	; (8001dfc <MX_TIM8_Init+0x180>)
 8001d94:	f005 f820 	bl	8006dd8 <HAL_TIM_PWM_ConfigChannel>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8001d9e:	f000 f985 	bl	80020ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da6:	220c      	movs	r2, #12
 8001da8:	4619      	mov	r1, r3
 8001daa:	4814      	ldr	r0, [pc, #80]	; (8001dfc <MX_TIM8_Init+0x180>)
 8001dac:	f005 f814 	bl	8006dd8 <HAL_TIM_PWM_ConfigChannel>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8001db6:	f000 f979 	bl	80020ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001dce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dd2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001dd8:	1d3b      	adds	r3, r7, #4
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4807      	ldr	r0, [pc, #28]	; (8001dfc <MX_TIM8_Init+0x180>)
 8001dde:	f006 f9c5 	bl	800816c <HAL_TIMEx_ConfigBreakDeadTime>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_TIM8_Init+0x170>
  {
    Error_Handler();
 8001de8:	f000 f960 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001dec:	4803      	ldr	r0, [pc, #12]	; (8001dfc <MX_TIM8_Init+0x180>)
 8001dee:	f000 fb7f 	bl	80024f0 <HAL_TIM_MspPostInit>

}
 8001df2:	bf00      	nop
 8001df4:	3758      	adds	r7, #88	; 0x58
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	200004d8 	.word	0x200004d8
 8001e00:	40013400 	.word	0x40013400

08001e04 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001e08:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <MX_UART4_Init+0x4c>)
 8001e0a:	4a12      	ldr	r2, [pc, #72]	; (8001e54 <MX_UART4_Init+0x50>)
 8001e0c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001e0e:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <MX_UART4_Init+0x4c>)
 8001e10:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001e14:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e16:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <MX_UART4_Init+0x4c>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <MX_UART4_Init+0x4c>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001e22:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <MX_UART4_Init+0x4c>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001e28:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <MX_UART4_Init+0x4c>)
 8001e2a:	220c      	movs	r2, #12
 8001e2c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e2e:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <MX_UART4_Init+0x4c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e34:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <MX_UART4_Init+0x4c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001e3a:	4805      	ldr	r0, [pc, #20]	; (8001e50 <MX_UART4_Init+0x4c>)
 8001e3c:	f006 fa7e 	bl	800833c <HAL_UART_Init>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001e46:	f000 f931 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	200009cc 	.word	0x200009cc
 8001e54:	40004c00 	.word	0x40004c00

08001e58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e5c:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e5e:	4a12      	ldr	r2, [pc, #72]	; (8001ea8 <MX_USART1_UART_Init+0x50>)
 8001e60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e62:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e76:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e7c:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e7e:	220c      	movs	r2, #12
 8001e80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e82:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e8e:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e90:	f006 fa54 	bl	800833c <HAL_UART_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e9a:	f000 f907 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	200007d8 	.word	0x200007d8
 8001ea8:	40013800 	.word	0x40013800

08001eac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb2:	f107 0310 	add.w	r3, r7, #16
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	609a      	str	r2, [r3, #8]
 8001ebe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec0:	4b4e      	ldr	r3, [pc, #312]	; (8001ffc <MX_GPIO_Init+0x150>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	4a4d      	ldr	r2, [pc, #308]	; (8001ffc <MX_GPIO_Init+0x150>)
 8001ec6:	f043 0310 	orr.w	r3, r3, #16
 8001eca:	6193      	str	r3, [r2, #24]
 8001ecc:	4b4b      	ldr	r3, [pc, #300]	; (8001ffc <MX_GPIO_Init+0x150>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	f003 0310 	and.w	r3, r3, #16
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed8:	4b48      	ldr	r3, [pc, #288]	; (8001ffc <MX_GPIO_Init+0x150>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	4a47      	ldr	r2, [pc, #284]	; (8001ffc <MX_GPIO_Init+0x150>)
 8001ede:	f043 0304 	orr.w	r3, r3, #4
 8001ee2:	6193      	str	r3, [r2, #24]
 8001ee4:	4b45      	ldr	r3, [pc, #276]	; (8001ffc <MX_GPIO_Init+0x150>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef0:	4b42      	ldr	r3, [pc, #264]	; (8001ffc <MX_GPIO_Init+0x150>)
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	4a41      	ldr	r2, [pc, #260]	; (8001ffc <MX_GPIO_Init+0x150>)
 8001ef6:	f043 0308 	orr.w	r3, r3, #8
 8001efa:	6193      	str	r3, [r2, #24]
 8001efc:	4b3f      	ldr	r3, [pc, #252]	; (8001ffc <MX_GPIO_Init+0x150>)
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	f003 0308 	and.w	r3, r3, #8
 8001f04:	607b      	str	r3, [r7, #4]
 8001f06:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f08:	4b3c      	ldr	r3, [pc, #240]	; (8001ffc <MX_GPIO_Init+0x150>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	4a3b      	ldr	r2, [pc, #236]	; (8001ffc <MX_GPIO_Init+0x150>)
 8001f0e:	f043 0320 	orr.w	r3, r3, #32
 8001f12:	6193      	str	r3, [r2, #24]
 8001f14:	4b39      	ldr	r3, [pc, #228]	; (8001ffc <MX_GPIO_Init+0x150>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f003 0320 	and.w	r3, r3, #32
 8001f1c:	603b      	str	r3, [r7, #0]
 8001f1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BLUE_LED_Pin|BLUETOOTH_SPI_CMD_Pin|BLUETOOTH_SPI_CS_Pin|MOTOR_FRONT_RIGHT_IN_1_Pin
 8001f20:	2200      	movs	r2, #0
 8001f22:	f243 013a 	movw	r1, #12346	; 0x303a
 8001f26:	4836      	ldr	r0, [pc, #216]	; (8002000 <MX_GPIO_Init+0x154>)
 8001f28:	f002 f8d2 	bl	80040d0 <HAL_GPIO_WritePin>
                          |MOTOR_FRONT_RIGHT_IN_2_Pin|MOTOR_REAR_LEFT_IN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUETOOTH_SPI_CLK_GPIO_Port, BLUETOOTH_SPI_CLK_Pin, GPIO_PIN_RESET);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2110      	movs	r1, #16
 8001f30:	4834      	ldr	r0, [pc, #208]	; (8002004 <MX_GPIO_Init+0x158>)
 8001f32:	f002 f8cd 	bl	80040d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_FRONT_LEFT_IN_1_Pin|MOTOR_FRONT_LEFT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_1_Pin, GPIO_PIN_RESET);
 8001f36:	2200      	movs	r2, #0
 8001f38:	2133      	movs	r1, #51	; 0x33
 8001f3a:	4833      	ldr	r0, [pc, #204]	; (8002008 <MX_GPIO_Init+0x15c>)
 8001f3c:	f002 f8c8 	bl	80040d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_REAR_LEFT_IN_1_GPIO_Port, MOTOR_REAR_LEFT_IN_1_Pin, GPIO_PIN_RESET);
 8001f40:	2200      	movs	r2, #0
 8001f42:	2104      	movs	r1, #4
 8001f44:	4831      	ldr	r0, [pc, #196]	; (800200c <MX_GPIO_Init+0x160>)
 8001f46:	f002 f8c3 	bl	80040d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8001f4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f50:	2301      	movs	r3, #1
 8001f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8001f5c:	f107 0310 	add.w	r3, r7, #16
 8001f60:	4619      	mov	r1, r3
 8001f62:	4827      	ldr	r0, [pc, #156]	; (8002000 <MX_GPIO_Init+0x154>)
 8001f64:	f001 fe20 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLUETOOTH_SPI_CMD_Pin BLUETOOTH_SPI_CS_Pin MOTOR_FRONT_RIGHT_IN_1_Pin MOTOR_FRONT_RIGHT_IN_2_Pin
                           MOTOR_REAR_LEFT_IN_2_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_CMD_Pin|BLUETOOTH_SPI_CS_Pin|MOTOR_FRONT_RIGHT_IN_1_Pin|MOTOR_FRONT_RIGHT_IN_2_Pin
 8001f68:	f241 033a 	movw	r3, #4154	; 0x103a
 8001f6c:	613b      	str	r3, [r7, #16]
                          |MOTOR_REAR_LEFT_IN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f76:	2303      	movs	r3, #3
 8001f78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f7a:	f107 0310 	add.w	r3, r7, #16
 8001f7e:	4619      	mov	r1, r3
 8001f80:	481f      	ldr	r0, [pc, #124]	; (8002000 <MX_GPIO_Init+0x154>)
 8001f82:	f001 fe11 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUETOOTH_SPI_DAT_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_DAT_Pin;
 8001f86:	2304      	movs	r3, #4
 8001f88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BLUETOOTH_SPI_DAT_GPIO_Port, &GPIO_InitStruct);
 8001f92:	f107 0310 	add.w	r3, r7, #16
 8001f96:	4619      	mov	r1, r3
 8001f98:	4819      	ldr	r0, [pc, #100]	; (8002000 <MX_GPIO_Init+0x154>)
 8001f9a:	f001 fe05 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUETOOTH_SPI_CLK_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_CLK_Pin;
 8001f9e:	2310      	movs	r3, #16
 8001fa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001faa:	2303      	movs	r3, #3
 8001fac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUETOOTH_SPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001fae:	f107 0310 	add.w	r3, r7, #16
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4813      	ldr	r0, [pc, #76]	; (8002004 <MX_GPIO_Init+0x158>)
 8001fb6:	f001 fdf7 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_FRONT_LEFT_IN_1_Pin MOTOR_FRONT_LEFT_IN_2_Pin MOTOR_REAR_RIGHT_IN_2_Pin MOTOR_REAR_RIGHT_IN_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_FRONT_LEFT_IN_1_Pin|MOTOR_FRONT_LEFT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_1_Pin;
 8001fba:	2333      	movs	r3, #51	; 0x33
 8001fbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fca:	f107 0310 	add.w	r3, r7, #16
 8001fce:	4619      	mov	r1, r3
 8001fd0:	480d      	ldr	r0, [pc, #52]	; (8002008 <MX_GPIO_Init+0x15c>)
 8001fd2:	f001 fde9 	bl	8003ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_REAR_LEFT_IN_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_REAR_LEFT_IN_1_Pin;
 8001fd6:	2304      	movs	r3, #4
 8001fd8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MOTOR_REAR_LEFT_IN_1_GPIO_Port, &GPIO_InitStruct);
 8001fe6:	f107 0310 	add.w	r3, r7, #16
 8001fea:	4619      	mov	r1, r3
 8001fec:	4807      	ldr	r0, [pc, #28]	; (800200c <MX_GPIO_Init+0x160>)
 8001fee:	f001 fddb 	bl	8003ba8 <HAL_GPIO_Init>

}
 8001ff2:	bf00      	nop
 8001ff4:	3720      	adds	r7, #32
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40011000 	.word	0x40011000
 8002004:	40010800 	.word	0x40010800
 8002008:	40010c00 	.word	0x40010c00
 800200c:	40011400 	.word	0x40011400

08002010 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  if ((htim == &htim2) || (htim == &htim3) || (htim == &htim4) || (htim == &htim5))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a0b      	ldr	r2, [pc, #44]	; (8002048 <HAL_TIM_IC_CaptureCallback+0x38>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d00b      	beq.n	8002038 <HAL_TIM_IC_CaptureCallback+0x28>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a0a      	ldr	r2, [pc, #40]	; (800204c <HAL_TIM_IC_CaptureCallback+0x3c>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d007      	beq.n	8002038 <HAL_TIM_IC_CaptureCallback+0x28>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a09      	ldr	r2, [pc, #36]	; (8002050 <HAL_TIM_IC_CaptureCallback+0x40>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d003      	beq.n	8002038 <HAL_TIM_IC_CaptureCallback+0x28>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a08      	ldr	r2, [pc, #32]	; (8002054 <HAL_TIM_IC_CaptureCallback+0x44>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d103      	bne.n	8002040 <HAL_TIM_IC_CaptureCallback+0x30>
  {
    DRV_updateEncoder(htim);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f007 fc87 	bl	800994c <DRV_updateEncoder>
  else
  {
    ; /* Nothing to do */
  }

  return;
 800203e:	bf00      	nop
 8002040:	bf00      	nop
}
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20000a40 	.word	0x20000a40
 800204c:	200006f4 	.word	0x200006f4
 8002050:	2000058c 	.word	0x2000058c
 8002054:	20000640 	.word	0x20000640

08002058 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Check the handle of the timer triggering this callback and update LED */
  if (htim == &htim1)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a04      	ldr	r2, [pc, #16]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d101      	bne.n	800206c <HAL_TIM_PeriodElapsedCallback+0x14>
  {
    LED_update();
 8002068:	f008 fca8 	bl	800a9bc <LED_update>
  }
  else
  {
    ; /* Nothing to do */
  }
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000914 	.word	0x20000914

08002078 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Check the handle of the UART triggering this callback and actually receive date */
  if (huart == &huart1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a08      	ldr	r2, [pc, #32]	; (80020a4 <HAL_UART_RxCpltCallback+0x2c>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d102      	bne.n	800208e <HAL_UART_RxCpltCallback+0x16>
  {
    CON_receiveData();
 8002088:	f007 fb14 	bl	80096b4 <CON_receiveData>
  }
  else
  {
    ; /* Nothing to do */
  }
}
 800208c:	e005      	b.n	800209a <HAL_UART_RxCpltCallback+0x22>
  else if (huart == &huart4)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a05      	ldr	r2, [pc, #20]	; (80020a8 <HAL_UART_RxCpltCallback+0x30>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d101      	bne.n	800209a <HAL_UART_RxCpltCallback+0x22>
    MAS_receiveData();
 8002096:	f008 fe27 	bl	800ace8 <MAS_receiveData>
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	200007d8 	.word	0x200007d8
 80020a8:	200009cc 	.word	0x200009cc

080020ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020b0:	b672      	cpsid	i
}
 80020b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  LOG_error("Error_Handler() triggered");
 80020b4:	4902      	ldr	r1, [pc, #8]	; (80020c0 <Error_Handler+0x14>)
 80020b6:	2003      	movs	r0, #3
 80020b8:	f008 fd58 	bl	800ab6c <LOG_log>

  while (1)
 80020bc:	e7fe      	b.n	80020bc <Error_Handler+0x10>
 80020be:	bf00      	nop
 80020c0:	0800e9d0 	.word	0x0800e9d0

080020c4 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
     LOG_error("Wrong parameters: %s@%d", file, line);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	4904      	ldr	r1, [pc, #16]	; (80020e4 <assert_failed+0x20>)
 80020d4:	2003      	movs	r0, #3
 80020d6:	f008 fd49 	bl	800ab6c <LOG_log>

    return;
 80020da:	bf00      	nop
  /* USER CODE END 6 */
}
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	0800e9ec 	.word	0x0800e9ec

080020e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80020ee:	4b15      	ldr	r3, [pc, #84]	; (8002144 <HAL_MspInit+0x5c>)
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	4a14      	ldr	r2, [pc, #80]	; (8002144 <HAL_MspInit+0x5c>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6193      	str	r3, [r2, #24]
 80020fa:	4b12      	ldr	r3, [pc, #72]	; (8002144 <HAL_MspInit+0x5c>)
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002106:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <HAL_MspInit+0x5c>)
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	4a0e      	ldr	r2, [pc, #56]	; (8002144 <HAL_MspInit+0x5c>)
 800210c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002110:	61d3      	str	r3, [r2, #28]
 8002112:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <HAL_MspInit+0x5c>)
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211a:	607b      	str	r3, [r7, #4]
 800211c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800211e:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <HAL_MspInit+0x60>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	4a04      	ldr	r2, [pc, #16]	; (8002148 <HAL_MspInit+0x60>)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800213a:	bf00      	nop
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr
 8002144:	40021000 	.word	0x40021000
 8002148:	40010000 	.word	0x40010000

0800214c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b088      	sub	sp, #32
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002154:	f107 0310 	add.w	r3, r7, #16
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a14      	ldr	r2, [pc, #80]	; (80021b8 <HAL_ADC_MspInit+0x6c>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d121      	bne.n	80021b0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800216c:	4b13      	ldr	r3, [pc, #76]	; (80021bc <HAL_ADC_MspInit+0x70>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	4a12      	ldr	r2, [pc, #72]	; (80021bc <HAL_ADC_MspInit+0x70>)
 8002172:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002176:	6193      	str	r3, [r2, #24]
 8002178:	4b10      	ldr	r3, [pc, #64]	; (80021bc <HAL_ADC_MspInit+0x70>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002184:	4b0d      	ldr	r3, [pc, #52]	; (80021bc <HAL_ADC_MspInit+0x70>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	4a0c      	ldr	r2, [pc, #48]	; (80021bc <HAL_ADC_MspInit+0x70>)
 800218a:	f043 0304 	orr.w	r3, r3, #4
 800218e:	6193      	str	r3, [r2, #24]
 8002190:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <HAL_ADC_MspInit+0x70>)
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = BATTERY_ADC_Pin;
 800219c:	2320      	movs	r3, #32
 800219e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021a0:	2303      	movs	r3, #3
 80021a2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATTERY_ADC_GPIO_Port, &GPIO_InitStruct);
 80021a4:	f107 0310 	add.w	r3, r7, #16
 80021a8:	4619      	mov	r1, r3
 80021aa:	4805      	ldr	r0, [pc, #20]	; (80021c0 <HAL_ADC_MspInit+0x74>)
 80021ac:	f001 fcfc 	bl	8003ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80021b0:	bf00      	nop
 80021b2:	3720      	adds	r7, #32
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40012400 	.word	0x40012400
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40010800 	.word	0x40010800

080021c4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a0b      	ldr	r2, [pc, #44]	; (8002200 <HAL_RTC_MspInit+0x3c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d110      	bne.n	80021f8 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80021d6:	f001 ffd5 	bl	8004184 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80021da:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <HAL_RTC_MspInit+0x40>)
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	4a09      	ldr	r2, [pc, #36]	; (8002204 <HAL_RTC_MspInit+0x40>)
 80021e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80021e4:	61d3      	str	r3, [r2, #28]
 80021e6:	4b07      	ldr	r3, [pc, #28]	; (8002204 <HAL_RTC_MspInit+0x40>)
 80021e8:	69db      	ldr	r3, [r3, #28]
 80021ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021f2:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_RTC_MspInit+0x44>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80021f8:	bf00      	nop
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40002800 	.word	0x40002800
 8002204:	40021000 	.word	0x40021000
 8002208:	4242043c 	.word	0x4242043c

0800220c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a28      	ldr	r2, [pc, #160]	; (80022bc <HAL_TIM_Base_MspInit+0xb0>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d114      	bne.n	8002248 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800221e:	4b28      	ldr	r3, [pc, #160]	; (80022c0 <HAL_TIM_Base_MspInit+0xb4>)
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	4a27      	ldr	r2, [pc, #156]	; (80022c0 <HAL_TIM_Base_MspInit+0xb4>)
 8002224:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002228:	6193      	str	r3, [r2, #24]
 800222a:	4b25      	ldr	r3, [pc, #148]	; (80022c0 <HAL_TIM_Base_MspInit+0xb4>)
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 6, 0);
 8002236:	2200      	movs	r2, #0
 8002238:	2106      	movs	r1, #6
 800223a:	2019      	movs	r0, #25
 800223c:	f001 fb22 	bl	8003884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002240:	2019      	movs	r0, #25
 8002242:	f001 fb4b 	bl	80038dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002246:	e034      	b.n	80022b2 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM6)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a1d      	ldr	r2, [pc, #116]	; (80022c4 <HAL_TIM_Base_MspInit+0xb8>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d10c      	bne.n	800226c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002252:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <HAL_TIM_Base_MspInit+0xb4>)
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	4a1a      	ldr	r2, [pc, #104]	; (80022c0 <HAL_TIM_Base_MspInit+0xb4>)
 8002258:	f043 0310 	orr.w	r3, r3, #16
 800225c:	61d3      	str	r3, [r2, #28]
 800225e:	4b18      	ldr	r3, [pc, #96]	; (80022c0 <HAL_TIM_Base_MspInit+0xb4>)
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	f003 0310 	and.w	r3, r3, #16
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	693b      	ldr	r3, [r7, #16]
}
 800226a:	e022      	b.n	80022b2 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM7)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a15      	ldr	r2, [pc, #84]	; (80022c8 <HAL_TIM_Base_MspInit+0xbc>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d10c      	bne.n	8002290 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002276:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <HAL_TIM_Base_MspInit+0xb4>)
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	4a11      	ldr	r2, [pc, #68]	; (80022c0 <HAL_TIM_Base_MspInit+0xb4>)
 800227c:	f043 0320 	orr.w	r3, r3, #32
 8002280:	61d3      	str	r3, [r2, #28]
 8002282:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <HAL_TIM_Base_MspInit+0xb4>)
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	f003 0320 	and.w	r3, r3, #32
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]
}
 800228e:	e010      	b.n	80022b2 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM8)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a0d      	ldr	r2, [pc, #52]	; (80022cc <HAL_TIM_Base_MspInit+0xc0>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d10b      	bne.n	80022b2 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800229a:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <HAL_TIM_Base_MspInit+0xb4>)
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	4a08      	ldr	r2, [pc, #32]	; (80022c0 <HAL_TIM_Base_MspInit+0xb4>)
 80022a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022a4:	6193      	str	r3, [r2, #24]
 80022a6:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_TIM_Base_MspInit+0xb4>)
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022ae:	60bb      	str	r3, [r7, #8]
 80022b0:	68bb      	ldr	r3, [r7, #8]
}
 80022b2:	bf00      	nop
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40012c00 	.word	0x40012c00
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40001000 	.word	0x40001000
 80022c8:	40001400 	.word	0x40001400
 80022cc:	40013400 	.word	0x40013400

080022d0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b090      	sub	sp, #64	; 0x40
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ee:	d157      	bne.n	80023a0 <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022f0:	4b78      	ldr	r3, [pc, #480]	; (80024d4 <HAL_TIM_Encoder_MspInit+0x204>)
 80022f2:	69db      	ldr	r3, [r3, #28]
 80022f4:	4a77      	ldr	r2, [pc, #476]	; (80024d4 <HAL_TIM_Encoder_MspInit+0x204>)
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	61d3      	str	r3, [r2, #28]
 80022fc:	4b75      	ldr	r3, [pc, #468]	; (80024d4 <HAL_TIM_Encoder_MspInit+0x204>)
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	62bb      	str	r3, [r7, #40]	; 0x28
 8002306:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002308:	4b72      	ldr	r3, [pc, #456]	; (80024d4 <HAL_TIM_Encoder_MspInit+0x204>)
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	4a71      	ldr	r2, [pc, #452]	; (80024d4 <HAL_TIM_Encoder_MspInit+0x204>)
 800230e:	f043 0304 	orr.w	r3, r3, #4
 8002312:	6193      	str	r3, [r2, #24]
 8002314:	4b6f      	ldr	r3, [pc, #444]	; (80024d4 <HAL_TIM_Encoder_MspInit+0x204>)
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002320:	4b6c      	ldr	r3, [pc, #432]	; (80024d4 <HAL_TIM_Encoder_MspInit+0x204>)
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	4a6b      	ldr	r2, [pc, #428]	; (80024d4 <HAL_TIM_Encoder_MspInit+0x204>)
 8002326:	f043 0308 	orr.w	r3, r3, #8
 800232a:	6193      	str	r3, [r2, #24]
 800232c:	4b69      	ldr	r3, [pc, #420]	; (80024d4 <HAL_TIM_Encoder_MspInit+0x204>)
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	623b      	str	r3, [r7, #32]
 8002336:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_1_IN_1_Pin;
 8002338:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800233c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800233e:	2300      	movs	r3, #0
 8002340:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENCODER_1_IN_1_GPIO_Port, &GPIO_InitStruct);
 8002346:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800234a:	4619      	mov	r1, r3
 800234c:	4862      	ldr	r0, [pc, #392]	; (80024d8 <HAL_TIM_Encoder_MspInit+0x208>)
 800234e:	f001 fc2b 	bl	8003ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER_1_IN_2_Pin;
 8002352:	2308      	movs	r3, #8
 8002354:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002356:	2300      	movs	r3, #0
 8002358:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENCODER_1_IN_2_GPIO_Port, &GPIO_InitStruct);
 800235e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002362:	4619      	mov	r1, r3
 8002364:	485d      	ldr	r0, [pc, #372]	; (80024dc <HAL_TIM_Encoder_MspInit+0x20c>)
 8002366:	f001 fc1f 	bl	8003ba8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800236a:	4b5d      	ldr	r3, [pc, #372]	; (80024e0 <HAL_TIM_Encoder_MspInit+0x210>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002376:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800237a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800237e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002386:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002388:	4a55      	ldr	r2, [pc, #340]	; (80024e0 <HAL_TIM_Encoder_MspInit+0x210>)
 800238a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800238c:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 800238e:	2200      	movs	r2, #0
 8002390:	2104      	movs	r1, #4
 8002392:	201c      	movs	r0, #28
 8002394:	f001 fa76 	bl	8003884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002398:	201c      	movs	r0, #28
 800239a:	f001 fa9f 	bl	80038dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800239e:	e094      	b.n	80024ca <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM3)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a4f      	ldr	r2, [pc, #316]	; (80024e4 <HAL_TIM_Encoder_MspInit+0x214>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d12c      	bne.n	8002404 <HAL_TIM_Encoder_MspInit+0x134>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023aa:	4b4a      	ldr	r3, [pc, #296]	; (80024d4 <HAL_TIM_Encoder_MspInit+0x204>)
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	4a49      	ldr	r2, [pc, #292]	; (80024d4 <HAL_TIM_Encoder_MspInit+0x204>)
 80023b0:	f043 0302 	orr.w	r3, r3, #2
 80023b4:	61d3      	str	r3, [r2, #28]
 80023b6:	4b47      	ldr	r3, [pc, #284]	; (80024d4 <HAL_TIM_Encoder_MspInit+0x204>)
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	61fb      	str	r3, [r7, #28]
 80023c0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c2:	4b44      	ldr	r3, [pc, #272]	; (80024d4 <HAL_TIM_Encoder_MspInit+0x204>)
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	4a43      	ldr	r2, [pc, #268]	; (80024d4 <HAL_TIM_Encoder_MspInit+0x204>)
 80023c8:	f043 0304 	orr.w	r3, r3, #4
 80023cc:	6193      	str	r3, [r2, #24]
 80023ce:	4b41      	ldr	r3, [pc, #260]	; (80024d4 <HAL_TIM_Encoder_MspInit+0x204>)
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	f003 0304 	and.w	r3, r3, #4
 80023d6:	61bb      	str	r3, [r7, #24]
 80023d8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENCODER_2_IN_1_Pin|ENCODER_2_IN_2_Pin;
 80023da:	23c0      	movs	r3, #192	; 0xc0
 80023dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023de:	2300      	movs	r3, #0
 80023e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023ea:	4619      	mov	r1, r3
 80023ec:	483a      	ldr	r0, [pc, #232]	; (80024d8 <HAL_TIM_Encoder_MspInit+0x208>)
 80023ee:	f001 fbdb 	bl	8003ba8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 4, 0);
 80023f2:	2200      	movs	r2, #0
 80023f4:	2104      	movs	r1, #4
 80023f6:	201d      	movs	r0, #29
 80023f8:	f001 fa44 	bl	8003884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80023fc:	201d      	movs	r0, #29
 80023fe:	f001 fa6d 	bl	80038dc <HAL_NVIC_EnableIRQ>
}
 8002402:	e062      	b.n	80024ca <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM4)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a37      	ldr	r2, [pc, #220]	; (80024e8 <HAL_TIM_Encoder_MspInit+0x218>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d12c      	bne.n	8002468 <HAL_TIM_Encoder_MspInit+0x198>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800240e:	4b31      	ldr	r3, [pc, #196]	; (80024d4 <HAL_TIM_Encoder_MspInit+0x204>)
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	4a30      	ldr	r2, [pc, #192]	; (80024d4 <HAL_TIM_Encoder_MspInit+0x204>)
 8002414:	f043 0304 	orr.w	r3, r3, #4
 8002418:	61d3      	str	r3, [r2, #28]
 800241a:	4b2e      	ldr	r3, [pc, #184]	; (80024d4 <HAL_TIM_Encoder_MspInit+0x204>)
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	f003 0304 	and.w	r3, r3, #4
 8002422:	617b      	str	r3, [r7, #20]
 8002424:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002426:	4b2b      	ldr	r3, [pc, #172]	; (80024d4 <HAL_TIM_Encoder_MspInit+0x204>)
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	4a2a      	ldr	r2, [pc, #168]	; (80024d4 <HAL_TIM_Encoder_MspInit+0x204>)
 800242c:	f043 0308 	orr.w	r3, r3, #8
 8002430:	6193      	str	r3, [r2, #24]
 8002432:	4b28      	ldr	r3, [pc, #160]	; (80024d4 <HAL_TIM_Encoder_MspInit+0x204>)
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	f003 0308 	and.w	r3, r3, #8
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENCODER_3_IN_1_Pin|ENCODER_3_IN_2_Pin;
 800243e:	23c0      	movs	r3, #192	; 0xc0
 8002440:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002442:	2300      	movs	r3, #0
 8002444:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002446:	2300      	movs	r3, #0
 8002448:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800244a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800244e:	4619      	mov	r1, r3
 8002450:	4822      	ldr	r0, [pc, #136]	; (80024dc <HAL_TIM_Encoder_MspInit+0x20c>)
 8002452:	f001 fba9 	bl	8003ba8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 4, 0);
 8002456:	2200      	movs	r2, #0
 8002458:	2104      	movs	r1, #4
 800245a:	201e      	movs	r0, #30
 800245c:	f001 fa12 	bl	8003884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002460:	201e      	movs	r0, #30
 8002462:	f001 fa3b 	bl	80038dc <HAL_NVIC_EnableIRQ>
}
 8002466:	e030      	b.n	80024ca <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM5)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a1f      	ldr	r2, [pc, #124]	; (80024ec <HAL_TIM_Encoder_MspInit+0x21c>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d12b      	bne.n	80024ca <HAL_TIM_Encoder_MspInit+0x1fa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002472:	4b18      	ldr	r3, [pc, #96]	; (80024d4 <HAL_TIM_Encoder_MspInit+0x204>)
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	4a17      	ldr	r2, [pc, #92]	; (80024d4 <HAL_TIM_Encoder_MspInit+0x204>)
 8002478:	f043 0308 	orr.w	r3, r3, #8
 800247c:	61d3      	str	r3, [r2, #28]
 800247e:	4b15      	ldr	r3, [pc, #84]	; (80024d4 <HAL_TIM_Encoder_MspInit+0x204>)
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800248a:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <HAL_TIM_Encoder_MspInit+0x204>)
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	4a11      	ldr	r2, [pc, #68]	; (80024d4 <HAL_TIM_Encoder_MspInit+0x204>)
 8002490:	f043 0304 	orr.w	r3, r3, #4
 8002494:	6193      	str	r3, [r2, #24]
 8002496:	4b0f      	ldr	r3, [pc, #60]	; (80024d4 <HAL_TIM_Encoder_MspInit+0x204>)
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	f003 0304 	and.w	r3, r3, #4
 800249e:	60bb      	str	r3, [r7, #8]
 80024a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_4_IN_1_Pin|ENCODER_4_IN_2_Pin;
 80024a2:	2303      	movs	r3, #3
 80024a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024a6:	2300      	movs	r3, #0
 80024a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024b2:	4619      	mov	r1, r3
 80024b4:	4808      	ldr	r0, [pc, #32]	; (80024d8 <HAL_TIM_Encoder_MspInit+0x208>)
 80024b6:	f001 fb77 	bl	8003ba8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 4, 0);
 80024ba:	2200      	movs	r2, #0
 80024bc:	2104      	movs	r1, #4
 80024be:	2032      	movs	r0, #50	; 0x32
 80024c0:	f001 f9e0 	bl	8003884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80024c4:	2032      	movs	r0, #50	; 0x32
 80024c6:	f001 fa09 	bl	80038dc <HAL_NVIC_EnableIRQ>
}
 80024ca:	bf00      	nop
 80024cc:	3740      	adds	r7, #64	; 0x40
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40010800 	.word	0x40010800
 80024dc:	40010c00 	.word	0x40010c00
 80024e0:	40010000 	.word	0x40010000
 80024e4:	40000400 	.word	0x40000400
 80024e8:	40000800 	.word	0x40000800
 80024ec:	40000c00 	.word	0x40000c00

080024f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b088      	sub	sp, #32
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f8:	f107 0310 	add.w	r3, r7, #16
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM8)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a10      	ldr	r2, [pc, #64]	; (800254c <HAL_TIM_MspPostInit+0x5c>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d118      	bne.n	8002542 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002510:	4b0f      	ldr	r3, [pc, #60]	; (8002550 <HAL_TIM_MspPostInit+0x60>)
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	4a0e      	ldr	r2, [pc, #56]	; (8002550 <HAL_TIM_MspPostInit+0x60>)
 8002516:	f043 0310 	orr.w	r3, r3, #16
 800251a:	6193      	str	r3, [r2, #24]
 800251c:	4b0c      	ldr	r3, [pc, #48]	; (8002550 <HAL_TIM_MspPostInit+0x60>)
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	f003 0310 	and.w	r3, r3, #16
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	68fb      	ldr	r3, [r7, #12]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_FRONT_LEFT_PWM_Pin|MOTOR_FRONT_RIGHT_PWM_Pin|MOTOR_REAR_LEFT_PWM_Pin|MOTOR_REAR_RIGHT_PWM_Pin;
 8002528:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800252c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252e:	2302      	movs	r3, #2
 8002530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002532:	2303      	movs	r3, #3
 8002534:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002536:	f107 0310 	add.w	r3, r7, #16
 800253a:	4619      	mov	r1, r3
 800253c:	4805      	ldr	r0, [pc, #20]	; (8002554 <HAL_TIM_MspPostInit+0x64>)
 800253e:	f001 fb33 	bl	8003ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002542:	bf00      	nop
 8002544:	3720      	adds	r7, #32
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40013400 	.word	0x40013400
 8002550:	40021000 	.word	0x40021000
 8002554:	40011000 	.word	0x40011000

08002558 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08a      	sub	sp, #40	; 0x28
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002560:	f107 0318 	add.w	r3, r7, #24
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a40      	ldr	r2, [pc, #256]	; (8002674 <HAL_UART_MspInit+0x11c>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d13a      	bne.n	80025ee <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002578:	4b3f      	ldr	r3, [pc, #252]	; (8002678 <HAL_UART_MspInit+0x120>)
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	4a3e      	ldr	r2, [pc, #248]	; (8002678 <HAL_UART_MspInit+0x120>)
 800257e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002582:	61d3      	str	r3, [r2, #28]
 8002584:	4b3c      	ldr	r3, [pc, #240]	; (8002678 <HAL_UART_MspInit+0x120>)
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002590:	4b39      	ldr	r3, [pc, #228]	; (8002678 <HAL_UART_MspInit+0x120>)
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	4a38      	ldr	r2, [pc, #224]	; (8002678 <HAL_UART_MspInit+0x120>)
 8002596:	f043 0310 	orr.w	r3, r3, #16
 800259a:	6193      	str	r3, [r2, #24]
 800259c:	4b36      	ldr	r3, [pc, #216]	; (8002678 <HAL_UART_MspInit+0x120>)
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	f003 0310 	and.w	r3, r3, #16
 80025a4:	613b      	str	r3, [r7, #16]
 80025a6:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = MASTER_USART_TX_Pin;
 80025a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ae:	2302      	movs	r3, #2
 80025b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025b2:	2303      	movs	r3, #3
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MASTER_USART_TX_GPIO_Port, &GPIO_InitStruct);
 80025b6:	f107 0318 	add.w	r3, r7, #24
 80025ba:	4619      	mov	r1, r3
 80025bc:	482f      	ldr	r0, [pc, #188]	; (800267c <HAL_UART_MspInit+0x124>)
 80025be:	f001 faf3 	bl	8003ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MASTER_USART_RX_Pin;
 80025c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025c8:	2300      	movs	r3, #0
 80025ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MASTER_USART_RX_GPIO_Port, &GPIO_InitStruct);
 80025d0:	f107 0318 	add.w	r3, r7, #24
 80025d4:	4619      	mov	r1, r3
 80025d6:	4829      	ldr	r0, [pc, #164]	; (800267c <HAL_UART_MspInit+0x124>)
 80025d8:	f001 fae6 	bl	8003ba8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80025dc:	2200      	movs	r2, #0
 80025de:	2105      	movs	r1, #5
 80025e0:	2034      	movs	r0, #52	; 0x34
 80025e2:	f001 f94f 	bl	8003884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80025e6:	2034      	movs	r0, #52	; 0x34
 80025e8:	f001 f978 	bl	80038dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80025ec:	e03e      	b.n	800266c <HAL_UART_MspInit+0x114>
  else if(huart->Instance==USART1)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a23      	ldr	r2, [pc, #140]	; (8002680 <HAL_UART_MspInit+0x128>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d139      	bne.n	800266c <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART1_CLK_ENABLE();
 80025f8:	4b1f      	ldr	r3, [pc, #124]	; (8002678 <HAL_UART_MspInit+0x120>)
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	4a1e      	ldr	r2, [pc, #120]	; (8002678 <HAL_UART_MspInit+0x120>)
 80025fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002602:	6193      	str	r3, [r2, #24]
 8002604:	4b1c      	ldr	r3, [pc, #112]	; (8002678 <HAL_UART_MspInit+0x120>)
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002610:	4b19      	ldr	r3, [pc, #100]	; (8002678 <HAL_UART_MspInit+0x120>)
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	4a18      	ldr	r2, [pc, #96]	; (8002678 <HAL_UART_MspInit+0x120>)
 8002616:	f043 0304 	orr.w	r3, r3, #4
 800261a:	6193      	str	r3, [r2, #24]
 800261c:	4b16      	ldr	r3, [pc, #88]	; (8002678 <HAL_UART_MspInit+0x120>)
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	60bb      	str	r3, [r7, #8]
 8002626:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CONSOLE_USART_TX_Pin;
 8002628:	f44f 7300 	mov.w	r3, #512	; 0x200
 800262c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262e:	2302      	movs	r3, #2
 8002630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002632:	2303      	movs	r3, #3
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CONSOLE_USART_TX_GPIO_Port, &GPIO_InitStruct);
 8002636:	f107 0318 	add.w	r3, r7, #24
 800263a:	4619      	mov	r1, r3
 800263c:	4811      	ldr	r0, [pc, #68]	; (8002684 <HAL_UART_MspInit+0x12c>)
 800263e:	f001 fab3 	bl	8003ba8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CONSOLE_USART_RX_Pin;
 8002642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002648:	2300      	movs	r3, #0
 800264a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264c:	2300      	movs	r3, #0
 800264e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(CONSOLE_USART_RX_GPIO_Port, &GPIO_InitStruct);
 8002650:	f107 0318 	add.w	r3, r7, #24
 8002654:	4619      	mov	r1, r3
 8002656:	480b      	ldr	r0, [pc, #44]	; (8002684 <HAL_UART_MspInit+0x12c>)
 8002658:	f001 faa6 	bl	8003ba8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800265c:	2200      	movs	r2, #0
 800265e:	2105      	movs	r1, #5
 8002660:	2025      	movs	r0, #37	; 0x25
 8002662:	f001 f90f 	bl	8003884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002666:	2025      	movs	r0, #37	; 0x25
 8002668:	f001 f938 	bl	80038dc <HAL_NVIC_EnableIRQ>
}
 800266c:	bf00      	nop
 800266e:	3728      	adds	r7, #40	; 0x28
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40004c00 	.word	0x40004c00
 8002678:	40021000 	.word	0x40021000
 800267c:	40011000 	.word	0x40011000
 8002680:	40013800 	.word	0x40013800
 8002684:	40010800 	.word	0x40010800

08002688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  LOG_error("NMI_Handler() triggered");
 800268c:	4902      	ldr	r1, [pc, #8]	; (8002698 <NMI_Handler+0x10>)
 800268e:	2003      	movs	r0, #3
 8002690:	f008 fa6c 	bl	800ab6c <LOG_log>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002694:	e7fe      	b.n	8002694 <NMI_Handler+0xc>
 8002696:	bf00      	nop
 8002698:	0800ea04 	.word	0x0800ea04

0800269c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  LOG_error("HardFault_Handler() triggered");
 80026a0:	4902      	ldr	r1, [pc, #8]	; (80026ac <HardFault_Handler+0x10>)
 80026a2:	2003      	movs	r0, #3
 80026a4:	f008 fa62 	bl	800ab6c <LOG_log>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026a8:	e7fe      	b.n	80026a8 <HardFault_Handler+0xc>
 80026aa:	bf00      	nop
 80026ac:	0800ea1c 	.word	0x0800ea1c

080026b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  LOG_error("MemManage_Handler() triggered");
 80026b4:	4902      	ldr	r1, [pc, #8]	; (80026c0 <MemManage_Handler+0x10>)
 80026b6:	2003      	movs	r0, #3
 80026b8:	f008 fa58 	bl	800ab6c <LOG_log>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026bc:	e7fe      	b.n	80026bc <MemManage_Handler+0xc>
 80026be:	bf00      	nop
 80026c0:	0800ea3c 	.word	0x0800ea3c

080026c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  LOG_error("BusFault_Handler() triggered");
 80026c8:	4902      	ldr	r1, [pc, #8]	; (80026d4 <BusFault_Handler+0x10>)
 80026ca:	2003      	movs	r0, #3
 80026cc:	f008 fa4e 	bl	800ab6c <LOG_log>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026d0:	e7fe      	b.n	80026d0 <BusFault_Handler+0xc>
 80026d2:	bf00      	nop
 80026d4:	0800ea5c 	.word	0x0800ea5c

080026d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  LOG_error("UsageFault_Handler() triggered");
 80026dc:	4902      	ldr	r1, [pc, #8]	; (80026e8 <UsageFault_Handler+0x10>)
 80026de:	2003      	movs	r0, #3
 80026e0:	f008 fa44 	bl	800ab6c <LOG_log>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026e4:	e7fe      	b.n	80026e4 <UsageFault_Handler+0xc>
 80026e6:	bf00      	nop
 80026e8:	0800ea7c 	.word	0x0800ea7c

080026ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
  LOG_error("SVC_Handler() triggered");
 80026f0:	4902      	ldr	r1, [pc, #8]	; (80026fc <SVC_Handler+0x10>)
 80026f2:	2003      	movs	r0, #3
 80026f4:	f008 fa3a 	bl	800ab6c <LOG_log>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026f8:	bf00      	nop
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	0800ea9c 	.word	0x0800ea9c

08002700 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  LOG_error("DebugMon_Handler() triggered");
 8002704:	4902      	ldr	r1, [pc, #8]	; (8002710 <DebugMon_Handler+0x10>)
 8002706:	2003      	movs	r0, #3
 8002708:	f008 fa30 	bl	800ab6c <LOG_log>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800270c:	bf00      	nop
 800270e:	bd80      	pop	{r7, pc}
 8002710:	0800eab4 	.word	0x0800eab4

08002714 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  LOG_error("PendSV_Handler() triggered");
 8002718:	4902      	ldr	r1, [pc, #8]	; (8002724 <PendSV_Handler+0x10>)
 800271a:	2003      	movs	r0, #3
 800271c:	f008 fa26 	bl	800ab6c <LOG_log>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002720:	bf00      	nop
 8002722:	bd80      	pop	{r7, pc}
 8002724:	0800ead4 	.word	0x0800ead4

08002728 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800272c:	f000 f988 	bl	8002a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002730:	bf00      	nop
 8002732:	bd80      	pop	{r7, pc}

08002734 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002738:	4802      	ldr	r0, [pc, #8]	; (8002744 <TIM1_UP_IRQHandler+0x10>)
 800273a:	f004 fa25 	bl	8006b88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800273e:	bf00      	nop
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	20000914 	.word	0x20000914

08002748 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800274c:	4802      	ldr	r0, [pc, #8]	; (8002758 <TIM2_IRQHandler+0x10>)
 800274e:	f004 fa1b 	bl	8006b88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002752:	bf00      	nop
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	20000a40 	.word	0x20000a40

0800275c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002760:	4802      	ldr	r0, [pc, #8]	; (800276c <TIM3_IRQHandler+0x10>)
 8002762:	f004 fa11 	bl	8006b88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	200006f4 	.word	0x200006f4

08002770 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002774:	4802      	ldr	r0, [pc, #8]	; (8002780 <TIM4_IRQHandler+0x10>)
 8002776:	f004 fa07 	bl	8006b88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800277a:	bf00      	nop
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	2000058c 	.word	0x2000058c

08002784 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002788:	4802      	ldr	r0, [pc, #8]	; (8002794 <USART1_IRQHandler+0x10>)
 800278a:	f005 ff5d 	bl	8008648 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	200007d8 	.word	0x200007d8

08002798 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800279c:	4802      	ldr	r0, [pc, #8]	; (80027a8 <TIM5_IRQHandler+0x10>)
 800279e:	f004 f9f3 	bl	8006b88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	20000640 	.word	0x20000640

080027ac <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80027b0:	4802      	ldr	r0, [pc, #8]	; (80027bc <UART4_IRQHandler+0x10>)
 80027b2:	f005 ff49 	bl	8008648 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	200009cc 	.word	0x200009cc

080027c0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
	return 1;
 80027c4:	2301      	movs	r3, #1
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr

080027ce <_kill>:

int _kill(int pid, int sig)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80027d8:	f008 fec6 	bl	800b568 <__errno>
 80027dc:	4603      	mov	r3, r0
 80027de:	2216      	movs	r2, #22
 80027e0:	601a      	str	r2, [r3, #0]
	return -1;
 80027e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <_exit>:

void _exit (int status)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b082      	sub	sp, #8
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80027f6:	f04f 31ff 	mov.w	r1, #4294967295
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7ff ffe7 	bl	80027ce <_kill>
	while (1) {}		/* Make sure we hang here */
 8002800:	e7fe      	b.n	8002800 <_exit+0x12>

08002802 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b086      	sub	sp, #24
 8002806:	af00      	add	r7, sp, #0
 8002808:	60f8      	str	r0, [r7, #12]
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
 8002812:	e00a      	b.n	800282a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002814:	f3af 8000 	nop.w
 8002818:	4601      	mov	r1, r0
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	60ba      	str	r2, [r7, #8]
 8002820:	b2ca      	uxtb	r2, r1
 8002822:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	3301      	adds	r3, #1
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	429a      	cmp	r2, r3
 8002830:	dbf0      	blt.n	8002814 <_read+0x12>
	}

return len;
 8002832:	687b      	ldr	r3, [r7, #4]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
  if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d00a      	beq.n	8002864 <_write+0x28>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2b02      	cmp	r3, #2
 8002852:	d007      	beq.n	8002864 <_write+0x28>
  {
    errno = EBADF;
 8002854:	f008 fe88 	bl	800b568 <__errno>
 8002858:	4603      	mov	r3, r0
 800285a:	2209      	movs	r2, #9
 800285c:	601a      	str	r2, [r3, #0]
    return -1;
 800285e:	f04f 33ff 	mov.w	r3, #4294967295
 8002862:	e00f      	b.n	8002884 <_write+0x48>
  }

  if (g_MAIN_printOutput == MAIN_PRINT_OUTPUT_TO_CONSOLE)
 8002864:	4b09      	ldr	r3, [pc, #36]	; (800288c <_write+0x50>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d105      	bne.n	8002878 <_write+0x3c>
  {
    CON_sendString(ptr, len);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4619      	mov	r1, r3
 8002870:	68b8      	ldr	r0, [r7, #8]
 8002872:	f006 ff6f 	bl	8009754 <CON_sendString>
 8002876:	e004      	b.n	8002882 <_write+0x46>
  }
  else
  {
    MAS_sendString(ptr, len);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4619      	mov	r1, r3
 800287c:	68b8      	ldr	r0, [r7, #8]
 800287e:	f008 fa83 	bl	800ad88 <MAS_sendString>
  }

  return len;
 8002882:	687b      	ldr	r3, [r7, #4]
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	200009c8 	.word	0x200009c8

08002890 <_close>:

int _close(int file)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
	return -1;
 8002898:	f04f 33ff 	mov.w	r3, #4294967295
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr

080028a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
 80028ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028b6:	605a      	str	r2, [r3, #4]
	return 0;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <_isatty>:

int _isatty(int file)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
	return 1;
 80028cc:	2301      	movs	r3, #1
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
	return 0;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr

080028f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028f8:	4a14      	ldr	r2, [pc, #80]	; (800294c <_sbrk+0x5c>)
 80028fa:	4b15      	ldr	r3, [pc, #84]	; (8002950 <_sbrk+0x60>)
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002904:	4b13      	ldr	r3, [pc, #76]	; (8002954 <_sbrk+0x64>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d102      	bne.n	8002912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800290c:	4b11      	ldr	r3, [pc, #68]	; (8002954 <_sbrk+0x64>)
 800290e:	4a12      	ldr	r2, [pc, #72]	; (8002958 <_sbrk+0x68>)
 8002910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002912:	4b10      	ldr	r3, [pc, #64]	; (8002954 <_sbrk+0x64>)
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4413      	add	r3, r2
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	429a      	cmp	r2, r3
 800291e:	d207      	bcs.n	8002930 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002920:	f008 fe22 	bl	800b568 <__errno>
 8002924:	4603      	mov	r3, r0
 8002926:	220c      	movs	r2, #12
 8002928:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800292a:	f04f 33ff 	mov.w	r3, #4294967295
 800292e:	e009      	b.n	8002944 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002930:	4b08      	ldr	r3, [pc, #32]	; (8002954 <_sbrk+0x64>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002936:	4b07      	ldr	r3, [pc, #28]	; (8002954 <_sbrk+0x64>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4413      	add	r3, r2
 800293e:	4a05      	ldr	r2, [pc, #20]	; (8002954 <_sbrk+0x64>)
 8002940:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002942:	68fb      	ldr	r3, [r7, #12]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	2000c000 	.word	0x2000c000
 8002950:	00000400 	.word	0x00000400
 8002954:	20000218 	.word	0x20000218
 8002958:	20000bc0 	.word	0x20000bc0

0800295c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002968:	480c      	ldr	r0, [pc, #48]	; (800299c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800296a:	490d      	ldr	r1, [pc, #52]	; (80029a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800296c:	4a0d      	ldr	r2, [pc, #52]	; (80029a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800296e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002970:	e002      	b.n	8002978 <LoopCopyDataInit>

08002972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002976:	3304      	adds	r3, #4

08002978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800297a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800297c:	d3f9      	bcc.n	8002972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800297e:	4a0a      	ldr	r2, [pc, #40]	; (80029a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002980:	4c0a      	ldr	r4, [pc, #40]	; (80029ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8002982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002984:	e001      	b.n	800298a <LoopFillZerobss>

08002986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002988:	3204      	adds	r2, #4

0800298a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800298a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800298c:	d3fb      	bcc.n	8002986 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800298e:	f7ff ffe5 	bl	800295c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002992:	f008 fdef 	bl	800b574 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002996:	f7fe fcd9 	bl	800134c <main>
  bx lr
 800299a:	4770      	bx	lr
  ldr r0, =_sdata
 800299c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029a0:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80029a4:	0800f9cc 	.word	0x0800f9cc
  ldr r2, =_sbss
 80029a8:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80029ac:	20000bbc 	.word	0x20000bbc

080029b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029b0:	e7fe      	b.n	80029b0 <ADC1_2_IRQHandler>
	...

080029b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029b8:	4b08      	ldr	r3, [pc, #32]	; (80029dc <HAL_Init+0x28>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a07      	ldr	r2, [pc, #28]	; (80029dc <HAL_Init+0x28>)
 80029be:	f043 0310 	orr.w	r3, r3, #16
 80029c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029c4:	2003      	movs	r0, #3
 80029c6:	f000 ff3d 	bl	8003844 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029ca:	2000      	movs	r0, #0
 80029cc:	f000 f808 	bl	80029e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029d0:	f7ff fb8a 	bl	80020e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	40022000 	.word	0x40022000

080029e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029e8:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <HAL_InitTick+0x54>)
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	4b12      	ldr	r3, [pc, #72]	; (8002a38 <HAL_InitTick+0x58>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	4619      	mov	r1, r3
 80029f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80029fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 ff84 	bl	800390c <HAL_SYSTICK_Config>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e00e      	b.n	8002a2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b0f      	cmp	r3, #15
 8002a12:	d80a      	bhi.n	8002a2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a14:	2200      	movs	r2, #0
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	f04f 30ff 	mov.w	r0, #4294967295
 8002a1c:	f000 ff32 	bl	8003884 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a20:	4a06      	ldr	r2, [pc, #24]	; (8002a3c <HAL_InitTick+0x5c>)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a26:	2300      	movs	r3, #0
 8002a28:	e000      	b.n	8002a2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	20000000 	.word	0x20000000
 8002a38:	20000008 	.word	0x20000008
 8002a3c:	20000004 	.word	0x20000004

08002a40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a44:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <HAL_IncTick+0x1c>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <HAL_IncTick+0x20>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4413      	add	r3, r2
 8002a50:	4a03      	ldr	r2, [pc, #12]	; (8002a60 <HAL_IncTick+0x20>)
 8002a52:	6013      	str	r3, [r2, #0]
}
 8002a54:	bf00      	nop
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr
 8002a5c:	20000008 	.word	0x20000008
 8002a60:	20000ba8 	.word	0x20000ba8

08002a64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  return uwTick;
 8002a68:	4b02      	ldr	r3, [pc, #8]	; (8002a74 <HAL_GetTick+0x10>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr
 8002a74:	20000ba8 	.word	0x20000ba8

08002a78 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e188      	b.n	8002dac <HAL_ADC_Init+0x334>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a8c      	ldr	r2, [pc, #560]	; (8002cd0 <HAL_ADC_Init+0x258>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d00e      	beq.n	8002ac2 <HAL_ADC_Init+0x4a>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a8a      	ldr	r2, [pc, #552]	; (8002cd4 <HAL_ADC_Init+0x25c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d009      	beq.n	8002ac2 <HAL_ADC_Init+0x4a>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a89      	ldr	r2, [pc, #548]	; (8002cd8 <HAL_ADC_Init+0x260>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d004      	beq.n	8002ac2 <HAL_ADC_Init+0x4a>
 8002ab8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8002abc:	4887      	ldr	r0, [pc, #540]	; (8002cdc <HAL_ADC_Init+0x264>)
 8002abe:	f7ff fb01 	bl	80020c4 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d009      	beq.n	8002ade <HAL_ADC_Init+0x66>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ad2:	d004      	beq.n	8002ade <HAL_ADC_Init+0x66>
 8002ad4:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8002ad8:	4880      	ldr	r0, [pc, #512]	; (8002cdc <HAL_ADC_Init+0x264>)
 8002ada:	f7ff faf3 	bl	80020c4 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d009      	beq.n	8002afa <HAL_ADC_Init+0x82>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aee:	d004      	beq.n	8002afa <HAL_ADC_Init+0x82>
 8002af0:	f240 11b5 	movw	r1, #437	; 0x1b5
 8002af4:	4879      	ldr	r0, [pc, #484]	; (8002cdc <HAL_ADC_Init+0x264>)
 8002af6:	f7ff fae5 	bl	80020c4 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	7b1b      	ldrb	r3, [r3, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d008      	beq.n	8002b14 <HAL_ADC_Init+0x9c>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	7b1b      	ldrb	r3, [r3, #12]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d004      	beq.n	8002b14 <HAL_ADC_Init+0x9c>
 8002b0a:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8002b0e:	4873      	ldr	r0, [pc, #460]	; (8002cdc <HAL_ADC_Init+0x264>)
 8002b10:	f7ff fad8 	bl	80020c4 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	69db      	ldr	r3, [r3, #28]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d044      	beq.n	8002ba6 <HAL_ADC_Init+0x12e>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b24:	d03f      	beq.n	8002ba6 <HAL_ADC_Init+0x12e>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8002b2e:	d03a      	beq.n	8002ba6 <HAL_ADC_Init+0x12e>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002b38:	d035      	beq.n	8002ba6 <HAL_ADC_Init+0x12e>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8002b42:	d030      	beq.n	8002ba6 <HAL_ADC_Init+0x12e>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b4c:	d02b      	beq.n	8002ba6 <HAL_ADC_Init+0x12e>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d027      	beq.n	8002ba6 <HAL_ADC_Init+0x12e>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b5e:	d022      	beq.n	8002ba6 <HAL_ADC_Init+0x12e>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8002b68:	d01d      	beq.n	8002ba6 <HAL_ADC_Init+0x12e>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8002b72:	d018      	beq.n	8002ba6 <HAL_ADC_Init+0x12e>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b7c:	d013      	beq.n	8002ba6 <HAL_ADC_Init+0x12e>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b86:	d00e      	beq.n	8002ba6 <HAL_ADC_Init+0x12e>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	69db      	ldr	r3, [r3, #28]
 8002b8c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002b90:	d009      	beq.n	8002ba6 <HAL_ADC_Init+0x12e>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002b9a:	d004      	beq.n	8002ba6 <HAL_ADC_Init+0x12e>
 8002b9c:	f240 11b7 	movw	r1, #439	; 0x1b7
 8002ba0:	484e      	ldr	r0, [pc, #312]	; (8002cdc <HAL_ADC_Init+0x264>)
 8002ba2:	f7ff fa8f 	bl	80020c4 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d02a      	beq.n	8002c04 <HAL_ADC_Init+0x18c>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_ADC_Init+0x146>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	2b10      	cmp	r3, #16
 8002bbc:	d904      	bls.n	8002bc8 <HAL_ADC_Init+0x150>
 8002bbe:	f240 11bb 	movw	r1, #443	; 0x1bb
 8002bc2:	4846      	ldr	r0, [pc, #280]	; (8002cdc <HAL_ADC_Init+0x264>)
 8002bc4:	f7ff fa7e 	bl	80020c4 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	7d1b      	ldrb	r3, [r3, #20]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d008      	beq.n	8002be2 <HAL_ADC_Init+0x16a>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	7d1b      	ldrb	r3, [r3, #20]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d004      	beq.n	8002be2 <HAL_ADC_Init+0x16a>
 8002bd8:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8002bdc:	483f      	ldr	r0, [pc, #252]	; (8002cdc <HAL_ADC_Init+0x264>)
 8002bde:	f7ff fa71 	bl	80020c4 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	7d1b      	ldrb	r3, [r3, #20]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00c      	beq.n	8002c04 <HAL_ADC_Init+0x18c>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_ADC_Init+0x182>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d904      	bls.n	8002c04 <HAL_ADC_Init+0x18c>
 8002bfa:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002bfe:	4837      	ldr	r0, [pc, #220]	; (8002cdc <HAL_ADC_Init+0x264>)
 8002c00:	f7ff fa60 	bl	80020c4 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d109      	bne.n	8002c20 <HAL_ADC_Init+0x1a8>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7ff fa96 	bl	800214c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 fd01 	bl	8003628 <ADC_ConversionStop_Disable>
 8002c26:	4603      	mov	r3, r0
 8002c28:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2e:	f003 0310 	and.w	r3, r3, #16
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f040 80b1 	bne.w	8002d9a <HAL_ADC_Init+0x322>
 8002c38:	7dfb      	ldrb	r3, [r7, #23]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f040 80ad 	bne.w	8002d9a <HAL_ADC_Init+0x322>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c44:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c48:	f023 0302 	bic.w	r3, r3, #2
 8002c4c:	f043 0202 	orr.w	r2, r3, #2
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	491e      	ldr	r1, [pc, #120]	; (8002cd8 <HAL_ADC_Init+0x260>)
 8002c5e:	428b      	cmp	r3, r1
 8002c60:	d10a      	bne.n	8002c78 <HAL_ADC_Init+0x200>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002c6a:	d002      	beq.n	8002c72 <HAL_ADC_Init+0x1fa>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	e004      	b.n	8002c7c <HAL_ADC_Init+0x204>
 8002c72:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002c76:	e001      	b.n	8002c7c <HAL_ADC_Init+0x204>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c7c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	7b1b      	ldrb	r3, [r3, #12]
 8002c82:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002c84:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c94:	d003      	beq.n	8002c9e <HAL_ADC_Init+0x226>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d102      	bne.n	8002ca4 <HAL_ADC_Init+0x22c>
 8002c9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ca2:	e000      	b.n	8002ca6 <HAL_ADC_Init+0x22e>
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	7d1b      	ldrb	r3, [r3, #20]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d121      	bne.n	8002cf8 <HAL_ADC_Init+0x280>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	7b1b      	ldrb	r3, [r3, #12]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d111      	bne.n	8002ce0 <HAL_ADC_Init+0x268>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	035a      	lsls	r2, r3, #13
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ccc:	613b      	str	r3, [r7, #16]
 8002cce:	e013      	b.n	8002cf8 <HAL_ADC_Init+0x280>
 8002cd0:	40012400 	.word	0x40012400
 8002cd4:	40012800 	.word	0x40012800
 8002cd8:	40013c00 	.word	0x40013c00
 8002cdc:	0800eaf0 	.word	0x0800eaf0
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce4:	f043 0220 	orr.w	r2, r3, #32
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf0:	f043 0201 	orr.w	r2, r3, #1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	4b28      	ldr	r3, [pc, #160]	; (8002db4 <HAL_ADC_Init+0x33c>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6812      	ldr	r2, [r2, #0]
 8002d1a:	68b9      	ldr	r1, [r7, #8]
 8002d1c:	430b      	orrs	r3, r1
 8002d1e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d28:	d003      	beq.n	8002d32 <HAL_ADC_Init+0x2ba>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d104      	bne.n	8002d3c <HAL_ADC_Init+0x2c4>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	3b01      	subs	r3, #1
 8002d38:	051b      	lsls	r3, r3, #20
 8002d3a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d42:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	4b18      	ldr	r3, [pc, #96]	; (8002db8 <HAL_ADC_Init+0x340>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d10b      	bne.n	8002d78 <HAL_ADC_Init+0x300>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6a:	f023 0303 	bic.w	r3, r3, #3
 8002d6e:	f043 0201 	orr.w	r2, r3, #1
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d76:	e018      	b.n	8002daa <HAL_ADC_Init+0x332>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7c:	f023 0312 	bic.w	r3, r3, #18
 8002d80:	f043 0210 	orr.w	r2, r3, #16
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	f043 0201 	orr.w	r2, r3, #1
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002d98:	e007      	b.n	8002daa <HAL_ADC_Init+0x332>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9e:	f043 0210 	orr.w	r2, r3, #16
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3718      	adds	r7, #24
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	ffe1f7fd 	.word	0xffe1f7fd
 8002db8:	ff1f0efe 	.word	0xff1f0efe

08002dbc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a5a      	ldr	r2, [pc, #360]	; (8002f38 <HAL_ADC_Start+0x17c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d00e      	beq.n	8002df0 <HAL_ADC_Start+0x34>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a59      	ldr	r2, [pc, #356]	; (8002f3c <HAL_ADC_Start+0x180>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d009      	beq.n	8002df0 <HAL_ADC_Start+0x34>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a57      	ldr	r2, [pc, #348]	; (8002f40 <HAL_ADC_Start+0x184>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d004      	beq.n	8002df0 <HAL_ADC_Start+0x34>
 8002de6:	f240 411b 	movw	r1, #1051	; 0x41b
 8002dea:	4856      	ldr	r0, [pc, #344]	; (8002f44 <HAL_ADC_Start+0x188>)
 8002dec:	f7ff f96a 	bl	80020c4 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d101      	bne.n	8002dfe <HAL_ADC_Start+0x42>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	e098      	b.n	8002f30 <HAL_ADC_Start+0x174>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 fbb4 	bl	8003574 <ADC_Enable>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f040 8087 	bne.w	8002f26 <HAL_ADC_Start+0x16a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e20:	f023 0301 	bic.w	r3, r3, #1
 8002e24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a42      	ldr	r2, [pc, #264]	; (8002f3c <HAL_ADC_Start+0x180>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d105      	bne.n	8002e42 <HAL_ADC_Start+0x86>
 8002e36:	4b40      	ldr	r3, [pc, #256]	; (8002f38 <HAL_ADC_Start+0x17c>)
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d115      	bne.n	8002e6e <HAL_ADC_Start+0xb2>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e46:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d026      	beq.n	8002eaa <HAL_ADC_Start+0xee>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e60:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e64:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e6c:	e01d      	b.n	8002eaa <HAL_ADC_Start+0xee>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e72:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a2e      	ldr	r2, [pc, #184]	; (8002f38 <HAL_ADC_Start+0x17c>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d004      	beq.n	8002e8e <HAL_ADC_Start+0xd2>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a2c      	ldr	r2, [pc, #176]	; (8002f3c <HAL_ADC_Start+0x180>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d10d      	bne.n	8002eaa <HAL_ADC_Start+0xee>
 8002e8e:	4b2a      	ldr	r3, [pc, #168]	; (8002f38 <HAL_ADC_Start+0x17c>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d007      	beq.n	8002eaa <HAL_ADC_Start+0xee>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e9e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ea2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d006      	beq.n	8002ec4 <HAL_ADC_Start+0x108>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eba:	f023 0206 	bic.w	r2, r3, #6
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ec2:	e002      	b.n	8002eca <HAL_ADC_Start+0x10e>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f06f 0202 	mvn.w	r2, #2
 8002eda:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002ee6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002eea:	d113      	bne.n	8002f14 <HAL_ADC_Start+0x158>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002ef0:	4a12      	ldr	r2, [pc, #72]	; (8002f3c <HAL_ADC_Start+0x180>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d105      	bne.n	8002f02 <HAL_ADC_Start+0x146>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002ef6:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <HAL_ADC_Start+0x17c>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d108      	bne.n	8002f14 <HAL_ADC_Start+0x158>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002f10:	609a      	str	r2, [r3, #8]
 8002f12:	e00c      	b.n	8002f2e <HAL_ADC_Start+0x172>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002f22:	609a      	str	r2, [r3, #8]
 8002f24:	e003      	b.n	8002f2e <HAL_ADC_Start+0x172>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40012400 	.word	0x40012400
 8002f3c:	40012800 	.word	0x40012800
 8002f40:	40013c00 	.word	0x40013c00
 8002f44:	0800eaf0 	.word	0x0800eaf0

08002f48 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002f48:	b590      	push	{r4, r7, lr}
 8002f4a:	b087      	sub	sp, #28
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a80      	ldr	r2, [pc, #512]	; (8003164 <HAL_ADC_PollForConversion+0x21c>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d00e      	beq.n	8002f86 <HAL_ADC_PollForConversion+0x3e>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a7e      	ldr	r2, [pc, #504]	; (8003168 <HAL_ADC_PollForConversion+0x220>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d009      	beq.n	8002f86 <HAL_ADC_PollForConversion+0x3e>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a7d      	ldr	r2, [pc, #500]	; (800316c <HAL_ADC_PollForConversion+0x224>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d004      	beq.n	8002f86 <HAL_ADC_PollForConversion+0x3e>
 8002f7c:	f240 41bd 	movw	r1, #1213	; 0x4bd
 8002f80:	487b      	ldr	r0, [pc, #492]	; (8003170 <HAL_ADC_PollForConversion+0x228>)
 8002f82:	f7ff f89f 	bl	80020c4 <assert_failed>
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002f86:	f7ff fd6d 	bl	8002a64 <HAL_GetTick>
 8002f8a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00b      	beq.n	8002fb2 <HAL_ADC_PollForConversion+0x6a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f9e:	f043 0220 	orr.w	r2, r3, #32
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e0d3      	b.n	800315a <HAL_ADC_PollForConversion+0x212>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d131      	bne.n	8003024 <HAL_ADC_PollForConversion+0xdc>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d12a      	bne.n	8003024 <HAL_ADC_PollForConversion+0xdc>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002fce:	e021      	b.n	8003014 <HAL_ADC_PollForConversion+0xcc>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd6:	d01d      	beq.n	8003014 <HAL_ADC_PollForConversion+0xcc>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d007      	beq.n	8002fee <HAL_ADC_PollForConversion+0xa6>
 8002fde:	f7ff fd41 	bl	8002a64 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d212      	bcs.n	8003014 <HAL_ADC_PollForConversion+0xcc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10b      	bne.n	8003014 <HAL_ADC_PollForConversion+0xcc>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003000:	f043 0204 	orr.w	r2, r3, #4
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e0a2      	b.n	800315a <HAL_ADC_PollForConversion+0x212>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0d6      	beq.n	8002fd0 <HAL_ADC_PollForConversion+0x88>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003022:	e070      	b.n	8003106 <HAL_ADC_PollForConversion+0x1be>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003024:	4b53      	ldr	r3, [pc, #332]	; (8003174 <HAL_ADC_PollForConversion+0x22c>)
 8003026:	681c      	ldr	r4, [r3, #0]
 8003028:	2002      	movs	r0, #2
 800302a:	f001 ff7d 	bl	8004f28 <HAL_RCCEx_GetPeriphCLKFreq>
 800302e:	4603      	mov	r3, r0
 8003030:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6919      	ldr	r1, [r3, #16]
 800303a:	4b4f      	ldr	r3, [pc, #316]	; (8003178 <HAL_ADC_PollForConversion+0x230>)
 800303c:	400b      	ands	r3, r1
 800303e:	2b00      	cmp	r3, #0
 8003040:	d118      	bne.n	8003074 <HAL_ADC_PollForConversion+0x12c>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68d9      	ldr	r1, [r3, #12]
 8003048:	4b4c      	ldr	r3, [pc, #304]	; (800317c <HAL_ADC_PollForConversion+0x234>)
 800304a:	400b      	ands	r3, r1
 800304c:	2b00      	cmp	r3, #0
 800304e:	d111      	bne.n	8003074 <HAL_ADC_PollForConversion+0x12c>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6919      	ldr	r1, [r3, #16]
 8003056:	4b4a      	ldr	r3, [pc, #296]	; (8003180 <HAL_ADC_PollForConversion+0x238>)
 8003058:	400b      	ands	r3, r1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d108      	bne.n	8003070 <HAL_ADC_PollForConversion+0x128>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68d9      	ldr	r1, [r3, #12]
 8003064:	4b47      	ldr	r3, [pc, #284]	; (8003184 <HAL_ADC_PollForConversion+0x23c>)
 8003066:	400b      	ands	r3, r1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_ADC_PollForConversion+0x128>
 800306c:	2314      	movs	r3, #20
 800306e:	e020      	b.n	80030b2 <HAL_ADC_PollForConversion+0x16a>
 8003070:	2329      	movs	r3, #41	; 0x29
 8003072:	e01e      	b.n	80030b2 <HAL_ADC_PollForConversion+0x16a>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6919      	ldr	r1, [r3, #16]
 800307a:	4b41      	ldr	r3, [pc, #260]	; (8003180 <HAL_ADC_PollForConversion+0x238>)
 800307c:	400b      	ands	r3, r1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d106      	bne.n	8003090 <HAL_ADC_PollForConversion+0x148>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68d9      	ldr	r1, [r3, #12]
 8003088:	4b3e      	ldr	r3, [pc, #248]	; (8003184 <HAL_ADC_PollForConversion+0x23c>)
 800308a:	400b      	ands	r3, r1
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00d      	beq.n	80030ac <HAL_ADC_PollForConversion+0x164>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6919      	ldr	r1, [r3, #16]
 8003096:	4b3c      	ldr	r3, [pc, #240]	; (8003188 <HAL_ADC_PollForConversion+0x240>)
 8003098:	400b      	ands	r3, r1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d108      	bne.n	80030b0 <HAL_ADC_PollForConversion+0x168>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68d9      	ldr	r1, [r3, #12]
 80030a4:	4b38      	ldr	r3, [pc, #224]	; (8003188 <HAL_ADC_PollForConversion+0x240>)
 80030a6:	400b      	ands	r3, r1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d101      	bne.n	80030b0 <HAL_ADC_PollForConversion+0x168>
 80030ac:	2354      	movs	r3, #84	; 0x54
 80030ae:	e000      	b.n	80030b2 <HAL_ADC_PollForConversion+0x16a>
 80030b0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80030b2:	fb02 f303 	mul.w	r3, r2, r3
 80030b6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80030b8:	e021      	b.n	80030fe <HAL_ADC_PollForConversion+0x1b6>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c0:	d01a      	beq.n	80030f8 <HAL_ADC_PollForConversion+0x1b0>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d007      	beq.n	80030d8 <HAL_ADC_PollForConversion+0x190>
 80030c8:	f7ff fccc 	bl	8002a64 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d20f      	bcs.n	80030f8 <HAL_ADC_PollForConversion+0x1b0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d90b      	bls.n	80030f8 <HAL_ADC_PollForConversion+0x1b0>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e4:	f043 0204 	orr.w	r2, r3, #4
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e030      	b.n	800315a <HAL_ADC_PollForConversion+0x212>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	3301      	adds	r3, #1
 80030fc:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	429a      	cmp	r2, r3
 8003104:	d8d9      	bhi.n	80030ba <HAL_ADC_PollForConversion+0x172>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f06f 0212 	mvn.w	r2, #18
 800310e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003114:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003126:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800312a:	d115      	bne.n	8003158 <HAL_ADC_PollForConversion+0x210>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003130:	2b00      	cmp	r3, #0
 8003132:	d111      	bne.n	8003158 <HAL_ADC_PollForConversion+0x210>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003138:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003144:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d105      	bne.n	8003158 <HAL_ADC_PollForConversion+0x210>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003150:	f043 0201 	orr.w	r2, r3, #1
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	371c      	adds	r7, #28
 800315e:	46bd      	mov	sp, r7
 8003160:	bd90      	pop	{r4, r7, pc}
 8003162:	bf00      	nop
 8003164:	40012400 	.word	0x40012400
 8003168:	40012800 	.word	0x40012800
 800316c:	40013c00 	.word	0x40013c00
 8003170:	0800eaf0 	.word	0x0800eaf0
 8003174:	20000000 	.word	0x20000000
 8003178:	24924924 	.word	0x24924924
 800317c:	00924924 	.word	0x00924924
 8003180:	12492492 	.word	0x12492492
 8003184:	00492492 	.word	0x00492492
 8003188:	00249249 	.word	0x00249249

0800318c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a0c      	ldr	r2, [pc, #48]	; (80031cc <HAL_ADC_GetValue+0x40>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d00e      	beq.n	80031bc <HAL_ADC_GetValue+0x30>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a0b      	ldr	r2, [pc, #44]	; (80031d0 <HAL_ADC_GetValue+0x44>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d009      	beq.n	80031bc <HAL_ADC_GetValue+0x30>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a09      	ldr	r2, [pc, #36]	; (80031d4 <HAL_ADC_GetValue+0x48>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d004      	beq.n	80031bc <HAL_ADC_GetValue+0x30>
 80031b2:	f240 61ef 	movw	r1, #1775	; 0x6ef
 80031b6:	4808      	ldr	r0, [pc, #32]	; (80031d8 <HAL_ADC_GetValue+0x4c>)
 80031b8:	f7fe ff84 	bl	80020c4 <assert_failed>

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40012400 	.word	0x40012400
 80031d0:	40012800 	.word	0x40012800
 80031d4:	40013c00 	.word	0x40013c00
 80031d8:	0800eaf0 	.word	0x0800eaf0

080031dc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031e6:	2300      	movs	r3, #0
 80031e8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a8b      	ldr	r2, [pc, #556]	; (8003420 <HAL_ADC_ConfigChannel+0x244>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d00e      	beq.n	8003216 <HAL_ADC_ConfigChannel+0x3a>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a89      	ldr	r2, [pc, #548]	; (8003424 <HAL_ADC_ConfigChannel+0x248>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d009      	beq.n	8003216 <HAL_ADC_ConfigChannel+0x3a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a88      	ldr	r2, [pc, #544]	; (8003428 <HAL_ADC_ConfigChannel+0x24c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d004      	beq.n	8003216 <HAL_ADC_ConfigChannel+0x3a>
 800320c:	f240 71dd 	movw	r1, #2013	; 0x7dd
 8003210:	4886      	ldr	r0, [pc, #536]	; (800342c <HAL_ADC_ConfigChannel+0x250>)
 8003212:	f7fe ff57 	bl	80020c4 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d048      	beq.n	80032b0 <HAL_ADC_ConfigChannel+0xd4>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d044      	beq.n	80032b0 <HAL_ADC_ConfigChannel+0xd4>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2b02      	cmp	r3, #2
 800322c:	d040      	beq.n	80032b0 <HAL_ADC_ConfigChannel+0xd4>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2b03      	cmp	r3, #3
 8003234:	d03c      	beq.n	80032b0 <HAL_ADC_ConfigChannel+0xd4>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2b04      	cmp	r3, #4
 800323c:	d038      	beq.n	80032b0 <HAL_ADC_ConfigChannel+0xd4>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2b05      	cmp	r3, #5
 8003244:	d034      	beq.n	80032b0 <HAL_ADC_ConfigChannel+0xd4>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b06      	cmp	r3, #6
 800324c:	d030      	beq.n	80032b0 <HAL_ADC_ConfigChannel+0xd4>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b07      	cmp	r3, #7
 8003254:	d02c      	beq.n	80032b0 <HAL_ADC_ConfigChannel+0xd4>
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2b08      	cmp	r3, #8
 800325c:	d028      	beq.n	80032b0 <HAL_ADC_ConfigChannel+0xd4>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b09      	cmp	r3, #9
 8003264:	d024      	beq.n	80032b0 <HAL_ADC_ConfigChannel+0xd4>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b0a      	cmp	r3, #10
 800326c:	d020      	beq.n	80032b0 <HAL_ADC_ConfigChannel+0xd4>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2b0b      	cmp	r3, #11
 8003274:	d01c      	beq.n	80032b0 <HAL_ADC_ConfigChannel+0xd4>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b0c      	cmp	r3, #12
 800327c:	d018      	beq.n	80032b0 <HAL_ADC_ConfigChannel+0xd4>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b0d      	cmp	r3, #13
 8003284:	d014      	beq.n	80032b0 <HAL_ADC_ConfigChannel+0xd4>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b0e      	cmp	r3, #14
 800328c:	d010      	beq.n	80032b0 <HAL_ADC_ConfigChannel+0xd4>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2b0f      	cmp	r3, #15
 8003294:	d00c      	beq.n	80032b0 <HAL_ADC_ConfigChannel+0xd4>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2b10      	cmp	r3, #16
 800329c:	d008      	beq.n	80032b0 <HAL_ADC_ConfigChannel+0xd4>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2b11      	cmp	r3, #17
 80032a4:	d004      	beq.n	80032b0 <HAL_ADC_ConfigChannel+0xd4>
 80032a6:	f240 71de 	movw	r1, #2014	; 0x7de
 80032aa:	4860      	ldr	r0, [pc, #384]	; (800342c <HAL_ADC_ConfigChannel+0x250>)
 80032ac:	f7fe ff0a 	bl	80020c4 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d040      	beq.n	800333a <HAL_ADC_ConfigChannel+0x15e>
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d03c      	beq.n	800333a <HAL_ADC_ConfigChannel+0x15e>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d038      	beq.n	800333a <HAL_ADC_ConfigChannel+0x15e>
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d034      	beq.n	800333a <HAL_ADC_ConfigChannel+0x15e>
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	2b05      	cmp	r3, #5
 80032d6:	d030      	beq.n	800333a <HAL_ADC_ConfigChannel+0x15e>
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b06      	cmp	r3, #6
 80032de:	d02c      	beq.n	800333a <HAL_ADC_ConfigChannel+0x15e>
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	2b07      	cmp	r3, #7
 80032e6:	d028      	beq.n	800333a <HAL_ADC_ConfigChannel+0x15e>
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d024      	beq.n	800333a <HAL_ADC_ConfigChannel+0x15e>
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	2b09      	cmp	r3, #9
 80032f6:	d020      	beq.n	800333a <HAL_ADC_ConfigChannel+0x15e>
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b0a      	cmp	r3, #10
 80032fe:	d01c      	beq.n	800333a <HAL_ADC_ConfigChannel+0x15e>
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	2b0b      	cmp	r3, #11
 8003306:	d018      	beq.n	800333a <HAL_ADC_ConfigChannel+0x15e>
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b0c      	cmp	r3, #12
 800330e:	d014      	beq.n	800333a <HAL_ADC_ConfigChannel+0x15e>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2b0d      	cmp	r3, #13
 8003316:	d010      	beq.n	800333a <HAL_ADC_ConfigChannel+0x15e>
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2b0e      	cmp	r3, #14
 800331e:	d00c      	beq.n	800333a <HAL_ADC_ConfigChannel+0x15e>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b0f      	cmp	r3, #15
 8003326:	d008      	beq.n	800333a <HAL_ADC_ConfigChannel+0x15e>
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	2b10      	cmp	r3, #16
 800332e:	d004      	beq.n	800333a <HAL_ADC_ConfigChannel+0x15e>
 8003330:	f240 71df 	movw	r1, #2015	; 0x7df
 8003334:	483d      	ldr	r0, [pc, #244]	; (800342c <HAL_ADC_ConfigChannel+0x250>)
 8003336:	f7fe fec5 	bl	80020c4 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d020      	beq.n	8003384 <HAL_ADC_ConfigChannel+0x1a8>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d01c      	beq.n	8003384 <HAL_ADC_ConfigChannel+0x1a8>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	2b02      	cmp	r3, #2
 8003350:	d018      	beq.n	8003384 <HAL_ADC_ConfigChannel+0x1a8>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	2b03      	cmp	r3, #3
 8003358:	d014      	beq.n	8003384 <HAL_ADC_ConfigChannel+0x1a8>
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	2b04      	cmp	r3, #4
 8003360:	d010      	beq.n	8003384 <HAL_ADC_ConfigChannel+0x1a8>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	2b05      	cmp	r3, #5
 8003368:	d00c      	beq.n	8003384 <HAL_ADC_ConfigChannel+0x1a8>
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	2b06      	cmp	r3, #6
 8003370:	d008      	beq.n	8003384 <HAL_ADC_ConfigChannel+0x1a8>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b07      	cmp	r3, #7
 8003378:	d004      	beq.n	8003384 <HAL_ADC_ConfigChannel+0x1a8>
 800337a:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 800337e:	482b      	ldr	r0, [pc, #172]	; (800342c <HAL_ADC_ConfigChannel+0x250>)
 8003380:	f7fe fea0 	bl	80020c4 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800338a:	2b01      	cmp	r3, #1
 800338c:	d101      	bne.n	8003392 <HAL_ADC_ConfigChannel+0x1b6>
 800338e:	2302      	movs	r3, #2
 8003390:	e0e5      	b.n	800355e <HAL_ADC_ConfigChannel+0x382>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b06      	cmp	r3, #6
 80033a0:	d81c      	bhi.n	80033dc <HAL_ADC_ConfigChannel+0x200>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	3b05      	subs	r3, #5
 80033b4:	221f      	movs	r2, #31
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	43db      	mvns	r3, r3
 80033bc:	4019      	ands	r1, r3
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	4613      	mov	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	3b05      	subs	r3, #5
 80033ce:	fa00 f203 	lsl.w	r2, r0, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	635a      	str	r2, [r3, #52]	; 0x34
 80033da:	e045      	b.n	8003468 <HAL_ADC_ConfigChannel+0x28c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	2b0c      	cmp	r3, #12
 80033e2:	d825      	bhi.n	8003430 <HAL_ADC_ConfigChannel+0x254>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	3b23      	subs	r3, #35	; 0x23
 80033f6:	221f      	movs	r2, #31
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	43db      	mvns	r3, r3
 80033fe:	4019      	ands	r1, r3
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	6818      	ldr	r0, [r3, #0]
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	4413      	add	r3, r2
 800340e:	3b23      	subs	r3, #35	; 0x23
 8003410:	fa00 f203 	lsl.w	r2, r0, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	430a      	orrs	r2, r1
 800341a:	631a      	str	r2, [r3, #48]	; 0x30
 800341c:	e024      	b.n	8003468 <HAL_ADC_ConfigChannel+0x28c>
 800341e:	bf00      	nop
 8003420:	40012400 	.word	0x40012400
 8003424:	40012800 	.word	0x40012800
 8003428:	40013c00 	.word	0x40013c00
 800342c:	0800eaf0 	.word	0x0800eaf0
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	3b41      	subs	r3, #65	; 0x41
 8003442:	221f      	movs	r2, #31
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	43db      	mvns	r3, r3
 800344a:	4019      	ands	r1, r3
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	6818      	ldr	r0, [r3, #0]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	3b41      	subs	r3, #65	; 0x41
 800345c:	fa00 f203 	lsl.w	r2, r0, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b09      	cmp	r3, #9
 800346e:	d91c      	bls.n	80034aa <HAL_ADC_ConfigChannel+0x2ce>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68d9      	ldr	r1, [r3, #12]
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	4613      	mov	r3, r2
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	4413      	add	r3, r2
 8003480:	3b1e      	subs	r3, #30
 8003482:	2207      	movs	r2, #7
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	43db      	mvns	r3, r3
 800348a:	4019      	ands	r1, r3
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	6898      	ldr	r0, [r3, #8]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	4613      	mov	r3, r2
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	4413      	add	r3, r2
 800349a:	3b1e      	subs	r3, #30
 800349c:	fa00 f203 	lsl.w	r2, r0, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	60da      	str	r2, [r3, #12]
 80034a8:	e019      	b.n	80034de <HAL_ADC_ConfigChannel+0x302>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6919      	ldr	r1, [r3, #16]
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	4613      	mov	r3, r2
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	4413      	add	r3, r2
 80034ba:	2207      	movs	r2, #7
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	43db      	mvns	r3, r3
 80034c2:	4019      	ands	r1, r3
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	6898      	ldr	r0, [r3, #8]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	4613      	mov	r3, r2
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	4413      	add	r3, r2
 80034d2:	fa00 f203 	lsl.w	r2, r0, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2b10      	cmp	r3, #16
 80034e4:	d003      	beq.n	80034ee <HAL_ADC_ConfigChannel+0x312>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80034ea:	2b11      	cmp	r3, #17
 80034ec:	d132      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x378>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a1d      	ldr	r2, [pc, #116]	; (8003568 <HAL_ADC_ConfigChannel+0x38c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d125      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x368>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d126      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x378>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003514:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2b10      	cmp	r3, #16
 800351c:	d11a      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x378>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800351e:	4b13      	ldr	r3, [pc, #76]	; (800356c <HAL_ADC_ConfigChannel+0x390>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a13      	ldr	r2, [pc, #76]	; (8003570 <HAL_ADC_ConfigChannel+0x394>)
 8003524:	fba2 2303 	umull	r2, r3, r2, r3
 8003528:	0c9a      	lsrs	r2, r3, #18
 800352a:	4613      	mov	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003534:	e002      	b.n	800353c <HAL_ADC_ConfigChannel+0x360>
          {
            wait_loop_index--;
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	3b01      	subs	r3, #1
 800353a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f9      	bne.n	8003536 <HAL_ADC_ConfigChannel+0x35a>
 8003542:	e007      	b.n	8003554 <HAL_ADC_ConfigChannel+0x378>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003548:	f043 0220 	orr.w	r2, r3, #32
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800355c:	7bfb      	ldrb	r3, [r7, #15]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40012400 	.word	0x40012400
 800356c:	20000000 	.word	0x20000000
 8003570:	431bde83 	.word	0x431bde83

08003574 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b084      	sub	sp, #16
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b01      	cmp	r3, #1
 8003590:	d040      	beq.n	8003614 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f042 0201 	orr.w	r2, r2, #1
 80035a0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80035a2:	4b1f      	ldr	r3, [pc, #124]	; (8003620 <ADC_Enable+0xac>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a1f      	ldr	r2, [pc, #124]	; (8003624 <ADC_Enable+0xb0>)
 80035a8:	fba2 2303 	umull	r2, r3, r2, r3
 80035ac:	0c9b      	lsrs	r3, r3, #18
 80035ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80035b0:	e002      	b.n	80035b8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	3b01      	subs	r3, #1
 80035b6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f9      	bne.n	80035b2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80035be:	f7ff fa51 	bl	8002a64 <HAL_GetTick>
 80035c2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80035c4:	e01f      	b.n	8003606 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035c6:	f7ff fa4d 	bl	8002a64 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d918      	bls.n	8003606 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d011      	beq.n	8003606 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e6:	f043 0210 	orr.w	r2, r3, #16
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f2:	f043 0201 	orr.w	r2, r3, #1
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e007      	b.n	8003616 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b01      	cmp	r3, #1
 8003612:	d1d8      	bne.n	80035c6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	20000000 	.word	0x20000000
 8003624:	431bde83 	.word	0x431bde83

08003628 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003630:	2300      	movs	r3, #0
 8003632:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b01      	cmp	r3, #1
 8003640:	d12e      	bne.n	80036a0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0201 	bic.w	r2, r2, #1
 8003650:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003652:	f7ff fa07 	bl	8002a64 <HAL_GetTick>
 8003656:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003658:	e01b      	b.n	8003692 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800365a:	f7ff fa03 	bl	8002a64 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d914      	bls.n	8003692 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b01      	cmp	r3, #1
 8003674:	d10d      	bne.n	8003692 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367a:	f043 0210 	orr.w	r2, r3, #16
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003686:	f043 0201 	orr.w	r2, r3, #1
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e007      	b.n	80036a2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b01      	cmp	r3, #1
 800369e:	d0dc      	beq.n	800365a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
	...

080036ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f003 0307 	and.w	r3, r3, #7
 80036ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036bc:	4b0c      	ldr	r3, [pc, #48]	; (80036f0 <__NVIC_SetPriorityGrouping+0x44>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036c8:	4013      	ands	r3, r2
 80036ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036de:	4a04      	ldr	r2, [pc, #16]	; (80036f0 <__NVIC_SetPriorityGrouping+0x44>)
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	60d3      	str	r3, [r2, #12]
}
 80036e4:	bf00      	nop
 80036e6:	3714      	adds	r7, #20
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bc80      	pop	{r7}
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	e000ed00 	.word	0xe000ed00

080036f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036f8:	4b04      	ldr	r3, [pc, #16]	; (800370c <__NVIC_GetPriorityGrouping+0x18>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	0a1b      	lsrs	r3, r3, #8
 80036fe:	f003 0307 	and.w	r3, r3, #7
}
 8003702:	4618      	mov	r0, r3
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	e000ed00 	.word	0xe000ed00

08003710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800371a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371e:	2b00      	cmp	r3, #0
 8003720:	db0b      	blt.n	800373a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003722:	79fb      	ldrb	r3, [r7, #7]
 8003724:	f003 021f 	and.w	r2, r3, #31
 8003728:	4906      	ldr	r1, [pc, #24]	; (8003744 <__NVIC_EnableIRQ+0x34>)
 800372a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372e:	095b      	lsrs	r3, r3, #5
 8003730:	2001      	movs	r0, #1
 8003732:	fa00 f202 	lsl.w	r2, r0, r2
 8003736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	bc80      	pop	{r7}
 8003742:	4770      	bx	lr
 8003744:	e000e100 	.word	0xe000e100

08003748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	4603      	mov	r3, r0
 8003750:	6039      	str	r1, [r7, #0]
 8003752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003758:	2b00      	cmp	r3, #0
 800375a:	db0a      	blt.n	8003772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	b2da      	uxtb	r2, r3
 8003760:	490c      	ldr	r1, [pc, #48]	; (8003794 <__NVIC_SetPriority+0x4c>)
 8003762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003766:	0112      	lsls	r2, r2, #4
 8003768:	b2d2      	uxtb	r2, r2
 800376a:	440b      	add	r3, r1
 800376c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003770:	e00a      	b.n	8003788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	b2da      	uxtb	r2, r3
 8003776:	4908      	ldr	r1, [pc, #32]	; (8003798 <__NVIC_SetPriority+0x50>)
 8003778:	79fb      	ldrb	r3, [r7, #7]
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	3b04      	subs	r3, #4
 8003780:	0112      	lsls	r2, r2, #4
 8003782:	b2d2      	uxtb	r2, r2
 8003784:	440b      	add	r3, r1
 8003786:	761a      	strb	r2, [r3, #24]
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	bc80      	pop	{r7}
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	e000e100 	.word	0xe000e100
 8003798:	e000ed00 	.word	0xe000ed00

0800379c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800379c:	b480      	push	{r7}
 800379e:	b089      	sub	sp, #36	; 0x24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	f1c3 0307 	rsb	r3, r3, #7
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	bf28      	it	cs
 80037ba:	2304      	movcs	r3, #4
 80037bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	3304      	adds	r3, #4
 80037c2:	2b06      	cmp	r3, #6
 80037c4:	d902      	bls.n	80037cc <NVIC_EncodePriority+0x30>
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	3b03      	subs	r3, #3
 80037ca:	e000      	b.n	80037ce <NVIC_EncodePriority+0x32>
 80037cc:	2300      	movs	r3, #0
 80037ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d0:	f04f 32ff 	mov.w	r2, #4294967295
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	43da      	mvns	r2, r3
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	401a      	ands	r2, r3
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037e4:	f04f 31ff 	mov.w	r1, #4294967295
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	fa01 f303 	lsl.w	r3, r1, r3
 80037ee:	43d9      	mvns	r1, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037f4:	4313      	orrs	r3, r2
         );
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3724      	adds	r7, #36	; 0x24
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bc80      	pop	{r7}
 80037fe:	4770      	bx	lr

08003800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3b01      	subs	r3, #1
 800380c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003810:	d301      	bcc.n	8003816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003812:	2301      	movs	r3, #1
 8003814:	e00f      	b.n	8003836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003816:	4a0a      	ldr	r2, [pc, #40]	; (8003840 <SysTick_Config+0x40>)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3b01      	subs	r3, #1
 800381c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800381e:	210f      	movs	r1, #15
 8003820:	f04f 30ff 	mov.w	r0, #4294967295
 8003824:	f7ff ff90 	bl	8003748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003828:	4b05      	ldr	r3, [pc, #20]	; (8003840 <SysTick_Config+0x40>)
 800382a:	2200      	movs	r2, #0
 800382c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800382e:	4b04      	ldr	r3, [pc, #16]	; (8003840 <SysTick_Config+0x40>)
 8003830:	2207      	movs	r2, #7
 8003832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	e000e010 	.word	0xe000e010

08003844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b07      	cmp	r3, #7
 8003850:	d00f      	beq.n	8003872 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b06      	cmp	r3, #6
 8003856:	d00c      	beq.n	8003872 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b05      	cmp	r3, #5
 800385c:	d009      	beq.n	8003872 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b04      	cmp	r3, #4
 8003862:	d006      	beq.n	8003872 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b03      	cmp	r3, #3
 8003868:	d003      	beq.n	8003872 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800386a:	2192      	movs	r1, #146	; 0x92
 800386c:	4804      	ldr	r0, [pc, #16]	; (8003880 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800386e:	f7fe fc29 	bl	80020c4 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff ff1a 	bl	80036ac <__NVIC_SetPriorityGrouping>
}
 8003878:	bf00      	nop
 800387a:	3708      	adds	r7, #8
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	0800eb28 	.word	0x0800eb28

08003884 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
 8003890:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003892:	2300      	movs	r3, #0
 8003894:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b0f      	cmp	r3, #15
 800389a:	d903      	bls.n	80038a4 <HAL_NVIC_SetPriority+0x20>
 800389c:	21aa      	movs	r1, #170	; 0xaa
 800389e:	480e      	ldr	r0, [pc, #56]	; (80038d8 <HAL_NVIC_SetPriority+0x54>)
 80038a0:	f7fe fc10 	bl	80020c4 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	2b0f      	cmp	r3, #15
 80038a8:	d903      	bls.n	80038b2 <HAL_NVIC_SetPriority+0x2e>
 80038aa:	21ab      	movs	r1, #171	; 0xab
 80038ac:	480a      	ldr	r0, [pc, #40]	; (80038d8 <HAL_NVIC_SetPriority+0x54>)
 80038ae:	f7fe fc09 	bl	80020c4 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038b2:	f7ff ff1f 	bl	80036f4 <__NVIC_GetPriorityGrouping>
 80038b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	68b9      	ldr	r1, [r7, #8]
 80038bc:	6978      	ldr	r0, [r7, #20]
 80038be:	f7ff ff6d 	bl	800379c <NVIC_EncodePriority>
 80038c2:	4602      	mov	r2, r0
 80038c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038c8:	4611      	mov	r1, r2
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff ff3c 	bl	8003748 <__NVIC_SetPriority>
}
 80038d0:	bf00      	nop
 80038d2:	3718      	adds	r7, #24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	0800eb28 	.word	0x0800eb28

080038dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	4603      	mov	r3, r0
 80038e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80038e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	da03      	bge.n	80038f6 <HAL_NVIC_EnableIRQ+0x1a>
 80038ee:	21be      	movs	r1, #190	; 0xbe
 80038f0:	4805      	ldr	r0, [pc, #20]	; (8003908 <HAL_NVIC_EnableIRQ+0x2c>)
 80038f2:	f7fe fbe7 	bl	80020c4 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7ff ff08 	bl	8003710 <__NVIC_EnableIRQ>
}
 8003900:	bf00      	nop
 8003902:	3708      	adds	r7, #8
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	0800eb28 	.word	0x0800eb28

0800390c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7ff ff73 	bl	8003800 <SysTick_Config>
 800391a:	4603      	mov	r3, r0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3708      	adds	r7, #8
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800392c:	2300      	movs	r3, #0
 800392e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003936:	2b02      	cmp	r3, #2
 8003938:	d008      	beq.n	800394c <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2204      	movs	r2, #4
 800393e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e020      	b.n	800398e <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 020e 	bic.w	r2, r2, #14
 800395a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0201 	bic.w	r2, r2, #1
 800396a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003974:	2101      	movs	r1, #1
 8003976:	fa01 f202 	lsl.w	r2, r1, r2
 800397a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800398c:	7bfb      	ldrb	r3, [r7, #15]
}
 800398e:	4618      	mov	r0, r3
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr

08003998 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d005      	beq.n	80039ba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2204      	movs	r2, #4
 80039b2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	73fb      	strb	r3, [r7, #15]
 80039b8:	e0d6      	b.n	8003b68 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 020e 	bic.w	r2, r2, #14
 80039c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0201 	bic.w	r2, r2, #1
 80039d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	461a      	mov	r2, r3
 80039e0:	4b64      	ldr	r3, [pc, #400]	; (8003b74 <HAL_DMA_Abort_IT+0x1dc>)
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d958      	bls.n	8003a98 <HAL_DMA_Abort_IT+0x100>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a63      	ldr	r2, [pc, #396]	; (8003b78 <HAL_DMA_Abort_IT+0x1e0>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d04f      	beq.n	8003a90 <HAL_DMA_Abort_IT+0xf8>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a61      	ldr	r2, [pc, #388]	; (8003b7c <HAL_DMA_Abort_IT+0x1e4>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d048      	beq.n	8003a8c <HAL_DMA_Abort_IT+0xf4>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a60      	ldr	r2, [pc, #384]	; (8003b80 <HAL_DMA_Abort_IT+0x1e8>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d040      	beq.n	8003a86 <HAL_DMA_Abort_IT+0xee>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a5e      	ldr	r2, [pc, #376]	; (8003b84 <HAL_DMA_Abort_IT+0x1ec>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d038      	beq.n	8003a80 <HAL_DMA_Abort_IT+0xe8>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a5d      	ldr	r2, [pc, #372]	; (8003b88 <HAL_DMA_Abort_IT+0x1f0>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d030      	beq.n	8003a7a <HAL_DMA_Abort_IT+0xe2>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a5b      	ldr	r2, [pc, #364]	; (8003b8c <HAL_DMA_Abort_IT+0x1f4>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d028      	beq.n	8003a74 <HAL_DMA_Abort_IT+0xdc>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a53      	ldr	r2, [pc, #332]	; (8003b74 <HAL_DMA_Abort_IT+0x1dc>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d020      	beq.n	8003a6e <HAL_DMA_Abort_IT+0xd6>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a57      	ldr	r2, [pc, #348]	; (8003b90 <HAL_DMA_Abort_IT+0x1f8>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d019      	beq.n	8003a6a <HAL_DMA_Abort_IT+0xd2>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a56      	ldr	r2, [pc, #344]	; (8003b94 <HAL_DMA_Abort_IT+0x1fc>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d012      	beq.n	8003a66 <HAL_DMA_Abort_IT+0xce>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a54      	ldr	r2, [pc, #336]	; (8003b98 <HAL_DMA_Abort_IT+0x200>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d00a      	beq.n	8003a60 <HAL_DMA_Abort_IT+0xc8>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a53      	ldr	r2, [pc, #332]	; (8003b9c <HAL_DMA_Abort_IT+0x204>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d102      	bne.n	8003a5a <HAL_DMA_Abort_IT+0xc2>
 8003a54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a58:	e01b      	b.n	8003a92 <HAL_DMA_Abort_IT+0xfa>
 8003a5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a5e:	e018      	b.n	8003a92 <HAL_DMA_Abort_IT+0xfa>
 8003a60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a64:	e015      	b.n	8003a92 <HAL_DMA_Abort_IT+0xfa>
 8003a66:	2310      	movs	r3, #16
 8003a68:	e013      	b.n	8003a92 <HAL_DMA_Abort_IT+0xfa>
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e011      	b.n	8003a92 <HAL_DMA_Abort_IT+0xfa>
 8003a6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a72:	e00e      	b.n	8003a92 <HAL_DMA_Abort_IT+0xfa>
 8003a74:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003a78:	e00b      	b.n	8003a92 <HAL_DMA_Abort_IT+0xfa>
 8003a7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a7e:	e008      	b.n	8003a92 <HAL_DMA_Abort_IT+0xfa>
 8003a80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a84:	e005      	b.n	8003a92 <HAL_DMA_Abort_IT+0xfa>
 8003a86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a8a:	e002      	b.n	8003a92 <HAL_DMA_Abort_IT+0xfa>
 8003a8c:	2310      	movs	r3, #16
 8003a8e:	e000      	b.n	8003a92 <HAL_DMA_Abort_IT+0xfa>
 8003a90:	2301      	movs	r3, #1
 8003a92:	4a43      	ldr	r2, [pc, #268]	; (8003ba0 <HAL_DMA_Abort_IT+0x208>)
 8003a94:	6053      	str	r3, [r2, #4]
 8003a96:	e057      	b.n	8003b48 <HAL_DMA_Abort_IT+0x1b0>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a36      	ldr	r2, [pc, #216]	; (8003b78 <HAL_DMA_Abort_IT+0x1e0>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d04f      	beq.n	8003b42 <HAL_DMA_Abort_IT+0x1aa>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a35      	ldr	r2, [pc, #212]	; (8003b7c <HAL_DMA_Abort_IT+0x1e4>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d048      	beq.n	8003b3e <HAL_DMA_Abort_IT+0x1a6>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a33      	ldr	r2, [pc, #204]	; (8003b80 <HAL_DMA_Abort_IT+0x1e8>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d040      	beq.n	8003b38 <HAL_DMA_Abort_IT+0x1a0>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a32      	ldr	r2, [pc, #200]	; (8003b84 <HAL_DMA_Abort_IT+0x1ec>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d038      	beq.n	8003b32 <HAL_DMA_Abort_IT+0x19a>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a30      	ldr	r2, [pc, #192]	; (8003b88 <HAL_DMA_Abort_IT+0x1f0>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d030      	beq.n	8003b2c <HAL_DMA_Abort_IT+0x194>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a2f      	ldr	r2, [pc, #188]	; (8003b8c <HAL_DMA_Abort_IT+0x1f4>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d028      	beq.n	8003b26 <HAL_DMA_Abort_IT+0x18e>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a26      	ldr	r2, [pc, #152]	; (8003b74 <HAL_DMA_Abort_IT+0x1dc>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d020      	beq.n	8003b20 <HAL_DMA_Abort_IT+0x188>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a2b      	ldr	r2, [pc, #172]	; (8003b90 <HAL_DMA_Abort_IT+0x1f8>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d019      	beq.n	8003b1c <HAL_DMA_Abort_IT+0x184>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a29      	ldr	r2, [pc, #164]	; (8003b94 <HAL_DMA_Abort_IT+0x1fc>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d012      	beq.n	8003b18 <HAL_DMA_Abort_IT+0x180>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a28      	ldr	r2, [pc, #160]	; (8003b98 <HAL_DMA_Abort_IT+0x200>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d00a      	beq.n	8003b12 <HAL_DMA_Abort_IT+0x17a>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a26      	ldr	r2, [pc, #152]	; (8003b9c <HAL_DMA_Abort_IT+0x204>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d102      	bne.n	8003b0c <HAL_DMA_Abort_IT+0x174>
 8003b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b0a:	e01b      	b.n	8003b44 <HAL_DMA_Abort_IT+0x1ac>
 8003b0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b10:	e018      	b.n	8003b44 <HAL_DMA_Abort_IT+0x1ac>
 8003b12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b16:	e015      	b.n	8003b44 <HAL_DMA_Abort_IT+0x1ac>
 8003b18:	2310      	movs	r3, #16
 8003b1a:	e013      	b.n	8003b44 <HAL_DMA_Abort_IT+0x1ac>
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e011      	b.n	8003b44 <HAL_DMA_Abort_IT+0x1ac>
 8003b20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b24:	e00e      	b.n	8003b44 <HAL_DMA_Abort_IT+0x1ac>
 8003b26:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003b2a:	e00b      	b.n	8003b44 <HAL_DMA_Abort_IT+0x1ac>
 8003b2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b30:	e008      	b.n	8003b44 <HAL_DMA_Abort_IT+0x1ac>
 8003b32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b36:	e005      	b.n	8003b44 <HAL_DMA_Abort_IT+0x1ac>
 8003b38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b3c:	e002      	b.n	8003b44 <HAL_DMA_Abort_IT+0x1ac>
 8003b3e:	2310      	movs	r3, #16
 8003b40:	e000      	b.n	8003b44 <HAL_DMA_Abort_IT+0x1ac>
 8003b42:	2301      	movs	r3, #1
 8003b44:	4a17      	ldr	r2, [pc, #92]	; (8003ba4 <HAL_DMA_Abort_IT+0x20c>)
 8003b46:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d003      	beq.n	8003b68 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	4798      	blx	r3
    } 
  }
  return status;
 8003b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	40020080 	.word	0x40020080
 8003b78:	40020008 	.word	0x40020008
 8003b7c:	4002001c 	.word	0x4002001c
 8003b80:	40020030 	.word	0x40020030
 8003b84:	40020044 	.word	0x40020044
 8003b88:	40020058 	.word	0x40020058
 8003b8c:	4002006c 	.word	0x4002006c
 8003b90:	40020408 	.word	0x40020408
 8003b94:	4002041c 	.word	0x4002041c
 8003b98:	40020430 	.word	0x40020430
 8003b9c:	40020444 	.word	0x40020444
 8003ba0:	40020400 	.word	0x40020400
 8003ba4:	40020000 	.word	0x40020000

08003ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b08a      	sub	sp, #40	; 0x28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4aa9      	ldr	r2, [pc, #676]	; (8003e64 <HAL_GPIO_Init+0x2bc>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d01b      	beq.n	8003bfa <HAL_GPIO_Init+0x52>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4aa8      	ldr	r2, [pc, #672]	; (8003e68 <HAL_GPIO_Init+0x2c0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d017      	beq.n	8003bfa <HAL_GPIO_Init+0x52>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4aa7      	ldr	r2, [pc, #668]	; (8003e6c <HAL_GPIO_Init+0x2c4>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d013      	beq.n	8003bfa <HAL_GPIO_Init+0x52>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4aa6      	ldr	r2, [pc, #664]	; (8003e70 <HAL_GPIO_Init+0x2c8>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d00f      	beq.n	8003bfa <HAL_GPIO_Init+0x52>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4aa5      	ldr	r2, [pc, #660]	; (8003e74 <HAL_GPIO_Init+0x2cc>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d00b      	beq.n	8003bfa <HAL_GPIO_Init+0x52>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4aa4      	ldr	r2, [pc, #656]	; (8003e78 <HAL_GPIO_Init+0x2d0>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d007      	beq.n	8003bfa <HAL_GPIO_Init+0x52>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4aa3      	ldr	r2, [pc, #652]	; (8003e7c <HAL_GPIO_Init+0x2d4>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d003      	beq.n	8003bfa <HAL_GPIO_Init+0x52>
 8003bf2:	21bd      	movs	r1, #189	; 0xbd
 8003bf4:	48a2      	ldr	r0, [pc, #648]	; (8003e80 <HAL_GPIO_Init+0x2d8>)
 8003bf6:	f7fe fa65 	bl	80020c4 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d005      	beq.n	8003c10 <HAL_GPIO_Init+0x68>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	0c1b      	lsrs	r3, r3, #16
 8003c0a:	041b      	lsls	r3, r3, #16
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d003      	beq.n	8003c18 <HAL_GPIO_Init+0x70>
 8003c10:	21be      	movs	r1, #190	; 0xbe
 8003c12:	489b      	ldr	r0, [pc, #620]	; (8003e80 <HAL_GPIO_Init+0x2d8>)
 8003c14:	f7fe fa56 	bl	80020c4 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 8235 	beq.w	800408c <HAL_GPIO_Init+0x4e4>
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	f000 8230 	beq.w	800408c <HAL_GPIO_Init+0x4e4>
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b11      	cmp	r3, #17
 8003c32:	f000 822b 	beq.w	800408c <HAL_GPIO_Init+0x4e4>
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	f000 8226 	beq.w	800408c <HAL_GPIO_Init+0x4e4>
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	2b12      	cmp	r3, #18
 8003c46:	f000 8221 	beq.w	800408c <HAL_GPIO_Init+0x4e4>
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	4a8d      	ldr	r2, [pc, #564]	; (8003e84 <HAL_GPIO_Init+0x2dc>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	f000 821b 	beq.w	800408c <HAL_GPIO_Init+0x4e4>
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	4a8b      	ldr	r2, [pc, #556]	; (8003e88 <HAL_GPIO_Init+0x2e0>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	f000 8215 	beq.w	800408c <HAL_GPIO_Init+0x4e4>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	4a89      	ldr	r2, [pc, #548]	; (8003e8c <HAL_GPIO_Init+0x2e4>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	f000 820f 	beq.w	800408c <HAL_GPIO_Init+0x4e4>
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	4a87      	ldr	r2, [pc, #540]	; (8003e90 <HAL_GPIO_Init+0x2e8>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	f000 8209 	beq.w	800408c <HAL_GPIO_Init+0x4e4>
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	4a85      	ldr	r2, [pc, #532]	; (8003e94 <HAL_GPIO_Init+0x2ec>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	f000 8203 	beq.w	800408c <HAL_GPIO_Init+0x4e4>
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	4a83      	ldr	r2, [pc, #524]	; (8003e98 <HAL_GPIO_Init+0x2f0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	f000 81fd 	beq.w	800408c <HAL_GPIO_Init+0x4e4>
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b03      	cmp	r3, #3
 8003c98:	f000 81f8 	beq.w	800408c <HAL_GPIO_Init+0x4e4>
 8003c9c:	21bf      	movs	r1, #191	; 0xbf
 8003c9e:	4878      	ldr	r0, [pc, #480]	; (8003e80 <HAL_GPIO_Init+0x2d8>)
 8003ca0:	f7fe fa10 	bl	80020c4 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ca4:	e1f2      	b.n	800408c <HAL_GPIO_Init+0x4e4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	69fa      	ldr	r2, [r7, #28]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	f040 81e1 	bne.w	8004086 <HAL_GPIO_Init+0x4de>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	4a67      	ldr	r2, [pc, #412]	; (8003e64 <HAL_GPIO_Init+0x2bc>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d01b      	beq.n	8003d04 <HAL_GPIO_Init+0x15c>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4a66      	ldr	r2, [pc, #408]	; (8003e68 <HAL_GPIO_Init+0x2c0>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d017      	beq.n	8003d04 <HAL_GPIO_Init+0x15c>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a65      	ldr	r2, [pc, #404]	; (8003e6c <HAL_GPIO_Init+0x2c4>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d013      	beq.n	8003d04 <HAL_GPIO_Init+0x15c>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a64      	ldr	r2, [pc, #400]	; (8003e70 <HAL_GPIO_Init+0x2c8>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d00f      	beq.n	8003d04 <HAL_GPIO_Init+0x15c>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a63      	ldr	r2, [pc, #396]	; (8003e74 <HAL_GPIO_Init+0x2cc>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d00b      	beq.n	8003d04 <HAL_GPIO_Init+0x15c>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a62      	ldr	r2, [pc, #392]	; (8003e78 <HAL_GPIO_Init+0x2d0>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d007      	beq.n	8003d04 <HAL_GPIO_Init+0x15c>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a61      	ldr	r2, [pc, #388]	; (8003e7c <HAL_GPIO_Init+0x2d4>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d003      	beq.n	8003d04 <HAL_GPIO_Init+0x15c>
 8003cfc:	21cd      	movs	r1, #205	; 0xcd
 8003cfe:	4860      	ldr	r0, [pc, #384]	; (8003e80 <HAL_GPIO_Init+0x2d8>)
 8003d00:	f7fe f9e0 	bl	80020c4 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	4a63      	ldr	r2, [pc, #396]	; (8003e98 <HAL_GPIO_Init+0x2f0>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	f000 80c6 	beq.w	8003e9c <HAL_GPIO_Init+0x2f4>
 8003d10:	4a61      	ldr	r2, [pc, #388]	; (8003e98 <HAL_GPIO_Init+0x2f0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	f200 80ec 	bhi.w	8003ef0 <HAL_GPIO_Init+0x348>
 8003d18:	4a5c      	ldr	r2, [pc, #368]	; (8003e8c <HAL_GPIO_Init+0x2e4>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	f000 80be 	beq.w	8003e9c <HAL_GPIO_Init+0x2f4>
 8003d20:	4a5a      	ldr	r2, [pc, #360]	; (8003e8c <HAL_GPIO_Init+0x2e4>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	f200 80e4 	bhi.w	8003ef0 <HAL_GPIO_Init+0x348>
 8003d28:	4a5a      	ldr	r2, [pc, #360]	; (8003e94 <HAL_GPIO_Init+0x2ec>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	f000 80b6 	beq.w	8003e9c <HAL_GPIO_Init+0x2f4>
 8003d30:	4a58      	ldr	r2, [pc, #352]	; (8003e94 <HAL_GPIO_Init+0x2ec>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	f200 80dc 	bhi.w	8003ef0 <HAL_GPIO_Init+0x348>
 8003d38:	4a53      	ldr	r2, [pc, #332]	; (8003e88 <HAL_GPIO_Init+0x2e0>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	f000 80ae 	beq.w	8003e9c <HAL_GPIO_Init+0x2f4>
 8003d40:	4a51      	ldr	r2, [pc, #324]	; (8003e88 <HAL_GPIO_Init+0x2e0>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	f200 80d4 	bhi.w	8003ef0 <HAL_GPIO_Init+0x348>
 8003d48:	4a51      	ldr	r2, [pc, #324]	; (8003e90 <HAL_GPIO_Init+0x2e8>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	f000 80a6 	beq.w	8003e9c <HAL_GPIO_Init+0x2f4>
 8003d50:	4a4f      	ldr	r2, [pc, #316]	; (8003e90 <HAL_GPIO_Init+0x2e8>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	f200 80cc 	bhi.w	8003ef0 <HAL_GPIO_Init+0x348>
 8003d58:	2b12      	cmp	r3, #18
 8003d5a:	d82b      	bhi.n	8003db4 <HAL_GPIO_Init+0x20c>
 8003d5c:	2b12      	cmp	r3, #18
 8003d5e:	f200 80c7 	bhi.w	8003ef0 <HAL_GPIO_Init+0x348>
 8003d62:	a201      	add	r2, pc, #4	; (adr r2, 8003d68 <HAL_GPIO_Init+0x1c0>)
 8003d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d68:	08003e9d 	.word	0x08003e9d
 8003d6c:	08003dbd 	.word	0x08003dbd
 8003d70:	08003e0f 	.word	0x08003e0f
 8003d74:	08003eeb 	.word	0x08003eeb
 8003d78:	08003ef1 	.word	0x08003ef1
 8003d7c:	08003ef1 	.word	0x08003ef1
 8003d80:	08003ef1 	.word	0x08003ef1
 8003d84:	08003ef1 	.word	0x08003ef1
 8003d88:	08003ef1 	.word	0x08003ef1
 8003d8c:	08003ef1 	.word	0x08003ef1
 8003d90:	08003ef1 	.word	0x08003ef1
 8003d94:	08003ef1 	.word	0x08003ef1
 8003d98:	08003ef1 	.word	0x08003ef1
 8003d9c:	08003ef1 	.word	0x08003ef1
 8003da0:	08003ef1 	.word	0x08003ef1
 8003da4:	08003ef1 	.word	0x08003ef1
 8003da8:	08003ef1 	.word	0x08003ef1
 8003dac:	08003de5 	.word	0x08003de5
 8003db0:	08003e39 	.word	0x08003e39
 8003db4:	4a33      	ldr	r2, [pc, #204]	; (8003e84 <HAL_GPIO_Init+0x2dc>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d070      	beq.n	8003e9c <HAL_GPIO_Init+0x2f4>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003dba:	e099      	b.n	8003ef0 <HAL_GPIO_Init+0x348>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d00b      	beq.n	8003ddc <HAL_GPIO_Init+0x234>
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d007      	beq.n	8003ddc <HAL_GPIO_Init+0x234>
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	2b03      	cmp	r3, #3
 8003dd2:	d003      	beq.n	8003ddc <HAL_GPIO_Init+0x234>
 8003dd4:	21d5      	movs	r1, #213	; 0xd5
 8003dd6:	482a      	ldr	r0, [pc, #168]	; (8003e80 <HAL_GPIO_Init+0x2d8>)
 8003dd8:	f7fe f974 	bl	80020c4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	623b      	str	r3, [r7, #32]
          break;
 8003de2:	e086      	b.n	8003ef2 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d00b      	beq.n	8003e04 <HAL_GPIO_Init+0x25c>
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d007      	beq.n	8003e04 <HAL_GPIO_Init+0x25c>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	2b03      	cmp	r3, #3
 8003dfa:	d003      	beq.n	8003e04 <HAL_GPIO_Init+0x25c>
 8003dfc:	21dc      	movs	r1, #220	; 0xdc
 8003dfe:	4820      	ldr	r0, [pc, #128]	; (8003e80 <HAL_GPIO_Init+0x2d8>)
 8003e00:	f7fe f960 	bl	80020c4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	3304      	adds	r3, #4
 8003e0a:	623b      	str	r3, [r7, #32]
          break;
 8003e0c:	e071      	b.n	8003ef2 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d00b      	beq.n	8003e2e <HAL_GPIO_Init+0x286>
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d007      	beq.n	8003e2e <HAL_GPIO_Init+0x286>
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	2b03      	cmp	r3, #3
 8003e24:	d003      	beq.n	8003e2e <HAL_GPIO_Init+0x286>
 8003e26:	21e3      	movs	r1, #227	; 0xe3
 8003e28:	4815      	ldr	r0, [pc, #84]	; (8003e80 <HAL_GPIO_Init+0x2d8>)
 8003e2a:	f7fe f94b 	bl	80020c4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	3308      	adds	r3, #8
 8003e34:	623b      	str	r3, [r7, #32]
          break;
 8003e36:	e05c      	b.n	8003ef2 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d00b      	beq.n	8003e58 <HAL_GPIO_Init+0x2b0>
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d007      	beq.n	8003e58 <HAL_GPIO_Init+0x2b0>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	2b03      	cmp	r3, #3
 8003e4e:	d003      	beq.n	8003e58 <HAL_GPIO_Init+0x2b0>
 8003e50:	21ea      	movs	r1, #234	; 0xea
 8003e52:	480b      	ldr	r0, [pc, #44]	; (8003e80 <HAL_GPIO_Init+0x2d8>)
 8003e54:	f7fe f936 	bl	80020c4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	330c      	adds	r3, #12
 8003e5e:	623b      	str	r3, [r7, #32]
          break;
 8003e60:	e047      	b.n	8003ef2 <HAL_GPIO_Init+0x34a>
 8003e62:	bf00      	nop
 8003e64:	40010800 	.word	0x40010800
 8003e68:	40010c00 	.word	0x40010c00
 8003e6c:	40011000 	.word	0x40011000
 8003e70:	40011400 	.word	0x40011400
 8003e74:	40011800 	.word	0x40011800
 8003e78:	40011c00 	.word	0x40011c00
 8003e7c:	40012000 	.word	0x40012000
 8003e80:	0800eb64 	.word	0x0800eb64
 8003e84:	10110000 	.word	0x10110000
 8003e88:	10210000 	.word	0x10210000
 8003e8c:	10310000 	.word	0x10310000
 8003e90:	10120000 	.word	0x10120000
 8003e94:	10220000 	.word	0x10220000
 8003e98:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00b      	beq.n	8003ebc <HAL_GPIO_Init+0x314>
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d007      	beq.n	8003ebc <HAL_GPIO_Init+0x314>
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d003      	beq.n	8003ebc <HAL_GPIO_Init+0x314>
 8003eb4:	21f7      	movs	r1, #247	; 0xf7
 8003eb6:	487c      	ldr	r0, [pc, #496]	; (80040a8 <HAL_GPIO_Init+0x500>)
 8003eb8:	f7fe f904 	bl	80020c4 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d102      	bne.n	8003eca <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003ec4:	2304      	movs	r3, #4
 8003ec6:	623b      	str	r3, [r7, #32]
          break;
 8003ec8:	e013      	b.n	8003ef2 <HAL_GPIO_Init+0x34a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d105      	bne.n	8003ede <HAL_GPIO_Init+0x336>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ed2:	2308      	movs	r3, #8
 8003ed4:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	69fa      	ldr	r2, [r7, #28]
 8003eda:	611a      	str	r2, [r3, #16]
          break;
 8003edc:	e009      	b.n	8003ef2 <HAL_GPIO_Init+0x34a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ede:	2308      	movs	r3, #8
 8003ee0:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	69fa      	ldr	r2, [r7, #28]
 8003ee6:	615a      	str	r2, [r3, #20]
          break;
 8003ee8:	e003      	b.n	8003ef2 <HAL_GPIO_Init+0x34a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003eea:	2300      	movs	r3, #0
 8003eec:	623b      	str	r3, [r7, #32]
          break;
 8003eee:	e000      	b.n	8003ef2 <HAL_GPIO_Init+0x34a>
          break;
 8003ef0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	2bff      	cmp	r3, #255	; 0xff
 8003ef6:	d801      	bhi.n	8003efc <HAL_GPIO_Init+0x354>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	e001      	b.n	8003f00 <HAL_GPIO_Init+0x358>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3304      	adds	r3, #4
 8003f00:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	2bff      	cmp	r3, #255	; 0xff
 8003f06:	d802      	bhi.n	8003f0e <HAL_GPIO_Init+0x366>
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	e002      	b.n	8003f14 <HAL_GPIO_Init+0x36c>
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	3b08      	subs	r3, #8
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	210f      	movs	r1, #15
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f22:	43db      	mvns	r3, r3
 8003f24:	401a      	ands	r2, r3
 8003f26:	6a39      	ldr	r1, [r7, #32]
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 80a2 	beq.w	8004086 <HAL_GPIO_Init+0x4de>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003f42:	4b5a      	ldr	r3, [pc, #360]	; (80040ac <HAL_GPIO_Init+0x504>)
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	4a59      	ldr	r2, [pc, #356]	; (80040ac <HAL_GPIO_Init+0x504>)
 8003f48:	f043 0301 	orr.w	r3, r3, #1
 8003f4c:	6193      	str	r3, [r2, #24]
 8003f4e:	4b57      	ldr	r3, [pc, #348]	; (80040ac <HAL_GPIO_Init+0x504>)
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	60bb      	str	r3, [r7, #8]
 8003f58:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003f5a:	4a55      	ldr	r2, [pc, #340]	; (80040b0 <HAL_GPIO_Init+0x508>)
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	089b      	lsrs	r3, r3, #2
 8003f60:	3302      	adds	r3, #2
 8003f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f66:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	f003 0303 	and.w	r3, r3, #3
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	220f      	movs	r2, #15
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	43db      	mvns	r3, r3
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a4c      	ldr	r2, [pc, #304]	; (80040b4 <HAL_GPIO_Init+0x50c>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d01f      	beq.n	8003fc6 <HAL_GPIO_Init+0x41e>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a4b      	ldr	r2, [pc, #300]	; (80040b8 <HAL_GPIO_Init+0x510>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d019      	beq.n	8003fc2 <HAL_GPIO_Init+0x41a>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a4a      	ldr	r2, [pc, #296]	; (80040bc <HAL_GPIO_Init+0x514>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d013      	beq.n	8003fbe <HAL_GPIO_Init+0x416>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a49      	ldr	r2, [pc, #292]	; (80040c0 <HAL_GPIO_Init+0x518>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d00d      	beq.n	8003fba <HAL_GPIO_Init+0x412>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a48      	ldr	r2, [pc, #288]	; (80040c4 <HAL_GPIO_Init+0x51c>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d007      	beq.n	8003fb6 <HAL_GPIO_Init+0x40e>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a47      	ldr	r2, [pc, #284]	; (80040c8 <HAL_GPIO_Init+0x520>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d101      	bne.n	8003fb2 <HAL_GPIO_Init+0x40a>
 8003fae:	2305      	movs	r3, #5
 8003fb0:	e00a      	b.n	8003fc8 <HAL_GPIO_Init+0x420>
 8003fb2:	2306      	movs	r3, #6
 8003fb4:	e008      	b.n	8003fc8 <HAL_GPIO_Init+0x420>
 8003fb6:	2304      	movs	r3, #4
 8003fb8:	e006      	b.n	8003fc8 <HAL_GPIO_Init+0x420>
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e004      	b.n	8003fc8 <HAL_GPIO_Init+0x420>
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	e002      	b.n	8003fc8 <HAL_GPIO_Init+0x420>
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e000      	b.n	8003fc8 <HAL_GPIO_Init+0x420>
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fca:	f002 0203 	and.w	r2, r2, #3
 8003fce:	0092      	lsls	r2, r2, #2
 8003fd0:	4093      	lsls	r3, r2
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003fd8:	4935      	ldr	r1, [pc, #212]	; (80040b0 <HAL_GPIO_Init+0x508>)
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fdc:	089b      	lsrs	r3, r3, #2
 8003fde:	3302      	adds	r3, #2
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d006      	beq.n	8004000 <HAL_GPIO_Init+0x458>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003ff2:	4b36      	ldr	r3, [pc, #216]	; (80040cc <HAL_GPIO_Init+0x524>)
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	4935      	ldr	r1, [pc, #212]	; (80040cc <HAL_GPIO_Init+0x524>)
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	600b      	str	r3, [r1, #0]
 8003ffe:	e006      	b.n	800400e <HAL_GPIO_Init+0x466>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004000:	4b32      	ldr	r3, [pc, #200]	; (80040cc <HAL_GPIO_Init+0x524>)
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	43db      	mvns	r3, r3
 8004008:	4930      	ldr	r1, [pc, #192]	; (80040cc <HAL_GPIO_Init+0x524>)
 800400a:	4013      	ands	r3, r2
 800400c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d006      	beq.n	8004028 <HAL_GPIO_Init+0x480>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800401a:	4b2c      	ldr	r3, [pc, #176]	; (80040cc <HAL_GPIO_Init+0x524>)
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	492b      	ldr	r1, [pc, #172]	; (80040cc <HAL_GPIO_Init+0x524>)
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	4313      	orrs	r3, r2
 8004024:	604b      	str	r3, [r1, #4]
 8004026:	e006      	b.n	8004036 <HAL_GPIO_Init+0x48e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004028:	4b28      	ldr	r3, [pc, #160]	; (80040cc <HAL_GPIO_Init+0x524>)
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	43db      	mvns	r3, r3
 8004030:	4926      	ldr	r1, [pc, #152]	; (80040cc <HAL_GPIO_Init+0x524>)
 8004032:	4013      	ands	r3, r2
 8004034:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d006      	beq.n	8004050 <HAL_GPIO_Init+0x4a8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004042:	4b22      	ldr	r3, [pc, #136]	; (80040cc <HAL_GPIO_Init+0x524>)
 8004044:	689a      	ldr	r2, [r3, #8]
 8004046:	4921      	ldr	r1, [pc, #132]	; (80040cc <HAL_GPIO_Init+0x524>)
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	4313      	orrs	r3, r2
 800404c:	608b      	str	r3, [r1, #8]
 800404e:	e006      	b.n	800405e <HAL_GPIO_Init+0x4b6>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004050:	4b1e      	ldr	r3, [pc, #120]	; (80040cc <HAL_GPIO_Init+0x524>)
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	43db      	mvns	r3, r3
 8004058:	491c      	ldr	r1, [pc, #112]	; (80040cc <HAL_GPIO_Init+0x524>)
 800405a:	4013      	ands	r3, r2
 800405c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d006      	beq.n	8004078 <HAL_GPIO_Init+0x4d0>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800406a:	4b18      	ldr	r3, [pc, #96]	; (80040cc <HAL_GPIO_Init+0x524>)
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	4917      	ldr	r1, [pc, #92]	; (80040cc <HAL_GPIO_Init+0x524>)
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	4313      	orrs	r3, r2
 8004074:	60cb      	str	r3, [r1, #12]
 8004076:	e006      	b.n	8004086 <HAL_GPIO_Init+0x4de>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004078:	4b14      	ldr	r3, [pc, #80]	; (80040cc <HAL_GPIO_Init+0x524>)
 800407a:	68da      	ldr	r2, [r3, #12]
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	43db      	mvns	r3, r3
 8004080:	4912      	ldr	r1, [pc, #72]	; (80040cc <HAL_GPIO_Init+0x524>)
 8004082:	4013      	ands	r3, r2
 8004084:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	3301      	adds	r3, #1
 800408a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004092:	fa22 f303 	lsr.w	r3, r2, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	f47f ae05 	bne.w	8003ca6 <HAL_GPIO_Init+0xfe>
  }
}
 800409c:	bf00      	nop
 800409e:	bf00      	nop
 80040a0:	3728      	adds	r7, #40	; 0x28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	0800eb64 	.word	0x0800eb64
 80040ac:	40021000 	.word	0x40021000
 80040b0:	40010000 	.word	0x40010000
 80040b4:	40010800 	.word	0x40010800
 80040b8:	40010c00 	.word	0x40010c00
 80040bc:	40011000 	.word	0x40011000
 80040c0:	40011400 	.word	0x40011400
 80040c4:	40011800 	.word	0x40011800
 80040c8:	40011c00 	.word	0x40011c00
 80040cc:	40010400 	.word	0x40010400

080040d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	807b      	strh	r3, [r7, #2]
 80040dc:	4613      	mov	r3, r2
 80040de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80040e0:	887b      	ldrh	r3, [r7, #2]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d004      	beq.n	80040f0 <HAL_GPIO_WritePin+0x20>
 80040e6:	887b      	ldrh	r3, [r7, #2]
 80040e8:	0c1b      	lsrs	r3, r3, #16
 80040ea:	041b      	lsls	r3, r3, #16
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d004      	beq.n	80040fa <HAL_GPIO_WritePin+0x2a>
 80040f0:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80040f4:	480e      	ldr	r0, [pc, #56]	; (8004130 <HAL_GPIO_WritePin+0x60>)
 80040f6:	f7fd ffe5 	bl	80020c4 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80040fa:	787b      	ldrb	r3, [r7, #1]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d007      	beq.n	8004110 <HAL_GPIO_WritePin+0x40>
 8004100:	787b      	ldrb	r3, [r7, #1]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d004      	beq.n	8004110 <HAL_GPIO_WritePin+0x40>
 8004106:	f240 11d5 	movw	r1, #469	; 0x1d5
 800410a:	4809      	ldr	r0, [pc, #36]	; (8004130 <HAL_GPIO_WritePin+0x60>)
 800410c:	f7fd ffda 	bl	80020c4 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8004110:	787b      	ldrb	r3, [r7, #1]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004116:	887a      	ldrh	r2, [r7, #2]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800411c:	e003      	b.n	8004126 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800411e:	887b      	ldrh	r3, [r7, #2]
 8004120:	041a      	lsls	r2, r3, #16
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	611a      	str	r2, [r3, #16]
}
 8004126:	bf00      	nop
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	0800eb64 	.word	0x0800eb64

08004134 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	460b      	mov	r3, r1
 800413e:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004140:	887b      	ldrh	r3, [r7, #2]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d004      	beq.n	8004150 <HAL_GPIO_TogglePin+0x1c>
 8004146:	887b      	ldrh	r3, [r7, #2]
 8004148:	0c1b      	lsrs	r3, r3, #16
 800414a:	041b      	lsls	r3, r3, #16
 800414c:	2b00      	cmp	r3, #0
 800414e:	d004      	beq.n	800415a <HAL_GPIO_TogglePin+0x26>
 8004150:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8004154:	480a      	ldr	r0, [pc, #40]	; (8004180 <HAL_GPIO_TogglePin+0x4c>)
 8004156:	f7fd ffb5 	bl	80020c4 <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004160:	887a      	ldrh	r2, [r7, #2]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	4013      	ands	r3, r2
 8004166:	041a      	lsls	r2, r3, #16
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	43d9      	mvns	r1, r3
 800416c:	887b      	ldrh	r3, [r7, #2]
 800416e:	400b      	ands	r3, r1
 8004170:	431a      	orrs	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	611a      	str	r2, [r3, #16]
}
 8004176:	bf00      	nop
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	0800eb64 	.word	0x0800eb64

08004184 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004188:	4b03      	ldr	r3, [pc, #12]	; (8004198 <HAL_PWR_EnableBkUpAccess+0x14>)
 800418a:	2201      	movs	r2, #1
 800418c:	601a      	str	r2, [r3, #0]
}
 800418e:	bf00      	nop
 8004190:	46bd      	mov	sp, r7
 8004192:	bc80      	pop	{r7}
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	420e0020 	.word	0x420e0020

0800419c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e35c      	b.n	8004868 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d01c      	beq.n	80041f0 <HAL_RCC_OscConfig+0x54>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d116      	bne.n	80041f0 <HAL_RCC_OscConfig+0x54>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d110      	bne.n	80041f0 <HAL_RCC_OscConfig+0x54>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0308 	and.w	r3, r3, #8
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10a      	bne.n	80041f0 <HAL_RCC_OscConfig+0x54>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0304 	and.w	r3, r3, #4
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d104      	bne.n	80041f0 <HAL_RCC_OscConfig+0x54>
 80041e6:	f240 1167 	movw	r1, #359	; 0x167
 80041ea:	48a5      	ldr	r0, [pc, #660]	; (8004480 <HAL_RCC_OscConfig+0x2e4>)
 80041ec:	f7fd ff6a 	bl	80020c4 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 809a 	beq.w	8004332 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00e      	beq.n	8004224 <HAL_RCC_OscConfig+0x88>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800420e:	d009      	beq.n	8004224 <HAL_RCC_OscConfig+0x88>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004218:	d004      	beq.n	8004224 <HAL_RCC_OscConfig+0x88>
 800421a:	f240 116d 	movw	r1, #365	; 0x16d
 800421e:	4898      	ldr	r0, [pc, #608]	; (8004480 <HAL_RCC_OscConfig+0x2e4>)
 8004220:	f7fd ff50 	bl	80020c4 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004224:	4b97      	ldr	r3, [pc, #604]	; (8004484 <HAL_RCC_OscConfig+0x2e8>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f003 030c 	and.w	r3, r3, #12
 800422c:	2b04      	cmp	r3, #4
 800422e:	d00c      	beq.n	800424a <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004230:	4b94      	ldr	r3, [pc, #592]	; (8004484 <HAL_RCC_OscConfig+0x2e8>)
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f003 030c 	and.w	r3, r3, #12
 8004238:	2b08      	cmp	r3, #8
 800423a:	d112      	bne.n	8004262 <HAL_RCC_OscConfig+0xc6>
 800423c:	4b91      	ldr	r3, [pc, #580]	; (8004484 <HAL_RCC_OscConfig+0x2e8>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004248:	d10b      	bne.n	8004262 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800424a:	4b8e      	ldr	r3, [pc, #568]	; (8004484 <HAL_RCC_OscConfig+0x2e8>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d06c      	beq.n	8004330 <HAL_RCC_OscConfig+0x194>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d168      	bne.n	8004330 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e302      	b.n	8004868 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800426a:	d106      	bne.n	800427a <HAL_RCC_OscConfig+0xde>
 800426c:	4b85      	ldr	r3, [pc, #532]	; (8004484 <HAL_RCC_OscConfig+0x2e8>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a84      	ldr	r2, [pc, #528]	; (8004484 <HAL_RCC_OscConfig+0x2e8>)
 8004272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	e02e      	b.n	80042d8 <HAL_RCC_OscConfig+0x13c>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10c      	bne.n	800429c <HAL_RCC_OscConfig+0x100>
 8004282:	4b80      	ldr	r3, [pc, #512]	; (8004484 <HAL_RCC_OscConfig+0x2e8>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a7f      	ldr	r2, [pc, #508]	; (8004484 <HAL_RCC_OscConfig+0x2e8>)
 8004288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800428c:	6013      	str	r3, [r2, #0]
 800428e:	4b7d      	ldr	r3, [pc, #500]	; (8004484 <HAL_RCC_OscConfig+0x2e8>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a7c      	ldr	r2, [pc, #496]	; (8004484 <HAL_RCC_OscConfig+0x2e8>)
 8004294:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004298:	6013      	str	r3, [r2, #0]
 800429a:	e01d      	b.n	80042d8 <HAL_RCC_OscConfig+0x13c>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042a4:	d10c      	bne.n	80042c0 <HAL_RCC_OscConfig+0x124>
 80042a6:	4b77      	ldr	r3, [pc, #476]	; (8004484 <HAL_RCC_OscConfig+0x2e8>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a76      	ldr	r2, [pc, #472]	; (8004484 <HAL_RCC_OscConfig+0x2e8>)
 80042ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042b0:	6013      	str	r3, [r2, #0]
 80042b2:	4b74      	ldr	r3, [pc, #464]	; (8004484 <HAL_RCC_OscConfig+0x2e8>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a73      	ldr	r2, [pc, #460]	; (8004484 <HAL_RCC_OscConfig+0x2e8>)
 80042b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042bc:	6013      	str	r3, [r2, #0]
 80042be:	e00b      	b.n	80042d8 <HAL_RCC_OscConfig+0x13c>
 80042c0:	4b70      	ldr	r3, [pc, #448]	; (8004484 <HAL_RCC_OscConfig+0x2e8>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a6f      	ldr	r2, [pc, #444]	; (8004484 <HAL_RCC_OscConfig+0x2e8>)
 80042c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ca:	6013      	str	r3, [r2, #0]
 80042cc:	4b6d      	ldr	r3, [pc, #436]	; (8004484 <HAL_RCC_OscConfig+0x2e8>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a6c      	ldr	r2, [pc, #432]	; (8004484 <HAL_RCC_OscConfig+0x2e8>)
 80042d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d013      	beq.n	8004308 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e0:	f7fe fbc0 	bl	8002a64 <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042e8:	f7fe fbbc 	bl	8002a64 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b64      	cmp	r3, #100	; 0x64
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e2b6      	b.n	8004868 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042fa:	4b62      	ldr	r3, [pc, #392]	; (8004484 <HAL_RCC_OscConfig+0x2e8>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0f0      	beq.n	80042e8 <HAL_RCC_OscConfig+0x14c>
 8004306:	e014      	b.n	8004332 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004308:	f7fe fbac 	bl	8002a64 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004310:	f7fe fba8 	bl	8002a64 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b64      	cmp	r3, #100	; 0x64
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e2a2      	b.n	8004868 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004322:	4b58      	ldr	r3, [pc, #352]	; (8004484 <HAL_RCC_OscConfig+0x2e8>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1f0      	bne.n	8004310 <HAL_RCC_OscConfig+0x174>
 800432e:	e000      	b.n	8004332 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d079      	beq.n	8004432 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d008      	beq.n	8004358 <HAL_RCC_OscConfig+0x1bc>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d004      	beq.n	8004358 <HAL_RCC_OscConfig+0x1bc>
 800434e:	f240 11a1 	movw	r1, #417	; 0x1a1
 8004352:	484b      	ldr	r0, [pc, #300]	; (8004480 <HAL_RCC_OscConfig+0x2e4>)
 8004354:	f7fd feb6 	bl	80020c4 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	2b1f      	cmp	r3, #31
 800435e:	d904      	bls.n	800436a <HAL_RCC_OscConfig+0x1ce>
 8004360:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8004364:	4846      	ldr	r0, [pc, #280]	; (8004480 <HAL_RCC_OscConfig+0x2e4>)
 8004366:	f7fd fead 	bl	80020c4 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800436a:	4b46      	ldr	r3, [pc, #280]	; (8004484 <HAL_RCC_OscConfig+0x2e8>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f003 030c 	and.w	r3, r3, #12
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00b      	beq.n	800438e <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004376:	4b43      	ldr	r3, [pc, #268]	; (8004484 <HAL_RCC_OscConfig+0x2e8>)
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f003 030c 	and.w	r3, r3, #12
 800437e:	2b08      	cmp	r3, #8
 8004380:	d11c      	bne.n	80043bc <HAL_RCC_OscConfig+0x220>
 8004382:	4b40      	ldr	r3, [pc, #256]	; (8004484 <HAL_RCC_OscConfig+0x2e8>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d116      	bne.n	80043bc <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800438e:	4b3d      	ldr	r3, [pc, #244]	; (8004484 <HAL_RCC_OscConfig+0x2e8>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d005      	beq.n	80043a6 <HAL_RCC_OscConfig+0x20a>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d001      	beq.n	80043a6 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e260      	b.n	8004868 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043a6:	4b37      	ldr	r3, [pc, #220]	; (8004484 <HAL_RCC_OscConfig+0x2e8>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	4933      	ldr	r1, [pc, #204]	; (8004484 <HAL_RCC_OscConfig+0x2e8>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ba:	e03a      	b.n	8004432 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d020      	beq.n	8004406 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043c4:	4b30      	ldr	r3, [pc, #192]	; (8004488 <HAL_RCC_OscConfig+0x2ec>)
 80043c6:	2201      	movs	r2, #1
 80043c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ca:	f7fe fb4b 	bl	8002a64 <HAL_GetTick>
 80043ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d0:	e008      	b.n	80043e4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043d2:	f7fe fb47 	bl	8002a64 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d901      	bls.n	80043e4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e241      	b.n	8004868 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e4:	4b27      	ldr	r3, [pc, #156]	; (8004484 <HAL_RCC_OscConfig+0x2e8>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0f0      	beq.n	80043d2 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043f0:	4b24      	ldr	r3, [pc, #144]	; (8004484 <HAL_RCC_OscConfig+0x2e8>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	4921      	ldr	r1, [pc, #132]	; (8004484 <HAL_RCC_OscConfig+0x2e8>)
 8004400:	4313      	orrs	r3, r2
 8004402:	600b      	str	r3, [r1, #0]
 8004404:	e015      	b.n	8004432 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004406:	4b20      	ldr	r3, [pc, #128]	; (8004488 <HAL_RCC_OscConfig+0x2ec>)
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440c:	f7fe fb2a 	bl	8002a64 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004414:	f7fe fb26 	bl	8002a64 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e220      	b.n	8004868 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004426:	4b17      	ldr	r3, [pc, #92]	; (8004484 <HAL_RCC_OscConfig+0x2e8>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f0      	bne.n	8004414 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0308 	and.w	r3, r3, #8
 800443a:	2b00      	cmp	r3, #0
 800443c:	d048      	beq.n	80044d0 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d008      	beq.n	8004458 <HAL_RCC_OscConfig+0x2bc>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d004      	beq.n	8004458 <HAL_RCC_OscConfig+0x2bc>
 800444e:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8004452:	480b      	ldr	r0, [pc, #44]	; (8004480 <HAL_RCC_OscConfig+0x2e4>)
 8004454:	f7fd fe36 	bl	80020c4 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d021      	beq.n	80044a4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004460:	4b0a      	ldr	r3, [pc, #40]	; (800448c <HAL_RCC_OscConfig+0x2f0>)
 8004462:	2201      	movs	r2, #1
 8004464:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004466:	f7fe fafd 	bl	8002a64 <HAL_GetTick>
 800446a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800446c:	e010      	b.n	8004490 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800446e:	f7fe faf9 	bl	8002a64 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d909      	bls.n	8004490 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	e1f3      	b.n	8004868 <HAL_RCC_OscConfig+0x6cc>
 8004480:	0800eba0 	.word	0x0800eba0
 8004484:	40021000 	.word	0x40021000
 8004488:	42420000 	.word	0x42420000
 800448c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004490:	4b67      	ldr	r3, [pc, #412]	; (8004630 <HAL_RCC_OscConfig+0x494>)
 8004492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0e8      	beq.n	800446e <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800449c:	2001      	movs	r0, #1
 800449e:	f000 fc0f 	bl	8004cc0 <RCC_Delay>
 80044a2:	e015      	b.n	80044d0 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044a4:	4b63      	ldr	r3, [pc, #396]	; (8004634 <HAL_RCC_OscConfig+0x498>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044aa:	f7fe fadb 	bl	8002a64 <HAL_GetTick>
 80044ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b0:	e008      	b.n	80044c4 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044b2:	f7fe fad7 	bl	8002a64 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e1d1      	b.n	8004868 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c4:	4b5a      	ldr	r3, [pc, #360]	; (8004630 <HAL_RCC_OscConfig+0x494>)
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1f0      	bne.n	80044b2 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 80c0 	beq.w	800465e <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044de:	2300      	movs	r3, #0
 80044e0:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00c      	beq.n	8004504 <HAL_RCC_OscConfig+0x368>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d008      	beq.n	8004504 <HAL_RCC_OscConfig+0x368>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	2b05      	cmp	r3, #5
 80044f8:	d004      	beq.n	8004504 <HAL_RCC_OscConfig+0x368>
 80044fa:	f240 2111 	movw	r1, #529	; 0x211
 80044fe:	484e      	ldr	r0, [pc, #312]	; (8004638 <HAL_RCC_OscConfig+0x49c>)
 8004500:	f7fd fde0 	bl	80020c4 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004504:	4b4a      	ldr	r3, [pc, #296]	; (8004630 <HAL_RCC_OscConfig+0x494>)
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10d      	bne.n	800452c <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004510:	4b47      	ldr	r3, [pc, #284]	; (8004630 <HAL_RCC_OscConfig+0x494>)
 8004512:	69db      	ldr	r3, [r3, #28]
 8004514:	4a46      	ldr	r2, [pc, #280]	; (8004630 <HAL_RCC_OscConfig+0x494>)
 8004516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800451a:	61d3      	str	r3, [r2, #28]
 800451c:	4b44      	ldr	r3, [pc, #272]	; (8004630 <HAL_RCC_OscConfig+0x494>)
 800451e:	69db      	ldr	r3, [r3, #28]
 8004520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004524:	60bb      	str	r3, [r7, #8]
 8004526:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004528:	2301      	movs	r3, #1
 800452a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800452c:	4b43      	ldr	r3, [pc, #268]	; (800463c <HAL_RCC_OscConfig+0x4a0>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004534:	2b00      	cmp	r3, #0
 8004536:	d118      	bne.n	800456a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004538:	4b40      	ldr	r3, [pc, #256]	; (800463c <HAL_RCC_OscConfig+0x4a0>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a3f      	ldr	r2, [pc, #252]	; (800463c <HAL_RCC_OscConfig+0x4a0>)
 800453e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004542:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004544:	f7fe fa8e 	bl	8002a64 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800454c:	f7fe fa8a 	bl	8002a64 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b64      	cmp	r3, #100	; 0x64
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e184      	b.n	8004868 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800455e:	4b37      	ldr	r3, [pc, #220]	; (800463c <HAL_RCC_OscConfig+0x4a0>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0f0      	beq.n	800454c <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d106      	bne.n	8004580 <HAL_RCC_OscConfig+0x3e4>
 8004572:	4b2f      	ldr	r3, [pc, #188]	; (8004630 <HAL_RCC_OscConfig+0x494>)
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	4a2e      	ldr	r2, [pc, #184]	; (8004630 <HAL_RCC_OscConfig+0x494>)
 8004578:	f043 0301 	orr.w	r3, r3, #1
 800457c:	6213      	str	r3, [r2, #32]
 800457e:	e02d      	b.n	80045dc <HAL_RCC_OscConfig+0x440>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10c      	bne.n	80045a2 <HAL_RCC_OscConfig+0x406>
 8004588:	4b29      	ldr	r3, [pc, #164]	; (8004630 <HAL_RCC_OscConfig+0x494>)
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	4a28      	ldr	r2, [pc, #160]	; (8004630 <HAL_RCC_OscConfig+0x494>)
 800458e:	f023 0301 	bic.w	r3, r3, #1
 8004592:	6213      	str	r3, [r2, #32]
 8004594:	4b26      	ldr	r3, [pc, #152]	; (8004630 <HAL_RCC_OscConfig+0x494>)
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	4a25      	ldr	r2, [pc, #148]	; (8004630 <HAL_RCC_OscConfig+0x494>)
 800459a:	f023 0304 	bic.w	r3, r3, #4
 800459e:	6213      	str	r3, [r2, #32]
 80045a0:	e01c      	b.n	80045dc <HAL_RCC_OscConfig+0x440>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	2b05      	cmp	r3, #5
 80045a8:	d10c      	bne.n	80045c4 <HAL_RCC_OscConfig+0x428>
 80045aa:	4b21      	ldr	r3, [pc, #132]	; (8004630 <HAL_RCC_OscConfig+0x494>)
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	4a20      	ldr	r2, [pc, #128]	; (8004630 <HAL_RCC_OscConfig+0x494>)
 80045b0:	f043 0304 	orr.w	r3, r3, #4
 80045b4:	6213      	str	r3, [r2, #32]
 80045b6:	4b1e      	ldr	r3, [pc, #120]	; (8004630 <HAL_RCC_OscConfig+0x494>)
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	4a1d      	ldr	r2, [pc, #116]	; (8004630 <HAL_RCC_OscConfig+0x494>)
 80045bc:	f043 0301 	orr.w	r3, r3, #1
 80045c0:	6213      	str	r3, [r2, #32]
 80045c2:	e00b      	b.n	80045dc <HAL_RCC_OscConfig+0x440>
 80045c4:	4b1a      	ldr	r3, [pc, #104]	; (8004630 <HAL_RCC_OscConfig+0x494>)
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	4a19      	ldr	r2, [pc, #100]	; (8004630 <HAL_RCC_OscConfig+0x494>)
 80045ca:	f023 0301 	bic.w	r3, r3, #1
 80045ce:	6213      	str	r3, [r2, #32]
 80045d0:	4b17      	ldr	r3, [pc, #92]	; (8004630 <HAL_RCC_OscConfig+0x494>)
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	4a16      	ldr	r2, [pc, #88]	; (8004630 <HAL_RCC_OscConfig+0x494>)
 80045d6:	f023 0304 	bic.w	r3, r3, #4
 80045da:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d015      	beq.n	8004610 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045e4:	f7fe fa3e 	bl	8002a64 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ea:	e00a      	b.n	8004602 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ec:	f7fe fa3a 	bl	8002a64 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e132      	b.n	8004868 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004602:	4b0b      	ldr	r3, [pc, #44]	; (8004630 <HAL_RCC_OscConfig+0x494>)
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d0ee      	beq.n	80045ec <HAL_RCC_OscConfig+0x450>
 800460e:	e01d      	b.n	800464c <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004610:	f7fe fa28 	bl	8002a64 <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004616:	e013      	b.n	8004640 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004618:	f7fe fa24 	bl	8002a64 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	f241 3288 	movw	r2, #5000	; 0x1388
 8004626:	4293      	cmp	r3, r2
 8004628:	d90a      	bls.n	8004640 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e11c      	b.n	8004868 <HAL_RCC_OscConfig+0x6cc>
 800462e:	bf00      	nop
 8004630:	40021000 	.word	0x40021000
 8004634:	42420480 	.word	0x42420480
 8004638:	0800eba0 	.word	0x0800eba0
 800463c:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004640:	4b8b      	ldr	r3, [pc, #556]	; (8004870 <HAL_RCC_OscConfig+0x6d4>)
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1e5      	bne.n	8004618 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800464c:	7dfb      	ldrb	r3, [r7, #23]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d105      	bne.n	800465e <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004652:	4b87      	ldr	r3, [pc, #540]	; (8004870 <HAL_RCC_OscConfig+0x6d4>)
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	4a86      	ldr	r2, [pc, #536]	; (8004870 <HAL_RCC_OscConfig+0x6d4>)
 8004658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800465c:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00c      	beq.n	8004680 <HAL_RCC_OscConfig+0x4e4>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	69db      	ldr	r3, [r3, #28]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d008      	beq.n	8004680 <HAL_RCC_OscConfig+0x4e4>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	2b02      	cmp	r3, #2
 8004674:	d004      	beq.n	8004680 <HAL_RCC_OscConfig+0x4e4>
 8004676:	f240 21af 	movw	r1, #687	; 0x2af
 800467a:	487e      	ldr	r0, [pc, #504]	; (8004874 <HAL_RCC_OscConfig+0x6d8>)
 800467c:	f7fd fd22 	bl	80020c4 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	69db      	ldr	r3, [r3, #28]
 8004684:	2b00      	cmp	r3, #0
 8004686:	f000 80ee 	beq.w	8004866 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800468a:	4b79      	ldr	r3, [pc, #484]	; (8004870 <HAL_RCC_OscConfig+0x6d4>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f003 030c 	and.w	r3, r3, #12
 8004692:	2b08      	cmp	r3, #8
 8004694:	f000 80ce 	beq.w	8004834 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	2b02      	cmp	r3, #2
 800469e:	f040 80b2 	bne.w	8004806 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d009      	beq.n	80046be <HAL_RCC_OscConfig+0x522>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b2:	d004      	beq.n	80046be <HAL_RCC_OscConfig+0x522>
 80046b4:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 80046b8:	486e      	ldr	r0, [pc, #440]	; (8004874 <HAL_RCC_OscConfig+0x6d8>)
 80046ba:	f7fd fd03 	bl	80020c4 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d04a      	beq.n	800475c <HAL_RCC_OscConfig+0x5c0>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046ce:	d045      	beq.n	800475c <HAL_RCC_OscConfig+0x5c0>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80046d8:	d040      	beq.n	800475c <HAL_RCC_OscConfig+0x5c0>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80046e2:	d03b      	beq.n	800475c <HAL_RCC_OscConfig+0x5c0>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046ec:	d036      	beq.n	800475c <HAL_RCC_OscConfig+0x5c0>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80046f6:	d031      	beq.n	800475c <HAL_RCC_OscConfig+0x5c0>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004700:	d02c      	beq.n	800475c <HAL_RCC_OscConfig+0x5c0>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800470a:	d027      	beq.n	800475c <HAL_RCC_OscConfig+0x5c0>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004714:	d022      	beq.n	800475c <HAL_RCC_OscConfig+0x5c0>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800471e:	d01d      	beq.n	800475c <HAL_RCC_OscConfig+0x5c0>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004728:	d018      	beq.n	800475c <HAL_RCC_OscConfig+0x5c0>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004732:	d013      	beq.n	800475c <HAL_RCC_OscConfig+0x5c0>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004738:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800473c:	d00e      	beq.n	800475c <HAL_RCC_OscConfig+0x5c0>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004742:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8004746:	d009      	beq.n	800475c <HAL_RCC_OscConfig+0x5c0>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8004750:	d004      	beq.n	800475c <HAL_RCC_OscConfig+0x5c0>
 8004752:	f240 21b9 	movw	r1, #697	; 0x2b9
 8004756:	4847      	ldr	r0, [pc, #284]	; (8004874 <HAL_RCC_OscConfig+0x6d8>)
 8004758:	f7fd fcb4 	bl	80020c4 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800475c:	4b46      	ldr	r3, [pc, #280]	; (8004878 <HAL_RCC_OscConfig+0x6dc>)
 800475e:	2200      	movs	r2, #0
 8004760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004762:	f7fe f97f 	bl	8002a64 <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004768:	e008      	b.n	800477c <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800476a:	f7fe f97b 	bl	8002a64 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e075      	b.n	8004868 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800477c:	4b3c      	ldr	r3, [pc, #240]	; (8004870 <HAL_RCC_OscConfig+0x6d4>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1f0      	bne.n	800476a <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a1b      	ldr	r3, [r3, #32]
 800478c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004790:	d116      	bne.n	80047c0 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d009      	beq.n	80047ae <HAL_RCC_OscConfig+0x612>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047a2:	d004      	beq.n	80047ae <HAL_RCC_OscConfig+0x612>
 80047a4:	f240 21cf 	movw	r1, #719	; 0x2cf
 80047a8:	4832      	ldr	r0, [pc, #200]	; (8004874 <HAL_RCC_OscConfig+0x6d8>)
 80047aa:	f7fd fc8b 	bl	80020c4 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80047ae:	4b30      	ldr	r3, [pc, #192]	; (8004870 <HAL_RCC_OscConfig+0x6d4>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	492d      	ldr	r1, [pc, #180]	; (8004870 <HAL_RCC_OscConfig+0x6d4>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047c0:	4b2b      	ldr	r3, [pc, #172]	; (8004870 <HAL_RCC_OscConfig+0x6d4>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a19      	ldr	r1, [r3, #32]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	430b      	orrs	r3, r1
 80047d2:	4927      	ldr	r1, [pc, #156]	; (8004870 <HAL_RCC_OscConfig+0x6d4>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047d8:	4b27      	ldr	r3, [pc, #156]	; (8004878 <HAL_RCC_OscConfig+0x6dc>)
 80047da:	2201      	movs	r2, #1
 80047dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047de:	f7fe f941 	bl	8002a64 <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047e4:	e008      	b.n	80047f8 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047e6:	f7fe f93d 	bl	8002a64 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e037      	b.n	8004868 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047f8:	4b1d      	ldr	r3, [pc, #116]	; (8004870 <HAL_RCC_OscConfig+0x6d4>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0f0      	beq.n	80047e6 <HAL_RCC_OscConfig+0x64a>
 8004804:	e02f      	b.n	8004866 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004806:	4b1c      	ldr	r3, [pc, #112]	; (8004878 <HAL_RCC_OscConfig+0x6dc>)
 8004808:	2200      	movs	r2, #0
 800480a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480c:	f7fe f92a 	bl	8002a64 <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004814:	f7fe f926 	bl	8002a64 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e020      	b.n	8004868 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004826:	4b12      	ldr	r3, [pc, #72]	; (8004870 <HAL_RCC_OscConfig+0x6d4>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1f0      	bne.n	8004814 <HAL_RCC_OscConfig+0x678>
 8004832:	e018      	b.n	8004866 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d101      	bne.n	8004840 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e013      	b.n	8004868 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004840:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <HAL_RCC_OscConfig+0x6d4>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	429a      	cmp	r2, r3
 8004852:	d106      	bne.n	8004862 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800485e:	429a      	cmp	r2, r3
 8004860:	d001      	beq.n	8004866 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e000      	b.n	8004868 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3718      	adds	r7, #24
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	40021000 	.word	0x40021000
 8004874:	0800eba0 	.word	0x0800eba0
 8004878:	42420060 	.word	0x42420060

0800487c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e176      	b.n	8004b7e <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	d116      	bne.n	80048ca <HAL_RCC_ClockConfig+0x4e>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d110      	bne.n	80048ca <HAL_RCC_ClockConfig+0x4e>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0304 	and.w	r3, r3, #4
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10a      	bne.n	80048ca <HAL_RCC_ClockConfig+0x4e>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0308 	and.w	r3, r3, #8
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d104      	bne.n	80048ca <HAL_RCC_ClockConfig+0x4e>
 80048c0:	f44f 714e 	mov.w	r1, #824	; 0x338
 80048c4:	4874      	ldr	r0, [pc, #464]	; (8004a98 <HAL_RCC_ClockConfig+0x21c>)
 80048c6:	f7fd fbfd 	bl	80020c4 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00a      	beq.n	80048e6 <HAL_RCC_ClockConfig+0x6a>
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d007      	beq.n	80048e6 <HAL_RCC_ClockConfig+0x6a>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d004      	beq.n	80048e6 <HAL_RCC_ClockConfig+0x6a>
 80048dc:	f240 3139 	movw	r1, #825	; 0x339
 80048e0:	486d      	ldr	r0, [pc, #436]	; (8004a98 <HAL_RCC_ClockConfig+0x21c>)
 80048e2:	f7fd fbef 	bl	80020c4 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048e6:	4b6d      	ldr	r3, [pc, #436]	; (8004a9c <HAL_RCC_ClockConfig+0x220>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0307 	and.w	r3, r3, #7
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d910      	bls.n	8004916 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f4:	4b69      	ldr	r3, [pc, #420]	; (8004a9c <HAL_RCC_ClockConfig+0x220>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f023 0207 	bic.w	r2, r3, #7
 80048fc:	4967      	ldr	r1, [pc, #412]	; (8004a9c <HAL_RCC_ClockConfig+0x220>)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	4313      	orrs	r3, r2
 8004902:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004904:	4b65      	ldr	r3, [pc, #404]	; (8004a9c <HAL_RCC_ClockConfig+0x220>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0307 	and.w	r3, r3, #7
 800490c:	683a      	ldr	r2, [r7, #0]
 800490e:	429a      	cmp	r2, r3
 8004910:	d001      	beq.n	8004916 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e133      	b.n	8004b7e <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d049      	beq.n	80049b6 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0304 	and.w	r3, r3, #4
 800492a:	2b00      	cmp	r3, #0
 800492c:	d005      	beq.n	800493a <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800492e:	4b5c      	ldr	r3, [pc, #368]	; (8004aa0 <HAL_RCC_ClockConfig+0x224>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	4a5b      	ldr	r2, [pc, #364]	; (8004aa0 <HAL_RCC_ClockConfig+0x224>)
 8004934:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004938:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 0308 	and.w	r3, r3, #8
 8004942:	2b00      	cmp	r3, #0
 8004944:	d005      	beq.n	8004952 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004946:	4b56      	ldr	r3, [pc, #344]	; (8004aa0 <HAL_RCC_ClockConfig+0x224>)
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	4a55      	ldr	r2, [pc, #340]	; (8004aa0 <HAL_RCC_ClockConfig+0x224>)
 800494c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004950:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d024      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x128>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	2b80      	cmp	r3, #128	; 0x80
 8004960:	d020      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x128>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	2b90      	cmp	r3, #144	; 0x90
 8004968:	d01c      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x128>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	2ba0      	cmp	r3, #160	; 0xa0
 8004970:	d018      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x128>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	2bb0      	cmp	r3, #176	; 0xb0
 8004978:	d014      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x128>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	2bc0      	cmp	r3, #192	; 0xc0
 8004980:	d010      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x128>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	2bd0      	cmp	r3, #208	; 0xd0
 8004988:	d00c      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x128>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	2be0      	cmp	r3, #224	; 0xe0
 8004990:	d008      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x128>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	2bf0      	cmp	r3, #240	; 0xf0
 8004998:	d004      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x128>
 800499a:	f240 315f 	movw	r1, #863	; 0x35f
 800499e:	483e      	ldr	r0, [pc, #248]	; (8004a98 <HAL_RCC_ClockConfig+0x21c>)
 80049a0:	f7fd fb90 	bl	80020c4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049a4:	4b3e      	ldr	r3, [pc, #248]	; (8004aa0 <HAL_RCC_ClockConfig+0x224>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	493b      	ldr	r1, [pc, #236]	; (8004aa0 <HAL_RCC_ClockConfig+0x224>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d051      	beq.n	8004a66 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00c      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x168>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d008      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x168>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d004      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x168>
 80049da:	f240 3166 	movw	r1, #870	; 0x366
 80049de:	482e      	ldr	r0, [pc, #184]	; (8004a98 <HAL_RCC_ClockConfig+0x21c>)
 80049e0:	f7fd fb70 	bl	80020c4 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d107      	bne.n	80049fc <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ec:	4b2c      	ldr	r3, [pc, #176]	; (8004aa0 <HAL_RCC_ClockConfig+0x224>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d115      	bne.n	8004a24 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e0c0      	b.n	8004b7e <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d107      	bne.n	8004a14 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a04:	4b26      	ldr	r3, [pc, #152]	; (8004aa0 <HAL_RCC_ClockConfig+0x224>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d109      	bne.n	8004a24 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e0b4      	b.n	8004b7e <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a14:	4b22      	ldr	r3, [pc, #136]	; (8004aa0 <HAL_RCC_ClockConfig+0x224>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d101      	bne.n	8004a24 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e0ac      	b.n	8004b7e <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a24:	4b1e      	ldr	r3, [pc, #120]	; (8004aa0 <HAL_RCC_ClockConfig+0x224>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f023 0203 	bic.w	r2, r3, #3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	491b      	ldr	r1, [pc, #108]	; (8004aa0 <HAL_RCC_ClockConfig+0x224>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a36:	f7fe f815 	bl	8002a64 <HAL_GetTick>
 8004a3a:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a3c:	e00a      	b.n	8004a54 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a3e:	f7fe f811 	bl	8002a64 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d901      	bls.n	8004a54 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e094      	b.n	8004b7e <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a54:	4b12      	ldr	r3, [pc, #72]	; (8004aa0 <HAL_RCC_ClockConfig+0x224>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f003 020c 	and.w	r2, r3, #12
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d1eb      	bne.n	8004a3e <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a66:	4b0d      	ldr	r3, [pc, #52]	; (8004a9c <HAL_RCC_ClockConfig+0x220>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0307 	and.w	r3, r3, #7
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d217      	bcs.n	8004aa4 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a74:	4b09      	ldr	r3, [pc, #36]	; (8004a9c <HAL_RCC_ClockConfig+0x220>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f023 0207 	bic.w	r2, r3, #7
 8004a7c:	4907      	ldr	r1, [pc, #28]	; (8004a9c <HAL_RCC_ClockConfig+0x220>)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a84:	4b05      	ldr	r3, [pc, #20]	; (8004a9c <HAL_RCC_ClockConfig+0x220>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d008      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e073      	b.n	8004b7e <HAL_RCC_ClockConfig+0x302>
 8004a96:	bf00      	nop
 8004a98:	0800eba0 	.word	0x0800eba0
 8004a9c:	40022000 	.word	0x40022000
 8004aa0:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d025      	beq.n	8004afc <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d018      	beq.n	8004aea <HAL_RCC_ClockConfig+0x26e>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ac0:	d013      	beq.n	8004aea <HAL_RCC_ClockConfig+0x26e>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004aca:	d00e      	beq.n	8004aea <HAL_RCC_ClockConfig+0x26e>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004ad4:	d009      	beq.n	8004aea <HAL_RCC_ClockConfig+0x26e>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ade:	d004      	beq.n	8004aea <HAL_RCC_ClockConfig+0x26e>
 8004ae0:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8004ae4:	4828      	ldr	r0, [pc, #160]	; (8004b88 <HAL_RCC_ClockConfig+0x30c>)
 8004ae6:	f7fd faed 	bl	80020c4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004aea:	4b28      	ldr	r3, [pc, #160]	; (8004b8c <HAL_RCC_ClockConfig+0x310>)
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	4925      	ldr	r1, [pc, #148]	; (8004b8c <HAL_RCC_ClockConfig+0x310>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0308 	and.w	r3, r3, #8
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d026      	beq.n	8004b56 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d018      	beq.n	8004b42 <HAL_RCC_ClockConfig+0x2c6>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b18:	d013      	beq.n	8004b42 <HAL_RCC_ClockConfig+0x2c6>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004b22:	d00e      	beq.n	8004b42 <HAL_RCC_ClockConfig+0x2c6>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004b2c:	d009      	beq.n	8004b42 <HAL_RCC_ClockConfig+0x2c6>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b36:	d004      	beq.n	8004b42 <HAL_RCC_ClockConfig+0x2c6>
 8004b38:	f240 31ab 	movw	r1, #939	; 0x3ab
 8004b3c:	4812      	ldr	r0, [pc, #72]	; (8004b88 <HAL_RCC_ClockConfig+0x30c>)
 8004b3e:	f7fd fac1 	bl	80020c4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b42:	4b12      	ldr	r3, [pc, #72]	; (8004b8c <HAL_RCC_ClockConfig+0x310>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	490e      	ldr	r1, [pc, #56]	; (8004b8c <HAL_RCC_ClockConfig+0x310>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b56:	f000 f821 	bl	8004b9c <HAL_RCC_GetSysClockFreq>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	4b0b      	ldr	r3, [pc, #44]	; (8004b8c <HAL_RCC_ClockConfig+0x310>)
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	091b      	lsrs	r3, r3, #4
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	490a      	ldr	r1, [pc, #40]	; (8004b90 <HAL_RCC_ClockConfig+0x314>)
 8004b68:	5ccb      	ldrb	r3, [r1, r3]
 8004b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b6e:	4a09      	ldr	r2, [pc, #36]	; (8004b94 <HAL_RCC_ClockConfig+0x318>)
 8004b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b72:	4b09      	ldr	r3, [pc, #36]	; (8004b98 <HAL_RCC_ClockConfig+0x31c>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fd ff32 	bl	80029e0 <HAL_InitTick>

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	0800eba0 	.word	0x0800eba0
 8004b8c:	40021000 	.word	0x40021000
 8004b90:	0800f5c8 	.word	0x0800f5c8
 8004b94:	20000000 	.word	0x20000000
 8004b98:	20000004 	.word	0x20000004

08004b9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b9c:	b490      	push	{r4, r7}
 8004b9e:	b08a      	sub	sp, #40	; 0x28
 8004ba0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004ba2:	4b2a      	ldr	r3, [pc, #168]	; (8004c4c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004ba4:	1d3c      	adds	r4, r7, #4
 8004ba6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ba8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004bac:	f240 2301 	movw	r3, #513	; 0x201
 8004bb0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	61fb      	str	r3, [r7, #28]
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	61bb      	str	r3, [r7, #24]
 8004bba:	2300      	movs	r3, #0
 8004bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004bc6:	4b22      	ldr	r3, [pc, #136]	; (8004c50 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	f003 030c 	and.w	r3, r3, #12
 8004bd2:	2b04      	cmp	r3, #4
 8004bd4:	d002      	beq.n	8004bdc <HAL_RCC_GetSysClockFreq+0x40>
 8004bd6:	2b08      	cmp	r3, #8
 8004bd8:	d003      	beq.n	8004be2 <HAL_RCC_GetSysClockFreq+0x46>
 8004bda:	e02d      	b.n	8004c38 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004bdc:	4b1d      	ldr	r3, [pc, #116]	; (8004c54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bde:	623b      	str	r3, [r7, #32]
      break;
 8004be0:	e02d      	b.n	8004c3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	0c9b      	lsrs	r3, r3, #18
 8004be6:	f003 030f 	and.w	r3, r3, #15
 8004bea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004bee:	4413      	add	r3, r2
 8004bf0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004bf4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d013      	beq.n	8004c28 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c00:	4b13      	ldr	r3, [pc, #76]	; (8004c50 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	0c5b      	lsrs	r3, r3, #17
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004c0e:	4413      	add	r3, r2
 8004c10:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004c14:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	4a0e      	ldr	r2, [pc, #56]	; (8004c54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c1a:	fb02 f203 	mul.w	r2, r2, r3
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c24:	627b      	str	r3, [r7, #36]	; 0x24
 8004c26:	e004      	b.n	8004c32 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	4a0b      	ldr	r2, [pc, #44]	; (8004c58 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c2c:	fb02 f303 	mul.w	r3, r2, r3
 8004c30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	623b      	str	r3, [r7, #32]
      break;
 8004c36:	e002      	b.n	8004c3e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c38:	4b06      	ldr	r3, [pc, #24]	; (8004c54 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c3a:	623b      	str	r3, [r7, #32]
      break;
 8004c3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c3e:	6a3b      	ldr	r3, [r7, #32]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3728      	adds	r7, #40	; 0x28
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bc90      	pop	{r4, r7}
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	0800ebd8 	.word	0x0800ebd8
 8004c50:	40021000 	.word	0x40021000
 8004c54:	007a1200 	.word	0x007a1200
 8004c58:	003d0900 	.word	0x003d0900

08004c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c60:	4b02      	ldr	r3, [pc, #8]	; (8004c6c <HAL_RCC_GetHCLKFreq+0x10>)
 8004c62:	681b      	ldr	r3, [r3, #0]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bc80      	pop	{r7}
 8004c6a:	4770      	bx	lr
 8004c6c:	20000000 	.word	0x20000000

08004c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c74:	f7ff fff2 	bl	8004c5c <HAL_RCC_GetHCLKFreq>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	4b05      	ldr	r3, [pc, #20]	; (8004c90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	0a1b      	lsrs	r3, r3, #8
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	4903      	ldr	r1, [pc, #12]	; (8004c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c86:	5ccb      	ldrb	r3, [r1, r3]
 8004c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	40021000 	.word	0x40021000
 8004c94:	0800f5d8 	.word	0x0800f5d8

08004c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c9c:	f7ff ffde 	bl	8004c5c <HAL_RCC_GetHCLKFreq>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	4b05      	ldr	r3, [pc, #20]	; (8004cb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	0adb      	lsrs	r3, r3, #11
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	4903      	ldr	r1, [pc, #12]	; (8004cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cae:	5ccb      	ldrb	r3, [r1, r3]
 8004cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	40021000 	.word	0x40021000
 8004cbc:	0800f5d8 	.word	0x0800f5d8

08004cc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004cc8:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <RCC_Delay+0x34>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a0a      	ldr	r2, [pc, #40]	; (8004cf8 <RCC_Delay+0x38>)
 8004cce:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd2:	0a5b      	lsrs	r3, r3, #9
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	fb02 f303 	mul.w	r3, r2, r3
 8004cda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004cdc:	bf00      	nop
  }
  while (Delay --);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	1e5a      	subs	r2, r3, #1
 8004ce2:	60fa      	str	r2, [r7, #12]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1f9      	bne.n	8004cdc <RCC_Delay+0x1c>
}
 8004ce8:	bf00      	nop
 8004cea:	bf00      	nop
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bc80      	pop	{r7}
 8004cf2:	4770      	bx	lr
 8004cf4:	20000000 	.word	0x20000000
 8004cf8:	10624dd3 	.word	0x10624dd3

08004cfc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004d04:	2300      	movs	r3, #0
 8004d06:	613b      	str	r3, [r7, #16]
 8004d08:	2300      	movs	r3, #0
 8004d0a:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d11b      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d115      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0304 	and.w	r3, r3, #4
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10f      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0308 	and.w	r3, r3, #8
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d109      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0310 	and.w	r3, r3, #16
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d103      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004d48:	216c      	movs	r1, #108	; 0x6c
 8004d4a:	4873      	ldr	r0, [pc, #460]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004d4c:	f7fd f9ba 	bl	80020c4 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f000 8095 	beq.w	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    FlagStatus pwrclkchanged = RESET;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	75fb      	strb	r3, [r7, #23]

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d012      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d72:	d00d      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d7c:	d008      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d86:	d003      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004d88:	2174      	movs	r1, #116	; 0x74
 8004d8a:	4863      	ldr	r0, [pc, #396]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004d8c:	f7fd f99a 	bl	80020c4 <assert_failed>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d90:	4b62      	ldr	r3, [pc, #392]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004d92:	69db      	ldr	r3, [r3, #28]
 8004d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d10d      	bne.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d9c:	4b5f      	ldr	r3, [pc, #380]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004d9e:	69db      	ldr	r3, [r3, #28]
 8004da0:	4a5e      	ldr	r2, [pc, #376]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da6:	61d3      	str	r3, [r2, #28]
 8004da8:	4b5c      	ldr	r3, [pc, #368]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004daa:	69db      	ldr	r3, [r3, #28]
 8004dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db0:	60bb      	str	r3, [r7, #8]
 8004db2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004db4:	2301      	movs	r3, #1
 8004db6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db8:	4b59      	ldr	r3, [pc, #356]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d118      	bne.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dc4:	4b56      	ldr	r3, [pc, #344]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a55      	ldr	r2, [pc, #340]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dd0:	f7fd fe48 	bl	8002a64 <HAL_GetTick>
 8004dd4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dd6:	e008      	b.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0xee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dd8:	f7fd fe44 	bl	8002a64 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b64      	cmp	r3, #100	; 0x64
 8004de4:	d901      	bls.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0xee>
        {
          return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e092      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x214>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dea:	4b4d      	ldr	r3, [pc, #308]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d0f0      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004df6:	4b49      	ldr	r3, [pc, #292]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dfe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d02e      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d027      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e14:	4b41      	ldr	r3, [pc, #260]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e1c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e1e:	4b41      	ldr	r3, [pc, #260]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004e20:	2201      	movs	r2, #1
 8004e22:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e24:	4b3f      	ldr	r3, [pc, #252]	; (8004f24 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e2a:	4a3c      	ldr	r2, [pc, #240]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d014      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e3a:	f7fd fe13 	bl	8002a64 <HAL_GetTick>
 8004e3e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e40:	e00a      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x15c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e42:	f7fd fe0f 	bl	8002a64 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d901      	bls.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          {
            return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e05b      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x214>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e58:	4b30      	ldr	r3, [pc, #192]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d0ee      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x146>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e64:	4b2d      	ldr	r3, [pc, #180]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	492a      	ldr	r1, [pc, #168]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e76:	7dfb      	ldrb	r3, [r7, #23]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d105      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e7c:	4b27      	ldr	r3, [pc, #156]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004e7e:	69db      	ldr	r3, [r3, #28]
 8004e80:	4a26      	ldr	r2, [pc, #152]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004e82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e86:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d01f      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d012      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ea4:	d00d      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eae:	d008      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004eb8:	d003      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8004eba:	21b9      	movs	r1, #185	; 0xb9
 8004ebc:	4816      	ldr	r0, [pc, #88]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004ebe:	f7fd f901 	bl	80020c4 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ec2:	4b16      	ldr	r3, [pc, #88]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	4913      	ldr	r1, [pc, #76]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0310 	and.w	r3, r3, #16
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d016      	beq.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ee8:	d008      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d004      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004ef2:	f240 1115 	movw	r1, #277	; 0x115
 8004ef6:	4808      	ldr	r0, [pc, #32]	; (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004ef8:	f7fd f8e4 	bl	80020c4 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004efc:	4b07      	ldr	r3, [pc, #28]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	4904      	ldr	r1, [pc, #16]	; (8004f1c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3718      	adds	r7, #24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	0800ebe8 	.word	0x0800ebe8
 8004f1c:	40021000 	.word	0x40021000
 8004f20:	40007000 	.word	0x40007000
 8004f24:	42420440 	.word	0x42420440

08004f28 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004f28:	b590      	push	{r4, r7, lr}
 8004f2a:	b08d      	sub	sp, #52	; 0x34
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004f30:	4b7a      	ldr	r3, [pc, #488]	; (800511c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>)
 8004f32:	f107 040c 	add.w	r4, r7, #12
 8004f36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004f3c:	f240 2301 	movw	r3, #513	; 0x201
 8004f40:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	627b      	str	r3, [r7, #36]	; 0x24
 8004f46:	2300      	movs	r3, #0
 8004f48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	61fb      	str	r3, [r7, #28]
 8004f52:	2300      	movs	r3, #0
 8004f54:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d118      	bne.n	8004f92 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d113      	bne.n	8004f92 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f003 0304 	and.w	r3, r3, #4
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10e      	bne.n	8004f92 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f003 0308 	and.w	r3, r3, #8
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d109      	bne.n	8004f92 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f003 0310 	and.w	r3, r3, #16
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d104      	bne.n	8004f92 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004f88:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8004f8c:	4864      	ldr	r0, [pc, #400]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>)
 8004f8e:	f7fd f899 	bl	80020c4 <assert_failed>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	3b01      	subs	r3, #1
 8004f96:	2b0f      	cmp	r3, #15
 8004f98:	f200 80b6 	bhi.w	8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8004f9c:	a201      	add	r2, pc, #4	; (adr r2, 8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>)
 8004f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa2:	bf00      	nop
 8004fa4:	08005087 	.word	0x08005087
 8004fa8:	080050ed 	.word	0x080050ed
 8004fac:	08005109 	.word	0x08005109
 8004fb0:	08005077 	.word	0x08005077
 8004fb4:	08005109 	.word	0x08005109
 8004fb8:	08005109 	.word	0x08005109
 8004fbc:	08005109 	.word	0x08005109
 8004fc0:	0800507f 	.word	0x0800507f
 8004fc4:	08005109 	.word	0x08005109
 8004fc8:	08005109 	.word	0x08005109
 8004fcc:	08005109 	.word	0x08005109
 8004fd0:	08005109 	.word	0x08005109
 8004fd4:	08005109 	.word	0x08005109
 8004fd8:	08005109 	.word	0x08005109
 8004fdc:	08005109 	.word	0x08005109
 8004fe0:	08004fe5 	.word	0x08004fe5
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8004fe4:	4b4f      	ldr	r3, [pc, #316]	; (8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004fea:	4b4e      	ldr	r3, [pc, #312]	; (8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f000 808a 	beq.w	800510c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	0c9b      	lsrs	r3, r3, #18
 8004ffc:	f003 030f 	and.w	r3, r3, #15
 8005000:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005004:	4413      	add	r3, r2
 8005006:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800500a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d018      	beq.n	8005048 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005016:	4b43      	ldr	r3, [pc, #268]	; (8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	0c5b      	lsrs	r3, r3, #17
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005024:	4413      	add	r3, r2
 8005026:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800502a:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00d      	beq.n	8005052 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005036:	4a3c      	ldr	r2, [pc, #240]	; (8005128 <HAL_RCCEx_GetPeriphCLKFreq+0x200>)
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	fbb2 f2f3 	udiv	r2, r2, r3
 800503e:	6a3b      	ldr	r3, [r7, #32]
 8005040:	fb02 f303 	mul.w	r3, r2, r3
 8005044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005046:	e004      	b.n	8005052 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005048:	6a3b      	ldr	r3, [r7, #32]
 800504a:	4a38      	ldr	r2, [pc, #224]	; (800512c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800504c:	fb02 f303 	mul.w	r3, r2, r3
 8005050:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005052:	4b34      	ldr	r3, [pc, #208]	; (8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800505a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800505e:	d102      	bne.n	8005066 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8005060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005062:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8005064:	e052      	b.n	800510c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          frequency = (pllclk * 2) / 3;
 8005066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005068:	005b      	lsls	r3, r3, #1
 800506a:	4a31      	ldr	r2, [pc, #196]	; (8005130 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 800506c:	fba2 2303 	umull	r2, r3, r2, r3
 8005070:	085b      	lsrs	r3, r3, #1
 8005072:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005074:	e04a      	b.n	800510c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8005076:	f7ff fd91 	bl	8004b9c <HAL_RCC_GetSysClockFreq>
 800507a:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800507c:	e049      	b.n	8005112 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800507e:	f7ff fd8d 	bl	8004b9c <HAL_RCC_GetSysClockFreq>
 8005082:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8005084:	e045      	b.n	8005112 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8005086:	4b27      	ldr	r3, [pc, #156]	; (8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005096:	d108      	bne.n	80050aa <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d003      	beq.n	80050aa <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        frequency = LSE_VALUE;
 80050a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80050a8:	e01f      	b.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050b4:	d109      	bne.n	80050ca <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80050b6:	4b1b      	ldr	r3, [pc, #108]	; (8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 80050b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
      {
        frequency = LSI_VALUE;
 80050c2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80050c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80050c8:	e00f      	b.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050d4:	d11c      	bne.n	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 80050d6:	4b13      	ldr	r3, [pc, #76]	; (8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d016      	beq.n	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
      {
        frequency = HSE_VALUE / 128U;
 80050e2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80050e6:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80050e8:	e012      	b.n	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 80050ea:	e011      	b.n	8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80050ec:	f7ff fdd4 	bl	8004c98 <HAL_RCC_GetPCLK2Freq>
 80050f0:	4602      	mov	r2, r0
 80050f2:	4b0c      	ldr	r3, [pc, #48]	; (8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	0b9b      	lsrs	r3, r3, #14
 80050f8:	f003 0303 	and.w	r3, r3, #3
 80050fc:	3301      	adds	r3, #1
 80050fe:	005b      	lsls	r3, r3, #1
 8005100:	fbb2 f3f3 	udiv	r3, r2, r3
 8005104:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8005106:	e004      	b.n	8005112 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
    default:
    {
      break;
 8005108:	bf00      	nop
 800510a:	e002      	b.n	8005112 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
      break;
 800510c:	bf00      	nop
 800510e:	e000      	b.n	8005112 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
      break;
 8005110:	bf00      	nop
    }
  }
  return (frequency);
 8005112:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8005114:	4618      	mov	r0, r3
 8005116:	3734      	adds	r7, #52	; 0x34
 8005118:	46bd      	mov	sp, r7
 800511a:	bd90      	pop	{r4, r7, pc}
 800511c:	0800ec24 	.word	0x0800ec24
 8005120:	0800ebe8 	.word	0x0800ebe8
 8005124:	40021000 	.word	0x40021000
 8005128:	007a1200 	.word	0x007a1200
 800512c:	003d0900 	.word	0x003d0900
 8005130:	aaaaaaab 	.word	0xaaaaaaab

08005134 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e0b4      	b.n	80052b4 <HAL_RTC_Init+0x180>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a5b      	ldr	r2, [pc, #364]	; (80052bc <HAL_RTC_Init+0x188>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d004      	beq.n	800515e <HAL_RTC_Init+0x2a>
 8005154:	f240 111d 	movw	r1, #285	; 0x11d
 8005158:	4859      	ldr	r0, [pc, #356]	; (80052c0 <HAL_RTC_Init+0x18c>)
 800515a:	f7fc ffb3 	bl	80020c4 <assert_failed>
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d012      	beq.n	800518c <HAL_RTC_Init+0x58>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	2b80      	cmp	r3, #128	; 0x80
 800516c:	d00e      	beq.n	800518c <HAL_RTC_Init+0x58>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005176:	d009      	beq.n	800518c <HAL_RTC_Init+0x58>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005180:	d004      	beq.n	800518c <HAL_RTC_Init+0x58>
 8005182:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8005186:	484e      	ldr	r0, [pc, #312]	; (80052c0 <HAL_RTC_Init+0x18c>)
 8005188:	f7fc ff9c 	bl	80020c4 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005194:	d309      	bcc.n	80051aa <HAL_RTC_Init+0x76>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519e:	d004      	beq.n	80051aa <HAL_RTC_Init+0x76>
 80051a0:	f240 111f 	movw	r1, #287	; 0x11f
 80051a4:	4846      	ldr	r0, [pc, #280]	; (80052c0 <HAL_RTC_Init+0x18c>)
 80051a6:	f7fc ff8d 	bl	80020c4 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	7c5b      	ldrb	r3, [r3, #17]
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d105      	bne.n	80051c0 <HAL_RTC_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7fd f802 	bl	80021c4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 fbca 	bl	8005960 <HAL_RTC_WaitForSynchro>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d004      	beq.n	80051dc <HAL_RTC_Init+0xa8>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2204      	movs	r2, #4
 80051d6:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e06b      	b.n	80052b4 <HAL_RTC_Init+0x180>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 fc83 	bl	8005ae8 <RTC_EnterInitMode>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d004      	beq.n	80051f2 <HAL_RTC_Init+0xbe>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2204      	movs	r2, #4
 80051ec:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e060      	b.n	80052b4 <HAL_RTC_Init+0x180>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 0207 	bic.w	r2, r2, #7
 8005200:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d005      	beq.n	8005216 <HAL_RTC_Init+0xe2>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800520a:	4b2e      	ldr	r3, [pc, #184]	; (80052c4 <HAL_RTC_Init+0x190>)
 800520c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520e:	4a2d      	ldr	r2, [pc, #180]	; (80052c4 <HAL_RTC_Init+0x190>)
 8005210:	f023 0301 	bic.w	r3, r3, #1
 8005214:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8005216:	4b2b      	ldr	r3, [pc, #172]	; (80052c4 <HAL_RTC_Init+0x190>)
 8005218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800521a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	4928      	ldr	r1, [pc, #160]	; (80052c4 <HAL_RTC_Init+0x190>)
 8005224:	4313      	orrs	r3, r2
 8005226:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005230:	d003      	beq.n	800523a <HAL_RTC_Init+0x106>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	60fb      	str	r3, [r7, #12]
 8005238:	e00e      	b.n	8005258 <HAL_RTC_Init+0x124>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800523a:	2001      	movs	r0, #1
 800523c:	f7ff fe74 	bl	8004f28 <HAL_RCCEx_GetPeriphCLKFreq>
 8005240:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d104      	bne.n	8005252 <HAL_RTC_Init+0x11e>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2204      	movs	r2, #4
 800524c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e030      	b.n	80052b4 <HAL_RTC_Init+0x180>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	3b01      	subs	r3, #1
 8005256:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f023 010f 	bic.w	r1, r3, #15
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	0c1a      	lsrs	r2, r3, #16
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	0c1b      	lsrs	r3, r3, #16
 8005276:	041b      	lsls	r3, r3, #16
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	b291      	uxth	r1, r2
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	6812      	ldr	r2, [r2, #0]
 8005280:	430b      	orrs	r3, r1
 8005282:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 fc57 	bl	8005b38 <RTC_ExitInitMode>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d004      	beq.n	800529a <HAL_RTC_Init+0x166>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2204      	movs	r2, #4
 8005294:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	e00c      	b.n	80052b4 <HAL_RTC_Init+0x180>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80052b2:	2300      	movs	r3, #0
  }
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	40002800 	.word	0x40002800
 80052c0:	0800ec34 	.word	0x0800ec34
 80052c4:	40006c00 	.word	0x40006c00

080052c8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80052c8:	b590      	push	{r4, r7, lr}
 80052ca:	b087      	sub	sp, #28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	617b      	str	r3, [r7, #20]
 80052d8:	2300      	movs	r3, #0
 80052da:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d002      	beq.n	80052e8 <HAL_RTC_SetTime+0x20>
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e0cd      	b.n	8005488 <HAL_RTC_SetTime+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d007      	beq.n	8005302 <HAL_RTC_SetTime+0x3a>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d004      	beq.n	8005302 <HAL_RTC_SetTime+0x3a>
 80052f8:	f240 21ca 	movw	r1, #714	; 0x2ca
 80052fc:	4864      	ldr	r0, [pc, #400]	; (8005490 <HAL_RTC_SetTime+0x1c8>)
 80052fe:	f7fc fee1 	bl	80020c4 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	7c1b      	ldrb	r3, [r3, #16]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d101      	bne.n	800530e <HAL_RTC_SetTime+0x46>
 800530a:	2302      	movs	r3, #2
 800530c:	e0bc      	b.n	8005488 <HAL_RTC_SetTime+0x1c0>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2201      	movs	r2, #1
 8005312:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2202      	movs	r2, #2
 8005318:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d12e      	bne.n	800537e <HAL_RTC_SetTime+0xb6>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	2b17      	cmp	r3, #23
 8005326:	d904      	bls.n	8005332 <HAL_RTC_SetTime+0x6a>
 8005328:	f240 21d3 	movw	r1, #723	; 0x2d3
 800532c:	4858      	ldr	r0, [pc, #352]	; (8005490 <HAL_RTC_SetTime+0x1c8>)
 800532e:	f7fc fec9 	bl	80020c4 <assert_failed>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	785b      	ldrb	r3, [r3, #1]
 8005336:	2b3b      	cmp	r3, #59	; 0x3b
 8005338:	d904      	bls.n	8005344 <HAL_RTC_SetTime+0x7c>
 800533a:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 800533e:	4854      	ldr	r0, [pc, #336]	; (8005490 <HAL_RTC_SetTime+0x1c8>)
 8005340:	f7fc fec0 	bl	80020c4 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	789b      	ldrb	r3, [r3, #2]
 8005348:	2b3b      	cmp	r3, #59	; 0x3b
 800534a:	d904      	bls.n	8005356 <HAL_RTC_SetTime+0x8e>
 800534c:	f240 21d5 	movw	r1, #725	; 0x2d5
 8005350:	484f      	ldr	r0, [pc, #316]	; (8005490 <HAL_RTC_SetTime+0x1c8>)
 8005352:	f7fc feb7 	bl	80020c4 <assert_failed>

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	461a      	mov	r2, r3
 800535c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005360:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	785b      	ldrb	r3, [r3, #1]
 8005368:	4619      	mov	r1, r3
 800536a:	460b      	mov	r3, r1
 800536c:	011b      	lsls	r3, r3, #4
 800536e:	1a5b      	subs	r3, r3, r1
 8005370:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005372:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005378:	4413      	add	r3, r2
 800537a:	617b      	str	r3, [r7, #20]
 800537c:	e045      	b.n	800540a <HAL_RTC_SetTime+0x142>
  }
  else
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	4618      	mov	r0, r3
 8005384:	f000 fc1d 	bl	8005bc2 <RTC_Bcd2ToByte>
 8005388:	4603      	mov	r3, r0
 800538a:	2b17      	cmp	r3, #23
 800538c:	d904      	bls.n	8005398 <HAL_RTC_SetTime+0xd0>
 800538e:	f240 21dd 	movw	r1, #733	; 0x2dd
 8005392:	483f      	ldr	r0, [pc, #252]	; (8005490 <HAL_RTC_SetTime+0x1c8>)
 8005394:	f7fc fe96 	bl	80020c4 <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	785b      	ldrb	r3, [r3, #1]
 800539c:	4618      	mov	r0, r3
 800539e:	f000 fc10 	bl	8005bc2 <RTC_Bcd2ToByte>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b3b      	cmp	r3, #59	; 0x3b
 80053a6:	d904      	bls.n	80053b2 <HAL_RTC_SetTime+0xea>
 80053a8:	f240 21de 	movw	r1, #734	; 0x2de
 80053ac:	4838      	ldr	r0, [pc, #224]	; (8005490 <HAL_RTC_SetTime+0x1c8>)
 80053ae:	f7fc fe89 	bl	80020c4 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	789b      	ldrb	r3, [r3, #2]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f000 fc03 	bl	8005bc2 <RTC_Bcd2ToByte>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b3b      	cmp	r3, #59	; 0x3b
 80053c0:	d904      	bls.n	80053cc <HAL_RTC_SetTime+0x104>
 80053c2:	f240 21df 	movw	r1, #735	; 0x2df
 80053c6:	4832      	ldr	r0, [pc, #200]	; (8005490 <HAL_RTC_SetTime+0x1c8>)
 80053c8:	f7fc fe7c 	bl	80020c4 <assert_failed>

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 fbf6 	bl	8005bc2 <RTC_Bcd2ToByte>
 80053d6:	4603      	mov	r3, r0
 80053d8:	461a      	mov	r2, r3
 80053da:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80053de:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	785b      	ldrb	r3, [r3, #1]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 fbeb 	bl	8005bc2 <RTC_Bcd2ToByte>
 80053ec:	4603      	mov	r3, r0
 80053ee:	461a      	mov	r2, r3
 80053f0:	4613      	mov	r3, r2
 80053f2:	011b      	lsls	r3, r3, #4
 80053f4:	1a9b      	subs	r3, r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80053f8:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	789b      	ldrb	r3, [r3, #2]
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 fbdf 	bl	8005bc2 <RTC_Bcd2ToByte>
 8005404:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005406:	4423      	add	r3, r4
 8005408:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800540a:	6979      	ldr	r1, [r7, #20]
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 fb04 	bl	8005a1a <RTC_WriteTimeCounter>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d007      	beq.n	8005428 <HAL_RTC_SetTime+0x160>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2204      	movs	r2, #4
 800541c:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e02f      	b.n	8005488 <HAL_RTC_SetTime+0x1c0>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 0205 	bic.w	r2, r2, #5
 8005436:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f000 fb15 	bl	8005a68 <RTC_ReadAlarmCounter>
 800543e:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005446:	d018      	beq.n	800547a <HAL_RTC_SetTime+0x1b2>
    {
      if (counter_alarm < counter_time)
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	429a      	cmp	r2, r3
 800544e:	d214      	bcs.n	800547a <HAL_RTC_SetTime+0x1b2>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005456:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800545a:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800545c:	6939      	ldr	r1, [r7, #16]
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f000 fb1b 	bl	8005a9a <RTC_WriteAlarmCounter>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d007      	beq.n	800547a <HAL_RTC_SetTime+0x1b2>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2204      	movs	r2, #4
 800546e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e006      	b.n	8005488 <HAL_RTC_SetTime+0x1c0>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2201      	movs	r2, #1
 800547e:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8005486:	2300      	movs	r3, #0
  }
}
 8005488:	4618      	mov	r0, r3
 800548a:	371c      	adds	r7, #28
 800548c:	46bd      	mov	sp, r7
 800548e:	bd90      	pop	{r4, r7, pc}
 8005490:	0800ec34 	.word	0x0800ec34

08005494 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b088      	sub	sp, #32
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80054a0:	2300      	movs	r3, #0
 80054a2:	61bb      	str	r3, [r7, #24]
 80054a4:	2300      	movs	r3, #0
 80054a6:	61fb      	str	r3, [r7, #28]
 80054a8:	2300      	movs	r3, #0
 80054aa:	617b      	str	r3, [r7, #20]
 80054ac:	2300      	movs	r3, #0
 80054ae:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d002      	beq.n	80054bc <HAL_RTC_GetTime+0x28>
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d101      	bne.n	80054c0 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e0c0      	b.n	8005642 <HAL_RTC_GetTime+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d007      	beq.n	80054d6 <HAL_RTC_GetTime+0x42>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d004      	beq.n	80054d6 <HAL_RTC_GetTime+0x42>
 80054cc:	f240 312d 	movw	r1, #813	; 0x32d
 80054d0:	485e      	ldr	r0, [pc, #376]	; (800564c <HAL_RTC_GetTime+0x1b8>)
 80054d2:	f7fc fdf7 	bl	80020c4 <assert_failed>

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f003 0304 	and.w	r3, r3, #4
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <HAL_RTC_GetTime+0x54>
  {
    return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e0ac      	b.n	8005642 <HAL_RTC_GetTime+0x1ae>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f000 fa66 	bl	80059ba <RTC_ReadTimeCounter>
 80054ee:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	4a57      	ldr	r2, [pc, #348]	; (8005650 <HAL_RTC_GetTime+0x1bc>)
 80054f4:	fba2 2303 	umull	r2, r3, r2, r3
 80054f8:	0adb      	lsrs	r3, r3, #11
 80054fa:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	4b54      	ldr	r3, [pc, #336]	; (8005650 <HAL_RTC_GetTime+0x1bc>)
 8005500:	fba3 1302 	umull	r1, r3, r3, r2
 8005504:	0adb      	lsrs	r3, r3, #11
 8005506:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800550a:	fb01 f303 	mul.w	r3, r1, r3
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	4a50      	ldr	r2, [pc, #320]	; (8005654 <HAL_RTC_GetTime+0x1c0>)
 8005512:	fba2 2303 	umull	r2, r3, r2, r3
 8005516:	095b      	lsrs	r3, r3, #5
 8005518:	b2da      	uxtb	r2, r3
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	4a4b      	ldr	r2, [pc, #300]	; (8005650 <HAL_RTC_GetTime+0x1bc>)
 8005522:	fba2 1203 	umull	r1, r2, r2, r3
 8005526:	0ad2      	lsrs	r2, r2, #11
 8005528:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800552c:	fb01 f202 	mul.w	r2, r1, r2
 8005530:	1a9a      	subs	r2, r3, r2
 8005532:	4b48      	ldr	r3, [pc, #288]	; (8005654 <HAL_RTC_GetTime+0x1c0>)
 8005534:	fba3 1302 	umull	r1, r3, r3, r2
 8005538:	0959      	lsrs	r1, r3, #5
 800553a:	460b      	mov	r3, r1
 800553c:	011b      	lsls	r3, r3, #4
 800553e:	1a5b      	subs	r3, r3, r1
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	1ad1      	subs	r1, r2, r3
 8005544:	b2ca      	uxtb	r2, r1
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	2b17      	cmp	r3, #23
 800554e:	d955      	bls.n	80055fc <HAL_RTC_GetTime+0x168>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	4a41      	ldr	r2, [pc, #260]	; (8005658 <HAL_RTC_GetTime+0x1c4>)
 8005554:	fba2 2303 	umull	r2, r3, r2, r3
 8005558:	091b      	lsrs	r3, r3, #4
 800555a:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800555c:	6939      	ldr	r1, [r7, #16]
 800555e:	4b3e      	ldr	r3, [pc, #248]	; (8005658 <HAL_RTC_GetTime+0x1c4>)
 8005560:	fba3 2301 	umull	r2, r3, r3, r1
 8005564:	091a      	lsrs	r2, r3, #4
 8005566:	4613      	mov	r3, r2
 8005568:	005b      	lsls	r3, r3, #1
 800556a:	4413      	add	r3, r2
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	1aca      	subs	r2, r1, r3
 8005570:	b2d2      	uxtb	r2, r2
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f000 fa76 	bl	8005a68 <RTC_ReadAlarmCounter>
 800557c:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005584:	d008      	beq.n	8005598 <HAL_RTC_GetTime+0x104>
 8005586:	69fa      	ldr	r2, [r7, #28]
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	429a      	cmp	r2, r3
 800558c:	d904      	bls.n	8005598 <HAL_RTC_GetTime+0x104>
    {
      counter_alarm -= counter_time;
 800558e:	69fa      	ldr	r2, [r7, #28]
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	61fb      	str	r3, [r7, #28]
 8005596:	e002      	b.n	800559e <HAL_RTC_GetTime+0x10a>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8005598:	f04f 33ff 	mov.w	r3, #4294967295
 800559c:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	4a2e      	ldr	r2, [pc, #184]	; (800565c <HAL_RTC_GetTime+0x1c8>)
 80055a2:	fb02 f303 	mul.w	r3, r2, r3
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80055ac:	69b9      	ldr	r1, [r7, #24]
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f000 fa33 	bl	8005a1a <RTC_WriteTimeCounter>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d001      	beq.n	80055be <HAL_RTC_GetTime+0x12a>
    {
      return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e041      	b.n	8005642 <HAL_RTC_GetTime+0x1ae>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c4:	d00c      	beq.n	80055e0 <HAL_RTC_GetTime+0x14c>
    {
      counter_alarm += counter_time;
 80055c6:	69fa      	ldr	r2, [r7, #28]
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	4413      	add	r3, r2
 80055cc:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80055ce:	69f9      	ldr	r1, [r7, #28]
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f000 fa62 	bl	8005a9a <RTC_WriteAlarmCounter>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00a      	beq.n	80055f2 <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e030      	b.n	8005642 <HAL_RTC_GetTime+0x1ae>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80055e0:	69f9      	ldr	r1, [r7, #28]
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f000 fa59 	bl	8005a9a <RTC_WriteAlarmCounter>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d001      	beq.n	80055f2 <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e027      	b.n	8005642 <HAL_RTC_GetTime+0x1ae>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80055f2:	6979      	ldr	r1, [r7, #20]
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f000 fb01 	bl	8005bfc <RTC_DateUpdate>
 80055fa:	e003      	b.n	8005604 <HAL_RTC_GetTime+0x170>
  }
  else
  {
    sTime->Hours = hours;
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	b2da      	uxtb	r2, r3
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d01a      	beq.n	8005640 <HAL_RTC_GetTime+0x1ac>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	4618      	mov	r0, r3
 8005610:	f000 faba 	bl	8005b88 <RTC_ByteToBcd2>
 8005614:	4603      	mov	r3, r0
 8005616:	461a      	mov	r2, r3
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	785b      	ldrb	r3, [r3, #1]
 8005620:	4618      	mov	r0, r3
 8005622:	f000 fab1 	bl	8005b88 <RTC_ByteToBcd2>
 8005626:	4603      	mov	r3, r0
 8005628:	461a      	mov	r2, r3
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	789b      	ldrb	r3, [r3, #2]
 8005632:	4618      	mov	r0, r3
 8005634:	f000 faa8 	bl	8005b88 <RTC_ByteToBcd2>
 8005638:	4603      	mov	r3, r0
 800563a:	461a      	mov	r2, r3
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3720      	adds	r7, #32
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	0800ec34 	.word	0x0800ec34
 8005650:	91a2b3c5 	.word	0x91a2b3c5
 8005654:	88888889 	.word	0x88888889
 8005658:	aaaaaaab 	.word	0xaaaaaaab
 800565c:	00015180 	.word	0x00015180

08005660 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b088      	sub	sp, #32
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800566c:	2300      	movs	r3, #0
 800566e:	61fb      	str	r3, [r7, #28]
 8005670:	2300      	movs	r3, #0
 8005672:	61bb      	str	r3, [r7, #24]
 8005674:	2300      	movs	r3, #0
 8005676:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d002      	beq.n	8005684 <HAL_RTC_SetDate+0x24>
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e0fc      	b.n	8005882 <HAL_RTC_SetDate+0x222>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d007      	beq.n	800569e <HAL_RTC_SetDate+0x3e>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b01      	cmp	r3, #1
 8005692:	d004      	beq.n	800569e <HAL_RTC_SetDate+0x3e>
 8005694:	f44f 7167 	mov.w	r1, #924	; 0x39c
 8005698:	487c      	ldr	r0, [pc, #496]	; (800588c <HAL_RTC_SetDate+0x22c>)
 800569a:	f7fc fd13 	bl	80020c4 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	7c1b      	ldrb	r3, [r3, #16]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d101      	bne.n	80056aa <HAL_RTC_SetDate+0x4a>
 80056a6:	2302      	movs	r3, #2
 80056a8:	e0eb      	b.n	8005882 <HAL_RTC_SetDate+0x222>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2201      	movs	r2, #1
 80056ae:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2202      	movs	r2, #2
 80056b4:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d12f      	bne.n	800571c <HAL_RTC_SetDate+0xbc>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	78db      	ldrb	r3, [r3, #3]
 80056c0:	2b63      	cmp	r3, #99	; 0x63
 80056c2:	d904      	bls.n	80056ce <HAL_RTC_SetDate+0x6e>
 80056c4:	f240 31a5 	movw	r1, #933	; 0x3a5
 80056c8:	4870      	ldr	r0, [pc, #448]	; (800588c <HAL_RTC_SetDate+0x22c>)
 80056ca:	f7fc fcfb 	bl	80020c4 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	785b      	ldrb	r3, [r3, #1]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d003      	beq.n	80056de <HAL_RTC_SetDate+0x7e>
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	785b      	ldrb	r3, [r3, #1]
 80056da:	2b0c      	cmp	r3, #12
 80056dc:	d904      	bls.n	80056e8 <HAL_RTC_SetDate+0x88>
 80056de:	f240 31a6 	movw	r1, #934	; 0x3a6
 80056e2:	486a      	ldr	r0, [pc, #424]	; (800588c <HAL_RTC_SetDate+0x22c>)
 80056e4:	f7fc fcee 	bl	80020c4 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	789b      	ldrb	r3, [r3, #2]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d003      	beq.n	80056f8 <HAL_RTC_SetDate+0x98>
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	789b      	ldrb	r3, [r3, #2]
 80056f4:	2b1f      	cmp	r3, #31
 80056f6:	d904      	bls.n	8005702 <HAL_RTC_SetDate+0xa2>
 80056f8:	f240 31a7 	movw	r1, #935	; 0x3a7
 80056fc:	4863      	ldr	r0, [pc, #396]	; (800588c <HAL_RTC_SetDate+0x22c>)
 80056fe:	f7fc fce1 	bl	80020c4 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	78da      	ldrb	r2, [r3, #3]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	785a      	ldrb	r2, [r3, #1]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	789a      	ldrb	r2, [r3, #2]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	739a      	strb	r2, [r3, #14]
 800571a:	e051      	b.n	80057c0 <HAL_RTC_SetDate+0x160>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	78db      	ldrb	r3, [r3, #3]
 8005720:	4618      	mov	r0, r3
 8005722:	f000 fa4e 	bl	8005bc2 <RTC_Bcd2ToByte>
 8005726:	4603      	mov	r3, r0
 8005728:	2b63      	cmp	r3, #99	; 0x63
 800572a:	d904      	bls.n	8005736 <HAL_RTC_SetDate+0xd6>
 800572c:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 8005730:	4856      	ldr	r0, [pc, #344]	; (800588c <HAL_RTC_SetDate+0x22c>)
 8005732:	f7fc fcc7 	bl	80020c4 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	785b      	ldrb	r3, [r3, #1]
 800573a:	4618      	mov	r0, r3
 800573c:	f000 fa41 	bl	8005bc2 <RTC_Bcd2ToByte>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d007      	beq.n	8005756 <HAL_RTC_SetDate+0xf6>
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	785b      	ldrb	r3, [r3, #1]
 800574a:	4618      	mov	r0, r3
 800574c:	f000 fa39 	bl	8005bc2 <RTC_Bcd2ToByte>
 8005750:	4603      	mov	r3, r0
 8005752:	2b0c      	cmp	r3, #12
 8005754:	d904      	bls.n	8005760 <HAL_RTC_SetDate+0x100>
 8005756:	f240 31b1 	movw	r1, #945	; 0x3b1
 800575a:	484c      	ldr	r0, [pc, #304]	; (800588c <HAL_RTC_SetDate+0x22c>)
 800575c:	f7fc fcb2 	bl	80020c4 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	789b      	ldrb	r3, [r3, #2]
 8005764:	4618      	mov	r0, r3
 8005766:	f000 fa2c 	bl	8005bc2 <RTC_Bcd2ToByte>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d007      	beq.n	8005780 <HAL_RTC_SetDate+0x120>
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	789b      	ldrb	r3, [r3, #2]
 8005774:	4618      	mov	r0, r3
 8005776:	f000 fa24 	bl	8005bc2 <RTC_Bcd2ToByte>
 800577a:	4603      	mov	r3, r0
 800577c:	2b1f      	cmp	r3, #31
 800577e:	d904      	bls.n	800578a <HAL_RTC_SetDate+0x12a>
 8005780:	f240 31b2 	movw	r1, #946	; 0x3b2
 8005784:	4841      	ldr	r0, [pc, #260]	; (800588c <HAL_RTC_SetDate+0x22c>)
 8005786:	f7fc fc9d 	bl	80020c4 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	78db      	ldrb	r3, [r3, #3]
 800578e:	4618      	mov	r0, r3
 8005790:	f000 fa17 	bl	8005bc2 <RTC_Bcd2ToByte>
 8005794:	4603      	mov	r3, r0
 8005796:	461a      	mov	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	785b      	ldrb	r3, [r3, #1]
 80057a0:	4618      	mov	r0, r3
 80057a2:	f000 fa0e 	bl	8005bc2 <RTC_Bcd2ToByte>
 80057a6:	4603      	mov	r3, r0
 80057a8:	461a      	mov	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	789b      	ldrb	r3, [r3, #2]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 fa05 	bl	8005bc2 <RTC_Bcd2ToByte>
 80057b8:	4603      	mov	r3, r0
 80057ba:	461a      	mov	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	7bdb      	ldrb	r3, [r3, #15]
 80057c4:	4618      	mov	r0, r3
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	7b59      	ldrb	r1, [r3, #13]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	7b9b      	ldrb	r3, [r3, #14]
 80057ce:	461a      	mov	r2, r3
 80057d0:	f000 faf0 	bl	8005db4 <RTC_WeekDayNum>
 80057d4:	4603      	mov	r3, r0
 80057d6:	461a      	mov	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	7b1a      	ldrb	r2, [r3, #12]
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 f8e8 	bl	80059ba <RTC_ReadTimeCounter>
 80057ea:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	4a28      	ldr	r2, [pc, #160]	; (8005890 <HAL_RTC_SetDate+0x230>)
 80057f0:	fba2 2303 	umull	r2, r3, r2, r3
 80057f4:	0adb      	lsrs	r3, r3, #11
 80057f6:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	2b18      	cmp	r3, #24
 80057fc:	d93a      	bls.n	8005874 <HAL_RTC_SetDate+0x214>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	4a24      	ldr	r2, [pc, #144]	; (8005894 <HAL_RTC_SetDate+0x234>)
 8005802:	fba2 2303 	umull	r2, r3, r2, r3
 8005806:	091b      	lsrs	r3, r3, #4
 8005808:	4a23      	ldr	r2, [pc, #140]	; (8005898 <HAL_RTC_SetDate+0x238>)
 800580a:	fb02 f303 	mul.w	r3, r2, r3
 800580e:	69fa      	ldr	r2, [r7, #28]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005814:	69f9      	ldr	r1, [r7, #28]
 8005816:	68f8      	ldr	r0, [r7, #12]
 8005818:	f000 f8ff 	bl	8005a1a <RTC_WriteTimeCounter>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d007      	beq.n	8005832 <HAL_RTC_SetDate+0x1d2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2204      	movs	r2, #4
 8005826:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e027      	b.n	8005882 <HAL_RTC_SetDate+0x222>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f000 f918 	bl	8005a68 <RTC_ReadAlarmCounter>
 8005838:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005840:	d018      	beq.n	8005874 <HAL_RTC_SetDate+0x214>
    {
      if (counter_alarm < counter_time)
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	429a      	cmp	r2, r3
 8005848:	d214      	bcs.n	8005874 <HAL_RTC_SetDate+0x214>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8005850:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005854:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005856:	69b9      	ldr	r1, [r7, #24]
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 f91e 	bl	8005a9a <RTC_WriteAlarmCounter>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d007      	beq.n	8005874 <HAL_RTC_SetDate+0x214>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2204      	movs	r2, #4
 8005868:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e006      	b.n	8005882 <HAL_RTC_SetDate+0x222>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2201      	movs	r2, #1
 8005878:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3720      	adds	r7, #32
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	0800ec34 	.word	0x0800ec34
 8005890:	91a2b3c5 	.word	0x91a2b3c5
 8005894:	aaaaaaab 	.word	0xaaaaaaab
 8005898:	00015180 	.word	0x00015180

0800589c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b086      	sub	sp, #24
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 80058a8:	f107 0314 	add.w	r3, r7, #20
 80058ac:	2100      	movs	r1, #0
 80058ae:	460a      	mov	r2, r1
 80058b0:	801a      	strh	r2, [r3, #0]
 80058b2:	460a      	mov	r2, r1
 80058b4:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d002      	beq.n	80058c2 <HAL_RTC_GetDate+0x26>
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e045      	b.n	8005952 <HAL_RTC_GetDate+0xb6>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d007      	beq.n	80058dc <HAL_RTC_GetDate+0x40>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d004      	beq.n	80058dc <HAL_RTC_GetDate+0x40>
 80058d2:	f240 410e 	movw	r1, #1038	; 0x40e
 80058d6:	4821      	ldr	r0, [pc, #132]	; (800595c <HAL_RTC_GetDate+0xc0>)
 80058d8:	f7fc fbf4 	bl	80020c4 <assert_failed>

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80058dc:	f107 0314 	add.w	r3, r7, #20
 80058e0:	2200      	movs	r2, #0
 80058e2:	4619      	mov	r1, r3
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f7ff fdd5 	bl	8005494 <HAL_RTC_GetTime>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d001      	beq.n	80058f4 <HAL_RTC_GetDate+0x58>
  {
    return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e02e      	b.n	8005952 <HAL_RTC_GetDate+0xb6>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	7b1a      	ldrb	r2, [r3, #12]
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	7bda      	ldrb	r2, [r3, #15]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	7b5a      	ldrb	r2, [r3, #13]
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	7b9a      	ldrb	r2, [r3, #14]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d01a      	beq.n	8005950 <HAL_RTC_GetDate+0xb4>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	78db      	ldrb	r3, [r3, #3]
 800591e:	4618      	mov	r0, r3
 8005920:	f000 f932 	bl	8005b88 <RTC_ByteToBcd2>
 8005924:	4603      	mov	r3, r0
 8005926:	461a      	mov	r2, r3
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	785b      	ldrb	r3, [r3, #1]
 8005930:	4618      	mov	r0, r3
 8005932:	f000 f929 	bl	8005b88 <RTC_ByteToBcd2>
 8005936:	4603      	mov	r3, r0
 8005938:	461a      	mov	r2, r3
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	789b      	ldrb	r3, [r3, #2]
 8005942:	4618      	mov	r0, r3
 8005944:	f000 f920 	bl	8005b88 <RTC_ByteToBcd2>
 8005948:	4603      	mov	r3, r0
 800594a:	461a      	mov	r2, r3
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3718      	adds	r7, #24
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	0800ec34 	.word	0x0800ec34

08005960 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005968:	2300      	movs	r3, #0
 800596a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e01d      	b.n	80059b2 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f022 0208 	bic.w	r2, r2, #8
 8005984:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005986:	f7fd f86d 	bl	8002a64 <HAL_GetTick>
 800598a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800598c:	e009      	b.n	80059a2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800598e:	f7fd f869 	bl	8002a64 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800599c:	d901      	bls.n	80059a2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e007      	b.n	80059b2 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f003 0308 	and.w	r3, r3, #8
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d0ee      	beq.n	800598e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b087      	sub	sp, #28
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	827b      	strh	r3, [r7, #18]
 80059c6:	2300      	movs	r3, #0
 80059c8:	823b      	strh	r3, [r7, #16]
 80059ca:	2300      	movs	r3, #0
 80059cc:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	69db      	ldr	r3, [r3, #28]
 80059e0:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80059ea:	8a7a      	ldrh	r2, [r7, #18]
 80059ec:	8a3b      	ldrh	r3, [r7, #16]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d008      	beq.n	8005a04 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80059f2:	8a3b      	ldrh	r3, [r7, #16]
 80059f4:	041a      	lsls	r2, r3, #16
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	69db      	ldr	r3, [r3, #28]
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	4313      	orrs	r3, r2
 8005a00:	617b      	str	r3, [r7, #20]
 8005a02:	e004      	b.n	8005a0e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005a04:	8a7b      	ldrh	r3, [r7, #18]
 8005a06:	041a      	lsls	r2, r3, #16
 8005a08:	89fb      	ldrh	r3, [r7, #14]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8005a0e:	697b      	ldr	r3, [r7, #20]
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	371c      	adds	r7, #28
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bc80      	pop	{r7}
 8005a18:	4770      	bx	lr

08005a1a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b084      	sub	sp, #16
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
 8005a22:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a24:	2300      	movs	r3, #0
 8005a26:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 f85d 	bl	8005ae8 <RTC_EnterInitMode>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d002      	beq.n	8005a3a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	73fb      	strb	r3, [r7, #15]
 8005a38:	e011      	b.n	8005a5e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	683a      	ldr	r2, [r7, #0]
 8005a40:	0c12      	lsrs	r2, r2, #16
 8005a42:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	683a      	ldr	r2, [r7, #0]
 8005a4a:	b292      	uxth	r2, r2
 8005a4c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f872 	bl	8005b38 <RTC_ExitInitMode>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	81fb      	strh	r3, [r7, #14]
 8005a74:	2300      	movs	r3, #0
 8005a76:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a86:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005a88:	89fb      	ldrh	r3, [r7, #14]
 8005a8a:	041a      	lsls	r2, r3, #16
 8005a8c:	89bb      	ldrh	r3, [r7, #12]
 8005a8e:	4313      	orrs	r3, r2
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3714      	adds	r7, #20
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bc80      	pop	{r7}
 8005a98:	4770      	bx	lr

08005a9a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b084      	sub	sp, #16
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
 8005aa2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 f81d 	bl	8005ae8 <RTC_EnterInitMode>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d002      	beq.n	8005aba <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	73fb      	strb	r3, [r7, #15]
 8005ab8:	e011      	b.n	8005ade <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	0c12      	lsrs	r2, r2, #16
 8005ac2:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	683a      	ldr	r2, [r7, #0]
 8005aca:	b292      	uxth	r2, r2
 8005acc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f832 	bl	8005b38 <RTC_ExitInitMode>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005af0:	2300      	movs	r3, #0
 8005af2:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005af4:	f7fc ffb6 	bl	8002a64 <HAL_GetTick>
 8005af8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005afa:	e009      	b.n	8005b10 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005afc:	f7fc ffb2 	bl	8002a64 <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b0a:	d901      	bls.n	8005b10 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e00f      	b.n	8005b30 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f003 0320 	and.w	r3, r3, #32
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d0ee      	beq.n	8005afc <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685a      	ldr	r2, [r3, #4]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f042 0210 	orr.w	r2, r2, #16
 8005b2c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 0210 	bic.w	r2, r2, #16
 8005b52:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005b54:	f7fc ff86 	bl	8002a64 <HAL_GetTick>
 8005b58:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005b5a:	e009      	b.n	8005b70 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005b5c:	f7fc ff82 	bl	8002a64 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b6a:	d901      	bls.n	8005b70 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e007      	b.n	8005b80 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f003 0320 	and.w	r3, r3, #32
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d0ee      	beq.n	8005b5c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3710      	adds	r7, #16
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	4603      	mov	r3, r0
 8005b90:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005b92:	2300      	movs	r3, #0
 8005b94:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8005b96:	e005      	b.n	8005ba4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005b9e:	79fb      	ldrb	r3, [r7, #7]
 8005ba0:	3b0a      	subs	r3, #10
 8005ba2:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005ba4:	79fb      	ldrb	r3, [r7, #7]
 8005ba6:	2b09      	cmp	r3, #9
 8005ba8:	d8f6      	bhi.n	8005b98 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	011b      	lsls	r3, r3, #4
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	79fb      	ldrb	r3, [r7, #7]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	b2db      	uxtb	r3, r3
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3714      	adds	r7, #20
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bc80      	pop	{r7}
 8005bc0:	4770      	bx	lr

08005bc2 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b085      	sub	sp, #20
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	4603      	mov	r3, r0
 8005bca:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005bd0:	79fb      	ldrb	r3, [r7, #7]
 8005bd2:	091b      	lsrs	r3, r3, #4
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	4613      	mov	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4413      	add	r3, r2
 8005bde:	005b      	lsls	r3, r3, #1
 8005be0:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005be2:	79fb      	ldrb	r3, [r7, #7]
 8005be4:	f003 030f 	and.w	r3, r3, #15
 8005be8:	b2da      	uxtb	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	4413      	add	r3, r2
 8005bf0:	b2db      	uxtb	r3, r3
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bc80      	pop	{r7}
 8005bfa:	4770      	bx	lr

08005bfc <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8005c06:	2300      	movs	r3, #0
 8005c08:	617b      	str	r3, [r7, #20]
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	613b      	str	r3, [r7, #16]
 8005c0e:	2300      	movs	r3, #0
 8005c10:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8005c12:	2300      	movs	r3, #0
 8005c14:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	7bdb      	ldrb	r3, [r3, #15]
 8005c1a:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	7b5b      	ldrb	r3, [r3, #13]
 8005c20:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	7b9b      	ldrb	r3, [r3, #14]
 8005c26:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8005c28:	2300      	movs	r3, #0
 8005c2a:	60bb      	str	r3, [r7, #8]
 8005c2c:	e06f      	b.n	8005d0e <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d011      	beq.n	8005c58 <RTC_DateUpdate+0x5c>
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	2b03      	cmp	r3, #3
 8005c38:	d00e      	beq.n	8005c58 <RTC_DateUpdate+0x5c>
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	2b05      	cmp	r3, #5
 8005c3e:	d00b      	beq.n	8005c58 <RTC_DateUpdate+0x5c>
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	2b07      	cmp	r3, #7
 8005c44:	d008      	beq.n	8005c58 <RTC_DateUpdate+0x5c>
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	2b08      	cmp	r3, #8
 8005c4a:	d005      	beq.n	8005c58 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	2b0a      	cmp	r3, #10
 8005c50:	d002      	beq.n	8005c58 <RTC_DateUpdate+0x5c>
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	2b0c      	cmp	r3, #12
 8005c56:	d117      	bne.n	8005c88 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2b1e      	cmp	r3, #30
 8005c5c:	d803      	bhi.n	8005c66 <RTC_DateUpdate+0x6a>
      {
        day++;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	3301      	adds	r3, #1
 8005c62:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005c64:	e050      	b.n	8005d08 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	2b0c      	cmp	r3, #12
 8005c6a:	d005      	beq.n	8005c78 <RTC_DateUpdate+0x7c>
        {
          month++;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005c72:	2301      	movs	r3, #1
 8005c74:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005c76:	e047      	b.n	8005d08 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	60fb      	str	r3, [r7, #12]
          year++;
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	3301      	adds	r3, #1
 8005c84:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8005c86:	e03f      	b.n	8005d08 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	2b04      	cmp	r3, #4
 8005c8c:	d008      	beq.n	8005ca0 <RTC_DateUpdate+0xa4>
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	2b06      	cmp	r3, #6
 8005c92:	d005      	beq.n	8005ca0 <RTC_DateUpdate+0xa4>
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	2b09      	cmp	r3, #9
 8005c98:	d002      	beq.n	8005ca0 <RTC_DateUpdate+0xa4>
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	2b0b      	cmp	r3, #11
 8005c9e:	d10c      	bne.n	8005cba <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2b1d      	cmp	r3, #29
 8005ca4:	d803      	bhi.n	8005cae <RTC_DateUpdate+0xb2>
      {
        day++;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005cac:	e02c      	b.n	8005d08 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005cb8:	e026      	b.n	8005d08 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d123      	bne.n	8005d08 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2b1b      	cmp	r3, #27
 8005cc4:	d803      	bhi.n	8005cce <RTC_DateUpdate+0xd2>
      {
        day++;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	60fb      	str	r3, [r7, #12]
 8005ccc:	e01c      	b.n	8005d08 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2b1c      	cmp	r3, #28
 8005cd2:	d111      	bne.n	8005cf8 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f000 f839 	bl	8005d50 <RTC_IsLeapYear>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <RTC_DateUpdate+0xf0>
        {
          day++;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	60fb      	str	r3, [r7, #12]
 8005cea:	e00d      	b.n	8005d08 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	60fb      	str	r3, [r7, #12]
 8005cf6:	e007      	b.n	8005d08 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2b1d      	cmp	r3, #29
 8005cfc:	d104      	bne.n	8005d08 <RTC_DateUpdate+0x10c>
      {
        month++;
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	3301      	adds	r3, #1
 8005d02:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005d04:	2301      	movs	r3, #1
 8005d06:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	60bb      	str	r3, [r7, #8]
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d38b      	bcc.n	8005c2e <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	b2da      	uxtb	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	b2da      	uxtb	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	68fa      	ldr	r2, [r7, #12]
 8005d34:	b2d2      	uxtb	r2, r2
 8005d36:	4619      	mov	r1, r3
 8005d38:	6978      	ldr	r0, [r7, #20]
 8005d3a:	f000 f83b 	bl	8005db4 <RTC_WeekDayNum>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	461a      	mov	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	731a      	strb	r2, [r3, #12]
}
 8005d46:	bf00      	nop
 8005d48:	3718      	adds	r7, #24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
	...

08005d50 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	4603      	mov	r3, r0
 8005d58:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8005d5a:	88fb      	ldrh	r3, [r7, #6]
 8005d5c:	f003 0303 	and.w	r3, r3, #3
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d001      	beq.n	8005d6a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8005d66:	2300      	movs	r3, #0
 8005d68:	e01d      	b.n	8005da6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8005d6a:	88fb      	ldrh	r3, [r7, #6]
 8005d6c:	4a10      	ldr	r2, [pc, #64]	; (8005db0 <RTC_IsLeapYear+0x60>)
 8005d6e:	fba2 1203 	umull	r1, r2, r2, r3
 8005d72:	0952      	lsrs	r2, r2, #5
 8005d74:	2164      	movs	r1, #100	; 0x64
 8005d76:	fb01 f202 	mul.w	r2, r1, r2
 8005d7a:	1a9b      	subs	r3, r3, r2
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d001      	beq.n	8005d86 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005d82:	2301      	movs	r3, #1
 8005d84:	e00f      	b.n	8005da6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8005d86:	88fb      	ldrh	r3, [r7, #6]
 8005d88:	4a09      	ldr	r2, [pc, #36]	; (8005db0 <RTC_IsLeapYear+0x60>)
 8005d8a:	fba2 1203 	umull	r1, r2, r2, r3
 8005d8e:	09d2      	lsrs	r2, r2, #7
 8005d90:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005d94:	fb01 f202 	mul.w	r2, r1, r2
 8005d98:	1a9b      	subs	r3, r3, r2
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d101      	bne.n	8005da4 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e000      	b.n	8005da6 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8005da4:	2300      	movs	r3, #0
  }
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bc80      	pop	{r7}
 8005dae:	4770      	bx	lr
 8005db0:	51eb851f 	.word	0x51eb851f

08005db4 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	70fb      	strb	r3, [r7, #3]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	60bb      	str	r3, [r7, #8]
 8005dc8:	2300      	movs	r3, #0
 8005dca:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005dd2:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005dd4:	78fb      	ldrb	r3, [r7, #3]
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d82d      	bhi.n	8005e36 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8005dda:	78fa      	ldrb	r2, [r7, #3]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	005b      	lsls	r3, r3, #1
 8005de0:	4413      	add	r3, r2
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	1a9b      	subs	r3, r3, r2
 8005de6:	4a2c      	ldr	r2, [pc, #176]	; (8005e98 <RTC_WeekDayNum+0xe4>)
 8005de8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dec:	085a      	lsrs	r2, r3, #1
 8005dee:	78bb      	ldrb	r3, [r7, #2]
 8005df0:	441a      	add	r2, r3
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	441a      	add	r2, r3
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	089b      	lsrs	r3, r3, #2
 8005dfc:	441a      	add	r2, r3
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	3b01      	subs	r3, #1
 8005e02:	4926      	ldr	r1, [pc, #152]	; (8005e9c <RTC_WeekDayNum+0xe8>)
 8005e04:	fba1 1303 	umull	r1, r3, r1, r3
 8005e08:	095b      	lsrs	r3, r3, #5
 8005e0a:	1ad2      	subs	r2, r2, r3
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	4922      	ldr	r1, [pc, #136]	; (8005e9c <RTC_WeekDayNum+0xe8>)
 8005e12:	fba1 1303 	umull	r1, r3, r1, r3
 8005e16:	09db      	lsrs	r3, r3, #7
 8005e18:	4413      	add	r3, r2
 8005e1a:	1d1a      	adds	r2, r3, #4
 8005e1c:	4b20      	ldr	r3, [pc, #128]	; (8005ea0 <RTC_WeekDayNum+0xec>)
 8005e1e:	fba3 1302 	umull	r1, r3, r3, r2
 8005e22:	1ad1      	subs	r1, r2, r3
 8005e24:	0849      	lsrs	r1, r1, #1
 8005e26:	440b      	add	r3, r1
 8005e28:	0899      	lsrs	r1, r3, #2
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	00db      	lsls	r3, r3, #3
 8005e2e:	1a5b      	subs	r3, r3, r1
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	60fb      	str	r3, [r7, #12]
 8005e34:	e029      	b.n	8005e8a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8005e36:	78fa      	ldrb	r2, [r7, #3]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	005b      	lsls	r3, r3, #1
 8005e3c:	4413      	add	r3, r2
 8005e3e:	00db      	lsls	r3, r3, #3
 8005e40:	1a9b      	subs	r3, r3, r2
 8005e42:	4a15      	ldr	r2, [pc, #84]	; (8005e98 <RTC_WeekDayNum+0xe4>)
 8005e44:	fba2 2303 	umull	r2, r3, r2, r3
 8005e48:	085a      	lsrs	r2, r3, #1
 8005e4a:	78bb      	ldrb	r3, [r7, #2]
 8005e4c:	441a      	add	r2, r3
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	441a      	add	r2, r3
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	089b      	lsrs	r3, r3, #2
 8005e56:	441a      	add	r2, r3
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	4910      	ldr	r1, [pc, #64]	; (8005e9c <RTC_WeekDayNum+0xe8>)
 8005e5c:	fba1 1303 	umull	r1, r3, r1, r3
 8005e60:	095b      	lsrs	r3, r3, #5
 8005e62:	1ad2      	subs	r2, r2, r3
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	490d      	ldr	r1, [pc, #52]	; (8005e9c <RTC_WeekDayNum+0xe8>)
 8005e68:	fba1 1303 	umull	r1, r3, r1, r3
 8005e6c:	09db      	lsrs	r3, r3, #7
 8005e6e:	4413      	add	r3, r2
 8005e70:	1c9a      	adds	r2, r3, #2
 8005e72:	4b0b      	ldr	r3, [pc, #44]	; (8005ea0 <RTC_WeekDayNum+0xec>)
 8005e74:	fba3 1302 	umull	r1, r3, r3, r2
 8005e78:	1ad1      	subs	r1, r2, r3
 8005e7a:	0849      	lsrs	r1, r1, #1
 8005e7c:	440b      	add	r3, r1
 8005e7e:	0899      	lsrs	r1, r3, #2
 8005e80:	460b      	mov	r3, r1
 8005e82:	00db      	lsls	r3, r3, #3
 8005e84:	1a5b      	subs	r3, r3, r1
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	b2db      	uxtb	r3, r3
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bc80      	pop	{r7}
 8005e96:	4770      	bx	lr
 8005e98:	38e38e39 	.word	0x38e38e39
 8005e9c:	51eb851f 	.word	0x51eb851f
 8005ea0:	24924925 	.word	0x24924925

08005ea4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e0b2      	b.n	800601c <HAL_TIM_Base_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a5a      	ldr	r2, [pc, #360]	; (8006024 <HAL_TIM_Base_Init+0x180>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d027      	beq.n	8005f10 <HAL_TIM_Base_Init+0x6c>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a58      	ldr	r2, [pc, #352]	; (8006028 <HAL_TIM_Base_Init+0x184>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d022      	beq.n	8005f10 <HAL_TIM_Base_Init+0x6c>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ed2:	d01d      	beq.n	8005f10 <HAL_TIM_Base_Init+0x6c>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a54      	ldr	r2, [pc, #336]	; (800602c <HAL_TIM_Base_Init+0x188>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d018      	beq.n	8005f10 <HAL_TIM_Base_Init+0x6c>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a53      	ldr	r2, [pc, #332]	; (8006030 <HAL_TIM_Base_Init+0x18c>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d013      	beq.n	8005f10 <HAL_TIM_Base_Init+0x6c>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a51      	ldr	r2, [pc, #324]	; (8006034 <HAL_TIM_Base_Init+0x190>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d00e      	beq.n	8005f10 <HAL_TIM_Base_Init+0x6c>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a50      	ldr	r2, [pc, #320]	; (8006038 <HAL_TIM_Base_Init+0x194>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d009      	beq.n	8005f10 <HAL_TIM_Base_Init+0x6c>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a4e      	ldr	r2, [pc, #312]	; (800603c <HAL_TIM_Base_Init+0x198>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d004      	beq.n	8005f10 <HAL_TIM_Base_Init+0x6c>
 8005f06:	f240 1113 	movw	r1, #275	; 0x113
 8005f0a:	484d      	ldr	r0, [pc, #308]	; (8006040 <HAL_TIM_Base_Init+0x19c>)
 8005f0c:	f7fc f8da 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d014      	beq.n	8005f42 <HAL_TIM_Base_Init+0x9e>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	2b10      	cmp	r3, #16
 8005f1e:	d010      	beq.n	8005f42 <HAL_TIM_Base_Init+0x9e>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	2b20      	cmp	r3, #32
 8005f26:	d00c      	beq.n	8005f42 <HAL_TIM_Base_Init+0x9e>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	2b40      	cmp	r3, #64	; 0x40
 8005f2e:	d008      	beq.n	8005f42 <HAL_TIM_Base_Init+0x9e>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	2b60      	cmp	r3, #96	; 0x60
 8005f36:	d004      	beq.n	8005f42 <HAL_TIM_Base_Init+0x9e>
 8005f38:	f44f 718a 	mov.w	r1, #276	; 0x114
 8005f3c:	4840      	ldr	r0, [pc, #256]	; (8006040 <HAL_TIM_Base_Init+0x19c>)
 8005f3e:	f7fc f8c1 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00e      	beq.n	8005f68 <HAL_TIM_Base_Init+0xc4>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f52:	d009      	beq.n	8005f68 <HAL_TIM_Base_Init+0xc4>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f5c:	d004      	beq.n	8005f68 <HAL_TIM_Base_Init+0xc4>
 8005f5e:	f240 1115 	movw	r1, #277	; 0x115
 8005f62:	4837      	ldr	r0, [pc, #220]	; (8006040 <HAL_TIM_Base_Init+0x19c>)
 8005f64:	f7fc f8ae 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d008      	beq.n	8005f82 <HAL_TIM_Base_Init+0xde>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	2b80      	cmp	r3, #128	; 0x80
 8005f76:	d004      	beq.n	8005f82 <HAL_TIM_Base_Init+0xde>
 8005f78:	f44f 718b 	mov.w	r1, #278	; 0x116
 8005f7c:	4830      	ldr	r0, [pc, #192]	; (8006040 <HAL_TIM_Base_Init+0x19c>)
 8005f7e:	f7fc f8a1 	bl	80020c4 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d111      	bne.n	8005fb2 <HAL_TIM_Base_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f001 ffc0 	bl	8007f1c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d102      	bne.n	8005faa <HAL_TIM_Base_Init+0x106>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a27      	ldr	r2, [pc, #156]	; (8006044 <HAL_TIM_Base_Init+0x1a0>)
 8005fa8:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2202      	movs	r2, #2
 8005fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	3304      	adds	r3, #4
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	4610      	mov	r0, r2
 8005fc6:	f001 fbff 	bl	80077c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3708      	adds	r7, #8
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	40012c00 	.word	0x40012c00
 8006028:	40013400 	.word	0x40013400
 800602c:	40000400 	.word	0x40000400
 8006030:	40000800 	.word	0x40000800
 8006034:	40000c00 	.word	0x40000c00
 8006038:	40001000 	.word	0x40001000
 800603c:	40001400 	.word	0x40001400
 8006040:	0800ec6c 	.word	0x0800ec6c
 8006044:	0800220d 	.word	0x0800220d

08006048 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a39      	ldr	r2, [pc, #228]	; (800613c <HAL_TIM_Base_Start+0xf4>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d027      	beq.n	80060aa <HAL_TIM_Base_Start+0x62>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a38      	ldr	r2, [pc, #224]	; (8006140 <HAL_TIM_Base_Start+0xf8>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d022      	beq.n	80060aa <HAL_TIM_Base_Start+0x62>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800606c:	d01d      	beq.n	80060aa <HAL_TIM_Base_Start+0x62>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a34      	ldr	r2, [pc, #208]	; (8006144 <HAL_TIM_Base_Start+0xfc>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d018      	beq.n	80060aa <HAL_TIM_Base_Start+0x62>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a32      	ldr	r2, [pc, #200]	; (8006148 <HAL_TIM_Base_Start+0x100>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d013      	beq.n	80060aa <HAL_TIM_Base_Start+0x62>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a31      	ldr	r2, [pc, #196]	; (800614c <HAL_TIM_Base_Start+0x104>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d00e      	beq.n	80060aa <HAL_TIM_Base_Start+0x62>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a2f      	ldr	r2, [pc, #188]	; (8006150 <HAL_TIM_Base_Start+0x108>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d009      	beq.n	80060aa <HAL_TIM_Base_Start+0x62>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a2e      	ldr	r2, [pc, #184]	; (8006154 <HAL_TIM_Base_Start+0x10c>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d004      	beq.n	80060aa <HAL_TIM_Base_Start+0x62>
 80060a0:	f44f 71ca 	mov.w	r1, #404	; 0x194
 80060a4:	482c      	ldr	r0, [pc, #176]	; (8006158 <HAL_TIM_Base_Start+0x110>)
 80060a6:	f7fc f80d 	bl	80020c4 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d001      	beq.n	80060ba <HAL_TIM_Base_Start+0x72>
  {
    return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e03c      	b.n	8006134 <HAL_TIM_Base_Start+0xec>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2202      	movs	r2, #2
 80060be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a1d      	ldr	r2, [pc, #116]	; (800613c <HAL_TIM_Base_Start+0xf4>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d018      	beq.n	80060fe <HAL_TIM_Base_Start+0xb6>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a1b      	ldr	r2, [pc, #108]	; (8006140 <HAL_TIM_Base_Start+0xf8>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d013      	beq.n	80060fe <HAL_TIM_Base_Start+0xb6>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060de:	d00e      	beq.n	80060fe <HAL_TIM_Base_Start+0xb6>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a17      	ldr	r2, [pc, #92]	; (8006144 <HAL_TIM_Base_Start+0xfc>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d009      	beq.n	80060fe <HAL_TIM_Base_Start+0xb6>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a16      	ldr	r2, [pc, #88]	; (8006148 <HAL_TIM_Base_Start+0x100>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d004      	beq.n	80060fe <HAL_TIM_Base_Start+0xb6>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a14      	ldr	r2, [pc, #80]	; (800614c <HAL_TIM_Base_Start+0x104>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d111      	bne.n	8006122 <HAL_TIM_Base_Start+0xda>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	f003 0307 	and.w	r3, r3, #7
 8006108:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2b06      	cmp	r3, #6
 800610e:	d010      	beq.n	8006132 <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f042 0201 	orr.w	r2, r2, #1
 800611e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006120:	e007      	b.n	8006132 <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f042 0201 	orr.w	r2, r2, #1
 8006130:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006132:	2300      	movs	r3, #0
}
 8006134:	4618      	mov	r0, r3
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	40012c00 	.word	0x40012c00
 8006140:	40013400 	.word	0x40013400
 8006144:	40000400 	.word	0x40000400
 8006148:	40000800 	.word	0x40000800
 800614c:	40000c00 	.word	0x40000c00
 8006150:	40001000 	.word	0x40001000
 8006154:	40001400 	.word	0x40001400
 8006158:	0800ec6c 	.word	0x0800ec6c

0800615c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a3d      	ldr	r2, [pc, #244]	; (8006260 <HAL_TIM_Base_Start_IT+0x104>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d027      	beq.n	80061be <HAL_TIM_Base_Start_IT+0x62>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a3c      	ldr	r2, [pc, #240]	; (8006264 <HAL_TIM_Base_Start_IT+0x108>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d022      	beq.n	80061be <HAL_TIM_Base_Start_IT+0x62>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006180:	d01d      	beq.n	80061be <HAL_TIM_Base_Start_IT+0x62>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a38      	ldr	r2, [pc, #224]	; (8006268 <HAL_TIM_Base_Start_IT+0x10c>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d018      	beq.n	80061be <HAL_TIM_Base_Start_IT+0x62>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a36      	ldr	r2, [pc, #216]	; (800626c <HAL_TIM_Base_Start_IT+0x110>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d013      	beq.n	80061be <HAL_TIM_Base_Start_IT+0x62>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a35      	ldr	r2, [pc, #212]	; (8006270 <HAL_TIM_Base_Start_IT+0x114>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d00e      	beq.n	80061be <HAL_TIM_Base_Start_IT+0x62>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a33      	ldr	r2, [pc, #204]	; (8006274 <HAL_TIM_Base_Start_IT+0x118>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d009      	beq.n	80061be <HAL_TIM_Base_Start_IT+0x62>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a32      	ldr	r2, [pc, #200]	; (8006278 <HAL_TIM_Base_Start_IT+0x11c>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d004      	beq.n	80061be <HAL_TIM_Base_Start_IT+0x62>
 80061b4:	f240 11cf 	movw	r1, #463	; 0x1cf
 80061b8:	4830      	ldr	r0, [pc, #192]	; (800627c <HAL_TIM_Base_Start_IT+0x120>)
 80061ba:	f7fb ff83 	bl	80020c4 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d001      	beq.n	80061ce <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e044      	b.n	8006258 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2202      	movs	r2, #2
 80061d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68da      	ldr	r2, [r3, #12]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f042 0201 	orr.w	r2, r2, #1
 80061e4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a1d      	ldr	r2, [pc, #116]	; (8006260 <HAL_TIM_Base_Start_IT+0x104>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d018      	beq.n	8006222 <HAL_TIM_Base_Start_IT+0xc6>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a1b      	ldr	r2, [pc, #108]	; (8006264 <HAL_TIM_Base_Start_IT+0x108>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d013      	beq.n	8006222 <HAL_TIM_Base_Start_IT+0xc6>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006202:	d00e      	beq.n	8006222 <HAL_TIM_Base_Start_IT+0xc6>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a17      	ldr	r2, [pc, #92]	; (8006268 <HAL_TIM_Base_Start_IT+0x10c>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d009      	beq.n	8006222 <HAL_TIM_Base_Start_IT+0xc6>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a16      	ldr	r2, [pc, #88]	; (800626c <HAL_TIM_Base_Start_IT+0x110>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d004      	beq.n	8006222 <HAL_TIM_Base_Start_IT+0xc6>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a14      	ldr	r2, [pc, #80]	; (8006270 <HAL_TIM_Base_Start_IT+0x114>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d111      	bne.n	8006246 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f003 0307 	and.w	r3, r3, #7
 800622c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2b06      	cmp	r3, #6
 8006232:	d010      	beq.n	8006256 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f042 0201 	orr.w	r2, r2, #1
 8006242:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006244:	e007      	b.n	8006256 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f042 0201 	orr.w	r2, r2, #1
 8006254:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	40012c00 	.word	0x40012c00
 8006264:	40013400 	.word	0x40013400
 8006268:	40000400 	.word	0x40000400
 800626c:	40000800 	.word	0x40000800
 8006270:	40000c00 	.word	0x40000c00
 8006274:	40001000 	.word	0x40001000
 8006278:	40001400 	.word	0x40001400
 800627c:	0800ec6c 	.word	0x0800ec6c

08006280 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	e0b2      	b.n	80063f8 <HAL_TIM_PWM_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a5a      	ldr	r2, [pc, #360]	; (8006400 <HAL_TIM_PWM_Init+0x180>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d027      	beq.n	80062ec <HAL_TIM_PWM_Init+0x6c>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a58      	ldr	r2, [pc, #352]	; (8006404 <HAL_TIM_PWM_Init+0x184>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d022      	beq.n	80062ec <HAL_TIM_PWM_Init+0x6c>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ae:	d01d      	beq.n	80062ec <HAL_TIM_PWM_Init+0x6c>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a54      	ldr	r2, [pc, #336]	; (8006408 <HAL_TIM_PWM_Init+0x188>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d018      	beq.n	80062ec <HAL_TIM_PWM_Init+0x6c>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a53      	ldr	r2, [pc, #332]	; (800640c <HAL_TIM_PWM_Init+0x18c>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d013      	beq.n	80062ec <HAL_TIM_PWM_Init+0x6c>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a51      	ldr	r2, [pc, #324]	; (8006410 <HAL_TIM_PWM_Init+0x190>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d00e      	beq.n	80062ec <HAL_TIM_PWM_Init+0x6c>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a50      	ldr	r2, [pc, #320]	; (8006414 <HAL_TIM_PWM_Init+0x194>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d009      	beq.n	80062ec <HAL_TIM_PWM_Init+0x6c>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a4e      	ldr	r2, [pc, #312]	; (8006418 <HAL_TIM_PWM_Init+0x198>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d004      	beq.n	80062ec <HAL_TIM_PWM_Init+0x6c>
 80062e2:	f240 5113 	movw	r1, #1299	; 0x513
 80062e6:	484d      	ldr	r0, [pc, #308]	; (800641c <HAL_TIM_PWM_Init+0x19c>)
 80062e8:	f7fb feec 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d014      	beq.n	800631e <HAL_TIM_PWM_Init+0x9e>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	2b10      	cmp	r3, #16
 80062fa:	d010      	beq.n	800631e <HAL_TIM_PWM_Init+0x9e>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	2b20      	cmp	r3, #32
 8006302:	d00c      	beq.n	800631e <HAL_TIM_PWM_Init+0x9e>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	2b40      	cmp	r3, #64	; 0x40
 800630a:	d008      	beq.n	800631e <HAL_TIM_PWM_Init+0x9e>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	2b60      	cmp	r3, #96	; 0x60
 8006312:	d004      	beq.n	800631e <HAL_TIM_PWM_Init+0x9e>
 8006314:	f240 5114 	movw	r1, #1300	; 0x514
 8006318:	4840      	ldr	r0, [pc, #256]	; (800641c <HAL_TIM_PWM_Init+0x19c>)
 800631a:	f7fb fed3 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00e      	beq.n	8006344 <HAL_TIM_PWM_Init+0xc4>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800632e:	d009      	beq.n	8006344 <HAL_TIM_PWM_Init+0xc4>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006338:	d004      	beq.n	8006344 <HAL_TIM_PWM_Init+0xc4>
 800633a:	f240 5115 	movw	r1, #1301	; 0x515
 800633e:	4837      	ldr	r0, [pc, #220]	; (800641c <HAL_TIM_PWM_Init+0x19c>)
 8006340:	f7fb fec0 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d008      	beq.n	800635e <HAL_TIM_PWM_Init+0xde>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	2b80      	cmp	r3, #128	; 0x80
 8006352:	d004      	beq.n	800635e <HAL_TIM_PWM_Init+0xde>
 8006354:	f240 5116 	movw	r1, #1302	; 0x516
 8006358:	4830      	ldr	r0, [pc, #192]	; (800641c <HAL_TIM_PWM_Init+0x19c>)
 800635a:	f7fb feb3 	bl	80020c4 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006364:	b2db      	uxtb	r3, r3
 8006366:	2b00      	cmp	r3, #0
 8006368:	d111      	bne.n	800638e <HAL_TIM_PWM_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f001 fdd2 	bl	8007f1c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800637c:	2b00      	cmp	r3, #0
 800637e:	d102      	bne.n	8006386 <HAL_TIM_PWM_Init+0x106>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a27      	ldr	r2, [pc, #156]	; (8006420 <HAL_TIM_PWM_Init+0x1a0>)
 8006384:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2202      	movs	r2, #2
 8006392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	3304      	adds	r3, #4
 800639e:	4619      	mov	r1, r3
 80063a0:	4610      	mov	r0, r2
 80063a2:	f001 fa11 	bl	80077c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2201      	movs	r2, #1
 80063e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2201      	movs	r2, #1
 80063ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3708      	adds	r7, #8
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	40012c00 	.word	0x40012c00
 8006404:	40013400 	.word	0x40013400
 8006408:	40000400 	.word	0x40000400
 800640c:	40000800 	.word	0x40000800
 8006410:	40000c00 	.word	0x40000c00
 8006414:	40001000 	.word	0x40001000
 8006418:	40001400 	.word	0x40001400
 800641c:	0800ec6c 	.word	0x0800ec6c
 8006420:	08006425 	.word	0x08006425

08006424 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	bc80      	pop	{r7}
 8006434:	4770      	bx	lr
	...

08006438 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a8a      	ldr	r2, [pc, #552]	; (8006670 <HAL_TIM_PWM_Start+0x238>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d10b      	bne.n	8006464 <HAL_TIM_PWM_Start+0x2c>
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d062      	beq.n	8006518 <HAL_TIM_PWM_Start+0xe0>
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	2b04      	cmp	r3, #4
 8006456:	d05f      	beq.n	8006518 <HAL_TIM_PWM_Start+0xe0>
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	2b08      	cmp	r3, #8
 800645c:	d05c      	beq.n	8006518 <HAL_TIM_PWM_Start+0xe0>
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	2b0c      	cmp	r3, #12
 8006462:	d059      	beq.n	8006518 <HAL_TIM_PWM_Start+0xe0>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a82      	ldr	r2, [pc, #520]	; (8006674 <HAL_TIM_PWM_Start+0x23c>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d10b      	bne.n	8006486 <HAL_TIM_PWM_Start+0x4e>
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d051      	beq.n	8006518 <HAL_TIM_PWM_Start+0xe0>
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	2b04      	cmp	r3, #4
 8006478:	d04e      	beq.n	8006518 <HAL_TIM_PWM_Start+0xe0>
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	2b08      	cmp	r3, #8
 800647e:	d04b      	beq.n	8006518 <HAL_TIM_PWM_Start+0xe0>
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	2b0c      	cmp	r3, #12
 8006484:	d048      	beq.n	8006518 <HAL_TIM_PWM_Start+0xe0>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800648e:	d10b      	bne.n	80064a8 <HAL_TIM_PWM_Start+0x70>
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d040      	beq.n	8006518 <HAL_TIM_PWM_Start+0xe0>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2b04      	cmp	r3, #4
 800649a:	d03d      	beq.n	8006518 <HAL_TIM_PWM_Start+0xe0>
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	2b08      	cmp	r3, #8
 80064a0:	d03a      	beq.n	8006518 <HAL_TIM_PWM_Start+0xe0>
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b0c      	cmp	r3, #12
 80064a6:	d037      	beq.n	8006518 <HAL_TIM_PWM_Start+0xe0>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a72      	ldr	r2, [pc, #456]	; (8006678 <HAL_TIM_PWM_Start+0x240>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d10b      	bne.n	80064ca <HAL_TIM_PWM_Start+0x92>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d02f      	beq.n	8006518 <HAL_TIM_PWM_Start+0xe0>
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	2b04      	cmp	r3, #4
 80064bc:	d02c      	beq.n	8006518 <HAL_TIM_PWM_Start+0xe0>
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	2b08      	cmp	r3, #8
 80064c2:	d029      	beq.n	8006518 <HAL_TIM_PWM_Start+0xe0>
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	2b0c      	cmp	r3, #12
 80064c8:	d026      	beq.n	8006518 <HAL_TIM_PWM_Start+0xe0>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a6b      	ldr	r2, [pc, #428]	; (800667c <HAL_TIM_PWM_Start+0x244>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d10b      	bne.n	80064ec <HAL_TIM_PWM_Start+0xb4>
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d01e      	beq.n	8006518 <HAL_TIM_PWM_Start+0xe0>
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b04      	cmp	r3, #4
 80064de:	d01b      	beq.n	8006518 <HAL_TIM_PWM_Start+0xe0>
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	2b08      	cmp	r3, #8
 80064e4:	d018      	beq.n	8006518 <HAL_TIM_PWM_Start+0xe0>
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	2b0c      	cmp	r3, #12
 80064ea:	d015      	beq.n	8006518 <HAL_TIM_PWM_Start+0xe0>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a63      	ldr	r2, [pc, #396]	; (8006680 <HAL_TIM_PWM_Start+0x248>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d10b      	bne.n	800650e <HAL_TIM_PWM_Start+0xd6>
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00d      	beq.n	8006518 <HAL_TIM_PWM_Start+0xe0>
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	2b04      	cmp	r3, #4
 8006500:	d00a      	beq.n	8006518 <HAL_TIM_PWM_Start+0xe0>
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	2b08      	cmp	r3, #8
 8006506:	d007      	beq.n	8006518 <HAL_TIM_PWM_Start+0xe0>
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	2b0c      	cmp	r3, #12
 800650c:	d004      	beq.n	8006518 <HAL_TIM_PWM_Start+0xe0>
 800650e:	f240 5199 	movw	r1, #1433	; 0x599
 8006512:	485c      	ldr	r0, [pc, #368]	; (8006684 <HAL_TIM_PWM_Start+0x24c>)
 8006514:	f7fb fdd6 	bl	80020c4 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d109      	bne.n	8006532 <HAL_TIM_PWM_Start+0xfa>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b01      	cmp	r3, #1
 8006528:	bf14      	ite	ne
 800652a:	2301      	movne	r3, #1
 800652c:	2300      	moveq	r3, #0
 800652e:	b2db      	uxtb	r3, r3
 8006530:	e022      	b.n	8006578 <HAL_TIM_PWM_Start+0x140>
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	2b04      	cmp	r3, #4
 8006536:	d109      	bne.n	800654c <HAL_TIM_PWM_Start+0x114>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800653e:	b2db      	uxtb	r3, r3
 8006540:	2b01      	cmp	r3, #1
 8006542:	bf14      	ite	ne
 8006544:	2301      	movne	r3, #1
 8006546:	2300      	moveq	r3, #0
 8006548:	b2db      	uxtb	r3, r3
 800654a:	e015      	b.n	8006578 <HAL_TIM_PWM_Start+0x140>
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	2b08      	cmp	r3, #8
 8006550:	d109      	bne.n	8006566 <HAL_TIM_PWM_Start+0x12e>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b01      	cmp	r3, #1
 800655c:	bf14      	ite	ne
 800655e:	2301      	movne	r3, #1
 8006560:	2300      	moveq	r3, #0
 8006562:	b2db      	uxtb	r3, r3
 8006564:	e008      	b.n	8006578 <HAL_TIM_PWM_Start+0x140>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800656c:	b2db      	uxtb	r3, r3
 800656e:	2b01      	cmp	r3, #1
 8006570:	bf14      	ite	ne
 8006572:	2301      	movne	r3, #1
 8006574:	2300      	moveq	r3, #0
 8006576:	b2db      	uxtb	r3, r3
 8006578:	2b00      	cmp	r3, #0
 800657a:	d001      	beq.n	8006580 <HAL_TIM_PWM_Start+0x148>
  {
    return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e072      	b.n	8006666 <HAL_TIM_PWM_Start+0x22e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d104      	bne.n	8006590 <HAL_TIM_PWM_Start+0x158>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2202      	movs	r2, #2
 800658a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800658e:	e013      	b.n	80065b8 <HAL_TIM_PWM_Start+0x180>
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	2b04      	cmp	r3, #4
 8006594:	d104      	bne.n	80065a0 <HAL_TIM_PWM_Start+0x168>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2202      	movs	r2, #2
 800659a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800659e:	e00b      	b.n	80065b8 <HAL_TIM_PWM_Start+0x180>
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	2b08      	cmp	r3, #8
 80065a4:	d104      	bne.n	80065b0 <HAL_TIM_PWM_Start+0x178>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2202      	movs	r2, #2
 80065aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065ae:	e003      	b.n	80065b8 <HAL_TIM_PWM_Start+0x180>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2202      	movs	r2, #2
 80065b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2201      	movs	r2, #1
 80065be:	6839      	ldr	r1, [r7, #0]
 80065c0:	4618      	mov	r0, r3
 80065c2:	f001 fc4b 	bl	8007e5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a29      	ldr	r2, [pc, #164]	; (8006670 <HAL_TIM_PWM_Start+0x238>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d004      	beq.n	80065da <HAL_TIM_PWM_Start+0x1a2>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a27      	ldr	r2, [pc, #156]	; (8006674 <HAL_TIM_PWM_Start+0x23c>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d101      	bne.n	80065de <HAL_TIM_PWM_Start+0x1a6>
 80065da:	2301      	movs	r3, #1
 80065dc:	e000      	b.n	80065e0 <HAL_TIM_PWM_Start+0x1a8>
 80065de:	2300      	movs	r3, #0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d007      	beq.n	80065f4 <HAL_TIM_PWM_Start+0x1bc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065f2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a1d      	ldr	r2, [pc, #116]	; (8006670 <HAL_TIM_PWM_Start+0x238>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d018      	beq.n	8006630 <HAL_TIM_PWM_Start+0x1f8>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a1c      	ldr	r2, [pc, #112]	; (8006674 <HAL_TIM_PWM_Start+0x23c>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d013      	beq.n	8006630 <HAL_TIM_PWM_Start+0x1f8>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006610:	d00e      	beq.n	8006630 <HAL_TIM_PWM_Start+0x1f8>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a18      	ldr	r2, [pc, #96]	; (8006678 <HAL_TIM_PWM_Start+0x240>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d009      	beq.n	8006630 <HAL_TIM_PWM_Start+0x1f8>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a16      	ldr	r2, [pc, #88]	; (800667c <HAL_TIM_PWM_Start+0x244>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d004      	beq.n	8006630 <HAL_TIM_PWM_Start+0x1f8>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a15      	ldr	r2, [pc, #84]	; (8006680 <HAL_TIM_PWM_Start+0x248>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d111      	bne.n	8006654 <HAL_TIM_PWM_Start+0x21c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f003 0307 	and.w	r3, r3, #7
 800663a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2b06      	cmp	r3, #6
 8006640:	d010      	beq.n	8006664 <HAL_TIM_PWM_Start+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f042 0201 	orr.w	r2, r2, #1
 8006650:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006652:	e007      	b.n	8006664 <HAL_TIM_PWM_Start+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f042 0201 	orr.w	r2, r2, #1
 8006662:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	40012c00 	.word	0x40012c00
 8006674:	40013400 	.word	0x40013400
 8006678:	40000400 	.word	0x40000400
 800667c:	40000800 	.word	0x40000800
 8006680:	40000c00 	.word	0x40000c00
 8006684:	0800ec6c 	.word	0x0800ec6c

08006688 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b086      	sub	sp, #24
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d101      	bne.n	800669c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e192      	b.n	80069c2 <HAL_TIM_Encoder_Init+0x33a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a7d      	ldr	r2, [pc, #500]	; (8006898 <HAL_TIM_Encoder_Init+0x210>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d01d      	beq.n	80066e2 <HAL_TIM_Encoder_Init+0x5a>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a7c      	ldr	r2, [pc, #496]	; (800689c <HAL_TIM_Encoder_Init+0x214>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d018      	beq.n	80066e2 <HAL_TIM_Encoder_Init+0x5a>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066b8:	d013      	beq.n	80066e2 <HAL_TIM_Encoder_Init+0x5a>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a78      	ldr	r2, [pc, #480]	; (80068a0 <HAL_TIM_Encoder_Init+0x218>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d00e      	beq.n	80066e2 <HAL_TIM_Encoder_Init+0x5a>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a76      	ldr	r2, [pc, #472]	; (80068a4 <HAL_TIM_Encoder_Init+0x21c>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d009      	beq.n	80066e2 <HAL_TIM_Encoder_Init+0x5a>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a75      	ldr	r2, [pc, #468]	; (80068a8 <HAL_TIM_Encoder_Init+0x220>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d004      	beq.n	80066e2 <HAL_TIM_Encoder_Init+0x5a>
 80066d8:	f640 318e 	movw	r1, #2958	; 0xb8e
 80066dc:	4873      	ldr	r0, [pc, #460]	; (80068ac <HAL_TIM_Encoder_Init+0x224>)
 80066de:	f7fb fcf1 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d014      	beq.n	8006714 <HAL_TIM_Encoder_Init+0x8c>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	2b10      	cmp	r3, #16
 80066f0:	d010      	beq.n	8006714 <HAL_TIM_Encoder_Init+0x8c>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	2b20      	cmp	r3, #32
 80066f8:	d00c      	beq.n	8006714 <HAL_TIM_Encoder_Init+0x8c>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	2b40      	cmp	r3, #64	; 0x40
 8006700:	d008      	beq.n	8006714 <HAL_TIM_Encoder_Init+0x8c>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	2b60      	cmp	r3, #96	; 0x60
 8006708:	d004      	beq.n	8006714 <HAL_TIM_Encoder_Init+0x8c>
 800670a:	f640 318f 	movw	r1, #2959	; 0xb8f
 800670e:	4867      	ldr	r0, [pc, #412]	; (80068ac <HAL_TIM_Encoder_Init+0x224>)
 8006710:	f7fb fcd8 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00e      	beq.n	800673a <HAL_TIM_Encoder_Init+0xb2>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006724:	d009      	beq.n	800673a <HAL_TIM_Encoder_Init+0xb2>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800672e:	d004      	beq.n	800673a <HAL_TIM_Encoder_Init+0xb2>
 8006730:	f44f 6139 	mov.w	r1, #2960	; 0xb90
 8006734:	485d      	ldr	r0, [pc, #372]	; (80068ac <HAL_TIM_Encoder_Init+0x224>)
 8006736:	f7fb fcc5 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	699b      	ldr	r3, [r3, #24]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d008      	beq.n	8006754 <HAL_TIM_Encoder_Init+0xcc>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	2b80      	cmp	r3, #128	; 0x80
 8006748:	d004      	beq.n	8006754 <HAL_TIM_Encoder_Init+0xcc>
 800674a:	f640 3191 	movw	r1, #2961	; 0xb91
 800674e:	4857      	ldr	r0, [pc, #348]	; (80068ac <HAL_TIM_Encoder_Init+0x224>)
 8006750:	f7fb fcb8 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2b01      	cmp	r3, #1
 800675a:	d00c      	beq.n	8006776 <HAL_TIM_Encoder_Init+0xee>
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2b02      	cmp	r3, #2
 8006762:	d008      	beq.n	8006776 <HAL_TIM_Encoder_Init+0xee>
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2b03      	cmp	r3, #3
 800676a:	d004      	beq.n	8006776 <HAL_TIM_Encoder_Init+0xee>
 800676c:	f640 3192 	movw	r1, #2962	; 0xb92
 8006770:	484e      	ldr	r0, [pc, #312]	; (80068ac <HAL_TIM_Encoder_Init+0x224>)
 8006772:	f7fb fca7 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	2b01      	cmp	r3, #1
 800677c:	d00c      	beq.n	8006798 <HAL_TIM_Encoder_Init+0x110>
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	2b02      	cmp	r3, #2
 8006784:	d008      	beq.n	8006798 <HAL_TIM_Encoder_Init+0x110>
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	2b03      	cmp	r3, #3
 800678c:	d004      	beq.n	8006798 <HAL_TIM_Encoder_Init+0x110>
 800678e:	f640 3193 	movw	r1, #2963	; 0xb93
 8006792:	4846      	ldr	r0, [pc, #280]	; (80068ac <HAL_TIM_Encoder_Init+0x224>)
 8006794:	f7fb fc96 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	2b01      	cmp	r3, #1
 800679e:	d00c      	beq.n	80067ba <HAL_TIM_Encoder_Init+0x132>
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d008      	beq.n	80067ba <HAL_TIM_Encoder_Init+0x132>
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	2b03      	cmp	r3, #3
 80067ae:	d004      	beq.n	80067ba <HAL_TIM_Encoder_Init+0x132>
 80067b0:	f640 3194 	movw	r1, #2964	; 0xb94
 80067b4:	483d      	ldr	r0, [pc, #244]	; (80068ac <HAL_TIM_Encoder_Init+0x224>)
 80067b6:	f7fb fc85 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d008      	beq.n	80067d4 <HAL_TIM_Encoder_Init+0x14c>
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	2b02      	cmp	r3, #2
 80067c8:	d004      	beq.n	80067d4 <HAL_TIM_Encoder_Init+0x14c>
 80067ca:	f640 3195 	movw	r1, #2965	; 0xb95
 80067ce:	4837      	ldr	r0, [pc, #220]	; (80068ac <HAL_TIM_Encoder_Init+0x224>)
 80067d0:	f7fb fc78 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d008      	beq.n	80067ee <HAL_TIM_Encoder_Init+0x166>
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d004      	beq.n	80067ee <HAL_TIM_Encoder_Init+0x166>
 80067e4:	f640 3196 	movw	r1, #2966	; 0xb96
 80067e8:	4830      	ldr	r0, [pc, #192]	; (80068ac <HAL_TIM_Encoder_Init+0x224>)
 80067ea:	f7fb fc6b 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d010      	beq.n	8006818 <HAL_TIM_Encoder_Init+0x190>
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	2b04      	cmp	r3, #4
 80067fc:	d00c      	beq.n	8006818 <HAL_TIM_Encoder_Init+0x190>
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	2b08      	cmp	r3, #8
 8006804:	d008      	beq.n	8006818 <HAL_TIM_Encoder_Init+0x190>
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	2b0c      	cmp	r3, #12
 800680c:	d004      	beq.n	8006818 <HAL_TIM_Encoder_Init+0x190>
 800680e:	f640 3197 	movw	r1, #2967	; 0xb97
 8006812:	4826      	ldr	r0, [pc, #152]	; (80068ac <HAL_TIM_Encoder_Init+0x224>)
 8006814:	f7fb fc56 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	69db      	ldr	r3, [r3, #28]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d010      	beq.n	8006842 <HAL_TIM_Encoder_Init+0x1ba>
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	69db      	ldr	r3, [r3, #28]
 8006824:	2b04      	cmp	r3, #4
 8006826:	d00c      	beq.n	8006842 <HAL_TIM_Encoder_Init+0x1ba>
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	69db      	ldr	r3, [r3, #28]
 800682c:	2b08      	cmp	r3, #8
 800682e:	d008      	beq.n	8006842 <HAL_TIM_Encoder_Init+0x1ba>
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	69db      	ldr	r3, [r3, #28]
 8006834:	2b0c      	cmp	r3, #12
 8006836:	d004      	beq.n	8006842 <HAL_TIM_Encoder_Init+0x1ba>
 8006838:	f640 3198 	movw	r1, #2968	; 0xb98
 800683c:	481b      	ldr	r0, [pc, #108]	; (80068ac <HAL_TIM_Encoder_Init+0x224>)
 800683e:	f7fb fc41 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	2b0f      	cmp	r3, #15
 8006848:	d904      	bls.n	8006854 <HAL_TIM_Encoder_Init+0x1cc>
 800684a:	f640 3199 	movw	r1, #2969	; 0xb99
 800684e:	4817      	ldr	r0, [pc, #92]	; (80068ac <HAL_TIM_Encoder_Init+0x224>)
 8006850:	f7fb fc38 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	6a1b      	ldr	r3, [r3, #32]
 8006858:	2b0f      	cmp	r3, #15
 800685a:	d904      	bls.n	8006866 <HAL_TIM_Encoder_Init+0x1de>
 800685c:	f640 319a 	movw	r1, #2970	; 0xb9a
 8006860:	4812      	ldr	r0, [pc, #72]	; (80068ac <HAL_TIM_Encoder_Init+0x224>)
 8006862:	f7fb fc2f 	bl	80020c4 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800686c:	b2db      	uxtb	r3, r3
 800686e:	2b00      	cmp	r3, #0
 8006870:	d120      	bne.n	80068b4 <HAL_TIM_Encoder_Init+0x22c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f001 fb4e 	bl	8007f1c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006884:	2b00      	cmp	r3, #0
 8006886:	d102      	bne.n	800688e <HAL_TIM_Encoder_Init+0x206>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a09      	ldr	r2, [pc, #36]	; (80068b0 <HAL_TIM_Encoder_Init+0x228>)
 800688c:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	4798      	blx	r3
 8006896:	e00d      	b.n	80068b4 <HAL_TIM_Encoder_Init+0x22c>
 8006898:	40012c00 	.word	0x40012c00
 800689c:	40013400 	.word	0x40013400
 80068a0:	40000400 	.word	0x40000400
 80068a4:	40000800 	.word	0x40000800
 80068a8:	40000c00 	.word	0x40000c00
 80068ac:	0800ec6c 	.word	0x0800ec6c
 80068b0:	080022d1 	.word	0x080022d1
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2202      	movs	r2, #2
 80068b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	6812      	ldr	r2, [r2, #0]
 80068c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068ca:	f023 0307 	bic.w	r3, r3, #7
 80068ce:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	3304      	adds	r3, #4
 80068d8:	4619      	mov	r1, r3
 80068da:	4610      	mov	r0, r2
 80068dc:	f000 ff74 	bl	80077c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	699b      	ldr	r3, [r3, #24]
 80068ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	6a1b      	ldr	r3, [r3, #32]
 80068f6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	697a      	ldr	r2, [r7, #20]
 80068fe:	4313      	orrs	r3, r2
 8006900:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006908:	f023 0303 	bic.w	r3, r3, #3
 800690c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	689a      	ldr	r2, [r3, #8]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	021b      	lsls	r3, r3, #8
 8006918:	4313      	orrs	r3, r2
 800691a:	693a      	ldr	r2, [r7, #16]
 800691c:	4313      	orrs	r3, r2
 800691e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006926:	f023 030c 	bic.w	r3, r3, #12
 800692a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006932:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006936:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	68da      	ldr	r2, [r3, #12]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	69db      	ldr	r3, [r3, #28]
 8006940:	021b      	lsls	r3, r3, #8
 8006942:	4313      	orrs	r3, r2
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	4313      	orrs	r3, r2
 8006948:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	011a      	lsls	r2, r3, #4
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	6a1b      	ldr	r3, [r3, #32]
 8006954:	031b      	lsls	r3, r3, #12
 8006956:	4313      	orrs	r3, r2
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	4313      	orrs	r3, r2
 800695c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006964:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	685a      	ldr	r2, [r3, #4]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	011b      	lsls	r3, r3, #4
 8006970:	4313      	orrs	r3, r2
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	4313      	orrs	r3, r2
 8006976:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	697a      	ldr	r2, [r7, #20]
 800697e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3718      	adds	r7, #24
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop

080069cc <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069dc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069e4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80069ec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80069f4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a5d      	ldr	r2, [pc, #372]	; (8006b70 <HAL_TIM_Encoder_Start_IT+0x1a4>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d01d      	beq.n	8006a3c <HAL_TIM_Encoder_Start_IT+0x70>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a5b      	ldr	r2, [pc, #364]	; (8006b74 <HAL_TIM_Encoder_Start_IT+0x1a8>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d018      	beq.n	8006a3c <HAL_TIM_Encoder_Start_IT+0x70>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a12:	d013      	beq.n	8006a3c <HAL_TIM_Encoder_Start_IT+0x70>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a57      	ldr	r2, [pc, #348]	; (8006b78 <HAL_TIM_Encoder_Start_IT+0x1ac>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d00e      	beq.n	8006a3c <HAL_TIM_Encoder_Start_IT+0x70>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a56      	ldr	r2, [pc, #344]	; (8006b7c <HAL_TIM_Encoder_Start_IT+0x1b0>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d009      	beq.n	8006a3c <HAL_TIM_Encoder_Start_IT+0x70>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a54      	ldr	r2, [pc, #336]	; (8006b80 <HAL_TIM_Encoder_Start_IT+0x1b4>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d004      	beq.n	8006a3c <HAL_TIM_Encoder_Start_IT+0x70>
 8006a32:	f640 41e4 	movw	r1, #3300	; 0xce4
 8006a36:	4853      	ldr	r0, [pc, #332]	; (8006b84 <HAL_TIM_Encoder_Start_IT+0x1b8>)
 8006a38:	f7fb fb44 	bl	80020c4 <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d110      	bne.n	8006a64 <HAL_TIM_Encoder_Start_IT+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a42:	7bfb      	ldrb	r3, [r7, #15]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d102      	bne.n	8006a4e <HAL_TIM_Encoder_Start_IT+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a48:	7b7b      	ldrb	r3, [r7, #13]
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d001      	beq.n	8006a52 <HAL_TIM_Encoder_Start_IT+0x86>
    {
      return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e089      	b.n	8006b66 <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2202      	movs	r2, #2
 8006a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2202      	movs	r2, #2
 8006a5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a62:	e031      	b.n	8006ac8 <HAL_TIM_Encoder_Start_IT+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	2b04      	cmp	r3, #4
 8006a68:	d110      	bne.n	8006a8c <HAL_TIM_Encoder_Start_IT+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a6a:	7bbb      	ldrb	r3, [r7, #14]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d102      	bne.n	8006a76 <HAL_TIM_Encoder_Start_IT+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a70:	7b3b      	ldrb	r3, [r7, #12]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d001      	beq.n	8006a7a <HAL_TIM_Encoder_Start_IT+0xae>
    {
      return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e075      	b.n	8006b66 <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2202      	movs	r2, #2
 8006a7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2202      	movs	r2, #2
 8006a86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a8a:	e01d      	b.n	8006ac8 <HAL_TIM_Encoder_Start_IT+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a8c:	7bfb      	ldrb	r3, [r7, #15]
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	d108      	bne.n	8006aa4 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a92:	7bbb      	ldrb	r3, [r7, #14]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d105      	bne.n	8006aa4 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a98:	7b7b      	ldrb	r3, [r7, #13]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d102      	bne.n	8006aa4 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a9e:	7b3b      	ldrb	r3, [r7, #12]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d001      	beq.n	8006aa8 <HAL_TIM_Encoder_Start_IT+0xdc>
    {
      return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e05e      	b.n	8006b66 <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2202      	movs	r2, #2
 8006aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2202      	movs	r2, #2
 8006abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2202      	movs	r2, #2
 8006ac4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d003      	beq.n	8006ad6 <HAL_TIM_Encoder_Start_IT+0x10a>
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	2b04      	cmp	r3, #4
 8006ad2:	d010      	beq.n	8006af6 <HAL_TIM_Encoder_Start_IT+0x12a>
 8006ad4:	e01f      	b.n	8006b16 <HAL_TIM_Encoder_Start_IT+0x14a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2201      	movs	r2, #1
 8006adc:	2100      	movs	r1, #0
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f001 f9bc 	bl	8007e5c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68da      	ldr	r2, [r3, #12]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f042 0202 	orr.w	r2, r2, #2
 8006af2:	60da      	str	r2, [r3, #12]
      break;
 8006af4:	e02e      	b.n	8006b54 <HAL_TIM_Encoder_Start_IT+0x188>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2201      	movs	r2, #1
 8006afc:	2104      	movs	r1, #4
 8006afe:	4618      	mov	r0, r3
 8006b00:	f001 f9ac 	bl	8007e5c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68da      	ldr	r2, [r3, #12]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f042 0204 	orr.w	r2, r2, #4
 8006b12:	60da      	str	r2, [r3, #12]
      break;
 8006b14:	e01e      	b.n	8006b54 <HAL_TIM_Encoder_Start_IT+0x188>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f001 f99c 	bl	8007e5c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	2104      	movs	r1, #4
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f001 f995 	bl	8007e5c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68da      	ldr	r2, [r3, #12]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f042 0202 	orr.w	r2, r2, #2
 8006b40:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68da      	ldr	r2, [r3, #12]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f042 0204 	orr.w	r2, r2, #4
 8006b50:	60da      	str	r2, [r3, #12]
      break;
 8006b52:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f042 0201 	orr.w	r2, r2, #1
 8006b62:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	40012c00 	.word	0x40012c00
 8006b74:	40013400 	.word	0x40013400
 8006b78:	40000400 	.word	0x40000400
 8006b7c:	40000800 	.word	0x40000800
 8006b80:	40000c00 	.word	0x40000c00
 8006b84:	0800ec6c 	.word	0x0800ec6c

08006b88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	f003 0302 	and.w	r3, r3, #2
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d128      	bne.n	8006bf0 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	f003 0302 	and.w	r3, r3, #2
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d121      	bne.n	8006bf0 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f06f 0202 	mvn.w	r2, #2
 8006bb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	f003 0303 	and.w	r3, r3, #3
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d005      	beq.n	8006bd6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	4798      	blx	r3
 8006bd4:	e009      	b.n	8006bea <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	f003 0304 	and.w	r3, r3, #4
 8006bfa:	2b04      	cmp	r3, #4
 8006bfc:	d128      	bne.n	8006c50 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	f003 0304 	and.w	r3, r3, #4
 8006c08:	2b04      	cmp	r3, #4
 8006c0a:	d121      	bne.n	8006c50 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f06f 0204 	mvn.w	r2, #4
 8006c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2202      	movs	r2, #2
 8006c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d005      	beq.n	8006c36 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	4798      	blx	r3
 8006c34:	e009      	b.n	8006c4a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	f003 0308 	and.w	r3, r3, #8
 8006c5a:	2b08      	cmp	r3, #8
 8006c5c:	d128      	bne.n	8006cb0 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	f003 0308 	and.w	r3, r3, #8
 8006c68:	2b08      	cmp	r3, #8
 8006c6a:	d121      	bne.n	8006cb0 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f06f 0208 	mvn.w	r2, #8
 8006c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2204      	movs	r2, #4
 8006c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	69db      	ldr	r3, [r3, #28]
 8006c82:	f003 0303 	and.w	r3, r3, #3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d005      	beq.n	8006c96 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	4798      	blx	r3
 8006c94:	e009      	b.n	8006caa <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	f003 0310 	and.w	r3, r3, #16
 8006cba:	2b10      	cmp	r3, #16
 8006cbc:	d128      	bne.n	8006d10 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	f003 0310 	and.w	r3, r3, #16
 8006cc8:	2b10      	cmp	r3, #16
 8006cca:	d121      	bne.n	8006d10 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f06f 0210 	mvn.w	r2, #16
 8006cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2208      	movs	r2, #8
 8006cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	69db      	ldr	r3, [r3, #28]
 8006ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d005      	beq.n	8006cf6 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	4798      	blx	r3
 8006cf4:	e009      	b.n	8006d0a <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d110      	bne.n	8006d40 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d109      	bne.n	8006d40 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f06f 0201 	mvn.w	r2, #1
 8006d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d4a:	2b80      	cmp	r3, #128	; 0x80
 8006d4c:	d110      	bne.n	8006d70 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d58:	2b80      	cmp	r3, #128	; 0x80
 8006d5a:	d109      	bne.n	8006d70 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d7a:	2b40      	cmp	r3, #64	; 0x40
 8006d7c:	d110      	bne.n	8006da0 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d88:	2b40      	cmp	r3, #64	; 0x40
 8006d8a:	d109      	bne.n	8006da0 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	f003 0320 	and.w	r3, r3, #32
 8006daa:	2b20      	cmp	r3, #32
 8006dac:	d110      	bne.n	8006dd0 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	f003 0320 	and.w	r3, r3, #32
 8006db8:	2b20      	cmp	r3, #32
 8006dba:	d109      	bne.n	8006dd0 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f06f 0220 	mvn.w	r2, #32
 8006dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006dd0:	bf00      	nop
 8006dd2:	3708      	adds	r7, #8
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d010      	beq.n	8006e0c <HAL_TIM_PWM_ConfigChannel+0x34>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2b04      	cmp	r3, #4
 8006dee:	d00d      	beq.n	8006e0c <HAL_TIM_PWM_ConfigChannel+0x34>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2b08      	cmp	r3, #8
 8006df4:	d00a      	beq.n	8006e0c <HAL_TIM_PWM_ConfigChannel+0x34>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b0c      	cmp	r3, #12
 8006dfa:	d007      	beq.n	8006e0c <HAL_TIM_PWM_ConfigChannel+0x34>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2b3c      	cmp	r3, #60	; 0x3c
 8006e00:	d004      	beq.n	8006e0c <HAL_TIM_PWM_ConfigChannel+0x34>
 8006e02:	f241 0127 	movw	r1, #4135	; 0x1027
 8006e06:	4890      	ldr	r0, [pc, #576]	; (8007048 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006e08:	f7fb f95c 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2b60      	cmp	r3, #96	; 0x60
 8006e12:	d008      	beq.n	8006e26 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	2b70      	cmp	r3, #112	; 0x70
 8006e1a:	d004      	beq.n	8006e26 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8006e1c:	f241 0128 	movw	r1, #4136	; 0x1028
 8006e20:	4889      	ldr	r0, [pc, #548]	; (8007048 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006e22:	f7fb f94f 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d008      	beq.n	8006e40 <HAL_TIM_PWM_ConfigChannel+0x68>
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d004      	beq.n	8006e40 <HAL_TIM_PWM_ConfigChannel+0x68>
 8006e36:	f241 0129 	movw	r1, #4137	; 0x1029
 8006e3a:	4883      	ldr	r0, [pc, #524]	; (8007048 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006e3c:	f7fb f942 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d008      	beq.n	8006e5a <HAL_TIM_PWM_ConfigChannel+0x82>
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	2b04      	cmp	r3, #4
 8006e4e:	d004      	beq.n	8006e5a <HAL_TIM_PWM_ConfigChannel+0x82>
 8006e50:	f241 012a 	movw	r1, #4138	; 0x102a
 8006e54:	487c      	ldr	r0, [pc, #496]	; (8007048 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006e56:	f7fb f935 	bl	80020c4 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d101      	bne.n	8006e68 <HAL_TIM_PWM_ConfigChannel+0x90>
 8006e64:	2302      	movs	r3, #2
 8006e66:	e145      	b.n	80070f4 <HAL_TIM_PWM_ConfigChannel+0x31c>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2b0c      	cmp	r3, #12
 8006e74:	f200 8138 	bhi.w	80070e8 <HAL_TIM_PWM_ConfigChannel+0x310>
 8006e78:	a201      	add	r2, pc, #4	; (adr r2, 8006e80 <HAL_TIM_PWM_ConfigChannel+0xa8>)
 8006e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7e:	bf00      	nop
 8006e80:	08006eb5 	.word	0x08006eb5
 8006e84:	080070e9 	.word	0x080070e9
 8006e88:	080070e9 	.word	0x080070e9
 8006e8c:	080070e9 	.word	0x080070e9
 8006e90:	08006f3b 	.word	0x08006f3b
 8006e94:	080070e9 	.word	0x080070e9
 8006e98:	080070e9 	.word	0x080070e9
 8006e9c:	080070e9 	.word	0x080070e9
 8006ea0:	08006fc3 	.word	0x08006fc3
 8006ea4:	080070e9 	.word	0x080070e9
 8006ea8:	080070e9 	.word	0x080070e9
 8006eac:	080070e9 	.word	0x080070e9
 8006eb0:	08007061 	.word	0x08007061
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a64      	ldr	r2, [pc, #400]	; (800704c <HAL_TIM_PWM_ConfigChannel+0x274>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d01d      	beq.n	8006efa <HAL_TIM_PWM_ConfigChannel+0x122>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a63      	ldr	r2, [pc, #396]	; (8007050 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d018      	beq.n	8006efa <HAL_TIM_PWM_ConfigChannel+0x122>
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ed0:	d013      	beq.n	8006efa <HAL_TIM_PWM_ConfigChannel+0x122>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a5f      	ldr	r2, [pc, #380]	; (8007054 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d00e      	beq.n	8006efa <HAL_TIM_PWM_ConfigChannel+0x122>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a5d      	ldr	r2, [pc, #372]	; (8007058 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d009      	beq.n	8006efa <HAL_TIM_PWM_ConfigChannel+0x122>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a5c      	ldr	r2, [pc, #368]	; (800705c <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d004      	beq.n	8006efa <HAL_TIM_PWM_ConfigChannel+0x122>
 8006ef0:	f241 0134 	movw	r1, #4148	; 0x1034
 8006ef4:	4854      	ldr	r0, [pc, #336]	; (8007048 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006ef6:	f7fb f8e5 	bl	80020c4 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68b9      	ldr	r1, [r7, #8]
 8006f00:	4618      	mov	r0, r3
 8006f02:	f000 fcdb 	bl	80078bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	699a      	ldr	r2, [r3, #24]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f042 0208 	orr.w	r2, r2, #8
 8006f14:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	699a      	ldr	r2, [r3, #24]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f022 0204 	bic.w	r2, r2, #4
 8006f24:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	6999      	ldr	r1, [r3, #24]
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	691a      	ldr	r2, [r3, #16]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	430a      	orrs	r2, r1
 8006f36:	619a      	str	r2, [r3, #24]
      break;
 8006f38:	e0d7      	b.n	80070ea <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a43      	ldr	r2, [pc, #268]	; (800704c <HAL_TIM_PWM_ConfigChannel+0x274>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d01d      	beq.n	8006f80 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a41      	ldr	r2, [pc, #260]	; (8007050 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d018      	beq.n	8006f80 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f56:	d013      	beq.n	8006f80 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a3d      	ldr	r2, [pc, #244]	; (8007054 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d00e      	beq.n	8006f80 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a3c      	ldr	r2, [pc, #240]	; (8007058 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d009      	beq.n	8006f80 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a3a      	ldr	r2, [pc, #232]	; (800705c <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d004      	beq.n	8006f80 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006f76:	f241 0145 	movw	r1, #4165	; 0x1045
 8006f7a:	4833      	ldr	r0, [pc, #204]	; (8007048 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006f7c:	f7fb f8a2 	bl	80020c4 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68b9      	ldr	r1, [r7, #8]
 8006f86:	4618      	mov	r0, r3
 8006f88:	f000 fd32 	bl	80079f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	699a      	ldr	r2, [r3, #24]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	699a      	ldr	r2, [r3, #24]
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006faa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	6999      	ldr	r1, [r3, #24]
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	021a      	lsls	r2, r3, #8
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	430a      	orrs	r2, r1
 8006fbe:	619a      	str	r2, [r3, #24]
      break;
 8006fc0:	e093      	b.n	80070ea <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a21      	ldr	r2, [pc, #132]	; (800704c <HAL_TIM_PWM_ConfigChannel+0x274>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d01d      	beq.n	8007008 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a1f      	ldr	r2, [pc, #124]	; (8007050 <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d018      	beq.n	8007008 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fde:	d013      	beq.n	8007008 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a1b      	ldr	r2, [pc, #108]	; (8007054 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d00e      	beq.n	8007008 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a1a      	ldr	r2, [pc, #104]	; (8007058 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d009      	beq.n	8007008 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a18      	ldr	r2, [pc, #96]	; (800705c <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d004      	beq.n	8007008 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006ffe:	f241 0156 	movw	r1, #4182	; 0x1056
 8007002:	4811      	ldr	r0, [pc, #68]	; (8007048 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8007004:	f7fb f85e 	bl	80020c4 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68b9      	ldr	r1, [r7, #8]
 800700e:	4618      	mov	r0, r3
 8007010:	f000 fd8c 	bl	8007b2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	69da      	ldr	r2, [r3, #28]
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f042 0208 	orr.w	r2, r2, #8
 8007022:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	69da      	ldr	r2, [r3, #28]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f022 0204 	bic.w	r2, r2, #4
 8007032:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	69d9      	ldr	r1, [r3, #28]
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	691a      	ldr	r2, [r3, #16]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	430a      	orrs	r2, r1
 8007044:	61da      	str	r2, [r3, #28]
      break;
 8007046:	e050      	b.n	80070ea <HAL_TIM_PWM_ConfigChannel+0x312>
 8007048:	0800ec6c 	.word	0x0800ec6c
 800704c:	40012c00 	.word	0x40012c00
 8007050:	40013400 	.word	0x40013400
 8007054:	40000400 	.word	0x40000400
 8007058:	40000800 	.word	0x40000800
 800705c:	40000c00 	.word	0x40000c00
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a25      	ldr	r2, [pc, #148]	; (80070fc <HAL_TIM_PWM_ConfigChannel+0x324>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d01d      	beq.n	80070a6 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a24      	ldr	r2, [pc, #144]	; (8007100 <HAL_TIM_PWM_ConfigChannel+0x328>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d018      	beq.n	80070a6 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800707c:	d013      	beq.n	80070a6 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a20      	ldr	r2, [pc, #128]	; (8007104 <HAL_TIM_PWM_ConfigChannel+0x32c>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d00e      	beq.n	80070a6 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a1e      	ldr	r2, [pc, #120]	; (8007108 <HAL_TIM_PWM_ConfigChannel+0x330>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d009      	beq.n	80070a6 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a1d      	ldr	r2, [pc, #116]	; (800710c <HAL_TIM_PWM_ConfigChannel+0x334>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d004      	beq.n	80070a6 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 800709c:	f241 0167 	movw	r1, #4199	; 0x1067
 80070a0:	481b      	ldr	r0, [pc, #108]	; (8007110 <HAL_TIM_PWM_ConfigChannel+0x338>)
 80070a2:	f7fb f80f 	bl	80020c4 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68b9      	ldr	r1, [r7, #8]
 80070ac:	4618      	mov	r0, r3
 80070ae:	f000 fddb 	bl	8007c68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	69da      	ldr	r2, [r3, #28]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	69da      	ldr	r2, [r3, #28]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	69d9      	ldr	r1, [r3, #28]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	021a      	lsls	r2, r3, #8
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	430a      	orrs	r2, r1
 80070e4:	61da      	str	r2, [r3, #28]
      break;
 80070e6:	e000      	b.n	80070ea <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    default:
      break;
 80070e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	40012c00 	.word	0x40012c00
 8007100:	40013400 	.word	0x40013400
 8007104:	40000400 	.word	0x40000400
 8007108:	40000800 	.word	0x40000800
 800710c:	40000c00 	.word	0x40000c00
 8007110:	0800ec6c 	.word	0x0800ec6c

08007114 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007124:	2b01      	cmp	r3, #1
 8007126:	d101      	bne.n	800712c <HAL_TIM_ConfigClockSource+0x18>
 8007128:	2302      	movs	r3, #2
 800712a:	e2f5      	b.n	8007718 <HAL_TIM_ConfigClockSource+0x604>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2202      	movs	r2, #2
 8007138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007144:	d029      	beq.n	800719a <HAL_TIM_ConfigClockSource+0x86>
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800714e:	d024      	beq.n	800719a <HAL_TIM_ConfigClockSource+0x86>
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d020      	beq.n	800719a <HAL_TIM_ConfigClockSource+0x86>
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2b10      	cmp	r3, #16
 800715e:	d01c      	beq.n	800719a <HAL_TIM_ConfigClockSource+0x86>
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2b20      	cmp	r3, #32
 8007166:	d018      	beq.n	800719a <HAL_TIM_ConfigClockSource+0x86>
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b30      	cmp	r3, #48	; 0x30
 800716e:	d014      	beq.n	800719a <HAL_TIM_ConfigClockSource+0x86>
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2b40      	cmp	r3, #64	; 0x40
 8007176:	d010      	beq.n	800719a <HAL_TIM_ConfigClockSource+0x86>
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2b50      	cmp	r3, #80	; 0x50
 800717e:	d00c      	beq.n	800719a <HAL_TIM_ConfigClockSource+0x86>
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2b60      	cmp	r3, #96	; 0x60
 8007186:	d008      	beq.n	800719a <HAL_TIM_ConfigClockSource+0x86>
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b70      	cmp	r3, #112	; 0x70
 800718e:	d004      	beq.n	800719a <HAL_TIM_ConfigClockSource+0x86>
 8007190:	f241 4132 	movw	r1, #5170	; 0x1432
 8007194:	487c      	ldr	r0, [pc, #496]	; (8007388 <HAL_TIM_ConfigClockSource+0x274>)
 8007196:	f7fa ff95 	bl	80020c4 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80071a8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071b0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071c2:	f000 80f1 	beq.w	80073a8 <HAL_TIM_ConfigClockSource+0x294>
 80071c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071ca:	f200 8299 	bhi.w	8007700 <HAL_TIM_ConfigClockSource+0x5ec>
 80071ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071d2:	d02d      	beq.n	8007230 <HAL_TIM_ConfigClockSource+0x11c>
 80071d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071d8:	f200 8292 	bhi.w	8007700 <HAL_TIM_ConfigClockSource+0x5ec>
 80071dc:	2b70      	cmp	r3, #112	; 0x70
 80071de:	d05d      	beq.n	800729c <HAL_TIM_ConfigClockSource+0x188>
 80071e0:	2b70      	cmp	r3, #112	; 0x70
 80071e2:	f200 828d 	bhi.w	8007700 <HAL_TIM_ConfigClockSource+0x5ec>
 80071e6:	2b60      	cmp	r3, #96	; 0x60
 80071e8:	f000 81a5 	beq.w	8007536 <HAL_TIM_ConfigClockSource+0x422>
 80071ec:	2b60      	cmp	r3, #96	; 0x60
 80071ee:	f200 8287 	bhi.w	8007700 <HAL_TIM_ConfigClockSource+0x5ec>
 80071f2:	2b50      	cmp	r3, #80	; 0x50
 80071f4:	f000 8149 	beq.w	800748a <HAL_TIM_ConfigClockSource+0x376>
 80071f8:	2b50      	cmp	r3, #80	; 0x50
 80071fa:	f200 8281 	bhi.w	8007700 <HAL_TIM_ConfigClockSource+0x5ec>
 80071fe:	2b40      	cmp	r3, #64	; 0x40
 8007200:	f000 81fc 	beq.w	80075fc <HAL_TIM_ConfigClockSource+0x4e8>
 8007204:	2b40      	cmp	r3, #64	; 0x40
 8007206:	f200 827b 	bhi.w	8007700 <HAL_TIM_ConfigClockSource+0x5ec>
 800720a:	2b30      	cmp	r3, #48	; 0x30
 800720c:	f000 824c 	beq.w	80076a8 <HAL_TIM_ConfigClockSource+0x594>
 8007210:	2b30      	cmp	r3, #48	; 0x30
 8007212:	f200 8275 	bhi.w	8007700 <HAL_TIM_ConfigClockSource+0x5ec>
 8007216:	2b20      	cmp	r3, #32
 8007218:	f000 8246 	beq.w	80076a8 <HAL_TIM_ConfigClockSource+0x594>
 800721c:	2b20      	cmp	r3, #32
 800721e:	f200 826f 	bhi.w	8007700 <HAL_TIM_ConfigClockSource+0x5ec>
 8007222:	2b00      	cmp	r3, #0
 8007224:	f000 8240 	beq.w	80076a8 <HAL_TIM_ConfigClockSource+0x594>
 8007228:	2b10      	cmp	r3, #16
 800722a:	f000 823d 	beq.w	80076a8 <HAL_TIM_ConfigClockSource+0x594>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800722e:	e267      	b.n	8007700 <HAL_TIM_ConfigClockSource+0x5ec>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a55      	ldr	r2, [pc, #340]	; (800738c <HAL_TIM_ConfigClockSource+0x278>)
 8007236:	4293      	cmp	r3, r2
 8007238:	f000 8264 	beq.w	8007704 <HAL_TIM_ConfigClockSource+0x5f0>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a53      	ldr	r2, [pc, #332]	; (8007390 <HAL_TIM_ConfigClockSource+0x27c>)
 8007242:	4293      	cmp	r3, r2
 8007244:	f000 825e 	beq.w	8007704 <HAL_TIM_ConfigClockSource+0x5f0>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007250:	f000 8258 	beq.w	8007704 <HAL_TIM_ConfigClockSource+0x5f0>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a4e      	ldr	r2, [pc, #312]	; (8007394 <HAL_TIM_ConfigClockSource+0x280>)
 800725a:	4293      	cmp	r3, r2
 800725c:	f000 8252 	beq.w	8007704 <HAL_TIM_ConfigClockSource+0x5f0>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a4c      	ldr	r2, [pc, #304]	; (8007398 <HAL_TIM_ConfigClockSource+0x284>)
 8007266:	4293      	cmp	r3, r2
 8007268:	f000 824c 	beq.w	8007704 <HAL_TIM_ConfigClockSource+0x5f0>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a4a      	ldr	r2, [pc, #296]	; (800739c <HAL_TIM_ConfigClockSource+0x288>)
 8007272:	4293      	cmp	r3, r2
 8007274:	f000 8246 	beq.w	8007704 <HAL_TIM_ConfigClockSource+0x5f0>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a48      	ldr	r2, [pc, #288]	; (80073a0 <HAL_TIM_ConfigClockSource+0x28c>)
 800727e:	4293      	cmp	r3, r2
 8007280:	f000 8240 	beq.w	8007704 <HAL_TIM_ConfigClockSource+0x5f0>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a46      	ldr	r2, [pc, #280]	; (80073a4 <HAL_TIM_ConfigClockSource+0x290>)
 800728a:	4293      	cmp	r3, r2
 800728c:	f000 823a 	beq.w	8007704 <HAL_TIM_ConfigClockSource+0x5f0>
 8007290:	f241 413e 	movw	r1, #5182	; 0x143e
 8007294:	483c      	ldr	r0, [pc, #240]	; (8007388 <HAL_TIM_ConfigClockSource+0x274>)
 8007296:	f7fa ff15 	bl	80020c4 <assert_failed>
      break;
 800729a:	e233      	b.n	8007704 <HAL_TIM_ConfigClockSource+0x5f0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a3a      	ldr	r2, [pc, #232]	; (800738c <HAL_TIM_ConfigClockSource+0x278>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d01d      	beq.n	80072e2 <HAL_TIM_ConfigClockSource+0x1ce>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a39      	ldr	r2, [pc, #228]	; (8007390 <HAL_TIM_ConfigClockSource+0x27c>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d018      	beq.n	80072e2 <HAL_TIM_ConfigClockSource+0x1ce>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072b8:	d013      	beq.n	80072e2 <HAL_TIM_ConfigClockSource+0x1ce>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a35      	ldr	r2, [pc, #212]	; (8007394 <HAL_TIM_ConfigClockSource+0x280>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d00e      	beq.n	80072e2 <HAL_TIM_ConfigClockSource+0x1ce>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a33      	ldr	r2, [pc, #204]	; (8007398 <HAL_TIM_ConfigClockSource+0x284>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d009      	beq.n	80072e2 <HAL_TIM_ConfigClockSource+0x1ce>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a32      	ldr	r2, [pc, #200]	; (800739c <HAL_TIM_ConfigClockSource+0x288>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d004      	beq.n	80072e2 <HAL_TIM_ConfigClockSource+0x1ce>
 80072d8:	f241 4145 	movw	r1, #5189	; 0x1445
 80072dc:	482a      	ldr	r0, [pc, #168]	; (8007388 <HAL_TIM_ConfigClockSource+0x274>)
 80072de:	f7fa fef1 	bl	80020c4 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d013      	beq.n	8007312 <HAL_TIM_ConfigClockSource+0x1fe>
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072f2:	d00e      	beq.n	8007312 <HAL_TIM_ConfigClockSource+0x1fe>
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072fc:	d009      	beq.n	8007312 <HAL_TIM_ConfigClockSource+0x1fe>
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007306:	d004      	beq.n	8007312 <HAL_TIM_ConfigClockSource+0x1fe>
 8007308:	f241 4148 	movw	r1, #5192	; 0x1448
 800730c:	481e      	ldr	r0, [pc, #120]	; (8007388 <HAL_TIM_ConfigClockSource+0x274>)
 800730e:	f7fa fed9 	bl	80020c4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800731a:	d014      	beq.n	8007346 <HAL_TIM_ConfigClockSource+0x232>
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d010      	beq.n	8007346 <HAL_TIM_ConfigClockSource+0x232>
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00c      	beq.n	8007346 <HAL_TIM_ConfigClockSource+0x232>
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	2b02      	cmp	r3, #2
 8007332:	d008      	beq.n	8007346 <HAL_TIM_ConfigClockSource+0x232>
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	2b0a      	cmp	r3, #10
 800733a:	d004      	beq.n	8007346 <HAL_TIM_ConfigClockSource+0x232>
 800733c:	f241 4149 	movw	r1, #5193	; 0x1449
 8007340:	4811      	ldr	r0, [pc, #68]	; (8007388 <HAL_TIM_ConfigClockSource+0x274>)
 8007342:	f7fa febf 	bl	80020c4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	2b0f      	cmp	r3, #15
 800734c:	d904      	bls.n	8007358 <HAL_TIM_ConfigClockSource+0x244>
 800734e:	f241 414a 	movw	r1, #5194	; 0x144a
 8007352:	480d      	ldr	r0, [pc, #52]	; (8007388 <HAL_TIM_ConfigClockSource+0x274>)
 8007354:	f7fa feb6 	bl	80020c4 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6818      	ldr	r0, [r3, #0]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	6899      	ldr	r1, [r3, #8]
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	685a      	ldr	r2, [r3, #4]
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	f000 fd59 	bl	8007e1e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800737a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	609a      	str	r2, [r3, #8]
      break;
 8007384:	e1bf      	b.n	8007706 <HAL_TIM_ConfigClockSource+0x5f2>
 8007386:	bf00      	nop
 8007388:	0800ec6c 	.word	0x0800ec6c
 800738c:	40012c00 	.word	0x40012c00
 8007390:	40013400 	.word	0x40013400
 8007394:	40000400 	.word	0x40000400
 8007398:	40000800 	.word	0x40000800
 800739c:	40000c00 	.word	0x40000c00
 80073a0:	40001000 	.word	0x40001000
 80073a4:	40001400 	.word	0x40001400
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a8d      	ldr	r2, [pc, #564]	; (80075e4 <HAL_TIM_ConfigClockSource+0x4d0>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d01d      	beq.n	80073ee <HAL_TIM_ConfigClockSource+0x2da>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a8c      	ldr	r2, [pc, #560]	; (80075e8 <HAL_TIM_ConfigClockSource+0x4d4>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d018      	beq.n	80073ee <HAL_TIM_ConfigClockSource+0x2da>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073c4:	d013      	beq.n	80073ee <HAL_TIM_ConfigClockSource+0x2da>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a88      	ldr	r2, [pc, #544]	; (80075ec <HAL_TIM_ConfigClockSource+0x4d8>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d00e      	beq.n	80073ee <HAL_TIM_ConfigClockSource+0x2da>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a86      	ldr	r2, [pc, #536]	; (80075f0 <HAL_TIM_ConfigClockSource+0x4dc>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d009      	beq.n	80073ee <HAL_TIM_ConfigClockSource+0x2da>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a85      	ldr	r2, [pc, #532]	; (80075f4 <HAL_TIM_ConfigClockSource+0x4e0>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d004      	beq.n	80073ee <HAL_TIM_ConfigClockSource+0x2da>
 80073e4:	f241 415d 	movw	r1, #5213	; 0x145d
 80073e8:	4883      	ldr	r0, [pc, #524]	; (80075f8 <HAL_TIM_ConfigClockSource+0x4e4>)
 80073ea:	f7fa fe6b 	bl	80020c4 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d013      	beq.n	800741e <HAL_TIM_ConfigClockSource+0x30a>
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073fe:	d00e      	beq.n	800741e <HAL_TIM_ConfigClockSource+0x30a>
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007408:	d009      	beq.n	800741e <HAL_TIM_ConfigClockSource+0x30a>
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007412:	d004      	beq.n	800741e <HAL_TIM_ConfigClockSource+0x30a>
 8007414:	f44f 51a3 	mov.w	r1, #5216	; 0x1460
 8007418:	4877      	ldr	r0, [pc, #476]	; (80075f8 <HAL_TIM_ConfigClockSource+0x4e4>)
 800741a:	f7fa fe53 	bl	80020c4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007426:	d014      	beq.n	8007452 <HAL_TIM_ConfigClockSource+0x33e>
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d010      	beq.n	8007452 <HAL_TIM_ConfigClockSource+0x33e>
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00c      	beq.n	8007452 <HAL_TIM_ConfigClockSource+0x33e>
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	2b02      	cmp	r3, #2
 800743e:	d008      	beq.n	8007452 <HAL_TIM_ConfigClockSource+0x33e>
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	2b0a      	cmp	r3, #10
 8007446:	d004      	beq.n	8007452 <HAL_TIM_ConfigClockSource+0x33e>
 8007448:	f241 4161 	movw	r1, #5217	; 0x1461
 800744c:	486a      	ldr	r0, [pc, #424]	; (80075f8 <HAL_TIM_ConfigClockSource+0x4e4>)
 800744e:	f7fa fe39 	bl	80020c4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	2b0f      	cmp	r3, #15
 8007458:	d904      	bls.n	8007464 <HAL_TIM_ConfigClockSource+0x350>
 800745a:	f241 4162 	movw	r1, #5218	; 0x1462
 800745e:	4866      	ldr	r0, [pc, #408]	; (80075f8 <HAL_TIM_ConfigClockSource+0x4e4>)
 8007460:	f7fa fe30 	bl	80020c4 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6818      	ldr	r0, [r3, #0]
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	6899      	ldr	r1, [r3, #8]
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	685a      	ldr	r2, [r3, #4]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	f000 fcd3 	bl	8007e1e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	689a      	ldr	r2, [r3, #8]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007486:	609a      	str	r2, [r3, #8]
      break;
 8007488:	e13d      	b.n	8007706 <HAL_TIM_ConfigClockSource+0x5f2>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a55      	ldr	r2, [pc, #340]	; (80075e4 <HAL_TIM_ConfigClockSource+0x4d0>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d01d      	beq.n	80074d0 <HAL_TIM_ConfigClockSource+0x3bc>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a53      	ldr	r2, [pc, #332]	; (80075e8 <HAL_TIM_ConfigClockSource+0x4d4>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d018      	beq.n	80074d0 <HAL_TIM_ConfigClockSource+0x3bc>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074a6:	d013      	beq.n	80074d0 <HAL_TIM_ConfigClockSource+0x3bc>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a4f      	ldr	r2, [pc, #316]	; (80075ec <HAL_TIM_ConfigClockSource+0x4d8>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d00e      	beq.n	80074d0 <HAL_TIM_ConfigClockSource+0x3bc>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a4e      	ldr	r2, [pc, #312]	; (80075f0 <HAL_TIM_ConfigClockSource+0x4dc>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d009      	beq.n	80074d0 <HAL_TIM_ConfigClockSource+0x3bc>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a4c      	ldr	r2, [pc, #304]	; (80075f4 <HAL_TIM_ConfigClockSource+0x4e0>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d004      	beq.n	80074d0 <HAL_TIM_ConfigClockSource+0x3bc>
 80074c6:	f241 4171 	movw	r1, #5233	; 0x1471
 80074ca:	484b      	ldr	r0, [pc, #300]	; (80075f8 <HAL_TIM_ConfigClockSource+0x4e4>)
 80074cc:	f7fa fdfa 	bl	80020c4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074d8:	d014      	beq.n	8007504 <HAL_TIM_ConfigClockSource+0x3f0>
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d010      	beq.n	8007504 <HAL_TIM_ConfigClockSource+0x3f0>
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00c      	beq.n	8007504 <HAL_TIM_ConfigClockSource+0x3f0>
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	2b02      	cmp	r3, #2
 80074f0:	d008      	beq.n	8007504 <HAL_TIM_ConfigClockSource+0x3f0>
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	2b0a      	cmp	r3, #10
 80074f8:	d004      	beq.n	8007504 <HAL_TIM_ConfigClockSource+0x3f0>
 80074fa:	f241 4174 	movw	r1, #5236	; 0x1474
 80074fe:	483e      	ldr	r0, [pc, #248]	; (80075f8 <HAL_TIM_ConfigClockSource+0x4e4>)
 8007500:	f7fa fde0 	bl	80020c4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	2b0f      	cmp	r3, #15
 800750a:	d904      	bls.n	8007516 <HAL_TIM_ConfigClockSource+0x402>
 800750c:	f241 4175 	movw	r1, #5237	; 0x1475
 8007510:	4839      	ldr	r0, [pc, #228]	; (80075f8 <HAL_TIM_ConfigClockSource+0x4e4>)
 8007512:	f7fa fdd7 	bl	80020c4 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6818      	ldr	r0, [r3, #0]
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	6859      	ldr	r1, [r3, #4]
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	461a      	mov	r2, r3
 8007524:	f000 fc04 	bl	8007d30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2150      	movs	r1, #80	; 0x50
 800752e:	4618      	mov	r0, r3
 8007530:	f000 fc5b 	bl	8007dea <TIM_ITRx_SetConfig>
      break;
 8007534:	e0e7      	b.n	8007706 <HAL_TIM_ConfigClockSource+0x5f2>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a2a      	ldr	r2, [pc, #168]	; (80075e4 <HAL_TIM_ConfigClockSource+0x4d0>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d01d      	beq.n	800757c <HAL_TIM_ConfigClockSource+0x468>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a28      	ldr	r2, [pc, #160]	; (80075e8 <HAL_TIM_ConfigClockSource+0x4d4>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d018      	beq.n	800757c <HAL_TIM_ConfigClockSource+0x468>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007552:	d013      	beq.n	800757c <HAL_TIM_ConfigClockSource+0x468>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a24      	ldr	r2, [pc, #144]	; (80075ec <HAL_TIM_ConfigClockSource+0x4d8>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d00e      	beq.n	800757c <HAL_TIM_ConfigClockSource+0x468>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a23      	ldr	r2, [pc, #140]	; (80075f0 <HAL_TIM_ConfigClockSource+0x4dc>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d009      	beq.n	800757c <HAL_TIM_ConfigClockSource+0x468>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a21      	ldr	r2, [pc, #132]	; (80075f4 <HAL_TIM_ConfigClockSource+0x4e0>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d004      	beq.n	800757c <HAL_TIM_ConfigClockSource+0x468>
 8007572:	f241 4181 	movw	r1, #5249	; 0x1481
 8007576:	4820      	ldr	r0, [pc, #128]	; (80075f8 <HAL_TIM_ConfigClockSource+0x4e4>)
 8007578:	f7fa fda4 	bl	80020c4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007584:	d014      	beq.n	80075b0 <HAL_TIM_ConfigClockSource+0x49c>
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d010      	beq.n	80075b0 <HAL_TIM_ConfigClockSource+0x49c>
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00c      	beq.n	80075b0 <HAL_TIM_ConfigClockSource+0x49c>
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	2b02      	cmp	r3, #2
 800759c:	d008      	beq.n	80075b0 <HAL_TIM_ConfigClockSource+0x49c>
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	2b0a      	cmp	r3, #10
 80075a4:	d004      	beq.n	80075b0 <HAL_TIM_ConfigClockSource+0x49c>
 80075a6:	f241 4184 	movw	r1, #5252	; 0x1484
 80075aa:	4813      	ldr	r0, [pc, #76]	; (80075f8 <HAL_TIM_ConfigClockSource+0x4e4>)
 80075ac:	f7fa fd8a 	bl	80020c4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	2b0f      	cmp	r3, #15
 80075b6:	d904      	bls.n	80075c2 <HAL_TIM_ConfigClockSource+0x4ae>
 80075b8:	f241 4185 	movw	r1, #5253	; 0x1485
 80075bc:	480e      	ldr	r0, [pc, #56]	; (80075f8 <HAL_TIM_ConfigClockSource+0x4e4>)
 80075be:	f7fa fd81 	bl	80020c4 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6818      	ldr	r0, [r3, #0]
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	6859      	ldr	r1, [r3, #4]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	461a      	mov	r2, r3
 80075d0:	f000 fbdc 	bl	8007d8c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2160      	movs	r1, #96	; 0x60
 80075da:	4618      	mov	r0, r3
 80075dc:	f000 fc05 	bl	8007dea <TIM_ITRx_SetConfig>
      break;
 80075e0:	e091      	b.n	8007706 <HAL_TIM_ConfigClockSource+0x5f2>
 80075e2:	bf00      	nop
 80075e4:	40012c00 	.word	0x40012c00
 80075e8:	40013400 	.word	0x40013400
 80075ec:	40000400 	.word	0x40000400
 80075f0:	40000800 	.word	0x40000800
 80075f4:	40000c00 	.word	0x40000c00
 80075f8:	0800ec6c 	.word	0x0800ec6c
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a47      	ldr	r2, [pc, #284]	; (8007720 <HAL_TIM_ConfigClockSource+0x60c>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d01d      	beq.n	8007642 <HAL_TIM_ConfigClockSource+0x52e>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a46      	ldr	r2, [pc, #280]	; (8007724 <HAL_TIM_ConfigClockSource+0x610>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d018      	beq.n	8007642 <HAL_TIM_ConfigClockSource+0x52e>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007618:	d013      	beq.n	8007642 <HAL_TIM_ConfigClockSource+0x52e>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a42      	ldr	r2, [pc, #264]	; (8007728 <HAL_TIM_ConfigClockSource+0x614>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d00e      	beq.n	8007642 <HAL_TIM_ConfigClockSource+0x52e>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a40      	ldr	r2, [pc, #256]	; (800772c <HAL_TIM_ConfigClockSource+0x618>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d009      	beq.n	8007642 <HAL_TIM_ConfigClockSource+0x52e>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a3f      	ldr	r2, [pc, #252]	; (8007730 <HAL_TIM_ConfigClockSource+0x61c>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d004      	beq.n	8007642 <HAL_TIM_ConfigClockSource+0x52e>
 8007638:	f241 4191 	movw	r1, #5265	; 0x1491
 800763c:	483d      	ldr	r0, [pc, #244]	; (8007734 <HAL_TIM_ConfigClockSource+0x620>)
 800763e:	f7fa fd41 	bl	80020c4 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800764a:	d014      	beq.n	8007676 <HAL_TIM_ConfigClockSource+0x562>
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d010      	beq.n	8007676 <HAL_TIM_ConfigClockSource+0x562>
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00c      	beq.n	8007676 <HAL_TIM_ConfigClockSource+0x562>
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	2b02      	cmp	r3, #2
 8007662:	d008      	beq.n	8007676 <HAL_TIM_ConfigClockSource+0x562>
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	2b0a      	cmp	r3, #10
 800766a:	d004      	beq.n	8007676 <HAL_TIM_ConfigClockSource+0x562>
 800766c:	f241 4194 	movw	r1, #5268	; 0x1494
 8007670:	4830      	ldr	r0, [pc, #192]	; (8007734 <HAL_TIM_ConfigClockSource+0x620>)
 8007672:	f7fa fd27 	bl	80020c4 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	2b0f      	cmp	r3, #15
 800767c:	d904      	bls.n	8007688 <HAL_TIM_ConfigClockSource+0x574>
 800767e:	f241 4195 	movw	r1, #5269	; 0x1495
 8007682:	482c      	ldr	r0, [pc, #176]	; (8007734 <HAL_TIM_ConfigClockSource+0x620>)
 8007684:	f7fa fd1e 	bl	80020c4 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6818      	ldr	r0, [r3, #0]
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	6859      	ldr	r1, [r3, #4]
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	461a      	mov	r2, r3
 8007696:	f000 fb4b 	bl	8007d30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2140      	movs	r1, #64	; 0x40
 80076a0:	4618      	mov	r0, r3
 80076a2:	f000 fba2 	bl	8007dea <TIM_ITRx_SetConfig>
      break;
 80076a6:	e02e      	b.n	8007706 <HAL_TIM_ConfigClockSource+0x5f2>
        assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a1c      	ldr	r2, [pc, #112]	; (8007720 <HAL_TIM_ConfigClockSource+0x60c>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d01d      	beq.n	80076ee <HAL_TIM_ConfigClockSource+0x5da>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a1b      	ldr	r2, [pc, #108]	; (8007724 <HAL_TIM_ConfigClockSource+0x610>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d018      	beq.n	80076ee <HAL_TIM_ConfigClockSource+0x5da>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076c4:	d013      	beq.n	80076ee <HAL_TIM_ConfigClockSource+0x5da>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a17      	ldr	r2, [pc, #92]	; (8007728 <HAL_TIM_ConfigClockSource+0x614>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d00e      	beq.n	80076ee <HAL_TIM_ConfigClockSource+0x5da>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a15      	ldr	r2, [pc, #84]	; (800772c <HAL_TIM_ConfigClockSource+0x618>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d009      	beq.n	80076ee <HAL_TIM_ConfigClockSource+0x5da>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a14      	ldr	r2, [pc, #80]	; (8007730 <HAL_TIM_ConfigClockSource+0x61c>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d004      	beq.n	80076ee <HAL_TIM_ConfigClockSource+0x5da>
 80076e4:	f241 41a4 	movw	r1, #5284	; 0x14a4
 80076e8:	4812      	ldr	r0, [pc, #72]	; (8007734 <HAL_TIM_ConfigClockSource+0x620>)
 80076ea:	f7fa fceb 	bl	80020c4 <assert_failed>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681a      	ldr	r2, [r3, #0]
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4619      	mov	r1, r3
 80076f8:	4610      	mov	r0, r2
 80076fa:	f000 fb76 	bl	8007dea <TIM_ITRx_SetConfig>
        break;
 80076fe:	e002      	b.n	8007706 <HAL_TIM_ConfigClockSource+0x5f2>
      break;
 8007700:	bf00      	nop
 8007702:	e000      	b.n	8007706 <HAL_TIM_ConfigClockSource+0x5f2>
      break;
 8007704:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2201      	movs	r2, #1
 800770a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3710      	adds	r7, #16
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}
 8007720:	40012c00 	.word	0x40012c00
 8007724:	40013400 	.word	0x40013400
 8007728:	40000400 	.word	0x40000400
 800772c:	40000800 	.word	0x40000800
 8007730:	40000c00 	.word	0x40000c00
 8007734:	0800ec6c 	.word	0x0800ec6c

08007738 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8007740:	bf00      	nop
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	bc80      	pop	{r7}
 8007748:	4770      	bx	lr

0800774a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800774a:	b480      	push	{r7}
 800774c:	b083      	sub	sp, #12
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007752:	bf00      	nop
 8007754:	370c      	adds	r7, #12
 8007756:	46bd      	mov	sp, r7
 8007758:	bc80      	pop	{r7}
 800775a:	4770      	bx	lr

0800775c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007764:	bf00      	nop
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	bc80      	pop	{r7}
 800776c:	4770      	bx	lr

0800776e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800776e:	b480      	push	{r7}
 8007770:	b083      	sub	sp, #12
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007776:	bf00      	nop
 8007778:	370c      	adds	r7, #12
 800777a:	46bd      	mov	sp, r7
 800777c:	bc80      	pop	{r7}
 800777e:	4770      	bx	lr

08007780 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007780:	b480      	push	{r7}
 8007782:	b083      	sub	sp, #12
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007788:	bf00      	nop
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	bc80      	pop	{r7}
 8007790:	4770      	bx	lr

08007792 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007792:	b480      	push	{r7}
 8007794:	b083      	sub	sp, #12
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800779a:	bf00      	nop
 800779c:	370c      	adds	r7, #12
 800779e:	46bd      	mov	sp, r7
 80077a0:	bc80      	pop	{r7}
 80077a2:	4770      	bx	lr

080077a4 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80077ac:	bf00      	nop
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bc80      	pop	{r7}
 80077b4:	4770      	bx	lr

080077b6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80077b6:	b480      	push	{r7}
 80077b8:	b083      	sub	sp, #12
 80077ba:	af00      	add	r7, sp, #0
 80077bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80077be:	bf00      	nop
 80077c0:	370c      	adds	r7, #12
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bc80      	pop	{r7}
 80077c6:	4770      	bx	lr

080077c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a33      	ldr	r2, [pc, #204]	; (80078a8 <TIM_Base_SetConfig+0xe0>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d013      	beq.n	8007808 <TIM_Base_SetConfig+0x40>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a32      	ldr	r2, [pc, #200]	; (80078ac <TIM_Base_SetConfig+0xe4>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d00f      	beq.n	8007808 <TIM_Base_SetConfig+0x40>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077ee:	d00b      	beq.n	8007808 <TIM_Base_SetConfig+0x40>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a2f      	ldr	r2, [pc, #188]	; (80078b0 <TIM_Base_SetConfig+0xe8>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d007      	beq.n	8007808 <TIM_Base_SetConfig+0x40>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a2e      	ldr	r2, [pc, #184]	; (80078b4 <TIM_Base_SetConfig+0xec>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d003      	beq.n	8007808 <TIM_Base_SetConfig+0x40>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a2d      	ldr	r2, [pc, #180]	; (80078b8 <TIM_Base_SetConfig+0xf0>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d108      	bne.n	800781a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800780e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	4313      	orrs	r3, r2
 8007818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a22      	ldr	r2, [pc, #136]	; (80078a8 <TIM_Base_SetConfig+0xe0>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d013      	beq.n	800784a <TIM_Base_SetConfig+0x82>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a21      	ldr	r2, [pc, #132]	; (80078ac <TIM_Base_SetConfig+0xe4>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d00f      	beq.n	800784a <TIM_Base_SetConfig+0x82>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007830:	d00b      	beq.n	800784a <TIM_Base_SetConfig+0x82>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a1e      	ldr	r2, [pc, #120]	; (80078b0 <TIM_Base_SetConfig+0xe8>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d007      	beq.n	800784a <TIM_Base_SetConfig+0x82>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a1d      	ldr	r2, [pc, #116]	; (80078b4 <TIM_Base_SetConfig+0xec>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d003      	beq.n	800784a <TIM_Base_SetConfig+0x82>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a1c      	ldr	r2, [pc, #112]	; (80078b8 <TIM_Base_SetConfig+0xf0>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d108      	bne.n	800785c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	4313      	orrs	r3, r2
 800785a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	695b      	ldr	r3, [r3, #20]
 8007866:	4313      	orrs	r3, r2
 8007868:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	68fa      	ldr	r2, [r7, #12]
 800786e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	689a      	ldr	r2, [r3, #8]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a09      	ldr	r2, [pc, #36]	; (80078a8 <TIM_Base_SetConfig+0xe0>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d003      	beq.n	8007890 <TIM_Base_SetConfig+0xc8>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a08      	ldr	r2, [pc, #32]	; (80078ac <TIM_Base_SetConfig+0xe4>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d103      	bne.n	8007898 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	691a      	ldr	r2, [r3, #16]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	615a      	str	r2, [r3, #20]
}
 800789e:	bf00      	nop
 80078a0:	3714      	adds	r7, #20
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bc80      	pop	{r7}
 80078a6:	4770      	bx	lr
 80078a8:	40012c00 	.word	0x40012c00
 80078ac:	40013400 	.word	0x40013400
 80078b0:	40000400 	.word	0x40000400
 80078b4:	40000800 	.word	0x40000800
 80078b8:	40000c00 	.word	0x40000c00

080078bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b086      	sub	sp, #24
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6a1b      	ldr	r3, [r3, #32]
 80078ca:	f023 0201 	bic.w	r2, r3, #1
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a1b      	ldr	r3, [r3, #32]
 80078d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	699b      	ldr	r3, [r3, #24]
 80078e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f023 0303 	bic.w	r3, r3, #3
 80078f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	4313      	orrs	r3, r2
 80078fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	f023 0302 	bic.w	r3, r3, #2
 8007904:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	697a      	ldr	r2, [r7, #20]
 800790c:	4313      	orrs	r3, r2
 800790e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a34      	ldr	r2, [pc, #208]	; (80079e4 <TIM_OC1_SetConfig+0x128>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d003      	beq.n	8007920 <TIM_OC1_SetConfig+0x64>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	4a33      	ldr	r2, [pc, #204]	; (80079e8 <TIM_OC1_SetConfig+0x12c>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d119      	bne.n	8007954 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d008      	beq.n	800793a <TIM_OC1_SetConfig+0x7e>
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	2b08      	cmp	r3, #8
 800792e:	d004      	beq.n	800793a <TIM_OC1_SetConfig+0x7e>
 8007930:	f641 2141 	movw	r1, #6721	; 0x1a41
 8007934:	482d      	ldr	r0, [pc, #180]	; (80079ec <TIM_OC1_SetConfig+0x130>)
 8007936:	f7fa fbc5 	bl	80020c4 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	f023 0308 	bic.w	r3, r3, #8
 8007940:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	4313      	orrs	r3, r2
 800794a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	f023 0304 	bic.w	r3, r3, #4
 8007952:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	4a23      	ldr	r2, [pc, #140]	; (80079e4 <TIM_OC1_SetConfig+0x128>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d003      	beq.n	8007964 <TIM_OC1_SetConfig+0xa8>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4a22      	ldr	r2, [pc, #136]	; (80079e8 <TIM_OC1_SetConfig+0x12c>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d12d      	bne.n	80079c0 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	699b      	ldr	r3, [r3, #24]
 8007968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800796c:	d008      	beq.n	8007980 <TIM_OC1_SetConfig+0xc4>
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	699b      	ldr	r3, [r3, #24]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d004      	beq.n	8007980 <TIM_OC1_SetConfig+0xc4>
 8007976:	f641 214e 	movw	r1, #6734	; 0x1a4e
 800797a:	481c      	ldr	r0, [pc, #112]	; (80079ec <TIM_OC1_SetConfig+0x130>)
 800797c:	f7fa fba2 	bl	80020c4 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	695b      	ldr	r3, [r3, #20]
 8007984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007988:	d008      	beq.n	800799c <TIM_OC1_SetConfig+0xe0>
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	695b      	ldr	r3, [r3, #20]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d004      	beq.n	800799c <TIM_OC1_SetConfig+0xe0>
 8007992:	f641 214f 	movw	r1, #6735	; 0x1a4f
 8007996:	4815      	ldr	r0, [pc, #84]	; (80079ec <TIM_OC1_SetConfig+0x130>)
 8007998:	f7fa fb94 	bl	80020c4 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	695b      	ldr	r3, [r3, #20]
 80079b0:	693a      	ldr	r2, [r7, #16]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	699b      	ldr	r3, [r3, #24]
 80079ba:	693a      	ldr	r2, [r7, #16]
 80079bc:	4313      	orrs	r3, r2
 80079be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	693a      	ldr	r2, [r7, #16]
 80079c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	685a      	ldr	r2, [r3, #4]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	697a      	ldr	r2, [r7, #20]
 80079d8:	621a      	str	r2, [r3, #32]
}
 80079da:	bf00      	nop
 80079dc:	3718      	adds	r7, #24
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	40012c00 	.word	0x40012c00
 80079e8:	40013400 	.word	0x40013400
 80079ec:	0800ec6c 	.word	0x0800ec6c

080079f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a1b      	ldr	r3, [r3, #32]
 80079fe:	f023 0210 	bic.w	r2, r3, #16
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a1b      	ldr	r3, [r3, #32]
 8007a0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	021b      	lsls	r3, r3, #8
 8007a2e:	68fa      	ldr	r2, [r7, #12]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	f023 0320 	bic.w	r3, r3, #32
 8007a3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	689b      	ldr	r3, [r3, #8]
 8007a40:	011b      	lsls	r3, r3, #4
 8007a42:	697a      	ldr	r2, [r7, #20]
 8007a44:	4313      	orrs	r3, r2
 8007a46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4a35      	ldr	r2, [pc, #212]	; (8007b20 <TIM_OC2_SetConfig+0x130>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d003      	beq.n	8007a58 <TIM_OC2_SetConfig+0x68>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a34      	ldr	r2, [pc, #208]	; (8007b24 <TIM_OC2_SetConfig+0x134>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d11a      	bne.n	8007a8e <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d008      	beq.n	8007a72 <TIM_OC2_SetConfig+0x82>
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	2b08      	cmp	r3, #8
 8007a66:	d004      	beq.n	8007a72 <TIM_OC2_SetConfig+0x82>
 8007a68:	f641 218c 	movw	r1, #6796	; 0x1a8c
 8007a6c:	482e      	ldr	r0, [pc, #184]	; (8007b28 <TIM_OC2_SetConfig+0x138>)
 8007a6e:	f7fa fb29 	bl	80020c4 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	011b      	lsls	r3, r3, #4
 8007a80:	697a      	ldr	r2, [r7, #20]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a8c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a23      	ldr	r2, [pc, #140]	; (8007b20 <TIM_OC2_SetConfig+0x130>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d003      	beq.n	8007a9e <TIM_OC2_SetConfig+0xae>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a22      	ldr	r2, [pc, #136]	; (8007b24 <TIM_OC2_SetConfig+0x134>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d12f      	bne.n	8007afe <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007aa6:	d008      	beq.n	8007aba <TIM_OC2_SetConfig+0xca>
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	699b      	ldr	r3, [r3, #24]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d004      	beq.n	8007aba <TIM_OC2_SetConfig+0xca>
 8007ab0:	f641 219a 	movw	r1, #6810	; 0x1a9a
 8007ab4:	481c      	ldr	r0, [pc, #112]	; (8007b28 <TIM_OC2_SetConfig+0x138>)
 8007ab6:	f7fa fb05 	bl	80020c4 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	695b      	ldr	r3, [r3, #20]
 8007abe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ac2:	d008      	beq.n	8007ad6 <TIM_OC2_SetConfig+0xe6>
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	695b      	ldr	r3, [r3, #20]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d004      	beq.n	8007ad6 <TIM_OC2_SetConfig+0xe6>
 8007acc:	f641 219b 	movw	r1, #6811	; 0x1a9b
 8007ad0:	4815      	ldr	r0, [pc, #84]	; (8007b28 <TIM_OC2_SetConfig+0x138>)
 8007ad2:	f7fa faf7 	bl	80020c4 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007adc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	695b      	ldr	r3, [r3, #20]
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	693a      	ldr	r2, [r7, #16]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	699b      	ldr	r3, [r3, #24]
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	693a      	ldr	r2, [r7, #16]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	693a      	ldr	r2, [r7, #16]
 8007b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	697a      	ldr	r2, [r7, #20]
 8007b16:	621a      	str	r2, [r3, #32]
}
 8007b18:	bf00      	nop
 8007b1a:	3718      	adds	r7, #24
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	40012c00 	.word	0x40012c00
 8007b24:	40013400 	.word	0x40013400
 8007b28:	0800ec6c 	.word	0x0800ec6c

08007b2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b086      	sub	sp, #24
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a1b      	ldr	r3, [r3, #32]
 8007b3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a1b      	ldr	r3, [r3, #32]
 8007b46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	69db      	ldr	r3, [r3, #28]
 8007b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f023 0303 	bic.w	r3, r3, #3
 8007b62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	021b      	lsls	r3, r3, #8
 8007b7c:	697a      	ldr	r2, [r7, #20]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4a35      	ldr	r2, [pc, #212]	; (8007c5c <TIM_OC3_SetConfig+0x130>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d003      	beq.n	8007b92 <TIM_OC3_SetConfig+0x66>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a34      	ldr	r2, [pc, #208]	; (8007c60 <TIM_OC3_SetConfig+0x134>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d11a      	bne.n	8007bc8 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d008      	beq.n	8007bac <TIM_OC3_SetConfig+0x80>
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	2b08      	cmp	r3, #8
 8007ba0:	d004      	beq.n	8007bac <TIM_OC3_SetConfig+0x80>
 8007ba2:	f641 21d7 	movw	r1, #6871	; 0x1ad7
 8007ba6:	482f      	ldr	r0, [pc, #188]	; (8007c64 <TIM_OC3_SetConfig+0x138>)
 8007ba8:	f7fa fa8c 	bl	80020c4 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	021b      	lsls	r3, r3, #8
 8007bba:	697a      	ldr	r2, [r7, #20]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bc6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4a24      	ldr	r2, [pc, #144]	; (8007c5c <TIM_OC3_SetConfig+0x130>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d003      	beq.n	8007bd8 <TIM_OC3_SetConfig+0xac>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4a23      	ldr	r2, [pc, #140]	; (8007c60 <TIM_OC3_SetConfig+0x134>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d12f      	bne.n	8007c38 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007be0:	d008      	beq.n	8007bf4 <TIM_OC3_SetConfig+0xc8>
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	699b      	ldr	r3, [r3, #24]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d004      	beq.n	8007bf4 <TIM_OC3_SetConfig+0xc8>
 8007bea:	f641 21e4 	movw	r1, #6884	; 0x1ae4
 8007bee:	481d      	ldr	r0, [pc, #116]	; (8007c64 <TIM_OC3_SetConfig+0x138>)
 8007bf0:	f7fa fa68 	bl	80020c4 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	695b      	ldr	r3, [r3, #20]
 8007bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bfc:	d008      	beq.n	8007c10 <TIM_OC3_SetConfig+0xe4>
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	695b      	ldr	r3, [r3, #20]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d004      	beq.n	8007c10 <TIM_OC3_SetConfig+0xe4>
 8007c06:	f641 21e5 	movw	r1, #6885	; 0x1ae5
 8007c0a:	4816      	ldr	r0, [pc, #88]	; (8007c64 <TIM_OC3_SetConfig+0x138>)
 8007c0c:	f7fa fa5a 	bl	80020c4 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	695b      	ldr	r3, [r3, #20]
 8007c24:	011b      	lsls	r3, r3, #4
 8007c26:	693a      	ldr	r2, [r7, #16]
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	699b      	ldr	r3, [r3, #24]
 8007c30:	011b      	lsls	r3, r3, #4
 8007c32:	693a      	ldr	r2, [r7, #16]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	693a      	ldr	r2, [r7, #16]
 8007c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	685a      	ldr	r2, [r3, #4]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	697a      	ldr	r2, [r7, #20]
 8007c50:	621a      	str	r2, [r3, #32]
}
 8007c52:	bf00      	nop
 8007c54:	3718      	adds	r7, #24
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	bf00      	nop
 8007c5c:	40012c00 	.word	0x40012c00
 8007c60:	40013400 	.word	0x40013400
 8007c64:	0800ec6c 	.word	0x0800ec6c

08007c68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b086      	sub	sp, #24
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a1b      	ldr	r3, [r3, #32]
 8007c76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6a1b      	ldr	r3, [r3, #32]
 8007c82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	69db      	ldr	r3, [r3, #28]
 8007c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	021b      	lsls	r3, r3, #8
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	031b      	lsls	r3, r3, #12
 8007cba:	693a      	ldr	r2, [r7, #16]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a18      	ldr	r2, [pc, #96]	; (8007d24 <TIM_OC4_SetConfig+0xbc>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d003      	beq.n	8007cd0 <TIM_OC4_SetConfig+0x68>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4a17      	ldr	r2, [pc, #92]	; (8007d28 <TIM_OC4_SetConfig+0xc0>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d117      	bne.n	8007d00 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	695b      	ldr	r3, [r3, #20]
 8007cd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cd8:	d008      	beq.n	8007cec <TIM_OC4_SetConfig+0x84>
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	695b      	ldr	r3, [r3, #20]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d004      	beq.n	8007cec <TIM_OC4_SetConfig+0x84>
 8007ce2:	f641 3123 	movw	r1, #6947	; 0x1b23
 8007ce6:	4811      	ldr	r0, [pc, #68]	; (8007d2c <TIM_OC4_SetConfig+0xc4>)
 8007ce8:	f7fa f9ec 	bl	80020c4 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cf2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	695b      	ldr	r3, [r3, #20]
 8007cf8:	019b      	lsls	r3, r3, #6
 8007cfa:	697a      	ldr	r2, [r7, #20]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	697a      	ldr	r2, [r7, #20]
 8007d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	685a      	ldr	r2, [r3, #4]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	693a      	ldr	r2, [r7, #16]
 8007d18:	621a      	str	r2, [r3, #32]
}
 8007d1a:	bf00      	nop
 8007d1c:	3718      	adds	r7, #24
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	40012c00 	.word	0x40012c00
 8007d28:	40013400 	.word	0x40013400
 8007d2c:	0800ec6c 	.word	0x0800ec6c

08007d30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b087      	sub	sp, #28
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6a1b      	ldr	r3, [r3, #32]
 8007d40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6a1b      	ldr	r3, [r3, #32]
 8007d46:	f023 0201 	bic.w	r2, r3, #1
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	699b      	ldr	r3, [r3, #24]
 8007d52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	011b      	lsls	r3, r3, #4
 8007d60:	693a      	ldr	r2, [r7, #16]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	f023 030a 	bic.w	r3, r3, #10
 8007d6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d6e:	697a      	ldr	r2, [r7, #20]
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	693a      	ldr	r2, [r7, #16]
 8007d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	621a      	str	r2, [r3, #32]
}
 8007d82:	bf00      	nop
 8007d84:	371c      	adds	r7, #28
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bc80      	pop	{r7}
 8007d8a:	4770      	bx	lr

08007d8c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b087      	sub	sp, #28
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6a1b      	ldr	r3, [r3, #32]
 8007d9c:	f023 0210 	bic.w	r2, r3, #16
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	699b      	ldr	r3, [r3, #24]
 8007da8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6a1b      	ldr	r3, [r3, #32]
 8007dae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007db6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	031b      	lsls	r3, r3, #12
 8007dbc:	697a      	ldr	r2, [r7, #20]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007dc8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	011b      	lsls	r3, r3, #4
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	697a      	ldr	r2, [r7, #20]
 8007dd8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	621a      	str	r2, [r3, #32]
}
 8007de0:	bf00      	nop
 8007de2:	371c      	adds	r7, #28
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bc80      	pop	{r7}
 8007de8:	4770      	bx	lr

08007dea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007dea:	b480      	push	{r7}
 8007dec:	b085      	sub	sp, #20
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
 8007df2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e02:	683a      	ldr	r2, [r7, #0]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	4313      	orrs	r3, r2
 8007e08:	f043 0307 	orr.w	r3, r3, #7
 8007e0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	609a      	str	r2, [r3, #8]
}
 8007e14:	bf00      	nop
 8007e16:	3714      	adds	r7, #20
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bc80      	pop	{r7}
 8007e1c:	4770      	bx	lr

08007e1e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007e1e:	b480      	push	{r7}
 8007e20:	b087      	sub	sp, #28
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	60f8      	str	r0, [r7, #12]
 8007e26:	60b9      	str	r1, [r7, #8]
 8007e28:	607a      	str	r2, [r7, #4]
 8007e2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e38:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	021a      	lsls	r2, r3, #8
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	431a      	orrs	r2, r3
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	697a      	ldr	r2, [r7, #20]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	697a      	ldr	r2, [r7, #20]
 8007e50:	609a      	str	r2, [r3, #8]
}
 8007e52:	bf00      	nop
 8007e54:	371c      	adds	r7, #28
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bc80      	pop	{r7}
 8007e5a:	4770      	bx	lr

08007e5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b086      	sub	sp, #24
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	4a26      	ldr	r2, [pc, #152]	; (8007f04 <TIM_CCxChannelCmd+0xa8>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d018      	beq.n	8007ea2 <TIM_CCxChannelCmd+0x46>
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	4a25      	ldr	r2, [pc, #148]	; (8007f08 <TIM_CCxChannelCmd+0xac>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d014      	beq.n	8007ea2 <TIM_CCxChannelCmd+0x46>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e7e:	d010      	beq.n	8007ea2 <TIM_CCxChannelCmd+0x46>
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	4a22      	ldr	r2, [pc, #136]	; (8007f0c <TIM_CCxChannelCmd+0xb0>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d00c      	beq.n	8007ea2 <TIM_CCxChannelCmd+0x46>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	4a21      	ldr	r2, [pc, #132]	; (8007f10 <TIM_CCxChannelCmd+0xb4>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d008      	beq.n	8007ea2 <TIM_CCxChannelCmd+0x46>
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	4a20      	ldr	r2, [pc, #128]	; (8007f14 <TIM_CCxChannelCmd+0xb8>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d004      	beq.n	8007ea2 <TIM_CCxChannelCmd+0x46>
 8007e98:	f641 5109 	movw	r1, #7433	; 0x1d09
 8007e9c:	481e      	ldr	r0, [pc, #120]	; (8007f18 <TIM_CCxChannelCmd+0xbc>)
 8007e9e:	f7fa f911 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d010      	beq.n	8007eca <TIM_CCxChannelCmd+0x6e>
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	2b04      	cmp	r3, #4
 8007eac:	d00d      	beq.n	8007eca <TIM_CCxChannelCmd+0x6e>
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	2b08      	cmp	r3, #8
 8007eb2:	d00a      	beq.n	8007eca <TIM_CCxChannelCmd+0x6e>
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	2b0c      	cmp	r3, #12
 8007eb8:	d007      	beq.n	8007eca <TIM_CCxChannelCmd+0x6e>
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	2b3c      	cmp	r3, #60	; 0x3c
 8007ebe:	d004      	beq.n	8007eca <TIM_CCxChannelCmd+0x6e>
 8007ec0:	f641 510a 	movw	r1, #7434	; 0x1d0a
 8007ec4:	4814      	ldr	r0, [pc, #80]	; (8007f18 <TIM_CCxChannelCmd+0xbc>)
 8007ec6:	f7fa f8fd 	bl	80020c4 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	f003 031f 	and.w	r3, r3, #31
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6a1a      	ldr	r2, [r3, #32]
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	43db      	mvns	r3, r3
 8007ee0:	401a      	ands	r2, r3
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6a1a      	ldr	r2, [r3, #32]
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	f003 031f 	and.w	r3, r3, #31
 8007ef0:	6879      	ldr	r1, [r7, #4]
 8007ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ef6:	431a      	orrs	r2, r3
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	621a      	str	r2, [r3, #32]
}
 8007efc:	bf00      	nop
 8007efe:	3718      	adds	r7, #24
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	40012c00 	.word	0x40012c00
 8007f08:	40013400 	.word	0x40013400
 8007f0c:	40000400 	.word	0x40000400
 8007f10:	40000800 	.word	0x40000800
 8007f14:	40000c00 	.word	0x40000c00
 8007f18:	0800ec6c 	.word	0x0800ec6c

08007f1c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a1c      	ldr	r2, [pc, #112]	; (8007f98 <TIM_ResetCallback+0x7c>)
 8007f28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a1b      	ldr	r2, [pc, #108]	; (8007f9c <TIM_ResetCallback+0x80>)
 8007f30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4a1a      	ldr	r2, [pc, #104]	; (8007fa0 <TIM_ResetCallback+0x84>)
 8007f38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	4a19      	ldr	r2, [pc, #100]	; (8007fa4 <TIM_ResetCallback+0x88>)
 8007f40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	4a18      	ldr	r2, [pc, #96]	; (8007fa8 <TIM_ResetCallback+0x8c>)
 8007f48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4a17      	ldr	r2, [pc, #92]	; (8007fac <TIM_ResetCallback+0x90>)
 8007f50:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	4a16      	ldr	r2, [pc, #88]	; (8007fb0 <TIM_ResetCallback+0x94>)
 8007f58:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a15      	ldr	r2, [pc, #84]	; (8007fb4 <TIM_ResetCallback+0x98>)
 8007f60:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a14      	ldr	r2, [pc, #80]	; (8007fb8 <TIM_ResetCallback+0x9c>)
 8007f68:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a13      	ldr	r2, [pc, #76]	; (8007fbc <TIM_ResetCallback+0xa0>)
 8007f70:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	4a12      	ldr	r2, [pc, #72]	; (8007fc0 <TIM_ResetCallback+0xa4>)
 8007f78:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a11      	ldr	r2, [pc, #68]	; (8007fc4 <TIM_ResetCallback+0xa8>)
 8007f80:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4a10      	ldr	r2, [pc, #64]	; (8007fc8 <TIM_ResetCallback+0xac>)
 8007f88:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8007f8c:	bf00      	nop
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bc80      	pop	{r7}
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop
 8007f98:	08002059 	.word	0x08002059
 8007f9c:	08007739 	.word	0x08007739
 8007fa0:	08007793 	.word	0x08007793
 8007fa4:	080077a5 	.word	0x080077a5
 8007fa8:	08002011 	.word	0x08002011
 8007fac:	0800775d 	.word	0x0800775d
 8007fb0:	0800774b 	.word	0x0800774b
 8007fb4:	0800776f 	.word	0x0800776f
 8007fb8:	08007781 	.word	0x08007781
 8007fbc:	080077b7 	.word	0x080077b7
 8007fc0:	08008305 	.word	0x08008305
 8007fc4:	08008317 	.word	0x08008317
 8007fc8:	08008329 	.word	0x08008329

08007fcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a5c      	ldr	r2, [pc, #368]	; (800814c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d027      	beq.n	8008030 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a5a      	ldr	r2, [pc, #360]	; (8008150 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d022      	beq.n	8008030 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ff2:	d01d      	beq.n	8008030 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a56      	ldr	r2, [pc, #344]	; (8008154 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d018      	beq.n	8008030 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a55      	ldr	r2, [pc, #340]	; (8008158 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d013      	beq.n	8008030 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a53      	ldr	r2, [pc, #332]	; (800815c <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d00e      	beq.n	8008030 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a52      	ldr	r2, [pc, #328]	; (8008160 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d009      	beq.n	8008030 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a50      	ldr	r2, [pc, #320]	; (8008164 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d004      	beq.n	8008030 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8008026:	f240 7186 	movw	r1, #1926	; 0x786
 800802a:	484f      	ldr	r0, [pc, #316]	; (8008168 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800802c:	f7fa f84a 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d020      	beq.n	800807a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2b10      	cmp	r3, #16
 800803e:	d01c      	beq.n	800807a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2b20      	cmp	r3, #32
 8008046:	d018      	beq.n	800807a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2b30      	cmp	r3, #48	; 0x30
 800804e:	d014      	beq.n	800807a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2b40      	cmp	r3, #64	; 0x40
 8008056:	d010      	beq.n	800807a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2b50      	cmp	r3, #80	; 0x50
 800805e:	d00c      	beq.n	800807a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2b60      	cmp	r3, #96	; 0x60
 8008066:	d008      	beq.n	800807a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2b70      	cmp	r3, #112	; 0x70
 800806e:	d004      	beq.n	800807a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008070:	f240 7187 	movw	r1, #1927	; 0x787
 8008074:	483c      	ldr	r0, [pc, #240]	; (8008168 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8008076:	f7fa f825 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	2b80      	cmp	r3, #128	; 0x80
 8008080:	d008      	beq.n	8008094 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d004      	beq.n	8008094 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800808a:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 800808e:	4836      	ldr	r0, [pc, #216]	; (8008168 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8008090:	f7fa f818 	bl	80020c4 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800809a:	2b01      	cmp	r3, #1
 800809c:	d101      	bne.n	80080a2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800809e:	2302      	movs	r3, #2
 80080a0:	e050      	b.n	8008144 <HAL_TIMEx_MasterConfigSynchronization+0x178>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2201      	movs	r2, #1
 80080a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2202      	movs	r2, #2
 80080ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080c8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	68fa      	ldr	r2, [r7, #12]
 80080d0:	4313      	orrs	r3, r2
 80080d2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a1a      	ldr	r2, [pc, #104]	; (800814c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d018      	beq.n	8008118 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a19      	ldr	r2, [pc, #100]	; (8008150 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d013      	beq.n	8008118 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080f8:	d00e      	beq.n	8008118 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a15      	ldr	r2, [pc, #84]	; (8008154 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d009      	beq.n	8008118 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a13      	ldr	r2, [pc, #76]	; (8008158 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d004      	beq.n	8008118 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a12      	ldr	r2, [pc, #72]	; (800815c <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d10c      	bne.n	8008132 <HAL_TIMEx_MasterConfigSynchronization+0x166>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800811e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	68ba      	ldr	r2, [r7, #8]
 8008126:	4313      	orrs	r3, r2
 8008128:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	68ba      	ldr	r2, [r7, #8]
 8008130:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2201      	movs	r2, #1
 8008136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	3710      	adds	r7, #16
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}
 800814c:	40012c00 	.word	0x40012c00
 8008150:	40013400 	.word	0x40013400
 8008154:	40000400 	.word	0x40000400
 8008158:	40000800 	.word	0x40000800
 800815c:	40000c00 	.word	0x40000c00
 8008160:	40001000 	.word	0x40001000
 8008164:	40001400 	.word	0x40001400
 8008168:	0800eca4 	.word	0x0800eca4

0800816c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008176:	2300      	movs	r3, #0
 8008178:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a5e      	ldr	r2, [pc, #376]	; (80082f8 <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d009      	beq.n	8008198 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a5c      	ldr	r2, [pc, #368]	; (80082fc <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d004      	beq.n	8008198 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800818e:	f240 71c3 	movw	r1, #1987	; 0x7c3
 8008192:	485b      	ldr	r0, [pc, #364]	; (8008300 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8008194:	f7f9 ff96 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081a0:	d008      	beq.n	80081b4 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d004      	beq.n	80081b4 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 80081aa:	f240 71c4 	movw	r1, #1988	; 0x7c4
 80081ae:	4854      	ldr	r0, [pc, #336]	; (8008300 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80081b0:	f7f9 ff88 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081bc:	d008      	beq.n	80081d0 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d004      	beq.n	80081d0 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 80081c6:	f240 71c5 	movw	r1, #1989	; 0x7c5
 80081ca:	484d      	ldr	r0, [pc, #308]	; (8008300 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80081cc:	f7f9 ff7a 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d013      	beq.n	8008200 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081e0:	d00e      	beq.n	8008200 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081ea:	d009      	beq.n	8008200 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081f4:	d004      	beq.n	8008200 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 80081f6:	f240 71c6 	movw	r1, #1990	; 0x7c6
 80081fa:	4841      	ldr	r0, [pc, #260]	; (8008300 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80081fc:	f7f9 ff62 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	68db      	ldr	r3, [r3, #12]
 8008204:	2bff      	cmp	r3, #255	; 0xff
 8008206:	d904      	bls.n	8008212 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8008208:	f240 71c7 	movw	r1, #1991	; 0x7c7
 800820c:	483c      	ldr	r0, [pc, #240]	; (8008300 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800820e:	f7f9 ff59 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800821a:	d008      	beq.n	800822e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d004      	beq.n	800822e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008224:	f44f 61f9 	mov.w	r1, #1992	; 0x7c8
 8008228:	4835      	ldr	r0, [pc, #212]	; (8008300 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800822a:	f7f9 ff4b 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	695b      	ldr	r3, [r3, #20]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d009      	beq.n	800824a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	695b      	ldr	r3, [r3, #20]
 800823a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800823e:	d004      	beq.n	800824a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8008240:	f240 71c9 	movw	r1, #1993	; 0x7c9
 8008244:	482e      	ldr	r0, [pc, #184]	; (8008300 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8008246:	f7f9 ff3d 	bl	80020c4 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	69db      	ldr	r3, [r3, #28]
 800824e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008252:	d008      	beq.n	8008266 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	69db      	ldr	r3, [r3, #28]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d004      	beq.n	8008266 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800825c:	f240 71ca 	movw	r1, #1994	; 0x7ca
 8008260:	4827      	ldr	r0, [pc, #156]	; (8008300 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8008262:	f7f9 ff2f 	bl	80020c4 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800826c:	2b01      	cmp	r3, #1
 800826e:	d101      	bne.n	8008274 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 8008270:	2302      	movs	r3, #2
 8008272:	e03d      	b.n	80082f0 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	4313      	orrs	r3, r2
 8008288:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	4313      	orrs	r3, r2
 8008296:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	691b      	ldr	r3, [r3, #16]
 80082be:	4313      	orrs	r3, r2
 80082c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	695b      	ldr	r3, [r3, #20]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	69db      	ldr	r3, [r3, #28]
 80082da:	4313      	orrs	r3, r2
 80082dc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	40012c00 	.word	0x40012c00
 80082fc:	40013400 	.word	0x40013400
 8008300:	0800eca4 	.word	0x0800eca4

08008304 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800830c:	bf00      	nop
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	bc80      	pop	{r7}
 8008314:	4770      	bx	lr

08008316 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008316:	b480      	push	{r7}
 8008318:	b083      	sub	sp, #12
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800831e:	bf00      	nop
 8008320:	370c      	adds	r7, #12
 8008322:	46bd      	mov	sp, r7
 8008324:	bc80      	pop	{r7}
 8008326:	4770      	bx	lr

08008328 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008330:	bf00      	nop
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	bc80      	pop	{r7}
 8008338:	4770      	bx	lr
	...

0800833c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d101      	bne.n	800834e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e0a7      	b.n	800849e <HAL_UART_Init+0x162>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d02c      	beq.n	80083b0 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a53      	ldr	r2, [pc, #332]	; (80084a8 <HAL_UART_Init+0x16c>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d00e      	beq.n	800837e <HAL_UART_Init+0x42>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a51      	ldr	r2, [pc, #324]	; (80084ac <HAL_UART_Init+0x170>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d009      	beq.n	800837e <HAL_UART_Init+0x42>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a50      	ldr	r2, [pc, #320]	; (80084b0 <HAL_UART_Init+0x174>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d004      	beq.n	800837e <HAL_UART_Init+0x42>
 8008374:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8008378:	484e      	ldr	r0, [pc, #312]	; (80084b4 <HAL_UART_Init+0x178>)
 800837a:	f7f9 fea3 	bl	80020c4 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	699b      	ldr	r3, [r3, #24]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d032      	beq.n	80083ec <HAL_UART_Init+0xb0>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	699b      	ldr	r3, [r3, #24]
 800838a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800838e:	d02d      	beq.n	80083ec <HAL_UART_Init+0xb0>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	699b      	ldr	r3, [r3, #24]
 8008394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008398:	d028      	beq.n	80083ec <HAL_UART_Init+0xb0>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	699b      	ldr	r3, [r3, #24]
 800839e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083a2:	d023      	beq.n	80083ec <HAL_UART_Init+0xb0>
 80083a4:	f240 116d 	movw	r1, #365	; 0x16d
 80083a8:	4842      	ldr	r0, [pc, #264]	; (80084b4 <HAL_UART_Init+0x178>)
 80083aa:	f7f9 fe8b 	bl	80020c4 <assert_failed>
 80083ae:	e01d      	b.n	80083ec <HAL_UART_Init+0xb0>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a3c      	ldr	r2, [pc, #240]	; (80084a8 <HAL_UART_Init+0x16c>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d018      	beq.n	80083ec <HAL_UART_Init+0xb0>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a3b      	ldr	r2, [pc, #236]	; (80084ac <HAL_UART_Init+0x170>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d013      	beq.n	80083ec <HAL_UART_Init+0xb0>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a39      	ldr	r2, [pc, #228]	; (80084b0 <HAL_UART_Init+0x174>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d00e      	beq.n	80083ec <HAL_UART_Init+0xb0>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a39      	ldr	r2, [pc, #228]	; (80084b8 <HAL_UART_Init+0x17c>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d009      	beq.n	80083ec <HAL_UART_Init+0xb0>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a37      	ldr	r2, [pc, #220]	; (80084bc <HAL_UART_Init+0x180>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d004      	beq.n	80083ec <HAL_UART_Init+0xb0>
 80083e2:	f240 1171 	movw	r1, #369	; 0x171
 80083e6:	4833      	ldr	r0, [pc, #204]	; (80084b4 <HAL_UART_Init+0x178>)
 80083e8:	f7f9 fe6c 	bl	80020c4 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d009      	beq.n	8008408 <HAL_UART_Init+0xcc>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	689b      	ldr	r3, [r3, #8]
 80083f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083fc:	d004      	beq.n	8008408 <HAL_UART_Init+0xcc>
 80083fe:	f240 1173 	movw	r1, #371	; 0x173
 8008402:	482c      	ldr	r0, [pc, #176]	; (80084b4 <HAL_UART_Init+0x178>)
 8008404:	f7f9 fe5e 	bl	80020c4 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800840e:	b2db      	uxtb	r3, r3
 8008410:	2b00      	cmp	r3, #0
 8008412:	d111      	bne.n	8008438 <HAL_UART_Init+0xfc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fb0d 	bl	8008a3c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008426:	2b00      	cmp	r3, #0
 8008428:	d102      	bne.n	8008430 <HAL_UART_Init+0xf4>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a24      	ldr	r2, [pc, #144]	; (80084c0 <HAL_UART_Init+0x184>)
 800842e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2224      	movs	r2, #36	; 0x24
 800843c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	68da      	ldr	r2, [r3, #12]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800844e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 fd01 	bl	8008e58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	691a      	ldr	r2, [r3, #16]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008464:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	695a      	ldr	r2, [r3, #20]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008474:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	68da      	ldr	r2, [r3, #12]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008484:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2220      	movs	r2, #32
 8008490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2220      	movs	r2, #32
 8008498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800849c:	2300      	movs	r3, #0
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3708      	adds	r7, #8
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	40013800 	.word	0x40013800
 80084ac:	40004400 	.word	0x40004400
 80084b0:	40004800 	.word	0x40004800
 80084b4:	0800ece0 	.word	0x0800ece0
 80084b8:	40004c00 	.word	0x40004c00
 80084bc:	40005000 	.word	0x40005000
 80084c0:	08002559 	.word	0x08002559

080084c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b08a      	sub	sp, #40	; 0x28
 80084c8:	af02      	add	r7, sp, #8
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	603b      	str	r3, [r7, #0]
 80084d0:	4613      	mov	r3, r2
 80084d2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80084d4:	2300      	movs	r3, #0
 80084d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	2b20      	cmp	r3, #32
 80084e2:	d17c      	bne.n	80085de <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d002      	beq.n	80084f0 <HAL_UART_Transmit+0x2c>
 80084ea:	88fb      	ldrh	r3, [r7, #6]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d101      	bne.n	80084f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	e075      	b.n	80085e0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d101      	bne.n	8008502 <HAL_UART_Transmit+0x3e>
 80084fe:	2302      	movs	r3, #2
 8008500:	e06e      	b.n	80085e0 <HAL_UART_Transmit+0x11c>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2201      	movs	r2, #1
 8008506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2200      	movs	r2, #0
 800850e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2221      	movs	r2, #33	; 0x21
 8008514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008518:	f7fa faa4 	bl	8002a64 <HAL_GetTick>
 800851c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	88fa      	ldrh	r2, [r7, #6]
 8008522:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	88fa      	ldrh	r2, [r7, #6]
 8008528:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008532:	d108      	bne.n	8008546 <HAL_UART_Transmit+0x82>
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d104      	bne.n	8008546 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800853c:	2300      	movs	r3, #0
 800853e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	61bb      	str	r3, [r7, #24]
 8008544:	e003      	b.n	800854e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800854a:	2300      	movs	r3, #0
 800854c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2200      	movs	r2, #0
 8008552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008556:	e02a      	b.n	80085ae <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	9300      	str	r3, [sp, #0]
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	2200      	movs	r2, #0
 8008560:	2180      	movs	r1, #128	; 0x80
 8008562:	68f8      	ldr	r0, [r7, #12]
 8008564:	f000 faa0 	bl	8008aa8 <UART_WaitOnFlagUntilTimeout>
 8008568:	4603      	mov	r3, r0
 800856a:	2b00      	cmp	r3, #0
 800856c:	d001      	beq.n	8008572 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800856e:	2303      	movs	r3, #3
 8008570:	e036      	b.n	80085e0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d10b      	bne.n	8008590 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	881b      	ldrh	r3, [r3, #0]
 800857c:	461a      	mov	r2, r3
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008586:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008588:	69bb      	ldr	r3, [r7, #24]
 800858a:	3302      	adds	r3, #2
 800858c:	61bb      	str	r3, [r7, #24]
 800858e:	e007      	b.n	80085a0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	781a      	ldrb	r2, [r3, #0]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	3301      	adds	r3, #1
 800859e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	3b01      	subs	r3, #1
 80085a8:	b29a      	uxth	r2, r3
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d1cf      	bne.n	8008558 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	9300      	str	r3, [sp, #0]
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	2200      	movs	r2, #0
 80085c0:	2140      	movs	r1, #64	; 0x40
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	f000 fa70 	bl	8008aa8 <UART_WaitOnFlagUntilTimeout>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d001      	beq.n	80085d2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80085ce:	2303      	movs	r3, #3
 80085d0:	e006      	b.n	80085e0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2220      	movs	r2, #32
 80085d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80085da:	2300      	movs	r3, #0
 80085dc:	e000      	b.n	80085e0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80085de:	2302      	movs	r3, #2
  }
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3720      	adds	r7, #32
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	4613      	mov	r3, r2
 80085f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	2b20      	cmp	r3, #32
 8008600:	d11d      	bne.n	800863e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d002      	beq.n	800860e <HAL_UART_Receive_IT+0x26>
 8008608:	88fb      	ldrh	r3, [r7, #6]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d101      	bne.n	8008612 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	e016      	b.n	8008640 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008618:	2b01      	cmp	r3, #1
 800861a:	d101      	bne.n	8008620 <HAL_UART_Receive_IT+0x38>
 800861c:	2302      	movs	r3, #2
 800861e:	e00f      	b.n	8008640 <HAL_UART_Receive_IT+0x58>
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2201      	movs	r2, #1
 8008624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2200      	movs	r2, #0
 800862c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 800862e:	88fb      	ldrh	r3, [r7, #6]
 8008630:	461a      	mov	r2, r3
 8008632:	68b9      	ldr	r1, [r7, #8]
 8008634:	68f8      	ldr	r0, [r7, #12]
 8008636:	f000 fa81 	bl	8008b3c <UART_Start_Receive_IT>
 800863a:	4603      	mov	r3, r0
 800863c:	e000      	b.n	8008640 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800863e:	2302      	movs	r3, #2
  }
}
 8008640:	4618      	mov	r0, r3
 8008642:	3710      	adds	r7, #16
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b08a      	sub	sp, #40	; 0x28
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	68db      	ldr	r3, [r3, #12]
 800865e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	695b      	ldr	r3, [r3, #20]
 8008666:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8008668:	2300      	movs	r3, #0
 800866a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800866c:	2300      	movs	r3, #0
 800866e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008672:	f003 030f 	and.w	r3, r3, #15
 8008676:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d10d      	bne.n	800869a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800867e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008680:	f003 0320 	and.w	r3, r3, #32
 8008684:	2b00      	cmp	r3, #0
 8008686:	d008      	beq.n	800869a <HAL_UART_IRQHandler+0x52>
 8008688:	6a3b      	ldr	r3, [r7, #32]
 800868a:	f003 0320 	and.w	r3, r3, #32
 800868e:	2b00      	cmp	r3, #0
 8008690:	d003      	beq.n	800869a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 fb34 	bl	8008d00 <UART_Receive_IT>
      return;
 8008698:	e180      	b.n	800899c <HAL_UART_IRQHandler+0x354>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	2b00      	cmp	r3, #0
 800869e:	f000 80b4 	beq.w	800880a <HAL_UART_IRQHandler+0x1c2>
 80086a2:	69fb      	ldr	r3, [r7, #28]
 80086a4:	f003 0301 	and.w	r3, r3, #1
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d105      	bne.n	80086b8 <HAL_UART_IRQHandler+0x70>
 80086ac:	6a3b      	ldr	r3, [r7, #32]
 80086ae:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	f000 80a9 	beq.w	800880a <HAL_UART_IRQHandler+0x1c2>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80086b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ba:	f003 0301 	and.w	r3, r3, #1
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00a      	beq.n	80086d8 <HAL_UART_IRQHandler+0x90>
 80086c2:	6a3b      	ldr	r3, [r7, #32]
 80086c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d005      	beq.n	80086d8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d0:	f043 0201 	orr.w	r2, r3, #1
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086da:	f003 0304 	and.w	r3, r3, #4
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d00a      	beq.n	80086f8 <HAL_UART_IRQHandler+0xb0>
 80086e2:	69fb      	ldr	r3, [r7, #28]
 80086e4:	f003 0301 	and.w	r3, r3, #1
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d005      	beq.n	80086f8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f0:	f043 0202 	orr.w	r2, r3, #2
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fa:	f003 0302 	and.w	r3, r3, #2
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d00a      	beq.n	8008718 <HAL_UART_IRQHandler+0xd0>
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	f003 0301 	and.w	r3, r3, #1
 8008708:	2b00      	cmp	r3, #0
 800870a:	d005      	beq.n	8008718 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008710:	f043 0204 	orr.w	r2, r3, #4
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871a:	f003 0308 	and.w	r3, r3, #8
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00f      	beq.n	8008742 <HAL_UART_IRQHandler+0xfa>
 8008722:	6a3b      	ldr	r3, [r7, #32]
 8008724:	f003 0320 	and.w	r3, r3, #32
 8008728:	2b00      	cmp	r3, #0
 800872a:	d104      	bne.n	8008736 <HAL_UART_IRQHandler+0xee>
 800872c:	69fb      	ldr	r3, [r7, #28]
 800872e:	f003 0301 	and.w	r3, r3, #1
 8008732:	2b00      	cmp	r3, #0
 8008734:	d005      	beq.n	8008742 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800873a:	f043 0208 	orr.w	r2, r3, #8
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008746:	2b00      	cmp	r3, #0
 8008748:	f000 8123 	beq.w	8008992 <HAL_UART_IRQHandler+0x34a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800874c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874e:	f003 0320 	and.w	r3, r3, #32
 8008752:	2b00      	cmp	r3, #0
 8008754:	d007      	beq.n	8008766 <HAL_UART_IRQHandler+0x11e>
 8008756:	6a3b      	ldr	r3, [r7, #32]
 8008758:	f003 0320 	and.w	r3, r3, #32
 800875c:	2b00      	cmp	r3, #0
 800875e:	d002      	beq.n	8008766 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 facd 	bl	8008d00 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	695b      	ldr	r3, [r3, #20]
 800876c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008770:	2b00      	cmp	r3, #0
 8008772:	bf14      	ite	ne
 8008774:	2301      	movne	r3, #1
 8008776:	2300      	moveq	r3, #0
 8008778:	b2db      	uxtb	r3, r3
 800877a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008780:	f003 0308 	and.w	r3, r3, #8
 8008784:	2b00      	cmp	r3, #0
 8008786:	d102      	bne.n	800878e <HAL_UART_IRQHandler+0x146>
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d033      	beq.n	80087f6 <HAL_UART_IRQHandler+0x1ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 fa0d 	bl	8008bae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	695b      	ldr	r3, [r3, #20]
 800879a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d024      	beq.n	80087ec <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	695a      	ldr	r2, [r3, #20]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087b0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d013      	beq.n	80087e2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087be:	4a79      	ldr	r2, [pc, #484]	; (80089a4 <HAL_UART_IRQHandler+0x35c>)
 80087c0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7fb f8e6 	bl	8003998 <HAL_DMA_Abort_IT>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d019      	beq.n	8008806 <HAL_UART_IRQHandler+0x1be>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80087dc:	4610      	mov	r0, r2
 80087de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087e0:	e011      	b.n	8008806 <HAL_UART_IRQHandler+0x1be>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087ea:	e00c      	b.n	8008806 <HAL_UART_IRQHandler+0x1be>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087f4:	e007      	b.n	8008806 <HAL_UART_IRQHandler+0x1be>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008804:	e0c5      	b.n	8008992 <HAL_UART_IRQHandler+0x34a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008806:	bf00      	nop
    return;
 8008808:	e0c3      	b.n	8008992 <HAL_UART_IRQHandler+0x34a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800880e:	2b01      	cmp	r3, #1
 8008810:	f040 80a3 	bne.w	800895a <HAL_UART_IRQHandler+0x312>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008816:	f003 0310 	and.w	r3, r3, #16
 800881a:	2b00      	cmp	r3, #0
 800881c:	f000 809d 	beq.w	800895a <HAL_UART_IRQHandler+0x312>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8008820:	6a3b      	ldr	r3, [r7, #32]
 8008822:	f003 0310 	and.w	r3, r3, #16
 8008826:	2b00      	cmp	r3, #0
 8008828:	f000 8097 	beq.w	800895a <HAL_UART_IRQHandler+0x312>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800882c:	2300      	movs	r3, #0
 800882e:	60fb      	str	r3, [r7, #12]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	60fb      	str	r3, [r7, #12]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	60fb      	str	r3, [r7, #12]
 8008840:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	695b      	ldr	r3, [r3, #20]
 8008848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800884c:	2b00      	cmp	r3, #0
 800884e:	d04f      	beq.n	80088f0 <HAL_UART_IRQHandler+0x2a8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800885a:	8a3b      	ldrh	r3, [r7, #16]
 800885c:	2b00      	cmp	r3, #0
 800885e:	f000 809a 	beq.w	8008996 <HAL_UART_IRQHandler+0x34e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008866:	8a3a      	ldrh	r2, [r7, #16]
 8008868:	429a      	cmp	r2, r3
 800886a:	f080 8094 	bcs.w	8008996 <HAL_UART_IRQHandler+0x34e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	8a3a      	ldrh	r2, [r7, #16]
 8008872:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008878:	699b      	ldr	r3, [r3, #24]
 800887a:	2b20      	cmp	r3, #32
 800887c:	d02b      	beq.n	80088d6 <HAL_UART_IRQHandler+0x28e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	68da      	ldr	r2, [r3, #12]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800888c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	695a      	ldr	r2, [r3, #20]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f022 0201 	bic.w	r2, r2, #1
 800889c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	695a      	ldr	r2, [r3, #20]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088ac:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2220      	movs	r2, #32
 80088b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	68da      	ldr	r2, [r3, #12]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f022 0210 	bic.w	r2, r2, #16
 80088ca:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7fb f827 	bl	8003924 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 80088e2:	b292      	uxth	r2, r2
 80088e4:	1a8a      	subs	r2, r1, r2
 80088e6:	b292      	uxth	r2, r2
 80088e8:	4611      	mov	r1, r2
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
      return;
 80088ee:	e052      	b.n	8008996 <HAL_UART_IRQHandler+0x34e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	1ad3      	subs	r3, r2, r3
 80088fc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008902:	b29b      	uxth	r3, r3
 8008904:	2b00      	cmp	r3, #0
 8008906:	d048      	beq.n	800899a <HAL_UART_IRQHandler+0x352>
          &&(nb_rx_data > 0U) )
 8008908:	8a7b      	ldrh	r3, [r7, #18]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d045      	beq.n	800899a <HAL_UART_IRQHandler+0x352>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	68da      	ldr	r2, [r3, #12]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800891c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	695a      	ldr	r2, [r3, #20]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f022 0201 	bic.w	r2, r2, #1
 800892c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2220      	movs	r2, #32
 8008932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68da      	ldr	r2, [r3, #12]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f022 0210 	bic.w	r2, r2, #16
 800894a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008950:	8a7a      	ldrh	r2, [r7, #18]
 8008952:	4611      	mov	r1, r2
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
      return;
 8008958:	e01f      	b.n	800899a <HAL_UART_IRQHandler+0x352>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800895a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008960:	2b00      	cmp	r3, #0
 8008962:	d008      	beq.n	8008976 <HAL_UART_IRQHandler+0x32e>
 8008964:	6a3b      	ldr	r3, [r7, #32]
 8008966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800896a:	2b00      	cmp	r3, #0
 800896c:	d003      	beq.n	8008976 <HAL_UART_IRQHandler+0x32e>
  {
    UART_Transmit_IT(huart);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 f95e 	bl	8008c30 <UART_Transmit_IT>
    return;
 8008974:	e012      	b.n	800899c <HAL_UART_IRQHandler+0x354>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800897c:	2b00      	cmp	r3, #0
 800897e:	d00d      	beq.n	800899c <HAL_UART_IRQHandler+0x354>
 8008980:	6a3b      	ldr	r3, [r7, #32]
 8008982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008986:	2b00      	cmp	r3, #0
 8008988:	d008      	beq.n	800899c <HAL_UART_IRQHandler+0x354>
  {
    UART_EndTransmit_IT(huart);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 f99f 	bl	8008cce <UART_EndTransmit_IT>
    return;
 8008990:	e004      	b.n	800899c <HAL_UART_IRQHandler+0x354>
    return;
 8008992:	bf00      	nop
 8008994:	e002      	b.n	800899c <HAL_UART_IRQHandler+0x354>
      return;
 8008996:	bf00      	nop
 8008998:	e000      	b.n	800899c <HAL_UART_IRQHandler+0x354>
      return;
 800899a:	bf00      	nop
  }
}
 800899c:	3728      	adds	r7, #40	; 0x28
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	08008c07 	.word	0x08008c07

080089a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80089b0:	bf00      	nop
 80089b2:	370c      	adds	r7, #12
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bc80      	pop	{r7}
 80089b8:	4770      	bx	lr

080089ba <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80089ba:	b480      	push	{r7}
 80089bc:	b083      	sub	sp, #12
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80089c2:	bf00      	nop
 80089c4:	370c      	adds	r7, #12
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bc80      	pop	{r7}
 80089ca:	4770      	bx	lr

080089cc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80089d4:	bf00      	nop
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	bc80      	pop	{r7}
 80089dc:	4770      	bx	lr

080089de <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80089de:	b480      	push	{r7}
 80089e0:	b083      	sub	sp, #12
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80089e6:	bf00      	nop
 80089e8:	370c      	adds	r7, #12
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bc80      	pop	{r7}
 80089ee:	4770      	bx	lr

080089f0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b083      	sub	sp, #12
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80089f8:	bf00      	nop
 80089fa:	370c      	adds	r7, #12
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bc80      	pop	{r7}
 8008a00:	4770      	bx	lr

08008a02 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008a02:	b480      	push	{r7}
 8008a04:	b083      	sub	sp, #12
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008a0a:	bf00      	nop
 8008a0c:	370c      	adds	r7, #12
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bc80      	pop	{r7}
 8008a12:	4770      	bx	lr

08008a14 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008a1c:	bf00      	nop
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bc80      	pop	{r7}
 8008a24:	4770      	bx	lr

08008a26 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a26:	b480      	push	{r7}
 8008a28:	b083      	sub	sp, #12
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
 8008a2e:	460b      	mov	r3, r1
 8008a30:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a32:	bf00      	nop
 8008a34:	370c      	adds	r7, #12
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bc80      	pop	{r7}
 8008a3a:	4770      	bx	lr

08008a3c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a0f      	ldr	r2, [pc, #60]	; (8008a84 <UART_InitCallbacksToDefault+0x48>)
 8008a48:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	4a0e      	ldr	r2, [pc, #56]	; (8008a88 <UART_InitCallbacksToDefault+0x4c>)
 8008a4e:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	4a0e      	ldr	r2, [pc, #56]	; (8008a8c <UART_InitCallbacksToDefault+0x50>)
 8008a54:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4a0d      	ldr	r2, [pc, #52]	; (8008a90 <UART_InitCallbacksToDefault+0x54>)
 8008a5a:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	4a0d      	ldr	r2, [pc, #52]	; (8008a94 <UART_InitCallbacksToDefault+0x58>)
 8008a60:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	4a0c      	ldr	r2, [pc, #48]	; (8008a98 <UART_InitCallbacksToDefault+0x5c>)
 8008a66:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4a0c      	ldr	r2, [pc, #48]	; (8008a9c <UART_InitCallbacksToDefault+0x60>)
 8008a6c:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	4a0b      	ldr	r2, [pc, #44]	; (8008aa0 <UART_InitCallbacksToDefault+0x64>)
 8008a72:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a0b      	ldr	r2, [pc, #44]	; (8008aa4 <UART_InitCallbacksToDefault+0x68>)
 8008a78:	669a      	str	r2, [r3, #104]	; 0x68

}
 8008a7a:	bf00      	nop
 8008a7c:	370c      	adds	r7, #12
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bc80      	pop	{r7}
 8008a82:	4770      	bx	lr
 8008a84:	080089bb 	.word	0x080089bb
 8008a88:	080089a9 	.word	0x080089a9
 8008a8c:	080089cd 	.word	0x080089cd
 8008a90:	08002079 	.word	0x08002079
 8008a94:	080089df 	.word	0x080089df
 8008a98:	080089f1 	.word	0x080089f1
 8008a9c:	08008a03 	.word	0x08008a03
 8008aa0:	08008a15 	.word	0x08008a15
 8008aa4:	08008a27 	.word	0x08008a27

08008aa8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b084      	sub	sp, #16
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	603b      	str	r3, [r7, #0]
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ab8:	e02c      	b.n	8008b14 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac0:	d028      	beq.n	8008b14 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d007      	beq.n	8008ad8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008ac8:	f7f9 ffcc 	bl	8002a64 <HAL_GetTick>
 8008acc:	4602      	mov	r2, r0
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	1ad3      	subs	r3, r2, r3
 8008ad2:	69ba      	ldr	r2, [r7, #24]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d21d      	bcs.n	8008b14 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	68da      	ldr	r2, [r3, #12]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008ae6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	695a      	ldr	r2, [r3, #20]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f022 0201 	bic.w	r2, r2, #1
 8008af6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2220      	movs	r2, #32
 8008afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2220      	movs	r2, #32
 8008b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008b10:	2303      	movs	r3, #3
 8008b12:	e00f      	b.n	8008b34 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	68ba      	ldr	r2, [r7, #8]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	bf0c      	ite	eq
 8008b24:	2301      	moveq	r3, #1
 8008b26:	2300      	movne	r3, #0
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	79fb      	ldrb	r3, [r7, #7]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d0c3      	beq.n	8008aba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008b32:	2300      	movs	r3, #0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3710      	adds	r7, #16
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	60b9      	str	r1, [r7, #8]
 8008b46:	4613      	mov	r3, r2
 8008b48:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	68ba      	ldr	r2, [r7, #8]
 8008b4e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	88fa      	ldrh	r2, [r7, #6]
 8008b54:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	88fa      	ldrh	r2, [r7, #6]
 8008b5a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2222      	movs	r2, #34	; 0x22
 8008b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	68da      	ldr	r2, [r3, #12]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b80:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	695a      	ldr	r2, [r3, #20]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f042 0201 	orr.w	r2, r2, #1
 8008b90:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	68da      	ldr	r2, [r3, #12]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f042 0220 	orr.w	r2, r2, #32
 8008ba0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3714      	adds	r7, #20
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bc80      	pop	{r7}
 8008bac:	4770      	bx	lr

08008bae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008bae:	b480      	push	{r7}
 8008bb0:	b083      	sub	sp, #12
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	68da      	ldr	r2, [r3, #12]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008bc4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	695a      	ldr	r2, [r3, #20]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f022 0201 	bic.w	r2, r2, #1
 8008bd4:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	d107      	bne.n	8008bee <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	68da      	ldr	r2, [r3, #12]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f022 0210 	bic.w	r2, r2, #16
 8008bec:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2220      	movs	r2, #32
 8008bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008bfc:	bf00      	nop
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bc80      	pop	{r7}
 8008c04:	4770      	bx	lr

08008c06 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b084      	sub	sp, #16
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2200      	movs	r2, #0
 8008c18:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c28:	bf00      	nop
 8008c2a:	3710      	adds	r7, #16
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b085      	sub	sp, #20
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	2b21      	cmp	r3, #33	; 0x21
 8008c42:	d13e      	bne.n	8008cc2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c4c:	d114      	bne.n	8008c78 <UART_Transmit_IT+0x48>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	691b      	ldr	r3, [r3, #16]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d110      	bne.n	8008c78 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6a1b      	ldr	r3, [r3, #32]
 8008c5a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	881b      	ldrh	r3, [r3, #0]
 8008c60:	461a      	mov	r2, r3
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c6a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6a1b      	ldr	r3, [r3, #32]
 8008c70:	1c9a      	adds	r2, r3, #2
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	621a      	str	r2, [r3, #32]
 8008c76:	e008      	b.n	8008c8a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6a1b      	ldr	r3, [r3, #32]
 8008c7c:	1c59      	adds	r1, r3, #1
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	6211      	str	r1, [r2, #32]
 8008c82:	781a      	ldrb	r2, [r3, #0]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	3b01      	subs	r3, #1
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	4619      	mov	r1, r3
 8008c98:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d10f      	bne.n	8008cbe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	68da      	ldr	r2, [r3, #12]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008cac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	68da      	ldr	r2, [r3, #12]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cbc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	e000      	b.n	8008cc4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008cc2:	2302      	movs	r3, #2
  }
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3714      	adds	r7, #20
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bc80      	pop	{r7}
 8008ccc:	4770      	bx	lr

08008cce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b082      	sub	sp, #8
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	68da      	ldr	r2, [r3, #12]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ce4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2220      	movs	r2, #32
 8008cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008cf6:	2300      	movs	r3, #0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3708      	adds	r7, #8
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b086      	sub	sp, #24
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	2b22      	cmp	r3, #34	; 0x22
 8008d12:	f040 809b 	bne.w	8008e4c <UART_Receive_IT+0x14c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d1e:	d117      	bne.n	8008d50 <UART_Receive_IT+0x50>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	691b      	ldr	r3, [r3, #16]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d113      	bne.n	8008d50 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d30:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d3e:	b29a      	uxth	r2, r3
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d48:	1c9a      	adds	r2, r3, #2
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	629a      	str	r2, [r3, #40]	; 0x28
 8008d4e:	e026      	b.n	8008d9e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d54:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8008d56:	2300      	movs	r3, #0
 8008d58:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d62:	d007      	beq.n	8008d74 <UART_Receive_IT+0x74>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	689b      	ldr	r3, [r3, #8]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d10a      	bne.n	8008d82 <UART_Receive_IT+0x82>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	691b      	ldr	r3, [r3, #16]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d106      	bne.n	8008d82 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	b2da      	uxtb	r2, r3
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	701a      	strb	r2, [r3, #0]
 8008d80:	e008      	b.n	8008d94 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d8e:	b2da      	uxtb	r2, r3
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d98:	1c5a      	adds	r2, r3, #1
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	3b01      	subs	r3, #1
 8008da6:	b29b      	uxth	r3, r3
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	4619      	mov	r1, r3
 8008dac:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d14a      	bne.n	8008e48 <UART_Receive_IT+0x148>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	68da      	ldr	r2, [r3, #12]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f022 0220 	bic.w	r2, r2, #32
 8008dc0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	68da      	ldr	r2, [r3, #12]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008dd0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	695a      	ldr	r2, [r3, #20]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f022 0201 	bic.w	r2, r2, #1
 8008de0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2220      	movs	r2, #32
 8008de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d124      	bne.n	8008e3c <UART_Receive_IT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	68da      	ldr	r2, [r3, #12]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f022 0210 	bic.w	r2, r2, #16
 8008e06:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f003 0310 	and.w	r3, r3, #16
 8008e12:	2b10      	cmp	r3, #16
 8008e14:	d10a      	bne.n	8008e2c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e16:	2300      	movs	r3, #0
 8008e18:	60fb      	str	r3, [r7, #12]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	60fb      	str	r3, [r7, #12]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	60fb      	str	r3, [r7, #12]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8008e34:	4611      	mov	r1, r2
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	4798      	blx	r3
 8008e3a:	e003      	b.n	8008e44 <UART_Receive_IT+0x144>
      else
      {
       /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	4798      	blx	r3
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008e44:	2300      	movs	r3, #0
 8008e46:	e002      	b.n	8008e4e <UART_Receive_IT+0x14e>
    }
    return HAL_OK;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	e000      	b.n	8008e4e <UART_Receive_IT+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8008e4c:	2302      	movs	r3, #2
  }
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3718      	adds	r7, #24
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
	...

08008e58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	4a5f      	ldr	r2, [pc, #380]	; (8008fe4 <UART_SetConfig+0x18c>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d904      	bls.n	8008e74 <UART_SetConfig+0x1c>
 8008e6a:	f640 6153 	movw	r1, #3667	; 0xe53
 8008e6e:	485e      	ldr	r0, [pc, #376]	; (8008fe8 <UART_SetConfig+0x190>)
 8008e70:	f7f9 f928 	bl	80020c4 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d009      	beq.n	8008e90 <UART_SetConfig+0x38>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e84:	d004      	beq.n	8008e90 <UART_SetConfig+0x38>
 8008e86:	f640 6154 	movw	r1, #3668	; 0xe54
 8008e8a:	4857      	ldr	r0, [pc, #348]	; (8008fe8 <UART_SetConfig+0x190>)
 8008e8c:	f7f9 f91a 	bl	80020c4 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	691b      	ldr	r3, [r3, #16]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d00e      	beq.n	8008eb6 <UART_SetConfig+0x5e>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	691b      	ldr	r3, [r3, #16]
 8008e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ea0:	d009      	beq.n	8008eb6 <UART_SetConfig+0x5e>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	691b      	ldr	r3, [r3, #16]
 8008ea6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8008eaa:	d004      	beq.n	8008eb6 <UART_SetConfig+0x5e>
 8008eac:	f640 6155 	movw	r1, #3669	; 0xe55
 8008eb0:	484d      	ldr	r0, [pc, #308]	; (8008fe8 <UART_SetConfig+0x190>)
 8008eb2:	f7f9 f907 	bl	80020c4 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	695a      	ldr	r2, [r3, #20]
 8008eba:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8008ebe:	4013      	ands	r3, r2
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d103      	bne.n	8008ecc <UART_SetConfig+0x74>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	695b      	ldr	r3, [r3, #20]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d104      	bne.n	8008ed6 <UART_SetConfig+0x7e>
 8008ecc:	f640 6156 	movw	r1, #3670	; 0xe56
 8008ed0:	4845      	ldr	r0, [pc, #276]	; (8008fe8 <UART_SetConfig+0x190>)
 8008ed2:	f7f9 f8f7 	bl	80020c4 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	691b      	ldr	r3, [r3, #16]
 8008edc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	68da      	ldr	r2, [r3, #12]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	430a      	orrs	r2, r1
 8008eea:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	689a      	ldr	r2, [r3, #8]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	691b      	ldr	r3, [r3, #16]
 8008ef4:	431a      	orrs	r2, r3
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	695b      	ldr	r3, [r3, #20]
 8008efa:	4313      	orrs	r3, r2
 8008efc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008f08:	f023 030c 	bic.w	r3, r3, #12
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	6812      	ldr	r2, [r2, #0]
 8008f10:	68b9      	ldr	r1, [r7, #8]
 8008f12:	430b      	orrs	r3, r1
 8008f14:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	695b      	ldr	r3, [r3, #20]
 8008f1c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	699a      	ldr	r2, [r3, #24]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	430a      	orrs	r2, r1
 8008f2a:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a2e      	ldr	r2, [pc, #184]	; (8008fec <UART_SetConfig+0x194>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d103      	bne.n	8008f3e <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008f36:	f7fb feaf 	bl	8004c98 <HAL_RCC_GetPCLK2Freq>
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	e002      	b.n	8008f44 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008f3e:	f7fb fe97 	bl	8004c70 <HAL_RCC_GetPCLK1Freq>
 8008f42:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008f44:	68fa      	ldr	r2, [r7, #12]
 8008f46:	4613      	mov	r3, r2
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	4413      	add	r3, r2
 8008f4c:	009a      	lsls	r2, r3, #2
 8008f4e:	441a      	add	r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f5a:	4a25      	ldr	r2, [pc, #148]	; (8008ff0 <UART_SetConfig+0x198>)
 8008f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8008f60:	095b      	lsrs	r3, r3, #5
 8008f62:	0119      	lsls	r1, r3, #4
 8008f64:	68fa      	ldr	r2, [r7, #12]
 8008f66:	4613      	mov	r3, r2
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	4413      	add	r3, r2
 8008f6c:	009a      	lsls	r2, r3, #2
 8008f6e:	441a      	add	r2, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	fbb2 f2f3 	udiv	r2, r2, r3
 8008f7a:	4b1d      	ldr	r3, [pc, #116]	; (8008ff0 <UART_SetConfig+0x198>)
 8008f7c:	fba3 0302 	umull	r0, r3, r3, r2
 8008f80:	095b      	lsrs	r3, r3, #5
 8008f82:	2064      	movs	r0, #100	; 0x64
 8008f84:	fb00 f303 	mul.w	r3, r0, r3
 8008f88:	1ad3      	subs	r3, r2, r3
 8008f8a:	011b      	lsls	r3, r3, #4
 8008f8c:	3332      	adds	r3, #50	; 0x32
 8008f8e:	4a18      	ldr	r2, [pc, #96]	; (8008ff0 <UART_SetConfig+0x198>)
 8008f90:	fba2 2303 	umull	r2, r3, r2, r3
 8008f94:	095b      	lsrs	r3, r3, #5
 8008f96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f9a:	4419      	add	r1, r3
 8008f9c:	68fa      	ldr	r2, [r7, #12]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	4413      	add	r3, r2
 8008fa4:	009a      	lsls	r2, r3, #2
 8008fa6:	441a      	add	r2, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	fbb2 f2f3 	udiv	r2, r2, r3
 8008fb2:	4b0f      	ldr	r3, [pc, #60]	; (8008ff0 <UART_SetConfig+0x198>)
 8008fb4:	fba3 0302 	umull	r0, r3, r3, r2
 8008fb8:	095b      	lsrs	r3, r3, #5
 8008fba:	2064      	movs	r0, #100	; 0x64
 8008fbc:	fb00 f303 	mul.w	r3, r0, r3
 8008fc0:	1ad3      	subs	r3, r2, r3
 8008fc2:	011b      	lsls	r3, r3, #4
 8008fc4:	3332      	adds	r3, #50	; 0x32
 8008fc6:	4a0a      	ldr	r2, [pc, #40]	; (8008ff0 <UART_SetConfig+0x198>)
 8008fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8008fcc:	095b      	lsrs	r3, r3, #5
 8008fce:	f003 020f 	and.w	r2, r3, #15
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	440a      	add	r2, r1
 8008fd8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008fda:	bf00      	nop
 8008fdc:	3710      	adds	r7, #16
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	0044aa20 	.word	0x0044aa20
 8008fe8:	0800ece0 	.word	0x0800ece0
 8008fec:	40013800 	.word	0x40013800
 8008ff0:	51eb851f 	.word	0x51eb851f

08008ff4 <BAT_init>:
static ADC_HandleTypeDef *g_BAT_adcHandle;
static RTC_HandleTypeDef *g_BAT_rtcHandle;
static RTC_TimeTypeDef    g_BAT_lastReadTime;

void BAT_init(ADC_HandleTypeDef *p_adcHandle, RTC_HandleTypeDef *p_rtcHandle)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef l_halReturnCode;
  RTC_TimeTypeDef   l_time;
  RTC_DateTypeDef   l_date;

  LOG_info("Initializing battery check");
 8008ffe:	491e      	ldr	r1, [pc, #120]	; (8009078 <BAT_init+0x84>)
 8009000:	2001      	movs	r0, #1
 8009002:	f001 fdb3 	bl	800ab6c <LOG_log>

  g_BAT_adcHandle = p_adcHandle;
 8009006:	4a1d      	ldr	r2, [pc, #116]	; (800907c <BAT_init+0x88>)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6013      	str	r3, [r2, #0]
  g_BAT_rtcHandle = p_rtcHandle;
 800900c:	4a1c      	ldr	r2, [pc, #112]	; (8009080 <BAT_init+0x8c>)
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	6013      	str	r3, [r2, #0]

  l_halReturnCode = HAL_RTC_GetTime(g_BAT_rtcHandle, &l_time, RTC_FORMAT_BCD);
 8009012:	4b1b      	ldr	r3, [pc, #108]	; (8009080 <BAT_init+0x8c>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f107 010c 	add.w	r1, r7, #12
 800901a:	2201      	movs	r2, #1
 800901c:	4618      	mov	r0, r3
 800901e:	f7fc fa39 	bl	8005494 <HAL_RTC_GetTime>
 8009022:	4603      	mov	r3, r0
 8009024:	73fb      	strb	r3, [r7, #15]

  if (l_halReturnCode != HAL_OK)
 8009026:	7bfb      	ldrb	r3, [r7, #15]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d005      	beq.n	8009038 <BAT_init+0x44>
  {
    LOG_error("HAL_RTC_GetTime() returned an error code: %d", l_halReturnCode);
 800902c:	7bfb      	ldrb	r3, [r7, #15]
 800902e:	461a      	mov	r2, r3
 8009030:	4914      	ldr	r1, [pc, #80]	; (8009084 <BAT_init+0x90>)
 8009032:	2003      	movs	r0, #3
 8009034:	f001 fd9a 	bl	800ab6c <LOG_log>
  else
  {
    ; /* Nothing to to */
  }

  l_halReturnCode = HAL_RTC_GetDate(g_BAT_rtcHandle, &l_date, RTC_FORMAT_BCD);
 8009038:	4b11      	ldr	r3, [pc, #68]	; (8009080 <BAT_init+0x8c>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f107 0108 	add.w	r1, r7, #8
 8009040:	2201      	movs	r2, #1
 8009042:	4618      	mov	r0, r3
 8009044:	f7fc fc2a 	bl	800589c <HAL_RTC_GetDate>
 8009048:	4603      	mov	r3, r0
 800904a:	73fb      	strb	r3, [r7, #15]

  if (l_halReturnCode != HAL_OK)
 800904c:	7bfb      	ldrb	r3, [r7, #15]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d005      	beq.n	800905e <BAT_init+0x6a>
  {
    LOG_error("HAL_RTC_GetDate() returned an error code: %d", l_halReturnCode);
 8009052:	7bfb      	ldrb	r3, [r7, #15]
 8009054:	461a      	mov	r2, r3
 8009056:	490c      	ldr	r1, [pc, #48]	; (8009088 <BAT_init+0x94>)
 8009058:	2003      	movs	r0, #3
 800905a:	f001 fd87 	bl	800ab6c <LOG_log>
  else
  {
    ; /* Nothing to to */
  }

  g_BAT_lastReadTime = l_time;
 800905e:	4b0b      	ldr	r3, [pc, #44]	; (800908c <BAT_init+0x98>)
 8009060:	f107 020c 	add.w	r2, r7, #12
 8009064:	6812      	ldr	r2, [r2, #0]
 8009066:	4611      	mov	r1, r2
 8009068:	8019      	strh	r1, [r3, #0]
 800906a:	3302      	adds	r3, #2
 800906c:	0c12      	lsrs	r2, r2, #16
 800906e:	701a      	strb	r2, [r3, #0]

  return;
 8009070:	bf00      	nop
}
 8009072:	3710      	adds	r7, #16
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}
 8009078:	0800ed1c 	.word	0x0800ed1c
 800907c:	2000021c 	.word	0x2000021c
 8009080:	20000220 	.word	0x20000220
 8009084:	0800ed38 	.word	0x0800ed38
 8009088:	0800ed68 	.word	0x0800ed68
 800908c:	20000224 	.word	0x20000224

08009090 <BAT_update>:

void BAT_update(uint32_t *p_voltageInMv)
{
 8009090:	b590      	push	{r4, r7, lr}
 8009092:	b089      	sub	sp, #36	; 0x24
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef   l_time;
  RTC_DateTypeDef   l_date;
  uint32_t          l_adcRawData;
  float             l_voltageInV;

  l_halReturnCode = HAL_RTC_GetTime(g_BAT_rtcHandle, &l_time, RTC_FORMAT_BCD);
 8009098:	4b48      	ldr	r3, [pc, #288]	; (80091bc <BAT_update+0x12c>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f107 0110 	add.w	r1, r7, #16
 80090a0:	2201      	movs	r2, #1
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7fc f9f6 	bl	8005494 <HAL_RTC_GetTime>
 80090a8:	4603      	mov	r3, r0
 80090aa:	77fb      	strb	r3, [r7, #31]

  if (l_halReturnCode != HAL_OK)
 80090ac:	7ffb      	ldrb	r3, [r7, #31]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d005      	beq.n	80090be <BAT_update+0x2e>
  {
    LOG_error("HAL_RTC_GetTime() returned an error code: %d", l_halReturnCode);
 80090b2:	7ffb      	ldrb	r3, [r7, #31]
 80090b4:	461a      	mov	r2, r3
 80090b6:	4942      	ldr	r1, [pc, #264]	; (80091c0 <BAT_update+0x130>)
 80090b8:	2003      	movs	r0, #3
 80090ba:	f001 fd57 	bl	800ab6c <LOG_log>
  else
  {
    ; /* Nothing to to */
  }

  l_halReturnCode = HAL_RTC_GetDate(g_BAT_rtcHandle, &l_date, RTC_FORMAT_BCD);
 80090be:	4b3f      	ldr	r3, [pc, #252]	; (80091bc <BAT_update+0x12c>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f107 010c 	add.w	r1, r7, #12
 80090c6:	2201      	movs	r2, #1
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7fc fbe7 	bl	800589c <HAL_RTC_GetDate>
 80090ce:	4603      	mov	r3, r0
 80090d0:	77fb      	strb	r3, [r7, #31]

  if (l_halReturnCode != HAL_OK)
 80090d2:	7ffb      	ldrb	r3, [r7, #31]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d005      	beq.n	80090e4 <BAT_update+0x54>
  {
    LOG_error("HAL_RTC_GetDate() returned an error code: %d", l_halReturnCode);
 80090d8:	7ffb      	ldrb	r3, [r7, #31]
 80090da:	461a      	mov	r2, r3
 80090dc:	4939      	ldr	r1, [pc, #228]	; (80091c4 <BAT_update+0x134>)
 80090de:	2003      	movs	r0, #3
 80090e0:	f001 fd44 	bl	800ab6c <LOG_log>
  else
  {
    ; /* Nothing to to */
  }

  if (UTI_turnRtcTimeToSeconds(&l_time) - UTI_turnRtcTimeToSeconds(&g_BAT_lastReadTime) >= BAT_POLLING_PERIOD_IN_S)
 80090e4:	f107 0310 	add.w	r3, r7, #16
 80090e8:	4618      	mov	r0, r3
 80090ea:	f002 f9a6 	bl	800b43a <UTI_turnRtcTimeToSeconds>
 80090ee:	4604      	mov	r4, r0
 80090f0:	4835      	ldr	r0, [pc, #212]	; (80091c8 <BAT_update+0x138>)
 80090f2:	f002 f9a2 	bl	800b43a <UTI_turnRtcTimeToSeconds>
 80090f6:	4603      	mov	r3, r0
 80090f8:	1ae3      	subs	r3, r4, r3
 80090fa:	2b09      	cmp	r3, #9
 80090fc:	d959      	bls.n	80091b2 <BAT_update+0x122>
  {
    g_BAT_lastReadTime = l_time;
 80090fe:	4b32      	ldr	r3, [pc, #200]	; (80091c8 <BAT_update+0x138>)
 8009100:	f107 0210 	add.w	r2, r7, #16
 8009104:	6812      	ldr	r2, [r2, #0]
 8009106:	4611      	mov	r1, r2
 8009108:	8019      	strh	r1, [r3, #0]
 800910a:	3302      	adds	r3, #2
 800910c:	0c12      	lsrs	r2, r2, #16
 800910e:	701a      	strb	r2, [r3, #0]

    l_halReturnCode = HAL_ADC_Start(g_BAT_adcHandle);
 8009110:	4b2e      	ldr	r3, [pc, #184]	; (80091cc <BAT_update+0x13c>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4618      	mov	r0, r3
 8009116:	f7f9 fe51 	bl	8002dbc <HAL_ADC_Start>
 800911a:	4603      	mov	r3, r0
 800911c:	77fb      	strb	r3, [r7, #31]

    if (l_halReturnCode != HAL_OK)
 800911e:	7ffb      	ldrb	r3, [r7, #31]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d005      	beq.n	8009130 <BAT_update+0xa0>
    {
      LOG_error("HAL_ADC_Start() returned an error code: %d", l_halReturnCode);
 8009124:	7ffb      	ldrb	r3, [r7, #31]
 8009126:	461a      	mov	r2, r3
 8009128:	4929      	ldr	r1, [pc, #164]	; (80091d0 <BAT_update+0x140>)
 800912a:	2003      	movs	r0, #3
 800912c:	f001 fd1e 	bl	800ab6c <LOG_log>
    else
    {
      ; /* Nothing to to */
    }

    l_halReturnCode = HAL_ADC_PollForConversion(g_BAT_adcHandle, HAL_MAX_DELAY);
 8009130:	4b26      	ldr	r3, [pc, #152]	; (80091cc <BAT_update+0x13c>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f04f 31ff 	mov.w	r1, #4294967295
 8009138:	4618      	mov	r0, r3
 800913a:	f7f9 ff05 	bl	8002f48 <HAL_ADC_PollForConversion>
 800913e:	4603      	mov	r3, r0
 8009140:	77fb      	strb	r3, [r7, #31]

    if (l_halReturnCode != HAL_OK)
 8009142:	7ffb      	ldrb	r3, [r7, #31]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d005      	beq.n	8009154 <BAT_update+0xc4>
    {
      LOG_error("HAL_ADC_PollForConversion() returned an error code: %d", l_halReturnCode);
 8009148:	7ffb      	ldrb	r3, [r7, #31]
 800914a:	461a      	mov	r2, r3
 800914c:	4921      	ldr	r1, [pc, #132]	; (80091d4 <BAT_update+0x144>)
 800914e:	2003      	movs	r0, #3
 8009150:	f001 fd0c 	bl	800ab6c <LOG_log>
    else
    {
      ; /* Nothing to to */
    }

    l_adcRawData = HAL_ADC_GetValue(g_BAT_adcHandle);
 8009154:	4b1d      	ldr	r3, [pc, #116]	; (80091cc <BAT_update+0x13c>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4618      	mov	r0, r3
 800915a:	f7fa f817 	bl	800318c <HAL_ADC_GetValue>
 800915e:	61b8      	str	r0, [r7, #24]

    /* Apply conversion based on STM32 reference voltage & resolution */
    l_voltageInV  = (l_adcRawData * 3.30f ) / 4096.0f;
 8009160:	69b8      	ldr	r0, [r7, #24]
 8009162:	f7f7 fdb3 	bl	8000ccc <__aeabi_ui2f>
 8009166:	4603      	mov	r3, r0
 8009168:	491b      	ldr	r1, [pc, #108]	; (80091d8 <BAT_update+0x148>)
 800916a:	4618      	mov	r0, r3
 800916c:	f7f7 fe06 	bl	8000d7c <__aeabi_fmul>
 8009170:	4603      	mov	r3, r0
 8009172:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8009176:	4618      	mov	r0, r3
 8009178:	f7f7 feb4 	bl	8000ee4 <__aeabi_fdiv>
 800917c:	4603      	mov	r3, r0
 800917e:	617b      	str	r3, [r7, #20]

    /* Consider voltage divider used between the battery & the ADC input */
    l_voltageInV *= 11.0f;
 8009180:	4916      	ldr	r1, [pc, #88]	; (80091dc <BAT_update+0x14c>)
 8009182:	6978      	ldr	r0, [r7, #20]
 8009184:	f7f7 fdfa 	bl	8000d7c <__aeabi_fmul>
 8009188:	4603      	mov	r3, r0
 800918a:	617b      	str	r3, [r7, #20]

    *p_voltageInMv = (uint32_t)(l_voltageInV * 1000.0f);
 800918c:	4914      	ldr	r1, [pc, #80]	; (80091e0 <BAT_update+0x150>)
 800918e:	6978      	ldr	r0, [r7, #20]
 8009190:	f7f7 fdf4 	bl	8000d7c <__aeabi_fmul>
 8009194:	4603      	mov	r3, r0
 8009196:	4618      	mov	r0, r3
 8009198:	f7f7 ff66 	bl	8001068 <__aeabi_f2uiz>
 800919c:	4602      	mov	r2, r0
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	601a      	str	r2, [r3, #0]

    LOG_debug("Battery level: %u mV", *p_voltageInMv);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	461a      	mov	r2, r3
 80091a8:	490e      	ldr	r1, [pc, #56]	; (80091e4 <BAT_update+0x154>)
 80091aa:	2000      	movs	r0, #0
 80091ac:	f001 fcde 	bl	800ab6c <LOG_log>
  else
  {
    ; /* Nothing to do */
  }

  return;
 80091b0:	bf00      	nop
 80091b2:	bf00      	nop
}
 80091b4:	3724      	adds	r7, #36	; 0x24
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd90      	pop	{r4, r7, pc}
 80091ba:	bf00      	nop
 80091bc:	20000220 	.word	0x20000220
 80091c0:	0800ed38 	.word	0x0800ed38
 80091c4:	0800ed68 	.word	0x0800ed68
 80091c8:	20000224 	.word	0x20000224
 80091cc:	2000021c 	.word	0x2000021c
 80091d0:	0800ed98 	.word	0x0800ed98
 80091d4:	0800edc4 	.word	0x0800edc4
 80091d8:	40533333 	.word	0x40533333
 80091dc:	41300000 	.word	0x41300000
 80091e0:	447a0000 	.word	0x447a0000
 80091e4:	0800edfc 	.word	0x0800edfc

080091e8 <BLU_sendCommand>:
static void         BLU_sendCommand(uint8_t  p_command);
static void         BLU_readData   (uint8_t *p_buffer );
static T_BLU_BUTTON BLU_getButton  (uint8_t *p_buffer );

static void BLU_sendCommand(uint8_t p_command)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	4603      	mov	r3, r0
 80091f0:	71fb      	strb	r3, [r7, #7]
  volatile uint16_t l_bitValue;

  for (l_bitValue = 0x01; l_bitValue < 0x0100; l_bitValue <<= 1)
 80091f2:	2301      	movs	r3, #1
 80091f4:	81fb      	strh	r3, [r7, #14]
 80091f6:	e030      	b.n	800925a <BLU_sendCommand+0x72>
  {
    if ((l_bitValue & p_command) != 0)
 80091f8:	89fb      	ldrh	r3, [r7, #14]
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	461a      	mov	r2, r3
 80091fe:	79fb      	ldrb	r3, [r7, #7]
 8009200:	4013      	ands	r3, r2
 8009202:	2b00      	cmp	r3, #0
 8009204:	d006      	beq.n	8009214 <BLU_sendCommand+0x2c>
    {
      SET_BIT(GPIOC->ODR, BLUETOOTH_SPI_CMD_Pin);
 8009206:	4b1a      	ldr	r3, [pc, #104]	; (8009270 <BLU_sendCommand+0x88>)
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	4a19      	ldr	r2, [pc, #100]	; (8009270 <BLU_sendCommand+0x88>)
 800920c:	f043 0302 	orr.w	r3, r3, #2
 8009210:	60d3      	str	r3, [r2, #12]
 8009212:	e005      	b.n	8009220 <BLU_sendCommand+0x38>
    }
    else
    {
      CLEAR_BIT(GPIOC->ODR, BLUETOOTH_SPI_CMD_Pin);
 8009214:	4b16      	ldr	r3, [pc, #88]	; (8009270 <BLU_sendCommand+0x88>)
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	4a15      	ldr	r2, [pc, #84]	; (8009270 <BLU_sendCommand+0x88>)
 800921a:	f023 0302 	bic.w	r3, r3, #2
 800921e:	60d3      	str	r3, [r2, #12]
    }

    SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 8009220:	4b14      	ldr	r3, [pc, #80]	; (8009274 <BLU_sendCommand+0x8c>)
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	4a13      	ldr	r2, [pc, #76]	; (8009274 <BLU_sendCommand+0x8c>)
 8009226:	f043 0310 	orr.w	r3, r3, #16
 800922a:	60d3      	str	r3, [r2, #12]
    UTI_delayUs(5);
 800922c:	2005      	movs	r0, #5
 800922e:	f002 f8c3 	bl	800b3b8 <UTI_delayUs>
    CLEAR_BIT(GPIOA->ODR, BLUETOOTH_SPI_CLK_Pin);
 8009232:	4b10      	ldr	r3, [pc, #64]	; (8009274 <BLU_sendCommand+0x8c>)
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	4a0f      	ldr	r2, [pc, #60]	; (8009274 <BLU_sendCommand+0x8c>)
 8009238:	f023 0310 	bic.w	r3, r3, #16
 800923c:	60d3      	str	r3, [r2, #12]
    UTI_delayUs(5);
 800923e:	2005      	movs	r0, #5
 8009240:	f002 f8ba 	bl	800b3b8 <UTI_delayUs>
    SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 8009244:	4b0b      	ldr	r3, [pc, #44]	; (8009274 <BLU_sendCommand+0x8c>)
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	4a0a      	ldr	r2, [pc, #40]	; (8009274 <BLU_sendCommand+0x8c>)
 800924a:	f043 0310 	orr.w	r3, r3, #16
 800924e:	60d3      	str	r3, [r2, #12]
  for (l_bitValue = 0x01; l_bitValue < 0x0100; l_bitValue <<= 1)
 8009250:	89fb      	ldrh	r3, [r7, #14]
 8009252:	b29b      	uxth	r3, r3
 8009254:	005b      	lsls	r3, r3, #1
 8009256:	b29b      	uxth	r3, r3
 8009258:	81fb      	strh	r3, [r7, #14]
 800925a:	89fb      	ldrh	r3, [r7, #14]
 800925c:	b29b      	uxth	r3, r3
 800925e:	2bff      	cmp	r3, #255	; 0xff
 8009260:	d9ca      	bls.n	80091f8 <BLU_sendCommand+0x10>
  }
  UTI_delayUs(16);
 8009262:	2010      	movs	r0, #16
 8009264:	f002 f8a8 	bl	800b3b8 <UTI_delayUs>

  return;
 8009268:	bf00      	nop
}
 800926a:	3710      	adds	r7, #16
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}
 8009270:	40011000 	.word	0x40011000
 8009274:	40010800 	.word	0x40010800

08009278 <BLU_readData>:

static void BLU_readData(uint8_t *p_buffer)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  volatile uint8_t  l_index;
  volatile uint16_t l_bitValue;

  /* Reset buffer */
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 8009280:	2300      	movs	r3, #0
 8009282:	73fb      	strb	r3, [r7, #15]
 8009284:	e00b      	b.n	800929e <BLU_readData+0x26>
  {
    p_buffer[l_index] = 0x00;
 8009286:	7bfb      	ldrb	r3, [r7, #15]
 8009288:	b2db      	uxtb	r3, r3
 800928a:	461a      	mov	r2, r3
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4413      	add	r3, r2
 8009290:	2200      	movs	r2, #0
 8009292:	701a      	strb	r2, [r3, #0]
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 8009294:	7bfb      	ldrb	r3, [r7, #15]
 8009296:	b2db      	uxtb	r3, r3
 8009298:	3301      	adds	r3, #1
 800929a:	b2db      	uxtb	r3, r3
 800929c:	73fb      	strb	r3, [r7, #15]
 800929e:	7bfb      	ldrb	r3, [r7, #15]
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	2b06      	cmp	r3, #6
 80092a4:	d9ef      	bls.n	8009286 <BLU_readData+0xe>
  }

  CLEAR_BIT(GPIOC->ODR, BLUETOOTH_SPI_CS_Pin);
 80092a6:	4b2e      	ldr	r3, [pc, #184]	; (8009360 <BLU_readData+0xe8>)
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	4a2d      	ldr	r2, [pc, #180]	; (8009360 <BLU_readData+0xe8>)
 80092ac:	f023 0308 	bic.w	r3, r3, #8
 80092b0:	60d3      	str	r3, [r2, #12]

  BLU_sendCommand(0x01);
 80092b2:	2001      	movs	r0, #1
 80092b4:	f7ff ff98 	bl	80091e8 <BLU_sendCommand>
  BLU_sendCommand(0x42);
 80092b8:	2042      	movs	r0, #66	; 0x42
 80092ba:	f7ff ff95 	bl	80091e8 <BLU_sendCommand>

  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 80092be:	2300      	movs	r3, #0
 80092c0:	73fb      	strb	r3, [r7, #15]
 80092c2:	e03f      	b.n	8009344 <BLU_readData+0xcc>
  {
    for (l_bitValue = 0x01; l_bitValue < 0x100; l_bitValue <<= 1)
 80092c4:	2301      	movs	r3, #1
 80092c6:	81bb      	strh	r3, [r7, #12]
 80092c8:	e030      	b.n	800932c <BLU_readData+0xb4>
    {
      SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 80092ca:	4b26      	ldr	r3, [pc, #152]	; (8009364 <BLU_readData+0xec>)
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	4a25      	ldr	r2, [pc, #148]	; (8009364 <BLU_readData+0xec>)
 80092d0:	f043 0310 	orr.w	r3, r3, #16
 80092d4:	60d3      	str	r3, [r2, #12]
      UTI_delayUs(5);
 80092d6:	2005      	movs	r0, #5
 80092d8:	f002 f86e 	bl	800b3b8 <UTI_delayUs>
      CLEAR_BIT(GPIOA->ODR, BLUETOOTH_SPI_CLK_Pin);
 80092dc:	4b21      	ldr	r3, [pc, #132]	; (8009364 <BLU_readData+0xec>)
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	4a20      	ldr	r2, [pc, #128]	; (8009364 <BLU_readData+0xec>)
 80092e2:	f023 0310 	bic.w	r3, r3, #16
 80092e6:	60d3      	str	r3, [r2, #12]
      UTI_delayUs(5);
 80092e8:	2005      	movs	r0, #5
 80092ea:	f002 f865 	bl	800b3b8 <UTI_delayUs>
      SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 80092ee:	4b1d      	ldr	r3, [pc, #116]	; (8009364 <BLU_readData+0xec>)
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	4a1c      	ldr	r2, [pc, #112]	; (8009364 <BLU_readData+0xec>)
 80092f4:	f043 0310 	orr.w	r3, r3, #16
 80092f8:	60d3      	str	r3, [r2, #12]

      if (READ_BIT(GPIOC->IDR, BLUETOOTH_SPI_DAT_Pin) != GPIO_PIN_RESET)
 80092fa:	4b19      	ldr	r3, [pc, #100]	; (8009360 <BLU_readData+0xe8>)
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	f003 0304 	and.w	r3, r3, #4
 8009302:	2b00      	cmp	r3, #0
 8009304:	d00d      	beq.n	8009322 <BLU_readData+0xaa>
      {
        p_buffer[l_index] |= l_bitValue;
 8009306:	89bb      	ldrh	r3, [r7, #12]
 8009308:	b29a      	uxth	r2, r3
 800930a:	7bfb      	ldrb	r3, [r7, #15]
 800930c:	b2d8      	uxtb	r0, r3
 800930e:	4601      	mov	r1, r0
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	440b      	add	r3, r1
 8009314:	7819      	ldrb	r1, [r3, #0]
 8009316:	b2d2      	uxtb	r2, r2
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	4403      	add	r3, r0
 800931c:	430a      	orrs	r2, r1
 800931e:	b2d2      	uxtb	r2, r2
 8009320:	701a      	strb	r2, [r3, #0]
    for (l_bitValue = 0x01; l_bitValue < 0x100; l_bitValue <<= 1)
 8009322:	89bb      	ldrh	r3, [r7, #12]
 8009324:	b29b      	uxth	r3, r3
 8009326:	005b      	lsls	r3, r3, #1
 8009328:	b29b      	uxth	r3, r3
 800932a:	81bb      	strh	r3, [r7, #12]
 800932c:	89bb      	ldrh	r3, [r7, #12]
 800932e:	b29b      	uxth	r3, r3
 8009330:	2bff      	cmp	r3, #255	; 0xff
 8009332:	d9ca      	bls.n	80092ca <BLU_readData+0x52>
      else
      {
        ; /* Nothing to do */
      }
    }
      UTI_delayUs(16);
 8009334:	2010      	movs	r0, #16
 8009336:	f002 f83f 	bl	800b3b8 <UTI_delayUs>
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 800933a:	7bfb      	ldrb	r3, [r7, #15]
 800933c:	b2db      	uxtb	r3, r3
 800933e:	3301      	adds	r3, #1
 8009340:	b2db      	uxtb	r3, r3
 8009342:	73fb      	strb	r3, [r7, #15]
 8009344:	7bfb      	ldrb	r3, [r7, #15]
 8009346:	b2db      	uxtb	r3, r3
 8009348:	2b06      	cmp	r3, #6
 800934a:	d9bb      	bls.n	80092c4 <BLU_readData+0x4c>
  }

  SET_BIT(GPIOC->ODR, BLUETOOTH_SPI_CS_Pin);
 800934c:	4b04      	ldr	r3, [pc, #16]	; (8009360 <BLU_readData+0xe8>)
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	4a03      	ldr	r2, [pc, #12]	; (8009360 <BLU_readData+0xe8>)
 8009352:	f043 0308 	orr.w	r3, r3, #8
 8009356:	60d3      	str	r3, [r2, #12]

  return;
 8009358:	bf00      	nop
}
 800935a:	3710      	adds	r7, #16
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	40011000 	.word	0x40011000
 8009364:	40010800 	.word	0x40010800

08009368 <BLU_getButton>:

static T_BLU_BUTTON BLU_getButton(uint8_t *p_buffer)
{
 8009368:	b480      	push	{r7}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  uint16_t l_buttonRawValue;
  uint8_t  l_index;

  l_buttonRawValue = (p_buffer[BLU_BUTTON_HIGH_OFFSET] << 8) | p_buffer[BLU_BUTTON_LOW_OFFSET];
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	3302      	adds	r3, #2
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	021b      	lsls	r3, r3, #8
 8009378:	b21a      	sxth	r2, r3
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	3301      	adds	r3, #1
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	b21b      	sxth	r3, r3
 8009382:	4313      	orrs	r3, r2
 8009384:	b21b      	sxth	r3, r3
 8009386:	81bb      	strh	r3, [r7, #12]

  /* Ignore BLU_BUTTON_NONE value as it is not directly coded in raw data */
  for (l_index = BLU_BUTTON_SELECT; l_index < BLU_BUTTON_COUNT_VALUE; l_index++)
 8009388:	2301      	movs	r3, #1
 800938a:	73fb      	strb	r3, [r7, #15]
 800938c:	e00d      	b.n	80093aa <BLU_getButton+0x42>
  {
    /* Stop decoding button data on 1st match (do not deal with multiple presses case) */
    if ((l_buttonRawValue & (1 << (l_index - 1))) == 0)
 800938e:	89ba      	ldrh	r2, [r7, #12]
 8009390:	7bfb      	ldrb	r3, [r7, #15]
 8009392:	3b01      	subs	r3, #1
 8009394:	fa42 f303 	asr.w	r3, r2, r3
 8009398:	f003 0301 	and.w	r3, r3, #1
 800939c:	2b00      	cmp	r3, #0
 800939e:	d101      	bne.n	80093a4 <BLU_getButton+0x3c>
    {
      return l_index;
 80093a0:	7bfb      	ldrb	r3, [r7, #15]
 80093a2:	e006      	b.n	80093b2 <BLU_getButton+0x4a>
  for (l_index = BLU_BUTTON_SELECT; l_index < BLU_BUTTON_COUNT_VALUE; l_index++)
 80093a4:	7bfb      	ldrb	r3, [r7, #15]
 80093a6:	3301      	adds	r3, #1
 80093a8:	73fb      	strb	r3, [r7, #15]
 80093aa:	7bfb      	ldrb	r3, [r7, #15]
 80093ac:	2b10      	cmp	r3, #16
 80093ae:	d9ee      	bls.n	800938e <BLU_getButton+0x26>
    {
      ; /* Nothing to do */
    }
  }

  return BLU_BUTTON_NONE;
 80093b0:	2300      	movs	r3, #0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3714      	adds	r7, #20
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bc80      	pop	{r7}
 80093ba:	4770      	bx	lr

080093bc <BLU_init>:

void BLU_init(void)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	af00      	add	r7, sp, #0
  LOG_info("Initializing bluetooth control");
 80093c0:	4904      	ldr	r1, [pc, #16]	; (80093d4 <BLU_init+0x18>)
 80093c2:	2001      	movs	r0, #1
 80093c4:	f001 fbd2 	bl	800ab6c <LOG_log>

  BLU_initData(&g_BLU_lastData);
 80093c8:	4803      	ldr	r0, [pc, #12]	; (80093d8 <BLU_init+0x1c>)
 80093ca:	f000 f807 	bl	80093dc <BLU_initData>

  return;
 80093ce:	bf00      	nop
}
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	0800ee14 	.word	0x0800ee14
 80093d8:	20000228 	.word	0x20000228

080093dc <BLU_initData>:

void BLU_initData(T_BLU_Data *p_data)
{
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  p_data->leftX  = BLU_DATA_DEFAUT_DIRECTION;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2280      	movs	r2, #128	; 0x80
 80093e8:	601a      	str	r2, [r3, #0]
  p_data->leftY  = BLU_DATA_DEFAUT_DIRECTION;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2280      	movs	r2, #128	; 0x80
 80093ee:	605a      	str	r2, [r3, #4]
  p_data->rightX = BLU_DATA_DEFAUT_DIRECTION;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2280      	movs	r2, #128	; 0x80
 80093f4:	609a      	str	r2, [r3, #8]
  p_data->rightY = BLU_DATA_DEFAUT_DIRECTION;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2280      	movs	r2, #128	; 0x80
 80093fa:	60da      	str	r2, [r3, #12]
  p_data->button = BLU_BUTTON_NONE;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	741a      	strb	r2, [r3, #16]

  return;
 8009402:	bf00      	nop
}
 8009404:	370c      	adds	r7, #12
 8009406:	46bd      	mov	sp, r7
 8009408:	bc80      	pop	{r7}
 800940a:	4770      	bx	lr

0800940c <BLU_receiveData>:

void BLU_receiveData(T_BLU_Data *p_data)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b08c      	sub	sp, #48	; 0x30
 8009410:	af02      	add	r7, sp, #8
 8009412:	6078      	str	r0, [r7, #4]
  uint8_t    l_buffer[BLU_DATA_BUFFER_LENGTH];
  T_BLU_Data l_readData;

  /* Read raw data */
  BLU_readData(l_buffer);
 8009414:	f107 0320 	add.w	r3, r7, #32
 8009418:	4618      	mov	r0, r3
 800941a:	f7ff ff2d 	bl	8009278 <BLU_readData>

  /* Start and decode raw data */
  l_readData.leftX  = l_buffer[BLU_LEFT_X_OFFSET ];
 800941e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009422:	60fb      	str	r3, [r7, #12]
  l_readData.leftY  = l_buffer[BLU_LEFT_Y_OFFSET ];
 8009424:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009428:	613b      	str	r3, [r7, #16]
  l_readData.rightX = l_buffer[BLU_RIGHT_X_OFFSET];
 800942a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800942e:	617b      	str	r3, [r7, #20]
  l_readData.rightY = l_buffer[BLU_RIGHT_Y_OFFSET];
 8009430:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009434:	61bb      	str	r3, [r7, #24]
  l_readData.button = BLU_getButton(l_buffer);
 8009436:	f107 0320 	add.w	r3, r7, #32
 800943a:	4618      	mov	r0, r3
 800943c:	f7ff ff94 	bl	8009368 <BLU_getButton>
 8009440:	4603      	mov	r3, r0
 8009442:	773b      	strb	r3, [r7, #28]

  /* Deal with startup condition, while read data is not valid yet */
  if  ((l_readData.leftX == 255 && l_readData.leftY == 255 && l_readData.rightX == 255 && l_readData.rightY ==255)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2bff      	cmp	r3, #255	; 0xff
 8009448:	d108      	bne.n	800945c <BLU_receiveData+0x50>
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	2bff      	cmp	r3, #255	; 0xff
 800944e:	d105      	bne.n	800945c <BLU_receiveData+0x50>
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	2bff      	cmp	r3, #255	; 0xff
 8009454:	d102      	bne.n	800945c <BLU_receiveData+0x50>
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	2bff      	cmp	r3, #255	; 0xff
 800945a:	d00b      	beq.n	8009474 <BLU_receiveData+0x68>
    || (l_readData.leftX ==   0 && l_readData.leftY ==   0 && l_readData.rightX ==   0 && l_readData.rightY ==  0))
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d10e      	bne.n	8009480 <BLU_receiveData+0x74>
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d10b      	bne.n	8009480 <BLU_receiveData+0x74>
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d108      	bne.n	8009480 <BLU_receiveData+0x74>
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d105      	bne.n	8009480 <BLU_receiveData+0x74>
  {
    BLU_initData(&l_readData);
 8009474:	f107 030c 	add.w	r3, r7, #12
 8009478:	4618      	mov	r0, r3
 800947a:	f7ff ffaf 	bl	80093dc <BLU_initData>
 800947e:	e053      	b.n	8009528 <BLU_receiveData+0x11c>
  }
  /* Use a confirmation mechanism, on 2 cycles, as glitches are observed */
  else if ((l_readData.leftX  == g_BLU_lastData.leftX) &&
 8009480:	68fa      	ldr	r2, [r7, #12]
 8009482:	4b33      	ldr	r3, [pc, #204]	; (8009550 <BLU_receiveData+0x144>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	429a      	cmp	r2, r3
 8009488:	d14e      	bne.n	8009528 <BLU_receiveData+0x11c>
           (l_readData.leftY  == g_BLU_lastData.leftY) &&
 800948a:	693a      	ldr	r2, [r7, #16]
 800948c:	4b30      	ldr	r3, [pc, #192]	; (8009550 <BLU_receiveData+0x144>)
 800948e:	685b      	ldr	r3, [r3, #4]
  else if ((l_readData.leftX  == g_BLU_lastData.leftX) &&
 8009490:	429a      	cmp	r2, r3
 8009492:	d149      	bne.n	8009528 <BLU_receiveData+0x11c>
           (l_readData.rightX == g_BLU_lastData.rightX) &&
 8009494:	697a      	ldr	r2, [r7, #20]
 8009496:	4b2e      	ldr	r3, [pc, #184]	; (8009550 <BLU_receiveData+0x144>)
 8009498:	689b      	ldr	r3, [r3, #8]
           (l_readData.leftY  == g_BLU_lastData.leftY) &&
 800949a:	429a      	cmp	r2, r3
 800949c:	d144      	bne.n	8009528 <BLU_receiveData+0x11c>
           (l_readData.rightY == g_BLU_lastData.rightY) &&
 800949e:	69ba      	ldr	r2, [r7, #24]
 80094a0:	4b2b      	ldr	r3, [pc, #172]	; (8009550 <BLU_receiveData+0x144>)
 80094a2:	68db      	ldr	r3, [r3, #12]
           (l_readData.rightX == g_BLU_lastData.rightX) &&
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d13f      	bne.n	8009528 <BLU_receiveData+0x11c>
           (l_readData.button == g_BLU_lastData.button))
 80094a8:	7f3a      	ldrb	r2, [r7, #28]
 80094aa:	4b29      	ldr	r3, [pc, #164]	; (8009550 <BLU_receiveData+0x144>)
 80094ac:	7c1b      	ldrb	r3, [r3, #16]
           (l_readData.rightY == g_BLU_lastData.rightY) &&
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d13a      	bne.n	8009528 <BLU_receiveData+0x11c>
  {
    /* Normalize directions data in range [-MAX..MAX] */
    p_data->leftX  = UTI_normalizeIntValue(l_readData.leftX , 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, false);
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	2300      	movs	r3, #0
 80094b6:	9301      	str	r3, [sp, #4]
 80094b8:	2328      	movs	r3, #40	; 0x28
 80094ba:	9300      	str	r3, [sp, #0]
 80094bc:	f06f 0327 	mvn.w	r3, #39	; 0x27
 80094c0:	22ff      	movs	r2, #255	; 0xff
 80094c2:	2100      	movs	r1, #0
 80094c4:	f001 fffd 	bl	800b4c2 <UTI_normalizeIntValue>
 80094c8:	4602      	mov	r2, r0
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	601a      	str	r2, [r3, #0]
    p_data->leftY  = UTI_normalizeIntValue(l_readData.leftY , 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, true );
 80094ce:	6938      	ldr	r0, [r7, #16]
 80094d0:	2301      	movs	r3, #1
 80094d2:	9301      	str	r3, [sp, #4]
 80094d4:	2328      	movs	r3, #40	; 0x28
 80094d6:	9300      	str	r3, [sp, #0]
 80094d8:	f06f 0327 	mvn.w	r3, #39	; 0x27
 80094dc:	22ff      	movs	r2, #255	; 0xff
 80094de:	2100      	movs	r1, #0
 80094e0:	f001 ffef 	bl	800b4c2 <UTI_normalizeIntValue>
 80094e4:	4602      	mov	r2, r0
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	605a      	str	r2, [r3, #4]
    p_data->rightX = UTI_normalizeIntValue(l_readData.rightX, 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, false);
 80094ea:	6978      	ldr	r0, [r7, #20]
 80094ec:	2300      	movs	r3, #0
 80094ee:	9301      	str	r3, [sp, #4]
 80094f0:	2328      	movs	r3, #40	; 0x28
 80094f2:	9300      	str	r3, [sp, #0]
 80094f4:	f06f 0327 	mvn.w	r3, #39	; 0x27
 80094f8:	22ff      	movs	r2, #255	; 0xff
 80094fa:	2100      	movs	r1, #0
 80094fc:	f001 ffe1 	bl	800b4c2 <UTI_normalizeIntValue>
 8009500:	4602      	mov	r2, r0
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	609a      	str	r2, [r3, #8]
    p_data->rightY = UTI_normalizeIntValue(l_readData.rightY, 0, 255, -STP_DRIVE_MAX_SPEED, STP_DRIVE_MAX_SPEED, true );
 8009506:	69b8      	ldr	r0, [r7, #24]
 8009508:	2301      	movs	r3, #1
 800950a:	9301      	str	r3, [sp, #4]
 800950c:	2328      	movs	r3, #40	; 0x28
 800950e:	9300      	str	r3, [sp, #0]
 8009510:	f06f 0327 	mvn.w	r3, #39	; 0x27
 8009514:	22ff      	movs	r2, #255	; 0xff
 8009516:	2100      	movs	r1, #0
 8009518:	f001 ffd3 	bl	800b4c2 <UTI_normalizeIntValue>
 800951c:	4602      	mov	r2, r0
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	60da      	str	r2, [r3, #12]
    p_data->button = l_readData.button;
 8009522:	7f3a      	ldrb	r2, [r7, #28]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	741a      	strb	r2, [r3, #16]
  {
    ; /* Nothing to do */
  }

  /* Saved received data for later use in confirmation mechanism */
  g_BLU_lastData.leftX  = l_readData.leftX;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	4a09      	ldr	r2, [pc, #36]	; (8009550 <BLU_receiveData+0x144>)
 800952c:	6013      	str	r3, [r2, #0]
  g_BLU_lastData.leftY  = l_readData.leftY;
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	4a07      	ldr	r2, [pc, #28]	; (8009550 <BLU_receiveData+0x144>)
 8009532:	6053      	str	r3, [r2, #4]
  g_BLU_lastData.rightX = l_readData.rightX;
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	4a06      	ldr	r2, [pc, #24]	; (8009550 <BLU_receiveData+0x144>)
 8009538:	6093      	str	r3, [r2, #8]
  g_BLU_lastData.rightY = l_readData.rightY;
 800953a:	69bb      	ldr	r3, [r7, #24]
 800953c:	4a04      	ldr	r2, [pc, #16]	; (8009550 <BLU_receiveData+0x144>)
 800953e:	60d3      	str	r3, [r2, #12]
  g_BLU_lastData.button = l_readData.button;
 8009540:	7f3a      	ldrb	r2, [r7, #28]
 8009542:	4b03      	ldr	r3, [pc, #12]	; (8009550 <BLU_receiveData+0x144>)
 8009544:	741a      	strb	r2, [r3, #16]

  return;
 8009546:	bf00      	nop
}
 8009548:	3728      	adds	r7, #40	; 0x28
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	20000228 	.word	0x20000228

08009554 <CBU_init>:
#include "circular_buffer.h"

#include "log.h"

void CBU_init(T_CBU_Context *p_buffer)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  uint32_t l_index;

  LOG_debug("Initializing Circular buffer");
 800955c:	490e      	ldr	r1, [pc, #56]	; (8009598 <CBU_init+0x44>)
 800955e:	2000      	movs	r0, #0
 8009560:	f001 fb04 	bl	800ab6c <LOG_log>

  for (l_index = 0; l_index < CST_CIRCULAR_BUFFER_MAX_ELEMENTS; l_index++)
 8009564:	2300      	movs	r3, #0
 8009566:	60fb      	str	r3, [r7, #12]
 8009568:	e008      	b.n	800957c <CBU_init+0x28>
  {
    p_buffer->elements[l_index] = 0.0f;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	f04f 0100 	mov.w	r1, #0
 8009572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (l_index = 0; l_index < CST_CIRCULAR_BUFFER_MAX_ELEMENTS; l_index++)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	3301      	adds	r3, #1
 800957a:	60fb      	str	r3, [r7, #12]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2b09      	cmp	r3, #9
 8009580:	d9f3      	bls.n	800956a <CBU_init+0x16>
  }

  p_buffer->count = 0;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2200      	movs	r2, #0
 8009586:	62da      	str	r2, [r3, #44]	; 0x2c
  p_buffer->index = 0;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2200      	movs	r2, #0
 800958c:	629a      	str	r2, [r3, #40]	; 0x28

  return;
 800958e:	bf00      	nop
}
 8009590:	3710      	adds	r7, #16
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	0800ee34 	.word	0x0800ee34

0800959c <CBU_push>:

void CBU_push(T_CBU_Context *p_buffer, float p_element)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
  if (p_buffer->index == CST_CIRCULAR_BUFFER_MAX_ELEMENTS - 1)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095aa:	2b09      	cmp	r3, #9
 80095ac:	d103      	bne.n	80095b6 <CBU_push+0x1a>
  {
    p_buffer->index = 0;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	629a      	str	r2, [r3, #40]	; 0x28
 80095b4:	e004      	b.n	80095c0 <CBU_push+0x24>
  }
  else
  {
    p_buffer->index++;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ba:	1c5a      	adds	r2, r3, #1
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  p_buffer->elements[p_buffer->index] = p_element;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6839      	ldr	r1, [r7, #0]
 80095c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  if (p_buffer->count < CST_CIRCULAR_BUFFER_MAX_ELEMENTS)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d0:	2b09      	cmp	r3, #9
 80095d2:	d805      	bhi.n	80095e0 <CBU_push+0x44>
  {
    p_buffer->count++;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d8:	1c5a      	adds	r2, r3, #1
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	62da      	str	r2, [r3, #44]	; 0x2c
  else
  {
    ; /* Nothing to do */
  }

  return;
 80095de:	bf00      	nop
 80095e0:	bf00      	nop
}
 80095e2:	370c      	adds	r7, #12
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bc80      	pop	{r7}
 80095e8:	4770      	bx	lr

080095ea <CBU_getAverage>:
{
  return p_buffer->count;
}

float CBU_getAverage(T_CBU_Context *p_buffer)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b086      	sub	sp, #24
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
  uint32_t l_index;
  uint32_t l_count;
  float    l_average;

  l_index   = p_buffer->index;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095f6:	617b      	str	r3, [r7, #20]
  l_count   = 0;
 80095f8:	2300      	movs	r3, #0
 80095fa:	613b      	str	r3, [r7, #16]
  l_average = 0.0f;
 80095fc:	f04f 0300 	mov.w	r3, #0
 8009600:	60fb      	str	r3, [r7, #12]

  while (l_count < p_buffer->count)
 8009602:	e015      	b.n	8009630 <CBU_getAverage+0x46>
  {
    l_average += p_buffer->elements[l_index];
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	697a      	ldr	r2, [r7, #20]
 8009608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800960c:	4619      	mov	r1, r3
 800960e:	68f8      	ldr	r0, [r7, #12]
 8009610:	f7f7 faac 	bl	8000b6c <__addsf3>
 8009614:	4603      	mov	r3, r0
 8009616:	60fb      	str	r3, [r7, #12]

    if (l_index == CST_CIRCULAR_BUFFER_MAX_ELEMENTS - 1)
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	2b09      	cmp	r3, #9
 800961c:	d102      	bne.n	8009624 <CBU_getAverage+0x3a>
    {
      l_index = 0;
 800961e:	2300      	movs	r3, #0
 8009620:	617b      	str	r3, [r7, #20]
 8009622:	e002      	b.n	800962a <CBU_getAverage+0x40>
    }
    else
    {
      l_index++;
 8009624:	697b      	ldr	r3, [r7, #20]
 8009626:	3301      	adds	r3, #1
 8009628:	617b      	str	r3, [r7, #20]
    }

    l_count++;
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	3301      	adds	r3, #1
 800962e:	613b      	str	r3, [r7, #16]
  while (l_count < p_buffer->count)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009634:	693a      	ldr	r2, [r7, #16]
 8009636:	429a      	cmp	r2, r3
 8009638:	d3e4      	bcc.n	8009604 <CBU_getAverage+0x1a>
  }

  l_average /= (float)p_buffer->count;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800963e:	4618      	mov	r0, r3
 8009640:	f7f7 fb44 	bl	8000ccc <__aeabi_ui2f>
 8009644:	4603      	mov	r3, r0
 8009646:	4619      	mov	r1, r3
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f7f7 fc4b 	bl	8000ee4 <__aeabi_fdiv>
 800964e:	4603      	mov	r3, r0
 8009650:	60fb      	str	r3, [r7, #12]

  return l_average;
 8009652:	68fb      	ldr	r3, [r7, #12]
}
 8009654:	4618      	mov	r0, r3
 8009656:	3718      	adds	r7, #24
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <CON_init>:
static T_SFO_data          g_CON_data;
static uint32_t            g_CON_dataSize;
static bool                g_CON_isDataComplete;

void CON_init(UART_HandleTypeDef *p_uartHandle)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b082      	sub	sp, #8
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing console");
 8009664:	490d      	ldr	r1, [pc, #52]	; (800969c <CON_init+0x40>)
 8009666:	2001      	movs	r0, #1
 8009668:	f001 fa80 	bl	800ab6c <LOG_log>

  g_CON_uartHandle     = p_uartHandle;
 800966c:	4a0c      	ldr	r2, [pc, #48]	; (80096a0 <CON_init+0x44>)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6013      	str	r3, [r2, #0]
  g_CON_dataSize       = 0;
 8009672:	4b0c      	ldr	r3, [pc, #48]	; (80096a4 <CON_init+0x48>)
 8009674:	2200      	movs	r2, #0
 8009676:	601a      	str	r2, [r3, #0]
  g_CON_isDataComplete = false;
 8009678:	4b0b      	ldr	r3, [pc, #44]	; (80096a8 <CON_init+0x4c>)
 800967a:	2200      	movs	r2, #0
 800967c:	701a      	strb	r2, [r3, #0]

  SFO_initData(&g_CON_data);
 800967e:	480b      	ldr	r0, [pc, #44]	; (80096ac <CON_init+0x50>)
 8009680:	f001 fd78 	bl	800b174 <SFO_initData>

  HAL_UART_Receive_IT(g_CON_uartHandle, &g_CON_datum, 1);
 8009684:	4b06      	ldr	r3, [pc, #24]	; (80096a0 <CON_init+0x44>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	2201      	movs	r2, #1
 800968a:	4909      	ldr	r1, [pc, #36]	; (80096b0 <CON_init+0x54>)
 800968c:	4618      	mov	r0, r3
 800968e:	f7fe ffab 	bl	80085e8 <HAL_UART_Receive_IT>

  return;
 8009692:	bf00      	nop
}
 8009694:	3708      	adds	r7, #8
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	0800ee98 	.word	0x0800ee98
 80096a0:	2000023c 	.word	0x2000023c
 80096a4:	20000254 	.word	0x20000254
 80096a8:	20000258 	.word	0x20000258
 80096ac:	20000244 	.word	0x20000244
 80096b0:	20000240 	.word	0x20000240

080096b4 <CON_receiveData>:

void CON_receiveData(void)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	af00      	add	r7, sp, #0
  /* If previous command was not processed yet, drop datum, */
  /* which will lead to an error, showing a design issue... */
  if (g_CON_isDataComplete == true)
 80096b8:	4b0f      	ldr	r3, [pc, #60]	; (80096f8 <CON_receiveData+0x44>)
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d112      	bne.n	80096e6 <CON_receiveData+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (g_CON_datum == '\r')
 80096c0:	4b0e      	ldr	r3, [pc, #56]	; (80096fc <CON_receiveData+0x48>)
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	2b0d      	cmp	r3, #13
 80096c6:	d103      	bne.n	80096d0 <CON_receiveData+0x1c>
    {
      g_CON_isDataComplete = true;
 80096c8:	4b0b      	ldr	r3, [pc, #44]	; (80096f8 <CON_receiveData+0x44>)
 80096ca:	2201      	movs	r2, #1
 80096cc:	701a      	strb	r2, [r3, #0]
 80096ce:	e00a      	b.n	80096e6 <CON_receiveData+0x32>
    }
    else
    {
      g_CON_data[g_CON_dataSize] = g_CON_datum;
 80096d0:	4b0b      	ldr	r3, [pc, #44]	; (8009700 <CON_receiveData+0x4c>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a09      	ldr	r2, [pc, #36]	; (80096fc <CON_receiveData+0x48>)
 80096d6:	7811      	ldrb	r1, [r2, #0]
 80096d8:	4a0a      	ldr	r2, [pc, #40]	; (8009704 <CON_receiveData+0x50>)
 80096da:	54d1      	strb	r1, [r2, r3]
      g_CON_dataSize++;
 80096dc:	4b08      	ldr	r3, [pc, #32]	; (8009700 <CON_receiveData+0x4c>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	3301      	adds	r3, #1
 80096e2:	4a07      	ldr	r2, [pc, #28]	; (8009700 <CON_receiveData+0x4c>)
 80096e4:	6013      	str	r3, [r2, #0]
    }
  }

  HAL_UART_Receive_IT(g_CON_uartHandle, &g_CON_datum, 1);
 80096e6:	4b08      	ldr	r3, [pc, #32]	; (8009708 <CON_receiveData+0x54>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	2201      	movs	r2, #1
 80096ec:	4903      	ldr	r1, [pc, #12]	; (80096fc <CON_receiveData+0x48>)
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7fe ff7a 	bl	80085e8 <HAL_UART_Receive_IT>

  return;
 80096f4:	bf00      	nop
}
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	20000258 	.word	0x20000258
 80096fc:	20000240 	.word	0x20000240
 8009700:	20000254 	.word	0x20000254
 8009704:	20000244 	.word	0x20000244
 8009708:	2000023c 	.word	0x2000023c

0800970c <CON_updateFifo>:

void CON_updateFifo(T_SFO_Context *p_fifo)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  if (g_CON_isDataComplete == false)
 8009714:	4b0c      	ldr	r3, [pc, #48]	; (8009748 <CON_updateFifo+0x3c>)
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	f083 0301 	eor.w	r3, r3, #1
 800971c:	b2db      	uxtb	r3, r3
 800971e:	2b00      	cmp	r3, #0
 8009720:	d10d      	bne.n	800973e <CON_updateFifo+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    SFO_push    (p_fifo, &g_CON_data);
 8009722:	490a      	ldr	r1, [pc, #40]	; (800974c <CON_updateFifo+0x40>)
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f001 fd4b 	bl	800b1c0 <SFO_push>
    SFO_initData(&g_CON_data);
 800972a:	4808      	ldr	r0, [pc, #32]	; (800974c <CON_updateFifo+0x40>)
 800972c:	f001 fd22 	bl	800b174 <SFO_initData>

    g_CON_dataSize       = 0;
 8009730:	4b07      	ldr	r3, [pc, #28]	; (8009750 <CON_updateFifo+0x44>)
 8009732:	2200      	movs	r2, #0
 8009734:	601a      	str	r2, [r3, #0]
    g_CON_isDataComplete = false;
 8009736:	4b04      	ldr	r3, [pc, #16]	; (8009748 <CON_updateFifo+0x3c>)
 8009738:	2200      	movs	r2, #0
 800973a:	701a      	strb	r2, [r3, #0]
  }

  return;
 800973c:	bf00      	nop
 800973e:	bf00      	nop
}
 8009740:	3708      	adds	r7, #8
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	20000258 	.word	0x20000258
 800974c:	20000244 	.word	0x20000244
 8009750:	20000254 	.word	0x20000254

08009754 <CON_sendString>:

void CON_sendString(char *p_string, uint32_t p_length)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
  /* As this method is using for logging/debug, we will not deal with failure cases */
  (void)HAL_UART_Transmit(g_CON_uartHandle,
 800975e:	4b06      	ldr	r3, [pc, #24]	; (8009778 <CON_sendString+0x24>)
 8009760:	6818      	ldr	r0, [r3, #0]
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	b29a      	uxth	r2, r3
 8009766:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800976a:	6879      	ldr	r1, [r7, #4]
 800976c:	f7fe feaa 	bl	80084c4 <HAL_UART_Transmit>
               (uint8_t *)p_string,
                          p_length,
                          CST_UART_TRANSMIT_TIMEOUT_IN_MS);

  return;
 8009770:	bf00      	nop
}
 8009772:	3708      	adds	r7, #8
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	2000023c 	.word	0x2000023c

0800977c <DRV_init>:
void DRV_init(TIM_HandleTypeDef *p_pwmTimerHandle,
              TIM_HandleTypeDef *p_rearLeftEncoderTimerHandle,
              TIM_HandleTypeDef *p_rearRightEncoderTimerHandle,
              TIM_HandleTypeDef *p_frontRightEncoderTimerHandle,
              TIM_HandleTypeDef *p_frontLeftEncoderTimerHandle)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b088      	sub	sp, #32
 8009780:	af04      	add	r7, sp, #16
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]
 8009788:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing Drive module");
 800978a:	4955      	ldr	r1, [pc, #340]	; (80098e0 <DRV_init+0x164>)
 800978c:	2001      	movs	r0, #1
 800978e:	f001 f9ed 	bl	800ab6c <LOG_log>

  /* Setup PIDs */
  PID_init(&g_DRV_pidFrontRight, 1, 1, 1, 0, -100, 100, 0.5);
 8009792:	2300      	movs	r3, #0
 8009794:	9303      	str	r3, [sp, #12]
 8009796:	2364      	movs	r3, #100	; 0x64
 8009798:	9302      	str	r3, [sp, #8]
 800979a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800979e:	9301      	str	r3, [sp, #4]
 80097a0:	2300      	movs	r3, #0
 80097a2:	9300      	str	r3, [sp, #0]
 80097a4:	2301      	movs	r3, #1
 80097a6:	2201      	movs	r2, #1
 80097a8:	2101      	movs	r1, #1
 80097aa:	484e      	ldr	r0, [pc, #312]	; (80098e4 <DRV_init+0x168>)
 80097ac:	f001 fbf2 	bl	800af94 <PID_init>
  PID_init(&g_DRV_pidFrontLeft , 1, 1, 1, 0, -100, 100, 0.5);
 80097b0:	2300      	movs	r3, #0
 80097b2:	9303      	str	r3, [sp, #12]
 80097b4:	2364      	movs	r3, #100	; 0x64
 80097b6:	9302      	str	r3, [sp, #8]
 80097b8:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80097bc:	9301      	str	r3, [sp, #4]
 80097be:	2300      	movs	r3, #0
 80097c0:	9300      	str	r3, [sp, #0]
 80097c2:	2301      	movs	r3, #1
 80097c4:	2201      	movs	r2, #1
 80097c6:	2101      	movs	r1, #1
 80097c8:	4847      	ldr	r0, [pc, #284]	; (80098e8 <DRV_init+0x16c>)
 80097ca:	f001 fbe3 	bl	800af94 <PID_init>
  PID_init(&g_DRV_pidRearLeft  , 1, 1, 1, 0, -100, 100, 0.5);
 80097ce:	2300      	movs	r3, #0
 80097d0:	9303      	str	r3, [sp, #12]
 80097d2:	2364      	movs	r3, #100	; 0x64
 80097d4:	9302      	str	r3, [sp, #8]
 80097d6:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80097da:	9301      	str	r3, [sp, #4]
 80097dc:	2300      	movs	r3, #0
 80097de:	9300      	str	r3, [sp, #0]
 80097e0:	2301      	movs	r3, #1
 80097e2:	2201      	movs	r2, #1
 80097e4:	2101      	movs	r1, #1
 80097e6:	4841      	ldr	r0, [pc, #260]	; (80098ec <DRV_init+0x170>)
 80097e8:	f001 fbd4 	bl	800af94 <PID_init>
  PID_init(&g_DRV_pidRearRight , 1, 1, 1, 0, -100, 100, 0.5);
 80097ec:	2300      	movs	r3, #0
 80097ee:	9303      	str	r3, [sp, #12]
 80097f0:	2364      	movs	r3, #100	; 0x64
 80097f2:	9302      	str	r3, [sp, #8]
 80097f4:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80097f8:	9301      	str	r3, [sp, #4]
 80097fa:	2300      	movs	r3, #0
 80097fc:	9300      	str	r3, [sp, #0]
 80097fe:	2301      	movs	r3, #1
 8009800:	2201      	movs	r2, #1
 8009802:	2101      	movs	r1, #1
 8009804:	483a      	ldr	r0, [pc, #232]	; (80098f0 <DRV_init+0x174>)
 8009806:	f001 fbc5 	bl	800af94 <PID_init>

  /* Setup motors (with a 0 speed & stopped direction, at this point) */
  MTR_init(&g_DRV_motorFrontRight,
 800980a:	2304      	movs	r3, #4
 800980c:	9303      	str	r3, [sp, #12]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	9302      	str	r3, [sp, #8]
 8009812:	2320      	movs	r3, #32
 8009814:	9301      	str	r3, [sp, #4]
 8009816:	4b37      	ldr	r3, [pc, #220]	; (80098f4 <DRV_init+0x178>)
 8009818:	9300      	str	r3, [sp, #0]
 800981a:	2310      	movs	r3, #16
 800981c:	4a35      	ldr	r2, [pc, #212]	; (80098f4 <DRV_init+0x178>)
 800981e:	4936      	ldr	r1, [pc, #216]	; (80098f8 <DRV_init+0x17c>)
 8009820:	4836      	ldr	r0, [pc, #216]	; (80098fc <DRV_init+0x180>)
 8009822:	f001 fac5 	bl	800adb0 <MTR_init>
           MOTOR_FRONT_RIGHT_IN_2_GPIO_Port,
           MOTOR_FRONT_RIGHT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_2);

  MTR_init(&g_DRV_motorFrontLeft,
 8009826:	2300      	movs	r3, #0
 8009828:	9303      	str	r3, [sp, #12]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	9302      	str	r3, [sp, #8]
 800982e:	2302      	movs	r3, #2
 8009830:	9301      	str	r3, [sp, #4]
 8009832:	4b33      	ldr	r3, [pc, #204]	; (8009900 <DRV_init+0x184>)
 8009834:	9300      	str	r3, [sp, #0]
 8009836:	2301      	movs	r3, #1
 8009838:	4a31      	ldr	r2, [pc, #196]	; (8009900 <DRV_init+0x184>)
 800983a:	4932      	ldr	r1, [pc, #200]	; (8009904 <DRV_init+0x188>)
 800983c:	4832      	ldr	r0, [pc, #200]	; (8009908 <DRV_init+0x18c>)
 800983e:	f001 fab7 	bl	800adb0 <MTR_init>
           MOTOR_FRONT_LEFT_IN_2_GPIO_Port,
           MOTOR_FRONT_LEFT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_1);

  MTR_init(&g_DRV_motorRearLeft,
 8009842:	230c      	movs	r3, #12
 8009844:	9303      	str	r3, [sp, #12]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	9302      	str	r3, [sp, #8]
 800984a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800984e:	9301      	str	r3, [sp, #4]
 8009850:	4b28      	ldr	r3, [pc, #160]	; (80098f4 <DRV_init+0x178>)
 8009852:	9300      	str	r3, [sp, #0]
 8009854:	2304      	movs	r3, #4
 8009856:	4a2d      	ldr	r2, [pc, #180]	; (800990c <DRV_init+0x190>)
 8009858:	492d      	ldr	r1, [pc, #180]	; (8009910 <DRV_init+0x194>)
 800985a:	482e      	ldr	r0, [pc, #184]	; (8009914 <DRV_init+0x198>)
 800985c:	f001 faa8 	bl	800adb0 <MTR_init>
           MOTOR_REAR_LEFT_IN_2_GPIO_Port,
           MOTOR_REAR_LEFT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_4);

  MTR_init(&g_DRV_motorRearRight,
 8009860:	2308      	movs	r3, #8
 8009862:	9303      	str	r3, [sp, #12]
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	9302      	str	r3, [sp, #8]
 8009868:	2310      	movs	r3, #16
 800986a:	9301      	str	r3, [sp, #4]
 800986c:	4b24      	ldr	r3, [pc, #144]	; (8009900 <DRV_init+0x184>)
 800986e:	9300      	str	r3, [sp, #0]
 8009870:	2320      	movs	r3, #32
 8009872:	4a23      	ldr	r2, [pc, #140]	; (8009900 <DRV_init+0x184>)
 8009874:	4928      	ldr	r1, [pc, #160]	; (8009918 <DRV_init+0x19c>)
 8009876:	4829      	ldr	r0, [pc, #164]	; (800991c <DRV_init+0x1a0>)
 8009878:	f001 fa9a 	bl	800adb0 <MTR_init>
           MOTOR_REAR_RIGHT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_3);

  /* Setup encoders */
  ENC_init(&g_DRV_encoderFrontRight, DRV_FRONT_RIGHT_MOTOR_NAME, true , p_frontRightEncoderTimerHandle);
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	2201      	movs	r2, #1
 8009880:	491d      	ldr	r1, [pc, #116]	; (80098f8 <DRV_init+0x17c>)
 8009882:	4827      	ldr	r0, [pc, #156]	; (8009920 <DRV_init+0x1a4>)
 8009884:	f000 fff4 	bl	800a870 <ENC_init>
  ENC_init(&g_DRV_encoderFrontLeft , DRV_FRONT_LEFT_MOTOR_NAME , false, p_frontLeftEncoderTimerHandle );
 8009888:	69bb      	ldr	r3, [r7, #24]
 800988a:	2200      	movs	r2, #0
 800988c:	491d      	ldr	r1, [pc, #116]	; (8009904 <DRV_init+0x188>)
 800988e:	4825      	ldr	r0, [pc, #148]	; (8009924 <DRV_init+0x1a8>)
 8009890:	f000 ffee 	bl	800a870 <ENC_init>
  ENC_init(&g_DRV_encoderRearLeft  , DRV_REAR_LEFT_MOTOR_NAME  , false, p_rearLeftEncoderTimerHandle  );
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	2200      	movs	r2, #0
 8009898:	491d      	ldr	r1, [pc, #116]	; (8009910 <DRV_init+0x194>)
 800989a:	4823      	ldr	r0, [pc, #140]	; (8009928 <DRV_init+0x1ac>)
 800989c:	f000 ffe8 	bl	800a870 <ENC_init>
  ENC_init(&g_DRV_encoderRearRight , DRV_REAR_RIGHT_MOTOR_NAME , true , p_rearRightEncoderTimerHandle );
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2201      	movs	r2, #1
 80098a4:	491c      	ldr	r1, [pc, #112]	; (8009918 <DRV_init+0x19c>)
 80098a6:	4821      	ldr	r0, [pc, #132]	; (800992c <DRV_init+0x1b0>)
 80098a8:	f000 ffe2 	bl	800a870 <ENC_init>

  /* Setup speed buffers */
  CBU_init(&g_DRV_speedBufferFrontRight);
 80098ac:	4820      	ldr	r0, [pc, #128]	; (8009930 <DRV_init+0x1b4>)
 80098ae:	f7ff fe51 	bl	8009554 <CBU_init>
  CBU_init(&g_DRV_speedBufferFrontLeft );
 80098b2:	4820      	ldr	r0, [pc, #128]	; (8009934 <DRV_init+0x1b8>)
 80098b4:	f7ff fe4e 	bl	8009554 <CBU_init>
  CBU_init(&g_DRV_speedBufferRearLeft  );
 80098b8:	481f      	ldr	r0, [pc, #124]	; (8009938 <DRV_init+0x1bc>)
 80098ba:	f7ff fe4b 	bl	8009554 <CBU_init>
  CBU_init(&g_DRV_speedBufferRearRight );
 80098be:	481f      	ldr	r0, [pc, #124]	; (800993c <DRV_init+0x1c0>)
 80098c0:	f7ff fe48 	bl	8009554 <CBU_init>

  /* Activate motors by default (de-activating them is used for debug)  */
  g_DRV_areMotorsOn = true;
 80098c4:	4b1e      	ldr	r3, [pc, #120]	; (8009940 <DRV_init+0x1c4>)
 80098c6:	2201      	movs	r2, #1
 80098c8:	701a      	strb	r2, [r3, #0]

  /* Assume that drive is not ON by default */
  g_DRV_isDriveOn = false;
 80098ca:	4b1e      	ldr	r3, [pc, #120]	; (8009944 <DRV_init+0x1c8>)
 80098cc:	2200      	movs	r2, #0
 80098ce:	701a      	strb	r2, [r3, #0]

  /* Start with master board control mode */
  g_DRV_mode = DRV_MODE_MASTER_BOARD_CONTROL;
 80098d0:	4b1d      	ldr	r3, [pc, #116]	; (8009948 <DRV_init+0x1cc>)
 80098d2:	2202      	movs	r2, #2
 80098d4:	701a      	strb	r2, [r3, #0]

  return;
 80098d6:	bf00      	nop
}
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	0800eeb0 	.word	0x0800eeb0
 80098e4:	2000025c 	.word	0x2000025c
 80098e8:	2000028c 	.word	0x2000028c
 80098ec:	200002bc 	.word	0x200002bc
 80098f0:	200002ec 	.word	0x200002ec
 80098f4:	40011000 	.word	0x40011000
 80098f8:	0800eecc 	.word	0x0800eecc
 80098fc:	2000031c 	.word	0x2000031c
 8009900:	40010c00 	.word	0x40010c00
 8009904:	0800eed8 	.word	0x0800eed8
 8009908:	20000340 	.word	0x20000340
 800990c:	40011400 	.word	0x40011400
 8009910:	0800eee4 	.word	0x0800eee4
 8009914:	20000364 	.word	0x20000364
 8009918:	0800eef0 	.word	0x0800eef0
 800991c:	20000388 	.word	0x20000388
 8009920:	200003ac 	.word	0x200003ac
 8009924:	200003b8 	.word	0x200003b8
 8009928:	200003c4 	.word	0x200003c4
 800992c:	200003d0 	.word	0x200003d0
 8009930:	200003dc 	.word	0x200003dc
 8009934:	2000040c 	.word	0x2000040c
 8009938:	2000043c 	.word	0x2000043c
 800993c:	2000046c 	.word	0x2000046c
 8009940:	20000259 	.word	0x20000259
 8009944:	2000025a 	.word	0x2000025a
 8009948:	2000025b 	.word	0x2000025b

0800994c <DRV_updateEncoder>:

void DRV_updateEncoder(TIM_HandleTypeDef *p_encoderTimerHandle)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b084      	sub	sp, #16
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  int16_t l_count;

  l_count = __HAL_TIM_GET_COUNTER(p_encoderTimerHandle);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800995a:	81fb      	strh	r3, [r7, #14]

  /* Check the handle of the triggering timer and update encoder accordingly */
  if (p_encoderTimerHandle == g_DRV_encoderRearLeft.timerHandle)
 800995c:	4b19      	ldr	r3, [pc, #100]	; (80099c4 <DRV_updateEncoder+0x78>)
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	429a      	cmp	r2, r3
 8009964:	d106      	bne.n	8009974 <DRV_updateEncoder+0x28>
  {
    ENC_update(&g_DRV_encoderRearLeft, l_count);
 8009966:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800996a:	4619      	mov	r1, r3
 800996c:	4815      	ldr	r0, [pc, #84]	; (80099c4 <DRV_updateEncoder+0x78>)
 800996e:	f000 ffb0 	bl	800a8d2 <ENC_update>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8009972:	e023      	b.n	80099bc <DRV_updateEncoder+0x70>
  else if (p_encoderTimerHandle == g_DRV_encoderRearRight.timerHandle)
 8009974:	4b14      	ldr	r3, [pc, #80]	; (80099c8 <DRV_updateEncoder+0x7c>)
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	429a      	cmp	r2, r3
 800997c:	d106      	bne.n	800998c <DRV_updateEncoder+0x40>
    ENC_update(&g_DRV_encoderRearRight, l_count);
 800997e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009982:	4619      	mov	r1, r3
 8009984:	4810      	ldr	r0, [pc, #64]	; (80099c8 <DRV_updateEncoder+0x7c>)
 8009986:	f000 ffa4 	bl	800a8d2 <ENC_update>
  return;
 800998a:	e017      	b.n	80099bc <DRV_updateEncoder+0x70>
  else if (p_encoderTimerHandle == g_DRV_encoderFrontRight.timerHandle)
 800998c:	4b0f      	ldr	r3, [pc, #60]	; (80099cc <DRV_updateEncoder+0x80>)
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	429a      	cmp	r2, r3
 8009994:	d106      	bne.n	80099a4 <DRV_updateEncoder+0x58>
    ENC_update(&g_DRV_encoderFrontRight, l_count);
 8009996:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800999a:	4619      	mov	r1, r3
 800999c:	480b      	ldr	r0, [pc, #44]	; (80099cc <DRV_updateEncoder+0x80>)
 800999e:	f000 ff98 	bl	800a8d2 <ENC_update>
  return;
 80099a2:	e00b      	b.n	80099bc <DRV_updateEncoder+0x70>
  else if (p_encoderTimerHandle == g_DRV_encoderFrontLeft.timerHandle)
 80099a4:	4b0a      	ldr	r3, [pc, #40]	; (80099d0 <DRV_updateEncoder+0x84>)
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d106      	bne.n	80099bc <DRV_updateEncoder+0x70>
    ENC_update(&g_DRV_encoderFrontLeft, l_count);
 80099ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80099b2:	4619      	mov	r1, r3
 80099b4:	4806      	ldr	r0, [pc, #24]	; (80099d0 <DRV_updateEncoder+0x84>)
 80099b6:	f000 ff8c 	bl	800a8d2 <ENC_update>
  return;
 80099ba:	bf00      	nop
 80099bc:	bf00      	nop
}
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	200003c4 	.word	0x200003c4
 80099c8:	200003d0 	.word	0x200003d0
 80099cc:	200003ac 	.word	0x200003ac
 80099d0:	200003b8 	.word	0x200003b8

080099d4 <DRV_updateFromBluetooth>:

void DRV_updateFromBluetooth(T_BLU_Data *p_bluetoothData, uint16_t p_deltaTime)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b084      	sub	sp, #16
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	460b      	mov	r3, r1
 80099de:	807b      	strh	r3, [r7, #2]
  uint32_t l_speed;

  /* Check possible requested mode change */
  switch (p_bluetoothData->button)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	7c1b      	ldrb	r3, [r3, #16]
 80099e4:	3b01      	subs	r3, #1
 80099e6:	2b0f      	cmp	r3, #15
 80099e8:	d861      	bhi.n	8009aae <DRV_updateFromBluetooth+0xda>
 80099ea:	a201      	add	r2, pc, #4	; (adr r2, 80099f0 <DRV_updateFromBluetooth+0x1c>)
 80099ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f0:	08009a79 	.word	0x08009a79
 80099f4:	08009aaf 	.word	0x08009aaf
 80099f8:	08009aaf 	.word	0x08009aaf
 80099fc:	08009a91 	.word	0x08009a91
 8009a00:	08009aaf 	.word	0x08009aaf
 8009a04:	08009aaf 	.word	0x08009aaf
 8009a08:	08009aaf 	.word	0x08009aaf
 8009a0c:	08009aaf 	.word	0x08009aaf
 8009a10:	08009aaf 	.word	0x08009aaf
 8009a14:	08009aaf 	.word	0x08009aaf
 8009a18:	08009aaf 	.word	0x08009aaf
 8009a1c:	08009aaf 	.word	0x08009aaf
 8009a20:	08009aaf 	.word	0x08009aaf
 8009a24:	08009a61 	.word	0x08009a61
 8009a28:	08009a49 	.word	0x08009a49
 8009a2c:	08009a31 	.word	0x08009a31
  {
    case BLU_BUTTON_PINK_SQUARE:
      if (g_DRV_mode != DRV_MODE_MANUAL_FIXED_SPEED)
 8009a30:	4b82      	ldr	r3, [pc, #520]	; (8009c3c <DRV_updateFromBluetooth+0x268>)
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d03c      	beq.n	8009ab2 <DRV_updateFromBluetooth+0xde>
      {
        LOG_info("Drive mode now DRV_MODE_MANUAL_FIXED_SPEED");
 8009a38:	4981      	ldr	r1, [pc, #516]	; (8009c40 <DRV_updateFromBluetooth+0x26c>)
 8009a3a:	2001      	movs	r0, #1
 8009a3c:	f001 f896 	bl	800ab6c <LOG_log>
        g_DRV_mode = DRV_MODE_MANUAL_FIXED_SPEED;
 8009a40:	4b7e      	ldr	r3, [pc, #504]	; (8009c3c <DRV_updateFromBluetooth+0x268>)
 8009a42:	2200      	movs	r2, #0
 8009a44:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8009a46:	e034      	b.n	8009ab2 <DRV_updateFromBluetooth+0xde>

    case BLU_BUTTON_BLUE_CROSS:
      if (g_DRV_mode != DRV_MODE_MANUAL_VARIABLE_SPEED)
 8009a48:	4b7c      	ldr	r3, [pc, #496]	; (8009c3c <DRV_updateFromBluetooth+0x268>)
 8009a4a:	781b      	ldrb	r3, [r3, #0]
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d032      	beq.n	8009ab6 <DRV_updateFromBluetooth+0xe2>
      {
        LOG_info("Drive mode now DRV_MODE_MANUAL_VARIABLE_SPEED");
 8009a50:	497c      	ldr	r1, [pc, #496]	; (8009c44 <DRV_updateFromBluetooth+0x270>)
 8009a52:	2001      	movs	r0, #1
 8009a54:	f001 f88a 	bl	800ab6c <LOG_log>
        g_DRV_mode = DRV_MODE_MANUAL_VARIABLE_SPEED;
 8009a58:	4b78      	ldr	r3, [pc, #480]	; (8009c3c <DRV_updateFromBluetooth+0x268>)
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8009a5e:	e02a      	b.n	8009ab6 <DRV_updateFromBluetooth+0xe2>

    case BLU_BUTTON_RED_CIRCLE:
      if (g_DRV_mode != DRV_MODE_MASTER_BOARD_CONTROL)
 8009a60:	4b76      	ldr	r3, [pc, #472]	; (8009c3c <DRV_updateFromBluetooth+0x268>)
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	2b02      	cmp	r3, #2
 8009a66:	d028      	beq.n	8009aba <DRV_updateFromBluetooth+0xe6>
      {
        LOG_info("Drive mode now DRV_MODE_MASTER_BOARD_CONTROL");
 8009a68:	4977      	ldr	r1, [pc, #476]	; (8009c48 <DRV_updateFromBluetooth+0x274>)
 8009a6a:	2001      	movs	r0, #1
 8009a6c:	f001 f87e 	bl	800ab6c <LOG_log>
        g_DRV_mode = DRV_MODE_MASTER_BOARD_CONTROL;
 8009a70:	4b72      	ldr	r3, [pc, #456]	; (8009c3c <DRV_updateFromBluetooth+0x268>)
 8009a72:	2202      	movs	r2, #2
 8009a74:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8009a76:	e020      	b.n	8009aba <DRV_updateFromBluetooth+0xe6>

    case BLU_BUTTON_SELECT:
      if (g_DRV_areMotorsOn == true)
 8009a78:	4b74      	ldr	r3, [pc, #464]	; (8009c4c <DRV_updateFromBluetooth+0x278>)
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d01e      	beq.n	8009abe <DRV_updateFromBluetooth+0xea>
      {
        LOG_info("Drive turning motor OFF");
 8009a80:	4973      	ldr	r1, [pc, #460]	; (8009c50 <DRV_updateFromBluetooth+0x27c>)
 8009a82:	2001      	movs	r0, #1
 8009a84:	f001 f872 	bl	800ab6c <LOG_log>
        g_DRV_areMotorsOn = false;
 8009a88:	4b70      	ldr	r3, [pc, #448]	; (8009c4c <DRV_updateFromBluetooth+0x278>)
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8009a8e:	e016      	b.n	8009abe <DRV_updateFromBluetooth+0xea>

    case BLU_BUTTON_START:
      if (g_DRV_areMotorsOn == false)
 8009a90:	4b6e      	ldr	r3, [pc, #440]	; (8009c4c <DRV_updateFromBluetooth+0x278>)
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	f083 0301 	eor.w	r3, r3, #1
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d011      	beq.n	8009ac2 <DRV_updateFromBluetooth+0xee>
      {
        LOG_info("Drive turning motors ON");
 8009a9e:	496d      	ldr	r1, [pc, #436]	; (8009c54 <DRV_updateFromBluetooth+0x280>)
 8009aa0:	2001      	movs	r0, #1
 8009aa2:	f001 f863 	bl	800ab6c <LOG_log>
        g_DRV_areMotorsOn = true;
 8009aa6:	4b69      	ldr	r3, [pc, #420]	; (8009c4c <DRV_updateFromBluetooth+0x278>)
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8009aac:	e009      	b.n	8009ac2 <DRV_updateFromBluetooth+0xee>

    case BLU_BUTTON_NONE:
    default:
      ; /* Nothing to do */
      break;
 8009aae:	bf00      	nop
 8009ab0:	e008      	b.n	8009ac4 <DRV_updateFromBluetooth+0xf0>
      break;
 8009ab2:	bf00      	nop
 8009ab4:	e006      	b.n	8009ac4 <DRV_updateFromBluetooth+0xf0>
      break;
 8009ab6:	bf00      	nop
 8009ab8:	e004      	b.n	8009ac4 <DRV_updateFromBluetooth+0xf0>
      break;
 8009aba:	bf00      	nop
 8009abc:	e002      	b.n	8009ac4 <DRV_updateFromBluetooth+0xf0>
      break;
 8009abe:	bf00      	nop
 8009ac0:	e000      	b.n	8009ac4 <DRV_updateFromBluetooth+0xf0>
      break;
 8009ac2:	bf00      	nop
  }

  /* Master board control mode is an automated mode, so that we will */
  /* ignore any direction/button press received via bluetooth.       */
  if (g_DRV_mode == DRV_MODE_MASTER_BOARD_CONTROL)
 8009ac4:	4b5d      	ldr	r3, [pc, #372]	; (8009c3c <DRV_updateFromBluetooth+0x268>)
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	2b02      	cmp	r3, #2
 8009aca:	f000 80b3 	beq.w	8009c34 <DRV_updateFromBluetooth+0x260>
    ; /* Nothing to do */
  }
  /* Manual mode, applying directions received by bluetooth */
  else
  {
    if (p_bluetoothData->leftY > DRV_JOYSTICKS_THRESHOLD)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	2b0a      	cmp	r3, #10
 8009ad4:	dd0c      	ble.n	8009af0 <DRV_updateFromBluetooth+0x11c>
    {
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->leftY;
 8009ad6:	4b59      	ldr	r3, [pc, #356]	; (8009c3c <DRV_updateFromBluetooth+0x268>)
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d002      	beq.n	8009ae4 <DRV_updateFromBluetooth+0x110>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	e000      	b.n	8009ae6 <DRV_updateFromBluetooth+0x112>
 8009ae4:	2314      	movs	r3, #20
 8009ae6:	60fb      	str	r3, [r7, #12]

      DRV_moveForward(l_speed);
 8009ae8:	68f8      	ldr	r0, [r7, #12]
 8009aea:	f000 fc7d 	bl	800a3e8 <DRV_moveForward>
      /* Most of the time, we will get here */
      DRV_sleep();
    }
  }

  return;
 8009aee:	e0a1      	b.n	8009c34 <DRV_updateFromBluetooth+0x260>
    else if (p_bluetoothData->rightY > DRV_JOYSTICKS_THRESHOLD)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	68db      	ldr	r3, [r3, #12]
 8009af4:	2b0a      	cmp	r3, #10
 8009af6:	dd0c      	ble.n	8009b12 <DRV_updateFromBluetooth+0x13e>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->rightY;
 8009af8:	4b50      	ldr	r3, [pc, #320]	; (8009c3c <DRV_updateFromBluetooth+0x268>)
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d002      	beq.n	8009b06 <DRV_updateFromBluetooth+0x132>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	e000      	b.n	8009b08 <DRV_updateFromBluetooth+0x134>
 8009b06:	2314      	movs	r3, #20
 8009b08:	60fb      	str	r3, [r7, #12]
      DRV_moveForward(l_speed);
 8009b0a:	68f8      	ldr	r0, [r7, #12]
 8009b0c:	f000 fc6c 	bl	800a3e8 <DRV_moveForward>
  return;
 8009b10:	e090      	b.n	8009c34 <DRV_updateFromBluetooth+0x260>
    else if (p_bluetoothData->leftY < -DRV_JOYSTICKS_THRESHOLD)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	f113 0f0a 	cmn.w	r3, #10
 8009b1a:	da0d      	bge.n	8009b38 <DRV_updateFromBluetooth+0x164>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->leftY;
 8009b1c:	4b47      	ldr	r3, [pc, #284]	; (8009c3c <DRV_updateFromBluetooth+0x268>)
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d003      	beq.n	8009b2c <DRV_updateFromBluetooth+0x158>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	425b      	negs	r3, r3
 8009b2a:	e000      	b.n	8009b2e <DRV_updateFromBluetooth+0x15a>
 8009b2c:	2314      	movs	r3, #20
 8009b2e:	60fb      	str	r3, [r7, #12]
      DRV_moveBackward(l_speed);
 8009b30:	68f8      	ldr	r0, [r7, #12]
 8009b32:	f000 fc93 	bl	800a45c <DRV_moveBackward>
  return;
 8009b36:	e07d      	b.n	8009c34 <DRV_updateFromBluetooth+0x260>
    else if (p_bluetoothData->rightY < -DRV_JOYSTICKS_THRESHOLD)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	f113 0f0a 	cmn.w	r3, #10
 8009b40:	da0d      	bge.n	8009b5e <DRV_updateFromBluetooth+0x18a>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->rightY;
 8009b42:	4b3e      	ldr	r3, [pc, #248]	; (8009c3c <DRV_updateFromBluetooth+0x268>)
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d003      	beq.n	8009b52 <DRV_updateFromBluetooth+0x17e>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	68db      	ldr	r3, [r3, #12]
 8009b4e:	425b      	negs	r3, r3
 8009b50:	e000      	b.n	8009b54 <DRV_updateFromBluetooth+0x180>
 8009b52:	2314      	movs	r3, #20
 8009b54:	60fb      	str	r3, [r7, #12]
      DRV_moveBackward(l_speed);
 8009b56:	68f8      	ldr	r0, [r7, #12]
 8009b58:	f000 fc80 	bl	800a45c <DRV_moveBackward>
  return;
 8009b5c:	e06a      	b.n	8009c34 <DRV_updateFromBluetooth+0x260>
    else if (p_bluetoothData->leftX < -DRV_JOYSTICKS_THRESHOLD)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f113 0f0a 	cmn.w	r3, #10
 8009b66:	da0d      	bge.n	8009b84 <DRV_updateFromBluetooth+0x1b0>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->leftX;
 8009b68:	4b34      	ldr	r3, [pc, #208]	; (8009c3c <DRV_updateFromBluetooth+0x268>)
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d003      	beq.n	8009b78 <DRV_updateFromBluetooth+0x1a4>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	425b      	negs	r3, r3
 8009b76:	e000      	b.n	8009b7a <DRV_updateFromBluetooth+0x1a6>
 8009b78:	2314      	movs	r3, #20
 8009b7a:	60fb      	str	r3, [r7, #12]
      DRV_turnLeft(l_speed);
 8009b7c:	68f8      	ldr	r0, [r7, #12]
 8009b7e:	f000 fd8f 	bl	800a6a0 <DRV_turnLeft>
  return;
 8009b82:	e057      	b.n	8009c34 <DRV_updateFromBluetooth+0x260>
    else if (p_bluetoothData->leftX > DRV_JOYSTICKS_THRESHOLD)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	2b0a      	cmp	r3, #10
 8009b8a:	dd0c      	ble.n	8009ba6 <DRV_updateFromBluetooth+0x1d2>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->leftX;
 8009b8c:	4b2b      	ldr	r3, [pc, #172]	; (8009c3c <DRV_updateFromBluetooth+0x268>)
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d002      	beq.n	8009b9a <DRV_updateFromBluetooth+0x1c6>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	e000      	b.n	8009b9c <DRV_updateFromBluetooth+0x1c8>
 8009b9a:	2314      	movs	r3, #20
 8009b9c:	60fb      	str	r3, [r7, #12]
      DRV_turnRight(l_speed);
 8009b9e:	68f8      	ldr	r0, [r7, #12]
 8009ba0:	f000 fdb8 	bl	800a714 <DRV_turnRight>
  return;
 8009ba4:	e046      	b.n	8009c34 <DRV_updateFromBluetooth+0x260>
    else if (p_bluetoothData->rightX < -DRV_JOYSTICKS_THRESHOLD)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	689b      	ldr	r3, [r3, #8]
 8009baa:	f113 0f0a 	cmn.w	r3, #10
 8009bae:	da0d      	bge.n	8009bcc <DRV_updateFromBluetooth+0x1f8>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->rightX;
 8009bb0:	4b22      	ldr	r3, [pc, #136]	; (8009c3c <DRV_updateFromBluetooth+0x268>)
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d003      	beq.n	8009bc0 <DRV_updateFromBluetooth+0x1ec>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	689b      	ldr	r3, [r3, #8]
 8009bbc:	425b      	negs	r3, r3
 8009bbe:	e000      	b.n	8009bc2 <DRV_updateFromBluetooth+0x1ee>
 8009bc0:	2314      	movs	r3, #20
 8009bc2:	60fb      	str	r3, [r7, #12]
      DRV_translateLeft(l_speed);
 8009bc4:	68f8      	ldr	r0, [r7, #12]
 8009bc6:	f000 fddf 	bl	800a788 <DRV_translateLeft>
  return;
 8009bca:	e033      	b.n	8009c34 <DRV_updateFromBluetooth+0x260>
    else if (p_bluetoothData->rightX > DRV_JOYSTICKS_THRESHOLD)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	2b0a      	cmp	r3, #10
 8009bd2:	dd0c      	ble.n	8009bee <DRV_updateFromBluetooth+0x21a>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->rightX;
 8009bd4:	4b19      	ldr	r3, [pc, #100]	; (8009c3c <DRV_updateFromBluetooth+0x268>)
 8009bd6:	781b      	ldrb	r3, [r3, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d002      	beq.n	8009be2 <DRV_updateFromBluetooth+0x20e>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	689b      	ldr	r3, [r3, #8]
 8009be0:	e000      	b.n	8009be4 <DRV_updateFromBluetooth+0x210>
 8009be2:	2314      	movs	r3, #20
 8009be4:	60fb      	str	r3, [r7, #12]
      DRV_translateRight(l_speed);
 8009be6:	68f8      	ldr	r0, [r7, #12]
 8009be8:	f000 fe08 	bl	800a7fc <DRV_translateRight>
  return;
 8009bec:	e022      	b.n	8009c34 <DRV_updateFromBluetooth+0x260>
    else if (p_bluetoothData->button == BLU_BUTTON_L1)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	7c1b      	ldrb	r3, [r3, #16]
 8009bf2:	2b0b      	cmp	r3, #11
 8009bf4:	d103      	bne.n	8009bfe <DRV_updateFromBluetooth+0x22a>
      DRV_moveForwardLeft(DRV_BUTTONS_FIXED_SPEED);
 8009bf6:	2028      	movs	r0, #40	; 0x28
 8009bf8:	f000 fca4 	bl	800a544 <DRV_moveForwardLeft>
  return;
 8009bfc:	e01a      	b.n	8009c34 <DRV_updateFromBluetooth+0x260>
    else if (p_bluetoothData->button == BLU_BUTTON_L2)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	7c1b      	ldrb	r3, [r3, #16]
 8009c02:	2b09      	cmp	r3, #9
 8009c04:	d103      	bne.n	8009c0e <DRV_updateFromBluetooth+0x23a>
      DRV_moveBackwardRight(DRV_BUTTONS_FIXED_SPEED);
 8009c06:	2028      	movs	r0, #40	; 0x28
 8009c08:	f000 fcd6 	bl	800a5b8 <DRV_moveBackwardRight>
  return;
 8009c0c:	e012      	b.n	8009c34 <DRV_updateFromBluetooth+0x260>
    else if (p_bluetoothData->button == BLU_BUTTON_R1)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	7c1b      	ldrb	r3, [r3, #16]
 8009c12:	2b0c      	cmp	r3, #12
 8009c14:	d103      	bne.n	8009c1e <DRV_updateFromBluetooth+0x24a>
      DRV_moveForwardRight(DRV_BUTTONS_FIXED_SPEED);
 8009c16:	2028      	movs	r0, #40	; 0x28
 8009c18:	f000 fc5a 	bl	800a4d0 <DRV_moveForwardRight>
  return;
 8009c1c:	e00a      	b.n	8009c34 <DRV_updateFromBluetooth+0x260>
    else if (p_bluetoothData->button == BLU_BUTTON_R2)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	7c1b      	ldrb	r3, [r3, #16]
 8009c22:	2b0a      	cmp	r3, #10
 8009c24:	d103      	bne.n	8009c2e <DRV_updateFromBluetooth+0x25a>
      DRV_moveBackwardLeft(DRV_BUTTONS_FIXED_SPEED);
 8009c26:	2028      	movs	r0, #40	; 0x28
 8009c28:	f000 fd00 	bl	800a62c <DRV_moveBackwardLeft>
  return;
 8009c2c:	e002      	b.n	8009c34 <DRV_updateFromBluetooth+0x260>
      DRV_sleep();
 8009c2e:	f000 fbaf 	bl	800a390 <DRV_sleep>
  return;
 8009c32:	bf00      	nop
 8009c34:	bf00      	nop
}
 8009c36:	3710      	adds	r7, #16
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}
 8009c3c:	2000025b 	.word	0x2000025b
 8009c40:	0800eefc 	.word	0x0800eefc
 8009c44:	0800ef28 	.word	0x0800ef28
 8009c48:	0800ef58 	.word	0x0800ef58
 8009c4c:	20000259 	.word	0x20000259
 8009c50:	0800ef88 	.word	0x0800ef88
 8009c54:	0800efa0 	.word	0x0800efa0

08009c58 <DRV_updateFromMaster>:

void DRV_updateFromMaster(T_SFO_Context *p_commandsFifo, uint16_t p_deltaTime)
{
 8009c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c5a:	b099      	sub	sp, #100	; 0x64
 8009c5c:	af02      	add	r7, sp, #8
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	460b      	mov	r3, r1
 8009c62:	807b      	strh	r3, [r7, #2]
  RTC_TimeTypeDef   l_time;
  RTC_DateTypeDef   l_date;
  static RTC_TimeTypeDef   l_lastTime;

  /* Ignore master board data only whenever a manual mode is selected */
  if (g_DRV_mode != DRV_MODE_MASTER_BOARD_CONTROL)
 8009c64:	4b4e      	ldr	r3, [pc, #312]	; (8009da0 <DRV_updateFromMaster+0x148>)
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	2b02      	cmp	r3, #2
 8009c6a:	f040 81b9 	bne.w	8009fe0 <DRV_updateFromMaster+0x388>
  }
  else
  {
    /* Deal with only one command per cycle. If a FIFO overflow occurs, */
    /* FIFO string will report an error, showing us a design issue...   */
    if (SFO_getCount(p_commandsFifo) != 0)
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f001 fb24 	bl	800b2bc <SFO_getCount>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	f000 809f 	beq.w	8009dba <DRV_updateFromMaster+0x162>
    {
      SFO_logInfo(p_commandsFifo);
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f001 fb29 	bl	800b2d4 <SFO_logInfo>
      SFO_pop    (p_commandsFifo         , &l_command);
 8009c82:	f107 0314 	add.w	r3, r7, #20
 8009c86:	4619      	mov	r1, r3
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f001 fad7 	bl	800b23c <SFO_pop>
      LOG_info   ("Drive got command: %s",  l_command);
 8009c8e:	f107 0314 	add.w	r3, r7, #20
 8009c92:	461a      	mov	r2, r3
 8009c94:	4943      	ldr	r1, [pc, #268]	; (8009da4 <DRV_updateFromMaster+0x14c>)
 8009c96:	2001      	movs	r0, #1
 8009c98:	f000 ff68 	bl	800ab6c <LOG_log>

      l_speed = atoi(&l_command[2]);
 8009c9c:	f107 0314 	add.w	r3, r7, #20
 8009ca0:	3302      	adds	r3, #2
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f001 fc5c 	bl	800b560 <atoi>
 8009ca8:	6578      	str	r0, [r7, #84]	; 0x54

      /* Check that speed is in allowed range */
      if ((l_speed < STP_CONSOLE_MIN_SPEED) || (l_speed > STP_CONSOLE_MAX_SPEED))
 8009caa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	db02      	blt.n	8009cb6 <DRV_updateFromMaster+0x5e>
 8009cb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cb2:	2b64      	cmp	r3, #100	; 0x64
 8009cb4:	dd05      	ble.n	8009cc2 <DRV_updateFromMaster+0x6a>
      {
        LOG_error("Drive got out of range speed: %d", l_speed);
 8009cb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009cb8:	493b      	ldr	r1, [pc, #236]	; (8009da8 <DRV_updateFromMaster+0x150>)
 8009cba:	2003      	movs	r0, #3
 8009cbc:	f000 ff56 	bl	800ab6c <LOG_log>
 8009cc0:	e07b      	b.n	8009dba <DRV_updateFromMaster+0x162>
      }
      else
      {
        l_speed = UTI_normalizeIntValue(l_speed ,
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	9301      	str	r3, [sp, #4]
 8009cc6:	2328      	movs	r3, #40	; 0x28
 8009cc8:	9300      	str	r3, [sp, #0]
 8009cca:	2300      	movs	r3, #0
 8009ccc:	2264      	movs	r2, #100	; 0x64
 8009cce:	2100      	movs	r1, #0
 8009cd0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8009cd2:	f001 fbf6 	bl	800b4c2 <UTI_normalizeIntValue>
 8009cd6:	6578      	str	r0, [r7, #84]	; 0x54
                                        STP_DRIVE_MIN_SPEED,
                                        STP_DRIVE_MAX_SPEED,
                                        false);

        /* Forward Straight */
        if ((l_command[0] == 'S') && (l_command[1] == 'T'))
 8009cd8:	7d3b      	ldrb	r3, [r7, #20]
 8009cda:	2b53      	cmp	r3, #83	; 0x53
 8009cdc:	d105      	bne.n	8009cea <DRV_updateFromMaster+0x92>
 8009cde:	7d7b      	ldrb	r3, [r7, #21]
 8009ce0:	2b54      	cmp	r3, #84	; 0x54
 8009ce2:	d102      	bne.n	8009cea <DRV_updateFromMaster+0x92>
        {
          DRV_sleep();
 8009ce4:	f000 fb54 	bl	800a390 <DRV_sleep>
 8009ce8:	e067      	b.n	8009dba <DRV_updateFromMaster+0x162>
        }
        else if ((l_command[0] == 'F') && (l_command[1] == 'S'))
 8009cea:	7d3b      	ldrb	r3, [r7, #20]
 8009cec:	2b46      	cmp	r3, #70	; 0x46
 8009cee:	d105      	bne.n	8009cfc <DRV_updateFromMaster+0xa4>
 8009cf0:	7d7b      	ldrb	r3, [r7, #21]
 8009cf2:	2b53      	cmp	r3, #83	; 0x53
 8009cf4:	d102      	bne.n	8009cfc <DRV_updateFromMaster+0xa4>
        {
          DRV_setDirectionsForward();
 8009cf6:	f000 fa63 	bl	800a1c0 <DRV_setDirectionsForward>
 8009cfa:	e05e      	b.n	8009dba <DRV_updateFromMaster+0x162>
        }
        /* Move Backward */
        else if ((l_command[0] == 'B') && (l_command[1] == 'S'))
 8009cfc:	7d3b      	ldrb	r3, [r7, #20]
 8009cfe:	2b42      	cmp	r3, #66	; 0x42
 8009d00:	d105      	bne.n	8009d0e <DRV_updateFromMaster+0xb6>
 8009d02:	7d7b      	ldrb	r3, [r7, #21]
 8009d04:	2b53      	cmp	r3, #83	; 0x53
 8009d06:	d102      	bne.n	8009d0e <DRV_updateFromMaster+0xb6>
        {
          DRV_setDirectionsBackward();
 8009d08:	f000 fa76 	bl	800a1f8 <DRV_setDirectionsBackward>
 8009d0c:	e055      	b.n	8009dba <DRV_updateFromMaster+0x162>
        }
        /* TurN (i.e. Rotate) Left */
        else if ((l_command[0] == 'R') && (l_command[1] == 'L'))
 8009d0e:	7d3b      	ldrb	r3, [r7, #20]
 8009d10:	2b52      	cmp	r3, #82	; 0x52
 8009d12:	d105      	bne.n	8009d20 <DRV_updateFromMaster+0xc8>
 8009d14:	7d7b      	ldrb	r3, [r7, #21]
 8009d16:	2b4c      	cmp	r3, #76	; 0x4c
 8009d18:	d102      	bne.n	8009d20 <DRV_updateFromMaster+0xc8>
        {
          DRV_setDirectionsTurnLeft();
 8009d1a:	f000 fac9 	bl	800a2b0 <DRV_setDirectionsTurnLeft>
 8009d1e:	e04c      	b.n	8009dba <DRV_updateFromMaster+0x162>
        }
        /* TurN (i.e. Rotate) Right */
        else if ((l_command[0] == 'R') && (l_command[1] == 'R'))
 8009d20:	7d3b      	ldrb	r3, [r7, #20]
 8009d22:	2b52      	cmp	r3, #82	; 0x52
 8009d24:	d105      	bne.n	8009d32 <DRV_updateFromMaster+0xda>
 8009d26:	7d7b      	ldrb	r3, [r7, #21]
 8009d28:	2b52      	cmp	r3, #82	; 0x52
 8009d2a:	d102      	bne.n	8009d32 <DRV_updateFromMaster+0xda>
        {
          DRV_setDirectionsTurnRight();
 8009d2c:	f000 fadc 	bl	800a2e8 <DRV_setDirectionsTurnRight>
 8009d30:	e043      	b.n	8009dba <DRV_updateFromMaster+0x162>
        }
        /* Translate Left */
        else if ((l_command[0] == 'T') && (l_command[1] == 'L'))
 8009d32:	7d3b      	ldrb	r3, [r7, #20]
 8009d34:	2b54      	cmp	r3, #84	; 0x54
 8009d36:	d105      	bne.n	8009d44 <DRV_updateFromMaster+0xec>
 8009d38:	7d7b      	ldrb	r3, [r7, #21]
 8009d3a:	2b4c      	cmp	r3, #76	; 0x4c
 8009d3c:	d102      	bne.n	8009d44 <DRV_updateFromMaster+0xec>
        {
          DRV_setDirectionsTranslateLeft();
 8009d3e:	f000 faef 	bl	800a320 <DRV_setDirectionsTranslateLeft>
 8009d42:	e03a      	b.n	8009dba <DRV_updateFromMaster+0x162>
        }
        /* Translate Right */
        else if ((l_command[0] == 'T') && (l_command[1] == 'R'))
 8009d44:	7d3b      	ldrb	r3, [r7, #20]
 8009d46:	2b54      	cmp	r3, #84	; 0x54
 8009d48:	d105      	bne.n	8009d56 <DRV_updateFromMaster+0xfe>
 8009d4a:	7d7b      	ldrb	r3, [r7, #21]
 8009d4c:	2b52      	cmp	r3, #82	; 0x52
 8009d4e:	d102      	bne.n	8009d56 <DRV_updateFromMaster+0xfe>
        {
          DRV_setDirectionsTranslateRight();
 8009d50:	f000 fb02 	bl	800a358 <DRV_setDirectionsTranslateRight>
 8009d54:	e031      	b.n	8009dba <DRV_updateFromMaster+0x162>
        }
        /* Forward Left */
        else if ((l_command[0] == 'F') && (l_command[1] == 'L'))
 8009d56:	7d3b      	ldrb	r3, [r7, #20]
 8009d58:	2b46      	cmp	r3, #70	; 0x46
 8009d5a:	d105      	bne.n	8009d68 <DRV_updateFromMaster+0x110>
 8009d5c:	7d7b      	ldrb	r3, [r7, #21]
 8009d5e:	2b4c      	cmp	r3, #76	; 0x4c
 8009d60:	d102      	bne.n	8009d68 <DRV_updateFromMaster+0x110>
        {
          DRV_setDirectionsForwardLeft();
 8009d62:	f000 fa75 	bl	800a250 <DRV_setDirectionsForwardLeft>
 8009d66:	e028      	b.n	8009dba <DRV_updateFromMaster+0x162>
        }
        /* Forward Right */
        else if ((l_command[0] == 'F') && (l_command[1] == 'R'))
 8009d68:	7d3b      	ldrb	r3, [r7, #20]
 8009d6a:	2b46      	cmp	r3, #70	; 0x46
 8009d6c:	d105      	bne.n	8009d7a <DRV_updateFromMaster+0x122>
 8009d6e:	7d7b      	ldrb	r3, [r7, #21]
 8009d70:	2b52      	cmp	r3, #82	; 0x52
 8009d72:	d102      	bne.n	8009d7a <DRV_updateFromMaster+0x122>
        {
          DRV_setDirectionsForwardRight();
 8009d74:	f000 fa5c 	bl	800a230 <DRV_setDirectionsForwardRight>
 8009d78:	e01f      	b.n	8009dba <DRV_updateFromMaster+0x162>
        }
        /* Backward Left */
        else if ((l_command[0] == 'B') && (l_command[1] == 'L'))
 8009d7a:	7d3b      	ldrb	r3, [r7, #20]
 8009d7c:	2b42      	cmp	r3, #66	; 0x42
 8009d7e:	d105      	bne.n	8009d8c <DRV_updateFromMaster+0x134>
 8009d80:	7d7b      	ldrb	r3, [r7, #21]
 8009d82:	2b4c      	cmp	r3, #76	; 0x4c
 8009d84:	d102      	bne.n	8009d8c <DRV_updateFromMaster+0x134>
        {
          DRV_setDirectionsBackwardLeft();
 8009d86:	f000 fa83 	bl	800a290 <DRV_setDirectionsBackwardLeft>
 8009d8a:	e016      	b.n	8009dba <DRV_updateFromMaster+0x162>
        }
        /* Forward Right */
        else if ((l_command[0] == 'B') && (l_command[1] == 'R'))
 8009d8c:	7d3b      	ldrb	r3, [r7, #20]
 8009d8e:	2b42      	cmp	r3, #66	; 0x42
 8009d90:	d10c      	bne.n	8009dac <DRV_updateFromMaster+0x154>
 8009d92:	7d7b      	ldrb	r3, [r7, #21]
 8009d94:	2b52      	cmp	r3, #82	; 0x52
 8009d96:	d109      	bne.n	8009dac <DRV_updateFromMaster+0x154>
        {
          DRV_setDirectionsBackwardRight();
 8009d98:	f000 fa6a 	bl	800a270 <DRV_setDirectionsBackwardRight>
 8009d9c:	e00d      	b.n	8009dba <DRV_updateFromMaster+0x162>
 8009d9e:	bf00      	nop
 8009da0:	2000025b 	.word	0x2000025b
 8009da4:	0800efb8 	.word	0x0800efb8
 8009da8:	0800efd0 	.word	0x0800efd0
        }
        else
        {
          LOG_error("Drive got unsupported command: '%s'", l_command);
 8009dac:	f107 0314 	add.w	r3, r7, #20
 8009db0:	461a      	mov	r2, r3
 8009db2:	498d      	ldr	r1, [pc, #564]	; (8009fe8 <DRV_updateFromMaster+0x390>)
 8009db4:	2003      	movs	r0, #3
 8009db6:	f000 fed9 	bl	800ab6c <LOG_log>
        }
      }
    }

    /* Get measurements */
    l_measuredSpeedFrontRight = (float)ENC_getCount(&g_DRV_encoderFrontRight) / ((float)p_deltaTime / 1000.0f) * 150.0f;
 8009dba:	488c      	ldr	r0, [pc, #560]	; (8009fec <DRV_updateFromMaster+0x394>)
 8009dbc:	f000 fda5 	bl	800a90a <ENC_getCount>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7f6 ff86 	bl	8000cd4 <__aeabi_i2f>
 8009dc8:	4604      	mov	r4, r0
 8009dca:	887b      	ldrh	r3, [r7, #2]
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f7f6 ff7d 	bl	8000ccc <__aeabi_ui2f>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	4986      	ldr	r1, [pc, #536]	; (8009ff0 <DRV_updateFromMaster+0x398>)
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f7f7 f884 	bl	8000ee4 <__aeabi_fdiv>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	4619      	mov	r1, r3
 8009de0:	4620      	mov	r0, r4
 8009de2:	f7f7 f87f 	bl	8000ee4 <__aeabi_fdiv>
 8009de6:	4603      	mov	r3, r0
 8009de8:	4982      	ldr	r1, [pc, #520]	; (8009ff4 <DRV_updateFromMaster+0x39c>)
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7f6 ffc6 	bl	8000d7c <__aeabi_fmul>
 8009df0:	4603      	mov	r3, r0
 8009df2:	653b      	str	r3, [r7, #80]	; 0x50
    l_measuredSpeedFrontLeft  = (float)ENC_getCount(&g_DRV_encoderFrontLeft ) / ((float)p_deltaTime / 1000.0f) * 150.0f;
 8009df4:	4880      	ldr	r0, [pc, #512]	; (8009ff8 <DRV_updateFromMaster+0x3a0>)
 8009df6:	f000 fd88 	bl	800a90a <ENC_getCount>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7f6 ff69 	bl	8000cd4 <__aeabi_i2f>
 8009e02:	4604      	mov	r4, r0
 8009e04:	887b      	ldrh	r3, [r7, #2]
 8009e06:	4618      	mov	r0, r3
 8009e08:	f7f6 ff60 	bl	8000ccc <__aeabi_ui2f>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	4978      	ldr	r1, [pc, #480]	; (8009ff0 <DRV_updateFromMaster+0x398>)
 8009e10:	4618      	mov	r0, r3
 8009e12:	f7f7 f867 	bl	8000ee4 <__aeabi_fdiv>
 8009e16:	4603      	mov	r3, r0
 8009e18:	4619      	mov	r1, r3
 8009e1a:	4620      	mov	r0, r4
 8009e1c:	f7f7 f862 	bl	8000ee4 <__aeabi_fdiv>
 8009e20:	4603      	mov	r3, r0
 8009e22:	4974      	ldr	r1, [pc, #464]	; (8009ff4 <DRV_updateFromMaster+0x39c>)
 8009e24:	4618      	mov	r0, r3
 8009e26:	f7f6 ffa9 	bl	8000d7c <__aeabi_fmul>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	64fb      	str	r3, [r7, #76]	; 0x4c
    l_measuredSpeedRearRight  = (float)ENC_getCount(&g_DRV_encoderRearRight ) / ((float)p_deltaTime / 1000.0f) * 150.0f;
 8009e2e:	4873      	ldr	r0, [pc, #460]	; (8009ffc <DRV_updateFromMaster+0x3a4>)
 8009e30:	f000 fd6b 	bl	800a90a <ENC_getCount>
 8009e34:	4603      	mov	r3, r0
 8009e36:	4618      	mov	r0, r3
 8009e38:	f7f6 ff4c 	bl	8000cd4 <__aeabi_i2f>
 8009e3c:	4604      	mov	r4, r0
 8009e3e:	887b      	ldrh	r3, [r7, #2]
 8009e40:	4618      	mov	r0, r3
 8009e42:	f7f6 ff43 	bl	8000ccc <__aeabi_ui2f>
 8009e46:	4603      	mov	r3, r0
 8009e48:	4969      	ldr	r1, [pc, #420]	; (8009ff0 <DRV_updateFromMaster+0x398>)
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f7f7 f84a 	bl	8000ee4 <__aeabi_fdiv>
 8009e50:	4603      	mov	r3, r0
 8009e52:	4619      	mov	r1, r3
 8009e54:	4620      	mov	r0, r4
 8009e56:	f7f7 f845 	bl	8000ee4 <__aeabi_fdiv>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	4965      	ldr	r1, [pc, #404]	; (8009ff4 <DRV_updateFromMaster+0x39c>)
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7f6 ff8c 	bl	8000d7c <__aeabi_fmul>
 8009e64:	4603      	mov	r3, r0
 8009e66:	64bb      	str	r3, [r7, #72]	; 0x48
    l_measuredSpeedRearLeft   = (float)ENC_getCount(&g_DRV_encoderRearLeft  ) / ((float)p_deltaTime / 1000.0f) * 150.0f;
 8009e68:	4865      	ldr	r0, [pc, #404]	; (800a000 <DRV_updateFromMaster+0x3a8>)
 8009e6a:	f000 fd4e 	bl	800a90a <ENC_getCount>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	4618      	mov	r0, r3
 8009e72:	f7f6 ff2f 	bl	8000cd4 <__aeabi_i2f>
 8009e76:	4604      	mov	r4, r0
 8009e78:	887b      	ldrh	r3, [r7, #2]
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7f6 ff26 	bl	8000ccc <__aeabi_ui2f>
 8009e80:	4603      	mov	r3, r0
 8009e82:	495b      	ldr	r1, [pc, #364]	; (8009ff0 <DRV_updateFromMaster+0x398>)
 8009e84:	4618      	mov	r0, r3
 8009e86:	f7f7 f82d 	bl	8000ee4 <__aeabi_fdiv>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	4620      	mov	r0, r4
 8009e90:	f7f7 f828 	bl	8000ee4 <__aeabi_fdiv>
 8009e94:	4603      	mov	r3, r0
 8009e96:	4957      	ldr	r1, [pc, #348]	; (8009ff4 <DRV_updateFromMaster+0x39c>)
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f7f6 ff6f 	bl	8000d7c <__aeabi_fmul>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	647b      	str	r3, [r7, #68]	; 0x44

    CBU_push(&g_DRV_speedBufferFrontRight, l_measuredSpeedFrontRight);
 8009ea2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009ea4:	4857      	ldr	r0, [pc, #348]	; (800a004 <DRV_updateFromMaster+0x3ac>)
 8009ea6:	f7ff fb79 	bl	800959c <CBU_push>
    CBU_push(&g_DRV_speedBufferFrontLeft , l_measuredSpeedFrontLeft );
 8009eaa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009eac:	4856      	ldr	r0, [pc, #344]	; (800a008 <DRV_updateFromMaster+0x3b0>)
 8009eae:	f7ff fb75 	bl	800959c <CBU_push>
    CBU_push(&g_DRV_speedBufferRearRight , l_measuredSpeedRearRight );
 8009eb2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009eb4:	4855      	ldr	r0, [pc, #340]	; (800a00c <DRV_updateFromMaster+0x3b4>)
 8009eb6:	f7ff fb71 	bl	800959c <CBU_push>
    CBU_push(&g_DRV_speedBufferRearLeft  , l_measuredSpeedRearLeft  );
 8009eba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009ebc:	4854      	ldr	r0, [pc, #336]	; (800a010 <DRV_updateFromMaster+0x3b8>)
 8009ebe:	f7ff fb6d 	bl	800959c <CBU_push>

    l_averageSpeedFrontRight = CBU_getAverage(&g_DRV_speedBufferFrontRight);
 8009ec2:	4850      	ldr	r0, [pc, #320]	; (800a004 <DRV_updateFromMaster+0x3ac>)
 8009ec4:	f7ff fb91 	bl	80095ea <CBU_getAverage>
 8009ec8:	6438      	str	r0, [r7, #64]	; 0x40
    l_averageSpeedFrontLeft  = CBU_getAverage(&g_DRV_speedBufferFrontLeft );
 8009eca:	484f      	ldr	r0, [pc, #316]	; (800a008 <DRV_updateFromMaster+0x3b0>)
 8009ecc:	f7ff fb8d 	bl	80095ea <CBU_getAverage>
 8009ed0:	63f8      	str	r0, [r7, #60]	; 0x3c
    l_averageSpeedRearRight  = CBU_getAverage(&g_DRV_speedBufferRearRight );
 8009ed2:	484e      	ldr	r0, [pc, #312]	; (800a00c <DRV_updateFromMaster+0x3b4>)
 8009ed4:	f7ff fb89 	bl	80095ea <CBU_getAverage>
 8009ed8:	63b8      	str	r0, [r7, #56]	; 0x38
    l_averageSpeedRearLeft   = CBU_getAverage(&g_DRV_speedBufferRearLeft  );
 8009eda:	484d      	ldr	r0, [pc, #308]	; (800a010 <DRV_updateFromMaster+0x3b8>)
 8009edc:	f7ff fb85 	bl	80095ea <CBU_getAverage>
 8009ee0:	6378      	str	r0, [r7, #52]	; 0x34

    HAL_RTC_GetTime(&hrtc, &l_time, RTC_FORMAT_BCD);
 8009ee2:	f107 0310 	add.w	r3, r7, #16
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	4619      	mov	r1, r3
 8009eea:	484a      	ldr	r0, [pc, #296]	; (800a014 <DRV_updateFromMaster+0x3bc>)
 8009eec:	f7fb fad2 	bl	8005494 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &l_date, RTC_FORMAT_BCD);
 8009ef0:	f107 030c 	add.w	r3, r7, #12
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	4846      	ldr	r0, [pc, #280]	; (800a014 <DRV_updateFromMaster+0x3bc>)
 8009efa:	f7fb fccf 	bl	800589c <HAL_RTC_GetDate>

    if (UTI_turnRtcTimeToSeconds(&l_time) - UTI_turnRtcTimeToSeconds(&l_lastTime) >= 1)
 8009efe:	f107 0310 	add.w	r3, r7, #16
 8009f02:	4618      	mov	r0, r3
 8009f04:	f001 fa99 	bl	800b43a <UTI_turnRtcTimeToSeconds>
 8009f08:	4604      	mov	r4, r0
 8009f0a:	4843      	ldr	r0, [pc, #268]	; (800a018 <DRV_updateFromMaster+0x3c0>)
 8009f0c:	f001 fa95 	bl	800b43a <UTI_turnRtcTimeToSeconds>
 8009f10:	4603      	mov	r3, r0
 8009f12:	429c      	cmp	r4, r3
 8009f14:	d020      	beq.n	8009f58 <DRV_updateFromMaster+0x300>
    {
      l_lastTime = l_time;
 8009f16:	4b40      	ldr	r3, [pc, #256]	; (800a018 <DRV_updateFromMaster+0x3c0>)
 8009f18:	f107 0210 	add.w	r2, r7, #16
 8009f1c:	6812      	ldr	r2, [r2, #0]
 8009f1e:	4611      	mov	r1, r2
 8009f20:	8019      	strh	r1, [r3, #0]
 8009f22:	3302      	adds	r3, #2
 8009f24:	0c12      	lsrs	r2, r2, #16
 8009f26:	701a      	strb	r2, [r3, #0]
      LOG_info("%d, %d, %d, %d",
 8009f28:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009f2a:	f7f7 f877 	bl	800101c <__aeabi_f2iz>
 8009f2e:	4605      	mov	r5, r0
 8009f30:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009f32:	f7f7 f873 	bl	800101c <__aeabi_f2iz>
 8009f36:	4606      	mov	r6, r0
 8009f38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f3a:	f7f7 f86f 	bl	800101c <__aeabi_f2iz>
 8009f3e:	4604      	mov	r4, r0
 8009f40:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009f42:	f7f7 f86b 	bl	800101c <__aeabi_f2iz>
 8009f46:	4603      	mov	r3, r0
 8009f48:	9301      	str	r3, [sp, #4]
 8009f4a:	9400      	str	r4, [sp, #0]
 8009f4c:	4633      	mov	r3, r6
 8009f4e:	462a      	mov	r2, r5
 8009f50:	4932      	ldr	r1, [pc, #200]	; (800a01c <DRV_updateFromMaster+0x3c4>)
 8009f52:	2001      	movs	r0, #1
 8009f54:	f000 fe0a 	bl	800ab6c <LOG_log>
               (int32_t)l_averageSpeedRearRight,
               (int32_t)l_averageSpeedRearLeft);
    }

    /* Update PIDs */
    l_pidSpeedFrontRight = PID_update(&g_DRV_pidFrontRight, l_averageSpeedFrontRight, p_deltaTime);
 8009f58:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009f5a:	f7f7 f85f 	bl	800101c <__aeabi_f2iz>
 8009f5e:	4601      	mov	r1, r0
 8009f60:	887b      	ldrh	r3, [r7, #2]
 8009f62:	461a      	mov	r2, r3
 8009f64:	482e      	ldr	r0, [pc, #184]	; (800a020 <DRV_updateFromMaster+0x3c8>)
 8009f66:	f001 f869 	bl	800b03c <PID_update>
 8009f6a:	6338      	str	r0, [r7, #48]	; 0x30
    l_pidSpeedFrontLeft  = PID_update(&g_DRV_pidFrontLeft , l_averageSpeedFrontLeft , p_deltaTime);
 8009f6c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009f6e:	f7f7 f855 	bl	800101c <__aeabi_f2iz>
 8009f72:	4601      	mov	r1, r0
 8009f74:	887b      	ldrh	r3, [r7, #2]
 8009f76:	461a      	mov	r2, r3
 8009f78:	482a      	ldr	r0, [pc, #168]	; (800a024 <DRV_updateFromMaster+0x3cc>)
 8009f7a:	f001 f85f 	bl	800b03c <PID_update>
 8009f7e:	62f8      	str	r0, [r7, #44]	; 0x2c
    l_pidSpeedRearRight  = PID_update(&g_DRV_pidRearRight , l_averageSpeedRearRight , p_deltaTime);
 8009f80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f82:	f7f7 f84b 	bl	800101c <__aeabi_f2iz>
 8009f86:	4601      	mov	r1, r0
 8009f88:	887b      	ldrh	r3, [r7, #2]
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	4826      	ldr	r0, [pc, #152]	; (800a028 <DRV_updateFromMaster+0x3d0>)
 8009f8e:	f001 f855 	bl	800b03c <PID_update>
 8009f92:	62b8      	str	r0, [r7, #40]	; 0x28
    l_pidSpeedRearLeft   = PID_update(&g_DRV_pidRearLeft  , l_averageSpeedRearLeft  , p_deltaTime);
 8009f94:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009f96:	f7f7 f841 	bl	800101c <__aeabi_f2iz>
 8009f9a:	4601      	mov	r1, r0
 8009f9c:	887b      	ldrh	r3, [r7, #2]
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	4822      	ldr	r0, [pc, #136]	; (800a02c <DRV_updateFromMaster+0x3d4>)
 8009fa2:	f001 f84b 	bl	800b03c <PID_update>
 8009fa6:	6278      	str	r0, [r7, #36]	; 0x24

    if (g_DRV_areMotorsOn == false)
 8009fa8:	4b21      	ldr	r3, [pc, #132]	; (800a030 <DRV_updateFromMaster+0x3d8>)
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	f083 0301 	eor.w	r3, r3, #1
 8009fb0:	b2db      	uxtb	r3, r3
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d114      	bne.n	8009fe0 <DRV_updateFromMaster+0x388>
      ; /* Nothing to do */
    }
    else
    {
      /* Update motors */
      MTR_setSpeed(&g_DRV_motorFrontRight, l_pidSpeedFrontRight);
 8009fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb8:	4619      	mov	r1, r3
 8009fba:	481e      	ldr	r0, [pc, #120]	; (800a034 <DRV_updateFromMaster+0x3dc>)
 8009fbc:	f000 ffa0 	bl	800af00 <MTR_setSpeed>
      MTR_setSpeed(&g_DRV_motorFrontLeft , l_pidSpeedFrontLeft );
 8009fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	481c      	ldr	r0, [pc, #112]	; (800a038 <DRV_updateFromMaster+0x3e0>)
 8009fc6:	f000 ff9b 	bl	800af00 <MTR_setSpeed>
      MTR_setSpeed(&g_DRV_motorRearRight , l_pidSpeedRearRight );
 8009fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fcc:	4619      	mov	r1, r3
 8009fce:	481b      	ldr	r0, [pc, #108]	; (800a03c <DRV_updateFromMaster+0x3e4>)
 8009fd0:	f000 ff96 	bl	800af00 <MTR_setSpeed>
      MTR_setSpeed(&g_DRV_motorRearLeft  , l_pidSpeedRearLeft  );
 8009fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	4819      	ldr	r0, [pc, #100]	; (800a040 <DRV_updateFromMaster+0x3e8>)
 8009fda:	f000 ff91 	bl	800af00 <MTR_setSpeed>
    }
  }

  return;
 8009fde:	bf00      	nop
 8009fe0:	bf00      	nop
}
 8009fe2:	375c      	adds	r7, #92	; 0x5c
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fe8:	0800eff4 	.word	0x0800eff4
 8009fec:	200003ac 	.word	0x200003ac
 8009ff0:	447a0000 	.word	0x447a0000
 8009ff4:	43160000 	.word	0x43160000
 8009ff8:	200003b8 	.word	0x200003b8
 8009ffc:	200003d0 	.word	0x200003d0
 800a000:	200003c4 	.word	0x200003c4
 800a004:	200003dc 	.word	0x200003dc
 800a008:	2000040c 	.word	0x2000040c
 800a00c:	2000046c 	.word	0x2000046c
 800a010:	2000043c 	.word	0x2000043c
 800a014:	2000084c 	.word	0x2000084c
 800a018:	2000049c 	.word	0x2000049c
 800a01c:	0800f018 	.word	0x0800f018
 800a020:	2000025c 	.word	0x2000025c
 800a024:	2000028c 	.word	0x2000028c
 800a028:	200002ec 	.word	0x200002ec
 800a02c:	200002bc 	.word	0x200002bc
 800a030:	20000259 	.word	0x20000259
 800a034:	2000031c 	.word	0x2000031c
 800a038:	20000340 	.word	0x20000340
 800a03c:	20000388 	.word	0x20000388
 800a040:	20000364 	.word	0x20000364

0800a044 <DRV_getMode>:

T_DRV_MODE DRV_getMode(void)
{
 800a044:	b480      	push	{r7}
 800a046:	af00      	add	r7, sp, #0
  return g_DRV_mode;
 800a048:	4b02      	ldr	r3, [pc, #8]	; (800a054 <DRV_getMode+0x10>)
 800a04a:	781b      	ldrb	r3, [r3, #0]
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	46bd      	mov	sp, r7
 800a050:	bc80      	pop	{r7}
 800a052:	4770      	bx	lr
 800a054:	2000025b 	.word	0x2000025b

0800a058 <DRV_logInfo>:

void DRV_logInfo(void)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af02      	add	r7, sp, #8
  T_MTR_DIRECTION l_direction;
  uint32_t        l_speed;

  if (g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED)
 800a05e:	4b44      	ldr	r3, [pc, #272]	; (800a170 <DRV_logInfo+0x118>)
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d104      	bne.n	800a070 <DRV_logInfo+0x18>
  {
    LOG_info("Mode  : MANUAL FIXED SPEED");
 800a066:	4943      	ldr	r1, [pc, #268]	; (800a174 <DRV_logInfo+0x11c>)
 800a068:	2001      	movs	r0, #1
 800a06a:	f000 fd7f 	bl	800ab6c <LOG_log>
 800a06e:	e018      	b.n	800a0a2 <DRV_logInfo+0x4a>
  }
  else if (g_DRV_mode == DRV_MODE_MANUAL_VARIABLE_SPEED)
 800a070:	4b3f      	ldr	r3, [pc, #252]	; (800a170 <DRV_logInfo+0x118>)
 800a072:	781b      	ldrb	r3, [r3, #0]
 800a074:	2b01      	cmp	r3, #1
 800a076:	d104      	bne.n	800a082 <DRV_logInfo+0x2a>
  {
    LOG_info("Mode  : MANUAL VARIABLE SPEED");
 800a078:	493f      	ldr	r1, [pc, #252]	; (800a178 <DRV_logInfo+0x120>)
 800a07a:	2001      	movs	r0, #1
 800a07c:	f000 fd76 	bl	800ab6c <LOG_log>
 800a080:	e00f      	b.n	800a0a2 <DRV_logInfo+0x4a>
  }
  else if (g_DRV_mode == DRV_MODE_MASTER_BOARD_CONTROL)
 800a082:	4b3b      	ldr	r3, [pc, #236]	; (800a170 <DRV_logInfo+0x118>)
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	2b02      	cmp	r3, #2
 800a088:	d104      	bne.n	800a094 <DRV_logInfo+0x3c>
  {
    LOG_info("Mode  : MASTER BOARD CONTROL");
 800a08a:	493c      	ldr	r1, [pc, #240]	; (800a17c <DRV_logInfo+0x124>)
 800a08c:	2001      	movs	r0, #1
 800a08e:	f000 fd6d 	bl	800ab6c <LOG_log>
 800a092:	e006      	b.n	800a0a2 <DRV_logInfo+0x4a>
  }
  else
  {
    LOG_error("Unsupported drive mode: %u", g_DRV_mode);
 800a094:	4b36      	ldr	r3, [pc, #216]	; (800a170 <DRV_logInfo+0x118>)
 800a096:	781b      	ldrb	r3, [r3, #0]
 800a098:	461a      	mov	r2, r3
 800a09a:	4939      	ldr	r1, [pc, #228]	; (800a180 <DRV_logInfo+0x128>)
 800a09c:	2003      	movs	r0, #3
 800a09e:	f000 fd65 	bl	800ab6c <LOG_log>
  }

  if (g_DRV_isDriveOn == true)
 800a0a2:	4b38      	ldr	r3, [pc, #224]	; (800a184 <DRV_logInfo+0x12c>)
 800a0a4:	781b      	ldrb	r3, [r3, #0]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d004      	beq.n	800a0b4 <DRV_logInfo+0x5c>
  {
    LOG_info("Drive : ON");
 800a0aa:	4937      	ldr	r1, [pc, #220]	; (800a188 <DRV_logInfo+0x130>)
 800a0ac:	2001      	movs	r0, #1
 800a0ae:	f000 fd5d 	bl	800ab6c <LOG_log>
 800a0b2:	e003      	b.n	800a0bc <DRV_logInfo+0x64>
  }
  else
  {
    LOG_info("Drive : OFF");
 800a0b4:	4935      	ldr	r1, [pc, #212]	; (800a18c <DRV_logInfo+0x134>)
 800a0b6:	2001      	movs	r0, #1
 800a0b8:	f000 fd58 	bl	800ab6c <LOG_log>
  }

  if (g_DRV_areMotorsOn == true)
 800a0bc:	4b34      	ldr	r3, [pc, #208]	; (800a190 <DRV_logInfo+0x138>)
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d004      	beq.n	800a0ce <DRV_logInfo+0x76>
  {
    LOG_info("Motors: ON");
 800a0c4:	4933      	ldr	r1, [pc, #204]	; (800a194 <DRV_logInfo+0x13c>)
 800a0c6:	2001      	movs	r0, #1
 800a0c8:	f000 fd50 	bl	800ab6c <LOG_log>
 800a0cc:	e003      	b.n	800a0d6 <DRV_logInfo+0x7e>
  }
  else
  {
    LOG_info("Motors: OFF");
 800a0ce:	4932      	ldr	r1, [pc, #200]	; (800a198 <DRV_logInfo+0x140>)
 800a0d0:	2001      	movs	r0, #1
 800a0d2:	f000 fd4b 	bl	800ab6c <LOG_log>
  }

  l_direction = MTR_getDirection(&g_DRV_motorFrontLeft);
 800a0d6:	4831      	ldr	r0, [pc, #196]	; (800a19c <DRV_logInfo+0x144>)
 800a0d8:	f000 ff06 	bl	800aee8 <MTR_getDirection>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	71fb      	strb	r3, [r7, #7]
  l_speed     = MTR_getSpeed    (&g_DRV_motorFrontLeft);
 800a0e0:	482e      	ldr	r0, [pc, #184]	; (800a19c <DRV_logInfo+0x144>)
 800a0e2:	f000 ff4b 	bl	800af7c <MTR_getSpeed>
 800a0e6:	6038      	str	r0, [r7, #0]

  LOG_info("%s motor direction/speed: %u/%u", DRV_FRONT_LEFT_MOTOR_NAME, l_direction, l_speed);
 800a0e8:	79fa      	ldrb	r2, [r7, #7]
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	9300      	str	r3, [sp, #0]
 800a0ee:	4613      	mov	r3, r2
 800a0f0:	4a2b      	ldr	r2, [pc, #172]	; (800a1a0 <DRV_logInfo+0x148>)
 800a0f2:	492c      	ldr	r1, [pc, #176]	; (800a1a4 <DRV_logInfo+0x14c>)
 800a0f4:	2001      	movs	r0, #1
 800a0f6:	f000 fd39 	bl	800ab6c <LOG_log>

  l_direction = MTR_getDirection(&g_DRV_motorFrontRight);
 800a0fa:	482b      	ldr	r0, [pc, #172]	; (800a1a8 <DRV_logInfo+0x150>)
 800a0fc:	f000 fef4 	bl	800aee8 <MTR_getDirection>
 800a100:	4603      	mov	r3, r0
 800a102:	71fb      	strb	r3, [r7, #7]
  l_speed     = MTR_getSpeed    (&g_DRV_motorFrontRight);
 800a104:	4828      	ldr	r0, [pc, #160]	; (800a1a8 <DRV_logInfo+0x150>)
 800a106:	f000 ff39 	bl	800af7c <MTR_getSpeed>
 800a10a:	6038      	str	r0, [r7, #0]

  LOG_info("%s motor direction/speed: %u/%u", DRV_FRONT_RIGHT_MOTOR_NAME, l_direction, l_speed);
 800a10c:	79fa      	ldrb	r2, [r7, #7]
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	9300      	str	r3, [sp, #0]
 800a112:	4613      	mov	r3, r2
 800a114:	4a25      	ldr	r2, [pc, #148]	; (800a1ac <DRV_logInfo+0x154>)
 800a116:	4923      	ldr	r1, [pc, #140]	; (800a1a4 <DRV_logInfo+0x14c>)
 800a118:	2001      	movs	r0, #1
 800a11a:	f000 fd27 	bl	800ab6c <LOG_log>

  l_direction = MTR_getDirection(&g_DRV_motorRearLeft);
 800a11e:	4824      	ldr	r0, [pc, #144]	; (800a1b0 <DRV_logInfo+0x158>)
 800a120:	f000 fee2 	bl	800aee8 <MTR_getDirection>
 800a124:	4603      	mov	r3, r0
 800a126:	71fb      	strb	r3, [r7, #7]
  l_speed     = MTR_getSpeed    (&g_DRV_motorRearLeft);
 800a128:	4821      	ldr	r0, [pc, #132]	; (800a1b0 <DRV_logInfo+0x158>)
 800a12a:	f000 ff27 	bl	800af7c <MTR_getSpeed>
 800a12e:	6038      	str	r0, [r7, #0]

  LOG_info("%s motor direction/speed: %u/%u", DRV_REAR_LEFT_MOTOR_NAME, l_direction, l_speed);
 800a130:	79fa      	ldrb	r2, [r7, #7]
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	9300      	str	r3, [sp, #0]
 800a136:	4613      	mov	r3, r2
 800a138:	4a1e      	ldr	r2, [pc, #120]	; (800a1b4 <DRV_logInfo+0x15c>)
 800a13a:	491a      	ldr	r1, [pc, #104]	; (800a1a4 <DRV_logInfo+0x14c>)
 800a13c:	2001      	movs	r0, #1
 800a13e:	f000 fd15 	bl	800ab6c <LOG_log>

  l_direction = MTR_getDirection(&g_DRV_motorRearRight);
 800a142:	481d      	ldr	r0, [pc, #116]	; (800a1b8 <DRV_logInfo+0x160>)
 800a144:	f000 fed0 	bl	800aee8 <MTR_getDirection>
 800a148:	4603      	mov	r3, r0
 800a14a:	71fb      	strb	r3, [r7, #7]
  l_speed     = MTR_getSpeed    (&g_DRV_motorRearRight);
 800a14c:	481a      	ldr	r0, [pc, #104]	; (800a1b8 <DRV_logInfo+0x160>)
 800a14e:	f000 ff15 	bl	800af7c <MTR_getSpeed>
 800a152:	6038      	str	r0, [r7, #0]

  LOG_info("%s motor direction/speed: %u/%u", DRV_REAR_RIGHT_MOTOR_NAME, l_direction, l_speed);
 800a154:	79fa      	ldrb	r2, [r7, #7]
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	9300      	str	r3, [sp, #0]
 800a15a:	4613      	mov	r3, r2
 800a15c:	4a17      	ldr	r2, [pc, #92]	; (800a1bc <DRV_logInfo+0x164>)
 800a15e:	4911      	ldr	r1, [pc, #68]	; (800a1a4 <DRV_logInfo+0x14c>)
 800a160:	2001      	movs	r0, #1
 800a162:	f000 fd03 	bl	800ab6c <LOG_log>

  return;
 800a166:	bf00      	nop
}
 800a168:	3708      	adds	r7, #8
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	bf00      	nop
 800a170:	2000025b 	.word	0x2000025b
 800a174:	0800f028 	.word	0x0800f028
 800a178:	0800f044 	.word	0x0800f044
 800a17c:	0800f064 	.word	0x0800f064
 800a180:	0800f084 	.word	0x0800f084
 800a184:	2000025a 	.word	0x2000025a
 800a188:	0800f0a0 	.word	0x0800f0a0
 800a18c:	0800f0ac 	.word	0x0800f0ac
 800a190:	20000259 	.word	0x20000259
 800a194:	0800f0b8 	.word	0x0800f0b8
 800a198:	0800f0c4 	.word	0x0800f0c4
 800a19c:	20000340 	.word	0x20000340
 800a1a0:	0800eed8 	.word	0x0800eed8
 800a1a4:	0800f0d0 	.word	0x0800f0d0
 800a1a8:	2000031c 	.word	0x2000031c
 800a1ac:	0800eecc 	.word	0x0800eecc
 800a1b0:	20000364 	.word	0x20000364
 800a1b4:	0800eee4 	.word	0x0800eee4
 800a1b8:	20000388 	.word	0x20000388
 800a1bc:	0800eef0 	.word	0x0800eef0

0800a1c0 <DRV_setDirectionsForward>:

static void DRV_setDirectionsForward(void)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD);
 800a1c4:	2101      	movs	r1, #1
 800a1c6:	4808      	ldr	r0, [pc, #32]	; (800a1e8 <DRV_setDirectionsForward+0x28>)
 800a1c8:	f000 fe22 	bl	800ae10 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD);
 800a1cc:	2101      	movs	r1, #1
 800a1ce:	4807      	ldr	r0, [pc, #28]	; (800a1ec <DRV_setDirectionsForward+0x2c>)
 800a1d0:	f000 fe1e 	bl	800ae10 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD);
 800a1d4:	2101      	movs	r1, #1
 800a1d6:	4806      	ldr	r0, [pc, #24]	; (800a1f0 <DRV_setDirectionsForward+0x30>)
 800a1d8:	f000 fe1a 	bl	800ae10 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD);
 800a1dc:	2101      	movs	r1, #1
 800a1de:	4805      	ldr	r0, [pc, #20]	; (800a1f4 <DRV_setDirectionsForward+0x34>)
 800a1e0:	f000 fe16 	bl	800ae10 <MTR_setDirection>

  return;
 800a1e4:	bf00      	nop
}
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	2000031c 	.word	0x2000031c
 800a1ec:	20000340 	.word	0x20000340
 800a1f0:	20000388 	.word	0x20000388
 800a1f4:	20000364 	.word	0x20000364

0800a1f8 <DRV_setDirectionsBackward>:

static void DRV_setDirectionsBackward(void)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 800a1fc:	2102      	movs	r1, #2
 800a1fe:	4808      	ldr	r0, [pc, #32]	; (800a220 <DRV_setDirectionsBackward+0x28>)
 800a200:	f000 fe06 	bl	800ae10 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 800a204:	2102      	movs	r1, #2
 800a206:	4807      	ldr	r0, [pc, #28]	; (800a224 <DRV_setDirectionsBackward+0x2c>)
 800a208:	f000 fe02 	bl	800ae10 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 800a20c:	2102      	movs	r1, #2
 800a20e:	4806      	ldr	r0, [pc, #24]	; (800a228 <DRV_setDirectionsBackward+0x30>)
 800a210:	f000 fdfe 	bl	800ae10 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 800a214:	2102      	movs	r1, #2
 800a216:	4805      	ldr	r0, [pc, #20]	; (800a22c <DRV_setDirectionsBackward+0x34>)
 800a218:	f000 fdfa 	bl	800ae10 <MTR_setDirection>

  return;
 800a21c:	bf00      	nop
}
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	2000031c 	.word	0x2000031c
 800a224:	20000340 	.word	0x20000340
 800a228:	20000388 	.word	0x20000388
 800a22c:	20000364 	.word	0x20000364

0800a230 <DRV_setDirectionsForwardRight>:

static void DRV_setDirectionsForwardRight(void)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontLeft, MTR_DIRECTION_FORWARD);
 800a234:	2101      	movs	r1, #1
 800a236:	4804      	ldr	r0, [pc, #16]	; (800a248 <DRV_setDirectionsForwardRight+0x18>)
 800a238:	f000 fdea 	bl	800ae10 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight, MTR_DIRECTION_FORWARD);
 800a23c:	2101      	movs	r1, #1
 800a23e:	4803      	ldr	r0, [pc, #12]	; (800a24c <DRV_setDirectionsForwardRight+0x1c>)
 800a240:	f000 fde6 	bl	800ae10 <MTR_setDirection>

  return;
 800a244:	bf00      	nop
}
 800a246:	bd80      	pop	{r7, pc}
 800a248:	20000340 	.word	0x20000340
 800a24c:	20000388 	.word	0x20000388

0800a250 <DRV_setDirectionsForwardLeft>:

static void DRV_setDirectionsForwardLeft(void)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD);
 800a254:	2101      	movs	r1, #1
 800a256:	4804      	ldr	r0, [pc, #16]	; (800a268 <DRV_setDirectionsForwardLeft+0x18>)
 800a258:	f000 fdda 	bl	800ae10 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD);
 800a25c:	2101      	movs	r1, #1
 800a25e:	4803      	ldr	r0, [pc, #12]	; (800a26c <DRV_setDirectionsForwardLeft+0x1c>)
 800a260:	f000 fdd6 	bl	800ae10 <MTR_setDirection>

  return;
 800a264:	bf00      	nop
}
 800a266:	bd80      	pop	{r7, pc}
 800a268:	2000031c 	.word	0x2000031c
 800a26c:	20000364 	.word	0x20000364

0800a270 <DRV_setDirectionsBackwardRight>:

static void DRV_setDirectionsBackwardRight(void)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 800a274:	2102      	movs	r1, #2
 800a276:	4804      	ldr	r0, [pc, #16]	; (800a288 <DRV_setDirectionsBackwardRight+0x18>)
 800a278:	f000 fdca 	bl	800ae10 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 800a27c:	2102      	movs	r1, #2
 800a27e:	4803      	ldr	r0, [pc, #12]	; (800a28c <DRV_setDirectionsBackwardRight+0x1c>)
 800a280:	f000 fdc6 	bl	800ae10 <MTR_setDirection>

  return;
 800a284:	bf00      	nop
}
 800a286:	bd80      	pop	{r7, pc}
 800a288:	2000031c 	.word	0x2000031c
 800a28c:	20000364 	.word	0x20000364

0800a290 <DRV_setDirectionsBackwardLeft>:

static void DRV_setDirectionsBackwardLeft(void)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontLeft, MTR_DIRECTION_BACKWARD);
 800a294:	2102      	movs	r1, #2
 800a296:	4804      	ldr	r0, [pc, #16]	; (800a2a8 <DRV_setDirectionsBackwardLeft+0x18>)
 800a298:	f000 fdba 	bl	800ae10 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight, MTR_DIRECTION_BACKWARD);
 800a29c:	2102      	movs	r1, #2
 800a29e:	4803      	ldr	r0, [pc, #12]	; (800a2ac <DRV_setDirectionsBackwardLeft+0x1c>)
 800a2a0:	f000 fdb6 	bl	800ae10 <MTR_setDirection>

  return;
 800a2a4:	bf00      	nop
}
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	20000340 	.word	0x20000340
 800a2ac:	20000388 	.word	0x20000388

0800a2b0 <DRV_setDirectionsTurnLeft>:

static void DRV_setDirectionsTurnLeft(void)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD );
 800a2b4:	2101      	movs	r1, #1
 800a2b6:	4808      	ldr	r0, [pc, #32]	; (800a2d8 <DRV_setDirectionsTurnLeft+0x28>)
 800a2b8:	f000 fdaa 	bl	800ae10 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 800a2bc:	2102      	movs	r1, #2
 800a2be:	4807      	ldr	r0, [pc, #28]	; (800a2dc <DRV_setDirectionsTurnLeft+0x2c>)
 800a2c0:	f000 fda6 	bl	800ae10 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD );
 800a2c4:	2101      	movs	r1, #1
 800a2c6:	4806      	ldr	r0, [pc, #24]	; (800a2e0 <DRV_setDirectionsTurnLeft+0x30>)
 800a2c8:	f000 fda2 	bl	800ae10 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 800a2cc:	2102      	movs	r1, #2
 800a2ce:	4805      	ldr	r0, [pc, #20]	; (800a2e4 <DRV_setDirectionsTurnLeft+0x34>)
 800a2d0:	f000 fd9e 	bl	800ae10 <MTR_setDirection>

  return;
 800a2d4:	bf00      	nop
}
 800a2d6:	bd80      	pop	{r7, pc}
 800a2d8:	2000031c 	.word	0x2000031c
 800a2dc:	20000340 	.word	0x20000340
 800a2e0:	20000388 	.word	0x20000388
 800a2e4:	20000364 	.word	0x20000364

0800a2e8 <DRV_setDirectionsTurnRight>:

static void DRV_setDirectionsTurnRight(void)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 800a2ec:	2102      	movs	r1, #2
 800a2ee:	4808      	ldr	r0, [pc, #32]	; (800a310 <DRV_setDirectionsTurnRight+0x28>)
 800a2f0:	f000 fd8e 	bl	800ae10 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD );
 800a2f4:	2101      	movs	r1, #1
 800a2f6:	4807      	ldr	r0, [pc, #28]	; (800a314 <DRV_setDirectionsTurnRight+0x2c>)
 800a2f8:	f000 fd8a 	bl	800ae10 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 800a2fc:	2102      	movs	r1, #2
 800a2fe:	4806      	ldr	r0, [pc, #24]	; (800a318 <DRV_setDirectionsTurnRight+0x30>)
 800a300:	f000 fd86 	bl	800ae10 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD );
 800a304:	2101      	movs	r1, #1
 800a306:	4805      	ldr	r0, [pc, #20]	; (800a31c <DRV_setDirectionsTurnRight+0x34>)
 800a308:	f000 fd82 	bl	800ae10 <MTR_setDirection>

  return;
 800a30c:	bf00      	nop
}
 800a30e:	bd80      	pop	{r7, pc}
 800a310:	2000031c 	.word	0x2000031c
 800a314:	20000340 	.word	0x20000340
 800a318:	20000388 	.word	0x20000388
 800a31c:	20000364 	.word	0x20000364

0800a320 <DRV_setDirectionsTranslateLeft>:

static void DRV_setDirectionsTranslateLeft(void)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD );
 800a324:	2101      	movs	r1, #1
 800a326:	4808      	ldr	r0, [pc, #32]	; (800a348 <DRV_setDirectionsTranslateLeft+0x28>)
 800a328:	f000 fd72 	bl	800ae10 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 800a32c:	2102      	movs	r1, #2
 800a32e:	4807      	ldr	r0, [pc, #28]	; (800a34c <DRV_setDirectionsTranslateLeft+0x2c>)
 800a330:	f000 fd6e 	bl	800ae10 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 800a334:	2102      	movs	r1, #2
 800a336:	4806      	ldr	r0, [pc, #24]	; (800a350 <DRV_setDirectionsTranslateLeft+0x30>)
 800a338:	f000 fd6a 	bl	800ae10 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD );
 800a33c:	2101      	movs	r1, #1
 800a33e:	4805      	ldr	r0, [pc, #20]	; (800a354 <DRV_setDirectionsTranslateLeft+0x34>)
 800a340:	f000 fd66 	bl	800ae10 <MTR_setDirection>

  return;
 800a344:	bf00      	nop
}
 800a346:	bd80      	pop	{r7, pc}
 800a348:	2000031c 	.word	0x2000031c
 800a34c:	20000340 	.word	0x20000340
 800a350:	20000388 	.word	0x20000388
 800a354:	20000364 	.word	0x20000364

0800a358 <DRV_setDirectionsTranslateRight>:

static void DRV_setDirectionsTranslateRight(void)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	af00      	add	r7, sp, #0
  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 800a35c:	2102      	movs	r1, #2
 800a35e:	4808      	ldr	r0, [pc, #32]	; (800a380 <DRV_setDirectionsTranslateRight+0x28>)
 800a360:	f000 fd56 	bl	800ae10 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD );
 800a364:	2101      	movs	r1, #1
 800a366:	4807      	ldr	r0, [pc, #28]	; (800a384 <DRV_setDirectionsTranslateRight+0x2c>)
 800a368:	f000 fd52 	bl	800ae10 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD );
 800a36c:	2101      	movs	r1, #1
 800a36e:	4806      	ldr	r0, [pc, #24]	; (800a388 <DRV_setDirectionsTranslateRight+0x30>)
 800a370:	f000 fd4e 	bl	800ae10 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 800a374:	2102      	movs	r1, #2
 800a376:	4805      	ldr	r0, [pc, #20]	; (800a38c <DRV_setDirectionsTranslateRight+0x34>)
 800a378:	f000 fd4a 	bl	800ae10 <MTR_setDirection>

  return;
 800a37c:	bf00      	nop
}
 800a37e:	bd80      	pop	{r7, pc}
 800a380:	2000031c 	.word	0x2000031c
 800a384:	20000340 	.word	0x20000340
 800a388:	20000388 	.word	0x20000388
 800a38c:	20000364 	.word	0x20000364

0800a390 <DRV_sleep>:


static void DRV_sleep(void)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	af00      	add	r7, sp, #0
  if (g_DRV_isDriveOn == true)
 800a394:	4b0e      	ldr	r3, [pc, #56]	; (800a3d0 <DRV_sleep+0x40>)
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d017      	beq.n	800a3cc <DRV_sleep+0x3c>
  {
    LOG_debug("Drive going to sleep");
 800a39c:	490d      	ldr	r1, [pc, #52]	; (800a3d4 <DRV_sleep+0x44>)
 800a39e:	2000      	movs	r0, #0
 800a3a0:	f000 fbe4 	bl	800ab6c <LOG_log>

    MTR_setSpeed(&g_DRV_motorFrontRight, 0);
 800a3a4:	2100      	movs	r1, #0
 800a3a6:	480c      	ldr	r0, [pc, #48]	; (800a3d8 <DRV_sleep+0x48>)
 800a3a8:	f000 fdaa 	bl	800af00 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , 0);
 800a3ac:	2100      	movs	r1, #0
 800a3ae:	480b      	ldr	r0, [pc, #44]	; (800a3dc <DRV_sleep+0x4c>)
 800a3b0:	f000 fda6 	bl	800af00 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , 0);
 800a3b4:	2100      	movs	r1, #0
 800a3b6:	480a      	ldr	r0, [pc, #40]	; (800a3e0 <DRV_sleep+0x50>)
 800a3b8:	f000 fda2 	bl	800af00 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , 0);
 800a3bc:	2100      	movs	r1, #0
 800a3be:	4809      	ldr	r0, [pc, #36]	; (800a3e4 <DRV_sleep+0x54>)
 800a3c0:	f000 fd9e 	bl	800af00 <MTR_setSpeed>

    g_DRV_isDriveOn = false;
 800a3c4:	4b02      	ldr	r3, [pc, #8]	; (800a3d0 <DRV_sleep+0x40>)
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 800a3ca:	bf00      	nop
 800a3cc:	bf00      	nop
}
 800a3ce:	bd80      	pop	{r7, pc}
 800a3d0:	2000025a 	.word	0x2000025a
 800a3d4:	0800f0f0 	.word	0x0800f0f0
 800a3d8:	2000031c 	.word	0x2000031c
 800a3dc:	20000340 	.word	0x20000340
 800a3e0:	20000388 	.word	0x20000388
 800a3e4:	20000364 	.word	0x20000364

0800a3e8 <DRV_moveForward>:

static void DRV_moveForward(uint32_t p_speed)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward @%u", l_speed);
 800a3f4:	68fa      	ldr	r2, [r7, #12]
 800a3f6:	4912      	ldr	r1, [pc, #72]	; (800a440 <DRV_moveForward+0x58>)
 800a3f8:	2000      	movs	r0, #0
 800a3fa:	f000 fbb7 	bl	800ab6c <LOG_log>

  g_DRV_isDriveOn = true;
 800a3fe:	4b11      	ldr	r3, [pc, #68]	; (800a444 <DRV_moveForward+0x5c>)
 800a400:	2201      	movs	r2, #1
 800a402:	701a      	strb	r2, [r3, #0]

  DRV_setDirectionsForward();
 800a404:	f7ff fedc 	bl	800a1c0 <DRV_setDirectionsForward>

  if (g_DRV_areMotorsOn == false)
 800a408:	4b0f      	ldr	r3, [pc, #60]	; (800a448 <DRV_moveForward+0x60>)
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	f083 0301 	eor.w	r3, r3, #1
 800a410:	b2db      	uxtb	r3, r3
 800a412:	2b00      	cmp	r3, #0
 800a414:	d110      	bne.n	800a438 <DRV_moveForward+0x50>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800a416:	68f9      	ldr	r1, [r7, #12]
 800a418:	480c      	ldr	r0, [pc, #48]	; (800a44c <DRV_moveForward+0x64>)
 800a41a:	f000 fd71 	bl	800af00 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800a41e:	68f9      	ldr	r1, [r7, #12]
 800a420:	480b      	ldr	r0, [pc, #44]	; (800a450 <DRV_moveForward+0x68>)
 800a422:	f000 fd6d 	bl	800af00 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800a426:	68f9      	ldr	r1, [r7, #12]
 800a428:	480a      	ldr	r0, [pc, #40]	; (800a454 <DRV_moveForward+0x6c>)
 800a42a:	f000 fd69 	bl	800af00 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800a42e:	68f9      	ldr	r1, [r7, #12]
 800a430:	4809      	ldr	r0, [pc, #36]	; (800a458 <DRV_moveForward+0x70>)
 800a432:	f000 fd65 	bl	800af00 <MTR_setSpeed>
  }

  return;
 800a436:	bf00      	nop
 800a438:	bf00      	nop
}
 800a43a:	3710      	adds	r7, #16
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}
 800a440:	0800f108 	.word	0x0800f108
 800a444:	2000025a 	.word	0x2000025a
 800a448:	20000259 	.word	0x20000259
 800a44c:	2000031c 	.word	0x2000031c
 800a450:	20000340 	.word	0x20000340
 800a454:	20000388 	.word	0x20000388
 800a458:	20000364 	.word	0x20000364

0800a45c <DRV_moveBackward>:

static void DRV_moveBackward(uint32_t p_speed)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward @%u", l_speed);
 800a468:	68fa      	ldr	r2, [r7, #12]
 800a46a:	4912      	ldr	r1, [pc, #72]	; (800a4b4 <DRV_moveBackward+0x58>)
 800a46c:	2000      	movs	r0, #0
 800a46e:	f000 fb7d 	bl	800ab6c <LOG_log>

  g_DRV_isDriveOn = true;
 800a472:	4b11      	ldr	r3, [pc, #68]	; (800a4b8 <DRV_moveBackward+0x5c>)
 800a474:	2201      	movs	r2, #1
 800a476:	701a      	strb	r2, [r3, #0]

  DRV_setDirectionsBackward();
 800a478:	f7ff febe 	bl	800a1f8 <DRV_setDirectionsBackward>

  if (g_DRV_areMotorsOn == false)
 800a47c:	4b0f      	ldr	r3, [pc, #60]	; (800a4bc <DRV_moveBackward+0x60>)
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	f083 0301 	eor.w	r3, r3, #1
 800a484:	b2db      	uxtb	r3, r3
 800a486:	2b00      	cmp	r3, #0
 800a488:	d110      	bne.n	800a4ac <DRV_moveBackward+0x50>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800a48a:	68f9      	ldr	r1, [r7, #12]
 800a48c:	480c      	ldr	r0, [pc, #48]	; (800a4c0 <DRV_moveBackward+0x64>)
 800a48e:	f000 fd37 	bl	800af00 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800a492:	68f9      	ldr	r1, [r7, #12]
 800a494:	480b      	ldr	r0, [pc, #44]	; (800a4c4 <DRV_moveBackward+0x68>)
 800a496:	f000 fd33 	bl	800af00 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800a49a:	68f9      	ldr	r1, [r7, #12]
 800a49c:	480a      	ldr	r0, [pc, #40]	; (800a4c8 <DRV_moveBackward+0x6c>)
 800a49e:	f000 fd2f 	bl	800af00 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800a4a2:	68f9      	ldr	r1, [r7, #12]
 800a4a4:	4809      	ldr	r0, [pc, #36]	; (800a4cc <DRV_moveBackward+0x70>)
 800a4a6:	f000 fd2b 	bl	800af00 <MTR_setSpeed>
  }

  return;
 800a4aa:	bf00      	nop
 800a4ac:	bf00      	nop
}
 800a4ae:	3710      	adds	r7, #16
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	0800f11c 	.word	0x0800f11c
 800a4b8:	2000025a 	.word	0x2000025a
 800a4bc:	20000259 	.word	0x20000259
 800a4c0:	2000031c 	.word	0x2000031c
 800a4c4:	20000340 	.word	0x20000340
 800a4c8:	20000388 	.word	0x20000388
 800a4cc:	20000364 	.word	0x20000364

0800a4d0 <DRV_moveForwardRight>:

static void DRV_moveForwardRight(uint32_t p_speed)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward-right @%u", l_speed);
 800a4dc:	68fa      	ldr	r2, [r7, #12]
 800a4de:	4912      	ldr	r1, [pc, #72]	; (800a528 <DRV_moveForwardRight+0x58>)
 800a4e0:	2000      	movs	r0, #0
 800a4e2:	f000 fb43 	bl	800ab6c <LOG_log>

  g_DRV_isDriveOn = true;
 800a4e6:	4b11      	ldr	r3, [pc, #68]	; (800a52c <DRV_moveForwardRight+0x5c>)
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	701a      	strb	r2, [r3, #0]

  DRV_setDirectionsForwardRight();
 800a4ec:	f7ff fea0 	bl	800a230 <DRV_setDirectionsForwardRight>

  if (g_DRV_areMotorsOn == false)
 800a4f0:	4b0f      	ldr	r3, [pc, #60]	; (800a530 <DRV_moveForwardRight+0x60>)
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	f083 0301 	eor.w	r3, r3, #1
 800a4f8:	b2db      	uxtb	r3, r3
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d110      	bne.n	800a520 <DRV_moveForwardRight+0x50>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight,       0);
 800a4fe:	2100      	movs	r1, #0
 800a500:	480c      	ldr	r0, [pc, #48]	; (800a534 <DRV_moveForwardRight+0x64>)
 800a502:	f000 fcfd 	bl	800af00 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800a506:	68f9      	ldr	r1, [r7, #12]
 800a508:	480b      	ldr	r0, [pc, #44]	; (800a538 <DRV_moveForwardRight+0x68>)
 800a50a:	f000 fcf9 	bl	800af00 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800a50e:	68f9      	ldr	r1, [r7, #12]
 800a510:	480a      	ldr	r0, [pc, #40]	; (800a53c <DRV_moveForwardRight+0x6c>)
 800a512:	f000 fcf5 	bl	800af00 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  ,       0);
 800a516:	2100      	movs	r1, #0
 800a518:	4809      	ldr	r0, [pc, #36]	; (800a540 <DRV_moveForwardRight+0x70>)
 800a51a:	f000 fcf1 	bl	800af00 <MTR_setSpeed>
  }

  return;
 800a51e:	bf00      	nop
 800a520:	bf00      	nop
}
 800a522:	3710      	adds	r7, #16
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}
 800a528:	0800f130 	.word	0x0800f130
 800a52c:	2000025a 	.word	0x2000025a
 800a530:	20000259 	.word	0x20000259
 800a534:	2000031c 	.word	0x2000031c
 800a538:	20000340 	.word	0x20000340
 800a53c:	20000388 	.word	0x20000388
 800a540:	20000364 	.word	0x20000364

0800a544 <DRV_moveForwardLeft>:

static void DRV_moveForwardLeft(uint32_t p_speed)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward-left @%u", l_speed);
 800a550:	68fa      	ldr	r2, [r7, #12]
 800a552:	4912      	ldr	r1, [pc, #72]	; (800a59c <DRV_moveForwardLeft+0x58>)
 800a554:	2000      	movs	r0, #0
 800a556:	f000 fb09 	bl	800ab6c <LOG_log>

  g_DRV_isDriveOn = true;
 800a55a:	4b11      	ldr	r3, [pc, #68]	; (800a5a0 <DRV_moveForwardLeft+0x5c>)
 800a55c:	2201      	movs	r2, #1
 800a55e:	701a      	strb	r2, [r3, #0]

  DRV_setDirectionsForwardLeft();
 800a560:	f7ff fe76 	bl	800a250 <DRV_setDirectionsForwardLeft>

  if (g_DRV_areMotorsOn == false)
 800a564:	4b0f      	ldr	r3, [pc, #60]	; (800a5a4 <DRV_moveForwardLeft+0x60>)
 800a566:	781b      	ldrb	r3, [r3, #0]
 800a568:	f083 0301 	eor.w	r3, r3, #1
 800a56c:	b2db      	uxtb	r3, r3
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d110      	bne.n	800a594 <DRV_moveForwardLeft+0x50>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800a572:	68f9      	ldr	r1, [r7, #12]
 800a574:	480c      	ldr	r0, [pc, #48]	; (800a5a8 <DRV_moveForwardLeft+0x64>)
 800a576:	f000 fcc3 	bl	800af00 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft ,       0);
 800a57a:	2100      	movs	r1, #0
 800a57c:	480b      	ldr	r0, [pc, #44]	; (800a5ac <DRV_moveForwardLeft+0x68>)
 800a57e:	f000 fcbf 	bl	800af00 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight ,       0);
 800a582:	2100      	movs	r1, #0
 800a584:	480a      	ldr	r0, [pc, #40]	; (800a5b0 <DRV_moveForwardLeft+0x6c>)
 800a586:	f000 fcbb 	bl	800af00 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800a58a:	68f9      	ldr	r1, [r7, #12]
 800a58c:	4809      	ldr	r0, [pc, #36]	; (800a5b4 <DRV_moveForwardLeft+0x70>)
 800a58e:	f000 fcb7 	bl	800af00 <MTR_setSpeed>
  }

  return;
 800a592:	bf00      	nop
 800a594:	bf00      	nop
}
 800a596:	3710      	adds	r7, #16
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}
 800a59c:	0800f14c 	.word	0x0800f14c
 800a5a0:	2000025a 	.word	0x2000025a
 800a5a4:	20000259 	.word	0x20000259
 800a5a8:	2000031c 	.word	0x2000031c
 800a5ac:	20000340 	.word	0x20000340
 800a5b0:	20000388 	.word	0x20000388
 800a5b4:	20000364 	.word	0x20000364

0800a5b8 <DRV_moveBackwardRight>:

static void DRV_moveBackwardRight(uint32_t p_speed)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b084      	sub	sp, #16
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward-right @%u", l_speed);
 800a5c4:	68fa      	ldr	r2, [r7, #12]
 800a5c6:	4912      	ldr	r1, [pc, #72]	; (800a610 <DRV_moveBackwardRight+0x58>)
 800a5c8:	2000      	movs	r0, #0
 800a5ca:	f000 facf 	bl	800ab6c <LOG_log>

  g_DRV_isDriveOn = true;
 800a5ce:	4b11      	ldr	r3, [pc, #68]	; (800a614 <DRV_moveBackwardRight+0x5c>)
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	701a      	strb	r2, [r3, #0]

  DRV_setDirectionsBackwardRight();
 800a5d4:	f7ff fe4c 	bl	800a270 <DRV_setDirectionsBackwardRight>

  if (g_DRV_areMotorsOn == false)
 800a5d8:	4b0f      	ldr	r3, [pc, #60]	; (800a618 <DRV_moveBackwardRight+0x60>)
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	f083 0301 	eor.w	r3, r3, #1
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d110      	bne.n	800a608 <DRV_moveBackwardRight+0x50>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800a5e6:	68f9      	ldr	r1, [r7, #12]
 800a5e8:	480c      	ldr	r0, [pc, #48]	; (800a61c <DRV_moveBackwardRight+0x64>)
 800a5ea:	f000 fc89 	bl	800af00 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft ,       0);
 800a5ee:	2100      	movs	r1, #0
 800a5f0:	480b      	ldr	r0, [pc, #44]	; (800a620 <DRV_moveBackwardRight+0x68>)
 800a5f2:	f000 fc85 	bl	800af00 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight ,       0);
 800a5f6:	2100      	movs	r1, #0
 800a5f8:	480a      	ldr	r0, [pc, #40]	; (800a624 <DRV_moveBackwardRight+0x6c>)
 800a5fa:	f000 fc81 	bl	800af00 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800a5fe:	68f9      	ldr	r1, [r7, #12]
 800a600:	4809      	ldr	r0, [pc, #36]	; (800a628 <DRV_moveBackwardRight+0x70>)
 800a602:	f000 fc7d 	bl	800af00 <MTR_setSpeed>
  }

  return;
 800a606:	bf00      	nop
 800a608:	bf00      	nop
}
 800a60a:	3710      	adds	r7, #16
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}
 800a610:	0800f164 	.word	0x0800f164
 800a614:	2000025a 	.word	0x2000025a
 800a618:	20000259 	.word	0x20000259
 800a61c:	2000031c 	.word	0x2000031c
 800a620:	20000340 	.word	0x20000340
 800a624:	20000388 	.word	0x20000388
 800a628:	20000364 	.word	0x20000364

0800a62c <DRV_moveBackwardLeft>:

static void DRV_moveBackwardLeft(uint32_t p_speed)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward-left @%u", l_speed);
 800a638:	68fa      	ldr	r2, [r7, #12]
 800a63a:	4912      	ldr	r1, [pc, #72]	; (800a684 <DRV_moveBackwardLeft+0x58>)
 800a63c:	2000      	movs	r0, #0
 800a63e:	f000 fa95 	bl	800ab6c <LOG_log>

  g_DRV_isDriveOn = true;
 800a642:	4b11      	ldr	r3, [pc, #68]	; (800a688 <DRV_moveBackwardLeft+0x5c>)
 800a644:	2201      	movs	r2, #1
 800a646:	701a      	strb	r2, [r3, #0]

  DRV_setDirectionsBackwardLeft();
 800a648:	f7ff fe22 	bl	800a290 <DRV_setDirectionsBackwardLeft>

  if (g_DRV_areMotorsOn == false)
 800a64c:	4b0f      	ldr	r3, [pc, #60]	; (800a68c <DRV_moveBackwardLeft+0x60>)
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	f083 0301 	eor.w	r3, r3, #1
 800a654:	b2db      	uxtb	r3, r3
 800a656:	2b00      	cmp	r3, #0
 800a658:	d110      	bne.n	800a67c <DRV_moveBackwardLeft+0x50>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight,       0);
 800a65a:	2100      	movs	r1, #0
 800a65c:	480c      	ldr	r0, [pc, #48]	; (800a690 <DRV_moveBackwardLeft+0x64>)
 800a65e:	f000 fc4f 	bl	800af00 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800a662:	68f9      	ldr	r1, [r7, #12]
 800a664:	480b      	ldr	r0, [pc, #44]	; (800a694 <DRV_moveBackwardLeft+0x68>)
 800a666:	f000 fc4b 	bl	800af00 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800a66a:	68f9      	ldr	r1, [r7, #12]
 800a66c:	480a      	ldr	r0, [pc, #40]	; (800a698 <DRV_moveBackwardLeft+0x6c>)
 800a66e:	f000 fc47 	bl	800af00 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  ,       0);
 800a672:	2100      	movs	r1, #0
 800a674:	4809      	ldr	r0, [pc, #36]	; (800a69c <DRV_moveBackwardLeft+0x70>)
 800a676:	f000 fc43 	bl	800af00 <MTR_setSpeed>
  }

  return;
 800a67a:	bf00      	nop
 800a67c:	bf00      	nop
}
 800a67e:	3710      	adds	r7, #16
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}
 800a684:	0800f180 	.word	0x0800f180
 800a688:	2000025a 	.word	0x2000025a
 800a68c:	20000259 	.word	0x20000259
 800a690:	2000031c 	.word	0x2000031c
 800a694:	20000340 	.word	0x20000340
 800a698:	20000388 	.word	0x20000388
 800a69c:	20000364 	.word	0x20000364

0800a6a0 <DRV_turnLeft>:

static void DRV_turnLeft(uint32_t p_speed)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	60fb      	str	r3, [r7, #12]

  LOG_debug("Turning left @%u", l_speed);
 800a6ac:	68fa      	ldr	r2, [r7, #12]
 800a6ae:	4912      	ldr	r1, [pc, #72]	; (800a6f8 <DRV_turnLeft+0x58>)
 800a6b0:	2000      	movs	r0, #0
 800a6b2:	f000 fa5b 	bl	800ab6c <LOG_log>

  g_DRV_isDriveOn = true;
 800a6b6:	4b11      	ldr	r3, [pc, #68]	; (800a6fc <DRV_turnLeft+0x5c>)
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	701a      	strb	r2, [r3, #0]

  DRV_setDirectionsTurnLeft();
 800a6bc:	f7ff fdf8 	bl	800a2b0 <DRV_setDirectionsTurnLeft>

  if (g_DRV_areMotorsOn == false)
 800a6c0:	4b0f      	ldr	r3, [pc, #60]	; (800a700 <DRV_turnLeft+0x60>)
 800a6c2:	781b      	ldrb	r3, [r3, #0]
 800a6c4:	f083 0301 	eor.w	r3, r3, #1
 800a6c8:	b2db      	uxtb	r3, r3
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d110      	bne.n	800a6f0 <DRV_turnLeft+0x50>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800a6ce:	68f9      	ldr	r1, [r7, #12]
 800a6d0:	480c      	ldr	r0, [pc, #48]	; (800a704 <DRV_turnLeft+0x64>)
 800a6d2:	f000 fc15 	bl	800af00 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800a6d6:	68f9      	ldr	r1, [r7, #12]
 800a6d8:	480b      	ldr	r0, [pc, #44]	; (800a708 <DRV_turnLeft+0x68>)
 800a6da:	f000 fc11 	bl	800af00 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800a6de:	68f9      	ldr	r1, [r7, #12]
 800a6e0:	480a      	ldr	r0, [pc, #40]	; (800a70c <DRV_turnLeft+0x6c>)
 800a6e2:	f000 fc0d 	bl	800af00 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800a6e6:	68f9      	ldr	r1, [r7, #12]
 800a6e8:	4809      	ldr	r0, [pc, #36]	; (800a710 <DRV_turnLeft+0x70>)
 800a6ea:	f000 fc09 	bl	800af00 <MTR_setSpeed>
  }

  return;
 800a6ee:	bf00      	nop
 800a6f0:	bf00      	nop
}
 800a6f2:	3710      	adds	r7, #16
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}
 800a6f8:	0800f19c 	.word	0x0800f19c
 800a6fc:	2000025a 	.word	0x2000025a
 800a700:	20000259 	.word	0x20000259
 800a704:	2000031c 	.word	0x2000031c
 800a708:	20000340 	.word	0x20000340
 800a70c:	20000388 	.word	0x20000388
 800a710:	20000364 	.word	0x20000364

0800a714 <DRV_turnRight>:

static void DRV_turnRight(uint32_t p_speed)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b084      	sub	sp, #16
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	60fb      	str	r3, [r7, #12]

  LOG_debug("Turning right @%u", l_speed);
 800a720:	68fa      	ldr	r2, [r7, #12]
 800a722:	4912      	ldr	r1, [pc, #72]	; (800a76c <DRV_turnRight+0x58>)
 800a724:	2000      	movs	r0, #0
 800a726:	f000 fa21 	bl	800ab6c <LOG_log>

  g_DRV_isDriveOn = true;
 800a72a:	4b11      	ldr	r3, [pc, #68]	; (800a770 <DRV_turnRight+0x5c>)
 800a72c:	2201      	movs	r2, #1
 800a72e:	701a      	strb	r2, [r3, #0]

  DRV_setDirectionsTurnRight();
 800a730:	f7ff fdda 	bl	800a2e8 <DRV_setDirectionsTurnRight>

  if (g_DRV_areMotorsOn == false)
 800a734:	4b0f      	ldr	r3, [pc, #60]	; (800a774 <DRV_turnRight+0x60>)
 800a736:	781b      	ldrb	r3, [r3, #0]
 800a738:	f083 0301 	eor.w	r3, r3, #1
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d110      	bne.n	800a764 <DRV_turnRight+0x50>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800a742:	68f9      	ldr	r1, [r7, #12]
 800a744:	480c      	ldr	r0, [pc, #48]	; (800a778 <DRV_turnRight+0x64>)
 800a746:	f000 fbdb 	bl	800af00 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800a74a:	68f9      	ldr	r1, [r7, #12]
 800a74c:	480b      	ldr	r0, [pc, #44]	; (800a77c <DRV_turnRight+0x68>)
 800a74e:	f000 fbd7 	bl	800af00 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800a752:	68f9      	ldr	r1, [r7, #12]
 800a754:	480a      	ldr	r0, [pc, #40]	; (800a780 <DRV_turnRight+0x6c>)
 800a756:	f000 fbd3 	bl	800af00 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800a75a:	68f9      	ldr	r1, [r7, #12]
 800a75c:	4809      	ldr	r0, [pc, #36]	; (800a784 <DRV_turnRight+0x70>)
 800a75e:	f000 fbcf 	bl	800af00 <MTR_setSpeed>
  }

  return;
 800a762:	bf00      	nop
 800a764:	bf00      	nop
}
 800a766:	3710      	adds	r7, #16
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}
 800a76c:	0800f1b0 	.word	0x0800f1b0
 800a770:	2000025a 	.word	0x2000025a
 800a774:	20000259 	.word	0x20000259
 800a778:	2000031c 	.word	0x2000031c
 800a77c:	20000340 	.word	0x20000340
 800a780:	20000388 	.word	0x20000388
 800a784:	20000364 	.word	0x20000364

0800a788 <DRV_translateLeft>:

static void DRV_translateLeft(uint32_t p_speed)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	60fb      	str	r3, [r7, #12]

  LOG_debug("Translating left @%u", l_speed);
 800a794:	68fa      	ldr	r2, [r7, #12]
 800a796:	4912      	ldr	r1, [pc, #72]	; (800a7e0 <DRV_translateLeft+0x58>)
 800a798:	2000      	movs	r0, #0
 800a79a:	f000 f9e7 	bl	800ab6c <LOG_log>

  g_DRV_isDriveOn = true;
 800a79e:	4b11      	ldr	r3, [pc, #68]	; (800a7e4 <DRV_translateLeft+0x5c>)
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	701a      	strb	r2, [r3, #0]

  DRV_setDirectionsTranslateLeft();
 800a7a4:	f7ff fdbc 	bl	800a320 <DRV_setDirectionsTranslateLeft>

  if (g_DRV_areMotorsOn == false)
 800a7a8:	4b0f      	ldr	r3, [pc, #60]	; (800a7e8 <DRV_translateLeft+0x60>)
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	f083 0301 	eor.w	r3, r3, #1
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d110      	bne.n	800a7d8 <DRV_translateLeft+0x50>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800a7b6:	68f9      	ldr	r1, [r7, #12]
 800a7b8:	480c      	ldr	r0, [pc, #48]	; (800a7ec <DRV_translateLeft+0x64>)
 800a7ba:	f000 fba1 	bl	800af00 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800a7be:	68f9      	ldr	r1, [r7, #12]
 800a7c0:	480b      	ldr	r0, [pc, #44]	; (800a7f0 <DRV_translateLeft+0x68>)
 800a7c2:	f000 fb9d 	bl	800af00 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800a7c6:	68f9      	ldr	r1, [r7, #12]
 800a7c8:	480a      	ldr	r0, [pc, #40]	; (800a7f4 <DRV_translateLeft+0x6c>)
 800a7ca:	f000 fb99 	bl	800af00 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800a7ce:	68f9      	ldr	r1, [r7, #12]
 800a7d0:	4809      	ldr	r0, [pc, #36]	; (800a7f8 <DRV_translateLeft+0x70>)
 800a7d2:	f000 fb95 	bl	800af00 <MTR_setSpeed>
  }

  return;
 800a7d6:	bf00      	nop
 800a7d8:	bf00      	nop
}
 800a7da:	3710      	adds	r7, #16
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}
 800a7e0:	0800f1c4 	.word	0x0800f1c4
 800a7e4:	2000025a 	.word	0x2000025a
 800a7e8:	20000259 	.word	0x20000259
 800a7ec:	2000031c 	.word	0x2000031c
 800a7f0:	20000340 	.word	0x20000340
 800a7f4:	20000388 	.word	0x20000388
 800a7f8:	20000364 	.word	0x20000364

0800a7fc <DRV_translateRight>:

static void DRV_translateRight(uint32_t p_speed)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	60fb      	str	r3, [r7, #12]

  LOG_debug("Translating right @%u", l_speed);
 800a808:	68fa      	ldr	r2, [r7, #12]
 800a80a:	4912      	ldr	r1, [pc, #72]	; (800a854 <DRV_translateRight+0x58>)
 800a80c:	2000      	movs	r0, #0
 800a80e:	f000 f9ad 	bl	800ab6c <LOG_log>

  g_DRV_isDriveOn = true;
 800a812:	4b11      	ldr	r3, [pc, #68]	; (800a858 <DRV_translateRight+0x5c>)
 800a814:	2201      	movs	r2, #1
 800a816:	701a      	strb	r2, [r3, #0]

  DRV_setDirectionsTranslateRight();
 800a818:	f7ff fd9e 	bl	800a358 <DRV_setDirectionsTranslateRight>

  if (g_DRV_areMotorsOn == false)
 800a81c:	4b0f      	ldr	r3, [pc, #60]	; (800a85c <DRV_translateRight+0x60>)
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	f083 0301 	eor.w	r3, r3, #1
 800a824:	b2db      	uxtb	r3, r3
 800a826:	2b00      	cmp	r3, #0
 800a828:	d110      	bne.n	800a84c <DRV_translateRight+0x50>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800a82a:	68f9      	ldr	r1, [r7, #12]
 800a82c:	480c      	ldr	r0, [pc, #48]	; (800a860 <DRV_translateRight+0x64>)
 800a82e:	f000 fb67 	bl	800af00 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800a832:	68f9      	ldr	r1, [r7, #12]
 800a834:	480b      	ldr	r0, [pc, #44]	; (800a864 <DRV_translateRight+0x68>)
 800a836:	f000 fb63 	bl	800af00 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800a83a:	68f9      	ldr	r1, [r7, #12]
 800a83c:	480a      	ldr	r0, [pc, #40]	; (800a868 <DRV_translateRight+0x6c>)
 800a83e:	f000 fb5f 	bl	800af00 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800a842:	68f9      	ldr	r1, [r7, #12]
 800a844:	4809      	ldr	r0, [pc, #36]	; (800a86c <DRV_translateRight+0x70>)
 800a846:	f000 fb5b 	bl	800af00 <MTR_setSpeed>
  }

  return;
 800a84a:	bf00      	nop
 800a84c:	bf00      	nop
}
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}
 800a854:	0800f1dc 	.word	0x0800f1dc
 800a858:	2000025a 	.word	0x2000025a
 800a85c:	20000259 	.word	0x20000259
 800a860:	2000031c 	.word	0x2000031c
 800a864:	20000340 	.word	0x20000340
 800a868:	20000388 	.word	0x20000388
 800a86c:	20000364 	.word	0x20000364

0800a870 <ENC_init>:
#include "encoder.h"

#include "log.h"

void ENC_init(T_ENC_Handle *p_handle, char *p_name, bool p_invertOnUpdate, TIM_HandleTypeDef *p_encoderTimerHandle)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b084      	sub	sp, #16
 800a874:	af00      	add	r7, sp, #0
 800a876:	60f8      	str	r0, [r7, #12]
 800a878:	60b9      	str	r1, [r7, #8]
 800a87a:	603b      	str	r3, [r7, #0]
 800a87c:	4613      	mov	r3, r2
 800a87e:	71fb      	strb	r3, [r7, #7]
  LOG_info("Initializing Encoder module for %s", p_name);
 800a880:	68ba      	ldr	r2, [r7, #8]
 800a882:	490a      	ldr	r1, [pc, #40]	; (800a8ac <ENC_init+0x3c>)
 800a884:	2001      	movs	r0, #1
 800a886:	f000 f971 	bl	800ab6c <LOG_log>

  p_handle->name           = p_name;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	68ba      	ldr	r2, [r7, #8]
 800a88e:	601a      	str	r2, [r3, #0]
  p_handle->invertOnUpdate = p_invertOnUpdate;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	79fa      	ldrb	r2, [r7, #7]
 800a894:	719a      	strb	r2, [r3, #6]
  p_handle->timerHandle    = p_encoderTimerHandle;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	683a      	ldr	r2, [r7, #0]
 800a89a:	609a      	str	r2, [r3, #8]

  ENC_reset(p_handle);
 800a89c:	68f8      	ldr	r0, [r7, #12]
 800a89e:	f000 f807 	bl	800a8b0 <ENC_reset>

  return;
 800a8a2:	bf00      	nop
}
 800a8a4:	3710      	adds	r7, #16
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}
 800a8aa:	bf00      	nop
 800a8ac:	0800f1f4 	.word	0x0800f1f4

0800a8b0 <ENC_reset>:

void ENC_reset(T_ENC_Handle *p_handle)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b083      	sub	sp, #12
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  p_handle->value = 0;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	809a      	strh	r2, [r3, #4]

  __HAL_TIM_SET_COUNTER(p_handle->timerHandle, 0);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	689b      	ldr	r3, [r3, #8]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800a8c8:	bf00      	nop
}
 800a8ca:	370c      	adds	r7, #12
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bc80      	pop	{r7}
 800a8d0:	4770      	bx	lr

0800a8d2 <ENC_update>:

void ENC_update(T_ENC_Handle *p_handle, int16_t p_value)
{
 800a8d2:	b480      	push	{r7}
 800a8d4:	b083      	sub	sp, #12
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
 800a8da:	460b      	mov	r3, r1
 800a8dc:	807b      	strh	r3, [r7, #2]
  if (p_handle->invertOnUpdate == false)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	799b      	ldrb	r3, [r3, #6]
 800a8e2:	f083 0301 	eor.w	r3, r3, #1
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d003      	beq.n	800a8f4 <ENC_update+0x22>
  {
    p_handle->value = p_value;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	887a      	ldrh	r2, [r7, #2]
 800a8f0:	809a      	strh	r2, [r3, #4]
  else
  {
    p_handle->value = -p_value;
  }

  return;
 800a8f2:	e006      	b.n	800a902 <ENC_update+0x30>
    p_handle->value = -p_value;
 800a8f4:	887b      	ldrh	r3, [r7, #2]
 800a8f6:	425b      	negs	r3, r3
 800a8f8:	b29b      	uxth	r3, r3
 800a8fa:	b21a      	sxth	r2, r3
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	809a      	strh	r2, [r3, #4]
  return;
 800a900:	bf00      	nop
}
 800a902:	370c      	adds	r7, #12
 800a904:	46bd      	mov	sp, r7
 800a906:	bc80      	pop	{r7}
 800a908:	4770      	bx	lr

0800a90a <ENC_getCount>:

int16_t ENC_getCount(T_ENC_Handle *p_handle)
{
 800a90a:	b580      	push	{r7, lr}
 800a90c:	b084      	sub	sp, #16
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
  int16_t l_count;

  l_count = p_handle->value;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	889b      	ldrh	r3, [r3, #4]
 800a916:	81fb      	strh	r3, [r7, #14]

  ENC_reset(p_handle);
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f7ff ffc9 	bl	800a8b0 <ENC_reset>

  return l_count;
 800a91e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800a922:	4618      	mov	r0, r3
 800a924:	3710      	adds	r7, #16
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}
	...

0800a92c <LED_setMode>:
#include "log.h"

static T_LED_MODE g_LED_mode = LED_MODE_BLINK_SLOW;

void LED_setMode(T_LED_MODE p_mode)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	4603      	mov	r3, r0
 800a934:	71fb      	strb	r3, [r7, #7]
  if (p_mode != g_LED_mode)
 800a936:	4b1b      	ldr	r3, [pc, #108]	; (800a9a4 <LED_setMode+0x78>)
 800a938:	781b      	ldrb	r3, [r3, #0]
 800a93a:	79fa      	ldrb	r2, [r7, #7]
 800a93c:	429a      	cmp	r2, r3
 800a93e:	d02d      	beq.n	800a99c <LED_setMode+0x70>
  {
    switch (p_mode)
 800a940:	79fb      	ldrb	r3, [r7, #7]
 800a942:	2b04      	cmp	r3, #4
 800a944:	d825      	bhi.n	800a992 <LED_setMode+0x66>
 800a946:	a201      	add	r2, pc, #4	; (adr r2, 800a94c <LED_setMode+0x20>)
 800a948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a94c:	0800a961 	.word	0x0800a961
 800a950:	0800a96b 	.word	0x0800a96b
 800a954:	0800a975 	.word	0x0800a975
 800a958:	0800a97f 	.word	0x0800a97f
 800a95c:	0800a989 	.word	0x0800a989
    {
      case LED_MODE_FORCED_OFF:
        LOG_info("Turning LED OFF");
 800a960:	4911      	ldr	r1, [pc, #68]	; (800a9a8 <LED_setMode+0x7c>)
 800a962:	2001      	movs	r0, #1
 800a964:	f000 f902 	bl	800ab6c <LOG_log>
        break;
 800a968:	e014      	b.n	800a994 <LED_setMode+0x68>

      case LED_MODE_FORCED_ON:
        LOG_info("Turning LED ON");
 800a96a:	4910      	ldr	r1, [pc, #64]	; (800a9ac <LED_setMode+0x80>)
 800a96c:	2001      	movs	r0, #1
 800a96e:	f000 f8fd 	bl	800ab6c <LOG_log>
        break;
 800a972:	e00f      	b.n	800a994 <LED_setMode+0x68>

      case LED_MODE_BLINK_SLOW:
        LOG_info("Setting LED to blink slow");
 800a974:	490e      	ldr	r1, [pc, #56]	; (800a9b0 <LED_setMode+0x84>)
 800a976:	2001      	movs	r0, #1
 800a978:	f000 f8f8 	bl	800ab6c <LOG_log>
        break;
 800a97c:	e00a      	b.n	800a994 <LED_setMode+0x68>

      case LED_MODE_BLINK_MEDIUM:
        LOG_info("Setting LED to blink medium");
 800a97e:	490d      	ldr	r1, [pc, #52]	; (800a9b4 <LED_setMode+0x88>)
 800a980:	2001      	movs	r0, #1
 800a982:	f000 f8f3 	bl	800ab6c <LOG_log>
        break;
 800a986:	e005      	b.n	800a994 <LED_setMode+0x68>

      case LED_MODE_BLINK_FAST:
        LOG_info("Setting LED to blink fast");
 800a988:	490b      	ldr	r1, [pc, #44]	; (800a9b8 <LED_setMode+0x8c>)
 800a98a:	2001      	movs	r0, #1
 800a98c:	f000 f8ee 	bl	800ab6c <LOG_log>
        break;
 800a990:	e000      	b.n	800a994 <LED_setMode+0x68>

      default:
        ; /* Nothing to do */
        break;
 800a992:	bf00      	nop
    }

    g_LED_mode = p_mode;
 800a994:	4a03      	ldr	r2, [pc, #12]	; (800a9a4 <LED_setMode+0x78>)
 800a996:	79fb      	ldrb	r3, [r7, #7]
 800a998:	7013      	strb	r3, [r2, #0]
  else
  {
    ; /* Nothong to do */
  }

  return;
 800a99a:	bf00      	nop
 800a99c:	bf00      	nop
}
 800a99e:	3708      	adds	r7, #8
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}
 800a9a4:	20000009 	.word	0x20000009
 800a9a8:	0800f218 	.word	0x0800f218
 800a9ac:	0800f228 	.word	0x0800f228
 800a9b0:	0800f238 	.word	0x0800f238
 800a9b4:	0800f254 	.word	0x0800f254
 800a9b8:	0800f270 	.word	0x0800f270

0800a9bc <LED_update>:
{
  return g_LED_mode;
}

void LED_update(void)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	af00      	add	r7, sp, #0
  static uint32_t l_blinkCounter = 0;

  switch (g_LED_mode)
 800a9c0:	4b2a      	ldr	r3, [pc, #168]	; (800aa6c <LED_update+0xb0>)
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	2b04      	cmp	r3, #4
 800a9c6:	d849      	bhi.n	800aa5c <LED_update+0xa0>
 800a9c8:	a201      	add	r2, pc, #4	; (adr r2, 800a9d0 <LED_update+0x14>)
 800a9ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ce:	bf00      	nop
 800a9d0:	0800a9e5 	.word	0x0800a9e5
 800a9d4:	0800a9f3 	.word	0x0800a9f3
 800a9d8:	0800aa01 	.word	0x0800aa01
 800a9dc:	0800aa2f 	.word	0x0800aa2f
 800a9e0:	0800aa51 	.word	0x0800aa51
  {
    case LED_MODE_FORCED_OFF:
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a9ea:	4821      	ldr	r0, [pc, #132]	; (800aa70 <LED_update+0xb4>)
 800a9ec:	f7f9 fb70 	bl	80040d0 <HAL_GPIO_WritePin>
      break;
 800a9f0:	e039      	b.n	800aa66 <LED_update+0xaa>

    case LED_MODE_FORCED_ON:
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a9f8:	481d      	ldr	r0, [pc, #116]	; (800aa70 <LED_update+0xb4>)
 800a9fa:	f7f9 fb69 	bl	80040d0 <HAL_GPIO_WritePin>
      break;
 800a9fe:	e032      	b.n	800aa66 <LED_update+0xaa>

    case LED_MODE_BLINK_SLOW:
      l_blinkCounter++;
 800aa00:	4b1c      	ldr	r3, [pc, #112]	; (800aa74 <LED_update+0xb8>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	3301      	adds	r3, #1
 800aa06:	4a1b      	ldr	r2, [pc, #108]	; (800aa74 <LED_update+0xb8>)
 800aa08:	6013      	str	r3, [r2, #0]
      if (l_blinkCounter % 5 == 0)
 800aa0a:	4b1a      	ldr	r3, [pc, #104]	; (800aa74 <LED_update+0xb8>)
 800aa0c:	6819      	ldr	r1, [r3, #0]
 800aa0e:	4b1a      	ldr	r3, [pc, #104]	; (800aa78 <LED_update+0xbc>)
 800aa10:	fba3 2301 	umull	r2, r3, r3, r1
 800aa14:	089a      	lsrs	r2, r3, #2
 800aa16:	4613      	mov	r3, r2
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	4413      	add	r3, r2
 800aa1c:	1aca      	subs	r2, r1, r3
 800aa1e:	2a00      	cmp	r2, #0
 800aa20:	d11e      	bne.n	800aa60 <LED_update+0xa4>
      {
        HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 800aa22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800aa26:	4812      	ldr	r0, [pc, #72]	; (800aa70 <LED_update+0xb4>)
 800aa28:	f7f9 fb84 	bl	8004134 <HAL_GPIO_TogglePin>
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 800aa2c:	e018      	b.n	800aa60 <LED_update+0xa4>

    case LED_MODE_BLINK_MEDIUM:
      l_blinkCounter++;
 800aa2e:	4b11      	ldr	r3, [pc, #68]	; (800aa74 <LED_update+0xb8>)
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	3301      	adds	r3, #1
 800aa34:	4a0f      	ldr	r2, [pc, #60]	; (800aa74 <LED_update+0xb8>)
 800aa36:	6013      	str	r3, [r2, #0]
      if (l_blinkCounter % 2 == 0)
 800aa38:	4b0e      	ldr	r3, [pc, #56]	; (800aa74 <LED_update+0xb8>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f003 0301 	and.w	r3, r3, #1
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d10f      	bne.n	800aa64 <LED_update+0xa8>
      {
        HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 800aa44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800aa48:	4809      	ldr	r0, [pc, #36]	; (800aa70 <LED_update+0xb4>)
 800aa4a:	f7f9 fb73 	bl	8004134 <HAL_GPIO_TogglePin>
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 800aa4e:	e009      	b.n	800aa64 <LED_update+0xa8>

    case LED_MODE_BLINK_FAST:
      HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 800aa50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800aa54:	4806      	ldr	r0, [pc, #24]	; (800aa70 <LED_update+0xb4>)
 800aa56:	f7f9 fb6d 	bl	8004134 <HAL_GPIO_TogglePin>
      break;
 800aa5a:	e004      	b.n	800aa66 <LED_update+0xaa>

    default:
      ; /* Nothing to do */
      break;
 800aa5c:	bf00      	nop
 800aa5e:	e002      	b.n	800aa66 <LED_update+0xaa>
      break;
 800aa60:	bf00      	nop
 800aa62:	e000      	b.n	800aa66 <LED_update+0xaa>
      break;
 800aa64:	bf00      	nop
  }

  return;
 800aa66:	bf00      	nop
}
 800aa68:	bd80      	pop	{r7, pc}
 800aa6a:	bf00      	nop
 800aa6c:	20000009 	.word	0x20000009
 800aa70:	40011000 	.word	0x40011000
 800aa74:	200004a0 	.word	0x200004a0
 800aa78:	cccccccd 	.word	0xcccccccd

0800aa7c <LOG_init>:
{
  "DEBUG", "INFO", "WARNING", "ERROR"
};

void LOG_init(RTC_HandleTypeDef *p_rctHandle, bool p_isLogOn)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b082      	sub	sp, #8
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	460b      	mov	r3, r1
 800aa86:	70fb      	strb	r3, [r7, #3]
  g_LOG_isOn      = p_isLogOn;
 800aa88:	4a06      	ldr	r2, [pc, #24]	; (800aaa4 <LOG_init+0x28>)
 800aa8a:	78fb      	ldrb	r3, [r7, #3]
 800aa8c:	7013      	strb	r3, [r2, #0]
  g_LOG_rtcHandle = p_rctHandle;
 800aa8e:	4a06      	ldr	r2, [pc, #24]	; (800aaa8 <LOG_init+0x2c>)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6013      	str	r3, [r2, #0]

  LOG_info("LOG initialized");
 800aa94:	4905      	ldr	r1, [pc, #20]	; (800aaac <LOG_init+0x30>)
 800aa96:	2001      	movs	r0, #1
 800aa98:	f000 f868 	bl	800ab6c <LOG_log>

  return;
 800aa9c:	bf00      	nop
}
 800aa9e:	3708      	adds	r7, #8
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	200004a4 	.word	0x200004a4
 800aaa8:	200004a8 	.word	0x200004a8
 800aaac:	0800f2ac 	.word	0x0800f2ac

0800aab0 <LOG_toggleOnOff>:

void LOG_toggleOnOff(void)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	af00      	add	r7, sp, #0
  if (g_LOG_isOn == true)
 800aab4:	4b0a      	ldr	r3, [pc, #40]	; (800aae0 <LOG_toggleOnOff+0x30>)
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d007      	beq.n	800aacc <LOG_toggleOnOff+0x1c>
  {
    LOG_info("Turning LOG OFF");
 800aabc:	4909      	ldr	r1, [pc, #36]	; (800aae4 <LOG_toggleOnOff+0x34>)
 800aabe:	2001      	movs	r0, #1
 800aac0:	f000 f854 	bl	800ab6c <LOG_log>

    g_LOG_isOn = false;
 800aac4:	4b06      	ldr	r3, [pc, #24]	; (800aae0 <LOG_toggleOnOff+0x30>)
 800aac6:	2200      	movs	r2, #0
 800aac8:	701a      	strb	r2, [r3, #0]
    g_LOG_isOn = true;

    LOG_info("Turning LOG ON");
  }

  return;
 800aaca:	e007      	b.n	800aadc <LOG_toggleOnOff+0x2c>
    g_LOG_isOn = true;
 800aacc:	4b04      	ldr	r3, [pc, #16]	; (800aae0 <LOG_toggleOnOff+0x30>)
 800aace:	2201      	movs	r2, #1
 800aad0:	701a      	strb	r2, [r3, #0]
    LOG_info("Turning LOG ON");
 800aad2:	4905      	ldr	r1, [pc, #20]	; (800aae8 <LOG_toggleOnOff+0x38>)
 800aad4:	2001      	movs	r0, #1
 800aad6:	f000 f849 	bl	800ab6c <LOG_log>
  return;
 800aada:	bf00      	nop
}
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	200004a4 	.word	0x200004a4
 800aae4:	0800f2bc 	.word	0x0800f2bc
 800aae8:	0800f2cc 	.word	0x0800f2cc

0800aaec <LOG_setLevel>:

void LOG_setLevel(T_LOG_LEVEL p_level)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b083      	sub	sp, #12
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	71fb      	strb	r3, [r7, #7]
  g_LOG_level = p_level;
 800aaf6:	4a04      	ldr	r2, [pc, #16]	; (800ab08 <LOG_setLevel+0x1c>)
 800aaf8:	79fb      	ldrb	r3, [r7, #7]
 800aafa:	7013      	strb	r3, [r2, #0]

  return;
 800aafc:	bf00      	nop
}
 800aafe:	370c      	adds	r7, #12
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bc80      	pop	{r7}
 800ab04:	4770      	bx	lr
 800ab06:	bf00      	nop
 800ab08:	200004a5 	.word	0x200004a5

0800ab0c <LOG_increaseLevel>:

void LOG_increaseLevel(void)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	af00      	add	r7, sp, #0
  /* Display more detailed logs */
  if (g_LOG_level > LOG_LEVEL_DEBUG)
 800ab10:	4b08      	ldr	r3, [pc, #32]	; (800ab34 <LOG_increaseLevel+0x28>)
 800ab12:	781b      	ldrb	r3, [r3, #0]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d00a      	beq.n	800ab2e <LOG_increaseLevel+0x22>
  {
    LOG_info("Increasing LOG level");
 800ab18:	4907      	ldr	r1, [pc, #28]	; (800ab38 <LOG_increaseLevel+0x2c>)
 800ab1a:	2001      	movs	r0, #1
 800ab1c:	f000 f826 	bl	800ab6c <LOG_log>

    g_LOG_level--;
 800ab20:	4b04      	ldr	r3, [pc, #16]	; (800ab34 <LOG_increaseLevel+0x28>)
 800ab22:	781b      	ldrb	r3, [r3, #0]
 800ab24:	3b01      	subs	r3, #1
 800ab26:	b2da      	uxtb	r2, r3
 800ab28:	4b02      	ldr	r3, [pc, #8]	; (800ab34 <LOG_increaseLevel+0x28>)
 800ab2a:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 800ab2c:	bf00      	nop
 800ab2e:	bf00      	nop
}
 800ab30:	bd80      	pop	{r7, pc}
 800ab32:	bf00      	nop
 800ab34:	200004a5 	.word	0x200004a5
 800ab38:	0800f2dc 	.word	0x0800f2dc

0800ab3c <LOG_decreaseLevel>:

void LOG_decreaseLevel(void)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	af00      	add	r7, sp, #0
  /* Display less detailed logs */
  if (g_LOG_level < LOG_LEVEL_ERROR)
 800ab40:	4b08      	ldr	r3, [pc, #32]	; (800ab64 <LOG_decreaseLevel+0x28>)
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	2b02      	cmp	r3, #2
 800ab46:	d80a      	bhi.n	800ab5e <LOG_decreaseLevel+0x22>
  {
    LOG_info("Decreasing LOG level");
 800ab48:	4907      	ldr	r1, [pc, #28]	; (800ab68 <LOG_decreaseLevel+0x2c>)
 800ab4a:	2001      	movs	r0, #1
 800ab4c:	f000 f80e 	bl	800ab6c <LOG_log>

    g_LOG_level++;
 800ab50:	4b04      	ldr	r3, [pc, #16]	; (800ab64 <LOG_decreaseLevel+0x28>)
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	3301      	adds	r3, #1
 800ab56:	b2da      	uxtb	r2, r3
 800ab58:	4b02      	ldr	r3, [pc, #8]	; (800ab64 <LOG_decreaseLevel+0x28>)
 800ab5a:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 800ab5c:	bf00      	nop
 800ab5e:	bf00      	nop
}
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop
 800ab64:	200004a5 	.word	0x200004a5
 800ab68:	0800f2f4 	.word	0x0800f2f4

0800ab6c <LOG_log>:

void LOG_log(T_LOG_LEVEL p_level, const char *p_format, ...)
{
 800ab6c:	b40e      	push	{r1, r2, r3}
 800ab6e:	b590      	push	{r4, r7, lr}
 800ab70:	b0a8      	sub	sp, #160	; 0xa0
 800ab72:	af02      	add	r7, sp, #8
 800ab74:	4603      	mov	r3, r0
 800ab76:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef l_halReturnCode;
  va_list           l_argumentsList;
  RTC_TimeTypeDef   l_time;
  RTC_DateTypeDef   l_date;

  if ((g_LOG_isOn == true) && (p_level >= g_LOG_level))
 800ab78:	4b3e      	ldr	r3, [pc, #248]	; (800ac74 <LOG_log+0x108>)
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d071      	beq.n	800ac64 <LOG_log+0xf8>
 800ab80:	4b3d      	ldr	r3, [pc, #244]	; (800ac78 <LOG_log+0x10c>)
 800ab82:	781b      	ldrb	r3, [r3, #0]
 800ab84:	79fa      	ldrb	r2, [r7, #7]
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d36c      	bcc.n	800ac64 <LOG_log+0xf8>
  {
    l_halReturnCode = HAL_RTC_GetTime(g_LOG_rtcHandle, &l_time, RTC_FORMAT_BCD);
 800ab8a:	4b3c      	ldr	r3, [pc, #240]	; (800ac7c <LOG_log+0x110>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f107 010c 	add.w	r1, r7, #12
 800ab92:	2201      	movs	r2, #1
 800ab94:	4618      	mov	r0, r3
 800ab96:	f7fa fc7d 	bl	8005494 <HAL_RTC_GetTime>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

    if (l_halReturnCode != HAL_OK)
 800aba0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d004      	beq.n	800abb2 <LOG_log+0x46>
    {
      /* As this method is for logging/debug, just reset time in case of failure */
      UTI_resetRtcTime(&l_time);
 800aba8:	f107 030c 	add.w	r3, r7, #12
 800abac:	4618      	mov	r0, r3
 800abae:	f000 fc32 	bl	800b416 <UTI_resetRtcTime>
    else
    {
      ; /* Nothing to do */
    }

    l_halReturnCode = HAL_RTC_GetDate(g_LOG_rtcHandle, &l_date, RTC_FORMAT_BCD);
 800abb2:	4b32      	ldr	r3, [pc, #200]	; (800ac7c <LOG_log+0x110>)
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	f107 0108 	add.w	r1, r7, #8
 800abba:	2201      	movs	r2, #1
 800abbc:	4618      	mov	r0, r3
 800abbe:	f7fa fe6d 	bl	800589c <HAL_RTC_GetDate>
 800abc2:	4603      	mov	r3, r0
 800abc4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

    if (l_halReturnCode != HAL_OK)
 800abc8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d004      	beq.n	800abda <LOG_log+0x6e>
    {
      /* As this method is for logging/debug, just reset date in case of failure */
      UTI_resetRtcDate(&l_date);
 800abd0:	f107 0308 	add.w	r3, r7, #8
 800abd4:	4618      	mov	r0, r3
 800abd6:	f000 fc09 	bl	800b3ec <UTI_resetRtcDate>
    else
    {
      ; /* Nothing to do */
    }

    va_start(l_argumentsList, p_format);
 800abda:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800abde:	613b      	str	r3, [r7, #16]

    (void)sprintf  ( l_buffer, "%-7s - %02x:%02x:%02x - ", g_LOG_levelStrings[p_level], l_time.Hours, l_time.Minutes, l_time.Seconds);
 800abe0:	79fb      	ldrb	r3, [r7, #7]
 800abe2:	4a27      	ldr	r2, [pc, #156]	; (800ac80 <LOG_log+0x114>)
 800abe4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800abe8:	7b3b      	ldrb	r3, [r7, #12]
 800abea:	461c      	mov	r4, r3
 800abec:	7b7b      	ldrb	r3, [r7, #13]
 800abee:	7bb9      	ldrb	r1, [r7, #14]
 800abf0:	f107 0014 	add.w	r0, r7, #20
 800abf4:	9101      	str	r1, [sp, #4]
 800abf6:	9300      	str	r3, [sp, #0]
 800abf8:	4623      	mov	r3, r4
 800abfa:	4922      	ldr	r1, [pc, #136]	; (800ac84 <LOG_log+0x118>)
 800abfc:	f001 fa24 	bl	800c048 <siprintf>
    /* 21 is the length of string "%-7s - %02x:%02x:%02x - ". 2 is the length of string "\r\n". */
    /* So we start and write format right after the former and we keep space for the latter.    */
    (void)vsnprintf(&l_buffer[21], CST_CONSOLE_TX_MAX_STRING_LENGTH - 21 - 2, p_format, l_argumentsList);
 800ac00:	f107 0314 	add.w	r3, r7, #20
 800ac04:	f103 0015 	add.w	r0, r3, #21
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800ac0e:	2169      	movs	r1, #105	; 0x69
 800ac10:	f001 fb16 	bl	800c240 <vsniprintf>
    (void)strcat   ( l_buffer    , "\r\n");
 800ac14:	f107 0314 	add.w	r3, r7, #20
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f7f5 fb05 	bl	8000228 <strlen>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	461a      	mov	r2, r3
 800ac22:	f107 0314 	add.w	r3, r7, #20
 800ac26:	4413      	add	r3, r2
 800ac28:	4a17      	ldr	r2, [pc, #92]	; (800ac88 <LOG_log+0x11c>)
 800ac2a:	8811      	ldrh	r1, [r2, #0]
 800ac2c:	7892      	ldrb	r2, [r2, #2]
 800ac2e:	8019      	strh	r1, [r3, #0]
 800ac30:	709a      	strb	r2, [r3, #2]

    /* -1 is there to consider the end/null character, which strnlen() does not count */
    if (strnlen(l_buffer, CST_CONSOLE_TX_MAX_STRING_LENGTH) == CST_CONSOLE_TX_MAX_STRING_LENGTH - 1)
 800ac32:	f107 0314 	add.w	r3, r7, #20
 800ac36:	2180      	movs	r1, #128	; 0x80
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f001 fa38 	bl	800c0ae <strnlen>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	2b7f      	cmp	r3, #127	; 0x7f
 800ac42:	d108      	bne.n	800ac56 <LOG_log+0xea>
    {
      /* At -1, we got the end/null character. At -2 & 3, we got "\r\n". */
      l_buffer[CST_CONSOLE_TX_MAX_STRING_LENGTH - 4] = '.';
 800ac44:	232e      	movs	r3, #46	; 0x2e
 800ac46:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
      l_buffer[CST_CONSOLE_TX_MAX_STRING_LENGTH - 5] = '.';
 800ac4a:	232e      	movs	r3, #46	; 0x2e
 800ac4c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
      l_buffer[CST_CONSOLE_TX_MAX_STRING_LENGTH - 6] = '.';
 800ac50:	232e      	movs	r3, #46	; 0x2e
 800ac52:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
    else
    {
      ; /* Nothing to do */
    }

    (void)printf("%s", l_buffer);
 800ac56:	f107 0314 	add.w	r3, r7, #20
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	480b      	ldr	r0, [pc, #44]	; (800ac8c <LOG_log+0x120>)
 800ac5e:	f001 f9cb 	bl	800bff8 <iprintf>
  else
  {
    ; /* Nothing to do */
  }

  return;
 800ac62:	bf00      	nop
 800ac64:	bf00      	nop
}
 800ac66:	3798      	adds	r7, #152	; 0x98
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800ac6e:	b003      	add	sp, #12
 800ac70:	4770      	bx	lr
 800ac72:	bf00      	nop
 800ac74:	200004a4 	.word	0x200004a4
 800ac78:	200004a5 	.word	0x200004a5
 800ac7c:	200004a8 	.word	0x200004a8
 800ac80:	2000000c 	.word	0x2000000c
 800ac84:	0800f30c 	.word	0x0800f30c
 800ac88:	0800f328 	.word	0x0800f328
 800ac8c:	0800f32c 	.word	0x0800f32c

0800ac90 <MAS_init>:
static T_SFO_data          g_MAS_data;
static uint32_t            g_MAS_dataSize;
static bool                g_MAS_isDataComplete;

void MAS_init(UART_HandleTypeDef *p_uartHandle)
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b082      	sub	sp, #8
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing master connection");
 800ac98:	490d      	ldr	r1, [pc, #52]	; (800acd0 <MAS_init+0x40>)
 800ac9a:	2001      	movs	r0, #1
 800ac9c:	f7ff ff66 	bl	800ab6c <LOG_log>

  g_MAS_uartHandle     = p_uartHandle;
 800aca0:	4a0c      	ldr	r2, [pc, #48]	; (800acd4 <MAS_init+0x44>)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6013      	str	r3, [r2, #0]
  g_MAS_dataSize       = 0;
 800aca6:	4b0c      	ldr	r3, [pc, #48]	; (800acd8 <MAS_init+0x48>)
 800aca8:	2200      	movs	r2, #0
 800acaa:	601a      	str	r2, [r3, #0]
  g_MAS_isDataComplete = false;
 800acac:	4b0b      	ldr	r3, [pc, #44]	; (800acdc <MAS_init+0x4c>)
 800acae:	2200      	movs	r2, #0
 800acb0:	701a      	strb	r2, [r3, #0]

  SFO_initData(&g_MAS_data);
 800acb2:	480b      	ldr	r0, [pc, #44]	; (800ace0 <MAS_init+0x50>)
 800acb4:	f000 fa5e 	bl	800b174 <SFO_initData>

  HAL_UART_Receive_IT(g_MAS_uartHandle, &g_MAS_datum, 1);
 800acb8:	4b06      	ldr	r3, [pc, #24]	; (800acd4 <MAS_init+0x44>)
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	2201      	movs	r2, #1
 800acbe:	4909      	ldr	r1, [pc, #36]	; (800ace4 <MAS_init+0x54>)
 800acc0:	4618      	mov	r0, r3
 800acc2:	f7fd fc91 	bl	80085e8 <HAL_UART_Receive_IT>

  return;
 800acc6:	bf00      	nop
}
 800acc8:	3708      	adds	r7, #8
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
 800acce:	bf00      	nop
 800acd0:	0800f330 	.word	0x0800f330
 800acd4:	200004ac 	.word	0x200004ac
 800acd8:	200004c4 	.word	0x200004c4
 800acdc:	200004c8 	.word	0x200004c8
 800ace0:	200004b4 	.word	0x200004b4
 800ace4:	200004b0 	.word	0x200004b0

0800ace8 <MAS_receiveData>:

void MAS_receiveData(void)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	af00      	add	r7, sp, #0
  /* If previous command was not processed yet, drop datum, */
  /* which will lead to an error, showing a design issue... */
  if (g_MAS_isDataComplete == true)
 800acec:	4b0f      	ldr	r3, [pc, #60]	; (800ad2c <MAS_receiveData+0x44>)
 800acee:	781b      	ldrb	r3, [r3, #0]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d112      	bne.n	800ad1a <MAS_receiveData+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (g_MAS_datum == '\r')
 800acf4:	4b0e      	ldr	r3, [pc, #56]	; (800ad30 <MAS_receiveData+0x48>)
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	2b0d      	cmp	r3, #13
 800acfa:	d103      	bne.n	800ad04 <MAS_receiveData+0x1c>
    {
      g_MAS_isDataComplete = true;
 800acfc:	4b0b      	ldr	r3, [pc, #44]	; (800ad2c <MAS_receiveData+0x44>)
 800acfe:	2201      	movs	r2, #1
 800ad00:	701a      	strb	r2, [r3, #0]
 800ad02:	e00a      	b.n	800ad1a <MAS_receiveData+0x32>
    }
    else
    {
      g_MAS_data[g_MAS_dataSize] = g_MAS_datum;
 800ad04:	4b0b      	ldr	r3, [pc, #44]	; (800ad34 <MAS_receiveData+0x4c>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	4a09      	ldr	r2, [pc, #36]	; (800ad30 <MAS_receiveData+0x48>)
 800ad0a:	7811      	ldrb	r1, [r2, #0]
 800ad0c:	4a0a      	ldr	r2, [pc, #40]	; (800ad38 <MAS_receiveData+0x50>)
 800ad0e:	54d1      	strb	r1, [r2, r3]
      g_MAS_dataSize++;
 800ad10:	4b08      	ldr	r3, [pc, #32]	; (800ad34 <MAS_receiveData+0x4c>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	3301      	adds	r3, #1
 800ad16:	4a07      	ldr	r2, [pc, #28]	; (800ad34 <MAS_receiveData+0x4c>)
 800ad18:	6013      	str	r3, [r2, #0]
    }
  }

  HAL_UART_Receive_IT(g_MAS_uartHandle, &g_MAS_datum, 1);
 800ad1a:	4b08      	ldr	r3, [pc, #32]	; (800ad3c <MAS_receiveData+0x54>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	2201      	movs	r2, #1
 800ad20:	4903      	ldr	r1, [pc, #12]	; (800ad30 <MAS_receiveData+0x48>)
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7fd fc60 	bl	80085e8 <HAL_UART_Receive_IT>

  return;
 800ad28:	bf00      	nop
}
 800ad2a:	bd80      	pop	{r7, pc}
 800ad2c:	200004c8 	.word	0x200004c8
 800ad30:	200004b0 	.word	0x200004b0
 800ad34:	200004c4 	.word	0x200004c4
 800ad38:	200004b4 	.word	0x200004b4
 800ad3c:	200004ac 	.word	0x200004ac

0800ad40 <MAS_updateFifo>:

void MAS_updateFifo(T_SFO_Context *p_fifo)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b082      	sub	sp, #8
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  if (g_MAS_isDataComplete == false)
 800ad48:	4b0c      	ldr	r3, [pc, #48]	; (800ad7c <MAS_updateFifo+0x3c>)
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	f083 0301 	eor.w	r3, r3, #1
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d10d      	bne.n	800ad72 <MAS_updateFifo+0x32>
  {
    ; /* Nothing to do */
  }
  else
  {
    SFO_push    (p_fifo, &g_MAS_data);
 800ad56:	490a      	ldr	r1, [pc, #40]	; (800ad80 <MAS_updateFifo+0x40>)
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f000 fa31 	bl	800b1c0 <SFO_push>
    SFO_initData(&g_MAS_data);
 800ad5e:	4808      	ldr	r0, [pc, #32]	; (800ad80 <MAS_updateFifo+0x40>)
 800ad60:	f000 fa08 	bl	800b174 <SFO_initData>

    g_MAS_dataSize       = 0;
 800ad64:	4b07      	ldr	r3, [pc, #28]	; (800ad84 <MAS_updateFifo+0x44>)
 800ad66:	2200      	movs	r2, #0
 800ad68:	601a      	str	r2, [r3, #0]
    g_MAS_isDataComplete = false;
 800ad6a:	4b04      	ldr	r3, [pc, #16]	; (800ad7c <MAS_updateFifo+0x3c>)
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	701a      	strb	r2, [r3, #0]
  }

  return;
 800ad70:	bf00      	nop
 800ad72:	bf00      	nop
}
 800ad74:	3708      	adds	r7, #8
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}
 800ad7a:	bf00      	nop
 800ad7c:	200004c8 	.word	0x200004c8
 800ad80:	200004b4 	.word	0x200004b4
 800ad84:	200004c4 	.word	0x200004c4

0800ad88 <MAS_sendString>:

void MAS_sendString(char *p_string, uint32_t p_length)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b082      	sub	sp, #8
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	6039      	str	r1, [r7, #0]
  /* As this method is using for logging/debug, we will not deal with failure cases */
 (void)HAL_UART_Transmit(g_MAS_uartHandle,
 800ad92:	4b06      	ldr	r3, [pc, #24]	; (800adac <MAS_sendString+0x24>)
 800ad94:	6818      	ldr	r0, [r3, #0]
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	b29a      	uxth	r2, r3
 800ad9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ad9e:	6879      	ldr	r1, [r7, #4]
 800ada0:	f7fd fb90 	bl	80084c4 <HAL_UART_Transmit>
              (uint8_t *)p_string,
                         p_length,
                         CST_UART_TRANSMIT_TIMEOUT_IN_MS);

  return;
 800ada4:	bf00      	nop
}
 800ada6:	3708      	adds	r7, #8
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}
 800adac:	200004ac 	.word	0x200004ac

0800adb0 <MTR_init>:
              uint32_t           p_dirPin1,
              GPIO_TypeDef      *p_dirPin2Port,
              uint32_t           p_dirPin2,
              TIM_HandleTypeDef *p_pwmTimerHandle,
              uint32_t           p_pwmChannel)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b084      	sub	sp, #16
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	60b9      	str	r1, [r7, #8]
 800adba:	607a      	str	r2, [r7, #4]
 800adbc:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing Motor module for %s", p_name);
 800adbe:	68ba      	ldr	r2, [r7, #8]
 800adc0:	4912      	ldr	r1, [pc, #72]	; (800ae0c <MTR_init+0x5c>)
 800adc2:	2001      	movs	r0, #1
 800adc4:	f7ff fed2 	bl	800ab6c <LOG_log>

  p_handle->name           = p_name;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	68ba      	ldr	r2, [r7, #8]
 800adcc:	601a      	str	r2, [r3, #0]
  p_handle->dirPin1Port    = p_dirPin1Port;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	605a      	str	r2, [r3, #4]
  p_handle->dirPin1        = p_dirPin1;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	683a      	ldr	r2, [r7, #0]
 800add8:	609a      	str	r2, [r3, #8]
  p_handle->dirPin2Port    = p_dirPin2Port;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	69ba      	ldr	r2, [r7, #24]
 800adde:	60da      	str	r2, [r3, #12]
  p_handle->dirPin2        = p_dirPin2;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	69fa      	ldr	r2, [r7, #28]
 800ade4:	611a      	str	r2, [r3, #16]
  p_handle->pwmTimerHandle = p_pwmTimerHandle;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	6a3a      	ldr	r2, [r7, #32]
 800adea:	61da      	str	r2, [r3, #28]
  p_handle->pwmChannel     = p_pwmChannel;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adf0:	621a      	str	r2, [r3, #32]

  MTR_setDirection(p_handle, MTR_DIRECTION_STOP);
 800adf2:	2100      	movs	r1, #0
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	f000 f80b 	bl	800ae10 <MTR_setDirection>
  MTR_setSpeed    (p_handle, 0                 );
 800adfa:	2100      	movs	r1, #0
 800adfc:	68f8      	ldr	r0, [r7, #12]
 800adfe:	f000 f87f 	bl	800af00 <MTR_setSpeed>

  return;
 800ae02:	bf00      	nop
}
 800ae04:	3710      	adds	r7, #16
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop
 800ae0c:	0800f350 	.word	0x0800f350

0800ae10 <MTR_setDirection>:

void MTR_setDirection(T_MTR_Handle *p_handle, T_MTR_DIRECTION p_direction)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b082      	sub	sp, #8
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	460b      	mov	r3, r1
 800ae1a:	70fb      	strb	r3, [r7, #3]
  if (p_direction == p_handle->direction)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	7d1b      	ldrb	r3, [r3, #20]
 800ae20:	78fa      	ldrb	r2, [r7, #3]
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d056      	beq.n	800aed4 <MTR_setDirection+0xc4>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (p_direction == MTR_DIRECTION_STOP)
 800ae26:	78fb      	ldrb	r3, [r7, #3]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d119      	bne.n	800ae60 <MTR_setDirection+0x50>
    {
      LOG_debug("%s motor STOP", p_handle->name);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	461a      	mov	r2, r3
 800ae32:	492a      	ldr	r1, [pc, #168]	; (800aedc <MTR_setDirection+0xcc>)
 800ae34:	2000      	movs	r0, #0
 800ae36:	f7ff fe99 	bl	800ab6c <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_RESET);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6858      	ldr	r0, [r3, #4]
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	689b      	ldr	r3, [r3, #8]
 800ae42:	b29b      	uxth	r3, r3
 800ae44:	2200      	movs	r2, #0
 800ae46:	4619      	mov	r1, r3
 800ae48:	f7f9 f942 	bl	80040d0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_RESET);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	68d8      	ldr	r0, [r3, #12]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	691b      	ldr	r3, [r3, #16]
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	2200      	movs	r2, #0
 800ae58:	4619      	mov	r1, r3
 800ae5a:	f7f9 f939 	bl	80040d0 <HAL_GPIO_WritePin>
 800ae5e:	e035      	b.n	800aecc <MTR_setDirection+0xbc>
    }
    else if (p_direction == MTR_DIRECTION_FORWARD)
 800ae60:	78fb      	ldrb	r3, [r7, #3]
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	d119      	bne.n	800ae9a <MTR_setDirection+0x8a>
    {
      LOG_debug("%s motor go FORWARD", p_handle->name);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	491c      	ldr	r1, [pc, #112]	; (800aee0 <MTR_setDirection+0xd0>)
 800ae6e:	2000      	movs	r0, #0
 800ae70:	f7ff fe7c 	bl	800ab6c <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_RESET);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6858      	ldr	r0, [r3, #4]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	689b      	ldr	r3, [r3, #8]
 800ae7c:	b29b      	uxth	r3, r3
 800ae7e:	2200      	movs	r2, #0
 800ae80:	4619      	mov	r1, r3
 800ae82:	f7f9 f925 	bl	80040d0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_SET  );
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	68d8      	ldr	r0, [r3, #12]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	691b      	ldr	r3, [r3, #16]
 800ae8e:	b29b      	uxth	r3, r3
 800ae90:	2201      	movs	r2, #1
 800ae92:	4619      	mov	r1, r3
 800ae94:	f7f9 f91c 	bl	80040d0 <HAL_GPIO_WritePin>
 800ae98:	e018      	b.n	800aecc <MTR_setDirection+0xbc>
    }
    else
    {
      LOG_debug("%s motor go BACKWARD", p_handle->name);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	461a      	mov	r2, r3
 800aea0:	4910      	ldr	r1, [pc, #64]	; (800aee4 <MTR_setDirection+0xd4>)
 800aea2:	2000      	movs	r0, #0
 800aea4:	f7ff fe62 	bl	800ab6c <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_SET  );
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6858      	ldr	r0, [r3, #4]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	689b      	ldr	r3, [r3, #8]
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	4619      	mov	r1, r3
 800aeb6:	f7f9 f90b 	bl	80040d0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_RESET);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	68d8      	ldr	r0, [r3, #12]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	691b      	ldr	r3, [r3, #16]
 800aec2:	b29b      	uxth	r3, r3
 800aec4:	2200      	movs	r2, #0
 800aec6:	4619      	mov	r1, r3
 800aec8:	f7f9 f902 	bl	80040d0 <HAL_GPIO_WritePin>
    }

    p_handle->direction = p_direction;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	78fa      	ldrb	r2, [r7, #3]
 800aed0:	751a      	strb	r2, [r3, #20]
  }

  return;
 800aed2:	bf00      	nop
 800aed4:	bf00      	nop
}
 800aed6:	3708      	adds	r7, #8
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}
 800aedc:	0800f374 	.word	0x0800f374
 800aee0:	0800f384 	.word	0x0800f384
 800aee4:	0800f398 	.word	0x0800f398

0800aee8 <MTR_getDirection>:

T_MTR_DIRECTION MTR_getDirection(T_MTR_Handle *p_handle)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b083      	sub	sp, #12
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
  return p_handle->direction;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	7d1b      	ldrb	r3, [r3, #20]
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	370c      	adds	r7, #12
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bc80      	pop	{r7}
 800aefc:	4770      	bx	lr
	...

0800af00 <MTR_setSpeed>:

void MTR_setSpeed(T_MTR_Handle *p_handle, uint32_t p_speed)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b082      	sub	sp, #8
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	6039      	str	r1, [r7, #0]
  if (p_speed == p_handle->speed)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	699b      	ldr	r3, [r3, #24]
 800af0e:	683a      	ldr	r2, [r7, #0]
 800af10:	429a      	cmp	r2, r3
 800af12:	d02d      	beq.n	800af70 <MTR_setSpeed+0x70>
  {
    ; /* Nothing to do */
  }
  else
  {
    LOG_debug("Setting  %s motor p_speed to %u", p_handle->name, p_speed);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681a      	ldr	r2, [r3, #0]
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	4917      	ldr	r1, [pc, #92]	; (800af78 <MTR_setSpeed+0x78>)
 800af1c:	2000      	movs	r0, #0
 800af1e:	f7ff fe25 	bl	800ab6c <LOG_log>

    __HAL_TIM_SET_COMPARE(p_handle->pwmTimerHandle, p_handle->pwmChannel, p_speed);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6a1b      	ldr	r3, [r3, #32]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d105      	bne.n	800af36 <MTR_setSpeed+0x36>
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	69db      	ldr	r3, [r3, #28]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	683a      	ldr	r2, [r7, #0]
 800af32:	635a      	str	r2, [r3, #52]	; 0x34
 800af34:	e018      	b.n	800af68 <MTR_setSpeed+0x68>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6a1b      	ldr	r3, [r3, #32]
 800af3a:	2b04      	cmp	r3, #4
 800af3c:	d105      	bne.n	800af4a <MTR_setSpeed+0x4a>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	69db      	ldr	r3, [r3, #28]
 800af42:	681a      	ldr	r2, [r3, #0]
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	6393      	str	r3, [r2, #56]	; 0x38
 800af48:	e00e      	b.n	800af68 <MTR_setSpeed+0x68>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6a1b      	ldr	r3, [r3, #32]
 800af4e:	2b08      	cmp	r3, #8
 800af50:	d105      	bne.n	800af5e <MTR_setSpeed+0x5e>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	69db      	ldr	r3, [r3, #28]
 800af56:	681a      	ldr	r2, [r3, #0]
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800af5c:	e004      	b.n	800af68 <MTR_setSpeed+0x68>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	69db      	ldr	r3, [r3, #28]
 800af62:	681a      	ldr	r2, [r3, #0]
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	6413      	str	r3, [r2, #64]	; 0x40

    p_handle->speed = p_speed;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	683a      	ldr	r2, [r7, #0]
 800af6c:	619a      	str	r2, [r3, #24]
  }

  return;
 800af6e:	bf00      	nop
 800af70:	bf00      	nop
}
 800af72:	3708      	adds	r7, #8
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}
 800af78:	0800f3b0 	.word	0x0800f3b0

0800af7c <MTR_getSpeed>:

uint32_t MTR_getSpeed(T_MTR_Handle *p_handle)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b083      	sub	sp, #12
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  return p_handle->speed;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	699b      	ldr	r3, [r3, #24]
}
 800af88:	4618      	mov	r0, r3
 800af8a:	370c      	adds	r7, #12
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bc80      	pop	{r7}
 800af90:	4770      	bx	lr
	...

0800af94 <PID_init>:

#include "utils.h"
#include "log.h"

void PID_init(T_PID_Handle *p_handle, int32_t p_kp, int32_t p_ki, int32_t p_kd, int32_t p_targetValue, int32_t p_minValue, int32_t p_maxValue, int32_t p_antiWindUpFactor)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	60f8      	str	r0, [r7, #12]
 800af9c:	60b9      	str	r1, [r7, #8]
 800af9e:	607a      	str	r2, [r7, #4]
 800afa0:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing PID");
 800afa2:	4919      	ldr	r1, [pc, #100]	; (800b008 <PID_init+0x74>)
 800afa4:	2001      	movs	r0, #1
 800afa6:	f7ff fde1 	bl	800ab6c <LOG_log>

  p_handle->kp              = p_kp;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	68ba      	ldr	r2, [r7, #8]
 800afae:	601a      	str	r2, [r3, #0]
  p_handle->ki              = p_ki;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	687a      	ldr	r2, [r7, #4]
 800afb4:	605a      	str	r2, [r3, #4]
  p_handle->kd              = p_kd;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	683a      	ldr	r2, [r7, #0]
 800afba:	609a      	str	r2, [r3, #8]
  p_handle->targetValue     = p_targetValue;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	69ba      	ldr	r2, [r7, #24]
 800afc0:	60da      	str	r2, [r3, #12]
  p_handle->minValue        = p_minValue;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	69fa      	ldr	r2, [r7, #28]
 800afc6:	611a      	str	r2, [r3, #16]
  p_handle->maxValue        = p_maxValue;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	6a3a      	ldr	r2, [r7, #32]
 800afcc:	615a      	str	r2, [r3, #20]
  p_handle->antiWindUpValue = p_antiWindUpFactor * UTI_MAX(abs(p_handle->minValue), abs(p_handle->maxValue));
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	695b      	ldr	r3, [r3, #20]
 800afd2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800afd6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	691b      	ldr	r3, [r3, #16]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	bfb8      	it	lt
 800afe2:	425b      	neglt	r3, r3
 800afe4:	4293      	cmp	r3, r2
 800afe6:	bfb8      	it	lt
 800afe8:	4613      	movlt	r3, r2
 800afea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afec:	fb02 f203 	mul.w	r2, r2, r3
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	619a      	str	r2, [r3, #24]

  PID_reset  (p_handle);
 800aff4:	68f8      	ldr	r0, [r7, #12]
 800aff6:	f000 f809 	bl	800b00c <PID_reset>
  PID_logInfo(p_handle);
 800affa:	68f8      	ldr	r0, [r7, #12]
 800affc:	f000 f87e 	bl	800b0fc <PID_logInfo>

  return;
 800b000:	bf00      	nop
}
 800b002:	3710      	adds	r7, #16
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}
 800b008:	0800f3d0 	.word	0x0800f3d0

0800b00c <PID_reset>:

void PID_reset(T_PID_Handle *p_handle)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b083      	sub	sp, #12
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  p_handle->pValue        = 0;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2200      	movs	r2, #0
 800b018:	61da      	str	r2, [r3, #28]
  p_handle->iValue        = 0;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2200      	movs	r2, #0
 800b01e:	621a      	str	r2, [r3, #32]
  p_handle->dValue        = 0;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	625a      	str	r2, [r3, #36]	; 0x24
  p_handle->computedValue = 0;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2200      	movs	r2, #0
 800b02a:	629a      	str	r2, [r3, #40]	; 0x28
  p_handle->lastError     = 0;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2200      	movs	r2, #0
 800b030:	62da      	str	r2, [r3, #44]	; 0x2c

  return;
 800b032:	bf00      	nop
}
 800b034:	370c      	adds	r7, #12
 800b036:	46bd      	mov	sp, r7
 800b038:	bc80      	pop	{r7}
 800b03a:	4770      	bx	lr

0800b03c <PID_update>:
{
  return p_handle->antiWindUpValue;
}

int32_t PID_update(T_PID_Handle *p_handle, int32_t p_currentValue, uint32_t p_timeDelta)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b088      	sub	sp, #32
 800b040:	af02      	add	r7, sp, #8
 800b042:	60f8      	str	r0, [r7, #12]
 800b044:	60b9      	str	r1, [r7, #8]
 800b046:	607a      	str	r2, [r7, #4]
  int32_t l_currentError;

  l_currentError = p_handle->targetValue - p_currentValue;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	68da      	ldr	r2, [r3, #12]
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	1ad3      	subs	r3, r2, r3
 800b050:	617b      	str	r3, [r7, #20]

  p_handle->pValue    =  l_currentError;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	697a      	ldr	r2, [r7, #20]
 800b056:	61da      	str	r2, [r3, #28]
  p_handle->iValue   +=  l_currentError * p_timeDelta;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	6a1b      	ldr	r3, [r3, #32]
 800b05c:	4619      	mov	r1, r3
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	687a      	ldr	r2, [r7, #4]
 800b062:	fb02 f303 	mul.w	r3, r2, r3
 800b066:	440b      	add	r3, r1
 800b068:	461a      	mov	r2, r3
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	621a      	str	r2, [r3, #32]
  p_handle->iValue    =  UTI_clampIntValue(p_handle->iValue, -p_handle->antiWindUpValue, p_handle->antiWindUpValue, false, 0);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	6a18      	ldr	r0, [r3, #32]
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	699b      	ldr	r3, [r3, #24]
 800b076:	4259      	negs	r1, r3
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	699a      	ldr	r2, [r3, #24]
 800b07c:	2300      	movs	r3, #0
 800b07e:	9300      	str	r3, [sp, #0]
 800b080:	2300      	movs	r3, #0
 800b082:	f000 f9f5 	bl	800b470 <UTI_clampIntValue>
 800b086:	4602      	mov	r2, r0
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	621a      	str	r2, [r3, #32]
  p_handle->dValue    = (l_currentError - p_handle->lastError) / p_timeDelta;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b090:	697a      	ldr	r2, [r7, #20]
 800b092:	1ad3      	subs	r3, r2, r3
 800b094:	461a      	mov	r2, r3
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	fbb2 f3f3 	udiv	r3, r2, r3
 800b09c:	461a      	mov	r2, r3
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	625a      	str	r2, [r3, #36]	; 0x24
  p_handle->lastError =  l_currentError;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	697a      	ldr	r2, [r7, #20]
 800b0a6:	62da      	str	r2, [r3, #44]	; 0x2c

  p_handle->computedValue = p_handle->kp * p_handle->pValue + p_handle->ki * p_handle->iValue + p_handle->kd * p_handle->dValue;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	68fa      	ldr	r2, [r7, #12]
 800b0ae:	69d2      	ldr	r2, [r2, #28]
 800b0b0:	fb02 f203 	mul.w	r2, r2, r3
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	685b      	ldr	r3, [r3, #4]
 800b0b8:	68f9      	ldr	r1, [r7, #12]
 800b0ba:	6a09      	ldr	r1, [r1, #32]
 800b0bc:	fb01 f303 	mul.w	r3, r1, r3
 800b0c0:	441a      	add	r2, r3
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	689b      	ldr	r3, [r3, #8]
 800b0c6:	68f9      	ldr	r1, [r7, #12]
 800b0c8:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800b0ca:	fb01 f303 	mul.w	r3, r1, r3
 800b0ce:	441a      	add	r2, r3
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	629a      	str	r2, [r3, #40]	; 0x28
  p_handle->computedValue = UTI_clampIntValue(p_handle->computedValue, p_handle->minValue, p_handle->maxValue, false, 0);
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	6919      	ldr	r1, [r3, #16]
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	695a      	ldr	r2, [r3, #20]
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	9300      	str	r3, [sp, #0]
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	f000 f9c3 	bl	800b470 <UTI_clampIntValue>
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	629a      	str	r2, [r3, #40]	; 0x28

  return p_currentValue;
 800b0f0:	68bb      	ldr	r3, [r7, #8]
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3718      	adds	r7, #24
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}
	...

0800b0fc <PID_logInfo>:

void PID_logInfo(T_PID_Handle *p_handle)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b084      	sub	sp, #16
 800b100:	af02      	add	r7, sp, #8
 800b102:	6078      	str	r0, [r7, #4]
  LOG_info(" kp = %4d -  ki = %4d -     kd = %4d", p_handle->kp         , p_handle->ki      , p_handle->kd             );
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681a      	ldr	r2, [r3, #0]
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6859      	ldr	r1, [r3, #4]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	689b      	ldr	r3, [r3, #8]
 800b110:	9300      	str	r3, [sp, #0]
 800b112:	460b      	mov	r3, r1
 800b114:	4913      	ldr	r1, [pc, #76]	; (800b164 <PID_logInfo+0x68>)
 800b116:	2001      	movs	r0, #1
 800b118:	f7ff fd28 	bl	800ab6c <LOG_log>
  LOG_info("  p = %4d -   i = %4d -      d = %4d", p_handle->pValue     , p_handle->iValue  , p_handle->dValue         );
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	69da      	ldr	r2, [r3, #28]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6a19      	ldr	r1, [r3, #32]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b128:	9300      	str	r3, [sp, #0]
 800b12a:	460b      	mov	r3, r1
 800b12c:	490e      	ldr	r1, [pc, #56]	; (800b168 <PID_logInfo+0x6c>)
 800b12e:	2001      	movs	r0, #1
 800b130:	f7ff fd1c 	bl	800ab6c <LOG_log>
  LOG_info("min = %4d - max = %4d - a.w.up = %4d", p_handle->minValue   , p_handle->maxValue, p_handle->antiWindUpValue);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	691a      	ldr	r2, [r3, #16]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6959      	ldr	r1, [r3, #20]
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	699b      	ldr	r3, [r3, #24]
 800b140:	9300      	str	r3, [sp, #0]
 800b142:	460b      	mov	r3, r1
 800b144:	4909      	ldr	r1, [pc, #36]	; (800b16c <PID_logInfo+0x70>)
 800b146:	2001      	movs	r0, #1
 800b148:	f7ff fd10 	bl	800ab6c <LOG_log>
  LOG_info("  t = %4d - val = %4d               ", p_handle->targetValue, p_handle->computedValue                      );
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	68da      	ldr	r2, [r3, #12]
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b154:	4906      	ldr	r1, [pc, #24]	; (800b170 <PID_logInfo+0x74>)
 800b156:	2001      	movs	r0, #1
 800b158:	f7ff fd08 	bl	800ab6c <LOG_log>

  return;
 800b15c:	bf00      	nop
}
 800b15e:	3708      	adds	r7, #8
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}
 800b164:	0800f3e4 	.word	0x0800f3e4
 800b168:	0800f40c 	.word	0x0800f40c
 800b16c:	0800f434 	.word	0x0800f434
 800b170:	0800f45c 	.word	0x0800f45c

0800b174 <SFO_initData>:

#include "log.h"


void SFO_initData(T_SFO_data *p_data)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b082      	sub	sp, #8
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
  (void)memset(p_data, 0, CST_STRING_FIFO_MAX_STRING_LENGTH);
 800b17c:	2210      	movs	r2, #16
 800b17e:	2100      	movs	r1, #0
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f000 fa2b 	bl	800b5dc <memset>

  return;
 800b186:	bf00      	nop
}
 800b188:	3708      	adds	r7, #8
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
	...

0800b190 <SFO_init>:

void SFO_init(T_SFO_Context *p_fifo)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b082      	sub	sp, #8
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  LOG_debug("String FIFO now empty");
 800b198:	4908      	ldr	r1, [pc, #32]	; (800b1bc <SFO_init+0x2c>)
 800b19a:	2000      	movs	r0, #0
 800b19c:	f7ff fce6 	bl	800ab6c <LOG_log>

  p_fifo->head  = NULL;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	601a      	str	r2, [r3, #0]
  p_fifo->tail  = NULL;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	605a      	str	r2, [r3, #4]
  p_fifo->count = 0;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	609a      	str	r2, [r3, #8]

  return;
 800b1b2:	bf00      	nop
}
 800b1b4:	3708      	adds	r7, #8
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	0800f484 	.word	0x0800f484

0800b1c0 <SFO_push>:

void SFO_push(T_SFO_Context *p_fifo, T_SFO_data *p_dataIn)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b084      	sub	sp, #16
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	6039      	str	r1, [r7, #0]
  T_SFO_Element *l_element;

  if (p_fifo->count == CST_STRING_FIFO_MAX_ELEMENTS)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	689b      	ldr	r3, [r3, #8]
 800b1ce:	2b0a      	cmp	r3, #10
 800b1d0:	d105      	bne.n	800b1de <SFO_push+0x1e>
  {
    LOG_error("SFO_push() failure - String FIFO is full (%u elements)", CST_STRING_FIFO_MAX_ELEMENTS);
 800b1d2:	220a      	movs	r2, #10
 800b1d4:	4917      	ldr	r1, [pc, #92]	; (800b234 <SFO_push+0x74>)
 800b1d6:	2003      	movs	r0, #3
 800b1d8:	f7ff fcc8 	bl	800ab6c <LOG_log>

      p_fifo->count++;
    }
  }

  return;
 800b1dc:	e027      	b.n	800b22e <SFO_push+0x6e>
    l_element = (T_SFO_Element *)malloc(sizeof(T_SFO_Element));
 800b1de:	2014      	movs	r0, #20
 800b1e0:	f000 f9ec 	bl	800b5bc <malloc>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	60fb      	str	r3, [r7, #12]
    if (l_element == NULL)
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d104      	bne.n	800b1f8 <SFO_push+0x38>
      LOG_error("SFO_push() failure - Could not allocate new memory");
 800b1ee:	4912      	ldr	r1, [pc, #72]	; (800b238 <SFO_push+0x78>)
 800b1f0:	2003      	movs	r0, #3
 800b1f2:	f7ff fcbb 	bl	800ab6c <LOG_log>
  return;
 800b1f6:	e01a      	b.n	800b22e <SFO_push+0x6e>
      (void)strncpy(l_element->data, *p_dataIn, CST_STRING_FIFO_MAX_STRING_LENGTH);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	2210      	movs	r2, #16
 800b1fc:	6839      	ldr	r1, [r7, #0]
 800b1fe:	4618      	mov	r0, r3
 800b200:	f000 ff42 	bl	800c088 <strncpy>
      l_element->nextElement = p_fifo->head;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681a      	ldr	r2, [r3, #0]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	611a      	str	r2, [r3, #16]
      p_fifo->head           = l_element;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	68fa      	ldr	r2, [r7, #12]
 800b210:	601a      	str	r2, [r3, #0]
      if (p_fifo->tail == NULL)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d103      	bne.n	800b222 <SFO_push+0x62>
        p_fifo->tail = p_fifo->head;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	605a      	str	r2, [r3, #4]
      p_fifo->count++;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	689b      	ldr	r3, [r3, #8]
 800b226:	1c5a      	adds	r2, r3, #1
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	609a      	str	r2, [r3, #8]
  return;
 800b22c:	bf00      	nop
}
 800b22e:	3710      	adds	r7, #16
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}
 800b234:	0800f49c 	.word	0x0800f49c
 800b238:	0800f4d4 	.word	0x0800f4d4

0800b23c <SFO_pop>:

void SFO_pop(T_SFO_Context *p_fifo, T_SFO_data *p_dataOut)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b084      	sub	sp, #16
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
  T_SFO_Element *l_element;

  if (p_fifo->count == 0)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	689b      	ldr	r3, [r3, #8]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d104      	bne.n	800b258 <SFO_pop+0x1c>
  {
    LOG_error("SFO_pop() failure - String FIFO is empty");
 800b24e:	491a      	ldr	r1, [pc, #104]	; (800b2b8 <SFO_pop+0x7c>)
 800b250:	2003      	movs	r0, #3
 800b252:	f7ff fc8b 	bl	800ab6c <LOG_log>
    {
      SFO_init(p_fifo);
    }
  }

  return;
 800b256:	e02c      	b.n	800b2b2 <SFO_pop+0x76>
    (void)strncpy(*p_dataOut, p_fifo->tail->data, CST_STRING_FIFO_MAX_STRING_LENGTH);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	2210      	movs	r2, #16
 800b25e:	4619      	mov	r1, r3
 800b260:	6838      	ldr	r0, [r7, #0]
 800b262:	f000 ff11 	bl	800c088 <strncpy>
    free(p_fifo->tail);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	685b      	ldr	r3, [r3, #4]
 800b26a:	4618      	mov	r0, r3
 800b26c:	f000 f9ae 	bl	800b5cc <free>
    if (p_fifo->count > 1)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	689b      	ldr	r3, [r3, #8]
 800b274:	2b01      	cmp	r3, #1
 800b276:	d918      	bls.n	800b2aa <SFO_pop+0x6e>
      l_element = p_fifo->head;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	60fb      	str	r3, [r7, #12]
      while (l_element->nextElement != p_fifo->tail)
 800b27e:	e002      	b.n	800b286 <SFO_pop+0x4a>
        l_element = l_element->nextElement;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	691b      	ldr	r3, [r3, #16]
 800b284:	60fb      	str	r3, [r7, #12]
      while (l_element->nextElement != p_fifo->tail)
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	691a      	ldr	r2, [r3, #16]
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	685b      	ldr	r3, [r3, #4]
 800b28e:	429a      	cmp	r2, r3
 800b290:	d1f6      	bne.n	800b280 <SFO_pop+0x44>
      l_element->nextElement = NULL;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	2200      	movs	r2, #0
 800b296:	611a      	str	r2, [r3, #16]
      p_fifo->tail           = l_element;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	68fa      	ldr	r2, [r7, #12]
 800b29c:	605a      	str	r2, [r3, #4]
      p_fifo->count--;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	689b      	ldr	r3, [r3, #8]
 800b2a2:	1e5a      	subs	r2, r3, #1
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	609a      	str	r2, [r3, #8]
  return;
 800b2a8:	e003      	b.n	800b2b2 <SFO_pop+0x76>
      SFO_init(p_fifo);
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f7ff ff70 	bl	800b190 <SFO_init>
  return;
 800b2b0:	bf00      	nop
}
 800b2b2:	3710      	adds	r7, #16
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	0800f508 	.word	0x0800f508

0800b2bc <SFO_getCount>:

uint32_t SFO_getCount(T_SFO_Context *p_fifo)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b083      	sub	sp, #12
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  return p_fifo->count;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	689b      	ldr	r3, [r3, #8]
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	370c      	adds	r7, #12
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bc80      	pop	{r7}
 800b2d0:	4770      	bx	lr
	...

0800b2d4 <SFO_logInfo>:

void SFO_logInfo(T_SFO_Context *p_fifo)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b084      	sub	sp, #16
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
  T_SFO_Element *l_element;

  if (p_fifo->count == 0)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	689b      	ldr	r3, [r3, #8]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d104      	bne.n	800b2ee <SFO_logInfo+0x1a>
  {
    LOG_info("String FIFO is empty");
 800b2e4:	4924      	ldr	r1, [pc, #144]	; (800b378 <SFO_logInfo+0xa4>)
 800b2e6:	2001      	movs	r0, #1
 800b2e8:	f7ff fc40 	bl	800ab6c <LOG_log>

      l_element = l_element->nextElement;
    }
  }

  return;
 800b2ec:	e040      	b.n	800b370 <SFO_logInfo+0x9c>
    LOG_info("String FIFO: %u element(s)", p_fifo->count);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	689b      	ldr	r3, [r3, #8]
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	4921      	ldr	r1, [pc, #132]	; (800b37c <SFO_logInfo+0xa8>)
 800b2f6:	2001      	movs	r0, #1
 800b2f8:	f7ff fc38 	bl	800ab6c <LOG_log>
    l_element = p_fifo->head;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	60fb      	str	r3, [r7, #12]
    while (l_element != NULL)
 800b302:	e031      	b.n	800b368 <SFO_logInfo+0x94>
      if ((l_element == p_fifo->head) && (l_element == p_fifo->tail))
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	68fa      	ldr	r2, [r7, #12]
 800b30a:	429a      	cmp	r2, r3
 800b30c:	d10b      	bne.n	800b326 <SFO_logInfo+0x52>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	68fa      	ldr	r2, [r7, #12]
 800b314:	429a      	cmp	r2, r3
 800b316:	d106      	bne.n	800b326 <SFO_logInfo+0x52>
        LOG_info("HEAD -> '%s' <- TAIL", l_element->data);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	461a      	mov	r2, r3
 800b31c:	4918      	ldr	r1, [pc, #96]	; (800b380 <SFO_logInfo+0xac>)
 800b31e:	2001      	movs	r0, #1
 800b320:	f7ff fc24 	bl	800ab6c <LOG_log>
 800b324:	e01d      	b.n	800b362 <SFO_logInfo+0x8e>
      else if (l_element == p_fifo->head)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	68fa      	ldr	r2, [r7, #12]
 800b32c:	429a      	cmp	r2, r3
 800b32e:	d106      	bne.n	800b33e <SFO_logInfo+0x6a>
        LOG_info("HEAD -> '%s'", l_element->data);
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	461a      	mov	r2, r3
 800b334:	4913      	ldr	r1, [pc, #76]	; (800b384 <SFO_logInfo+0xb0>)
 800b336:	2001      	movs	r0, #1
 800b338:	f7ff fc18 	bl	800ab6c <LOG_log>
 800b33c:	e011      	b.n	800b362 <SFO_logInfo+0x8e>
      else if (l_element == p_fifo->tail)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	68fa      	ldr	r2, [r7, #12]
 800b344:	429a      	cmp	r2, r3
 800b346:	d106      	bne.n	800b356 <SFO_logInfo+0x82>
        LOG_info("TAIL -> '%s'", l_element->data);
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	461a      	mov	r2, r3
 800b34c:	490e      	ldr	r1, [pc, #56]	; (800b388 <SFO_logInfo+0xb4>)
 800b34e:	2001      	movs	r0, #1
 800b350:	f7ff fc0c 	bl	800ab6c <LOG_log>
 800b354:	e005      	b.n	800b362 <SFO_logInfo+0x8e>
        LOG_info("        '%s'", l_element->data);
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	461a      	mov	r2, r3
 800b35a:	490c      	ldr	r1, [pc, #48]	; (800b38c <SFO_logInfo+0xb8>)
 800b35c:	2001      	movs	r0, #1
 800b35e:	f7ff fc05 	bl	800ab6c <LOG_log>
      l_element = l_element->nextElement;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	691b      	ldr	r3, [r3, #16]
 800b366:	60fb      	str	r3, [r7, #12]
    while (l_element != NULL)
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d1ca      	bne.n	800b304 <SFO_logInfo+0x30>
  return;
 800b36e:	bf00      	nop
}
 800b370:	3710      	adds	r7, #16
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop
 800b378:	0800f534 	.word	0x0800f534
 800b37c:	0800f54c 	.word	0x0800f54c
 800b380:	0800f568 	.word	0x0800f568
 800b384:	0800f580 	.word	0x0800f580
 800b388:	0800f590 	.word	0x0800f590
 800b38c:	0800f5a0 	.word	0x0800f5a0

0800b390 <UTI_init>:
#include "log.h"

static TIM_HandleTypeDef *g_UTI_delayTimerHandle;

void UTI_init(TIM_HandleTypeDef *p_delayTimerHandle)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing utilities");
 800b398:	4905      	ldr	r1, [pc, #20]	; (800b3b0 <UTI_init+0x20>)
 800b39a:	2001      	movs	r0, #1
 800b39c:	f7ff fbe6 	bl	800ab6c <LOG_log>

  g_UTI_delayTimerHandle = p_delayTimerHandle;
 800b3a0:	4a04      	ldr	r2, [pc, #16]	; (800b3b4 <UTI_init+0x24>)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6013      	str	r3, [r2, #0]

  return;
 800b3a6:	bf00      	nop
}
 800b3a8:	3708      	adds	r7, #8
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bd80      	pop	{r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	0800f5b0 	.word	0x0800f5b0
 800b3b4:	200004cc 	.word	0x200004cc

0800b3b8 <UTI_delayUs>:

void UTI_delayUs(uint16_t p_delay)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b083      	sub	sp, #12
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	4603      	mov	r3, r0
 800b3c0:	80fb      	strh	r3, [r7, #6]
  /* Reset the micro-seconds counter */
  __HAL_TIM_SET_COUNTER(g_UTI_delayTimerHandle, 0);
 800b3c2:	4b09      	ldr	r3, [pc, #36]	; (800b3e8 <UTI_delayUs+0x30>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Wait for the counter to reach the input micro-seconds number */
  while (__HAL_TIM_GET_COUNTER(g_UTI_delayTimerHandle) < p_delay)
 800b3cc:	bf00      	nop
 800b3ce:	4b06      	ldr	r3, [pc, #24]	; (800b3e8 <UTI_delayUs+0x30>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b3d6:	88fb      	ldrh	r3, [r7, #6]
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d3f8      	bcc.n	800b3ce <UTI_delayUs+0x16>
  {
    ; /* Nothing to do */
  }

  return;
 800b3dc:	bf00      	nop
}
 800b3de:	370c      	adds	r7, #12
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	bc80      	pop	{r7}
 800b3e4:	4770      	bx	lr
 800b3e6:	bf00      	nop
 800b3e8:	200004cc 	.word	0x200004cc

0800b3ec <UTI_resetRtcDate>:

void UTI_resetRtcDate(RTC_DateTypeDef *p_date)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b083      	sub	sp, #12
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  p_date->Date    = 0;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	709a      	strb	r2, [r3, #2]
  p_date->Month   = 0;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	705a      	strb	r2, [r3, #1]
  p_date->WeekDay = 0;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2200      	movs	r2, #0
 800b404:	701a      	strb	r2, [r3, #0]
  p_date->Year    = 0;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2200      	movs	r2, #0
 800b40a:	70da      	strb	r2, [r3, #3]

  return;
 800b40c:	bf00      	nop
}
 800b40e:	370c      	adds	r7, #12
 800b410:	46bd      	mov	sp, r7
 800b412:	bc80      	pop	{r7}
 800b414:	4770      	bx	lr

0800b416 <UTI_resetRtcTime>:


void UTI_resetRtcTime(RTC_TimeTypeDef *p_time)
{
 800b416:	b480      	push	{r7}
 800b418:	b083      	sub	sp, #12
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
  p_time->Hours   = 0;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2200      	movs	r2, #0
 800b422:	701a      	strb	r2, [r3, #0]
  p_time->Minutes = 0;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2200      	movs	r2, #0
 800b428:	705a      	strb	r2, [r3, #1]
  p_time->Seconds = 0;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2200      	movs	r2, #0
 800b42e:	709a      	strb	r2, [r3, #2]

  return;
 800b430:	bf00      	nop
}
 800b432:	370c      	adds	r7, #12
 800b434:	46bd      	mov	sp, r7
 800b436:	bc80      	pop	{r7}
 800b438:	4770      	bx	lr

0800b43a <UTI_turnRtcTimeToSeconds>:

uint32_t UTI_turnRtcTimeToSeconds(RTC_TimeTypeDef *p_time)
{
 800b43a:	b480      	push	{r7}
 800b43c:	b083      	sub	sp, #12
 800b43e:	af00      	add	r7, sp, #0
 800b440:	6078      	str	r0, [r7, #4]
  return p_time->Hours * 3600 + p_time->Minutes * 60 + p_time->Seconds;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	781b      	ldrb	r3, [r3, #0]
 800b446:	461a      	mov	r2, r3
 800b448:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800b44c:	fb03 f202 	mul.w	r2, r3, r2
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	785b      	ldrb	r3, [r3, #1]
 800b454:	4619      	mov	r1, r3
 800b456:	460b      	mov	r3, r1
 800b458:	011b      	lsls	r3, r3, #4
 800b45a:	1a5b      	subs	r3, r3, r1
 800b45c:	009b      	lsls	r3, r3, #2
 800b45e:	4413      	add	r3, r2
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	7892      	ldrb	r2, [r2, #2]
 800b464:	4413      	add	r3, r2
}
 800b466:	4618      	mov	r0, r3
 800b468:	370c      	adds	r7, #12
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bc80      	pop	{r7}
 800b46e:	4770      	bx	lr

0800b470 <UTI_clampIntValue>:

int32_t UTI_clampIntValue(int32_t p_value, int32_t p_minValue, int32_t p_maxValue, bool p_clampToNearest, int32_t p_clampValue)
{
 800b470:	b480      	push	{r7}
 800b472:	b087      	sub	sp, #28
 800b474:	af00      	add	r7, sp, #0
 800b476:	60f8      	str	r0, [r7, #12]
 800b478:	60b9      	str	r1, [r7, #8]
 800b47a:	607a      	str	r2, [r7, #4]
 800b47c:	70fb      	strb	r3, [r7, #3]
  int32_t l_returnValue;

  if (p_value < p_minValue)
 800b47e:	68fa      	ldr	r2, [r7, #12]
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	429a      	cmp	r2, r3
 800b484:	da08      	bge.n	800b498 <UTI_clampIntValue+0x28>
  {
    if (p_clampToNearest == true)
 800b486:	78fb      	ldrb	r3, [r7, #3]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d002      	beq.n	800b492 <UTI_clampIntValue+0x22>
    {
      l_returnValue = p_minValue;
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	617b      	str	r3, [r7, #20]
 800b490:	e011      	b.n	800b4b6 <UTI_clampIntValue+0x46>
    }
    else
    {
      l_returnValue = p_clampValue;
 800b492:	6a3b      	ldr	r3, [r7, #32]
 800b494:	617b      	str	r3, [r7, #20]
 800b496:	e00e      	b.n	800b4b6 <UTI_clampIntValue+0x46>
    }
  }
  else if (p_value > p_maxValue)
 800b498:	68fa      	ldr	r2, [r7, #12]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	429a      	cmp	r2, r3
 800b49e:	dd08      	ble.n	800b4b2 <UTI_clampIntValue+0x42>
  {
    if (p_clampToNearest == true)
 800b4a0:	78fb      	ldrb	r3, [r7, #3]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d002      	beq.n	800b4ac <UTI_clampIntValue+0x3c>
    {
      l_returnValue = p_maxValue;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	617b      	str	r3, [r7, #20]
 800b4aa:	e004      	b.n	800b4b6 <UTI_clampIntValue+0x46>
    }
    else
    {
      l_returnValue = p_clampValue;
 800b4ac:	6a3b      	ldr	r3, [r7, #32]
 800b4ae:	617b      	str	r3, [r7, #20]
 800b4b0:	e001      	b.n	800b4b6 <UTI_clampIntValue+0x46>
    }
  }
  else
  {
    l_returnValue = p_value;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	617b      	str	r3, [r7, #20]
  }

  return l_returnValue;
 800b4b6:	697b      	ldr	r3, [r7, #20]
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	371c      	adds	r7, #28
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bc80      	pop	{r7}
 800b4c0:	4770      	bx	lr

0800b4c2 <UTI_normalizeIntValue>:

int32_t UTI_normalizeIntValue(int32_t p_value, int32_t p_inMinValue, int32_t p_inMaxValue, int32_t p_outMinValue, int32_t p_outMaxValue, bool p_isInversionNeeded)
{
 800b4c2:	b5b0      	push	{r4, r5, r7, lr}
 800b4c4:	b086      	sub	sp, #24
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	60f8      	str	r0, [r7, #12]
 800b4ca:	60b9      	str	r1, [r7, #8]
 800b4cc:	607a      	str	r2, [r7, #4]
 800b4ce:	603b      	str	r3, [r7, #0]
  float l_returnValue;
  float l_ratio;

  l_ratio       = ((float)p_outMaxValue - (float)p_outMinValue) / ((float)p_inMaxValue - (float)p_inMinValue);
 800b4d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b4d2:	f7f5 fbff 	bl	8000cd4 <__aeabi_i2f>
 800b4d6:	4604      	mov	r4, r0
 800b4d8:	6838      	ldr	r0, [r7, #0]
 800b4da:	f7f5 fbfb 	bl	8000cd4 <__aeabi_i2f>
 800b4de:	4603      	mov	r3, r0
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	f7f5 fb40 	bl	8000b68 <__aeabi_fsub>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	461d      	mov	r5, r3
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f7f5 fbf1 	bl	8000cd4 <__aeabi_i2f>
 800b4f2:	4604      	mov	r4, r0
 800b4f4:	68b8      	ldr	r0, [r7, #8]
 800b4f6:	f7f5 fbed 	bl	8000cd4 <__aeabi_i2f>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	4620      	mov	r0, r4
 800b500:	f7f5 fb32 	bl	8000b68 <__aeabi_fsub>
 800b504:	4603      	mov	r3, r0
 800b506:	4619      	mov	r1, r3
 800b508:	4628      	mov	r0, r5
 800b50a:	f7f5 fceb 	bl	8000ee4 <__aeabi_fdiv>
 800b50e:	4603      	mov	r3, r0
 800b510:	613b      	str	r3, [r7, #16]
  l_returnValue =  (float)(p_value - p_inMinValue) * l_ratio + p_outMinValue;
 800b512:	68fa      	ldr	r2, [r7, #12]
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	1ad3      	subs	r3, r2, r3
 800b518:	4618      	mov	r0, r3
 800b51a:	f7f5 fbdb 	bl	8000cd4 <__aeabi_i2f>
 800b51e:	4603      	mov	r3, r0
 800b520:	6939      	ldr	r1, [r7, #16]
 800b522:	4618      	mov	r0, r3
 800b524:	f7f5 fc2a 	bl	8000d7c <__aeabi_fmul>
 800b528:	4603      	mov	r3, r0
 800b52a:	461c      	mov	r4, r3
 800b52c:	6838      	ldr	r0, [r7, #0]
 800b52e:	f7f5 fbd1 	bl	8000cd4 <__aeabi_i2f>
 800b532:	4603      	mov	r3, r0
 800b534:	4619      	mov	r1, r3
 800b536:	4620      	mov	r0, r4
 800b538:	f7f5 fb18 	bl	8000b6c <__addsf3>
 800b53c:	4603      	mov	r3, r0
 800b53e:	617b      	str	r3, [r7, #20]

  if (p_isInversionNeeded == true)
 800b540:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b544:	2b00      	cmp	r3, #0
 800b546:	d003      	beq.n	800b550 <UTI_normalizeIntValue+0x8e>
  {
    l_returnValue *= -1.0f;
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800b54e:	617b      	str	r3, [r7, #20]
  else
  {
    ; /* Nothing to do */
  }

  return (int32_t)l_returnValue;
 800b550:	6978      	ldr	r0, [r7, #20]
 800b552:	f7f5 fd63 	bl	800101c <__aeabi_f2iz>
 800b556:	4603      	mov	r3, r0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3718      	adds	r7, #24
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bdb0      	pop	{r4, r5, r7, pc}

0800b560 <atoi>:
 800b560:	220a      	movs	r2, #10
 800b562:	2100      	movs	r1, #0
 800b564:	f000 be36 	b.w	800c1d4 <strtol>

0800b568 <__errno>:
 800b568:	4b01      	ldr	r3, [pc, #4]	; (800b570 <__errno+0x8>)
 800b56a:	6818      	ldr	r0, [r3, #0]
 800b56c:	4770      	bx	lr
 800b56e:	bf00      	nop
 800b570:	2000001c 	.word	0x2000001c

0800b574 <__libc_init_array>:
 800b574:	b570      	push	{r4, r5, r6, lr}
 800b576:	2600      	movs	r6, #0
 800b578:	4d0c      	ldr	r5, [pc, #48]	; (800b5ac <__libc_init_array+0x38>)
 800b57a:	4c0d      	ldr	r4, [pc, #52]	; (800b5b0 <__libc_init_array+0x3c>)
 800b57c:	1b64      	subs	r4, r4, r5
 800b57e:	10a4      	asrs	r4, r4, #2
 800b580:	42a6      	cmp	r6, r4
 800b582:	d109      	bne.n	800b598 <__libc_init_array+0x24>
 800b584:	f002 ffc4 	bl	800e510 <_init>
 800b588:	2600      	movs	r6, #0
 800b58a:	4d0a      	ldr	r5, [pc, #40]	; (800b5b4 <__libc_init_array+0x40>)
 800b58c:	4c0a      	ldr	r4, [pc, #40]	; (800b5b8 <__libc_init_array+0x44>)
 800b58e:	1b64      	subs	r4, r4, r5
 800b590:	10a4      	asrs	r4, r4, #2
 800b592:	42a6      	cmp	r6, r4
 800b594:	d105      	bne.n	800b5a2 <__libc_init_array+0x2e>
 800b596:	bd70      	pop	{r4, r5, r6, pc}
 800b598:	f855 3b04 	ldr.w	r3, [r5], #4
 800b59c:	4798      	blx	r3
 800b59e:	3601      	adds	r6, #1
 800b5a0:	e7ee      	b.n	800b580 <__libc_init_array+0xc>
 800b5a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5a6:	4798      	blx	r3
 800b5a8:	3601      	adds	r6, #1
 800b5aa:	e7f2      	b.n	800b592 <__libc_init_array+0x1e>
 800b5ac:	0800f9c4 	.word	0x0800f9c4
 800b5b0:	0800f9c4 	.word	0x0800f9c4
 800b5b4:	0800f9c4 	.word	0x0800f9c4
 800b5b8:	0800f9c8 	.word	0x0800f9c8

0800b5bc <malloc>:
 800b5bc:	4b02      	ldr	r3, [pc, #8]	; (800b5c8 <malloc+0xc>)
 800b5be:	4601      	mov	r1, r0
 800b5c0:	6818      	ldr	r0, [r3, #0]
 800b5c2:	f000 b85f 	b.w	800b684 <_malloc_r>
 800b5c6:	bf00      	nop
 800b5c8:	2000001c 	.word	0x2000001c

0800b5cc <free>:
 800b5cc:	4b02      	ldr	r3, [pc, #8]	; (800b5d8 <free+0xc>)
 800b5ce:	4601      	mov	r1, r0
 800b5d0:	6818      	ldr	r0, [r3, #0]
 800b5d2:	f000 b80b 	b.w	800b5ec <_free_r>
 800b5d6:	bf00      	nop
 800b5d8:	2000001c 	.word	0x2000001c

0800b5dc <memset>:
 800b5dc:	4603      	mov	r3, r0
 800b5de:	4402      	add	r2, r0
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d100      	bne.n	800b5e6 <memset+0xa>
 800b5e4:	4770      	bx	lr
 800b5e6:	f803 1b01 	strb.w	r1, [r3], #1
 800b5ea:	e7f9      	b.n	800b5e0 <memset+0x4>

0800b5ec <_free_r>:
 800b5ec:	b538      	push	{r3, r4, r5, lr}
 800b5ee:	4605      	mov	r5, r0
 800b5f0:	2900      	cmp	r1, #0
 800b5f2:	d043      	beq.n	800b67c <_free_r+0x90>
 800b5f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5f8:	1f0c      	subs	r4, r1, #4
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	bfb8      	it	lt
 800b5fe:	18e4      	addlt	r4, r4, r3
 800b600:	f001 fdc2 	bl	800d188 <__malloc_lock>
 800b604:	4a1e      	ldr	r2, [pc, #120]	; (800b680 <_free_r+0x94>)
 800b606:	6813      	ldr	r3, [r2, #0]
 800b608:	4610      	mov	r0, r2
 800b60a:	b933      	cbnz	r3, 800b61a <_free_r+0x2e>
 800b60c:	6063      	str	r3, [r4, #4]
 800b60e:	6014      	str	r4, [r2, #0]
 800b610:	4628      	mov	r0, r5
 800b612:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b616:	f001 bdbd 	b.w	800d194 <__malloc_unlock>
 800b61a:	42a3      	cmp	r3, r4
 800b61c:	d90a      	bls.n	800b634 <_free_r+0x48>
 800b61e:	6821      	ldr	r1, [r4, #0]
 800b620:	1862      	adds	r2, r4, r1
 800b622:	4293      	cmp	r3, r2
 800b624:	bf01      	itttt	eq
 800b626:	681a      	ldreq	r2, [r3, #0]
 800b628:	685b      	ldreq	r3, [r3, #4]
 800b62a:	1852      	addeq	r2, r2, r1
 800b62c:	6022      	streq	r2, [r4, #0]
 800b62e:	6063      	str	r3, [r4, #4]
 800b630:	6004      	str	r4, [r0, #0]
 800b632:	e7ed      	b.n	800b610 <_free_r+0x24>
 800b634:	461a      	mov	r2, r3
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	b10b      	cbz	r3, 800b63e <_free_r+0x52>
 800b63a:	42a3      	cmp	r3, r4
 800b63c:	d9fa      	bls.n	800b634 <_free_r+0x48>
 800b63e:	6811      	ldr	r1, [r2, #0]
 800b640:	1850      	adds	r0, r2, r1
 800b642:	42a0      	cmp	r0, r4
 800b644:	d10b      	bne.n	800b65e <_free_r+0x72>
 800b646:	6820      	ldr	r0, [r4, #0]
 800b648:	4401      	add	r1, r0
 800b64a:	1850      	adds	r0, r2, r1
 800b64c:	4283      	cmp	r3, r0
 800b64e:	6011      	str	r1, [r2, #0]
 800b650:	d1de      	bne.n	800b610 <_free_r+0x24>
 800b652:	6818      	ldr	r0, [r3, #0]
 800b654:	685b      	ldr	r3, [r3, #4]
 800b656:	4401      	add	r1, r0
 800b658:	6011      	str	r1, [r2, #0]
 800b65a:	6053      	str	r3, [r2, #4]
 800b65c:	e7d8      	b.n	800b610 <_free_r+0x24>
 800b65e:	d902      	bls.n	800b666 <_free_r+0x7a>
 800b660:	230c      	movs	r3, #12
 800b662:	602b      	str	r3, [r5, #0]
 800b664:	e7d4      	b.n	800b610 <_free_r+0x24>
 800b666:	6820      	ldr	r0, [r4, #0]
 800b668:	1821      	adds	r1, r4, r0
 800b66a:	428b      	cmp	r3, r1
 800b66c:	bf01      	itttt	eq
 800b66e:	6819      	ldreq	r1, [r3, #0]
 800b670:	685b      	ldreq	r3, [r3, #4]
 800b672:	1809      	addeq	r1, r1, r0
 800b674:	6021      	streq	r1, [r4, #0]
 800b676:	6063      	str	r3, [r4, #4]
 800b678:	6054      	str	r4, [r2, #4]
 800b67a:	e7c9      	b.n	800b610 <_free_r+0x24>
 800b67c:	bd38      	pop	{r3, r4, r5, pc}
 800b67e:	bf00      	nop
 800b680:	200004d0 	.word	0x200004d0

0800b684 <_malloc_r>:
 800b684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b686:	1ccd      	adds	r5, r1, #3
 800b688:	f025 0503 	bic.w	r5, r5, #3
 800b68c:	3508      	adds	r5, #8
 800b68e:	2d0c      	cmp	r5, #12
 800b690:	bf38      	it	cc
 800b692:	250c      	movcc	r5, #12
 800b694:	2d00      	cmp	r5, #0
 800b696:	4606      	mov	r6, r0
 800b698:	db01      	blt.n	800b69e <_malloc_r+0x1a>
 800b69a:	42a9      	cmp	r1, r5
 800b69c:	d903      	bls.n	800b6a6 <_malloc_r+0x22>
 800b69e:	230c      	movs	r3, #12
 800b6a0:	6033      	str	r3, [r6, #0]
 800b6a2:	2000      	movs	r0, #0
 800b6a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6a6:	f001 fd6f 	bl	800d188 <__malloc_lock>
 800b6aa:	4921      	ldr	r1, [pc, #132]	; (800b730 <_malloc_r+0xac>)
 800b6ac:	680a      	ldr	r2, [r1, #0]
 800b6ae:	4614      	mov	r4, r2
 800b6b0:	b99c      	cbnz	r4, 800b6da <_malloc_r+0x56>
 800b6b2:	4f20      	ldr	r7, [pc, #128]	; (800b734 <_malloc_r+0xb0>)
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	b923      	cbnz	r3, 800b6c2 <_malloc_r+0x3e>
 800b6b8:	4621      	mov	r1, r4
 800b6ba:	4630      	mov	r0, r6
 800b6bc:	f000 fcb4 	bl	800c028 <_sbrk_r>
 800b6c0:	6038      	str	r0, [r7, #0]
 800b6c2:	4629      	mov	r1, r5
 800b6c4:	4630      	mov	r0, r6
 800b6c6:	f000 fcaf 	bl	800c028 <_sbrk_r>
 800b6ca:	1c43      	adds	r3, r0, #1
 800b6cc:	d123      	bne.n	800b716 <_malloc_r+0x92>
 800b6ce:	230c      	movs	r3, #12
 800b6d0:	4630      	mov	r0, r6
 800b6d2:	6033      	str	r3, [r6, #0]
 800b6d4:	f001 fd5e 	bl	800d194 <__malloc_unlock>
 800b6d8:	e7e3      	b.n	800b6a2 <_malloc_r+0x1e>
 800b6da:	6823      	ldr	r3, [r4, #0]
 800b6dc:	1b5b      	subs	r3, r3, r5
 800b6de:	d417      	bmi.n	800b710 <_malloc_r+0x8c>
 800b6e0:	2b0b      	cmp	r3, #11
 800b6e2:	d903      	bls.n	800b6ec <_malloc_r+0x68>
 800b6e4:	6023      	str	r3, [r4, #0]
 800b6e6:	441c      	add	r4, r3
 800b6e8:	6025      	str	r5, [r4, #0]
 800b6ea:	e004      	b.n	800b6f6 <_malloc_r+0x72>
 800b6ec:	6863      	ldr	r3, [r4, #4]
 800b6ee:	42a2      	cmp	r2, r4
 800b6f0:	bf0c      	ite	eq
 800b6f2:	600b      	streq	r3, [r1, #0]
 800b6f4:	6053      	strne	r3, [r2, #4]
 800b6f6:	4630      	mov	r0, r6
 800b6f8:	f001 fd4c 	bl	800d194 <__malloc_unlock>
 800b6fc:	f104 000b 	add.w	r0, r4, #11
 800b700:	1d23      	adds	r3, r4, #4
 800b702:	f020 0007 	bic.w	r0, r0, #7
 800b706:	1ac2      	subs	r2, r0, r3
 800b708:	d0cc      	beq.n	800b6a4 <_malloc_r+0x20>
 800b70a:	1a1b      	subs	r3, r3, r0
 800b70c:	50a3      	str	r3, [r4, r2]
 800b70e:	e7c9      	b.n	800b6a4 <_malloc_r+0x20>
 800b710:	4622      	mov	r2, r4
 800b712:	6864      	ldr	r4, [r4, #4]
 800b714:	e7cc      	b.n	800b6b0 <_malloc_r+0x2c>
 800b716:	1cc4      	adds	r4, r0, #3
 800b718:	f024 0403 	bic.w	r4, r4, #3
 800b71c:	42a0      	cmp	r0, r4
 800b71e:	d0e3      	beq.n	800b6e8 <_malloc_r+0x64>
 800b720:	1a21      	subs	r1, r4, r0
 800b722:	4630      	mov	r0, r6
 800b724:	f000 fc80 	bl	800c028 <_sbrk_r>
 800b728:	3001      	adds	r0, #1
 800b72a:	d1dd      	bne.n	800b6e8 <_malloc_r+0x64>
 800b72c:	e7cf      	b.n	800b6ce <_malloc_r+0x4a>
 800b72e:	bf00      	nop
 800b730:	200004d0 	.word	0x200004d0
 800b734:	200004d4 	.word	0x200004d4

0800b738 <__cvt>:
 800b738:	2b00      	cmp	r3, #0
 800b73a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b73e:	461f      	mov	r7, r3
 800b740:	bfbb      	ittet	lt
 800b742:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800b746:	461f      	movlt	r7, r3
 800b748:	2300      	movge	r3, #0
 800b74a:	232d      	movlt	r3, #45	; 0x2d
 800b74c:	b088      	sub	sp, #32
 800b74e:	4614      	mov	r4, r2
 800b750:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b752:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800b754:	7013      	strb	r3, [r2, #0]
 800b756:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b758:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800b75c:	f023 0820 	bic.w	r8, r3, #32
 800b760:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b764:	d005      	beq.n	800b772 <__cvt+0x3a>
 800b766:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b76a:	d100      	bne.n	800b76e <__cvt+0x36>
 800b76c:	3501      	adds	r5, #1
 800b76e:	2302      	movs	r3, #2
 800b770:	e000      	b.n	800b774 <__cvt+0x3c>
 800b772:	2303      	movs	r3, #3
 800b774:	aa07      	add	r2, sp, #28
 800b776:	9204      	str	r2, [sp, #16]
 800b778:	aa06      	add	r2, sp, #24
 800b77a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b77e:	e9cd 3500 	strd	r3, r5, [sp]
 800b782:	4622      	mov	r2, r4
 800b784:	463b      	mov	r3, r7
 800b786:	f000 fdf7 	bl	800c378 <_dtoa_r>
 800b78a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b78e:	4606      	mov	r6, r0
 800b790:	d102      	bne.n	800b798 <__cvt+0x60>
 800b792:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b794:	07db      	lsls	r3, r3, #31
 800b796:	d522      	bpl.n	800b7de <__cvt+0xa6>
 800b798:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b79c:	eb06 0905 	add.w	r9, r6, r5
 800b7a0:	d110      	bne.n	800b7c4 <__cvt+0x8c>
 800b7a2:	7833      	ldrb	r3, [r6, #0]
 800b7a4:	2b30      	cmp	r3, #48	; 0x30
 800b7a6:	d10a      	bne.n	800b7be <__cvt+0x86>
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	4639      	mov	r1, r7
 800b7b0:	f7f5 f966 	bl	8000a80 <__aeabi_dcmpeq>
 800b7b4:	b918      	cbnz	r0, 800b7be <__cvt+0x86>
 800b7b6:	f1c5 0501 	rsb	r5, r5, #1
 800b7ba:	f8ca 5000 	str.w	r5, [sl]
 800b7be:	f8da 3000 	ldr.w	r3, [sl]
 800b7c2:	4499      	add	r9, r3
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	4620      	mov	r0, r4
 800b7ca:	4639      	mov	r1, r7
 800b7cc:	f7f5 f958 	bl	8000a80 <__aeabi_dcmpeq>
 800b7d0:	b108      	cbz	r0, 800b7d6 <__cvt+0x9e>
 800b7d2:	f8cd 901c 	str.w	r9, [sp, #28]
 800b7d6:	2230      	movs	r2, #48	; 0x30
 800b7d8:	9b07      	ldr	r3, [sp, #28]
 800b7da:	454b      	cmp	r3, r9
 800b7dc:	d307      	bcc.n	800b7ee <__cvt+0xb6>
 800b7de:	4630      	mov	r0, r6
 800b7e0:	9b07      	ldr	r3, [sp, #28]
 800b7e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b7e4:	1b9b      	subs	r3, r3, r6
 800b7e6:	6013      	str	r3, [r2, #0]
 800b7e8:	b008      	add	sp, #32
 800b7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7ee:	1c59      	adds	r1, r3, #1
 800b7f0:	9107      	str	r1, [sp, #28]
 800b7f2:	701a      	strb	r2, [r3, #0]
 800b7f4:	e7f0      	b.n	800b7d8 <__cvt+0xa0>

0800b7f6 <__exponent>:
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b7fa:	2900      	cmp	r1, #0
 800b7fc:	f803 2b02 	strb.w	r2, [r3], #2
 800b800:	bfb6      	itet	lt
 800b802:	222d      	movlt	r2, #45	; 0x2d
 800b804:	222b      	movge	r2, #43	; 0x2b
 800b806:	4249      	neglt	r1, r1
 800b808:	2909      	cmp	r1, #9
 800b80a:	7042      	strb	r2, [r0, #1]
 800b80c:	dd2b      	ble.n	800b866 <__exponent+0x70>
 800b80e:	f10d 0407 	add.w	r4, sp, #7
 800b812:	46a4      	mov	ip, r4
 800b814:	270a      	movs	r7, #10
 800b816:	fb91 f6f7 	sdiv	r6, r1, r7
 800b81a:	460a      	mov	r2, r1
 800b81c:	46a6      	mov	lr, r4
 800b81e:	fb07 1516 	mls	r5, r7, r6, r1
 800b822:	2a63      	cmp	r2, #99	; 0x63
 800b824:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800b828:	4631      	mov	r1, r6
 800b82a:	f104 34ff 	add.w	r4, r4, #4294967295
 800b82e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b832:	dcf0      	bgt.n	800b816 <__exponent+0x20>
 800b834:	3130      	adds	r1, #48	; 0x30
 800b836:	f1ae 0502 	sub.w	r5, lr, #2
 800b83a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b83e:	4629      	mov	r1, r5
 800b840:	1c44      	adds	r4, r0, #1
 800b842:	4561      	cmp	r1, ip
 800b844:	d30a      	bcc.n	800b85c <__exponent+0x66>
 800b846:	f10d 0209 	add.w	r2, sp, #9
 800b84a:	eba2 020e 	sub.w	r2, r2, lr
 800b84e:	4565      	cmp	r5, ip
 800b850:	bf88      	it	hi
 800b852:	2200      	movhi	r2, #0
 800b854:	4413      	add	r3, r2
 800b856:	1a18      	subs	r0, r3, r0
 800b858:	b003      	add	sp, #12
 800b85a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b85c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b860:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b864:	e7ed      	b.n	800b842 <__exponent+0x4c>
 800b866:	2330      	movs	r3, #48	; 0x30
 800b868:	3130      	adds	r1, #48	; 0x30
 800b86a:	7083      	strb	r3, [r0, #2]
 800b86c:	70c1      	strb	r1, [r0, #3]
 800b86e:	1d03      	adds	r3, r0, #4
 800b870:	e7f1      	b.n	800b856 <__exponent+0x60>
	...

0800b874 <_printf_float>:
 800b874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b878:	b091      	sub	sp, #68	; 0x44
 800b87a:	460c      	mov	r4, r1
 800b87c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800b880:	4616      	mov	r6, r2
 800b882:	461f      	mov	r7, r3
 800b884:	4605      	mov	r5, r0
 800b886:	f001 fc5b 	bl	800d140 <_localeconv_r>
 800b88a:	6803      	ldr	r3, [r0, #0]
 800b88c:	4618      	mov	r0, r3
 800b88e:	9309      	str	r3, [sp, #36]	; 0x24
 800b890:	f7f4 fcca 	bl	8000228 <strlen>
 800b894:	2300      	movs	r3, #0
 800b896:	930e      	str	r3, [sp, #56]	; 0x38
 800b898:	f8d8 3000 	ldr.w	r3, [r8]
 800b89c:	900a      	str	r0, [sp, #40]	; 0x28
 800b89e:	3307      	adds	r3, #7
 800b8a0:	f023 0307 	bic.w	r3, r3, #7
 800b8a4:	f103 0208 	add.w	r2, r3, #8
 800b8a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b8ac:	f8d4 b000 	ldr.w	fp, [r4]
 800b8b0:	f8c8 2000 	str.w	r2, [r8]
 800b8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b8bc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800b8c0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800b8c4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b8ca:	4640      	mov	r0, r8
 800b8cc:	4b9c      	ldr	r3, [pc, #624]	; (800bb40 <_printf_float+0x2cc>)
 800b8ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b8d0:	f7f5 f908 	bl	8000ae4 <__aeabi_dcmpun>
 800b8d4:	bb70      	cbnz	r0, 800b934 <_printf_float+0xc0>
 800b8d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b8da:	4640      	mov	r0, r8
 800b8dc:	4b98      	ldr	r3, [pc, #608]	; (800bb40 <_printf_float+0x2cc>)
 800b8de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b8e0:	f7f5 f8e2 	bl	8000aa8 <__aeabi_dcmple>
 800b8e4:	bb30      	cbnz	r0, 800b934 <_printf_float+0xc0>
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	4640      	mov	r0, r8
 800b8ec:	4651      	mov	r1, sl
 800b8ee:	f7f5 f8d1 	bl	8000a94 <__aeabi_dcmplt>
 800b8f2:	b110      	cbz	r0, 800b8fa <_printf_float+0x86>
 800b8f4:	232d      	movs	r3, #45	; 0x2d
 800b8f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b8fa:	4b92      	ldr	r3, [pc, #584]	; (800bb44 <_printf_float+0x2d0>)
 800b8fc:	4892      	ldr	r0, [pc, #584]	; (800bb48 <_printf_float+0x2d4>)
 800b8fe:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b902:	bf94      	ite	ls
 800b904:	4698      	movls	r8, r3
 800b906:	4680      	movhi	r8, r0
 800b908:	2303      	movs	r3, #3
 800b90a:	f04f 0a00 	mov.w	sl, #0
 800b90e:	6123      	str	r3, [r4, #16]
 800b910:	f02b 0304 	bic.w	r3, fp, #4
 800b914:	6023      	str	r3, [r4, #0]
 800b916:	4633      	mov	r3, r6
 800b918:	4621      	mov	r1, r4
 800b91a:	4628      	mov	r0, r5
 800b91c:	9700      	str	r7, [sp, #0]
 800b91e:	aa0f      	add	r2, sp, #60	; 0x3c
 800b920:	f000 f9d4 	bl	800bccc <_printf_common>
 800b924:	3001      	adds	r0, #1
 800b926:	f040 8090 	bne.w	800ba4a <_printf_float+0x1d6>
 800b92a:	f04f 30ff 	mov.w	r0, #4294967295
 800b92e:	b011      	add	sp, #68	; 0x44
 800b930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b934:	4642      	mov	r2, r8
 800b936:	4653      	mov	r3, sl
 800b938:	4640      	mov	r0, r8
 800b93a:	4651      	mov	r1, sl
 800b93c:	f7f5 f8d2 	bl	8000ae4 <__aeabi_dcmpun>
 800b940:	b148      	cbz	r0, 800b956 <_printf_float+0xe2>
 800b942:	f1ba 0f00 	cmp.w	sl, #0
 800b946:	bfb8      	it	lt
 800b948:	232d      	movlt	r3, #45	; 0x2d
 800b94a:	4880      	ldr	r0, [pc, #512]	; (800bb4c <_printf_float+0x2d8>)
 800b94c:	bfb8      	it	lt
 800b94e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b952:	4b7f      	ldr	r3, [pc, #508]	; (800bb50 <_printf_float+0x2dc>)
 800b954:	e7d3      	b.n	800b8fe <_printf_float+0x8a>
 800b956:	6863      	ldr	r3, [r4, #4]
 800b958:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b95c:	1c5a      	adds	r2, r3, #1
 800b95e:	d142      	bne.n	800b9e6 <_printf_float+0x172>
 800b960:	2306      	movs	r3, #6
 800b962:	6063      	str	r3, [r4, #4]
 800b964:	2200      	movs	r2, #0
 800b966:	9206      	str	r2, [sp, #24]
 800b968:	aa0e      	add	r2, sp, #56	; 0x38
 800b96a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800b96e:	aa0d      	add	r2, sp, #52	; 0x34
 800b970:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800b974:	9203      	str	r2, [sp, #12]
 800b976:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800b97a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b97e:	6023      	str	r3, [r4, #0]
 800b980:	6863      	ldr	r3, [r4, #4]
 800b982:	4642      	mov	r2, r8
 800b984:	9300      	str	r3, [sp, #0]
 800b986:	4628      	mov	r0, r5
 800b988:	4653      	mov	r3, sl
 800b98a:	910b      	str	r1, [sp, #44]	; 0x2c
 800b98c:	f7ff fed4 	bl	800b738 <__cvt>
 800b990:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b992:	4680      	mov	r8, r0
 800b994:	2947      	cmp	r1, #71	; 0x47
 800b996:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b998:	d108      	bne.n	800b9ac <_printf_float+0x138>
 800b99a:	1cc8      	adds	r0, r1, #3
 800b99c:	db02      	blt.n	800b9a4 <_printf_float+0x130>
 800b99e:	6863      	ldr	r3, [r4, #4]
 800b9a0:	4299      	cmp	r1, r3
 800b9a2:	dd40      	ble.n	800ba26 <_printf_float+0x1b2>
 800b9a4:	f1a9 0902 	sub.w	r9, r9, #2
 800b9a8:	fa5f f989 	uxtb.w	r9, r9
 800b9ac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b9b0:	d81f      	bhi.n	800b9f2 <_printf_float+0x17e>
 800b9b2:	464a      	mov	r2, r9
 800b9b4:	3901      	subs	r1, #1
 800b9b6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b9ba:	910d      	str	r1, [sp, #52]	; 0x34
 800b9bc:	f7ff ff1b 	bl	800b7f6 <__exponent>
 800b9c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b9c2:	4682      	mov	sl, r0
 800b9c4:	1813      	adds	r3, r2, r0
 800b9c6:	2a01      	cmp	r2, #1
 800b9c8:	6123      	str	r3, [r4, #16]
 800b9ca:	dc02      	bgt.n	800b9d2 <_printf_float+0x15e>
 800b9cc:	6822      	ldr	r2, [r4, #0]
 800b9ce:	07d2      	lsls	r2, r2, #31
 800b9d0:	d501      	bpl.n	800b9d6 <_printf_float+0x162>
 800b9d2:	3301      	adds	r3, #1
 800b9d4:	6123      	str	r3, [r4, #16]
 800b9d6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d09b      	beq.n	800b916 <_printf_float+0xa2>
 800b9de:	232d      	movs	r3, #45	; 0x2d
 800b9e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9e4:	e797      	b.n	800b916 <_printf_float+0xa2>
 800b9e6:	2947      	cmp	r1, #71	; 0x47
 800b9e8:	d1bc      	bne.n	800b964 <_printf_float+0xf0>
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d1ba      	bne.n	800b964 <_printf_float+0xf0>
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	e7b7      	b.n	800b962 <_printf_float+0xee>
 800b9f2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b9f6:	d118      	bne.n	800ba2a <_printf_float+0x1b6>
 800b9f8:	2900      	cmp	r1, #0
 800b9fa:	6863      	ldr	r3, [r4, #4]
 800b9fc:	dd0b      	ble.n	800ba16 <_printf_float+0x1a2>
 800b9fe:	6121      	str	r1, [r4, #16]
 800ba00:	b913      	cbnz	r3, 800ba08 <_printf_float+0x194>
 800ba02:	6822      	ldr	r2, [r4, #0]
 800ba04:	07d0      	lsls	r0, r2, #31
 800ba06:	d502      	bpl.n	800ba0e <_printf_float+0x19a>
 800ba08:	3301      	adds	r3, #1
 800ba0a:	440b      	add	r3, r1
 800ba0c:	6123      	str	r3, [r4, #16]
 800ba0e:	f04f 0a00 	mov.w	sl, #0
 800ba12:	65a1      	str	r1, [r4, #88]	; 0x58
 800ba14:	e7df      	b.n	800b9d6 <_printf_float+0x162>
 800ba16:	b913      	cbnz	r3, 800ba1e <_printf_float+0x1aa>
 800ba18:	6822      	ldr	r2, [r4, #0]
 800ba1a:	07d2      	lsls	r2, r2, #31
 800ba1c:	d501      	bpl.n	800ba22 <_printf_float+0x1ae>
 800ba1e:	3302      	adds	r3, #2
 800ba20:	e7f4      	b.n	800ba0c <_printf_float+0x198>
 800ba22:	2301      	movs	r3, #1
 800ba24:	e7f2      	b.n	800ba0c <_printf_float+0x198>
 800ba26:	f04f 0967 	mov.w	r9, #103	; 0x67
 800ba2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba2c:	4299      	cmp	r1, r3
 800ba2e:	db05      	blt.n	800ba3c <_printf_float+0x1c8>
 800ba30:	6823      	ldr	r3, [r4, #0]
 800ba32:	6121      	str	r1, [r4, #16]
 800ba34:	07d8      	lsls	r0, r3, #31
 800ba36:	d5ea      	bpl.n	800ba0e <_printf_float+0x19a>
 800ba38:	1c4b      	adds	r3, r1, #1
 800ba3a:	e7e7      	b.n	800ba0c <_printf_float+0x198>
 800ba3c:	2900      	cmp	r1, #0
 800ba3e:	bfcc      	ite	gt
 800ba40:	2201      	movgt	r2, #1
 800ba42:	f1c1 0202 	rsble	r2, r1, #2
 800ba46:	4413      	add	r3, r2
 800ba48:	e7e0      	b.n	800ba0c <_printf_float+0x198>
 800ba4a:	6823      	ldr	r3, [r4, #0]
 800ba4c:	055a      	lsls	r2, r3, #21
 800ba4e:	d407      	bmi.n	800ba60 <_printf_float+0x1ec>
 800ba50:	6923      	ldr	r3, [r4, #16]
 800ba52:	4642      	mov	r2, r8
 800ba54:	4631      	mov	r1, r6
 800ba56:	4628      	mov	r0, r5
 800ba58:	47b8      	blx	r7
 800ba5a:	3001      	adds	r0, #1
 800ba5c:	d12b      	bne.n	800bab6 <_printf_float+0x242>
 800ba5e:	e764      	b.n	800b92a <_printf_float+0xb6>
 800ba60:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ba64:	f240 80dd 	bls.w	800bc22 <_printf_float+0x3ae>
 800ba68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	2300      	movs	r3, #0
 800ba70:	f7f5 f806 	bl	8000a80 <__aeabi_dcmpeq>
 800ba74:	2800      	cmp	r0, #0
 800ba76:	d033      	beq.n	800bae0 <_printf_float+0x26c>
 800ba78:	2301      	movs	r3, #1
 800ba7a:	4631      	mov	r1, r6
 800ba7c:	4628      	mov	r0, r5
 800ba7e:	4a35      	ldr	r2, [pc, #212]	; (800bb54 <_printf_float+0x2e0>)
 800ba80:	47b8      	blx	r7
 800ba82:	3001      	adds	r0, #1
 800ba84:	f43f af51 	beq.w	800b92a <_printf_float+0xb6>
 800ba88:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	db02      	blt.n	800ba96 <_printf_float+0x222>
 800ba90:	6823      	ldr	r3, [r4, #0]
 800ba92:	07d8      	lsls	r0, r3, #31
 800ba94:	d50f      	bpl.n	800bab6 <_printf_float+0x242>
 800ba96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ba9a:	4631      	mov	r1, r6
 800ba9c:	4628      	mov	r0, r5
 800ba9e:	47b8      	blx	r7
 800baa0:	3001      	adds	r0, #1
 800baa2:	f43f af42 	beq.w	800b92a <_printf_float+0xb6>
 800baa6:	f04f 0800 	mov.w	r8, #0
 800baaa:	f104 091a 	add.w	r9, r4, #26
 800baae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bab0:	3b01      	subs	r3, #1
 800bab2:	4543      	cmp	r3, r8
 800bab4:	dc09      	bgt.n	800baca <_printf_float+0x256>
 800bab6:	6823      	ldr	r3, [r4, #0]
 800bab8:	079b      	lsls	r3, r3, #30
 800baba:	f100 8102 	bmi.w	800bcc2 <_printf_float+0x44e>
 800babe:	68e0      	ldr	r0, [r4, #12]
 800bac0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bac2:	4298      	cmp	r0, r3
 800bac4:	bfb8      	it	lt
 800bac6:	4618      	movlt	r0, r3
 800bac8:	e731      	b.n	800b92e <_printf_float+0xba>
 800baca:	2301      	movs	r3, #1
 800bacc:	464a      	mov	r2, r9
 800bace:	4631      	mov	r1, r6
 800bad0:	4628      	mov	r0, r5
 800bad2:	47b8      	blx	r7
 800bad4:	3001      	adds	r0, #1
 800bad6:	f43f af28 	beq.w	800b92a <_printf_float+0xb6>
 800bada:	f108 0801 	add.w	r8, r8, #1
 800bade:	e7e6      	b.n	800baae <_printf_float+0x23a>
 800bae0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	dc38      	bgt.n	800bb58 <_printf_float+0x2e4>
 800bae6:	2301      	movs	r3, #1
 800bae8:	4631      	mov	r1, r6
 800baea:	4628      	mov	r0, r5
 800baec:	4a19      	ldr	r2, [pc, #100]	; (800bb54 <_printf_float+0x2e0>)
 800baee:	47b8      	blx	r7
 800baf0:	3001      	adds	r0, #1
 800baf2:	f43f af1a 	beq.w	800b92a <_printf_float+0xb6>
 800baf6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bafa:	4313      	orrs	r3, r2
 800bafc:	d102      	bne.n	800bb04 <_printf_float+0x290>
 800bafe:	6823      	ldr	r3, [r4, #0]
 800bb00:	07d9      	lsls	r1, r3, #31
 800bb02:	d5d8      	bpl.n	800bab6 <_printf_float+0x242>
 800bb04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb08:	4631      	mov	r1, r6
 800bb0a:	4628      	mov	r0, r5
 800bb0c:	47b8      	blx	r7
 800bb0e:	3001      	adds	r0, #1
 800bb10:	f43f af0b 	beq.w	800b92a <_printf_float+0xb6>
 800bb14:	f04f 0900 	mov.w	r9, #0
 800bb18:	f104 0a1a 	add.w	sl, r4, #26
 800bb1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb1e:	425b      	negs	r3, r3
 800bb20:	454b      	cmp	r3, r9
 800bb22:	dc01      	bgt.n	800bb28 <_printf_float+0x2b4>
 800bb24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb26:	e794      	b.n	800ba52 <_printf_float+0x1de>
 800bb28:	2301      	movs	r3, #1
 800bb2a:	4652      	mov	r2, sl
 800bb2c:	4631      	mov	r1, r6
 800bb2e:	4628      	mov	r0, r5
 800bb30:	47b8      	blx	r7
 800bb32:	3001      	adds	r0, #1
 800bb34:	f43f aef9 	beq.w	800b92a <_printf_float+0xb6>
 800bb38:	f109 0901 	add.w	r9, r9, #1
 800bb3c:	e7ee      	b.n	800bb1c <_printf_float+0x2a8>
 800bb3e:	bf00      	nop
 800bb40:	7fefffff 	.word	0x7fefffff
 800bb44:	0800f5e4 	.word	0x0800f5e4
 800bb48:	0800f5e8 	.word	0x0800f5e8
 800bb4c:	0800f5f0 	.word	0x0800f5f0
 800bb50:	0800f5ec 	.word	0x0800f5ec
 800bb54:	0800f5f4 	.word	0x0800f5f4
 800bb58:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	bfa8      	it	ge
 800bb60:	461a      	movge	r2, r3
 800bb62:	2a00      	cmp	r2, #0
 800bb64:	4691      	mov	r9, r2
 800bb66:	dc37      	bgt.n	800bbd8 <_printf_float+0x364>
 800bb68:	f04f 0b00 	mov.w	fp, #0
 800bb6c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb70:	f104 021a 	add.w	r2, r4, #26
 800bb74:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800bb78:	ebaa 0309 	sub.w	r3, sl, r9
 800bb7c:	455b      	cmp	r3, fp
 800bb7e:	dc33      	bgt.n	800bbe8 <_printf_float+0x374>
 800bb80:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bb84:	429a      	cmp	r2, r3
 800bb86:	db3b      	blt.n	800bc00 <_printf_float+0x38c>
 800bb88:	6823      	ldr	r3, [r4, #0]
 800bb8a:	07da      	lsls	r2, r3, #31
 800bb8c:	d438      	bmi.n	800bc00 <_printf_float+0x38c>
 800bb8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb90:	990d      	ldr	r1, [sp, #52]	; 0x34
 800bb92:	eba2 030a 	sub.w	r3, r2, sl
 800bb96:	eba2 0901 	sub.w	r9, r2, r1
 800bb9a:	4599      	cmp	r9, r3
 800bb9c:	bfa8      	it	ge
 800bb9e:	4699      	movge	r9, r3
 800bba0:	f1b9 0f00 	cmp.w	r9, #0
 800bba4:	dc34      	bgt.n	800bc10 <_printf_float+0x39c>
 800bba6:	f04f 0800 	mov.w	r8, #0
 800bbaa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bbae:	f104 0a1a 	add.w	sl, r4, #26
 800bbb2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800bbb6:	1a9b      	subs	r3, r3, r2
 800bbb8:	eba3 0309 	sub.w	r3, r3, r9
 800bbbc:	4543      	cmp	r3, r8
 800bbbe:	f77f af7a 	ble.w	800bab6 <_printf_float+0x242>
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	4652      	mov	r2, sl
 800bbc6:	4631      	mov	r1, r6
 800bbc8:	4628      	mov	r0, r5
 800bbca:	47b8      	blx	r7
 800bbcc:	3001      	adds	r0, #1
 800bbce:	f43f aeac 	beq.w	800b92a <_printf_float+0xb6>
 800bbd2:	f108 0801 	add.w	r8, r8, #1
 800bbd6:	e7ec      	b.n	800bbb2 <_printf_float+0x33e>
 800bbd8:	4613      	mov	r3, r2
 800bbda:	4631      	mov	r1, r6
 800bbdc:	4642      	mov	r2, r8
 800bbde:	4628      	mov	r0, r5
 800bbe0:	47b8      	blx	r7
 800bbe2:	3001      	adds	r0, #1
 800bbe4:	d1c0      	bne.n	800bb68 <_printf_float+0x2f4>
 800bbe6:	e6a0      	b.n	800b92a <_printf_float+0xb6>
 800bbe8:	2301      	movs	r3, #1
 800bbea:	4631      	mov	r1, r6
 800bbec:	4628      	mov	r0, r5
 800bbee:	920b      	str	r2, [sp, #44]	; 0x2c
 800bbf0:	47b8      	blx	r7
 800bbf2:	3001      	adds	r0, #1
 800bbf4:	f43f ae99 	beq.w	800b92a <_printf_float+0xb6>
 800bbf8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bbfa:	f10b 0b01 	add.w	fp, fp, #1
 800bbfe:	e7b9      	b.n	800bb74 <_printf_float+0x300>
 800bc00:	4631      	mov	r1, r6
 800bc02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc06:	4628      	mov	r0, r5
 800bc08:	47b8      	blx	r7
 800bc0a:	3001      	adds	r0, #1
 800bc0c:	d1bf      	bne.n	800bb8e <_printf_float+0x31a>
 800bc0e:	e68c      	b.n	800b92a <_printf_float+0xb6>
 800bc10:	464b      	mov	r3, r9
 800bc12:	4631      	mov	r1, r6
 800bc14:	4628      	mov	r0, r5
 800bc16:	eb08 020a 	add.w	r2, r8, sl
 800bc1a:	47b8      	blx	r7
 800bc1c:	3001      	adds	r0, #1
 800bc1e:	d1c2      	bne.n	800bba6 <_printf_float+0x332>
 800bc20:	e683      	b.n	800b92a <_printf_float+0xb6>
 800bc22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc24:	2a01      	cmp	r2, #1
 800bc26:	dc01      	bgt.n	800bc2c <_printf_float+0x3b8>
 800bc28:	07db      	lsls	r3, r3, #31
 800bc2a:	d537      	bpl.n	800bc9c <_printf_float+0x428>
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	4642      	mov	r2, r8
 800bc30:	4631      	mov	r1, r6
 800bc32:	4628      	mov	r0, r5
 800bc34:	47b8      	blx	r7
 800bc36:	3001      	adds	r0, #1
 800bc38:	f43f ae77 	beq.w	800b92a <_printf_float+0xb6>
 800bc3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc40:	4631      	mov	r1, r6
 800bc42:	4628      	mov	r0, r5
 800bc44:	47b8      	blx	r7
 800bc46:	3001      	adds	r0, #1
 800bc48:	f43f ae6f 	beq.w	800b92a <_printf_float+0xb6>
 800bc4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bc50:	2200      	movs	r2, #0
 800bc52:	2300      	movs	r3, #0
 800bc54:	f7f4 ff14 	bl	8000a80 <__aeabi_dcmpeq>
 800bc58:	b9d8      	cbnz	r0, 800bc92 <_printf_float+0x41e>
 800bc5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc5c:	f108 0201 	add.w	r2, r8, #1
 800bc60:	3b01      	subs	r3, #1
 800bc62:	4631      	mov	r1, r6
 800bc64:	4628      	mov	r0, r5
 800bc66:	47b8      	blx	r7
 800bc68:	3001      	adds	r0, #1
 800bc6a:	d10e      	bne.n	800bc8a <_printf_float+0x416>
 800bc6c:	e65d      	b.n	800b92a <_printf_float+0xb6>
 800bc6e:	2301      	movs	r3, #1
 800bc70:	464a      	mov	r2, r9
 800bc72:	4631      	mov	r1, r6
 800bc74:	4628      	mov	r0, r5
 800bc76:	47b8      	blx	r7
 800bc78:	3001      	adds	r0, #1
 800bc7a:	f43f ae56 	beq.w	800b92a <_printf_float+0xb6>
 800bc7e:	f108 0801 	add.w	r8, r8, #1
 800bc82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc84:	3b01      	subs	r3, #1
 800bc86:	4543      	cmp	r3, r8
 800bc88:	dcf1      	bgt.n	800bc6e <_printf_float+0x3fa>
 800bc8a:	4653      	mov	r3, sl
 800bc8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bc90:	e6e0      	b.n	800ba54 <_printf_float+0x1e0>
 800bc92:	f04f 0800 	mov.w	r8, #0
 800bc96:	f104 091a 	add.w	r9, r4, #26
 800bc9a:	e7f2      	b.n	800bc82 <_printf_float+0x40e>
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	4642      	mov	r2, r8
 800bca0:	e7df      	b.n	800bc62 <_printf_float+0x3ee>
 800bca2:	2301      	movs	r3, #1
 800bca4:	464a      	mov	r2, r9
 800bca6:	4631      	mov	r1, r6
 800bca8:	4628      	mov	r0, r5
 800bcaa:	47b8      	blx	r7
 800bcac:	3001      	adds	r0, #1
 800bcae:	f43f ae3c 	beq.w	800b92a <_printf_float+0xb6>
 800bcb2:	f108 0801 	add.w	r8, r8, #1
 800bcb6:	68e3      	ldr	r3, [r4, #12]
 800bcb8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bcba:	1a5b      	subs	r3, r3, r1
 800bcbc:	4543      	cmp	r3, r8
 800bcbe:	dcf0      	bgt.n	800bca2 <_printf_float+0x42e>
 800bcc0:	e6fd      	b.n	800babe <_printf_float+0x24a>
 800bcc2:	f04f 0800 	mov.w	r8, #0
 800bcc6:	f104 0919 	add.w	r9, r4, #25
 800bcca:	e7f4      	b.n	800bcb6 <_printf_float+0x442>

0800bccc <_printf_common>:
 800bccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcd0:	4616      	mov	r6, r2
 800bcd2:	4699      	mov	r9, r3
 800bcd4:	688a      	ldr	r2, [r1, #8]
 800bcd6:	690b      	ldr	r3, [r1, #16]
 800bcd8:	4607      	mov	r7, r0
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	bfb8      	it	lt
 800bcde:	4613      	movlt	r3, r2
 800bce0:	6033      	str	r3, [r6, #0]
 800bce2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bce6:	460c      	mov	r4, r1
 800bce8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bcec:	b10a      	cbz	r2, 800bcf2 <_printf_common+0x26>
 800bcee:	3301      	adds	r3, #1
 800bcf0:	6033      	str	r3, [r6, #0]
 800bcf2:	6823      	ldr	r3, [r4, #0]
 800bcf4:	0699      	lsls	r1, r3, #26
 800bcf6:	bf42      	ittt	mi
 800bcf8:	6833      	ldrmi	r3, [r6, #0]
 800bcfa:	3302      	addmi	r3, #2
 800bcfc:	6033      	strmi	r3, [r6, #0]
 800bcfe:	6825      	ldr	r5, [r4, #0]
 800bd00:	f015 0506 	ands.w	r5, r5, #6
 800bd04:	d106      	bne.n	800bd14 <_printf_common+0x48>
 800bd06:	f104 0a19 	add.w	sl, r4, #25
 800bd0a:	68e3      	ldr	r3, [r4, #12]
 800bd0c:	6832      	ldr	r2, [r6, #0]
 800bd0e:	1a9b      	subs	r3, r3, r2
 800bd10:	42ab      	cmp	r3, r5
 800bd12:	dc28      	bgt.n	800bd66 <_printf_common+0x9a>
 800bd14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bd18:	1e13      	subs	r3, r2, #0
 800bd1a:	6822      	ldr	r2, [r4, #0]
 800bd1c:	bf18      	it	ne
 800bd1e:	2301      	movne	r3, #1
 800bd20:	0692      	lsls	r2, r2, #26
 800bd22:	d42d      	bmi.n	800bd80 <_printf_common+0xb4>
 800bd24:	4649      	mov	r1, r9
 800bd26:	4638      	mov	r0, r7
 800bd28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd2c:	47c0      	blx	r8
 800bd2e:	3001      	adds	r0, #1
 800bd30:	d020      	beq.n	800bd74 <_printf_common+0xa8>
 800bd32:	6823      	ldr	r3, [r4, #0]
 800bd34:	68e5      	ldr	r5, [r4, #12]
 800bd36:	f003 0306 	and.w	r3, r3, #6
 800bd3a:	2b04      	cmp	r3, #4
 800bd3c:	bf18      	it	ne
 800bd3e:	2500      	movne	r5, #0
 800bd40:	6832      	ldr	r2, [r6, #0]
 800bd42:	f04f 0600 	mov.w	r6, #0
 800bd46:	68a3      	ldr	r3, [r4, #8]
 800bd48:	bf08      	it	eq
 800bd4a:	1aad      	subeq	r5, r5, r2
 800bd4c:	6922      	ldr	r2, [r4, #16]
 800bd4e:	bf08      	it	eq
 800bd50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd54:	4293      	cmp	r3, r2
 800bd56:	bfc4      	itt	gt
 800bd58:	1a9b      	subgt	r3, r3, r2
 800bd5a:	18ed      	addgt	r5, r5, r3
 800bd5c:	341a      	adds	r4, #26
 800bd5e:	42b5      	cmp	r5, r6
 800bd60:	d11a      	bne.n	800bd98 <_printf_common+0xcc>
 800bd62:	2000      	movs	r0, #0
 800bd64:	e008      	b.n	800bd78 <_printf_common+0xac>
 800bd66:	2301      	movs	r3, #1
 800bd68:	4652      	mov	r2, sl
 800bd6a:	4649      	mov	r1, r9
 800bd6c:	4638      	mov	r0, r7
 800bd6e:	47c0      	blx	r8
 800bd70:	3001      	adds	r0, #1
 800bd72:	d103      	bne.n	800bd7c <_printf_common+0xb0>
 800bd74:	f04f 30ff 	mov.w	r0, #4294967295
 800bd78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd7c:	3501      	adds	r5, #1
 800bd7e:	e7c4      	b.n	800bd0a <_printf_common+0x3e>
 800bd80:	2030      	movs	r0, #48	; 0x30
 800bd82:	18e1      	adds	r1, r4, r3
 800bd84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd88:	1c5a      	adds	r2, r3, #1
 800bd8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bd8e:	4422      	add	r2, r4
 800bd90:	3302      	adds	r3, #2
 800bd92:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bd96:	e7c5      	b.n	800bd24 <_printf_common+0x58>
 800bd98:	2301      	movs	r3, #1
 800bd9a:	4622      	mov	r2, r4
 800bd9c:	4649      	mov	r1, r9
 800bd9e:	4638      	mov	r0, r7
 800bda0:	47c0      	blx	r8
 800bda2:	3001      	adds	r0, #1
 800bda4:	d0e6      	beq.n	800bd74 <_printf_common+0xa8>
 800bda6:	3601      	adds	r6, #1
 800bda8:	e7d9      	b.n	800bd5e <_printf_common+0x92>
	...

0800bdac <_printf_i>:
 800bdac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bdb0:	460c      	mov	r4, r1
 800bdb2:	7e27      	ldrb	r7, [r4, #24]
 800bdb4:	4691      	mov	r9, r2
 800bdb6:	2f78      	cmp	r7, #120	; 0x78
 800bdb8:	4680      	mov	r8, r0
 800bdba:	469a      	mov	sl, r3
 800bdbc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bdbe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bdc2:	d807      	bhi.n	800bdd4 <_printf_i+0x28>
 800bdc4:	2f62      	cmp	r7, #98	; 0x62
 800bdc6:	d80a      	bhi.n	800bdde <_printf_i+0x32>
 800bdc8:	2f00      	cmp	r7, #0
 800bdca:	f000 80d9 	beq.w	800bf80 <_printf_i+0x1d4>
 800bdce:	2f58      	cmp	r7, #88	; 0x58
 800bdd0:	f000 80a4 	beq.w	800bf1c <_printf_i+0x170>
 800bdd4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bdd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bddc:	e03a      	b.n	800be54 <_printf_i+0xa8>
 800bdde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bde2:	2b15      	cmp	r3, #21
 800bde4:	d8f6      	bhi.n	800bdd4 <_printf_i+0x28>
 800bde6:	a001      	add	r0, pc, #4	; (adr r0, 800bdec <_printf_i+0x40>)
 800bde8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bdec:	0800be45 	.word	0x0800be45
 800bdf0:	0800be59 	.word	0x0800be59
 800bdf4:	0800bdd5 	.word	0x0800bdd5
 800bdf8:	0800bdd5 	.word	0x0800bdd5
 800bdfc:	0800bdd5 	.word	0x0800bdd5
 800be00:	0800bdd5 	.word	0x0800bdd5
 800be04:	0800be59 	.word	0x0800be59
 800be08:	0800bdd5 	.word	0x0800bdd5
 800be0c:	0800bdd5 	.word	0x0800bdd5
 800be10:	0800bdd5 	.word	0x0800bdd5
 800be14:	0800bdd5 	.word	0x0800bdd5
 800be18:	0800bf67 	.word	0x0800bf67
 800be1c:	0800be89 	.word	0x0800be89
 800be20:	0800bf49 	.word	0x0800bf49
 800be24:	0800bdd5 	.word	0x0800bdd5
 800be28:	0800bdd5 	.word	0x0800bdd5
 800be2c:	0800bf89 	.word	0x0800bf89
 800be30:	0800bdd5 	.word	0x0800bdd5
 800be34:	0800be89 	.word	0x0800be89
 800be38:	0800bdd5 	.word	0x0800bdd5
 800be3c:	0800bdd5 	.word	0x0800bdd5
 800be40:	0800bf51 	.word	0x0800bf51
 800be44:	680b      	ldr	r3, [r1, #0]
 800be46:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800be4a:	1d1a      	adds	r2, r3, #4
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	600a      	str	r2, [r1, #0]
 800be50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be54:	2301      	movs	r3, #1
 800be56:	e0a4      	b.n	800bfa2 <_printf_i+0x1f6>
 800be58:	6825      	ldr	r5, [r4, #0]
 800be5a:	6808      	ldr	r0, [r1, #0]
 800be5c:	062e      	lsls	r6, r5, #24
 800be5e:	f100 0304 	add.w	r3, r0, #4
 800be62:	d50a      	bpl.n	800be7a <_printf_i+0xce>
 800be64:	6805      	ldr	r5, [r0, #0]
 800be66:	600b      	str	r3, [r1, #0]
 800be68:	2d00      	cmp	r5, #0
 800be6a:	da03      	bge.n	800be74 <_printf_i+0xc8>
 800be6c:	232d      	movs	r3, #45	; 0x2d
 800be6e:	426d      	negs	r5, r5
 800be70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be74:	230a      	movs	r3, #10
 800be76:	485e      	ldr	r0, [pc, #376]	; (800bff0 <_printf_i+0x244>)
 800be78:	e019      	b.n	800beae <_printf_i+0x102>
 800be7a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800be7e:	6805      	ldr	r5, [r0, #0]
 800be80:	600b      	str	r3, [r1, #0]
 800be82:	bf18      	it	ne
 800be84:	b22d      	sxthne	r5, r5
 800be86:	e7ef      	b.n	800be68 <_printf_i+0xbc>
 800be88:	680b      	ldr	r3, [r1, #0]
 800be8a:	6825      	ldr	r5, [r4, #0]
 800be8c:	1d18      	adds	r0, r3, #4
 800be8e:	6008      	str	r0, [r1, #0]
 800be90:	0628      	lsls	r0, r5, #24
 800be92:	d501      	bpl.n	800be98 <_printf_i+0xec>
 800be94:	681d      	ldr	r5, [r3, #0]
 800be96:	e002      	b.n	800be9e <_printf_i+0xf2>
 800be98:	0669      	lsls	r1, r5, #25
 800be9a:	d5fb      	bpl.n	800be94 <_printf_i+0xe8>
 800be9c:	881d      	ldrh	r5, [r3, #0]
 800be9e:	2f6f      	cmp	r7, #111	; 0x6f
 800bea0:	bf0c      	ite	eq
 800bea2:	2308      	moveq	r3, #8
 800bea4:	230a      	movne	r3, #10
 800bea6:	4852      	ldr	r0, [pc, #328]	; (800bff0 <_printf_i+0x244>)
 800bea8:	2100      	movs	r1, #0
 800beaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800beae:	6866      	ldr	r6, [r4, #4]
 800beb0:	2e00      	cmp	r6, #0
 800beb2:	bfa8      	it	ge
 800beb4:	6821      	ldrge	r1, [r4, #0]
 800beb6:	60a6      	str	r6, [r4, #8]
 800beb8:	bfa4      	itt	ge
 800beba:	f021 0104 	bicge.w	r1, r1, #4
 800bebe:	6021      	strge	r1, [r4, #0]
 800bec0:	b90d      	cbnz	r5, 800bec6 <_printf_i+0x11a>
 800bec2:	2e00      	cmp	r6, #0
 800bec4:	d04d      	beq.n	800bf62 <_printf_i+0x1b6>
 800bec6:	4616      	mov	r6, r2
 800bec8:	fbb5 f1f3 	udiv	r1, r5, r3
 800becc:	fb03 5711 	mls	r7, r3, r1, r5
 800bed0:	5dc7      	ldrb	r7, [r0, r7]
 800bed2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bed6:	462f      	mov	r7, r5
 800bed8:	42bb      	cmp	r3, r7
 800beda:	460d      	mov	r5, r1
 800bedc:	d9f4      	bls.n	800bec8 <_printf_i+0x11c>
 800bede:	2b08      	cmp	r3, #8
 800bee0:	d10b      	bne.n	800befa <_printf_i+0x14e>
 800bee2:	6823      	ldr	r3, [r4, #0]
 800bee4:	07df      	lsls	r7, r3, #31
 800bee6:	d508      	bpl.n	800befa <_printf_i+0x14e>
 800bee8:	6923      	ldr	r3, [r4, #16]
 800beea:	6861      	ldr	r1, [r4, #4]
 800beec:	4299      	cmp	r1, r3
 800beee:	bfde      	ittt	le
 800bef0:	2330      	movle	r3, #48	; 0x30
 800bef2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bef6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800befa:	1b92      	subs	r2, r2, r6
 800befc:	6122      	str	r2, [r4, #16]
 800befe:	464b      	mov	r3, r9
 800bf00:	4621      	mov	r1, r4
 800bf02:	4640      	mov	r0, r8
 800bf04:	f8cd a000 	str.w	sl, [sp]
 800bf08:	aa03      	add	r2, sp, #12
 800bf0a:	f7ff fedf 	bl	800bccc <_printf_common>
 800bf0e:	3001      	adds	r0, #1
 800bf10:	d14c      	bne.n	800bfac <_printf_i+0x200>
 800bf12:	f04f 30ff 	mov.w	r0, #4294967295
 800bf16:	b004      	add	sp, #16
 800bf18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf1c:	4834      	ldr	r0, [pc, #208]	; (800bff0 <_printf_i+0x244>)
 800bf1e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bf22:	680e      	ldr	r6, [r1, #0]
 800bf24:	6823      	ldr	r3, [r4, #0]
 800bf26:	f856 5b04 	ldr.w	r5, [r6], #4
 800bf2a:	061f      	lsls	r7, r3, #24
 800bf2c:	600e      	str	r6, [r1, #0]
 800bf2e:	d514      	bpl.n	800bf5a <_printf_i+0x1ae>
 800bf30:	07d9      	lsls	r1, r3, #31
 800bf32:	bf44      	itt	mi
 800bf34:	f043 0320 	orrmi.w	r3, r3, #32
 800bf38:	6023      	strmi	r3, [r4, #0]
 800bf3a:	b91d      	cbnz	r5, 800bf44 <_printf_i+0x198>
 800bf3c:	6823      	ldr	r3, [r4, #0]
 800bf3e:	f023 0320 	bic.w	r3, r3, #32
 800bf42:	6023      	str	r3, [r4, #0]
 800bf44:	2310      	movs	r3, #16
 800bf46:	e7af      	b.n	800bea8 <_printf_i+0xfc>
 800bf48:	6823      	ldr	r3, [r4, #0]
 800bf4a:	f043 0320 	orr.w	r3, r3, #32
 800bf4e:	6023      	str	r3, [r4, #0]
 800bf50:	2378      	movs	r3, #120	; 0x78
 800bf52:	4828      	ldr	r0, [pc, #160]	; (800bff4 <_printf_i+0x248>)
 800bf54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bf58:	e7e3      	b.n	800bf22 <_printf_i+0x176>
 800bf5a:	065e      	lsls	r6, r3, #25
 800bf5c:	bf48      	it	mi
 800bf5e:	b2ad      	uxthmi	r5, r5
 800bf60:	e7e6      	b.n	800bf30 <_printf_i+0x184>
 800bf62:	4616      	mov	r6, r2
 800bf64:	e7bb      	b.n	800bede <_printf_i+0x132>
 800bf66:	680b      	ldr	r3, [r1, #0]
 800bf68:	6826      	ldr	r6, [r4, #0]
 800bf6a:	1d1d      	adds	r5, r3, #4
 800bf6c:	6960      	ldr	r0, [r4, #20]
 800bf6e:	600d      	str	r5, [r1, #0]
 800bf70:	0635      	lsls	r5, r6, #24
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	d501      	bpl.n	800bf7a <_printf_i+0x1ce>
 800bf76:	6018      	str	r0, [r3, #0]
 800bf78:	e002      	b.n	800bf80 <_printf_i+0x1d4>
 800bf7a:	0671      	lsls	r1, r6, #25
 800bf7c:	d5fb      	bpl.n	800bf76 <_printf_i+0x1ca>
 800bf7e:	8018      	strh	r0, [r3, #0]
 800bf80:	2300      	movs	r3, #0
 800bf82:	4616      	mov	r6, r2
 800bf84:	6123      	str	r3, [r4, #16]
 800bf86:	e7ba      	b.n	800befe <_printf_i+0x152>
 800bf88:	680b      	ldr	r3, [r1, #0]
 800bf8a:	1d1a      	adds	r2, r3, #4
 800bf8c:	600a      	str	r2, [r1, #0]
 800bf8e:	681e      	ldr	r6, [r3, #0]
 800bf90:	2100      	movs	r1, #0
 800bf92:	4630      	mov	r0, r6
 800bf94:	6862      	ldr	r2, [r4, #4]
 800bf96:	f001 f8da 	bl	800d14e <memchr>
 800bf9a:	b108      	cbz	r0, 800bfa0 <_printf_i+0x1f4>
 800bf9c:	1b80      	subs	r0, r0, r6
 800bf9e:	6060      	str	r0, [r4, #4]
 800bfa0:	6863      	ldr	r3, [r4, #4]
 800bfa2:	6123      	str	r3, [r4, #16]
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfaa:	e7a8      	b.n	800befe <_printf_i+0x152>
 800bfac:	4632      	mov	r2, r6
 800bfae:	4649      	mov	r1, r9
 800bfb0:	4640      	mov	r0, r8
 800bfb2:	6923      	ldr	r3, [r4, #16]
 800bfb4:	47d0      	blx	sl
 800bfb6:	3001      	adds	r0, #1
 800bfb8:	d0ab      	beq.n	800bf12 <_printf_i+0x166>
 800bfba:	6823      	ldr	r3, [r4, #0]
 800bfbc:	079b      	lsls	r3, r3, #30
 800bfbe:	d413      	bmi.n	800bfe8 <_printf_i+0x23c>
 800bfc0:	68e0      	ldr	r0, [r4, #12]
 800bfc2:	9b03      	ldr	r3, [sp, #12]
 800bfc4:	4298      	cmp	r0, r3
 800bfc6:	bfb8      	it	lt
 800bfc8:	4618      	movlt	r0, r3
 800bfca:	e7a4      	b.n	800bf16 <_printf_i+0x16a>
 800bfcc:	2301      	movs	r3, #1
 800bfce:	4632      	mov	r2, r6
 800bfd0:	4649      	mov	r1, r9
 800bfd2:	4640      	mov	r0, r8
 800bfd4:	47d0      	blx	sl
 800bfd6:	3001      	adds	r0, #1
 800bfd8:	d09b      	beq.n	800bf12 <_printf_i+0x166>
 800bfda:	3501      	adds	r5, #1
 800bfdc:	68e3      	ldr	r3, [r4, #12]
 800bfde:	9903      	ldr	r1, [sp, #12]
 800bfe0:	1a5b      	subs	r3, r3, r1
 800bfe2:	42ab      	cmp	r3, r5
 800bfe4:	dcf2      	bgt.n	800bfcc <_printf_i+0x220>
 800bfe6:	e7eb      	b.n	800bfc0 <_printf_i+0x214>
 800bfe8:	2500      	movs	r5, #0
 800bfea:	f104 0619 	add.w	r6, r4, #25
 800bfee:	e7f5      	b.n	800bfdc <_printf_i+0x230>
 800bff0:	0800f5f6 	.word	0x0800f5f6
 800bff4:	0800f607 	.word	0x0800f607

0800bff8 <iprintf>:
 800bff8:	b40f      	push	{r0, r1, r2, r3}
 800bffa:	4b0a      	ldr	r3, [pc, #40]	; (800c024 <iprintf+0x2c>)
 800bffc:	b513      	push	{r0, r1, r4, lr}
 800bffe:	681c      	ldr	r4, [r3, #0]
 800c000:	b124      	cbz	r4, 800c00c <iprintf+0x14>
 800c002:	69a3      	ldr	r3, [r4, #24]
 800c004:	b913      	cbnz	r3, 800c00c <iprintf+0x14>
 800c006:	4620      	mov	r0, r4
 800c008:	f000 fffc 	bl	800d004 <__sinit>
 800c00c:	ab05      	add	r3, sp, #20
 800c00e:	4620      	mov	r0, r4
 800c010:	9a04      	ldr	r2, [sp, #16]
 800c012:	68a1      	ldr	r1, [r4, #8]
 800c014:	9301      	str	r3, [sp, #4]
 800c016:	f001 fdd7 	bl	800dbc8 <_vfiprintf_r>
 800c01a:	b002      	add	sp, #8
 800c01c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c020:	b004      	add	sp, #16
 800c022:	4770      	bx	lr
 800c024:	2000001c 	.word	0x2000001c

0800c028 <_sbrk_r>:
 800c028:	b538      	push	{r3, r4, r5, lr}
 800c02a:	2300      	movs	r3, #0
 800c02c:	4d05      	ldr	r5, [pc, #20]	; (800c044 <_sbrk_r+0x1c>)
 800c02e:	4604      	mov	r4, r0
 800c030:	4608      	mov	r0, r1
 800c032:	602b      	str	r3, [r5, #0]
 800c034:	f7f6 fc5c 	bl	80028f0 <_sbrk>
 800c038:	1c43      	adds	r3, r0, #1
 800c03a:	d102      	bne.n	800c042 <_sbrk_r+0x1a>
 800c03c:	682b      	ldr	r3, [r5, #0]
 800c03e:	b103      	cbz	r3, 800c042 <_sbrk_r+0x1a>
 800c040:	6023      	str	r3, [r4, #0]
 800c042:	bd38      	pop	{r3, r4, r5, pc}
 800c044:	20000bb8 	.word	0x20000bb8

0800c048 <siprintf>:
 800c048:	b40e      	push	{r1, r2, r3}
 800c04a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c04e:	b500      	push	{lr}
 800c050:	b09c      	sub	sp, #112	; 0x70
 800c052:	ab1d      	add	r3, sp, #116	; 0x74
 800c054:	9002      	str	r0, [sp, #8]
 800c056:	9006      	str	r0, [sp, #24]
 800c058:	9107      	str	r1, [sp, #28]
 800c05a:	9104      	str	r1, [sp, #16]
 800c05c:	4808      	ldr	r0, [pc, #32]	; (800c080 <siprintf+0x38>)
 800c05e:	4909      	ldr	r1, [pc, #36]	; (800c084 <siprintf+0x3c>)
 800c060:	f853 2b04 	ldr.w	r2, [r3], #4
 800c064:	9105      	str	r1, [sp, #20]
 800c066:	6800      	ldr	r0, [r0, #0]
 800c068:	a902      	add	r1, sp, #8
 800c06a:	9301      	str	r3, [sp, #4]
 800c06c:	f001 fc84 	bl	800d978 <_svfiprintf_r>
 800c070:	2200      	movs	r2, #0
 800c072:	9b02      	ldr	r3, [sp, #8]
 800c074:	701a      	strb	r2, [r3, #0]
 800c076:	b01c      	add	sp, #112	; 0x70
 800c078:	f85d eb04 	ldr.w	lr, [sp], #4
 800c07c:	b003      	add	sp, #12
 800c07e:	4770      	bx	lr
 800c080:	2000001c 	.word	0x2000001c
 800c084:	ffff0208 	.word	0xffff0208

0800c088 <strncpy>:
 800c088:	4603      	mov	r3, r0
 800c08a:	b510      	push	{r4, lr}
 800c08c:	3901      	subs	r1, #1
 800c08e:	b132      	cbz	r2, 800c09e <strncpy+0x16>
 800c090:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c094:	3a01      	subs	r2, #1
 800c096:	f803 4b01 	strb.w	r4, [r3], #1
 800c09a:	2c00      	cmp	r4, #0
 800c09c:	d1f7      	bne.n	800c08e <strncpy+0x6>
 800c09e:	2100      	movs	r1, #0
 800c0a0:	441a      	add	r2, r3
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d100      	bne.n	800c0a8 <strncpy+0x20>
 800c0a6:	bd10      	pop	{r4, pc}
 800c0a8:	f803 1b01 	strb.w	r1, [r3], #1
 800c0ac:	e7f9      	b.n	800c0a2 <strncpy+0x1a>

0800c0ae <strnlen>:
 800c0ae:	4602      	mov	r2, r0
 800c0b0:	b510      	push	{r4, lr}
 800c0b2:	4401      	add	r1, r0
 800c0b4:	428a      	cmp	r2, r1
 800c0b6:	4613      	mov	r3, r2
 800c0b8:	d101      	bne.n	800c0be <strnlen+0x10>
 800c0ba:	1a18      	subs	r0, r3, r0
 800c0bc:	bd10      	pop	{r4, pc}
 800c0be:	781c      	ldrb	r4, [r3, #0]
 800c0c0:	3201      	adds	r2, #1
 800c0c2:	2c00      	cmp	r4, #0
 800c0c4:	d1f6      	bne.n	800c0b4 <strnlen+0x6>
 800c0c6:	e7f8      	b.n	800c0ba <strnlen+0xc>

0800c0c8 <_strtol_l.isra.0>:
 800c0c8:	2b01      	cmp	r3, #1
 800c0ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0ce:	4686      	mov	lr, r0
 800c0d0:	d001      	beq.n	800c0d6 <_strtol_l.isra.0+0xe>
 800c0d2:	2b24      	cmp	r3, #36	; 0x24
 800c0d4:	d906      	bls.n	800c0e4 <_strtol_l.isra.0+0x1c>
 800c0d6:	f7ff fa47 	bl	800b568 <__errno>
 800c0da:	2316      	movs	r3, #22
 800c0dc:	6003      	str	r3, [r0, #0]
 800c0de:	2000      	movs	r0, #0
 800c0e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0e4:	468c      	mov	ip, r1
 800c0e6:	4e3a      	ldr	r6, [pc, #232]	; (800c1d0 <_strtol_l.isra.0+0x108>)
 800c0e8:	4660      	mov	r0, ip
 800c0ea:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c0ee:	5da5      	ldrb	r5, [r4, r6]
 800c0f0:	f015 0508 	ands.w	r5, r5, #8
 800c0f4:	d1f8      	bne.n	800c0e8 <_strtol_l.isra.0+0x20>
 800c0f6:	2c2d      	cmp	r4, #45	; 0x2d
 800c0f8:	d133      	bne.n	800c162 <_strtol_l.isra.0+0x9a>
 800c0fa:	f04f 0801 	mov.w	r8, #1
 800c0fe:	f89c 4000 	ldrb.w	r4, [ip]
 800c102:	f100 0c02 	add.w	ip, r0, #2
 800c106:	2b00      	cmp	r3, #0
 800c108:	d05d      	beq.n	800c1c6 <_strtol_l.isra.0+0xfe>
 800c10a:	2b10      	cmp	r3, #16
 800c10c:	d10c      	bne.n	800c128 <_strtol_l.isra.0+0x60>
 800c10e:	2c30      	cmp	r4, #48	; 0x30
 800c110:	d10a      	bne.n	800c128 <_strtol_l.isra.0+0x60>
 800c112:	f89c 0000 	ldrb.w	r0, [ip]
 800c116:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c11a:	2858      	cmp	r0, #88	; 0x58
 800c11c:	d14e      	bne.n	800c1bc <_strtol_l.isra.0+0xf4>
 800c11e:	2310      	movs	r3, #16
 800c120:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800c124:	f10c 0c02 	add.w	ip, ip, #2
 800c128:	2500      	movs	r5, #0
 800c12a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800c12e:	3f01      	subs	r7, #1
 800c130:	fbb7 f9f3 	udiv	r9, r7, r3
 800c134:	4628      	mov	r0, r5
 800c136:	fb03 7a19 	mls	sl, r3, r9, r7
 800c13a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800c13e:	2e09      	cmp	r6, #9
 800c140:	d818      	bhi.n	800c174 <_strtol_l.isra.0+0xac>
 800c142:	4634      	mov	r4, r6
 800c144:	42a3      	cmp	r3, r4
 800c146:	dd24      	ble.n	800c192 <_strtol_l.isra.0+0xca>
 800c148:	2d00      	cmp	r5, #0
 800c14a:	db1f      	blt.n	800c18c <_strtol_l.isra.0+0xc4>
 800c14c:	4581      	cmp	r9, r0
 800c14e:	d31d      	bcc.n	800c18c <_strtol_l.isra.0+0xc4>
 800c150:	d101      	bne.n	800c156 <_strtol_l.isra.0+0x8e>
 800c152:	45a2      	cmp	sl, r4
 800c154:	db1a      	blt.n	800c18c <_strtol_l.isra.0+0xc4>
 800c156:	2501      	movs	r5, #1
 800c158:	fb00 4003 	mla	r0, r0, r3, r4
 800c15c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c160:	e7eb      	b.n	800c13a <_strtol_l.isra.0+0x72>
 800c162:	2c2b      	cmp	r4, #43	; 0x2b
 800c164:	bf08      	it	eq
 800c166:	f89c 4000 	ldrbeq.w	r4, [ip]
 800c16a:	46a8      	mov	r8, r5
 800c16c:	bf08      	it	eq
 800c16e:	f100 0c02 	addeq.w	ip, r0, #2
 800c172:	e7c8      	b.n	800c106 <_strtol_l.isra.0+0x3e>
 800c174:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800c178:	2e19      	cmp	r6, #25
 800c17a:	d801      	bhi.n	800c180 <_strtol_l.isra.0+0xb8>
 800c17c:	3c37      	subs	r4, #55	; 0x37
 800c17e:	e7e1      	b.n	800c144 <_strtol_l.isra.0+0x7c>
 800c180:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800c184:	2e19      	cmp	r6, #25
 800c186:	d804      	bhi.n	800c192 <_strtol_l.isra.0+0xca>
 800c188:	3c57      	subs	r4, #87	; 0x57
 800c18a:	e7db      	b.n	800c144 <_strtol_l.isra.0+0x7c>
 800c18c:	f04f 35ff 	mov.w	r5, #4294967295
 800c190:	e7e4      	b.n	800c15c <_strtol_l.isra.0+0x94>
 800c192:	2d00      	cmp	r5, #0
 800c194:	da08      	bge.n	800c1a8 <_strtol_l.isra.0+0xe0>
 800c196:	2322      	movs	r3, #34	; 0x22
 800c198:	4638      	mov	r0, r7
 800c19a:	f8ce 3000 	str.w	r3, [lr]
 800c19e:	2a00      	cmp	r2, #0
 800c1a0:	d09e      	beq.n	800c0e0 <_strtol_l.isra.0+0x18>
 800c1a2:	f10c 31ff 	add.w	r1, ip, #4294967295
 800c1a6:	e007      	b.n	800c1b8 <_strtol_l.isra.0+0xf0>
 800c1a8:	f1b8 0f00 	cmp.w	r8, #0
 800c1ac:	d000      	beq.n	800c1b0 <_strtol_l.isra.0+0xe8>
 800c1ae:	4240      	negs	r0, r0
 800c1b0:	2a00      	cmp	r2, #0
 800c1b2:	d095      	beq.n	800c0e0 <_strtol_l.isra.0+0x18>
 800c1b4:	2d00      	cmp	r5, #0
 800c1b6:	d1f4      	bne.n	800c1a2 <_strtol_l.isra.0+0xda>
 800c1b8:	6011      	str	r1, [r2, #0]
 800c1ba:	e791      	b.n	800c0e0 <_strtol_l.isra.0+0x18>
 800c1bc:	2430      	movs	r4, #48	; 0x30
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d1b2      	bne.n	800c128 <_strtol_l.isra.0+0x60>
 800c1c2:	2308      	movs	r3, #8
 800c1c4:	e7b0      	b.n	800c128 <_strtol_l.isra.0+0x60>
 800c1c6:	2c30      	cmp	r4, #48	; 0x30
 800c1c8:	d0a3      	beq.n	800c112 <_strtol_l.isra.0+0x4a>
 800c1ca:	230a      	movs	r3, #10
 800c1cc:	e7ac      	b.n	800c128 <_strtol_l.isra.0+0x60>
 800c1ce:	bf00      	nop
 800c1d0:	0800f619 	.word	0x0800f619

0800c1d4 <strtol>:
 800c1d4:	4613      	mov	r3, r2
 800c1d6:	460a      	mov	r2, r1
 800c1d8:	4601      	mov	r1, r0
 800c1da:	4802      	ldr	r0, [pc, #8]	; (800c1e4 <strtol+0x10>)
 800c1dc:	6800      	ldr	r0, [r0, #0]
 800c1de:	f7ff bf73 	b.w	800c0c8 <_strtol_l.isra.0>
 800c1e2:	bf00      	nop
 800c1e4:	2000001c 	.word	0x2000001c

0800c1e8 <_vsniprintf_r>:
 800c1e8:	b530      	push	{r4, r5, lr}
 800c1ea:	1e14      	subs	r4, r2, #0
 800c1ec:	4605      	mov	r5, r0
 800c1ee:	b09b      	sub	sp, #108	; 0x6c
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	da05      	bge.n	800c200 <_vsniprintf_r+0x18>
 800c1f4:	238b      	movs	r3, #139	; 0x8b
 800c1f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c1fa:	602b      	str	r3, [r5, #0]
 800c1fc:	b01b      	add	sp, #108	; 0x6c
 800c1fe:	bd30      	pop	{r4, r5, pc}
 800c200:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c204:	f8ad 300c 	strh.w	r3, [sp, #12]
 800c208:	bf0c      	ite	eq
 800c20a:	4623      	moveq	r3, r4
 800c20c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c210:	9302      	str	r3, [sp, #8]
 800c212:	9305      	str	r3, [sp, #20]
 800c214:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c218:	4602      	mov	r2, r0
 800c21a:	9100      	str	r1, [sp, #0]
 800c21c:	9104      	str	r1, [sp, #16]
 800c21e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800c222:	4669      	mov	r1, sp
 800c224:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c226:	4628      	mov	r0, r5
 800c228:	f001 fba6 	bl	800d978 <_svfiprintf_r>
 800c22c:	1c43      	adds	r3, r0, #1
 800c22e:	bfbc      	itt	lt
 800c230:	238b      	movlt	r3, #139	; 0x8b
 800c232:	602b      	strlt	r3, [r5, #0]
 800c234:	2c00      	cmp	r4, #0
 800c236:	d0e1      	beq.n	800c1fc <_vsniprintf_r+0x14>
 800c238:	2200      	movs	r2, #0
 800c23a:	9b00      	ldr	r3, [sp, #0]
 800c23c:	701a      	strb	r2, [r3, #0]
 800c23e:	e7dd      	b.n	800c1fc <_vsniprintf_r+0x14>

0800c240 <vsniprintf>:
 800c240:	b507      	push	{r0, r1, r2, lr}
 800c242:	9300      	str	r3, [sp, #0]
 800c244:	4613      	mov	r3, r2
 800c246:	460a      	mov	r2, r1
 800c248:	4601      	mov	r1, r0
 800c24a:	4803      	ldr	r0, [pc, #12]	; (800c258 <vsniprintf+0x18>)
 800c24c:	6800      	ldr	r0, [r0, #0]
 800c24e:	f7ff ffcb 	bl	800c1e8 <_vsniprintf_r>
 800c252:	b003      	add	sp, #12
 800c254:	f85d fb04 	ldr.w	pc, [sp], #4
 800c258:	2000001c 	.word	0x2000001c

0800c25c <quorem>:
 800c25c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c260:	6903      	ldr	r3, [r0, #16]
 800c262:	690c      	ldr	r4, [r1, #16]
 800c264:	4607      	mov	r7, r0
 800c266:	42a3      	cmp	r3, r4
 800c268:	f2c0 8083 	blt.w	800c372 <quorem+0x116>
 800c26c:	3c01      	subs	r4, #1
 800c26e:	f100 0514 	add.w	r5, r0, #20
 800c272:	f101 0814 	add.w	r8, r1, #20
 800c276:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c27a:	9301      	str	r3, [sp, #4]
 800c27c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c280:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c284:	3301      	adds	r3, #1
 800c286:	429a      	cmp	r2, r3
 800c288:	fbb2 f6f3 	udiv	r6, r2, r3
 800c28c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c290:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c294:	d332      	bcc.n	800c2fc <quorem+0xa0>
 800c296:	f04f 0e00 	mov.w	lr, #0
 800c29a:	4640      	mov	r0, r8
 800c29c:	46ac      	mov	ip, r5
 800c29e:	46f2      	mov	sl, lr
 800c2a0:	f850 2b04 	ldr.w	r2, [r0], #4
 800c2a4:	b293      	uxth	r3, r2
 800c2a6:	fb06 e303 	mla	r3, r6, r3, lr
 800c2aa:	0c12      	lsrs	r2, r2, #16
 800c2ac:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c2b0:	fb06 e202 	mla	r2, r6, r2, lr
 800c2b4:	b29b      	uxth	r3, r3
 800c2b6:	ebaa 0303 	sub.w	r3, sl, r3
 800c2ba:	f8dc a000 	ldr.w	sl, [ip]
 800c2be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c2c2:	fa1f fa8a 	uxth.w	sl, sl
 800c2c6:	4453      	add	r3, sl
 800c2c8:	fa1f fa82 	uxth.w	sl, r2
 800c2cc:	f8dc 2000 	ldr.w	r2, [ip]
 800c2d0:	4581      	cmp	r9, r0
 800c2d2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800c2d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c2da:	b29b      	uxth	r3, r3
 800c2dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c2e0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c2e4:	f84c 3b04 	str.w	r3, [ip], #4
 800c2e8:	d2da      	bcs.n	800c2a0 <quorem+0x44>
 800c2ea:	f855 300b 	ldr.w	r3, [r5, fp]
 800c2ee:	b92b      	cbnz	r3, 800c2fc <quorem+0xa0>
 800c2f0:	9b01      	ldr	r3, [sp, #4]
 800c2f2:	3b04      	subs	r3, #4
 800c2f4:	429d      	cmp	r5, r3
 800c2f6:	461a      	mov	r2, r3
 800c2f8:	d32f      	bcc.n	800c35a <quorem+0xfe>
 800c2fa:	613c      	str	r4, [r7, #16]
 800c2fc:	4638      	mov	r0, r7
 800c2fe:	f001 f9c9 	bl	800d694 <__mcmp>
 800c302:	2800      	cmp	r0, #0
 800c304:	db25      	blt.n	800c352 <quorem+0xf6>
 800c306:	4628      	mov	r0, r5
 800c308:	f04f 0c00 	mov.w	ip, #0
 800c30c:	3601      	adds	r6, #1
 800c30e:	f858 1b04 	ldr.w	r1, [r8], #4
 800c312:	f8d0 e000 	ldr.w	lr, [r0]
 800c316:	b28b      	uxth	r3, r1
 800c318:	ebac 0303 	sub.w	r3, ip, r3
 800c31c:	fa1f f28e 	uxth.w	r2, lr
 800c320:	4413      	add	r3, r2
 800c322:	0c0a      	lsrs	r2, r1, #16
 800c324:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c328:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c32c:	b29b      	uxth	r3, r3
 800c32e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c332:	45c1      	cmp	r9, r8
 800c334:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c338:	f840 3b04 	str.w	r3, [r0], #4
 800c33c:	d2e7      	bcs.n	800c30e <quorem+0xb2>
 800c33e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c342:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c346:	b922      	cbnz	r2, 800c352 <quorem+0xf6>
 800c348:	3b04      	subs	r3, #4
 800c34a:	429d      	cmp	r5, r3
 800c34c:	461a      	mov	r2, r3
 800c34e:	d30a      	bcc.n	800c366 <quorem+0x10a>
 800c350:	613c      	str	r4, [r7, #16]
 800c352:	4630      	mov	r0, r6
 800c354:	b003      	add	sp, #12
 800c356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c35a:	6812      	ldr	r2, [r2, #0]
 800c35c:	3b04      	subs	r3, #4
 800c35e:	2a00      	cmp	r2, #0
 800c360:	d1cb      	bne.n	800c2fa <quorem+0x9e>
 800c362:	3c01      	subs	r4, #1
 800c364:	e7c6      	b.n	800c2f4 <quorem+0x98>
 800c366:	6812      	ldr	r2, [r2, #0]
 800c368:	3b04      	subs	r3, #4
 800c36a:	2a00      	cmp	r2, #0
 800c36c:	d1f0      	bne.n	800c350 <quorem+0xf4>
 800c36e:	3c01      	subs	r4, #1
 800c370:	e7eb      	b.n	800c34a <quorem+0xee>
 800c372:	2000      	movs	r0, #0
 800c374:	e7ee      	b.n	800c354 <quorem+0xf8>
	...

0800c378 <_dtoa_r>:
 800c378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c37c:	4616      	mov	r6, r2
 800c37e:	461f      	mov	r7, r3
 800c380:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c382:	b099      	sub	sp, #100	; 0x64
 800c384:	4605      	mov	r5, r0
 800c386:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800c38a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800c38e:	b974      	cbnz	r4, 800c3ae <_dtoa_r+0x36>
 800c390:	2010      	movs	r0, #16
 800c392:	f7ff f913 	bl	800b5bc <malloc>
 800c396:	4602      	mov	r2, r0
 800c398:	6268      	str	r0, [r5, #36]	; 0x24
 800c39a:	b920      	cbnz	r0, 800c3a6 <_dtoa_r+0x2e>
 800c39c:	21ea      	movs	r1, #234	; 0xea
 800c39e:	4bae      	ldr	r3, [pc, #696]	; (800c658 <_dtoa_r+0x2e0>)
 800c3a0:	48ae      	ldr	r0, [pc, #696]	; (800c65c <_dtoa_r+0x2e4>)
 800c3a2:	f001 fe57 	bl	800e054 <__assert_func>
 800c3a6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c3aa:	6004      	str	r4, [r0, #0]
 800c3ac:	60c4      	str	r4, [r0, #12]
 800c3ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c3b0:	6819      	ldr	r1, [r3, #0]
 800c3b2:	b151      	cbz	r1, 800c3ca <_dtoa_r+0x52>
 800c3b4:	685a      	ldr	r2, [r3, #4]
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	4093      	lsls	r3, r2
 800c3ba:	604a      	str	r2, [r1, #4]
 800c3bc:	608b      	str	r3, [r1, #8]
 800c3be:	4628      	mov	r0, r5
 800c3c0:	f000 ff2e 	bl	800d220 <_Bfree>
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c3c8:	601a      	str	r2, [r3, #0]
 800c3ca:	1e3b      	subs	r3, r7, #0
 800c3cc:	bfaf      	iteee	ge
 800c3ce:	2300      	movge	r3, #0
 800c3d0:	2201      	movlt	r2, #1
 800c3d2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c3d6:	9305      	strlt	r3, [sp, #20]
 800c3d8:	bfa8      	it	ge
 800c3da:	f8c8 3000 	strge.w	r3, [r8]
 800c3de:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800c3e2:	4b9f      	ldr	r3, [pc, #636]	; (800c660 <_dtoa_r+0x2e8>)
 800c3e4:	bfb8      	it	lt
 800c3e6:	f8c8 2000 	strlt.w	r2, [r8]
 800c3ea:	ea33 0309 	bics.w	r3, r3, r9
 800c3ee:	d119      	bne.n	800c424 <_dtoa_r+0xac>
 800c3f0:	f242 730f 	movw	r3, #9999	; 0x270f
 800c3f4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c3f6:	6013      	str	r3, [r2, #0]
 800c3f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c3fc:	4333      	orrs	r3, r6
 800c3fe:	f000 8580 	beq.w	800cf02 <_dtoa_r+0xb8a>
 800c402:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c404:	b953      	cbnz	r3, 800c41c <_dtoa_r+0xa4>
 800c406:	4b97      	ldr	r3, [pc, #604]	; (800c664 <_dtoa_r+0x2ec>)
 800c408:	e022      	b.n	800c450 <_dtoa_r+0xd8>
 800c40a:	4b97      	ldr	r3, [pc, #604]	; (800c668 <_dtoa_r+0x2f0>)
 800c40c:	9308      	str	r3, [sp, #32]
 800c40e:	3308      	adds	r3, #8
 800c410:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c412:	6013      	str	r3, [r2, #0]
 800c414:	9808      	ldr	r0, [sp, #32]
 800c416:	b019      	add	sp, #100	; 0x64
 800c418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c41c:	4b91      	ldr	r3, [pc, #580]	; (800c664 <_dtoa_r+0x2ec>)
 800c41e:	9308      	str	r3, [sp, #32]
 800c420:	3303      	adds	r3, #3
 800c422:	e7f5      	b.n	800c410 <_dtoa_r+0x98>
 800c424:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c428:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800c42c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c430:	2200      	movs	r2, #0
 800c432:	2300      	movs	r3, #0
 800c434:	f7f4 fb24 	bl	8000a80 <__aeabi_dcmpeq>
 800c438:	4680      	mov	r8, r0
 800c43a:	b158      	cbz	r0, 800c454 <_dtoa_r+0xdc>
 800c43c:	2301      	movs	r3, #1
 800c43e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800c440:	6013      	str	r3, [r2, #0]
 800c442:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c444:	2b00      	cmp	r3, #0
 800c446:	f000 8559 	beq.w	800cefc <_dtoa_r+0xb84>
 800c44a:	4888      	ldr	r0, [pc, #544]	; (800c66c <_dtoa_r+0x2f4>)
 800c44c:	6018      	str	r0, [r3, #0]
 800c44e:	1e43      	subs	r3, r0, #1
 800c450:	9308      	str	r3, [sp, #32]
 800c452:	e7df      	b.n	800c414 <_dtoa_r+0x9c>
 800c454:	ab16      	add	r3, sp, #88	; 0x58
 800c456:	9301      	str	r3, [sp, #4]
 800c458:	ab17      	add	r3, sp, #92	; 0x5c
 800c45a:	9300      	str	r3, [sp, #0]
 800c45c:	4628      	mov	r0, r5
 800c45e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c462:	f001 f9c3 	bl	800d7ec <__d2b>
 800c466:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c46a:	4682      	mov	sl, r0
 800c46c:	2c00      	cmp	r4, #0
 800c46e:	d07e      	beq.n	800c56e <_dtoa_r+0x1f6>
 800c470:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c474:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c476:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c47a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c47e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800c482:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800c486:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800c48a:	2200      	movs	r2, #0
 800c48c:	4b78      	ldr	r3, [pc, #480]	; (800c670 <_dtoa_r+0x2f8>)
 800c48e:	f7f3 fed7 	bl	8000240 <__aeabi_dsub>
 800c492:	a36b      	add	r3, pc, #428	; (adr r3, 800c640 <_dtoa_r+0x2c8>)
 800c494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c498:	f7f4 f88a 	bl	80005b0 <__aeabi_dmul>
 800c49c:	a36a      	add	r3, pc, #424	; (adr r3, 800c648 <_dtoa_r+0x2d0>)
 800c49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a2:	f7f3 fecf 	bl	8000244 <__adddf3>
 800c4a6:	4606      	mov	r6, r0
 800c4a8:	4620      	mov	r0, r4
 800c4aa:	460f      	mov	r7, r1
 800c4ac:	f7f4 f816 	bl	80004dc <__aeabi_i2d>
 800c4b0:	a367      	add	r3, pc, #412	; (adr r3, 800c650 <_dtoa_r+0x2d8>)
 800c4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b6:	f7f4 f87b 	bl	80005b0 <__aeabi_dmul>
 800c4ba:	4602      	mov	r2, r0
 800c4bc:	460b      	mov	r3, r1
 800c4be:	4630      	mov	r0, r6
 800c4c0:	4639      	mov	r1, r7
 800c4c2:	f7f3 febf 	bl	8000244 <__adddf3>
 800c4c6:	4606      	mov	r6, r0
 800c4c8:	460f      	mov	r7, r1
 800c4ca:	f7f4 fb21 	bl	8000b10 <__aeabi_d2iz>
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	4681      	mov	r9, r0
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	4630      	mov	r0, r6
 800c4d6:	4639      	mov	r1, r7
 800c4d8:	f7f4 fadc 	bl	8000a94 <__aeabi_dcmplt>
 800c4dc:	b148      	cbz	r0, 800c4f2 <_dtoa_r+0x17a>
 800c4de:	4648      	mov	r0, r9
 800c4e0:	f7f3 fffc 	bl	80004dc <__aeabi_i2d>
 800c4e4:	4632      	mov	r2, r6
 800c4e6:	463b      	mov	r3, r7
 800c4e8:	f7f4 faca 	bl	8000a80 <__aeabi_dcmpeq>
 800c4ec:	b908      	cbnz	r0, 800c4f2 <_dtoa_r+0x17a>
 800c4ee:	f109 39ff 	add.w	r9, r9, #4294967295
 800c4f2:	f1b9 0f16 	cmp.w	r9, #22
 800c4f6:	d857      	bhi.n	800c5a8 <_dtoa_r+0x230>
 800c4f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c4fc:	4b5d      	ldr	r3, [pc, #372]	; (800c674 <_dtoa_r+0x2fc>)
 800c4fe:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800c502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c506:	f7f4 fac5 	bl	8000a94 <__aeabi_dcmplt>
 800c50a:	2800      	cmp	r0, #0
 800c50c:	d04e      	beq.n	800c5ac <_dtoa_r+0x234>
 800c50e:	2300      	movs	r3, #0
 800c510:	f109 39ff 	add.w	r9, r9, #4294967295
 800c514:	930f      	str	r3, [sp, #60]	; 0x3c
 800c516:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c518:	1b1c      	subs	r4, r3, r4
 800c51a:	1e63      	subs	r3, r4, #1
 800c51c:	9309      	str	r3, [sp, #36]	; 0x24
 800c51e:	bf49      	itett	mi
 800c520:	f1c4 0301 	rsbmi	r3, r4, #1
 800c524:	2300      	movpl	r3, #0
 800c526:	9306      	strmi	r3, [sp, #24]
 800c528:	2300      	movmi	r3, #0
 800c52a:	bf54      	ite	pl
 800c52c:	9306      	strpl	r3, [sp, #24]
 800c52e:	9309      	strmi	r3, [sp, #36]	; 0x24
 800c530:	f1b9 0f00 	cmp.w	r9, #0
 800c534:	db3c      	blt.n	800c5b0 <_dtoa_r+0x238>
 800c536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c538:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c53c:	444b      	add	r3, r9
 800c53e:	9309      	str	r3, [sp, #36]	; 0x24
 800c540:	2300      	movs	r3, #0
 800c542:	930a      	str	r3, [sp, #40]	; 0x28
 800c544:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c546:	2b09      	cmp	r3, #9
 800c548:	d86c      	bhi.n	800c624 <_dtoa_r+0x2ac>
 800c54a:	2b05      	cmp	r3, #5
 800c54c:	bfc4      	itt	gt
 800c54e:	3b04      	subgt	r3, #4
 800c550:	9322      	strgt	r3, [sp, #136]	; 0x88
 800c552:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c554:	bfc8      	it	gt
 800c556:	2400      	movgt	r4, #0
 800c558:	f1a3 0302 	sub.w	r3, r3, #2
 800c55c:	bfd8      	it	le
 800c55e:	2401      	movle	r4, #1
 800c560:	2b03      	cmp	r3, #3
 800c562:	f200 808b 	bhi.w	800c67c <_dtoa_r+0x304>
 800c566:	e8df f003 	tbb	[pc, r3]
 800c56a:	4f2d      	.short	0x4f2d
 800c56c:	5b4d      	.short	0x5b4d
 800c56e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800c572:	441c      	add	r4, r3
 800c574:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800c578:	2b20      	cmp	r3, #32
 800c57a:	bfc3      	ittte	gt
 800c57c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c580:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800c584:	fa09 f303 	lslgt.w	r3, r9, r3
 800c588:	f1c3 0320 	rsble	r3, r3, #32
 800c58c:	bfc6      	itte	gt
 800c58e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c592:	4318      	orrgt	r0, r3
 800c594:	fa06 f003 	lslle.w	r0, r6, r3
 800c598:	f7f3 ff90 	bl	80004bc <__aeabi_ui2d>
 800c59c:	2301      	movs	r3, #1
 800c59e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800c5a2:	3c01      	subs	r4, #1
 800c5a4:	9313      	str	r3, [sp, #76]	; 0x4c
 800c5a6:	e770      	b.n	800c48a <_dtoa_r+0x112>
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	e7b3      	b.n	800c514 <_dtoa_r+0x19c>
 800c5ac:	900f      	str	r0, [sp, #60]	; 0x3c
 800c5ae:	e7b2      	b.n	800c516 <_dtoa_r+0x19e>
 800c5b0:	9b06      	ldr	r3, [sp, #24]
 800c5b2:	eba3 0309 	sub.w	r3, r3, r9
 800c5b6:	9306      	str	r3, [sp, #24]
 800c5b8:	f1c9 0300 	rsb	r3, r9, #0
 800c5bc:	930a      	str	r3, [sp, #40]	; 0x28
 800c5be:	2300      	movs	r3, #0
 800c5c0:	930e      	str	r3, [sp, #56]	; 0x38
 800c5c2:	e7bf      	b.n	800c544 <_dtoa_r+0x1cc>
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c5c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	dc59      	bgt.n	800c682 <_dtoa_r+0x30a>
 800c5ce:	f04f 0b01 	mov.w	fp, #1
 800c5d2:	465b      	mov	r3, fp
 800c5d4:	f8cd b008 	str.w	fp, [sp, #8]
 800c5d8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800c5dc:	2200      	movs	r2, #0
 800c5de:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800c5e0:	6042      	str	r2, [r0, #4]
 800c5e2:	2204      	movs	r2, #4
 800c5e4:	f102 0614 	add.w	r6, r2, #20
 800c5e8:	429e      	cmp	r6, r3
 800c5ea:	6841      	ldr	r1, [r0, #4]
 800c5ec:	d94f      	bls.n	800c68e <_dtoa_r+0x316>
 800c5ee:	4628      	mov	r0, r5
 800c5f0:	f000 fdd6 	bl	800d1a0 <_Balloc>
 800c5f4:	9008      	str	r0, [sp, #32]
 800c5f6:	2800      	cmp	r0, #0
 800c5f8:	d14d      	bne.n	800c696 <_dtoa_r+0x31e>
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c600:	4b1d      	ldr	r3, [pc, #116]	; (800c678 <_dtoa_r+0x300>)
 800c602:	e6cd      	b.n	800c3a0 <_dtoa_r+0x28>
 800c604:	2301      	movs	r3, #1
 800c606:	e7de      	b.n	800c5c6 <_dtoa_r+0x24e>
 800c608:	2300      	movs	r3, #0
 800c60a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c60c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c60e:	eb09 0b03 	add.w	fp, r9, r3
 800c612:	f10b 0301 	add.w	r3, fp, #1
 800c616:	2b01      	cmp	r3, #1
 800c618:	9302      	str	r3, [sp, #8]
 800c61a:	bfb8      	it	lt
 800c61c:	2301      	movlt	r3, #1
 800c61e:	e7dd      	b.n	800c5dc <_dtoa_r+0x264>
 800c620:	2301      	movs	r3, #1
 800c622:	e7f2      	b.n	800c60a <_dtoa_r+0x292>
 800c624:	2401      	movs	r4, #1
 800c626:	2300      	movs	r3, #0
 800c628:	940b      	str	r4, [sp, #44]	; 0x2c
 800c62a:	9322      	str	r3, [sp, #136]	; 0x88
 800c62c:	f04f 3bff 	mov.w	fp, #4294967295
 800c630:	2200      	movs	r2, #0
 800c632:	2312      	movs	r3, #18
 800c634:	f8cd b008 	str.w	fp, [sp, #8]
 800c638:	9223      	str	r2, [sp, #140]	; 0x8c
 800c63a:	e7cf      	b.n	800c5dc <_dtoa_r+0x264>
 800c63c:	f3af 8000 	nop.w
 800c640:	636f4361 	.word	0x636f4361
 800c644:	3fd287a7 	.word	0x3fd287a7
 800c648:	8b60c8b3 	.word	0x8b60c8b3
 800c64c:	3fc68a28 	.word	0x3fc68a28
 800c650:	509f79fb 	.word	0x509f79fb
 800c654:	3fd34413 	.word	0x3fd34413
 800c658:	0800f726 	.word	0x0800f726
 800c65c:	0800f73d 	.word	0x0800f73d
 800c660:	7ff00000 	.word	0x7ff00000
 800c664:	0800f722 	.word	0x0800f722
 800c668:	0800f719 	.word	0x0800f719
 800c66c:	0800f5f5 	.word	0x0800f5f5
 800c670:	3ff80000 	.word	0x3ff80000
 800c674:	0800f898 	.word	0x0800f898
 800c678:	0800f79c 	.word	0x0800f79c
 800c67c:	2301      	movs	r3, #1
 800c67e:	930b      	str	r3, [sp, #44]	; 0x2c
 800c680:	e7d4      	b.n	800c62c <_dtoa_r+0x2b4>
 800c682:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800c686:	465b      	mov	r3, fp
 800c688:	f8cd b008 	str.w	fp, [sp, #8]
 800c68c:	e7a6      	b.n	800c5dc <_dtoa_r+0x264>
 800c68e:	3101      	adds	r1, #1
 800c690:	6041      	str	r1, [r0, #4]
 800c692:	0052      	lsls	r2, r2, #1
 800c694:	e7a6      	b.n	800c5e4 <_dtoa_r+0x26c>
 800c696:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c698:	9a08      	ldr	r2, [sp, #32]
 800c69a:	601a      	str	r2, [r3, #0]
 800c69c:	9b02      	ldr	r3, [sp, #8]
 800c69e:	2b0e      	cmp	r3, #14
 800c6a0:	f200 80a8 	bhi.w	800c7f4 <_dtoa_r+0x47c>
 800c6a4:	2c00      	cmp	r4, #0
 800c6a6:	f000 80a5 	beq.w	800c7f4 <_dtoa_r+0x47c>
 800c6aa:	f1b9 0f00 	cmp.w	r9, #0
 800c6ae:	dd34      	ble.n	800c71a <_dtoa_r+0x3a2>
 800c6b0:	4a9a      	ldr	r2, [pc, #616]	; (800c91c <_dtoa_r+0x5a4>)
 800c6b2:	f009 030f 	and.w	r3, r9, #15
 800c6b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c6ba:	f419 7f80 	tst.w	r9, #256	; 0x100
 800c6be:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c6c2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800c6c6:	ea4f 1429 	mov.w	r4, r9, asr #4
 800c6ca:	d016      	beq.n	800c6fa <_dtoa_r+0x382>
 800c6cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c6d0:	4b93      	ldr	r3, [pc, #588]	; (800c920 <_dtoa_r+0x5a8>)
 800c6d2:	2703      	movs	r7, #3
 800c6d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c6d8:	f7f4 f894 	bl	8000804 <__aeabi_ddiv>
 800c6dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c6e0:	f004 040f 	and.w	r4, r4, #15
 800c6e4:	4e8e      	ldr	r6, [pc, #568]	; (800c920 <_dtoa_r+0x5a8>)
 800c6e6:	b954      	cbnz	r4, 800c6fe <_dtoa_r+0x386>
 800c6e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c6ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c6f0:	f7f4 f888 	bl	8000804 <__aeabi_ddiv>
 800c6f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c6f8:	e029      	b.n	800c74e <_dtoa_r+0x3d6>
 800c6fa:	2702      	movs	r7, #2
 800c6fc:	e7f2      	b.n	800c6e4 <_dtoa_r+0x36c>
 800c6fe:	07e1      	lsls	r1, r4, #31
 800c700:	d508      	bpl.n	800c714 <_dtoa_r+0x39c>
 800c702:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c706:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c70a:	f7f3 ff51 	bl	80005b0 <__aeabi_dmul>
 800c70e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c712:	3701      	adds	r7, #1
 800c714:	1064      	asrs	r4, r4, #1
 800c716:	3608      	adds	r6, #8
 800c718:	e7e5      	b.n	800c6e6 <_dtoa_r+0x36e>
 800c71a:	f000 80a5 	beq.w	800c868 <_dtoa_r+0x4f0>
 800c71e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c722:	f1c9 0400 	rsb	r4, r9, #0
 800c726:	4b7d      	ldr	r3, [pc, #500]	; (800c91c <_dtoa_r+0x5a4>)
 800c728:	f004 020f 	and.w	r2, r4, #15
 800c72c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c734:	f7f3 ff3c 	bl	80005b0 <__aeabi_dmul>
 800c738:	2702      	movs	r7, #2
 800c73a:	2300      	movs	r3, #0
 800c73c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c740:	4e77      	ldr	r6, [pc, #476]	; (800c920 <_dtoa_r+0x5a8>)
 800c742:	1124      	asrs	r4, r4, #4
 800c744:	2c00      	cmp	r4, #0
 800c746:	f040 8084 	bne.w	800c852 <_dtoa_r+0x4da>
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d1d2      	bne.n	800c6f4 <_dtoa_r+0x37c>
 800c74e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c750:	2b00      	cmp	r3, #0
 800c752:	f000 808b 	beq.w	800c86c <_dtoa_r+0x4f4>
 800c756:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800c75a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800c75e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c762:	2200      	movs	r2, #0
 800c764:	4b6f      	ldr	r3, [pc, #444]	; (800c924 <_dtoa_r+0x5ac>)
 800c766:	f7f4 f995 	bl	8000a94 <__aeabi_dcmplt>
 800c76a:	2800      	cmp	r0, #0
 800c76c:	d07e      	beq.n	800c86c <_dtoa_r+0x4f4>
 800c76e:	9b02      	ldr	r3, [sp, #8]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d07b      	beq.n	800c86c <_dtoa_r+0x4f4>
 800c774:	f1bb 0f00 	cmp.w	fp, #0
 800c778:	dd38      	ble.n	800c7ec <_dtoa_r+0x474>
 800c77a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c77e:	2200      	movs	r2, #0
 800c780:	4b69      	ldr	r3, [pc, #420]	; (800c928 <_dtoa_r+0x5b0>)
 800c782:	f7f3 ff15 	bl	80005b0 <__aeabi_dmul>
 800c786:	465c      	mov	r4, fp
 800c788:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c78c:	f109 38ff 	add.w	r8, r9, #4294967295
 800c790:	3701      	adds	r7, #1
 800c792:	4638      	mov	r0, r7
 800c794:	f7f3 fea2 	bl	80004dc <__aeabi_i2d>
 800c798:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c79c:	f7f3 ff08 	bl	80005b0 <__aeabi_dmul>
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	4b62      	ldr	r3, [pc, #392]	; (800c92c <_dtoa_r+0x5b4>)
 800c7a4:	f7f3 fd4e 	bl	8000244 <__adddf3>
 800c7a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c7ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c7b0:	9611      	str	r6, [sp, #68]	; 0x44
 800c7b2:	2c00      	cmp	r4, #0
 800c7b4:	d15d      	bne.n	800c872 <_dtoa_r+0x4fa>
 800c7b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	4b5c      	ldr	r3, [pc, #368]	; (800c930 <_dtoa_r+0x5b8>)
 800c7be:	f7f3 fd3f 	bl	8000240 <__aeabi_dsub>
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	460b      	mov	r3, r1
 800c7c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c7ca:	4633      	mov	r3, r6
 800c7cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c7ce:	f7f4 f97f 	bl	8000ad0 <__aeabi_dcmpgt>
 800c7d2:	2800      	cmp	r0, #0
 800c7d4:	f040 829e 	bne.w	800cd14 <_dtoa_r+0x99c>
 800c7d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c7dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c7de:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c7e2:	f7f4 f957 	bl	8000a94 <__aeabi_dcmplt>
 800c7e6:	2800      	cmp	r0, #0
 800c7e8:	f040 8292 	bne.w	800cd10 <_dtoa_r+0x998>
 800c7ec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800c7f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c7f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	f2c0 8153 	blt.w	800caa2 <_dtoa_r+0x72a>
 800c7fc:	f1b9 0f0e 	cmp.w	r9, #14
 800c800:	f300 814f 	bgt.w	800caa2 <_dtoa_r+0x72a>
 800c804:	4b45      	ldr	r3, [pc, #276]	; (800c91c <_dtoa_r+0x5a4>)
 800c806:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800c80a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c80e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800c812:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c814:	2b00      	cmp	r3, #0
 800c816:	f280 80db 	bge.w	800c9d0 <_dtoa_r+0x658>
 800c81a:	9b02      	ldr	r3, [sp, #8]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	f300 80d7 	bgt.w	800c9d0 <_dtoa_r+0x658>
 800c822:	f040 8274 	bne.w	800cd0e <_dtoa_r+0x996>
 800c826:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c82a:	2200      	movs	r2, #0
 800c82c:	4b40      	ldr	r3, [pc, #256]	; (800c930 <_dtoa_r+0x5b8>)
 800c82e:	f7f3 febf 	bl	80005b0 <__aeabi_dmul>
 800c832:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c836:	f7f4 f941 	bl	8000abc <__aeabi_dcmpge>
 800c83a:	9c02      	ldr	r4, [sp, #8]
 800c83c:	4626      	mov	r6, r4
 800c83e:	2800      	cmp	r0, #0
 800c840:	f040 824a 	bne.w	800ccd8 <_dtoa_r+0x960>
 800c844:	2331      	movs	r3, #49	; 0x31
 800c846:	9f08      	ldr	r7, [sp, #32]
 800c848:	f109 0901 	add.w	r9, r9, #1
 800c84c:	f807 3b01 	strb.w	r3, [r7], #1
 800c850:	e246      	b.n	800cce0 <_dtoa_r+0x968>
 800c852:	07e2      	lsls	r2, r4, #31
 800c854:	d505      	bpl.n	800c862 <_dtoa_r+0x4ea>
 800c856:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c85a:	f7f3 fea9 	bl	80005b0 <__aeabi_dmul>
 800c85e:	2301      	movs	r3, #1
 800c860:	3701      	adds	r7, #1
 800c862:	1064      	asrs	r4, r4, #1
 800c864:	3608      	adds	r6, #8
 800c866:	e76d      	b.n	800c744 <_dtoa_r+0x3cc>
 800c868:	2702      	movs	r7, #2
 800c86a:	e770      	b.n	800c74e <_dtoa_r+0x3d6>
 800c86c:	46c8      	mov	r8, r9
 800c86e:	9c02      	ldr	r4, [sp, #8]
 800c870:	e78f      	b.n	800c792 <_dtoa_r+0x41a>
 800c872:	9908      	ldr	r1, [sp, #32]
 800c874:	4b29      	ldr	r3, [pc, #164]	; (800c91c <_dtoa_r+0x5a4>)
 800c876:	4421      	add	r1, r4
 800c878:	9112      	str	r1, [sp, #72]	; 0x48
 800c87a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c87c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c880:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800c884:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c888:	2900      	cmp	r1, #0
 800c88a:	d055      	beq.n	800c938 <_dtoa_r+0x5c0>
 800c88c:	2000      	movs	r0, #0
 800c88e:	4929      	ldr	r1, [pc, #164]	; (800c934 <_dtoa_r+0x5bc>)
 800c890:	f7f3 ffb8 	bl	8000804 <__aeabi_ddiv>
 800c894:	463b      	mov	r3, r7
 800c896:	4632      	mov	r2, r6
 800c898:	f7f3 fcd2 	bl	8000240 <__aeabi_dsub>
 800c89c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c8a0:	9f08      	ldr	r7, [sp, #32]
 800c8a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c8a6:	f7f4 f933 	bl	8000b10 <__aeabi_d2iz>
 800c8aa:	4604      	mov	r4, r0
 800c8ac:	f7f3 fe16 	bl	80004dc <__aeabi_i2d>
 800c8b0:	4602      	mov	r2, r0
 800c8b2:	460b      	mov	r3, r1
 800c8b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c8b8:	f7f3 fcc2 	bl	8000240 <__aeabi_dsub>
 800c8bc:	4602      	mov	r2, r0
 800c8be:	460b      	mov	r3, r1
 800c8c0:	3430      	adds	r4, #48	; 0x30
 800c8c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c8c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c8ca:	f807 4b01 	strb.w	r4, [r7], #1
 800c8ce:	f7f4 f8e1 	bl	8000a94 <__aeabi_dcmplt>
 800c8d2:	2800      	cmp	r0, #0
 800c8d4:	d174      	bne.n	800c9c0 <_dtoa_r+0x648>
 800c8d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8da:	2000      	movs	r0, #0
 800c8dc:	4911      	ldr	r1, [pc, #68]	; (800c924 <_dtoa_r+0x5ac>)
 800c8de:	f7f3 fcaf 	bl	8000240 <__aeabi_dsub>
 800c8e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c8e6:	f7f4 f8d5 	bl	8000a94 <__aeabi_dcmplt>
 800c8ea:	2800      	cmp	r0, #0
 800c8ec:	f040 80b6 	bne.w	800ca5c <_dtoa_r+0x6e4>
 800c8f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c8f2:	429f      	cmp	r7, r3
 800c8f4:	f43f af7a 	beq.w	800c7ec <_dtoa_r+0x474>
 800c8f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	4b0a      	ldr	r3, [pc, #40]	; (800c928 <_dtoa_r+0x5b0>)
 800c900:	f7f3 fe56 	bl	80005b0 <__aeabi_dmul>
 800c904:	2200      	movs	r2, #0
 800c906:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c90a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c90e:	4b06      	ldr	r3, [pc, #24]	; (800c928 <_dtoa_r+0x5b0>)
 800c910:	f7f3 fe4e 	bl	80005b0 <__aeabi_dmul>
 800c914:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c918:	e7c3      	b.n	800c8a2 <_dtoa_r+0x52a>
 800c91a:	bf00      	nop
 800c91c:	0800f898 	.word	0x0800f898
 800c920:	0800f870 	.word	0x0800f870
 800c924:	3ff00000 	.word	0x3ff00000
 800c928:	40240000 	.word	0x40240000
 800c92c:	401c0000 	.word	0x401c0000
 800c930:	40140000 	.word	0x40140000
 800c934:	3fe00000 	.word	0x3fe00000
 800c938:	4630      	mov	r0, r6
 800c93a:	4639      	mov	r1, r7
 800c93c:	f7f3 fe38 	bl	80005b0 <__aeabi_dmul>
 800c940:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c942:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c946:	9c08      	ldr	r4, [sp, #32]
 800c948:	9314      	str	r3, [sp, #80]	; 0x50
 800c94a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c94e:	f7f4 f8df 	bl	8000b10 <__aeabi_d2iz>
 800c952:	9015      	str	r0, [sp, #84]	; 0x54
 800c954:	f7f3 fdc2 	bl	80004dc <__aeabi_i2d>
 800c958:	4602      	mov	r2, r0
 800c95a:	460b      	mov	r3, r1
 800c95c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c960:	f7f3 fc6e 	bl	8000240 <__aeabi_dsub>
 800c964:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c966:	4606      	mov	r6, r0
 800c968:	3330      	adds	r3, #48	; 0x30
 800c96a:	f804 3b01 	strb.w	r3, [r4], #1
 800c96e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c970:	460f      	mov	r7, r1
 800c972:	429c      	cmp	r4, r3
 800c974:	f04f 0200 	mov.w	r2, #0
 800c978:	d124      	bne.n	800c9c4 <_dtoa_r+0x64c>
 800c97a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c97e:	4bb3      	ldr	r3, [pc, #716]	; (800cc4c <_dtoa_r+0x8d4>)
 800c980:	f7f3 fc60 	bl	8000244 <__adddf3>
 800c984:	4602      	mov	r2, r0
 800c986:	460b      	mov	r3, r1
 800c988:	4630      	mov	r0, r6
 800c98a:	4639      	mov	r1, r7
 800c98c:	f7f4 f8a0 	bl	8000ad0 <__aeabi_dcmpgt>
 800c990:	2800      	cmp	r0, #0
 800c992:	d162      	bne.n	800ca5a <_dtoa_r+0x6e2>
 800c994:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c998:	2000      	movs	r0, #0
 800c99a:	49ac      	ldr	r1, [pc, #688]	; (800cc4c <_dtoa_r+0x8d4>)
 800c99c:	f7f3 fc50 	bl	8000240 <__aeabi_dsub>
 800c9a0:	4602      	mov	r2, r0
 800c9a2:	460b      	mov	r3, r1
 800c9a4:	4630      	mov	r0, r6
 800c9a6:	4639      	mov	r1, r7
 800c9a8:	f7f4 f874 	bl	8000a94 <__aeabi_dcmplt>
 800c9ac:	2800      	cmp	r0, #0
 800c9ae:	f43f af1d 	beq.w	800c7ec <_dtoa_r+0x474>
 800c9b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800c9b4:	1e7b      	subs	r3, r7, #1
 800c9b6:	9314      	str	r3, [sp, #80]	; 0x50
 800c9b8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800c9bc:	2b30      	cmp	r3, #48	; 0x30
 800c9be:	d0f8      	beq.n	800c9b2 <_dtoa_r+0x63a>
 800c9c0:	46c1      	mov	r9, r8
 800c9c2:	e03a      	b.n	800ca3a <_dtoa_r+0x6c2>
 800c9c4:	4ba2      	ldr	r3, [pc, #648]	; (800cc50 <_dtoa_r+0x8d8>)
 800c9c6:	f7f3 fdf3 	bl	80005b0 <__aeabi_dmul>
 800c9ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c9ce:	e7bc      	b.n	800c94a <_dtoa_r+0x5d2>
 800c9d0:	9f08      	ldr	r7, [sp, #32]
 800c9d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c9d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c9da:	f7f3 ff13 	bl	8000804 <__aeabi_ddiv>
 800c9de:	f7f4 f897 	bl	8000b10 <__aeabi_d2iz>
 800c9e2:	4604      	mov	r4, r0
 800c9e4:	f7f3 fd7a 	bl	80004dc <__aeabi_i2d>
 800c9e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c9ec:	f7f3 fde0 	bl	80005b0 <__aeabi_dmul>
 800c9f0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800c9f4:	460b      	mov	r3, r1
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c9fc:	f7f3 fc20 	bl	8000240 <__aeabi_dsub>
 800ca00:	f807 6b01 	strb.w	r6, [r7], #1
 800ca04:	9e08      	ldr	r6, [sp, #32]
 800ca06:	9b02      	ldr	r3, [sp, #8]
 800ca08:	1bbe      	subs	r6, r7, r6
 800ca0a:	42b3      	cmp	r3, r6
 800ca0c:	d13a      	bne.n	800ca84 <_dtoa_r+0x70c>
 800ca0e:	4602      	mov	r2, r0
 800ca10:	460b      	mov	r3, r1
 800ca12:	f7f3 fc17 	bl	8000244 <__adddf3>
 800ca16:	4602      	mov	r2, r0
 800ca18:	460b      	mov	r3, r1
 800ca1a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ca1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ca22:	f7f4 f855 	bl	8000ad0 <__aeabi_dcmpgt>
 800ca26:	bb58      	cbnz	r0, 800ca80 <_dtoa_r+0x708>
 800ca28:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ca2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca30:	f7f4 f826 	bl	8000a80 <__aeabi_dcmpeq>
 800ca34:	b108      	cbz	r0, 800ca3a <_dtoa_r+0x6c2>
 800ca36:	07e1      	lsls	r1, r4, #31
 800ca38:	d422      	bmi.n	800ca80 <_dtoa_r+0x708>
 800ca3a:	4628      	mov	r0, r5
 800ca3c:	4651      	mov	r1, sl
 800ca3e:	f000 fbef 	bl	800d220 <_Bfree>
 800ca42:	2300      	movs	r3, #0
 800ca44:	703b      	strb	r3, [r7, #0]
 800ca46:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ca48:	f109 0001 	add.w	r0, r9, #1
 800ca4c:	6018      	str	r0, [r3, #0]
 800ca4e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	f43f acdf 	beq.w	800c414 <_dtoa_r+0x9c>
 800ca56:	601f      	str	r7, [r3, #0]
 800ca58:	e4dc      	b.n	800c414 <_dtoa_r+0x9c>
 800ca5a:	4627      	mov	r7, r4
 800ca5c:	463b      	mov	r3, r7
 800ca5e:	461f      	mov	r7, r3
 800ca60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ca64:	2a39      	cmp	r2, #57	; 0x39
 800ca66:	d107      	bne.n	800ca78 <_dtoa_r+0x700>
 800ca68:	9a08      	ldr	r2, [sp, #32]
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d1f7      	bne.n	800ca5e <_dtoa_r+0x6e6>
 800ca6e:	2230      	movs	r2, #48	; 0x30
 800ca70:	9908      	ldr	r1, [sp, #32]
 800ca72:	f108 0801 	add.w	r8, r8, #1
 800ca76:	700a      	strb	r2, [r1, #0]
 800ca78:	781a      	ldrb	r2, [r3, #0]
 800ca7a:	3201      	adds	r2, #1
 800ca7c:	701a      	strb	r2, [r3, #0]
 800ca7e:	e79f      	b.n	800c9c0 <_dtoa_r+0x648>
 800ca80:	46c8      	mov	r8, r9
 800ca82:	e7eb      	b.n	800ca5c <_dtoa_r+0x6e4>
 800ca84:	2200      	movs	r2, #0
 800ca86:	4b72      	ldr	r3, [pc, #456]	; (800cc50 <_dtoa_r+0x8d8>)
 800ca88:	f7f3 fd92 	bl	80005b0 <__aeabi_dmul>
 800ca8c:	4602      	mov	r2, r0
 800ca8e:	460b      	mov	r3, r1
 800ca90:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ca94:	2200      	movs	r2, #0
 800ca96:	2300      	movs	r3, #0
 800ca98:	f7f3 fff2 	bl	8000a80 <__aeabi_dcmpeq>
 800ca9c:	2800      	cmp	r0, #0
 800ca9e:	d098      	beq.n	800c9d2 <_dtoa_r+0x65a>
 800caa0:	e7cb      	b.n	800ca3a <_dtoa_r+0x6c2>
 800caa2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800caa4:	2a00      	cmp	r2, #0
 800caa6:	f000 80cd 	beq.w	800cc44 <_dtoa_r+0x8cc>
 800caaa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800caac:	2a01      	cmp	r2, #1
 800caae:	f300 80af 	bgt.w	800cc10 <_dtoa_r+0x898>
 800cab2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cab4:	2a00      	cmp	r2, #0
 800cab6:	f000 80a7 	beq.w	800cc08 <_dtoa_r+0x890>
 800caba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cabe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800cac0:	9f06      	ldr	r7, [sp, #24]
 800cac2:	9a06      	ldr	r2, [sp, #24]
 800cac4:	2101      	movs	r1, #1
 800cac6:	441a      	add	r2, r3
 800cac8:	9206      	str	r2, [sp, #24]
 800caca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cacc:	4628      	mov	r0, r5
 800cace:	441a      	add	r2, r3
 800cad0:	9209      	str	r2, [sp, #36]	; 0x24
 800cad2:	f000 fc5f 	bl	800d394 <__i2b>
 800cad6:	4606      	mov	r6, r0
 800cad8:	2f00      	cmp	r7, #0
 800cada:	dd0c      	ble.n	800caf6 <_dtoa_r+0x77e>
 800cadc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cade:	2b00      	cmp	r3, #0
 800cae0:	dd09      	ble.n	800caf6 <_dtoa_r+0x77e>
 800cae2:	42bb      	cmp	r3, r7
 800cae4:	bfa8      	it	ge
 800cae6:	463b      	movge	r3, r7
 800cae8:	9a06      	ldr	r2, [sp, #24]
 800caea:	1aff      	subs	r7, r7, r3
 800caec:	1ad2      	subs	r2, r2, r3
 800caee:	9206      	str	r2, [sp, #24]
 800caf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800caf2:	1ad3      	subs	r3, r2, r3
 800caf4:	9309      	str	r3, [sp, #36]	; 0x24
 800caf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800caf8:	b1f3      	cbz	r3, 800cb38 <_dtoa_r+0x7c0>
 800cafa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	f000 80a9 	beq.w	800cc54 <_dtoa_r+0x8dc>
 800cb02:	2c00      	cmp	r4, #0
 800cb04:	dd10      	ble.n	800cb28 <_dtoa_r+0x7b0>
 800cb06:	4631      	mov	r1, r6
 800cb08:	4622      	mov	r2, r4
 800cb0a:	4628      	mov	r0, r5
 800cb0c:	f000 fcfc 	bl	800d508 <__pow5mult>
 800cb10:	4652      	mov	r2, sl
 800cb12:	4601      	mov	r1, r0
 800cb14:	4606      	mov	r6, r0
 800cb16:	4628      	mov	r0, r5
 800cb18:	f000 fc52 	bl	800d3c0 <__multiply>
 800cb1c:	4680      	mov	r8, r0
 800cb1e:	4651      	mov	r1, sl
 800cb20:	4628      	mov	r0, r5
 800cb22:	f000 fb7d 	bl	800d220 <_Bfree>
 800cb26:	46c2      	mov	sl, r8
 800cb28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb2a:	1b1a      	subs	r2, r3, r4
 800cb2c:	d004      	beq.n	800cb38 <_dtoa_r+0x7c0>
 800cb2e:	4651      	mov	r1, sl
 800cb30:	4628      	mov	r0, r5
 800cb32:	f000 fce9 	bl	800d508 <__pow5mult>
 800cb36:	4682      	mov	sl, r0
 800cb38:	2101      	movs	r1, #1
 800cb3a:	4628      	mov	r0, r5
 800cb3c:	f000 fc2a 	bl	800d394 <__i2b>
 800cb40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb42:	4604      	mov	r4, r0
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	f340 8087 	ble.w	800cc58 <_dtoa_r+0x8e0>
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	4601      	mov	r1, r0
 800cb4e:	4628      	mov	r0, r5
 800cb50:	f000 fcda 	bl	800d508 <__pow5mult>
 800cb54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cb56:	4604      	mov	r4, r0
 800cb58:	2b01      	cmp	r3, #1
 800cb5a:	f340 8080 	ble.w	800cc5e <_dtoa_r+0x8e6>
 800cb5e:	f04f 0800 	mov.w	r8, #0
 800cb62:	6923      	ldr	r3, [r4, #16]
 800cb64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cb68:	6918      	ldr	r0, [r3, #16]
 800cb6a:	f000 fbc5 	bl	800d2f8 <__hi0bits>
 800cb6e:	f1c0 0020 	rsb	r0, r0, #32
 800cb72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb74:	4418      	add	r0, r3
 800cb76:	f010 001f 	ands.w	r0, r0, #31
 800cb7a:	f000 8092 	beq.w	800cca2 <_dtoa_r+0x92a>
 800cb7e:	f1c0 0320 	rsb	r3, r0, #32
 800cb82:	2b04      	cmp	r3, #4
 800cb84:	f340 808a 	ble.w	800cc9c <_dtoa_r+0x924>
 800cb88:	f1c0 001c 	rsb	r0, r0, #28
 800cb8c:	9b06      	ldr	r3, [sp, #24]
 800cb8e:	4407      	add	r7, r0
 800cb90:	4403      	add	r3, r0
 800cb92:	9306      	str	r3, [sp, #24]
 800cb94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb96:	4403      	add	r3, r0
 800cb98:	9309      	str	r3, [sp, #36]	; 0x24
 800cb9a:	9b06      	ldr	r3, [sp, #24]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	dd05      	ble.n	800cbac <_dtoa_r+0x834>
 800cba0:	4651      	mov	r1, sl
 800cba2:	461a      	mov	r2, r3
 800cba4:	4628      	mov	r0, r5
 800cba6:	f000 fd09 	bl	800d5bc <__lshift>
 800cbaa:	4682      	mov	sl, r0
 800cbac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	dd05      	ble.n	800cbbe <_dtoa_r+0x846>
 800cbb2:	4621      	mov	r1, r4
 800cbb4:	461a      	mov	r2, r3
 800cbb6:	4628      	mov	r0, r5
 800cbb8:	f000 fd00 	bl	800d5bc <__lshift>
 800cbbc:	4604      	mov	r4, r0
 800cbbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d070      	beq.n	800cca6 <_dtoa_r+0x92e>
 800cbc4:	4621      	mov	r1, r4
 800cbc6:	4650      	mov	r0, sl
 800cbc8:	f000 fd64 	bl	800d694 <__mcmp>
 800cbcc:	2800      	cmp	r0, #0
 800cbce:	da6a      	bge.n	800cca6 <_dtoa_r+0x92e>
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	4651      	mov	r1, sl
 800cbd4:	220a      	movs	r2, #10
 800cbd6:	4628      	mov	r0, r5
 800cbd8:	f000 fb44 	bl	800d264 <__multadd>
 800cbdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbde:	4682      	mov	sl, r0
 800cbe0:	f109 39ff 	add.w	r9, r9, #4294967295
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	f000 8193 	beq.w	800cf10 <_dtoa_r+0xb98>
 800cbea:	4631      	mov	r1, r6
 800cbec:	2300      	movs	r3, #0
 800cbee:	220a      	movs	r2, #10
 800cbf0:	4628      	mov	r0, r5
 800cbf2:	f000 fb37 	bl	800d264 <__multadd>
 800cbf6:	f1bb 0f00 	cmp.w	fp, #0
 800cbfa:	4606      	mov	r6, r0
 800cbfc:	f300 8093 	bgt.w	800cd26 <_dtoa_r+0x9ae>
 800cc00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cc02:	2b02      	cmp	r3, #2
 800cc04:	dc57      	bgt.n	800ccb6 <_dtoa_r+0x93e>
 800cc06:	e08e      	b.n	800cd26 <_dtoa_r+0x9ae>
 800cc08:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800cc0a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cc0e:	e756      	b.n	800cabe <_dtoa_r+0x746>
 800cc10:	9b02      	ldr	r3, [sp, #8]
 800cc12:	1e5c      	subs	r4, r3, #1
 800cc14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc16:	42a3      	cmp	r3, r4
 800cc18:	bfb7      	itett	lt
 800cc1a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cc1c:	1b1c      	subge	r4, r3, r4
 800cc1e:	1ae2      	sublt	r2, r4, r3
 800cc20:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800cc22:	bfbe      	ittt	lt
 800cc24:	940a      	strlt	r4, [sp, #40]	; 0x28
 800cc26:	189b      	addlt	r3, r3, r2
 800cc28:	930e      	strlt	r3, [sp, #56]	; 0x38
 800cc2a:	9b02      	ldr	r3, [sp, #8]
 800cc2c:	bfb8      	it	lt
 800cc2e:	2400      	movlt	r4, #0
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	bfbb      	ittet	lt
 800cc34:	9b06      	ldrlt	r3, [sp, #24]
 800cc36:	9a02      	ldrlt	r2, [sp, #8]
 800cc38:	9f06      	ldrge	r7, [sp, #24]
 800cc3a:	1a9f      	sublt	r7, r3, r2
 800cc3c:	bfac      	ite	ge
 800cc3e:	9b02      	ldrge	r3, [sp, #8]
 800cc40:	2300      	movlt	r3, #0
 800cc42:	e73e      	b.n	800cac2 <_dtoa_r+0x74a>
 800cc44:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800cc46:	9f06      	ldr	r7, [sp, #24]
 800cc48:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800cc4a:	e745      	b.n	800cad8 <_dtoa_r+0x760>
 800cc4c:	3fe00000 	.word	0x3fe00000
 800cc50:	40240000 	.word	0x40240000
 800cc54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc56:	e76a      	b.n	800cb2e <_dtoa_r+0x7b6>
 800cc58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cc5a:	2b01      	cmp	r3, #1
 800cc5c:	dc19      	bgt.n	800cc92 <_dtoa_r+0x91a>
 800cc5e:	9b04      	ldr	r3, [sp, #16]
 800cc60:	b9bb      	cbnz	r3, 800cc92 <_dtoa_r+0x91a>
 800cc62:	9b05      	ldr	r3, [sp, #20]
 800cc64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc68:	b99b      	cbnz	r3, 800cc92 <_dtoa_r+0x91a>
 800cc6a:	9b05      	ldr	r3, [sp, #20]
 800cc6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cc70:	0d1b      	lsrs	r3, r3, #20
 800cc72:	051b      	lsls	r3, r3, #20
 800cc74:	b183      	cbz	r3, 800cc98 <_dtoa_r+0x920>
 800cc76:	f04f 0801 	mov.w	r8, #1
 800cc7a:	9b06      	ldr	r3, [sp, #24]
 800cc7c:	3301      	adds	r3, #1
 800cc7e:	9306      	str	r3, [sp, #24]
 800cc80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc82:	3301      	adds	r3, #1
 800cc84:	9309      	str	r3, [sp, #36]	; 0x24
 800cc86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	f47f af6a 	bne.w	800cb62 <_dtoa_r+0x7ea>
 800cc8e:	2001      	movs	r0, #1
 800cc90:	e76f      	b.n	800cb72 <_dtoa_r+0x7fa>
 800cc92:	f04f 0800 	mov.w	r8, #0
 800cc96:	e7f6      	b.n	800cc86 <_dtoa_r+0x90e>
 800cc98:	4698      	mov	r8, r3
 800cc9a:	e7f4      	b.n	800cc86 <_dtoa_r+0x90e>
 800cc9c:	f43f af7d 	beq.w	800cb9a <_dtoa_r+0x822>
 800cca0:	4618      	mov	r0, r3
 800cca2:	301c      	adds	r0, #28
 800cca4:	e772      	b.n	800cb8c <_dtoa_r+0x814>
 800cca6:	9b02      	ldr	r3, [sp, #8]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	dc36      	bgt.n	800cd1a <_dtoa_r+0x9a2>
 800ccac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ccae:	2b02      	cmp	r3, #2
 800ccb0:	dd33      	ble.n	800cd1a <_dtoa_r+0x9a2>
 800ccb2:	f8dd b008 	ldr.w	fp, [sp, #8]
 800ccb6:	f1bb 0f00 	cmp.w	fp, #0
 800ccba:	d10d      	bne.n	800ccd8 <_dtoa_r+0x960>
 800ccbc:	4621      	mov	r1, r4
 800ccbe:	465b      	mov	r3, fp
 800ccc0:	2205      	movs	r2, #5
 800ccc2:	4628      	mov	r0, r5
 800ccc4:	f000 face 	bl	800d264 <__multadd>
 800ccc8:	4601      	mov	r1, r0
 800ccca:	4604      	mov	r4, r0
 800cccc:	4650      	mov	r0, sl
 800ccce:	f000 fce1 	bl	800d694 <__mcmp>
 800ccd2:	2800      	cmp	r0, #0
 800ccd4:	f73f adb6 	bgt.w	800c844 <_dtoa_r+0x4cc>
 800ccd8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ccda:	9f08      	ldr	r7, [sp, #32]
 800ccdc:	ea6f 0903 	mvn.w	r9, r3
 800cce0:	f04f 0800 	mov.w	r8, #0
 800cce4:	4621      	mov	r1, r4
 800cce6:	4628      	mov	r0, r5
 800cce8:	f000 fa9a 	bl	800d220 <_Bfree>
 800ccec:	2e00      	cmp	r6, #0
 800ccee:	f43f aea4 	beq.w	800ca3a <_dtoa_r+0x6c2>
 800ccf2:	f1b8 0f00 	cmp.w	r8, #0
 800ccf6:	d005      	beq.n	800cd04 <_dtoa_r+0x98c>
 800ccf8:	45b0      	cmp	r8, r6
 800ccfa:	d003      	beq.n	800cd04 <_dtoa_r+0x98c>
 800ccfc:	4641      	mov	r1, r8
 800ccfe:	4628      	mov	r0, r5
 800cd00:	f000 fa8e 	bl	800d220 <_Bfree>
 800cd04:	4631      	mov	r1, r6
 800cd06:	4628      	mov	r0, r5
 800cd08:	f000 fa8a 	bl	800d220 <_Bfree>
 800cd0c:	e695      	b.n	800ca3a <_dtoa_r+0x6c2>
 800cd0e:	2400      	movs	r4, #0
 800cd10:	4626      	mov	r6, r4
 800cd12:	e7e1      	b.n	800ccd8 <_dtoa_r+0x960>
 800cd14:	46c1      	mov	r9, r8
 800cd16:	4626      	mov	r6, r4
 800cd18:	e594      	b.n	800c844 <_dtoa_r+0x4cc>
 800cd1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd1c:	f8dd b008 	ldr.w	fp, [sp, #8]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	f000 80fc 	beq.w	800cf1e <_dtoa_r+0xba6>
 800cd26:	2f00      	cmp	r7, #0
 800cd28:	dd05      	ble.n	800cd36 <_dtoa_r+0x9be>
 800cd2a:	4631      	mov	r1, r6
 800cd2c:	463a      	mov	r2, r7
 800cd2e:	4628      	mov	r0, r5
 800cd30:	f000 fc44 	bl	800d5bc <__lshift>
 800cd34:	4606      	mov	r6, r0
 800cd36:	f1b8 0f00 	cmp.w	r8, #0
 800cd3a:	d05c      	beq.n	800cdf6 <_dtoa_r+0xa7e>
 800cd3c:	4628      	mov	r0, r5
 800cd3e:	6871      	ldr	r1, [r6, #4]
 800cd40:	f000 fa2e 	bl	800d1a0 <_Balloc>
 800cd44:	4607      	mov	r7, r0
 800cd46:	b928      	cbnz	r0, 800cd54 <_dtoa_r+0x9dc>
 800cd48:	4602      	mov	r2, r0
 800cd4a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800cd4e:	4b7e      	ldr	r3, [pc, #504]	; (800cf48 <_dtoa_r+0xbd0>)
 800cd50:	f7ff bb26 	b.w	800c3a0 <_dtoa_r+0x28>
 800cd54:	6932      	ldr	r2, [r6, #16]
 800cd56:	f106 010c 	add.w	r1, r6, #12
 800cd5a:	3202      	adds	r2, #2
 800cd5c:	0092      	lsls	r2, r2, #2
 800cd5e:	300c      	adds	r0, #12
 800cd60:	f000 fa03 	bl	800d16a <memcpy>
 800cd64:	2201      	movs	r2, #1
 800cd66:	4639      	mov	r1, r7
 800cd68:	4628      	mov	r0, r5
 800cd6a:	f000 fc27 	bl	800d5bc <__lshift>
 800cd6e:	46b0      	mov	r8, r6
 800cd70:	4606      	mov	r6, r0
 800cd72:	9b08      	ldr	r3, [sp, #32]
 800cd74:	3301      	adds	r3, #1
 800cd76:	9302      	str	r3, [sp, #8]
 800cd78:	9b08      	ldr	r3, [sp, #32]
 800cd7a:	445b      	add	r3, fp
 800cd7c:	930a      	str	r3, [sp, #40]	; 0x28
 800cd7e:	9b04      	ldr	r3, [sp, #16]
 800cd80:	f003 0301 	and.w	r3, r3, #1
 800cd84:	9309      	str	r3, [sp, #36]	; 0x24
 800cd86:	9b02      	ldr	r3, [sp, #8]
 800cd88:	4621      	mov	r1, r4
 800cd8a:	4650      	mov	r0, sl
 800cd8c:	f103 3bff 	add.w	fp, r3, #4294967295
 800cd90:	f7ff fa64 	bl	800c25c <quorem>
 800cd94:	4603      	mov	r3, r0
 800cd96:	4641      	mov	r1, r8
 800cd98:	3330      	adds	r3, #48	; 0x30
 800cd9a:	9004      	str	r0, [sp, #16]
 800cd9c:	4650      	mov	r0, sl
 800cd9e:	930b      	str	r3, [sp, #44]	; 0x2c
 800cda0:	f000 fc78 	bl	800d694 <__mcmp>
 800cda4:	4632      	mov	r2, r6
 800cda6:	9006      	str	r0, [sp, #24]
 800cda8:	4621      	mov	r1, r4
 800cdaa:	4628      	mov	r0, r5
 800cdac:	f000 fc8e 	bl	800d6cc <__mdiff>
 800cdb0:	68c2      	ldr	r2, [r0, #12]
 800cdb2:	4607      	mov	r7, r0
 800cdb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdb6:	bb02      	cbnz	r2, 800cdfa <_dtoa_r+0xa82>
 800cdb8:	4601      	mov	r1, r0
 800cdba:	4650      	mov	r0, sl
 800cdbc:	f000 fc6a 	bl	800d694 <__mcmp>
 800cdc0:	4602      	mov	r2, r0
 800cdc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdc4:	4639      	mov	r1, r7
 800cdc6:	4628      	mov	r0, r5
 800cdc8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800cdcc:	f000 fa28 	bl	800d220 <_Bfree>
 800cdd0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cdd2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cdd4:	9f02      	ldr	r7, [sp, #8]
 800cdd6:	ea43 0102 	orr.w	r1, r3, r2
 800cdda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cddc:	430b      	orrs	r3, r1
 800cdde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cde0:	d10d      	bne.n	800cdfe <_dtoa_r+0xa86>
 800cde2:	2b39      	cmp	r3, #57	; 0x39
 800cde4:	d027      	beq.n	800ce36 <_dtoa_r+0xabe>
 800cde6:	9a06      	ldr	r2, [sp, #24]
 800cde8:	2a00      	cmp	r2, #0
 800cdea:	dd01      	ble.n	800cdf0 <_dtoa_r+0xa78>
 800cdec:	9b04      	ldr	r3, [sp, #16]
 800cdee:	3331      	adds	r3, #49	; 0x31
 800cdf0:	f88b 3000 	strb.w	r3, [fp]
 800cdf4:	e776      	b.n	800cce4 <_dtoa_r+0x96c>
 800cdf6:	4630      	mov	r0, r6
 800cdf8:	e7b9      	b.n	800cd6e <_dtoa_r+0x9f6>
 800cdfa:	2201      	movs	r2, #1
 800cdfc:	e7e2      	b.n	800cdc4 <_dtoa_r+0xa4c>
 800cdfe:	9906      	ldr	r1, [sp, #24]
 800ce00:	2900      	cmp	r1, #0
 800ce02:	db04      	blt.n	800ce0e <_dtoa_r+0xa96>
 800ce04:	9822      	ldr	r0, [sp, #136]	; 0x88
 800ce06:	4301      	orrs	r1, r0
 800ce08:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce0a:	4301      	orrs	r1, r0
 800ce0c:	d120      	bne.n	800ce50 <_dtoa_r+0xad8>
 800ce0e:	2a00      	cmp	r2, #0
 800ce10:	ddee      	ble.n	800cdf0 <_dtoa_r+0xa78>
 800ce12:	4651      	mov	r1, sl
 800ce14:	2201      	movs	r2, #1
 800ce16:	4628      	mov	r0, r5
 800ce18:	9302      	str	r3, [sp, #8]
 800ce1a:	f000 fbcf 	bl	800d5bc <__lshift>
 800ce1e:	4621      	mov	r1, r4
 800ce20:	4682      	mov	sl, r0
 800ce22:	f000 fc37 	bl	800d694 <__mcmp>
 800ce26:	2800      	cmp	r0, #0
 800ce28:	9b02      	ldr	r3, [sp, #8]
 800ce2a:	dc02      	bgt.n	800ce32 <_dtoa_r+0xaba>
 800ce2c:	d1e0      	bne.n	800cdf0 <_dtoa_r+0xa78>
 800ce2e:	07da      	lsls	r2, r3, #31
 800ce30:	d5de      	bpl.n	800cdf0 <_dtoa_r+0xa78>
 800ce32:	2b39      	cmp	r3, #57	; 0x39
 800ce34:	d1da      	bne.n	800cdec <_dtoa_r+0xa74>
 800ce36:	2339      	movs	r3, #57	; 0x39
 800ce38:	f88b 3000 	strb.w	r3, [fp]
 800ce3c:	463b      	mov	r3, r7
 800ce3e:	461f      	mov	r7, r3
 800ce40:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800ce44:	3b01      	subs	r3, #1
 800ce46:	2a39      	cmp	r2, #57	; 0x39
 800ce48:	d050      	beq.n	800ceec <_dtoa_r+0xb74>
 800ce4a:	3201      	adds	r2, #1
 800ce4c:	701a      	strb	r2, [r3, #0]
 800ce4e:	e749      	b.n	800cce4 <_dtoa_r+0x96c>
 800ce50:	2a00      	cmp	r2, #0
 800ce52:	dd03      	ble.n	800ce5c <_dtoa_r+0xae4>
 800ce54:	2b39      	cmp	r3, #57	; 0x39
 800ce56:	d0ee      	beq.n	800ce36 <_dtoa_r+0xabe>
 800ce58:	3301      	adds	r3, #1
 800ce5a:	e7c9      	b.n	800cdf0 <_dtoa_r+0xa78>
 800ce5c:	9a02      	ldr	r2, [sp, #8]
 800ce5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ce60:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ce64:	428a      	cmp	r2, r1
 800ce66:	d02a      	beq.n	800cebe <_dtoa_r+0xb46>
 800ce68:	4651      	mov	r1, sl
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	220a      	movs	r2, #10
 800ce6e:	4628      	mov	r0, r5
 800ce70:	f000 f9f8 	bl	800d264 <__multadd>
 800ce74:	45b0      	cmp	r8, r6
 800ce76:	4682      	mov	sl, r0
 800ce78:	f04f 0300 	mov.w	r3, #0
 800ce7c:	f04f 020a 	mov.w	r2, #10
 800ce80:	4641      	mov	r1, r8
 800ce82:	4628      	mov	r0, r5
 800ce84:	d107      	bne.n	800ce96 <_dtoa_r+0xb1e>
 800ce86:	f000 f9ed 	bl	800d264 <__multadd>
 800ce8a:	4680      	mov	r8, r0
 800ce8c:	4606      	mov	r6, r0
 800ce8e:	9b02      	ldr	r3, [sp, #8]
 800ce90:	3301      	adds	r3, #1
 800ce92:	9302      	str	r3, [sp, #8]
 800ce94:	e777      	b.n	800cd86 <_dtoa_r+0xa0e>
 800ce96:	f000 f9e5 	bl	800d264 <__multadd>
 800ce9a:	4631      	mov	r1, r6
 800ce9c:	4680      	mov	r8, r0
 800ce9e:	2300      	movs	r3, #0
 800cea0:	220a      	movs	r2, #10
 800cea2:	4628      	mov	r0, r5
 800cea4:	f000 f9de 	bl	800d264 <__multadd>
 800cea8:	4606      	mov	r6, r0
 800ceaa:	e7f0      	b.n	800ce8e <_dtoa_r+0xb16>
 800ceac:	f1bb 0f00 	cmp.w	fp, #0
 800ceb0:	bfcc      	ite	gt
 800ceb2:	465f      	movgt	r7, fp
 800ceb4:	2701      	movle	r7, #1
 800ceb6:	f04f 0800 	mov.w	r8, #0
 800ceba:	9a08      	ldr	r2, [sp, #32]
 800cebc:	4417      	add	r7, r2
 800cebe:	4651      	mov	r1, sl
 800cec0:	2201      	movs	r2, #1
 800cec2:	4628      	mov	r0, r5
 800cec4:	9302      	str	r3, [sp, #8]
 800cec6:	f000 fb79 	bl	800d5bc <__lshift>
 800ceca:	4621      	mov	r1, r4
 800cecc:	4682      	mov	sl, r0
 800cece:	f000 fbe1 	bl	800d694 <__mcmp>
 800ced2:	2800      	cmp	r0, #0
 800ced4:	dcb2      	bgt.n	800ce3c <_dtoa_r+0xac4>
 800ced6:	d102      	bne.n	800cede <_dtoa_r+0xb66>
 800ced8:	9b02      	ldr	r3, [sp, #8]
 800ceda:	07db      	lsls	r3, r3, #31
 800cedc:	d4ae      	bmi.n	800ce3c <_dtoa_r+0xac4>
 800cede:	463b      	mov	r3, r7
 800cee0:	461f      	mov	r7, r3
 800cee2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cee6:	2a30      	cmp	r2, #48	; 0x30
 800cee8:	d0fa      	beq.n	800cee0 <_dtoa_r+0xb68>
 800ceea:	e6fb      	b.n	800cce4 <_dtoa_r+0x96c>
 800ceec:	9a08      	ldr	r2, [sp, #32]
 800ceee:	429a      	cmp	r2, r3
 800cef0:	d1a5      	bne.n	800ce3e <_dtoa_r+0xac6>
 800cef2:	2331      	movs	r3, #49	; 0x31
 800cef4:	f109 0901 	add.w	r9, r9, #1
 800cef8:	7013      	strb	r3, [r2, #0]
 800cefa:	e6f3      	b.n	800cce4 <_dtoa_r+0x96c>
 800cefc:	4b13      	ldr	r3, [pc, #76]	; (800cf4c <_dtoa_r+0xbd4>)
 800cefe:	f7ff baa7 	b.w	800c450 <_dtoa_r+0xd8>
 800cf02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	f47f aa80 	bne.w	800c40a <_dtoa_r+0x92>
 800cf0a:	4b11      	ldr	r3, [pc, #68]	; (800cf50 <_dtoa_r+0xbd8>)
 800cf0c:	f7ff baa0 	b.w	800c450 <_dtoa_r+0xd8>
 800cf10:	f1bb 0f00 	cmp.w	fp, #0
 800cf14:	dc03      	bgt.n	800cf1e <_dtoa_r+0xba6>
 800cf16:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800cf18:	2b02      	cmp	r3, #2
 800cf1a:	f73f aecc 	bgt.w	800ccb6 <_dtoa_r+0x93e>
 800cf1e:	9f08      	ldr	r7, [sp, #32]
 800cf20:	4621      	mov	r1, r4
 800cf22:	4650      	mov	r0, sl
 800cf24:	f7ff f99a 	bl	800c25c <quorem>
 800cf28:	9a08      	ldr	r2, [sp, #32]
 800cf2a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800cf2e:	f807 3b01 	strb.w	r3, [r7], #1
 800cf32:	1aba      	subs	r2, r7, r2
 800cf34:	4593      	cmp	fp, r2
 800cf36:	ddb9      	ble.n	800ceac <_dtoa_r+0xb34>
 800cf38:	4651      	mov	r1, sl
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	220a      	movs	r2, #10
 800cf3e:	4628      	mov	r0, r5
 800cf40:	f000 f990 	bl	800d264 <__multadd>
 800cf44:	4682      	mov	sl, r0
 800cf46:	e7eb      	b.n	800cf20 <_dtoa_r+0xba8>
 800cf48:	0800f79c 	.word	0x0800f79c
 800cf4c:	0800f5f4 	.word	0x0800f5f4
 800cf50:	0800f719 	.word	0x0800f719

0800cf54 <std>:
 800cf54:	2300      	movs	r3, #0
 800cf56:	b510      	push	{r4, lr}
 800cf58:	4604      	mov	r4, r0
 800cf5a:	e9c0 3300 	strd	r3, r3, [r0]
 800cf5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cf62:	6083      	str	r3, [r0, #8]
 800cf64:	8181      	strh	r1, [r0, #12]
 800cf66:	6643      	str	r3, [r0, #100]	; 0x64
 800cf68:	81c2      	strh	r2, [r0, #14]
 800cf6a:	6183      	str	r3, [r0, #24]
 800cf6c:	4619      	mov	r1, r3
 800cf6e:	2208      	movs	r2, #8
 800cf70:	305c      	adds	r0, #92	; 0x5c
 800cf72:	f7fe fb33 	bl	800b5dc <memset>
 800cf76:	4b05      	ldr	r3, [pc, #20]	; (800cf8c <std+0x38>)
 800cf78:	6224      	str	r4, [r4, #32]
 800cf7a:	6263      	str	r3, [r4, #36]	; 0x24
 800cf7c:	4b04      	ldr	r3, [pc, #16]	; (800cf90 <std+0x3c>)
 800cf7e:	62a3      	str	r3, [r4, #40]	; 0x28
 800cf80:	4b04      	ldr	r3, [pc, #16]	; (800cf94 <std+0x40>)
 800cf82:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cf84:	4b04      	ldr	r3, [pc, #16]	; (800cf98 <std+0x44>)
 800cf86:	6323      	str	r3, [r4, #48]	; 0x30
 800cf88:	bd10      	pop	{r4, pc}
 800cf8a:	bf00      	nop
 800cf8c:	0800de29 	.word	0x0800de29
 800cf90:	0800de4b 	.word	0x0800de4b
 800cf94:	0800de83 	.word	0x0800de83
 800cf98:	0800dea7 	.word	0x0800dea7

0800cf9c <_cleanup_r>:
 800cf9c:	4901      	ldr	r1, [pc, #4]	; (800cfa4 <_cleanup_r+0x8>)
 800cf9e:	f000 b8af 	b.w	800d100 <_fwalk_reent>
 800cfa2:	bf00      	nop
 800cfa4:	0800e1bd 	.word	0x0800e1bd

0800cfa8 <__sfmoreglue>:
 800cfa8:	b570      	push	{r4, r5, r6, lr}
 800cfaa:	2568      	movs	r5, #104	; 0x68
 800cfac:	1e4a      	subs	r2, r1, #1
 800cfae:	4355      	muls	r5, r2
 800cfb0:	460e      	mov	r6, r1
 800cfb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cfb6:	f7fe fb65 	bl	800b684 <_malloc_r>
 800cfba:	4604      	mov	r4, r0
 800cfbc:	b140      	cbz	r0, 800cfd0 <__sfmoreglue+0x28>
 800cfbe:	2100      	movs	r1, #0
 800cfc0:	e9c0 1600 	strd	r1, r6, [r0]
 800cfc4:	300c      	adds	r0, #12
 800cfc6:	60a0      	str	r0, [r4, #8]
 800cfc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cfcc:	f7fe fb06 	bl	800b5dc <memset>
 800cfd0:	4620      	mov	r0, r4
 800cfd2:	bd70      	pop	{r4, r5, r6, pc}

0800cfd4 <__sfp_lock_acquire>:
 800cfd4:	4801      	ldr	r0, [pc, #4]	; (800cfdc <__sfp_lock_acquire+0x8>)
 800cfd6:	f000 b8b8 	b.w	800d14a <__retarget_lock_acquire_recursive>
 800cfda:	bf00      	nop
 800cfdc:	20000bb4 	.word	0x20000bb4

0800cfe0 <__sfp_lock_release>:
 800cfe0:	4801      	ldr	r0, [pc, #4]	; (800cfe8 <__sfp_lock_release+0x8>)
 800cfe2:	f000 b8b3 	b.w	800d14c <__retarget_lock_release_recursive>
 800cfe6:	bf00      	nop
 800cfe8:	20000bb4 	.word	0x20000bb4

0800cfec <__sinit_lock_acquire>:
 800cfec:	4801      	ldr	r0, [pc, #4]	; (800cff4 <__sinit_lock_acquire+0x8>)
 800cfee:	f000 b8ac 	b.w	800d14a <__retarget_lock_acquire_recursive>
 800cff2:	bf00      	nop
 800cff4:	20000baf 	.word	0x20000baf

0800cff8 <__sinit_lock_release>:
 800cff8:	4801      	ldr	r0, [pc, #4]	; (800d000 <__sinit_lock_release+0x8>)
 800cffa:	f000 b8a7 	b.w	800d14c <__retarget_lock_release_recursive>
 800cffe:	bf00      	nop
 800d000:	20000baf 	.word	0x20000baf

0800d004 <__sinit>:
 800d004:	b510      	push	{r4, lr}
 800d006:	4604      	mov	r4, r0
 800d008:	f7ff fff0 	bl	800cfec <__sinit_lock_acquire>
 800d00c:	69a3      	ldr	r3, [r4, #24]
 800d00e:	b11b      	cbz	r3, 800d018 <__sinit+0x14>
 800d010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d014:	f7ff bff0 	b.w	800cff8 <__sinit_lock_release>
 800d018:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d01c:	6523      	str	r3, [r4, #80]	; 0x50
 800d01e:	4b13      	ldr	r3, [pc, #76]	; (800d06c <__sinit+0x68>)
 800d020:	4a13      	ldr	r2, [pc, #76]	; (800d070 <__sinit+0x6c>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	62a2      	str	r2, [r4, #40]	; 0x28
 800d026:	42a3      	cmp	r3, r4
 800d028:	bf08      	it	eq
 800d02a:	2301      	moveq	r3, #1
 800d02c:	4620      	mov	r0, r4
 800d02e:	bf08      	it	eq
 800d030:	61a3      	streq	r3, [r4, #24]
 800d032:	f000 f81f 	bl	800d074 <__sfp>
 800d036:	6060      	str	r0, [r4, #4]
 800d038:	4620      	mov	r0, r4
 800d03a:	f000 f81b 	bl	800d074 <__sfp>
 800d03e:	60a0      	str	r0, [r4, #8]
 800d040:	4620      	mov	r0, r4
 800d042:	f000 f817 	bl	800d074 <__sfp>
 800d046:	2200      	movs	r2, #0
 800d048:	2104      	movs	r1, #4
 800d04a:	60e0      	str	r0, [r4, #12]
 800d04c:	6860      	ldr	r0, [r4, #4]
 800d04e:	f7ff ff81 	bl	800cf54 <std>
 800d052:	2201      	movs	r2, #1
 800d054:	2109      	movs	r1, #9
 800d056:	68a0      	ldr	r0, [r4, #8]
 800d058:	f7ff ff7c 	bl	800cf54 <std>
 800d05c:	2202      	movs	r2, #2
 800d05e:	2112      	movs	r1, #18
 800d060:	68e0      	ldr	r0, [r4, #12]
 800d062:	f7ff ff77 	bl	800cf54 <std>
 800d066:	2301      	movs	r3, #1
 800d068:	61a3      	str	r3, [r4, #24]
 800d06a:	e7d1      	b.n	800d010 <__sinit+0xc>
 800d06c:	0800f5e0 	.word	0x0800f5e0
 800d070:	0800cf9d 	.word	0x0800cf9d

0800d074 <__sfp>:
 800d074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d076:	4607      	mov	r7, r0
 800d078:	f7ff ffac 	bl	800cfd4 <__sfp_lock_acquire>
 800d07c:	4b1e      	ldr	r3, [pc, #120]	; (800d0f8 <__sfp+0x84>)
 800d07e:	681e      	ldr	r6, [r3, #0]
 800d080:	69b3      	ldr	r3, [r6, #24]
 800d082:	b913      	cbnz	r3, 800d08a <__sfp+0x16>
 800d084:	4630      	mov	r0, r6
 800d086:	f7ff ffbd 	bl	800d004 <__sinit>
 800d08a:	3648      	adds	r6, #72	; 0x48
 800d08c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d090:	3b01      	subs	r3, #1
 800d092:	d503      	bpl.n	800d09c <__sfp+0x28>
 800d094:	6833      	ldr	r3, [r6, #0]
 800d096:	b30b      	cbz	r3, 800d0dc <__sfp+0x68>
 800d098:	6836      	ldr	r6, [r6, #0]
 800d09a:	e7f7      	b.n	800d08c <__sfp+0x18>
 800d09c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d0a0:	b9d5      	cbnz	r5, 800d0d8 <__sfp+0x64>
 800d0a2:	4b16      	ldr	r3, [pc, #88]	; (800d0fc <__sfp+0x88>)
 800d0a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d0a8:	60e3      	str	r3, [r4, #12]
 800d0aa:	6665      	str	r5, [r4, #100]	; 0x64
 800d0ac:	f000 f84c 	bl	800d148 <__retarget_lock_init_recursive>
 800d0b0:	f7ff ff96 	bl	800cfe0 <__sfp_lock_release>
 800d0b4:	2208      	movs	r2, #8
 800d0b6:	4629      	mov	r1, r5
 800d0b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d0bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d0c0:	6025      	str	r5, [r4, #0]
 800d0c2:	61a5      	str	r5, [r4, #24]
 800d0c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d0c8:	f7fe fa88 	bl	800b5dc <memset>
 800d0cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d0d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d0d4:	4620      	mov	r0, r4
 800d0d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0d8:	3468      	adds	r4, #104	; 0x68
 800d0da:	e7d9      	b.n	800d090 <__sfp+0x1c>
 800d0dc:	2104      	movs	r1, #4
 800d0de:	4638      	mov	r0, r7
 800d0e0:	f7ff ff62 	bl	800cfa8 <__sfmoreglue>
 800d0e4:	4604      	mov	r4, r0
 800d0e6:	6030      	str	r0, [r6, #0]
 800d0e8:	2800      	cmp	r0, #0
 800d0ea:	d1d5      	bne.n	800d098 <__sfp+0x24>
 800d0ec:	f7ff ff78 	bl	800cfe0 <__sfp_lock_release>
 800d0f0:	230c      	movs	r3, #12
 800d0f2:	603b      	str	r3, [r7, #0]
 800d0f4:	e7ee      	b.n	800d0d4 <__sfp+0x60>
 800d0f6:	bf00      	nop
 800d0f8:	0800f5e0 	.word	0x0800f5e0
 800d0fc:	ffff0001 	.word	0xffff0001

0800d100 <_fwalk_reent>:
 800d100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d104:	4606      	mov	r6, r0
 800d106:	4688      	mov	r8, r1
 800d108:	2700      	movs	r7, #0
 800d10a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d10e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d112:	f1b9 0901 	subs.w	r9, r9, #1
 800d116:	d505      	bpl.n	800d124 <_fwalk_reent+0x24>
 800d118:	6824      	ldr	r4, [r4, #0]
 800d11a:	2c00      	cmp	r4, #0
 800d11c:	d1f7      	bne.n	800d10e <_fwalk_reent+0xe>
 800d11e:	4638      	mov	r0, r7
 800d120:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d124:	89ab      	ldrh	r3, [r5, #12]
 800d126:	2b01      	cmp	r3, #1
 800d128:	d907      	bls.n	800d13a <_fwalk_reent+0x3a>
 800d12a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d12e:	3301      	adds	r3, #1
 800d130:	d003      	beq.n	800d13a <_fwalk_reent+0x3a>
 800d132:	4629      	mov	r1, r5
 800d134:	4630      	mov	r0, r6
 800d136:	47c0      	blx	r8
 800d138:	4307      	orrs	r7, r0
 800d13a:	3568      	adds	r5, #104	; 0x68
 800d13c:	e7e9      	b.n	800d112 <_fwalk_reent+0x12>
	...

0800d140 <_localeconv_r>:
 800d140:	4800      	ldr	r0, [pc, #0]	; (800d144 <_localeconv_r+0x4>)
 800d142:	4770      	bx	lr
 800d144:	20000170 	.word	0x20000170

0800d148 <__retarget_lock_init_recursive>:
 800d148:	4770      	bx	lr

0800d14a <__retarget_lock_acquire_recursive>:
 800d14a:	4770      	bx	lr

0800d14c <__retarget_lock_release_recursive>:
 800d14c:	4770      	bx	lr

0800d14e <memchr>:
 800d14e:	4603      	mov	r3, r0
 800d150:	b510      	push	{r4, lr}
 800d152:	b2c9      	uxtb	r1, r1
 800d154:	4402      	add	r2, r0
 800d156:	4293      	cmp	r3, r2
 800d158:	4618      	mov	r0, r3
 800d15a:	d101      	bne.n	800d160 <memchr+0x12>
 800d15c:	2000      	movs	r0, #0
 800d15e:	e003      	b.n	800d168 <memchr+0x1a>
 800d160:	7804      	ldrb	r4, [r0, #0]
 800d162:	3301      	adds	r3, #1
 800d164:	428c      	cmp	r4, r1
 800d166:	d1f6      	bne.n	800d156 <memchr+0x8>
 800d168:	bd10      	pop	{r4, pc}

0800d16a <memcpy>:
 800d16a:	440a      	add	r2, r1
 800d16c:	4291      	cmp	r1, r2
 800d16e:	f100 33ff 	add.w	r3, r0, #4294967295
 800d172:	d100      	bne.n	800d176 <memcpy+0xc>
 800d174:	4770      	bx	lr
 800d176:	b510      	push	{r4, lr}
 800d178:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d17c:	4291      	cmp	r1, r2
 800d17e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d182:	d1f9      	bne.n	800d178 <memcpy+0xe>
 800d184:	bd10      	pop	{r4, pc}
	...

0800d188 <__malloc_lock>:
 800d188:	4801      	ldr	r0, [pc, #4]	; (800d190 <__malloc_lock+0x8>)
 800d18a:	f7ff bfde 	b.w	800d14a <__retarget_lock_acquire_recursive>
 800d18e:	bf00      	nop
 800d190:	20000bb0 	.word	0x20000bb0

0800d194 <__malloc_unlock>:
 800d194:	4801      	ldr	r0, [pc, #4]	; (800d19c <__malloc_unlock+0x8>)
 800d196:	f7ff bfd9 	b.w	800d14c <__retarget_lock_release_recursive>
 800d19a:	bf00      	nop
 800d19c:	20000bb0 	.word	0x20000bb0

0800d1a0 <_Balloc>:
 800d1a0:	b570      	push	{r4, r5, r6, lr}
 800d1a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d1a4:	4604      	mov	r4, r0
 800d1a6:	460d      	mov	r5, r1
 800d1a8:	b976      	cbnz	r6, 800d1c8 <_Balloc+0x28>
 800d1aa:	2010      	movs	r0, #16
 800d1ac:	f7fe fa06 	bl	800b5bc <malloc>
 800d1b0:	4602      	mov	r2, r0
 800d1b2:	6260      	str	r0, [r4, #36]	; 0x24
 800d1b4:	b920      	cbnz	r0, 800d1c0 <_Balloc+0x20>
 800d1b6:	2166      	movs	r1, #102	; 0x66
 800d1b8:	4b17      	ldr	r3, [pc, #92]	; (800d218 <_Balloc+0x78>)
 800d1ba:	4818      	ldr	r0, [pc, #96]	; (800d21c <_Balloc+0x7c>)
 800d1bc:	f000 ff4a 	bl	800e054 <__assert_func>
 800d1c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d1c4:	6006      	str	r6, [r0, #0]
 800d1c6:	60c6      	str	r6, [r0, #12]
 800d1c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d1ca:	68f3      	ldr	r3, [r6, #12]
 800d1cc:	b183      	cbz	r3, 800d1f0 <_Balloc+0x50>
 800d1ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1d0:	68db      	ldr	r3, [r3, #12]
 800d1d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d1d6:	b9b8      	cbnz	r0, 800d208 <_Balloc+0x68>
 800d1d8:	2101      	movs	r1, #1
 800d1da:	fa01 f605 	lsl.w	r6, r1, r5
 800d1de:	1d72      	adds	r2, r6, #5
 800d1e0:	4620      	mov	r0, r4
 800d1e2:	0092      	lsls	r2, r2, #2
 800d1e4:	f000 fb5e 	bl	800d8a4 <_calloc_r>
 800d1e8:	b160      	cbz	r0, 800d204 <_Balloc+0x64>
 800d1ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d1ee:	e00e      	b.n	800d20e <_Balloc+0x6e>
 800d1f0:	2221      	movs	r2, #33	; 0x21
 800d1f2:	2104      	movs	r1, #4
 800d1f4:	4620      	mov	r0, r4
 800d1f6:	f000 fb55 	bl	800d8a4 <_calloc_r>
 800d1fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1fc:	60f0      	str	r0, [r6, #12]
 800d1fe:	68db      	ldr	r3, [r3, #12]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d1e4      	bne.n	800d1ce <_Balloc+0x2e>
 800d204:	2000      	movs	r0, #0
 800d206:	bd70      	pop	{r4, r5, r6, pc}
 800d208:	6802      	ldr	r2, [r0, #0]
 800d20a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d20e:	2300      	movs	r3, #0
 800d210:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d214:	e7f7      	b.n	800d206 <_Balloc+0x66>
 800d216:	bf00      	nop
 800d218:	0800f726 	.word	0x0800f726
 800d21c:	0800f810 	.word	0x0800f810

0800d220 <_Bfree>:
 800d220:	b570      	push	{r4, r5, r6, lr}
 800d222:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d224:	4605      	mov	r5, r0
 800d226:	460c      	mov	r4, r1
 800d228:	b976      	cbnz	r6, 800d248 <_Bfree+0x28>
 800d22a:	2010      	movs	r0, #16
 800d22c:	f7fe f9c6 	bl	800b5bc <malloc>
 800d230:	4602      	mov	r2, r0
 800d232:	6268      	str	r0, [r5, #36]	; 0x24
 800d234:	b920      	cbnz	r0, 800d240 <_Bfree+0x20>
 800d236:	218a      	movs	r1, #138	; 0x8a
 800d238:	4b08      	ldr	r3, [pc, #32]	; (800d25c <_Bfree+0x3c>)
 800d23a:	4809      	ldr	r0, [pc, #36]	; (800d260 <_Bfree+0x40>)
 800d23c:	f000 ff0a 	bl	800e054 <__assert_func>
 800d240:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d244:	6006      	str	r6, [r0, #0]
 800d246:	60c6      	str	r6, [r0, #12]
 800d248:	b13c      	cbz	r4, 800d25a <_Bfree+0x3a>
 800d24a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d24c:	6862      	ldr	r2, [r4, #4]
 800d24e:	68db      	ldr	r3, [r3, #12]
 800d250:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d254:	6021      	str	r1, [r4, #0]
 800d256:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d25a:	bd70      	pop	{r4, r5, r6, pc}
 800d25c:	0800f726 	.word	0x0800f726
 800d260:	0800f810 	.word	0x0800f810

0800d264 <__multadd>:
 800d264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d268:	4698      	mov	r8, r3
 800d26a:	460c      	mov	r4, r1
 800d26c:	2300      	movs	r3, #0
 800d26e:	690e      	ldr	r6, [r1, #16]
 800d270:	4607      	mov	r7, r0
 800d272:	f101 0014 	add.w	r0, r1, #20
 800d276:	6805      	ldr	r5, [r0, #0]
 800d278:	3301      	adds	r3, #1
 800d27a:	b2a9      	uxth	r1, r5
 800d27c:	fb02 8101 	mla	r1, r2, r1, r8
 800d280:	0c2d      	lsrs	r5, r5, #16
 800d282:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d286:	fb02 c505 	mla	r5, r2, r5, ip
 800d28a:	b289      	uxth	r1, r1
 800d28c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d290:	429e      	cmp	r6, r3
 800d292:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d296:	f840 1b04 	str.w	r1, [r0], #4
 800d29a:	dcec      	bgt.n	800d276 <__multadd+0x12>
 800d29c:	f1b8 0f00 	cmp.w	r8, #0
 800d2a0:	d022      	beq.n	800d2e8 <__multadd+0x84>
 800d2a2:	68a3      	ldr	r3, [r4, #8]
 800d2a4:	42b3      	cmp	r3, r6
 800d2a6:	dc19      	bgt.n	800d2dc <__multadd+0x78>
 800d2a8:	6861      	ldr	r1, [r4, #4]
 800d2aa:	4638      	mov	r0, r7
 800d2ac:	3101      	adds	r1, #1
 800d2ae:	f7ff ff77 	bl	800d1a0 <_Balloc>
 800d2b2:	4605      	mov	r5, r0
 800d2b4:	b928      	cbnz	r0, 800d2c2 <__multadd+0x5e>
 800d2b6:	4602      	mov	r2, r0
 800d2b8:	21b5      	movs	r1, #181	; 0xb5
 800d2ba:	4b0d      	ldr	r3, [pc, #52]	; (800d2f0 <__multadd+0x8c>)
 800d2bc:	480d      	ldr	r0, [pc, #52]	; (800d2f4 <__multadd+0x90>)
 800d2be:	f000 fec9 	bl	800e054 <__assert_func>
 800d2c2:	6922      	ldr	r2, [r4, #16]
 800d2c4:	f104 010c 	add.w	r1, r4, #12
 800d2c8:	3202      	adds	r2, #2
 800d2ca:	0092      	lsls	r2, r2, #2
 800d2cc:	300c      	adds	r0, #12
 800d2ce:	f7ff ff4c 	bl	800d16a <memcpy>
 800d2d2:	4621      	mov	r1, r4
 800d2d4:	4638      	mov	r0, r7
 800d2d6:	f7ff ffa3 	bl	800d220 <_Bfree>
 800d2da:	462c      	mov	r4, r5
 800d2dc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d2e0:	3601      	adds	r6, #1
 800d2e2:	f8c3 8014 	str.w	r8, [r3, #20]
 800d2e6:	6126      	str	r6, [r4, #16]
 800d2e8:	4620      	mov	r0, r4
 800d2ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2ee:	bf00      	nop
 800d2f0:	0800f79c 	.word	0x0800f79c
 800d2f4:	0800f810 	.word	0x0800f810

0800d2f8 <__hi0bits>:
 800d2f8:	0c02      	lsrs	r2, r0, #16
 800d2fa:	0412      	lsls	r2, r2, #16
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	b9ca      	cbnz	r2, 800d334 <__hi0bits+0x3c>
 800d300:	0403      	lsls	r3, r0, #16
 800d302:	2010      	movs	r0, #16
 800d304:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d308:	bf04      	itt	eq
 800d30a:	021b      	lsleq	r3, r3, #8
 800d30c:	3008      	addeq	r0, #8
 800d30e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d312:	bf04      	itt	eq
 800d314:	011b      	lsleq	r3, r3, #4
 800d316:	3004      	addeq	r0, #4
 800d318:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d31c:	bf04      	itt	eq
 800d31e:	009b      	lsleq	r3, r3, #2
 800d320:	3002      	addeq	r0, #2
 800d322:	2b00      	cmp	r3, #0
 800d324:	db05      	blt.n	800d332 <__hi0bits+0x3a>
 800d326:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800d32a:	f100 0001 	add.w	r0, r0, #1
 800d32e:	bf08      	it	eq
 800d330:	2020      	moveq	r0, #32
 800d332:	4770      	bx	lr
 800d334:	2000      	movs	r0, #0
 800d336:	e7e5      	b.n	800d304 <__hi0bits+0xc>

0800d338 <__lo0bits>:
 800d338:	6803      	ldr	r3, [r0, #0]
 800d33a:	4602      	mov	r2, r0
 800d33c:	f013 0007 	ands.w	r0, r3, #7
 800d340:	d00b      	beq.n	800d35a <__lo0bits+0x22>
 800d342:	07d9      	lsls	r1, r3, #31
 800d344:	d422      	bmi.n	800d38c <__lo0bits+0x54>
 800d346:	0798      	lsls	r0, r3, #30
 800d348:	bf49      	itett	mi
 800d34a:	085b      	lsrmi	r3, r3, #1
 800d34c:	089b      	lsrpl	r3, r3, #2
 800d34e:	2001      	movmi	r0, #1
 800d350:	6013      	strmi	r3, [r2, #0]
 800d352:	bf5c      	itt	pl
 800d354:	2002      	movpl	r0, #2
 800d356:	6013      	strpl	r3, [r2, #0]
 800d358:	4770      	bx	lr
 800d35a:	b299      	uxth	r1, r3
 800d35c:	b909      	cbnz	r1, 800d362 <__lo0bits+0x2a>
 800d35e:	2010      	movs	r0, #16
 800d360:	0c1b      	lsrs	r3, r3, #16
 800d362:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d366:	bf04      	itt	eq
 800d368:	0a1b      	lsreq	r3, r3, #8
 800d36a:	3008      	addeq	r0, #8
 800d36c:	0719      	lsls	r1, r3, #28
 800d36e:	bf04      	itt	eq
 800d370:	091b      	lsreq	r3, r3, #4
 800d372:	3004      	addeq	r0, #4
 800d374:	0799      	lsls	r1, r3, #30
 800d376:	bf04      	itt	eq
 800d378:	089b      	lsreq	r3, r3, #2
 800d37a:	3002      	addeq	r0, #2
 800d37c:	07d9      	lsls	r1, r3, #31
 800d37e:	d403      	bmi.n	800d388 <__lo0bits+0x50>
 800d380:	085b      	lsrs	r3, r3, #1
 800d382:	f100 0001 	add.w	r0, r0, #1
 800d386:	d003      	beq.n	800d390 <__lo0bits+0x58>
 800d388:	6013      	str	r3, [r2, #0]
 800d38a:	4770      	bx	lr
 800d38c:	2000      	movs	r0, #0
 800d38e:	4770      	bx	lr
 800d390:	2020      	movs	r0, #32
 800d392:	4770      	bx	lr

0800d394 <__i2b>:
 800d394:	b510      	push	{r4, lr}
 800d396:	460c      	mov	r4, r1
 800d398:	2101      	movs	r1, #1
 800d39a:	f7ff ff01 	bl	800d1a0 <_Balloc>
 800d39e:	4602      	mov	r2, r0
 800d3a0:	b928      	cbnz	r0, 800d3ae <__i2b+0x1a>
 800d3a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d3a6:	4b04      	ldr	r3, [pc, #16]	; (800d3b8 <__i2b+0x24>)
 800d3a8:	4804      	ldr	r0, [pc, #16]	; (800d3bc <__i2b+0x28>)
 800d3aa:	f000 fe53 	bl	800e054 <__assert_func>
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	6144      	str	r4, [r0, #20]
 800d3b2:	6103      	str	r3, [r0, #16]
 800d3b4:	bd10      	pop	{r4, pc}
 800d3b6:	bf00      	nop
 800d3b8:	0800f79c 	.word	0x0800f79c
 800d3bc:	0800f810 	.word	0x0800f810

0800d3c0 <__multiply>:
 800d3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3c4:	4614      	mov	r4, r2
 800d3c6:	690a      	ldr	r2, [r1, #16]
 800d3c8:	6923      	ldr	r3, [r4, #16]
 800d3ca:	460d      	mov	r5, r1
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	bfbe      	ittt	lt
 800d3d0:	460b      	movlt	r3, r1
 800d3d2:	4625      	movlt	r5, r4
 800d3d4:	461c      	movlt	r4, r3
 800d3d6:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d3da:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d3de:	68ab      	ldr	r3, [r5, #8]
 800d3e0:	6869      	ldr	r1, [r5, #4]
 800d3e2:	eb0a 0709 	add.w	r7, sl, r9
 800d3e6:	42bb      	cmp	r3, r7
 800d3e8:	b085      	sub	sp, #20
 800d3ea:	bfb8      	it	lt
 800d3ec:	3101      	addlt	r1, #1
 800d3ee:	f7ff fed7 	bl	800d1a0 <_Balloc>
 800d3f2:	b930      	cbnz	r0, 800d402 <__multiply+0x42>
 800d3f4:	4602      	mov	r2, r0
 800d3f6:	f240 115d 	movw	r1, #349	; 0x15d
 800d3fa:	4b41      	ldr	r3, [pc, #260]	; (800d500 <__multiply+0x140>)
 800d3fc:	4841      	ldr	r0, [pc, #260]	; (800d504 <__multiply+0x144>)
 800d3fe:	f000 fe29 	bl	800e054 <__assert_func>
 800d402:	f100 0614 	add.w	r6, r0, #20
 800d406:	4633      	mov	r3, r6
 800d408:	2200      	movs	r2, #0
 800d40a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d40e:	4543      	cmp	r3, r8
 800d410:	d31e      	bcc.n	800d450 <__multiply+0x90>
 800d412:	f105 0c14 	add.w	ip, r5, #20
 800d416:	f104 0314 	add.w	r3, r4, #20
 800d41a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d41e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d422:	9202      	str	r2, [sp, #8]
 800d424:	ebac 0205 	sub.w	r2, ip, r5
 800d428:	3a15      	subs	r2, #21
 800d42a:	f022 0203 	bic.w	r2, r2, #3
 800d42e:	3204      	adds	r2, #4
 800d430:	f105 0115 	add.w	r1, r5, #21
 800d434:	458c      	cmp	ip, r1
 800d436:	bf38      	it	cc
 800d438:	2204      	movcc	r2, #4
 800d43a:	9201      	str	r2, [sp, #4]
 800d43c:	9a02      	ldr	r2, [sp, #8]
 800d43e:	9303      	str	r3, [sp, #12]
 800d440:	429a      	cmp	r2, r3
 800d442:	d808      	bhi.n	800d456 <__multiply+0x96>
 800d444:	2f00      	cmp	r7, #0
 800d446:	dc55      	bgt.n	800d4f4 <__multiply+0x134>
 800d448:	6107      	str	r7, [r0, #16]
 800d44a:	b005      	add	sp, #20
 800d44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d450:	f843 2b04 	str.w	r2, [r3], #4
 800d454:	e7db      	b.n	800d40e <__multiply+0x4e>
 800d456:	f8b3 a000 	ldrh.w	sl, [r3]
 800d45a:	f1ba 0f00 	cmp.w	sl, #0
 800d45e:	d020      	beq.n	800d4a2 <__multiply+0xe2>
 800d460:	46b1      	mov	r9, r6
 800d462:	2200      	movs	r2, #0
 800d464:	f105 0e14 	add.w	lr, r5, #20
 800d468:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d46c:	f8d9 b000 	ldr.w	fp, [r9]
 800d470:	b2a1      	uxth	r1, r4
 800d472:	fa1f fb8b 	uxth.w	fp, fp
 800d476:	fb0a b101 	mla	r1, sl, r1, fp
 800d47a:	4411      	add	r1, r2
 800d47c:	f8d9 2000 	ldr.w	r2, [r9]
 800d480:	0c24      	lsrs	r4, r4, #16
 800d482:	0c12      	lsrs	r2, r2, #16
 800d484:	fb0a 2404 	mla	r4, sl, r4, r2
 800d488:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d48c:	b289      	uxth	r1, r1
 800d48e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d492:	45f4      	cmp	ip, lr
 800d494:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d498:	f849 1b04 	str.w	r1, [r9], #4
 800d49c:	d8e4      	bhi.n	800d468 <__multiply+0xa8>
 800d49e:	9901      	ldr	r1, [sp, #4]
 800d4a0:	5072      	str	r2, [r6, r1]
 800d4a2:	9a03      	ldr	r2, [sp, #12]
 800d4a4:	3304      	adds	r3, #4
 800d4a6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d4aa:	f1b9 0f00 	cmp.w	r9, #0
 800d4ae:	d01f      	beq.n	800d4f0 <__multiply+0x130>
 800d4b0:	46b6      	mov	lr, r6
 800d4b2:	f04f 0a00 	mov.w	sl, #0
 800d4b6:	6834      	ldr	r4, [r6, #0]
 800d4b8:	f105 0114 	add.w	r1, r5, #20
 800d4bc:	880a      	ldrh	r2, [r1, #0]
 800d4be:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d4c2:	b2a4      	uxth	r4, r4
 800d4c4:	fb09 b202 	mla	r2, r9, r2, fp
 800d4c8:	4492      	add	sl, r2
 800d4ca:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d4ce:	f84e 4b04 	str.w	r4, [lr], #4
 800d4d2:	f851 4b04 	ldr.w	r4, [r1], #4
 800d4d6:	f8be 2000 	ldrh.w	r2, [lr]
 800d4da:	0c24      	lsrs	r4, r4, #16
 800d4dc:	fb09 2404 	mla	r4, r9, r4, r2
 800d4e0:	458c      	cmp	ip, r1
 800d4e2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d4e6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d4ea:	d8e7      	bhi.n	800d4bc <__multiply+0xfc>
 800d4ec:	9a01      	ldr	r2, [sp, #4]
 800d4ee:	50b4      	str	r4, [r6, r2]
 800d4f0:	3604      	adds	r6, #4
 800d4f2:	e7a3      	b.n	800d43c <__multiply+0x7c>
 800d4f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d1a5      	bne.n	800d448 <__multiply+0x88>
 800d4fc:	3f01      	subs	r7, #1
 800d4fe:	e7a1      	b.n	800d444 <__multiply+0x84>
 800d500:	0800f79c 	.word	0x0800f79c
 800d504:	0800f810 	.word	0x0800f810

0800d508 <__pow5mult>:
 800d508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d50c:	4615      	mov	r5, r2
 800d50e:	f012 0203 	ands.w	r2, r2, #3
 800d512:	4606      	mov	r6, r0
 800d514:	460f      	mov	r7, r1
 800d516:	d007      	beq.n	800d528 <__pow5mult+0x20>
 800d518:	4c25      	ldr	r4, [pc, #148]	; (800d5b0 <__pow5mult+0xa8>)
 800d51a:	3a01      	subs	r2, #1
 800d51c:	2300      	movs	r3, #0
 800d51e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d522:	f7ff fe9f 	bl	800d264 <__multadd>
 800d526:	4607      	mov	r7, r0
 800d528:	10ad      	asrs	r5, r5, #2
 800d52a:	d03d      	beq.n	800d5a8 <__pow5mult+0xa0>
 800d52c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d52e:	b97c      	cbnz	r4, 800d550 <__pow5mult+0x48>
 800d530:	2010      	movs	r0, #16
 800d532:	f7fe f843 	bl	800b5bc <malloc>
 800d536:	4602      	mov	r2, r0
 800d538:	6270      	str	r0, [r6, #36]	; 0x24
 800d53a:	b928      	cbnz	r0, 800d548 <__pow5mult+0x40>
 800d53c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d540:	4b1c      	ldr	r3, [pc, #112]	; (800d5b4 <__pow5mult+0xac>)
 800d542:	481d      	ldr	r0, [pc, #116]	; (800d5b8 <__pow5mult+0xb0>)
 800d544:	f000 fd86 	bl	800e054 <__assert_func>
 800d548:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d54c:	6004      	str	r4, [r0, #0]
 800d54e:	60c4      	str	r4, [r0, #12]
 800d550:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d554:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d558:	b94c      	cbnz	r4, 800d56e <__pow5mult+0x66>
 800d55a:	f240 2171 	movw	r1, #625	; 0x271
 800d55e:	4630      	mov	r0, r6
 800d560:	f7ff ff18 	bl	800d394 <__i2b>
 800d564:	2300      	movs	r3, #0
 800d566:	4604      	mov	r4, r0
 800d568:	f8c8 0008 	str.w	r0, [r8, #8]
 800d56c:	6003      	str	r3, [r0, #0]
 800d56e:	f04f 0900 	mov.w	r9, #0
 800d572:	07eb      	lsls	r3, r5, #31
 800d574:	d50a      	bpl.n	800d58c <__pow5mult+0x84>
 800d576:	4639      	mov	r1, r7
 800d578:	4622      	mov	r2, r4
 800d57a:	4630      	mov	r0, r6
 800d57c:	f7ff ff20 	bl	800d3c0 <__multiply>
 800d580:	4680      	mov	r8, r0
 800d582:	4639      	mov	r1, r7
 800d584:	4630      	mov	r0, r6
 800d586:	f7ff fe4b 	bl	800d220 <_Bfree>
 800d58a:	4647      	mov	r7, r8
 800d58c:	106d      	asrs	r5, r5, #1
 800d58e:	d00b      	beq.n	800d5a8 <__pow5mult+0xa0>
 800d590:	6820      	ldr	r0, [r4, #0]
 800d592:	b938      	cbnz	r0, 800d5a4 <__pow5mult+0x9c>
 800d594:	4622      	mov	r2, r4
 800d596:	4621      	mov	r1, r4
 800d598:	4630      	mov	r0, r6
 800d59a:	f7ff ff11 	bl	800d3c0 <__multiply>
 800d59e:	6020      	str	r0, [r4, #0]
 800d5a0:	f8c0 9000 	str.w	r9, [r0]
 800d5a4:	4604      	mov	r4, r0
 800d5a6:	e7e4      	b.n	800d572 <__pow5mult+0x6a>
 800d5a8:	4638      	mov	r0, r7
 800d5aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5ae:	bf00      	nop
 800d5b0:	0800f960 	.word	0x0800f960
 800d5b4:	0800f726 	.word	0x0800f726
 800d5b8:	0800f810 	.word	0x0800f810

0800d5bc <__lshift>:
 800d5bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5c0:	460c      	mov	r4, r1
 800d5c2:	4607      	mov	r7, r0
 800d5c4:	4691      	mov	r9, r2
 800d5c6:	6923      	ldr	r3, [r4, #16]
 800d5c8:	6849      	ldr	r1, [r1, #4]
 800d5ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d5ce:	68a3      	ldr	r3, [r4, #8]
 800d5d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d5d4:	f108 0601 	add.w	r6, r8, #1
 800d5d8:	42b3      	cmp	r3, r6
 800d5da:	db0b      	blt.n	800d5f4 <__lshift+0x38>
 800d5dc:	4638      	mov	r0, r7
 800d5de:	f7ff fddf 	bl	800d1a0 <_Balloc>
 800d5e2:	4605      	mov	r5, r0
 800d5e4:	b948      	cbnz	r0, 800d5fa <__lshift+0x3e>
 800d5e6:	4602      	mov	r2, r0
 800d5e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d5ec:	4b27      	ldr	r3, [pc, #156]	; (800d68c <__lshift+0xd0>)
 800d5ee:	4828      	ldr	r0, [pc, #160]	; (800d690 <__lshift+0xd4>)
 800d5f0:	f000 fd30 	bl	800e054 <__assert_func>
 800d5f4:	3101      	adds	r1, #1
 800d5f6:	005b      	lsls	r3, r3, #1
 800d5f8:	e7ee      	b.n	800d5d8 <__lshift+0x1c>
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	f100 0114 	add.w	r1, r0, #20
 800d600:	f100 0210 	add.w	r2, r0, #16
 800d604:	4618      	mov	r0, r3
 800d606:	4553      	cmp	r3, sl
 800d608:	db33      	blt.n	800d672 <__lshift+0xb6>
 800d60a:	6920      	ldr	r0, [r4, #16]
 800d60c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d610:	f104 0314 	add.w	r3, r4, #20
 800d614:	f019 091f 	ands.w	r9, r9, #31
 800d618:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d61c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d620:	d02b      	beq.n	800d67a <__lshift+0xbe>
 800d622:	468a      	mov	sl, r1
 800d624:	2200      	movs	r2, #0
 800d626:	f1c9 0e20 	rsb	lr, r9, #32
 800d62a:	6818      	ldr	r0, [r3, #0]
 800d62c:	fa00 f009 	lsl.w	r0, r0, r9
 800d630:	4302      	orrs	r2, r0
 800d632:	f84a 2b04 	str.w	r2, [sl], #4
 800d636:	f853 2b04 	ldr.w	r2, [r3], #4
 800d63a:	459c      	cmp	ip, r3
 800d63c:	fa22 f20e 	lsr.w	r2, r2, lr
 800d640:	d8f3      	bhi.n	800d62a <__lshift+0x6e>
 800d642:	ebac 0304 	sub.w	r3, ip, r4
 800d646:	3b15      	subs	r3, #21
 800d648:	f023 0303 	bic.w	r3, r3, #3
 800d64c:	3304      	adds	r3, #4
 800d64e:	f104 0015 	add.w	r0, r4, #21
 800d652:	4584      	cmp	ip, r0
 800d654:	bf38      	it	cc
 800d656:	2304      	movcc	r3, #4
 800d658:	50ca      	str	r2, [r1, r3]
 800d65a:	b10a      	cbz	r2, 800d660 <__lshift+0xa4>
 800d65c:	f108 0602 	add.w	r6, r8, #2
 800d660:	3e01      	subs	r6, #1
 800d662:	4638      	mov	r0, r7
 800d664:	4621      	mov	r1, r4
 800d666:	612e      	str	r6, [r5, #16]
 800d668:	f7ff fdda 	bl	800d220 <_Bfree>
 800d66c:	4628      	mov	r0, r5
 800d66e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d672:	f842 0f04 	str.w	r0, [r2, #4]!
 800d676:	3301      	adds	r3, #1
 800d678:	e7c5      	b.n	800d606 <__lshift+0x4a>
 800d67a:	3904      	subs	r1, #4
 800d67c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d680:	459c      	cmp	ip, r3
 800d682:	f841 2f04 	str.w	r2, [r1, #4]!
 800d686:	d8f9      	bhi.n	800d67c <__lshift+0xc0>
 800d688:	e7ea      	b.n	800d660 <__lshift+0xa4>
 800d68a:	bf00      	nop
 800d68c:	0800f79c 	.word	0x0800f79c
 800d690:	0800f810 	.word	0x0800f810

0800d694 <__mcmp>:
 800d694:	4603      	mov	r3, r0
 800d696:	690a      	ldr	r2, [r1, #16]
 800d698:	6900      	ldr	r0, [r0, #16]
 800d69a:	b530      	push	{r4, r5, lr}
 800d69c:	1a80      	subs	r0, r0, r2
 800d69e:	d10d      	bne.n	800d6bc <__mcmp+0x28>
 800d6a0:	3314      	adds	r3, #20
 800d6a2:	3114      	adds	r1, #20
 800d6a4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d6a8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d6ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d6b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d6b4:	4295      	cmp	r5, r2
 800d6b6:	d002      	beq.n	800d6be <__mcmp+0x2a>
 800d6b8:	d304      	bcc.n	800d6c4 <__mcmp+0x30>
 800d6ba:	2001      	movs	r0, #1
 800d6bc:	bd30      	pop	{r4, r5, pc}
 800d6be:	42a3      	cmp	r3, r4
 800d6c0:	d3f4      	bcc.n	800d6ac <__mcmp+0x18>
 800d6c2:	e7fb      	b.n	800d6bc <__mcmp+0x28>
 800d6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d6c8:	e7f8      	b.n	800d6bc <__mcmp+0x28>
	...

0800d6cc <__mdiff>:
 800d6cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6d0:	460c      	mov	r4, r1
 800d6d2:	4606      	mov	r6, r0
 800d6d4:	4611      	mov	r1, r2
 800d6d6:	4620      	mov	r0, r4
 800d6d8:	4692      	mov	sl, r2
 800d6da:	f7ff ffdb 	bl	800d694 <__mcmp>
 800d6de:	1e05      	subs	r5, r0, #0
 800d6e0:	d111      	bne.n	800d706 <__mdiff+0x3a>
 800d6e2:	4629      	mov	r1, r5
 800d6e4:	4630      	mov	r0, r6
 800d6e6:	f7ff fd5b 	bl	800d1a0 <_Balloc>
 800d6ea:	4602      	mov	r2, r0
 800d6ec:	b928      	cbnz	r0, 800d6fa <__mdiff+0x2e>
 800d6ee:	f240 2132 	movw	r1, #562	; 0x232
 800d6f2:	4b3c      	ldr	r3, [pc, #240]	; (800d7e4 <__mdiff+0x118>)
 800d6f4:	483c      	ldr	r0, [pc, #240]	; (800d7e8 <__mdiff+0x11c>)
 800d6f6:	f000 fcad 	bl	800e054 <__assert_func>
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d700:	4610      	mov	r0, r2
 800d702:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d706:	bfa4      	itt	ge
 800d708:	4653      	movge	r3, sl
 800d70a:	46a2      	movge	sl, r4
 800d70c:	4630      	mov	r0, r6
 800d70e:	f8da 1004 	ldr.w	r1, [sl, #4]
 800d712:	bfa6      	itte	ge
 800d714:	461c      	movge	r4, r3
 800d716:	2500      	movge	r5, #0
 800d718:	2501      	movlt	r5, #1
 800d71a:	f7ff fd41 	bl	800d1a0 <_Balloc>
 800d71e:	4602      	mov	r2, r0
 800d720:	b918      	cbnz	r0, 800d72a <__mdiff+0x5e>
 800d722:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d726:	4b2f      	ldr	r3, [pc, #188]	; (800d7e4 <__mdiff+0x118>)
 800d728:	e7e4      	b.n	800d6f4 <__mdiff+0x28>
 800d72a:	f100 0814 	add.w	r8, r0, #20
 800d72e:	f8da 7010 	ldr.w	r7, [sl, #16]
 800d732:	60c5      	str	r5, [r0, #12]
 800d734:	f04f 0c00 	mov.w	ip, #0
 800d738:	f10a 0514 	add.w	r5, sl, #20
 800d73c:	f10a 0010 	add.w	r0, sl, #16
 800d740:	46c2      	mov	sl, r8
 800d742:	6926      	ldr	r6, [r4, #16]
 800d744:	f104 0914 	add.w	r9, r4, #20
 800d748:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800d74c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d750:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800d754:	f859 3b04 	ldr.w	r3, [r9], #4
 800d758:	fa1f f18b 	uxth.w	r1, fp
 800d75c:	4461      	add	r1, ip
 800d75e:	fa1f fc83 	uxth.w	ip, r3
 800d762:	0c1b      	lsrs	r3, r3, #16
 800d764:	eba1 010c 	sub.w	r1, r1, ip
 800d768:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d76c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d770:	b289      	uxth	r1, r1
 800d772:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800d776:	454e      	cmp	r6, r9
 800d778:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d77c:	f84a 3b04 	str.w	r3, [sl], #4
 800d780:	d8e6      	bhi.n	800d750 <__mdiff+0x84>
 800d782:	1b33      	subs	r3, r6, r4
 800d784:	3b15      	subs	r3, #21
 800d786:	f023 0303 	bic.w	r3, r3, #3
 800d78a:	3415      	adds	r4, #21
 800d78c:	3304      	adds	r3, #4
 800d78e:	42a6      	cmp	r6, r4
 800d790:	bf38      	it	cc
 800d792:	2304      	movcc	r3, #4
 800d794:	441d      	add	r5, r3
 800d796:	4443      	add	r3, r8
 800d798:	461e      	mov	r6, r3
 800d79a:	462c      	mov	r4, r5
 800d79c:	4574      	cmp	r4, lr
 800d79e:	d30e      	bcc.n	800d7be <__mdiff+0xf2>
 800d7a0:	f10e 0103 	add.w	r1, lr, #3
 800d7a4:	1b49      	subs	r1, r1, r5
 800d7a6:	f021 0103 	bic.w	r1, r1, #3
 800d7aa:	3d03      	subs	r5, #3
 800d7ac:	45ae      	cmp	lr, r5
 800d7ae:	bf38      	it	cc
 800d7b0:	2100      	movcc	r1, #0
 800d7b2:	4419      	add	r1, r3
 800d7b4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800d7b8:	b18b      	cbz	r3, 800d7de <__mdiff+0x112>
 800d7ba:	6117      	str	r7, [r2, #16]
 800d7bc:	e7a0      	b.n	800d700 <__mdiff+0x34>
 800d7be:	f854 8b04 	ldr.w	r8, [r4], #4
 800d7c2:	fa1f f188 	uxth.w	r1, r8
 800d7c6:	4461      	add	r1, ip
 800d7c8:	1408      	asrs	r0, r1, #16
 800d7ca:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800d7ce:	b289      	uxth	r1, r1
 800d7d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d7d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d7d8:	f846 1b04 	str.w	r1, [r6], #4
 800d7dc:	e7de      	b.n	800d79c <__mdiff+0xd0>
 800d7de:	3f01      	subs	r7, #1
 800d7e0:	e7e8      	b.n	800d7b4 <__mdiff+0xe8>
 800d7e2:	bf00      	nop
 800d7e4:	0800f79c 	.word	0x0800f79c
 800d7e8:	0800f810 	.word	0x0800f810

0800d7ec <__d2b>:
 800d7ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d7f0:	2101      	movs	r1, #1
 800d7f2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800d7f6:	4690      	mov	r8, r2
 800d7f8:	461d      	mov	r5, r3
 800d7fa:	f7ff fcd1 	bl	800d1a0 <_Balloc>
 800d7fe:	4604      	mov	r4, r0
 800d800:	b930      	cbnz	r0, 800d810 <__d2b+0x24>
 800d802:	4602      	mov	r2, r0
 800d804:	f240 310a 	movw	r1, #778	; 0x30a
 800d808:	4b24      	ldr	r3, [pc, #144]	; (800d89c <__d2b+0xb0>)
 800d80a:	4825      	ldr	r0, [pc, #148]	; (800d8a0 <__d2b+0xb4>)
 800d80c:	f000 fc22 	bl	800e054 <__assert_func>
 800d810:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800d814:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800d818:	bb2d      	cbnz	r5, 800d866 <__d2b+0x7a>
 800d81a:	9301      	str	r3, [sp, #4]
 800d81c:	f1b8 0300 	subs.w	r3, r8, #0
 800d820:	d026      	beq.n	800d870 <__d2b+0x84>
 800d822:	4668      	mov	r0, sp
 800d824:	9300      	str	r3, [sp, #0]
 800d826:	f7ff fd87 	bl	800d338 <__lo0bits>
 800d82a:	9900      	ldr	r1, [sp, #0]
 800d82c:	b1f0      	cbz	r0, 800d86c <__d2b+0x80>
 800d82e:	9a01      	ldr	r2, [sp, #4]
 800d830:	f1c0 0320 	rsb	r3, r0, #32
 800d834:	fa02 f303 	lsl.w	r3, r2, r3
 800d838:	430b      	orrs	r3, r1
 800d83a:	40c2      	lsrs	r2, r0
 800d83c:	6163      	str	r3, [r4, #20]
 800d83e:	9201      	str	r2, [sp, #4]
 800d840:	9b01      	ldr	r3, [sp, #4]
 800d842:	2b00      	cmp	r3, #0
 800d844:	bf14      	ite	ne
 800d846:	2102      	movne	r1, #2
 800d848:	2101      	moveq	r1, #1
 800d84a:	61a3      	str	r3, [r4, #24]
 800d84c:	6121      	str	r1, [r4, #16]
 800d84e:	b1c5      	cbz	r5, 800d882 <__d2b+0x96>
 800d850:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d854:	4405      	add	r5, r0
 800d856:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d85a:	603d      	str	r5, [r7, #0]
 800d85c:	6030      	str	r0, [r6, #0]
 800d85e:	4620      	mov	r0, r4
 800d860:	b002      	add	sp, #8
 800d862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d866:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d86a:	e7d6      	b.n	800d81a <__d2b+0x2e>
 800d86c:	6161      	str	r1, [r4, #20]
 800d86e:	e7e7      	b.n	800d840 <__d2b+0x54>
 800d870:	a801      	add	r0, sp, #4
 800d872:	f7ff fd61 	bl	800d338 <__lo0bits>
 800d876:	2101      	movs	r1, #1
 800d878:	9b01      	ldr	r3, [sp, #4]
 800d87a:	6121      	str	r1, [r4, #16]
 800d87c:	6163      	str	r3, [r4, #20]
 800d87e:	3020      	adds	r0, #32
 800d880:	e7e5      	b.n	800d84e <__d2b+0x62>
 800d882:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800d886:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d88a:	6038      	str	r0, [r7, #0]
 800d88c:	6918      	ldr	r0, [r3, #16]
 800d88e:	f7ff fd33 	bl	800d2f8 <__hi0bits>
 800d892:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800d896:	6031      	str	r1, [r6, #0]
 800d898:	e7e1      	b.n	800d85e <__d2b+0x72>
 800d89a:	bf00      	nop
 800d89c:	0800f79c 	.word	0x0800f79c
 800d8a0:	0800f810 	.word	0x0800f810

0800d8a4 <_calloc_r>:
 800d8a4:	b538      	push	{r3, r4, r5, lr}
 800d8a6:	fb02 f501 	mul.w	r5, r2, r1
 800d8aa:	4629      	mov	r1, r5
 800d8ac:	f7fd feea 	bl	800b684 <_malloc_r>
 800d8b0:	4604      	mov	r4, r0
 800d8b2:	b118      	cbz	r0, 800d8bc <_calloc_r+0x18>
 800d8b4:	462a      	mov	r2, r5
 800d8b6:	2100      	movs	r1, #0
 800d8b8:	f7fd fe90 	bl	800b5dc <memset>
 800d8bc:	4620      	mov	r0, r4
 800d8be:	bd38      	pop	{r3, r4, r5, pc}

0800d8c0 <__ssputs_r>:
 800d8c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8c4:	688e      	ldr	r6, [r1, #8]
 800d8c6:	4682      	mov	sl, r0
 800d8c8:	429e      	cmp	r6, r3
 800d8ca:	460c      	mov	r4, r1
 800d8cc:	4690      	mov	r8, r2
 800d8ce:	461f      	mov	r7, r3
 800d8d0:	d838      	bhi.n	800d944 <__ssputs_r+0x84>
 800d8d2:	898a      	ldrh	r2, [r1, #12]
 800d8d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d8d8:	d032      	beq.n	800d940 <__ssputs_r+0x80>
 800d8da:	6825      	ldr	r5, [r4, #0]
 800d8dc:	6909      	ldr	r1, [r1, #16]
 800d8de:	3301      	adds	r3, #1
 800d8e0:	eba5 0901 	sub.w	r9, r5, r1
 800d8e4:	6965      	ldr	r5, [r4, #20]
 800d8e6:	444b      	add	r3, r9
 800d8e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d8ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d8f0:	106d      	asrs	r5, r5, #1
 800d8f2:	429d      	cmp	r5, r3
 800d8f4:	bf38      	it	cc
 800d8f6:	461d      	movcc	r5, r3
 800d8f8:	0553      	lsls	r3, r2, #21
 800d8fa:	d531      	bpl.n	800d960 <__ssputs_r+0xa0>
 800d8fc:	4629      	mov	r1, r5
 800d8fe:	f7fd fec1 	bl	800b684 <_malloc_r>
 800d902:	4606      	mov	r6, r0
 800d904:	b950      	cbnz	r0, 800d91c <__ssputs_r+0x5c>
 800d906:	230c      	movs	r3, #12
 800d908:	f04f 30ff 	mov.w	r0, #4294967295
 800d90c:	f8ca 3000 	str.w	r3, [sl]
 800d910:	89a3      	ldrh	r3, [r4, #12]
 800d912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d916:	81a3      	strh	r3, [r4, #12]
 800d918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d91c:	464a      	mov	r2, r9
 800d91e:	6921      	ldr	r1, [r4, #16]
 800d920:	f7ff fc23 	bl	800d16a <memcpy>
 800d924:	89a3      	ldrh	r3, [r4, #12]
 800d926:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d92a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d92e:	81a3      	strh	r3, [r4, #12]
 800d930:	6126      	str	r6, [r4, #16]
 800d932:	444e      	add	r6, r9
 800d934:	6026      	str	r6, [r4, #0]
 800d936:	463e      	mov	r6, r7
 800d938:	6165      	str	r5, [r4, #20]
 800d93a:	eba5 0509 	sub.w	r5, r5, r9
 800d93e:	60a5      	str	r5, [r4, #8]
 800d940:	42be      	cmp	r6, r7
 800d942:	d900      	bls.n	800d946 <__ssputs_r+0x86>
 800d944:	463e      	mov	r6, r7
 800d946:	4632      	mov	r2, r6
 800d948:	4641      	mov	r1, r8
 800d94a:	6820      	ldr	r0, [r4, #0]
 800d94c:	f000 fd0c 	bl	800e368 <memmove>
 800d950:	68a3      	ldr	r3, [r4, #8]
 800d952:	6822      	ldr	r2, [r4, #0]
 800d954:	1b9b      	subs	r3, r3, r6
 800d956:	4432      	add	r2, r6
 800d958:	2000      	movs	r0, #0
 800d95a:	60a3      	str	r3, [r4, #8]
 800d95c:	6022      	str	r2, [r4, #0]
 800d95e:	e7db      	b.n	800d918 <__ssputs_r+0x58>
 800d960:	462a      	mov	r2, r5
 800d962:	f000 fd1b 	bl	800e39c <_realloc_r>
 800d966:	4606      	mov	r6, r0
 800d968:	2800      	cmp	r0, #0
 800d96a:	d1e1      	bne.n	800d930 <__ssputs_r+0x70>
 800d96c:	4650      	mov	r0, sl
 800d96e:	6921      	ldr	r1, [r4, #16]
 800d970:	f7fd fe3c 	bl	800b5ec <_free_r>
 800d974:	e7c7      	b.n	800d906 <__ssputs_r+0x46>
	...

0800d978 <_svfiprintf_r>:
 800d978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d97c:	4698      	mov	r8, r3
 800d97e:	898b      	ldrh	r3, [r1, #12]
 800d980:	4607      	mov	r7, r0
 800d982:	061b      	lsls	r3, r3, #24
 800d984:	460d      	mov	r5, r1
 800d986:	4614      	mov	r4, r2
 800d988:	b09d      	sub	sp, #116	; 0x74
 800d98a:	d50e      	bpl.n	800d9aa <_svfiprintf_r+0x32>
 800d98c:	690b      	ldr	r3, [r1, #16]
 800d98e:	b963      	cbnz	r3, 800d9aa <_svfiprintf_r+0x32>
 800d990:	2140      	movs	r1, #64	; 0x40
 800d992:	f7fd fe77 	bl	800b684 <_malloc_r>
 800d996:	6028      	str	r0, [r5, #0]
 800d998:	6128      	str	r0, [r5, #16]
 800d99a:	b920      	cbnz	r0, 800d9a6 <_svfiprintf_r+0x2e>
 800d99c:	230c      	movs	r3, #12
 800d99e:	603b      	str	r3, [r7, #0]
 800d9a0:	f04f 30ff 	mov.w	r0, #4294967295
 800d9a4:	e0d1      	b.n	800db4a <_svfiprintf_r+0x1d2>
 800d9a6:	2340      	movs	r3, #64	; 0x40
 800d9a8:	616b      	str	r3, [r5, #20]
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	9309      	str	r3, [sp, #36]	; 0x24
 800d9ae:	2320      	movs	r3, #32
 800d9b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d9b4:	2330      	movs	r3, #48	; 0x30
 800d9b6:	f04f 0901 	mov.w	r9, #1
 800d9ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800d9be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800db64 <_svfiprintf_r+0x1ec>
 800d9c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d9c6:	4623      	mov	r3, r4
 800d9c8:	469a      	mov	sl, r3
 800d9ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d9ce:	b10a      	cbz	r2, 800d9d4 <_svfiprintf_r+0x5c>
 800d9d0:	2a25      	cmp	r2, #37	; 0x25
 800d9d2:	d1f9      	bne.n	800d9c8 <_svfiprintf_r+0x50>
 800d9d4:	ebba 0b04 	subs.w	fp, sl, r4
 800d9d8:	d00b      	beq.n	800d9f2 <_svfiprintf_r+0x7a>
 800d9da:	465b      	mov	r3, fp
 800d9dc:	4622      	mov	r2, r4
 800d9de:	4629      	mov	r1, r5
 800d9e0:	4638      	mov	r0, r7
 800d9e2:	f7ff ff6d 	bl	800d8c0 <__ssputs_r>
 800d9e6:	3001      	adds	r0, #1
 800d9e8:	f000 80aa 	beq.w	800db40 <_svfiprintf_r+0x1c8>
 800d9ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d9ee:	445a      	add	r2, fp
 800d9f0:	9209      	str	r2, [sp, #36]	; 0x24
 800d9f2:	f89a 3000 	ldrb.w	r3, [sl]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	f000 80a2 	beq.w	800db40 <_svfiprintf_r+0x1c8>
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	f04f 32ff 	mov.w	r2, #4294967295
 800da02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800da06:	f10a 0a01 	add.w	sl, sl, #1
 800da0a:	9304      	str	r3, [sp, #16]
 800da0c:	9307      	str	r3, [sp, #28]
 800da0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800da12:	931a      	str	r3, [sp, #104]	; 0x68
 800da14:	4654      	mov	r4, sl
 800da16:	2205      	movs	r2, #5
 800da18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da1c:	4851      	ldr	r0, [pc, #324]	; (800db64 <_svfiprintf_r+0x1ec>)
 800da1e:	f7ff fb96 	bl	800d14e <memchr>
 800da22:	9a04      	ldr	r2, [sp, #16]
 800da24:	b9d8      	cbnz	r0, 800da5e <_svfiprintf_r+0xe6>
 800da26:	06d0      	lsls	r0, r2, #27
 800da28:	bf44      	itt	mi
 800da2a:	2320      	movmi	r3, #32
 800da2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da30:	0711      	lsls	r1, r2, #28
 800da32:	bf44      	itt	mi
 800da34:	232b      	movmi	r3, #43	; 0x2b
 800da36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800da3a:	f89a 3000 	ldrb.w	r3, [sl]
 800da3e:	2b2a      	cmp	r3, #42	; 0x2a
 800da40:	d015      	beq.n	800da6e <_svfiprintf_r+0xf6>
 800da42:	4654      	mov	r4, sl
 800da44:	2000      	movs	r0, #0
 800da46:	f04f 0c0a 	mov.w	ip, #10
 800da4a:	9a07      	ldr	r2, [sp, #28]
 800da4c:	4621      	mov	r1, r4
 800da4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800da52:	3b30      	subs	r3, #48	; 0x30
 800da54:	2b09      	cmp	r3, #9
 800da56:	d94e      	bls.n	800daf6 <_svfiprintf_r+0x17e>
 800da58:	b1b0      	cbz	r0, 800da88 <_svfiprintf_r+0x110>
 800da5a:	9207      	str	r2, [sp, #28]
 800da5c:	e014      	b.n	800da88 <_svfiprintf_r+0x110>
 800da5e:	eba0 0308 	sub.w	r3, r0, r8
 800da62:	fa09 f303 	lsl.w	r3, r9, r3
 800da66:	4313      	orrs	r3, r2
 800da68:	46a2      	mov	sl, r4
 800da6a:	9304      	str	r3, [sp, #16]
 800da6c:	e7d2      	b.n	800da14 <_svfiprintf_r+0x9c>
 800da6e:	9b03      	ldr	r3, [sp, #12]
 800da70:	1d19      	adds	r1, r3, #4
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	9103      	str	r1, [sp, #12]
 800da76:	2b00      	cmp	r3, #0
 800da78:	bfbb      	ittet	lt
 800da7a:	425b      	neglt	r3, r3
 800da7c:	f042 0202 	orrlt.w	r2, r2, #2
 800da80:	9307      	strge	r3, [sp, #28]
 800da82:	9307      	strlt	r3, [sp, #28]
 800da84:	bfb8      	it	lt
 800da86:	9204      	strlt	r2, [sp, #16]
 800da88:	7823      	ldrb	r3, [r4, #0]
 800da8a:	2b2e      	cmp	r3, #46	; 0x2e
 800da8c:	d10c      	bne.n	800daa8 <_svfiprintf_r+0x130>
 800da8e:	7863      	ldrb	r3, [r4, #1]
 800da90:	2b2a      	cmp	r3, #42	; 0x2a
 800da92:	d135      	bne.n	800db00 <_svfiprintf_r+0x188>
 800da94:	9b03      	ldr	r3, [sp, #12]
 800da96:	3402      	adds	r4, #2
 800da98:	1d1a      	adds	r2, r3, #4
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	9203      	str	r2, [sp, #12]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	bfb8      	it	lt
 800daa2:	f04f 33ff 	movlt.w	r3, #4294967295
 800daa6:	9305      	str	r3, [sp, #20]
 800daa8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800db74 <_svfiprintf_r+0x1fc>
 800daac:	2203      	movs	r2, #3
 800daae:	4650      	mov	r0, sl
 800dab0:	7821      	ldrb	r1, [r4, #0]
 800dab2:	f7ff fb4c 	bl	800d14e <memchr>
 800dab6:	b140      	cbz	r0, 800daca <_svfiprintf_r+0x152>
 800dab8:	2340      	movs	r3, #64	; 0x40
 800daba:	eba0 000a 	sub.w	r0, r0, sl
 800dabe:	fa03 f000 	lsl.w	r0, r3, r0
 800dac2:	9b04      	ldr	r3, [sp, #16]
 800dac4:	3401      	adds	r4, #1
 800dac6:	4303      	orrs	r3, r0
 800dac8:	9304      	str	r3, [sp, #16]
 800daca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dace:	2206      	movs	r2, #6
 800dad0:	4825      	ldr	r0, [pc, #148]	; (800db68 <_svfiprintf_r+0x1f0>)
 800dad2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dad6:	f7ff fb3a 	bl	800d14e <memchr>
 800dada:	2800      	cmp	r0, #0
 800dadc:	d038      	beq.n	800db50 <_svfiprintf_r+0x1d8>
 800dade:	4b23      	ldr	r3, [pc, #140]	; (800db6c <_svfiprintf_r+0x1f4>)
 800dae0:	bb1b      	cbnz	r3, 800db2a <_svfiprintf_r+0x1b2>
 800dae2:	9b03      	ldr	r3, [sp, #12]
 800dae4:	3307      	adds	r3, #7
 800dae6:	f023 0307 	bic.w	r3, r3, #7
 800daea:	3308      	adds	r3, #8
 800daec:	9303      	str	r3, [sp, #12]
 800daee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daf0:	4433      	add	r3, r6
 800daf2:	9309      	str	r3, [sp, #36]	; 0x24
 800daf4:	e767      	b.n	800d9c6 <_svfiprintf_r+0x4e>
 800daf6:	460c      	mov	r4, r1
 800daf8:	2001      	movs	r0, #1
 800dafa:	fb0c 3202 	mla	r2, ip, r2, r3
 800dafe:	e7a5      	b.n	800da4c <_svfiprintf_r+0xd4>
 800db00:	2300      	movs	r3, #0
 800db02:	f04f 0c0a 	mov.w	ip, #10
 800db06:	4619      	mov	r1, r3
 800db08:	3401      	adds	r4, #1
 800db0a:	9305      	str	r3, [sp, #20]
 800db0c:	4620      	mov	r0, r4
 800db0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800db12:	3a30      	subs	r2, #48	; 0x30
 800db14:	2a09      	cmp	r2, #9
 800db16:	d903      	bls.n	800db20 <_svfiprintf_r+0x1a8>
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d0c5      	beq.n	800daa8 <_svfiprintf_r+0x130>
 800db1c:	9105      	str	r1, [sp, #20]
 800db1e:	e7c3      	b.n	800daa8 <_svfiprintf_r+0x130>
 800db20:	4604      	mov	r4, r0
 800db22:	2301      	movs	r3, #1
 800db24:	fb0c 2101 	mla	r1, ip, r1, r2
 800db28:	e7f0      	b.n	800db0c <_svfiprintf_r+0x194>
 800db2a:	ab03      	add	r3, sp, #12
 800db2c:	9300      	str	r3, [sp, #0]
 800db2e:	462a      	mov	r2, r5
 800db30:	4638      	mov	r0, r7
 800db32:	4b0f      	ldr	r3, [pc, #60]	; (800db70 <_svfiprintf_r+0x1f8>)
 800db34:	a904      	add	r1, sp, #16
 800db36:	f7fd fe9d 	bl	800b874 <_printf_float>
 800db3a:	1c42      	adds	r2, r0, #1
 800db3c:	4606      	mov	r6, r0
 800db3e:	d1d6      	bne.n	800daee <_svfiprintf_r+0x176>
 800db40:	89ab      	ldrh	r3, [r5, #12]
 800db42:	065b      	lsls	r3, r3, #25
 800db44:	f53f af2c 	bmi.w	800d9a0 <_svfiprintf_r+0x28>
 800db48:	9809      	ldr	r0, [sp, #36]	; 0x24
 800db4a:	b01d      	add	sp, #116	; 0x74
 800db4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db50:	ab03      	add	r3, sp, #12
 800db52:	9300      	str	r3, [sp, #0]
 800db54:	462a      	mov	r2, r5
 800db56:	4638      	mov	r0, r7
 800db58:	4b05      	ldr	r3, [pc, #20]	; (800db70 <_svfiprintf_r+0x1f8>)
 800db5a:	a904      	add	r1, sp, #16
 800db5c:	f7fe f926 	bl	800bdac <_printf_i>
 800db60:	e7eb      	b.n	800db3a <_svfiprintf_r+0x1c2>
 800db62:	bf00      	nop
 800db64:	0800f96c 	.word	0x0800f96c
 800db68:	0800f976 	.word	0x0800f976
 800db6c:	0800b875 	.word	0x0800b875
 800db70:	0800d8c1 	.word	0x0800d8c1
 800db74:	0800f972 	.word	0x0800f972

0800db78 <__sfputc_r>:
 800db78:	6893      	ldr	r3, [r2, #8]
 800db7a:	b410      	push	{r4}
 800db7c:	3b01      	subs	r3, #1
 800db7e:	2b00      	cmp	r3, #0
 800db80:	6093      	str	r3, [r2, #8]
 800db82:	da07      	bge.n	800db94 <__sfputc_r+0x1c>
 800db84:	6994      	ldr	r4, [r2, #24]
 800db86:	42a3      	cmp	r3, r4
 800db88:	db01      	blt.n	800db8e <__sfputc_r+0x16>
 800db8a:	290a      	cmp	r1, #10
 800db8c:	d102      	bne.n	800db94 <__sfputc_r+0x1c>
 800db8e:	bc10      	pop	{r4}
 800db90:	f000 b98e 	b.w	800deb0 <__swbuf_r>
 800db94:	6813      	ldr	r3, [r2, #0]
 800db96:	1c58      	adds	r0, r3, #1
 800db98:	6010      	str	r0, [r2, #0]
 800db9a:	7019      	strb	r1, [r3, #0]
 800db9c:	4608      	mov	r0, r1
 800db9e:	bc10      	pop	{r4}
 800dba0:	4770      	bx	lr

0800dba2 <__sfputs_r>:
 800dba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dba4:	4606      	mov	r6, r0
 800dba6:	460f      	mov	r7, r1
 800dba8:	4614      	mov	r4, r2
 800dbaa:	18d5      	adds	r5, r2, r3
 800dbac:	42ac      	cmp	r4, r5
 800dbae:	d101      	bne.n	800dbb4 <__sfputs_r+0x12>
 800dbb0:	2000      	movs	r0, #0
 800dbb2:	e007      	b.n	800dbc4 <__sfputs_r+0x22>
 800dbb4:	463a      	mov	r2, r7
 800dbb6:	4630      	mov	r0, r6
 800dbb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbbc:	f7ff ffdc 	bl	800db78 <__sfputc_r>
 800dbc0:	1c43      	adds	r3, r0, #1
 800dbc2:	d1f3      	bne.n	800dbac <__sfputs_r+0xa>
 800dbc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dbc8 <_vfiprintf_r>:
 800dbc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbcc:	460d      	mov	r5, r1
 800dbce:	4614      	mov	r4, r2
 800dbd0:	4698      	mov	r8, r3
 800dbd2:	4606      	mov	r6, r0
 800dbd4:	b09d      	sub	sp, #116	; 0x74
 800dbd6:	b118      	cbz	r0, 800dbe0 <_vfiprintf_r+0x18>
 800dbd8:	6983      	ldr	r3, [r0, #24]
 800dbda:	b90b      	cbnz	r3, 800dbe0 <_vfiprintf_r+0x18>
 800dbdc:	f7ff fa12 	bl	800d004 <__sinit>
 800dbe0:	4b89      	ldr	r3, [pc, #548]	; (800de08 <_vfiprintf_r+0x240>)
 800dbe2:	429d      	cmp	r5, r3
 800dbe4:	d11b      	bne.n	800dc1e <_vfiprintf_r+0x56>
 800dbe6:	6875      	ldr	r5, [r6, #4]
 800dbe8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dbea:	07d9      	lsls	r1, r3, #31
 800dbec:	d405      	bmi.n	800dbfa <_vfiprintf_r+0x32>
 800dbee:	89ab      	ldrh	r3, [r5, #12]
 800dbf0:	059a      	lsls	r2, r3, #22
 800dbf2:	d402      	bmi.n	800dbfa <_vfiprintf_r+0x32>
 800dbf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dbf6:	f7ff faa8 	bl	800d14a <__retarget_lock_acquire_recursive>
 800dbfa:	89ab      	ldrh	r3, [r5, #12]
 800dbfc:	071b      	lsls	r3, r3, #28
 800dbfe:	d501      	bpl.n	800dc04 <_vfiprintf_r+0x3c>
 800dc00:	692b      	ldr	r3, [r5, #16]
 800dc02:	b9eb      	cbnz	r3, 800dc40 <_vfiprintf_r+0x78>
 800dc04:	4629      	mov	r1, r5
 800dc06:	4630      	mov	r0, r6
 800dc08:	f000 f9b6 	bl	800df78 <__swsetup_r>
 800dc0c:	b1c0      	cbz	r0, 800dc40 <_vfiprintf_r+0x78>
 800dc0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc10:	07dc      	lsls	r4, r3, #31
 800dc12:	d50e      	bpl.n	800dc32 <_vfiprintf_r+0x6a>
 800dc14:	f04f 30ff 	mov.w	r0, #4294967295
 800dc18:	b01d      	add	sp, #116	; 0x74
 800dc1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc1e:	4b7b      	ldr	r3, [pc, #492]	; (800de0c <_vfiprintf_r+0x244>)
 800dc20:	429d      	cmp	r5, r3
 800dc22:	d101      	bne.n	800dc28 <_vfiprintf_r+0x60>
 800dc24:	68b5      	ldr	r5, [r6, #8]
 800dc26:	e7df      	b.n	800dbe8 <_vfiprintf_r+0x20>
 800dc28:	4b79      	ldr	r3, [pc, #484]	; (800de10 <_vfiprintf_r+0x248>)
 800dc2a:	429d      	cmp	r5, r3
 800dc2c:	bf08      	it	eq
 800dc2e:	68f5      	ldreq	r5, [r6, #12]
 800dc30:	e7da      	b.n	800dbe8 <_vfiprintf_r+0x20>
 800dc32:	89ab      	ldrh	r3, [r5, #12]
 800dc34:	0598      	lsls	r0, r3, #22
 800dc36:	d4ed      	bmi.n	800dc14 <_vfiprintf_r+0x4c>
 800dc38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc3a:	f7ff fa87 	bl	800d14c <__retarget_lock_release_recursive>
 800dc3e:	e7e9      	b.n	800dc14 <_vfiprintf_r+0x4c>
 800dc40:	2300      	movs	r3, #0
 800dc42:	9309      	str	r3, [sp, #36]	; 0x24
 800dc44:	2320      	movs	r3, #32
 800dc46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dc4a:	2330      	movs	r3, #48	; 0x30
 800dc4c:	f04f 0901 	mov.w	r9, #1
 800dc50:	f8cd 800c 	str.w	r8, [sp, #12]
 800dc54:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800de14 <_vfiprintf_r+0x24c>
 800dc58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dc5c:	4623      	mov	r3, r4
 800dc5e:	469a      	mov	sl, r3
 800dc60:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc64:	b10a      	cbz	r2, 800dc6a <_vfiprintf_r+0xa2>
 800dc66:	2a25      	cmp	r2, #37	; 0x25
 800dc68:	d1f9      	bne.n	800dc5e <_vfiprintf_r+0x96>
 800dc6a:	ebba 0b04 	subs.w	fp, sl, r4
 800dc6e:	d00b      	beq.n	800dc88 <_vfiprintf_r+0xc0>
 800dc70:	465b      	mov	r3, fp
 800dc72:	4622      	mov	r2, r4
 800dc74:	4629      	mov	r1, r5
 800dc76:	4630      	mov	r0, r6
 800dc78:	f7ff ff93 	bl	800dba2 <__sfputs_r>
 800dc7c:	3001      	adds	r0, #1
 800dc7e:	f000 80aa 	beq.w	800ddd6 <_vfiprintf_r+0x20e>
 800dc82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc84:	445a      	add	r2, fp
 800dc86:	9209      	str	r2, [sp, #36]	; 0x24
 800dc88:	f89a 3000 	ldrb.w	r3, [sl]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	f000 80a2 	beq.w	800ddd6 <_vfiprintf_r+0x20e>
 800dc92:	2300      	movs	r3, #0
 800dc94:	f04f 32ff 	mov.w	r2, #4294967295
 800dc98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc9c:	f10a 0a01 	add.w	sl, sl, #1
 800dca0:	9304      	str	r3, [sp, #16]
 800dca2:	9307      	str	r3, [sp, #28]
 800dca4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dca8:	931a      	str	r3, [sp, #104]	; 0x68
 800dcaa:	4654      	mov	r4, sl
 800dcac:	2205      	movs	r2, #5
 800dcae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcb2:	4858      	ldr	r0, [pc, #352]	; (800de14 <_vfiprintf_r+0x24c>)
 800dcb4:	f7ff fa4b 	bl	800d14e <memchr>
 800dcb8:	9a04      	ldr	r2, [sp, #16]
 800dcba:	b9d8      	cbnz	r0, 800dcf4 <_vfiprintf_r+0x12c>
 800dcbc:	06d1      	lsls	r1, r2, #27
 800dcbe:	bf44      	itt	mi
 800dcc0:	2320      	movmi	r3, #32
 800dcc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dcc6:	0713      	lsls	r3, r2, #28
 800dcc8:	bf44      	itt	mi
 800dcca:	232b      	movmi	r3, #43	; 0x2b
 800dccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dcd0:	f89a 3000 	ldrb.w	r3, [sl]
 800dcd4:	2b2a      	cmp	r3, #42	; 0x2a
 800dcd6:	d015      	beq.n	800dd04 <_vfiprintf_r+0x13c>
 800dcd8:	4654      	mov	r4, sl
 800dcda:	2000      	movs	r0, #0
 800dcdc:	f04f 0c0a 	mov.w	ip, #10
 800dce0:	9a07      	ldr	r2, [sp, #28]
 800dce2:	4621      	mov	r1, r4
 800dce4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dce8:	3b30      	subs	r3, #48	; 0x30
 800dcea:	2b09      	cmp	r3, #9
 800dcec:	d94e      	bls.n	800dd8c <_vfiprintf_r+0x1c4>
 800dcee:	b1b0      	cbz	r0, 800dd1e <_vfiprintf_r+0x156>
 800dcf0:	9207      	str	r2, [sp, #28]
 800dcf2:	e014      	b.n	800dd1e <_vfiprintf_r+0x156>
 800dcf4:	eba0 0308 	sub.w	r3, r0, r8
 800dcf8:	fa09 f303 	lsl.w	r3, r9, r3
 800dcfc:	4313      	orrs	r3, r2
 800dcfe:	46a2      	mov	sl, r4
 800dd00:	9304      	str	r3, [sp, #16]
 800dd02:	e7d2      	b.n	800dcaa <_vfiprintf_r+0xe2>
 800dd04:	9b03      	ldr	r3, [sp, #12]
 800dd06:	1d19      	adds	r1, r3, #4
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	9103      	str	r1, [sp, #12]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	bfbb      	ittet	lt
 800dd10:	425b      	neglt	r3, r3
 800dd12:	f042 0202 	orrlt.w	r2, r2, #2
 800dd16:	9307      	strge	r3, [sp, #28]
 800dd18:	9307      	strlt	r3, [sp, #28]
 800dd1a:	bfb8      	it	lt
 800dd1c:	9204      	strlt	r2, [sp, #16]
 800dd1e:	7823      	ldrb	r3, [r4, #0]
 800dd20:	2b2e      	cmp	r3, #46	; 0x2e
 800dd22:	d10c      	bne.n	800dd3e <_vfiprintf_r+0x176>
 800dd24:	7863      	ldrb	r3, [r4, #1]
 800dd26:	2b2a      	cmp	r3, #42	; 0x2a
 800dd28:	d135      	bne.n	800dd96 <_vfiprintf_r+0x1ce>
 800dd2a:	9b03      	ldr	r3, [sp, #12]
 800dd2c:	3402      	adds	r4, #2
 800dd2e:	1d1a      	adds	r2, r3, #4
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	9203      	str	r2, [sp, #12]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	bfb8      	it	lt
 800dd38:	f04f 33ff 	movlt.w	r3, #4294967295
 800dd3c:	9305      	str	r3, [sp, #20]
 800dd3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800de24 <_vfiprintf_r+0x25c>
 800dd42:	2203      	movs	r2, #3
 800dd44:	4650      	mov	r0, sl
 800dd46:	7821      	ldrb	r1, [r4, #0]
 800dd48:	f7ff fa01 	bl	800d14e <memchr>
 800dd4c:	b140      	cbz	r0, 800dd60 <_vfiprintf_r+0x198>
 800dd4e:	2340      	movs	r3, #64	; 0x40
 800dd50:	eba0 000a 	sub.w	r0, r0, sl
 800dd54:	fa03 f000 	lsl.w	r0, r3, r0
 800dd58:	9b04      	ldr	r3, [sp, #16]
 800dd5a:	3401      	adds	r4, #1
 800dd5c:	4303      	orrs	r3, r0
 800dd5e:	9304      	str	r3, [sp, #16]
 800dd60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd64:	2206      	movs	r2, #6
 800dd66:	482c      	ldr	r0, [pc, #176]	; (800de18 <_vfiprintf_r+0x250>)
 800dd68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd6c:	f7ff f9ef 	bl	800d14e <memchr>
 800dd70:	2800      	cmp	r0, #0
 800dd72:	d03f      	beq.n	800ddf4 <_vfiprintf_r+0x22c>
 800dd74:	4b29      	ldr	r3, [pc, #164]	; (800de1c <_vfiprintf_r+0x254>)
 800dd76:	bb1b      	cbnz	r3, 800ddc0 <_vfiprintf_r+0x1f8>
 800dd78:	9b03      	ldr	r3, [sp, #12]
 800dd7a:	3307      	adds	r3, #7
 800dd7c:	f023 0307 	bic.w	r3, r3, #7
 800dd80:	3308      	adds	r3, #8
 800dd82:	9303      	str	r3, [sp, #12]
 800dd84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd86:	443b      	add	r3, r7
 800dd88:	9309      	str	r3, [sp, #36]	; 0x24
 800dd8a:	e767      	b.n	800dc5c <_vfiprintf_r+0x94>
 800dd8c:	460c      	mov	r4, r1
 800dd8e:	2001      	movs	r0, #1
 800dd90:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd94:	e7a5      	b.n	800dce2 <_vfiprintf_r+0x11a>
 800dd96:	2300      	movs	r3, #0
 800dd98:	f04f 0c0a 	mov.w	ip, #10
 800dd9c:	4619      	mov	r1, r3
 800dd9e:	3401      	adds	r4, #1
 800dda0:	9305      	str	r3, [sp, #20]
 800dda2:	4620      	mov	r0, r4
 800dda4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dda8:	3a30      	subs	r2, #48	; 0x30
 800ddaa:	2a09      	cmp	r2, #9
 800ddac:	d903      	bls.n	800ddb6 <_vfiprintf_r+0x1ee>
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d0c5      	beq.n	800dd3e <_vfiprintf_r+0x176>
 800ddb2:	9105      	str	r1, [sp, #20]
 800ddb4:	e7c3      	b.n	800dd3e <_vfiprintf_r+0x176>
 800ddb6:	4604      	mov	r4, r0
 800ddb8:	2301      	movs	r3, #1
 800ddba:	fb0c 2101 	mla	r1, ip, r1, r2
 800ddbe:	e7f0      	b.n	800dda2 <_vfiprintf_r+0x1da>
 800ddc0:	ab03      	add	r3, sp, #12
 800ddc2:	9300      	str	r3, [sp, #0]
 800ddc4:	462a      	mov	r2, r5
 800ddc6:	4630      	mov	r0, r6
 800ddc8:	4b15      	ldr	r3, [pc, #84]	; (800de20 <_vfiprintf_r+0x258>)
 800ddca:	a904      	add	r1, sp, #16
 800ddcc:	f7fd fd52 	bl	800b874 <_printf_float>
 800ddd0:	4607      	mov	r7, r0
 800ddd2:	1c78      	adds	r0, r7, #1
 800ddd4:	d1d6      	bne.n	800dd84 <_vfiprintf_r+0x1bc>
 800ddd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ddd8:	07d9      	lsls	r1, r3, #31
 800ddda:	d405      	bmi.n	800dde8 <_vfiprintf_r+0x220>
 800dddc:	89ab      	ldrh	r3, [r5, #12]
 800ddde:	059a      	lsls	r2, r3, #22
 800dde0:	d402      	bmi.n	800dde8 <_vfiprintf_r+0x220>
 800dde2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dde4:	f7ff f9b2 	bl	800d14c <__retarget_lock_release_recursive>
 800dde8:	89ab      	ldrh	r3, [r5, #12]
 800ddea:	065b      	lsls	r3, r3, #25
 800ddec:	f53f af12 	bmi.w	800dc14 <_vfiprintf_r+0x4c>
 800ddf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ddf2:	e711      	b.n	800dc18 <_vfiprintf_r+0x50>
 800ddf4:	ab03      	add	r3, sp, #12
 800ddf6:	9300      	str	r3, [sp, #0]
 800ddf8:	462a      	mov	r2, r5
 800ddfa:	4630      	mov	r0, r6
 800ddfc:	4b08      	ldr	r3, [pc, #32]	; (800de20 <_vfiprintf_r+0x258>)
 800ddfe:	a904      	add	r1, sp, #16
 800de00:	f7fd ffd4 	bl	800bdac <_printf_i>
 800de04:	e7e4      	b.n	800ddd0 <_vfiprintf_r+0x208>
 800de06:	bf00      	nop
 800de08:	0800f7d0 	.word	0x0800f7d0
 800de0c:	0800f7f0 	.word	0x0800f7f0
 800de10:	0800f7b0 	.word	0x0800f7b0
 800de14:	0800f96c 	.word	0x0800f96c
 800de18:	0800f976 	.word	0x0800f976
 800de1c:	0800b875 	.word	0x0800b875
 800de20:	0800dba3 	.word	0x0800dba3
 800de24:	0800f972 	.word	0x0800f972

0800de28 <__sread>:
 800de28:	b510      	push	{r4, lr}
 800de2a:	460c      	mov	r4, r1
 800de2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de30:	f000 fada 	bl	800e3e8 <_read_r>
 800de34:	2800      	cmp	r0, #0
 800de36:	bfab      	itete	ge
 800de38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800de3a:	89a3      	ldrhlt	r3, [r4, #12]
 800de3c:	181b      	addge	r3, r3, r0
 800de3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800de42:	bfac      	ite	ge
 800de44:	6563      	strge	r3, [r4, #84]	; 0x54
 800de46:	81a3      	strhlt	r3, [r4, #12]
 800de48:	bd10      	pop	{r4, pc}

0800de4a <__swrite>:
 800de4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de4e:	461f      	mov	r7, r3
 800de50:	898b      	ldrh	r3, [r1, #12]
 800de52:	4605      	mov	r5, r0
 800de54:	05db      	lsls	r3, r3, #23
 800de56:	460c      	mov	r4, r1
 800de58:	4616      	mov	r6, r2
 800de5a:	d505      	bpl.n	800de68 <__swrite+0x1e>
 800de5c:	2302      	movs	r3, #2
 800de5e:	2200      	movs	r2, #0
 800de60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de64:	f000 f9f8 	bl	800e258 <_lseek_r>
 800de68:	89a3      	ldrh	r3, [r4, #12]
 800de6a:	4632      	mov	r2, r6
 800de6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800de70:	81a3      	strh	r3, [r4, #12]
 800de72:	4628      	mov	r0, r5
 800de74:	463b      	mov	r3, r7
 800de76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de7e:	f000 b869 	b.w	800df54 <_write_r>

0800de82 <__sseek>:
 800de82:	b510      	push	{r4, lr}
 800de84:	460c      	mov	r4, r1
 800de86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de8a:	f000 f9e5 	bl	800e258 <_lseek_r>
 800de8e:	1c43      	adds	r3, r0, #1
 800de90:	89a3      	ldrh	r3, [r4, #12]
 800de92:	bf15      	itete	ne
 800de94:	6560      	strne	r0, [r4, #84]	; 0x54
 800de96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800de9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800de9e:	81a3      	strheq	r3, [r4, #12]
 800dea0:	bf18      	it	ne
 800dea2:	81a3      	strhne	r3, [r4, #12]
 800dea4:	bd10      	pop	{r4, pc}

0800dea6 <__sclose>:
 800dea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800deaa:	f000 b8f1 	b.w	800e090 <_close_r>
	...

0800deb0 <__swbuf_r>:
 800deb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800deb2:	460e      	mov	r6, r1
 800deb4:	4614      	mov	r4, r2
 800deb6:	4605      	mov	r5, r0
 800deb8:	b118      	cbz	r0, 800dec2 <__swbuf_r+0x12>
 800deba:	6983      	ldr	r3, [r0, #24]
 800debc:	b90b      	cbnz	r3, 800dec2 <__swbuf_r+0x12>
 800debe:	f7ff f8a1 	bl	800d004 <__sinit>
 800dec2:	4b21      	ldr	r3, [pc, #132]	; (800df48 <__swbuf_r+0x98>)
 800dec4:	429c      	cmp	r4, r3
 800dec6:	d12b      	bne.n	800df20 <__swbuf_r+0x70>
 800dec8:	686c      	ldr	r4, [r5, #4]
 800deca:	69a3      	ldr	r3, [r4, #24]
 800decc:	60a3      	str	r3, [r4, #8]
 800dece:	89a3      	ldrh	r3, [r4, #12]
 800ded0:	071a      	lsls	r2, r3, #28
 800ded2:	d52f      	bpl.n	800df34 <__swbuf_r+0x84>
 800ded4:	6923      	ldr	r3, [r4, #16]
 800ded6:	b36b      	cbz	r3, 800df34 <__swbuf_r+0x84>
 800ded8:	6923      	ldr	r3, [r4, #16]
 800deda:	6820      	ldr	r0, [r4, #0]
 800dedc:	b2f6      	uxtb	r6, r6
 800dede:	1ac0      	subs	r0, r0, r3
 800dee0:	6963      	ldr	r3, [r4, #20]
 800dee2:	4637      	mov	r7, r6
 800dee4:	4283      	cmp	r3, r0
 800dee6:	dc04      	bgt.n	800def2 <__swbuf_r+0x42>
 800dee8:	4621      	mov	r1, r4
 800deea:	4628      	mov	r0, r5
 800deec:	f000 f966 	bl	800e1bc <_fflush_r>
 800def0:	bb30      	cbnz	r0, 800df40 <__swbuf_r+0x90>
 800def2:	68a3      	ldr	r3, [r4, #8]
 800def4:	3001      	adds	r0, #1
 800def6:	3b01      	subs	r3, #1
 800def8:	60a3      	str	r3, [r4, #8]
 800defa:	6823      	ldr	r3, [r4, #0]
 800defc:	1c5a      	adds	r2, r3, #1
 800defe:	6022      	str	r2, [r4, #0]
 800df00:	701e      	strb	r6, [r3, #0]
 800df02:	6963      	ldr	r3, [r4, #20]
 800df04:	4283      	cmp	r3, r0
 800df06:	d004      	beq.n	800df12 <__swbuf_r+0x62>
 800df08:	89a3      	ldrh	r3, [r4, #12]
 800df0a:	07db      	lsls	r3, r3, #31
 800df0c:	d506      	bpl.n	800df1c <__swbuf_r+0x6c>
 800df0e:	2e0a      	cmp	r6, #10
 800df10:	d104      	bne.n	800df1c <__swbuf_r+0x6c>
 800df12:	4621      	mov	r1, r4
 800df14:	4628      	mov	r0, r5
 800df16:	f000 f951 	bl	800e1bc <_fflush_r>
 800df1a:	b988      	cbnz	r0, 800df40 <__swbuf_r+0x90>
 800df1c:	4638      	mov	r0, r7
 800df1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df20:	4b0a      	ldr	r3, [pc, #40]	; (800df4c <__swbuf_r+0x9c>)
 800df22:	429c      	cmp	r4, r3
 800df24:	d101      	bne.n	800df2a <__swbuf_r+0x7a>
 800df26:	68ac      	ldr	r4, [r5, #8]
 800df28:	e7cf      	b.n	800deca <__swbuf_r+0x1a>
 800df2a:	4b09      	ldr	r3, [pc, #36]	; (800df50 <__swbuf_r+0xa0>)
 800df2c:	429c      	cmp	r4, r3
 800df2e:	bf08      	it	eq
 800df30:	68ec      	ldreq	r4, [r5, #12]
 800df32:	e7ca      	b.n	800deca <__swbuf_r+0x1a>
 800df34:	4621      	mov	r1, r4
 800df36:	4628      	mov	r0, r5
 800df38:	f000 f81e 	bl	800df78 <__swsetup_r>
 800df3c:	2800      	cmp	r0, #0
 800df3e:	d0cb      	beq.n	800ded8 <__swbuf_r+0x28>
 800df40:	f04f 37ff 	mov.w	r7, #4294967295
 800df44:	e7ea      	b.n	800df1c <__swbuf_r+0x6c>
 800df46:	bf00      	nop
 800df48:	0800f7d0 	.word	0x0800f7d0
 800df4c:	0800f7f0 	.word	0x0800f7f0
 800df50:	0800f7b0 	.word	0x0800f7b0

0800df54 <_write_r>:
 800df54:	b538      	push	{r3, r4, r5, lr}
 800df56:	4604      	mov	r4, r0
 800df58:	4608      	mov	r0, r1
 800df5a:	4611      	mov	r1, r2
 800df5c:	2200      	movs	r2, #0
 800df5e:	4d05      	ldr	r5, [pc, #20]	; (800df74 <_write_r+0x20>)
 800df60:	602a      	str	r2, [r5, #0]
 800df62:	461a      	mov	r2, r3
 800df64:	f7f4 fc6a 	bl	800283c <_write>
 800df68:	1c43      	adds	r3, r0, #1
 800df6a:	d102      	bne.n	800df72 <_write_r+0x1e>
 800df6c:	682b      	ldr	r3, [r5, #0]
 800df6e:	b103      	cbz	r3, 800df72 <_write_r+0x1e>
 800df70:	6023      	str	r3, [r4, #0]
 800df72:	bd38      	pop	{r3, r4, r5, pc}
 800df74:	20000bb8 	.word	0x20000bb8

0800df78 <__swsetup_r>:
 800df78:	4b32      	ldr	r3, [pc, #200]	; (800e044 <__swsetup_r+0xcc>)
 800df7a:	b570      	push	{r4, r5, r6, lr}
 800df7c:	681d      	ldr	r5, [r3, #0]
 800df7e:	4606      	mov	r6, r0
 800df80:	460c      	mov	r4, r1
 800df82:	b125      	cbz	r5, 800df8e <__swsetup_r+0x16>
 800df84:	69ab      	ldr	r3, [r5, #24]
 800df86:	b913      	cbnz	r3, 800df8e <__swsetup_r+0x16>
 800df88:	4628      	mov	r0, r5
 800df8a:	f7ff f83b 	bl	800d004 <__sinit>
 800df8e:	4b2e      	ldr	r3, [pc, #184]	; (800e048 <__swsetup_r+0xd0>)
 800df90:	429c      	cmp	r4, r3
 800df92:	d10f      	bne.n	800dfb4 <__swsetup_r+0x3c>
 800df94:	686c      	ldr	r4, [r5, #4]
 800df96:	89a3      	ldrh	r3, [r4, #12]
 800df98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800df9c:	0719      	lsls	r1, r3, #28
 800df9e:	d42c      	bmi.n	800dffa <__swsetup_r+0x82>
 800dfa0:	06dd      	lsls	r5, r3, #27
 800dfa2:	d411      	bmi.n	800dfc8 <__swsetup_r+0x50>
 800dfa4:	2309      	movs	r3, #9
 800dfa6:	6033      	str	r3, [r6, #0]
 800dfa8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dfac:	f04f 30ff 	mov.w	r0, #4294967295
 800dfb0:	81a3      	strh	r3, [r4, #12]
 800dfb2:	e03e      	b.n	800e032 <__swsetup_r+0xba>
 800dfb4:	4b25      	ldr	r3, [pc, #148]	; (800e04c <__swsetup_r+0xd4>)
 800dfb6:	429c      	cmp	r4, r3
 800dfb8:	d101      	bne.n	800dfbe <__swsetup_r+0x46>
 800dfba:	68ac      	ldr	r4, [r5, #8]
 800dfbc:	e7eb      	b.n	800df96 <__swsetup_r+0x1e>
 800dfbe:	4b24      	ldr	r3, [pc, #144]	; (800e050 <__swsetup_r+0xd8>)
 800dfc0:	429c      	cmp	r4, r3
 800dfc2:	bf08      	it	eq
 800dfc4:	68ec      	ldreq	r4, [r5, #12]
 800dfc6:	e7e6      	b.n	800df96 <__swsetup_r+0x1e>
 800dfc8:	0758      	lsls	r0, r3, #29
 800dfca:	d512      	bpl.n	800dff2 <__swsetup_r+0x7a>
 800dfcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dfce:	b141      	cbz	r1, 800dfe2 <__swsetup_r+0x6a>
 800dfd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dfd4:	4299      	cmp	r1, r3
 800dfd6:	d002      	beq.n	800dfde <__swsetup_r+0x66>
 800dfd8:	4630      	mov	r0, r6
 800dfda:	f7fd fb07 	bl	800b5ec <_free_r>
 800dfde:	2300      	movs	r3, #0
 800dfe0:	6363      	str	r3, [r4, #52]	; 0x34
 800dfe2:	89a3      	ldrh	r3, [r4, #12]
 800dfe4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dfe8:	81a3      	strh	r3, [r4, #12]
 800dfea:	2300      	movs	r3, #0
 800dfec:	6063      	str	r3, [r4, #4]
 800dfee:	6923      	ldr	r3, [r4, #16]
 800dff0:	6023      	str	r3, [r4, #0]
 800dff2:	89a3      	ldrh	r3, [r4, #12]
 800dff4:	f043 0308 	orr.w	r3, r3, #8
 800dff8:	81a3      	strh	r3, [r4, #12]
 800dffa:	6923      	ldr	r3, [r4, #16]
 800dffc:	b94b      	cbnz	r3, 800e012 <__swsetup_r+0x9a>
 800dffe:	89a3      	ldrh	r3, [r4, #12]
 800e000:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e008:	d003      	beq.n	800e012 <__swsetup_r+0x9a>
 800e00a:	4621      	mov	r1, r4
 800e00c:	4630      	mov	r0, r6
 800e00e:	f000 f959 	bl	800e2c4 <__smakebuf_r>
 800e012:	89a0      	ldrh	r0, [r4, #12]
 800e014:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e018:	f010 0301 	ands.w	r3, r0, #1
 800e01c:	d00a      	beq.n	800e034 <__swsetup_r+0xbc>
 800e01e:	2300      	movs	r3, #0
 800e020:	60a3      	str	r3, [r4, #8]
 800e022:	6963      	ldr	r3, [r4, #20]
 800e024:	425b      	negs	r3, r3
 800e026:	61a3      	str	r3, [r4, #24]
 800e028:	6923      	ldr	r3, [r4, #16]
 800e02a:	b943      	cbnz	r3, 800e03e <__swsetup_r+0xc6>
 800e02c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e030:	d1ba      	bne.n	800dfa8 <__swsetup_r+0x30>
 800e032:	bd70      	pop	{r4, r5, r6, pc}
 800e034:	0781      	lsls	r1, r0, #30
 800e036:	bf58      	it	pl
 800e038:	6963      	ldrpl	r3, [r4, #20]
 800e03a:	60a3      	str	r3, [r4, #8]
 800e03c:	e7f4      	b.n	800e028 <__swsetup_r+0xb0>
 800e03e:	2000      	movs	r0, #0
 800e040:	e7f7      	b.n	800e032 <__swsetup_r+0xba>
 800e042:	bf00      	nop
 800e044:	2000001c 	.word	0x2000001c
 800e048:	0800f7d0 	.word	0x0800f7d0
 800e04c:	0800f7f0 	.word	0x0800f7f0
 800e050:	0800f7b0 	.word	0x0800f7b0

0800e054 <__assert_func>:
 800e054:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e056:	4614      	mov	r4, r2
 800e058:	461a      	mov	r2, r3
 800e05a:	4b09      	ldr	r3, [pc, #36]	; (800e080 <__assert_func+0x2c>)
 800e05c:	4605      	mov	r5, r0
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	68d8      	ldr	r0, [r3, #12]
 800e062:	b14c      	cbz	r4, 800e078 <__assert_func+0x24>
 800e064:	4b07      	ldr	r3, [pc, #28]	; (800e084 <__assert_func+0x30>)
 800e066:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e06a:	9100      	str	r1, [sp, #0]
 800e06c:	462b      	mov	r3, r5
 800e06e:	4906      	ldr	r1, [pc, #24]	; (800e088 <__assert_func+0x34>)
 800e070:	f000 f8e0 	bl	800e234 <fiprintf>
 800e074:	f000 f9d7 	bl	800e426 <abort>
 800e078:	4b04      	ldr	r3, [pc, #16]	; (800e08c <__assert_func+0x38>)
 800e07a:	461c      	mov	r4, r3
 800e07c:	e7f3      	b.n	800e066 <__assert_func+0x12>
 800e07e:	bf00      	nop
 800e080:	2000001c 	.word	0x2000001c
 800e084:	0800f97d 	.word	0x0800f97d
 800e088:	0800f98a 	.word	0x0800f98a
 800e08c:	0800f9b8 	.word	0x0800f9b8

0800e090 <_close_r>:
 800e090:	b538      	push	{r3, r4, r5, lr}
 800e092:	2300      	movs	r3, #0
 800e094:	4d05      	ldr	r5, [pc, #20]	; (800e0ac <_close_r+0x1c>)
 800e096:	4604      	mov	r4, r0
 800e098:	4608      	mov	r0, r1
 800e09a:	602b      	str	r3, [r5, #0]
 800e09c:	f7f4 fbf8 	bl	8002890 <_close>
 800e0a0:	1c43      	adds	r3, r0, #1
 800e0a2:	d102      	bne.n	800e0aa <_close_r+0x1a>
 800e0a4:	682b      	ldr	r3, [r5, #0]
 800e0a6:	b103      	cbz	r3, 800e0aa <_close_r+0x1a>
 800e0a8:	6023      	str	r3, [r4, #0]
 800e0aa:	bd38      	pop	{r3, r4, r5, pc}
 800e0ac:	20000bb8 	.word	0x20000bb8

0800e0b0 <__sflush_r>:
 800e0b0:	898a      	ldrh	r2, [r1, #12]
 800e0b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0b6:	4605      	mov	r5, r0
 800e0b8:	0710      	lsls	r0, r2, #28
 800e0ba:	460c      	mov	r4, r1
 800e0bc:	d458      	bmi.n	800e170 <__sflush_r+0xc0>
 800e0be:	684b      	ldr	r3, [r1, #4]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	dc05      	bgt.n	800e0d0 <__sflush_r+0x20>
 800e0c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	dc02      	bgt.n	800e0d0 <__sflush_r+0x20>
 800e0ca:	2000      	movs	r0, #0
 800e0cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e0d2:	2e00      	cmp	r6, #0
 800e0d4:	d0f9      	beq.n	800e0ca <__sflush_r+0x1a>
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e0dc:	682f      	ldr	r7, [r5, #0]
 800e0de:	602b      	str	r3, [r5, #0]
 800e0e0:	d032      	beq.n	800e148 <__sflush_r+0x98>
 800e0e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e0e4:	89a3      	ldrh	r3, [r4, #12]
 800e0e6:	075a      	lsls	r2, r3, #29
 800e0e8:	d505      	bpl.n	800e0f6 <__sflush_r+0x46>
 800e0ea:	6863      	ldr	r3, [r4, #4]
 800e0ec:	1ac0      	subs	r0, r0, r3
 800e0ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e0f0:	b10b      	cbz	r3, 800e0f6 <__sflush_r+0x46>
 800e0f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e0f4:	1ac0      	subs	r0, r0, r3
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	4602      	mov	r2, r0
 800e0fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e0fc:	4628      	mov	r0, r5
 800e0fe:	6a21      	ldr	r1, [r4, #32]
 800e100:	47b0      	blx	r6
 800e102:	1c43      	adds	r3, r0, #1
 800e104:	89a3      	ldrh	r3, [r4, #12]
 800e106:	d106      	bne.n	800e116 <__sflush_r+0x66>
 800e108:	6829      	ldr	r1, [r5, #0]
 800e10a:	291d      	cmp	r1, #29
 800e10c:	d82c      	bhi.n	800e168 <__sflush_r+0xb8>
 800e10e:	4a2a      	ldr	r2, [pc, #168]	; (800e1b8 <__sflush_r+0x108>)
 800e110:	40ca      	lsrs	r2, r1
 800e112:	07d6      	lsls	r6, r2, #31
 800e114:	d528      	bpl.n	800e168 <__sflush_r+0xb8>
 800e116:	2200      	movs	r2, #0
 800e118:	6062      	str	r2, [r4, #4]
 800e11a:	6922      	ldr	r2, [r4, #16]
 800e11c:	04d9      	lsls	r1, r3, #19
 800e11e:	6022      	str	r2, [r4, #0]
 800e120:	d504      	bpl.n	800e12c <__sflush_r+0x7c>
 800e122:	1c42      	adds	r2, r0, #1
 800e124:	d101      	bne.n	800e12a <__sflush_r+0x7a>
 800e126:	682b      	ldr	r3, [r5, #0]
 800e128:	b903      	cbnz	r3, 800e12c <__sflush_r+0x7c>
 800e12a:	6560      	str	r0, [r4, #84]	; 0x54
 800e12c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e12e:	602f      	str	r7, [r5, #0]
 800e130:	2900      	cmp	r1, #0
 800e132:	d0ca      	beq.n	800e0ca <__sflush_r+0x1a>
 800e134:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e138:	4299      	cmp	r1, r3
 800e13a:	d002      	beq.n	800e142 <__sflush_r+0x92>
 800e13c:	4628      	mov	r0, r5
 800e13e:	f7fd fa55 	bl	800b5ec <_free_r>
 800e142:	2000      	movs	r0, #0
 800e144:	6360      	str	r0, [r4, #52]	; 0x34
 800e146:	e7c1      	b.n	800e0cc <__sflush_r+0x1c>
 800e148:	6a21      	ldr	r1, [r4, #32]
 800e14a:	2301      	movs	r3, #1
 800e14c:	4628      	mov	r0, r5
 800e14e:	47b0      	blx	r6
 800e150:	1c41      	adds	r1, r0, #1
 800e152:	d1c7      	bne.n	800e0e4 <__sflush_r+0x34>
 800e154:	682b      	ldr	r3, [r5, #0]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d0c4      	beq.n	800e0e4 <__sflush_r+0x34>
 800e15a:	2b1d      	cmp	r3, #29
 800e15c:	d001      	beq.n	800e162 <__sflush_r+0xb2>
 800e15e:	2b16      	cmp	r3, #22
 800e160:	d101      	bne.n	800e166 <__sflush_r+0xb6>
 800e162:	602f      	str	r7, [r5, #0]
 800e164:	e7b1      	b.n	800e0ca <__sflush_r+0x1a>
 800e166:	89a3      	ldrh	r3, [r4, #12]
 800e168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e16c:	81a3      	strh	r3, [r4, #12]
 800e16e:	e7ad      	b.n	800e0cc <__sflush_r+0x1c>
 800e170:	690f      	ldr	r7, [r1, #16]
 800e172:	2f00      	cmp	r7, #0
 800e174:	d0a9      	beq.n	800e0ca <__sflush_r+0x1a>
 800e176:	0793      	lsls	r3, r2, #30
 800e178:	bf18      	it	ne
 800e17a:	2300      	movne	r3, #0
 800e17c:	680e      	ldr	r6, [r1, #0]
 800e17e:	bf08      	it	eq
 800e180:	694b      	ldreq	r3, [r1, #20]
 800e182:	eba6 0807 	sub.w	r8, r6, r7
 800e186:	600f      	str	r7, [r1, #0]
 800e188:	608b      	str	r3, [r1, #8]
 800e18a:	f1b8 0f00 	cmp.w	r8, #0
 800e18e:	dd9c      	ble.n	800e0ca <__sflush_r+0x1a>
 800e190:	4643      	mov	r3, r8
 800e192:	463a      	mov	r2, r7
 800e194:	4628      	mov	r0, r5
 800e196:	6a21      	ldr	r1, [r4, #32]
 800e198:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e19a:	47b0      	blx	r6
 800e19c:	2800      	cmp	r0, #0
 800e19e:	dc06      	bgt.n	800e1ae <__sflush_r+0xfe>
 800e1a0:	89a3      	ldrh	r3, [r4, #12]
 800e1a2:	f04f 30ff 	mov.w	r0, #4294967295
 800e1a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1aa:	81a3      	strh	r3, [r4, #12]
 800e1ac:	e78e      	b.n	800e0cc <__sflush_r+0x1c>
 800e1ae:	4407      	add	r7, r0
 800e1b0:	eba8 0800 	sub.w	r8, r8, r0
 800e1b4:	e7e9      	b.n	800e18a <__sflush_r+0xda>
 800e1b6:	bf00      	nop
 800e1b8:	20400001 	.word	0x20400001

0800e1bc <_fflush_r>:
 800e1bc:	b538      	push	{r3, r4, r5, lr}
 800e1be:	690b      	ldr	r3, [r1, #16]
 800e1c0:	4605      	mov	r5, r0
 800e1c2:	460c      	mov	r4, r1
 800e1c4:	b913      	cbnz	r3, 800e1cc <_fflush_r+0x10>
 800e1c6:	2500      	movs	r5, #0
 800e1c8:	4628      	mov	r0, r5
 800e1ca:	bd38      	pop	{r3, r4, r5, pc}
 800e1cc:	b118      	cbz	r0, 800e1d6 <_fflush_r+0x1a>
 800e1ce:	6983      	ldr	r3, [r0, #24]
 800e1d0:	b90b      	cbnz	r3, 800e1d6 <_fflush_r+0x1a>
 800e1d2:	f7fe ff17 	bl	800d004 <__sinit>
 800e1d6:	4b14      	ldr	r3, [pc, #80]	; (800e228 <_fflush_r+0x6c>)
 800e1d8:	429c      	cmp	r4, r3
 800e1da:	d11b      	bne.n	800e214 <_fflush_r+0x58>
 800e1dc:	686c      	ldr	r4, [r5, #4]
 800e1de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d0ef      	beq.n	800e1c6 <_fflush_r+0xa>
 800e1e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e1e8:	07d0      	lsls	r0, r2, #31
 800e1ea:	d404      	bmi.n	800e1f6 <_fflush_r+0x3a>
 800e1ec:	0599      	lsls	r1, r3, #22
 800e1ee:	d402      	bmi.n	800e1f6 <_fflush_r+0x3a>
 800e1f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e1f2:	f7fe ffaa 	bl	800d14a <__retarget_lock_acquire_recursive>
 800e1f6:	4628      	mov	r0, r5
 800e1f8:	4621      	mov	r1, r4
 800e1fa:	f7ff ff59 	bl	800e0b0 <__sflush_r>
 800e1fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e200:	4605      	mov	r5, r0
 800e202:	07da      	lsls	r2, r3, #31
 800e204:	d4e0      	bmi.n	800e1c8 <_fflush_r+0xc>
 800e206:	89a3      	ldrh	r3, [r4, #12]
 800e208:	059b      	lsls	r3, r3, #22
 800e20a:	d4dd      	bmi.n	800e1c8 <_fflush_r+0xc>
 800e20c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e20e:	f7fe ff9d 	bl	800d14c <__retarget_lock_release_recursive>
 800e212:	e7d9      	b.n	800e1c8 <_fflush_r+0xc>
 800e214:	4b05      	ldr	r3, [pc, #20]	; (800e22c <_fflush_r+0x70>)
 800e216:	429c      	cmp	r4, r3
 800e218:	d101      	bne.n	800e21e <_fflush_r+0x62>
 800e21a:	68ac      	ldr	r4, [r5, #8]
 800e21c:	e7df      	b.n	800e1de <_fflush_r+0x22>
 800e21e:	4b04      	ldr	r3, [pc, #16]	; (800e230 <_fflush_r+0x74>)
 800e220:	429c      	cmp	r4, r3
 800e222:	bf08      	it	eq
 800e224:	68ec      	ldreq	r4, [r5, #12]
 800e226:	e7da      	b.n	800e1de <_fflush_r+0x22>
 800e228:	0800f7d0 	.word	0x0800f7d0
 800e22c:	0800f7f0 	.word	0x0800f7f0
 800e230:	0800f7b0 	.word	0x0800f7b0

0800e234 <fiprintf>:
 800e234:	b40e      	push	{r1, r2, r3}
 800e236:	b503      	push	{r0, r1, lr}
 800e238:	4601      	mov	r1, r0
 800e23a:	ab03      	add	r3, sp, #12
 800e23c:	4805      	ldr	r0, [pc, #20]	; (800e254 <fiprintf+0x20>)
 800e23e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e242:	6800      	ldr	r0, [r0, #0]
 800e244:	9301      	str	r3, [sp, #4]
 800e246:	f7ff fcbf 	bl	800dbc8 <_vfiprintf_r>
 800e24a:	b002      	add	sp, #8
 800e24c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e250:	b003      	add	sp, #12
 800e252:	4770      	bx	lr
 800e254:	2000001c 	.word	0x2000001c

0800e258 <_lseek_r>:
 800e258:	b538      	push	{r3, r4, r5, lr}
 800e25a:	4604      	mov	r4, r0
 800e25c:	4608      	mov	r0, r1
 800e25e:	4611      	mov	r1, r2
 800e260:	2200      	movs	r2, #0
 800e262:	4d05      	ldr	r5, [pc, #20]	; (800e278 <_lseek_r+0x20>)
 800e264:	602a      	str	r2, [r5, #0]
 800e266:	461a      	mov	r2, r3
 800e268:	f7f4 fb36 	bl	80028d8 <_lseek>
 800e26c:	1c43      	adds	r3, r0, #1
 800e26e:	d102      	bne.n	800e276 <_lseek_r+0x1e>
 800e270:	682b      	ldr	r3, [r5, #0]
 800e272:	b103      	cbz	r3, 800e276 <_lseek_r+0x1e>
 800e274:	6023      	str	r3, [r4, #0]
 800e276:	bd38      	pop	{r3, r4, r5, pc}
 800e278:	20000bb8 	.word	0x20000bb8

0800e27c <__swhatbuf_r>:
 800e27c:	b570      	push	{r4, r5, r6, lr}
 800e27e:	460e      	mov	r6, r1
 800e280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e284:	4614      	mov	r4, r2
 800e286:	2900      	cmp	r1, #0
 800e288:	461d      	mov	r5, r3
 800e28a:	b096      	sub	sp, #88	; 0x58
 800e28c:	da07      	bge.n	800e29e <__swhatbuf_r+0x22>
 800e28e:	2300      	movs	r3, #0
 800e290:	602b      	str	r3, [r5, #0]
 800e292:	89b3      	ldrh	r3, [r6, #12]
 800e294:	061a      	lsls	r2, r3, #24
 800e296:	d410      	bmi.n	800e2ba <__swhatbuf_r+0x3e>
 800e298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e29c:	e00e      	b.n	800e2bc <__swhatbuf_r+0x40>
 800e29e:	466a      	mov	r2, sp
 800e2a0:	f000 f8c8 	bl	800e434 <_fstat_r>
 800e2a4:	2800      	cmp	r0, #0
 800e2a6:	dbf2      	blt.n	800e28e <__swhatbuf_r+0x12>
 800e2a8:	9a01      	ldr	r2, [sp, #4]
 800e2aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e2ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e2b2:	425a      	negs	r2, r3
 800e2b4:	415a      	adcs	r2, r3
 800e2b6:	602a      	str	r2, [r5, #0]
 800e2b8:	e7ee      	b.n	800e298 <__swhatbuf_r+0x1c>
 800e2ba:	2340      	movs	r3, #64	; 0x40
 800e2bc:	2000      	movs	r0, #0
 800e2be:	6023      	str	r3, [r4, #0]
 800e2c0:	b016      	add	sp, #88	; 0x58
 800e2c2:	bd70      	pop	{r4, r5, r6, pc}

0800e2c4 <__smakebuf_r>:
 800e2c4:	898b      	ldrh	r3, [r1, #12]
 800e2c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e2c8:	079d      	lsls	r5, r3, #30
 800e2ca:	4606      	mov	r6, r0
 800e2cc:	460c      	mov	r4, r1
 800e2ce:	d507      	bpl.n	800e2e0 <__smakebuf_r+0x1c>
 800e2d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e2d4:	6023      	str	r3, [r4, #0]
 800e2d6:	6123      	str	r3, [r4, #16]
 800e2d8:	2301      	movs	r3, #1
 800e2da:	6163      	str	r3, [r4, #20]
 800e2dc:	b002      	add	sp, #8
 800e2de:	bd70      	pop	{r4, r5, r6, pc}
 800e2e0:	466a      	mov	r2, sp
 800e2e2:	ab01      	add	r3, sp, #4
 800e2e4:	f7ff ffca 	bl	800e27c <__swhatbuf_r>
 800e2e8:	9900      	ldr	r1, [sp, #0]
 800e2ea:	4605      	mov	r5, r0
 800e2ec:	4630      	mov	r0, r6
 800e2ee:	f7fd f9c9 	bl	800b684 <_malloc_r>
 800e2f2:	b948      	cbnz	r0, 800e308 <__smakebuf_r+0x44>
 800e2f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2f8:	059a      	lsls	r2, r3, #22
 800e2fa:	d4ef      	bmi.n	800e2dc <__smakebuf_r+0x18>
 800e2fc:	f023 0303 	bic.w	r3, r3, #3
 800e300:	f043 0302 	orr.w	r3, r3, #2
 800e304:	81a3      	strh	r3, [r4, #12]
 800e306:	e7e3      	b.n	800e2d0 <__smakebuf_r+0xc>
 800e308:	4b0d      	ldr	r3, [pc, #52]	; (800e340 <__smakebuf_r+0x7c>)
 800e30a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e30c:	89a3      	ldrh	r3, [r4, #12]
 800e30e:	6020      	str	r0, [r4, #0]
 800e310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e314:	81a3      	strh	r3, [r4, #12]
 800e316:	9b00      	ldr	r3, [sp, #0]
 800e318:	6120      	str	r0, [r4, #16]
 800e31a:	6163      	str	r3, [r4, #20]
 800e31c:	9b01      	ldr	r3, [sp, #4]
 800e31e:	b15b      	cbz	r3, 800e338 <__smakebuf_r+0x74>
 800e320:	4630      	mov	r0, r6
 800e322:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e326:	f000 f897 	bl	800e458 <_isatty_r>
 800e32a:	b128      	cbz	r0, 800e338 <__smakebuf_r+0x74>
 800e32c:	89a3      	ldrh	r3, [r4, #12]
 800e32e:	f023 0303 	bic.w	r3, r3, #3
 800e332:	f043 0301 	orr.w	r3, r3, #1
 800e336:	81a3      	strh	r3, [r4, #12]
 800e338:	89a0      	ldrh	r0, [r4, #12]
 800e33a:	4305      	orrs	r5, r0
 800e33c:	81a5      	strh	r5, [r4, #12]
 800e33e:	e7cd      	b.n	800e2dc <__smakebuf_r+0x18>
 800e340:	0800cf9d 	.word	0x0800cf9d

0800e344 <__ascii_mbtowc>:
 800e344:	b082      	sub	sp, #8
 800e346:	b901      	cbnz	r1, 800e34a <__ascii_mbtowc+0x6>
 800e348:	a901      	add	r1, sp, #4
 800e34a:	b142      	cbz	r2, 800e35e <__ascii_mbtowc+0x1a>
 800e34c:	b14b      	cbz	r3, 800e362 <__ascii_mbtowc+0x1e>
 800e34e:	7813      	ldrb	r3, [r2, #0]
 800e350:	600b      	str	r3, [r1, #0]
 800e352:	7812      	ldrb	r2, [r2, #0]
 800e354:	1e10      	subs	r0, r2, #0
 800e356:	bf18      	it	ne
 800e358:	2001      	movne	r0, #1
 800e35a:	b002      	add	sp, #8
 800e35c:	4770      	bx	lr
 800e35e:	4610      	mov	r0, r2
 800e360:	e7fb      	b.n	800e35a <__ascii_mbtowc+0x16>
 800e362:	f06f 0001 	mvn.w	r0, #1
 800e366:	e7f8      	b.n	800e35a <__ascii_mbtowc+0x16>

0800e368 <memmove>:
 800e368:	4288      	cmp	r0, r1
 800e36a:	b510      	push	{r4, lr}
 800e36c:	eb01 0402 	add.w	r4, r1, r2
 800e370:	d902      	bls.n	800e378 <memmove+0x10>
 800e372:	4284      	cmp	r4, r0
 800e374:	4623      	mov	r3, r4
 800e376:	d807      	bhi.n	800e388 <memmove+0x20>
 800e378:	1e43      	subs	r3, r0, #1
 800e37a:	42a1      	cmp	r1, r4
 800e37c:	d008      	beq.n	800e390 <memmove+0x28>
 800e37e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e382:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e386:	e7f8      	b.n	800e37a <memmove+0x12>
 800e388:	4601      	mov	r1, r0
 800e38a:	4402      	add	r2, r0
 800e38c:	428a      	cmp	r2, r1
 800e38e:	d100      	bne.n	800e392 <memmove+0x2a>
 800e390:	bd10      	pop	{r4, pc}
 800e392:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e396:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e39a:	e7f7      	b.n	800e38c <memmove+0x24>

0800e39c <_realloc_r>:
 800e39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e39e:	4607      	mov	r7, r0
 800e3a0:	4614      	mov	r4, r2
 800e3a2:	460e      	mov	r6, r1
 800e3a4:	b921      	cbnz	r1, 800e3b0 <_realloc_r+0x14>
 800e3a6:	4611      	mov	r1, r2
 800e3a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e3ac:	f7fd b96a 	b.w	800b684 <_malloc_r>
 800e3b0:	b922      	cbnz	r2, 800e3bc <_realloc_r+0x20>
 800e3b2:	f7fd f91b 	bl	800b5ec <_free_r>
 800e3b6:	4625      	mov	r5, r4
 800e3b8:	4628      	mov	r0, r5
 800e3ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3bc:	f000 f85c 	bl	800e478 <_malloc_usable_size_r>
 800e3c0:	42a0      	cmp	r0, r4
 800e3c2:	d20f      	bcs.n	800e3e4 <_realloc_r+0x48>
 800e3c4:	4621      	mov	r1, r4
 800e3c6:	4638      	mov	r0, r7
 800e3c8:	f7fd f95c 	bl	800b684 <_malloc_r>
 800e3cc:	4605      	mov	r5, r0
 800e3ce:	2800      	cmp	r0, #0
 800e3d0:	d0f2      	beq.n	800e3b8 <_realloc_r+0x1c>
 800e3d2:	4631      	mov	r1, r6
 800e3d4:	4622      	mov	r2, r4
 800e3d6:	f7fe fec8 	bl	800d16a <memcpy>
 800e3da:	4631      	mov	r1, r6
 800e3dc:	4638      	mov	r0, r7
 800e3de:	f7fd f905 	bl	800b5ec <_free_r>
 800e3e2:	e7e9      	b.n	800e3b8 <_realloc_r+0x1c>
 800e3e4:	4635      	mov	r5, r6
 800e3e6:	e7e7      	b.n	800e3b8 <_realloc_r+0x1c>

0800e3e8 <_read_r>:
 800e3e8:	b538      	push	{r3, r4, r5, lr}
 800e3ea:	4604      	mov	r4, r0
 800e3ec:	4608      	mov	r0, r1
 800e3ee:	4611      	mov	r1, r2
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	4d05      	ldr	r5, [pc, #20]	; (800e408 <_read_r+0x20>)
 800e3f4:	602a      	str	r2, [r5, #0]
 800e3f6:	461a      	mov	r2, r3
 800e3f8:	f7f4 fa03 	bl	8002802 <_read>
 800e3fc:	1c43      	adds	r3, r0, #1
 800e3fe:	d102      	bne.n	800e406 <_read_r+0x1e>
 800e400:	682b      	ldr	r3, [r5, #0]
 800e402:	b103      	cbz	r3, 800e406 <_read_r+0x1e>
 800e404:	6023      	str	r3, [r4, #0]
 800e406:	bd38      	pop	{r3, r4, r5, pc}
 800e408:	20000bb8 	.word	0x20000bb8

0800e40c <__ascii_wctomb>:
 800e40c:	4603      	mov	r3, r0
 800e40e:	4608      	mov	r0, r1
 800e410:	b141      	cbz	r1, 800e424 <__ascii_wctomb+0x18>
 800e412:	2aff      	cmp	r2, #255	; 0xff
 800e414:	d904      	bls.n	800e420 <__ascii_wctomb+0x14>
 800e416:	228a      	movs	r2, #138	; 0x8a
 800e418:	f04f 30ff 	mov.w	r0, #4294967295
 800e41c:	601a      	str	r2, [r3, #0]
 800e41e:	4770      	bx	lr
 800e420:	2001      	movs	r0, #1
 800e422:	700a      	strb	r2, [r1, #0]
 800e424:	4770      	bx	lr

0800e426 <abort>:
 800e426:	2006      	movs	r0, #6
 800e428:	b508      	push	{r3, lr}
 800e42a:	f000 f855 	bl	800e4d8 <raise>
 800e42e:	2001      	movs	r0, #1
 800e430:	f7f4 f9dd 	bl	80027ee <_exit>

0800e434 <_fstat_r>:
 800e434:	b538      	push	{r3, r4, r5, lr}
 800e436:	2300      	movs	r3, #0
 800e438:	4d06      	ldr	r5, [pc, #24]	; (800e454 <_fstat_r+0x20>)
 800e43a:	4604      	mov	r4, r0
 800e43c:	4608      	mov	r0, r1
 800e43e:	4611      	mov	r1, r2
 800e440:	602b      	str	r3, [r5, #0]
 800e442:	f7f4 fa30 	bl	80028a6 <_fstat>
 800e446:	1c43      	adds	r3, r0, #1
 800e448:	d102      	bne.n	800e450 <_fstat_r+0x1c>
 800e44a:	682b      	ldr	r3, [r5, #0]
 800e44c:	b103      	cbz	r3, 800e450 <_fstat_r+0x1c>
 800e44e:	6023      	str	r3, [r4, #0]
 800e450:	bd38      	pop	{r3, r4, r5, pc}
 800e452:	bf00      	nop
 800e454:	20000bb8 	.word	0x20000bb8

0800e458 <_isatty_r>:
 800e458:	b538      	push	{r3, r4, r5, lr}
 800e45a:	2300      	movs	r3, #0
 800e45c:	4d05      	ldr	r5, [pc, #20]	; (800e474 <_isatty_r+0x1c>)
 800e45e:	4604      	mov	r4, r0
 800e460:	4608      	mov	r0, r1
 800e462:	602b      	str	r3, [r5, #0]
 800e464:	f7f4 fa2e 	bl	80028c4 <_isatty>
 800e468:	1c43      	adds	r3, r0, #1
 800e46a:	d102      	bne.n	800e472 <_isatty_r+0x1a>
 800e46c:	682b      	ldr	r3, [r5, #0]
 800e46e:	b103      	cbz	r3, 800e472 <_isatty_r+0x1a>
 800e470:	6023      	str	r3, [r4, #0]
 800e472:	bd38      	pop	{r3, r4, r5, pc}
 800e474:	20000bb8 	.word	0x20000bb8

0800e478 <_malloc_usable_size_r>:
 800e478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e47c:	1f18      	subs	r0, r3, #4
 800e47e:	2b00      	cmp	r3, #0
 800e480:	bfbc      	itt	lt
 800e482:	580b      	ldrlt	r3, [r1, r0]
 800e484:	18c0      	addlt	r0, r0, r3
 800e486:	4770      	bx	lr

0800e488 <_raise_r>:
 800e488:	291f      	cmp	r1, #31
 800e48a:	b538      	push	{r3, r4, r5, lr}
 800e48c:	4604      	mov	r4, r0
 800e48e:	460d      	mov	r5, r1
 800e490:	d904      	bls.n	800e49c <_raise_r+0x14>
 800e492:	2316      	movs	r3, #22
 800e494:	6003      	str	r3, [r0, #0]
 800e496:	f04f 30ff 	mov.w	r0, #4294967295
 800e49a:	bd38      	pop	{r3, r4, r5, pc}
 800e49c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e49e:	b112      	cbz	r2, 800e4a6 <_raise_r+0x1e>
 800e4a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e4a4:	b94b      	cbnz	r3, 800e4ba <_raise_r+0x32>
 800e4a6:	4620      	mov	r0, r4
 800e4a8:	f000 f830 	bl	800e50c <_getpid_r>
 800e4ac:	462a      	mov	r2, r5
 800e4ae:	4601      	mov	r1, r0
 800e4b0:	4620      	mov	r0, r4
 800e4b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4b6:	f000 b817 	b.w	800e4e8 <_kill_r>
 800e4ba:	2b01      	cmp	r3, #1
 800e4bc:	d00a      	beq.n	800e4d4 <_raise_r+0x4c>
 800e4be:	1c59      	adds	r1, r3, #1
 800e4c0:	d103      	bne.n	800e4ca <_raise_r+0x42>
 800e4c2:	2316      	movs	r3, #22
 800e4c4:	6003      	str	r3, [r0, #0]
 800e4c6:	2001      	movs	r0, #1
 800e4c8:	e7e7      	b.n	800e49a <_raise_r+0x12>
 800e4ca:	2400      	movs	r4, #0
 800e4cc:	4628      	mov	r0, r5
 800e4ce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e4d2:	4798      	blx	r3
 800e4d4:	2000      	movs	r0, #0
 800e4d6:	e7e0      	b.n	800e49a <_raise_r+0x12>

0800e4d8 <raise>:
 800e4d8:	4b02      	ldr	r3, [pc, #8]	; (800e4e4 <raise+0xc>)
 800e4da:	4601      	mov	r1, r0
 800e4dc:	6818      	ldr	r0, [r3, #0]
 800e4de:	f7ff bfd3 	b.w	800e488 <_raise_r>
 800e4e2:	bf00      	nop
 800e4e4:	2000001c 	.word	0x2000001c

0800e4e8 <_kill_r>:
 800e4e8:	b538      	push	{r3, r4, r5, lr}
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	4d06      	ldr	r5, [pc, #24]	; (800e508 <_kill_r+0x20>)
 800e4ee:	4604      	mov	r4, r0
 800e4f0:	4608      	mov	r0, r1
 800e4f2:	4611      	mov	r1, r2
 800e4f4:	602b      	str	r3, [r5, #0]
 800e4f6:	f7f4 f96a 	bl	80027ce <_kill>
 800e4fa:	1c43      	adds	r3, r0, #1
 800e4fc:	d102      	bne.n	800e504 <_kill_r+0x1c>
 800e4fe:	682b      	ldr	r3, [r5, #0]
 800e500:	b103      	cbz	r3, 800e504 <_kill_r+0x1c>
 800e502:	6023      	str	r3, [r4, #0]
 800e504:	bd38      	pop	{r3, r4, r5, pc}
 800e506:	bf00      	nop
 800e508:	20000bb8 	.word	0x20000bb8

0800e50c <_getpid_r>:
 800e50c:	f7f4 b958 	b.w	80027c0 <_getpid>

0800e510 <_init>:
 800e510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e512:	bf00      	nop
 800e514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e516:	bc08      	pop	{r3}
 800e518:	469e      	mov	lr, r3
 800e51a:	4770      	bx	lr

0800e51c <_fini>:
 800e51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e51e:	bf00      	nop
 800e520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e522:	bc08      	pop	{r3}
 800e524:	469e      	mov	lr, r3
 800e526:	4770      	bx	lr
