
RCFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae78  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e1c  0800b05c  0800b05c  0001b05c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be78  0800be78  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800be78  0800be78  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800be78  0800be78  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be78  0800be78  0001be78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be7c  0800be7c  0001be7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800be80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e4  20000080  0800bf00  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000964  0800bf00  00020964  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000195c5  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b2a  00000000  00000000  0003966e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  0003d198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001200  00000000  00000000  0003e540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e5bb  00000000  00000000  0003f740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ac02  00000000  00000000  0005dcfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a56d0  00000000  00000000  000788fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011dfcd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000591c  00000000  00000000  0011e020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000080 	.word	0x20000080
 8000200:	00000000 	.word	0x00000000
 8000204:	0800b044 	.word	0x0800b044

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000084 	.word	0x20000084
 8000220:	0800b044 	.word	0x0800b044

08000224 <__aeabi_frsub>:
 8000224:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000228:	e002      	b.n	8000230 <__addsf3>
 800022a:	bf00      	nop

0800022c <__aeabi_fsub>:
 800022c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000230 <__addsf3>:
 8000230:	0042      	lsls	r2, r0, #1
 8000232:	bf1f      	itttt	ne
 8000234:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000238:	ea92 0f03 	teqne	r2, r3
 800023c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000240:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000244:	d06a      	beq.n	800031c <__addsf3+0xec>
 8000246:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800024a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800024e:	bfc1      	itttt	gt
 8000250:	18d2      	addgt	r2, r2, r3
 8000252:	4041      	eorgt	r1, r0
 8000254:	4048      	eorgt	r0, r1
 8000256:	4041      	eorgt	r1, r0
 8000258:	bfb8      	it	lt
 800025a:	425b      	neglt	r3, r3
 800025c:	2b19      	cmp	r3, #25
 800025e:	bf88      	it	hi
 8000260:	4770      	bxhi	lr
 8000262:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000266:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800026a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800026e:	bf18      	it	ne
 8000270:	4240      	negne	r0, r0
 8000272:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000276:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800027a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800027e:	bf18      	it	ne
 8000280:	4249      	negne	r1, r1
 8000282:	ea92 0f03 	teq	r2, r3
 8000286:	d03f      	beq.n	8000308 <__addsf3+0xd8>
 8000288:	f1a2 0201 	sub.w	r2, r2, #1
 800028c:	fa41 fc03 	asr.w	ip, r1, r3
 8000290:	eb10 000c 	adds.w	r0, r0, ip
 8000294:	f1c3 0320 	rsb	r3, r3, #32
 8000298:	fa01 f103 	lsl.w	r1, r1, r3
 800029c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a0:	d502      	bpl.n	80002a8 <__addsf3+0x78>
 80002a2:	4249      	negs	r1, r1
 80002a4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002a8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002ac:	d313      	bcc.n	80002d6 <__addsf3+0xa6>
 80002ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002b2:	d306      	bcc.n	80002c2 <__addsf3+0x92>
 80002b4:	0840      	lsrs	r0, r0, #1
 80002b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ba:	f102 0201 	add.w	r2, r2, #1
 80002be:	2afe      	cmp	r2, #254	; 0xfe
 80002c0:	d251      	bcs.n	8000366 <__addsf3+0x136>
 80002c2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002ca:	bf08      	it	eq
 80002cc:	f020 0001 	biceq.w	r0, r0, #1
 80002d0:	ea40 0003 	orr.w	r0, r0, r3
 80002d4:	4770      	bx	lr
 80002d6:	0049      	lsls	r1, r1, #1
 80002d8:	eb40 0000 	adc.w	r0, r0, r0
 80002dc:	3a01      	subs	r2, #1
 80002de:	bf28      	it	cs
 80002e0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002e4:	d2ed      	bcs.n	80002c2 <__addsf3+0x92>
 80002e6:	fab0 fc80 	clz	ip, r0
 80002ea:	f1ac 0c08 	sub.w	ip, ip, #8
 80002ee:	ebb2 020c 	subs.w	r2, r2, ip
 80002f2:	fa00 f00c 	lsl.w	r0, r0, ip
 80002f6:	bfaa      	itet	ge
 80002f8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002fc:	4252      	neglt	r2, r2
 80002fe:	4318      	orrge	r0, r3
 8000300:	bfbc      	itt	lt
 8000302:	40d0      	lsrlt	r0, r2
 8000304:	4318      	orrlt	r0, r3
 8000306:	4770      	bx	lr
 8000308:	f092 0f00 	teq	r2, #0
 800030c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000310:	bf06      	itte	eq
 8000312:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000316:	3201      	addeq	r2, #1
 8000318:	3b01      	subne	r3, #1
 800031a:	e7b5      	b.n	8000288 <__addsf3+0x58>
 800031c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000320:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000324:	bf18      	it	ne
 8000326:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800032a:	d021      	beq.n	8000370 <__addsf3+0x140>
 800032c:	ea92 0f03 	teq	r2, r3
 8000330:	d004      	beq.n	800033c <__addsf3+0x10c>
 8000332:	f092 0f00 	teq	r2, #0
 8000336:	bf08      	it	eq
 8000338:	4608      	moveq	r0, r1
 800033a:	4770      	bx	lr
 800033c:	ea90 0f01 	teq	r0, r1
 8000340:	bf1c      	itt	ne
 8000342:	2000      	movne	r0, #0
 8000344:	4770      	bxne	lr
 8000346:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800034a:	d104      	bne.n	8000356 <__addsf3+0x126>
 800034c:	0040      	lsls	r0, r0, #1
 800034e:	bf28      	it	cs
 8000350:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800035a:	bf3c      	itt	cc
 800035c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000360:	4770      	bxcc	lr
 8000362:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000366:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800036a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800036e:	4770      	bx	lr
 8000370:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000374:	bf16      	itet	ne
 8000376:	4608      	movne	r0, r1
 8000378:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800037c:	4601      	movne	r1, r0
 800037e:	0242      	lsls	r2, r0, #9
 8000380:	bf06      	itte	eq
 8000382:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000386:	ea90 0f01 	teqeq	r0, r1
 800038a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800038e:	4770      	bx	lr

08000390 <__aeabi_ui2f>:
 8000390:	f04f 0300 	mov.w	r3, #0
 8000394:	e004      	b.n	80003a0 <__aeabi_i2f+0x8>
 8000396:	bf00      	nop

08000398 <__aeabi_i2f>:
 8000398:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800039c:	bf48      	it	mi
 800039e:	4240      	negmi	r0, r0
 80003a0:	ea5f 0c00 	movs.w	ip, r0
 80003a4:	bf08      	it	eq
 80003a6:	4770      	bxeq	lr
 80003a8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003ac:	4601      	mov	r1, r0
 80003ae:	f04f 0000 	mov.w	r0, #0
 80003b2:	e01c      	b.n	80003ee <__aeabi_l2f+0x2a>

080003b4 <__aeabi_ul2f>:
 80003b4:	ea50 0201 	orrs.w	r2, r0, r1
 80003b8:	bf08      	it	eq
 80003ba:	4770      	bxeq	lr
 80003bc:	f04f 0300 	mov.w	r3, #0
 80003c0:	e00a      	b.n	80003d8 <__aeabi_l2f+0x14>
 80003c2:	bf00      	nop

080003c4 <__aeabi_l2f>:
 80003c4:	ea50 0201 	orrs.w	r2, r0, r1
 80003c8:	bf08      	it	eq
 80003ca:	4770      	bxeq	lr
 80003cc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003d0:	d502      	bpl.n	80003d8 <__aeabi_l2f+0x14>
 80003d2:	4240      	negs	r0, r0
 80003d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003d8:	ea5f 0c01 	movs.w	ip, r1
 80003dc:	bf02      	ittt	eq
 80003de:	4684      	moveq	ip, r0
 80003e0:	4601      	moveq	r1, r0
 80003e2:	2000      	moveq	r0, #0
 80003e4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003e8:	bf08      	it	eq
 80003ea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003ee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003f2:	fabc f28c 	clz	r2, ip
 80003f6:	3a08      	subs	r2, #8
 80003f8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003fc:	db10      	blt.n	8000420 <__aeabi_l2f+0x5c>
 80003fe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000402:	4463      	add	r3, ip
 8000404:	fa00 fc02 	lsl.w	ip, r0, r2
 8000408:	f1c2 0220 	rsb	r2, r2, #32
 800040c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000410:	fa20 f202 	lsr.w	r2, r0, r2
 8000414:	eb43 0002 	adc.w	r0, r3, r2
 8000418:	bf08      	it	eq
 800041a:	f020 0001 	biceq.w	r0, r0, #1
 800041e:	4770      	bx	lr
 8000420:	f102 0220 	add.w	r2, r2, #32
 8000424:	fa01 fc02 	lsl.w	ip, r1, r2
 8000428:	f1c2 0220 	rsb	r2, r2, #32
 800042c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000430:	fa21 f202 	lsr.w	r2, r1, r2
 8000434:	eb43 0002 	adc.w	r0, r3, r2
 8000438:	bf08      	it	eq
 800043a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043e:	4770      	bx	lr

08000440 <__aeabi_fmul>:
 8000440:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000444:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000448:	bf1e      	ittt	ne
 800044a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800044e:	ea92 0f0c 	teqne	r2, ip
 8000452:	ea93 0f0c 	teqne	r3, ip
 8000456:	d06f      	beq.n	8000538 <__aeabi_fmul+0xf8>
 8000458:	441a      	add	r2, r3
 800045a:	ea80 0c01 	eor.w	ip, r0, r1
 800045e:	0240      	lsls	r0, r0, #9
 8000460:	bf18      	it	ne
 8000462:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000466:	d01e      	beq.n	80004a6 <__aeabi_fmul+0x66>
 8000468:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800046c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000470:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000474:	fba0 3101 	umull	r3, r1, r0, r1
 8000478:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800047c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000480:	bf3e      	ittt	cc
 8000482:	0049      	lslcc	r1, r1, #1
 8000484:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000488:	005b      	lslcc	r3, r3, #1
 800048a:	ea40 0001 	orr.w	r0, r0, r1
 800048e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000492:	2afd      	cmp	r2, #253	; 0xfd
 8000494:	d81d      	bhi.n	80004d2 <__aeabi_fmul+0x92>
 8000496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800049a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800049e:	bf08      	it	eq
 80004a0:	f020 0001 	biceq.w	r0, r0, #1
 80004a4:	4770      	bx	lr
 80004a6:	f090 0f00 	teq	r0, #0
 80004aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004ae:	bf08      	it	eq
 80004b0:	0249      	lsleq	r1, r1, #9
 80004b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004ba:	3a7f      	subs	r2, #127	; 0x7f
 80004bc:	bfc2      	ittt	gt
 80004be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004c6:	4770      	bxgt	lr
 80004c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004cc:	f04f 0300 	mov.w	r3, #0
 80004d0:	3a01      	subs	r2, #1
 80004d2:	dc5d      	bgt.n	8000590 <__aeabi_fmul+0x150>
 80004d4:	f112 0f19 	cmn.w	r2, #25
 80004d8:	bfdc      	itt	le
 80004da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004de:	4770      	bxle	lr
 80004e0:	f1c2 0200 	rsb	r2, r2, #0
 80004e4:	0041      	lsls	r1, r0, #1
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	f1c2 0220 	rsb	r2, r2, #32
 80004ee:	fa00 fc02 	lsl.w	ip, r0, r2
 80004f2:	ea5f 0031 	movs.w	r0, r1, rrx
 80004f6:	f140 0000 	adc.w	r0, r0, #0
 80004fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004fe:	bf08      	it	eq
 8000500:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000504:	4770      	bx	lr
 8000506:	f092 0f00 	teq	r2, #0
 800050a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800050e:	bf02      	ittt	eq
 8000510:	0040      	lsleq	r0, r0, #1
 8000512:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000516:	3a01      	subeq	r2, #1
 8000518:	d0f9      	beq.n	800050e <__aeabi_fmul+0xce>
 800051a:	ea40 000c 	orr.w	r0, r0, ip
 800051e:	f093 0f00 	teq	r3, #0
 8000522:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000526:	bf02      	ittt	eq
 8000528:	0049      	lsleq	r1, r1, #1
 800052a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800052e:	3b01      	subeq	r3, #1
 8000530:	d0f9      	beq.n	8000526 <__aeabi_fmul+0xe6>
 8000532:	ea41 010c 	orr.w	r1, r1, ip
 8000536:	e78f      	b.n	8000458 <__aeabi_fmul+0x18>
 8000538:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800053c:	ea92 0f0c 	teq	r2, ip
 8000540:	bf18      	it	ne
 8000542:	ea93 0f0c 	teqne	r3, ip
 8000546:	d00a      	beq.n	800055e <__aeabi_fmul+0x11e>
 8000548:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800054c:	bf18      	it	ne
 800054e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000552:	d1d8      	bne.n	8000506 <__aeabi_fmul+0xc6>
 8000554:	ea80 0001 	eor.w	r0, r0, r1
 8000558:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800055c:	4770      	bx	lr
 800055e:	f090 0f00 	teq	r0, #0
 8000562:	bf17      	itett	ne
 8000564:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000568:	4608      	moveq	r0, r1
 800056a:	f091 0f00 	teqne	r1, #0
 800056e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000572:	d014      	beq.n	800059e <__aeabi_fmul+0x15e>
 8000574:	ea92 0f0c 	teq	r2, ip
 8000578:	d101      	bne.n	800057e <__aeabi_fmul+0x13e>
 800057a:	0242      	lsls	r2, r0, #9
 800057c:	d10f      	bne.n	800059e <__aeabi_fmul+0x15e>
 800057e:	ea93 0f0c 	teq	r3, ip
 8000582:	d103      	bne.n	800058c <__aeabi_fmul+0x14c>
 8000584:	024b      	lsls	r3, r1, #9
 8000586:	bf18      	it	ne
 8000588:	4608      	movne	r0, r1
 800058a:	d108      	bne.n	800059e <__aeabi_fmul+0x15e>
 800058c:	ea80 0001 	eor.w	r0, r0, r1
 8000590:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000594:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000598:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800059c:	4770      	bx	lr
 800059e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005a2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005a6:	4770      	bx	lr

080005a8 <__aeabi_fdiv>:
 80005a8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005b0:	bf1e      	ittt	ne
 80005b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005b6:	ea92 0f0c 	teqne	r2, ip
 80005ba:	ea93 0f0c 	teqne	r3, ip
 80005be:	d069      	beq.n	8000694 <__aeabi_fdiv+0xec>
 80005c0:	eba2 0203 	sub.w	r2, r2, r3
 80005c4:	ea80 0c01 	eor.w	ip, r0, r1
 80005c8:	0249      	lsls	r1, r1, #9
 80005ca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005ce:	d037      	beq.n	8000640 <__aeabi_fdiv+0x98>
 80005d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005d4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005d8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005e0:	428b      	cmp	r3, r1
 80005e2:	bf38      	it	cc
 80005e4:	005b      	lslcc	r3, r3, #1
 80005e6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005ea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80005ee:	428b      	cmp	r3, r1
 80005f0:	bf24      	itt	cs
 80005f2:	1a5b      	subcs	r3, r3, r1
 80005f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80005f8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005fc:	bf24      	itt	cs
 80005fe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000602:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000606:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800060a:	bf24      	itt	cs
 800060c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000610:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000614:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000618:	bf24      	itt	cs
 800061a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800061e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000622:	011b      	lsls	r3, r3, #4
 8000624:	bf18      	it	ne
 8000626:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800062a:	d1e0      	bne.n	80005ee <__aeabi_fdiv+0x46>
 800062c:	2afd      	cmp	r2, #253	; 0xfd
 800062e:	f63f af50 	bhi.w	80004d2 <__aeabi_fmul+0x92>
 8000632:	428b      	cmp	r3, r1
 8000634:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000638:	bf08      	it	eq
 800063a:	f020 0001 	biceq.w	r0, r0, #1
 800063e:	4770      	bx	lr
 8000640:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000644:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000648:	327f      	adds	r2, #127	; 0x7f
 800064a:	bfc2      	ittt	gt
 800064c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000650:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000654:	4770      	bxgt	lr
 8000656:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800065a:	f04f 0300 	mov.w	r3, #0
 800065e:	3a01      	subs	r2, #1
 8000660:	e737      	b.n	80004d2 <__aeabi_fmul+0x92>
 8000662:	f092 0f00 	teq	r2, #0
 8000666:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800066a:	bf02      	ittt	eq
 800066c:	0040      	lsleq	r0, r0, #1
 800066e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000672:	3a01      	subeq	r2, #1
 8000674:	d0f9      	beq.n	800066a <__aeabi_fdiv+0xc2>
 8000676:	ea40 000c 	orr.w	r0, r0, ip
 800067a:	f093 0f00 	teq	r3, #0
 800067e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000682:	bf02      	ittt	eq
 8000684:	0049      	lsleq	r1, r1, #1
 8000686:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800068a:	3b01      	subeq	r3, #1
 800068c:	d0f9      	beq.n	8000682 <__aeabi_fdiv+0xda>
 800068e:	ea41 010c 	orr.w	r1, r1, ip
 8000692:	e795      	b.n	80005c0 <__aeabi_fdiv+0x18>
 8000694:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000698:	ea92 0f0c 	teq	r2, ip
 800069c:	d108      	bne.n	80006b0 <__aeabi_fdiv+0x108>
 800069e:	0242      	lsls	r2, r0, #9
 80006a0:	f47f af7d 	bne.w	800059e <__aeabi_fmul+0x15e>
 80006a4:	ea93 0f0c 	teq	r3, ip
 80006a8:	f47f af70 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006ac:	4608      	mov	r0, r1
 80006ae:	e776      	b.n	800059e <__aeabi_fmul+0x15e>
 80006b0:	ea93 0f0c 	teq	r3, ip
 80006b4:	d104      	bne.n	80006c0 <__aeabi_fdiv+0x118>
 80006b6:	024b      	lsls	r3, r1, #9
 80006b8:	f43f af4c 	beq.w	8000554 <__aeabi_fmul+0x114>
 80006bc:	4608      	mov	r0, r1
 80006be:	e76e      	b.n	800059e <__aeabi_fmul+0x15e>
 80006c0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006c4:	bf18      	it	ne
 80006c6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006ca:	d1ca      	bne.n	8000662 <__aeabi_fdiv+0xba>
 80006cc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80006d0:	f47f af5c 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006d4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80006d8:	f47f af3c 	bne.w	8000554 <__aeabi_fmul+0x114>
 80006dc:	e75f      	b.n	800059e <__aeabi_fmul+0x15e>
 80006de:	bf00      	nop

080006e0 <__gesf2>:
 80006e0:	f04f 3cff 	mov.w	ip, #4294967295
 80006e4:	e006      	b.n	80006f4 <__cmpsf2+0x4>
 80006e6:	bf00      	nop

080006e8 <__lesf2>:
 80006e8:	f04f 0c01 	mov.w	ip, #1
 80006ec:	e002      	b.n	80006f4 <__cmpsf2+0x4>
 80006ee:	bf00      	nop

080006f0 <__cmpsf2>:
 80006f0:	f04f 0c01 	mov.w	ip, #1
 80006f4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80006f8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006fc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000700:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000704:	bf18      	it	ne
 8000706:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800070a:	d011      	beq.n	8000730 <__cmpsf2+0x40>
 800070c:	b001      	add	sp, #4
 800070e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000712:	bf18      	it	ne
 8000714:	ea90 0f01 	teqne	r0, r1
 8000718:	bf58      	it	pl
 800071a:	ebb2 0003 	subspl.w	r0, r2, r3
 800071e:	bf88      	it	hi
 8000720:	17c8      	asrhi	r0, r1, #31
 8000722:	bf38      	it	cc
 8000724:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000728:	bf18      	it	ne
 800072a:	f040 0001 	orrne.w	r0, r0, #1
 800072e:	4770      	bx	lr
 8000730:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000734:	d102      	bne.n	800073c <__cmpsf2+0x4c>
 8000736:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800073a:	d105      	bne.n	8000748 <__cmpsf2+0x58>
 800073c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000740:	d1e4      	bne.n	800070c <__cmpsf2+0x1c>
 8000742:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000746:	d0e1      	beq.n	800070c <__cmpsf2+0x1c>
 8000748:	f85d 0b04 	ldr.w	r0, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop

08000750 <__aeabi_cfrcmple>:
 8000750:	4684      	mov	ip, r0
 8000752:	4608      	mov	r0, r1
 8000754:	4661      	mov	r1, ip
 8000756:	e7ff      	b.n	8000758 <__aeabi_cfcmpeq>

08000758 <__aeabi_cfcmpeq>:
 8000758:	b50f      	push	{r0, r1, r2, r3, lr}
 800075a:	f7ff ffc9 	bl	80006f0 <__cmpsf2>
 800075e:	2800      	cmp	r0, #0
 8000760:	bf48      	it	mi
 8000762:	f110 0f00 	cmnmi.w	r0, #0
 8000766:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000768 <__aeabi_fcmpeq>:
 8000768:	f84d ed08 	str.w	lr, [sp, #-8]!
 800076c:	f7ff fff4 	bl	8000758 <__aeabi_cfcmpeq>
 8000770:	bf0c      	ite	eq
 8000772:	2001      	moveq	r0, #1
 8000774:	2000      	movne	r0, #0
 8000776:	f85d fb08 	ldr.w	pc, [sp], #8
 800077a:	bf00      	nop

0800077c <__aeabi_fcmplt>:
 800077c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000780:	f7ff ffea 	bl	8000758 <__aeabi_cfcmpeq>
 8000784:	bf34      	ite	cc
 8000786:	2001      	movcc	r0, #1
 8000788:	2000      	movcs	r0, #0
 800078a:	f85d fb08 	ldr.w	pc, [sp], #8
 800078e:	bf00      	nop

08000790 <__aeabi_fcmple>:
 8000790:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000794:	f7ff ffe0 	bl	8000758 <__aeabi_cfcmpeq>
 8000798:	bf94      	ite	ls
 800079a:	2001      	movls	r0, #1
 800079c:	2000      	movhi	r0, #0
 800079e:	f85d fb08 	ldr.w	pc, [sp], #8
 80007a2:	bf00      	nop

080007a4 <__aeabi_fcmpge>:
 80007a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007a8:	f7ff ffd2 	bl	8000750 <__aeabi_cfrcmple>
 80007ac:	bf94      	ite	ls
 80007ae:	2001      	movls	r0, #1
 80007b0:	2000      	movhi	r0, #0
 80007b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80007b6:	bf00      	nop

080007b8 <__aeabi_fcmpgt>:
 80007b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007bc:	f7ff ffc8 	bl	8000750 <__aeabi_cfrcmple>
 80007c0:	bf34      	ite	cc
 80007c2:	2001      	movcc	r0, #1
 80007c4:	2000      	movcs	r0, #0
 80007c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ca:	bf00      	nop

080007cc <__aeabi_f2iz>:
 80007cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80007d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80007d4:	d30f      	bcc.n	80007f6 <__aeabi_f2iz+0x2a>
 80007d6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80007da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80007de:	d90d      	bls.n	80007fc <__aeabi_f2iz+0x30>
 80007e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80007e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007e8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007ec:	fa23 f002 	lsr.w	r0, r3, r2
 80007f0:	bf18      	it	ne
 80007f2:	4240      	negne	r0, r0
 80007f4:	4770      	bx	lr
 80007f6:	f04f 0000 	mov.w	r0, #0
 80007fa:	4770      	bx	lr
 80007fc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000800:	d101      	bne.n	8000806 <__aeabi_f2iz+0x3a>
 8000802:	0242      	lsls	r2, r0, #9
 8000804:	d105      	bne.n	8000812 <__aeabi_f2iz+0x46>
 8000806:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800080a:	bf08      	it	eq
 800080c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000810:	4770      	bx	lr
 8000812:	f04f 0000 	mov.w	r0, #0
 8000816:	4770      	bx	lr

08000818 <__aeabi_f2uiz>:
 8000818:	0042      	lsls	r2, r0, #1
 800081a:	d20e      	bcs.n	800083a <__aeabi_f2uiz+0x22>
 800081c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000820:	d30b      	bcc.n	800083a <__aeabi_f2uiz+0x22>
 8000822:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000826:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800082a:	d409      	bmi.n	8000840 <__aeabi_f2uiz+0x28>
 800082c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000830:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000834:	fa23 f002 	lsr.w	r0, r3, r2
 8000838:	4770      	bx	lr
 800083a:	f04f 0000 	mov.w	r0, #0
 800083e:	4770      	bx	lr
 8000840:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000844:	d101      	bne.n	800084a <__aeabi_f2uiz+0x32>
 8000846:	0242      	lsls	r2, r0, #9
 8000848:	d102      	bne.n	8000850 <__aeabi_f2uiz+0x38>
 800084a:	f04f 30ff 	mov.w	r0, #4294967295
 800084e:	4770      	bx	lr
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop

08000858 <MAIN_displayRcfwBanner>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void MAIN_displayRcfwBanner(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* Used ASCII art generator from https://patorjk.com with font called "Colossal" */
  LOG_info("");
 800085c:	4914      	ldr	r1, [pc, #80]	; (80008b0 <MAIN_displayRcfwBanner+0x58>)
 800085e:	2001      	movs	r0, #1
 8000860:	f009 f8fe 	bl	8009a60 <LOG_log>
  LOG_info("    8888888b.        .d8888b.       8888888888      888       888"  );
 8000864:	4913      	ldr	r1, [pc, #76]	; (80008b4 <MAIN_displayRcfwBanner+0x5c>)
 8000866:	2001      	movs	r0, #1
 8000868:	f009 f8fa 	bl	8009a60 <LOG_log>
  LOG_info("    888   Y88b      d88P  Y88b      888             888   o   888"  );
 800086c:	4912      	ldr	r1, [pc, #72]	; (80008b8 <MAIN_displayRcfwBanner+0x60>)
 800086e:	2001      	movs	r0, #1
 8000870:	f009 f8f6 	bl	8009a60 <LOG_log>
  LOG_info("    888    888      888    888      888             888  d8b  888"  );
 8000874:	4911      	ldr	r1, [pc, #68]	; (80008bc <MAIN_displayRcfwBanner+0x64>)
 8000876:	2001      	movs	r0, #1
 8000878:	f009 f8f2 	bl	8009a60 <LOG_log>
  LOG_info("    888   d88P      888             8888888         888 d888b 888"  );
 800087c:	4910      	ldr	r1, [pc, #64]	; (80008c0 <MAIN_displayRcfwBanner+0x68>)
 800087e:	2001      	movs	r0, #1
 8000880:	f009 f8ee 	bl	8009a60 <LOG_log>
  LOG_info("    8888888P\"       888             888             888d88888b888" );
 8000884:	490f      	ldr	r1, [pc, #60]	; (80008c4 <MAIN_displayRcfwBanner+0x6c>)
 8000886:	2001      	movs	r0, #1
 8000888:	f009 f8ea 	bl	8009a60 <LOG_log>
  LOG_info("    888 T88b        888    888      888             88888P Y88888"  );
 800088c:	490e      	ldr	r1, [pc, #56]	; (80008c8 <MAIN_displayRcfwBanner+0x70>)
 800088e:	2001      	movs	r0, #1
 8000890:	f009 f8e6 	bl	8009a60 <LOG_log>
  LOG_info("    888  T88b       Y88b  d88P      888             8888P   Y8888"  );
 8000894:	490d      	ldr	r1, [pc, #52]	; (80008cc <MAIN_displayRcfwBanner+0x74>)
 8000896:	2001      	movs	r0, #1
 8000898:	f009 f8e2 	bl	8009a60 <LOG_log>
  LOG_info("    888   T88b       \"Y8888P\"       888             888P     Y888");
 800089c:	490c      	ldr	r1, [pc, #48]	; (80008d0 <MAIN_displayRcfwBanner+0x78>)
 800089e:	2001      	movs	r0, #1
 80008a0:	f009 f8de 	bl	8009a60 <LOG_log>
  LOG_info("");
 80008a4:	4902      	ldr	r1, [pc, #8]	; (80008b0 <MAIN_displayRcfwBanner+0x58>)
 80008a6:	2001      	movs	r0, #1
 80008a8:	f009 f8da 	bl	8009a60 <LOG_log>

  return;
 80008ac:	bf00      	nop
}
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	0800b05c 	.word	0x0800b05c
 80008b4:	0800b060 	.word	0x0800b060
 80008b8:	0800b0a4 	.word	0x0800b0a4
 80008bc:	0800b0e8 	.word	0x0800b0e8
 80008c0:	0800b12c 	.word	0x0800b12c
 80008c4:	0800b170 	.word	0x0800b170
 80008c8:	0800b1b4 	.word	0x0800b1b4
 80008cc:	0800b1f8 	.word	0x0800b1f8
 80008d0:	0800b23c 	.word	0x0800b23c

080008d4 <MAIN_updateLogLevel>:

static void MAIN_updateLogLevel(T_BLU_Data *p_data)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef l_time;
  RTC_DateTypeDef l_date;

  /* As this method is using for logging/debug, we will not deal with failure cases */
  (void)HAL_RTC_GetTime(&hrtc, &l_time, RTC_FORMAT_BCD);
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	2201      	movs	r2, #1
 80008e2:	4619      	mov	r1, r3
 80008e4:	4839      	ldr	r0, [pc, #228]	; (80009cc <MAIN_updateLogLevel+0xf8>)
 80008e6:	f004 f8dd 	bl	8004aa4 <HAL_RTC_GetTime>
  (void)HAL_RTC_GetDate(&hrtc, &l_date, RTC_FORMAT_BCD);
 80008ea:	f107 0308 	add.w	r3, r7, #8
 80008ee:	2201      	movs	r2, #1
 80008f0:	4619      	mov	r1, r3
 80008f2:	4836      	ldr	r0, [pc, #216]	; (80009cc <MAIN_updateLogLevel+0xf8>)
 80008f4:	f004 fada 	bl	8004eac <HAL_RTC_GetDate>

  switch (p_data->button)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	7c1b      	ldrb	r3, [r3, #16]
 80008fc:	3b05      	subs	r3, #5
 80008fe:	2b03      	cmp	r3, #3
 8000900:	d84c      	bhi.n	800099c <MAIN_updateLogLevel+0xc8>
 8000902:	a201      	add	r2, pc, #4	; (adr r2, 8000908 <MAIN_updateLogLevel+0x34>)
 8000904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000908:	08000919 	.word	0x08000919
 800090c:	08000997 	.word	0x08000997
 8000910:	08000955 	.word	0x08000955
 8000914:	08000991 	.word	0x08000991
  {
    case BLU_BUTTON_PAD_UP:
      if (g_MAIN_padUpPressedStartTime == 0)
 8000918:	4b2d      	ldr	r3, [pc, #180]	; (80009d0 <MAIN_updateLogLevel+0xfc>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d10a      	bne.n	8000936 <MAIN_updateLogLevel+0x62>
      {
        g_MAIN_padUpPressedStartTime = UTI_turnRtcTimeToSeconds(&l_time);
 8000920:	f107 030c 	add.w	r3, r7, #12
 8000924:	4618      	mov	r0, r3
 8000926:	f009 fb2a 	bl	8009f7e <UTI_turnRtcTimeToSeconds>
 800092a:	4603      	mov	r3, r0
 800092c:	4a28      	ldr	r2, [pc, #160]	; (80009d0 <MAIN_updateLogLevel+0xfc>)
 800092e:	6013      	str	r3, [r2, #0]

        LOG_increaseLevel();
 8000930:	f009 f866 	bl	8009a00 <LOG_increaseLevel>
      }
      else
      {
        g_MAIN_padUpPressedStartTime = 0;
      }
      break;
 8000934:	e034      	b.n	80009a0 <MAIN_updateLogLevel+0xcc>
      else if (UTI_turnRtcTimeToSeconds(&l_time) - g_MAIN_padUpPressedStartTime < MAIN_PAD_BUTTON_PERIOD_IN_S)
 8000936:	f107 030c 	add.w	r3, r7, #12
 800093a:	4618      	mov	r0, r3
 800093c:	f009 fb1f 	bl	8009f7e <UTI_turnRtcTimeToSeconds>
 8000940:	4602      	mov	r2, r0
 8000942:	4b23      	ldr	r3, [pc, #140]	; (80009d0 <MAIN_updateLogLevel+0xfc>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	1ad3      	subs	r3, r2, r3
 8000948:	2b01      	cmp	r3, #1
 800094a:	d929      	bls.n	80009a0 <MAIN_updateLogLevel+0xcc>
        g_MAIN_padUpPressedStartTime = 0;
 800094c:	4b20      	ldr	r3, [pc, #128]	; (80009d0 <MAIN_updateLogLevel+0xfc>)
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
      break;
 8000952:	e025      	b.n	80009a0 <MAIN_updateLogLevel+0xcc>

    case BLU_BUTTON_PAD_DOWN:
      if (g_MAIN_padDownPressedStartTime == 0)
 8000954:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <MAIN_updateLogLevel+0x100>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d10a      	bne.n	8000972 <MAIN_updateLogLevel+0x9e>
      {
        g_MAIN_padDownPressedStartTime = UTI_turnRtcTimeToSeconds(&l_time);
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	4618      	mov	r0, r3
 8000962:	f009 fb0c 	bl	8009f7e <UTI_turnRtcTimeToSeconds>
 8000966:	4603      	mov	r3, r0
 8000968:	4a1a      	ldr	r2, [pc, #104]	; (80009d4 <MAIN_updateLogLevel+0x100>)
 800096a:	6013      	str	r3, [r2, #0]

        LOG_decreaseLevel();
 800096c:	f009 f860 	bl	8009a30 <LOG_decreaseLevel>
      }
      else
      {
        g_MAIN_padDownPressedStartTime = 0;
      }
      break;
 8000970:	e018      	b.n	80009a4 <MAIN_updateLogLevel+0xd0>
      else if (UTI_turnRtcTimeToSeconds(&l_time) - g_MAIN_padDownPressedStartTime < MAIN_PAD_BUTTON_PERIOD_IN_S)
 8000972:	f107 030c 	add.w	r3, r7, #12
 8000976:	4618      	mov	r0, r3
 8000978:	f009 fb01 	bl	8009f7e <UTI_turnRtcTimeToSeconds>
 800097c:	4602      	mov	r2, r0
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <MAIN_updateLogLevel+0x100>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	2b01      	cmp	r3, #1
 8000986:	d90d      	bls.n	80009a4 <MAIN_updateLogLevel+0xd0>
        g_MAIN_padDownPressedStartTime = 0;
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <MAIN_updateLogLevel+0x100>)
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
      break;
 800098e:	e009      	b.n	80009a4 <MAIN_updateLogLevel+0xd0>

    case BLU_BUTTON_PAD_LEFT:
      LOG_turnOff();
 8000990:	f009 f812 	bl	80099b8 <LOG_turnOff>
      break;
 8000994:	e007      	b.n	80009a6 <MAIN_updateLogLevel+0xd2>

    case BLU_BUTTON_PAD_RIGHT:
      LOG_turnOn();
 8000996:	f008 fff7 	bl	8009988 <LOG_turnOn>
      break;
 800099a:	e004      	b.n	80009a6 <MAIN_updateLogLevel+0xd2>

    default:
      ; /* Nothing to do */;
      break;
 800099c:	bf00      	nop
 800099e:	e002      	b.n	80009a6 <MAIN_updateLogLevel+0xd2>
      break;
 80009a0:	bf00      	nop
 80009a2:	e000      	b.n	80009a6 <MAIN_updateLogLevel+0xd2>
      break;
 80009a4:	bf00      	nop
  }

  if ((p_data->button != BLU_BUTTON_PAD_UP) && (p_data->button != BLU_BUTTON_PAD_DOWN))
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	7c1b      	ldrb	r3, [r3, #16]
 80009aa:	2b05      	cmp	r3, #5
 80009ac:	d00a      	beq.n	80009c4 <MAIN_updateLogLevel+0xf0>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	7c1b      	ldrb	r3, [r3, #16]
 80009b2:	2b07      	cmp	r3, #7
 80009b4:	d006      	beq.n	80009c4 <MAIN_updateLogLevel+0xf0>
  {
    g_MAIN_padUpPressedStartTime   = 0;
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MAIN_updateLogLevel+0xfc>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
    g_MAIN_padDownPressedStartTime = 0;
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <MAIN_updateLogLevel+0x100>)
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */;
  }

  return;
 80009c2:	bf00      	nop
 80009c4:	bf00      	nop
}
 80009c6:	3710      	adds	r7, #16
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200005f8 	.word	0x200005f8
 80009d0:	2000009c 	.word	0x2000009c
 80009d4:	200000a0 	.word	0x200000a0

080009d8 <MAIN_updateLedMode>:

static void MAIN_updateLedMode(T_DRV_MODE p_driveMode, uint32_t p_voltageInMv)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	6039      	str	r1, [r7, #0]
 80009e2:	71fb      	strb	r3, [r7, #7]
  /* Regarding LED mode, battery check is prioritary on user requests. */
  /* Ignore 0 value as we could get it at startup or while debugging.  */
  if ((p_voltageInMv != 0) && (p_voltageInMv < MAIN_MIN_BATTERY_LEVEL_IN_MV))
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d00d      	beq.n	8000a06 <MAIN_updateLedMode+0x2e>
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	f242 720f 	movw	r2, #9999	; 0x270f
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d808      	bhi.n	8000a06 <MAIN_updateLedMode+0x2e>
  {
    LOG_warning("Battery is getting low: %u mV", p_voltageInMv);
 80009f4:	683a      	ldr	r2, [r7, #0]
 80009f6:	4911      	ldr	r1, [pc, #68]	; (8000a3c <MAIN_updateLedMode+0x64>)
 80009f8:	2002      	movs	r0, #2
 80009fa:	f009 f831 	bl	8009a60 <LOG_log>

    LED_setMode(LED_MODE_FORCED_OFF);
 80009fe:	2000      	movs	r0, #0
 8000a00:	f008 ff0c 	bl	800981c <LED_setMode>
 8000a04:	e016      	b.n	8000a34 <MAIN_updateLedMode+0x5c>
  }
  else
  {
    switch (p_driveMode)
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	d00e      	beq.n	8000a2a <MAIN_updateLedMode+0x52>
 8000a0c:	2b02      	cmp	r3, #2
 8000a0e:	dc10      	bgt.n	8000a32 <MAIN_updateLedMode+0x5a>
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d002      	beq.n	8000a1a <MAIN_updateLedMode+0x42>
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d004      	beq.n	8000a22 <MAIN_updateLedMode+0x4a>
        LED_setMode(LED_MODE_BLINK_FAST);
        break;

      default:
        ; /* Nothing to do */
        break;
 8000a18:	e00b      	b.n	8000a32 <MAIN_updateLedMode+0x5a>
        LED_setMode(LED_MODE_BLINK_SLOW);
 8000a1a:	2002      	movs	r0, #2
 8000a1c:	f008 fefe 	bl	800981c <LED_setMode>
        break;
 8000a20:	e008      	b.n	8000a34 <MAIN_updateLedMode+0x5c>
        LED_setMode(LED_MODE_BLINK_MEDIUM);
 8000a22:	2003      	movs	r0, #3
 8000a24:	f008 fefa 	bl	800981c <LED_setMode>
        break;
 8000a28:	e004      	b.n	8000a34 <MAIN_updateLedMode+0x5c>
        LED_setMode(LED_MODE_BLINK_FAST);
 8000a2a:	2004      	movs	r0, #4
 8000a2c:	f008 fef6 	bl	800981c <LED_setMode>
        break;
 8000a30:	e000      	b.n	8000a34 <MAIN_updateLedMode+0x5c>
        break;
 8000a32:	bf00      	nop
    }
  }

  return;
 8000a34:	bf00      	nop
}
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	0800b280 	.word	0x0800b280

08000a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	; 0x28
 8000a44:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a46:	f001 fabd 	bl	8001fc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a4a:	f000 f957 	bl	8000cfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4e:	f000 fd59 	bl	8001504 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000a52:	f000 fa33 	bl	8000ebc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000a56:	f000 fd01 	bl	800145c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a5a:	f000 fd29 	bl	80014b0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000a5e:	f000 f9a5 	bl	8000dac <MX_ADC1_Init>
  MX_TIM8_Init();
 8000a62:	f000 fc37 	bl	80012d4 <MX_TIM8_Init>
  MX_RTC_Init();
 8000a66:	f000 f9df 	bl	8000e28 <MX_RTC_Init>
  MX_TIM7_Init();
 8000a6a:	f000 fbfd 	bl	8001268 <MX_TIM7_Init>
  MX_TIM2_Init();
 8000a6e:	f000 fa75 	bl	8000f5c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a72:	f000 fac7 	bl	8001004 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a76:	f000 fb19 	bl	80010ac <MX_TIM4_Init>
  MX_TIM5_Init();
 8000a7a:	f000 fb6b 	bl	8001154 <MX_TIM5_Init>
  MX_TIM6_Init();
 8000a7e:	f000 fbbd 	bl	80011fc <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* Setup global variables */
  g_MAIN_padUpPressedStartTime   = 0;
 8000a82:	4b84      	ldr	r3, [pc, #528]	; (8000c94 <main+0x254>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
  g_MAIN_padDownPressedStartTime = 0;
 8000a88:	4b83      	ldr	r3, [pc, #524]	; (8000c98 <main+0x258>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]

  /* Setup console */
  CON_init(&huart1);
 8000a8e:	4883      	ldr	r0, [pc, #524]	; (8000c9c <main+0x25c>)
 8000a90:	f008 f8a2 	bl	8008bd8 <CON_init>

  /* Setup and start using logs */
  LOG_init    (&hrtc          );
 8000a94:	4882      	ldr	r0, [pc, #520]	; (8000ca0 <main+0x260>)
 8000a96:	f008 ff69 	bl	800996c <LOG_init>
  LOG_setLevel(LOG_LEVEL_INFO);
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f008 ffa0 	bl	80099e0 <LOG_setLevel>
  LOG_turnOn  (               );
 8000aa0:	f008 ff72 	bl	8009988 <LOG_turnOn>
  LOG_info    ("Starting RCFW");
 8000aa4:	497f      	ldr	r1, [pc, #508]	; (8000ca4 <main+0x264>)
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f008 ffda 	bl	8009a60 <LOG_log>

  /* Display RCFW banner */
  MAIN_displayRcfwBanner();
 8000aac:	f7ff fed4 	bl	8000858 <MAIN_displayRcfwBanner>

  /* Initialize Timer 6 */
  l_halReturnCode = HAL_TIM_Base_Start(&htim6);
 8000ab0:	487d      	ldr	r0, [pc, #500]	; (8000ca8 <main+0x268>)
 8000ab2:	f004 fdd1 	bl	8005658 <HAL_TIM_Base_Start>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	777b      	strb	r3, [r7, #29]

  if (l_halReturnCode != HAL_OK)
 8000aba:	7f7b      	ldrb	r3, [r7, #29]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d006      	beq.n	8000ace <main+0x8e>
  {
    LOG_error("HAL_TIM_Base_Start(&htim6) returned an error code: %d", l_halReturnCode);
 8000ac0:	7f7b      	ldrb	r3, [r7, #29]
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	4979      	ldr	r1, [pc, #484]	; (8000cac <main+0x26c>)
 8000ac6:	2003      	movs	r0, #3
 8000ac8:	f008 ffca 	bl	8009a60 <LOG_log>
 8000acc:	e003      	b.n	8000ad6 <main+0x96>
  }
  else
  {
    LOG_info("Started TIMER 6 (time measurement)");
 8000ace:	4978      	ldr	r1, [pc, #480]	; (8000cb0 <main+0x270>)
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f008 ffc5 	bl	8009a60 <LOG_log>
  }

  /* Initialize Timer 7 and delay function in utilities */
  UTI_init(&htim7);
 8000ad6:	4877      	ldr	r0, [pc, #476]	; (8000cb4 <main+0x274>)
 8000ad8:	f009 f9fc 	bl	8009ed4 <UTI_init>

  l_halReturnCode = HAL_TIM_Base_Start_IT(&htim7);
 8000adc:	4875      	ldr	r0, [pc, #468]	; (8000cb4 <main+0x274>)
 8000ade:	f004 fe45 	bl	800576c <HAL_TIM_Base_Start_IT>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	777b      	strb	r3, [r7, #29]

  if (l_halReturnCode != HAL_OK)
 8000ae6:	7f7b      	ldrb	r3, [r7, #29]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d006      	beq.n	8000afa <main+0xba>
  {
    LOG_error("HAL_TIM_Base_Start_IT(&htim7) returned an error code: %d", l_halReturnCode);
 8000aec:	7f7b      	ldrb	r3, [r7, #29]
 8000aee:	461a      	mov	r2, r3
 8000af0:	4971      	ldr	r1, [pc, #452]	; (8000cb8 <main+0x278>)
 8000af2:	2003      	movs	r0, #3
 8000af4:	f008 ffb4 	bl	8009a60 <LOG_log>
 8000af8:	e003      	b.n	8000b02 <main+0xc2>
  }
  else
  {
    LOG_info("Started TIMER 7 (utilities/delay)");
 8000afa:	4970      	ldr	r1, [pc, #448]	; (8000cbc <main+0x27c>)
 8000afc:	2001      	movs	r0, #1
 8000afe:	f008 ffaf 	bl	8009a60 <LOG_log>
  }

  /* Initialize Timer 1 & green LED */
  LED_setMode(LED_MODE_BLINK_FAST);
 8000b02:	2004      	movs	r0, #4
 8000b04:	f008 fe8a 	bl	800981c <LED_setMode>

  l_halReturnCode = HAL_TIM_Base_Start_IT(&htim1);
 8000b08:	486d      	ldr	r0, [pc, #436]	; (8000cc0 <main+0x280>)
 8000b0a:	f004 fe2f 	bl	800576c <HAL_TIM_Base_Start_IT>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	777b      	strb	r3, [r7, #29]

  if (l_halReturnCode != HAL_OK)
 8000b12:	7f7b      	ldrb	r3, [r7, #29]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d006      	beq.n	8000b26 <main+0xe6>
  {
    LOG_error("HAL_TIM_Base_Start_IT(&htim1) returned an error code: %d", l_halReturnCode);
 8000b18:	7f7b      	ldrb	r3, [r7, #29]
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	4969      	ldr	r1, [pc, #420]	; (8000cc4 <main+0x284>)
 8000b1e:	2003      	movs	r0, #3
 8000b20:	f008 ff9e 	bl	8009a60 <LOG_log>
 8000b24:	e003      	b.n	8000b2e <main+0xee>
  }
  else
  {
    LOG_info("Started TIMER 1 (green LED)");
 8000b26:	4968      	ldr	r1, [pc, #416]	; (8000cc8 <main+0x288>)
 8000b28:	2001      	movs	r0, #1
 8000b2a:	f008 ff99 	bl	8009a60 <LOG_log>
  }

  /* Initialize Timers 2, 3, 4 & 5 */
  l_halReturnCode  = HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000b2e:	213c      	movs	r1, #60	; 0x3c
 8000b30:	4866      	ldr	r0, [pc, #408]	; (8000ccc <main+0x28c>)
 8000b32:	f005 fa53 	bl	8005fdc <HAL_TIM_Encoder_Start_IT>
 8000b36:	4603      	mov	r3, r0
 8000b38:	777b      	strb	r3, [r7, #29]
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000b3a:	213c      	movs	r1, #60	; 0x3c
 8000b3c:	4864      	ldr	r0, [pc, #400]	; (8000cd0 <main+0x290>)
 8000b3e:	f005 fa4d 	bl	8005fdc <HAL_TIM_Encoder_Start_IT>
 8000b42:	4603      	mov	r3, r0
 8000b44:	461a      	mov	r2, r3
 8000b46:	7f7b      	ldrb	r3, [r7, #29]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	777b      	strb	r3, [r7, #29]
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000b4c:	213c      	movs	r1, #60	; 0x3c
 8000b4e:	4861      	ldr	r0, [pc, #388]	; (8000cd4 <main+0x294>)
 8000b50:	f005 fa44 	bl	8005fdc <HAL_TIM_Encoder_Start_IT>
 8000b54:	4603      	mov	r3, r0
 8000b56:	461a      	mov	r2, r3
 8000b58:	7f7b      	ldrb	r3, [r7, #29]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	777b      	strb	r3, [r7, #29]
  l_halReturnCode |= HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 8000b5e:	213c      	movs	r1, #60	; 0x3c
 8000b60:	485d      	ldr	r0, [pc, #372]	; (8000cd8 <main+0x298>)
 8000b62:	f005 fa3b 	bl	8005fdc <HAL_TIM_Encoder_Start_IT>
 8000b66:	4603      	mov	r3, r0
 8000b68:	461a      	mov	r2, r3
 8000b6a:	7f7b      	ldrb	r3, [r7, #29]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	777b      	strb	r3, [r7, #29]

  if (l_halReturnCode != HAL_OK)
 8000b70:	7f7b      	ldrb	r3, [r7, #29]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d006      	beq.n	8000b84 <main+0x144>
  {
    LOG_error("HAL_TIM_Encoder_Start_IT(&htimX) returned error code(s): %d", l_halReturnCode);
 8000b76:	7f7b      	ldrb	r3, [r7, #29]
 8000b78:	461a      	mov	r2, r3
 8000b7a:	4958      	ldr	r1, [pc, #352]	; (8000cdc <main+0x29c>)
 8000b7c:	2003      	movs	r0, #3
 8000b7e:	f008 ff6f 	bl	8009a60 <LOG_log>
 8000b82:	e003      	b.n	8000b8c <main+0x14c>
  }
  else
  {
    LOG_info("Started TIMER 2, 3, 4, 5 (encoders)");
 8000b84:	4956      	ldr	r1, [pc, #344]	; (8000ce0 <main+0x2a0>)
 8000b86:	2001      	movs	r0, #1
 8000b88:	f008 ff6a 	bl	8009a60 <LOG_log>
  }

  /* Initialize Timer 8 */
  l_halReturnCode = HAL_TIM_Base_Start(&htim8);
 8000b8c:	4855      	ldr	r0, [pc, #340]	; (8000ce4 <main+0x2a4>)
 8000b8e:	f004 fd63 	bl	8005658 <HAL_TIM_Base_Start>
 8000b92:	4603      	mov	r3, r0
 8000b94:	777b      	strb	r3, [r7, #29]

  if (l_halReturnCode != HAL_OK)
 8000b96:	7f7b      	ldrb	r3, [r7, #29]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d006      	beq.n	8000baa <main+0x16a>
  {
    LOG_error("HAL_TIM_Base_Start(&htim8) returned an error code: %d", l_halReturnCode);
 8000b9c:	7f7b      	ldrb	r3, [r7, #29]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	4951      	ldr	r1, [pc, #324]	; (8000ce8 <main+0x2a8>)
 8000ba2:	2003      	movs	r0, #3
 8000ba4:	f008 ff5c 	bl	8009a60 <LOG_log>
 8000ba8:	e003      	b.n	8000bb2 <main+0x172>
  }
  else
  {
    LOG_info("Started TIMER 8 (PWM channels)");
 8000baa:	4950      	ldr	r1, [pc, #320]	; (8000cec <main+0x2ac>)
 8000bac:	2001      	movs	r0, #1
 8000bae:	f008 ff57 	bl	8009a60 <LOG_log>
  }

  /* Initialize battery monitor */
  BAT_init(&hadc1, &hrtc);
 8000bb2:	493b      	ldr	r1, [pc, #236]	; (8000ca0 <main+0x260>)
 8000bb4:	484e      	ldr	r0, [pc, #312]	; (8000cf0 <main+0x2b0>)
 8000bb6:	f007 fd25 	bl	8008604 <BAT_init>

  /* Initialize PWM channels */
  l_halReturnCode  = HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000bba:	2100      	movs	r1, #0
 8000bbc:	4849      	ldr	r0, [pc, #292]	; (8000ce4 <main+0x2a4>)
 8000bbe:	f004 ff43 	bl	8005a48 <HAL_TIM_PWM_Start>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	777b      	strb	r3, [r7, #29]
  l_halReturnCode |= HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000bc6:	2104      	movs	r1, #4
 8000bc8:	4846      	ldr	r0, [pc, #280]	; (8000ce4 <main+0x2a4>)
 8000bca:	f004 ff3d 	bl	8005a48 <HAL_TIM_PWM_Start>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	7f7b      	ldrb	r3, [r7, #29]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	777b      	strb	r3, [r7, #29]
  l_halReturnCode |= HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000bd8:	2108      	movs	r1, #8
 8000bda:	4842      	ldr	r0, [pc, #264]	; (8000ce4 <main+0x2a4>)
 8000bdc:	f004 ff34 	bl	8005a48 <HAL_TIM_PWM_Start>
 8000be0:	4603      	mov	r3, r0
 8000be2:	461a      	mov	r2, r3
 8000be4:	7f7b      	ldrb	r3, [r7, #29]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	777b      	strb	r3, [r7, #29]
  l_halReturnCode |= HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000bea:	210c      	movs	r1, #12
 8000bec:	483d      	ldr	r0, [pc, #244]	; (8000ce4 <main+0x2a4>)
 8000bee:	f004 ff2b 	bl	8005a48 <HAL_TIM_PWM_Start>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	7f7b      	ldrb	r3, [r7, #29]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	777b      	strb	r3, [r7, #29]

  if (l_halReturnCode != HAL_OK)
 8000bfc:	7f7b      	ldrb	r3, [r7, #29]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d006      	beq.n	8000c10 <main+0x1d0>
  {
    LOG_error("HAL_TIM_PWM_Start(&htim8) returned error code(s): %d", l_halReturnCode);
 8000c02:	7f7b      	ldrb	r3, [r7, #29]
 8000c04:	461a      	mov	r2, r3
 8000c06:	493b      	ldr	r1, [pc, #236]	; (8000cf4 <main+0x2b4>)
 8000c08:	2003      	movs	r0, #3
 8000c0a:	f008 ff29 	bl	8009a60 <LOG_log>
 8000c0e:	e003      	b.n	8000c18 <main+0x1d8>
  }
  else
  {
    LOG_info("Started PWM channels");
 8000c10:	4939      	ldr	r1, [pc, #228]	; (8000cf8 <main+0x2b8>)
 8000c12:	2001      	movs	r0, #1
 8000c14:	f008 ff24 	bl	8009a60 <LOG_log>
  }

  /* Initialize bluetooth control */
  BLU_init(DRV_MAXIMUM_SPEED);
 8000c18:	2028      	movs	r0, #40	; 0x28
 8000c1a:	f007 ff23 	bl	8008a64 <BLU_init>

  /* Initialize driving module */
  DRV_init(&htim8, &htim2, &htim3, &htim4, &htim5);
 8000c1e:	4b2e      	ldr	r3, [pc, #184]	; (8000cd8 <main+0x298>)
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <main+0x294>)
 8000c24:	4a2a      	ldr	r2, [pc, #168]	; (8000cd0 <main+0x290>)
 8000c26:	4929      	ldr	r1, [pc, #164]	; (8000ccc <main+0x28c>)
 8000c28:	482e      	ldr	r0, [pc, #184]	; (8000ce4 <main+0x2a4>)
 8000c2a:	f007 fff9 	bl	8008c20 <DRV_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  /* Initialize ime measurement for master board control */
  l_lastTime = __HAL_TIM_GET_COUNTER(&htim6);
 8000c2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ca8 <main+0x268>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c34:	83fb      	strh	r3, [r7, #30]

  while (1)
  {
    CON_receiveData        (                );
 8000c36:	f007 ffe3 	bl	8008c00 <CON_receiveData>
    BLU_receiveData        (&l_bluetoothData);
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f007 ff35 	bl	8008aac <BLU_receiveData>
    DRV_updateFromBluetooth(&l_bluetoothData);
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	4618      	mov	r0, r3
 8000c46:	f008 f903 	bl	8008e50 <DRV_updateFromBluetooth>

    l_driveMode = DRV_getMode();
 8000c4a:	f008 faad 	bl	80091a8 <DRV_getMode>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	773b      	strb	r3, [r7, #28]

    BAT_update         (&l_voltageInMv            );
 8000c52:	463b      	mov	r3, r7
 8000c54:	4618      	mov	r0, r3
 8000c56:	f007 fd23 	bl	80086a0 <BAT_update>
    MAIN_updateLedMode (l_driveMode, l_voltageInMv);
 8000c5a:	683a      	ldr	r2, [r7, #0]
 8000c5c:	7f3b      	ldrb	r3, [r7, #28]
 8000c5e:	4611      	mov	r1, r2
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff feb9 	bl	80009d8 <MAIN_updateLedMode>
    MAIN_updateLogLevel(&l_bluetoothData          );
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fe33 	bl	80008d4 <MAIN_updateLogLevel>

    UTI_delayUs(MAIN_LOOP_DELAY_IN_MS);
 8000c6e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000c72:	f009 f943 	bl	8009efc <UTI_delayUs>

    l_currentTime = __HAL_TIM_GET_COUNTER(&htim6);
 8000c76:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <main+0x268>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c7c:	837b      	strh	r3, [r7, #26]
    l_deltaTime   = l_lastTime - l_currentTime;
 8000c7e:	8bfa      	ldrh	r2, [r7, #30]
 8000c80:	8b7b      	ldrh	r3, [r7, #26]
 8000c82:	1ad3      	subs	r3, r2, r3
 8000c84:	833b      	strh	r3, [r7, #24]
    l_lastTime    = l_currentTime;
 8000c86:	8b7b      	ldrh	r3, [r7, #26]
 8000c88:	83fb      	strh	r3, [r7, #30]

    DRV_updateFromMaster(l_deltaTime);
 8000c8a:	8b3b      	ldrh	r3, [r7, #24]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f008 fa1f 	bl	80090d0 <DRV_updateFromMaster>
    CON_receiveData        (                );
 8000c92:	e7d0      	b.n	8000c36 <main+0x1f6>
 8000c94:	2000009c 	.word	0x2000009c
 8000c98:	200000a0 	.word	0x200000a0
 8000c9c:	20000584 	.word	0x20000584
 8000ca0:	200005f8 	.word	0x200005f8
 8000ca4:	0800b2a0 	.word	0x0800b2a0
 8000ca8:	2000060c 	.word	0x2000060c
 8000cac:	0800b2b0 	.word	0x0800b2b0
 8000cb0:	0800b2e8 	.word	0x0800b2e8
 8000cb4:	2000089c 	.word	0x2000089c
 8000cb8:	0800b30c 	.word	0x0800b30c
 8000cbc:	0800b348 	.word	0x0800b348
 8000cc0:	200006c0 	.word	0x200006c0
 8000cc4:	0800b36c 	.word	0x0800b36c
 8000cc8:	0800b3a8 	.word	0x0800b3a8
 8000ccc:	20000774 	.word	0x20000774
 8000cd0:	200004a0 	.word	0x200004a0
 8000cd4:	20000338 	.word	0x20000338
 8000cd8:	200003ec 	.word	0x200003ec
 8000cdc:	0800b3c4 	.word	0x0800b3c4
 8000ce0:	0800b400 	.word	0x0800b400
 8000ce4:	20000284 	.word	0x20000284
 8000ce8:	0800b424 	.word	0x0800b424
 8000cec:	0800b45c 	.word	0x0800b45c
 8000cf0:	20000554 	.word	0x20000554
 8000cf4:	0800b47c 	.word	0x0800b47c
 8000cf8:	0800b4b4 	.word	0x0800b4b4

08000cfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b096      	sub	sp, #88	; 0x58
 8000d00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d06:	2228      	movs	r2, #40	; 0x28
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f009 f9a6 	bl	800a05c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
 8000d2c:	611a      	str	r2, [r3, #16]
 8000d2e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000d30:	230a      	movs	r3, #10
 8000d32:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d34:	2301      	movs	r3, #1
 8000d36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d38:	2310      	movs	r3, #16
 8000d3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d44:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f002 fd2f 	bl	80037ac <HAL_RCC_OscConfig>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000d54:	f000 fcd6 	bl	8001704 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d58:	230f      	movs	r3, #15
 8000d5a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d6c:	f107 031c 	add.w	r3, r7, #28
 8000d70:	2100      	movs	r1, #0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f003 f88a 	bl	8003e8c <HAL_RCC_ClockConfig>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000d7e:	f000 fcc1 	bl	8001704 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000d82:	2303      	movs	r3, #3
 8000d84:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d8a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	4618      	mov	r0, r3
 8000d94:	f003 faba 	bl	800430c <HAL_RCCEx_PeriphCLKConfig>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000d9e:	f000 fcb1 	bl	8001704 <Error_Handler>
  }
}
 8000da2:	bf00      	nop
 8000da4:	3758      	adds	r7, #88	; 0x58
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000dbc:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <MX_ADC1_Init+0x74>)
 8000dbe:	4a19      	ldr	r2, [pc, #100]	; (8000e24 <MX_ADC1_Init+0x78>)
 8000dc0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dc2:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <MX_ADC1_Init+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dc8:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <MX_ADC1_Init+0x74>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dce:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <MX_ADC1_Init+0x74>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dd4:	4b12      	ldr	r3, [pc, #72]	; (8000e20 <MX_ADC1_Init+0x74>)
 8000dd6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000dda:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ddc:	4b10      	ldr	r3, [pc, #64]	; (8000e20 <MX_ADC1_Init+0x74>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000de2:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <MX_ADC1_Init+0x74>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000de8:	480d      	ldr	r0, [pc, #52]	; (8000e20 <MX_ADC1_Init+0x74>)
 8000dea:	f001 f94d 	bl	8002088 <HAL_ADC_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000df4:	f000 fc86 	bl	8001704 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000df8:	2305      	movs	r3, #5
 8000dfa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	4619      	mov	r1, r3
 8000e08:	4805      	ldr	r0, [pc, #20]	; (8000e20 <MX_ADC1_Init+0x74>)
 8000e0a:	f001 fcef 	bl	80027ec <HAL_ADC_ConfigChannel>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000e14:	f000 fc76 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000554 	.word	0x20000554
 8000e24:	40012400 	.word	0x40012400

08000e28 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	2100      	movs	r1, #0
 8000e32:	460a      	mov	r2, r1
 8000e34:	801a      	strh	r2, [r3, #0]
 8000e36:	460a      	mov	r2, r1
 8000e38:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e3e:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <MX_RTC_Init+0x8c>)
 8000e40:	4a1d      	ldr	r2, [pc, #116]	; (8000eb8 <MX_RTC_Init+0x90>)
 8000e42:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000e44:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <MX_RTC_Init+0x8c>)
 8000e46:	f04f 32ff 	mov.w	r2, #4294967295
 8000e4a:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8000e4c:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <MX_RTC_Init+0x8c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e52:	4818      	ldr	r0, [pc, #96]	; (8000eb4 <MX_RTC_Init+0x8c>)
 8000e54:	f003 fc76 	bl	8004744 <HAL_RTC_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 8000e5e:	f000 fc51 	bl	8001704 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000e66:	2300      	movs	r3, #0
 8000e68:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	2201      	movs	r2, #1
 8000e72:	4619      	mov	r1, r3
 8000e74:	480f      	ldr	r0, [pc, #60]	; (8000eb4 <MX_RTC_Init+0x8c>)
 8000e76:	f003 fd2f 	bl	80048d8 <HAL_RTC_SetTime>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8000e80:	f000 fc40 	bl	8001704 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e84:	2301      	movs	r3, #1
 8000e86:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000e94:	463b      	mov	r3, r7
 8000e96:	2201      	movs	r2, #1
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4806      	ldr	r0, [pc, #24]	; (8000eb4 <MX_RTC_Init+0x8c>)
 8000e9c:	f003 fee8 	bl	8004c70 <HAL_RTC_SetDate>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000ea6:	f000 fc2d 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	200005f8 	.word	0x200005f8
 8000eb8:	40002800 	.word	0x40002800

08000ebc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ed8:	4b1e      	ldr	r3, [pc, #120]	; (8000f54 <MX_TIM1_Init+0x98>)
 8000eda:	4a1f      	ldr	r2, [pc, #124]	; (8000f58 <MX_TIM1_Init+0x9c>)
 8000edc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 8000ede:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <MX_TIM1_Init+0x98>)
 8000ee0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000ee4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee6:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <MX_TIM1_Init+0x98>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <MX_TIM1_Init+0x98>)
 8000eee:	22f9      	movs	r2, #249	; 0xf9
 8000ef0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef2:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <MX_TIM1_Init+0x98>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ef8:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <MX_TIM1_Init+0x98>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <MX_TIM1_Init+0x98>)
 8000f00:	2280      	movs	r2, #128	; 0x80
 8000f02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000f04:	4813      	ldr	r0, [pc, #76]	; (8000f54 <MX_TIM1_Init+0x98>)
 8000f06:	f004 fad5 	bl	80054b4 <HAL_TIM_Base_Init>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000f10:	f000 fbf8 	bl	8001704 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f1a:	f107 0308 	add.w	r3, r7, #8
 8000f1e:	4619      	mov	r1, r3
 8000f20:	480c      	ldr	r0, [pc, #48]	; (8000f54 <MX_TIM1_Init+0x98>)
 8000f22:	f005 fbff 	bl	8006724 <HAL_TIM_ConfigClockSource>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000f2c:	f000 fbea 	bl	8001704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f30:	2300      	movs	r3, #0
 8000f32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f34:	2300      	movs	r3, #0
 8000f36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f38:	463b      	mov	r3, r7
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4805      	ldr	r0, [pc, #20]	; (8000f54 <MX_TIM1_Init+0x98>)
 8000f3e:	f006 fb4d 	bl	80075dc <HAL_TIMEx_MasterConfigSynchronization>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000f48:	f000 fbdc 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200006c0 	.word	0x200006c0
 8000f58:	40012c00 	.word	0x40012c00

08000f5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08c      	sub	sp, #48	; 0x30
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f62:	f107 030c 	add.w	r3, r7, #12
 8000f66:	2224      	movs	r2, #36	; 0x24
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f009 f876 	bl	800a05c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f78:	4b21      	ldr	r3, [pc, #132]	; (8001000 <MX_TIM2_Init+0xa4>)
 8000f7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f80:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <MX_TIM2_Init+0xa4>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f86:	4b1e      	ldr	r3, [pc, #120]	; (8001000 <MX_TIM2_Init+0xa4>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <MX_TIM2_Init+0xa4>)
 8000f8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f94:	4b1a      	ldr	r3, [pc, #104]	; (8001000 <MX_TIM2_Init+0xa4>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f9a:	4b19      	ldr	r3, [pc, #100]	; (8001000 <MX_TIM2_Init+0xa4>)
 8000f9c:	2280      	movs	r2, #128	; 0x80
 8000f9e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000fb0:	230a      	movs	r3, #10
 8000fb2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	4619      	mov	r1, r3
 8000fca:	480d      	ldr	r0, [pc, #52]	; (8001000 <MX_TIM2_Init+0xa4>)
 8000fcc:	f004 fe64 	bl	8005c98 <HAL_TIM_Encoder_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000fd6:	f000 fb95 	bl	8001704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4806      	ldr	r0, [pc, #24]	; (8001000 <MX_TIM2_Init+0xa4>)
 8000fe8:	f006 faf8 	bl	80075dc <HAL_TIMEx_MasterConfigSynchronization>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000ff2:	f000 fb87 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ff6:	bf00      	nop
 8000ff8:	3730      	adds	r7, #48	; 0x30
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	20000774 	.word	0x20000774

08001004 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08c      	sub	sp, #48	; 0x30
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800100a:	f107 030c 	add.w	r3, r7, #12
 800100e:	2224      	movs	r2, #36	; 0x24
 8001010:	2100      	movs	r1, #0
 8001012:	4618      	mov	r0, r3
 8001014:	f009 f822 	bl	800a05c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001020:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <MX_TIM3_Init+0xa0>)
 8001022:	4a21      	ldr	r2, [pc, #132]	; (80010a8 <MX_TIM3_Init+0xa4>)
 8001024:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001026:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <MX_TIM3_Init+0xa0>)
 8001028:	2200      	movs	r2, #0
 800102a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102c:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <MX_TIM3_Init+0xa0>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001032:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <MX_TIM3_Init+0xa0>)
 8001034:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001038:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800103a:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <MX_TIM3_Init+0xa0>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001040:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <MX_TIM3_Init+0xa0>)
 8001042:	2280      	movs	r2, #128	; 0x80
 8001044:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001046:	2303      	movs	r3, #3
 8001048:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800104e:	2301      	movs	r3, #1
 8001050:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001056:	230a      	movs	r3, #10
 8001058:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800105a:	2300      	movs	r3, #0
 800105c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800105e:	2301      	movs	r3, #1
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001062:	2300      	movs	r3, #0
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	4619      	mov	r1, r3
 8001070:	480c      	ldr	r0, [pc, #48]	; (80010a4 <MX_TIM3_Init+0xa0>)
 8001072:	f004 fe11 	bl	8005c98 <HAL_TIM_Encoder_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800107c:	f000 fb42 	bl	8001704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001080:	2300      	movs	r3, #0
 8001082:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001084:	2300      	movs	r3, #0
 8001086:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	4619      	mov	r1, r3
 800108c:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_TIM3_Init+0xa0>)
 800108e:	f006 faa5 	bl	80075dc <HAL_TIMEx_MasterConfigSynchronization>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001098:	f000 fb34 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800109c:	bf00      	nop
 800109e:	3730      	adds	r7, #48	; 0x30
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	200004a0 	.word	0x200004a0
 80010a8:	40000400 	.word	0x40000400

080010ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08c      	sub	sp, #48	; 0x30
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010b2:	f107 030c 	add.w	r3, r7, #12
 80010b6:	2224      	movs	r2, #36	; 0x24
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f008 ffce 	bl	800a05c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010c8:	4b20      	ldr	r3, [pc, #128]	; (800114c <MX_TIM4_Init+0xa0>)
 80010ca:	4a21      	ldr	r2, [pc, #132]	; (8001150 <MX_TIM4_Init+0xa4>)
 80010cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80010ce:	4b1f      	ldr	r3, [pc, #124]	; (800114c <MX_TIM4_Init+0xa0>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d4:	4b1d      	ldr	r3, [pc, #116]	; (800114c <MX_TIM4_Init+0xa0>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80010da:	4b1c      	ldr	r3, [pc, #112]	; (800114c <MX_TIM4_Init+0xa0>)
 80010dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010e0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <MX_TIM4_Init+0xa0>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010e8:	4b18      	ldr	r3, [pc, #96]	; (800114c <MX_TIM4_Init+0xa0>)
 80010ea:	2280      	movs	r2, #128	; 0x80
 80010ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010ee:	2303      	movs	r3, #3
 80010f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010f6:	2301      	movs	r3, #1
 80010f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80010fe:	230a      	movs	r3, #10
 8001100:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001102:	2300      	movs	r3, #0
 8001104:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001106:	2301      	movs	r3, #1
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800110a:	2300      	movs	r3, #0
 800110c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001112:	f107 030c 	add.w	r3, r7, #12
 8001116:	4619      	mov	r1, r3
 8001118:	480c      	ldr	r0, [pc, #48]	; (800114c <MX_TIM4_Init+0xa0>)
 800111a:	f004 fdbd 	bl	8005c98 <HAL_TIM_Encoder_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001124:	f000 faee 	bl	8001704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001128:	2300      	movs	r3, #0
 800112a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	4619      	mov	r1, r3
 8001134:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_TIM4_Init+0xa0>)
 8001136:	f006 fa51 	bl	80075dc <HAL_TIMEx_MasterConfigSynchronization>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001140:	f000 fae0 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	3730      	adds	r7, #48	; 0x30
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000338 	.word	0x20000338
 8001150:	40000800 	.word	0x40000800

08001154 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08c      	sub	sp, #48	; 0x30
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800115a:	f107 030c 	add.w	r3, r7, #12
 800115e:	2224      	movs	r2, #36	; 0x24
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f008 ff7a 	bl	800a05c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001170:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <MX_TIM5_Init+0xa0>)
 8001172:	4a21      	ldr	r2, [pc, #132]	; (80011f8 <MX_TIM5_Init+0xa4>)
 8001174:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001176:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <MX_TIM5_Init+0xa0>)
 8001178:	2200      	movs	r2, #0
 800117a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117c:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <MX_TIM5_Init+0xa0>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001182:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <MX_TIM5_Init+0xa0>)
 8001184:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001188:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118a:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <MX_TIM5_Init+0xa0>)
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001190:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <MX_TIM5_Init+0xa0>)
 8001192:	2280      	movs	r2, #128	; 0x80
 8001194:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001196:	2303      	movs	r3, #3
 8001198:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800119e:	2301      	movs	r3, #1
 80011a0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011a2:	2300      	movs	r3, #0
 80011a4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80011a6:	230a      	movs	r3, #10
 80011a8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011aa:	2300      	movs	r3, #0
 80011ac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011ae:	2301      	movs	r3, #1
 80011b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011b2:	2300      	movs	r3, #0
 80011b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80011ba:	f107 030c 	add.w	r3, r7, #12
 80011be:	4619      	mov	r1, r3
 80011c0:	480c      	ldr	r0, [pc, #48]	; (80011f4 <MX_TIM5_Init+0xa0>)
 80011c2:	f004 fd69 	bl	8005c98 <HAL_TIM_Encoder_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80011cc:	f000 fa9a 	bl	8001704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d0:	2300      	movs	r3, #0
 80011d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	4619      	mov	r1, r3
 80011dc:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MX_TIM5_Init+0xa0>)
 80011de:	f006 f9fd 	bl	80075dc <HAL_TIMEx_MasterConfigSynchronization>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80011e8:	f000 fa8c 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80011ec:	bf00      	nop
 80011ee:	3730      	adds	r7, #48	; 0x30
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200003ec 	.word	0x200003ec
 80011f8:	40000c00 	.word	0x40000c00

080011fc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001202:	463b      	mov	r3, r7
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <MX_TIM6_Init+0x64>)
 800120c:	4a15      	ldr	r2, [pc, #84]	; (8001264 <MX_TIM6_Init+0x68>)
 800120e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7;
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <MX_TIM6_Init+0x64>)
 8001212:	2207      	movs	r2, #7
 8001214:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <MX_TIM6_Init+0x64>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800121c:	4b10      	ldr	r3, [pc, #64]	; (8001260 <MX_TIM6_Init+0x64>)
 800121e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001222:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001224:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_TIM6_Init+0x64>)
 8001226:	2280      	movs	r2, #128	; 0x80
 8001228:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800122a:	480d      	ldr	r0, [pc, #52]	; (8001260 <MX_TIM6_Init+0x64>)
 800122c:	f004 f942 	bl	80054b4 <HAL_TIM_Base_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001236:	f000 fa65 	bl	8001704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800123a:	2300      	movs	r3, #0
 800123c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123e:	2300      	movs	r3, #0
 8001240:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001242:	463b      	mov	r3, r7
 8001244:	4619      	mov	r1, r3
 8001246:	4806      	ldr	r0, [pc, #24]	; (8001260 <MX_TIM6_Init+0x64>)
 8001248:	f006 f9c8 	bl	80075dc <HAL_TIMEx_MasterConfigSynchronization>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001252:	f000 fa57 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	2000060c 	.word	0x2000060c
 8001264:	40001000 	.word	0x40001000

08001268 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800126e:	463b      	mov	r3, r7
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001276:	4b15      	ldr	r3, [pc, #84]	; (80012cc <MX_TIM7_Init+0x64>)
 8001278:	4a15      	ldr	r2, [pc, #84]	; (80012d0 <MX_TIM7_Init+0x68>)
 800127a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7;
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <MX_TIM7_Init+0x64>)
 800127e:	2207      	movs	r2, #7
 8001280:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001282:	4b12      	ldr	r3, [pc, #72]	; (80012cc <MX_TIM7_Init+0x64>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8001288:	4b10      	ldr	r3, [pc, #64]	; (80012cc <MX_TIM7_Init+0x64>)
 800128a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800128e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001290:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <MX_TIM7_Init+0x64>)
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001296:	480d      	ldr	r0, [pc, #52]	; (80012cc <MX_TIM7_Init+0x64>)
 8001298:	f004 f90c 	bl	80054b4 <HAL_TIM_Base_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80012a2:	f000 fa2f 	bl	8001704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a6:	2300      	movs	r3, #0
 80012a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80012ae:	463b      	mov	r3, r7
 80012b0:	4619      	mov	r1, r3
 80012b2:	4806      	ldr	r0, [pc, #24]	; (80012cc <MX_TIM7_Init+0x64>)
 80012b4:	f006 f992 	bl	80075dc <HAL_TIMEx_MasterConfigSynchronization>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80012be:	f000 fa21 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	2000089c 	.word	0x2000089c
 80012d0:	40001400 	.word	0x40001400

080012d4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b096      	sub	sp, #88	; 0x58
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	611a      	str	r2, [r3, #16]
 8001302:	615a      	str	r2, [r3, #20]
 8001304:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	2220      	movs	r2, #32
 800130a:	2100      	movs	r1, #0
 800130c:	4618      	mov	r0, r3
 800130e:	f008 fea5 	bl	800a05c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001312:	4b50      	ldr	r3, [pc, #320]	; (8001454 <MX_TIM8_Init+0x180>)
 8001314:	4a50      	ldr	r2, [pc, #320]	; (8001458 <MX_TIM8_Init+0x184>)
 8001316:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7;
 8001318:	4b4e      	ldr	r3, [pc, #312]	; (8001454 <MX_TIM8_Init+0x180>)
 800131a:	2207      	movs	r2, #7
 800131c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131e:	4b4d      	ldr	r3, [pc, #308]	; (8001454 <MX_TIM8_Init+0x180>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100;
 8001324:	4b4b      	ldr	r3, [pc, #300]	; (8001454 <MX_TIM8_Init+0x180>)
 8001326:	2264      	movs	r2, #100	; 0x64
 8001328:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800132a:	4b4a      	ldr	r3, [pc, #296]	; (8001454 <MX_TIM8_Init+0x180>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001330:	4b48      	ldr	r3, [pc, #288]	; (8001454 <MX_TIM8_Init+0x180>)
 8001332:	2200      	movs	r2, #0
 8001334:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001336:	4b47      	ldr	r3, [pc, #284]	; (8001454 <MX_TIM8_Init+0x180>)
 8001338:	2280      	movs	r2, #128	; 0x80
 800133a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800133c:	4845      	ldr	r0, [pc, #276]	; (8001454 <MX_TIM8_Init+0x180>)
 800133e:	f004 f8b9 	bl	80054b4 <HAL_TIM_Base_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001348:	f000 f9dc 	bl	8001704 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800134c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001350:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001352:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001356:	4619      	mov	r1, r3
 8001358:	483e      	ldr	r0, [pc, #248]	; (8001454 <MX_TIM8_Init+0x180>)
 800135a:	f005 f9e3 	bl	8006724 <HAL_TIM_ConfigClockSource>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001364:	f000 f9ce 	bl	8001704 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001368:	483a      	ldr	r0, [pc, #232]	; (8001454 <MX_TIM8_Init+0x180>)
 800136a:	f004 fa91 	bl	8005890 <HAL_TIM_PWM_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001374:	f000 f9c6 	bl	8001704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001378:	2300      	movs	r3, #0
 800137a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001380:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001384:	4619      	mov	r1, r3
 8001386:	4833      	ldr	r0, [pc, #204]	; (8001454 <MX_TIM8_Init+0x180>)
 8001388:	f006 f928 	bl	80075dc <HAL_TIMEx_MasterConfigSynchronization>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8001392:	f000 f9b7 	bl	8001704 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001396:	2360      	movs	r3, #96	; 0x60
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800139e:	2300      	movs	r3, #0
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013a2:	2300      	movs	r3, #0
 80013a4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013aa:	2300      	movs	r3, #0
 80013ac:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013ae:	2300      	movs	r3, #0
 80013b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b6:	2200      	movs	r2, #0
 80013b8:	4619      	mov	r1, r3
 80013ba:	4826      	ldr	r0, [pc, #152]	; (8001454 <MX_TIM8_Init+0x180>)
 80013bc:	f005 f814 	bl	80063e8 <HAL_TIM_PWM_ConfigChannel>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 80013c6:	f000 f99d 	bl	8001704 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ce:	2204      	movs	r2, #4
 80013d0:	4619      	mov	r1, r3
 80013d2:	4820      	ldr	r0, [pc, #128]	; (8001454 <MX_TIM8_Init+0x180>)
 80013d4:	f005 f808 	bl	80063e8 <HAL_TIM_PWM_ConfigChannel>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 80013de:	f000 f991 	bl	8001704 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e6:	2208      	movs	r2, #8
 80013e8:	4619      	mov	r1, r3
 80013ea:	481a      	ldr	r0, [pc, #104]	; (8001454 <MX_TIM8_Init+0x180>)
 80013ec:	f004 fffc 	bl	80063e8 <HAL_TIM_PWM_ConfigChannel>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 80013f6:	f000 f985 	bl	8001704 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fe:	220c      	movs	r2, #12
 8001400:	4619      	mov	r1, r3
 8001402:	4814      	ldr	r0, [pc, #80]	; (8001454 <MX_TIM8_Init+0x180>)
 8001404:	f004 fff0 	bl	80063e8 <HAL_TIM_PWM_ConfigChannel>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 800140e:	f000 f979 	bl	8001704 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001412:	2300      	movs	r3, #0
 8001414:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001416:	2300      	movs	r3, #0
 8001418:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001426:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800142a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800142c:	2300      	movs	r3, #0
 800142e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	4619      	mov	r1, r3
 8001434:	4807      	ldr	r0, [pc, #28]	; (8001454 <MX_TIM8_Init+0x180>)
 8001436:	f006 f9a1 	bl	800777c <HAL_TIMEx_ConfigBreakDeadTime>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM8_Init+0x170>
  {
    Error_Handler();
 8001440:	f000 f960 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001444:	4803      	ldr	r0, [pc, #12]	; (8001454 <MX_TIM8_Init+0x180>)
 8001446:	f000 fb7f 	bl	8001b48 <HAL_TIM_MspPostInit>

}
 800144a:	bf00      	nop
 800144c:	3758      	adds	r7, #88	; 0x58
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000284 	.word	0x20000284
 8001458:	40013400 	.word	0x40013400

0800145c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001462:	4a12      	ldr	r2, [pc, #72]	; (80014ac <MX_USART1_UART_Init+0x50>)
 8001464:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001468:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800146c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001474:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001476:	2200      	movs	r2, #0
 8001478:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <MX_USART1_UART_Init+0x4c>)
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001480:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001482:	220c      	movs	r2, #12
 8001484:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001486:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <MX_USART1_UART_Init+0x4c>)
 800148e:	2200      	movs	r2, #0
 8001490:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001492:	4805      	ldr	r0, [pc, #20]	; (80014a8 <MX_USART1_UART_Init+0x4c>)
 8001494:	f006 fa5a 	bl	800794c <HAL_UART_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800149e:	f000 f931 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000584 	.word	0x20000584
 80014ac:	40013800 	.word	0x40013800

080014b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014b4:	4b11      	ldr	r3, [pc, #68]	; (80014fc <MX_USART2_UART_Init+0x4c>)
 80014b6:	4a12      	ldr	r2, [pc, #72]	; (8001500 <MX_USART2_UART_Init+0x50>)
 80014b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80014ba:	4b10      	ldr	r3, [pc, #64]	; (80014fc <MX_USART2_UART_Init+0x4c>)
 80014bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80014c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <MX_USART2_UART_Init+0x4c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014c8:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <MX_USART2_UART_Init+0x4c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014ce:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <MX_USART2_UART_Init+0x4c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <MX_USART2_UART_Init+0x4c>)
 80014d6:	220c      	movs	r2, #12
 80014d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014da:	4b08      	ldr	r3, [pc, #32]	; (80014fc <MX_USART2_UART_Init+0x4c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <MX_USART2_UART_Init+0x4c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014e6:	4805      	ldr	r0, [pc, #20]	; (80014fc <MX_USART2_UART_Init+0x4c>)
 80014e8:	f006 fa30 	bl	800794c <HAL_UART_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014f2:	f000 f907 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000828 	.word	0x20000828
 8001500:	40004400 	.word	0x40004400

08001504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b088      	sub	sp, #32
 8001508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150a:	f107 0310 	add.w	r3, r7, #16
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001518:	4b4e      	ldr	r3, [pc, #312]	; (8001654 <MX_GPIO_Init+0x150>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	4a4d      	ldr	r2, [pc, #308]	; (8001654 <MX_GPIO_Init+0x150>)
 800151e:	f043 0310 	orr.w	r3, r3, #16
 8001522:	6193      	str	r3, [r2, #24]
 8001524:	4b4b      	ldr	r3, [pc, #300]	; (8001654 <MX_GPIO_Init+0x150>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	f003 0310 	and.w	r3, r3, #16
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001530:	4b48      	ldr	r3, [pc, #288]	; (8001654 <MX_GPIO_Init+0x150>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	4a47      	ldr	r2, [pc, #284]	; (8001654 <MX_GPIO_Init+0x150>)
 8001536:	f043 0304 	orr.w	r3, r3, #4
 800153a:	6193      	str	r3, [r2, #24]
 800153c:	4b45      	ldr	r3, [pc, #276]	; (8001654 <MX_GPIO_Init+0x150>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001548:	4b42      	ldr	r3, [pc, #264]	; (8001654 <MX_GPIO_Init+0x150>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	4a41      	ldr	r2, [pc, #260]	; (8001654 <MX_GPIO_Init+0x150>)
 800154e:	f043 0308 	orr.w	r3, r3, #8
 8001552:	6193      	str	r3, [r2, #24]
 8001554:	4b3f      	ldr	r3, [pc, #252]	; (8001654 <MX_GPIO_Init+0x150>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	f003 0308 	and.w	r3, r3, #8
 800155c:	607b      	str	r3, [r7, #4]
 800155e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001560:	4b3c      	ldr	r3, [pc, #240]	; (8001654 <MX_GPIO_Init+0x150>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	4a3b      	ldr	r2, [pc, #236]	; (8001654 <MX_GPIO_Init+0x150>)
 8001566:	f043 0320 	orr.w	r3, r3, #32
 800156a:	6193      	str	r3, [r2, #24]
 800156c:	4b39      	ldr	r3, [pc, #228]	; (8001654 <MX_GPIO_Init+0x150>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	f003 0320 	and.w	r3, r3, #32
 8001574:	603b      	str	r3, [r7, #0]
 8001576:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BLUE_LED_Pin|BLUETOOTH_SPI_CMD_Pin|BLUETOOTH_SPI_CS_Pin|MOTOR_FRONT_RIGHT_IN_1_Pin
 8001578:	2200      	movs	r2, #0
 800157a:	f243 013a 	movw	r1, #12346	; 0x303a
 800157e:	4836      	ldr	r0, [pc, #216]	; (8001658 <MX_GPIO_Init+0x154>)
 8001580:	f002 f8ae 	bl	80036e0 <HAL_GPIO_WritePin>
                          |MOTOR_FRONT_RIGHT_IN_2_Pin|MOTOR_REAR_LEFT_IN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUETOOTH_SPI_CLK_GPIO_Port, BLUETOOTH_SPI_CLK_Pin, GPIO_PIN_RESET);
 8001584:	2200      	movs	r2, #0
 8001586:	2110      	movs	r1, #16
 8001588:	4834      	ldr	r0, [pc, #208]	; (800165c <MX_GPIO_Init+0x158>)
 800158a:	f002 f8a9 	bl	80036e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_FRONT_LEFT_IN_1_Pin|MOTOR_FRONT_LEFT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_1_Pin, GPIO_PIN_RESET);
 800158e:	2200      	movs	r2, #0
 8001590:	2133      	movs	r1, #51	; 0x33
 8001592:	4833      	ldr	r0, [pc, #204]	; (8001660 <MX_GPIO_Init+0x15c>)
 8001594:	f002 f8a4 	bl	80036e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_REAR_LEFT_IN_1_GPIO_Port, MOTOR_REAR_LEFT_IN_1_Pin, GPIO_PIN_RESET);
 8001598:	2200      	movs	r2, #0
 800159a:	2104      	movs	r1, #4
 800159c:	4831      	ldr	r0, [pc, #196]	; (8001664 <MX_GPIO_Init+0x160>)
 800159e:	f002 f89f 	bl	80036e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 80015a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a8:	2301      	movs	r3, #1
 80015aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b0:	2302      	movs	r3, #2
 80015b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 80015b4:	f107 0310 	add.w	r3, r7, #16
 80015b8:	4619      	mov	r1, r3
 80015ba:	4827      	ldr	r0, [pc, #156]	; (8001658 <MX_GPIO_Init+0x154>)
 80015bc:	f001 fdfc 	bl	80031b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLUETOOTH_SPI_CMD_Pin BLUETOOTH_SPI_CS_Pin MOTOR_FRONT_RIGHT_IN_1_Pin MOTOR_FRONT_RIGHT_IN_2_Pin
                           MOTOR_REAR_LEFT_IN_2_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_CMD_Pin|BLUETOOTH_SPI_CS_Pin|MOTOR_FRONT_RIGHT_IN_1_Pin|MOTOR_FRONT_RIGHT_IN_2_Pin
 80015c0:	f241 033a 	movw	r3, #4154	; 0x103a
 80015c4:	613b      	str	r3, [r7, #16]
                          |MOTOR_REAR_LEFT_IN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c6:	2301      	movs	r3, #1
 80015c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ce:	2303      	movs	r3, #3
 80015d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d2:	f107 0310 	add.w	r3, r7, #16
 80015d6:	4619      	mov	r1, r3
 80015d8:	481f      	ldr	r0, [pc, #124]	; (8001658 <MX_GPIO_Init+0x154>)
 80015da:	f001 fded 	bl	80031b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUETOOTH_SPI_DAT_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_DAT_Pin;
 80015de:	2304      	movs	r3, #4
 80015e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BLUETOOTH_SPI_DAT_GPIO_Port, &GPIO_InitStruct);
 80015ea:	f107 0310 	add.w	r3, r7, #16
 80015ee:	4619      	mov	r1, r3
 80015f0:	4819      	ldr	r0, [pc, #100]	; (8001658 <MX_GPIO_Init+0x154>)
 80015f2:	f001 fde1 	bl	80031b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUETOOTH_SPI_CLK_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_CLK_Pin;
 80015f6:	2310      	movs	r3, #16
 80015f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fa:	2301      	movs	r3, #1
 80015fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001602:	2303      	movs	r3, #3
 8001604:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUETOOTH_SPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001606:	f107 0310 	add.w	r3, r7, #16
 800160a:	4619      	mov	r1, r3
 800160c:	4813      	ldr	r0, [pc, #76]	; (800165c <MX_GPIO_Init+0x158>)
 800160e:	f001 fdd3 	bl	80031b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_FRONT_LEFT_IN_1_Pin MOTOR_FRONT_LEFT_IN_2_Pin MOTOR_REAR_RIGHT_IN_2_Pin MOTOR_REAR_RIGHT_IN_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_FRONT_LEFT_IN_1_Pin|MOTOR_FRONT_LEFT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_1_Pin;
 8001612:	2333      	movs	r3, #51	; 0x33
 8001614:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001616:	2301      	movs	r3, #1
 8001618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001622:	f107 0310 	add.w	r3, r7, #16
 8001626:	4619      	mov	r1, r3
 8001628:	480d      	ldr	r0, [pc, #52]	; (8001660 <MX_GPIO_Init+0x15c>)
 800162a:	f001 fdc5 	bl	80031b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_REAR_LEFT_IN_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_REAR_LEFT_IN_1_Pin;
 800162e:	2304      	movs	r3, #4
 8001630:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001632:	2301      	movs	r3, #1
 8001634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800163a:	2303      	movs	r3, #3
 800163c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MOTOR_REAR_LEFT_IN_1_GPIO_Port, &GPIO_InitStruct);
 800163e:	f107 0310 	add.w	r3, r7, #16
 8001642:	4619      	mov	r1, r3
 8001644:	4807      	ldr	r0, [pc, #28]	; (8001664 <MX_GPIO_Init+0x160>)
 8001646:	f001 fdb7 	bl	80031b8 <HAL_GPIO_Init>

}
 800164a:	bf00      	nop
 800164c:	3720      	adds	r7, #32
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40021000 	.word	0x40021000
 8001658:	40011000 	.word	0x40011000
 800165c:	40010800 	.word	0x40010800
 8001660:	40010c00 	.word	0x40010c00
 8001664:	40011400 	.word	0x40011400

08001668 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  if ((htim == &htim2) || (htim == &htim3) || (htim == &htim4) || (htim == &htim5))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a0b      	ldr	r2, [pc, #44]	; (80016a0 <HAL_TIM_IC_CaptureCallback+0x38>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d00b      	beq.n	8001690 <HAL_TIM_IC_CaptureCallback+0x28>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <HAL_TIM_IC_CaptureCallback+0x3c>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d007      	beq.n	8001690 <HAL_TIM_IC_CaptureCallback+0x28>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a09      	ldr	r2, [pc, #36]	; (80016a8 <HAL_TIM_IC_CaptureCallback+0x40>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d003      	beq.n	8001690 <HAL_TIM_IC_CaptureCallback+0x28>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a08      	ldr	r2, [pc, #32]	; (80016ac <HAL_TIM_IC_CaptureCallback+0x44>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d103      	bne.n	8001698 <HAL_TIM_IC_CaptureCallback+0x30>
  {
    DRV_updateEncoder(htim);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f007 fb99 	bl	8008dc8 <DRV_updateEncoder>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8001696:	bf00      	nop
 8001698:	bf00      	nop
}
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000774 	.word	0x20000774
 80016a4:	200004a0 	.word	0x200004a0
 80016a8:	20000338 	.word	0x20000338
 80016ac:	200003ec 	.word	0x200003ec

080016b0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Check the handle of the timer triggering this callback and update LED */
  if (htim == &htim1)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a04      	ldr	r2, [pc, #16]	; (80016cc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d101      	bne.n	80016c4 <HAL_TIM_PeriodElapsedCallback+0x14>
  {
    LED_update();
 80016c0:	f008 f8f4 	bl	80098ac <LED_update>
  }
  else
  {
    ; /* Nothing to do */
  }
}
 80016c4:	bf00      	nop
 80016c6:	3708      	adds	r7, #8
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	200006c0 	.word	0x200006c0

080016d0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Check the handle of the UART triggering this callback and actually receive date */
  if (huart == &huart1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a08      	ldr	r2, [pc, #32]	; (80016fc <HAL_UART_RxCpltCallback+0x2c>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d102      	bne.n	80016e6 <HAL_UART_RxCpltCallback+0x16>
  {
    CON_receiveData();
 80016e0:	f007 fa8e 	bl	8008c00 <CON_receiveData>
  }
  else
  {
    ; /* Nothing to do */
  }
}
 80016e4:	e006      	b.n	80016f4 <HAL_UART_RxCpltCallback+0x24>
  else if (huart == &huart2)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a05      	ldr	r2, [pc, #20]	; (8001700 <HAL_UART_RxCpltCallback+0x30>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d102      	bne.n	80016f4 <HAL_UART_RxCpltCallback+0x24>
    MAS_receiveData(&huart2);
 80016ee:	4804      	ldr	r0, [pc, #16]	; (8001700 <HAL_UART_RxCpltCallback+0x30>)
 80016f0:	f008 fa16 	bl	8009b20 <MAS_receiveData>
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000584 	.word	0x20000584
 8001700:	20000828 	.word	0x20000828

08001704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001708:	b672      	cpsid	i
}
 800170a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  LOG_error("Error_Handler() triggered");
 800170c:	4902      	ldr	r1, [pc, #8]	; (8001718 <Error_Handler+0x14>)
 800170e:	2003      	movs	r0, #3
 8001710:	f008 f9a6 	bl	8009a60 <LOG_log>

  while (1)
 8001714:	e7fe      	b.n	8001714 <Error_Handler+0x10>
 8001716:	bf00      	nop
 8001718:	0800b4cc 	.word	0x0800b4cc

0800171c <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
     LOG_error("Wrong parameters: %s@%d", file, line);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	4904      	ldr	r1, [pc, #16]	; (800173c <assert_failed+0x20>)
 800172c:	2003      	movs	r0, #3
 800172e:	f008 f997 	bl	8009a60 <LOG_log>

    return;
 8001732:	bf00      	nop
  /* USER CODE END 6 */
}
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	0800b4e8 	.word	0x0800b4e8

08001740 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <HAL_MspInit+0x5c>)
 8001748:	699b      	ldr	r3, [r3, #24]
 800174a:	4a14      	ldr	r2, [pc, #80]	; (800179c <HAL_MspInit+0x5c>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6193      	str	r3, [r2, #24]
 8001752:	4b12      	ldr	r3, [pc, #72]	; (800179c <HAL_MspInit+0x5c>)
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175e:	4b0f      	ldr	r3, [pc, #60]	; (800179c <HAL_MspInit+0x5c>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	4a0e      	ldr	r2, [pc, #56]	; (800179c <HAL_MspInit+0x5c>)
 8001764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001768:	61d3      	str	r3, [r2, #28]
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <HAL_MspInit+0x5c>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <HAL_MspInit+0x60>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <HAL_MspInit+0x60>)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001792:	bf00      	nop
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	40021000 	.word	0x40021000
 80017a0:	40010000 	.word	0x40010000

080017a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0310 	add.w	r3, r7, #16
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a14      	ldr	r2, [pc, #80]	; (8001810 <HAL_ADC_MspInit+0x6c>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d121      	bne.n	8001808 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017c4:	4b13      	ldr	r3, [pc, #76]	; (8001814 <HAL_ADC_MspInit+0x70>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	4a12      	ldr	r2, [pc, #72]	; (8001814 <HAL_ADC_MspInit+0x70>)
 80017ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ce:	6193      	str	r3, [r2, #24]
 80017d0:	4b10      	ldr	r3, [pc, #64]	; (8001814 <HAL_ADC_MspInit+0x70>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017dc:	4b0d      	ldr	r3, [pc, #52]	; (8001814 <HAL_ADC_MspInit+0x70>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	4a0c      	ldr	r2, [pc, #48]	; (8001814 <HAL_ADC_MspInit+0x70>)
 80017e2:	f043 0304 	orr.w	r3, r3, #4
 80017e6:	6193      	str	r3, [r2, #24]
 80017e8:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <HAL_ADC_MspInit+0x70>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = BATTERY_ADC_Pin;
 80017f4:	2320      	movs	r3, #32
 80017f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017f8:	2303      	movs	r3, #3
 80017fa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATTERY_ADC_GPIO_Port, &GPIO_InitStruct);
 80017fc:	f107 0310 	add.w	r3, r7, #16
 8001800:	4619      	mov	r1, r3
 8001802:	4805      	ldr	r0, [pc, #20]	; (8001818 <HAL_ADC_MspInit+0x74>)
 8001804:	f001 fcd8 	bl	80031b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001808:	bf00      	nop
 800180a:	3720      	adds	r7, #32
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40012400 	.word	0x40012400
 8001814:	40021000 	.word	0x40021000
 8001818:	40010800 	.word	0x40010800

0800181c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a0b      	ldr	r2, [pc, #44]	; (8001858 <HAL_RTC_MspInit+0x3c>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d110      	bne.n	8001850 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800182e:	f001 ffb1 	bl	8003794 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001832:	4b0a      	ldr	r3, [pc, #40]	; (800185c <HAL_RTC_MspInit+0x40>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	4a09      	ldr	r2, [pc, #36]	; (800185c <HAL_RTC_MspInit+0x40>)
 8001838:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800183c:	61d3      	str	r3, [r2, #28]
 800183e:	4b07      	ldr	r3, [pc, #28]	; (800185c <HAL_RTC_MspInit+0x40>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800184a:	4b05      	ldr	r3, [pc, #20]	; (8001860 <HAL_RTC_MspInit+0x44>)
 800184c:	2201      	movs	r2, #1
 800184e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001850:	bf00      	nop
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40002800 	.word	0x40002800
 800185c:	40021000 	.word	0x40021000
 8001860:	4242043c 	.word	0x4242043c

08001864 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a28      	ldr	r2, [pc, #160]	; (8001914 <HAL_TIM_Base_MspInit+0xb0>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d114      	bne.n	80018a0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001876:	4b28      	ldr	r3, [pc, #160]	; (8001918 <HAL_TIM_Base_MspInit+0xb4>)
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	4a27      	ldr	r2, [pc, #156]	; (8001918 <HAL_TIM_Base_MspInit+0xb4>)
 800187c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001880:	6193      	str	r3, [r2, #24]
 8001882:	4b25      	ldr	r3, [pc, #148]	; (8001918 <HAL_TIM_Base_MspInit+0xb4>)
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 4, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	2104      	movs	r1, #4
 8001892:	2019      	movs	r0, #25
 8001894:	f001 fafe 	bl	8002e94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001898:	2019      	movs	r0, #25
 800189a:	f001 fb27 	bl	8002eec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800189e:	e034      	b.n	800190a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM6)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a1d      	ldr	r2, [pc, #116]	; (800191c <HAL_TIM_Base_MspInit+0xb8>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d10c      	bne.n	80018c4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80018aa:	4b1b      	ldr	r3, [pc, #108]	; (8001918 <HAL_TIM_Base_MspInit+0xb4>)
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	4a1a      	ldr	r2, [pc, #104]	; (8001918 <HAL_TIM_Base_MspInit+0xb4>)
 80018b0:	f043 0310 	orr.w	r3, r3, #16
 80018b4:	61d3      	str	r3, [r2, #28]
 80018b6:	4b18      	ldr	r3, [pc, #96]	; (8001918 <HAL_TIM_Base_MspInit+0xb4>)
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	f003 0310 	and.w	r3, r3, #16
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	693b      	ldr	r3, [r7, #16]
}
 80018c2:	e022      	b.n	800190a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM7)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a15      	ldr	r2, [pc, #84]	; (8001920 <HAL_TIM_Base_MspInit+0xbc>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d10c      	bne.n	80018e8 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80018ce:	4b12      	ldr	r3, [pc, #72]	; (8001918 <HAL_TIM_Base_MspInit+0xb4>)
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	4a11      	ldr	r2, [pc, #68]	; (8001918 <HAL_TIM_Base_MspInit+0xb4>)
 80018d4:	f043 0320 	orr.w	r3, r3, #32
 80018d8:	61d3      	str	r3, [r2, #28]
 80018da:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <HAL_TIM_Base_MspInit+0xb4>)
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	f003 0320 	and.w	r3, r3, #32
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
}
 80018e6:	e010      	b.n	800190a <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM8)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0d      	ldr	r2, [pc, #52]	; (8001924 <HAL_TIM_Base_MspInit+0xc0>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d10b      	bne.n	800190a <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <HAL_TIM_Base_MspInit+0xb4>)
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	4a08      	ldr	r2, [pc, #32]	; (8001918 <HAL_TIM_Base_MspInit+0xb4>)
 80018f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018fc:	6193      	str	r3, [r2, #24]
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <HAL_TIM_Base_MspInit+0xb4>)
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001906:	60bb      	str	r3, [r7, #8]
 8001908:	68bb      	ldr	r3, [r7, #8]
}
 800190a:	bf00      	nop
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40012c00 	.word	0x40012c00
 8001918:	40021000 	.word	0x40021000
 800191c:	40001000 	.word	0x40001000
 8001920:	40001400 	.word	0x40001400
 8001924:	40013400 	.word	0x40013400

08001928 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b090      	sub	sp, #64	; 0x40
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001946:	d157      	bne.n	80019f8 <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001948:	4b78      	ldr	r3, [pc, #480]	; (8001b2c <HAL_TIM_Encoder_MspInit+0x204>)
 800194a:	69db      	ldr	r3, [r3, #28]
 800194c:	4a77      	ldr	r2, [pc, #476]	; (8001b2c <HAL_TIM_Encoder_MspInit+0x204>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	61d3      	str	r3, [r2, #28]
 8001954:	4b75      	ldr	r3, [pc, #468]	; (8001b2c <HAL_TIM_Encoder_MspInit+0x204>)
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	62bb      	str	r3, [r7, #40]	; 0x28
 800195e:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001960:	4b72      	ldr	r3, [pc, #456]	; (8001b2c <HAL_TIM_Encoder_MspInit+0x204>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	4a71      	ldr	r2, [pc, #452]	; (8001b2c <HAL_TIM_Encoder_MspInit+0x204>)
 8001966:	f043 0304 	orr.w	r3, r3, #4
 800196a:	6193      	str	r3, [r2, #24]
 800196c:	4b6f      	ldr	r3, [pc, #444]	; (8001b2c <HAL_TIM_Encoder_MspInit+0x204>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001978:	4b6c      	ldr	r3, [pc, #432]	; (8001b2c <HAL_TIM_Encoder_MspInit+0x204>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	4a6b      	ldr	r2, [pc, #428]	; (8001b2c <HAL_TIM_Encoder_MspInit+0x204>)
 800197e:	f043 0308 	orr.w	r3, r3, #8
 8001982:	6193      	str	r3, [r2, #24]
 8001984:	4b69      	ldr	r3, [pc, #420]	; (8001b2c <HAL_TIM_Encoder_MspInit+0x204>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	f003 0308 	and.w	r3, r3, #8
 800198c:	623b      	str	r3, [r7, #32]
 800198e:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_1_IN_1_Pin;
 8001990:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001994:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001996:	2300      	movs	r3, #0
 8001998:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENCODER_1_IN_1_GPIO_Port, &GPIO_InitStruct);
 800199e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019a2:	4619      	mov	r1, r3
 80019a4:	4862      	ldr	r0, [pc, #392]	; (8001b30 <HAL_TIM_Encoder_MspInit+0x208>)
 80019a6:	f001 fc07 	bl	80031b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER_1_IN_2_Pin;
 80019aa:	2308      	movs	r3, #8
 80019ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ae:	2300      	movs	r3, #0
 80019b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENCODER_1_IN_2_GPIO_Port, &GPIO_InitStruct);
 80019b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ba:	4619      	mov	r1, r3
 80019bc:	485d      	ldr	r0, [pc, #372]	; (8001b34 <HAL_TIM_Encoder_MspInit+0x20c>)
 80019be:	f001 fbfb 	bl	80031b8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80019c2:	4b5d      	ldr	r3, [pc, #372]	; (8001b38 <HAL_TIM_Encoder_MspInit+0x210>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019d2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80019d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019e0:	4a55      	ldr	r2, [pc, #340]	; (8001b38 <HAL_TIM_Encoder_MspInit+0x210>)
 80019e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019e4:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80019e6:	2200      	movs	r2, #0
 80019e8:	2105      	movs	r1, #5
 80019ea:	201c      	movs	r0, #28
 80019ec:	f001 fa52 	bl	8002e94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019f0:	201c      	movs	r0, #28
 80019f2:	f001 fa7b 	bl	8002eec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80019f6:	e094      	b.n	8001b22 <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM3)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a4f      	ldr	r2, [pc, #316]	; (8001b3c <HAL_TIM_Encoder_MspInit+0x214>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d12c      	bne.n	8001a5c <HAL_TIM_Encoder_MspInit+0x134>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a02:	4b4a      	ldr	r3, [pc, #296]	; (8001b2c <HAL_TIM_Encoder_MspInit+0x204>)
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	4a49      	ldr	r2, [pc, #292]	; (8001b2c <HAL_TIM_Encoder_MspInit+0x204>)
 8001a08:	f043 0302 	orr.w	r3, r3, #2
 8001a0c:	61d3      	str	r3, [r2, #28]
 8001a0e:	4b47      	ldr	r3, [pc, #284]	; (8001b2c <HAL_TIM_Encoder_MspInit+0x204>)
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	61fb      	str	r3, [r7, #28]
 8001a18:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1a:	4b44      	ldr	r3, [pc, #272]	; (8001b2c <HAL_TIM_Encoder_MspInit+0x204>)
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	4a43      	ldr	r2, [pc, #268]	; (8001b2c <HAL_TIM_Encoder_MspInit+0x204>)
 8001a20:	f043 0304 	orr.w	r3, r3, #4
 8001a24:	6193      	str	r3, [r2, #24]
 8001a26:	4b41      	ldr	r3, [pc, #260]	; (8001b2c <HAL_TIM_Encoder_MspInit+0x204>)
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	f003 0304 	and.w	r3, r3, #4
 8001a2e:	61bb      	str	r3, [r7, #24]
 8001a30:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENCODER_2_IN_1_Pin|ENCODER_2_IN_2_Pin;
 8001a32:	23c0      	movs	r3, #192	; 0xc0
 8001a34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a36:	2300      	movs	r3, #0
 8001a38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a42:	4619      	mov	r1, r3
 8001a44:	483a      	ldr	r0, [pc, #232]	; (8001b30 <HAL_TIM_Encoder_MspInit+0x208>)
 8001a46:	f001 fbb7 	bl	80031b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2105      	movs	r1, #5
 8001a4e:	201d      	movs	r0, #29
 8001a50:	f001 fa20 	bl	8002e94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a54:	201d      	movs	r0, #29
 8001a56:	f001 fa49 	bl	8002eec <HAL_NVIC_EnableIRQ>
}
 8001a5a:	e062      	b.n	8001b22 <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM4)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a37      	ldr	r2, [pc, #220]	; (8001b40 <HAL_TIM_Encoder_MspInit+0x218>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d12c      	bne.n	8001ac0 <HAL_TIM_Encoder_MspInit+0x198>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a66:	4b31      	ldr	r3, [pc, #196]	; (8001b2c <HAL_TIM_Encoder_MspInit+0x204>)
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	4a30      	ldr	r2, [pc, #192]	; (8001b2c <HAL_TIM_Encoder_MspInit+0x204>)
 8001a6c:	f043 0304 	orr.w	r3, r3, #4
 8001a70:	61d3      	str	r3, [r2, #28]
 8001a72:	4b2e      	ldr	r3, [pc, #184]	; (8001b2c <HAL_TIM_Encoder_MspInit+0x204>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	f003 0304 	and.w	r3, r3, #4
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a7e:	4b2b      	ldr	r3, [pc, #172]	; (8001b2c <HAL_TIM_Encoder_MspInit+0x204>)
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	4a2a      	ldr	r2, [pc, #168]	; (8001b2c <HAL_TIM_Encoder_MspInit+0x204>)
 8001a84:	f043 0308 	orr.w	r3, r3, #8
 8001a88:	6193      	str	r3, [r2, #24]
 8001a8a:	4b28      	ldr	r3, [pc, #160]	; (8001b2c <HAL_TIM_Encoder_MspInit+0x204>)
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENCODER_3_IN_1_Pin|ENCODER_3_IN_2_Pin;
 8001a96:	23c0      	movs	r3, #192	; 0xc0
 8001a98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4822      	ldr	r0, [pc, #136]	; (8001b34 <HAL_TIM_Encoder_MspInit+0x20c>)
 8001aaa:	f001 fb85 	bl	80031b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2105      	movs	r1, #5
 8001ab2:	201e      	movs	r0, #30
 8001ab4:	f001 f9ee 	bl	8002e94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ab8:	201e      	movs	r0, #30
 8001aba:	f001 fa17 	bl	8002eec <HAL_NVIC_EnableIRQ>
}
 8001abe:	e030      	b.n	8001b22 <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM5)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a1f      	ldr	r2, [pc, #124]	; (8001b44 <HAL_TIM_Encoder_MspInit+0x21c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d12b      	bne.n	8001b22 <HAL_TIM_Encoder_MspInit+0x1fa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001aca:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <HAL_TIM_Encoder_MspInit+0x204>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	4a17      	ldr	r2, [pc, #92]	; (8001b2c <HAL_TIM_Encoder_MspInit+0x204>)
 8001ad0:	f043 0308 	orr.w	r3, r3, #8
 8001ad4:	61d3      	str	r3, [r2, #28]
 8001ad6:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <HAL_TIM_Encoder_MspInit+0x204>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae2:	4b12      	ldr	r3, [pc, #72]	; (8001b2c <HAL_TIM_Encoder_MspInit+0x204>)
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	4a11      	ldr	r2, [pc, #68]	; (8001b2c <HAL_TIM_Encoder_MspInit+0x204>)
 8001ae8:	f043 0304 	orr.w	r3, r3, #4
 8001aec:	6193      	str	r3, [r2, #24]
 8001aee:	4b0f      	ldr	r3, [pc, #60]	; (8001b2c <HAL_TIM_Encoder_MspInit+0x204>)
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	60bb      	str	r3, [r7, #8]
 8001af8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_4_IN_1_Pin|ENCODER_4_IN_2_Pin;
 8001afa:	2303      	movs	r3, #3
 8001afc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001afe:	2300      	movs	r3, #0
 8001b00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4808      	ldr	r0, [pc, #32]	; (8001b30 <HAL_TIM_Encoder_MspInit+0x208>)
 8001b0e:	f001 fb53 	bl	80031b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2105      	movs	r1, #5
 8001b16:	2032      	movs	r0, #50	; 0x32
 8001b18:	f001 f9bc 	bl	8002e94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001b1c:	2032      	movs	r0, #50	; 0x32
 8001b1e:	f001 f9e5 	bl	8002eec <HAL_NVIC_EnableIRQ>
}
 8001b22:	bf00      	nop
 8001b24:	3740      	adds	r7, #64	; 0x40
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	40010800 	.word	0x40010800
 8001b34:	40010c00 	.word	0x40010c00
 8001b38:	40010000 	.word	0x40010000
 8001b3c:	40000400 	.word	0x40000400
 8001b40:	40000800 	.word	0x40000800
 8001b44:	40000c00 	.word	0x40000c00

08001b48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 0310 	add.w	r3, r7, #16
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM8)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a10      	ldr	r2, [pc, #64]	; (8001ba4 <HAL_TIM_MspPostInit+0x5c>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d118      	bne.n	8001b9a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b68:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <HAL_TIM_MspPostInit+0x60>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ba8 <HAL_TIM_MspPostInit+0x60>)
 8001b6e:	f043 0310 	orr.w	r3, r3, #16
 8001b72:	6193      	str	r3, [r2, #24]
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <HAL_TIM_MspPostInit+0x60>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	f003 0310 	and.w	r3, r3, #16
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_FRONT_LEFT_PWM_Pin|MOTOR_FRONT_RIGHT_PWM_Pin|MOTOR_REAR_LEFT_PWM_Pin|MOTOR_REAR_RIGHT_PWM_Pin;
 8001b80:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001b84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b8e:	f107 0310 	add.w	r3, r7, #16
 8001b92:	4619      	mov	r1, r3
 8001b94:	4805      	ldr	r0, [pc, #20]	; (8001bac <HAL_TIM_MspPostInit+0x64>)
 8001b96:	f001 fb0f 	bl	80031b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001b9a:	bf00      	nop
 8001b9c:	3720      	adds	r7, #32
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40013400 	.word	0x40013400
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	40011000 	.word	0x40011000

08001bb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	; 0x28
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 0318 	add.w	r3, r7, #24
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a3f      	ldr	r2, [pc, #252]	; (8001cc8 <HAL_UART_MspInit+0x118>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d13a      	bne.n	8001c46 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001bd0:	4b3e      	ldr	r3, [pc, #248]	; (8001ccc <HAL_UART_MspInit+0x11c>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	4a3d      	ldr	r2, [pc, #244]	; (8001ccc <HAL_UART_MspInit+0x11c>)
 8001bd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bda:	6193      	str	r3, [r2, #24]
 8001bdc:	4b3b      	ldr	r3, [pc, #236]	; (8001ccc <HAL_UART_MspInit+0x11c>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be8:	4b38      	ldr	r3, [pc, #224]	; (8001ccc <HAL_UART_MspInit+0x11c>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	4a37      	ldr	r2, [pc, #220]	; (8001ccc <HAL_UART_MspInit+0x11c>)
 8001bee:	f043 0304 	orr.w	r3, r3, #4
 8001bf2:	6193      	str	r3, [r2, #24]
 8001bf4:	4b35      	ldr	r3, [pc, #212]	; (8001ccc <HAL_UART_MspInit+0x11c>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c06:	2302      	movs	r3, #2
 8001c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0e:	f107 0318 	add.w	r3, r7, #24
 8001c12:	4619      	mov	r1, r3
 8001c14:	482e      	ldr	r0, [pc, #184]	; (8001cd0 <HAL_UART_MspInit+0x120>)
 8001c16:	f001 facf 	bl	80031b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c28:	f107 0318 	add.w	r3, r7, #24
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4828      	ldr	r0, [pc, #160]	; (8001cd0 <HAL_UART_MspInit+0x120>)
 8001c30:	f001 fac2 	bl	80031b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8001c34:	2200      	movs	r2, #0
 8001c36:	2103      	movs	r1, #3
 8001c38:	2025      	movs	r0, #37	; 0x25
 8001c3a:	f001 f92b 	bl	8002e94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c3e:	2025      	movs	r0, #37	; 0x25
 8001c40:	f001 f954 	bl	8002eec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c44:	e03c      	b.n	8001cc0 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a22      	ldr	r2, [pc, #136]	; (8001cd4 <HAL_UART_MspInit+0x124>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d137      	bne.n	8001cc0 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c50:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <HAL_UART_MspInit+0x11c>)
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	4a1d      	ldr	r2, [pc, #116]	; (8001ccc <HAL_UART_MspInit+0x11c>)
 8001c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c5a:	61d3      	str	r3, [r2, #28]
 8001c5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <HAL_UART_MspInit+0x11c>)
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c68:	4b18      	ldr	r3, [pc, #96]	; (8001ccc <HAL_UART_MspInit+0x11c>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	4a17      	ldr	r2, [pc, #92]	; (8001ccc <HAL_UART_MspInit+0x11c>)
 8001c6e:	f043 0304 	orr.w	r3, r3, #4
 8001c72:	6193      	str	r3, [r2, #24]
 8001c74:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <HAL_UART_MspInit+0x11c>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c80:	2304      	movs	r3, #4
 8001c82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c84:	2302      	movs	r3, #2
 8001c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8c:	f107 0318 	add.w	r3, r7, #24
 8001c90:	4619      	mov	r1, r3
 8001c92:	480f      	ldr	r0, [pc, #60]	; (8001cd0 <HAL_UART_MspInit+0x120>)
 8001c94:	f001 fa90 	bl	80031b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c98:	2308      	movs	r3, #8
 8001c9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca4:	f107 0318 	add.w	r3, r7, #24
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4809      	ldr	r0, [pc, #36]	; (8001cd0 <HAL_UART_MspInit+0x120>)
 8001cac:	f001 fa84 	bl	80031b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2102      	movs	r1, #2
 8001cb4:	2026      	movs	r0, #38	; 0x26
 8001cb6:	f001 f8ed 	bl	8002e94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cba:	2026      	movs	r0, #38	; 0x26
 8001cbc:	f001 f916 	bl	8002eec <HAL_NVIC_EnableIRQ>
}
 8001cc0:	bf00      	nop
 8001cc2:	3728      	adds	r7, #40	; 0x28
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40013800 	.word	0x40013800
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	40010800 	.word	0x40010800
 8001cd4:	40004400 	.word	0x40004400

08001cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  LOG_error("NMI_Handler() triggered");
 8001cdc:	4902      	ldr	r1, [pc, #8]	; (8001ce8 <NMI_Handler+0x10>)
 8001cde:	2003      	movs	r0, #3
 8001ce0:	f007 febe 	bl	8009a60 <LOG_log>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ce4:	e7fe      	b.n	8001ce4 <NMI_Handler+0xc>
 8001ce6:	bf00      	nop
 8001ce8:	0800b500 	.word	0x0800b500

08001cec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  LOG_error("HardFault_Handler() triggered");
 8001cf0:	4902      	ldr	r1, [pc, #8]	; (8001cfc <HardFault_Handler+0x10>)
 8001cf2:	2003      	movs	r0, #3
 8001cf4:	f007 feb4 	bl	8009a60 <LOG_log>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <HardFault_Handler+0xc>
 8001cfa:	bf00      	nop
 8001cfc:	0800b518 	.word	0x0800b518

08001d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  LOG_error("MemManage_Handler() triggered");
 8001d04:	4902      	ldr	r1, [pc, #8]	; (8001d10 <MemManage_Handler+0x10>)
 8001d06:	2003      	movs	r0, #3
 8001d08:	f007 feaa 	bl	8009a60 <LOG_log>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d0c:	e7fe      	b.n	8001d0c <MemManage_Handler+0xc>
 8001d0e:	bf00      	nop
 8001d10:	0800b538 	.word	0x0800b538

08001d14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  LOG_error("BusFault_Handler() triggered");
 8001d18:	4902      	ldr	r1, [pc, #8]	; (8001d24 <BusFault_Handler+0x10>)
 8001d1a:	2003      	movs	r0, #3
 8001d1c:	f007 fea0 	bl	8009a60 <LOG_log>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d20:	e7fe      	b.n	8001d20 <BusFault_Handler+0xc>
 8001d22:	bf00      	nop
 8001d24:	0800b558 	.word	0x0800b558

08001d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  LOG_error("UsageFault_Handler() triggered");
 8001d2c:	4902      	ldr	r1, [pc, #8]	; (8001d38 <UsageFault_Handler+0x10>)
 8001d2e:	2003      	movs	r0, #3
 8001d30:	f007 fe96 	bl	8009a60 <LOG_log>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d34:	e7fe      	b.n	8001d34 <UsageFault_Handler+0xc>
 8001d36:	bf00      	nop
 8001d38:	0800b578 	.word	0x0800b578

08001d3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
  LOG_error("SVC_Handler() triggered");
 8001d40:	4902      	ldr	r1, [pc, #8]	; (8001d4c <SVC_Handler+0x10>)
 8001d42:	2003      	movs	r0, #3
 8001d44:	f007 fe8c 	bl	8009a60 <LOG_log>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	0800b598 	.word	0x0800b598

08001d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  LOG_error("DebugMon_Handler() triggered");
 8001d54:	4902      	ldr	r1, [pc, #8]	; (8001d60 <DebugMon_Handler+0x10>)
 8001d56:	2003      	movs	r0, #3
 8001d58:	f007 fe82 	bl	8009a60 <LOG_log>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	0800b5b0 	.word	0x0800b5b0

08001d64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  LOG_error("PendSV_Handler() triggered");
 8001d68:	4902      	ldr	r1, [pc, #8]	; (8001d74 <PendSV_Handler+0x10>)
 8001d6a:	2003      	movs	r0, #3
 8001d6c:	f007 fe78 	bl	8009a60 <LOG_log>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d70:	bf00      	nop
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	0800b5d0 	.word	0x0800b5d0

08001d78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d7c:	f000 f968 	bl	8002050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d80:	bf00      	nop
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d88:	4802      	ldr	r0, [pc, #8]	; (8001d94 <TIM1_UP_IRQHandler+0x10>)
 8001d8a:	f004 fa05 	bl	8006198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	200006c0 	.word	0x200006c0

08001d98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d9c:	4802      	ldr	r0, [pc, #8]	; (8001da8 <TIM2_IRQHandler+0x10>)
 8001d9e:	f004 f9fb 	bl	8006198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000774 	.word	0x20000774

08001dac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001db0:	4802      	ldr	r0, [pc, #8]	; (8001dbc <TIM3_IRQHandler+0x10>)
 8001db2:	f004 f9f1 	bl	8006198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	200004a0 	.word	0x200004a0

08001dc0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001dc4:	4802      	ldr	r0, [pc, #8]	; (8001dd0 <TIM4_IRQHandler+0x10>)
 8001dc6:	f004 f9e7 	bl	8006198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000338 	.word	0x20000338

08001dd4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001dd8:	4802      	ldr	r0, [pc, #8]	; (8001de4 <USART1_IRQHandler+0x10>)
 8001dda:	f005 ff3d 	bl	8007c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000584 	.word	0x20000584

08001de8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001dec:	4802      	ldr	r0, [pc, #8]	; (8001df8 <USART2_IRQHandler+0x10>)
 8001dee:	f005 ff33 	bl	8007c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000828 	.word	0x20000828

08001dfc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001e00:	4802      	ldr	r0, [pc, #8]	; (8001e0c <TIM5_IRQHandler+0x10>)
 8001e02:	f004 f9c9 	bl	8006198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	200003ec 	.word	0x200003ec

08001e10 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	e00a      	b.n	8001e38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e22:	f3af 8000 	nop.w
 8001e26:	4601      	mov	r1, r0
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	1c5a      	adds	r2, r3, #1
 8001e2c:	60ba      	str	r2, [r7, #8]
 8001e2e:	b2ca      	uxtb	r2, r1
 8001e30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	3301      	adds	r3, #1
 8001e36:	617b      	str	r3, [r7, #20]
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	dbf0      	blt.n	8001e22 <_read+0x12>
	}

return len;
 8001e40:	687b      	ldr	r3, [r7, #4]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
	...

08001e4c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d00a      	beq.n	8001e74 <_write+0x28>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d007      	beq.n	8001e74 <_write+0x28>
  {
    errno = EBADF;
 8001e64:	f008 f8d0 	bl	800a008 <__errno>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2209      	movs	r2, #9
 8001e6c:	601a      	str	r2, [r3, #0]
    return -1;
 8001e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e72:	e00f      	b.n	8001e94 <_write+0x48>
  }

  HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 1000);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e7c:	68b9      	ldr	r1, [r7, #8]
 8001e7e:	4807      	ldr	r0, [pc, #28]	; (8001e9c <_write+0x50>)
 8001e80:	f005 fe28 	bl	8007ad4 <HAL_UART_Transmit>
 8001e84:	4603      	mov	r3, r0
 8001e86:	75fb      	strb	r3, [r7, #23]
  return (status == HAL_OK ? len : 0);
 8001e88:	7dfb      	ldrb	r3, [r7, #23]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <_write+0x46>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	e000      	b.n	8001e94 <_write+0x48>
 8001e92:	2300      	movs	r3, #0

}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3718      	adds	r7, #24
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000584 	.word	0x20000584

08001ea0 <_close>:

int _close(int file)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
	return -1;
 8001ea8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr

08001eb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
 8001ebe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ec6:	605a      	str	r2, [r3, #4]
	return 0;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <_isatty>:

int _isatty(int file)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
	return 1;
 8001edc:	2301      	movs	r3, #1
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr

08001ee8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b085      	sub	sp, #20
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
	return 0;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr

08001f00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f08:	4a14      	ldr	r2, [pc, #80]	; (8001f5c <_sbrk+0x5c>)
 8001f0a:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <_sbrk+0x60>)
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f14:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <_sbrk+0x64>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d102      	bne.n	8001f22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f1c:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <_sbrk+0x64>)
 8001f1e:	4a12      	ldr	r2, [pc, #72]	; (8001f68 <_sbrk+0x68>)
 8001f20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f22:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <_sbrk+0x64>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d207      	bcs.n	8001f40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f30:	f008 f86a 	bl	800a008 <__errno>
 8001f34:	4603      	mov	r3, r0
 8001f36:	220c      	movs	r2, #12
 8001f38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3e:	e009      	b.n	8001f54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <_sbrk+0x64>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f46:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <_sbrk+0x64>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	4a05      	ldr	r2, [pc, #20]	; (8001f64 <_sbrk+0x64>)
 8001f50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f52:	68fb      	ldr	r3, [r7, #12]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	2000c000 	.word	0x2000c000
 8001f60:	00000400 	.word	0x00000400
 8001f64:	200000a4 	.word	0x200000a4
 8001f68:	20000968 	.word	0x20000968

08001f6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr

08001f78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f78:	480c      	ldr	r0, [pc, #48]	; (8001fac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f7a:	490d      	ldr	r1, [pc, #52]	; (8001fb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f7c:	4a0d      	ldr	r2, [pc, #52]	; (8001fb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f80:	e002      	b.n	8001f88 <LoopCopyDataInit>

08001f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f86:	3304      	adds	r3, #4

08001f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f8c:	d3f9      	bcc.n	8001f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f8e:	4a0a      	ldr	r2, [pc, #40]	; (8001fb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f90:	4c0a      	ldr	r4, [pc, #40]	; (8001fbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f94:	e001      	b.n	8001f9a <LoopFillZerobss>

08001f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f98:	3204      	adds	r2, #4

08001f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f9c:	d3fb      	bcc.n	8001f96 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f9e:	f7ff ffe5 	bl	8001f6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fa2:	f008 f837 	bl	800a014 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fa6:	f7fe fd4b 	bl	8000a40 <main>
  bx lr
 8001faa:	4770      	bx	lr
  ldr r0, =_sdata
 8001fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fb0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001fb4:	0800be80 	.word	0x0800be80
  ldr r2, =_sbss
 8001fb8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001fbc:	20000964 	.word	0x20000964

08001fc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fc0:	e7fe      	b.n	8001fc0 <ADC1_2_IRQHandler>
	...

08001fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fc8:	4b08      	ldr	r3, [pc, #32]	; (8001fec <HAL_Init+0x28>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a07      	ldr	r2, [pc, #28]	; (8001fec <HAL_Init+0x28>)
 8001fce:	f043 0310 	orr.w	r3, r3, #16
 8001fd2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fd4:	2003      	movs	r0, #3
 8001fd6:	f000 ff3d 	bl	8002e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fda:	2000      	movs	r0, #0
 8001fdc:	f000 f808 	bl	8001ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fe0:	f7ff fbae 	bl	8001740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40022000 	.word	0x40022000

08001ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ff8:	4b12      	ldr	r3, [pc, #72]	; (8002044 <HAL_InitTick+0x54>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4b12      	ldr	r3, [pc, #72]	; (8002048 <HAL_InitTick+0x58>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	4619      	mov	r1, r3
 8002002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002006:	fbb3 f3f1 	udiv	r3, r3, r1
 800200a:	fbb2 f3f3 	udiv	r3, r2, r3
 800200e:	4618      	mov	r0, r3
 8002010:	f000 ff84 	bl	8002f1c <HAL_SYSTICK_Config>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e00e      	b.n	800203c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b0f      	cmp	r3, #15
 8002022:	d80a      	bhi.n	800203a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002024:	2200      	movs	r2, #0
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	f04f 30ff 	mov.w	r0, #4294967295
 800202c:	f000 ff32 	bl	8002e94 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002030:	4a06      	ldr	r2, [pc, #24]	; (800204c <HAL_InitTick+0x5c>)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002036:	2300      	movs	r3, #0
 8002038:	e000      	b.n	800203c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
}
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	20000000 	.word	0x20000000
 8002048:	20000008 	.word	0x20000008
 800204c:	20000004 	.word	0x20000004

08002050 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002054:	4b05      	ldr	r3, [pc, #20]	; (800206c <HAL_IncTick+0x1c>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	4b05      	ldr	r3, [pc, #20]	; (8002070 <HAL_IncTick+0x20>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4413      	add	r3, r2
 8002060:	4a03      	ldr	r2, [pc, #12]	; (8002070 <HAL_IncTick+0x20>)
 8002062:	6013      	str	r3, [r2, #0]
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	20000008 	.word	0x20000008
 8002070:	20000950 	.word	0x20000950

08002074 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return uwTick;
 8002078:	4b02      	ldr	r3, [pc, #8]	; (8002084 <HAL_GetTick+0x10>)
 800207a:	681b      	ldr	r3, [r3, #0]
}
 800207c:	4618      	mov	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr
 8002084:	20000950 	.word	0x20000950

08002088 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002090:	2300      	movs	r3, #0
 8002092:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002094:	2300      	movs	r3, #0
 8002096:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002098:	2300      	movs	r3, #0
 800209a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800209c:	2300      	movs	r3, #0
 800209e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e188      	b.n	80023bc <HAL_ADC_Init+0x334>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a8c      	ldr	r2, [pc, #560]	; (80022e0 <HAL_ADC_Init+0x258>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d00e      	beq.n	80020d2 <HAL_ADC_Init+0x4a>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a8a      	ldr	r2, [pc, #552]	; (80022e4 <HAL_ADC_Init+0x25c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d009      	beq.n	80020d2 <HAL_ADC_Init+0x4a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a89      	ldr	r2, [pc, #548]	; (80022e8 <HAL_ADC_Init+0x260>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d004      	beq.n	80020d2 <HAL_ADC_Init+0x4a>
 80020c8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80020cc:	4887      	ldr	r0, [pc, #540]	; (80022ec <HAL_ADC_Init+0x264>)
 80020ce:	f7ff fb25 	bl	800171c <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d009      	beq.n	80020ee <HAL_ADC_Init+0x66>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020e2:	d004      	beq.n	80020ee <HAL_ADC_Init+0x66>
 80020e4:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 80020e8:	4880      	ldr	r0, [pc, #512]	; (80022ec <HAL_ADC_Init+0x264>)
 80020ea:	f7ff fb17 	bl	800171c <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d009      	beq.n	800210a <HAL_ADC_Init+0x82>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020fe:	d004      	beq.n	800210a <HAL_ADC_Init+0x82>
 8002100:	f240 11b5 	movw	r1, #437	; 0x1b5
 8002104:	4879      	ldr	r0, [pc, #484]	; (80022ec <HAL_ADC_Init+0x264>)
 8002106:	f7ff fb09 	bl	800171c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	7b1b      	ldrb	r3, [r3, #12]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d008      	beq.n	8002124 <HAL_ADC_Init+0x9c>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	7b1b      	ldrb	r3, [r3, #12]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d004      	beq.n	8002124 <HAL_ADC_Init+0x9c>
 800211a:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 800211e:	4873      	ldr	r0, [pc, #460]	; (80022ec <HAL_ADC_Init+0x264>)
 8002120:	f7ff fafc 	bl	800171c <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d044      	beq.n	80021b6 <HAL_ADC_Init+0x12e>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69db      	ldr	r3, [r3, #28]
 8002130:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002134:	d03f      	beq.n	80021b6 <HAL_ADC_Init+0x12e>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800213e:	d03a      	beq.n	80021b6 <HAL_ADC_Init+0x12e>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	69db      	ldr	r3, [r3, #28]
 8002144:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002148:	d035      	beq.n	80021b6 <HAL_ADC_Init+0x12e>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8002152:	d030      	beq.n	80021b6 <HAL_ADC_Init+0x12e>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800215c:	d02b      	beq.n	80021b6 <HAL_ADC_Init+0x12e>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d027      	beq.n	80021b6 <HAL_ADC_Init+0x12e>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800216e:	d022      	beq.n	80021b6 <HAL_ADC_Init+0x12e>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8002178:	d01d      	beq.n	80021b6 <HAL_ADC_Init+0x12e>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8002182:	d018      	beq.n	80021b6 <HAL_ADC_Init+0x12e>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	69db      	ldr	r3, [r3, #28]
 8002188:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800218c:	d013      	beq.n	80021b6 <HAL_ADC_Init+0x12e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002196:	d00e      	beq.n	80021b6 <HAL_ADC_Init+0x12e>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80021a0:	d009      	beq.n	80021b6 <HAL_ADC_Init+0x12e>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80021aa:	d004      	beq.n	80021b6 <HAL_ADC_Init+0x12e>
 80021ac:	f240 11b7 	movw	r1, #439	; 0x1b7
 80021b0:	484e      	ldr	r0, [pc, #312]	; (80022ec <HAL_ADC_Init+0x264>)
 80021b2:	f7ff fab3 	bl	800171c <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d02a      	beq.n	8002214 <HAL_ADC_Init+0x18c>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_ADC_Init+0x146>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	2b10      	cmp	r3, #16
 80021cc:	d904      	bls.n	80021d8 <HAL_ADC_Init+0x150>
 80021ce:	f240 11bb 	movw	r1, #443	; 0x1bb
 80021d2:	4846      	ldr	r0, [pc, #280]	; (80022ec <HAL_ADC_Init+0x264>)
 80021d4:	f7ff faa2 	bl	800171c <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	7d1b      	ldrb	r3, [r3, #20]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d008      	beq.n	80021f2 <HAL_ADC_Init+0x16a>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	7d1b      	ldrb	r3, [r3, #20]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d004      	beq.n	80021f2 <HAL_ADC_Init+0x16a>
 80021e8:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 80021ec:	483f      	ldr	r0, [pc, #252]	; (80022ec <HAL_ADC_Init+0x264>)
 80021ee:	f7ff fa95 	bl	800171c <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	7d1b      	ldrb	r3, [r3, #20]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00c      	beq.n	8002214 <HAL_ADC_Init+0x18c>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_ADC_Init+0x182>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	2b08      	cmp	r3, #8
 8002208:	d904      	bls.n	8002214 <HAL_ADC_Init+0x18c>
 800220a:	f240 11bf 	movw	r1, #447	; 0x1bf
 800220e:	4837      	ldr	r0, [pc, #220]	; (80022ec <HAL_ADC_Init+0x264>)
 8002210:	f7ff fa84 	bl	800171c <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002218:	2b00      	cmp	r3, #0
 800221a:	d109      	bne.n	8002230 <HAL_ADC_Init+0x1a8>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7ff faba 	bl	80017a4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 fd01 	bl	8002c38 <ADC_ConversionStop_Disable>
 8002236:	4603      	mov	r3, r0
 8002238:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223e:	f003 0310 	and.w	r3, r3, #16
 8002242:	2b00      	cmp	r3, #0
 8002244:	f040 80b1 	bne.w	80023aa <HAL_ADC_Init+0x322>
 8002248:	7dfb      	ldrb	r3, [r7, #23]
 800224a:	2b00      	cmp	r3, #0
 800224c:	f040 80ad 	bne.w	80023aa <HAL_ADC_Init+0x322>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002254:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002258:	f023 0302 	bic.w	r3, r3, #2
 800225c:	f043 0202 	orr.w	r2, r3, #2
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	491e      	ldr	r1, [pc, #120]	; (80022e8 <HAL_ADC_Init+0x260>)
 800226e:	428b      	cmp	r3, r1
 8002270:	d10a      	bne.n	8002288 <HAL_ADC_Init+0x200>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800227a:	d002      	beq.n	8002282 <HAL_ADC_Init+0x1fa>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	e004      	b.n	800228c <HAL_ADC_Init+0x204>
 8002282:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002286:	e001      	b.n	800228c <HAL_ADC_Init+0x204>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800228c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	7b1b      	ldrb	r3, [r3, #12]
 8002292:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002294:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	4313      	orrs	r3, r2
 800229a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022a4:	d003      	beq.n	80022ae <HAL_ADC_Init+0x226>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d102      	bne.n	80022b4 <HAL_ADC_Init+0x22c>
 80022ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022b2:	e000      	b.n	80022b6 <HAL_ADC_Init+0x22e>
 80022b4:	2300      	movs	r3, #0
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	7d1b      	ldrb	r3, [r3, #20]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d121      	bne.n	8002308 <HAL_ADC_Init+0x280>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	7b1b      	ldrb	r3, [r3, #12]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d111      	bne.n	80022f0 <HAL_ADC_Init+0x268>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	3b01      	subs	r3, #1
 80022d2:	035a      	lsls	r2, r3, #13
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	e013      	b.n	8002308 <HAL_ADC_Init+0x280>
 80022e0:	40012400 	.word	0x40012400
 80022e4:	40012800 	.word	0x40012800
 80022e8:	40013c00 	.word	0x40013c00
 80022ec:	0800b5ec 	.word	0x0800b5ec
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f4:	f043 0220 	orr.w	r2, r3, #32
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002300:	f043 0201 	orr.w	r2, r3, #1
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	430a      	orrs	r2, r1
 800231a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	4b28      	ldr	r3, [pc, #160]	; (80023c4 <HAL_ADC_Init+0x33c>)
 8002324:	4013      	ands	r3, r2
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	6812      	ldr	r2, [r2, #0]
 800232a:	68b9      	ldr	r1, [r7, #8]
 800232c:	430b      	orrs	r3, r1
 800232e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002338:	d003      	beq.n	8002342 <HAL_ADC_Init+0x2ba>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d104      	bne.n	800234c <HAL_ADC_Init+0x2c4>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	3b01      	subs	r3, #1
 8002348:	051b      	lsls	r3, r3, #20
 800234a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002352:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	430a      	orrs	r2, r1
 800235e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	4b18      	ldr	r3, [pc, #96]	; (80023c8 <HAL_ADC_Init+0x340>)
 8002368:	4013      	ands	r3, r2
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	429a      	cmp	r2, r3
 800236e:	d10b      	bne.n	8002388 <HAL_ADC_Init+0x300>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237a:	f023 0303 	bic.w	r3, r3, #3
 800237e:	f043 0201 	orr.w	r2, r3, #1
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002386:	e018      	b.n	80023ba <HAL_ADC_Init+0x332>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238c:	f023 0312 	bic.w	r3, r3, #18
 8002390:	f043 0210 	orr.w	r2, r3, #16
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239c:	f043 0201 	orr.w	r2, r3, #1
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023a8:	e007      	b.n	80023ba <HAL_ADC_Init+0x332>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ae:	f043 0210 	orr.w	r2, r3, #16
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80023ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	ffe1f7fd 	.word	0xffe1f7fd
 80023c8:	ff1f0efe 	.word	0xff1f0efe

080023cc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a5a      	ldr	r2, [pc, #360]	; (8002548 <HAL_ADC_Start+0x17c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d00e      	beq.n	8002400 <HAL_ADC_Start+0x34>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a59      	ldr	r2, [pc, #356]	; (800254c <HAL_ADC_Start+0x180>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d009      	beq.n	8002400 <HAL_ADC_Start+0x34>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a57      	ldr	r2, [pc, #348]	; (8002550 <HAL_ADC_Start+0x184>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d004      	beq.n	8002400 <HAL_ADC_Start+0x34>
 80023f6:	f240 411b 	movw	r1, #1051	; 0x41b
 80023fa:	4856      	ldr	r0, [pc, #344]	; (8002554 <HAL_ADC_Start+0x188>)
 80023fc:	f7ff f98e 	bl	800171c <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002406:	2b01      	cmp	r3, #1
 8002408:	d101      	bne.n	800240e <HAL_ADC_Start+0x42>
 800240a:	2302      	movs	r3, #2
 800240c:	e098      	b.n	8002540 <HAL_ADC_Start+0x174>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 fbb4 	bl	8002b84 <ADC_Enable>
 800241c:	4603      	mov	r3, r0
 800241e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	2b00      	cmp	r3, #0
 8002424:	f040 8087 	bne.w	8002536 <HAL_ADC_Start+0x16a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002430:	f023 0301 	bic.w	r3, r3, #1
 8002434:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a42      	ldr	r2, [pc, #264]	; (800254c <HAL_ADC_Start+0x180>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d105      	bne.n	8002452 <HAL_ADC_Start+0x86>
 8002446:	4b40      	ldr	r3, [pc, #256]	; (8002548 <HAL_ADC_Start+0x17c>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d115      	bne.n	800247e <HAL_ADC_Start+0xb2>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002456:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002468:	2b00      	cmp	r3, #0
 800246a:	d026      	beq.n	80024ba <HAL_ADC_Start+0xee>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002470:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002474:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800247c:	e01d      	b.n	80024ba <HAL_ADC_Start+0xee>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002482:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a2e      	ldr	r2, [pc, #184]	; (8002548 <HAL_ADC_Start+0x17c>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d004      	beq.n	800249e <HAL_ADC_Start+0xd2>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a2c      	ldr	r2, [pc, #176]	; (800254c <HAL_ADC_Start+0x180>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d10d      	bne.n	80024ba <HAL_ADC_Start+0xee>
 800249e:	4b2a      	ldr	r3, [pc, #168]	; (8002548 <HAL_ADC_Start+0x17c>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d007      	beq.n	80024ba <HAL_ADC_Start+0xee>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d006      	beq.n	80024d4 <HAL_ADC_Start+0x108>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ca:	f023 0206 	bic.w	r2, r3, #6
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80024d2:	e002      	b.n	80024da <HAL_ADC_Start+0x10e>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f06f 0202 	mvn.w	r2, #2
 80024ea:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80024f6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80024fa:	d113      	bne.n	8002524 <HAL_ADC_Start+0x158>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002500:	4a12      	ldr	r2, [pc, #72]	; (800254c <HAL_ADC_Start+0x180>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d105      	bne.n	8002512 <HAL_ADC_Start+0x146>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002506:	4b10      	ldr	r3, [pc, #64]	; (8002548 <HAL_ADC_Start+0x17c>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800250e:	2b00      	cmp	r3, #0
 8002510:	d108      	bne.n	8002524 <HAL_ADC_Start+0x158>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002520:	609a      	str	r2, [r3, #8]
 8002522:	e00c      	b.n	800253e <HAL_ADC_Start+0x172>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	e003      	b.n	800253e <HAL_ADC_Start+0x172>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800253e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3710      	adds	r7, #16
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40012400 	.word	0x40012400
 800254c:	40012800 	.word	0x40012800
 8002550:	40013c00 	.word	0x40013c00
 8002554:	0800b5ec 	.word	0x0800b5ec

08002558 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002558:	b590      	push	{r4, r7, lr}
 800255a:	b087      	sub	sp, #28
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002566:	2300      	movs	r3, #0
 8002568:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a80      	ldr	r2, [pc, #512]	; (8002774 <HAL_ADC_PollForConversion+0x21c>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d00e      	beq.n	8002596 <HAL_ADC_PollForConversion+0x3e>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a7e      	ldr	r2, [pc, #504]	; (8002778 <HAL_ADC_PollForConversion+0x220>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d009      	beq.n	8002596 <HAL_ADC_PollForConversion+0x3e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a7d      	ldr	r2, [pc, #500]	; (800277c <HAL_ADC_PollForConversion+0x224>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d004      	beq.n	8002596 <HAL_ADC_PollForConversion+0x3e>
 800258c:	f240 41bd 	movw	r1, #1213	; 0x4bd
 8002590:	487b      	ldr	r0, [pc, #492]	; (8002780 <HAL_ADC_PollForConversion+0x228>)
 8002592:	f7ff f8c3 	bl	800171c <assert_failed>
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002596:	f7ff fd6d 	bl	8002074 <HAL_GetTick>
 800259a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00b      	beq.n	80025c2 <HAL_ADC_PollForConversion+0x6a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ae:	f043 0220 	orr.w	r2, r3, #32
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e0d3      	b.n	800276a <HAL_ADC_PollForConversion+0x212>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d131      	bne.n	8002634 <HAL_ADC_PollForConversion+0xdc>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d12a      	bne.n	8002634 <HAL_ADC_PollForConversion+0xdc>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80025de:	e021      	b.n	8002624 <HAL_ADC_PollForConversion+0xcc>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e6:	d01d      	beq.n	8002624 <HAL_ADC_PollForConversion+0xcc>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d007      	beq.n	80025fe <HAL_ADC_PollForConversion+0xa6>
 80025ee:	f7ff fd41 	bl	8002074 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d212      	bcs.n	8002624 <HAL_ADC_PollForConversion+0xcc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10b      	bne.n	8002624 <HAL_ADC_PollForConversion+0xcc>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002610:	f043 0204 	orr.w	r2, r3, #4
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e0a2      	b.n	800276a <HAL_ADC_PollForConversion+0x212>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0d6      	beq.n	80025e0 <HAL_ADC_PollForConversion+0x88>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002632:	e070      	b.n	8002716 <HAL_ADC_PollForConversion+0x1be>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002634:	4b53      	ldr	r3, [pc, #332]	; (8002784 <HAL_ADC_PollForConversion+0x22c>)
 8002636:	681c      	ldr	r4, [r3, #0]
 8002638:	2002      	movs	r0, #2
 800263a:	f001 ff7d 	bl	8004538 <HAL_RCCEx_GetPeriphCLKFreq>
 800263e:	4603      	mov	r3, r0
 8002640:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6919      	ldr	r1, [r3, #16]
 800264a:	4b4f      	ldr	r3, [pc, #316]	; (8002788 <HAL_ADC_PollForConversion+0x230>)
 800264c:	400b      	ands	r3, r1
 800264e:	2b00      	cmp	r3, #0
 8002650:	d118      	bne.n	8002684 <HAL_ADC_PollForConversion+0x12c>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68d9      	ldr	r1, [r3, #12]
 8002658:	4b4c      	ldr	r3, [pc, #304]	; (800278c <HAL_ADC_PollForConversion+0x234>)
 800265a:	400b      	ands	r3, r1
 800265c:	2b00      	cmp	r3, #0
 800265e:	d111      	bne.n	8002684 <HAL_ADC_PollForConversion+0x12c>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6919      	ldr	r1, [r3, #16]
 8002666:	4b4a      	ldr	r3, [pc, #296]	; (8002790 <HAL_ADC_PollForConversion+0x238>)
 8002668:	400b      	ands	r3, r1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d108      	bne.n	8002680 <HAL_ADC_PollForConversion+0x128>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68d9      	ldr	r1, [r3, #12]
 8002674:	4b47      	ldr	r3, [pc, #284]	; (8002794 <HAL_ADC_PollForConversion+0x23c>)
 8002676:	400b      	ands	r3, r1
 8002678:	2b00      	cmp	r3, #0
 800267a:	d101      	bne.n	8002680 <HAL_ADC_PollForConversion+0x128>
 800267c:	2314      	movs	r3, #20
 800267e:	e020      	b.n	80026c2 <HAL_ADC_PollForConversion+0x16a>
 8002680:	2329      	movs	r3, #41	; 0x29
 8002682:	e01e      	b.n	80026c2 <HAL_ADC_PollForConversion+0x16a>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6919      	ldr	r1, [r3, #16]
 800268a:	4b41      	ldr	r3, [pc, #260]	; (8002790 <HAL_ADC_PollForConversion+0x238>)
 800268c:	400b      	ands	r3, r1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d106      	bne.n	80026a0 <HAL_ADC_PollForConversion+0x148>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68d9      	ldr	r1, [r3, #12]
 8002698:	4b3e      	ldr	r3, [pc, #248]	; (8002794 <HAL_ADC_PollForConversion+0x23c>)
 800269a:	400b      	ands	r3, r1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00d      	beq.n	80026bc <HAL_ADC_PollForConversion+0x164>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6919      	ldr	r1, [r3, #16]
 80026a6:	4b3c      	ldr	r3, [pc, #240]	; (8002798 <HAL_ADC_PollForConversion+0x240>)
 80026a8:	400b      	ands	r3, r1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d108      	bne.n	80026c0 <HAL_ADC_PollForConversion+0x168>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68d9      	ldr	r1, [r3, #12]
 80026b4:	4b38      	ldr	r3, [pc, #224]	; (8002798 <HAL_ADC_PollForConversion+0x240>)
 80026b6:	400b      	ands	r3, r1
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_ADC_PollForConversion+0x168>
 80026bc:	2354      	movs	r3, #84	; 0x54
 80026be:	e000      	b.n	80026c2 <HAL_ADC_PollForConversion+0x16a>
 80026c0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80026c2:	fb02 f303 	mul.w	r3, r2, r3
 80026c6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80026c8:	e021      	b.n	800270e <HAL_ADC_PollForConversion+0x1b6>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d0:	d01a      	beq.n	8002708 <HAL_ADC_PollForConversion+0x1b0>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d007      	beq.n	80026e8 <HAL_ADC_PollForConversion+0x190>
 80026d8:	f7ff fccc 	bl	8002074 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d20f      	bcs.n	8002708 <HAL_ADC_PollForConversion+0x1b0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d90b      	bls.n	8002708 <HAL_ADC_PollForConversion+0x1b0>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f4:	f043 0204 	orr.w	r2, r3, #4
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e030      	b.n	800276a <HAL_ADC_PollForConversion+0x212>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	3301      	adds	r3, #1
 800270c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	429a      	cmp	r2, r3
 8002714:	d8d9      	bhi.n	80026ca <HAL_ADC_PollForConversion+0x172>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f06f 0212 	mvn.w	r2, #18
 800271e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002724:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002736:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800273a:	d115      	bne.n	8002768 <HAL_ADC_PollForConversion+0x210>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002740:	2b00      	cmp	r3, #0
 8002742:	d111      	bne.n	8002768 <HAL_ADC_PollForConversion+0x210>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002754:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d105      	bne.n	8002768 <HAL_ADC_PollForConversion+0x210>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002760:	f043 0201 	orr.w	r2, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	371c      	adds	r7, #28
 800276e:	46bd      	mov	sp, r7
 8002770:	bd90      	pop	{r4, r7, pc}
 8002772:	bf00      	nop
 8002774:	40012400 	.word	0x40012400
 8002778:	40012800 	.word	0x40012800
 800277c:	40013c00 	.word	0x40013c00
 8002780:	0800b5ec 	.word	0x0800b5ec
 8002784:	20000000 	.word	0x20000000
 8002788:	24924924 	.word	0x24924924
 800278c:	00924924 	.word	0x00924924
 8002790:	12492492 	.word	0x12492492
 8002794:	00492492 	.word	0x00492492
 8002798:	00249249 	.word	0x00249249

0800279c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a0c      	ldr	r2, [pc, #48]	; (80027dc <HAL_ADC_GetValue+0x40>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d00e      	beq.n	80027cc <HAL_ADC_GetValue+0x30>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a0b      	ldr	r2, [pc, #44]	; (80027e0 <HAL_ADC_GetValue+0x44>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d009      	beq.n	80027cc <HAL_ADC_GetValue+0x30>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a09      	ldr	r2, [pc, #36]	; (80027e4 <HAL_ADC_GetValue+0x48>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d004      	beq.n	80027cc <HAL_ADC_GetValue+0x30>
 80027c2:	f240 61ef 	movw	r1, #1775	; 0x6ef
 80027c6:	4808      	ldr	r0, [pc, #32]	; (80027e8 <HAL_ADC_GetValue+0x4c>)
 80027c8:	f7fe ffa8 	bl	800171c <assert_failed>

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40012400 	.word	0x40012400
 80027e0:	40012800 	.word	0x40012800
 80027e4:	40013c00 	.word	0x40013c00
 80027e8:	0800b5ec 	.word	0x0800b5ec

080027ec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027f6:	2300      	movs	r3, #0
 80027f8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a8b      	ldr	r2, [pc, #556]	; (8002a30 <HAL_ADC_ConfigChannel+0x244>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d00e      	beq.n	8002826 <HAL_ADC_ConfigChannel+0x3a>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a89      	ldr	r2, [pc, #548]	; (8002a34 <HAL_ADC_ConfigChannel+0x248>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d009      	beq.n	8002826 <HAL_ADC_ConfigChannel+0x3a>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a88      	ldr	r2, [pc, #544]	; (8002a38 <HAL_ADC_ConfigChannel+0x24c>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d004      	beq.n	8002826 <HAL_ADC_ConfigChannel+0x3a>
 800281c:	f240 71dd 	movw	r1, #2013	; 0x7dd
 8002820:	4886      	ldr	r0, [pc, #536]	; (8002a3c <HAL_ADC_ConfigChannel+0x250>)
 8002822:	f7fe ff7b 	bl	800171c <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d048      	beq.n	80028c0 <HAL_ADC_ConfigChannel+0xd4>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d044      	beq.n	80028c0 <HAL_ADC_ConfigChannel+0xd4>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2b02      	cmp	r3, #2
 800283c:	d040      	beq.n	80028c0 <HAL_ADC_ConfigChannel+0xd4>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2b03      	cmp	r3, #3
 8002844:	d03c      	beq.n	80028c0 <HAL_ADC_ConfigChannel+0xd4>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2b04      	cmp	r3, #4
 800284c:	d038      	beq.n	80028c0 <HAL_ADC_ConfigChannel+0xd4>
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2b05      	cmp	r3, #5
 8002854:	d034      	beq.n	80028c0 <HAL_ADC_ConfigChannel+0xd4>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2b06      	cmp	r3, #6
 800285c:	d030      	beq.n	80028c0 <HAL_ADC_ConfigChannel+0xd4>
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2b07      	cmp	r3, #7
 8002864:	d02c      	beq.n	80028c0 <HAL_ADC_ConfigChannel+0xd4>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b08      	cmp	r3, #8
 800286c:	d028      	beq.n	80028c0 <HAL_ADC_ConfigChannel+0xd4>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2b09      	cmp	r3, #9
 8002874:	d024      	beq.n	80028c0 <HAL_ADC_ConfigChannel+0xd4>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2b0a      	cmp	r3, #10
 800287c:	d020      	beq.n	80028c0 <HAL_ADC_ConfigChannel+0xd4>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2b0b      	cmp	r3, #11
 8002884:	d01c      	beq.n	80028c0 <HAL_ADC_ConfigChannel+0xd4>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b0c      	cmp	r3, #12
 800288c:	d018      	beq.n	80028c0 <HAL_ADC_ConfigChannel+0xd4>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b0d      	cmp	r3, #13
 8002894:	d014      	beq.n	80028c0 <HAL_ADC_ConfigChannel+0xd4>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2b0e      	cmp	r3, #14
 800289c:	d010      	beq.n	80028c0 <HAL_ADC_ConfigChannel+0xd4>
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2b0f      	cmp	r3, #15
 80028a4:	d00c      	beq.n	80028c0 <HAL_ADC_ConfigChannel+0xd4>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b10      	cmp	r3, #16
 80028ac:	d008      	beq.n	80028c0 <HAL_ADC_ConfigChannel+0xd4>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2b11      	cmp	r3, #17
 80028b4:	d004      	beq.n	80028c0 <HAL_ADC_ConfigChannel+0xd4>
 80028b6:	f240 71de 	movw	r1, #2014	; 0x7de
 80028ba:	4860      	ldr	r0, [pc, #384]	; (8002a3c <HAL_ADC_ConfigChannel+0x250>)
 80028bc:	f7fe ff2e 	bl	800171c <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d040      	beq.n	800294a <HAL_ADC_ConfigChannel+0x15e>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d03c      	beq.n	800294a <HAL_ADC_ConfigChannel+0x15e>
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d038      	beq.n	800294a <HAL_ADC_ConfigChannel+0x15e>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b04      	cmp	r3, #4
 80028de:	d034      	beq.n	800294a <HAL_ADC_ConfigChannel+0x15e>
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2b05      	cmp	r3, #5
 80028e6:	d030      	beq.n	800294a <HAL_ADC_ConfigChannel+0x15e>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b06      	cmp	r3, #6
 80028ee:	d02c      	beq.n	800294a <HAL_ADC_ConfigChannel+0x15e>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b07      	cmp	r3, #7
 80028f6:	d028      	beq.n	800294a <HAL_ADC_ConfigChannel+0x15e>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d024      	beq.n	800294a <HAL_ADC_ConfigChannel+0x15e>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b09      	cmp	r3, #9
 8002906:	d020      	beq.n	800294a <HAL_ADC_ConfigChannel+0x15e>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b0a      	cmp	r3, #10
 800290e:	d01c      	beq.n	800294a <HAL_ADC_ConfigChannel+0x15e>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b0b      	cmp	r3, #11
 8002916:	d018      	beq.n	800294a <HAL_ADC_ConfigChannel+0x15e>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b0c      	cmp	r3, #12
 800291e:	d014      	beq.n	800294a <HAL_ADC_ConfigChannel+0x15e>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	2b0d      	cmp	r3, #13
 8002926:	d010      	beq.n	800294a <HAL_ADC_ConfigChannel+0x15e>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b0e      	cmp	r3, #14
 800292e:	d00c      	beq.n	800294a <HAL_ADC_ConfigChannel+0x15e>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b0f      	cmp	r3, #15
 8002936:	d008      	beq.n	800294a <HAL_ADC_ConfigChannel+0x15e>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	2b10      	cmp	r3, #16
 800293e:	d004      	beq.n	800294a <HAL_ADC_ConfigChannel+0x15e>
 8002940:	f240 71df 	movw	r1, #2015	; 0x7df
 8002944:	483d      	ldr	r0, [pc, #244]	; (8002a3c <HAL_ADC_ConfigChannel+0x250>)
 8002946:	f7fe fee9 	bl	800171c <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d020      	beq.n	8002994 <HAL_ADC_ConfigChannel+0x1a8>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d01c      	beq.n	8002994 <HAL_ADC_ConfigChannel+0x1a8>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	2b02      	cmp	r3, #2
 8002960:	d018      	beq.n	8002994 <HAL_ADC_ConfigChannel+0x1a8>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	2b03      	cmp	r3, #3
 8002968:	d014      	beq.n	8002994 <HAL_ADC_ConfigChannel+0x1a8>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	2b04      	cmp	r3, #4
 8002970:	d010      	beq.n	8002994 <HAL_ADC_ConfigChannel+0x1a8>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	2b05      	cmp	r3, #5
 8002978:	d00c      	beq.n	8002994 <HAL_ADC_ConfigChannel+0x1a8>
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b06      	cmp	r3, #6
 8002980:	d008      	beq.n	8002994 <HAL_ADC_ConfigChannel+0x1a8>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	2b07      	cmp	r3, #7
 8002988:	d004      	beq.n	8002994 <HAL_ADC_ConfigChannel+0x1a8>
 800298a:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 800298e:	482b      	ldr	r0, [pc, #172]	; (8002a3c <HAL_ADC_ConfigChannel+0x250>)
 8002990:	f7fe fec4 	bl	800171c <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800299a:	2b01      	cmp	r3, #1
 800299c:	d101      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x1b6>
 800299e:	2302      	movs	r3, #2
 80029a0:	e0e5      	b.n	8002b6e <HAL_ADC_ConfigChannel+0x382>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b06      	cmp	r3, #6
 80029b0:	d81c      	bhi.n	80029ec <HAL_ADC_ConfigChannel+0x200>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	3b05      	subs	r3, #5
 80029c4:	221f      	movs	r2, #31
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43db      	mvns	r3, r3
 80029cc:	4019      	ands	r1, r3
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	6818      	ldr	r0, [r3, #0]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	4613      	mov	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	3b05      	subs	r3, #5
 80029de:	fa00 f203 	lsl.w	r2, r0, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	635a      	str	r2, [r3, #52]	; 0x34
 80029ea:	e045      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x28c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b0c      	cmp	r3, #12
 80029f2:	d825      	bhi.n	8002a40 <HAL_ADC_ConfigChannel+0x254>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	4613      	mov	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	3b23      	subs	r3, #35	; 0x23
 8002a06:	221f      	movs	r2, #31
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	4019      	ands	r1, r3
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	6818      	ldr	r0, [r3, #0]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685a      	ldr	r2, [r3, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	3b23      	subs	r3, #35	; 0x23
 8002a20:	fa00 f203 	lsl.w	r2, r0, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a2c:	e024      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x28c>
 8002a2e:	bf00      	nop
 8002a30:	40012400 	.word	0x40012400
 8002a34:	40012800 	.word	0x40012800
 8002a38:	40013c00 	.word	0x40013c00
 8002a3c:	0800b5ec 	.word	0x0800b5ec
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	3b41      	subs	r3, #65	; 0x41
 8002a52:	221f      	movs	r2, #31
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	4019      	ands	r1, r3
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	6818      	ldr	r0, [r3, #0]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	3b41      	subs	r3, #65	; 0x41
 8002a6c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2b09      	cmp	r3, #9
 8002a7e:	d91c      	bls.n	8002aba <HAL_ADC_ConfigChannel+0x2ce>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68d9      	ldr	r1, [r3, #12]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	4413      	add	r3, r2
 8002a90:	3b1e      	subs	r3, #30
 8002a92:	2207      	movs	r2, #7
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	4019      	ands	r1, r3
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	6898      	ldr	r0, [r3, #8]
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	4413      	add	r3, r2
 8002aaa:	3b1e      	subs	r3, #30
 8002aac:	fa00 f203 	lsl.w	r2, r0, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	60da      	str	r2, [r3, #12]
 8002ab8:	e019      	b.n	8002aee <HAL_ADC_ConfigChannel+0x302>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6919      	ldr	r1, [r3, #16]
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	4413      	add	r3, r2
 8002aca:	2207      	movs	r2, #7
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	4019      	ands	r1, r3
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	6898      	ldr	r0, [r3, #8]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4613      	mov	r3, r2
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	4413      	add	r3, r2
 8002ae2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b10      	cmp	r3, #16
 8002af4:	d003      	beq.n	8002afe <HAL_ADC_ConfigChannel+0x312>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002afa:	2b11      	cmp	r3, #17
 8002afc:	d132      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x378>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a1d      	ldr	r2, [pc, #116]	; (8002b78 <HAL_ADC_ConfigChannel+0x38c>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d125      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x368>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d126      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x378>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002b24:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2b10      	cmp	r3, #16
 8002b2c:	d11a      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x378>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b2e:	4b13      	ldr	r3, [pc, #76]	; (8002b7c <HAL_ADC_ConfigChannel+0x390>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a13      	ldr	r2, [pc, #76]	; (8002b80 <HAL_ADC_ConfigChannel+0x394>)
 8002b34:	fba2 2303 	umull	r2, r3, r2, r3
 8002b38:	0c9a      	lsrs	r2, r3, #18
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b44:	e002      	b.n	8002b4c <HAL_ADC_ConfigChannel+0x360>
          {
            wait_loop_index--;
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f9      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0x35a>
 8002b52:	e007      	b.n	8002b64 <HAL_ADC_ConfigChannel+0x378>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b58:	f043 0220 	orr.w	r2, r3, #32
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40012400 	.word	0x40012400
 8002b7c:	20000000 	.word	0x20000000
 8002b80:	431bde83 	.word	0x431bde83

08002b84 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002b90:	2300      	movs	r3, #0
 8002b92:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d040      	beq.n	8002c24 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f042 0201 	orr.w	r2, r2, #1
 8002bb0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bb2:	4b1f      	ldr	r3, [pc, #124]	; (8002c30 <ADC_Enable+0xac>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a1f      	ldr	r2, [pc, #124]	; (8002c34 <ADC_Enable+0xb0>)
 8002bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbc:	0c9b      	lsrs	r3, r3, #18
 8002bbe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002bc0:	e002      	b.n	8002bc8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f9      	bne.n	8002bc2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bce:	f7ff fa51 	bl	8002074 <HAL_GetTick>
 8002bd2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002bd4:	e01f      	b.n	8002c16 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bd6:	f7ff fa4d 	bl	8002074 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d918      	bls.n	8002c16 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d011      	beq.n	8002c16 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf6:	f043 0210 	orr.w	r2, r3, #16
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c02:	f043 0201 	orr.w	r2, r3, #1
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e007      	b.n	8002c26 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d1d8      	bne.n	8002bd6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20000000 	.word	0x20000000
 8002c34:	431bde83 	.word	0x431bde83

08002c38 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d12e      	bne.n	8002cb0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f022 0201 	bic.w	r2, r2, #1
 8002c60:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c62:	f7ff fa07 	bl	8002074 <HAL_GetTick>
 8002c66:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c68:	e01b      	b.n	8002ca2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c6a:	f7ff fa03 	bl	8002074 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d914      	bls.n	8002ca2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d10d      	bne.n	8002ca2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8a:	f043 0210 	orr.w	r2, r3, #16
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c96:	f043 0201 	orr.w	r2, r3, #1
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e007      	b.n	8002cb2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d0dc      	beq.n	8002c6a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
	...

08002cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ccc:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <__NVIC_SetPriorityGrouping+0x44>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cd8:	4013      	ands	r3, r2
 8002cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ce4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cee:	4a04      	ldr	r2, [pc, #16]	; (8002d00 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	60d3      	str	r3, [r2, #12]
}
 8002cf4:	bf00      	nop
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	e000ed00 	.word	0xe000ed00

08002d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d08:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <__NVIC_GetPriorityGrouping+0x18>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	0a1b      	lsrs	r3, r3, #8
 8002d0e:	f003 0307 	and.w	r3, r3, #7
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	e000ed00 	.word	0xe000ed00

08002d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	4603      	mov	r3, r0
 8002d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	db0b      	blt.n	8002d4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d32:	79fb      	ldrb	r3, [r7, #7]
 8002d34:	f003 021f 	and.w	r2, r3, #31
 8002d38:	4906      	ldr	r1, [pc, #24]	; (8002d54 <__NVIC_EnableIRQ+0x34>)
 8002d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	2001      	movs	r0, #1
 8002d42:	fa00 f202 	lsl.w	r2, r0, r2
 8002d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr
 8002d54:	e000e100 	.word	0xe000e100

08002d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	6039      	str	r1, [r7, #0]
 8002d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	db0a      	blt.n	8002d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	490c      	ldr	r1, [pc, #48]	; (8002da4 <__NVIC_SetPriority+0x4c>)
 8002d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d76:	0112      	lsls	r2, r2, #4
 8002d78:	b2d2      	uxtb	r2, r2
 8002d7a:	440b      	add	r3, r1
 8002d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d80:	e00a      	b.n	8002d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	4908      	ldr	r1, [pc, #32]	; (8002da8 <__NVIC_SetPriority+0x50>)
 8002d88:	79fb      	ldrb	r3, [r7, #7]
 8002d8a:	f003 030f 	and.w	r3, r3, #15
 8002d8e:	3b04      	subs	r3, #4
 8002d90:	0112      	lsls	r2, r2, #4
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	440b      	add	r3, r1
 8002d96:	761a      	strb	r2, [r3, #24]
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bc80      	pop	{r7}
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	e000e100 	.word	0xe000e100
 8002da8:	e000ed00 	.word	0xe000ed00

08002dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b089      	sub	sp, #36	; 0x24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	f1c3 0307 	rsb	r3, r3, #7
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	bf28      	it	cs
 8002dca:	2304      	movcs	r3, #4
 8002dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	2b06      	cmp	r3, #6
 8002dd4:	d902      	bls.n	8002ddc <NVIC_EncodePriority+0x30>
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	3b03      	subs	r3, #3
 8002dda:	e000      	b.n	8002dde <NVIC_EncodePriority+0x32>
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de0:	f04f 32ff 	mov.w	r2, #4294967295
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	43da      	mvns	r2, r3
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	401a      	ands	r2, r3
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002df4:	f04f 31ff 	mov.w	r1, #4294967295
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002dfe:	43d9      	mvns	r1, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e04:	4313      	orrs	r3, r2
         );
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3724      	adds	r7, #36	; 0x24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr

08002e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e20:	d301      	bcc.n	8002e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e22:	2301      	movs	r3, #1
 8002e24:	e00f      	b.n	8002e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e26:	4a0a      	ldr	r2, [pc, #40]	; (8002e50 <SysTick_Config+0x40>)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e2e:	210f      	movs	r1, #15
 8002e30:	f04f 30ff 	mov.w	r0, #4294967295
 8002e34:	f7ff ff90 	bl	8002d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e38:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <SysTick_Config+0x40>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e3e:	4b04      	ldr	r3, [pc, #16]	; (8002e50 <SysTick_Config+0x40>)
 8002e40:	2207      	movs	r2, #7
 8002e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	e000e010 	.word	0xe000e010

08002e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b07      	cmp	r3, #7
 8002e60:	d00f      	beq.n	8002e82 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b06      	cmp	r3, #6
 8002e66:	d00c      	beq.n	8002e82 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b05      	cmp	r3, #5
 8002e6c:	d009      	beq.n	8002e82 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d006      	beq.n	8002e82 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	d003      	beq.n	8002e82 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002e7a:	2192      	movs	r1, #146	; 0x92
 8002e7c:	4804      	ldr	r0, [pc, #16]	; (8002e90 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002e7e:	f7fe fc4d 	bl	800171c <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7ff ff1a 	bl	8002cbc <__NVIC_SetPriorityGrouping>
}
 8002e88:	bf00      	nop
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	0800b624 	.word	0x0800b624

08002e94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
 8002ea0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b0f      	cmp	r3, #15
 8002eaa:	d903      	bls.n	8002eb4 <HAL_NVIC_SetPriority+0x20>
 8002eac:	21aa      	movs	r1, #170	; 0xaa
 8002eae:	480e      	ldr	r0, [pc, #56]	; (8002ee8 <HAL_NVIC_SetPriority+0x54>)
 8002eb0:	f7fe fc34 	bl	800171c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b0f      	cmp	r3, #15
 8002eb8:	d903      	bls.n	8002ec2 <HAL_NVIC_SetPriority+0x2e>
 8002eba:	21ab      	movs	r1, #171	; 0xab
 8002ebc:	480a      	ldr	r0, [pc, #40]	; (8002ee8 <HAL_NVIC_SetPriority+0x54>)
 8002ebe:	f7fe fc2d 	bl	800171c <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ec2:	f7ff ff1f 	bl	8002d04 <__NVIC_GetPriorityGrouping>
 8002ec6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	68b9      	ldr	r1, [r7, #8]
 8002ecc:	6978      	ldr	r0, [r7, #20]
 8002ece:	f7ff ff6d 	bl	8002dac <NVIC_EncodePriority>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ed8:	4611      	mov	r1, r2
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff ff3c 	bl	8002d58 <__NVIC_SetPriority>
}
 8002ee0:	bf00      	nop
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	0800b624 	.word	0x0800b624

08002eec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	da03      	bge.n	8002f06 <HAL_NVIC_EnableIRQ+0x1a>
 8002efe:	21be      	movs	r1, #190	; 0xbe
 8002f00:	4805      	ldr	r0, [pc, #20]	; (8002f18 <HAL_NVIC_EnableIRQ+0x2c>)
 8002f02:	f7fe fc0b 	bl	800171c <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff ff08 	bl	8002d20 <__NVIC_EnableIRQ>
}
 8002f10:	bf00      	nop
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	0800b624 	.word	0x0800b624

08002f1c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f7ff ff73 	bl	8002e10 <SysTick_Config>
 8002f2a:	4603      	mov	r3, r0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d008      	beq.n	8002f5c <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2204      	movs	r2, #4
 8002f4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e020      	b.n	8002f9e <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 020e 	bic.w	r2, r2, #14
 8002f6a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0201 	bic.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f84:	2101      	movs	r1, #1
 8002f86:	fa01 f202 	lsl.w	r2, r1, r2
 8002f8a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d005      	beq.n	8002fca <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2204      	movs	r2, #4
 8002fc2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	73fb      	strb	r3, [r7, #15]
 8002fc8:	e0d6      	b.n	8003178 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 020e 	bic.w	r2, r2, #14
 8002fd8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0201 	bic.w	r2, r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	4b64      	ldr	r3, [pc, #400]	; (8003184 <HAL_DMA_Abort_IT+0x1dc>)
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d958      	bls.n	80030a8 <HAL_DMA_Abort_IT+0x100>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a63      	ldr	r2, [pc, #396]	; (8003188 <HAL_DMA_Abort_IT+0x1e0>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d04f      	beq.n	80030a0 <HAL_DMA_Abort_IT+0xf8>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a61      	ldr	r2, [pc, #388]	; (800318c <HAL_DMA_Abort_IT+0x1e4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d048      	beq.n	800309c <HAL_DMA_Abort_IT+0xf4>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a60      	ldr	r2, [pc, #384]	; (8003190 <HAL_DMA_Abort_IT+0x1e8>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d040      	beq.n	8003096 <HAL_DMA_Abort_IT+0xee>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a5e      	ldr	r2, [pc, #376]	; (8003194 <HAL_DMA_Abort_IT+0x1ec>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d038      	beq.n	8003090 <HAL_DMA_Abort_IT+0xe8>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a5d      	ldr	r2, [pc, #372]	; (8003198 <HAL_DMA_Abort_IT+0x1f0>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d030      	beq.n	800308a <HAL_DMA_Abort_IT+0xe2>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a5b      	ldr	r2, [pc, #364]	; (800319c <HAL_DMA_Abort_IT+0x1f4>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d028      	beq.n	8003084 <HAL_DMA_Abort_IT+0xdc>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a53      	ldr	r2, [pc, #332]	; (8003184 <HAL_DMA_Abort_IT+0x1dc>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d020      	beq.n	800307e <HAL_DMA_Abort_IT+0xd6>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a57      	ldr	r2, [pc, #348]	; (80031a0 <HAL_DMA_Abort_IT+0x1f8>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d019      	beq.n	800307a <HAL_DMA_Abort_IT+0xd2>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a56      	ldr	r2, [pc, #344]	; (80031a4 <HAL_DMA_Abort_IT+0x1fc>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d012      	beq.n	8003076 <HAL_DMA_Abort_IT+0xce>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a54      	ldr	r2, [pc, #336]	; (80031a8 <HAL_DMA_Abort_IT+0x200>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d00a      	beq.n	8003070 <HAL_DMA_Abort_IT+0xc8>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a53      	ldr	r2, [pc, #332]	; (80031ac <HAL_DMA_Abort_IT+0x204>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d102      	bne.n	800306a <HAL_DMA_Abort_IT+0xc2>
 8003064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003068:	e01b      	b.n	80030a2 <HAL_DMA_Abort_IT+0xfa>
 800306a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800306e:	e018      	b.n	80030a2 <HAL_DMA_Abort_IT+0xfa>
 8003070:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003074:	e015      	b.n	80030a2 <HAL_DMA_Abort_IT+0xfa>
 8003076:	2310      	movs	r3, #16
 8003078:	e013      	b.n	80030a2 <HAL_DMA_Abort_IT+0xfa>
 800307a:	2301      	movs	r3, #1
 800307c:	e011      	b.n	80030a2 <HAL_DMA_Abort_IT+0xfa>
 800307e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003082:	e00e      	b.n	80030a2 <HAL_DMA_Abort_IT+0xfa>
 8003084:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003088:	e00b      	b.n	80030a2 <HAL_DMA_Abort_IT+0xfa>
 800308a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800308e:	e008      	b.n	80030a2 <HAL_DMA_Abort_IT+0xfa>
 8003090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003094:	e005      	b.n	80030a2 <HAL_DMA_Abort_IT+0xfa>
 8003096:	f44f 7380 	mov.w	r3, #256	; 0x100
 800309a:	e002      	b.n	80030a2 <HAL_DMA_Abort_IT+0xfa>
 800309c:	2310      	movs	r3, #16
 800309e:	e000      	b.n	80030a2 <HAL_DMA_Abort_IT+0xfa>
 80030a0:	2301      	movs	r3, #1
 80030a2:	4a43      	ldr	r2, [pc, #268]	; (80031b0 <HAL_DMA_Abort_IT+0x208>)
 80030a4:	6053      	str	r3, [r2, #4]
 80030a6:	e057      	b.n	8003158 <HAL_DMA_Abort_IT+0x1b0>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a36      	ldr	r2, [pc, #216]	; (8003188 <HAL_DMA_Abort_IT+0x1e0>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d04f      	beq.n	8003152 <HAL_DMA_Abort_IT+0x1aa>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a35      	ldr	r2, [pc, #212]	; (800318c <HAL_DMA_Abort_IT+0x1e4>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d048      	beq.n	800314e <HAL_DMA_Abort_IT+0x1a6>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a33      	ldr	r2, [pc, #204]	; (8003190 <HAL_DMA_Abort_IT+0x1e8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d040      	beq.n	8003148 <HAL_DMA_Abort_IT+0x1a0>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a32      	ldr	r2, [pc, #200]	; (8003194 <HAL_DMA_Abort_IT+0x1ec>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d038      	beq.n	8003142 <HAL_DMA_Abort_IT+0x19a>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a30      	ldr	r2, [pc, #192]	; (8003198 <HAL_DMA_Abort_IT+0x1f0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d030      	beq.n	800313c <HAL_DMA_Abort_IT+0x194>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a2f      	ldr	r2, [pc, #188]	; (800319c <HAL_DMA_Abort_IT+0x1f4>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d028      	beq.n	8003136 <HAL_DMA_Abort_IT+0x18e>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a26      	ldr	r2, [pc, #152]	; (8003184 <HAL_DMA_Abort_IT+0x1dc>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d020      	beq.n	8003130 <HAL_DMA_Abort_IT+0x188>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a2b      	ldr	r2, [pc, #172]	; (80031a0 <HAL_DMA_Abort_IT+0x1f8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d019      	beq.n	800312c <HAL_DMA_Abort_IT+0x184>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a29      	ldr	r2, [pc, #164]	; (80031a4 <HAL_DMA_Abort_IT+0x1fc>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d012      	beq.n	8003128 <HAL_DMA_Abort_IT+0x180>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a28      	ldr	r2, [pc, #160]	; (80031a8 <HAL_DMA_Abort_IT+0x200>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d00a      	beq.n	8003122 <HAL_DMA_Abort_IT+0x17a>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a26      	ldr	r2, [pc, #152]	; (80031ac <HAL_DMA_Abort_IT+0x204>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d102      	bne.n	800311c <HAL_DMA_Abort_IT+0x174>
 8003116:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800311a:	e01b      	b.n	8003154 <HAL_DMA_Abort_IT+0x1ac>
 800311c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003120:	e018      	b.n	8003154 <HAL_DMA_Abort_IT+0x1ac>
 8003122:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003126:	e015      	b.n	8003154 <HAL_DMA_Abort_IT+0x1ac>
 8003128:	2310      	movs	r3, #16
 800312a:	e013      	b.n	8003154 <HAL_DMA_Abort_IT+0x1ac>
 800312c:	2301      	movs	r3, #1
 800312e:	e011      	b.n	8003154 <HAL_DMA_Abort_IT+0x1ac>
 8003130:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003134:	e00e      	b.n	8003154 <HAL_DMA_Abort_IT+0x1ac>
 8003136:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800313a:	e00b      	b.n	8003154 <HAL_DMA_Abort_IT+0x1ac>
 800313c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003140:	e008      	b.n	8003154 <HAL_DMA_Abort_IT+0x1ac>
 8003142:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003146:	e005      	b.n	8003154 <HAL_DMA_Abort_IT+0x1ac>
 8003148:	f44f 7380 	mov.w	r3, #256	; 0x100
 800314c:	e002      	b.n	8003154 <HAL_DMA_Abort_IT+0x1ac>
 800314e:	2310      	movs	r3, #16
 8003150:	e000      	b.n	8003154 <HAL_DMA_Abort_IT+0x1ac>
 8003152:	2301      	movs	r3, #1
 8003154:	4a17      	ldr	r2, [pc, #92]	; (80031b4 <HAL_DMA_Abort_IT+0x20c>)
 8003156:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	4798      	blx	r3
    } 
  }
  return status;
 8003178:	7bfb      	ldrb	r3, [r7, #15]
}
 800317a:	4618      	mov	r0, r3
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40020080 	.word	0x40020080
 8003188:	40020008 	.word	0x40020008
 800318c:	4002001c 	.word	0x4002001c
 8003190:	40020030 	.word	0x40020030
 8003194:	40020044 	.word	0x40020044
 8003198:	40020058 	.word	0x40020058
 800319c:	4002006c 	.word	0x4002006c
 80031a0:	40020408 	.word	0x40020408
 80031a4:	4002041c 	.word	0x4002041c
 80031a8:	40020430 	.word	0x40020430
 80031ac:	40020444 	.word	0x40020444
 80031b0:	40020400 	.word	0x40020400
 80031b4:	40020000 	.word	0x40020000

080031b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08a      	sub	sp, #40	; 0x28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031c2:	2300      	movs	r3, #0
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80031c6:	2300      	movs	r3, #0
 80031c8:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4aa9      	ldr	r2, [pc, #676]	; (8003474 <HAL_GPIO_Init+0x2bc>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d01b      	beq.n	800320a <HAL_GPIO_Init+0x52>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4aa8      	ldr	r2, [pc, #672]	; (8003478 <HAL_GPIO_Init+0x2c0>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d017      	beq.n	800320a <HAL_GPIO_Init+0x52>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4aa7      	ldr	r2, [pc, #668]	; (800347c <HAL_GPIO_Init+0x2c4>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d013      	beq.n	800320a <HAL_GPIO_Init+0x52>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4aa6      	ldr	r2, [pc, #664]	; (8003480 <HAL_GPIO_Init+0x2c8>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d00f      	beq.n	800320a <HAL_GPIO_Init+0x52>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4aa5      	ldr	r2, [pc, #660]	; (8003484 <HAL_GPIO_Init+0x2cc>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d00b      	beq.n	800320a <HAL_GPIO_Init+0x52>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4aa4      	ldr	r2, [pc, #656]	; (8003488 <HAL_GPIO_Init+0x2d0>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d007      	beq.n	800320a <HAL_GPIO_Init+0x52>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4aa3      	ldr	r2, [pc, #652]	; (800348c <HAL_GPIO_Init+0x2d4>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d003      	beq.n	800320a <HAL_GPIO_Init+0x52>
 8003202:	21bd      	movs	r1, #189	; 0xbd
 8003204:	48a2      	ldr	r0, [pc, #648]	; (8003490 <HAL_GPIO_Init+0x2d8>)
 8003206:	f7fe fa89 	bl	800171c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	b29b      	uxth	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d005      	beq.n	8003220 <HAL_GPIO_Init+0x68>
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	0c1b      	lsrs	r3, r3, #16
 800321a:	041b      	lsls	r3, r3, #16
 800321c:	2b00      	cmp	r3, #0
 800321e:	d003      	beq.n	8003228 <HAL_GPIO_Init+0x70>
 8003220:	21be      	movs	r1, #190	; 0xbe
 8003222:	489b      	ldr	r0, [pc, #620]	; (8003490 <HAL_GPIO_Init+0x2d8>)
 8003224:	f7fe fa7a 	bl	800171c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 8235 	beq.w	800369c <HAL_GPIO_Init+0x4e4>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b01      	cmp	r3, #1
 8003238:	f000 8230 	beq.w	800369c <HAL_GPIO_Init+0x4e4>
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b11      	cmp	r3, #17
 8003242:	f000 822b 	beq.w	800369c <HAL_GPIO_Init+0x4e4>
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b02      	cmp	r3, #2
 800324c:	f000 8226 	beq.w	800369c <HAL_GPIO_Init+0x4e4>
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b12      	cmp	r3, #18
 8003256:	f000 8221 	beq.w	800369c <HAL_GPIO_Init+0x4e4>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	4a8d      	ldr	r2, [pc, #564]	; (8003494 <HAL_GPIO_Init+0x2dc>)
 8003260:	4293      	cmp	r3, r2
 8003262:	f000 821b 	beq.w	800369c <HAL_GPIO_Init+0x4e4>
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	4a8b      	ldr	r2, [pc, #556]	; (8003498 <HAL_GPIO_Init+0x2e0>)
 800326c:	4293      	cmp	r3, r2
 800326e:	f000 8215 	beq.w	800369c <HAL_GPIO_Init+0x4e4>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	4a89      	ldr	r2, [pc, #548]	; (800349c <HAL_GPIO_Init+0x2e4>)
 8003278:	4293      	cmp	r3, r2
 800327a:	f000 820f 	beq.w	800369c <HAL_GPIO_Init+0x4e4>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	4a87      	ldr	r2, [pc, #540]	; (80034a0 <HAL_GPIO_Init+0x2e8>)
 8003284:	4293      	cmp	r3, r2
 8003286:	f000 8209 	beq.w	800369c <HAL_GPIO_Init+0x4e4>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	4a85      	ldr	r2, [pc, #532]	; (80034a4 <HAL_GPIO_Init+0x2ec>)
 8003290:	4293      	cmp	r3, r2
 8003292:	f000 8203 	beq.w	800369c <HAL_GPIO_Init+0x4e4>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	4a83      	ldr	r2, [pc, #524]	; (80034a8 <HAL_GPIO_Init+0x2f0>)
 800329c:	4293      	cmp	r3, r2
 800329e:	f000 81fd 	beq.w	800369c <HAL_GPIO_Init+0x4e4>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	f000 81f8 	beq.w	800369c <HAL_GPIO_Init+0x4e4>
 80032ac:	21bf      	movs	r1, #191	; 0xbf
 80032ae:	4878      	ldr	r0, [pc, #480]	; (8003490 <HAL_GPIO_Init+0x2d8>)
 80032b0:	f7fe fa34 	bl	800171c <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032b4:	e1f2      	b.n	800369c <HAL_GPIO_Init+0x4e4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80032b6:	2201      	movs	r2, #1
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	69fa      	ldr	r2, [r7, #28]
 80032c6:	4013      	ands	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	f040 81e1 	bne.w	8003696 <HAL_GPIO_Init+0x4de>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a67      	ldr	r2, [pc, #412]	; (8003474 <HAL_GPIO_Init+0x2bc>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d01b      	beq.n	8003314 <HAL_GPIO_Init+0x15c>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a66      	ldr	r2, [pc, #408]	; (8003478 <HAL_GPIO_Init+0x2c0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d017      	beq.n	8003314 <HAL_GPIO_Init+0x15c>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a65      	ldr	r2, [pc, #404]	; (800347c <HAL_GPIO_Init+0x2c4>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d013      	beq.n	8003314 <HAL_GPIO_Init+0x15c>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a64      	ldr	r2, [pc, #400]	; (8003480 <HAL_GPIO_Init+0x2c8>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d00f      	beq.n	8003314 <HAL_GPIO_Init+0x15c>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a63      	ldr	r2, [pc, #396]	; (8003484 <HAL_GPIO_Init+0x2cc>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d00b      	beq.n	8003314 <HAL_GPIO_Init+0x15c>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a62      	ldr	r2, [pc, #392]	; (8003488 <HAL_GPIO_Init+0x2d0>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d007      	beq.n	8003314 <HAL_GPIO_Init+0x15c>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a61      	ldr	r2, [pc, #388]	; (800348c <HAL_GPIO_Init+0x2d4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d003      	beq.n	8003314 <HAL_GPIO_Init+0x15c>
 800330c:	21cd      	movs	r1, #205	; 0xcd
 800330e:	4860      	ldr	r0, [pc, #384]	; (8003490 <HAL_GPIO_Init+0x2d8>)
 8003310:	f7fe fa04 	bl	800171c <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	4a63      	ldr	r2, [pc, #396]	; (80034a8 <HAL_GPIO_Init+0x2f0>)
 800331a:	4293      	cmp	r3, r2
 800331c:	f000 80c6 	beq.w	80034ac <HAL_GPIO_Init+0x2f4>
 8003320:	4a61      	ldr	r2, [pc, #388]	; (80034a8 <HAL_GPIO_Init+0x2f0>)
 8003322:	4293      	cmp	r3, r2
 8003324:	f200 80ec 	bhi.w	8003500 <HAL_GPIO_Init+0x348>
 8003328:	4a5c      	ldr	r2, [pc, #368]	; (800349c <HAL_GPIO_Init+0x2e4>)
 800332a:	4293      	cmp	r3, r2
 800332c:	f000 80be 	beq.w	80034ac <HAL_GPIO_Init+0x2f4>
 8003330:	4a5a      	ldr	r2, [pc, #360]	; (800349c <HAL_GPIO_Init+0x2e4>)
 8003332:	4293      	cmp	r3, r2
 8003334:	f200 80e4 	bhi.w	8003500 <HAL_GPIO_Init+0x348>
 8003338:	4a5a      	ldr	r2, [pc, #360]	; (80034a4 <HAL_GPIO_Init+0x2ec>)
 800333a:	4293      	cmp	r3, r2
 800333c:	f000 80b6 	beq.w	80034ac <HAL_GPIO_Init+0x2f4>
 8003340:	4a58      	ldr	r2, [pc, #352]	; (80034a4 <HAL_GPIO_Init+0x2ec>)
 8003342:	4293      	cmp	r3, r2
 8003344:	f200 80dc 	bhi.w	8003500 <HAL_GPIO_Init+0x348>
 8003348:	4a53      	ldr	r2, [pc, #332]	; (8003498 <HAL_GPIO_Init+0x2e0>)
 800334a:	4293      	cmp	r3, r2
 800334c:	f000 80ae 	beq.w	80034ac <HAL_GPIO_Init+0x2f4>
 8003350:	4a51      	ldr	r2, [pc, #324]	; (8003498 <HAL_GPIO_Init+0x2e0>)
 8003352:	4293      	cmp	r3, r2
 8003354:	f200 80d4 	bhi.w	8003500 <HAL_GPIO_Init+0x348>
 8003358:	4a51      	ldr	r2, [pc, #324]	; (80034a0 <HAL_GPIO_Init+0x2e8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	f000 80a6 	beq.w	80034ac <HAL_GPIO_Init+0x2f4>
 8003360:	4a4f      	ldr	r2, [pc, #316]	; (80034a0 <HAL_GPIO_Init+0x2e8>)
 8003362:	4293      	cmp	r3, r2
 8003364:	f200 80cc 	bhi.w	8003500 <HAL_GPIO_Init+0x348>
 8003368:	2b12      	cmp	r3, #18
 800336a:	d82b      	bhi.n	80033c4 <HAL_GPIO_Init+0x20c>
 800336c:	2b12      	cmp	r3, #18
 800336e:	f200 80c7 	bhi.w	8003500 <HAL_GPIO_Init+0x348>
 8003372:	a201      	add	r2, pc, #4	; (adr r2, 8003378 <HAL_GPIO_Init+0x1c0>)
 8003374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003378:	080034ad 	.word	0x080034ad
 800337c:	080033cd 	.word	0x080033cd
 8003380:	0800341f 	.word	0x0800341f
 8003384:	080034fb 	.word	0x080034fb
 8003388:	08003501 	.word	0x08003501
 800338c:	08003501 	.word	0x08003501
 8003390:	08003501 	.word	0x08003501
 8003394:	08003501 	.word	0x08003501
 8003398:	08003501 	.word	0x08003501
 800339c:	08003501 	.word	0x08003501
 80033a0:	08003501 	.word	0x08003501
 80033a4:	08003501 	.word	0x08003501
 80033a8:	08003501 	.word	0x08003501
 80033ac:	08003501 	.word	0x08003501
 80033b0:	08003501 	.word	0x08003501
 80033b4:	08003501 	.word	0x08003501
 80033b8:	08003501 	.word	0x08003501
 80033bc:	080033f5 	.word	0x080033f5
 80033c0:	08003449 	.word	0x08003449
 80033c4:	4a33      	ldr	r2, [pc, #204]	; (8003494 <HAL_GPIO_Init+0x2dc>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d070      	beq.n	80034ac <HAL_GPIO_Init+0x2f4>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80033ca:	e099      	b.n	8003500 <HAL_GPIO_Init+0x348>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d00b      	beq.n	80033ec <HAL_GPIO_Init+0x234>
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d007      	beq.n	80033ec <HAL_GPIO_Init+0x234>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	2b03      	cmp	r3, #3
 80033e2:	d003      	beq.n	80033ec <HAL_GPIO_Init+0x234>
 80033e4:	21d5      	movs	r1, #213	; 0xd5
 80033e6:	482a      	ldr	r0, [pc, #168]	; (8003490 <HAL_GPIO_Init+0x2d8>)
 80033e8:	f7fe f998 	bl	800171c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	623b      	str	r3, [r7, #32]
          break;
 80033f2:	e086      	b.n	8003502 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d00b      	beq.n	8003414 <HAL_GPIO_Init+0x25c>
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d007      	beq.n	8003414 <HAL_GPIO_Init+0x25c>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	2b03      	cmp	r3, #3
 800340a:	d003      	beq.n	8003414 <HAL_GPIO_Init+0x25c>
 800340c:	21dc      	movs	r1, #220	; 0xdc
 800340e:	4820      	ldr	r0, [pc, #128]	; (8003490 <HAL_GPIO_Init+0x2d8>)
 8003410:	f7fe f984 	bl	800171c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	3304      	adds	r3, #4
 800341a:	623b      	str	r3, [r7, #32]
          break;
 800341c:	e071      	b.n	8003502 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	2b02      	cmp	r3, #2
 8003424:	d00b      	beq.n	800343e <HAL_GPIO_Init+0x286>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d007      	beq.n	800343e <HAL_GPIO_Init+0x286>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	2b03      	cmp	r3, #3
 8003434:	d003      	beq.n	800343e <HAL_GPIO_Init+0x286>
 8003436:	21e3      	movs	r1, #227	; 0xe3
 8003438:	4815      	ldr	r0, [pc, #84]	; (8003490 <HAL_GPIO_Init+0x2d8>)
 800343a:	f7fe f96f 	bl	800171c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	3308      	adds	r3, #8
 8003444:	623b      	str	r3, [r7, #32]
          break;
 8003446:	e05c      	b.n	8003502 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	2b02      	cmp	r3, #2
 800344e:	d00b      	beq.n	8003468 <HAL_GPIO_Init+0x2b0>
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d007      	beq.n	8003468 <HAL_GPIO_Init+0x2b0>
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	2b03      	cmp	r3, #3
 800345e:	d003      	beq.n	8003468 <HAL_GPIO_Init+0x2b0>
 8003460:	21ea      	movs	r1, #234	; 0xea
 8003462:	480b      	ldr	r0, [pc, #44]	; (8003490 <HAL_GPIO_Init+0x2d8>)
 8003464:	f7fe f95a 	bl	800171c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	330c      	adds	r3, #12
 800346e:	623b      	str	r3, [r7, #32]
          break;
 8003470:	e047      	b.n	8003502 <HAL_GPIO_Init+0x34a>
 8003472:	bf00      	nop
 8003474:	40010800 	.word	0x40010800
 8003478:	40010c00 	.word	0x40010c00
 800347c:	40011000 	.word	0x40011000
 8003480:	40011400 	.word	0x40011400
 8003484:	40011800 	.word	0x40011800
 8003488:	40011c00 	.word	0x40011c00
 800348c:	40012000 	.word	0x40012000
 8003490:	0800b660 	.word	0x0800b660
 8003494:	10110000 	.word	0x10110000
 8003498:	10210000 	.word	0x10210000
 800349c:	10310000 	.word	0x10310000
 80034a0:	10120000 	.word	0x10120000
 80034a4:	10220000 	.word	0x10220000
 80034a8:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00b      	beq.n	80034cc <HAL_GPIO_Init+0x314>
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d007      	beq.n	80034cc <HAL_GPIO_Init+0x314>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d003      	beq.n	80034cc <HAL_GPIO_Init+0x314>
 80034c4:	21f7      	movs	r1, #247	; 0xf7
 80034c6:	487c      	ldr	r0, [pc, #496]	; (80036b8 <HAL_GPIO_Init+0x500>)
 80034c8:	f7fe f928 	bl	800171c <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d102      	bne.n	80034da <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80034d4:	2304      	movs	r3, #4
 80034d6:	623b      	str	r3, [r7, #32]
          break;
 80034d8:	e013      	b.n	8003502 <HAL_GPIO_Init+0x34a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d105      	bne.n	80034ee <HAL_GPIO_Init+0x336>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034e2:	2308      	movs	r3, #8
 80034e4:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69fa      	ldr	r2, [r7, #28]
 80034ea:	611a      	str	r2, [r3, #16]
          break;
 80034ec:	e009      	b.n	8003502 <HAL_GPIO_Init+0x34a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034ee:	2308      	movs	r3, #8
 80034f0:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69fa      	ldr	r2, [r7, #28]
 80034f6:	615a      	str	r2, [r3, #20]
          break;
 80034f8:	e003      	b.n	8003502 <HAL_GPIO_Init+0x34a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80034fa:	2300      	movs	r3, #0
 80034fc:	623b      	str	r3, [r7, #32]
          break;
 80034fe:	e000      	b.n	8003502 <HAL_GPIO_Init+0x34a>
          break;
 8003500:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	2bff      	cmp	r3, #255	; 0xff
 8003506:	d801      	bhi.n	800350c <HAL_GPIO_Init+0x354>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	e001      	b.n	8003510 <HAL_GPIO_Init+0x358>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3304      	adds	r3, #4
 8003510:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	2bff      	cmp	r3, #255	; 0xff
 8003516:	d802      	bhi.n	800351e <HAL_GPIO_Init+0x366>
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	e002      	b.n	8003524 <HAL_GPIO_Init+0x36c>
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	3b08      	subs	r3, #8
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	210f      	movs	r1, #15
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	fa01 f303 	lsl.w	r3, r1, r3
 8003532:	43db      	mvns	r3, r3
 8003534:	401a      	ands	r2, r3
 8003536:	6a39      	ldr	r1, [r7, #32]
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	fa01 f303 	lsl.w	r3, r1, r3
 800353e:	431a      	orrs	r2, r3
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 80a2 	beq.w	8003696 <HAL_GPIO_Init+0x4de>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003552:	4b5a      	ldr	r3, [pc, #360]	; (80036bc <HAL_GPIO_Init+0x504>)
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	4a59      	ldr	r2, [pc, #356]	; (80036bc <HAL_GPIO_Init+0x504>)
 8003558:	f043 0301 	orr.w	r3, r3, #1
 800355c:	6193      	str	r3, [r2, #24]
 800355e:	4b57      	ldr	r3, [pc, #348]	; (80036bc <HAL_GPIO_Init+0x504>)
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	60bb      	str	r3, [r7, #8]
 8003568:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800356a:	4a55      	ldr	r2, [pc, #340]	; (80036c0 <HAL_GPIO_Init+0x508>)
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	089b      	lsrs	r3, r3, #2
 8003570:	3302      	adds	r3, #2
 8003572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003576:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	220f      	movs	r2, #15
 8003582:	fa02 f303 	lsl.w	r3, r2, r3
 8003586:	43db      	mvns	r3, r3
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	4013      	ands	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a4c      	ldr	r2, [pc, #304]	; (80036c4 <HAL_GPIO_Init+0x50c>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d01f      	beq.n	80035d6 <HAL_GPIO_Init+0x41e>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a4b      	ldr	r2, [pc, #300]	; (80036c8 <HAL_GPIO_Init+0x510>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d019      	beq.n	80035d2 <HAL_GPIO_Init+0x41a>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a4a      	ldr	r2, [pc, #296]	; (80036cc <HAL_GPIO_Init+0x514>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d013      	beq.n	80035ce <HAL_GPIO_Init+0x416>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a49      	ldr	r2, [pc, #292]	; (80036d0 <HAL_GPIO_Init+0x518>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00d      	beq.n	80035ca <HAL_GPIO_Init+0x412>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a48      	ldr	r2, [pc, #288]	; (80036d4 <HAL_GPIO_Init+0x51c>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d007      	beq.n	80035c6 <HAL_GPIO_Init+0x40e>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a47      	ldr	r2, [pc, #284]	; (80036d8 <HAL_GPIO_Init+0x520>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d101      	bne.n	80035c2 <HAL_GPIO_Init+0x40a>
 80035be:	2305      	movs	r3, #5
 80035c0:	e00a      	b.n	80035d8 <HAL_GPIO_Init+0x420>
 80035c2:	2306      	movs	r3, #6
 80035c4:	e008      	b.n	80035d8 <HAL_GPIO_Init+0x420>
 80035c6:	2304      	movs	r3, #4
 80035c8:	e006      	b.n	80035d8 <HAL_GPIO_Init+0x420>
 80035ca:	2303      	movs	r3, #3
 80035cc:	e004      	b.n	80035d8 <HAL_GPIO_Init+0x420>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e002      	b.n	80035d8 <HAL_GPIO_Init+0x420>
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <HAL_GPIO_Init+0x420>
 80035d6:	2300      	movs	r3, #0
 80035d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035da:	f002 0203 	and.w	r2, r2, #3
 80035de:	0092      	lsls	r2, r2, #2
 80035e0:	4093      	lsls	r3, r2
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80035e8:	4935      	ldr	r1, [pc, #212]	; (80036c0 <HAL_GPIO_Init+0x508>)
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	089b      	lsrs	r3, r3, #2
 80035ee:	3302      	adds	r3, #2
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d006      	beq.n	8003610 <HAL_GPIO_Init+0x458>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003602:	4b36      	ldr	r3, [pc, #216]	; (80036dc <HAL_GPIO_Init+0x524>)
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	4935      	ldr	r1, [pc, #212]	; (80036dc <HAL_GPIO_Init+0x524>)
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	4313      	orrs	r3, r2
 800360c:	600b      	str	r3, [r1, #0]
 800360e:	e006      	b.n	800361e <HAL_GPIO_Init+0x466>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003610:	4b32      	ldr	r3, [pc, #200]	; (80036dc <HAL_GPIO_Init+0x524>)
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	43db      	mvns	r3, r3
 8003618:	4930      	ldr	r1, [pc, #192]	; (80036dc <HAL_GPIO_Init+0x524>)
 800361a:	4013      	ands	r3, r2
 800361c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d006      	beq.n	8003638 <HAL_GPIO_Init+0x480>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800362a:	4b2c      	ldr	r3, [pc, #176]	; (80036dc <HAL_GPIO_Init+0x524>)
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	492b      	ldr	r1, [pc, #172]	; (80036dc <HAL_GPIO_Init+0x524>)
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	4313      	orrs	r3, r2
 8003634:	604b      	str	r3, [r1, #4]
 8003636:	e006      	b.n	8003646 <HAL_GPIO_Init+0x48e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003638:	4b28      	ldr	r3, [pc, #160]	; (80036dc <HAL_GPIO_Init+0x524>)
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	43db      	mvns	r3, r3
 8003640:	4926      	ldr	r1, [pc, #152]	; (80036dc <HAL_GPIO_Init+0x524>)
 8003642:	4013      	ands	r3, r2
 8003644:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d006      	beq.n	8003660 <HAL_GPIO_Init+0x4a8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003652:	4b22      	ldr	r3, [pc, #136]	; (80036dc <HAL_GPIO_Init+0x524>)
 8003654:	689a      	ldr	r2, [r3, #8]
 8003656:	4921      	ldr	r1, [pc, #132]	; (80036dc <HAL_GPIO_Init+0x524>)
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	4313      	orrs	r3, r2
 800365c:	608b      	str	r3, [r1, #8]
 800365e:	e006      	b.n	800366e <HAL_GPIO_Init+0x4b6>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003660:	4b1e      	ldr	r3, [pc, #120]	; (80036dc <HAL_GPIO_Init+0x524>)
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	43db      	mvns	r3, r3
 8003668:	491c      	ldr	r1, [pc, #112]	; (80036dc <HAL_GPIO_Init+0x524>)
 800366a:	4013      	ands	r3, r2
 800366c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d006      	beq.n	8003688 <HAL_GPIO_Init+0x4d0>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800367a:	4b18      	ldr	r3, [pc, #96]	; (80036dc <HAL_GPIO_Init+0x524>)
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	4917      	ldr	r1, [pc, #92]	; (80036dc <HAL_GPIO_Init+0x524>)
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	4313      	orrs	r3, r2
 8003684:	60cb      	str	r3, [r1, #12]
 8003686:	e006      	b.n	8003696 <HAL_GPIO_Init+0x4de>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003688:	4b14      	ldr	r3, [pc, #80]	; (80036dc <HAL_GPIO_Init+0x524>)
 800368a:	68da      	ldr	r2, [r3, #12]
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	43db      	mvns	r3, r3
 8003690:	4912      	ldr	r1, [pc, #72]	; (80036dc <HAL_GPIO_Init+0x524>)
 8003692:	4013      	ands	r3, r2
 8003694:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	3301      	adds	r3, #1
 800369a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	fa22 f303 	lsr.w	r3, r2, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f47f ae05 	bne.w	80032b6 <HAL_GPIO_Init+0xfe>
  }
}
 80036ac:	bf00      	nop
 80036ae:	bf00      	nop
 80036b0:	3728      	adds	r7, #40	; 0x28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	0800b660 	.word	0x0800b660
 80036bc:	40021000 	.word	0x40021000
 80036c0:	40010000 	.word	0x40010000
 80036c4:	40010800 	.word	0x40010800
 80036c8:	40010c00 	.word	0x40010c00
 80036cc:	40011000 	.word	0x40011000
 80036d0:	40011400 	.word	0x40011400
 80036d4:	40011800 	.word	0x40011800
 80036d8:	40011c00 	.word	0x40011c00
 80036dc:	40010400 	.word	0x40010400

080036e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	807b      	strh	r3, [r7, #2]
 80036ec:	4613      	mov	r3, r2
 80036ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80036f0:	887b      	ldrh	r3, [r7, #2]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d004      	beq.n	8003700 <HAL_GPIO_WritePin+0x20>
 80036f6:	887b      	ldrh	r3, [r7, #2]
 80036f8:	0c1b      	lsrs	r3, r3, #16
 80036fa:	041b      	lsls	r3, r3, #16
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d004      	beq.n	800370a <HAL_GPIO_WritePin+0x2a>
 8003700:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8003704:	480e      	ldr	r0, [pc, #56]	; (8003740 <HAL_GPIO_WritePin+0x60>)
 8003706:	f7fe f809 	bl	800171c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800370a:	787b      	ldrb	r3, [r7, #1]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d007      	beq.n	8003720 <HAL_GPIO_WritePin+0x40>
 8003710:	787b      	ldrb	r3, [r7, #1]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d004      	beq.n	8003720 <HAL_GPIO_WritePin+0x40>
 8003716:	f240 11d5 	movw	r1, #469	; 0x1d5
 800371a:	4809      	ldr	r0, [pc, #36]	; (8003740 <HAL_GPIO_WritePin+0x60>)
 800371c:	f7fd fffe 	bl	800171c <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8003720:	787b      	ldrb	r3, [r7, #1]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003726:	887a      	ldrh	r2, [r7, #2]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800372c:	e003      	b.n	8003736 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800372e:	887b      	ldrh	r3, [r7, #2]
 8003730:	041a      	lsls	r2, r3, #16
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	611a      	str	r2, [r3, #16]
}
 8003736:	bf00      	nop
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	0800b660 	.word	0x0800b660

08003744 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	460b      	mov	r3, r1
 800374e:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003750:	887b      	ldrh	r3, [r7, #2]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d004      	beq.n	8003760 <HAL_GPIO_TogglePin+0x1c>
 8003756:	887b      	ldrh	r3, [r7, #2]
 8003758:	0c1b      	lsrs	r3, r3, #16
 800375a:	041b      	lsls	r3, r3, #16
 800375c:	2b00      	cmp	r3, #0
 800375e:	d004      	beq.n	800376a <HAL_GPIO_TogglePin+0x26>
 8003760:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8003764:	480a      	ldr	r0, [pc, #40]	; (8003790 <HAL_GPIO_TogglePin+0x4c>)
 8003766:	f7fd ffd9 	bl	800171c <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003770:	887a      	ldrh	r2, [r7, #2]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	4013      	ands	r3, r2
 8003776:	041a      	lsls	r2, r3, #16
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	43d9      	mvns	r1, r3
 800377c:	887b      	ldrh	r3, [r7, #2]
 800377e:	400b      	ands	r3, r1
 8003780:	431a      	orrs	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	611a      	str	r2, [r3, #16]
}
 8003786:	bf00      	nop
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	0800b660 	.word	0x0800b660

08003794 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003798:	4b03      	ldr	r3, [pc, #12]	; (80037a8 <HAL_PWR_EnableBkUpAccess+0x14>)
 800379a:	2201      	movs	r2, #1
 800379c:	601a      	str	r2, [r3, #0]
}
 800379e:	bf00      	nop
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bc80      	pop	{r7}
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	420e0020 	.word	0x420e0020

080037ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e35c      	b.n	8003e78 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d01c      	beq.n	8003800 <HAL_RCC_OscConfig+0x54>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d116      	bne.n	8003800 <HAL_RCC_OscConfig+0x54>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d110      	bne.n	8003800 <HAL_RCC_OscConfig+0x54>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0308 	and.w	r3, r3, #8
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10a      	bne.n	8003800 <HAL_RCC_OscConfig+0x54>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d104      	bne.n	8003800 <HAL_RCC_OscConfig+0x54>
 80037f6:	f240 1167 	movw	r1, #359	; 0x167
 80037fa:	48a5      	ldr	r0, [pc, #660]	; (8003a90 <HAL_RCC_OscConfig+0x2e4>)
 80037fc:	f7fd ff8e 	bl	800171c <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 809a 	beq.w	8003942 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00e      	beq.n	8003834 <HAL_RCC_OscConfig+0x88>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800381e:	d009      	beq.n	8003834 <HAL_RCC_OscConfig+0x88>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003828:	d004      	beq.n	8003834 <HAL_RCC_OscConfig+0x88>
 800382a:	f240 116d 	movw	r1, #365	; 0x16d
 800382e:	4898      	ldr	r0, [pc, #608]	; (8003a90 <HAL_RCC_OscConfig+0x2e4>)
 8003830:	f7fd ff74 	bl	800171c <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003834:	4b97      	ldr	r3, [pc, #604]	; (8003a94 <HAL_RCC_OscConfig+0x2e8>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 030c 	and.w	r3, r3, #12
 800383c:	2b04      	cmp	r3, #4
 800383e:	d00c      	beq.n	800385a <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003840:	4b94      	ldr	r3, [pc, #592]	; (8003a94 <HAL_RCC_OscConfig+0x2e8>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 030c 	and.w	r3, r3, #12
 8003848:	2b08      	cmp	r3, #8
 800384a:	d112      	bne.n	8003872 <HAL_RCC_OscConfig+0xc6>
 800384c:	4b91      	ldr	r3, [pc, #580]	; (8003a94 <HAL_RCC_OscConfig+0x2e8>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003858:	d10b      	bne.n	8003872 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800385a:	4b8e      	ldr	r3, [pc, #568]	; (8003a94 <HAL_RCC_OscConfig+0x2e8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d06c      	beq.n	8003940 <HAL_RCC_OscConfig+0x194>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d168      	bne.n	8003940 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e302      	b.n	8003e78 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800387a:	d106      	bne.n	800388a <HAL_RCC_OscConfig+0xde>
 800387c:	4b85      	ldr	r3, [pc, #532]	; (8003a94 <HAL_RCC_OscConfig+0x2e8>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a84      	ldr	r2, [pc, #528]	; (8003a94 <HAL_RCC_OscConfig+0x2e8>)
 8003882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003886:	6013      	str	r3, [r2, #0]
 8003888:	e02e      	b.n	80038e8 <HAL_RCC_OscConfig+0x13c>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10c      	bne.n	80038ac <HAL_RCC_OscConfig+0x100>
 8003892:	4b80      	ldr	r3, [pc, #512]	; (8003a94 <HAL_RCC_OscConfig+0x2e8>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a7f      	ldr	r2, [pc, #508]	; (8003a94 <HAL_RCC_OscConfig+0x2e8>)
 8003898:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	4b7d      	ldr	r3, [pc, #500]	; (8003a94 <HAL_RCC_OscConfig+0x2e8>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a7c      	ldr	r2, [pc, #496]	; (8003a94 <HAL_RCC_OscConfig+0x2e8>)
 80038a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038a8:	6013      	str	r3, [r2, #0]
 80038aa:	e01d      	b.n	80038e8 <HAL_RCC_OscConfig+0x13c>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038b4:	d10c      	bne.n	80038d0 <HAL_RCC_OscConfig+0x124>
 80038b6:	4b77      	ldr	r3, [pc, #476]	; (8003a94 <HAL_RCC_OscConfig+0x2e8>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a76      	ldr	r2, [pc, #472]	; (8003a94 <HAL_RCC_OscConfig+0x2e8>)
 80038bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	4b74      	ldr	r3, [pc, #464]	; (8003a94 <HAL_RCC_OscConfig+0x2e8>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a73      	ldr	r2, [pc, #460]	; (8003a94 <HAL_RCC_OscConfig+0x2e8>)
 80038c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038cc:	6013      	str	r3, [r2, #0]
 80038ce:	e00b      	b.n	80038e8 <HAL_RCC_OscConfig+0x13c>
 80038d0:	4b70      	ldr	r3, [pc, #448]	; (8003a94 <HAL_RCC_OscConfig+0x2e8>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a6f      	ldr	r2, [pc, #444]	; (8003a94 <HAL_RCC_OscConfig+0x2e8>)
 80038d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	4b6d      	ldr	r3, [pc, #436]	; (8003a94 <HAL_RCC_OscConfig+0x2e8>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a6c      	ldr	r2, [pc, #432]	; (8003a94 <HAL_RCC_OscConfig+0x2e8>)
 80038e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d013      	beq.n	8003918 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f0:	f7fe fbc0 	bl	8002074 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f8:	f7fe fbbc 	bl	8002074 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b64      	cmp	r3, #100	; 0x64
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e2b6      	b.n	8003e78 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800390a:	4b62      	ldr	r3, [pc, #392]	; (8003a94 <HAL_RCC_OscConfig+0x2e8>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0f0      	beq.n	80038f8 <HAL_RCC_OscConfig+0x14c>
 8003916:	e014      	b.n	8003942 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003918:	f7fe fbac 	bl	8002074 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003920:	f7fe fba8 	bl	8002074 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b64      	cmp	r3, #100	; 0x64
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e2a2      	b.n	8003e78 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003932:	4b58      	ldr	r3, [pc, #352]	; (8003a94 <HAL_RCC_OscConfig+0x2e8>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0x174>
 800393e:	e000      	b.n	8003942 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d079      	beq.n	8003a42 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d008      	beq.n	8003968 <HAL_RCC_OscConfig+0x1bc>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d004      	beq.n	8003968 <HAL_RCC_OscConfig+0x1bc>
 800395e:	f240 11a1 	movw	r1, #417	; 0x1a1
 8003962:	484b      	ldr	r0, [pc, #300]	; (8003a90 <HAL_RCC_OscConfig+0x2e4>)
 8003964:	f7fd feda 	bl	800171c <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	2b1f      	cmp	r3, #31
 800396e:	d904      	bls.n	800397a <HAL_RCC_OscConfig+0x1ce>
 8003970:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8003974:	4846      	ldr	r0, [pc, #280]	; (8003a90 <HAL_RCC_OscConfig+0x2e4>)
 8003976:	f7fd fed1 	bl	800171c <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800397a:	4b46      	ldr	r3, [pc, #280]	; (8003a94 <HAL_RCC_OscConfig+0x2e8>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f003 030c 	and.w	r3, r3, #12
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00b      	beq.n	800399e <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003986:	4b43      	ldr	r3, [pc, #268]	; (8003a94 <HAL_RCC_OscConfig+0x2e8>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f003 030c 	and.w	r3, r3, #12
 800398e:	2b08      	cmp	r3, #8
 8003990:	d11c      	bne.n	80039cc <HAL_RCC_OscConfig+0x220>
 8003992:	4b40      	ldr	r3, [pc, #256]	; (8003a94 <HAL_RCC_OscConfig+0x2e8>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d116      	bne.n	80039cc <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800399e:	4b3d      	ldr	r3, [pc, #244]	; (8003a94 <HAL_RCC_OscConfig+0x2e8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d005      	beq.n	80039b6 <HAL_RCC_OscConfig+0x20a>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d001      	beq.n	80039b6 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e260      	b.n	8003e78 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b6:	4b37      	ldr	r3, [pc, #220]	; (8003a94 <HAL_RCC_OscConfig+0x2e8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	4933      	ldr	r1, [pc, #204]	; (8003a94 <HAL_RCC_OscConfig+0x2e8>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039ca:	e03a      	b.n	8003a42 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d020      	beq.n	8003a16 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039d4:	4b30      	ldr	r3, [pc, #192]	; (8003a98 <HAL_RCC_OscConfig+0x2ec>)
 80039d6:	2201      	movs	r2, #1
 80039d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039da:	f7fe fb4b 	bl	8002074 <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039e2:	f7fe fb47 	bl	8002074 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e241      	b.n	8003e78 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f4:	4b27      	ldr	r3, [pc, #156]	; (8003a94 <HAL_RCC_OscConfig+0x2e8>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0f0      	beq.n	80039e2 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a00:	4b24      	ldr	r3, [pc, #144]	; (8003a94 <HAL_RCC_OscConfig+0x2e8>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	4921      	ldr	r1, [pc, #132]	; (8003a94 <HAL_RCC_OscConfig+0x2e8>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	600b      	str	r3, [r1, #0]
 8003a14:	e015      	b.n	8003a42 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a16:	4b20      	ldr	r3, [pc, #128]	; (8003a98 <HAL_RCC_OscConfig+0x2ec>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a1c:	f7fe fb2a 	bl	8002074 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a24:	f7fe fb26 	bl	8002074 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e220      	b.n	8003e78 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a36:	4b17      	ldr	r3, [pc, #92]	; (8003a94 <HAL_RCC_OscConfig+0x2e8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f0      	bne.n	8003a24 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d048      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d008      	beq.n	8003a68 <HAL_RCC_OscConfig+0x2bc>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d004      	beq.n	8003a68 <HAL_RCC_OscConfig+0x2bc>
 8003a5e:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8003a62:	480b      	ldr	r0, [pc, #44]	; (8003a90 <HAL_RCC_OscConfig+0x2e4>)
 8003a64:	f7fd fe5a 	bl	800171c <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d021      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a70:	4b0a      	ldr	r3, [pc, #40]	; (8003a9c <HAL_RCC_OscConfig+0x2f0>)
 8003a72:	2201      	movs	r2, #1
 8003a74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a76:	f7fe fafd 	bl	8002074 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a7c:	e010      	b.n	8003aa0 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a7e:	f7fe faf9 	bl	8002074 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d909      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e1f3      	b.n	8003e78 <HAL_RCC_OscConfig+0x6cc>
 8003a90:	0800b69c 	.word	0x0800b69c
 8003a94:	40021000 	.word	0x40021000
 8003a98:	42420000 	.word	0x42420000
 8003a9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aa0:	4b67      	ldr	r3, [pc, #412]	; (8003c40 <HAL_RCC_OscConfig+0x494>)
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0e8      	beq.n	8003a7e <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003aac:	2001      	movs	r0, #1
 8003aae:	f000 fc0f 	bl	80042d0 <RCC_Delay>
 8003ab2:	e015      	b.n	8003ae0 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ab4:	4b63      	ldr	r3, [pc, #396]	; (8003c44 <HAL_RCC_OscConfig+0x498>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aba:	f7fe fadb 	bl	8002074 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ac2:	f7fe fad7 	bl	8002074 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e1d1      	b.n	8003e78 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ad4:	4b5a      	ldr	r3, [pc, #360]	; (8003c40 <HAL_RCC_OscConfig+0x494>)
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1f0      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 80c0 	beq.w	8003c6e <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aee:	2300      	movs	r3, #0
 8003af0:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00c      	beq.n	8003b14 <HAL_RCC_OscConfig+0x368>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d008      	beq.n	8003b14 <HAL_RCC_OscConfig+0x368>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	2b05      	cmp	r3, #5
 8003b08:	d004      	beq.n	8003b14 <HAL_RCC_OscConfig+0x368>
 8003b0a:	f240 2111 	movw	r1, #529	; 0x211
 8003b0e:	484e      	ldr	r0, [pc, #312]	; (8003c48 <HAL_RCC_OscConfig+0x49c>)
 8003b10:	f7fd fe04 	bl	800171c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b14:	4b4a      	ldr	r3, [pc, #296]	; (8003c40 <HAL_RCC_OscConfig+0x494>)
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d10d      	bne.n	8003b3c <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b20:	4b47      	ldr	r3, [pc, #284]	; (8003c40 <HAL_RCC_OscConfig+0x494>)
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	4a46      	ldr	r2, [pc, #280]	; (8003c40 <HAL_RCC_OscConfig+0x494>)
 8003b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b2a:	61d3      	str	r3, [r2, #28]
 8003b2c:	4b44      	ldr	r3, [pc, #272]	; (8003c40 <HAL_RCC_OscConfig+0x494>)
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b34:	60bb      	str	r3, [r7, #8]
 8003b36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b3c:	4b43      	ldr	r3, [pc, #268]	; (8003c4c <HAL_RCC_OscConfig+0x4a0>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d118      	bne.n	8003b7a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b48:	4b40      	ldr	r3, [pc, #256]	; (8003c4c <HAL_RCC_OscConfig+0x4a0>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a3f      	ldr	r2, [pc, #252]	; (8003c4c <HAL_RCC_OscConfig+0x4a0>)
 8003b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b54:	f7fe fa8e 	bl	8002074 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b5c:	f7fe fa8a 	bl	8002074 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b64      	cmp	r3, #100	; 0x64
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e184      	b.n	8003e78 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b6e:	4b37      	ldr	r3, [pc, #220]	; (8003c4c <HAL_RCC_OscConfig+0x4a0>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0f0      	beq.n	8003b5c <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d106      	bne.n	8003b90 <HAL_RCC_OscConfig+0x3e4>
 8003b82:	4b2f      	ldr	r3, [pc, #188]	; (8003c40 <HAL_RCC_OscConfig+0x494>)
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	4a2e      	ldr	r2, [pc, #184]	; (8003c40 <HAL_RCC_OscConfig+0x494>)
 8003b88:	f043 0301 	orr.w	r3, r3, #1
 8003b8c:	6213      	str	r3, [r2, #32]
 8003b8e:	e02d      	b.n	8003bec <HAL_RCC_OscConfig+0x440>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10c      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x406>
 8003b98:	4b29      	ldr	r3, [pc, #164]	; (8003c40 <HAL_RCC_OscConfig+0x494>)
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	4a28      	ldr	r2, [pc, #160]	; (8003c40 <HAL_RCC_OscConfig+0x494>)
 8003b9e:	f023 0301 	bic.w	r3, r3, #1
 8003ba2:	6213      	str	r3, [r2, #32]
 8003ba4:	4b26      	ldr	r3, [pc, #152]	; (8003c40 <HAL_RCC_OscConfig+0x494>)
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	4a25      	ldr	r2, [pc, #148]	; (8003c40 <HAL_RCC_OscConfig+0x494>)
 8003baa:	f023 0304 	bic.w	r3, r3, #4
 8003bae:	6213      	str	r3, [r2, #32]
 8003bb0:	e01c      	b.n	8003bec <HAL_RCC_OscConfig+0x440>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	2b05      	cmp	r3, #5
 8003bb8:	d10c      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x428>
 8003bba:	4b21      	ldr	r3, [pc, #132]	; (8003c40 <HAL_RCC_OscConfig+0x494>)
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	4a20      	ldr	r2, [pc, #128]	; (8003c40 <HAL_RCC_OscConfig+0x494>)
 8003bc0:	f043 0304 	orr.w	r3, r3, #4
 8003bc4:	6213      	str	r3, [r2, #32]
 8003bc6:	4b1e      	ldr	r3, [pc, #120]	; (8003c40 <HAL_RCC_OscConfig+0x494>)
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	4a1d      	ldr	r2, [pc, #116]	; (8003c40 <HAL_RCC_OscConfig+0x494>)
 8003bcc:	f043 0301 	orr.w	r3, r3, #1
 8003bd0:	6213      	str	r3, [r2, #32]
 8003bd2:	e00b      	b.n	8003bec <HAL_RCC_OscConfig+0x440>
 8003bd4:	4b1a      	ldr	r3, [pc, #104]	; (8003c40 <HAL_RCC_OscConfig+0x494>)
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	4a19      	ldr	r2, [pc, #100]	; (8003c40 <HAL_RCC_OscConfig+0x494>)
 8003bda:	f023 0301 	bic.w	r3, r3, #1
 8003bde:	6213      	str	r3, [r2, #32]
 8003be0:	4b17      	ldr	r3, [pc, #92]	; (8003c40 <HAL_RCC_OscConfig+0x494>)
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	4a16      	ldr	r2, [pc, #88]	; (8003c40 <HAL_RCC_OscConfig+0x494>)
 8003be6:	f023 0304 	bic.w	r3, r3, #4
 8003bea:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d015      	beq.n	8003c20 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bf4:	f7fe fa3e 	bl	8002074 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bfa:	e00a      	b.n	8003c12 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bfc:	f7fe fa3a 	bl	8002074 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d901      	bls.n	8003c12 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	e132      	b.n	8003e78 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c12:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <HAL_RCC_OscConfig+0x494>)
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0ee      	beq.n	8003bfc <HAL_RCC_OscConfig+0x450>
 8003c1e:	e01d      	b.n	8003c5c <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c20:	f7fe fa28 	bl	8002074 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c26:	e013      	b.n	8003c50 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c28:	f7fe fa24 	bl	8002074 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d90a      	bls.n	8003c50 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e11c      	b.n	8003e78 <HAL_RCC_OscConfig+0x6cc>
 8003c3e:	bf00      	nop
 8003c40:	40021000 	.word	0x40021000
 8003c44:	42420480 	.word	0x42420480
 8003c48:	0800b69c 	.word	0x0800b69c
 8003c4c:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c50:	4b8b      	ldr	r3, [pc, #556]	; (8003e80 <HAL_RCC_OscConfig+0x6d4>)
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1e5      	bne.n	8003c28 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c5c:	7dfb      	ldrb	r3, [r7, #23]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d105      	bne.n	8003c6e <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c62:	4b87      	ldr	r3, [pc, #540]	; (8003e80 <HAL_RCC_OscConfig+0x6d4>)
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	4a86      	ldr	r2, [pc, #536]	; (8003e80 <HAL_RCC_OscConfig+0x6d4>)
 8003c68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c6c:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00c      	beq.n	8003c90 <HAL_RCC_OscConfig+0x4e4>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d008      	beq.n	8003c90 <HAL_RCC_OscConfig+0x4e4>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d004      	beq.n	8003c90 <HAL_RCC_OscConfig+0x4e4>
 8003c86:	f240 21af 	movw	r1, #687	; 0x2af
 8003c8a:	487e      	ldr	r0, [pc, #504]	; (8003e84 <HAL_RCC_OscConfig+0x6d8>)
 8003c8c:	f7fd fd46 	bl	800171c <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	69db      	ldr	r3, [r3, #28]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 80ee 	beq.w	8003e76 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c9a:	4b79      	ldr	r3, [pc, #484]	; (8003e80 <HAL_RCC_OscConfig+0x6d4>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f003 030c 	and.w	r3, r3, #12
 8003ca2:	2b08      	cmp	r3, #8
 8003ca4:	f000 80ce 	beq.w	8003e44 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	f040 80b2 	bne.w	8003e16 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d009      	beq.n	8003cce <HAL_RCC_OscConfig+0x522>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc2:	d004      	beq.n	8003cce <HAL_RCC_OscConfig+0x522>
 8003cc4:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8003cc8:	486e      	ldr	r0, [pc, #440]	; (8003e84 <HAL_RCC_OscConfig+0x6d8>)
 8003cca:	f7fd fd27 	bl	800171c <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d04a      	beq.n	8003d6c <HAL_RCC_OscConfig+0x5c0>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cde:	d045      	beq.n	8003d6c <HAL_RCC_OscConfig+0x5c0>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ce8:	d040      	beq.n	8003d6c <HAL_RCC_OscConfig+0x5c0>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003cf2:	d03b      	beq.n	8003d6c <HAL_RCC_OscConfig+0x5c0>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cfc:	d036      	beq.n	8003d6c <HAL_RCC_OscConfig+0x5c0>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003d06:	d031      	beq.n	8003d6c <HAL_RCC_OscConfig+0x5c0>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003d10:	d02c      	beq.n	8003d6c <HAL_RCC_OscConfig+0x5c0>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003d1a:	d027      	beq.n	8003d6c <HAL_RCC_OscConfig+0x5c0>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d24:	d022      	beq.n	8003d6c <HAL_RCC_OscConfig+0x5c0>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003d2e:	d01d      	beq.n	8003d6c <HAL_RCC_OscConfig+0x5c0>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003d38:	d018      	beq.n	8003d6c <HAL_RCC_OscConfig+0x5c0>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003d42:	d013      	beq.n	8003d6c <HAL_RCC_OscConfig+0x5c0>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d4c:	d00e      	beq.n	8003d6c <HAL_RCC_OscConfig+0x5c0>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d52:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8003d56:	d009      	beq.n	8003d6c <HAL_RCC_OscConfig+0x5c0>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8003d60:	d004      	beq.n	8003d6c <HAL_RCC_OscConfig+0x5c0>
 8003d62:	f240 21b9 	movw	r1, #697	; 0x2b9
 8003d66:	4847      	ldr	r0, [pc, #284]	; (8003e84 <HAL_RCC_OscConfig+0x6d8>)
 8003d68:	f7fd fcd8 	bl	800171c <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d6c:	4b46      	ldr	r3, [pc, #280]	; (8003e88 <HAL_RCC_OscConfig+0x6dc>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d72:	f7fe f97f 	bl	8002074 <HAL_GetTick>
 8003d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d78:	e008      	b.n	8003d8c <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d7a:	f7fe f97b 	bl	8002074 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d901      	bls.n	8003d8c <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	e075      	b.n	8003e78 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d8c:	4b3c      	ldr	r3, [pc, #240]	; (8003e80 <HAL_RCC_OscConfig+0x6d4>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1f0      	bne.n	8003d7a <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a1b      	ldr	r3, [r3, #32]
 8003d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da0:	d116      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d009      	beq.n	8003dbe <HAL_RCC_OscConfig+0x612>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003db2:	d004      	beq.n	8003dbe <HAL_RCC_OscConfig+0x612>
 8003db4:	f240 21cf 	movw	r1, #719	; 0x2cf
 8003db8:	4832      	ldr	r0, [pc, #200]	; (8003e84 <HAL_RCC_OscConfig+0x6d8>)
 8003dba:	f7fd fcaf 	bl	800171c <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003dbe:	4b30      	ldr	r3, [pc, #192]	; (8003e80 <HAL_RCC_OscConfig+0x6d4>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	492d      	ldr	r1, [pc, #180]	; (8003e80 <HAL_RCC_OscConfig+0x6d4>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dd0:	4b2b      	ldr	r3, [pc, #172]	; (8003e80 <HAL_RCC_OscConfig+0x6d4>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a19      	ldr	r1, [r3, #32]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de0:	430b      	orrs	r3, r1
 8003de2:	4927      	ldr	r1, [pc, #156]	; (8003e80 <HAL_RCC_OscConfig+0x6d4>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003de8:	4b27      	ldr	r3, [pc, #156]	; (8003e88 <HAL_RCC_OscConfig+0x6dc>)
 8003dea:	2201      	movs	r2, #1
 8003dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dee:	f7fe f941 	bl	8002074 <HAL_GetTick>
 8003df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003df4:	e008      	b.n	8003e08 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df6:	f7fe f93d 	bl	8002074 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d901      	bls.n	8003e08 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e037      	b.n	8003e78 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e08:	4b1d      	ldr	r3, [pc, #116]	; (8003e80 <HAL_RCC_OscConfig+0x6d4>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d0f0      	beq.n	8003df6 <HAL_RCC_OscConfig+0x64a>
 8003e14:	e02f      	b.n	8003e76 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e16:	4b1c      	ldr	r3, [pc, #112]	; (8003e88 <HAL_RCC_OscConfig+0x6dc>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1c:	f7fe f92a 	bl	8002074 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e24:	f7fe f926 	bl	8002074 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e020      	b.n	8003e78 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e36:	4b12      	ldr	r3, [pc, #72]	; (8003e80 <HAL_RCC_OscConfig+0x6d4>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1f0      	bne.n	8003e24 <HAL_RCC_OscConfig+0x678>
 8003e42:	e018      	b.n	8003e76 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d101      	bne.n	8003e50 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e013      	b.n	8003e78 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e50:	4b0b      	ldr	r3, [pc, #44]	; (8003e80 <HAL_RCC_OscConfig+0x6d4>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d106      	bne.n	8003e72 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d001      	beq.n	8003e76 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e000      	b.n	8003e78 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	40021000 	.word	0x40021000
 8003e84:	0800b69c 	.word	0x0800b69c
 8003e88:	42420060 	.word	0x42420060

08003e8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e176      	b.n	800418e <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d116      	bne.n	8003eda <HAL_RCC_ClockConfig+0x4e>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d110      	bne.n	8003eda <HAL_RCC_ClockConfig+0x4e>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10a      	bne.n	8003eda <HAL_RCC_ClockConfig+0x4e>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0308 	and.w	r3, r3, #8
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d104      	bne.n	8003eda <HAL_RCC_ClockConfig+0x4e>
 8003ed0:	f44f 714e 	mov.w	r1, #824	; 0x338
 8003ed4:	4874      	ldr	r0, [pc, #464]	; (80040a8 <HAL_RCC_ClockConfig+0x21c>)
 8003ed6:	f7fd fc21 	bl	800171c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00a      	beq.n	8003ef6 <HAL_RCC_ClockConfig+0x6a>
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d007      	beq.n	8003ef6 <HAL_RCC_ClockConfig+0x6a>
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d004      	beq.n	8003ef6 <HAL_RCC_ClockConfig+0x6a>
 8003eec:	f240 3139 	movw	r1, #825	; 0x339
 8003ef0:	486d      	ldr	r0, [pc, #436]	; (80040a8 <HAL_RCC_ClockConfig+0x21c>)
 8003ef2:	f7fd fc13 	bl	800171c <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ef6:	4b6d      	ldr	r3, [pc, #436]	; (80040ac <HAL_RCC_ClockConfig+0x220>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d910      	bls.n	8003f26 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f04:	4b69      	ldr	r3, [pc, #420]	; (80040ac <HAL_RCC_ClockConfig+0x220>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f023 0207 	bic.w	r2, r3, #7
 8003f0c:	4967      	ldr	r1, [pc, #412]	; (80040ac <HAL_RCC_ClockConfig+0x220>)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f14:	4b65      	ldr	r3, [pc, #404]	; (80040ac <HAL_RCC_ClockConfig+0x220>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0307 	and.w	r3, r3, #7
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d001      	beq.n	8003f26 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e133      	b.n	800418e <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d049      	beq.n	8003fc6 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0304 	and.w	r3, r3, #4
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d005      	beq.n	8003f4a <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f3e:	4b5c      	ldr	r3, [pc, #368]	; (80040b0 <HAL_RCC_ClockConfig+0x224>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	4a5b      	ldr	r2, [pc, #364]	; (80040b0 <HAL_RCC_ClockConfig+0x224>)
 8003f44:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f48:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0308 	and.w	r3, r3, #8
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d005      	beq.n	8003f62 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f56:	4b56      	ldr	r3, [pc, #344]	; (80040b0 <HAL_RCC_ClockConfig+0x224>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	4a55      	ldr	r2, [pc, #340]	; (80040b0 <HAL_RCC_ClockConfig+0x224>)
 8003f5c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003f60:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d024      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x128>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	2b80      	cmp	r3, #128	; 0x80
 8003f70:	d020      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x128>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	2b90      	cmp	r3, #144	; 0x90
 8003f78:	d01c      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x128>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	2ba0      	cmp	r3, #160	; 0xa0
 8003f80:	d018      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x128>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	2bb0      	cmp	r3, #176	; 0xb0
 8003f88:	d014      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x128>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	2bc0      	cmp	r3, #192	; 0xc0
 8003f90:	d010      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x128>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	2bd0      	cmp	r3, #208	; 0xd0
 8003f98:	d00c      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x128>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	2be0      	cmp	r3, #224	; 0xe0
 8003fa0:	d008      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x128>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	2bf0      	cmp	r3, #240	; 0xf0
 8003fa8:	d004      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x128>
 8003faa:	f240 315f 	movw	r1, #863	; 0x35f
 8003fae:	483e      	ldr	r0, [pc, #248]	; (80040a8 <HAL_RCC_ClockConfig+0x21c>)
 8003fb0:	f7fd fbb4 	bl	800171c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fb4:	4b3e      	ldr	r3, [pc, #248]	; (80040b0 <HAL_RCC_ClockConfig+0x224>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	493b      	ldr	r1, [pc, #236]	; (80040b0 <HAL_RCC_ClockConfig+0x224>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d051      	beq.n	8004076 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00c      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x168>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d008      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x168>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2b02      	cmp	r3, #2
 8003fe8:	d004      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x168>
 8003fea:	f240 3166 	movw	r1, #870	; 0x366
 8003fee:	482e      	ldr	r0, [pc, #184]	; (80040a8 <HAL_RCC_ClockConfig+0x21c>)
 8003ff0:	f7fd fb94 	bl	800171c <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d107      	bne.n	800400c <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ffc:	4b2c      	ldr	r3, [pc, #176]	; (80040b0 <HAL_RCC_ClockConfig+0x224>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d115      	bne.n	8004034 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e0c0      	b.n	800418e <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	2b02      	cmp	r3, #2
 8004012:	d107      	bne.n	8004024 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004014:	4b26      	ldr	r3, [pc, #152]	; (80040b0 <HAL_RCC_ClockConfig+0x224>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d109      	bne.n	8004034 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e0b4      	b.n	800418e <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004024:	4b22      	ldr	r3, [pc, #136]	; (80040b0 <HAL_RCC_ClockConfig+0x224>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e0ac      	b.n	800418e <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004034:	4b1e      	ldr	r3, [pc, #120]	; (80040b0 <HAL_RCC_ClockConfig+0x224>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f023 0203 	bic.w	r2, r3, #3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	491b      	ldr	r1, [pc, #108]	; (80040b0 <HAL_RCC_ClockConfig+0x224>)
 8004042:	4313      	orrs	r3, r2
 8004044:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004046:	f7fe f815 	bl	8002074 <HAL_GetTick>
 800404a:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800404c:	e00a      	b.n	8004064 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800404e:	f7fe f811 	bl	8002074 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	f241 3288 	movw	r2, #5000	; 0x1388
 800405c:	4293      	cmp	r3, r2
 800405e:	d901      	bls.n	8004064 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e094      	b.n	800418e <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004064:	4b12      	ldr	r3, [pc, #72]	; (80040b0 <HAL_RCC_ClockConfig+0x224>)
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	f003 020c 	and.w	r2, r3, #12
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	429a      	cmp	r2, r3
 8004074:	d1eb      	bne.n	800404e <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004076:	4b0d      	ldr	r3, [pc, #52]	; (80040ac <HAL_RCC_ClockConfig+0x220>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	429a      	cmp	r2, r3
 8004082:	d217      	bcs.n	80040b4 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004084:	4b09      	ldr	r3, [pc, #36]	; (80040ac <HAL_RCC_ClockConfig+0x220>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f023 0207 	bic.w	r2, r3, #7
 800408c:	4907      	ldr	r1, [pc, #28]	; (80040ac <HAL_RCC_ClockConfig+0x220>)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	4313      	orrs	r3, r2
 8004092:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004094:	4b05      	ldr	r3, [pc, #20]	; (80040ac <HAL_RCC_ClockConfig+0x220>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d008      	beq.n	80040b4 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e073      	b.n	800418e <HAL_RCC_ClockConfig+0x302>
 80040a6:	bf00      	nop
 80040a8:	0800b69c 	.word	0x0800b69c
 80040ac:	40022000 	.word	0x40022000
 80040b0:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d025      	beq.n	800410c <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d018      	beq.n	80040fa <HAL_RCC_ClockConfig+0x26e>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d0:	d013      	beq.n	80040fa <HAL_RCC_ClockConfig+0x26e>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80040da:	d00e      	beq.n	80040fa <HAL_RCC_ClockConfig+0x26e>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80040e4:	d009      	beq.n	80040fa <HAL_RCC_ClockConfig+0x26e>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040ee:	d004      	beq.n	80040fa <HAL_RCC_ClockConfig+0x26e>
 80040f0:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 80040f4:	4828      	ldr	r0, [pc, #160]	; (8004198 <HAL_RCC_ClockConfig+0x30c>)
 80040f6:	f7fd fb11 	bl	800171c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040fa:	4b28      	ldr	r3, [pc, #160]	; (800419c <HAL_RCC_ClockConfig+0x310>)
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	4925      	ldr	r1, [pc, #148]	; (800419c <HAL_RCC_ClockConfig+0x310>)
 8004108:	4313      	orrs	r3, r2
 800410a:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0308 	and.w	r3, r3, #8
 8004114:	2b00      	cmp	r3, #0
 8004116:	d026      	beq.n	8004166 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d018      	beq.n	8004152 <HAL_RCC_ClockConfig+0x2c6>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004128:	d013      	beq.n	8004152 <HAL_RCC_ClockConfig+0x2c6>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004132:	d00e      	beq.n	8004152 <HAL_RCC_ClockConfig+0x2c6>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800413c:	d009      	beq.n	8004152 <HAL_RCC_ClockConfig+0x2c6>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004146:	d004      	beq.n	8004152 <HAL_RCC_ClockConfig+0x2c6>
 8004148:	f240 31ab 	movw	r1, #939	; 0x3ab
 800414c:	4812      	ldr	r0, [pc, #72]	; (8004198 <HAL_RCC_ClockConfig+0x30c>)
 800414e:	f7fd fae5 	bl	800171c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004152:	4b12      	ldr	r3, [pc, #72]	; (800419c <HAL_RCC_ClockConfig+0x310>)
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	490e      	ldr	r1, [pc, #56]	; (800419c <HAL_RCC_ClockConfig+0x310>)
 8004162:	4313      	orrs	r3, r2
 8004164:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004166:	f000 f821 	bl	80041ac <HAL_RCC_GetSysClockFreq>
 800416a:	4602      	mov	r2, r0
 800416c:	4b0b      	ldr	r3, [pc, #44]	; (800419c <HAL_RCC_ClockConfig+0x310>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	091b      	lsrs	r3, r3, #4
 8004172:	f003 030f 	and.w	r3, r3, #15
 8004176:	490a      	ldr	r1, [pc, #40]	; (80041a0 <HAL_RCC_ClockConfig+0x314>)
 8004178:	5ccb      	ldrb	r3, [r1, r3]
 800417a:	fa22 f303 	lsr.w	r3, r2, r3
 800417e:	4a09      	ldr	r2, [pc, #36]	; (80041a4 <HAL_RCC_ClockConfig+0x318>)
 8004180:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004182:	4b09      	ldr	r3, [pc, #36]	; (80041a8 <HAL_RCC_ClockConfig+0x31c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4618      	mov	r0, r3
 8004188:	f7fd ff32 	bl	8001ff0 <HAL_InitTick>

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	0800b69c 	.word	0x0800b69c
 800419c:	40021000 	.word	0x40021000
 80041a0:	0800bdc8 	.word	0x0800bdc8
 80041a4:	20000000 	.word	0x20000000
 80041a8:	20000004 	.word	0x20000004

080041ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041ac:	b490      	push	{r4, r7}
 80041ae:	b08a      	sub	sp, #40	; 0x28
 80041b0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80041b2:	4b2a      	ldr	r3, [pc, #168]	; (800425c <HAL_RCC_GetSysClockFreq+0xb0>)
 80041b4:	1d3c      	adds	r4, r7, #4
 80041b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80041bc:	f240 2301 	movw	r3, #513	; 0x201
 80041c0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80041c2:	2300      	movs	r3, #0
 80041c4:	61fb      	str	r3, [r7, #28]
 80041c6:	2300      	movs	r3, #0
 80041c8:	61bb      	str	r3, [r7, #24]
 80041ca:	2300      	movs	r3, #0
 80041cc:	627b      	str	r3, [r7, #36]	; 0x24
 80041ce:	2300      	movs	r3, #0
 80041d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80041d2:	2300      	movs	r3, #0
 80041d4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80041d6:	4b22      	ldr	r3, [pc, #136]	; (8004260 <HAL_RCC_GetSysClockFreq+0xb4>)
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	f003 030c 	and.w	r3, r3, #12
 80041e2:	2b04      	cmp	r3, #4
 80041e4:	d002      	beq.n	80041ec <HAL_RCC_GetSysClockFreq+0x40>
 80041e6:	2b08      	cmp	r3, #8
 80041e8:	d003      	beq.n	80041f2 <HAL_RCC_GetSysClockFreq+0x46>
 80041ea:	e02d      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041ec:	4b1d      	ldr	r3, [pc, #116]	; (8004264 <HAL_RCC_GetSysClockFreq+0xb8>)
 80041ee:	623b      	str	r3, [r7, #32]
      break;
 80041f0:	e02d      	b.n	800424e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	0c9b      	lsrs	r3, r3, #18
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80041fe:	4413      	add	r3, r2
 8004200:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004204:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d013      	beq.n	8004238 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004210:	4b13      	ldr	r3, [pc, #76]	; (8004260 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	0c5b      	lsrs	r3, r3, #17
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800421e:	4413      	add	r3, r2
 8004220:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004224:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	4a0e      	ldr	r2, [pc, #56]	; (8004264 <HAL_RCC_GetSysClockFreq+0xb8>)
 800422a:	fb02 f203 	mul.w	r2, r2, r3
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	fbb2 f3f3 	udiv	r3, r2, r3
 8004234:	627b      	str	r3, [r7, #36]	; 0x24
 8004236:	e004      	b.n	8004242 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	4a0b      	ldr	r2, [pc, #44]	; (8004268 <HAL_RCC_GetSysClockFreq+0xbc>)
 800423c:	fb02 f303 	mul.w	r3, r2, r3
 8004240:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	623b      	str	r3, [r7, #32]
      break;
 8004246:	e002      	b.n	800424e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004248:	4b06      	ldr	r3, [pc, #24]	; (8004264 <HAL_RCC_GetSysClockFreq+0xb8>)
 800424a:	623b      	str	r3, [r7, #32]
      break;
 800424c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800424e:	6a3b      	ldr	r3, [r7, #32]
}
 8004250:	4618      	mov	r0, r3
 8004252:	3728      	adds	r7, #40	; 0x28
 8004254:	46bd      	mov	sp, r7
 8004256:	bc90      	pop	{r4, r7}
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	0800b6d4 	.word	0x0800b6d4
 8004260:	40021000 	.word	0x40021000
 8004264:	007a1200 	.word	0x007a1200
 8004268:	003d0900 	.word	0x003d0900

0800426c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004270:	4b02      	ldr	r3, [pc, #8]	; (800427c <HAL_RCC_GetHCLKFreq+0x10>)
 8004272:	681b      	ldr	r3, [r3, #0]
}
 8004274:	4618      	mov	r0, r3
 8004276:	46bd      	mov	sp, r7
 8004278:	bc80      	pop	{r7}
 800427a:	4770      	bx	lr
 800427c:	20000000 	.word	0x20000000

08004280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004284:	f7ff fff2 	bl	800426c <HAL_RCC_GetHCLKFreq>
 8004288:	4602      	mov	r2, r0
 800428a:	4b05      	ldr	r3, [pc, #20]	; (80042a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	0a1b      	lsrs	r3, r3, #8
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	4903      	ldr	r1, [pc, #12]	; (80042a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004296:	5ccb      	ldrb	r3, [r1, r3]
 8004298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800429c:	4618      	mov	r0, r3
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	40021000 	.word	0x40021000
 80042a4:	0800bdd8 	.word	0x0800bdd8

080042a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042ac:	f7ff ffde 	bl	800426c <HAL_RCC_GetHCLKFreq>
 80042b0:	4602      	mov	r2, r0
 80042b2:	4b05      	ldr	r3, [pc, #20]	; (80042c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	0adb      	lsrs	r3, r3, #11
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	4903      	ldr	r1, [pc, #12]	; (80042cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80042be:	5ccb      	ldrb	r3, [r1, r3]
 80042c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40021000 	.word	0x40021000
 80042cc:	0800bdd8 	.word	0x0800bdd8

080042d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80042d8:	4b0a      	ldr	r3, [pc, #40]	; (8004304 <RCC_Delay+0x34>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a0a      	ldr	r2, [pc, #40]	; (8004308 <RCC_Delay+0x38>)
 80042de:	fba2 2303 	umull	r2, r3, r2, r3
 80042e2:	0a5b      	lsrs	r3, r3, #9
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	fb02 f303 	mul.w	r3, r2, r3
 80042ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80042ec:	bf00      	nop
  }
  while (Delay --);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	1e5a      	subs	r2, r3, #1
 80042f2:	60fa      	str	r2, [r7, #12]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1f9      	bne.n	80042ec <RCC_Delay+0x1c>
}
 80042f8:	bf00      	nop
 80042fa:	bf00      	nop
 80042fc:	3714      	adds	r7, #20
 80042fe:	46bd      	mov	sp, r7
 8004300:	bc80      	pop	{r7}
 8004302:	4770      	bx	lr
 8004304:	20000000 	.word	0x20000000
 8004308:	10624dd3 	.word	0x10624dd3

0800430c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004314:	2300      	movs	r3, #0
 8004316:	613b      	str	r3, [r7, #16]
 8004318:	2300      	movs	r3, #0
 800431a:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	2b00      	cmp	r3, #0
 8004326:	d11b      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d115      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10f      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0308 	and.w	r3, r3, #8
 8004348:	2b00      	cmp	r3, #0
 800434a:	d109      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0310 	and.w	r3, r3, #16
 8004354:	2b00      	cmp	r3, #0
 8004356:	d103      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004358:	216c      	movs	r1, #108	; 0x6c
 800435a:	4873      	ldr	r0, [pc, #460]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800435c:	f7fd f9de 	bl	800171c <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 8095 	beq.w	8004498 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    FlagStatus pwrclkchanged = RESET;
 800436e:	2300      	movs	r3, #0
 8004370:	75fb      	strb	r3, [r7, #23]

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d012      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x94>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004382:	d00d      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800438c:	d008      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x94>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004396:	d003      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004398:	2174      	movs	r1, #116	; 0x74
 800439a:	4863      	ldr	r0, [pc, #396]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800439c:	f7fd f9be 	bl	800171c <assert_failed>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043a0:	4b62      	ldr	r3, [pc, #392]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80043a2:	69db      	ldr	r3, [r3, #28]
 80043a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10d      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ac:	4b5f      	ldr	r3, [pc, #380]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80043ae:	69db      	ldr	r3, [r3, #28]
 80043b0:	4a5e      	ldr	r2, [pc, #376]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80043b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043b6:	61d3      	str	r3, [r2, #28]
 80043b8:	4b5c      	ldr	r3, [pc, #368]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043c0:	60bb      	str	r3, [r7, #8]
 80043c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043c4:	2301      	movs	r3, #1
 80043c6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043c8:	4b59      	ldr	r3, [pc, #356]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d118      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xfa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043d4:	4b56      	ldr	r3, [pc, #344]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a55      	ldr	r2, [pc, #340]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80043da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043e0:	f7fd fe48 	bl	8002074 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e6:	e008      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043e8:	f7fd fe44 	bl	8002074 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b64      	cmp	r3, #100	; 0x64
 80043f4:	d901      	bls.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xee>
        {
          return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e092      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x214>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043fa:	4b4d      	ldr	r3, [pc, #308]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0f0      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004406:	4b49      	ldr	r3, [pc, #292]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800440e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d02e      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	429a      	cmp	r2, r3
 8004422:	d027      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004424:	4b41      	ldr	r3, [pc, #260]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004426:	6a1b      	ldr	r3, [r3, #32]
 8004428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800442c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800442e:	4b41      	ldr	r3, [pc, #260]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004430:	2201      	movs	r2, #1
 8004432:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004434:	4b3f      	ldr	r3, [pc, #252]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004436:	2200      	movs	r2, #0
 8004438:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800443a:	4a3c      	ldr	r2, [pc, #240]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d014      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800444a:	f7fd fe13 	bl	8002074 <HAL_GetTick>
 800444e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004450:	e00a      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x15c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004452:	f7fd fe0f 	bl	8002074 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004460:	4293      	cmp	r3, r2
 8004462:	d901      	bls.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          {
            return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e05b      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x214>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004468:	4b30      	ldr	r3, [pc, #192]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0ee      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x146>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004474:	4b2d      	ldr	r3, [pc, #180]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	492a      	ldr	r1, [pc, #168]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004482:	4313      	orrs	r3, r2
 8004484:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004486:	7dfb      	ldrb	r3, [r7, #23]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d105      	bne.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800448c:	4b27      	ldr	r3, [pc, #156]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	4a26      	ldr	r2, [pc, #152]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004492:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004496:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d01f      	beq.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d012      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044b4:	d00d      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044be:	d008      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80044c8:	d003      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80044ca:	21b9      	movs	r1, #185	; 0xb9
 80044cc:	4816      	ldr	r0, [pc, #88]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80044ce:	f7fd f925 	bl	800171c <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044d2:	4b16      	ldr	r3, [pc, #88]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	4913      	ldr	r1, [pc, #76]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0310 	and.w	r3, r3, #16
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d016      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	695b      	ldr	r3, [r3, #20]
 80044f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044f8:	d008      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d004      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004502:	f240 1115 	movw	r1, #277	; 0x115
 8004506:	4808      	ldr	r0, [pc, #32]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004508:	f7fd f908 	bl	800171c <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800450c:	4b07      	ldr	r3, [pc, #28]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	4904      	ldr	r1, [pc, #16]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800451a:	4313      	orrs	r3, r2
 800451c:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3718      	adds	r7, #24
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	0800b6e4 	.word	0x0800b6e4
 800452c:	40021000 	.word	0x40021000
 8004530:	40007000 	.word	0x40007000
 8004534:	42420440 	.word	0x42420440

08004538 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004538:	b590      	push	{r4, r7, lr}
 800453a:	b08d      	sub	sp, #52	; 0x34
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004540:	4b7a      	ldr	r3, [pc, #488]	; (800472c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>)
 8004542:	f107 040c 	add.w	r4, r7, #12
 8004546:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004548:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800454c:	f240 2301 	movw	r3, #513	; 0x201
 8004550:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004552:	2300      	movs	r3, #0
 8004554:	627b      	str	r3, [r7, #36]	; 0x24
 8004556:	2300      	movs	r3, #0
 8004558:	62fb      	str	r3, [r7, #44]	; 0x2c
 800455a:	2300      	movs	r3, #0
 800455c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800455e:	2300      	movs	r3, #0
 8004560:	61fb      	str	r3, [r7, #28]
 8004562:	2300      	movs	r3, #0
 8004564:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b00      	cmp	r3, #0
 800456e:	d118      	bne.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d113      	bne.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10e      	bne.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f003 0308 	and.w	r3, r3, #8
 800458a:	2b00      	cmp	r3, #0
 800458c:	d109      	bne.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f003 0310 	and.w	r3, r3, #16
 8004594:	2b00      	cmp	r3, #0
 8004596:	d104      	bne.n	80045a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004598:	f44f 71cb 	mov.w	r1, #406	; 0x196
 800459c:	4864      	ldr	r0, [pc, #400]	; (8004730 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>)
 800459e:	f7fd f8bd 	bl	800171c <assert_failed>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	3b01      	subs	r3, #1
 80045a6:	2b0f      	cmp	r3, #15
 80045a8:	f200 80b6 	bhi.w	8004718 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80045ac:	a201      	add	r2, pc, #4	; (adr r2, 80045b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>)
 80045ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b2:	bf00      	nop
 80045b4:	08004697 	.word	0x08004697
 80045b8:	080046fd 	.word	0x080046fd
 80045bc:	08004719 	.word	0x08004719
 80045c0:	08004687 	.word	0x08004687
 80045c4:	08004719 	.word	0x08004719
 80045c8:	08004719 	.word	0x08004719
 80045cc:	08004719 	.word	0x08004719
 80045d0:	0800468f 	.word	0x0800468f
 80045d4:	08004719 	.word	0x08004719
 80045d8:	08004719 	.word	0x08004719
 80045dc:	08004719 	.word	0x08004719
 80045e0:	08004719 	.word	0x08004719
 80045e4:	08004719 	.word	0x08004719
 80045e8:	08004719 	.word	0x08004719
 80045ec:	08004719 	.word	0x08004719
 80045f0:	080045f5 	.word	0x080045f5
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80045f4:	4b4f      	ldr	r3, [pc, #316]	; (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80045fa:	4b4e      	ldr	r3, [pc, #312]	; (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004602:	2b00      	cmp	r3, #0
 8004604:	f000 808a 	beq.w	800471c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	0c9b      	lsrs	r3, r3, #18
 800460c:	f003 030f 	and.w	r3, r3, #15
 8004610:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004614:	4413      	add	r3, r2
 8004616:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800461a:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d018      	beq.n	8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004626:	4b43      	ldr	r3, [pc, #268]	; (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	0c5b      	lsrs	r3, r3, #17
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004634:	4413      	add	r3, r2
 8004636:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800463a:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00d      	beq.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004646:	4a3c      	ldr	r2, [pc, #240]	; (8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x200>)
 8004648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464a:	fbb2 f2f3 	udiv	r2, r2, r3
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	fb02 f303 	mul.w	r3, r2, r3
 8004654:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004656:	e004      	b.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004658:	6a3b      	ldr	r3, [r7, #32]
 800465a:	4a38      	ldr	r2, [pc, #224]	; (800473c <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 800465c:	fb02 f303 	mul.w	r3, r2, r3
 8004660:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004662:	4b34      	ldr	r3, [pc, #208]	; (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800466a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800466e:	d102      	bne.n	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8004670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004672:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8004674:	e052      	b.n	800471c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          frequency = (pllclk * 2) / 3;
 8004676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	4a31      	ldr	r2, [pc, #196]	; (8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 800467c:	fba2 2303 	umull	r2, r3, r2, r3
 8004680:	085b      	lsrs	r3, r3, #1
 8004682:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004684:	e04a      	b.n	800471c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8004686:	f7ff fd91 	bl	80041ac <HAL_RCC_GetSysClockFreq>
 800468a:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 800468c:	e049      	b.n	8004722 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800468e:	f7ff fd8d 	bl	80041ac <HAL_RCC_GetSysClockFreq>
 8004692:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004694:	e045      	b.n	8004722 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8004696:	4b27      	ldr	r3, [pc, #156]	; (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046a6:	d108      	bne.n	80046ba <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        frequency = LSE_VALUE;
 80046b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80046b8:	e01f      	b.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046c4:	d109      	bne.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80046c6:	4b1b      	ldr	r3, [pc, #108]	; (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
      {
        frequency = LSI_VALUE;
 80046d2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80046d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80046d8:	e00f      	b.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046e4:	d11c      	bne.n	8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 80046e6:	4b13      	ldr	r3, [pc, #76]	; (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d016      	beq.n	8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
      {
        frequency = HSE_VALUE / 128U;
 80046f2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80046f6:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80046f8:	e012      	b.n	8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 80046fa:	e011      	b.n	8004720 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80046fc:	f7ff fdd4 	bl	80042a8 <HAL_RCC_GetPCLK2Freq>
 8004700:	4602      	mov	r2, r0
 8004702:	4b0c      	ldr	r3, [pc, #48]	; (8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	0b9b      	lsrs	r3, r3, #14
 8004708:	f003 0303 	and.w	r3, r3, #3
 800470c:	3301      	adds	r3, #1
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	fbb2 f3f3 	udiv	r3, r2, r3
 8004714:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004716:	e004      	b.n	8004722 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
    default:
    {
      break;
 8004718:	bf00      	nop
 800471a:	e002      	b.n	8004722 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
      break;
 800471c:	bf00      	nop
 800471e:	e000      	b.n	8004722 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
      break;
 8004720:	bf00      	nop
    }
  }
  return (frequency);
 8004722:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004724:	4618      	mov	r0, r3
 8004726:	3734      	adds	r7, #52	; 0x34
 8004728:	46bd      	mov	sp, r7
 800472a:	bd90      	pop	{r4, r7, pc}
 800472c:	0800b720 	.word	0x0800b720
 8004730:	0800b6e4 	.word	0x0800b6e4
 8004734:	40021000 	.word	0x40021000
 8004738:	007a1200 	.word	0x007a1200
 800473c:	003d0900 	.word	0x003d0900
 8004740:	aaaaaaab 	.word	0xaaaaaaab

08004744 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e0b4      	b.n	80048c4 <HAL_RTC_Init+0x180>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a5b      	ldr	r2, [pc, #364]	; (80048cc <HAL_RTC_Init+0x188>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d004      	beq.n	800476e <HAL_RTC_Init+0x2a>
 8004764:	f240 111d 	movw	r1, #285	; 0x11d
 8004768:	4859      	ldr	r0, [pc, #356]	; (80048d0 <HAL_RTC_Init+0x18c>)
 800476a:	f7fc ffd7 	bl	800171c <assert_failed>
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d012      	beq.n	800479c <HAL_RTC_Init+0x58>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	2b80      	cmp	r3, #128	; 0x80
 800477c:	d00e      	beq.n	800479c <HAL_RTC_Init+0x58>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004786:	d009      	beq.n	800479c <HAL_RTC_Init+0x58>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004790:	d004      	beq.n	800479c <HAL_RTC_Init+0x58>
 8004792:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004796:	484e      	ldr	r0, [pc, #312]	; (80048d0 <HAL_RTC_Init+0x18c>)
 8004798:	f7fc ffc0 	bl	800171c <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047a4:	d309      	bcc.n	80047ba <HAL_RTC_Init+0x76>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ae:	d004      	beq.n	80047ba <HAL_RTC_Init+0x76>
 80047b0:	f240 111f 	movw	r1, #287	; 0x11f
 80047b4:	4846      	ldr	r0, [pc, #280]	; (80048d0 <HAL_RTC_Init+0x18c>)
 80047b6:	f7fc ffb1 	bl	800171c <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	7c5b      	ldrb	r3, [r3, #17]
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d105      	bne.n	80047d0 <HAL_RTC_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7fd f826 	bl	800181c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2202      	movs	r2, #2
 80047d4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 fbca 	bl	8004f70 <HAL_RTC_WaitForSynchro>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d004      	beq.n	80047ec <HAL_RTC_Init+0xa8>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2204      	movs	r2, #4
 80047e6:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e06b      	b.n	80048c4 <HAL_RTC_Init+0x180>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 fc83 	bl	80050f8 <RTC_EnterInitMode>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d004      	beq.n	8004802 <HAL_RTC_Init+0xbe>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2204      	movs	r2, #4
 80047fc:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e060      	b.n	80048c4 <HAL_RTC_Init+0x180>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0207 	bic.w	r2, r2, #7
 8004810:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d005      	beq.n	8004826 <HAL_RTC_Init+0xe2>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800481a:	4b2e      	ldr	r3, [pc, #184]	; (80048d4 <HAL_RTC_Init+0x190>)
 800481c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481e:	4a2d      	ldr	r2, [pc, #180]	; (80048d4 <HAL_RTC_Init+0x190>)
 8004820:	f023 0301 	bic.w	r3, r3, #1
 8004824:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004826:	4b2b      	ldr	r3, [pc, #172]	; (80048d4 <HAL_RTC_Init+0x190>)
 8004828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	4928      	ldr	r1, [pc, #160]	; (80048d4 <HAL_RTC_Init+0x190>)
 8004834:	4313      	orrs	r3, r2
 8004836:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004840:	d003      	beq.n	800484a <HAL_RTC_Init+0x106>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	e00e      	b.n	8004868 <HAL_RTC_Init+0x124>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800484a:	2001      	movs	r0, #1
 800484c:	f7ff fe74 	bl	8004538 <HAL_RCCEx_GetPeriphCLKFreq>
 8004850:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d104      	bne.n	8004862 <HAL_RTC_Init+0x11e>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2204      	movs	r2, #4
 800485c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e030      	b.n	80048c4 <HAL_RTC_Init+0x180>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	3b01      	subs	r3, #1
 8004866:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f023 010f 	bic.w	r1, r3, #15
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	0c1a      	lsrs	r2, r3, #16
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	430a      	orrs	r2, r1
 800487c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	0c1b      	lsrs	r3, r3, #16
 8004886:	041b      	lsls	r3, r3, #16
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	b291      	uxth	r1, r2
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	430b      	orrs	r3, r1
 8004892:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 fc57 	bl	8005148 <RTC_ExitInitMode>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d004      	beq.n	80048aa <HAL_RTC_Init+0x166>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2204      	movs	r2, #4
 80048a4:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e00c      	b.n	80048c4 <HAL_RTC_Init+0x180>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80048c2:	2300      	movs	r3, #0
  }
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3710      	adds	r7, #16
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	40002800 	.word	0x40002800
 80048d0:	0800b730 	.word	0x0800b730
 80048d4:	40006c00 	.word	0x40006c00

080048d8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80048d8:	b590      	push	{r4, r7, lr}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	2300      	movs	r3, #0
 80048ea:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d002      	beq.n	80048f8 <HAL_RTC_SetTime+0x20>
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e0cd      	b.n	8004a98 <HAL_RTC_SetTime+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d007      	beq.n	8004912 <HAL_RTC_SetTime+0x3a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d004      	beq.n	8004912 <HAL_RTC_SetTime+0x3a>
 8004908:	f240 21ca 	movw	r1, #714	; 0x2ca
 800490c:	4864      	ldr	r0, [pc, #400]	; (8004aa0 <HAL_RTC_SetTime+0x1c8>)
 800490e:	f7fc ff05 	bl	800171c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	7c1b      	ldrb	r3, [r3, #16]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d101      	bne.n	800491e <HAL_RTC_SetTime+0x46>
 800491a:	2302      	movs	r3, #2
 800491c:	e0bc      	b.n	8004a98 <HAL_RTC_SetTime+0x1c0>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2201      	movs	r2, #1
 8004922:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2202      	movs	r2, #2
 8004928:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d12e      	bne.n	800498e <HAL_RTC_SetTime+0xb6>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	2b17      	cmp	r3, #23
 8004936:	d904      	bls.n	8004942 <HAL_RTC_SetTime+0x6a>
 8004938:	f240 21d3 	movw	r1, #723	; 0x2d3
 800493c:	4858      	ldr	r0, [pc, #352]	; (8004aa0 <HAL_RTC_SetTime+0x1c8>)
 800493e:	f7fc feed 	bl	800171c <assert_failed>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	785b      	ldrb	r3, [r3, #1]
 8004946:	2b3b      	cmp	r3, #59	; 0x3b
 8004948:	d904      	bls.n	8004954 <HAL_RTC_SetTime+0x7c>
 800494a:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 800494e:	4854      	ldr	r0, [pc, #336]	; (8004aa0 <HAL_RTC_SetTime+0x1c8>)
 8004950:	f7fc fee4 	bl	800171c <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	789b      	ldrb	r3, [r3, #2]
 8004958:	2b3b      	cmp	r3, #59	; 0x3b
 800495a:	d904      	bls.n	8004966 <HAL_RTC_SetTime+0x8e>
 800495c:	f240 21d5 	movw	r1, #725	; 0x2d5
 8004960:	484f      	ldr	r0, [pc, #316]	; (8004aa0 <HAL_RTC_SetTime+0x1c8>)
 8004962:	f7fc fedb 	bl	800171c <assert_failed>

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	461a      	mov	r2, r3
 800496c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004970:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	785b      	ldrb	r3, [r3, #1]
 8004978:	4619      	mov	r1, r3
 800497a:	460b      	mov	r3, r1
 800497c:	011b      	lsls	r3, r3, #4
 800497e:	1a5b      	subs	r3, r3, r1
 8004980:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004982:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004988:	4413      	add	r3, r2
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	e045      	b.n	8004a1a <HAL_RTC_SetTime+0x142>
  }
  else
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	4618      	mov	r0, r3
 8004994:	f000 fc1d 	bl	80051d2 <RTC_Bcd2ToByte>
 8004998:	4603      	mov	r3, r0
 800499a:	2b17      	cmp	r3, #23
 800499c:	d904      	bls.n	80049a8 <HAL_RTC_SetTime+0xd0>
 800499e:	f240 21dd 	movw	r1, #733	; 0x2dd
 80049a2:	483f      	ldr	r0, [pc, #252]	; (8004aa0 <HAL_RTC_SetTime+0x1c8>)
 80049a4:	f7fc feba 	bl	800171c <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	785b      	ldrb	r3, [r3, #1]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f000 fc10 	bl	80051d2 <RTC_Bcd2ToByte>
 80049b2:	4603      	mov	r3, r0
 80049b4:	2b3b      	cmp	r3, #59	; 0x3b
 80049b6:	d904      	bls.n	80049c2 <HAL_RTC_SetTime+0xea>
 80049b8:	f240 21de 	movw	r1, #734	; 0x2de
 80049bc:	4838      	ldr	r0, [pc, #224]	; (8004aa0 <HAL_RTC_SetTime+0x1c8>)
 80049be:	f7fc fead 	bl	800171c <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	789b      	ldrb	r3, [r3, #2]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 fc03 	bl	80051d2 <RTC_Bcd2ToByte>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b3b      	cmp	r3, #59	; 0x3b
 80049d0:	d904      	bls.n	80049dc <HAL_RTC_SetTime+0x104>
 80049d2:	f240 21df 	movw	r1, #735	; 0x2df
 80049d6:	4832      	ldr	r0, [pc, #200]	; (8004aa0 <HAL_RTC_SetTime+0x1c8>)
 80049d8:	f7fc fea0 	bl	800171c <assert_failed>

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 fbf6 	bl	80051d2 <RTC_Bcd2ToByte>
 80049e6:	4603      	mov	r3, r0
 80049e8:	461a      	mov	r2, r3
 80049ea:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80049ee:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	785b      	ldrb	r3, [r3, #1]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 fbeb 	bl	80051d2 <RTC_Bcd2ToByte>
 80049fc:	4603      	mov	r3, r0
 80049fe:	461a      	mov	r2, r3
 8004a00:	4613      	mov	r3, r2
 8004a02:	011b      	lsls	r3, r3, #4
 8004a04:	1a9b      	subs	r3, r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004a08:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	789b      	ldrb	r3, [r3, #2]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 fbdf 	bl	80051d2 <RTC_Bcd2ToByte>
 8004a14:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004a16:	4423      	add	r3, r4
 8004a18:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004a1a:	6979      	ldr	r1, [r7, #20]
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 fb04 	bl	800502a <RTC_WriteTimeCounter>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d007      	beq.n	8004a38 <HAL_RTC_SetTime+0x160>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2204      	movs	r2, #4
 8004a2c:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e02f      	b.n	8004a98 <HAL_RTC_SetTime+0x1c0>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685a      	ldr	r2, [r3, #4]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 0205 	bic.w	r2, r2, #5
 8004a46:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f000 fb15 	bl	8005078 <RTC_ReadAlarmCounter>
 8004a4e:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a56:	d018      	beq.n	8004a8a <HAL_RTC_SetTime+0x1b2>
    {
      if (counter_alarm < counter_time)
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d214      	bcs.n	8004a8a <HAL_RTC_SetTime+0x1b2>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004a66:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004a6a:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004a6c:	6939      	ldr	r1, [r7, #16]
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 fb1b 	bl	80050aa <RTC_WriteAlarmCounter>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d007      	beq.n	8004a8a <HAL_RTC_SetTime+0x1b2>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2204      	movs	r2, #4
 8004a7e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e006      	b.n	8004a98 <HAL_RTC_SetTime+0x1c0>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8004a96:	2300      	movs	r3, #0
  }
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	371c      	adds	r7, #28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd90      	pop	{r4, r7, pc}
 8004aa0:	0800b730 	.word	0x0800b730

08004aa4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b088      	sub	sp, #32
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	61bb      	str	r3, [r7, #24]
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	61fb      	str	r3, [r7, #28]
 8004ab8:	2300      	movs	r3, #0
 8004aba:	617b      	str	r3, [r7, #20]
 8004abc:	2300      	movs	r3, #0
 8004abe:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d002      	beq.n	8004acc <HAL_RTC_GetTime+0x28>
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e0c0      	b.n	8004c52 <HAL_RTC_GetTime+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d007      	beq.n	8004ae6 <HAL_RTC_GetTime+0x42>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d004      	beq.n	8004ae6 <HAL_RTC_GetTime+0x42>
 8004adc:	f240 312d 	movw	r1, #813	; 0x32d
 8004ae0:	485e      	ldr	r0, [pc, #376]	; (8004c5c <HAL_RTC_GetTime+0x1b8>)
 8004ae2:	f7fc fe1b 	bl	800171c <assert_failed>

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f003 0304 	and.w	r3, r3, #4
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <HAL_RTC_GetTime+0x54>
  {
    return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e0ac      	b.n	8004c52 <HAL_RTC_GetTime+0x1ae>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 fa66 	bl	8004fca <RTC_ReadTimeCounter>
 8004afe:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	4a57      	ldr	r2, [pc, #348]	; (8004c60 <HAL_RTC_GetTime+0x1bc>)
 8004b04:	fba2 2303 	umull	r2, r3, r2, r3
 8004b08:	0adb      	lsrs	r3, r3, #11
 8004b0a:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	4b54      	ldr	r3, [pc, #336]	; (8004c60 <HAL_RTC_GetTime+0x1bc>)
 8004b10:	fba3 1302 	umull	r1, r3, r3, r2
 8004b14:	0adb      	lsrs	r3, r3, #11
 8004b16:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004b1a:	fb01 f303 	mul.w	r3, r1, r3
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	4a50      	ldr	r2, [pc, #320]	; (8004c64 <HAL_RTC_GetTime+0x1c0>)
 8004b22:	fba2 2303 	umull	r2, r3, r2, r3
 8004b26:	095b      	lsrs	r3, r3, #5
 8004b28:	b2da      	uxtb	r2, r3
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	4a4b      	ldr	r2, [pc, #300]	; (8004c60 <HAL_RTC_GetTime+0x1bc>)
 8004b32:	fba2 1203 	umull	r1, r2, r2, r3
 8004b36:	0ad2      	lsrs	r2, r2, #11
 8004b38:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004b3c:	fb01 f202 	mul.w	r2, r1, r2
 8004b40:	1a9a      	subs	r2, r3, r2
 8004b42:	4b48      	ldr	r3, [pc, #288]	; (8004c64 <HAL_RTC_GetTime+0x1c0>)
 8004b44:	fba3 1302 	umull	r1, r3, r3, r2
 8004b48:	0959      	lsrs	r1, r3, #5
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	011b      	lsls	r3, r3, #4
 8004b4e:	1a5b      	subs	r3, r3, r1
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	1ad1      	subs	r1, r2, r3
 8004b54:	b2ca      	uxtb	r2, r1
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	2b17      	cmp	r3, #23
 8004b5e:	d955      	bls.n	8004c0c <HAL_RTC_GetTime+0x168>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	4a41      	ldr	r2, [pc, #260]	; (8004c68 <HAL_RTC_GetTime+0x1c4>)
 8004b64:	fba2 2303 	umull	r2, r3, r2, r3
 8004b68:	091b      	lsrs	r3, r3, #4
 8004b6a:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8004b6c:	6939      	ldr	r1, [r7, #16]
 8004b6e:	4b3e      	ldr	r3, [pc, #248]	; (8004c68 <HAL_RTC_GetTime+0x1c4>)
 8004b70:	fba3 2301 	umull	r2, r3, r3, r1
 8004b74:	091a      	lsrs	r2, r3, #4
 8004b76:	4613      	mov	r3, r2
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	4413      	add	r3, r2
 8004b7c:	00db      	lsls	r3, r3, #3
 8004b7e:	1aca      	subs	r2, r1, r3
 8004b80:	b2d2      	uxtb	r2, r2
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 fa76 	bl	8005078 <RTC_ReadAlarmCounter>
 8004b8c:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b94:	d008      	beq.n	8004ba8 <HAL_RTC_GetTime+0x104>
 8004b96:	69fa      	ldr	r2, [r7, #28]
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d904      	bls.n	8004ba8 <HAL_RTC_GetTime+0x104>
    {
      counter_alarm -= counter_time;
 8004b9e:	69fa      	ldr	r2, [r7, #28]
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	61fb      	str	r3, [r7, #28]
 8004ba6:	e002      	b.n	8004bae <HAL_RTC_GetTime+0x10a>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8004ba8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bac:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	4a2e      	ldr	r2, [pc, #184]	; (8004c6c <HAL_RTC_GetTime+0x1c8>)
 8004bb2:	fb02 f303 	mul.w	r3, r2, r3
 8004bb6:	69ba      	ldr	r2, [r7, #24]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004bbc:	69b9      	ldr	r1, [r7, #24]
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 fa33 	bl	800502a <RTC_WriteTimeCounter>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <HAL_RTC_GetTime+0x12a>
    {
      return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e041      	b.n	8004c52 <HAL_RTC_GetTime+0x1ae>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd4:	d00c      	beq.n	8004bf0 <HAL_RTC_GetTime+0x14c>
    {
      counter_alarm += counter_time;
 8004bd6:	69fa      	ldr	r2, [r7, #28]
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	4413      	add	r3, r2
 8004bdc:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004bde:	69f9      	ldr	r1, [r7, #28]
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f000 fa62 	bl	80050aa <RTC_WriteAlarmCounter>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00a      	beq.n	8004c02 <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e030      	b.n	8004c52 <HAL_RTC_GetTime+0x1ae>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004bf0:	69f9      	ldr	r1, [r7, #28]
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 fa59 	bl	80050aa <RTC_WriteAlarmCounter>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e027      	b.n	8004c52 <HAL_RTC_GetTime+0x1ae>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8004c02:	6979      	ldr	r1, [r7, #20]
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 fb01 	bl	800520c <RTC_DateUpdate>
 8004c0a:	e003      	b.n	8004c14 <HAL_RTC_GetTime+0x170>
  }
  else
  {
    sTime->Hours = hours;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d01a      	beq.n	8004c50 <HAL_RTC_GetTime+0x1ac>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 faba 	bl	8005198 <RTC_ByteToBcd2>
 8004c24:	4603      	mov	r3, r0
 8004c26:	461a      	mov	r2, r3
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	785b      	ldrb	r3, [r3, #1]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f000 fab1 	bl	8005198 <RTC_ByteToBcd2>
 8004c36:	4603      	mov	r3, r0
 8004c38:	461a      	mov	r2, r3
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	789b      	ldrb	r3, [r3, #2]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 faa8 	bl	8005198 <RTC_ByteToBcd2>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3720      	adds	r7, #32
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	0800b730 	.word	0x0800b730
 8004c60:	91a2b3c5 	.word	0x91a2b3c5
 8004c64:	88888889 	.word	0x88888889
 8004c68:	aaaaaaab 	.word	0xaaaaaaab
 8004c6c:	00015180 	.word	0x00015180

08004c70 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b088      	sub	sp, #32
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	61fb      	str	r3, [r7, #28]
 8004c80:	2300      	movs	r3, #0
 8004c82:	61bb      	str	r3, [r7, #24]
 8004c84:	2300      	movs	r3, #0
 8004c86:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d002      	beq.n	8004c94 <HAL_RTC_SetDate+0x24>
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e0fc      	b.n	8004e92 <HAL_RTC_SetDate+0x222>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d007      	beq.n	8004cae <HAL_RTC_SetDate+0x3e>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d004      	beq.n	8004cae <HAL_RTC_SetDate+0x3e>
 8004ca4:	f44f 7167 	mov.w	r1, #924	; 0x39c
 8004ca8:	487c      	ldr	r0, [pc, #496]	; (8004e9c <HAL_RTC_SetDate+0x22c>)
 8004caa:	f7fc fd37 	bl	800171c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	7c1b      	ldrb	r3, [r3, #16]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d101      	bne.n	8004cba <HAL_RTC_SetDate+0x4a>
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	e0eb      	b.n	8004e92 <HAL_RTC_SetDate+0x222>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d12f      	bne.n	8004d2c <HAL_RTC_SetDate+0xbc>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	78db      	ldrb	r3, [r3, #3]
 8004cd0:	2b63      	cmp	r3, #99	; 0x63
 8004cd2:	d904      	bls.n	8004cde <HAL_RTC_SetDate+0x6e>
 8004cd4:	f240 31a5 	movw	r1, #933	; 0x3a5
 8004cd8:	4870      	ldr	r0, [pc, #448]	; (8004e9c <HAL_RTC_SetDate+0x22c>)
 8004cda:	f7fc fd1f 	bl	800171c <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	785b      	ldrb	r3, [r3, #1]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <HAL_RTC_SetDate+0x7e>
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	785b      	ldrb	r3, [r3, #1]
 8004cea:	2b0c      	cmp	r3, #12
 8004cec:	d904      	bls.n	8004cf8 <HAL_RTC_SetDate+0x88>
 8004cee:	f240 31a6 	movw	r1, #934	; 0x3a6
 8004cf2:	486a      	ldr	r0, [pc, #424]	; (8004e9c <HAL_RTC_SetDate+0x22c>)
 8004cf4:	f7fc fd12 	bl	800171c <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	789b      	ldrb	r3, [r3, #2]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d003      	beq.n	8004d08 <HAL_RTC_SetDate+0x98>
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	789b      	ldrb	r3, [r3, #2]
 8004d04:	2b1f      	cmp	r3, #31
 8004d06:	d904      	bls.n	8004d12 <HAL_RTC_SetDate+0xa2>
 8004d08:	f240 31a7 	movw	r1, #935	; 0x3a7
 8004d0c:	4863      	ldr	r0, [pc, #396]	; (8004e9c <HAL_RTC_SetDate+0x22c>)
 8004d0e:	f7fc fd05 	bl	800171c <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	78da      	ldrb	r2, [r3, #3]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	785a      	ldrb	r2, [r3, #1]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	789a      	ldrb	r2, [r3, #2]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	739a      	strb	r2, [r3, #14]
 8004d2a:	e051      	b.n	8004dd0 <HAL_RTC_SetDate+0x160>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	78db      	ldrb	r3, [r3, #3]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 fa4e 	bl	80051d2 <RTC_Bcd2ToByte>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b63      	cmp	r3, #99	; 0x63
 8004d3a:	d904      	bls.n	8004d46 <HAL_RTC_SetDate+0xd6>
 8004d3c:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 8004d40:	4856      	ldr	r0, [pc, #344]	; (8004e9c <HAL_RTC_SetDate+0x22c>)
 8004d42:	f7fc fceb 	bl	800171c <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	785b      	ldrb	r3, [r3, #1]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 fa41 	bl	80051d2 <RTC_Bcd2ToByte>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d007      	beq.n	8004d66 <HAL_RTC_SetDate+0xf6>
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	785b      	ldrb	r3, [r3, #1]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 fa39 	bl	80051d2 <RTC_Bcd2ToByte>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b0c      	cmp	r3, #12
 8004d64:	d904      	bls.n	8004d70 <HAL_RTC_SetDate+0x100>
 8004d66:	f240 31b1 	movw	r1, #945	; 0x3b1
 8004d6a:	484c      	ldr	r0, [pc, #304]	; (8004e9c <HAL_RTC_SetDate+0x22c>)
 8004d6c:	f7fc fcd6 	bl	800171c <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	789b      	ldrb	r3, [r3, #2]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 fa2c 	bl	80051d2 <RTC_Bcd2ToByte>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d007      	beq.n	8004d90 <HAL_RTC_SetDate+0x120>
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	789b      	ldrb	r3, [r3, #2]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 fa24 	bl	80051d2 <RTC_Bcd2ToByte>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b1f      	cmp	r3, #31
 8004d8e:	d904      	bls.n	8004d9a <HAL_RTC_SetDate+0x12a>
 8004d90:	f240 31b2 	movw	r1, #946	; 0x3b2
 8004d94:	4841      	ldr	r0, [pc, #260]	; (8004e9c <HAL_RTC_SetDate+0x22c>)
 8004d96:	f7fc fcc1 	bl	800171c <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	78db      	ldrb	r3, [r3, #3]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 fa17 	bl	80051d2 <RTC_Bcd2ToByte>
 8004da4:	4603      	mov	r3, r0
 8004da6:	461a      	mov	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	785b      	ldrb	r3, [r3, #1]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f000 fa0e 	bl	80051d2 <RTC_Bcd2ToByte>
 8004db6:	4603      	mov	r3, r0
 8004db8:	461a      	mov	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	789b      	ldrb	r3, [r3, #2]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 fa05 	bl	80051d2 <RTC_Bcd2ToByte>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	461a      	mov	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	7bdb      	ldrb	r3, [r3, #15]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	7b59      	ldrb	r1, [r3, #13]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	7b9b      	ldrb	r3, [r3, #14]
 8004dde:	461a      	mov	r2, r3
 8004de0:	f000 faf0 	bl	80053c4 <RTC_WeekDayNum>
 8004de4:	4603      	mov	r3, r0
 8004de6:	461a      	mov	r2, r3
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	7b1a      	ldrb	r2, [r3, #12]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f000 f8e8 	bl	8004fca <RTC_ReadTimeCounter>
 8004dfa:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	4a28      	ldr	r2, [pc, #160]	; (8004ea0 <HAL_RTC_SetDate+0x230>)
 8004e00:	fba2 2303 	umull	r2, r3, r2, r3
 8004e04:	0adb      	lsrs	r3, r3, #11
 8004e06:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	2b18      	cmp	r3, #24
 8004e0c:	d93a      	bls.n	8004e84 <HAL_RTC_SetDate+0x214>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	4a24      	ldr	r2, [pc, #144]	; (8004ea4 <HAL_RTC_SetDate+0x234>)
 8004e12:	fba2 2303 	umull	r2, r3, r2, r3
 8004e16:	091b      	lsrs	r3, r3, #4
 8004e18:	4a23      	ldr	r2, [pc, #140]	; (8004ea8 <HAL_RTC_SetDate+0x238>)
 8004e1a:	fb02 f303 	mul.w	r3, r2, r3
 8004e1e:	69fa      	ldr	r2, [r7, #28]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004e24:	69f9      	ldr	r1, [r7, #28]
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f000 f8ff 	bl	800502a <RTC_WriteTimeCounter>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d007      	beq.n	8004e42 <HAL_RTC_SetDate+0x1d2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2204      	movs	r2, #4
 8004e36:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e027      	b.n	8004e92 <HAL_RTC_SetDate+0x222>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f000 f918 	bl	8005078 <RTC_ReadAlarmCounter>
 8004e48:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e50:	d018      	beq.n	8004e84 <HAL_RTC_SetDate+0x214>
    {
      if (counter_alarm < counter_time)
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d214      	bcs.n	8004e84 <HAL_RTC_SetDate+0x214>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004e60:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004e64:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004e66:	69b9      	ldr	r1, [r7, #24]
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f000 f91e 	bl	80050aa <RTC_WriteAlarmCounter>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d007      	beq.n	8004e84 <HAL_RTC_SetDate+0x214>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2204      	movs	r2, #4
 8004e78:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e006      	b.n	8004e92 <HAL_RTC_SetDate+0x222>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2201      	movs	r2, #1
 8004e88:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3720      	adds	r7, #32
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	0800b730 	.word	0x0800b730
 8004ea0:	91a2b3c5 	.word	0x91a2b3c5
 8004ea4:	aaaaaaab 	.word	0xaaaaaaab
 8004ea8:	00015180 	.word	0x00015180

08004eac <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8004eb8:	f107 0314 	add.w	r3, r7, #20
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	460a      	mov	r2, r1
 8004ec0:	801a      	strh	r2, [r3, #0]
 8004ec2:	460a      	mov	r2, r1
 8004ec4:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d002      	beq.n	8004ed2 <HAL_RTC_GetDate+0x26>
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e045      	b.n	8004f62 <HAL_RTC_GetDate+0xb6>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d007      	beq.n	8004eec <HAL_RTC_GetDate+0x40>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d004      	beq.n	8004eec <HAL_RTC_GetDate+0x40>
 8004ee2:	f240 410e 	movw	r1, #1038	; 0x40e
 8004ee6:	4821      	ldr	r0, [pc, #132]	; (8004f6c <HAL_RTC_GetDate+0xc0>)
 8004ee8:	f7fc fc18 	bl	800171c <assert_failed>

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8004eec:	f107 0314 	add.w	r3, r7, #20
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f7ff fdd5 	bl	8004aa4 <HAL_RTC_GetTime>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <HAL_RTC_GetDate+0x58>
  {
    return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e02e      	b.n	8004f62 <HAL_RTC_GetDate+0xb6>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	7b1a      	ldrb	r2, [r3, #12]
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	7bda      	ldrb	r2, [r3, #15]
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	7b5a      	ldrb	r2, [r3, #13]
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	7b9a      	ldrb	r2, [r3, #14]
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d01a      	beq.n	8004f60 <HAL_RTC_GetDate+0xb4>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	78db      	ldrb	r3, [r3, #3]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 f932 	bl	8005198 <RTC_ByteToBcd2>
 8004f34:	4603      	mov	r3, r0
 8004f36:	461a      	mov	r2, r3
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	785b      	ldrb	r3, [r3, #1]
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 f929 	bl	8005198 <RTC_ByteToBcd2>
 8004f46:	4603      	mov	r3, r0
 8004f48:	461a      	mov	r2, r3
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	789b      	ldrb	r3, [r3, #2]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 f920 	bl	8005198 <RTC_ByteToBcd2>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3718      	adds	r7, #24
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	0800b730 	.word	0x0800b730

08004f70 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e01d      	b.n	8004fc2 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f022 0208 	bic.w	r2, r2, #8
 8004f94:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004f96:	f7fd f86d 	bl	8002074 <HAL_GetTick>
 8004f9a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004f9c:	e009      	b.n	8004fb2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004f9e:	f7fd f869 	bl	8002074 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fac:	d901      	bls.n	8004fb2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e007      	b.n	8004fc2 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f003 0308 	and.w	r3, r3, #8
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0ee      	beq.n	8004f9e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}

08004fca <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b087      	sub	sp, #28
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	827b      	strh	r3, [r7, #18]
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	823b      	strh	r3, [r7, #16]
 8004fda:	2300      	movs	r3, #0
 8004fdc:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	69db      	ldr	r3, [r3, #28]
 8004ff0:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004ffa:	8a7a      	ldrh	r2, [r7, #18]
 8004ffc:	8a3b      	ldrh	r3, [r7, #16]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d008      	beq.n	8005014 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8005002:	8a3b      	ldrh	r3, [r7, #16]
 8005004:	041a      	lsls	r2, r3, #16
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	b29b      	uxth	r3, r3
 800500e:	4313      	orrs	r3, r2
 8005010:	617b      	str	r3, [r7, #20]
 8005012:	e004      	b.n	800501e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8005014:	8a7b      	ldrh	r3, [r7, #18]
 8005016:	041a      	lsls	r2, r3, #16
 8005018:	89fb      	ldrh	r3, [r7, #14]
 800501a:	4313      	orrs	r3, r2
 800501c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800501e:	697b      	ldr	r3, [r7, #20]
}
 8005020:	4618      	mov	r0, r3
 8005022:	371c      	adds	r7, #28
 8005024:	46bd      	mov	sp, r7
 8005026:	bc80      	pop	{r7}
 8005028:	4770      	bx	lr

0800502a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b084      	sub	sp, #16
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
 8005032:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005034:	2300      	movs	r3, #0
 8005036:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f85d 	bl	80050f8 <RTC_EnterInitMode>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d002      	beq.n	800504a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	73fb      	strb	r3, [r7, #15]
 8005048:	e011      	b.n	800506e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	0c12      	lsrs	r2, r2, #16
 8005052:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	b292      	uxth	r2, r2
 800505c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f872 	bl	8005148 <RTC_ExitInitMode>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800506e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8005080:	2300      	movs	r3, #0
 8005082:	81fb      	strh	r3, [r7, #14]
 8005084:	2300      	movs	r3, #0
 8005086:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8005098:	89fb      	ldrh	r3, [r7, #14]
 800509a:	041a      	lsls	r2, r3, #16
 800509c:	89bb      	ldrh	r3, [r7, #12]
 800509e:	4313      	orrs	r3, r2
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3714      	adds	r7, #20
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bc80      	pop	{r7}
 80050a8:	4770      	bx	lr

080050aa <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b084      	sub	sp, #16
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
 80050b2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050b4:	2300      	movs	r3, #0
 80050b6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 f81d 	bl	80050f8 <RTC_EnterInitMode>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d002      	beq.n	80050ca <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	73fb      	strb	r3, [r7, #15]
 80050c8:	e011      	b.n	80050ee <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	683a      	ldr	r2, [r7, #0]
 80050d0:	0c12      	lsrs	r2, r2, #16
 80050d2:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	b292      	uxth	r2, r2
 80050dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f832 	bl	8005148 <RTC_ExitInitMode>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3710      	adds	r7, #16
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005100:	2300      	movs	r3, #0
 8005102:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005104:	f7fc ffb6 	bl	8002074 <HAL_GetTick>
 8005108:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800510a:	e009      	b.n	8005120 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800510c:	f7fc ffb2 	bl	8002074 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800511a:	d901      	bls.n	8005120 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e00f      	b.n	8005140 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f003 0320 	and.w	r3, r3, #32
 800512a:	2b00      	cmp	r3, #0
 800512c:	d0ee      	beq.n	800510c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f042 0210 	orr.w	r2, r2, #16
 800513c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 0210 	bic.w	r2, r2, #16
 8005162:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005164:	f7fc ff86 	bl	8002074 <HAL_GetTick>
 8005168:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800516a:	e009      	b.n	8005180 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800516c:	f7fc ff82 	bl	8002074 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800517a:	d901      	bls.n	8005180 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e007      	b.n	8005190 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f003 0320 	and.w	r3, r3, #32
 800518a:	2b00      	cmp	r3, #0
 800518c:	d0ee      	beq.n	800516c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	4603      	mov	r3, r0
 80051a0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80051a6:	e005      	b.n	80051b4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	3301      	adds	r3, #1
 80051ac:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80051ae:	79fb      	ldrb	r3, [r7, #7]
 80051b0:	3b0a      	subs	r3, #10
 80051b2:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80051b4:	79fb      	ldrb	r3, [r7, #7]
 80051b6:	2b09      	cmp	r3, #9
 80051b8:	d8f6      	bhi.n	80051a8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	011b      	lsls	r3, r3, #4
 80051c0:	b2da      	uxtb	r2, r3
 80051c2:	79fb      	ldrb	r3, [r7, #7]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	b2db      	uxtb	r3, r3
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3714      	adds	r7, #20
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bc80      	pop	{r7}
 80051d0:	4770      	bx	lr

080051d2 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b085      	sub	sp, #20
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	4603      	mov	r3, r0
 80051da:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80051dc:	2300      	movs	r3, #0
 80051de:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80051e0:	79fb      	ldrb	r3, [r7, #7]
 80051e2:	091b      	lsrs	r3, r3, #4
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	461a      	mov	r2, r3
 80051e8:	4613      	mov	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	005b      	lsls	r3, r3, #1
 80051f0:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80051f2:	79fb      	ldrb	r3, [r7, #7]
 80051f4:	f003 030f 	and.w	r3, r3, #15
 80051f8:	b2da      	uxtb	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	4413      	add	r3, r2
 8005200:	b2db      	uxtb	r3, r3
}
 8005202:	4618      	mov	r0, r3
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	bc80      	pop	{r7}
 800520a:	4770      	bx	lr

0800520c <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8005216:	2300      	movs	r3, #0
 8005218:	617b      	str	r3, [r7, #20]
 800521a:	2300      	movs	r3, #0
 800521c:	613b      	str	r3, [r7, #16]
 800521e:	2300      	movs	r3, #0
 8005220:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8005222:	2300      	movs	r3, #0
 8005224:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	7bdb      	ldrb	r3, [r3, #15]
 800522a:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	7b5b      	ldrb	r3, [r3, #13]
 8005230:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	7b9b      	ldrb	r3, [r3, #14]
 8005236:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8005238:	2300      	movs	r3, #0
 800523a:	60bb      	str	r3, [r7, #8]
 800523c:	e06f      	b.n	800531e <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	2b01      	cmp	r3, #1
 8005242:	d011      	beq.n	8005268 <RTC_DateUpdate+0x5c>
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	2b03      	cmp	r3, #3
 8005248:	d00e      	beq.n	8005268 <RTC_DateUpdate+0x5c>
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	2b05      	cmp	r3, #5
 800524e:	d00b      	beq.n	8005268 <RTC_DateUpdate+0x5c>
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	2b07      	cmp	r3, #7
 8005254:	d008      	beq.n	8005268 <RTC_DateUpdate+0x5c>
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	2b08      	cmp	r3, #8
 800525a:	d005      	beq.n	8005268 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	2b0a      	cmp	r3, #10
 8005260:	d002      	beq.n	8005268 <RTC_DateUpdate+0x5c>
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	2b0c      	cmp	r3, #12
 8005266:	d117      	bne.n	8005298 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2b1e      	cmp	r3, #30
 800526c:	d803      	bhi.n	8005276 <RTC_DateUpdate+0x6a>
      {
        day++;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	3301      	adds	r3, #1
 8005272:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005274:	e050      	b.n	8005318 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	2b0c      	cmp	r3, #12
 800527a:	d005      	beq.n	8005288 <RTC_DateUpdate+0x7c>
        {
          month++;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	3301      	adds	r3, #1
 8005280:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005282:	2301      	movs	r3, #1
 8005284:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005286:	e047      	b.n	8005318 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8005288:	2301      	movs	r3, #1
 800528a:	613b      	str	r3, [r7, #16]
          day = 1U;
 800528c:	2301      	movs	r3, #1
 800528e:	60fb      	str	r3, [r7, #12]
          year++;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	3301      	adds	r3, #1
 8005294:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8005296:	e03f      	b.n	8005318 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	2b04      	cmp	r3, #4
 800529c:	d008      	beq.n	80052b0 <RTC_DateUpdate+0xa4>
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	2b06      	cmp	r3, #6
 80052a2:	d005      	beq.n	80052b0 <RTC_DateUpdate+0xa4>
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	2b09      	cmp	r3, #9
 80052a8:	d002      	beq.n	80052b0 <RTC_DateUpdate+0xa4>
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	2b0b      	cmp	r3, #11
 80052ae:	d10c      	bne.n	80052ca <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2b1d      	cmp	r3, #29
 80052b4:	d803      	bhi.n	80052be <RTC_DateUpdate+0xb2>
      {
        day++;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	3301      	adds	r3, #1
 80052ba:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80052bc:	e02c      	b.n	8005318 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	3301      	adds	r3, #1
 80052c2:	613b      	str	r3, [r7, #16]
        day = 1U;
 80052c4:	2301      	movs	r3, #1
 80052c6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80052c8:	e026      	b.n	8005318 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d123      	bne.n	8005318 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2b1b      	cmp	r3, #27
 80052d4:	d803      	bhi.n	80052de <RTC_DateUpdate+0xd2>
      {
        day++;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	3301      	adds	r3, #1
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	e01c      	b.n	8005318 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2b1c      	cmp	r3, #28
 80052e2:	d111      	bne.n	8005308 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	4618      	mov	r0, r3
 80052ea:	f000 f839 	bl	8005360 <RTC_IsLeapYear>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d003      	beq.n	80052fc <RTC_DateUpdate+0xf0>
        {
          day++;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	3301      	adds	r3, #1
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	e00d      	b.n	8005318 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	3301      	adds	r3, #1
 8005300:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005302:	2301      	movs	r3, #1
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	e007      	b.n	8005318 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2b1d      	cmp	r3, #29
 800530c:	d104      	bne.n	8005318 <RTC_DateUpdate+0x10c>
      {
        month++;
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	3301      	adds	r3, #1
 8005312:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005314:	2301      	movs	r3, #1
 8005316:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	3301      	adds	r3, #1
 800531c:	60bb      	str	r3, [r7, #8]
 800531e:	68ba      	ldr	r2, [r7, #8]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	429a      	cmp	r2, r3
 8005324:	d38b      	bcc.n	800523e <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	b2da      	uxtb	r2, r3
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	b2da      	uxtb	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	b2da      	uxtb	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	b2db      	uxtb	r3, r3
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	b2d2      	uxtb	r2, r2
 8005346:	4619      	mov	r1, r3
 8005348:	6978      	ldr	r0, [r7, #20]
 800534a:	f000 f83b 	bl	80053c4 <RTC_WeekDayNum>
 800534e:	4603      	mov	r3, r0
 8005350:	461a      	mov	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	731a      	strb	r2, [r3, #12]
}
 8005356:	bf00      	nop
 8005358:	3718      	adds	r7, #24
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
	...

08005360 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	4603      	mov	r3, r0
 8005368:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800536a:	88fb      	ldrh	r3, [r7, #6]
 800536c:	f003 0303 	and.w	r3, r3, #3
 8005370:	b29b      	uxth	r3, r3
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8005376:	2300      	movs	r3, #0
 8005378:	e01d      	b.n	80053b6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800537a:	88fb      	ldrh	r3, [r7, #6]
 800537c:	4a10      	ldr	r2, [pc, #64]	; (80053c0 <RTC_IsLeapYear+0x60>)
 800537e:	fba2 1203 	umull	r1, r2, r2, r3
 8005382:	0952      	lsrs	r2, r2, #5
 8005384:	2164      	movs	r1, #100	; 0x64
 8005386:	fb01 f202 	mul.w	r2, r1, r2
 800538a:	1a9b      	subs	r3, r3, r2
 800538c:	b29b      	uxth	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d001      	beq.n	8005396 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005392:	2301      	movs	r3, #1
 8005394:	e00f      	b.n	80053b6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8005396:	88fb      	ldrh	r3, [r7, #6]
 8005398:	4a09      	ldr	r2, [pc, #36]	; (80053c0 <RTC_IsLeapYear+0x60>)
 800539a:	fba2 1203 	umull	r1, r2, r2, r3
 800539e:	09d2      	lsrs	r2, r2, #7
 80053a0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80053a4:	fb01 f202 	mul.w	r2, r1, r2
 80053a8:	1a9b      	subs	r3, r3, r2
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d101      	bne.n	80053b4 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e000      	b.n	80053b6 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80053b4:	2300      	movs	r3, #0
  }
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bc80      	pop	{r7}
 80053be:	4770      	bx	lr
 80053c0:	51eb851f 	.word	0x51eb851f

080053c4 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	460b      	mov	r3, r1
 80053ce:	70fb      	strb	r3, [r7, #3]
 80053d0:	4613      	mov	r3, r2
 80053d2:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80053d4:	2300      	movs	r3, #0
 80053d6:	60bb      	str	r3, [r7, #8]
 80053d8:	2300      	movs	r3, #0
 80053da:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80053e2:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80053e4:	78fb      	ldrb	r3, [r7, #3]
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d82d      	bhi.n	8005446 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80053ea:	78fa      	ldrb	r2, [r7, #3]
 80053ec:	4613      	mov	r3, r2
 80053ee:	005b      	lsls	r3, r3, #1
 80053f0:	4413      	add	r3, r2
 80053f2:	00db      	lsls	r3, r3, #3
 80053f4:	1a9b      	subs	r3, r3, r2
 80053f6:	4a2c      	ldr	r2, [pc, #176]	; (80054a8 <RTC_WeekDayNum+0xe4>)
 80053f8:	fba2 2303 	umull	r2, r3, r2, r3
 80053fc:	085a      	lsrs	r2, r3, #1
 80053fe:	78bb      	ldrb	r3, [r7, #2]
 8005400:	441a      	add	r2, r3
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	441a      	add	r2, r3
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	3b01      	subs	r3, #1
 800540a:	089b      	lsrs	r3, r3, #2
 800540c:	441a      	add	r2, r3
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	3b01      	subs	r3, #1
 8005412:	4926      	ldr	r1, [pc, #152]	; (80054ac <RTC_WeekDayNum+0xe8>)
 8005414:	fba1 1303 	umull	r1, r3, r1, r3
 8005418:	095b      	lsrs	r3, r3, #5
 800541a:	1ad2      	subs	r2, r2, r3
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	3b01      	subs	r3, #1
 8005420:	4922      	ldr	r1, [pc, #136]	; (80054ac <RTC_WeekDayNum+0xe8>)
 8005422:	fba1 1303 	umull	r1, r3, r1, r3
 8005426:	09db      	lsrs	r3, r3, #7
 8005428:	4413      	add	r3, r2
 800542a:	1d1a      	adds	r2, r3, #4
 800542c:	4b20      	ldr	r3, [pc, #128]	; (80054b0 <RTC_WeekDayNum+0xec>)
 800542e:	fba3 1302 	umull	r1, r3, r3, r2
 8005432:	1ad1      	subs	r1, r2, r3
 8005434:	0849      	lsrs	r1, r1, #1
 8005436:	440b      	add	r3, r1
 8005438:	0899      	lsrs	r1, r3, #2
 800543a:	460b      	mov	r3, r1
 800543c:	00db      	lsls	r3, r3, #3
 800543e:	1a5b      	subs	r3, r3, r1
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	60fb      	str	r3, [r7, #12]
 8005444:	e029      	b.n	800549a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8005446:	78fa      	ldrb	r2, [r7, #3]
 8005448:	4613      	mov	r3, r2
 800544a:	005b      	lsls	r3, r3, #1
 800544c:	4413      	add	r3, r2
 800544e:	00db      	lsls	r3, r3, #3
 8005450:	1a9b      	subs	r3, r3, r2
 8005452:	4a15      	ldr	r2, [pc, #84]	; (80054a8 <RTC_WeekDayNum+0xe4>)
 8005454:	fba2 2303 	umull	r2, r3, r2, r3
 8005458:	085a      	lsrs	r2, r3, #1
 800545a:	78bb      	ldrb	r3, [r7, #2]
 800545c:	441a      	add	r2, r3
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	441a      	add	r2, r3
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	089b      	lsrs	r3, r3, #2
 8005466:	441a      	add	r2, r3
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	4910      	ldr	r1, [pc, #64]	; (80054ac <RTC_WeekDayNum+0xe8>)
 800546c:	fba1 1303 	umull	r1, r3, r1, r3
 8005470:	095b      	lsrs	r3, r3, #5
 8005472:	1ad2      	subs	r2, r2, r3
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	490d      	ldr	r1, [pc, #52]	; (80054ac <RTC_WeekDayNum+0xe8>)
 8005478:	fba1 1303 	umull	r1, r3, r1, r3
 800547c:	09db      	lsrs	r3, r3, #7
 800547e:	4413      	add	r3, r2
 8005480:	1c9a      	adds	r2, r3, #2
 8005482:	4b0b      	ldr	r3, [pc, #44]	; (80054b0 <RTC_WeekDayNum+0xec>)
 8005484:	fba3 1302 	umull	r1, r3, r3, r2
 8005488:	1ad1      	subs	r1, r2, r3
 800548a:	0849      	lsrs	r1, r1, #1
 800548c:	440b      	add	r3, r1
 800548e:	0899      	lsrs	r1, r3, #2
 8005490:	460b      	mov	r3, r1
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	1a5b      	subs	r3, r3, r1
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	b2db      	uxtb	r3, r3
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bc80      	pop	{r7}
 80054a6:	4770      	bx	lr
 80054a8:	38e38e39 	.word	0x38e38e39
 80054ac:	51eb851f 	.word	0x51eb851f
 80054b0:	24924925 	.word	0x24924925

080054b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e0b2      	b.n	800562c <HAL_TIM_Base_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a5a      	ldr	r2, [pc, #360]	; (8005634 <HAL_TIM_Base_Init+0x180>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d027      	beq.n	8005520 <HAL_TIM_Base_Init+0x6c>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a58      	ldr	r2, [pc, #352]	; (8005638 <HAL_TIM_Base_Init+0x184>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d022      	beq.n	8005520 <HAL_TIM_Base_Init+0x6c>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e2:	d01d      	beq.n	8005520 <HAL_TIM_Base_Init+0x6c>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a54      	ldr	r2, [pc, #336]	; (800563c <HAL_TIM_Base_Init+0x188>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d018      	beq.n	8005520 <HAL_TIM_Base_Init+0x6c>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a53      	ldr	r2, [pc, #332]	; (8005640 <HAL_TIM_Base_Init+0x18c>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d013      	beq.n	8005520 <HAL_TIM_Base_Init+0x6c>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a51      	ldr	r2, [pc, #324]	; (8005644 <HAL_TIM_Base_Init+0x190>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d00e      	beq.n	8005520 <HAL_TIM_Base_Init+0x6c>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a50      	ldr	r2, [pc, #320]	; (8005648 <HAL_TIM_Base_Init+0x194>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d009      	beq.n	8005520 <HAL_TIM_Base_Init+0x6c>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a4e      	ldr	r2, [pc, #312]	; (800564c <HAL_TIM_Base_Init+0x198>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d004      	beq.n	8005520 <HAL_TIM_Base_Init+0x6c>
 8005516:	f240 1113 	movw	r1, #275	; 0x113
 800551a:	484d      	ldr	r0, [pc, #308]	; (8005650 <HAL_TIM_Base_Init+0x19c>)
 800551c:	f7fc f8fe 	bl	800171c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d014      	beq.n	8005552 <HAL_TIM_Base_Init+0x9e>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	2b10      	cmp	r3, #16
 800552e:	d010      	beq.n	8005552 <HAL_TIM_Base_Init+0x9e>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	2b20      	cmp	r3, #32
 8005536:	d00c      	beq.n	8005552 <HAL_TIM_Base_Init+0x9e>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	2b40      	cmp	r3, #64	; 0x40
 800553e:	d008      	beq.n	8005552 <HAL_TIM_Base_Init+0x9e>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	2b60      	cmp	r3, #96	; 0x60
 8005546:	d004      	beq.n	8005552 <HAL_TIM_Base_Init+0x9e>
 8005548:	f44f 718a 	mov.w	r1, #276	; 0x114
 800554c:	4840      	ldr	r0, [pc, #256]	; (8005650 <HAL_TIM_Base_Init+0x19c>)
 800554e:	f7fc f8e5 	bl	800171c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00e      	beq.n	8005578 <HAL_TIM_Base_Init+0xc4>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005562:	d009      	beq.n	8005578 <HAL_TIM_Base_Init+0xc4>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800556c:	d004      	beq.n	8005578 <HAL_TIM_Base_Init+0xc4>
 800556e:	f240 1115 	movw	r1, #277	; 0x115
 8005572:	4837      	ldr	r0, [pc, #220]	; (8005650 <HAL_TIM_Base_Init+0x19c>)
 8005574:	f7fc f8d2 	bl	800171c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d008      	beq.n	8005592 <HAL_TIM_Base_Init+0xde>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	2b80      	cmp	r3, #128	; 0x80
 8005586:	d004      	beq.n	8005592 <HAL_TIM_Base_Init+0xde>
 8005588:	f44f 718b 	mov.w	r1, #278	; 0x116
 800558c:	4830      	ldr	r0, [pc, #192]	; (8005650 <HAL_TIM_Base_Init+0x19c>)
 800558e:	f7fc f8c5 	bl	800171c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d111      	bne.n	80055c2 <HAL_TIM_Base_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f001 ffc0 	bl	800752c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d102      	bne.n	80055ba <HAL_TIM_Base_Init+0x106>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a27      	ldr	r2, [pc, #156]	; (8005654 <HAL_TIM_Base_Init+0x1a0>)
 80055b8:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2202      	movs	r2, #2
 80055c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	3304      	adds	r3, #4
 80055d2:	4619      	mov	r1, r3
 80055d4:	4610      	mov	r0, r2
 80055d6:	f001 fbff 	bl	8006dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3708      	adds	r7, #8
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	40012c00 	.word	0x40012c00
 8005638:	40013400 	.word	0x40013400
 800563c:	40000400 	.word	0x40000400
 8005640:	40000800 	.word	0x40000800
 8005644:	40000c00 	.word	0x40000c00
 8005648:	40001000 	.word	0x40001000
 800564c:	40001400 	.word	0x40001400
 8005650:	0800b768 	.word	0x0800b768
 8005654:	08001865 	.word	0x08001865

08005658 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a39      	ldr	r2, [pc, #228]	; (800574c <HAL_TIM_Base_Start+0xf4>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d027      	beq.n	80056ba <HAL_TIM_Base_Start+0x62>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a38      	ldr	r2, [pc, #224]	; (8005750 <HAL_TIM_Base_Start+0xf8>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d022      	beq.n	80056ba <HAL_TIM_Base_Start+0x62>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800567c:	d01d      	beq.n	80056ba <HAL_TIM_Base_Start+0x62>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a34      	ldr	r2, [pc, #208]	; (8005754 <HAL_TIM_Base_Start+0xfc>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d018      	beq.n	80056ba <HAL_TIM_Base_Start+0x62>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a32      	ldr	r2, [pc, #200]	; (8005758 <HAL_TIM_Base_Start+0x100>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d013      	beq.n	80056ba <HAL_TIM_Base_Start+0x62>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a31      	ldr	r2, [pc, #196]	; (800575c <HAL_TIM_Base_Start+0x104>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d00e      	beq.n	80056ba <HAL_TIM_Base_Start+0x62>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a2f      	ldr	r2, [pc, #188]	; (8005760 <HAL_TIM_Base_Start+0x108>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d009      	beq.n	80056ba <HAL_TIM_Base_Start+0x62>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a2e      	ldr	r2, [pc, #184]	; (8005764 <HAL_TIM_Base_Start+0x10c>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d004      	beq.n	80056ba <HAL_TIM_Base_Start+0x62>
 80056b0:	f44f 71ca 	mov.w	r1, #404	; 0x194
 80056b4:	482c      	ldr	r0, [pc, #176]	; (8005768 <HAL_TIM_Base_Start+0x110>)
 80056b6:	f7fc f831 	bl	800171c <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d001      	beq.n	80056ca <HAL_TIM_Base_Start+0x72>
  {
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e03c      	b.n	8005744 <HAL_TIM_Base_Start+0xec>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2202      	movs	r2, #2
 80056ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a1d      	ldr	r2, [pc, #116]	; (800574c <HAL_TIM_Base_Start+0xf4>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d018      	beq.n	800570e <HAL_TIM_Base_Start+0xb6>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a1b      	ldr	r2, [pc, #108]	; (8005750 <HAL_TIM_Base_Start+0xf8>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d013      	beq.n	800570e <HAL_TIM_Base_Start+0xb6>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ee:	d00e      	beq.n	800570e <HAL_TIM_Base_Start+0xb6>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a17      	ldr	r2, [pc, #92]	; (8005754 <HAL_TIM_Base_Start+0xfc>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d009      	beq.n	800570e <HAL_TIM_Base_Start+0xb6>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a16      	ldr	r2, [pc, #88]	; (8005758 <HAL_TIM_Base_Start+0x100>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d004      	beq.n	800570e <HAL_TIM_Base_Start+0xb6>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a14      	ldr	r2, [pc, #80]	; (800575c <HAL_TIM_Base_Start+0x104>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d111      	bne.n	8005732 <HAL_TIM_Base_Start+0xda>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f003 0307 	and.w	r3, r3, #7
 8005718:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2b06      	cmp	r3, #6
 800571e:	d010      	beq.n	8005742 <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f042 0201 	orr.w	r2, r2, #1
 800572e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005730:	e007      	b.n	8005742 <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f042 0201 	orr.w	r2, r2, #1
 8005740:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	40012c00 	.word	0x40012c00
 8005750:	40013400 	.word	0x40013400
 8005754:	40000400 	.word	0x40000400
 8005758:	40000800 	.word	0x40000800
 800575c:	40000c00 	.word	0x40000c00
 8005760:	40001000 	.word	0x40001000
 8005764:	40001400 	.word	0x40001400
 8005768:	0800b768 	.word	0x0800b768

0800576c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a3d      	ldr	r2, [pc, #244]	; (8005870 <HAL_TIM_Base_Start_IT+0x104>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d027      	beq.n	80057ce <HAL_TIM_Base_Start_IT+0x62>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a3c      	ldr	r2, [pc, #240]	; (8005874 <HAL_TIM_Base_Start_IT+0x108>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d022      	beq.n	80057ce <HAL_TIM_Base_Start_IT+0x62>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005790:	d01d      	beq.n	80057ce <HAL_TIM_Base_Start_IT+0x62>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a38      	ldr	r2, [pc, #224]	; (8005878 <HAL_TIM_Base_Start_IT+0x10c>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d018      	beq.n	80057ce <HAL_TIM_Base_Start_IT+0x62>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a36      	ldr	r2, [pc, #216]	; (800587c <HAL_TIM_Base_Start_IT+0x110>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d013      	beq.n	80057ce <HAL_TIM_Base_Start_IT+0x62>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a35      	ldr	r2, [pc, #212]	; (8005880 <HAL_TIM_Base_Start_IT+0x114>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d00e      	beq.n	80057ce <HAL_TIM_Base_Start_IT+0x62>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a33      	ldr	r2, [pc, #204]	; (8005884 <HAL_TIM_Base_Start_IT+0x118>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d009      	beq.n	80057ce <HAL_TIM_Base_Start_IT+0x62>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a32      	ldr	r2, [pc, #200]	; (8005888 <HAL_TIM_Base_Start_IT+0x11c>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d004      	beq.n	80057ce <HAL_TIM_Base_Start_IT+0x62>
 80057c4:	f240 11cf 	movw	r1, #463	; 0x1cf
 80057c8:	4830      	ldr	r0, [pc, #192]	; (800588c <HAL_TIM_Base_Start_IT+0x120>)
 80057ca:	f7fb ffa7 	bl	800171c <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d001      	beq.n	80057de <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e044      	b.n	8005868 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2202      	movs	r2, #2
 80057e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68da      	ldr	r2, [r3, #12]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f042 0201 	orr.w	r2, r2, #1
 80057f4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a1d      	ldr	r2, [pc, #116]	; (8005870 <HAL_TIM_Base_Start_IT+0x104>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d018      	beq.n	8005832 <HAL_TIM_Base_Start_IT+0xc6>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a1b      	ldr	r2, [pc, #108]	; (8005874 <HAL_TIM_Base_Start_IT+0x108>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d013      	beq.n	8005832 <HAL_TIM_Base_Start_IT+0xc6>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005812:	d00e      	beq.n	8005832 <HAL_TIM_Base_Start_IT+0xc6>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a17      	ldr	r2, [pc, #92]	; (8005878 <HAL_TIM_Base_Start_IT+0x10c>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d009      	beq.n	8005832 <HAL_TIM_Base_Start_IT+0xc6>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a16      	ldr	r2, [pc, #88]	; (800587c <HAL_TIM_Base_Start_IT+0x110>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d004      	beq.n	8005832 <HAL_TIM_Base_Start_IT+0xc6>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a14      	ldr	r2, [pc, #80]	; (8005880 <HAL_TIM_Base_Start_IT+0x114>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d111      	bne.n	8005856 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f003 0307 	and.w	r3, r3, #7
 800583c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2b06      	cmp	r3, #6
 8005842:	d010      	beq.n	8005866 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f042 0201 	orr.w	r2, r2, #1
 8005852:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005854:	e007      	b.n	8005866 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f042 0201 	orr.w	r2, r2, #1
 8005864:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3710      	adds	r7, #16
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	40012c00 	.word	0x40012c00
 8005874:	40013400 	.word	0x40013400
 8005878:	40000400 	.word	0x40000400
 800587c:	40000800 	.word	0x40000800
 8005880:	40000c00 	.word	0x40000c00
 8005884:	40001000 	.word	0x40001000
 8005888:	40001400 	.word	0x40001400
 800588c:	0800b768 	.word	0x0800b768

08005890 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e0b2      	b.n	8005a08 <HAL_TIM_PWM_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a5a      	ldr	r2, [pc, #360]	; (8005a10 <HAL_TIM_PWM_Init+0x180>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d027      	beq.n	80058fc <HAL_TIM_PWM_Init+0x6c>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a58      	ldr	r2, [pc, #352]	; (8005a14 <HAL_TIM_PWM_Init+0x184>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d022      	beq.n	80058fc <HAL_TIM_PWM_Init+0x6c>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058be:	d01d      	beq.n	80058fc <HAL_TIM_PWM_Init+0x6c>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a54      	ldr	r2, [pc, #336]	; (8005a18 <HAL_TIM_PWM_Init+0x188>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d018      	beq.n	80058fc <HAL_TIM_PWM_Init+0x6c>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a53      	ldr	r2, [pc, #332]	; (8005a1c <HAL_TIM_PWM_Init+0x18c>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d013      	beq.n	80058fc <HAL_TIM_PWM_Init+0x6c>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a51      	ldr	r2, [pc, #324]	; (8005a20 <HAL_TIM_PWM_Init+0x190>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d00e      	beq.n	80058fc <HAL_TIM_PWM_Init+0x6c>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a50      	ldr	r2, [pc, #320]	; (8005a24 <HAL_TIM_PWM_Init+0x194>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d009      	beq.n	80058fc <HAL_TIM_PWM_Init+0x6c>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a4e      	ldr	r2, [pc, #312]	; (8005a28 <HAL_TIM_PWM_Init+0x198>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d004      	beq.n	80058fc <HAL_TIM_PWM_Init+0x6c>
 80058f2:	f240 5113 	movw	r1, #1299	; 0x513
 80058f6:	484d      	ldr	r0, [pc, #308]	; (8005a2c <HAL_TIM_PWM_Init+0x19c>)
 80058f8:	f7fb ff10 	bl	800171c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d014      	beq.n	800592e <HAL_TIM_PWM_Init+0x9e>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	2b10      	cmp	r3, #16
 800590a:	d010      	beq.n	800592e <HAL_TIM_PWM_Init+0x9e>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	2b20      	cmp	r3, #32
 8005912:	d00c      	beq.n	800592e <HAL_TIM_PWM_Init+0x9e>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	2b40      	cmp	r3, #64	; 0x40
 800591a:	d008      	beq.n	800592e <HAL_TIM_PWM_Init+0x9e>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	2b60      	cmp	r3, #96	; 0x60
 8005922:	d004      	beq.n	800592e <HAL_TIM_PWM_Init+0x9e>
 8005924:	f240 5114 	movw	r1, #1300	; 0x514
 8005928:	4840      	ldr	r0, [pc, #256]	; (8005a2c <HAL_TIM_PWM_Init+0x19c>)
 800592a:	f7fb fef7 	bl	800171c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00e      	beq.n	8005954 <HAL_TIM_PWM_Init+0xc4>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800593e:	d009      	beq.n	8005954 <HAL_TIM_PWM_Init+0xc4>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005948:	d004      	beq.n	8005954 <HAL_TIM_PWM_Init+0xc4>
 800594a:	f240 5115 	movw	r1, #1301	; 0x515
 800594e:	4837      	ldr	r0, [pc, #220]	; (8005a2c <HAL_TIM_PWM_Init+0x19c>)
 8005950:	f7fb fee4 	bl	800171c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	699b      	ldr	r3, [r3, #24]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d008      	beq.n	800596e <HAL_TIM_PWM_Init+0xde>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	2b80      	cmp	r3, #128	; 0x80
 8005962:	d004      	beq.n	800596e <HAL_TIM_PWM_Init+0xde>
 8005964:	f240 5116 	movw	r1, #1302	; 0x516
 8005968:	4830      	ldr	r0, [pc, #192]	; (8005a2c <HAL_TIM_PWM_Init+0x19c>)
 800596a:	f7fb fed7 	bl	800171c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d111      	bne.n	800599e <HAL_TIM_PWM_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f001 fdd2 	bl	800752c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800598c:	2b00      	cmp	r3, #0
 800598e:	d102      	bne.n	8005996 <HAL_TIM_PWM_Init+0x106>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a27      	ldr	r2, [pc, #156]	; (8005a30 <HAL_TIM_PWM_Init+0x1a0>)
 8005994:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2202      	movs	r2, #2
 80059a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	3304      	adds	r3, #4
 80059ae:	4619      	mov	r1, r3
 80059b0:	4610      	mov	r0, r2
 80059b2:	f001 fa11 	bl	8006dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	40012c00 	.word	0x40012c00
 8005a14:	40013400 	.word	0x40013400
 8005a18:	40000400 	.word	0x40000400
 8005a1c:	40000800 	.word	0x40000800
 8005a20:	40000c00 	.word	0x40000c00
 8005a24:	40001000 	.word	0x40001000
 8005a28:	40001400 	.word	0x40001400
 8005a2c:	0800b768 	.word	0x0800b768
 8005a30:	08005a35 	.word	0x08005a35

08005a34 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bc80      	pop	{r7}
 8005a44:	4770      	bx	lr
	...

08005a48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a8a      	ldr	r2, [pc, #552]	; (8005c80 <HAL_TIM_PWM_Start+0x238>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d10b      	bne.n	8005a74 <HAL_TIM_PWM_Start+0x2c>
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d062      	beq.n	8005b28 <HAL_TIM_PWM_Start+0xe0>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b04      	cmp	r3, #4
 8005a66:	d05f      	beq.n	8005b28 <HAL_TIM_PWM_Start+0xe0>
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	2b08      	cmp	r3, #8
 8005a6c:	d05c      	beq.n	8005b28 <HAL_TIM_PWM_Start+0xe0>
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	2b0c      	cmp	r3, #12
 8005a72:	d059      	beq.n	8005b28 <HAL_TIM_PWM_Start+0xe0>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a82      	ldr	r2, [pc, #520]	; (8005c84 <HAL_TIM_PWM_Start+0x23c>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d10b      	bne.n	8005a96 <HAL_TIM_PWM_Start+0x4e>
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d051      	beq.n	8005b28 <HAL_TIM_PWM_Start+0xe0>
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	2b04      	cmp	r3, #4
 8005a88:	d04e      	beq.n	8005b28 <HAL_TIM_PWM_Start+0xe0>
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b08      	cmp	r3, #8
 8005a8e:	d04b      	beq.n	8005b28 <HAL_TIM_PWM_Start+0xe0>
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	2b0c      	cmp	r3, #12
 8005a94:	d048      	beq.n	8005b28 <HAL_TIM_PWM_Start+0xe0>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a9e:	d10b      	bne.n	8005ab8 <HAL_TIM_PWM_Start+0x70>
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d040      	beq.n	8005b28 <HAL_TIM_PWM_Start+0xe0>
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b04      	cmp	r3, #4
 8005aaa:	d03d      	beq.n	8005b28 <HAL_TIM_PWM_Start+0xe0>
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	2b08      	cmp	r3, #8
 8005ab0:	d03a      	beq.n	8005b28 <HAL_TIM_PWM_Start+0xe0>
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	2b0c      	cmp	r3, #12
 8005ab6:	d037      	beq.n	8005b28 <HAL_TIM_PWM_Start+0xe0>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a72      	ldr	r2, [pc, #456]	; (8005c88 <HAL_TIM_PWM_Start+0x240>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d10b      	bne.n	8005ada <HAL_TIM_PWM_Start+0x92>
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d02f      	beq.n	8005b28 <HAL_TIM_PWM_Start+0xe0>
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	2b04      	cmp	r3, #4
 8005acc:	d02c      	beq.n	8005b28 <HAL_TIM_PWM_Start+0xe0>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	2b08      	cmp	r3, #8
 8005ad2:	d029      	beq.n	8005b28 <HAL_TIM_PWM_Start+0xe0>
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	2b0c      	cmp	r3, #12
 8005ad8:	d026      	beq.n	8005b28 <HAL_TIM_PWM_Start+0xe0>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a6b      	ldr	r2, [pc, #428]	; (8005c8c <HAL_TIM_PWM_Start+0x244>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d10b      	bne.n	8005afc <HAL_TIM_PWM_Start+0xb4>
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d01e      	beq.n	8005b28 <HAL_TIM_PWM_Start+0xe0>
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b04      	cmp	r3, #4
 8005aee:	d01b      	beq.n	8005b28 <HAL_TIM_PWM_Start+0xe0>
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	2b08      	cmp	r3, #8
 8005af4:	d018      	beq.n	8005b28 <HAL_TIM_PWM_Start+0xe0>
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	2b0c      	cmp	r3, #12
 8005afa:	d015      	beq.n	8005b28 <HAL_TIM_PWM_Start+0xe0>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a63      	ldr	r2, [pc, #396]	; (8005c90 <HAL_TIM_PWM_Start+0x248>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d10b      	bne.n	8005b1e <HAL_TIM_PWM_Start+0xd6>
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00d      	beq.n	8005b28 <HAL_TIM_PWM_Start+0xe0>
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	2b04      	cmp	r3, #4
 8005b10:	d00a      	beq.n	8005b28 <HAL_TIM_PWM_Start+0xe0>
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b08      	cmp	r3, #8
 8005b16:	d007      	beq.n	8005b28 <HAL_TIM_PWM_Start+0xe0>
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	2b0c      	cmp	r3, #12
 8005b1c:	d004      	beq.n	8005b28 <HAL_TIM_PWM_Start+0xe0>
 8005b1e:	f240 5199 	movw	r1, #1433	; 0x599
 8005b22:	485c      	ldr	r0, [pc, #368]	; (8005c94 <HAL_TIM_PWM_Start+0x24c>)
 8005b24:	f7fb fdfa 	bl	800171c <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d109      	bne.n	8005b42 <HAL_TIM_PWM_Start+0xfa>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	bf14      	ite	ne
 8005b3a:	2301      	movne	r3, #1
 8005b3c:	2300      	moveq	r3, #0
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	e022      	b.n	8005b88 <HAL_TIM_PWM_Start+0x140>
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b04      	cmp	r3, #4
 8005b46:	d109      	bne.n	8005b5c <HAL_TIM_PWM_Start+0x114>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	bf14      	ite	ne
 8005b54:	2301      	movne	r3, #1
 8005b56:	2300      	moveq	r3, #0
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	e015      	b.n	8005b88 <HAL_TIM_PWM_Start+0x140>
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	2b08      	cmp	r3, #8
 8005b60:	d109      	bne.n	8005b76 <HAL_TIM_PWM_Start+0x12e>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	bf14      	ite	ne
 8005b6e:	2301      	movne	r3, #1
 8005b70:	2300      	moveq	r3, #0
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	e008      	b.n	8005b88 <HAL_TIM_PWM_Start+0x140>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	bf14      	ite	ne
 8005b82:	2301      	movne	r3, #1
 8005b84:	2300      	moveq	r3, #0
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <HAL_TIM_PWM_Start+0x148>
  {
    return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e072      	b.n	8005c76 <HAL_TIM_PWM_Start+0x22e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d104      	bne.n	8005ba0 <HAL_TIM_PWM_Start+0x158>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2202      	movs	r2, #2
 8005b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b9e:	e013      	b.n	8005bc8 <HAL_TIM_PWM_Start+0x180>
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	2b04      	cmp	r3, #4
 8005ba4:	d104      	bne.n	8005bb0 <HAL_TIM_PWM_Start+0x168>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2202      	movs	r2, #2
 8005baa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bae:	e00b      	b.n	8005bc8 <HAL_TIM_PWM_Start+0x180>
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	2b08      	cmp	r3, #8
 8005bb4:	d104      	bne.n	8005bc0 <HAL_TIM_PWM_Start+0x178>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2202      	movs	r2, #2
 8005bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bbe:	e003      	b.n	8005bc8 <HAL_TIM_PWM_Start+0x180>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	6839      	ldr	r1, [r7, #0]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f001 fc4b 	bl	800746c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a29      	ldr	r2, [pc, #164]	; (8005c80 <HAL_TIM_PWM_Start+0x238>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d004      	beq.n	8005bea <HAL_TIM_PWM_Start+0x1a2>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a27      	ldr	r2, [pc, #156]	; (8005c84 <HAL_TIM_PWM_Start+0x23c>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d101      	bne.n	8005bee <HAL_TIM_PWM_Start+0x1a6>
 8005bea:	2301      	movs	r3, #1
 8005bec:	e000      	b.n	8005bf0 <HAL_TIM_PWM_Start+0x1a8>
 8005bee:	2300      	movs	r3, #0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d007      	beq.n	8005c04 <HAL_TIM_PWM_Start+0x1bc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c02:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a1d      	ldr	r2, [pc, #116]	; (8005c80 <HAL_TIM_PWM_Start+0x238>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d018      	beq.n	8005c40 <HAL_TIM_PWM_Start+0x1f8>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a1c      	ldr	r2, [pc, #112]	; (8005c84 <HAL_TIM_PWM_Start+0x23c>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d013      	beq.n	8005c40 <HAL_TIM_PWM_Start+0x1f8>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c20:	d00e      	beq.n	8005c40 <HAL_TIM_PWM_Start+0x1f8>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a18      	ldr	r2, [pc, #96]	; (8005c88 <HAL_TIM_PWM_Start+0x240>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d009      	beq.n	8005c40 <HAL_TIM_PWM_Start+0x1f8>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a16      	ldr	r2, [pc, #88]	; (8005c8c <HAL_TIM_PWM_Start+0x244>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d004      	beq.n	8005c40 <HAL_TIM_PWM_Start+0x1f8>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a15      	ldr	r2, [pc, #84]	; (8005c90 <HAL_TIM_PWM_Start+0x248>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d111      	bne.n	8005c64 <HAL_TIM_PWM_Start+0x21c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f003 0307 	and.w	r3, r3, #7
 8005c4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2b06      	cmp	r3, #6
 8005c50:	d010      	beq.n	8005c74 <HAL_TIM_PWM_Start+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f042 0201 	orr.w	r2, r2, #1
 8005c60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c62:	e007      	b.n	8005c74 <HAL_TIM_PWM_Start+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f042 0201 	orr.w	r2, r2, #1
 8005c72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	40012c00 	.word	0x40012c00
 8005c84:	40013400 	.word	0x40013400
 8005c88:	40000400 	.word	0x40000400
 8005c8c:	40000800 	.word	0x40000800
 8005c90:	40000c00 	.word	0x40000c00
 8005c94:	0800b768 	.word	0x0800b768

08005c98 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b086      	sub	sp, #24
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d101      	bne.n	8005cac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e192      	b.n	8005fd2 <HAL_TIM_Encoder_Init+0x33a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a7d      	ldr	r2, [pc, #500]	; (8005ea8 <HAL_TIM_Encoder_Init+0x210>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d01d      	beq.n	8005cf2 <HAL_TIM_Encoder_Init+0x5a>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a7c      	ldr	r2, [pc, #496]	; (8005eac <HAL_TIM_Encoder_Init+0x214>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d018      	beq.n	8005cf2 <HAL_TIM_Encoder_Init+0x5a>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc8:	d013      	beq.n	8005cf2 <HAL_TIM_Encoder_Init+0x5a>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a78      	ldr	r2, [pc, #480]	; (8005eb0 <HAL_TIM_Encoder_Init+0x218>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d00e      	beq.n	8005cf2 <HAL_TIM_Encoder_Init+0x5a>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a76      	ldr	r2, [pc, #472]	; (8005eb4 <HAL_TIM_Encoder_Init+0x21c>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d009      	beq.n	8005cf2 <HAL_TIM_Encoder_Init+0x5a>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a75      	ldr	r2, [pc, #468]	; (8005eb8 <HAL_TIM_Encoder_Init+0x220>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d004      	beq.n	8005cf2 <HAL_TIM_Encoder_Init+0x5a>
 8005ce8:	f640 318e 	movw	r1, #2958	; 0xb8e
 8005cec:	4873      	ldr	r0, [pc, #460]	; (8005ebc <HAL_TIM_Encoder_Init+0x224>)
 8005cee:	f7fb fd15 	bl	800171c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d014      	beq.n	8005d24 <HAL_TIM_Encoder_Init+0x8c>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	2b10      	cmp	r3, #16
 8005d00:	d010      	beq.n	8005d24 <HAL_TIM_Encoder_Init+0x8c>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	2b20      	cmp	r3, #32
 8005d08:	d00c      	beq.n	8005d24 <HAL_TIM_Encoder_Init+0x8c>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	2b40      	cmp	r3, #64	; 0x40
 8005d10:	d008      	beq.n	8005d24 <HAL_TIM_Encoder_Init+0x8c>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	2b60      	cmp	r3, #96	; 0x60
 8005d18:	d004      	beq.n	8005d24 <HAL_TIM_Encoder_Init+0x8c>
 8005d1a:	f640 318f 	movw	r1, #2959	; 0xb8f
 8005d1e:	4867      	ldr	r0, [pc, #412]	; (8005ebc <HAL_TIM_Encoder_Init+0x224>)
 8005d20:	f7fb fcfc 	bl	800171c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00e      	beq.n	8005d4a <HAL_TIM_Encoder_Init+0xb2>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d34:	d009      	beq.n	8005d4a <HAL_TIM_Encoder_Init+0xb2>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d3e:	d004      	beq.n	8005d4a <HAL_TIM_Encoder_Init+0xb2>
 8005d40:	f44f 6139 	mov.w	r1, #2960	; 0xb90
 8005d44:	485d      	ldr	r0, [pc, #372]	; (8005ebc <HAL_TIM_Encoder_Init+0x224>)
 8005d46:	f7fb fce9 	bl	800171c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d008      	beq.n	8005d64 <HAL_TIM_Encoder_Init+0xcc>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	2b80      	cmp	r3, #128	; 0x80
 8005d58:	d004      	beq.n	8005d64 <HAL_TIM_Encoder_Init+0xcc>
 8005d5a:	f640 3191 	movw	r1, #2961	; 0xb91
 8005d5e:	4857      	ldr	r0, [pc, #348]	; (8005ebc <HAL_TIM_Encoder_Init+0x224>)
 8005d60:	f7fb fcdc 	bl	800171c <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d00c      	beq.n	8005d86 <HAL_TIM_Encoder_Init+0xee>
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d008      	beq.n	8005d86 <HAL_TIM_Encoder_Init+0xee>
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2b03      	cmp	r3, #3
 8005d7a:	d004      	beq.n	8005d86 <HAL_TIM_Encoder_Init+0xee>
 8005d7c:	f640 3192 	movw	r1, #2962	; 0xb92
 8005d80:	484e      	ldr	r0, [pc, #312]	; (8005ebc <HAL_TIM_Encoder_Init+0x224>)
 8005d82:	f7fb fccb 	bl	800171c <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d00c      	beq.n	8005da8 <HAL_TIM_Encoder_Init+0x110>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d008      	beq.n	8005da8 <HAL_TIM_Encoder_Init+0x110>
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	2b03      	cmp	r3, #3
 8005d9c:	d004      	beq.n	8005da8 <HAL_TIM_Encoder_Init+0x110>
 8005d9e:	f640 3193 	movw	r1, #2963	; 0xb93
 8005da2:	4846      	ldr	r0, [pc, #280]	; (8005ebc <HAL_TIM_Encoder_Init+0x224>)
 8005da4:	f7fb fcba 	bl	800171c <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d00c      	beq.n	8005dca <HAL_TIM_Encoder_Init+0x132>
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d008      	beq.n	8005dca <HAL_TIM_Encoder_Init+0x132>
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	2b03      	cmp	r3, #3
 8005dbe:	d004      	beq.n	8005dca <HAL_TIM_Encoder_Init+0x132>
 8005dc0:	f640 3194 	movw	r1, #2964	; 0xb94
 8005dc4:	483d      	ldr	r0, [pc, #244]	; (8005ebc <HAL_TIM_Encoder_Init+0x224>)
 8005dc6:	f7fb fca9 	bl	800171c <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d008      	beq.n	8005de4 <HAL_TIM_Encoder_Init+0x14c>
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d004      	beq.n	8005de4 <HAL_TIM_Encoder_Init+0x14c>
 8005dda:	f640 3195 	movw	r1, #2965	; 0xb95
 8005dde:	4837      	ldr	r0, [pc, #220]	; (8005ebc <HAL_TIM_Encoder_Init+0x224>)
 8005de0:	f7fb fc9c 	bl	800171c <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d008      	beq.n	8005dfe <HAL_TIM_Encoder_Init+0x166>
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	2b02      	cmp	r3, #2
 8005df2:	d004      	beq.n	8005dfe <HAL_TIM_Encoder_Init+0x166>
 8005df4:	f640 3196 	movw	r1, #2966	; 0xb96
 8005df8:	4830      	ldr	r0, [pc, #192]	; (8005ebc <HAL_TIM_Encoder_Init+0x224>)
 8005dfa:	f7fb fc8f 	bl	800171c <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d010      	beq.n	8005e28 <HAL_TIM_Encoder_Init+0x190>
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	2b04      	cmp	r3, #4
 8005e0c:	d00c      	beq.n	8005e28 <HAL_TIM_Encoder_Init+0x190>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	2b08      	cmp	r3, #8
 8005e14:	d008      	beq.n	8005e28 <HAL_TIM_Encoder_Init+0x190>
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	2b0c      	cmp	r3, #12
 8005e1c:	d004      	beq.n	8005e28 <HAL_TIM_Encoder_Init+0x190>
 8005e1e:	f640 3197 	movw	r1, #2967	; 0xb97
 8005e22:	4826      	ldr	r0, [pc, #152]	; (8005ebc <HAL_TIM_Encoder_Init+0x224>)
 8005e24:	f7fb fc7a 	bl	800171c <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	69db      	ldr	r3, [r3, #28]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d010      	beq.n	8005e52 <HAL_TIM_Encoder_Init+0x1ba>
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	69db      	ldr	r3, [r3, #28]
 8005e34:	2b04      	cmp	r3, #4
 8005e36:	d00c      	beq.n	8005e52 <HAL_TIM_Encoder_Init+0x1ba>
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	2b08      	cmp	r3, #8
 8005e3e:	d008      	beq.n	8005e52 <HAL_TIM_Encoder_Init+0x1ba>
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	69db      	ldr	r3, [r3, #28]
 8005e44:	2b0c      	cmp	r3, #12
 8005e46:	d004      	beq.n	8005e52 <HAL_TIM_Encoder_Init+0x1ba>
 8005e48:	f640 3198 	movw	r1, #2968	; 0xb98
 8005e4c:	481b      	ldr	r0, [pc, #108]	; (8005ebc <HAL_TIM_Encoder_Init+0x224>)
 8005e4e:	f7fb fc65 	bl	800171c <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	2b0f      	cmp	r3, #15
 8005e58:	d904      	bls.n	8005e64 <HAL_TIM_Encoder_Init+0x1cc>
 8005e5a:	f640 3199 	movw	r1, #2969	; 0xb99
 8005e5e:	4817      	ldr	r0, [pc, #92]	; (8005ebc <HAL_TIM_Encoder_Init+0x224>)
 8005e60:	f7fb fc5c 	bl	800171c <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	2b0f      	cmp	r3, #15
 8005e6a:	d904      	bls.n	8005e76 <HAL_TIM_Encoder_Init+0x1de>
 8005e6c:	f640 319a 	movw	r1, #2970	; 0xb9a
 8005e70:	4812      	ldr	r0, [pc, #72]	; (8005ebc <HAL_TIM_Encoder_Init+0x224>)
 8005e72:	f7fb fc53 	bl	800171c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d120      	bne.n	8005ec4 <HAL_TIM_Encoder_Init+0x22c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f001 fb4e 	bl	800752c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d102      	bne.n	8005e9e <HAL_TIM_Encoder_Init+0x206>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a09      	ldr	r2, [pc, #36]	; (8005ec0 <HAL_TIM_Encoder_Init+0x228>)
 8005e9c:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	4798      	blx	r3
 8005ea6:	e00d      	b.n	8005ec4 <HAL_TIM_Encoder_Init+0x22c>
 8005ea8:	40012c00 	.word	0x40012c00
 8005eac:	40013400 	.word	0x40013400
 8005eb0:	40000400 	.word	0x40000400
 8005eb4:	40000800 	.word	0x40000800
 8005eb8:	40000c00 	.word	0x40000c00
 8005ebc:	0800b768 	.word	0x0800b768
 8005ec0:	08001929 	.word	0x08001929
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	6812      	ldr	r2, [r2, #0]
 8005ed6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005eda:	f023 0307 	bic.w	r3, r3, #7
 8005ede:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	4619      	mov	r1, r3
 8005eea:	4610      	mov	r0, r2
 8005eec:	f000 ff74 	bl	8006dd8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f18:	f023 0303 	bic.w	r3, r3, #3
 8005f1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	689a      	ldr	r2, [r3, #8]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	021b      	lsls	r3, r3, #8
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005f36:	f023 030c 	bic.w	r3, r3, #12
 8005f3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	68da      	ldr	r2, [r3, #12]
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	69db      	ldr	r3, [r3, #28]
 8005f50:	021b      	lsls	r3, r3, #8
 8005f52:	4313      	orrs	r3, r2
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	011a      	lsls	r2, r3, #4
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	031b      	lsls	r3, r3, #12
 8005f66:	4313      	orrs	r3, r2
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005f74:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	685a      	ldr	r2, [r3, #4]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	011b      	lsls	r3, r3, #4
 8005f80:	4313      	orrs	r3, r2
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3718      	adds	r7, #24
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop

08005fdc <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ff4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ffc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006004:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a5d      	ldr	r2, [pc, #372]	; (8006180 <HAL_TIM_Encoder_Start_IT+0x1a4>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d01d      	beq.n	800604c <HAL_TIM_Encoder_Start_IT+0x70>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a5b      	ldr	r2, [pc, #364]	; (8006184 <HAL_TIM_Encoder_Start_IT+0x1a8>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d018      	beq.n	800604c <HAL_TIM_Encoder_Start_IT+0x70>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006022:	d013      	beq.n	800604c <HAL_TIM_Encoder_Start_IT+0x70>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a57      	ldr	r2, [pc, #348]	; (8006188 <HAL_TIM_Encoder_Start_IT+0x1ac>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d00e      	beq.n	800604c <HAL_TIM_Encoder_Start_IT+0x70>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a56      	ldr	r2, [pc, #344]	; (800618c <HAL_TIM_Encoder_Start_IT+0x1b0>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d009      	beq.n	800604c <HAL_TIM_Encoder_Start_IT+0x70>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a54      	ldr	r2, [pc, #336]	; (8006190 <HAL_TIM_Encoder_Start_IT+0x1b4>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d004      	beq.n	800604c <HAL_TIM_Encoder_Start_IT+0x70>
 8006042:	f640 41e4 	movw	r1, #3300	; 0xce4
 8006046:	4853      	ldr	r0, [pc, #332]	; (8006194 <HAL_TIM_Encoder_Start_IT+0x1b8>)
 8006048:	f7fb fb68 	bl	800171c <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d110      	bne.n	8006074 <HAL_TIM_Encoder_Start_IT+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006052:	7bfb      	ldrb	r3, [r7, #15]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d102      	bne.n	800605e <HAL_TIM_Encoder_Start_IT+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006058:	7b7b      	ldrb	r3, [r7, #13]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d001      	beq.n	8006062 <HAL_TIM_Encoder_Start_IT+0x86>
    {
      return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e089      	b.n	8006176 <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2202      	movs	r2, #2
 8006066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2202      	movs	r2, #2
 800606e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006072:	e031      	b.n	80060d8 <HAL_TIM_Encoder_Start_IT+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	2b04      	cmp	r3, #4
 8006078:	d110      	bne.n	800609c <HAL_TIM_Encoder_Start_IT+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800607a:	7bbb      	ldrb	r3, [r7, #14]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d102      	bne.n	8006086 <HAL_TIM_Encoder_Start_IT+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006080:	7b3b      	ldrb	r3, [r7, #12]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d001      	beq.n	800608a <HAL_TIM_Encoder_Start_IT+0xae>
    {
      return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e075      	b.n	8006176 <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2202      	movs	r2, #2
 800608e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2202      	movs	r2, #2
 8006096:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800609a:	e01d      	b.n	80060d8 <HAL_TIM_Encoder_Start_IT+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800609c:	7bfb      	ldrb	r3, [r7, #15]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d108      	bne.n	80060b4 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80060a2:	7bbb      	ldrb	r3, [r7, #14]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d105      	bne.n	80060b4 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80060a8:	7b7b      	ldrb	r3, [r7, #13]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d102      	bne.n	80060b4 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80060ae:	7b3b      	ldrb	r3, [r7, #12]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d001      	beq.n	80060b8 <HAL_TIM_Encoder_Start_IT+0xdc>
    {
      return HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	e05e      	b.n	8006176 <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2202      	movs	r2, #2
 80060bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2202      	movs	r2, #2
 80060c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2202      	movs	r2, #2
 80060cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2202      	movs	r2, #2
 80060d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d003      	beq.n	80060e6 <HAL_TIM_Encoder_Start_IT+0x10a>
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	2b04      	cmp	r3, #4
 80060e2:	d010      	beq.n	8006106 <HAL_TIM_Encoder_Start_IT+0x12a>
 80060e4:	e01f      	b.n	8006126 <HAL_TIM_Encoder_Start_IT+0x14a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2201      	movs	r2, #1
 80060ec:	2100      	movs	r1, #0
 80060ee:	4618      	mov	r0, r3
 80060f0:	f001 f9bc 	bl	800746c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68da      	ldr	r2, [r3, #12]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f042 0202 	orr.w	r2, r2, #2
 8006102:	60da      	str	r2, [r3, #12]
      break;
 8006104:	e02e      	b.n	8006164 <HAL_TIM_Encoder_Start_IT+0x188>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2201      	movs	r2, #1
 800610c:	2104      	movs	r1, #4
 800610e:	4618      	mov	r0, r3
 8006110:	f001 f9ac 	bl	800746c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68da      	ldr	r2, [r3, #12]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f042 0204 	orr.w	r2, r2, #4
 8006122:	60da      	str	r2, [r3, #12]
      break;
 8006124:	e01e      	b.n	8006164 <HAL_TIM_Encoder_Start_IT+0x188>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2201      	movs	r2, #1
 800612c:	2100      	movs	r1, #0
 800612e:	4618      	mov	r0, r3
 8006130:	f001 f99c 	bl	800746c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2201      	movs	r2, #1
 800613a:	2104      	movs	r1, #4
 800613c:	4618      	mov	r0, r3
 800613e:	f001 f995 	bl	800746c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68da      	ldr	r2, [r3, #12]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f042 0202 	orr.w	r2, r2, #2
 8006150:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68da      	ldr	r2, [r3, #12]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f042 0204 	orr.w	r2, r2, #4
 8006160:	60da      	str	r2, [r3, #12]
      break;
 8006162:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f042 0201 	orr.w	r2, r2, #1
 8006172:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	40012c00 	.word	0x40012c00
 8006184:	40013400 	.word	0x40013400
 8006188:	40000400 	.word	0x40000400
 800618c:	40000800 	.word	0x40000800
 8006190:	40000c00 	.word	0x40000c00
 8006194:	0800b768 	.word	0x0800b768

08006198 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	f003 0302 	and.w	r3, r3, #2
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d128      	bne.n	8006200 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	f003 0302 	and.w	r3, r3, #2
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d121      	bne.n	8006200 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f06f 0202 	mvn.w	r2, #2
 80061c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	699b      	ldr	r3, [r3, #24]
 80061d2:	f003 0303 	and.w	r3, r3, #3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d005      	beq.n	80061e6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	4798      	blx	r3
 80061e4:	e009      	b.n	80061fa <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	f003 0304 	and.w	r3, r3, #4
 800620a:	2b04      	cmp	r3, #4
 800620c:	d128      	bne.n	8006260 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	f003 0304 	and.w	r3, r3, #4
 8006218:	2b04      	cmp	r3, #4
 800621a:	d121      	bne.n	8006260 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f06f 0204 	mvn.w	r2, #4
 8006224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2202      	movs	r2, #2
 800622a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006236:	2b00      	cmp	r3, #0
 8006238:	d005      	beq.n	8006246 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	4798      	blx	r3
 8006244:	e009      	b.n	800625a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	f003 0308 	and.w	r3, r3, #8
 800626a:	2b08      	cmp	r3, #8
 800626c:	d128      	bne.n	80062c0 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	f003 0308 	and.w	r3, r3, #8
 8006278:	2b08      	cmp	r3, #8
 800627a:	d121      	bne.n	80062c0 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f06f 0208 	mvn.w	r2, #8
 8006284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2204      	movs	r2, #4
 800628a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	f003 0303 	and.w	r3, r3, #3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d005      	beq.n	80062a6 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	4798      	blx	r3
 80062a4:	e009      	b.n	80062ba <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	f003 0310 	and.w	r3, r3, #16
 80062ca:	2b10      	cmp	r3, #16
 80062cc:	d128      	bne.n	8006320 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	f003 0310 	and.w	r3, r3, #16
 80062d8:	2b10      	cmp	r3, #16
 80062da:	d121      	bne.n	8006320 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f06f 0210 	mvn.w	r2, #16
 80062e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2208      	movs	r2, #8
 80062ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d005      	beq.n	8006306 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	4798      	blx	r3
 8006304:	e009      	b.n	800631a <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	f003 0301 	and.w	r3, r3, #1
 800632a:	2b01      	cmp	r3, #1
 800632c:	d110      	bne.n	8006350 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b01      	cmp	r3, #1
 800633a:	d109      	bne.n	8006350 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f06f 0201 	mvn.w	r2, #1
 8006344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800635a:	2b80      	cmp	r3, #128	; 0x80
 800635c:	d110      	bne.n	8006380 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006368:	2b80      	cmp	r3, #128	; 0x80
 800636a:	d109      	bne.n	8006380 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638a:	2b40      	cmp	r3, #64	; 0x40
 800638c:	d110      	bne.n	80063b0 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006398:	2b40      	cmp	r3, #64	; 0x40
 800639a:	d109      	bne.n	80063b0 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	f003 0320 	and.w	r3, r3, #32
 80063ba:	2b20      	cmp	r3, #32
 80063bc:	d110      	bne.n	80063e0 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	f003 0320 	and.w	r3, r3, #32
 80063c8:	2b20      	cmp	r3, #32
 80063ca:	d109      	bne.n	80063e0 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f06f 0220 	mvn.w	r2, #32
 80063d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063e0:	bf00      	nop
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d010      	beq.n	800641c <HAL_TIM_PWM_ConfigChannel+0x34>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2b04      	cmp	r3, #4
 80063fe:	d00d      	beq.n	800641c <HAL_TIM_PWM_ConfigChannel+0x34>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b08      	cmp	r3, #8
 8006404:	d00a      	beq.n	800641c <HAL_TIM_PWM_ConfigChannel+0x34>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2b0c      	cmp	r3, #12
 800640a:	d007      	beq.n	800641c <HAL_TIM_PWM_ConfigChannel+0x34>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b3c      	cmp	r3, #60	; 0x3c
 8006410:	d004      	beq.n	800641c <HAL_TIM_PWM_ConfigChannel+0x34>
 8006412:	f241 0127 	movw	r1, #4135	; 0x1027
 8006416:	4890      	ldr	r0, [pc, #576]	; (8006658 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006418:	f7fb f980 	bl	800171c <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b60      	cmp	r3, #96	; 0x60
 8006422:	d008      	beq.n	8006436 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2b70      	cmp	r3, #112	; 0x70
 800642a:	d004      	beq.n	8006436 <HAL_TIM_PWM_ConfigChannel+0x4e>
 800642c:	f241 0128 	movw	r1, #4136	; 0x1028
 8006430:	4889      	ldr	r0, [pc, #548]	; (8006658 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006432:	f7fb f973 	bl	800171c <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d008      	beq.n	8006450 <HAL_TIM_PWM_ConfigChannel+0x68>
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	2b02      	cmp	r3, #2
 8006444:	d004      	beq.n	8006450 <HAL_TIM_PWM_ConfigChannel+0x68>
 8006446:	f241 0129 	movw	r1, #4137	; 0x1029
 800644a:	4883      	ldr	r0, [pc, #524]	; (8006658 <HAL_TIM_PWM_ConfigChannel+0x270>)
 800644c:	f7fb f966 	bl	800171c <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	691b      	ldr	r3, [r3, #16]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d008      	beq.n	800646a <HAL_TIM_PWM_ConfigChannel+0x82>
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	2b04      	cmp	r3, #4
 800645e:	d004      	beq.n	800646a <HAL_TIM_PWM_ConfigChannel+0x82>
 8006460:	f241 012a 	movw	r1, #4138	; 0x102a
 8006464:	487c      	ldr	r0, [pc, #496]	; (8006658 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006466:	f7fb f959 	bl	800171c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006470:	2b01      	cmp	r3, #1
 8006472:	d101      	bne.n	8006478 <HAL_TIM_PWM_ConfigChannel+0x90>
 8006474:	2302      	movs	r3, #2
 8006476:	e145      	b.n	8006704 <HAL_TIM_PWM_ConfigChannel+0x31c>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2b0c      	cmp	r3, #12
 8006484:	f200 8138 	bhi.w	80066f8 <HAL_TIM_PWM_ConfigChannel+0x310>
 8006488:	a201      	add	r2, pc, #4	; (adr r2, 8006490 <HAL_TIM_PWM_ConfigChannel+0xa8>)
 800648a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648e:	bf00      	nop
 8006490:	080064c5 	.word	0x080064c5
 8006494:	080066f9 	.word	0x080066f9
 8006498:	080066f9 	.word	0x080066f9
 800649c:	080066f9 	.word	0x080066f9
 80064a0:	0800654b 	.word	0x0800654b
 80064a4:	080066f9 	.word	0x080066f9
 80064a8:	080066f9 	.word	0x080066f9
 80064ac:	080066f9 	.word	0x080066f9
 80064b0:	080065d3 	.word	0x080065d3
 80064b4:	080066f9 	.word	0x080066f9
 80064b8:	080066f9 	.word	0x080066f9
 80064bc:	080066f9 	.word	0x080066f9
 80064c0:	08006671 	.word	0x08006671
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a64      	ldr	r2, [pc, #400]	; (800665c <HAL_TIM_PWM_ConfigChannel+0x274>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d01d      	beq.n	800650a <HAL_TIM_PWM_ConfigChannel+0x122>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a63      	ldr	r2, [pc, #396]	; (8006660 <HAL_TIM_PWM_ConfigChannel+0x278>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d018      	beq.n	800650a <HAL_TIM_PWM_ConfigChannel+0x122>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064e0:	d013      	beq.n	800650a <HAL_TIM_PWM_ConfigChannel+0x122>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a5f      	ldr	r2, [pc, #380]	; (8006664 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d00e      	beq.n	800650a <HAL_TIM_PWM_ConfigChannel+0x122>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a5d      	ldr	r2, [pc, #372]	; (8006668 <HAL_TIM_PWM_ConfigChannel+0x280>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d009      	beq.n	800650a <HAL_TIM_PWM_ConfigChannel+0x122>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a5c      	ldr	r2, [pc, #368]	; (800666c <HAL_TIM_PWM_ConfigChannel+0x284>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d004      	beq.n	800650a <HAL_TIM_PWM_ConfigChannel+0x122>
 8006500:	f241 0134 	movw	r1, #4148	; 0x1034
 8006504:	4854      	ldr	r0, [pc, #336]	; (8006658 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006506:	f7fb f909 	bl	800171c <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68b9      	ldr	r1, [r7, #8]
 8006510:	4618      	mov	r0, r3
 8006512:	f000 fcdb 	bl	8006ecc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	699a      	ldr	r2, [r3, #24]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f042 0208 	orr.w	r2, r2, #8
 8006524:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	699a      	ldr	r2, [r3, #24]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f022 0204 	bic.w	r2, r2, #4
 8006534:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6999      	ldr	r1, [r3, #24]
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	691a      	ldr	r2, [r3, #16]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	619a      	str	r2, [r3, #24]
      break;
 8006548:	e0d7      	b.n	80066fa <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a43      	ldr	r2, [pc, #268]	; (800665c <HAL_TIM_PWM_ConfigChannel+0x274>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d01d      	beq.n	8006590 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a41      	ldr	r2, [pc, #260]	; (8006660 <HAL_TIM_PWM_ConfigChannel+0x278>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d018      	beq.n	8006590 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006566:	d013      	beq.n	8006590 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a3d      	ldr	r2, [pc, #244]	; (8006664 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d00e      	beq.n	8006590 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a3c      	ldr	r2, [pc, #240]	; (8006668 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d009      	beq.n	8006590 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a3a      	ldr	r2, [pc, #232]	; (800666c <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d004      	beq.n	8006590 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006586:	f241 0145 	movw	r1, #4165	; 0x1045
 800658a:	4833      	ldr	r0, [pc, #204]	; (8006658 <HAL_TIM_PWM_ConfigChannel+0x270>)
 800658c:	f7fb f8c6 	bl	800171c <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68b9      	ldr	r1, [r7, #8]
 8006596:	4618      	mov	r0, r3
 8006598:	f000 fd32 	bl	8007000 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	699a      	ldr	r2, [r3, #24]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	699a      	ldr	r2, [r3, #24]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	6999      	ldr	r1, [r3, #24]
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	021a      	lsls	r2, r3, #8
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	430a      	orrs	r2, r1
 80065ce:	619a      	str	r2, [r3, #24]
      break;
 80065d0:	e093      	b.n	80066fa <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a21      	ldr	r2, [pc, #132]	; (800665c <HAL_TIM_PWM_ConfigChannel+0x274>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d01d      	beq.n	8006618 <HAL_TIM_PWM_ConfigChannel+0x230>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a1f      	ldr	r2, [pc, #124]	; (8006660 <HAL_TIM_PWM_ConfigChannel+0x278>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d018      	beq.n	8006618 <HAL_TIM_PWM_ConfigChannel+0x230>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ee:	d013      	beq.n	8006618 <HAL_TIM_PWM_ConfigChannel+0x230>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a1b      	ldr	r2, [pc, #108]	; (8006664 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d00e      	beq.n	8006618 <HAL_TIM_PWM_ConfigChannel+0x230>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a1a      	ldr	r2, [pc, #104]	; (8006668 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d009      	beq.n	8006618 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a18      	ldr	r2, [pc, #96]	; (800666c <HAL_TIM_PWM_ConfigChannel+0x284>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d004      	beq.n	8006618 <HAL_TIM_PWM_ConfigChannel+0x230>
 800660e:	f241 0156 	movw	r1, #4182	; 0x1056
 8006612:	4811      	ldr	r0, [pc, #68]	; (8006658 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006614:	f7fb f882 	bl	800171c <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68b9      	ldr	r1, [r7, #8]
 800661e:	4618      	mov	r0, r3
 8006620:	f000 fd8c 	bl	800713c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	69da      	ldr	r2, [r3, #28]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f042 0208 	orr.w	r2, r2, #8
 8006632:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	69da      	ldr	r2, [r3, #28]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f022 0204 	bic.w	r2, r2, #4
 8006642:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	69d9      	ldr	r1, [r3, #28]
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	691a      	ldr	r2, [r3, #16]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	430a      	orrs	r2, r1
 8006654:	61da      	str	r2, [r3, #28]
      break;
 8006656:	e050      	b.n	80066fa <HAL_TIM_PWM_ConfigChannel+0x312>
 8006658:	0800b768 	.word	0x0800b768
 800665c:	40012c00 	.word	0x40012c00
 8006660:	40013400 	.word	0x40013400
 8006664:	40000400 	.word	0x40000400
 8006668:	40000800 	.word	0x40000800
 800666c:	40000c00 	.word	0x40000c00
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a25      	ldr	r2, [pc, #148]	; (800670c <HAL_TIM_PWM_ConfigChannel+0x324>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d01d      	beq.n	80066b6 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a24      	ldr	r2, [pc, #144]	; (8006710 <HAL_TIM_PWM_ConfigChannel+0x328>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d018      	beq.n	80066b6 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800668c:	d013      	beq.n	80066b6 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a20      	ldr	r2, [pc, #128]	; (8006714 <HAL_TIM_PWM_ConfigChannel+0x32c>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d00e      	beq.n	80066b6 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a1e      	ldr	r2, [pc, #120]	; (8006718 <HAL_TIM_PWM_ConfigChannel+0x330>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d009      	beq.n	80066b6 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a1d      	ldr	r2, [pc, #116]	; (800671c <HAL_TIM_PWM_ConfigChannel+0x334>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d004      	beq.n	80066b6 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 80066ac:	f241 0167 	movw	r1, #4199	; 0x1067
 80066b0:	481b      	ldr	r0, [pc, #108]	; (8006720 <HAL_TIM_PWM_ConfigChannel+0x338>)
 80066b2:	f7fb f833 	bl	800171c <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68b9      	ldr	r1, [r7, #8]
 80066bc:	4618      	mov	r0, r3
 80066be:	f000 fddb 	bl	8007278 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	69da      	ldr	r2, [r3, #28]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	69da      	ldr	r2, [r3, #28]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	69d9      	ldr	r1, [r3, #28]
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	021a      	lsls	r2, r3, #8
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	430a      	orrs	r2, r1
 80066f4:	61da      	str	r2, [r3, #28]
      break;
 80066f6:	e000      	b.n	80066fa <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    default:
      break;
 80066f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	40012c00 	.word	0x40012c00
 8006710:	40013400 	.word	0x40013400
 8006714:	40000400 	.word	0x40000400
 8006718:	40000800 	.word	0x40000800
 800671c:	40000c00 	.word	0x40000c00
 8006720:	0800b768 	.word	0x0800b768

08006724 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006734:	2b01      	cmp	r3, #1
 8006736:	d101      	bne.n	800673c <HAL_TIM_ConfigClockSource+0x18>
 8006738:	2302      	movs	r3, #2
 800673a:	e2f5      	b.n	8006d28 <HAL_TIM_ConfigClockSource+0x604>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2202      	movs	r2, #2
 8006748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006754:	d029      	beq.n	80067aa <HAL_TIM_ConfigClockSource+0x86>
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800675e:	d024      	beq.n	80067aa <HAL_TIM_ConfigClockSource+0x86>
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d020      	beq.n	80067aa <HAL_TIM_ConfigClockSource+0x86>
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2b10      	cmp	r3, #16
 800676e:	d01c      	beq.n	80067aa <HAL_TIM_ConfigClockSource+0x86>
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2b20      	cmp	r3, #32
 8006776:	d018      	beq.n	80067aa <HAL_TIM_ConfigClockSource+0x86>
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2b30      	cmp	r3, #48	; 0x30
 800677e:	d014      	beq.n	80067aa <HAL_TIM_ConfigClockSource+0x86>
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2b40      	cmp	r3, #64	; 0x40
 8006786:	d010      	beq.n	80067aa <HAL_TIM_ConfigClockSource+0x86>
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2b50      	cmp	r3, #80	; 0x50
 800678e:	d00c      	beq.n	80067aa <HAL_TIM_ConfigClockSource+0x86>
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2b60      	cmp	r3, #96	; 0x60
 8006796:	d008      	beq.n	80067aa <HAL_TIM_ConfigClockSource+0x86>
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2b70      	cmp	r3, #112	; 0x70
 800679e:	d004      	beq.n	80067aa <HAL_TIM_ConfigClockSource+0x86>
 80067a0:	f241 4132 	movw	r1, #5170	; 0x1432
 80067a4:	487c      	ldr	r0, [pc, #496]	; (8006998 <HAL_TIM_ConfigClockSource+0x274>)
 80067a6:	f7fa ffb9 	bl	800171c <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067b8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067c0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067d2:	f000 80f1 	beq.w	80069b8 <HAL_TIM_ConfigClockSource+0x294>
 80067d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067da:	f200 8299 	bhi.w	8006d10 <HAL_TIM_ConfigClockSource+0x5ec>
 80067de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067e2:	d02d      	beq.n	8006840 <HAL_TIM_ConfigClockSource+0x11c>
 80067e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067e8:	f200 8292 	bhi.w	8006d10 <HAL_TIM_ConfigClockSource+0x5ec>
 80067ec:	2b70      	cmp	r3, #112	; 0x70
 80067ee:	d05d      	beq.n	80068ac <HAL_TIM_ConfigClockSource+0x188>
 80067f0:	2b70      	cmp	r3, #112	; 0x70
 80067f2:	f200 828d 	bhi.w	8006d10 <HAL_TIM_ConfigClockSource+0x5ec>
 80067f6:	2b60      	cmp	r3, #96	; 0x60
 80067f8:	f000 81a5 	beq.w	8006b46 <HAL_TIM_ConfigClockSource+0x422>
 80067fc:	2b60      	cmp	r3, #96	; 0x60
 80067fe:	f200 8287 	bhi.w	8006d10 <HAL_TIM_ConfigClockSource+0x5ec>
 8006802:	2b50      	cmp	r3, #80	; 0x50
 8006804:	f000 8149 	beq.w	8006a9a <HAL_TIM_ConfigClockSource+0x376>
 8006808:	2b50      	cmp	r3, #80	; 0x50
 800680a:	f200 8281 	bhi.w	8006d10 <HAL_TIM_ConfigClockSource+0x5ec>
 800680e:	2b40      	cmp	r3, #64	; 0x40
 8006810:	f000 81fc 	beq.w	8006c0c <HAL_TIM_ConfigClockSource+0x4e8>
 8006814:	2b40      	cmp	r3, #64	; 0x40
 8006816:	f200 827b 	bhi.w	8006d10 <HAL_TIM_ConfigClockSource+0x5ec>
 800681a:	2b30      	cmp	r3, #48	; 0x30
 800681c:	f000 824c 	beq.w	8006cb8 <HAL_TIM_ConfigClockSource+0x594>
 8006820:	2b30      	cmp	r3, #48	; 0x30
 8006822:	f200 8275 	bhi.w	8006d10 <HAL_TIM_ConfigClockSource+0x5ec>
 8006826:	2b20      	cmp	r3, #32
 8006828:	f000 8246 	beq.w	8006cb8 <HAL_TIM_ConfigClockSource+0x594>
 800682c:	2b20      	cmp	r3, #32
 800682e:	f200 826f 	bhi.w	8006d10 <HAL_TIM_ConfigClockSource+0x5ec>
 8006832:	2b00      	cmp	r3, #0
 8006834:	f000 8240 	beq.w	8006cb8 <HAL_TIM_ConfigClockSource+0x594>
 8006838:	2b10      	cmp	r3, #16
 800683a:	f000 823d 	beq.w	8006cb8 <HAL_TIM_ConfigClockSource+0x594>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800683e:	e267      	b.n	8006d10 <HAL_TIM_ConfigClockSource+0x5ec>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a55      	ldr	r2, [pc, #340]	; (800699c <HAL_TIM_ConfigClockSource+0x278>)
 8006846:	4293      	cmp	r3, r2
 8006848:	f000 8264 	beq.w	8006d14 <HAL_TIM_ConfigClockSource+0x5f0>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a53      	ldr	r2, [pc, #332]	; (80069a0 <HAL_TIM_ConfigClockSource+0x27c>)
 8006852:	4293      	cmp	r3, r2
 8006854:	f000 825e 	beq.w	8006d14 <HAL_TIM_ConfigClockSource+0x5f0>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006860:	f000 8258 	beq.w	8006d14 <HAL_TIM_ConfigClockSource+0x5f0>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a4e      	ldr	r2, [pc, #312]	; (80069a4 <HAL_TIM_ConfigClockSource+0x280>)
 800686a:	4293      	cmp	r3, r2
 800686c:	f000 8252 	beq.w	8006d14 <HAL_TIM_ConfigClockSource+0x5f0>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a4c      	ldr	r2, [pc, #304]	; (80069a8 <HAL_TIM_ConfigClockSource+0x284>)
 8006876:	4293      	cmp	r3, r2
 8006878:	f000 824c 	beq.w	8006d14 <HAL_TIM_ConfigClockSource+0x5f0>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a4a      	ldr	r2, [pc, #296]	; (80069ac <HAL_TIM_ConfigClockSource+0x288>)
 8006882:	4293      	cmp	r3, r2
 8006884:	f000 8246 	beq.w	8006d14 <HAL_TIM_ConfigClockSource+0x5f0>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a48      	ldr	r2, [pc, #288]	; (80069b0 <HAL_TIM_ConfigClockSource+0x28c>)
 800688e:	4293      	cmp	r3, r2
 8006890:	f000 8240 	beq.w	8006d14 <HAL_TIM_ConfigClockSource+0x5f0>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a46      	ldr	r2, [pc, #280]	; (80069b4 <HAL_TIM_ConfigClockSource+0x290>)
 800689a:	4293      	cmp	r3, r2
 800689c:	f000 823a 	beq.w	8006d14 <HAL_TIM_ConfigClockSource+0x5f0>
 80068a0:	f241 413e 	movw	r1, #5182	; 0x143e
 80068a4:	483c      	ldr	r0, [pc, #240]	; (8006998 <HAL_TIM_ConfigClockSource+0x274>)
 80068a6:	f7fa ff39 	bl	800171c <assert_failed>
      break;
 80068aa:	e233      	b.n	8006d14 <HAL_TIM_ConfigClockSource+0x5f0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a3a      	ldr	r2, [pc, #232]	; (800699c <HAL_TIM_ConfigClockSource+0x278>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d01d      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0x1ce>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a39      	ldr	r2, [pc, #228]	; (80069a0 <HAL_TIM_ConfigClockSource+0x27c>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d018      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0x1ce>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068c8:	d013      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0x1ce>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a35      	ldr	r2, [pc, #212]	; (80069a4 <HAL_TIM_ConfigClockSource+0x280>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d00e      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0x1ce>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a33      	ldr	r2, [pc, #204]	; (80069a8 <HAL_TIM_ConfigClockSource+0x284>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d009      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0x1ce>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a32      	ldr	r2, [pc, #200]	; (80069ac <HAL_TIM_ConfigClockSource+0x288>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d004      	beq.n	80068f2 <HAL_TIM_ConfigClockSource+0x1ce>
 80068e8:	f241 4145 	movw	r1, #5189	; 0x1445
 80068ec:	482a      	ldr	r0, [pc, #168]	; (8006998 <HAL_TIM_ConfigClockSource+0x274>)
 80068ee:	f7fa ff15 	bl	800171c <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d013      	beq.n	8006922 <HAL_TIM_ConfigClockSource+0x1fe>
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006902:	d00e      	beq.n	8006922 <HAL_TIM_ConfigClockSource+0x1fe>
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800690c:	d009      	beq.n	8006922 <HAL_TIM_ConfigClockSource+0x1fe>
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006916:	d004      	beq.n	8006922 <HAL_TIM_ConfigClockSource+0x1fe>
 8006918:	f241 4148 	movw	r1, #5192	; 0x1448
 800691c:	481e      	ldr	r0, [pc, #120]	; (8006998 <HAL_TIM_ConfigClockSource+0x274>)
 800691e:	f7fa fefd 	bl	800171c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800692a:	d014      	beq.n	8006956 <HAL_TIM_ConfigClockSource+0x232>
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d010      	beq.n	8006956 <HAL_TIM_ConfigClockSource+0x232>
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00c      	beq.n	8006956 <HAL_TIM_ConfigClockSource+0x232>
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	2b02      	cmp	r3, #2
 8006942:	d008      	beq.n	8006956 <HAL_TIM_ConfigClockSource+0x232>
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	2b0a      	cmp	r3, #10
 800694a:	d004      	beq.n	8006956 <HAL_TIM_ConfigClockSource+0x232>
 800694c:	f241 4149 	movw	r1, #5193	; 0x1449
 8006950:	4811      	ldr	r0, [pc, #68]	; (8006998 <HAL_TIM_ConfigClockSource+0x274>)
 8006952:	f7fa fee3 	bl	800171c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	2b0f      	cmp	r3, #15
 800695c:	d904      	bls.n	8006968 <HAL_TIM_ConfigClockSource+0x244>
 800695e:	f241 414a 	movw	r1, #5194	; 0x144a
 8006962:	480d      	ldr	r0, [pc, #52]	; (8006998 <HAL_TIM_ConfigClockSource+0x274>)
 8006964:	f7fa feda 	bl	800171c <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6818      	ldr	r0, [r3, #0]
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	6899      	ldr	r1, [r3, #8]
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	f000 fd59 	bl	800742e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800698a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	609a      	str	r2, [r3, #8]
      break;
 8006994:	e1bf      	b.n	8006d16 <HAL_TIM_ConfigClockSource+0x5f2>
 8006996:	bf00      	nop
 8006998:	0800b768 	.word	0x0800b768
 800699c:	40012c00 	.word	0x40012c00
 80069a0:	40013400 	.word	0x40013400
 80069a4:	40000400 	.word	0x40000400
 80069a8:	40000800 	.word	0x40000800
 80069ac:	40000c00 	.word	0x40000c00
 80069b0:	40001000 	.word	0x40001000
 80069b4:	40001400 	.word	0x40001400
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a8d      	ldr	r2, [pc, #564]	; (8006bf4 <HAL_TIM_ConfigClockSource+0x4d0>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d01d      	beq.n	80069fe <HAL_TIM_ConfigClockSource+0x2da>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a8c      	ldr	r2, [pc, #560]	; (8006bf8 <HAL_TIM_ConfigClockSource+0x4d4>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d018      	beq.n	80069fe <HAL_TIM_ConfigClockSource+0x2da>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069d4:	d013      	beq.n	80069fe <HAL_TIM_ConfigClockSource+0x2da>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a88      	ldr	r2, [pc, #544]	; (8006bfc <HAL_TIM_ConfigClockSource+0x4d8>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d00e      	beq.n	80069fe <HAL_TIM_ConfigClockSource+0x2da>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a86      	ldr	r2, [pc, #536]	; (8006c00 <HAL_TIM_ConfigClockSource+0x4dc>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d009      	beq.n	80069fe <HAL_TIM_ConfigClockSource+0x2da>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a85      	ldr	r2, [pc, #532]	; (8006c04 <HAL_TIM_ConfigClockSource+0x4e0>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d004      	beq.n	80069fe <HAL_TIM_ConfigClockSource+0x2da>
 80069f4:	f241 415d 	movw	r1, #5213	; 0x145d
 80069f8:	4883      	ldr	r0, [pc, #524]	; (8006c08 <HAL_TIM_ConfigClockSource+0x4e4>)
 80069fa:	f7fa fe8f 	bl	800171c <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d013      	beq.n	8006a2e <HAL_TIM_ConfigClockSource+0x30a>
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a0e:	d00e      	beq.n	8006a2e <HAL_TIM_ConfigClockSource+0x30a>
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a18:	d009      	beq.n	8006a2e <HAL_TIM_ConfigClockSource+0x30a>
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a22:	d004      	beq.n	8006a2e <HAL_TIM_ConfigClockSource+0x30a>
 8006a24:	f44f 51a3 	mov.w	r1, #5216	; 0x1460
 8006a28:	4877      	ldr	r0, [pc, #476]	; (8006c08 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006a2a:	f7fa fe77 	bl	800171c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a36:	d014      	beq.n	8006a62 <HAL_TIM_ConfigClockSource+0x33e>
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d010      	beq.n	8006a62 <HAL_TIM_ConfigClockSource+0x33e>
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00c      	beq.n	8006a62 <HAL_TIM_ConfigClockSource+0x33e>
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	2b02      	cmp	r3, #2
 8006a4e:	d008      	beq.n	8006a62 <HAL_TIM_ConfigClockSource+0x33e>
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	2b0a      	cmp	r3, #10
 8006a56:	d004      	beq.n	8006a62 <HAL_TIM_ConfigClockSource+0x33e>
 8006a58:	f241 4161 	movw	r1, #5217	; 0x1461
 8006a5c:	486a      	ldr	r0, [pc, #424]	; (8006c08 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006a5e:	f7fa fe5d 	bl	800171c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	2b0f      	cmp	r3, #15
 8006a68:	d904      	bls.n	8006a74 <HAL_TIM_ConfigClockSource+0x350>
 8006a6a:	f241 4162 	movw	r1, #5218	; 0x1462
 8006a6e:	4866      	ldr	r0, [pc, #408]	; (8006c08 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006a70:	f7fa fe54 	bl	800171c <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6818      	ldr	r0, [r3, #0]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	6899      	ldr	r1, [r3, #8]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	685a      	ldr	r2, [r3, #4]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	f000 fcd3 	bl	800742e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	689a      	ldr	r2, [r3, #8]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a96:	609a      	str	r2, [r3, #8]
      break;
 8006a98:	e13d      	b.n	8006d16 <HAL_TIM_ConfigClockSource+0x5f2>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a55      	ldr	r2, [pc, #340]	; (8006bf4 <HAL_TIM_ConfigClockSource+0x4d0>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d01d      	beq.n	8006ae0 <HAL_TIM_ConfigClockSource+0x3bc>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a53      	ldr	r2, [pc, #332]	; (8006bf8 <HAL_TIM_ConfigClockSource+0x4d4>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d018      	beq.n	8006ae0 <HAL_TIM_ConfigClockSource+0x3bc>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ab6:	d013      	beq.n	8006ae0 <HAL_TIM_ConfigClockSource+0x3bc>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a4f      	ldr	r2, [pc, #316]	; (8006bfc <HAL_TIM_ConfigClockSource+0x4d8>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d00e      	beq.n	8006ae0 <HAL_TIM_ConfigClockSource+0x3bc>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a4e      	ldr	r2, [pc, #312]	; (8006c00 <HAL_TIM_ConfigClockSource+0x4dc>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d009      	beq.n	8006ae0 <HAL_TIM_ConfigClockSource+0x3bc>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a4c      	ldr	r2, [pc, #304]	; (8006c04 <HAL_TIM_ConfigClockSource+0x4e0>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d004      	beq.n	8006ae0 <HAL_TIM_ConfigClockSource+0x3bc>
 8006ad6:	f241 4171 	movw	r1, #5233	; 0x1471
 8006ada:	484b      	ldr	r0, [pc, #300]	; (8006c08 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006adc:	f7fa fe1e 	bl	800171c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ae8:	d014      	beq.n	8006b14 <HAL_TIM_ConfigClockSource+0x3f0>
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d010      	beq.n	8006b14 <HAL_TIM_ConfigClockSource+0x3f0>
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00c      	beq.n	8006b14 <HAL_TIM_ConfigClockSource+0x3f0>
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d008      	beq.n	8006b14 <HAL_TIM_ConfigClockSource+0x3f0>
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	2b0a      	cmp	r3, #10
 8006b08:	d004      	beq.n	8006b14 <HAL_TIM_ConfigClockSource+0x3f0>
 8006b0a:	f241 4174 	movw	r1, #5236	; 0x1474
 8006b0e:	483e      	ldr	r0, [pc, #248]	; (8006c08 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006b10:	f7fa fe04 	bl	800171c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	2b0f      	cmp	r3, #15
 8006b1a:	d904      	bls.n	8006b26 <HAL_TIM_ConfigClockSource+0x402>
 8006b1c:	f241 4175 	movw	r1, #5237	; 0x1475
 8006b20:	4839      	ldr	r0, [pc, #228]	; (8006c08 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006b22:	f7fa fdfb 	bl	800171c <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6818      	ldr	r0, [r3, #0]
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	6859      	ldr	r1, [r3, #4]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	461a      	mov	r2, r3
 8006b34:	f000 fc04 	bl	8007340 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2150      	movs	r1, #80	; 0x50
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f000 fc5b 	bl	80073fa <TIM_ITRx_SetConfig>
      break;
 8006b44:	e0e7      	b.n	8006d16 <HAL_TIM_ConfigClockSource+0x5f2>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a2a      	ldr	r2, [pc, #168]	; (8006bf4 <HAL_TIM_ConfigClockSource+0x4d0>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d01d      	beq.n	8006b8c <HAL_TIM_ConfigClockSource+0x468>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a28      	ldr	r2, [pc, #160]	; (8006bf8 <HAL_TIM_ConfigClockSource+0x4d4>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d018      	beq.n	8006b8c <HAL_TIM_ConfigClockSource+0x468>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b62:	d013      	beq.n	8006b8c <HAL_TIM_ConfigClockSource+0x468>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a24      	ldr	r2, [pc, #144]	; (8006bfc <HAL_TIM_ConfigClockSource+0x4d8>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d00e      	beq.n	8006b8c <HAL_TIM_ConfigClockSource+0x468>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a23      	ldr	r2, [pc, #140]	; (8006c00 <HAL_TIM_ConfigClockSource+0x4dc>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d009      	beq.n	8006b8c <HAL_TIM_ConfigClockSource+0x468>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a21      	ldr	r2, [pc, #132]	; (8006c04 <HAL_TIM_ConfigClockSource+0x4e0>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d004      	beq.n	8006b8c <HAL_TIM_ConfigClockSource+0x468>
 8006b82:	f241 4181 	movw	r1, #5249	; 0x1481
 8006b86:	4820      	ldr	r0, [pc, #128]	; (8006c08 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006b88:	f7fa fdc8 	bl	800171c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b94:	d014      	beq.n	8006bc0 <HAL_TIM_ConfigClockSource+0x49c>
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d010      	beq.n	8006bc0 <HAL_TIM_ConfigClockSource+0x49c>
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00c      	beq.n	8006bc0 <HAL_TIM_ConfigClockSource+0x49c>
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	2b02      	cmp	r3, #2
 8006bac:	d008      	beq.n	8006bc0 <HAL_TIM_ConfigClockSource+0x49c>
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	2b0a      	cmp	r3, #10
 8006bb4:	d004      	beq.n	8006bc0 <HAL_TIM_ConfigClockSource+0x49c>
 8006bb6:	f241 4184 	movw	r1, #5252	; 0x1484
 8006bba:	4813      	ldr	r0, [pc, #76]	; (8006c08 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006bbc:	f7fa fdae 	bl	800171c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	2b0f      	cmp	r3, #15
 8006bc6:	d904      	bls.n	8006bd2 <HAL_TIM_ConfigClockSource+0x4ae>
 8006bc8:	f241 4185 	movw	r1, #5253	; 0x1485
 8006bcc:	480e      	ldr	r0, [pc, #56]	; (8006c08 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006bce:	f7fa fda5 	bl	800171c <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6818      	ldr	r0, [r3, #0]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	6859      	ldr	r1, [r3, #4]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	461a      	mov	r2, r3
 8006be0:	f000 fbdc 	bl	800739c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2160      	movs	r1, #96	; 0x60
 8006bea:	4618      	mov	r0, r3
 8006bec:	f000 fc05 	bl	80073fa <TIM_ITRx_SetConfig>
      break;
 8006bf0:	e091      	b.n	8006d16 <HAL_TIM_ConfigClockSource+0x5f2>
 8006bf2:	bf00      	nop
 8006bf4:	40012c00 	.word	0x40012c00
 8006bf8:	40013400 	.word	0x40013400
 8006bfc:	40000400 	.word	0x40000400
 8006c00:	40000800 	.word	0x40000800
 8006c04:	40000c00 	.word	0x40000c00
 8006c08:	0800b768 	.word	0x0800b768
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a47      	ldr	r2, [pc, #284]	; (8006d30 <HAL_TIM_ConfigClockSource+0x60c>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d01d      	beq.n	8006c52 <HAL_TIM_ConfigClockSource+0x52e>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a46      	ldr	r2, [pc, #280]	; (8006d34 <HAL_TIM_ConfigClockSource+0x610>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d018      	beq.n	8006c52 <HAL_TIM_ConfigClockSource+0x52e>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c28:	d013      	beq.n	8006c52 <HAL_TIM_ConfigClockSource+0x52e>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a42      	ldr	r2, [pc, #264]	; (8006d38 <HAL_TIM_ConfigClockSource+0x614>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d00e      	beq.n	8006c52 <HAL_TIM_ConfigClockSource+0x52e>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a40      	ldr	r2, [pc, #256]	; (8006d3c <HAL_TIM_ConfigClockSource+0x618>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d009      	beq.n	8006c52 <HAL_TIM_ConfigClockSource+0x52e>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a3f      	ldr	r2, [pc, #252]	; (8006d40 <HAL_TIM_ConfigClockSource+0x61c>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d004      	beq.n	8006c52 <HAL_TIM_ConfigClockSource+0x52e>
 8006c48:	f241 4191 	movw	r1, #5265	; 0x1491
 8006c4c:	483d      	ldr	r0, [pc, #244]	; (8006d44 <HAL_TIM_ConfigClockSource+0x620>)
 8006c4e:	f7fa fd65 	bl	800171c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c5a:	d014      	beq.n	8006c86 <HAL_TIM_ConfigClockSource+0x562>
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d010      	beq.n	8006c86 <HAL_TIM_ConfigClockSource+0x562>
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00c      	beq.n	8006c86 <HAL_TIM_ConfigClockSource+0x562>
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d008      	beq.n	8006c86 <HAL_TIM_ConfigClockSource+0x562>
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	2b0a      	cmp	r3, #10
 8006c7a:	d004      	beq.n	8006c86 <HAL_TIM_ConfigClockSource+0x562>
 8006c7c:	f241 4194 	movw	r1, #5268	; 0x1494
 8006c80:	4830      	ldr	r0, [pc, #192]	; (8006d44 <HAL_TIM_ConfigClockSource+0x620>)
 8006c82:	f7fa fd4b 	bl	800171c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	2b0f      	cmp	r3, #15
 8006c8c:	d904      	bls.n	8006c98 <HAL_TIM_ConfigClockSource+0x574>
 8006c8e:	f241 4195 	movw	r1, #5269	; 0x1495
 8006c92:	482c      	ldr	r0, [pc, #176]	; (8006d44 <HAL_TIM_ConfigClockSource+0x620>)
 8006c94:	f7fa fd42 	bl	800171c <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6818      	ldr	r0, [r3, #0]
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	6859      	ldr	r1, [r3, #4]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	f000 fb4b 	bl	8007340 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2140      	movs	r1, #64	; 0x40
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f000 fba2 	bl	80073fa <TIM_ITRx_SetConfig>
      break;
 8006cb6:	e02e      	b.n	8006d16 <HAL_TIM_ConfigClockSource+0x5f2>
        assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a1c      	ldr	r2, [pc, #112]	; (8006d30 <HAL_TIM_ConfigClockSource+0x60c>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d01d      	beq.n	8006cfe <HAL_TIM_ConfigClockSource+0x5da>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a1b      	ldr	r2, [pc, #108]	; (8006d34 <HAL_TIM_ConfigClockSource+0x610>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d018      	beq.n	8006cfe <HAL_TIM_ConfigClockSource+0x5da>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cd4:	d013      	beq.n	8006cfe <HAL_TIM_ConfigClockSource+0x5da>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a17      	ldr	r2, [pc, #92]	; (8006d38 <HAL_TIM_ConfigClockSource+0x614>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d00e      	beq.n	8006cfe <HAL_TIM_ConfigClockSource+0x5da>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a15      	ldr	r2, [pc, #84]	; (8006d3c <HAL_TIM_ConfigClockSource+0x618>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d009      	beq.n	8006cfe <HAL_TIM_ConfigClockSource+0x5da>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a14      	ldr	r2, [pc, #80]	; (8006d40 <HAL_TIM_ConfigClockSource+0x61c>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d004      	beq.n	8006cfe <HAL_TIM_ConfigClockSource+0x5da>
 8006cf4:	f241 41a4 	movw	r1, #5284	; 0x14a4
 8006cf8:	4812      	ldr	r0, [pc, #72]	; (8006d44 <HAL_TIM_ConfigClockSource+0x620>)
 8006cfa:	f7fa fd0f 	bl	800171c <assert_failed>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4619      	mov	r1, r3
 8006d08:	4610      	mov	r0, r2
 8006d0a:	f000 fb76 	bl	80073fa <TIM_ITRx_SetConfig>
        break;
 8006d0e:	e002      	b.n	8006d16 <HAL_TIM_ConfigClockSource+0x5f2>
      break;
 8006d10:	bf00      	nop
 8006d12:	e000      	b.n	8006d16 <HAL_TIM_ConfigClockSource+0x5f2>
      break;
 8006d14:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	40012c00 	.word	0x40012c00
 8006d34:	40013400 	.word	0x40013400
 8006d38:	40000400 	.word	0x40000400
 8006d3c:	40000800 	.word	0x40000800
 8006d40:	40000c00 	.word	0x40000c00
 8006d44:	0800b768 	.word	0x0800b768

08006d48 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006d50:	bf00      	nop
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bc80      	pop	{r7}
 8006d58:	4770      	bx	lr

08006d5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b083      	sub	sp, #12
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d62:	bf00      	nop
 8006d64:	370c      	adds	r7, #12
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bc80      	pop	{r7}
 8006d6a:	4770      	bx	lr

08006d6c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bc80      	pop	{r7}
 8006d7c:	4770      	bx	lr

08006d7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d7e:	b480      	push	{r7}
 8006d80:	b083      	sub	sp, #12
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d86:	bf00      	nop
 8006d88:	370c      	adds	r7, #12
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bc80      	pop	{r7}
 8006d8e:	4770      	bx	lr

08006d90 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006d98:	bf00      	nop
 8006d9a:	370c      	adds	r7, #12
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bc80      	pop	{r7}
 8006da0:	4770      	bx	lr

08006da2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b083      	sub	sp, #12
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006daa:	bf00      	nop
 8006dac:	370c      	adds	r7, #12
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bc80      	pop	{r7}
 8006db2:	4770      	bx	lr

08006db4 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bc80      	pop	{r7}
 8006dc4:	4770      	bx	lr

08006dc6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006dc6:	b480      	push	{r7}
 8006dc8:	b083      	sub	sp, #12
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006dce:	bf00      	nop
 8006dd0:	370c      	adds	r7, #12
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bc80      	pop	{r7}
 8006dd6:	4770      	bx	lr

08006dd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a33      	ldr	r2, [pc, #204]	; (8006eb8 <TIM_Base_SetConfig+0xe0>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d013      	beq.n	8006e18 <TIM_Base_SetConfig+0x40>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a32      	ldr	r2, [pc, #200]	; (8006ebc <TIM_Base_SetConfig+0xe4>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d00f      	beq.n	8006e18 <TIM_Base_SetConfig+0x40>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dfe:	d00b      	beq.n	8006e18 <TIM_Base_SetConfig+0x40>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a2f      	ldr	r2, [pc, #188]	; (8006ec0 <TIM_Base_SetConfig+0xe8>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d007      	beq.n	8006e18 <TIM_Base_SetConfig+0x40>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a2e      	ldr	r2, [pc, #184]	; (8006ec4 <TIM_Base_SetConfig+0xec>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d003      	beq.n	8006e18 <TIM_Base_SetConfig+0x40>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a2d      	ldr	r2, [pc, #180]	; (8006ec8 <TIM_Base_SetConfig+0xf0>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d108      	bne.n	8006e2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a22      	ldr	r2, [pc, #136]	; (8006eb8 <TIM_Base_SetConfig+0xe0>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d013      	beq.n	8006e5a <TIM_Base_SetConfig+0x82>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a21      	ldr	r2, [pc, #132]	; (8006ebc <TIM_Base_SetConfig+0xe4>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d00f      	beq.n	8006e5a <TIM_Base_SetConfig+0x82>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e40:	d00b      	beq.n	8006e5a <TIM_Base_SetConfig+0x82>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a1e      	ldr	r2, [pc, #120]	; (8006ec0 <TIM_Base_SetConfig+0xe8>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d007      	beq.n	8006e5a <TIM_Base_SetConfig+0x82>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a1d      	ldr	r2, [pc, #116]	; (8006ec4 <TIM_Base_SetConfig+0xec>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d003      	beq.n	8006e5a <TIM_Base_SetConfig+0x82>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a1c      	ldr	r2, [pc, #112]	; (8006ec8 <TIM_Base_SetConfig+0xf0>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d108      	bne.n	8006e6c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	695b      	ldr	r3, [r3, #20]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	689a      	ldr	r2, [r3, #8]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a09      	ldr	r2, [pc, #36]	; (8006eb8 <TIM_Base_SetConfig+0xe0>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d003      	beq.n	8006ea0 <TIM_Base_SetConfig+0xc8>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a08      	ldr	r2, [pc, #32]	; (8006ebc <TIM_Base_SetConfig+0xe4>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d103      	bne.n	8006ea8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	691a      	ldr	r2, [r3, #16]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	615a      	str	r2, [r3, #20]
}
 8006eae:	bf00      	nop
 8006eb0:	3714      	adds	r7, #20
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bc80      	pop	{r7}
 8006eb6:	4770      	bx	lr
 8006eb8:	40012c00 	.word	0x40012c00
 8006ebc:	40013400 	.word	0x40013400
 8006ec0:	40000400 	.word	0x40000400
 8006ec4:	40000800 	.word	0x40000800
 8006ec8:	40000c00 	.word	0x40000c00

08006ecc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b086      	sub	sp, #24
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a1b      	ldr	r3, [r3, #32]
 8006eda:	f023 0201 	bic.w	r2, r3, #1
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f023 0303 	bic.w	r3, r3, #3
 8006f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	f023 0302 	bic.w	r3, r3, #2
 8006f14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a34      	ldr	r2, [pc, #208]	; (8006ff4 <TIM_OC1_SetConfig+0x128>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d003      	beq.n	8006f30 <TIM_OC1_SetConfig+0x64>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a33      	ldr	r2, [pc, #204]	; (8006ff8 <TIM_OC1_SetConfig+0x12c>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d119      	bne.n	8006f64 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d008      	beq.n	8006f4a <TIM_OC1_SetConfig+0x7e>
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	2b08      	cmp	r3, #8
 8006f3e:	d004      	beq.n	8006f4a <TIM_OC1_SetConfig+0x7e>
 8006f40:	f641 2141 	movw	r1, #6721	; 0x1a41
 8006f44:	482d      	ldr	r0, [pc, #180]	; (8006ffc <TIM_OC1_SetConfig+0x130>)
 8006f46:	f7fa fbe9 	bl	800171c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	f023 0308 	bic.w	r3, r3, #8
 8006f50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	697a      	ldr	r2, [r7, #20]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	f023 0304 	bic.w	r3, r3, #4
 8006f62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	4a23      	ldr	r2, [pc, #140]	; (8006ff4 <TIM_OC1_SetConfig+0x128>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d003      	beq.n	8006f74 <TIM_OC1_SetConfig+0xa8>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a22      	ldr	r2, [pc, #136]	; (8006ff8 <TIM_OC1_SetConfig+0x12c>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d12d      	bne.n	8006fd0 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	699b      	ldr	r3, [r3, #24]
 8006f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f7c:	d008      	beq.n	8006f90 <TIM_OC1_SetConfig+0xc4>
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d004      	beq.n	8006f90 <TIM_OC1_SetConfig+0xc4>
 8006f86:	f641 214e 	movw	r1, #6734	; 0x1a4e
 8006f8a:	481c      	ldr	r0, [pc, #112]	; (8006ffc <TIM_OC1_SetConfig+0x130>)
 8006f8c:	f7fa fbc6 	bl	800171c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	695b      	ldr	r3, [r3, #20]
 8006f94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f98:	d008      	beq.n	8006fac <TIM_OC1_SetConfig+0xe0>
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	695b      	ldr	r3, [r3, #20]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d004      	beq.n	8006fac <TIM_OC1_SetConfig+0xe0>
 8006fa2:	f641 214f 	movw	r1, #6735	; 0x1a4f
 8006fa6:	4815      	ldr	r0, [pc, #84]	; (8006ffc <TIM_OC1_SetConfig+0x130>)
 8006fa8:	f7fa fbb8 	bl	800171c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	695b      	ldr	r3, [r3, #20]
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	693a      	ldr	r2, [r7, #16]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	685a      	ldr	r2, [r3, #4]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	621a      	str	r2, [r3, #32]
}
 8006fea:	bf00      	nop
 8006fec:	3718      	adds	r7, #24
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	40012c00 	.word	0x40012c00
 8006ff8:	40013400 	.word	0x40013400
 8006ffc:	0800b768 	.word	0x0800b768

08007000 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a1b      	ldr	r3, [r3, #32]
 800700e:	f023 0210 	bic.w	r2, r3, #16
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800702e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007036:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	021b      	lsls	r3, r3, #8
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	4313      	orrs	r3, r2
 8007042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	f023 0320 	bic.w	r3, r3, #32
 800704a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	011b      	lsls	r3, r3, #4
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	4313      	orrs	r3, r2
 8007056:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a35      	ldr	r2, [pc, #212]	; (8007130 <TIM_OC2_SetConfig+0x130>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d003      	beq.n	8007068 <TIM_OC2_SetConfig+0x68>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a34      	ldr	r2, [pc, #208]	; (8007134 <TIM_OC2_SetConfig+0x134>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d11a      	bne.n	800709e <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d008      	beq.n	8007082 <TIM_OC2_SetConfig+0x82>
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	2b08      	cmp	r3, #8
 8007076:	d004      	beq.n	8007082 <TIM_OC2_SetConfig+0x82>
 8007078:	f641 218c 	movw	r1, #6796	; 0x1a8c
 800707c:	482e      	ldr	r0, [pc, #184]	; (8007138 <TIM_OC2_SetConfig+0x138>)
 800707e:	f7fa fb4d 	bl	800171c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007088:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	011b      	lsls	r3, r3, #4
 8007090:	697a      	ldr	r2, [r7, #20]
 8007092:	4313      	orrs	r3, r2
 8007094:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800709c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a23      	ldr	r2, [pc, #140]	; (8007130 <TIM_OC2_SetConfig+0x130>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d003      	beq.n	80070ae <TIM_OC2_SetConfig+0xae>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a22      	ldr	r2, [pc, #136]	; (8007134 <TIM_OC2_SetConfig+0x134>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d12f      	bne.n	800710e <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070b6:	d008      	beq.n	80070ca <TIM_OC2_SetConfig+0xca>
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d004      	beq.n	80070ca <TIM_OC2_SetConfig+0xca>
 80070c0:	f641 219a 	movw	r1, #6810	; 0x1a9a
 80070c4:	481c      	ldr	r0, [pc, #112]	; (8007138 <TIM_OC2_SetConfig+0x138>)
 80070c6:	f7fa fb29 	bl	800171c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	695b      	ldr	r3, [r3, #20]
 80070ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070d2:	d008      	beq.n	80070e6 <TIM_OC2_SetConfig+0xe6>
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	695b      	ldr	r3, [r3, #20]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d004      	beq.n	80070e6 <TIM_OC2_SetConfig+0xe6>
 80070dc:	f641 219b 	movw	r1, #6811	; 0x1a9b
 80070e0:	4815      	ldr	r0, [pc, #84]	; (8007138 <TIM_OC2_SetConfig+0x138>)
 80070e2:	f7fa fb1b 	bl	800171c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	693a      	ldr	r2, [r7, #16]
 80070fe:	4313      	orrs	r3, r2
 8007100:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	4313      	orrs	r3, r2
 800710c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	693a      	ldr	r2, [r7, #16]
 8007112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	685a      	ldr	r2, [r3, #4]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	697a      	ldr	r2, [r7, #20]
 8007126:	621a      	str	r2, [r3, #32]
}
 8007128:	bf00      	nop
 800712a:	3718      	adds	r7, #24
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	40012c00 	.word	0x40012c00
 8007134:	40013400 	.word	0x40013400
 8007138:	0800b768 	.word	0x0800b768

0800713c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b086      	sub	sp, #24
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a1b      	ldr	r3, [r3, #32]
 800714a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a1b      	ldr	r3, [r3, #32]
 8007156:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	69db      	ldr	r3, [r3, #28]
 8007162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800716a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f023 0303 	bic.w	r3, r3, #3
 8007172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	4313      	orrs	r3, r2
 800717c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	021b      	lsls	r3, r3, #8
 800718c:	697a      	ldr	r2, [r7, #20]
 800718e:	4313      	orrs	r3, r2
 8007190:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a35      	ldr	r2, [pc, #212]	; (800726c <TIM_OC3_SetConfig+0x130>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d003      	beq.n	80071a2 <TIM_OC3_SetConfig+0x66>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a34      	ldr	r2, [pc, #208]	; (8007270 <TIM_OC3_SetConfig+0x134>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d11a      	bne.n	80071d8 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d008      	beq.n	80071bc <TIM_OC3_SetConfig+0x80>
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	2b08      	cmp	r3, #8
 80071b0:	d004      	beq.n	80071bc <TIM_OC3_SetConfig+0x80>
 80071b2:	f641 21d7 	movw	r1, #6871	; 0x1ad7
 80071b6:	482f      	ldr	r0, [pc, #188]	; (8007274 <TIM_OC3_SetConfig+0x138>)
 80071b8:	f7fa fab0 	bl	800171c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	021b      	lsls	r3, r3, #8
 80071ca:	697a      	ldr	r2, [r7, #20]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a24      	ldr	r2, [pc, #144]	; (800726c <TIM_OC3_SetConfig+0x130>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d003      	beq.n	80071e8 <TIM_OC3_SetConfig+0xac>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a23      	ldr	r2, [pc, #140]	; (8007270 <TIM_OC3_SetConfig+0x134>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d12f      	bne.n	8007248 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	699b      	ldr	r3, [r3, #24]
 80071ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071f0:	d008      	beq.n	8007204 <TIM_OC3_SetConfig+0xc8>
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	699b      	ldr	r3, [r3, #24]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d004      	beq.n	8007204 <TIM_OC3_SetConfig+0xc8>
 80071fa:	f641 21e4 	movw	r1, #6884	; 0x1ae4
 80071fe:	481d      	ldr	r0, [pc, #116]	; (8007274 <TIM_OC3_SetConfig+0x138>)
 8007200:	f7fa fa8c 	bl	800171c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	695b      	ldr	r3, [r3, #20]
 8007208:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800720c:	d008      	beq.n	8007220 <TIM_OC3_SetConfig+0xe4>
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d004      	beq.n	8007220 <TIM_OC3_SetConfig+0xe4>
 8007216:	f641 21e5 	movw	r1, #6885	; 0x1ae5
 800721a:	4816      	ldr	r0, [pc, #88]	; (8007274 <TIM_OC3_SetConfig+0x138>)
 800721c:	f7fa fa7e 	bl	800171c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007226:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800722e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	695b      	ldr	r3, [r3, #20]
 8007234:	011b      	lsls	r3, r3, #4
 8007236:	693a      	ldr	r2, [r7, #16]
 8007238:	4313      	orrs	r3, r2
 800723a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	011b      	lsls	r3, r3, #4
 8007242:	693a      	ldr	r2, [r7, #16]
 8007244:	4313      	orrs	r3, r2
 8007246:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	693a      	ldr	r2, [r7, #16]
 800724c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	685a      	ldr	r2, [r3, #4]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	697a      	ldr	r2, [r7, #20]
 8007260:	621a      	str	r2, [r3, #32]
}
 8007262:	bf00      	nop
 8007264:	3718      	adds	r7, #24
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	40012c00 	.word	0x40012c00
 8007270:	40013400 	.word	0x40013400
 8007274:	0800b768 	.word	0x0800b768

08007278 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b086      	sub	sp, #24
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a1b      	ldr	r3, [r3, #32]
 8007292:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	69db      	ldr	r3, [r3, #28]
 800729e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	021b      	lsls	r3, r3, #8
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	031b      	lsls	r3, r3, #12
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a18      	ldr	r2, [pc, #96]	; (8007334 <TIM_OC4_SetConfig+0xbc>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d003      	beq.n	80072e0 <TIM_OC4_SetConfig+0x68>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a17      	ldr	r2, [pc, #92]	; (8007338 <TIM_OC4_SetConfig+0xc0>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d117      	bne.n	8007310 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	695b      	ldr	r3, [r3, #20]
 80072e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072e8:	d008      	beq.n	80072fc <TIM_OC4_SetConfig+0x84>
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d004      	beq.n	80072fc <TIM_OC4_SetConfig+0x84>
 80072f2:	f641 3123 	movw	r1, #6947	; 0x1b23
 80072f6:	4811      	ldr	r0, [pc, #68]	; (800733c <TIM_OC4_SetConfig+0xc4>)
 80072f8:	f7fa fa10 	bl	800171c <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007302:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	695b      	ldr	r3, [r3, #20]
 8007308:	019b      	lsls	r3, r3, #6
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	4313      	orrs	r3, r2
 800730e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	697a      	ldr	r2, [r7, #20]
 8007314:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	68fa      	ldr	r2, [r7, #12]
 800731a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	685a      	ldr	r2, [r3, #4]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	621a      	str	r2, [r3, #32]
}
 800732a:	bf00      	nop
 800732c:	3718      	adds	r7, #24
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	40012c00 	.word	0x40012c00
 8007338:	40013400 	.word	0x40013400
 800733c:	0800b768 	.word	0x0800b768

08007340 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007340:	b480      	push	{r7}
 8007342:	b087      	sub	sp, #28
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6a1b      	ldr	r3, [r3, #32]
 8007350:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6a1b      	ldr	r3, [r3, #32]
 8007356:	f023 0201 	bic.w	r2, r3, #1
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	699b      	ldr	r3, [r3, #24]
 8007362:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800736a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	011b      	lsls	r3, r3, #4
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	4313      	orrs	r3, r2
 8007374:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	f023 030a 	bic.w	r3, r3, #10
 800737c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800737e:	697a      	ldr	r2, [r7, #20]
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	4313      	orrs	r3, r2
 8007384:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	621a      	str	r2, [r3, #32]
}
 8007392:	bf00      	nop
 8007394:	371c      	adds	r7, #28
 8007396:	46bd      	mov	sp, r7
 8007398:	bc80      	pop	{r7}
 800739a:	4770      	bx	lr

0800739c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800739c:	b480      	push	{r7}
 800739e:	b087      	sub	sp, #28
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6a1b      	ldr	r3, [r3, #32]
 80073ac:	f023 0210 	bic.w	r2, r3, #16
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6a1b      	ldr	r3, [r3, #32]
 80073be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	031b      	lsls	r3, r3, #12
 80073cc:	697a      	ldr	r2, [r7, #20]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	011b      	lsls	r3, r3, #4
 80073de:	693a      	ldr	r2, [r7, #16]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	697a      	ldr	r2, [r7, #20]
 80073e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	693a      	ldr	r2, [r7, #16]
 80073ee:	621a      	str	r2, [r3, #32]
}
 80073f0:	bf00      	nop
 80073f2:	371c      	adds	r7, #28
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bc80      	pop	{r7}
 80073f8:	4770      	bx	lr

080073fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073fa:	b480      	push	{r7}
 80073fc:	b085      	sub	sp, #20
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
 8007402:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007410:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007412:	683a      	ldr	r2, [r7, #0]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	4313      	orrs	r3, r2
 8007418:	f043 0307 	orr.w	r3, r3, #7
 800741c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	609a      	str	r2, [r3, #8]
}
 8007424:	bf00      	nop
 8007426:	3714      	adds	r7, #20
 8007428:	46bd      	mov	sp, r7
 800742a:	bc80      	pop	{r7}
 800742c:	4770      	bx	lr

0800742e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800742e:	b480      	push	{r7}
 8007430:	b087      	sub	sp, #28
 8007432:	af00      	add	r7, sp, #0
 8007434:	60f8      	str	r0, [r7, #12]
 8007436:	60b9      	str	r1, [r7, #8]
 8007438:	607a      	str	r2, [r7, #4]
 800743a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007448:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	021a      	lsls	r2, r3, #8
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	431a      	orrs	r2, r3
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	4313      	orrs	r3, r2
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	4313      	orrs	r3, r2
 800745a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	697a      	ldr	r2, [r7, #20]
 8007460:	609a      	str	r2, [r3, #8]
}
 8007462:	bf00      	nop
 8007464:	371c      	adds	r7, #28
 8007466:	46bd      	mov	sp, r7
 8007468:	bc80      	pop	{r7}
 800746a:	4770      	bx	lr

0800746c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b086      	sub	sp, #24
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	4a26      	ldr	r2, [pc, #152]	; (8007514 <TIM_CCxChannelCmd+0xa8>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d018      	beq.n	80074b2 <TIM_CCxChannelCmd+0x46>
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	4a25      	ldr	r2, [pc, #148]	; (8007518 <TIM_CCxChannelCmd+0xac>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d014      	beq.n	80074b2 <TIM_CCxChannelCmd+0x46>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800748e:	d010      	beq.n	80074b2 <TIM_CCxChannelCmd+0x46>
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	4a22      	ldr	r2, [pc, #136]	; (800751c <TIM_CCxChannelCmd+0xb0>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d00c      	beq.n	80074b2 <TIM_CCxChannelCmd+0x46>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	4a21      	ldr	r2, [pc, #132]	; (8007520 <TIM_CCxChannelCmd+0xb4>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d008      	beq.n	80074b2 <TIM_CCxChannelCmd+0x46>
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	4a20      	ldr	r2, [pc, #128]	; (8007524 <TIM_CCxChannelCmd+0xb8>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d004      	beq.n	80074b2 <TIM_CCxChannelCmd+0x46>
 80074a8:	f641 5109 	movw	r1, #7433	; 0x1d09
 80074ac:	481e      	ldr	r0, [pc, #120]	; (8007528 <TIM_CCxChannelCmd+0xbc>)
 80074ae:	f7fa f935 	bl	800171c <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d010      	beq.n	80074da <TIM_CCxChannelCmd+0x6e>
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	2b04      	cmp	r3, #4
 80074bc:	d00d      	beq.n	80074da <TIM_CCxChannelCmd+0x6e>
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	2b08      	cmp	r3, #8
 80074c2:	d00a      	beq.n	80074da <TIM_CCxChannelCmd+0x6e>
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	2b0c      	cmp	r3, #12
 80074c8:	d007      	beq.n	80074da <TIM_CCxChannelCmd+0x6e>
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	2b3c      	cmp	r3, #60	; 0x3c
 80074ce:	d004      	beq.n	80074da <TIM_CCxChannelCmd+0x6e>
 80074d0:	f641 510a 	movw	r1, #7434	; 0x1d0a
 80074d4:	4814      	ldr	r0, [pc, #80]	; (8007528 <TIM_CCxChannelCmd+0xbc>)
 80074d6:	f7fa f921 	bl	800171c <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	f003 031f 	and.w	r3, r3, #31
 80074e0:	2201      	movs	r2, #1
 80074e2:	fa02 f303 	lsl.w	r3, r2, r3
 80074e6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6a1a      	ldr	r2, [r3, #32]
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	43db      	mvns	r3, r3
 80074f0:	401a      	ands	r2, r3
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6a1a      	ldr	r2, [r3, #32]
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	f003 031f 	and.w	r3, r3, #31
 8007500:	6879      	ldr	r1, [r7, #4]
 8007502:	fa01 f303 	lsl.w	r3, r1, r3
 8007506:	431a      	orrs	r2, r3
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	621a      	str	r2, [r3, #32]
}
 800750c:	bf00      	nop
 800750e:	3718      	adds	r7, #24
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	40012c00 	.word	0x40012c00
 8007518:	40013400 	.word	0x40013400
 800751c:	40000400 	.word	0x40000400
 8007520:	40000800 	.word	0x40000800
 8007524:	40000c00 	.word	0x40000c00
 8007528:	0800b768 	.word	0x0800b768

0800752c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4a1c      	ldr	r2, [pc, #112]	; (80075a8 <TIM_ResetCallback+0x7c>)
 8007538:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a1b      	ldr	r2, [pc, #108]	; (80075ac <TIM_ResetCallback+0x80>)
 8007540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a1a      	ldr	r2, [pc, #104]	; (80075b0 <TIM_ResetCallback+0x84>)
 8007548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a19      	ldr	r2, [pc, #100]	; (80075b4 <TIM_ResetCallback+0x88>)
 8007550:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a18      	ldr	r2, [pc, #96]	; (80075b8 <TIM_ResetCallback+0x8c>)
 8007558:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	4a17      	ldr	r2, [pc, #92]	; (80075bc <TIM_ResetCallback+0x90>)
 8007560:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a16      	ldr	r2, [pc, #88]	; (80075c0 <TIM_ResetCallback+0x94>)
 8007568:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a15      	ldr	r2, [pc, #84]	; (80075c4 <TIM_ResetCallback+0x98>)
 8007570:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a14      	ldr	r2, [pc, #80]	; (80075c8 <TIM_ResetCallback+0x9c>)
 8007578:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a13      	ldr	r2, [pc, #76]	; (80075cc <TIM_ResetCallback+0xa0>)
 8007580:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a12      	ldr	r2, [pc, #72]	; (80075d0 <TIM_ResetCallback+0xa4>)
 8007588:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a11      	ldr	r2, [pc, #68]	; (80075d4 <TIM_ResetCallback+0xa8>)
 8007590:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	4a10      	ldr	r2, [pc, #64]	; (80075d8 <TIM_ResetCallback+0xac>)
 8007598:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bc80      	pop	{r7}
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	080016b1 	.word	0x080016b1
 80075ac:	08006d49 	.word	0x08006d49
 80075b0:	08006da3 	.word	0x08006da3
 80075b4:	08006db5 	.word	0x08006db5
 80075b8:	08001669 	.word	0x08001669
 80075bc:	08006d6d 	.word	0x08006d6d
 80075c0:	08006d5b 	.word	0x08006d5b
 80075c4:	08006d7f 	.word	0x08006d7f
 80075c8:	08006d91 	.word	0x08006d91
 80075cc:	08006dc7 	.word	0x08006dc7
 80075d0:	08007915 	.word	0x08007915
 80075d4:	08007927 	.word	0x08007927
 80075d8:	08007939 	.word	0x08007939

080075dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a5c      	ldr	r2, [pc, #368]	; (800775c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d027      	beq.n	8007640 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a5a      	ldr	r2, [pc, #360]	; (8007760 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d022      	beq.n	8007640 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007602:	d01d      	beq.n	8007640 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a56      	ldr	r2, [pc, #344]	; (8007764 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d018      	beq.n	8007640 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a55      	ldr	r2, [pc, #340]	; (8007768 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d013      	beq.n	8007640 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a53      	ldr	r2, [pc, #332]	; (800776c <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d00e      	beq.n	8007640 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a52      	ldr	r2, [pc, #328]	; (8007770 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d009      	beq.n	8007640 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a50      	ldr	r2, [pc, #320]	; (8007774 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d004      	beq.n	8007640 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007636:	f240 7186 	movw	r1, #1926	; 0x786
 800763a:	484f      	ldr	r0, [pc, #316]	; (8007778 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800763c:	f7fa f86e 	bl	800171c <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d020      	beq.n	800768a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2b10      	cmp	r3, #16
 800764e:	d01c      	beq.n	800768a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2b20      	cmp	r3, #32
 8007656:	d018      	beq.n	800768a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2b30      	cmp	r3, #48	; 0x30
 800765e:	d014      	beq.n	800768a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2b40      	cmp	r3, #64	; 0x40
 8007666:	d010      	beq.n	800768a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2b50      	cmp	r3, #80	; 0x50
 800766e:	d00c      	beq.n	800768a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2b60      	cmp	r3, #96	; 0x60
 8007676:	d008      	beq.n	800768a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	2b70      	cmp	r3, #112	; 0x70
 800767e:	d004      	beq.n	800768a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007680:	f240 7187 	movw	r1, #1927	; 0x787
 8007684:	483c      	ldr	r0, [pc, #240]	; (8007778 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8007686:	f7fa f849 	bl	800171c <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	2b80      	cmp	r3, #128	; 0x80
 8007690:	d008      	beq.n	80076a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d004      	beq.n	80076a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800769a:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 800769e:	4836      	ldr	r0, [pc, #216]	; (8007778 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 80076a0:	f7fa f83c 	bl	800171c <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d101      	bne.n	80076b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80076ae:	2302      	movs	r3, #2
 80076b0:	e050      	b.n	8007754 <HAL_TIMEx_MasterConfigSynchronization+0x178>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2201      	movs	r2, #1
 80076b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2202      	movs	r2, #2
 80076be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	68fa      	ldr	r2, [r7, #12]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a1a      	ldr	r2, [pc, #104]	; (800775c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d018      	beq.n	8007728 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a19      	ldr	r2, [pc, #100]	; (8007760 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d013      	beq.n	8007728 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007708:	d00e      	beq.n	8007728 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a15      	ldr	r2, [pc, #84]	; (8007764 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d009      	beq.n	8007728 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a13      	ldr	r2, [pc, #76]	; (8007768 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d004      	beq.n	8007728 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a12      	ldr	r2, [pc, #72]	; (800776c <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d10c      	bne.n	8007742 <HAL_TIMEx_MasterConfigSynchronization+0x166>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800772e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	4313      	orrs	r3, r2
 8007738:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68ba      	ldr	r2, [r7, #8]
 8007740:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2201      	movs	r2, #1
 8007746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	40012c00 	.word	0x40012c00
 8007760:	40013400 	.word	0x40013400
 8007764:	40000400 	.word	0x40000400
 8007768:	40000800 	.word	0x40000800
 800776c:	40000c00 	.word	0x40000c00
 8007770:	40001000 	.word	0x40001000
 8007774:	40001400 	.word	0x40001400
 8007778:	0800b7a0 	.word	0x0800b7a0

0800777c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007786:	2300      	movs	r3, #0
 8007788:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a5e      	ldr	r2, [pc, #376]	; (8007908 <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d009      	beq.n	80077a8 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a5c      	ldr	r2, [pc, #368]	; (800790c <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d004      	beq.n	80077a8 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 800779e:	f240 71c3 	movw	r1, #1987	; 0x7c3
 80077a2:	485b      	ldr	r0, [pc, #364]	; (8007910 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80077a4:	f7f9 ffba 	bl	800171c <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077b0:	d008      	beq.n	80077c4 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d004      	beq.n	80077c4 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 80077ba:	f240 71c4 	movw	r1, #1988	; 0x7c4
 80077be:	4854      	ldr	r0, [pc, #336]	; (8007910 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80077c0:	f7f9 ffac 	bl	800171c <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077cc:	d008      	beq.n	80077e0 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d004      	beq.n	80077e0 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 80077d6:	f240 71c5 	movw	r1, #1989	; 0x7c5
 80077da:	484d      	ldr	r0, [pc, #308]	; (8007910 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80077dc:	f7f9 ff9e 	bl	800171c <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d013      	beq.n	8007810 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077f0:	d00e      	beq.n	8007810 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077fa:	d009      	beq.n	8007810 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007804:	d004      	beq.n	8007810 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8007806:	f240 71c6 	movw	r1, #1990	; 0x7c6
 800780a:	4841      	ldr	r0, [pc, #260]	; (8007910 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800780c:	f7f9 ff86 	bl	800171c <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	2bff      	cmp	r3, #255	; 0xff
 8007816:	d904      	bls.n	8007822 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8007818:	f240 71c7 	movw	r1, #1991	; 0x7c7
 800781c:	483c      	ldr	r0, [pc, #240]	; (8007910 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800781e:	f7f9 ff7d 	bl	800171c <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800782a:	d008      	beq.n	800783e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	691b      	ldr	r3, [r3, #16]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d004      	beq.n	800783e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007834:	f44f 61f9 	mov.w	r1, #1992	; 0x7c8
 8007838:	4835      	ldr	r0, [pc, #212]	; (8007910 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800783a:	f7f9 ff6f 	bl	800171c <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	695b      	ldr	r3, [r3, #20]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d009      	beq.n	800785a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	695b      	ldr	r3, [r3, #20]
 800784a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800784e:	d004      	beq.n	800785a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007850:	f240 71c9 	movw	r1, #1993	; 0x7c9
 8007854:	482e      	ldr	r0, [pc, #184]	; (8007910 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007856:	f7f9 ff61 	bl	800171c <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	69db      	ldr	r3, [r3, #28]
 800785e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007862:	d008      	beq.n	8007876 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	69db      	ldr	r3, [r3, #28]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d004      	beq.n	8007876 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800786c:	f240 71ca 	movw	r1, #1994	; 0x7ca
 8007870:	4827      	ldr	r0, [pc, #156]	; (8007910 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007872:	f7f9 ff53 	bl	800171c <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800787c:	2b01      	cmp	r3, #1
 800787e:	d101      	bne.n	8007884 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 8007880:	2302      	movs	r3, #2
 8007882:	e03d      	b.n	8007900 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	4313      	orrs	r3, r2
 8007898:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	695b      	ldr	r3, [r3, #20]
 80078dc:	4313      	orrs	r3, r2
 80078de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	69db      	ldr	r3, [r3, #28]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3710      	adds	r7, #16
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	40012c00 	.word	0x40012c00
 800790c:	40013400 	.word	0x40013400
 8007910:	0800b7a0 	.word	0x0800b7a0

08007914 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800791c:	bf00      	nop
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	bc80      	pop	{r7}
 8007924:	4770      	bx	lr

08007926 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007926:	b480      	push	{r7}
 8007928:	b083      	sub	sp, #12
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800792e:	bf00      	nop
 8007930:	370c      	adds	r7, #12
 8007932:	46bd      	mov	sp, r7
 8007934:	bc80      	pop	{r7}
 8007936:	4770      	bx	lr

08007938 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007940:	bf00      	nop
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	bc80      	pop	{r7}
 8007948:	4770      	bx	lr
	...

0800794c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d101      	bne.n	800795e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e0a7      	b.n	8007aae <HAL_UART_Init+0x162>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	699b      	ldr	r3, [r3, #24]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d02c      	beq.n	80079c0 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a53      	ldr	r2, [pc, #332]	; (8007ab8 <HAL_UART_Init+0x16c>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d00e      	beq.n	800798e <HAL_UART_Init+0x42>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a51      	ldr	r2, [pc, #324]	; (8007abc <HAL_UART_Init+0x170>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d009      	beq.n	800798e <HAL_UART_Init+0x42>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a50      	ldr	r2, [pc, #320]	; (8007ac0 <HAL_UART_Init+0x174>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d004      	beq.n	800798e <HAL_UART_Init+0x42>
 8007984:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8007988:	484e      	ldr	r0, [pc, #312]	; (8007ac4 <HAL_UART_Init+0x178>)
 800798a:	f7f9 fec7 	bl	800171c <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	699b      	ldr	r3, [r3, #24]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d032      	beq.n	80079fc <HAL_UART_Init+0xb0>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	699b      	ldr	r3, [r3, #24]
 800799a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800799e:	d02d      	beq.n	80079fc <HAL_UART_Init+0xb0>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	699b      	ldr	r3, [r3, #24]
 80079a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079a8:	d028      	beq.n	80079fc <HAL_UART_Init+0xb0>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	699b      	ldr	r3, [r3, #24]
 80079ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079b2:	d023      	beq.n	80079fc <HAL_UART_Init+0xb0>
 80079b4:	f240 116d 	movw	r1, #365	; 0x16d
 80079b8:	4842      	ldr	r0, [pc, #264]	; (8007ac4 <HAL_UART_Init+0x178>)
 80079ba:	f7f9 feaf 	bl	800171c <assert_failed>
 80079be:	e01d      	b.n	80079fc <HAL_UART_Init+0xb0>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a3c      	ldr	r2, [pc, #240]	; (8007ab8 <HAL_UART_Init+0x16c>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d018      	beq.n	80079fc <HAL_UART_Init+0xb0>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a3b      	ldr	r2, [pc, #236]	; (8007abc <HAL_UART_Init+0x170>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d013      	beq.n	80079fc <HAL_UART_Init+0xb0>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a39      	ldr	r2, [pc, #228]	; (8007ac0 <HAL_UART_Init+0x174>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d00e      	beq.n	80079fc <HAL_UART_Init+0xb0>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a39      	ldr	r2, [pc, #228]	; (8007ac8 <HAL_UART_Init+0x17c>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d009      	beq.n	80079fc <HAL_UART_Init+0xb0>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a37      	ldr	r2, [pc, #220]	; (8007acc <HAL_UART_Init+0x180>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d004      	beq.n	80079fc <HAL_UART_Init+0xb0>
 80079f2:	f240 1171 	movw	r1, #369	; 0x171
 80079f6:	4833      	ldr	r0, [pc, #204]	; (8007ac4 <HAL_UART_Init+0x178>)
 80079f8:	f7f9 fe90 	bl	800171c <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d009      	beq.n	8007a18 <HAL_UART_Init+0xcc>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a0c:	d004      	beq.n	8007a18 <HAL_UART_Init+0xcc>
 8007a0e:	f240 1173 	movw	r1, #371	; 0x173
 8007a12:	482c      	ldr	r0, [pc, #176]	; (8007ac4 <HAL_UART_Init+0x178>)
 8007a14:	f7f9 fe82 	bl	800171c <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d111      	bne.n	8007a48 <HAL_UART_Init+0xfc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 fb0d 	bl	800804c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d102      	bne.n	8007a40 <HAL_UART_Init+0xf4>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a24      	ldr	r2, [pc, #144]	; (8007ad0 <HAL_UART_Init+0x184>)
 8007a3e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2224      	movs	r2, #36	; 0x24
 8007a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	68da      	ldr	r2, [r3, #12]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 fd01 	bl	8008468 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	691a      	ldr	r2, [r3, #16]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	695a      	ldr	r2, [r3, #20]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68da      	ldr	r2, [r3, #12]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2220      	movs	r2, #32
 8007aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2220      	movs	r2, #32
 8007aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	40013800 	.word	0x40013800
 8007abc:	40004400 	.word	0x40004400
 8007ac0:	40004800 	.word	0x40004800
 8007ac4:	0800b7dc 	.word	0x0800b7dc
 8007ac8:	40004c00 	.word	0x40004c00
 8007acc:	40005000 	.word	0x40005000
 8007ad0:	08001bb1 	.word	0x08001bb1

08007ad4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b08a      	sub	sp, #40	; 0x28
 8007ad8:	af02      	add	r7, sp, #8
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	603b      	str	r3, [r7, #0]
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	2b20      	cmp	r3, #32
 8007af2:	d17c      	bne.n	8007bee <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d002      	beq.n	8007b00 <HAL_UART_Transmit+0x2c>
 8007afa:	88fb      	ldrh	r3, [r7, #6]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d101      	bne.n	8007b04 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	e075      	b.n	8007bf0 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d101      	bne.n	8007b12 <HAL_UART_Transmit+0x3e>
 8007b0e:	2302      	movs	r3, #2
 8007b10:	e06e      	b.n	8007bf0 <HAL_UART_Transmit+0x11c>
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2201      	movs	r2, #1
 8007b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2221      	movs	r2, #33	; 0x21
 8007b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007b28:	f7fa faa4 	bl	8002074 <HAL_GetTick>
 8007b2c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	88fa      	ldrh	r2, [r7, #6]
 8007b32:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	88fa      	ldrh	r2, [r7, #6]
 8007b38:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b42:	d108      	bne.n	8007b56 <HAL_UART_Transmit+0x82>
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d104      	bne.n	8007b56 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	61bb      	str	r3, [r7, #24]
 8007b54:	e003      	b.n	8007b5e <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007b66:	e02a      	b.n	8007bbe <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	9300      	str	r3, [sp, #0]
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	2180      	movs	r1, #128	; 0x80
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f000 faa0 	bl	80080b8 <UART_WaitOnFlagUntilTimeout>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d001      	beq.n	8007b82 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e036      	b.n	8007bf0 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d10b      	bne.n	8007ba0 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	881b      	ldrh	r3, [r3, #0]
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b96:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	3302      	adds	r3, #2
 8007b9c:	61bb      	str	r3, [r7, #24]
 8007b9e:	e007      	b.n	8007bb0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	781a      	ldrb	r2, [r3, #0]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	3301      	adds	r3, #1
 8007bae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	b29a      	uxth	r2, r3
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d1cf      	bne.n	8007b68 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	2140      	movs	r1, #64	; 0x40
 8007bd2:	68f8      	ldr	r0, [r7, #12]
 8007bd4:	f000 fa70 	bl	80080b8 <UART_WaitOnFlagUntilTimeout>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d001      	beq.n	8007be2 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007bde:	2303      	movs	r3, #3
 8007be0:	e006      	b.n	8007bf0 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2220      	movs	r2, #32
 8007be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007bea:	2300      	movs	r3, #0
 8007bec:	e000      	b.n	8007bf0 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007bee:	2302      	movs	r3, #2
  }
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3720      	adds	r7, #32
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	4613      	mov	r3, r2
 8007c04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	2b20      	cmp	r3, #32
 8007c10:	d11d      	bne.n	8007c4e <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d002      	beq.n	8007c1e <HAL_UART_Receive_IT+0x26>
 8007c18:	88fb      	ldrh	r3, [r7, #6]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d101      	bne.n	8007c22 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e016      	b.n	8007c50 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d101      	bne.n	8007c30 <HAL_UART_Receive_IT+0x38>
 8007c2c:	2302      	movs	r3, #2
 8007c2e:	e00f      	b.n	8007c50 <HAL_UART_Receive_IT+0x58>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007c3e:	88fb      	ldrh	r3, [r7, #6]
 8007c40:	461a      	mov	r2, r3
 8007c42:	68b9      	ldr	r1, [r7, #8]
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f000 fa81 	bl	800814c <UART_Start_Receive_IT>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	e000      	b.n	8007c50 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007c4e:	2302      	movs	r3, #2
  }
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b08a      	sub	sp, #40	; 0x28
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	695b      	ldr	r3, [r3, #20]
 8007c76:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c82:	f003 030f 	and.w	r3, r3, #15
 8007c86:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d10d      	bne.n	8007caa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c90:	f003 0320 	and.w	r3, r3, #32
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d008      	beq.n	8007caa <HAL_UART_IRQHandler+0x52>
 8007c98:	6a3b      	ldr	r3, [r7, #32]
 8007c9a:	f003 0320 	and.w	r3, r3, #32
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d003      	beq.n	8007caa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 fb34 	bl	8008310 <UART_Receive_IT>
      return;
 8007ca8:	e180      	b.n	8007fac <HAL_UART_IRQHandler+0x354>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007caa:	69bb      	ldr	r3, [r7, #24]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	f000 80b4 	beq.w	8007e1a <HAL_UART_IRQHandler+0x1c2>
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	f003 0301 	and.w	r3, r3, #1
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d105      	bne.n	8007cc8 <HAL_UART_IRQHandler+0x70>
 8007cbc:	6a3b      	ldr	r3, [r7, #32]
 8007cbe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	f000 80a9 	beq.w	8007e1a <HAL_UART_IRQHandler+0x1c2>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cca:	f003 0301 	and.w	r3, r3, #1
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d00a      	beq.n	8007ce8 <HAL_UART_IRQHandler+0x90>
 8007cd2:	6a3b      	ldr	r3, [r7, #32]
 8007cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d005      	beq.n	8007ce8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce0:	f043 0201 	orr.w	r2, r3, #1
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cea:	f003 0304 	and.w	r3, r3, #4
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00a      	beq.n	8007d08 <HAL_UART_IRQHandler+0xb0>
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	f003 0301 	and.w	r3, r3, #1
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d005      	beq.n	8007d08 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d00:	f043 0202 	orr.w	r2, r3, #2
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0a:	f003 0302 	and.w	r3, r3, #2
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00a      	beq.n	8007d28 <HAL_UART_IRQHandler+0xd0>
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	f003 0301 	and.w	r3, r3, #1
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d005      	beq.n	8007d28 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d20:	f043 0204 	orr.w	r2, r3, #4
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2a:	f003 0308 	and.w	r3, r3, #8
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00f      	beq.n	8007d52 <HAL_UART_IRQHandler+0xfa>
 8007d32:	6a3b      	ldr	r3, [r7, #32]
 8007d34:	f003 0320 	and.w	r3, r3, #32
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d104      	bne.n	8007d46 <HAL_UART_IRQHandler+0xee>
 8007d3c:	69fb      	ldr	r3, [r7, #28]
 8007d3e:	f003 0301 	and.w	r3, r3, #1
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d005      	beq.n	8007d52 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4a:	f043 0208 	orr.w	r2, r3, #8
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	f000 8123 	beq.w	8007fa2 <HAL_UART_IRQHandler+0x34a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5e:	f003 0320 	and.w	r3, r3, #32
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d007      	beq.n	8007d76 <HAL_UART_IRQHandler+0x11e>
 8007d66:	6a3b      	ldr	r3, [r7, #32]
 8007d68:	f003 0320 	and.w	r3, r3, #32
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d002      	beq.n	8007d76 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 facd 	bl	8008310 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	695b      	ldr	r3, [r3, #20]
 8007d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	bf14      	ite	ne
 8007d84:	2301      	movne	r3, #1
 8007d86:	2300      	moveq	r3, #0
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d90:	f003 0308 	and.w	r3, r3, #8
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d102      	bne.n	8007d9e <HAL_UART_IRQHandler+0x146>
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d033      	beq.n	8007e06 <HAL_UART_IRQHandler+0x1ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fa0d 	bl	80081be <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	695b      	ldr	r3, [r3, #20]
 8007daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d024      	beq.n	8007dfc <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	695a      	ldr	r2, [r3, #20]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dc0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d013      	beq.n	8007df2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dce:	4a79      	ldr	r2, [pc, #484]	; (8007fb4 <HAL_UART_IRQHandler+0x35c>)
 8007dd0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7fb f8e6 	bl	8002fa8 <HAL_DMA_Abort_IT>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d019      	beq.n	8007e16 <HAL_UART_IRQHandler+0x1be>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007dec:	4610      	mov	r0, r2
 8007dee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007df0:	e011      	b.n	8007e16 <HAL_UART_IRQHandler+0x1be>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dfa:	e00c      	b.n	8007e16 <HAL_UART_IRQHandler+0x1be>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e04:	e007      	b.n	8007e16 <HAL_UART_IRQHandler+0x1be>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007e14:	e0c5      	b.n	8007fa2 <HAL_UART_IRQHandler+0x34a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e16:	bf00      	nop
    return;
 8007e18:	e0c3      	b.n	8007fa2 <HAL_UART_IRQHandler+0x34a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	f040 80a3 	bne.w	8007f6a <HAL_UART_IRQHandler+0x312>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e26:	f003 0310 	and.w	r3, r3, #16
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f000 809d 	beq.w	8007f6a <HAL_UART_IRQHandler+0x312>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007e30:	6a3b      	ldr	r3, [r7, #32]
 8007e32:	f003 0310 	and.w	r3, r3, #16
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	f000 8097 	beq.w	8007f6a <HAL_UART_IRQHandler+0x312>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	60fb      	str	r3, [r7, #12]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	60fb      	str	r3, [r7, #12]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	60fb      	str	r3, [r7, #12]
 8007e50:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	695b      	ldr	r3, [r3, #20]
 8007e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d04f      	beq.n	8007f00 <HAL_UART_IRQHandler+0x2a8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007e6a:	8a3b      	ldrh	r3, [r7, #16]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f000 809a 	beq.w	8007fa6 <HAL_UART_IRQHandler+0x34e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e76:	8a3a      	ldrh	r2, [r7, #16]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	f080 8094 	bcs.w	8007fa6 <HAL_UART_IRQHandler+0x34e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	8a3a      	ldrh	r2, [r7, #16]
 8007e82:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e88:	699b      	ldr	r3, [r3, #24]
 8007e8a:	2b20      	cmp	r3, #32
 8007e8c:	d02b      	beq.n	8007ee6 <HAL_UART_IRQHandler+0x28e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68da      	ldr	r2, [r3, #12]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e9c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	695a      	ldr	r2, [r3, #20]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f022 0201 	bic.w	r2, r2, #1
 8007eac:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	695a      	ldr	r2, [r3, #20]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ebc:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2220      	movs	r2, #32
 8007ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	68da      	ldr	r2, [r3, #12]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f022 0210 	bic.w	r2, r2, #16
 8007eda:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7fb f827 	bl	8002f34 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8007ef2:	b292      	uxth	r2, r2
 8007ef4:	1a8a      	subs	r2, r1, r2
 8007ef6:	b292      	uxth	r2, r2
 8007ef8:	4611      	mov	r1, r2
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
      return;
 8007efe:	e052      	b.n	8007fa6 <HAL_UART_IRQHandler+0x34e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	1ad3      	subs	r3, r2, r3
 8007f0c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d048      	beq.n	8007faa <HAL_UART_IRQHandler+0x352>
          &&(nb_rx_data > 0U) )
 8007f18:	8a7b      	ldrh	r3, [r7, #18]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d045      	beq.n	8007faa <HAL_UART_IRQHandler+0x352>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	68da      	ldr	r2, [r3, #12]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007f2c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	695a      	ldr	r2, [r3, #20]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f022 0201 	bic.w	r2, r2, #1
 8007f3c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2220      	movs	r2, #32
 8007f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68da      	ldr	r2, [r3, #12]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f022 0210 	bic.w	r2, r2, #16
 8007f5a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f60:	8a7a      	ldrh	r2, [r7, #18]
 8007f62:	4611      	mov	r1, r2
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
      return;
 8007f68:	e01f      	b.n	8007faa <HAL_UART_IRQHandler+0x352>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d008      	beq.n	8007f86 <HAL_UART_IRQHandler+0x32e>
 8007f74:	6a3b      	ldr	r3, [r7, #32]
 8007f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d003      	beq.n	8007f86 <HAL_UART_IRQHandler+0x32e>
  {
    UART_Transmit_IT(huart);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f95e 	bl	8008240 <UART_Transmit_IT>
    return;
 8007f84:	e012      	b.n	8007fac <HAL_UART_IRQHandler+0x354>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d00d      	beq.n	8007fac <HAL_UART_IRQHandler+0x354>
 8007f90:	6a3b      	ldr	r3, [r7, #32]
 8007f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d008      	beq.n	8007fac <HAL_UART_IRQHandler+0x354>
  {
    UART_EndTransmit_IT(huart);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 f99f 	bl	80082de <UART_EndTransmit_IT>
    return;
 8007fa0:	e004      	b.n	8007fac <HAL_UART_IRQHandler+0x354>
    return;
 8007fa2:	bf00      	nop
 8007fa4:	e002      	b.n	8007fac <HAL_UART_IRQHandler+0x354>
      return;
 8007fa6:	bf00      	nop
 8007fa8:	e000      	b.n	8007fac <HAL_UART_IRQHandler+0x354>
      return;
 8007faa:	bf00      	nop
  }
}
 8007fac:	3728      	adds	r7, #40	; 0x28
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	08008217 	.word	0x08008217

08007fb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007fc0:	bf00      	nop
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bc80      	pop	{r7}
 8007fc8:	4770      	bx	lr

08007fca <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007fca:	b480      	push	{r7}
 8007fcc:	b083      	sub	sp, #12
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007fd2:	bf00      	nop
 8007fd4:	370c      	adds	r7, #12
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bc80      	pop	{r7}
 8007fda:	4770      	bx	lr

08007fdc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007fe4:	bf00      	nop
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bc80      	pop	{r7}
 8007fec:	4770      	bx	lr

08007fee <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b083      	sub	sp, #12
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007ff6:	bf00      	nop
 8007ff8:	370c      	adds	r7, #12
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bc80      	pop	{r7}
 8007ffe:	4770      	bx	lr

08008000 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008008:	bf00      	nop
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	bc80      	pop	{r7}
 8008010:	4770      	bx	lr

08008012 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008012:	b480      	push	{r7}
 8008014:	b083      	sub	sp, #12
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800801a:	bf00      	nop
 800801c:	370c      	adds	r7, #12
 800801e:	46bd      	mov	sp, r7
 8008020:	bc80      	pop	{r7}
 8008022:	4770      	bx	lr

08008024 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800802c:	bf00      	nop
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	bc80      	pop	{r7}
 8008034:	4770      	bx	lr

08008036 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008036:	b480      	push	{r7}
 8008038:	b083      	sub	sp, #12
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
 800803e:	460b      	mov	r3, r1
 8008040:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008042:	bf00      	nop
 8008044:	370c      	adds	r7, #12
 8008046:	46bd      	mov	sp, r7
 8008048:	bc80      	pop	{r7}
 800804a:	4770      	bx	lr

0800804c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a0f      	ldr	r2, [pc, #60]	; (8008094 <UART_InitCallbacksToDefault+0x48>)
 8008058:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	4a0e      	ldr	r2, [pc, #56]	; (8008098 <UART_InitCallbacksToDefault+0x4c>)
 800805e:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a0e      	ldr	r2, [pc, #56]	; (800809c <UART_InitCallbacksToDefault+0x50>)
 8008064:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a0d      	ldr	r2, [pc, #52]	; (80080a0 <UART_InitCallbacksToDefault+0x54>)
 800806a:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a0d      	ldr	r2, [pc, #52]	; (80080a4 <UART_InitCallbacksToDefault+0x58>)
 8008070:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a0c      	ldr	r2, [pc, #48]	; (80080a8 <UART_InitCallbacksToDefault+0x5c>)
 8008076:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a0c      	ldr	r2, [pc, #48]	; (80080ac <UART_InitCallbacksToDefault+0x60>)
 800807c:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4a0b      	ldr	r2, [pc, #44]	; (80080b0 <UART_InitCallbacksToDefault+0x64>)
 8008082:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a0b      	ldr	r2, [pc, #44]	; (80080b4 <UART_InitCallbacksToDefault+0x68>)
 8008088:	669a      	str	r2, [r3, #104]	; 0x68

}
 800808a:	bf00      	nop
 800808c:	370c      	adds	r7, #12
 800808e:	46bd      	mov	sp, r7
 8008090:	bc80      	pop	{r7}
 8008092:	4770      	bx	lr
 8008094:	08007fcb 	.word	0x08007fcb
 8008098:	08007fb9 	.word	0x08007fb9
 800809c:	08007fdd 	.word	0x08007fdd
 80080a0:	080016d1 	.word	0x080016d1
 80080a4:	08007fef 	.word	0x08007fef
 80080a8:	08008001 	.word	0x08008001
 80080ac:	08008013 	.word	0x08008013
 80080b0:	08008025 	.word	0x08008025
 80080b4:	08008037 	.word	0x08008037

080080b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	603b      	str	r3, [r7, #0]
 80080c4:	4613      	mov	r3, r2
 80080c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080c8:	e02c      	b.n	8008124 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080d0:	d028      	beq.n	8008124 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80080d2:	69bb      	ldr	r3, [r7, #24]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d007      	beq.n	80080e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80080d8:	f7f9 ffcc 	bl	8002074 <HAL_GetTick>
 80080dc:	4602      	mov	r2, r0
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	1ad3      	subs	r3, r2, r3
 80080e2:	69ba      	ldr	r2, [r7, #24]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d21d      	bcs.n	8008124 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68da      	ldr	r2, [r3, #12]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80080f6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	695a      	ldr	r2, [r3, #20]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f022 0201 	bic.w	r2, r2, #1
 8008106:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	2220      	movs	r2, #32
 800810c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2220      	movs	r2, #32
 8008114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008120:	2303      	movs	r3, #3
 8008122:	e00f      	b.n	8008144 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	4013      	ands	r3, r2
 800812e:	68ba      	ldr	r2, [r7, #8]
 8008130:	429a      	cmp	r2, r3
 8008132:	bf0c      	ite	eq
 8008134:	2301      	moveq	r3, #1
 8008136:	2300      	movne	r3, #0
 8008138:	b2db      	uxtb	r3, r3
 800813a:	461a      	mov	r2, r3
 800813c:	79fb      	ldrb	r3, [r7, #7]
 800813e:	429a      	cmp	r2, r3
 8008140:	d0c3      	beq.n	80080ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	3710      	adds	r7, #16
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800814c:	b480      	push	{r7}
 800814e:	b085      	sub	sp, #20
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	4613      	mov	r3, r2
 8008158:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	88fa      	ldrh	r2, [r7, #6]
 8008164:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	88fa      	ldrh	r2, [r7, #6]
 800816a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2200      	movs	r2, #0
 8008170:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2222      	movs	r2, #34	; 0x22
 8008176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68da      	ldr	r2, [r3, #12]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008190:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	695a      	ldr	r2, [r3, #20]
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f042 0201 	orr.w	r2, r2, #1
 80081a0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68da      	ldr	r2, [r3, #12]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f042 0220 	orr.w	r2, r2, #32
 80081b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3714      	adds	r7, #20
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bc80      	pop	{r7}
 80081bc:	4770      	bx	lr

080081be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081be:	b480      	push	{r7}
 80081c0:	b083      	sub	sp, #12
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68da      	ldr	r2, [r3, #12]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80081d4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	695a      	ldr	r2, [r3, #20]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f022 0201 	bic.w	r2, r2, #1
 80081e4:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d107      	bne.n	80081fe <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	68da      	ldr	r2, [r3, #12]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f022 0210 	bic.w	r2, r2, #16
 80081fc:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2220      	movs	r2, #32
 8008202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800820c:	bf00      	nop
 800820e:	370c      	adds	r7, #12
 8008210:	46bd      	mov	sp, r7
 8008212:	bc80      	pop	{r7}
 8008214:	4770      	bx	lr

08008216 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b084      	sub	sp, #16
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008222:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2200      	movs	r2, #0
 8008228:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008234:	68f8      	ldr	r0, [r7, #12]
 8008236:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008238:	bf00      	nop
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008240:	b480      	push	{r7}
 8008242:	b085      	sub	sp, #20
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800824e:	b2db      	uxtb	r3, r3
 8008250:	2b21      	cmp	r3, #33	; 0x21
 8008252:	d13e      	bne.n	80082d2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800825c:	d114      	bne.n	8008288 <UART_Transmit_IT+0x48>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d110      	bne.n	8008288 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a1b      	ldr	r3, [r3, #32]
 800826a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	881b      	ldrh	r3, [r3, #0]
 8008270:	461a      	mov	r2, r3
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800827a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6a1b      	ldr	r3, [r3, #32]
 8008280:	1c9a      	adds	r2, r3, #2
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	621a      	str	r2, [r3, #32]
 8008286:	e008      	b.n	800829a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6a1b      	ldr	r3, [r3, #32]
 800828c:	1c59      	adds	r1, r3, #1
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	6211      	str	r1, [r2, #32]
 8008292:	781a      	ldrb	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800829e:	b29b      	uxth	r3, r3
 80082a0:	3b01      	subs	r3, #1
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	4619      	mov	r1, r3
 80082a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d10f      	bne.n	80082ce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68da      	ldr	r2, [r3, #12]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	68da      	ldr	r2, [r3, #12]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80082ce:	2300      	movs	r3, #0
 80082d0:	e000      	b.n	80082d4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80082d2:	2302      	movs	r3, #2
  }
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3714      	adds	r7, #20
 80082d8:	46bd      	mov	sp, r7
 80082da:	bc80      	pop	{r7}
 80082dc:	4770      	bx	lr

080082de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b082      	sub	sp, #8
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	68da      	ldr	r2, [r3, #12]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2220      	movs	r2, #32
 80082fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3708      	adds	r7, #8
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b086      	sub	sp, #24
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800831e:	b2db      	uxtb	r3, r3
 8008320:	2b22      	cmp	r3, #34	; 0x22
 8008322:	f040 809b 	bne.w	800845c <UART_Receive_IT+0x14c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800832e:	d117      	bne.n	8008360 <UART_Receive_IT+0x50>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d113      	bne.n	8008360 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008338:	2300      	movs	r3, #0
 800833a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008340:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	b29b      	uxth	r3, r3
 800834a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800834e:	b29a      	uxth	r2, r3
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008358:	1c9a      	adds	r2, r3, #2
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	629a      	str	r2, [r3, #40]	; 0x28
 800835e:	e026      	b.n	80083ae <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008364:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8008366:	2300      	movs	r3, #0
 8008368:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008372:	d007      	beq.n	8008384 <UART_Receive_IT+0x74>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	689b      	ldr	r3, [r3, #8]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d10a      	bne.n	8008392 <UART_Receive_IT+0x82>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	691b      	ldr	r3, [r3, #16]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d106      	bne.n	8008392 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	b2da      	uxtb	r2, r3
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	701a      	strb	r2, [r3, #0]
 8008390:	e008      	b.n	80083a4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	b2db      	uxtb	r3, r3
 800839a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800839e:	b2da      	uxtb	r2, r3
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a8:	1c5a      	adds	r2, r3, #1
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	3b01      	subs	r3, #1
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	4619      	mov	r1, r3
 80083bc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d14a      	bne.n	8008458 <UART_Receive_IT+0x148>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	68da      	ldr	r2, [r3, #12]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f022 0220 	bic.w	r2, r2, #32
 80083d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68da      	ldr	r2, [r3, #12]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80083e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	695a      	ldr	r2, [r3, #20]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f022 0201 	bic.w	r2, r2, #1
 80083f0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2220      	movs	r2, #32
 80083f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d124      	bne.n	800844c <UART_Receive_IT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2200      	movs	r2, #0
 8008406:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	68da      	ldr	r2, [r3, #12]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f022 0210 	bic.w	r2, r2, #16
 8008416:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f003 0310 	and.w	r3, r3, #16
 8008422:	2b10      	cmp	r3, #16
 8008424:	d10a      	bne.n	800843c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008426:	2300      	movs	r3, #0
 8008428:	60fb      	str	r3, [r7, #12]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	60fb      	str	r3, [r7, #12]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	60fb      	str	r3, [r7, #12]
 800843a:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8008444:	4611      	mov	r1, r2
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	4798      	blx	r3
 800844a:	e003      	b.n	8008454 <UART_Receive_IT+0x144>
      else
      {
       /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	4798      	blx	r3
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008454:	2300      	movs	r3, #0
 8008456:	e002      	b.n	800845e <UART_Receive_IT+0x14e>
    }
    return HAL_OK;
 8008458:	2300      	movs	r3, #0
 800845a:	e000      	b.n	800845e <UART_Receive_IT+0x14e>
  }
  else
  {
    return HAL_BUSY;
 800845c:	2302      	movs	r3, #2
  }
}
 800845e:	4618      	mov	r0, r3
 8008460:	3718      	adds	r7, #24
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
	...

08008468 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b084      	sub	sp, #16
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	4a5f      	ldr	r2, [pc, #380]	; (80085f4 <UART_SetConfig+0x18c>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d904      	bls.n	8008484 <UART_SetConfig+0x1c>
 800847a:	f640 6153 	movw	r1, #3667	; 0xe53
 800847e:	485e      	ldr	r0, [pc, #376]	; (80085f8 <UART_SetConfig+0x190>)
 8008480:	f7f9 f94c 	bl	800171c <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d009      	beq.n	80084a0 <UART_SetConfig+0x38>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008494:	d004      	beq.n	80084a0 <UART_SetConfig+0x38>
 8008496:	f640 6154 	movw	r1, #3668	; 0xe54
 800849a:	4857      	ldr	r0, [pc, #348]	; (80085f8 <UART_SetConfig+0x190>)
 800849c:	f7f9 f93e 	bl	800171c <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	691b      	ldr	r3, [r3, #16]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00e      	beq.n	80084c6 <UART_SetConfig+0x5e>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	691b      	ldr	r3, [r3, #16]
 80084ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084b0:	d009      	beq.n	80084c6 <UART_SetConfig+0x5e>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80084ba:	d004      	beq.n	80084c6 <UART_SetConfig+0x5e>
 80084bc:	f640 6155 	movw	r1, #3669	; 0xe55
 80084c0:	484d      	ldr	r0, [pc, #308]	; (80085f8 <UART_SetConfig+0x190>)
 80084c2:	f7f9 f92b 	bl	800171c <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	695a      	ldr	r2, [r3, #20]
 80084ca:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80084ce:	4013      	ands	r3, r2
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d103      	bne.n	80084dc <UART_SetConfig+0x74>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	695b      	ldr	r3, [r3, #20]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d104      	bne.n	80084e6 <UART_SetConfig+0x7e>
 80084dc:	f640 6156 	movw	r1, #3670	; 0xe56
 80084e0:	4845      	ldr	r0, [pc, #276]	; (80085f8 <UART_SetConfig+0x190>)
 80084e2:	f7f9 f91b 	bl	800171c <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	691b      	ldr	r3, [r3, #16]
 80084ec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	68da      	ldr	r2, [r3, #12]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	430a      	orrs	r2, r1
 80084fa:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	689a      	ldr	r2, [r3, #8]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	691b      	ldr	r3, [r3, #16]
 8008504:	431a      	orrs	r2, r3
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	695b      	ldr	r3, [r3, #20]
 800850a:	4313      	orrs	r3, r2
 800850c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008518:	f023 030c 	bic.w	r3, r3, #12
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	6812      	ldr	r2, [r2, #0]
 8008520:	68b9      	ldr	r1, [r7, #8]
 8008522:	430b      	orrs	r3, r1
 8008524:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	695b      	ldr	r3, [r3, #20]
 800852c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	699a      	ldr	r2, [r3, #24]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	430a      	orrs	r2, r1
 800853a:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a2e      	ldr	r2, [pc, #184]	; (80085fc <UART_SetConfig+0x194>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d103      	bne.n	800854e <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008546:	f7fb feaf 	bl	80042a8 <HAL_RCC_GetPCLK2Freq>
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	e002      	b.n	8008554 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800854e:	f7fb fe97 	bl	8004280 <HAL_RCC_GetPCLK1Freq>
 8008552:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008554:	68fa      	ldr	r2, [r7, #12]
 8008556:	4613      	mov	r3, r2
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	4413      	add	r3, r2
 800855c:	009a      	lsls	r2, r3, #2
 800855e:	441a      	add	r2, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	fbb2 f3f3 	udiv	r3, r2, r3
 800856a:	4a25      	ldr	r2, [pc, #148]	; (8008600 <UART_SetConfig+0x198>)
 800856c:	fba2 2303 	umull	r2, r3, r2, r3
 8008570:	095b      	lsrs	r3, r3, #5
 8008572:	0119      	lsls	r1, r3, #4
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	4613      	mov	r3, r2
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4413      	add	r3, r2
 800857c:	009a      	lsls	r2, r3, #2
 800857e:	441a      	add	r2, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	685b      	ldr	r3, [r3, #4]
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	fbb2 f2f3 	udiv	r2, r2, r3
 800858a:	4b1d      	ldr	r3, [pc, #116]	; (8008600 <UART_SetConfig+0x198>)
 800858c:	fba3 0302 	umull	r0, r3, r3, r2
 8008590:	095b      	lsrs	r3, r3, #5
 8008592:	2064      	movs	r0, #100	; 0x64
 8008594:	fb00 f303 	mul.w	r3, r0, r3
 8008598:	1ad3      	subs	r3, r2, r3
 800859a:	011b      	lsls	r3, r3, #4
 800859c:	3332      	adds	r3, #50	; 0x32
 800859e:	4a18      	ldr	r2, [pc, #96]	; (8008600 <UART_SetConfig+0x198>)
 80085a0:	fba2 2303 	umull	r2, r3, r2, r3
 80085a4:	095b      	lsrs	r3, r3, #5
 80085a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085aa:	4419      	add	r1, r3
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	4613      	mov	r3, r2
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4413      	add	r3, r2
 80085b4:	009a      	lsls	r2, r3, #2
 80085b6:	441a      	add	r2, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	fbb2 f2f3 	udiv	r2, r2, r3
 80085c2:	4b0f      	ldr	r3, [pc, #60]	; (8008600 <UART_SetConfig+0x198>)
 80085c4:	fba3 0302 	umull	r0, r3, r3, r2
 80085c8:	095b      	lsrs	r3, r3, #5
 80085ca:	2064      	movs	r0, #100	; 0x64
 80085cc:	fb00 f303 	mul.w	r3, r0, r3
 80085d0:	1ad3      	subs	r3, r2, r3
 80085d2:	011b      	lsls	r3, r3, #4
 80085d4:	3332      	adds	r3, #50	; 0x32
 80085d6:	4a0a      	ldr	r2, [pc, #40]	; (8008600 <UART_SetConfig+0x198>)
 80085d8:	fba2 2303 	umull	r2, r3, r2, r3
 80085dc:	095b      	lsrs	r3, r3, #5
 80085de:	f003 020f 	and.w	r2, r3, #15
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	440a      	add	r2, r1
 80085e8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80085ea:	bf00      	nop
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	0044aa20 	.word	0x0044aa20
 80085f8:	0800b7dc 	.word	0x0800b7dc
 80085fc:	40013800 	.word	0x40013800
 8008600:	51eb851f 	.word	0x51eb851f

08008604 <BAT_init>:
static ADC_HandleTypeDef *g_BAT_adcHandle;
static RTC_HandleTypeDef *g_BAT_rtcHandle;
static RTC_TimeTypeDef    g_BAT_lastReadTime;

void BAT_init(ADC_HandleTypeDef *p_adcHandle, RTC_HandleTypeDef *p_rtcHandle)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef l_halReturnCode;
  RTC_TimeTypeDef   l_time;
  RTC_DateTypeDef   l_date;

  LOG_info("Initializing battery check");
 800860e:	491e      	ldr	r1, [pc, #120]	; (8008688 <BAT_init+0x84>)
 8008610:	2001      	movs	r0, #1
 8008612:	f001 fa25 	bl	8009a60 <LOG_log>

  g_BAT_adcHandle = p_adcHandle;
 8008616:	4a1d      	ldr	r2, [pc, #116]	; (800868c <BAT_init+0x88>)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6013      	str	r3, [r2, #0]
  g_BAT_rtcHandle = p_rtcHandle;
 800861c:	4a1c      	ldr	r2, [pc, #112]	; (8008690 <BAT_init+0x8c>)
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	6013      	str	r3, [r2, #0]

  l_halReturnCode = HAL_RTC_GetTime(g_BAT_rtcHandle, &l_time, RTC_FORMAT_BCD);
 8008622:	4b1b      	ldr	r3, [pc, #108]	; (8008690 <BAT_init+0x8c>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f107 010c 	add.w	r1, r7, #12
 800862a:	2201      	movs	r2, #1
 800862c:	4618      	mov	r0, r3
 800862e:	f7fc fa39 	bl	8004aa4 <HAL_RTC_GetTime>
 8008632:	4603      	mov	r3, r0
 8008634:	73fb      	strb	r3, [r7, #15]

  if (l_halReturnCode != HAL_OK)
 8008636:	7bfb      	ldrb	r3, [r7, #15]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d005      	beq.n	8008648 <BAT_init+0x44>
  {
    LOG_error("HAL_RTC_GetTime() returned an error code: %d", l_halReturnCode);
 800863c:	7bfb      	ldrb	r3, [r7, #15]
 800863e:	461a      	mov	r2, r3
 8008640:	4914      	ldr	r1, [pc, #80]	; (8008694 <BAT_init+0x90>)
 8008642:	2003      	movs	r0, #3
 8008644:	f001 fa0c 	bl	8009a60 <LOG_log>
  else
  {
    ; /* Nothing to to */
  }

  l_halReturnCode = HAL_RTC_GetDate(g_BAT_rtcHandle, &l_date, RTC_FORMAT_BCD);
 8008648:	4b11      	ldr	r3, [pc, #68]	; (8008690 <BAT_init+0x8c>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f107 0108 	add.w	r1, r7, #8
 8008650:	2201      	movs	r2, #1
 8008652:	4618      	mov	r0, r3
 8008654:	f7fc fc2a 	bl	8004eac <HAL_RTC_GetDate>
 8008658:	4603      	mov	r3, r0
 800865a:	73fb      	strb	r3, [r7, #15]

  if (l_halReturnCode != HAL_OK)
 800865c:	7bfb      	ldrb	r3, [r7, #15]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d005      	beq.n	800866e <BAT_init+0x6a>
  {
    LOG_error("HAL_RTC_GetDate() returned an error code: %d", l_halReturnCode);
 8008662:	7bfb      	ldrb	r3, [r7, #15]
 8008664:	461a      	mov	r2, r3
 8008666:	490c      	ldr	r1, [pc, #48]	; (8008698 <BAT_init+0x94>)
 8008668:	2003      	movs	r0, #3
 800866a:	f001 f9f9 	bl	8009a60 <LOG_log>
  else
  {
    ; /* Nothing to to */
  }

  g_BAT_lastReadTime = l_time;
 800866e:	4b0b      	ldr	r3, [pc, #44]	; (800869c <BAT_init+0x98>)
 8008670:	f107 020c 	add.w	r2, r7, #12
 8008674:	6812      	ldr	r2, [r2, #0]
 8008676:	4611      	mov	r1, r2
 8008678:	8019      	strh	r1, [r3, #0]
 800867a:	3302      	adds	r3, #2
 800867c:	0c12      	lsrs	r2, r2, #16
 800867e:	701a      	strb	r2, [r3, #0]

  return;
 8008680:	bf00      	nop
}
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	0800b818 	.word	0x0800b818
 800868c:	200000a8 	.word	0x200000a8
 8008690:	200000ac 	.word	0x200000ac
 8008694:	0800b834 	.word	0x0800b834
 8008698:	0800b864 	.word	0x0800b864
 800869c:	200000b0 	.word	0x200000b0

080086a0 <BAT_update>:

void BAT_update(uint32_t *p_voltageInMv)
{
 80086a0:	b590      	push	{r4, r7, lr}
 80086a2:	b089      	sub	sp, #36	; 0x24
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef   l_time;
  RTC_DateTypeDef   l_date;
  uint32_t          l_adcRawData;
  float             l_voltageInV;

  l_halReturnCode = HAL_RTC_GetTime(g_BAT_rtcHandle, &l_time, RTC_FORMAT_BCD);
 80086a8:	4b48      	ldr	r3, [pc, #288]	; (80087cc <BAT_update+0x12c>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f107 0110 	add.w	r1, r7, #16
 80086b0:	2201      	movs	r2, #1
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7fc f9f6 	bl	8004aa4 <HAL_RTC_GetTime>
 80086b8:	4603      	mov	r3, r0
 80086ba:	77fb      	strb	r3, [r7, #31]

  if (l_halReturnCode != HAL_OK)
 80086bc:	7ffb      	ldrb	r3, [r7, #31]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d005      	beq.n	80086ce <BAT_update+0x2e>
  {
    LOG_error("HAL_RTC_GetTime() returned an error code: %d", l_halReturnCode);
 80086c2:	7ffb      	ldrb	r3, [r7, #31]
 80086c4:	461a      	mov	r2, r3
 80086c6:	4942      	ldr	r1, [pc, #264]	; (80087d0 <BAT_update+0x130>)
 80086c8:	2003      	movs	r0, #3
 80086ca:	f001 f9c9 	bl	8009a60 <LOG_log>
  else
  {
    ; /* Nothing to to */
  }

  l_halReturnCode = HAL_RTC_GetDate(g_BAT_rtcHandle, &l_date, RTC_FORMAT_BCD);
 80086ce:	4b3f      	ldr	r3, [pc, #252]	; (80087cc <BAT_update+0x12c>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f107 010c 	add.w	r1, r7, #12
 80086d6:	2201      	movs	r2, #1
 80086d8:	4618      	mov	r0, r3
 80086da:	f7fc fbe7 	bl	8004eac <HAL_RTC_GetDate>
 80086de:	4603      	mov	r3, r0
 80086e0:	77fb      	strb	r3, [r7, #31]

  if (l_halReturnCode != HAL_OK)
 80086e2:	7ffb      	ldrb	r3, [r7, #31]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d005      	beq.n	80086f4 <BAT_update+0x54>
  {
    LOG_error("HAL_RTC_GetDate() returned an error code: %d", l_halReturnCode);
 80086e8:	7ffb      	ldrb	r3, [r7, #31]
 80086ea:	461a      	mov	r2, r3
 80086ec:	4939      	ldr	r1, [pc, #228]	; (80087d4 <BAT_update+0x134>)
 80086ee:	2003      	movs	r0, #3
 80086f0:	f001 f9b6 	bl	8009a60 <LOG_log>
  else
  {
    ; /* Nothing to to */
  }

  if (UTI_turnRtcTimeToSeconds(&l_time) - UTI_turnRtcTimeToSeconds(&g_BAT_lastReadTime) >= BAT_POLLING_PERIOD_IN_S)
 80086f4:	f107 0310 	add.w	r3, r7, #16
 80086f8:	4618      	mov	r0, r3
 80086fa:	f001 fc40 	bl	8009f7e <UTI_turnRtcTimeToSeconds>
 80086fe:	4604      	mov	r4, r0
 8008700:	4835      	ldr	r0, [pc, #212]	; (80087d8 <BAT_update+0x138>)
 8008702:	f001 fc3c 	bl	8009f7e <UTI_turnRtcTimeToSeconds>
 8008706:	4603      	mov	r3, r0
 8008708:	1ae3      	subs	r3, r4, r3
 800870a:	2b09      	cmp	r3, #9
 800870c:	d959      	bls.n	80087c2 <BAT_update+0x122>
  {
    g_BAT_lastReadTime = l_time;
 800870e:	4b32      	ldr	r3, [pc, #200]	; (80087d8 <BAT_update+0x138>)
 8008710:	f107 0210 	add.w	r2, r7, #16
 8008714:	6812      	ldr	r2, [r2, #0]
 8008716:	4611      	mov	r1, r2
 8008718:	8019      	strh	r1, [r3, #0]
 800871a:	3302      	adds	r3, #2
 800871c:	0c12      	lsrs	r2, r2, #16
 800871e:	701a      	strb	r2, [r3, #0]

    l_halReturnCode = HAL_ADC_Start(g_BAT_adcHandle);
 8008720:	4b2e      	ldr	r3, [pc, #184]	; (80087dc <BAT_update+0x13c>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4618      	mov	r0, r3
 8008726:	f7f9 fe51 	bl	80023cc <HAL_ADC_Start>
 800872a:	4603      	mov	r3, r0
 800872c:	77fb      	strb	r3, [r7, #31]

    if (l_halReturnCode != HAL_OK)
 800872e:	7ffb      	ldrb	r3, [r7, #31]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d005      	beq.n	8008740 <BAT_update+0xa0>
    {
      LOG_error("HAL_ADC_Start() returned an error code: %d", l_halReturnCode);
 8008734:	7ffb      	ldrb	r3, [r7, #31]
 8008736:	461a      	mov	r2, r3
 8008738:	4929      	ldr	r1, [pc, #164]	; (80087e0 <BAT_update+0x140>)
 800873a:	2003      	movs	r0, #3
 800873c:	f001 f990 	bl	8009a60 <LOG_log>
    else
    {
      ; /* Nothing to to */
    }

    l_halReturnCode = HAL_ADC_PollForConversion(g_BAT_adcHandle, HAL_MAX_DELAY);
 8008740:	4b26      	ldr	r3, [pc, #152]	; (80087dc <BAT_update+0x13c>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f04f 31ff 	mov.w	r1, #4294967295
 8008748:	4618      	mov	r0, r3
 800874a:	f7f9 ff05 	bl	8002558 <HAL_ADC_PollForConversion>
 800874e:	4603      	mov	r3, r0
 8008750:	77fb      	strb	r3, [r7, #31]

    if (l_halReturnCode != HAL_OK)
 8008752:	7ffb      	ldrb	r3, [r7, #31]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d005      	beq.n	8008764 <BAT_update+0xc4>
    {
      LOG_error("HAL_ADC_PollForConversion() returned an error code: %d", l_halReturnCode);
 8008758:	7ffb      	ldrb	r3, [r7, #31]
 800875a:	461a      	mov	r2, r3
 800875c:	4921      	ldr	r1, [pc, #132]	; (80087e4 <BAT_update+0x144>)
 800875e:	2003      	movs	r0, #3
 8008760:	f001 f97e 	bl	8009a60 <LOG_log>
    else
    {
      ; /* Nothing to to */
    }

    l_adcRawData = HAL_ADC_GetValue(g_BAT_adcHandle);
 8008764:	4b1d      	ldr	r3, [pc, #116]	; (80087dc <BAT_update+0x13c>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4618      	mov	r0, r3
 800876a:	f7fa f817 	bl	800279c <HAL_ADC_GetValue>
 800876e:	61b8      	str	r0, [r7, #24]

    /* Apply conversion based on STM32 reference voltage & resolution */
    l_voltageInV  = (l_adcRawData * 3.30f ) / 4096.0f;
 8008770:	69b8      	ldr	r0, [r7, #24]
 8008772:	f7f7 fe0d 	bl	8000390 <__aeabi_ui2f>
 8008776:	4603      	mov	r3, r0
 8008778:	491b      	ldr	r1, [pc, #108]	; (80087e8 <BAT_update+0x148>)
 800877a:	4618      	mov	r0, r3
 800877c:	f7f7 fe60 	bl	8000440 <__aeabi_fmul>
 8008780:	4603      	mov	r3, r0
 8008782:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8008786:	4618      	mov	r0, r3
 8008788:	f7f7 ff0e 	bl	80005a8 <__aeabi_fdiv>
 800878c:	4603      	mov	r3, r0
 800878e:	617b      	str	r3, [r7, #20]

    /* Consider voltage divider used between the battery & the ADC input */
    l_voltageInV *= 11.0f;
 8008790:	4916      	ldr	r1, [pc, #88]	; (80087ec <BAT_update+0x14c>)
 8008792:	6978      	ldr	r0, [r7, #20]
 8008794:	f7f7 fe54 	bl	8000440 <__aeabi_fmul>
 8008798:	4603      	mov	r3, r0
 800879a:	617b      	str	r3, [r7, #20]

    *p_voltageInMv = (uint32_t)(l_voltageInV * 1000.0f);
 800879c:	4914      	ldr	r1, [pc, #80]	; (80087f0 <BAT_update+0x150>)
 800879e:	6978      	ldr	r0, [r7, #20]
 80087a0:	f7f7 fe4e 	bl	8000440 <__aeabi_fmul>
 80087a4:	4603      	mov	r3, r0
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7f8 f836 	bl	8000818 <__aeabi_f2uiz>
 80087ac:	4602      	mov	r2, r0
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	601a      	str	r2, [r3, #0]

    LOG_debug("Battery level: %u mV", *p_voltageInMv);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	461a      	mov	r2, r3
 80087b8:	490e      	ldr	r1, [pc, #56]	; (80087f4 <BAT_update+0x154>)
 80087ba:	2000      	movs	r0, #0
 80087bc:	f001 f950 	bl	8009a60 <LOG_log>
  else
  {
    ; /* Nothing to do */
  }

  return;
 80087c0:	bf00      	nop
 80087c2:	bf00      	nop
}
 80087c4:	3724      	adds	r7, #36	; 0x24
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd90      	pop	{r4, r7, pc}
 80087ca:	bf00      	nop
 80087cc:	200000ac 	.word	0x200000ac
 80087d0:	0800b834 	.word	0x0800b834
 80087d4:	0800b864 	.word	0x0800b864
 80087d8:	200000b0 	.word	0x200000b0
 80087dc:	200000a8 	.word	0x200000a8
 80087e0:	0800b894 	.word	0x0800b894
 80087e4:	0800b8c0 	.word	0x0800b8c0
 80087e8:	40533333 	.word	0x40533333
 80087ec:	41300000 	.word	0x41300000
 80087f0:	447a0000 	.word	0x447a0000
 80087f4:	0800b8f8 	.word	0x0800b8f8

080087f8 <BLU_sendCommand>:
static void         BLU_readData     (uint8_t *p_buffer                                                );
static T_BLU_BUTTON BLU_getButton    (uint8_t *p_buffer                                                );
static int32_t      BLU_normalizeData(uint32_t p_rawData, uint32_t p_maxValue, bool p_isInversionNeeded);

static void BLU_sendCommand(uint8_t p_command)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	4603      	mov	r3, r0
 8008800:	71fb      	strb	r3, [r7, #7]
  volatile uint16_t l_bitValue;

  for (l_bitValue = 0x01; l_bitValue < 0x0100; l_bitValue <<= 1)
 8008802:	2301      	movs	r3, #1
 8008804:	81fb      	strh	r3, [r7, #14]
 8008806:	e030      	b.n	800886a <BLU_sendCommand+0x72>
  {
    if ((l_bitValue & p_command) != 0)
 8008808:	89fb      	ldrh	r3, [r7, #14]
 800880a:	b29b      	uxth	r3, r3
 800880c:	461a      	mov	r2, r3
 800880e:	79fb      	ldrb	r3, [r7, #7]
 8008810:	4013      	ands	r3, r2
 8008812:	2b00      	cmp	r3, #0
 8008814:	d006      	beq.n	8008824 <BLU_sendCommand+0x2c>
    {
      SET_BIT(GPIOC->ODR, BLUETOOTH_SPI_CMD_Pin);
 8008816:	4b1a      	ldr	r3, [pc, #104]	; (8008880 <BLU_sendCommand+0x88>)
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	4a19      	ldr	r2, [pc, #100]	; (8008880 <BLU_sendCommand+0x88>)
 800881c:	f043 0302 	orr.w	r3, r3, #2
 8008820:	60d3      	str	r3, [r2, #12]
 8008822:	e005      	b.n	8008830 <BLU_sendCommand+0x38>
    }
    else
    {
      CLEAR_BIT(GPIOC->ODR, BLUETOOTH_SPI_CMD_Pin);
 8008824:	4b16      	ldr	r3, [pc, #88]	; (8008880 <BLU_sendCommand+0x88>)
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	4a15      	ldr	r2, [pc, #84]	; (8008880 <BLU_sendCommand+0x88>)
 800882a:	f023 0302 	bic.w	r3, r3, #2
 800882e:	60d3      	str	r3, [r2, #12]
    }

    SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 8008830:	4b14      	ldr	r3, [pc, #80]	; (8008884 <BLU_sendCommand+0x8c>)
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	4a13      	ldr	r2, [pc, #76]	; (8008884 <BLU_sendCommand+0x8c>)
 8008836:	f043 0310 	orr.w	r3, r3, #16
 800883a:	60d3      	str	r3, [r2, #12]
    UTI_delayUs(5);
 800883c:	2005      	movs	r0, #5
 800883e:	f001 fb5d 	bl	8009efc <UTI_delayUs>
    CLEAR_BIT(GPIOA->ODR, BLUETOOTH_SPI_CLK_Pin);
 8008842:	4b10      	ldr	r3, [pc, #64]	; (8008884 <BLU_sendCommand+0x8c>)
 8008844:	68db      	ldr	r3, [r3, #12]
 8008846:	4a0f      	ldr	r2, [pc, #60]	; (8008884 <BLU_sendCommand+0x8c>)
 8008848:	f023 0310 	bic.w	r3, r3, #16
 800884c:	60d3      	str	r3, [r2, #12]
    UTI_delayUs(5);
 800884e:	2005      	movs	r0, #5
 8008850:	f001 fb54 	bl	8009efc <UTI_delayUs>
    SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 8008854:	4b0b      	ldr	r3, [pc, #44]	; (8008884 <BLU_sendCommand+0x8c>)
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	4a0a      	ldr	r2, [pc, #40]	; (8008884 <BLU_sendCommand+0x8c>)
 800885a:	f043 0310 	orr.w	r3, r3, #16
 800885e:	60d3      	str	r3, [r2, #12]
  for (l_bitValue = 0x01; l_bitValue < 0x0100; l_bitValue <<= 1)
 8008860:	89fb      	ldrh	r3, [r7, #14]
 8008862:	b29b      	uxth	r3, r3
 8008864:	005b      	lsls	r3, r3, #1
 8008866:	b29b      	uxth	r3, r3
 8008868:	81fb      	strh	r3, [r7, #14]
 800886a:	89fb      	ldrh	r3, [r7, #14]
 800886c:	b29b      	uxth	r3, r3
 800886e:	2bff      	cmp	r3, #255	; 0xff
 8008870:	d9ca      	bls.n	8008808 <BLU_sendCommand+0x10>
  }
  UTI_delayUs(16);
 8008872:	2010      	movs	r0, #16
 8008874:	f001 fb42 	bl	8009efc <UTI_delayUs>

  return;
 8008878:	bf00      	nop
}
 800887a:	3710      	adds	r7, #16
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	40011000 	.word	0x40011000
 8008884:	40010800 	.word	0x40010800

08008888 <BLU_readData>:

static void BLU_readData(uint8_t *p_buffer)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  volatile uint8_t  l_index;
  volatile uint16_t l_bitValue;

  /* Reset buffer */
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 8008890:	2300      	movs	r3, #0
 8008892:	73fb      	strb	r3, [r7, #15]
 8008894:	e00b      	b.n	80088ae <BLU_readData+0x26>
  {
    p_buffer[l_index] = 0x00;
 8008896:	7bfb      	ldrb	r3, [r7, #15]
 8008898:	b2db      	uxtb	r3, r3
 800889a:	461a      	mov	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	4413      	add	r3, r2
 80088a0:	2200      	movs	r2, #0
 80088a2:	701a      	strb	r2, [r3, #0]
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 80088a4:	7bfb      	ldrb	r3, [r7, #15]
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	3301      	adds	r3, #1
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	73fb      	strb	r3, [r7, #15]
 80088ae:	7bfb      	ldrb	r3, [r7, #15]
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	2b06      	cmp	r3, #6
 80088b4:	d9ef      	bls.n	8008896 <BLU_readData+0xe>
  }

  CLEAR_BIT(GPIOC->ODR, BLUETOOTH_SPI_CS_Pin);
 80088b6:	4b2e      	ldr	r3, [pc, #184]	; (8008970 <BLU_readData+0xe8>)
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	4a2d      	ldr	r2, [pc, #180]	; (8008970 <BLU_readData+0xe8>)
 80088bc:	f023 0308 	bic.w	r3, r3, #8
 80088c0:	60d3      	str	r3, [r2, #12]

  BLU_sendCommand(0x01);
 80088c2:	2001      	movs	r0, #1
 80088c4:	f7ff ff98 	bl	80087f8 <BLU_sendCommand>
  BLU_sendCommand(0x42);
 80088c8:	2042      	movs	r0, #66	; 0x42
 80088ca:	f7ff ff95 	bl	80087f8 <BLU_sendCommand>

  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 80088ce:	2300      	movs	r3, #0
 80088d0:	73fb      	strb	r3, [r7, #15]
 80088d2:	e03f      	b.n	8008954 <BLU_readData+0xcc>
  {
    for (l_bitValue = 0x01; l_bitValue < 0x100; l_bitValue <<= 1)
 80088d4:	2301      	movs	r3, #1
 80088d6:	81bb      	strh	r3, [r7, #12]
 80088d8:	e030      	b.n	800893c <BLU_readData+0xb4>
    {
      SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 80088da:	4b26      	ldr	r3, [pc, #152]	; (8008974 <BLU_readData+0xec>)
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	4a25      	ldr	r2, [pc, #148]	; (8008974 <BLU_readData+0xec>)
 80088e0:	f043 0310 	orr.w	r3, r3, #16
 80088e4:	60d3      	str	r3, [r2, #12]
      UTI_delayUs(5);
 80088e6:	2005      	movs	r0, #5
 80088e8:	f001 fb08 	bl	8009efc <UTI_delayUs>
      CLEAR_BIT(GPIOA->ODR, BLUETOOTH_SPI_CLK_Pin);
 80088ec:	4b21      	ldr	r3, [pc, #132]	; (8008974 <BLU_readData+0xec>)
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	4a20      	ldr	r2, [pc, #128]	; (8008974 <BLU_readData+0xec>)
 80088f2:	f023 0310 	bic.w	r3, r3, #16
 80088f6:	60d3      	str	r3, [r2, #12]
      UTI_delayUs(5);
 80088f8:	2005      	movs	r0, #5
 80088fa:	f001 faff 	bl	8009efc <UTI_delayUs>
      SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 80088fe:	4b1d      	ldr	r3, [pc, #116]	; (8008974 <BLU_readData+0xec>)
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	4a1c      	ldr	r2, [pc, #112]	; (8008974 <BLU_readData+0xec>)
 8008904:	f043 0310 	orr.w	r3, r3, #16
 8008908:	60d3      	str	r3, [r2, #12]

      if (READ_BIT(GPIOC->IDR, BLUETOOTH_SPI_DAT_Pin) != GPIO_PIN_RESET)
 800890a:	4b19      	ldr	r3, [pc, #100]	; (8008970 <BLU_readData+0xe8>)
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	f003 0304 	and.w	r3, r3, #4
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00d      	beq.n	8008932 <BLU_readData+0xaa>
      {
        p_buffer[l_index] |= l_bitValue;
 8008916:	89bb      	ldrh	r3, [r7, #12]
 8008918:	b29a      	uxth	r2, r3
 800891a:	7bfb      	ldrb	r3, [r7, #15]
 800891c:	b2d8      	uxtb	r0, r3
 800891e:	4601      	mov	r1, r0
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	440b      	add	r3, r1
 8008924:	7819      	ldrb	r1, [r3, #0]
 8008926:	b2d2      	uxtb	r2, r2
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4403      	add	r3, r0
 800892c:	430a      	orrs	r2, r1
 800892e:	b2d2      	uxtb	r2, r2
 8008930:	701a      	strb	r2, [r3, #0]
    for (l_bitValue = 0x01; l_bitValue < 0x100; l_bitValue <<= 1)
 8008932:	89bb      	ldrh	r3, [r7, #12]
 8008934:	b29b      	uxth	r3, r3
 8008936:	005b      	lsls	r3, r3, #1
 8008938:	b29b      	uxth	r3, r3
 800893a:	81bb      	strh	r3, [r7, #12]
 800893c:	89bb      	ldrh	r3, [r7, #12]
 800893e:	b29b      	uxth	r3, r3
 8008940:	2bff      	cmp	r3, #255	; 0xff
 8008942:	d9ca      	bls.n	80088da <BLU_readData+0x52>
      else
      {
        ; /* Nothing to do */
      }
    }
      UTI_delayUs(16);
 8008944:	2010      	movs	r0, #16
 8008946:	f001 fad9 	bl	8009efc <UTI_delayUs>
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 800894a:	7bfb      	ldrb	r3, [r7, #15]
 800894c:	b2db      	uxtb	r3, r3
 800894e:	3301      	adds	r3, #1
 8008950:	b2db      	uxtb	r3, r3
 8008952:	73fb      	strb	r3, [r7, #15]
 8008954:	7bfb      	ldrb	r3, [r7, #15]
 8008956:	b2db      	uxtb	r3, r3
 8008958:	2b06      	cmp	r3, #6
 800895a:	d9bb      	bls.n	80088d4 <BLU_readData+0x4c>
  }

  SET_BIT(GPIOC->ODR, BLUETOOTH_SPI_CS_Pin);
 800895c:	4b04      	ldr	r3, [pc, #16]	; (8008970 <BLU_readData+0xe8>)
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	4a03      	ldr	r2, [pc, #12]	; (8008970 <BLU_readData+0xe8>)
 8008962:	f043 0308 	orr.w	r3, r3, #8
 8008966:	60d3      	str	r3, [r2, #12]

  return;
 8008968:	bf00      	nop
}
 800896a:	3710      	adds	r7, #16
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}
 8008970:	40011000 	.word	0x40011000
 8008974:	40010800 	.word	0x40010800

08008978 <BLU_getButton>:

static T_BLU_BUTTON BLU_getButton(uint8_t *p_buffer)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  uint16_t l_buttonRawValue;
  uint8_t  l_index;

  l_buttonRawValue = (p_buffer[BLU_BUTTON_HIGH_OFFSET] << 8) | p_buffer[BLU_BUTTON_LOW_OFFSET];
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	3302      	adds	r3, #2
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	021b      	lsls	r3, r3, #8
 8008988:	b21a      	sxth	r2, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	3301      	adds	r3, #1
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	b21b      	sxth	r3, r3
 8008992:	4313      	orrs	r3, r2
 8008994:	b21b      	sxth	r3, r3
 8008996:	81bb      	strh	r3, [r7, #12]

  /* Ignore BLU_BUTTON_NONE value as it is not directly coded in raw data */
  for (l_index = BLU_BUTTON_SELECT; l_index < BLU_BUTTON_COUNT_VALUE; l_index++)
 8008998:	2301      	movs	r3, #1
 800899a:	73fb      	strb	r3, [r7, #15]
 800899c:	e00d      	b.n	80089ba <BLU_getButton+0x42>
  {
    /* Stop decoding button data on 1st match (do not deal with multiple presses case) */
    if ((l_buttonRawValue & (1 << (l_index - 1))) == 0)
 800899e:	89ba      	ldrh	r2, [r7, #12]
 80089a0:	7bfb      	ldrb	r3, [r7, #15]
 80089a2:	3b01      	subs	r3, #1
 80089a4:	fa42 f303 	asr.w	r3, r2, r3
 80089a8:	f003 0301 	and.w	r3, r3, #1
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d101      	bne.n	80089b4 <BLU_getButton+0x3c>
    {
      return l_index;
 80089b0:	7bfb      	ldrb	r3, [r7, #15]
 80089b2:	e006      	b.n	80089c2 <BLU_getButton+0x4a>
  for (l_index = BLU_BUTTON_SELECT; l_index < BLU_BUTTON_COUNT_VALUE; l_index++)
 80089b4:	7bfb      	ldrb	r3, [r7, #15]
 80089b6:	3301      	adds	r3, #1
 80089b8:	73fb      	strb	r3, [r7, #15]
 80089ba:	7bfb      	ldrb	r3, [r7, #15]
 80089bc:	2b10      	cmp	r3, #16
 80089be:	d9ee      	bls.n	800899e <BLU_getButton+0x26>
    {
      ; /* Nothing to do */
    }
  }

  return BLU_BUTTON_NONE;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3714      	adds	r7, #20
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bc80      	pop	{r7}
 80089ca:	4770      	bx	lr

080089cc <BLU_normalizeData>:

static int32_t BLU_normalizeData(uint32_t p_rawData, uint32_t p_maxValue, bool p_isInversionNeeded)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b086      	sub	sp, #24
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	60b9      	str	r1, [r7, #8]
 80089d6:	4613      	mov	r3, r2
 80089d8:	71fb      	strb	r3, [r7, #7]
  float l_normalizedData;

  l_normalizedData = p_rawData - 128.0f;
 80089da:	68f8      	ldr	r0, [r7, #12]
 80089dc:	f7f7 fcd8 	bl	8000390 <__aeabi_ui2f>
 80089e0:	4603      	mov	r3, r0
 80089e2:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7f7 fc20 	bl	800022c <__aeabi_fsub>
 80089ec:	4603      	mov	r3, r0
 80089ee:	617b      	str	r3, [r7, #20]

  if (l_normalizedData > 0.0f)
 80089f0:	f04f 0100 	mov.w	r1, #0
 80089f4:	6978      	ldr	r0, [r7, #20]
 80089f6:	f7f7 fedf 	bl	80007b8 <__aeabi_fcmpgt>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d00f      	beq.n	8008a20 <BLU_normalizeData+0x54>
  {
    l_normalizedData *= (float)p_maxValue / 127.0f;
 8008a00:	68b8      	ldr	r0, [r7, #8]
 8008a02:	f7f7 fcc5 	bl	8000390 <__aeabi_ui2f>
 8008a06:	4603      	mov	r3, r0
 8008a08:	4915      	ldr	r1, [pc, #84]	; (8008a60 <BLU_normalizeData+0x94>)
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7f7 fdcc 	bl	80005a8 <__aeabi_fdiv>
 8008a10:	4603      	mov	r3, r0
 8008a12:	4619      	mov	r1, r3
 8008a14:	6978      	ldr	r0, [r7, #20]
 8008a16:	f7f7 fd13 	bl	8000440 <__aeabi_fmul>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	617b      	str	r3, [r7, #20]
 8008a1e:	e00f      	b.n	8008a40 <BLU_normalizeData+0x74>
  }
  else
  {
    l_normalizedData *= (float)p_maxValue / 128.0f;
 8008a20:	68b8      	ldr	r0, [r7, #8]
 8008a22:	f7f7 fcb5 	bl	8000390 <__aeabi_ui2f>
 8008a26:	4603      	mov	r3, r0
 8008a28:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f7f7 fdbb 	bl	80005a8 <__aeabi_fdiv>
 8008a32:	4603      	mov	r3, r0
 8008a34:	4619      	mov	r1, r3
 8008a36:	6978      	ldr	r0, [r7, #20]
 8008a38:	f7f7 fd02 	bl	8000440 <__aeabi_fmul>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	617b      	str	r3, [r7, #20]
  }

  if (p_isInversionNeeded == true)
 8008a40:	79fb      	ldrb	r3, [r7, #7]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d003      	beq.n	8008a4e <BLU_normalizeData+0x82>
  {
    l_normalizedData *= -1.0f;
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8008a4c:	617b      	str	r3, [r7, #20]
  else
  {
    ; /* Nothing to do */
  }

  return (int32_t)l_normalizedData;
 8008a4e:	6978      	ldr	r0, [r7, #20]
 8008a50:	f7f7 febc 	bl	80007cc <__aeabi_f2iz>
 8008a54:	4603      	mov	r3, r0
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3718      	adds	r7, #24
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	42fe0000 	.word	0x42fe0000

08008a64 <BLU_init>:

void BLU_init(uint32_t p_maxDataValue)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing bluetooth control");
 8008a6c:	490c      	ldr	r1, [pc, #48]	; (8008aa0 <BLU_init+0x3c>)
 8008a6e:	2001      	movs	r0, #1
 8008a70:	f000 fff6 	bl	8009a60 <LOG_log>

  g_BLU_maxDataValue = p_maxDataValue;
 8008a74:	4a0b      	ldr	r2, [pc, #44]	; (8008aa4 <BLU_init+0x40>)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6013      	str	r3, [r2, #0]

  g_BLU_lastData.leftX  = BLU_DATA_DEFAUT_DIRECTION;
 8008a7a:	4b0b      	ldr	r3, [pc, #44]	; (8008aa8 <BLU_init+0x44>)
 8008a7c:	2280      	movs	r2, #128	; 0x80
 8008a7e:	601a      	str	r2, [r3, #0]
  g_BLU_lastData.leftY  = BLU_DATA_DEFAUT_DIRECTION;
 8008a80:	4b09      	ldr	r3, [pc, #36]	; (8008aa8 <BLU_init+0x44>)
 8008a82:	2280      	movs	r2, #128	; 0x80
 8008a84:	605a      	str	r2, [r3, #4]
  g_BLU_lastData.rightX = BLU_DATA_DEFAUT_DIRECTION;
 8008a86:	4b08      	ldr	r3, [pc, #32]	; (8008aa8 <BLU_init+0x44>)
 8008a88:	2280      	movs	r2, #128	; 0x80
 8008a8a:	609a      	str	r2, [r3, #8]
  g_BLU_lastData.rightY = BLU_DATA_DEFAUT_DIRECTION;
 8008a8c:	4b06      	ldr	r3, [pc, #24]	; (8008aa8 <BLU_init+0x44>)
 8008a8e:	2280      	movs	r2, #128	; 0x80
 8008a90:	60da      	str	r2, [r3, #12]
  g_BLU_lastData.button = BLU_BUTTON_NONE;
 8008a92:	4b05      	ldr	r3, [pc, #20]	; (8008aa8 <BLU_init+0x44>)
 8008a94:	2200      	movs	r2, #0
 8008a96:	741a      	strb	r2, [r3, #16]

  return;
 8008a98:	bf00      	nop
}
 8008a9a:	3708      	adds	r7, #8
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}
 8008aa0:	0800b910 	.word	0x0800b910
 8008aa4:	200000b4 	.word	0x200000b4
 8008aa8:	200000b8 	.word	0x200000b8

08008aac <BLU_receiveData>:

void BLU_receiveData(T_BLU_Data *p_data)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b088      	sub	sp, #32
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  T_BLU_BUTTON l_button;

  // LOG_info("Receiving Bluetooth data");

  /* Read raw data */
  BLU_readData(l_buffer);
 8008ab4:	f107 0308 	add.w	r3, r7, #8
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7ff fee5 	bl	8008888 <BLU_readData>

  /* Start and decode raw data */
  l_leftX  = l_buffer[BLU_LEFT_X_OFFSET ];
 8008abe:	7b7b      	ldrb	r3, [r7, #13]
 8008ac0:	61fb      	str	r3, [r7, #28]
  l_leftY  = l_buffer[BLU_LEFT_Y_OFFSET ];
 8008ac2:	7bbb      	ldrb	r3, [r7, #14]
 8008ac4:	61bb      	str	r3, [r7, #24]
  l_rightX = l_buffer[BLU_RIGHT_X_OFFSET];
 8008ac6:	7afb      	ldrb	r3, [r7, #11]
 8008ac8:	617b      	str	r3, [r7, #20]
  l_rightY = l_buffer[BLU_RIGHT_Y_OFFSET];
 8008aca:	7b3b      	ldrb	r3, [r7, #12]
 8008acc:	613b      	str	r3, [r7, #16]
  l_button = BLU_getButton(l_buffer);
 8008ace:	f107 0308 	add.w	r3, r7, #8
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7ff ff50 	bl	8008978 <BLU_getButton>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	73fb      	strb	r3, [r7, #15]

  /* Deal with startup condition, while read data is not valid yet */
  if  ((l_leftX == 255 && l_leftY == 255 && l_rightX == 255 && l_rightY ==255)
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	2bff      	cmp	r3, #255	; 0xff
 8008ae0:	d108      	bne.n	8008af4 <BLU_receiveData+0x48>
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	2bff      	cmp	r3, #255	; 0xff
 8008ae6:	d105      	bne.n	8008af4 <BLU_receiveData+0x48>
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	2bff      	cmp	r3, #255	; 0xff
 8008aec:	d102      	bne.n	8008af4 <BLU_receiveData+0x48>
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	2bff      	cmp	r3, #255	; 0xff
 8008af2:	d00b      	beq.n	8008b0c <BLU_receiveData+0x60>
    || (l_leftX ==   0 && l_leftY ==   0 && l_rightX ==   0 && l_rightY ==  0))
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d113      	bne.n	8008b22 <BLU_receiveData+0x76>
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d110      	bne.n	8008b22 <BLU_receiveData+0x76>
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d10d      	bne.n	8008b22 <BLU_receiveData+0x76>
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d10a      	bne.n	8008b22 <BLU_receiveData+0x76>
  {
    l_leftX  = BLU_DATA_DEFAUT_DIRECTION;
 8008b0c:	2380      	movs	r3, #128	; 0x80
 8008b0e:	61fb      	str	r3, [r7, #28]
    l_leftY  = BLU_DATA_DEFAUT_DIRECTION;
 8008b10:	2380      	movs	r3, #128	; 0x80
 8008b12:	61bb      	str	r3, [r7, #24]
    l_rightX = BLU_DATA_DEFAUT_DIRECTION;
 8008b14:	2380      	movs	r3, #128	; 0x80
 8008b16:	617b      	str	r3, [r7, #20]
    l_rightY = BLU_DATA_DEFAUT_DIRECTION;
 8008b18:	2380      	movs	r3, #128	; 0x80
 8008b1a:	613b      	str	r3, [r7, #16]
    l_button = BLU_BUTTON_NONE;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	73fb      	strb	r3, [r7, #15]
 8008b20:	e043      	b.n	8008baa <BLU_receiveData+0xfe>
  }
  /* Use a confirmation mechanism, on 2 cycles, as glitches are observed */
  else if ((l_leftX  == g_BLU_lastData.leftX) &&
 8008b22:	4b2b      	ldr	r3, [pc, #172]	; (8008bd0 <BLU_receiveData+0x124>)
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d13e      	bne.n	8008baa <BLU_receiveData+0xfe>
           (l_leftY  == g_BLU_lastData.leftY) &&
 8008b2c:	4b28      	ldr	r3, [pc, #160]	; (8008bd0 <BLU_receiveData+0x124>)
 8008b2e:	685a      	ldr	r2, [r3, #4]
 8008b30:	69bb      	ldr	r3, [r7, #24]
  else if ((l_leftX  == g_BLU_lastData.leftX) &&
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d139      	bne.n	8008baa <BLU_receiveData+0xfe>
           (l_rightX == g_BLU_lastData.rightX) &&
 8008b36:	4b26      	ldr	r3, [pc, #152]	; (8008bd0 <BLU_receiveData+0x124>)
 8008b38:	689a      	ldr	r2, [r3, #8]
 8008b3a:	697b      	ldr	r3, [r7, #20]
           (l_leftY  == g_BLU_lastData.leftY) &&
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d134      	bne.n	8008baa <BLU_receiveData+0xfe>
           (l_rightY == g_BLU_lastData.rightY) &&
 8008b40:	4b23      	ldr	r3, [pc, #140]	; (8008bd0 <BLU_receiveData+0x124>)
 8008b42:	68da      	ldr	r2, [r3, #12]
 8008b44:	693b      	ldr	r3, [r7, #16]
           (l_rightX == g_BLU_lastData.rightX) &&
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d12f      	bne.n	8008baa <BLU_receiveData+0xfe>
           (l_button == g_BLU_lastData.button))
 8008b4a:	4b21      	ldr	r3, [pc, #132]	; (8008bd0 <BLU_receiveData+0x124>)
 8008b4c:	7c1b      	ldrb	r3, [r3, #16]
           (l_rightY == g_BLU_lastData.rightY) &&
 8008b4e:	7bfa      	ldrb	r2, [r7, #15]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d12a      	bne.n	8008baa <BLU_receiveData+0xfe>
  {
    /* Normalize directions data in range [-100..100] */
    p_data->leftX  = BLU_normalizeData(l_leftX , g_BLU_maxDataValue, false);
 8008b54:	4b1f      	ldr	r3, [pc, #124]	; (8008bd4 <BLU_receiveData+0x128>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	69f8      	ldr	r0, [r7, #28]
 8008b5e:	f7ff ff35 	bl	80089cc <BLU_normalizeData>
 8008b62:	4602      	mov	r2, r0
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	601a      	str	r2, [r3, #0]
    p_data->leftY  = BLU_normalizeData(l_leftY , g_BLU_maxDataValue, true );
 8008b68:	4b1a      	ldr	r3, [pc, #104]	; (8008bd4 <BLU_receiveData+0x128>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2201      	movs	r2, #1
 8008b6e:	4619      	mov	r1, r3
 8008b70:	69b8      	ldr	r0, [r7, #24]
 8008b72:	f7ff ff2b 	bl	80089cc <BLU_normalizeData>
 8008b76:	4602      	mov	r2, r0
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	605a      	str	r2, [r3, #4]
    p_data->rightX = BLU_normalizeData(l_rightX, g_BLU_maxDataValue, false);
 8008b7c:	4b15      	ldr	r3, [pc, #84]	; (8008bd4 <BLU_receiveData+0x128>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2200      	movs	r2, #0
 8008b82:	4619      	mov	r1, r3
 8008b84:	6978      	ldr	r0, [r7, #20]
 8008b86:	f7ff ff21 	bl	80089cc <BLU_normalizeData>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	609a      	str	r2, [r3, #8]
    p_data->rightY = BLU_normalizeData(l_rightY, g_BLU_maxDataValue, true );
 8008b90:	4b10      	ldr	r3, [pc, #64]	; (8008bd4 <BLU_receiveData+0x128>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2201      	movs	r2, #1
 8008b96:	4619      	mov	r1, r3
 8008b98:	6938      	ldr	r0, [r7, #16]
 8008b9a:	f7ff ff17 	bl	80089cc <BLU_normalizeData>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	60da      	str	r2, [r3, #12]
    p_data->button = l_button;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	7bfa      	ldrb	r2, [r7, #15]
 8008ba8:	741a      	strb	r2, [r3, #16]
  {
    ; /* Nothing to do */
  }

  /* Saved received data for later use in confirmation mechanism */
  g_BLU_lastData.leftX  = l_leftX;
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	4a08      	ldr	r2, [pc, #32]	; (8008bd0 <BLU_receiveData+0x124>)
 8008bae:	6013      	str	r3, [r2, #0]
  g_BLU_lastData.leftY  = l_leftY;
 8008bb0:	69bb      	ldr	r3, [r7, #24]
 8008bb2:	4a07      	ldr	r2, [pc, #28]	; (8008bd0 <BLU_receiveData+0x124>)
 8008bb4:	6053      	str	r3, [r2, #4]
  g_BLU_lastData.rightX = l_rightX;
 8008bb6:	697b      	ldr	r3, [r7, #20]
 8008bb8:	4a05      	ldr	r2, [pc, #20]	; (8008bd0 <BLU_receiveData+0x124>)
 8008bba:	6093      	str	r3, [r2, #8]
  g_BLU_lastData.rightY = l_rightY;
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	4a04      	ldr	r2, [pc, #16]	; (8008bd0 <BLU_receiveData+0x124>)
 8008bc0:	60d3      	str	r3, [r2, #12]
  g_BLU_lastData.button = l_button;
 8008bc2:	4a03      	ldr	r2, [pc, #12]	; (8008bd0 <BLU_receiveData+0x124>)
 8008bc4:	7bfb      	ldrb	r3, [r7, #15]
 8008bc6:	7413      	strb	r3, [r2, #16]

  return;
 8008bc8:	bf00      	nop
}
 8008bca:	3720      	adds	r7, #32
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	200000b8 	.word	0x200000b8
 8008bd4:	200000b4 	.word	0x200000b4

08008bd8 <CON_init>:

static UART_HandleTypeDef *g_CON_uartHandle;
static uint8_t             g_CON_rxBuffer[12] = {0};

void CON_init(UART_HandleTypeDef *p_uartHandle)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing console");
 8008be0:	4905      	ldr	r1, [pc, #20]	; (8008bf8 <CON_init+0x20>)
 8008be2:	2001      	movs	r0, #1
 8008be4:	f000 ff3c 	bl	8009a60 <LOG_log>

  g_CON_uartHandle = p_uartHandle;
 8008be8:	4a04      	ldr	r2, [pc, #16]	; (8008bfc <CON_init+0x24>)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6013      	str	r3, [r2, #0]

  return;
 8008bee:	bf00      	nop
}
 8008bf0:	3708      	adds	r7, #8
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	0800b930 	.word	0x0800b930
 8008bfc:	200000cc 	.word	0x200000cc

08008c00 <CON_receiveData>:

void CON_receiveData(void)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	af00      	add	r7, sp, #0
  HAL_UART_Receive_IT(g_CON_uartHandle, g_CON_rxBuffer, 12);
 8008c04:	4b04      	ldr	r3, [pc, #16]	; (8008c18 <CON_receiveData+0x18>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	220c      	movs	r2, #12
 8008c0a:	4904      	ldr	r1, [pc, #16]	; (8008c1c <CON_receiveData+0x1c>)
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f7fe fff3 	bl	8007bf8 <HAL_UART_Receive_IT>

  /* Resend received data (echo) */
//  HAL_UART_Transmit(CON_uartHandle, CON_rxBuffer, 12, 100);

  return;
 8008c12:	bf00      	nop
}
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	200000cc 	.word	0x200000cc
 8008c1c:	200000d0 	.word	0x200000d0

08008c20 <DRV_init>:
void DRV_init(TIM_HandleTypeDef *p_pwmTimerHandle,
              TIM_HandleTypeDef *p_rearLeftEncoderTimerHandle,
              TIM_HandleTypeDef *p_rearRightEncoderTimerHandle,
              TIM_HandleTypeDef *p_frontRightEncoderTimerHandle,
              TIM_HandleTypeDef *p_frontLeftEncoderTimerHandle)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b088      	sub	sp, #32
 8008c24:	af04      	add	r7, sp, #16
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	607a      	str	r2, [r7, #4]
 8008c2c:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing Drive module");
 8008c2e:	494f      	ldr	r1, [pc, #316]	; (8008d6c <DRV_init+0x14c>)
 8008c30:	2001      	movs	r0, #1
 8008c32:	f000 ff15 	bl	8009a60 <LOG_log>

  /* Setup PIDs */
  PID_init(&g_DRV_pidFrontRight, 1, 1, 1, 0, -100, 100, 0.5);
 8008c36:	2300      	movs	r3, #0
 8008c38:	9303      	str	r3, [sp, #12]
 8008c3a:	2364      	movs	r3, #100	; 0x64
 8008c3c:	9302      	str	r3, [sp, #8]
 8008c3e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008c42:	9301      	str	r3, [sp, #4]
 8008c44:	2300      	movs	r3, #0
 8008c46:	9300      	str	r3, [sp, #0]
 8008c48:	2301      	movs	r3, #1
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	2101      	movs	r1, #1
 8008c4e:	4848      	ldr	r0, [pc, #288]	; (8008d70 <DRV_init+0x150>)
 8008c50:	f001 f850 	bl	8009cf4 <PID_init>
  PID_init(&g_DRV_pidFrontLeft , 1, 1, 1, 0, -100, 100, 0.5);
 8008c54:	2300      	movs	r3, #0
 8008c56:	9303      	str	r3, [sp, #12]
 8008c58:	2364      	movs	r3, #100	; 0x64
 8008c5a:	9302      	str	r3, [sp, #8]
 8008c5c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008c60:	9301      	str	r3, [sp, #4]
 8008c62:	2300      	movs	r3, #0
 8008c64:	9300      	str	r3, [sp, #0]
 8008c66:	2301      	movs	r3, #1
 8008c68:	2201      	movs	r2, #1
 8008c6a:	2101      	movs	r1, #1
 8008c6c:	4841      	ldr	r0, [pc, #260]	; (8008d74 <DRV_init+0x154>)
 8008c6e:	f001 f841 	bl	8009cf4 <PID_init>
  PID_init(&g_DRV_pidRearLeft  , 1, 1, 1, 0, -100, 100, 0.5);
 8008c72:	2300      	movs	r3, #0
 8008c74:	9303      	str	r3, [sp, #12]
 8008c76:	2364      	movs	r3, #100	; 0x64
 8008c78:	9302      	str	r3, [sp, #8]
 8008c7a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008c7e:	9301      	str	r3, [sp, #4]
 8008c80:	2300      	movs	r3, #0
 8008c82:	9300      	str	r3, [sp, #0]
 8008c84:	2301      	movs	r3, #1
 8008c86:	2201      	movs	r2, #1
 8008c88:	2101      	movs	r1, #1
 8008c8a:	483b      	ldr	r0, [pc, #236]	; (8008d78 <DRV_init+0x158>)
 8008c8c:	f001 f832 	bl	8009cf4 <PID_init>
  PID_init(&g_DRV_pidRearRight , 1, 1, 1, 0, -100, 100, 0.5);
 8008c90:	2300      	movs	r3, #0
 8008c92:	9303      	str	r3, [sp, #12]
 8008c94:	2364      	movs	r3, #100	; 0x64
 8008c96:	9302      	str	r3, [sp, #8]
 8008c98:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008c9c:	9301      	str	r3, [sp, #4]
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	9300      	str	r3, [sp, #0]
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	2101      	movs	r1, #1
 8008ca8:	4834      	ldr	r0, [pc, #208]	; (8008d7c <DRV_init+0x15c>)
 8008caa:	f001 f823 	bl	8009cf4 <PID_init>

  /* Setup motors (with a 0 speed & stopped direction, at this point) */
  MTR_init(&g_DRV_motorFrontRight,
 8008cae:	2304      	movs	r3, #4
 8008cb0:	9303      	str	r3, [sp, #12]
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	9302      	str	r3, [sp, #8]
 8008cb6:	2320      	movs	r3, #32
 8008cb8:	9301      	str	r3, [sp, #4]
 8008cba:	4b31      	ldr	r3, [pc, #196]	; (8008d80 <DRV_init+0x160>)
 8008cbc:	9300      	str	r3, [sp, #0]
 8008cbe:	2310      	movs	r3, #16
 8008cc0:	4a2f      	ldr	r2, [pc, #188]	; (8008d80 <DRV_init+0x160>)
 8008cc2:	4930      	ldr	r1, [pc, #192]	; (8008d84 <DRV_init+0x164>)
 8008cc4:	4830      	ldr	r0, [pc, #192]	; (8008d88 <DRV_init+0x168>)
 8008cc6:	f000 ff3b 	bl	8009b40 <MTR_init>
           MOTOR_FRONT_RIGHT_IN_2_GPIO_Port,
           MOTOR_FRONT_RIGHT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_2);

  MTR_init(&g_DRV_motorFrontLeft,
 8008cca:	2300      	movs	r3, #0
 8008ccc:	9303      	str	r3, [sp, #12]
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	9302      	str	r3, [sp, #8]
 8008cd2:	2302      	movs	r3, #2
 8008cd4:	9301      	str	r3, [sp, #4]
 8008cd6:	4b2d      	ldr	r3, [pc, #180]	; (8008d8c <DRV_init+0x16c>)
 8008cd8:	9300      	str	r3, [sp, #0]
 8008cda:	2301      	movs	r3, #1
 8008cdc:	4a2b      	ldr	r2, [pc, #172]	; (8008d8c <DRV_init+0x16c>)
 8008cde:	492c      	ldr	r1, [pc, #176]	; (8008d90 <DRV_init+0x170>)
 8008ce0:	482c      	ldr	r0, [pc, #176]	; (8008d94 <DRV_init+0x174>)
 8008ce2:	f000 ff2d 	bl	8009b40 <MTR_init>
           MOTOR_FRONT_LEFT_IN_2_GPIO_Port,
           MOTOR_FRONT_LEFT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_1);

  MTR_init(&g_DRV_motorRearLeft,
 8008ce6:	230c      	movs	r3, #12
 8008ce8:	9303      	str	r3, [sp, #12]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	9302      	str	r3, [sp, #8]
 8008cee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cf2:	9301      	str	r3, [sp, #4]
 8008cf4:	4b22      	ldr	r3, [pc, #136]	; (8008d80 <DRV_init+0x160>)
 8008cf6:	9300      	str	r3, [sp, #0]
 8008cf8:	2304      	movs	r3, #4
 8008cfa:	4a27      	ldr	r2, [pc, #156]	; (8008d98 <DRV_init+0x178>)
 8008cfc:	4927      	ldr	r1, [pc, #156]	; (8008d9c <DRV_init+0x17c>)
 8008cfe:	4828      	ldr	r0, [pc, #160]	; (8008da0 <DRV_init+0x180>)
 8008d00:	f000 ff1e 	bl	8009b40 <MTR_init>
           MOTOR_REAR_LEFT_IN_2_GPIO_Port,
           MOTOR_REAR_LEFT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_4);

  MTR_init(&g_DRV_motorRearRight,
 8008d04:	2308      	movs	r3, #8
 8008d06:	9303      	str	r3, [sp, #12]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	9302      	str	r3, [sp, #8]
 8008d0c:	2310      	movs	r3, #16
 8008d0e:	9301      	str	r3, [sp, #4]
 8008d10:	4b1e      	ldr	r3, [pc, #120]	; (8008d8c <DRV_init+0x16c>)
 8008d12:	9300      	str	r3, [sp, #0]
 8008d14:	2320      	movs	r3, #32
 8008d16:	4a1d      	ldr	r2, [pc, #116]	; (8008d8c <DRV_init+0x16c>)
 8008d18:	4922      	ldr	r1, [pc, #136]	; (8008da4 <DRV_init+0x184>)
 8008d1a:	4823      	ldr	r0, [pc, #140]	; (8008da8 <DRV_init+0x188>)
 8008d1c:	f000 ff10 	bl	8009b40 <MTR_init>
           MOTOR_REAR_RIGHT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_3);

  /* Setup encoders */
  ENC_init(&g_DRV_encoderFrontRight, DRV_FRONT_RIGHT_MOTOR_NAME, true , p_frontRightEncoderTimerHandle);
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	2201      	movs	r2, #1
 8008d24:	4917      	ldr	r1, [pc, #92]	; (8008d84 <DRV_init+0x164>)
 8008d26:	4821      	ldr	r0, [pc, #132]	; (8008dac <DRV_init+0x18c>)
 8008d28:	f000 fd24 	bl	8009774 <ENC_init>
  ENC_init(&g_DRV_encoderFrontLeft , DRV_FRONT_LEFT_MOTOR_NAME , false, p_frontLeftEncoderTimerHandle );
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	4917      	ldr	r1, [pc, #92]	; (8008d90 <DRV_init+0x170>)
 8008d32:	481f      	ldr	r0, [pc, #124]	; (8008db0 <DRV_init+0x190>)
 8008d34:	f000 fd1e 	bl	8009774 <ENC_init>
  ENC_init(&g_DRV_encoderRearLeft  , DRV_REAR_LEFT_MOTOR_NAME  , false, p_rearLeftEncoderTimerHandle  );
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	4917      	ldr	r1, [pc, #92]	; (8008d9c <DRV_init+0x17c>)
 8008d3e:	481d      	ldr	r0, [pc, #116]	; (8008db4 <DRV_init+0x194>)
 8008d40:	f000 fd18 	bl	8009774 <ENC_init>
  ENC_init(&g_DRV_encoderRearRight , DRV_REAR_RIGHT_MOTOR_NAME , true , p_rearRightEncoderTimerHandle );
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	4916      	ldr	r1, [pc, #88]	; (8008da4 <DRV_init+0x184>)
 8008d4a:	481b      	ldr	r0, [pc, #108]	; (8008db8 <DRV_init+0x198>)
 8008d4c:	f000 fd12 	bl	8009774 <ENC_init>

  /* Activate motors by default (de-activating them is used for debug  */
  g_DRV_areMotorsOn = true;
 8008d50:	4b1a      	ldr	r3, [pc, #104]	; (8008dbc <DRV_init+0x19c>)
 8008d52:	2201      	movs	r2, #1
 8008d54:	701a      	strb	r2, [r3, #0]

  /* Considered that drive is inactive when the code starts */
  g_DRV_isActive = false;
 8008d56:	4b1a      	ldr	r3, [pc, #104]	; (8008dc0 <DRV_init+0x1a0>)
 8008d58:	2200      	movs	r2, #0
 8008d5a:	701a      	strb	r2, [r3, #0]

  /* Start with master board control mode. BLink green LED accordingly */
  g_DRV_mode = DRV_MODE_MASTER_BOARD_CONTROL;
 8008d5c:	4b19      	ldr	r3, [pc, #100]	; (8008dc4 <DRV_init+0x1a4>)
 8008d5e:	2202      	movs	r2, #2
 8008d60:	701a      	strb	r2, [r3, #0]

  return;
 8008d62:	bf00      	nop
}
 8008d64:	3710      	adds	r7, #16
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	0800b948 	.word	0x0800b948
 8008d70:	200000e0 	.word	0x200000e0
 8008d74:	20000110 	.word	0x20000110
 8008d78:	20000140 	.word	0x20000140
 8008d7c:	20000170 	.word	0x20000170
 8008d80:	40011000 	.word	0x40011000
 8008d84:	0800b964 	.word	0x0800b964
 8008d88:	200001a0 	.word	0x200001a0
 8008d8c:	40010c00 	.word	0x40010c00
 8008d90:	0800b970 	.word	0x0800b970
 8008d94:	200001c4 	.word	0x200001c4
 8008d98:	40011400 	.word	0x40011400
 8008d9c:	0800b97c 	.word	0x0800b97c
 8008da0:	200001e8 	.word	0x200001e8
 8008da4:	0800b988 	.word	0x0800b988
 8008da8:	2000020c 	.word	0x2000020c
 8008dac:	20000230 	.word	0x20000230
 8008db0:	2000023c 	.word	0x2000023c
 8008db4:	20000248 	.word	0x20000248
 8008db8:	20000254 	.word	0x20000254
 8008dbc:	200000dc 	.word	0x200000dc
 8008dc0:	200000dd 	.word	0x200000dd
 8008dc4:	200000de 	.word	0x200000de

08008dc8 <DRV_updateEncoder>:

void DRV_updateEncoder(TIM_HandleTypeDef *p_encoderTimerHandle)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  int16_t l_count;

  l_count = __HAL_TIM_GET_COUNTER(p_encoderTimerHandle);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd6:	81fb      	strh	r3, [r7, #14]

  /* Check the handle of the triggering timer and update encoder accordingly */
  if (p_encoderTimerHandle == g_DRV_encoderRearLeft.timerHandle)
 8008dd8:	4b19      	ldr	r3, [pc, #100]	; (8008e40 <DRV_updateEncoder+0x78>)
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d106      	bne.n	8008df0 <DRV_updateEncoder+0x28>
  {
    ENC_update(&g_DRV_encoderRearLeft, l_count);
 8008de2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008de6:	4619      	mov	r1, r3
 8008de8:	4815      	ldr	r0, [pc, #84]	; (8008e40 <DRV_updateEncoder+0x78>)
 8008dea:	f000 fcef 	bl	80097cc <ENC_update>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8008dee:	e023      	b.n	8008e38 <DRV_updateEncoder+0x70>
  else if (p_encoderTimerHandle == g_DRV_encoderRearRight.timerHandle)
 8008df0:	4b14      	ldr	r3, [pc, #80]	; (8008e44 <DRV_updateEncoder+0x7c>)
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d106      	bne.n	8008e08 <DRV_updateEncoder+0x40>
    ENC_update(&g_DRV_encoderRearRight, l_count);
 8008dfa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008dfe:	4619      	mov	r1, r3
 8008e00:	4810      	ldr	r0, [pc, #64]	; (8008e44 <DRV_updateEncoder+0x7c>)
 8008e02:	f000 fce3 	bl	80097cc <ENC_update>
  return;
 8008e06:	e017      	b.n	8008e38 <DRV_updateEncoder+0x70>
  else if (p_encoderTimerHandle == g_DRV_encoderFrontRight.timerHandle)
 8008e08:	4b0f      	ldr	r3, [pc, #60]	; (8008e48 <DRV_updateEncoder+0x80>)
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d106      	bne.n	8008e20 <DRV_updateEncoder+0x58>
    ENC_update(&g_DRV_encoderFrontRight, l_count);
 8008e12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008e16:	4619      	mov	r1, r3
 8008e18:	480b      	ldr	r0, [pc, #44]	; (8008e48 <DRV_updateEncoder+0x80>)
 8008e1a:	f000 fcd7 	bl	80097cc <ENC_update>
  return;
 8008e1e:	e00b      	b.n	8008e38 <DRV_updateEncoder+0x70>
  else if (p_encoderTimerHandle == g_DRV_encoderFrontLeft.timerHandle)
 8008e20:	4b0a      	ldr	r3, [pc, #40]	; (8008e4c <DRV_updateEncoder+0x84>)
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d106      	bne.n	8008e38 <DRV_updateEncoder+0x70>
    ENC_update(&g_DRV_encoderFrontLeft, l_count);
 8008e2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008e2e:	4619      	mov	r1, r3
 8008e30:	4806      	ldr	r0, [pc, #24]	; (8008e4c <DRV_updateEncoder+0x84>)
 8008e32:	f000 fccb 	bl	80097cc <ENC_update>
  return;
 8008e36:	bf00      	nop
 8008e38:	bf00      	nop
}
 8008e3a:	3710      	adds	r7, #16
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	20000248 	.word	0x20000248
 8008e44:	20000254 	.word	0x20000254
 8008e48:	20000230 	.word	0x20000230
 8008e4c:	2000023c 	.word	0x2000023c

08008e50 <DRV_updateFromBluetooth>:

void DRV_updateFromBluetooth(T_BLU_Data *p_bluetoothData)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  uint32_t l_speed;

  /* Check possible requested mode change */
  switch (p_bluetoothData->button)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	7c1b      	ldrb	r3, [r3, #16]
 8008e5c:	3b01      	subs	r3, #1
 8008e5e:	2b0f      	cmp	r3, #15
 8008e60:	d861      	bhi.n	8008f26 <DRV_updateFromBluetooth+0xd6>
 8008e62:	a201      	add	r2, pc, #4	; (adr r2, 8008e68 <DRV_updateFromBluetooth+0x18>)
 8008e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e68:	08008ef1 	.word	0x08008ef1
 8008e6c:	08008f27 	.word	0x08008f27
 8008e70:	08008f27 	.word	0x08008f27
 8008e74:	08008f09 	.word	0x08008f09
 8008e78:	08008f27 	.word	0x08008f27
 8008e7c:	08008f27 	.word	0x08008f27
 8008e80:	08008f27 	.word	0x08008f27
 8008e84:	08008f27 	.word	0x08008f27
 8008e88:	08008f27 	.word	0x08008f27
 8008e8c:	08008f27 	.word	0x08008f27
 8008e90:	08008f27 	.word	0x08008f27
 8008e94:	08008f27 	.word	0x08008f27
 8008e98:	08008f27 	.word	0x08008f27
 8008e9c:	08008ed9 	.word	0x08008ed9
 8008ea0:	08008ec1 	.word	0x08008ec1
 8008ea4:	08008ea9 	.word	0x08008ea9
  {
    case BLU_BUTTON_PINK_SQUARE:
      if (g_DRV_mode != DRV_MODE_MANUAL_FIXED_SPEED)
 8008ea8:	4b82      	ldr	r3, [pc, #520]	; (80090b4 <DRV_updateFromBluetooth+0x264>)
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d03c      	beq.n	8008f2a <DRV_updateFromBluetooth+0xda>
      {
        LOG_info("Drive mode now DRV_MODE_MANUAL_FIXED_SPEED");
 8008eb0:	4981      	ldr	r1, [pc, #516]	; (80090b8 <DRV_updateFromBluetooth+0x268>)
 8008eb2:	2001      	movs	r0, #1
 8008eb4:	f000 fdd4 	bl	8009a60 <LOG_log>
        g_DRV_mode = DRV_MODE_MANUAL_FIXED_SPEED;
 8008eb8:	4b7e      	ldr	r3, [pc, #504]	; (80090b4 <DRV_updateFromBluetooth+0x264>)
 8008eba:	2200      	movs	r2, #0
 8008ebc:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8008ebe:	e034      	b.n	8008f2a <DRV_updateFromBluetooth+0xda>

    case BLU_BUTTON_BLUE_CROSS:
      if (g_DRV_mode != DRV_MODE_MANUAL_VARIABLE_SPEED)
 8008ec0:	4b7c      	ldr	r3, [pc, #496]	; (80090b4 <DRV_updateFromBluetooth+0x264>)
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d032      	beq.n	8008f2e <DRV_updateFromBluetooth+0xde>
      {
        LOG_info("Drive mode now DRV_MODE_MANUAL_VARIABLE_SPEED");
 8008ec8:	497c      	ldr	r1, [pc, #496]	; (80090bc <DRV_updateFromBluetooth+0x26c>)
 8008eca:	2001      	movs	r0, #1
 8008ecc:	f000 fdc8 	bl	8009a60 <LOG_log>
        g_DRV_mode = DRV_MODE_MANUAL_VARIABLE_SPEED;
 8008ed0:	4b78      	ldr	r3, [pc, #480]	; (80090b4 <DRV_updateFromBluetooth+0x264>)
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8008ed6:	e02a      	b.n	8008f2e <DRV_updateFromBluetooth+0xde>

    case BLU_BUTTON_RED_CIRCLE:
      if (g_DRV_mode != DRV_MODE_MASTER_BOARD_CONTROL)
 8008ed8:	4b76      	ldr	r3, [pc, #472]	; (80090b4 <DRV_updateFromBluetooth+0x264>)
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	2b02      	cmp	r3, #2
 8008ede:	d028      	beq.n	8008f32 <DRV_updateFromBluetooth+0xe2>
      {
        LOG_info("Drive mode now DRV_MODE_MASTER_BOARD_CONTROL");
 8008ee0:	4977      	ldr	r1, [pc, #476]	; (80090c0 <DRV_updateFromBluetooth+0x270>)
 8008ee2:	2001      	movs	r0, #1
 8008ee4:	f000 fdbc 	bl	8009a60 <LOG_log>
        g_DRV_mode = DRV_MODE_MASTER_BOARD_CONTROL;
 8008ee8:	4b72      	ldr	r3, [pc, #456]	; (80090b4 <DRV_updateFromBluetooth+0x264>)
 8008eea:	2202      	movs	r2, #2
 8008eec:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8008eee:	e020      	b.n	8008f32 <DRV_updateFromBluetooth+0xe2>

    case BLU_BUTTON_SELECT:
      if (g_DRV_areMotorsOn == true)
 8008ef0:	4b74      	ldr	r3, [pc, #464]	; (80090c4 <DRV_updateFromBluetooth+0x274>)
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d01e      	beq.n	8008f36 <DRV_updateFromBluetooth+0xe6>
      {
        LOG_info("Drive turning motor OFF");
 8008ef8:	4973      	ldr	r1, [pc, #460]	; (80090c8 <DRV_updateFromBluetooth+0x278>)
 8008efa:	2001      	movs	r0, #1
 8008efc:	f000 fdb0 	bl	8009a60 <LOG_log>
        g_DRV_areMotorsOn = false;
 8008f00:	4b70      	ldr	r3, [pc, #448]	; (80090c4 <DRV_updateFromBluetooth+0x274>)
 8008f02:	2200      	movs	r2, #0
 8008f04:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8008f06:	e016      	b.n	8008f36 <DRV_updateFromBluetooth+0xe6>

    case BLU_BUTTON_START:
      if (g_DRV_areMotorsOn == false)
 8008f08:	4b6e      	ldr	r3, [pc, #440]	; (80090c4 <DRV_updateFromBluetooth+0x274>)
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	f083 0301 	eor.w	r3, r3, #1
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d011      	beq.n	8008f3a <DRV_updateFromBluetooth+0xea>
      {
        LOG_info("Drive turning motors ON");
 8008f16:	496d      	ldr	r1, [pc, #436]	; (80090cc <DRV_updateFromBluetooth+0x27c>)
 8008f18:	2001      	movs	r0, #1
 8008f1a:	f000 fda1 	bl	8009a60 <LOG_log>
        g_DRV_areMotorsOn = true;
 8008f1e:	4b69      	ldr	r3, [pc, #420]	; (80090c4 <DRV_updateFromBluetooth+0x274>)
 8008f20:	2201      	movs	r2, #1
 8008f22:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8008f24:	e009      	b.n	8008f3a <DRV_updateFromBluetooth+0xea>

    default:
      ; /* Nothing to do */
      break;
 8008f26:	bf00      	nop
 8008f28:	e008      	b.n	8008f3c <DRV_updateFromBluetooth+0xec>
      break;
 8008f2a:	bf00      	nop
 8008f2c:	e006      	b.n	8008f3c <DRV_updateFromBluetooth+0xec>
      break;
 8008f2e:	bf00      	nop
 8008f30:	e004      	b.n	8008f3c <DRV_updateFromBluetooth+0xec>
      break;
 8008f32:	bf00      	nop
 8008f34:	e002      	b.n	8008f3c <DRV_updateFromBluetooth+0xec>
      break;
 8008f36:	bf00      	nop
 8008f38:	e000      	b.n	8008f3c <DRV_updateFromBluetooth+0xec>
      break;
 8008f3a:	bf00      	nop
  }

  /* Master board control mode is an automated mode, so that we will */
  /* ignore any direction/button press received via bluetooth.       */
  if (g_DRV_mode == DRV_MODE_MASTER_BOARD_CONTROL)
 8008f3c:	4b5d      	ldr	r3, [pc, #372]	; (80090b4 <DRV_updateFromBluetooth+0x264>)
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	2b02      	cmp	r3, #2
 8008f42:	f000 80b3 	beq.w	80090ac <DRV_updateFromBluetooth+0x25c>
    ; /* Nothing to do */
  }
  /* Manual mode, applying directions received by bluetooth */
  else
  {
    if (p_bluetoothData->leftY > DRV_JOYSTICKS_THRESHOLD)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	2b0a      	cmp	r3, #10
 8008f4c:	dd0c      	ble.n	8008f68 <DRV_updateFromBluetooth+0x118>
    {
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->leftY;
 8008f4e:	4b59      	ldr	r3, [pc, #356]	; (80090b4 <DRV_updateFromBluetooth+0x264>)
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d002      	beq.n	8008f5c <DRV_updateFromBluetooth+0x10c>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	e000      	b.n	8008f5e <DRV_updateFromBluetooth+0x10e>
 8008f5c:	2314      	movs	r3, #20
 8008f5e:	60fb      	str	r3, [r7, #12]

      DRV_moveForward(l_speed);
 8008f60:	68f8      	ldr	r0, [r7, #12]
 8008f62:	f000 f957 	bl	8009214 <DRV_moveForward>
      /* Most of the time, we will get here */
      DRV_sleep();
    }
  }

  return;
 8008f66:	e0a1      	b.n	80090ac <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightY > DRV_JOYSTICKS_THRESHOLD)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	2b0a      	cmp	r3, #10
 8008f6e:	dd0c      	ble.n	8008f8a <DRV_updateFromBluetooth+0x13a>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->rightY;
 8008f70:	4b50      	ldr	r3, [pc, #320]	; (80090b4 <DRV_updateFromBluetooth+0x264>)
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d002      	beq.n	8008f7e <DRV_updateFromBluetooth+0x12e>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	e000      	b.n	8008f80 <DRV_updateFromBluetooth+0x130>
 8008f7e:	2314      	movs	r3, #20
 8008f80:	60fb      	str	r3, [r7, #12]
      DRV_moveForward(l_speed);
 8008f82:	68f8      	ldr	r0, [r7, #12]
 8008f84:	f000 f946 	bl	8009214 <DRV_moveForward>
  return;
 8008f88:	e090      	b.n	80090ac <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->leftY < -DRV_JOYSTICKS_THRESHOLD)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	f113 0f0a 	cmn.w	r3, #10
 8008f92:	da0d      	bge.n	8008fb0 <DRV_updateFromBluetooth+0x160>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->leftY;
 8008f94:	4b47      	ldr	r3, [pc, #284]	; (80090b4 <DRV_updateFromBluetooth+0x264>)
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d003      	beq.n	8008fa4 <DRV_updateFromBluetooth+0x154>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	425b      	negs	r3, r3
 8008fa2:	e000      	b.n	8008fa6 <DRV_updateFromBluetooth+0x156>
 8008fa4:	2314      	movs	r3, #20
 8008fa6:	60fb      	str	r3, [r7, #12]
      DRV_moveBackward(l_speed);
 8008fa8:	68f8      	ldr	r0, [r7, #12]
 8008faa:	f000 f97b 	bl	80092a4 <DRV_moveBackward>
  return;
 8008fae:	e07d      	b.n	80090ac <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightY < -DRV_JOYSTICKS_THRESHOLD)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	f113 0f0a 	cmn.w	r3, #10
 8008fb8:	da0d      	bge.n	8008fd6 <DRV_updateFromBluetooth+0x186>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->rightY;
 8008fba:	4b3e      	ldr	r3, [pc, #248]	; (80090b4 <DRV_updateFromBluetooth+0x264>)
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d003      	beq.n	8008fca <DRV_updateFromBluetooth+0x17a>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	68db      	ldr	r3, [r3, #12]
 8008fc6:	425b      	negs	r3, r3
 8008fc8:	e000      	b.n	8008fcc <DRV_updateFromBluetooth+0x17c>
 8008fca:	2314      	movs	r3, #20
 8008fcc:	60fb      	str	r3, [r7, #12]
      DRV_moveBackward(l_speed);
 8008fce:	68f8      	ldr	r0, [r7, #12]
 8008fd0:	f000 f968 	bl	80092a4 <DRV_moveBackward>
  return;
 8008fd4:	e06a      	b.n	80090ac <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->leftX < -DRV_JOYSTICKS_THRESHOLD)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f113 0f0a 	cmn.w	r3, #10
 8008fde:	da0d      	bge.n	8008ffc <DRV_updateFromBluetooth+0x1ac>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->leftX;
 8008fe0:	4b34      	ldr	r3, [pc, #208]	; (80090b4 <DRV_updateFromBluetooth+0x264>)
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d003      	beq.n	8008ff0 <DRV_updateFromBluetooth+0x1a0>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	425b      	negs	r3, r3
 8008fee:	e000      	b.n	8008ff2 <DRV_updateFromBluetooth+0x1a2>
 8008ff0:	2314      	movs	r3, #20
 8008ff2:	60fb      	str	r3, [r7, #12]
      DRV_turnLeft(l_speed);
 8008ff4:	68f8      	ldr	r0, [r7, #12]
 8008ff6:	f000 fa9d 	bl	8009534 <DRV_turnLeft>
  return;
 8008ffa:	e057      	b.n	80090ac <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->leftX > DRV_JOYSTICKS_THRESHOLD)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	2b0a      	cmp	r3, #10
 8009002:	dd0c      	ble.n	800901e <DRV_updateFromBluetooth+0x1ce>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->leftX;
 8009004:	4b2b      	ldr	r3, [pc, #172]	; (80090b4 <DRV_updateFromBluetooth+0x264>)
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d002      	beq.n	8009012 <DRV_updateFromBluetooth+0x1c2>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	e000      	b.n	8009014 <DRV_updateFromBluetooth+0x1c4>
 8009012:	2314      	movs	r3, #20
 8009014:	60fb      	str	r3, [r7, #12]
      DRV_turnRight(l_speed);
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	f000 fad4 	bl	80095c4 <DRV_turnRight>
  return;
 800901c:	e046      	b.n	80090ac <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightX < -DRV_JOYSTICKS_THRESHOLD)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	f113 0f0a 	cmn.w	r3, #10
 8009026:	da0d      	bge.n	8009044 <DRV_updateFromBluetooth+0x1f4>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->rightX;
 8009028:	4b22      	ldr	r3, [pc, #136]	; (80090b4 <DRV_updateFromBluetooth+0x264>)
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d003      	beq.n	8009038 <DRV_updateFromBluetooth+0x1e8>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	425b      	negs	r3, r3
 8009036:	e000      	b.n	800903a <DRV_updateFromBluetooth+0x1ea>
 8009038:	2314      	movs	r3, #20
 800903a:	60fb      	str	r3, [r7, #12]
      DRV_translateLeft(l_speed);
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f000 fb09 	bl	8009654 <DRV_translateLeft>
  return;
 8009042:	e033      	b.n	80090ac <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightX > DRV_JOYSTICKS_THRESHOLD)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	2b0a      	cmp	r3, #10
 800904a:	dd0c      	ble.n	8009066 <DRV_updateFromBluetooth+0x216>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->rightX;
 800904c:	4b19      	ldr	r3, [pc, #100]	; (80090b4 <DRV_updateFromBluetooth+0x264>)
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d002      	beq.n	800905a <DRV_updateFromBluetooth+0x20a>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	e000      	b.n	800905c <DRV_updateFromBluetooth+0x20c>
 800905a:	2314      	movs	r3, #20
 800905c:	60fb      	str	r3, [r7, #12]
      DRV_translateRight(l_speed);
 800905e:	68f8      	ldr	r0, [r7, #12]
 8009060:	f000 fb40 	bl	80096e4 <DRV_translateRight>
  return;
 8009064:	e022      	b.n	80090ac <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_L1)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	7c1b      	ldrb	r3, [r3, #16]
 800906a:	2b0b      	cmp	r3, #11
 800906c:	d103      	bne.n	8009076 <DRV_updateFromBluetooth+0x226>
      DRV_moveForwardLeft(DRV_BUTTONS_FIXED_SPEED);
 800906e:	2028      	movs	r0, #40	; 0x28
 8009070:	f000 f9a0 	bl	80093b4 <DRV_moveForwardLeft>
  return;
 8009074:	e01a      	b.n	80090ac <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_L2)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	7c1b      	ldrb	r3, [r3, #16]
 800907a:	2b09      	cmp	r3, #9
 800907c:	d103      	bne.n	8009086 <DRV_updateFromBluetooth+0x236>
      DRV_moveBackwardRight(DRV_BUTTONS_FIXED_SPEED);
 800907e:	2028      	movs	r0, #40	; 0x28
 8009080:	f000 f9d8 	bl	8009434 <DRV_moveBackwardRight>
  return;
 8009084:	e012      	b.n	80090ac <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_R1)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	7c1b      	ldrb	r3, [r3, #16]
 800908a:	2b0c      	cmp	r3, #12
 800908c:	d103      	bne.n	8009096 <DRV_updateFromBluetooth+0x246>
      DRV_moveForwardRight(DRV_BUTTONS_FIXED_SPEED);
 800908e:	2028      	movs	r0, #40	; 0x28
 8009090:	f000 f950 	bl	8009334 <DRV_moveForwardRight>
  return;
 8009094:	e00a      	b.n	80090ac <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_R2)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	7c1b      	ldrb	r3, [r3, #16]
 800909a:	2b0a      	cmp	r3, #10
 800909c:	d103      	bne.n	80090a6 <DRV_updateFromBluetooth+0x256>
      DRV_moveBackwardLeft(DRV_BUTTONS_FIXED_SPEED);
 800909e:	2028      	movs	r0, #40	; 0x28
 80090a0:	f000 fa08 	bl	80094b4 <DRV_moveBackwardLeft>
  return;
 80090a4:	e002      	b.n	80090ac <DRV_updateFromBluetooth+0x25c>
      DRV_sleep();
 80090a6:	f000 f889 	bl	80091bc <DRV_sleep>
  return;
 80090aa:	bf00      	nop
 80090ac:	bf00      	nop
}
 80090ae:	3710      	adds	r7, #16
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd80      	pop	{r7, pc}
 80090b4:	200000de 	.word	0x200000de
 80090b8:	0800b994 	.word	0x0800b994
 80090bc:	0800b9c0 	.word	0x0800b9c0
 80090c0:	0800b9f0 	.word	0x0800b9f0
 80090c4:	200000dc 	.word	0x200000dc
 80090c8:	0800ba20 	.word	0x0800ba20
 80090cc:	0800ba38 	.word	0x0800ba38

080090d0 <DRV_updateFromMaster>:

void DRV_updateFromMaster(uint16_t p_deltaTime)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b08a      	sub	sp, #40	; 0x28
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	4603      	mov	r3, r0
 80090d8:	80fb      	strh	r3, [r7, #6]
  int32_t l_pidSpeedFrontLeft;
  int32_t l_pidSpeedRearRight;
  int32_t l_pidSpeedRearLeft;

  /* Ignore master board data only whenever a manual mode is selected */
  if (g_DRV_mode != DRV_MODE_MASTER_BOARD_CONTROL)
 80090da:	4b26      	ldr	r3, [pc, #152]	; (8009174 <DRV_updateFromMaster+0xa4>)
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d144      	bne.n	800916c <DRV_updateFromMaster+0x9c>
    ; /* Nothing to do */
  }
  else
  {
    /* Get measurements */
    l_measuredSpeedFrontRight = ENC_getCount(&g_DRV_encoderFrontRight);
 80090e2:	4825      	ldr	r0, [pc, #148]	; (8009178 <DRV_updateFromMaster+0xa8>)
 80090e4:	f000 fb8e 	bl	8009804 <ENC_getCount>
 80090e8:	4603      	mov	r3, r0
 80090ea:	627b      	str	r3, [r7, #36]	; 0x24
    l_measuredSpeedFrontLeft  = ENC_getCount(&g_DRV_encoderFrontLeft );
 80090ec:	4823      	ldr	r0, [pc, #140]	; (800917c <DRV_updateFromMaster+0xac>)
 80090ee:	f000 fb89 	bl	8009804 <ENC_getCount>
 80090f2:	4603      	mov	r3, r0
 80090f4:	623b      	str	r3, [r7, #32]
    l_measuredSpeedRearRight  = ENC_getCount(&g_DRV_encoderRearRight );
 80090f6:	4822      	ldr	r0, [pc, #136]	; (8009180 <DRV_updateFromMaster+0xb0>)
 80090f8:	f000 fb84 	bl	8009804 <ENC_getCount>
 80090fc:	4603      	mov	r3, r0
 80090fe:	61fb      	str	r3, [r7, #28]
    l_measuredSpeedRearLeft   = ENC_getCount(&g_DRV_encoderRearLeft  );
 8009100:	4820      	ldr	r0, [pc, #128]	; (8009184 <DRV_updateFromMaster+0xb4>)
 8009102:	f000 fb7f 	bl	8009804 <ENC_getCount>
 8009106:	4603      	mov	r3, r0
 8009108:	61bb      	str	r3, [r7, #24]

    /* Update PIDs */
    l_pidSpeedFrontRight = PID_update(&g_DRV_pidFrontRight, l_measuredSpeedFrontRight, p_deltaTime);
 800910a:	88fb      	ldrh	r3, [r7, #6]
 800910c:	461a      	mov	r2, r3
 800910e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009110:	481d      	ldr	r0, [pc, #116]	; (8009188 <DRV_updateFromMaster+0xb8>)
 8009112:	f000 fe43 	bl	8009d9c <PID_update>
 8009116:	6178      	str	r0, [r7, #20]
    l_pidSpeedFrontLeft  = PID_update(&g_DRV_pidFrontLeft , l_measuredSpeedFrontLeft , p_deltaTime);
 8009118:	88fb      	ldrh	r3, [r7, #6]
 800911a:	461a      	mov	r2, r3
 800911c:	6a39      	ldr	r1, [r7, #32]
 800911e:	481b      	ldr	r0, [pc, #108]	; (800918c <DRV_updateFromMaster+0xbc>)
 8009120:	f000 fe3c 	bl	8009d9c <PID_update>
 8009124:	6138      	str	r0, [r7, #16]
    l_pidSpeedRearRight  = PID_update(&g_DRV_pidRearRight , l_measuredSpeedRearRight , p_deltaTime);
 8009126:	88fb      	ldrh	r3, [r7, #6]
 8009128:	461a      	mov	r2, r3
 800912a:	69f9      	ldr	r1, [r7, #28]
 800912c:	4818      	ldr	r0, [pc, #96]	; (8009190 <DRV_updateFromMaster+0xc0>)
 800912e:	f000 fe35 	bl	8009d9c <PID_update>
 8009132:	60f8      	str	r0, [r7, #12]
    l_pidSpeedRearLeft   = PID_update(&g_DRV_pidRearLeft  , l_measuredSpeedRearLeft  , p_deltaTime);
 8009134:	88fb      	ldrh	r3, [r7, #6]
 8009136:	461a      	mov	r2, r3
 8009138:	69b9      	ldr	r1, [r7, #24]
 800913a:	4816      	ldr	r0, [pc, #88]	; (8009194 <DRV_updateFromMaster+0xc4>)
 800913c:	f000 fe2e 	bl	8009d9c <PID_update>
 8009140:	60b8      	str	r0, [r7, #8]

    /* Update motors */
    MTR_setSpeed(&g_DRV_motorFrontRight, l_pidSpeedFrontRight);
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	4619      	mov	r1, r3
 8009146:	4814      	ldr	r0, [pc, #80]	; (8009198 <DRV_updateFromMaster+0xc8>)
 8009148:	f000 fd96 	bl	8009c78 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_pidSpeedFrontLeft );
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	4619      	mov	r1, r3
 8009150:	4812      	ldr	r0, [pc, #72]	; (800919c <DRV_updateFromMaster+0xcc>)
 8009152:	f000 fd91 	bl	8009c78 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_pidSpeedRearRight );
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	4619      	mov	r1, r3
 800915a:	4811      	ldr	r0, [pc, #68]	; (80091a0 <DRV_updateFromMaster+0xd0>)
 800915c:	f000 fd8c 	bl	8009c78 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_pidSpeedRearLeft  );
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	4619      	mov	r1, r3
 8009164:	480f      	ldr	r0, [pc, #60]	; (80091a4 <DRV_updateFromMaster+0xd4>)
 8009166:	f000 fd87 	bl	8009c78 <MTR_setSpeed>
  }

  return;
 800916a:	bf00      	nop
 800916c:	bf00      	nop
}
 800916e:	3728      	adds	r7, #40	; 0x28
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}
 8009174:	200000de 	.word	0x200000de
 8009178:	20000230 	.word	0x20000230
 800917c:	2000023c 	.word	0x2000023c
 8009180:	20000254 	.word	0x20000254
 8009184:	20000248 	.word	0x20000248
 8009188:	200000e0 	.word	0x200000e0
 800918c:	20000110 	.word	0x20000110
 8009190:	20000170 	.word	0x20000170
 8009194:	20000140 	.word	0x20000140
 8009198:	200001a0 	.word	0x200001a0
 800919c:	200001c4 	.word	0x200001c4
 80091a0:	2000020c 	.word	0x2000020c
 80091a4:	200001e8 	.word	0x200001e8

080091a8 <DRV_getMode>:

T_DRV_MODE DRV_getMode(void)
{
 80091a8:	b480      	push	{r7}
 80091aa:	af00      	add	r7, sp, #0
  return g_DRV_mode;
 80091ac:	4b02      	ldr	r3, [pc, #8]	; (80091b8 <DRV_getMode+0x10>)
 80091ae:	781b      	ldrb	r3, [r3, #0]
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bc80      	pop	{r7}
 80091b6:	4770      	bx	lr
 80091b8:	200000de 	.word	0x200000de

080091bc <DRV_sleep>:

static void DRV_sleep(void)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	af00      	add	r7, sp, #0
  if (g_DRV_isActive == true)
 80091c0:	4b0e      	ldr	r3, [pc, #56]	; (80091fc <DRV_sleep+0x40>)
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d017      	beq.n	80091f8 <DRV_sleep+0x3c>
  {
    LOG_debug("Drive going to sleep");
 80091c8:	490d      	ldr	r1, [pc, #52]	; (8009200 <DRV_sleep+0x44>)
 80091ca:	2000      	movs	r0, #0
 80091cc:	f000 fc48 	bl	8009a60 <LOG_log>

    MTR_setSpeed(&g_DRV_motorFrontRight, 0);
 80091d0:	2100      	movs	r1, #0
 80091d2:	480c      	ldr	r0, [pc, #48]	; (8009204 <DRV_sleep+0x48>)
 80091d4:	f000 fd50 	bl	8009c78 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , 0);
 80091d8:	2100      	movs	r1, #0
 80091da:	480b      	ldr	r0, [pc, #44]	; (8009208 <DRV_sleep+0x4c>)
 80091dc:	f000 fd4c 	bl	8009c78 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , 0);
 80091e0:	2100      	movs	r1, #0
 80091e2:	480a      	ldr	r0, [pc, #40]	; (800920c <DRV_sleep+0x50>)
 80091e4:	f000 fd48 	bl	8009c78 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , 0);
 80091e8:	2100      	movs	r1, #0
 80091ea:	4809      	ldr	r0, [pc, #36]	; (8009210 <DRV_sleep+0x54>)
 80091ec:	f000 fd44 	bl	8009c78 <MTR_setSpeed>

    g_DRV_isActive = false;
 80091f0:	4b02      	ldr	r3, [pc, #8]	; (80091fc <DRV_sleep+0x40>)
 80091f2:	2200      	movs	r2, #0
 80091f4:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 80091f6:	bf00      	nop
 80091f8:	bf00      	nop
}
 80091fa:	bd80      	pop	{r7, pc}
 80091fc:	200000dd 	.word	0x200000dd
 8009200:	0800ba50 	.word	0x0800ba50
 8009204:	200001a0 	.word	0x200001a0
 8009208:	200001c4 	.word	0x200001c4
 800920c:	2000020c 	.word	0x2000020c
 8009210:	200001e8 	.word	0x200001e8

08009214 <DRV_moveForward>:

static void DRV_moveForward(uint32_t p_speed)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward @%u", l_speed);
 8009220:	68fa      	ldr	r2, [r7, #12]
 8009222:	4919      	ldr	r1, [pc, #100]	; (8009288 <DRV_moveForward+0x74>)
 8009224:	2000      	movs	r0, #0
 8009226:	f000 fc1b 	bl	8009a60 <LOG_log>

  g_DRV_isActive = true;
 800922a:	4b18      	ldr	r3, [pc, #96]	; (800928c <DRV_moveForward+0x78>)
 800922c:	2201      	movs	r2, #1
 800922e:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD);
 8009230:	2101      	movs	r1, #1
 8009232:	4817      	ldr	r0, [pc, #92]	; (8009290 <DRV_moveForward+0x7c>)
 8009234:	f000 fcb4 	bl	8009ba0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD);
 8009238:	2101      	movs	r1, #1
 800923a:	4816      	ldr	r0, [pc, #88]	; (8009294 <DRV_moveForward+0x80>)
 800923c:	f000 fcb0 	bl	8009ba0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD);
 8009240:	2101      	movs	r1, #1
 8009242:	4815      	ldr	r0, [pc, #84]	; (8009298 <DRV_moveForward+0x84>)
 8009244:	f000 fcac 	bl	8009ba0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD);
 8009248:	2101      	movs	r1, #1
 800924a:	4814      	ldr	r0, [pc, #80]	; (800929c <DRV_moveForward+0x88>)
 800924c:	f000 fca8 	bl	8009ba0 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009250:	4b13      	ldr	r3, [pc, #76]	; (80092a0 <DRV_moveForward+0x8c>)
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	f083 0301 	eor.w	r3, r3, #1
 8009258:	b2db      	uxtb	r3, r3
 800925a:	2b00      	cmp	r3, #0
 800925c:	d110      	bne.n	8009280 <DRV_moveForward+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800925e:	68f9      	ldr	r1, [r7, #12]
 8009260:	480b      	ldr	r0, [pc, #44]	; (8009290 <DRV_moveForward+0x7c>)
 8009262:	f000 fd09 	bl	8009c78 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 8009266:	68f9      	ldr	r1, [r7, #12]
 8009268:	480a      	ldr	r0, [pc, #40]	; (8009294 <DRV_moveForward+0x80>)
 800926a:	f000 fd05 	bl	8009c78 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800926e:	68f9      	ldr	r1, [r7, #12]
 8009270:	4809      	ldr	r0, [pc, #36]	; (8009298 <DRV_moveForward+0x84>)
 8009272:	f000 fd01 	bl	8009c78 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 8009276:	68f9      	ldr	r1, [r7, #12]
 8009278:	4808      	ldr	r0, [pc, #32]	; (800929c <DRV_moveForward+0x88>)
 800927a:	f000 fcfd 	bl	8009c78 <MTR_setSpeed>
  }

  return;
 800927e:	bf00      	nop
 8009280:	bf00      	nop
}
 8009282:	3710      	adds	r7, #16
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}
 8009288:	0800ba68 	.word	0x0800ba68
 800928c:	200000dd 	.word	0x200000dd
 8009290:	200001a0 	.word	0x200001a0
 8009294:	200001c4 	.word	0x200001c4
 8009298:	2000020c 	.word	0x2000020c
 800929c:	200001e8 	.word	0x200001e8
 80092a0:	200000dc 	.word	0x200000dc

080092a4 <DRV_moveBackward>:

static void DRV_moveBackward(uint32_t p_speed)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward @%u", l_speed);
 80092b0:	68fa      	ldr	r2, [r7, #12]
 80092b2:	4919      	ldr	r1, [pc, #100]	; (8009318 <DRV_moveBackward+0x74>)
 80092b4:	2000      	movs	r0, #0
 80092b6:	f000 fbd3 	bl	8009a60 <LOG_log>

  g_DRV_isActive = true;
 80092ba:	4b18      	ldr	r3, [pc, #96]	; (800931c <DRV_moveBackward+0x78>)
 80092bc:	2201      	movs	r2, #1
 80092be:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 80092c0:	2102      	movs	r1, #2
 80092c2:	4817      	ldr	r0, [pc, #92]	; (8009320 <DRV_moveBackward+0x7c>)
 80092c4:	f000 fc6c 	bl	8009ba0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 80092c8:	2102      	movs	r1, #2
 80092ca:	4816      	ldr	r0, [pc, #88]	; (8009324 <DRV_moveBackward+0x80>)
 80092cc:	f000 fc68 	bl	8009ba0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 80092d0:	2102      	movs	r1, #2
 80092d2:	4815      	ldr	r0, [pc, #84]	; (8009328 <DRV_moveBackward+0x84>)
 80092d4:	f000 fc64 	bl	8009ba0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 80092d8:	2102      	movs	r1, #2
 80092da:	4814      	ldr	r0, [pc, #80]	; (800932c <DRV_moveBackward+0x88>)
 80092dc:	f000 fc60 	bl	8009ba0 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 80092e0:	4b13      	ldr	r3, [pc, #76]	; (8009330 <DRV_moveBackward+0x8c>)
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	f083 0301 	eor.w	r3, r3, #1
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d110      	bne.n	8009310 <DRV_moveBackward+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 80092ee:	68f9      	ldr	r1, [r7, #12]
 80092f0:	480b      	ldr	r0, [pc, #44]	; (8009320 <DRV_moveBackward+0x7c>)
 80092f2:	f000 fcc1 	bl	8009c78 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 80092f6:	68f9      	ldr	r1, [r7, #12]
 80092f8:	480a      	ldr	r0, [pc, #40]	; (8009324 <DRV_moveBackward+0x80>)
 80092fa:	f000 fcbd 	bl	8009c78 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 80092fe:	68f9      	ldr	r1, [r7, #12]
 8009300:	4809      	ldr	r0, [pc, #36]	; (8009328 <DRV_moveBackward+0x84>)
 8009302:	f000 fcb9 	bl	8009c78 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 8009306:	68f9      	ldr	r1, [r7, #12]
 8009308:	4808      	ldr	r0, [pc, #32]	; (800932c <DRV_moveBackward+0x88>)
 800930a:	f000 fcb5 	bl	8009c78 <MTR_setSpeed>
  }

  return;
 800930e:	bf00      	nop
 8009310:	bf00      	nop
}
 8009312:	3710      	adds	r7, #16
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}
 8009318:	0800ba7c 	.word	0x0800ba7c
 800931c:	200000dd 	.word	0x200000dd
 8009320:	200001a0 	.word	0x200001a0
 8009324:	200001c4 	.word	0x200001c4
 8009328:	2000020c 	.word	0x2000020c
 800932c:	200001e8 	.word	0x200001e8
 8009330:	200000dc 	.word	0x200000dc

08009334 <DRV_moveForwardRight>:

static void DRV_moveForwardRight (uint32_t p_speed)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward-right @%u", l_speed);
 8009340:	68fa      	ldr	r2, [r7, #12]
 8009342:	4915      	ldr	r1, [pc, #84]	; (8009398 <DRV_moveForwardRight+0x64>)
 8009344:	2000      	movs	r0, #0
 8009346:	f000 fb8b 	bl	8009a60 <LOG_log>

  g_DRV_isActive = true;
 800934a:	4b14      	ldr	r3, [pc, #80]	; (800939c <DRV_moveForwardRight+0x68>)
 800934c:	2201      	movs	r2, #1
 800934e:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontLeft, MTR_DIRECTION_FORWARD);
 8009350:	2101      	movs	r1, #1
 8009352:	4813      	ldr	r0, [pc, #76]	; (80093a0 <DRV_moveForwardRight+0x6c>)
 8009354:	f000 fc24 	bl	8009ba0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight, MTR_DIRECTION_FORWARD);
 8009358:	2101      	movs	r1, #1
 800935a:	4812      	ldr	r0, [pc, #72]	; (80093a4 <DRV_moveForwardRight+0x70>)
 800935c:	f000 fc20 	bl	8009ba0 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009360:	4b11      	ldr	r3, [pc, #68]	; (80093a8 <DRV_moveForwardRight+0x74>)
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	f083 0301 	eor.w	r3, r3, #1
 8009368:	b2db      	uxtb	r3, r3
 800936a:	2b00      	cmp	r3, #0
 800936c:	d110      	bne.n	8009390 <DRV_moveForwardRight+0x5c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight,       0);
 800936e:	2100      	movs	r1, #0
 8009370:	480e      	ldr	r0, [pc, #56]	; (80093ac <DRV_moveForwardRight+0x78>)
 8009372:	f000 fc81 	bl	8009c78 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 8009376:	68f9      	ldr	r1, [r7, #12]
 8009378:	4809      	ldr	r0, [pc, #36]	; (80093a0 <DRV_moveForwardRight+0x6c>)
 800937a:	f000 fc7d 	bl	8009c78 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800937e:	68f9      	ldr	r1, [r7, #12]
 8009380:	4808      	ldr	r0, [pc, #32]	; (80093a4 <DRV_moveForwardRight+0x70>)
 8009382:	f000 fc79 	bl	8009c78 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  ,       0);
 8009386:	2100      	movs	r1, #0
 8009388:	4809      	ldr	r0, [pc, #36]	; (80093b0 <DRV_moveForwardRight+0x7c>)
 800938a:	f000 fc75 	bl	8009c78 <MTR_setSpeed>
  }

  return;
 800938e:	bf00      	nop
 8009390:	bf00      	nop
}
 8009392:	3710      	adds	r7, #16
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	0800ba90 	.word	0x0800ba90
 800939c:	200000dd 	.word	0x200000dd
 80093a0:	200001c4 	.word	0x200001c4
 80093a4:	2000020c 	.word	0x2000020c
 80093a8:	200000dc 	.word	0x200000dc
 80093ac:	200001a0 	.word	0x200001a0
 80093b0:	200001e8 	.word	0x200001e8

080093b4 <DRV_moveForwardLeft>:

static void DRV_moveForwardLeft  (uint32_t p_speed)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward-left @%u", l_speed);
 80093c0:	68fa      	ldr	r2, [r7, #12]
 80093c2:	4915      	ldr	r1, [pc, #84]	; (8009418 <DRV_moveForwardLeft+0x64>)
 80093c4:	2000      	movs	r0, #0
 80093c6:	f000 fb4b 	bl	8009a60 <LOG_log>

  g_DRV_isActive = true;
 80093ca:	4b14      	ldr	r3, [pc, #80]	; (800941c <DRV_moveForwardLeft+0x68>)
 80093cc:	2201      	movs	r2, #1
 80093ce:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD);
 80093d0:	2101      	movs	r1, #1
 80093d2:	4813      	ldr	r0, [pc, #76]	; (8009420 <DRV_moveForwardLeft+0x6c>)
 80093d4:	f000 fbe4 	bl	8009ba0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD);
 80093d8:	2101      	movs	r1, #1
 80093da:	4812      	ldr	r0, [pc, #72]	; (8009424 <DRV_moveForwardLeft+0x70>)
 80093dc:	f000 fbe0 	bl	8009ba0 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 80093e0:	4b11      	ldr	r3, [pc, #68]	; (8009428 <DRV_moveForwardLeft+0x74>)
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	f083 0301 	eor.w	r3, r3, #1
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d110      	bne.n	8009410 <DRV_moveForwardLeft+0x5c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 80093ee:	68f9      	ldr	r1, [r7, #12]
 80093f0:	480b      	ldr	r0, [pc, #44]	; (8009420 <DRV_moveForwardLeft+0x6c>)
 80093f2:	f000 fc41 	bl	8009c78 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft ,       0);
 80093f6:	2100      	movs	r1, #0
 80093f8:	480c      	ldr	r0, [pc, #48]	; (800942c <DRV_moveForwardLeft+0x78>)
 80093fa:	f000 fc3d 	bl	8009c78 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight ,       0);
 80093fe:	2100      	movs	r1, #0
 8009400:	480b      	ldr	r0, [pc, #44]	; (8009430 <DRV_moveForwardLeft+0x7c>)
 8009402:	f000 fc39 	bl	8009c78 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 8009406:	68f9      	ldr	r1, [r7, #12]
 8009408:	4806      	ldr	r0, [pc, #24]	; (8009424 <DRV_moveForwardLeft+0x70>)
 800940a:	f000 fc35 	bl	8009c78 <MTR_setSpeed>
  }

  return;
 800940e:	bf00      	nop
 8009410:	bf00      	nop
}
 8009412:	3710      	adds	r7, #16
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}
 8009418:	0800baac 	.word	0x0800baac
 800941c:	200000dd 	.word	0x200000dd
 8009420:	200001a0 	.word	0x200001a0
 8009424:	200001e8 	.word	0x200001e8
 8009428:	200000dc 	.word	0x200000dc
 800942c:	200001c4 	.word	0x200001c4
 8009430:	2000020c 	.word	0x2000020c

08009434 <DRV_moveBackwardRight>:

static void DRV_moveBackwardRight(uint32_t p_speed)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward-right @%u", l_speed);
 8009440:	68fa      	ldr	r2, [r7, #12]
 8009442:	4915      	ldr	r1, [pc, #84]	; (8009498 <DRV_moveBackwardRight+0x64>)
 8009444:	2000      	movs	r0, #0
 8009446:	f000 fb0b 	bl	8009a60 <LOG_log>

  g_DRV_isActive = true;
 800944a:	4b14      	ldr	r3, [pc, #80]	; (800949c <DRV_moveBackwardRight+0x68>)
 800944c:	2201      	movs	r2, #1
 800944e:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 8009450:	2102      	movs	r1, #2
 8009452:	4813      	ldr	r0, [pc, #76]	; (80094a0 <DRV_moveBackwardRight+0x6c>)
 8009454:	f000 fba4 	bl	8009ba0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 8009458:	2102      	movs	r1, #2
 800945a:	4812      	ldr	r0, [pc, #72]	; (80094a4 <DRV_moveBackwardRight+0x70>)
 800945c:	f000 fba0 	bl	8009ba0 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009460:	4b11      	ldr	r3, [pc, #68]	; (80094a8 <DRV_moveBackwardRight+0x74>)
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	f083 0301 	eor.w	r3, r3, #1
 8009468:	b2db      	uxtb	r3, r3
 800946a:	2b00      	cmp	r3, #0
 800946c:	d110      	bne.n	8009490 <DRV_moveBackwardRight+0x5c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800946e:	68f9      	ldr	r1, [r7, #12]
 8009470:	480b      	ldr	r0, [pc, #44]	; (80094a0 <DRV_moveBackwardRight+0x6c>)
 8009472:	f000 fc01 	bl	8009c78 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft ,       0);
 8009476:	2100      	movs	r1, #0
 8009478:	480c      	ldr	r0, [pc, #48]	; (80094ac <DRV_moveBackwardRight+0x78>)
 800947a:	f000 fbfd 	bl	8009c78 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight ,       0);
 800947e:	2100      	movs	r1, #0
 8009480:	480b      	ldr	r0, [pc, #44]	; (80094b0 <DRV_moveBackwardRight+0x7c>)
 8009482:	f000 fbf9 	bl	8009c78 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 8009486:	68f9      	ldr	r1, [r7, #12]
 8009488:	4806      	ldr	r0, [pc, #24]	; (80094a4 <DRV_moveBackwardRight+0x70>)
 800948a:	f000 fbf5 	bl	8009c78 <MTR_setSpeed>
  }

  return;
 800948e:	bf00      	nop
 8009490:	bf00      	nop
}
 8009492:	3710      	adds	r7, #16
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	0800bac4 	.word	0x0800bac4
 800949c:	200000dd 	.word	0x200000dd
 80094a0:	200001a0 	.word	0x200001a0
 80094a4:	200001e8 	.word	0x200001e8
 80094a8:	200000dc 	.word	0x200000dc
 80094ac:	200001c4 	.word	0x200001c4
 80094b0:	2000020c 	.word	0x2000020c

080094b4 <DRV_moveBackwardLeft>:

static void DRV_moveBackwardLeft (uint32_t p_speed)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward-left @%u", l_speed);
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	4915      	ldr	r1, [pc, #84]	; (8009518 <DRV_moveBackwardLeft+0x64>)
 80094c4:	2000      	movs	r0, #0
 80094c6:	f000 facb 	bl	8009a60 <LOG_log>

  g_DRV_isActive = true;
 80094ca:	4b14      	ldr	r3, [pc, #80]	; (800951c <DRV_moveBackwardLeft+0x68>)
 80094cc:	2201      	movs	r2, #1
 80094ce:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontLeft, MTR_DIRECTION_BACKWARD);
 80094d0:	2102      	movs	r1, #2
 80094d2:	4813      	ldr	r0, [pc, #76]	; (8009520 <DRV_moveBackwardLeft+0x6c>)
 80094d4:	f000 fb64 	bl	8009ba0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight, MTR_DIRECTION_BACKWARD);
 80094d8:	2102      	movs	r1, #2
 80094da:	4812      	ldr	r0, [pc, #72]	; (8009524 <DRV_moveBackwardLeft+0x70>)
 80094dc:	f000 fb60 	bl	8009ba0 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 80094e0:	4b11      	ldr	r3, [pc, #68]	; (8009528 <DRV_moveBackwardLeft+0x74>)
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	f083 0301 	eor.w	r3, r3, #1
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d110      	bne.n	8009510 <DRV_moveBackwardLeft+0x5c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight,       0);
 80094ee:	2100      	movs	r1, #0
 80094f0:	480e      	ldr	r0, [pc, #56]	; (800952c <DRV_moveBackwardLeft+0x78>)
 80094f2:	f000 fbc1 	bl	8009c78 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 80094f6:	68f9      	ldr	r1, [r7, #12]
 80094f8:	4809      	ldr	r0, [pc, #36]	; (8009520 <DRV_moveBackwardLeft+0x6c>)
 80094fa:	f000 fbbd 	bl	8009c78 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 80094fe:	68f9      	ldr	r1, [r7, #12]
 8009500:	4808      	ldr	r0, [pc, #32]	; (8009524 <DRV_moveBackwardLeft+0x70>)
 8009502:	f000 fbb9 	bl	8009c78 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  ,       0);
 8009506:	2100      	movs	r1, #0
 8009508:	4809      	ldr	r0, [pc, #36]	; (8009530 <DRV_moveBackwardLeft+0x7c>)
 800950a:	f000 fbb5 	bl	8009c78 <MTR_setSpeed>
  }

  return;
 800950e:	bf00      	nop
 8009510:	bf00      	nop
}
 8009512:	3710      	adds	r7, #16
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	0800bae0 	.word	0x0800bae0
 800951c:	200000dd 	.word	0x200000dd
 8009520:	200001c4 	.word	0x200001c4
 8009524:	2000020c 	.word	0x2000020c
 8009528:	200000dc 	.word	0x200000dc
 800952c:	200001a0 	.word	0x200001a0
 8009530:	200001e8 	.word	0x200001e8

08009534 <DRV_turnLeft>:

static void DRV_turnLeft(uint32_t p_speed)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	60fb      	str	r3, [r7, #12]

  LOG_debug("Turning left @%u", l_speed);
 8009540:	68fa      	ldr	r2, [r7, #12]
 8009542:	4919      	ldr	r1, [pc, #100]	; (80095a8 <DRV_turnLeft+0x74>)
 8009544:	2000      	movs	r0, #0
 8009546:	f000 fa8b 	bl	8009a60 <LOG_log>

  g_DRV_isActive = true;
 800954a:	4b18      	ldr	r3, [pc, #96]	; (80095ac <DRV_turnLeft+0x78>)
 800954c:	2201      	movs	r2, #1
 800954e:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD );
 8009550:	2101      	movs	r1, #1
 8009552:	4817      	ldr	r0, [pc, #92]	; (80095b0 <DRV_turnLeft+0x7c>)
 8009554:	f000 fb24 	bl	8009ba0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 8009558:	2102      	movs	r1, #2
 800955a:	4816      	ldr	r0, [pc, #88]	; (80095b4 <DRV_turnLeft+0x80>)
 800955c:	f000 fb20 	bl	8009ba0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD );
 8009560:	2101      	movs	r1, #1
 8009562:	4815      	ldr	r0, [pc, #84]	; (80095b8 <DRV_turnLeft+0x84>)
 8009564:	f000 fb1c 	bl	8009ba0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 8009568:	2102      	movs	r1, #2
 800956a:	4814      	ldr	r0, [pc, #80]	; (80095bc <DRV_turnLeft+0x88>)
 800956c:	f000 fb18 	bl	8009ba0 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009570:	4b13      	ldr	r3, [pc, #76]	; (80095c0 <DRV_turnLeft+0x8c>)
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	f083 0301 	eor.w	r3, r3, #1
 8009578:	b2db      	uxtb	r3, r3
 800957a:	2b00      	cmp	r3, #0
 800957c:	d110      	bne.n	80095a0 <DRV_turnLeft+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800957e:	68f9      	ldr	r1, [r7, #12]
 8009580:	480b      	ldr	r0, [pc, #44]	; (80095b0 <DRV_turnLeft+0x7c>)
 8009582:	f000 fb79 	bl	8009c78 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 8009586:	68f9      	ldr	r1, [r7, #12]
 8009588:	480a      	ldr	r0, [pc, #40]	; (80095b4 <DRV_turnLeft+0x80>)
 800958a:	f000 fb75 	bl	8009c78 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800958e:	68f9      	ldr	r1, [r7, #12]
 8009590:	4809      	ldr	r0, [pc, #36]	; (80095b8 <DRV_turnLeft+0x84>)
 8009592:	f000 fb71 	bl	8009c78 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 8009596:	68f9      	ldr	r1, [r7, #12]
 8009598:	4808      	ldr	r0, [pc, #32]	; (80095bc <DRV_turnLeft+0x88>)
 800959a:	f000 fb6d 	bl	8009c78 <MTR_setSpeed>
  }

  return;
 800959e:	bf00      	nop
 80095a0:	bf00      	nop
}
 80095a2:	3710      	adds	r7, #16
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	0800bafc 	.word	0x0800bafc
 80095ac:	200000dd 	.word	0x200000dd
 80095b0:	200001a0 	.word	0x200001a0
 80095b4:	200001c4 	.word	0x200001c4
 80095b8:	2000020c 	.word	0x2000020c
 80095bc:	200001e8 	.word	0x200001e8
 80095c0:	200000dc 	.word	0x200000dc

080095c4 <DRV_turnRight>:

static void DRV_turnRight(uint32_t p_speed)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	60fb      	str	r3, [r7, #12]

  LOG_debug("Turning right @%u", l_speed);
 80095d0:	68fa      	ldr	r2, [r7, #12]
 80095d2:	4919      	ldr	r1, [pc, #100]	; (8009638 <DRV_turnRight+0x74>)
 80095d4:	2000      	movs	r0, #0
 80095d6:	f000 fa43 	bl	8009a60 <LOG_log>

  g_DRV_isActive = true;
 80095da:	4b18      	ldr	r3, [pc, #96]	; (800963c <DRV_turnRight+0x78>)
 80095dc:	2201      	movs	r2, #1
 80095de:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 80095e0:	2102      	movs	r1, #2
 80095e2:	4817      	ldr	r0, [pc, #92]	; (8009640 <DRV_turnRight+0x7c>)
 80095e4:	f000 fadc 	bl	8009ba0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD );
 80095e8:	2101      	movs	r1, #1
 80095ea:	4816      	ldr	r0, [pc, #88]	; (8009644 <DRV_turnRight+0x80>)
 80095ec:	f000 fad8 	bl	8009ba0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 80095f0:	2102      	movs	r1, #2
 80095f2:	4815      	ldr	r0, [pc, #84]	; (8009648 <DRV_turnRight+0x84>)
 80095f4:	f000 fad4 	bl	8009ba0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD );
 80095f8:	2101      	movs	r1, #1
 80095fa:	4814      	ldr	r0, [pc, #80]	; (800964c <DRV_turnRight+0x88>)
 80095fc:	f000 fad0 	bl	8009ba0 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009600:	4b13      	ldr	r3, [pc, #76]	; (8009650 <DRV_turnRight+0x8c>)
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	f083 0301 	eor.w	r3, r3, #1
 8009608:	b2db      	uxtb	r3, r3
 800960a:	2b00      	cmp	r3, #0
 800960c:	d110      	bne.n	8009630 <DRV_turnRight+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800960e:	68f9      	ldr	r1, [r7, #12]
 8009610:	480b      	ldr	r0, [pc, #44]	; (8009640 <DRV_turnRight+0x7c>)
 8009612:	f000 fb31 	bl	8009c78 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 8009616:	68f9      	ldr	r1, [r7, #12]
 8009618:	480a      	ldr	r0, [pc, #40]	; (8009644 <DRV_turnRight+0x80>)
 800961a:	f000 fb2d 	bl	8009c78 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800961e:	68f9      	ldr	r1, [r7, #12]
 8009620:	4809      	ldr	r0, [pc, #36]	; (8009648 <DRV_turnRight+0x84>)
 8009622:	f000 fb29 	bl	8009c78 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 8009626:	68f9      	ldr	r1, [r7, #12]
 8009628:	4808      	ldr	r0, [pc, #32]	; (800964c <DRV_turnRight+0x88>)
 800962a:	f000 fb25 	bl	8009c78 <MTR_setSpeed>
  }

  return;
 800962e:	bf00      	nop
 8009630:	bf00      	nop
}
 8009632:	3710      	adds	r7, #16
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	0800bb10 	.word	0x0800bb10
 800963c:	200000dd 	.word	0x200000dd
 8009640:	200001a0 	.word	0x200001a0
 8009644:	200001c4 	.word	0x200001c4
 8009648:	2000020c 	.word	0x2000020c
 800964c:	200001e8 	.word	0x200001e8
 8009650:	200000dc 	.word	0x200000dc

08009654 <DRV_translateLeft>:

static void DRV_translateLeft(uint32_t p_speed)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	60fb      	str	r3, [r7, #12]

  LOG_debug("Translating left @%u", l_speed);
 8009660:	68fa      	ldr	r2, [r7, #12]
 8009662:	4919      	ldr	r1, [pc, #100]	; (80096c8 <DRV_translateLeft+0x74>)
 8009664:	2000      	movs	r0, #0
 8009666:	f000 f9fb 	bl	8009a60 <LOG_log>

  g_DRV_isActive = true;
 800966a:	4b18      	ldr	r3, [pc, #96]	; (80096cc <DRV_translateLeft+0x78>)
 800966c:	2201      	movs	r2, #1
 800966e:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD );
 8009670:	2101      	movs	r1, #1
 8009672:	4817      	ldr	r0, [pc, #92]	; (80096d0 <DRV_translateLeft+0x7c>)
 8009674:	f000 fa94 	bl	8009ba0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 8009678:	2102      	movs	r1, #2
 800967a:	4816      	ldr	r0, [pc, #88]	; (80096d4 <DRV_translateLeft+0x80>)
 800967c:	f000 fa90 	bl	8009ba0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 8009680:	2102      	movs	r1, #2
 8009682:	4815      	ldr	r0, [pc, #84]	; (80096d8 <DRV_translateLeft+0x84>)
 8009684:	f000 fa8c 	bl	8009ba0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD );
 8009688:	2101      	movs	r1, #1
 800968a:	4814      	ldr	r0, [pc, #80]	; (80096dc <DRV_translateLeft+0x88>)
 800968c:	f000 fa88 	bl	8009ba0 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009690:	4b13      	ldr	r3, [pc, #76]	; (80096e0 <DRV_translateLeft+0x8c>)
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	f083 0301 	eor.w	r3, r3, #1
 8009698:	b2db      	uxtb	r3, r3
 800969a:	2b00      	cmp	r3, #0
 800969c:	d110      	bne.n	80096c0 <DRV_translateLeft+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800969e:	68f9      	ldr	r1, [r7, #12]
 80096a0:	480b      	ldr	r0, [pc, #44]	; (80096d0 <DRV_translateLeft+0x7c>)
 80096a2:	f000 fae9 	bl	8009c78 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 80096a6:	68f9      	ldr	r1, [r7, #12]
 80096a8:	480a      	ldr	r0, [pc, #40]	; (80096d4 <DRV_translateLeft+0x80>)
 80096aa:	f000 fae5 	bl	8009c78 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 80096ae:	68f9      	ldr	r1, [r7, #12]
 80096b0:	4809      	ldr	r0, [pc, #36]	; (80096d8 <DRV_translateLeft+0x84>)
 80096b2:	f000 fae1 	bl	8009c78 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 80096b6:	68f9      	ldr	r1, [r7, #12]
 80096b8:	4808      	ldr	r0, [pc, #32]	; (80096dc <DRV_translateLeft+0x88>)
 80096ba:	f000 fadd 	bl	8009c78 <MTR_setSpeed>
  }

  return;
 80096be:	bf00      	nop
 80096c0:	bf00      	nop
}
 80096c2:	3710      	adds	r7, #16
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	0800bb24 	.word	0x0800bb24
 80096cc:	200000dd 	.word	0x200000dd
 80096d0:	200001a0 	.word	0x200001a0
 80096d4:	200001c4 	.word	0x200001c4
 80096d8:	2000020c 	.word	0x2000020c
 80096dc:	200001e8 	.word	0x200001e8
 80096e0:	200000dc 	.word	0x200000dc

080096e4 <DRV_translateRight>:

static void DRV_translateRight(uint32_t p_speed)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	60fb      	str	r3, [r7, #12]

  LOG_debug("Translating right @%u", l_speed);
 80096f0:	68fa      	ldr	r2, [r7, #12]
 80096f2:	4919      	ldr	r1, [pc, #100]	; (8009758 <DRV_translateRight+0x74>)
 80096f4:	2000      	movs	r0, #0
 80096f6:	f000 f9b3 	bl	8009a60 <LOG_log>

  g_DRV_isActive = true;
 80096fa:	4b18      	ldr	r3, [pc, #96]	; (800975c <DRV_translateRight+0x78>)
 80096fc:	2201      	movs	r2, #1
 80096fe:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 8009700:	2102      	movs	r1, #2
 8009702:	4817      	ldr	r0, [pc, #92]	; (8009760 <DRV_translateRight+0x7c>)
 8009704:	f000 fa4c 	bl	8009ba0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD );
 8009708:	2101      	movs	r1, #1
 800970a:	4816      	ldr	r0, [pc, #88]	; (8009764 <DRV_translateRight+0x80>)
 800970c:	f000 fa48 	bl	8009ba0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD );
 8009710:	2101      	movs	r1, #1
 8009712:	4815      	ldr	r0, [pc, #84]	; (8009768 <DRV_translateRight+0x84>)
 8009714:	f000 fa44 	bl	8009ba0 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 8009718:	2102      	movs	r1, #2
 800971a:	4814      	ldr	r0, [pc, #80]	; (800976c <DRV_translateRight+0x88>)
 800971c:	f000 fa40 	bl	8009ba0 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009720:	4b13      	ldr	r3, [pc, #76]	; (8009770 <DRV_translateRight+0x8c>)
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	f083 0301 	eor.w	r3, r3, #1
 8009728:	b2db      	uxtb	r3, r3
 800972a:	2b00      	cmp	r3, #0
 800972c:	d110      	bne.n	8009750 <DRV_translateRight+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800972e:	68f9      	ldr	r1, [r7, #12]
 8009730:	480b      	ldr	r0, [pc, #44]	; (8009760 <DRV_translateRight+0x7c>)
 8009732:	f000 faa1 	bl	8009c78 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 8009736:	68f9      	ldr	r1, [r7, #12]
 8009738:	480a      	ldr	r0, [pc, #40]	; (8009764 <DRV_translateRight+0x80>)
 800973a:	f000 fa9d 	bl	8009c78 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800973e:	68f9      	ldr	r1, [r7, #12]
 8009740:	4809      	ldr	r0, [pc, #36]	; (8009768 <DRV_translateRight+0x84>)
 8009742:	f000 fa99 	bl	8009c78 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 8009746:	68f9      	ldr	r1, [r7, #12]
 8009748:	4808      	ldr	r0, [pc, #32]	; (800976c <DRV_translateRight+0x88>)
 800974a:	f000 fa95 	bl	8009c78 <MTR_setSpeed>
  }

  return;
 800974e:	bf00      	nop
 8009750:	bf00      	nop
}
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	0800bb3c 	.word	0x0800bb3c
 800975c:	200000dd 	.word	0x200000dd
 8009760:	200001a0 	.word	0x200001a0
 8009764:	200001c4 	.word	0x200001c4
 8009768:	2000020c 	.word	0x2000020c
 800976c:	200001e8 	.word	0x200001e8
 8009770:	200000dc 	.word	0x200000dc

08009774 <ENC_init>:
#include "encoder.h"

#include "log.h"

void ENC_init(T_ENC_Handle *p_handle, char *p_name, bool p_invertOnUpdate, TIM_HandleTypeDef *p_encoderTimerHandle)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	603b      	str	r3, [r7, #0]
 8009780:	4613      	mov	r3, r2
 8009782:	71fb      	strb	r3, [r7, #7]
  LOG_info("Initializing Encoder module for %s", p_name);
 8009784:	68ba      	ldr	r2, [r7, #8]
 8009786:	490a      	ldr	r1, [pc, #40]	; (80097b0 <ENC_init+0x3c>)
 8009788:	2001      	movs	r0, #1
 800978a:	f000 f969 	bl	8009a60 <LOG_log>

  p_handle->name           = p_name;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	68ba      	ldr	r2, [r7, #8]
 8009792:	601a      	str	r2, [r3, #0]
  p_handle->invertOnUpdate = p_invertOnUpdate;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	79fa      	ldrb	r2, [r7, #7]
 8009798:	719a      	strb	r2, [r3, #6]
  p_handle->timerHandle    = p_encoderTimerHandle;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	683a      	ldr	r2, [r7, #0]
 800979e:	609a      	str	r2, [r3, #8]

  ENC_reset(p_handle);
 80097a0:	68f8      	ldr	r0, [r7, #12]
 80097a2:	f000 f807 	bl	80097b4 <ENC_reset>

  return;
 80097a6:	bf00      	nop
}
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	0800bb54 	.word	0x0800bb54

080097b4 <ENC_reset>:

void ENC_reset(T_ENC_Handle *p_handle)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b083      	sub	sp, #12
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  p_handle->value = 0;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	809a      	strh	r2, [r3, #4]

  return;
 80097c2:	bf00      	nop
}
 80097c4:	370c      	adds	r7, #12
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bc80      	pop	{r7}
 80097ca:	4770      	bx	lr

080097cc <ENC_update>:

void ENC_update(T_ENC_Handle *p_handle, int16_t p_value)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	460b      	mov	r3, r1
 80097d6:	807b      	strh	r3, [r7, #2]
  if (p_handle->invertOnUpdate == false)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	799b      	ldrb	r3, [r3, #6]
 80097dc:	f083 0301 	eor.w	r3, r3, #1
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d003      	beq.n	80097ee <ENC_update+0x22>
  {
    p_handle->value = p_value;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	887a      	ldrh	r2, [r7, #2]
 80097ea:	809a      	strh	r2, [r3, #4]
  else
  {
    p_handle->value = -p_value;
  }

  return;
 80097ec:	e006      	b.n	80097fc <ENC_update+0x30>
    p_handle->value = -p_value;
 80097ee:	887b      	ldrh	r3, [r7, #2]
 80097f0:	425b      	negs	r3, r3
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	b21a      	sxth	r2, r3
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	809a      	strh	r2, [r3, #4]
  return;
 80097fa:	bf00      	nop
}
 80097fc:	370c      	adds	r7, #12
 80097fe:	46bd      	mov	sp, r7
 8009800:	bc80      	pop	{r7}
 8009802:	4770      	bx	lr

08009804 <ENC_getCount>:

int16_t ENC_getCount(T_ENC_Handle *p_handle)
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  return p_handle->value;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 8009812:	4618      	mov	r0, r3
 8009814:	370c      	adds	r7, #12
 8009816:	46bd      	mov	sp, r7
 8009818:	bc80      	pop	{r7}
 800981a:	4770      	bx	lr

0800981c <LED_setMode>:
#include "log.h"

static T_LED_MODE g_LED_mode = LED_MODE_BLINK_SLOW;

void LED_setMode(T_LED_MODE p_mode)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b082      	sub	sp, #8
 8009820:	af00      	add	r7, sp, #0
 8009822:	4603      	mov	r3, r0
 8009824:	71fb      	strb	r3, [r7, #7]
  if (p_mode != g_LED_mode)
 8009826:	4b1b      	ldr	r3, [pc, #108]	; (8009894 <LED_setMode+0x78>)
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	79fa      	ldrb	r2, [r7, #7]
 800982c:	429a      	cmp	r2, r3
 800982e:	d02d      	beq.n	800988c <LED_setMode+0x70>
  {
    switch (p_mode)
 8009830:	79fb      	ldrb	r3, [r7, #7]
 8009832:	2b04      	cmp	r3, #4
 8009834:	d825      	bhi.n	8009882 <LED_setMode+0x66>
 8009836:	a201      	add	r2, pc, #4	; (adr r2, 800983c <LED_setMode+0x20>)
 8009838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800983c:	08009851 	.word	0x08009851
 8009840:	0800985b 	.word	0x0800985b
 8009844:	08009865 	.word	0x08009865
 8009848:	0800986f 	.word	0x0800986f
 800984c:	08009879 	.word	0x08009879
    {
      case LED_MODE_FORCED_OFF:
        LOG_info("Turning LED OFF");
 8009850:	4911      	ldr	r1, [pc, #68]	; (8009898 <LED_setMode+0x7c>)
 8009852:	2001      	movs	r0, #1
 8009854:	f000 f904 	bl	8009a60 <LOG_log>
        break;
 8009858:	e014      	b.n	8009884 <LED_setMode+0x68>

      case LED_MODE_FORCED_ON:
        LOG_info("Turning LED ON");
 800985a:	4910      	ldr	r1, [pc, #64]	; (800989c <LED_setMode+0x80>)
 800985c:	2001      	movs	r0, #1
 800985e:	f000 f8ff 	bl	8009a60 <LOG_log>
        break;
 8009862:	e00f      	b.n	8009884 <LED_setMode+0x68>

      case LED_MODE_BLINK_SLOW:
        LOG_info("Setting LED to blink slow");
 8009864:	490e      	ldr	r1, [pc, #56]	; (80098a0 <LED_setMode+0x84>)
 8009866:	2001      	movs	r0, #1
 8009868:	f000 f8fa 	bl	8009a60 <LOG_log>
        break;
 800986c:	e00a      	b.n	8009884 <LED_setMode+0x68>

      case LED_MODE_BLINK_MEDIUM:
        LOG_info("Setting LED to blink medium");
 800986e:	490d      	ldr	r1, [pc, #52]	; (80098a4 <LED_setMode+0x88>)
 8009870:	2001      	movs	r0, #1
 8009872:	f000 f8f5 	bl	8009a60 <LOG_log>
        break;
 8009876:	e005      	b.n	8009884 <LED_setMode+0x68>

      case LED_MODE_BLINK_FAST:
        LOG_info("Setting LED to blink fast");
 8009878:	490b      	ldr	r1, [pc, #44]	; (80098a8 <LED_setMode+0x8c>)
 800987a:	2001      	movs	r0, #1
 800987c:	f000 f8f0 	bl	8009a60 <LOG_log>
        break;
 8009880:	e000      	b.n	8009884 <LED_setMode+0x68>

      default:
        ; /* Nothing to do */
        break;
 8009882:	bf00      	nop
    }

    g_LED_mode = p_mode;
 8009884:	4a03      	ldr	r2, [pc, #12]	; (8009894 <LED_setMode+0x78>)
 8009886:	79fb      	ldrb	r3, [r7, #7]
 8009888:	7013      	strb	r3, [r2, #0]
  else
  {
    ; /* Nothong to do */
  }

  return;
 800988a:	bf00      	nop
 800988c:	bf00      	nop
}
 800988e:	3708      	adds	r7, #8
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}
 8009894:	20000009 	.word	0x20000009
 8009898:	0800bb78 	.word	0x0800bb78
 800989c:	0800bb88 	.word	0x0800bb88
 80098a0:	0800bb98 	.word	0x0800bb98
 80098a4:	0800bbb4 	.word	0x0800bbb4
 80098a8:	0800bbd0 	.word	0x0800bbd0

080098ac <LED_update>:
{
  return g_LED_mode;
}

void LED_update(void)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	af00      	add	r7, sp, #0
  static uint32_t l_blinkCounter = 0;

  switch (g_LED_mode)
 80098b0:	4b2a      	ldr	r3, [pc, #168]	; (800995c <LED_update+0xb0>)
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	2b04      	cmp	r3, #4
 80098b6:	d849      	bhi.n	800994c <LED_update+0xa0>
 80098b8:	a201      	add	r2, pc, #4	; (adr r2, 80098c0 <LED_update+0x14>)
 80098ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098be:	bf00      	nop
 80098c0:	080098d5 	.word	0x080098d5
 80098c4:	080098e3 	.word	0x080098e3
 80098c8:	080098f1 	.word	0x080098f1
 80098cc:	0800991f 	.word	0x0800991f
 80098d0:	08009941 	.word	0x08009941
  {
    case LED_MODE_FORCED_OFF:
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 80098d4:	2201      	movs	r2, #1
 80098d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80098da:	4821      	ldr	r0, [pc, #132]	; (8009960 <LED_update+0xb4>)
 80098dc:	f7f9 ff00 	bl	80036e0 <HAL_GPIO_WritePin>
      break;
 80098e0:	e039      	b.n	8009956 <LED_update+0xaa>

    case LED_MODE_FORCED_ON:
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 80098e2:	2200      	movs	r2, #0
 80098e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80098e8:	481d      	ldr	r0, [pc, #116]	; (8009960 <LED_update+0xb4>)
 80098ea:	f7f9 fef9 	bl	80036e0 <HAL_GPIO_WritePin>
      break;
 80098ee:	e032      	b.n	8009956 <LED_update+0xaa>

    case LED_MODE_BLINK_SLOW:
      l_blinkCounter++;
 80098f0:	4b1c      	ldr	r3, [pc, #112]	; (8009964 <LED_update+0xb8>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	3301      	adds	r3, #1
 80098f6:	4a1b      	ldr	r2, [pc, #108]	; (8009964 <LED_update+0xb8>)
 80098f8:	6013      	str	r3, [r2, #0]
      if (l_blinkCounter % 5 == 0)
 80098fa:	4b1a      	ldr	r3, [pc, #104]	; (8009964 <LED_update+0xb8>)
 80098fc:	6819      	ldr	r1, [r3, #0]
 80098fe:	4b1a      	ldr	r3, [pc, #104]	; (8009968 <LED_update+0xbc>)
 8009900:	fba3 2301 	umull	r2, r3, r3, r1
 8009904:	089a      	lsrs	r2, r3, #2
 8009906:	4613      	mov	r3, r2
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	4413      	add	r3, r2
 800990c:	1aca      	subs	r2, r1, r3
 800990e:	2a00      	cmp	r2, #0
 8009910:	d11e      	bne.n	8009950 <LED_update+0xa4>
      {
        HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8009912:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009916:	4812      	ldr	r0, [pc, #72]	; (8009960 <LED_update+0xb4>)
 8009918:	f7f9 ff14 	bl	8003744 <HAL_GPIO_TogglePin>
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 800991c:	e018      	b.n	8009950 <LED_update+0xa4>

    case LED_MODE_BLINK_MEDIUM:
      l_blinkCounter++;
 800991e:	4b11      	ldr	r3, [pc, #68]	; (8009964 <LED_update+0xb8>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	3301      	adds	r3, #1
 8009924:	4a0f      	ldr	r2, [pc, #60]	; (8009964 <LED_update+0xb8>)
 8009926:	6013      	str	r3, [r2, #0]
      if (l_blinkCounter % 2 == 0)
 8009928:	4b0e      	ldr	r3, [pc, #56]	; (8009964 <LED_update+0xb8>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f003 0301 	and.w	r3, r3, #1
 8009930:	2b00      	cmp	r3, #0
 8009932:	d10f      	bne.n	8009954 <LED_update+0xa8>
      {
        HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8009934:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009938:	4809      	ldr	r0, [pc, #36]	; (8009960 <LED_update+0xb4>)
 800993a:	f7f9 ff03 	bl	8003744 <HAL_GPIO_TogglePin>
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 800993e:	e009      	b.n	8009954 <LED_update+0xa8>

    case LED_MODE_BLINK_FAST:
      HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8009940:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009944:	4806      	ldr	r0, [pc, #24]	; (8009960 <LED_update+0xb4>)
 8009946:	f7f9 fefd 	bl	8003744 <HAL_GPIO_TogglePin>
      break;
 800994a:	e004      	b.n	8009956 <LED_update+0xaa>

    default:
      ; /* Nothing to do */
      break;
 800994c:	bf00      	nop
 800994e:	e002      	b.n	8009956 <LED_update+0xaa>
      break;
 8009950:	bf00      	nop
 8009952:	e000      	b.n	8009956 <LED_update+0xaa>
      break;
 8009954:	bf00      	nop
  }

  return;
 8009956:	bf00      	nop
}
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	20000009 	.word	0x20000009
 8009960:	40011000 	.word	0x40011000
 8009964:	20000260 	.word	0x20000260
 8009968:	cccccccd 	.word	0xcccccccd

0800996c <LOG_init>:
{
  "DEBUG", "INFO", "WARNING", "ERROR"
};

void LOG_init(RTC_HandleTypeDef *p_rctHandle)
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  g_LOG_rtcHandle = p_rctHandle;
 8009974:	4a03      	ldr	r2, [pc, #12]	; (8009984 <LOG_init+0x18>)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6013      	str	r3, [r2, #0]

  return;
 800997a:	bf00      	nop
}
 800997c:	370c      	adds	r7, #12
 800997e:	46bd      	mov	sp, r7
 8009980:	bc80      	pop	{r7}
 8009982:	4770      	bx	lr
 8009984:	20000268 	.word	0x20000268

08009988 <LOG_turnOn>:

void LOG_turnOn(void)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	af00      	add	r7, sp, #0
  if (g_LOG_isOn == false)
 800998c:	4b08      	ldr	r3, [pc, #32]	; (80099b0 <LOG_turnOn+0x28>)
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	f083 0301 	eor.w	r3, r3, #1
 8009994:	b2db      	uxtb	r3, r3
 8009996:	2b00      	cmp	r3, #0
 8009998:	d007      	beq.n	80099aa <LOG_turnOn+0x22>
  {
    g_LOG_isOn = true;
 800999a:	4b05      	ldr	r3, [pc, #20]	; (80099b0 <LOG_turnOn+0x28>)
 800999c:	2201      	movs	r2, #1
 800999e:	701a      	strb	r2, [r3, #0]

    LOG_info("Turning LOG ON");
 80099a0:	4904      	ldr	r1, [pc, #16]	; (80099b4 <LOG_turnOn+0x2c>)
 80099a2:	2001      	movs	r0, #1
 80099a4:	f000 f85c 	bl	8009a60 <LOG_log>
  else
  {
    ; /* Nothing to do */
  }

  return;
 80099a8:	bf00      	nop
 80099aa:	bf00      	nop
}
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	20000264 	.word	0x20000264
 80099b4:	0800bc0c 	.word	0x0800bc0c

080099b8 <LOG_turnOff>:

void LOG_turnOff(void)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	af00      	add	r7, sp, #0
  if (g_LOG_isOn == true)
 80099bc:	4b06      	ldr	r3, [pc, #24]	; (80099d8 <LOG_turnOff+0x20>)
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d007      	beq.n	80099d4 <LOG_turnOff+0x1c>
  {
    LOG_info("Turning LOG OFF");
 80099c4:	4905      	ldr	r1, [pc, #20]	; (80099dc <LOG_turnOff+0x24>)
 80099c6:	2001      	movs	r0, #1
 80099c8:	f000 f84a 	bl	8009a60 <LOG_log>

    g_LOG_isOn = false;
 80099cc:	4b02      	ldr	r3, [pc, #8]	; (80099d8 <LOG_turnOff+0x20>)
 80099ce:	2200      	movs	r2, #0
 80099d0:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 80099d2:	bf00      	nop
 80099d4:	bf00      	nop
}
 80099d6:	bd80      	pop	{r7, pc}
 80099d8:	20000264 	.word	0x20000264
 80099dc:	0800bc1c 	.word	0x0800bc1c

080099e0 <LOG_setLevel>:

void LOG_setLevel(T_LOG_LEVEL p_level)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b083      	sub	sp, #12
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	4603      	mov	r3, r0
 80099e8:	71fb      	strb	r3, [r7, #7]
  g_LOG_level = p_level;
 80099ea:	4a04      	ldr	r2, [pc, #16]	; (80099fc <LOG_setLevel+0x1c>)
 80099ec:	79fb      	ldrb	r3, [r7, #7]
 80099ee:	7013      	strb	r3, [r2, #0]

  return;
 80099f0:	bf00      	nop
}
 80099f2:	370c      	adds	r7, #12
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bc80      	pop	{r7}
 80099f8:	4770      	bx	lr
 80099fa:	bf00      	nop
 80099fc:	20000265 	.word	0x20000265

08009a00 <LOG_increaseLevel>:

void LOG_increaseLevel(void)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	af00      	add	r7, sp, #0
  /* Display more detailed logs */
  if (g_LOG_level > LOG_LEVEL_DEBUG)
 8009a04:	4b08      	ldr	r3, [pc, #32]	; (8009a28 <LOG_increaseLevel+0x28>)
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d00a      	beq.n	8009a22 <LOG_increaseLevel+0x22>
  {
    LOG_info("Increasing LOG level");
 8009a0c:	4907      	ldr	r1, [pc, #28]	; (8009a2c <LOG_increaseLevel+0x2c>)
 8009a0e:	2001      	movs	r0, #1
 8009a10:	f000 f826 	bl	8009a60 <LOG_log>

    g_LOG_level--;
 8009a14:	4b04      	ldr	r3, [pc, #16]	; (8009a28 <LOG_increaseLevel+0x28>)
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	3b01      	subs	r3, #1
 8009a1a:	b2da      	uxtb	r2, r3
 8009a1c:	4b02      	ldr	r3, [pc, #8]	; (8009a28 <LOG_increaseLevel+0x28>)
 8009a1e:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 8009a20:	bf00      	nop
 8009a22:	bf00      	nop
}
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	20000265 	.word	0x20000265
 8009a2c:	0800bc2c 	.word	0x0800bc2c

08009a30 <LOG_decreaseLevel>:

void LOG_decreaseLevel(void)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	af00      	add	r7, sp, #0
  /* Display less detailed logs */
  if (g_LOG_level < LOG_LEVEL_ERROR)
 8009a34:	4b08      	ldr	r3, [pc, #32]	; (8009a58 <LOG_decreaseLevel+0x28>)
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	2b02      	cmp	r3, #2
 8009a3a:	d80a      	bhi.n	8009a52 <LOG_decreaseLevel+0x22>
  {
    LOG_info("Decreasing LOG level");
 8009a3c:	4907      	ldr	r1, [pc, #28]	; (8009a5c <LOG_decreaseLevel+0x2c>)
 8009a3e:	2001      	movs	r0, #1
 8009a40:	f000 f80e 	bl	8009a60 <LOG_log>

    g_LOG_level++;
 8009a44:	4b04      	ldr	r3, [pc, #16]	; (8009a58 <LOG_decreaseLevel+0x28>)
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	3301      	adds	r3, #1
 8009a4a:	b2da      	uxtb	r2, r3
 8009a4c:	4b02      	ldr	r3, [pc, #8]	; (8009a58 <LOG_decreaseLevel+0x28>)
 8009a4e:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 8009a50:	bf00      	nop
 8009a52:	bf00      	nop
}
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	bf00      	nop
 8009a58:	20000265 	.word	0x20000265
 8009a5c:	0800bc44 	.word	0x0800bc44

08009a60 <LOG_log>:

void LOG_log(T_LOG_LEVEL p_level, const char *p_format, ...)
{
 8009a60:	b40e      	push	{r1, r2, r3}
 8009a62:	b580      	push	{r7, lr}
 8009a64:	b089      	sub	sp, #36	; 0x24
 8009a66:	af02      	add	r7, sp, #8
 8009a68:	4603      	mov	r3, r0
 8009a6a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef l_halReturnCode;
  va_list           l_argumentsList;
  RTC_TimeTypeDef   l_time;
  RTC_DateTypeDef   l_date;

  if ((g_LOG_isOn == true) && (p_level >= g_LOG_level))
 8009a6c:	4b26      	ldr	r3, [pc, #152]	; (8009b08 <LOG_log+0xa8>)
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d041      	beq.n	8009af8 <LOG_log+0x98>
 8009a74:	4b25      	ldr	r3, [pc, #148]	; (8009b0c <LOG_log+0xac>)
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	79fa      	ldrb	r2, [r7, #7]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d33c      	bcc.n	8009af8 <LOG_log+0x98>
  {
    l_halReturnCode = HAL_RTC_GetTime(g_LOG_rtcHandle, &l_time, RTC_FORMAT_BCD);
 8009a7e:	4b24      	ldr	r3, [pc, #144]	; (8009b10 <LOG_log+0xb0>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f107 010c 	add.w	r1, r7, #12
 8009a86:	2201      	movs	r2, #1
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f7fb f80b 	bl	8004aa4 <HAL_RTC_GetTime>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	75fb      	strb	r3, [r7, #23]

    if (l_halReturnCode != HAL_OK)
 8009a92:	7dfb      	ldrb	r3, [r7, #23]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d004      	beq.n	8009aa2 <LOG_log+0x42>
    {
      /* As this method is for logging/debug, just reset time in case of failure */
      UTI_resetRtcTime(&l_time);
 8009a98:	f107 030c 	add.w	r3, r7, #12
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f000 fa5c 	bl	8009f5a <UTI_resetRtcTime>
    else
    {
      ; /* Nothing to do */
    }

    l_halReturnCode = HAL_RTC_GetDate(g_LOG_rtcHandle, &l_date, RTC_FORMAT_BCD);
 8009aa2:	4b1b      	ldr	r3, [pc, #108]	; (8009b10 <LOG_log+0xb0>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f107 0108 	add.w	r1, r7, #8
 8009aaa:	2201      	movs	r2, #1
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7fb f9fd 	bl	8004eac <HAL_RTC_GetDate>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	75fb      	strb	r3, [r7, #23]

    if (l_halReturnCode != HAL_OK)
 8009ab6:	7dfb      	ldrb	r3, [r7, #23]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d004      	beq.n	8009ac6 <LOG_log+0x66>
    {
      /* As this method is for logging/debug, just reset date in case of failure */
      UTI_resetRtcDate(&l_date);
 8009abc:	f107 0308 	add.w	r3, r7, #8
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f000 fa35 	bl	8009f30 <UTI_resetRtcDate>
    else
    {
      ; /* Nothing to do */
    }

    va_start(l_argumentsList, p_format);
 8009ac6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009aca:	613b      	str	r3, [r7, #16]

    (void)printf("%-7s - %02x:%02x:%02x - ", g_LOG_levelStrings[p_level], l_time.Hours, l_time.Minutes, l_time.Seconds);
 8009acc:	79fb      	ldrb	r3, [r7, #7]
 8009ace:	4a11      	ldr	r2, [pc, #68]	; (8009b14 <LOG_log+0xb4>)
 8009ad0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009ad4:	7b3b      	ldrb	r3, [r7, #12]
 8009ad6:	461a      	mov	r2, r3
 8009ad8:	7b7b      	ldrb	r3, [r7, #13]
 8009ada:	4618      	mov	r0, r3
 8009adc:	7bbb      	ldrb	r3, [r7, #14]
 8009ade:	9300      	str	r3, [sp, #0]
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	480d      	ldr	r0, [pc, #52]	; (8009b18 <LOG_log+0xb8>)
 8009ae4:	f000 fac2 	bl	800a06c <iprintf>
    (void)vprintf(p_format, l_argumentsList);
 8009ae8:	6939      	ldr	r1, [r7, #16]
 8009aea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009aec:	f000 fb4c 	bl	800a188 <viprintf>
    (void)printf("\r\n");
 8009af0:	480a      	ldr	r0, [pc, #40]	; (8009b1c <LOG_log+0xbc>)
 8009af2:	f000 fb41 	bl	800a178 <puts>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8009af6:	bf00      	nop
 8009af8:	bf00      	nop
}
 8009afa:	371c      	adds	r7, #28
 8009afc:	46bd      	mov	sp, r7
 8009afe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009b02:	b003      	add	sp, #12
 8009b04:	4770      	bx	lr
 8009b06:	bf00      	nop
 8009b08:	20000264 	.word	0x20000264
 8009b0c:	20000265 	.word	0x20000265
 8009b10:	20000268 	.word	0x20000268
 8009b14:	2000000c 	.word	0x2000000c
 8009b18:	0800bc5c 	.word	0x0800bc5c
 8009b1c:	0800bc78 	.word	0x0800bc78

08009b20 <MAS_receiveData>:
#include "stm32f1xx_hal.h"

static uint8_t g_MAS_rxBuffer[12] = {0};

void MAS_receiveData(UART_HandleTypeDef *p_huart)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(p_huart, g_MAS_rxBuffer, 1);
 8009b28:	2201      	movs	r2, #1
 8009b2a:	4904      	ldr	r1, [pc, #16]	; (8009b3c <MAS_receiveData+0x1c>)
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f7fe f863 	bl	8007bf8 <HAL_UART_Receive_IT>

  return;
 8009b32:	bf00      	nop
}
 8009b34:	3708      	adds	r7, #8
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
 8009b3a:	bf00      	nop
 8009b3c:	2000026c 	.word	0x2000026c

08009b40 <MTR_init>:
              uint32_t           p_dirPin1,
              GPIO_TypeDef      *p_dirPin2Port,
              uint32_t           p_dirPin2,
              TIM_HandleTypeDef *p_pwmTimerHandle,
              uint32_t           p_pwmChannel)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	607a      	str	r2, [r7, #4]
 8009b4c:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing Motor module for %s", p_name);
 8009b4e:	68ba      	ldr	r2, [r7, #8]
 8009b50:	4912      	ldr	r1, [pc, #72]	; (8009b9c <MTR_init+0x5c>)
 8009b52:	2001      	movs	r0, #1
 8009b54:	f7ff ff84 	bl	8009a60 <LOG_log>

  p_handle->name           = p_name;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	68ba      	ldr	r2, [r7, #8]
 8009b5c:	601a      	str	r2, [r3, #0]
  p_handle->dirPin1Port    = p_dirPin1Port;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	605a      	str	r2, [r3, #4]
  p_handle->dirPin1        = p_dirPin1;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	683a      	ldr	r2, [r7, #0]
 8009b68:	609a      	str	r2, [r3, #8]
  p_handle->dirPin2Port    = p_dirPin2Port;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	69ba      	ldr	r2, [r7, #24]
 8009b6e:	60da      	str	r2, [r3, #12]
  p_handle->dirPin2        = p_dirPin2;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	69fa      	ldr	r2, [r7, #28]
 8009b74:	611a      	str	r2, [r3, #16]
  p_handle->pwmTimerHandle = p_pwmTimerHandle;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	6a3a      	ldr	r2, [r7, #32]
 8009b7a:	61da      	str	r2, [r3, #28]
  p_handle->pwmChannel     = p_pwmChannel;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b80:	621a      	str	r2, [r3, #32]

  MTR_setDirection(p_handle, MTR_DIRECTION_STOP);
 8009b82:	2100      	movs	r1, #0
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f000 f80b 	bl	8009ba0 <MTR_setDirection>
  MTR_setSpeed    (p_handle, 0                 );
 8009b8a:	2100      	movs	r1, #0
 8009b8c:	68f8      	ldr	r0, [r7, #12]
 8009b8e:	f000 f873 	bl	8009c78 <MTR_setSpeed>

  return;
 8009b92:	bf00      	nop
}
 8009b94:	3710      	adds	r7, #16
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	0800bc7c 	.word	0x0800bc7c

08009ba0 <MTR_setDirection>:

void MTR_setDirection(T_MTR_Handle *p_handle, T_MTR_DIRECTION p_direction)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b082      	sub	sp, #8
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	460b      	mov	r3, r1
 8009baa:	70fb      	strb	r3, [r7, #3]
  if (p_direction == p_handle->direction)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	7d1b      	ldrb	r3, [r3, #20]
 8009bb0:	78fa      	ldrb	r2, [r7, #3]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d056      	beq.n	8009c64 <MTR_setDirection+0xc4>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (p_direction == MTR_DIRECTION_STOP)
 8009bb6:	78fb      	ldrb	r3, [r7, #3]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d119      	bne.n	8009bf0 <MTR_setDirection+0x50>
    {
      LOG_debug("%s motor STOP", p_handle->name);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	492a      	ldr	r1, [pc, #168]	; (8009c6c <MTR_setDirection+0xcc>)
 8009bc4:	2000      	movs	r0, #0
 8009bc6:	f7ff ff4b 	bl	8009a60 <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_RESET);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6858      	ldr	r0, [r3, #4]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	f7f9 fd82 	bl	80036e0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_RESET);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	68d8      	ldr	r0, [r3, #12]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	2200      	movs	r2, #0
 8009be8:	4619      	mov	r1, r3
 8009bea:	f7f9 fd79 	bl	80036e0 <HAL_GPIO_WritePin>
 8009bee:	e035      	b.n	8009c5c <MTR_setDirection+0xbc>
    }
    else if (p_direction == MTR_DIRECTION_FORWARD)
 8009bf0:	78fb      	ldrb	r3, [r7, #3]
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d119      	bne.n	8009c2a <MTR_setDirection+0x8a>
    {
      LOG_debug("%s motor go FORWARD", p_handle->name);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	491c      	ldr	r1, [pc, #112]	; (8009c70 <MTR_setDirection+0xd0>)
 8009bfe:	2000      	movs	r0, #0
 8009c00:	f7ff ff2e 	bl	8009a60 <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_RESET);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6858      	ldr	r0, [r3, #4]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	2200      	movs	r2, #0
 8009c10:	4619      	mov	r1, r3
 8009c12:	f7f9 fd65 	bl	80036e0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_SET  );
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	68d8      	ldr	r0, [r3, #12]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	691b      	ldr	r3, [r3, #16]
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	2201      	movs	r2, #1
 8009c22:	4619      	mov	r1, r3
 8009c24:	f7f9 fd5c 	bl	80036e0 <HAL_GPIO_WritePin>
 8009c28:	e018      	b.n	8009c5c <MTR_setDirection+0xbc>
    }
    else
    {
      LOG_debug("%s motor go BACKWARD", p_handle->name);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	461a      	mov	r2, r3
 8009c30:	4910      	ldr	r1, [pc, #64]	; (8009c74 <MTR_setDirection+0xd4>)
 8009c32:	2000      	movs	r0, #0
 8009c34:	f7ff ff14 	bl	8009a60 <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_SET  );
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6858      	ldr	r0, [r3, #4]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	2201      	movs	r2, #1
 8009c44:	4619      	mov	r1, r3
 8009c46:	f7f9 fd4b 	bl	80036e0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_RESET);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	68d8      	ldr	r0, [r3, #12]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	691b      	ldr	r3, [r3, #16]
 8009c52:	b29b      	uxth	r3, r3
 8009c54:	2200      	movs	r2, #0
 8009c56:	4619      	mov	r1, r3
 8009c58:	f7f9 fd42 	bl	80036e0 <HAL_GPIO_WritePin>
    }

    p_handle->direction = p_direction;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	78fa      	ldrb	r2, [r7, #3]
 8009c60:	751a      	strb	r2, [r3, #20]
  }

  return;
 8009c62:	bf00      	nop
 8009c64:	bf00      	nop
}
 8009c66:	3708      	adds	r7, #8
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	0800bca0 	.word	0x0800bca0
 8009c70:	0800bcb0 	.word	0x0800bcb0
 8009c74:	0800bcc4 	.word	0x0800bcc4

08009c78 <MTR_setSpeed>:

void MTR_setSpeed(T_MTR_Handle *p_handle, uint32_t p_speed)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
  if (p_speed == p_handle->speed)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	699b      	ldr	r3, [r3, #24]
 8009c86:	683a      	ldr	r2, [r7, #0]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d02d      	beq.n	8009ce8 <MTR_setSpeed+0x70>
  {
    ; /* Nothing to do */
  }
  else
  {
    LOG_debug("Setting  %s motor p_speed to %u", p_handle->name, p_speed);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	4917      	ldr	r1, [pc, #92]	; (8009cf0 <MTR_setSpeed+0x78>)
 8009c94:	2000      	movs	r0, #0
 8009c96:	f7ff fee3 	bl	8009a60 <LOG_log>

    __HAL_TIM_SET_COMPARE(p_handle->pwmTimerHandle, p_handle->pwmChannel, p_speed);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6a1b      	ldr	r3, [r3, #32]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d105      	bne.n	8009cae <MTR_setSpeed+0x36>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	69db      	ldr	r3, [r3, #28]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	683a      	ldr	r2, [r7, #0]
 8009caa:	635a      	str	r2, [r3, #52]	; 0x34
 8009cac:	e018      	b.n	8009ce0 <MTR_setSpeed+0x68>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6a1b      	ldr	r3, [r3, #32]
 8009cb2:	2b04      	cmp	r3, #4
 8009cb4:	d105      	bne.n	8009cc2 <MTR_setSpeed+0x4a>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	69db      	ldr	r3, [r3, #28]
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	6393      	str	r3, [r2, #56]	; 0x38
 8009cc0:	e00e      	b.n	8009ce0 <MTR_setSpeed+0x68>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6a1b      	ldr	r3, [r3, #32]
 8009cc6:	2b08      	cmp	r3, #8
 8009cc8:	d105      	bne.n	8009cd6 <MTR_setSpeed+0x5e>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	69db      	ldr	r3, [r3, #28]
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	63d3      	str	r3, [r2, #60]	; 0x3c
 8009cd4:	e004      	b.n	8009ce0 <MTR_setSpeed+0x68>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	69db      	ldr	r3, [r3, #28]
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	6413      	str	r3, [r2, #64]	; 0x40

    p_handle->speed = p_speed;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	683a      	ldr	r2, [r7, #0]
 8009ce4:	619a      	str	r2, [r3, #24]
  }

  return;
 8009ce6:	bf00      	nop
 8009ce8:	bf00      	nop
}
 8009cea:	3708      	adds	r7, #8
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}
 8009cf0:	0800bcdc 	.word	0x0800bcdc

08009cf4 <PID_init>:

#include "utils.h"
#include "log.h"

void PID_init(T_PID_Handle *p_handle, int32_t p_kp, int32_t p_ki, int32_t p_kd, int32_t p_targetValue, int32_t p_minValue, int32_t p_maxValue, int32_t p_antiWindUpFactor)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b084      	sub	sp, #16
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	60f8      	str	r0, [r7, #12]
 8009cfc:	60b9      	str	r1, [r7, #8]
 8009cfe:	607a      	str	r2, [r7, #4]
 8009d00:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing PID");
 8009d02:	4919      	ldr	r1, [pc, #100]	; (8009d68 <PID_init+0x74>)
 8009d04:	2001      	movs	r0, #1
 8009d06:	f7ff feab 	bl	8009a60 <LOG_log>

  p_handle->kp              = p_kp;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	68ba      	ldr	r2, [r7, #8]
 8009d0e:	601a      	str	r2, [r3, #0]
  p_handle->ki              = p_ki;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	605a      	str	r2, [r3, #4]
  p_handle->kd              = p_kd;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	683a      	ldr	r2, [r7, #0]
 8009d1a:	609a      	str	r2, [r3, #8]
  p_handle->targetValue     = p_targetValue;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	69ba      	ldr	r2, [r7, #24]
 8009d20:	60da      	str	r2, [r3, #12]
  p_handle->minValue        = p_minValue;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	69fa      	ldr	r2, [r7, #28]
 8009d26:	611a      	str	r2, [r3, #16]
  p_handle->maxValue        = p_maxValue;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	6a3a      	ldr	r2, [r7, #32]
 8009d2c:	615a      	str	r2, [r3, #20]
  p_handle->antiWindUpValue = p_antiWindUpFactor * UTI_MAX(abs(p_handle->minValue), abs(p_handle->maxValue));
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	695b      	ldr	r3, [r3, #20]
 8009d32:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8009d36:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	691b      	ldr	r3, [r3, #16]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	bfb8      	it	lt
 8009d42:	425b      	neglt	r3, r3
 8009d44:	4293      	cmp	r3, r2
 8009d46:	bfb8      	it	lt
 8009d48:	4613      	movlt	r3, r2
 8009d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d4c:	fb02 f203 	mul.w	r2, r2, r3
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	619a      	str	r2, [r3, #24]

  PID_reset  (p_handle);
 8009d54:	68f8      	ldr	r0, [r7, #12]
 8009d56:	f000 f809 	bl	8009d6c <PID_reset>
  PID_logInfo(p_handle);
 8009d5a:	68f8      	ldr	r0, [r7, #12]
 8009d5c:	f000 f87e 	bl	8009e5c <PID_logInfo>

  return;
 8009d60:	bf00      	nop
}
 8009d62:	3710      	adds	r7, #16
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}
 8009d68:	0800bcfc 	.word	0x0800bcfc

08009d6c <PID_reset>:

void PID_reset(T_PID_Handle *p_handle)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  p_handle->pValue        = 0;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2200      	movs	r2, #0
 8009d78:	61da      	str	r2, [r3, #28]
  p_handle->iValue        = 0;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	621a      	str	r2, [r3, #32]
  p_handle->dValue        = 0;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	625a      	str	r2, [r3, #36]	; 0x24
  p_handle->computedValue = 0;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	629a      	str	r2, [r3, #40]	; 0x28
  p_handle->lastError     = 0;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	62da      	str	r2, [r3, #44]	; 0x2c

  return;
 8009d92:	bf00      	nop
}
 8009d94:	370c      	adds	r7, #12
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bc80      	pop	{r7}
 8009d9a:	4770      	bx	lr

08009d9c <PID_update>:
{
  return p_handle->antiWindUpValue;
}

int32_t PID_update(T_PID_Handle *p_handle, int32_t p_currentValue, uint32_t p_timeDelta)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b088      	sub	sp, #32
 8009da0:	af02      	add	r7, sp, #8
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	60b9      	str	r1, [r7, #8]
 8009da6:	607a      	str	r2, [r7, #4]
  int32_t l_currentError;

  l_currentError = p_handle->targetValue - p_currentValue;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	68da      	ldr	r2, [r3, #12]
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	1ad3      	subs	r3, r2, r3
 8009db0:	617b      	str	r3, [r7, #20]

  p_handle->pValue    =  l_currentError;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	697a      	ldr	r2, [r7, #20]
 8009db6:	61da      	str	r2, [r3, #28]
  p_handle->iValue   +=  l_currentError * p_timeDelta;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	6a1b      	ldr	r3, [r3, #32]
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	fb02 f303 	mul.w	r3, r2, r3
 8009dc6:	440b      	add	r3, r1
 8009dc8:	461a      	mov	r2, r3
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	621a      	str	r2, [r3, #32]
  p_handle->iValue    =  UTI_clampIntValue(p_handle->iValue, -p_handle->antiWindUpValue, p_handle->antiWindUpValue, false, 0);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	6a18      	ldr	r0, [r3, #32]
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	699b      	ldr	r3, [r3, #24]
 8009dd6:	4259      	negs	r1, r3
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	699a      	ldr	r2, [r3, #24]
 8009ddc:	2300      	movs	r3, #0
 8009dde:	9300      	str	r3, [sp, #0]
 8009de0:	2300      	movs	r3, #0
 8009de2:	f000 f8e7 	bl	8009fb4 <UTI_clampIntValue>
 8009de6:	4602      	mov	r2, r0
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	621a      	str	r2, [r3, #32]
  p_handle->dValue    = (l_currentError - p_handle->lastError) / p_timeDelta;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df0:	697a      	ldr	r2, [r7, #20]
 8009df2:	1ad3      	subs	r3, r2, r3
 8009df4:	461a      	mov	r2, r3
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	625a      	str	r2, [r3, #36]	; 0x24
  p_handle->lastError =  l_currentError;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	697a      	ldr	r2, [r7, #20]
 8009e06:	62da      	str	r2, [r3, #44]	; 0x2c

  p_handle->computedValue = p_handle->kp * p_handle->pValue + p_handle->ki * p_handle->iValue + p_handle->kd * p_handle->dValue;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	68fa      	ldr	r2, [r7, #12]
 8009e0e:	69d2      	ldr	r2, [r2, #28]
 8009e10:	fb02 f203 	mul.w	r2, r2, r3
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	68f9      	ldr	r1, [r7, #12]
 8009e1a:	6a09      	ldr	r1, [r1, #32]
 8009e1c:	fb01 f303 	mul.w	r3, r1, r3
 8009e20:	441a      	add	r2, r3
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	689b      	ldr	r3, [r3, #8]
 8009e26:	68f9      	ldr	r1, [r7, #12]
 8009e28:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8009e2a:	fb01 f303 	mul.w	r3, r1, r3
 8009e2e:	441a      	add	r2, r3
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	629a      	str	r2, [r3, #40]	; 0x28
  p_handle->computedValue = UTI_clampIntValue(p_handle->computedValue, p_handle->minValue, p_handle->maxValue, false, 0);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	6919      	ldr	r1, [r3, #16]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	695a      	ldr	r2, [r3, #20]
 8009e40:	2300      	movs	r3, #0
 8009e42:	9300      	str	r3, [sp, #0]
 8009e44:	2300      	movs	r3, #0
 8009e46:	f000 f8b5 	bl	8009fb4 <UTI_clampIntValue>
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	629a      	str	r2, [r3, #40]	; 0x28

  return p_currentValue;
 8009e50:	68bb      	ldr	r3, [r7, #8]
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3718      	adds	r7, #24
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
	...

08009e5c <PID_logInfo>:

void PID_logInfo(T_PID_Handle *p_handle)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b084      	sub	sp, #16
 8009e60:	af02      	add	r7, sp, #8
 8009e62:	6078      	str	r0, [r7, #4]
  LOG_info(" kp = %4d -  ki = %4d -     kd = %4d", p_handle->kp         , p_handle->ki      , p_handle->kd             );
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681a      	ldr	r2, [r3, #0]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6859      	ldr	r1, [r3, #4]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	9300      	str	r3, [sp, #0]
 8009e72:	460b      	mov	r3, r1
 8009e74:	4913      	ldr	r1, [pc, #76]	; (8009ec4 <PID_logInfo+0x68>)
 8009e76:	2001      	movs	r0, #1
 8009e78:	f7ff fdf2 	bl	8009a60 <LOG_log>
  LOG_info("  p = %4d -   i = %4d -      d = %4d", p_handle->pValue     , p_handle->iValue  , p_handle->dValue         );
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	69da      	ldr	r2, [r3, #28]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6a19      	ldr	r1, [r3, #32]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e88:	9300      	str	r3, [sp, #0]
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	490e      	ldr	r1, [pc, #56]	; (8009ec8 <PID_logInfo+0x6c>)
 8009e8e:	2001      	movs	r0, #1
 8009e90:	f7ff fde6 	bl	8009a60 <LOG_log>
  LOG_info("min = %4d - max = %4d - a.w.up = %4d", p_handle->minValue   , p_handle->maxValue, p_handle->antiWindUpValue);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	691a      	ldr	r2, [r3, #16]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6959      	ldr	r1, [r3, #20]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	699b      	ldr	r3, [r3, #24]
 8009ea0:	9300      	str	r3, [sp, #0]
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	4909      	ldr	r1, [pc, #36]	; (8009ecc <PID_logInfo+0x70>)
 8009ea6:	2001      	movs	r0, #1
 8009ea8:	f7ff fdda 	bl	8009a60 <LOG_log>
  LOG_info("  t = %4d - val = %4d               ", p_handle->targetValue, p_handle->computedValue                      );
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	68da      	ldr	r2, [r3, #12]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eb4:	4906      	ldr	r1, [pc, #24]	; (8009ed0 <PID_logInfo+0x74>)
 8009eb6:	2001      	movs	r0, #1
 8009eb8:	f7ff fdd2 	bl	8009a60 <LOG_log>

  return;
 8009ebc:	bf00      	nop
}
 8009ebe:	3708      	adds	r7, #8
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}
 8009ec4:	0800bd10 	.word	0x0800bd10
 8009ec8:	0800bd38 	.word	0x0800bd38
 8009ecc:	0800bd60 	.word	0x0800bd60
 8009ed0:	0800bd88 	.word	0x0800bd88

08009ed4 <UTI_init>:
#include "log.h"

static TIM_HandleTypeDef *g_UTI_delayTimerHandle;

void UTI_init(TIM_HandleTypeDef *p_delayTimerHandle)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing utilities");
 8009edc:	4905      	ldr	r1, [pc, #20]	; (8009ef4 <UTI_init+0x20>)
 8009ede:	2001      	movs	r0, #1
 8009ee0:	f7ff fdbe 	bl	8009a60 <LOG_log>

  g_UTI_delayTimerHandle = p_delayTimerHandle;
 8009ee4:	4a04      	ldr	r2, [pc, #16]	; (8009ef8 <UTI_init+0x24>)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6013      	str	r3, [r2, #0]

  return;
 8009eea:	bf00      	nop
}
 8009eec:	3708      	adds	r7, #8
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}
 8009ef2:	bf00      	nop
 8009ef4:	0800bdb0 	.word	0x0800bdb0
 8009ef8:	20000278 	.word	0x20000278

08009efc <UTI_delayUs>:

void UTI_delayUs(uint16_t p_delay)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	4603      	mov	r3, r0
 8009f04:	80fb      	strh	r3, [r7, #6]
  /* Reset the micro-seconds counter */
  __HAL_TIM_SET_COUNTER(g_UTI_delayTimerHandle, 0);
 8009f06:	4b09      	ldr	r3, [pc, #36]	; (8009f2c <UTI_delayUs+0x30>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Wait for the counter to reach the input micro-seconds number */
  while (__HAL_TIM_GET_COUNTER(g_UTI_delayTimerHandle) < p_delay)
 8009f10:	bf00      	nop
 8009f12:	4b06      	ldr	r3, [pc, #24]	; (8009f2c <UTI_delayUs+0x30>)
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f1a:	88fb      	ldrh	r3, [r7, #6]
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d3f8      	bcc.n	8009f12 <UTI_delayUs+0x16>
  {
    ; /* Nothing to do */
  }

  return;
 8009f20:	bf00      	nop
}
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bc80      	pop	{r7}
 8009f28:	4770      	bx	lr
 8009f2a:	bf00      	nop
 8009f2c:	20000278 	.word	0x20000278

08009f30 <UTI_resetRtcDate>:

void UTI_resetRtcDate(RTC_DateTypeDef *p_date)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b083      	sub	sp, #12
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  p_date->Date    = 0;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	709a      	strb	r2, [r3, #2]
  p_date->Month   = 0;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2200      	movs	r2, #0
 8009f42:	705a      	strb	r2, [r3, #1]
  p_date->WeekDay = 0;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2200      	movs	r2, #0
 8009f48:	701a      	strb	r2, [r3, #0]
  p_date->Year    = 0;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	70da      	strb	r2, [r3, #3]

  return;
 8009f50:	bf00      	nop
}
 8009f52:	370c      	adds	r7, #12
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bc80      	pop	{r7}
 8009f58:	4770      	bx	lr

08009f5a <UTI_resetRtcTime>:


void UTI_resetRtcTime(RTC_TimeTypeDef *p_time)
{
 8009f5a:	b480      	push	{r7}
 8009f5c:	b083      	sub	sp, #12
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	6078      	str	r0, [r7, #4]
  p_time->Hours   = 0;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2200      	movs	r2, #0
 8009f66:	701a      	strb	r2, [r3, #0]
  p_time->Minutes = 0;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	705a      	strb	r2, [r3, #1]
  p_time->Seconds = 0;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2200      	movs	r2, #0
 8009f72:	709a      	strb	r2, [r3, #2]

  return;
 8009f74:	bf00      	nop
}
 8009f76:	370c      	adds	r7, #12
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bc80      	pop	{r7}
 8009f7c:	4770      	bx	lr

08009f7e <UTI_turnRtcTimeToSeconds>:

uint32_t UTI_turnRtcTimeToSeconds(RTC_TimeTypeDef *p_time)
{
 8009f7e:	b480      	push	{r7}
 8009f80:	b083      	sub	sp, #12
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
  return p_time->Hours * 3600 + p_time->Minutes * 60 + p_time->Seconds;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8009f90:	fb03 f202 	mul.w	r2, r3, r2
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	785b      	ldrb	r3, [r3, #1]
 8009f98:	4619      	mov	r1, r3
 8009f9a:	460b      	mov	r3, r1
 8009f9c:	011b      	lsls	r3, r3, #4
 8009f9e:	1a5b      	subs	r3, r3, r1
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	4413      	add	r3, r2
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	7892      	ldrb	r2, [r2, #2]
 8009fa8:	4413      	add	r3, r2
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	370c      	adds	r7, #12
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bc80      	pop	{r7}
 8009fb2:	4770      	bx	lr

08009fb4 <UTI_clampIntValue>:

int32_t UTI_clampIntValue(int32_t p_value, int32_t p_minValue, int32_t p_maxValue, bool p_clampToNearest, int32_t p_clampValue)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b087      	sub	sp, #28
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	607a      	str	r2, [r7, #4]
 8009fc0:	70fb      	strb	r3, [r7, #3]
  int32_t l_returnValue;

  if (p_value < p_minValue)
 8009fc2:	68fa      	ldr	r2, [r7, #12]
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	da08      	bge.n	8009fdc <UTI_clampIntValue+0x28>
  {
    if (p_clampToNearest == true)
 8009fca:	78fb      	ldrb	r3, [r7, #3]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d002      	beq.n	8009fd6 <UTI_clampIntValue+0x22>
    {
      l_returnValue = p_minValue;
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	617b      	str	r3, [r7, #20]
 8009fd4:	e011      	b.n	8009ffa <UTI_clampIntValue+0x46>
    }
    else
    {
      l_returnValue = p_clampValue;
 8009fd6:	6a3b      	ldr	r3, [r7, #32]
 8009fd8:	617b      	str	r3, [r7, #20]
 8009fda:	e00e      	b.n	8009ffa <UTI_clampIntValue+0x46>
    }
  }
  else if (p_value > p_maxValue)
 8009fdc:	68fa      	ldr	r2, [r7, #12]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	dd08      	ble.n	8009ff6 <UTI_clampIntValue+0x42>
  {
    if (p_clampToNearest == true)
 8009fe4:	78fb      	ldrb	r3, [r7, #3]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d002      	beq.n	8009ff0 <UTI_clampIntValue+0x3c>
    {
      l_returnValue = p_maxValue;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	617b      	str	r3, [r7, #20]
 8009fee:	e004      	b.n	8009ffa <UTI_clampIntValue+0x46>
    }
    else
    {
      l_returnValue = p_clampValue;
 8009ff0:	6a3b      	ldr	r3, [r7, #32]
 8009ff2:	617b      	str	r3, [r7, #20]
 8009ff4:	e001      	b.n	8009ffa <UTI_clampIntValue+0x46>
    }
  }
  else
  {
    l_returnValue = p_value;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	617b      	str	r3, [r7, #20]
  }

  return l_returnValue;
 8009ffa:	697b      	ldr	r3, [r7, #20]
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	371c      	adds	r7, #28
 800a000:	46bd      	mov	sp, r7
 800a002:	bc80      	pop	{r7}
 800a004:	4770      	bx	lr
	...

0800a008 <__errno>:
 800a008:	4b01      	ldr	r3, [pc, #4]	; (800a010 <__errno+0x8>)
 800a00a:	6818      	ldr	r0, [r3, #0]
 800a00c:	4770      	bx	lr
 800a00e:	bf00      	nop
 800a010:	2000001c 	.word	0x2000001c

0800a014 <__libc_init_array>:
 800a014:	b570      	push	{r4, r5, r6, lr}
 800a016:	2600      	movs	r6, #0
 800a018:	4d0c      	ldr	r5, [pc, #48]	; (800a04c <__libc_init_array+0x38>)
 800a01a:	4c0d      	ldr	r4, [pc, #52]	; (800a050 <__libc_init_array+0x3c>)
 800a01c:	1b64      	subs	r4, r4, r5
 800a01e:	10a4      	asrs	r4, r4, #2
 800a020:	42a6      	cmp	r6, r4
 800a022:	d109      	bne.n	800a038 <__libc_init_array+0x24>
 800a024:	f001 f80e 	bl	800b044 <_init>
 800a028:	2600      	movs	r6, #0
 800a02a:	4d0a      	ldr	r5, [pc, #40]	; (800a054 <__libc_init_array+0x40>)
 800a02c:	4c0a      	ldr	r4, [pc, #40]	; (800a058 <__libc_init_array+0x44>)
 800a02e:	1b64      	subs	r4, r4, r5
 800a030:	10a4      	asrs	r4, r4, #2
 800a032:	42a6      	cmp	r6, r4
 800a034:	d105      	bne.n	800a042 <__libc_init_array+0x2e>
 800a036:	bd70      	pop	{r4, r5, r6, pc}
 800a038:	f855 3b04 	ldr.w	r3, [r5], #4
 800a03c:	4798      	blx	r3
 800a03e:	3601      	adds	r6, #1
 800a040:	e7ee      	b.n	800a020 <__libc_init_array+0xc>
 800a042:	f855 3b04 	ldr.w	r3, [r5], #4
 800a046:	4798      	blx	r3
 800a048:	3601      	adds	r6, #1
 800a04a:	e7f2      	b.n	800a032 <__libc_init_array+0x1e>
 800a04c:	0800be78 	.word	0x0800be78
 800a050:	0800be78 	.word	0x0800be78
 800a054:	0800be78 	.word	0x0800be78
 800a058:	0800be7c 	.word	0x0800be7c

0800a05c <memset>:
 800a05c:	4603      	mov	r3, r0
 800a05e:	4402      	add	r2, r0
 800a060:	4293      	cmp	r3, r2
 800a062:	d100      	bne.n	800a066 <memset+0xa>
 800a064:	4770      	bx	lr
 800a066:	f803 1b01 	strb.w	r1, [r3], #1
 800a06a:	e7f9      	b.n	800a060 <memset+0x4>

0800a06c <iprintf>:
 800a06c:	b40f      	push	{r0, r1, r2, r3}
 800a06e:	4b0a      	ldr	r3, [pc, #40]	; (800a098 <iprintf+0x2c>)
 800a070:	b513      	push	{r0, r1, r4, lr}
 800a072:	681c      	ldr	r4, [r3, #0]
 800a074:	b124      	cbz	r4, 800a080 <iprintf+0x14>
 800a076:	69a3      	ldr	r3, [r4, #24]
 800a078:	b913      	cbnz	r3, 800a080 <iprintf+0x14>
 800a07a:	4620      	mov	r0, r4
 800a07c:	f000 fa74 	bl	800a568 <__sinit>
 800a080:	ab05      	add	r3, sp, #20
 800a082:	4620      	mov	r0, r4
 800a084:	9a04      	ldr	r2, [sp, #16]
 800a086:	68a1      	ldr	r1, [r4, #8]
 800a088:	9301      	str	r3, [sp, #4]
 800a08a:	f000 fc3f 	bl	800a90c <_vfiprintf_r>
 800a08e:	b002      	add	sp, #8
 800a090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a094:	b004      	add	sp, #16
 800a096:	4770      	bx	lr
 800a098:	2000001c 	.word	0x2000001c

0800a09c <_puts_r>:
 800a09c:	b570      	push	{r4, r5, r6, lr}
 800a09e:	460e      	mov	r6, r1
 800a0a0:	4605      	mov	r5, r0
 800a0a2:	b118      	cbz	r0, 800a0ac <_puts_r+0x10>
 800a0a4:	6983      	ldr	r3, [r0, #24]
 800a0a6:	b90b      	cbnz	r3, 800a0ac <_puts_r+0x10>
 800a0a8:	f000 fa5e 	bl	800a568 <__sinit>
 800a0ac:	69ab      	ldr	r3, [r5, #24]
 800a0ae:	68ac      	ldr	r4, [r5, #8]
 800a0b0:	b913      	cbnz	r3, 800a0b8 <_puts_r+0x1c>
 800a0b2:	4628      	mov	r0, r5
 800a0b4:	f000 fa58 	bl	800a568 <__sinit>
 800a0b8:	4b2c      	ldr	r3, [pc, #176]	; (800a16c <_puts_r+0xd0>)
 800a0ba:	429c      	cmp	r4, r3
 800a0bc:	d120      	bne.n	800a100 <_puts_r+0x64>
 800a0be:	686c      	ldr	r4, [r5, #4]
 800a0c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0c2:	07db      	lsls	r3, r3, #31
 800a0c4:	d405      	bmi.n	800a0d2 <_puts_r+0x36>
 800a0c6:	89a3      	ldrh	r3, [r4, #12]
 800a0c8:	0598      	lsls	r0, r3, #22
 800a0ca:	d402      	bmi.n	800a0d2 <_puts_r+0x36>
 800a0cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0ce:	f000 fae9 	bl	800a6a4 <__retarget_lock_acquire_recursive>
 800a0d2:	89a3      	ldrh	r3, [r4, #12]
 800a0d4:	0719      	lsls	r1, r3, #28
 800a0d6:	d51d      	bpl.n	800a114 <_puts_r+0x78>
 800a0d8:	6923      	ldr	r3, [r4, #16]
 800a0da:	b1db      	cbz	r3, 800a114 <_puts_r+0x78>
 800a0dc:	3e01      	subs	r6, #1
 800a0de:	68a3      	ldr	r3, [r4, #8]
 800a0e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a0e4:	3b01      	subs	r3, #1
 800a0e6:	60a3      	str	r3, [r4, #8]
 800a0e8:	bb39      	cbnz	r1, 800a13a <_puts_r+0x9e>
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	da38      	bge.n	800a160 <_puts_r+0xc4>
 800a0ee:	4622      	mov	r2, r4
 800a0f0:	210a      	movs	r1, #10
 800a0f2:	4628      	mov	r0, r5
 800a0f4:	f000 f85e 	bl	800a1b4 <__swbuf_r>
 800a0f8:	3001      	adds	r0, #1
 800a0fa:	d011      	beq.n	800a120 <_puts_r+0x84>
 800a0fc:	250a      	movs	r5, #10
 800a0fe:	e011      	b.n	800a124 <_puts_r+0x88>
 800a100:	4b1b      	ldr	r3, [pc, #108]	; (800a170 <_puts_r+0xd4>)
 800a102:	429c      	cmp	r4, r3
 800a104:	d101      	bne.n	800a10a <_puts_r+0x6e>
 800a106:	68ac      	ldr	r4, [r5, #8]
 800a108:	e7da      	b.n	800a0c0 <_puts_r+0x24>
 800a10a:	4b1a      	ldr	r3, [pc, #104]	; (800a174 <_puts_r+0xd8>)
 800a10c:	429c      	cmp	r4, r3
 800a10e:	bf08      	it	eq
 800a110:	68ec      	ldreq	r4, [r5, #12]
 800a112:	e7d5      	b.n	800a0c0 <_puts_r+0x24>
 800a114:	4621      	mov	r1, r4
 800a116:	4628      	mov	r0, r5
 800a118:	f000 f89e 	bl	800a258 <__swsetup_r>
 800a11c:	2800      	cmp	r0, #0
 800a11e:	d0dd      	beq.n	800a0dc <_puts_r+0x40>
 800a120:	f04f 35ff 	mov.w	r5, #4294967295
 800a124:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a126:	07da      	lsls	r2, r3, #31
 800a128:	d405      	bmi.n	800a136 <_puts_r+0x9a>
 800a12a:	89a3      	ldrh	r3, [r4, #12]
 800a12c:	059b      	lsls	r3, r3, #22
 800a12e:	d402      	bmi.n	800a136 <_puts_r+0x9a>
 800a130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a132:	f000 fab8 	bl	800a6a6 <__retarget_lock_release_recursive>
 800a136:	4628      	mov	r0, r5
 800a138:	bd70      	pop	{r4, r5, r6, pc}
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	da04      	bge.n	800a148 <_puts_r+0xac>
 800a13e:	69a2      	ldr	r2, [r4, #24]
 800a140:	429a      	cmp	r2, r3
 800a142:	dc06      	bgt.n	800a152 <_puts_r+0xb6>
 800a144:	290a      	cmp	r1, #10
 800a146:	d004      	beq.n	800a152 <_puts_r+0xb6>
 800a148:	6823      	ldr	r3, [r4, #0]
 800a14a:	1c5a      	adds	r2, r3, #1
 800a14c:	6022      	str	r2, [r4, #0]
 800a14e:	7019      	strb	r1, [r3, #0]
 800a150:	e7c5      	b.n	800a0de <_puts_r+0x42>
 800a152:	4622      	mov	r2, r4
 800a154:	4628      	mov	r0, r5
 800a156:	f000 f82d 	bl	800a1b4 <__swbuf_r>
 800a15a:	3001      	adds	r0, #1
 800a15c:	d1bf      	bne.n	800a0de <_puts_r+0x42>
 800a15e:	e7df      	b.n	800a120 <_puts_r+0x84>
 800a160:	250a      	movs	r5, #10
 800a162:	6823      	ldr	r3, [r4, #0]
 800a164:	1c5a      	adds	r2, r3, #1
 800a166:	6022      	str	r2, [r4, #0]
 800a168:	701d      	strb	r5, [r3, #0]
 800a16a:	e7db      	b.n	800a124 <_puts_r+0x88>
 800a16c:	0800be04 	.word	0x0800be04
 800a170:	0800be24 	.word	0x0800be24
 800a174:	0800bde4 	.word	0x0800bde4

0800a178 <puts>:
 800a178:	4b02      	ldr	r3, [pc, #8]	; (800a184 <puts+0xc>)
 800a17a:	4601      	mov	r1, r0
 800a17c:	6818      	ldr	r0, [r3, #0]
 800a17e:	f7ff bf8d 	b.w	800a09c <_puts_r>
 800a182:	bf00      	nop
 800a184:	2000001c 	.word	0x2000001c

0800a188 <viprintf>:
 800a188:	4b09      	ldr	r3, [pc, #36]	; (800a1b0 <viprintf+0x28>)
 800a18a:	b570      	push	{r4, r5, r6, lr}
 800a18c:	681c      	ldr	r4, [r3, #0]
 800a18e:	4605      	mov	r5, r0
 800a190:	460e      	mov	r6, r1
 800a192:	b124      	cbz	r4, 800a19e <viprintf+0x16>
 800a194:	69a3      	ldr	r3, [r4, #24]
 800a196:	b913      	cbnz	r3, 800a19e <viprintf+0x16>
 800a198:	4620      	mov	r0, r4
 800a19a:	f000 f9e5 	bl	800a568 <__sinit>
 800a19e:	4633      	mov	r3, r6
 800a1a0:	462a      	mov	r2, r5
 800a1a2:	4620      	mov	r0, r4
 800a1a4:	68a1      	ldr	r1, [r4, #8]
 800a1a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a1aa:	f000 bbaf 	b.w	800a90c <_vfiprintf_r>
 800a1ae:	bf00      	nop
 800a1b0:	2000001c 	.word	0x2000001c

0800a1b4 <__swbuf_r>:
 800a1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1b6:	460e      	mov	r6, r1
 800a1b8:	4614      	mov	r4, r2
 800a1ba:	4605      	mov	r5, r0
 800a1bc:	b118      	cbz	r0, 800a1c6 <__swbuf_r+0x12>
 800a1be:	6983      	ldr	r3, [r0, #24]
 800a1c0:	b90b      	cbnz	r3, 800a1c6 <__swbuf_r+0x12>
 800a1c2:	f000 f9d1 	bl	800a568 <__sinit>
 800a1c6:	4b21      	ldr	r3, [pc, #132]	; (800a24c <__swbuf_r+0x98>)
 800a1c8:	429c      	cmp	r4, r3
 800a1ca:	d12b      	bne.n	800a224 <__swbuf_r+0x70>
 800a1cc:	686c      	ldr	r4, [r5, #4]
 800a1ce:	69a3      	ldr	r3, [r4, #24]
 800a1d0:	60a3      	str	r3, [r4, #8]
 800a1d2:	89a3      	ldrh	r3, [r4, #12]
 800a1d4:	071a      	lsls	r2, r3, #28
 800a1d6:	d52f      	bpl.n	800a238 <__swbuf_r+0x84>
 800a1d8:	6923      	ldr	r3, [r4, #16]
 800a1da:	b36b      	cbz	r3, 800a238 <__swbuf_r+0x84>
 800a1dc:	6923      	ldr	r3, [r4, #16]
 800a1de:	6820      	ldr	r0, [r4, #0]
 800a1e0:	b2f6      	uxtb	r6, r6
 800a1e2:	1ac0      	subs	r0, r0, r3
 800a1e4:	6963      	ldr	r3, [r4, #20]
 800a1e6:	4637      	mov	r7, r6
 800a1e8:	4283      	cmp	r3, r0
 800a1ea:	dc04      	bgt.n	800a1f6 <__swbuf_r+0x42>
 800a1ec:	4621      	mov	r1, r4
 800a1ee:	4628      	mov	r0, r5
 800a1f0:	f000 f926 	bl	800a440 <_fflush_r>
 800a1f4:	bb30      	cbnz	r0, 800a244 <__swbuf_r+0x90>
 800a1f6:	68a3      	ldr	r3, [r4, #8]
 800a1f8:	3001      	adds	r0, #1
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	60a3      	str	r3, [r4, #8]
 800a1fe:	6823      	ldr	r3, [r4, #0]
 800a200:	1c5a      	adds	r2, r3, #1
 800a202:	6022      	str	r2, [r4, #0]
 800a204:	701e      	strb	r6, [r3, #0]
 800a206:	6963      	ldr	r3, [r4, #20]
 800a208:	4283      	cmp	r3, r0
 800a20a:	d004      	beq.n	800a216 <__swbuf_r+0x62>
 800a20c:	89a3      	ldrh	r3, [r4, #12]
 800a20e:	07db      	lsls	r3, r3, #31
 800a210:	d506      	bpl.n	800a220 <__swbuf_r+0x6c>
 800a212:	2e0a      	cmp	r6, #10
 800a214:	d104      	bne.n	800a220 <__swbuf_r+0x6c>
 800a216:	4621      	mov	r1, r4
 800a218:	4628      	mov	r0, r5
 800a21a:	f000 f911 	bl	800a440 <_fflush_r>
 800a21e:	b988      	cbnz	r0, 800a244 <__swbuf_r+0x90>
 800a220:	4638      	mov	r0, r7
 800a222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a224:	4b0a      	ldr	r3, [pc, #40]	; (800a250 <__swbuf_r+0x9c>)
 800a226:	429c      	cmp	r4, r3
 800a228:	d101      	bne.n	800a22e <__swbuf_r+0x7a>
 800a22a:	68ac      	ldr	r4, [r5, #8]
 800a22c:	e7cf      	b.n	800a1ce <__swbuf_r+0x1a>
 800a22e:	4b09      	ldr	r3, [pc, #36]	; (800a254 <__swbuf_r+0xa0>)
 800a230:	429c      	cmp	r4, r3
 800a232:	bf08      	it	eq
 800a234:	68ec      	ldreq	r4, [r5, #12]
 800a236:	e7ca      	b.n	800a1ce <__swbuf_r+0x1a>
 800a238:	4621      	mov	r1, r4
 800a23a:	4628      	mov	r0, r5
 800a23c:	f000 f80c 	bl	800a258 <__swsetup_r>
 800a240:	2800      	cmp	r0, #0
 800a242:	d0cb      	beq.n	800a1dc <__swbuf_r+0x28>
 800a244:	f04f 37ff 	mov.w	r7, #4294967295
 800a248:	e7ea      	b.n	800a220 <__swbuf_r+0x6c>
 800a24a:	bf00      	nop
 800a24c:	0800be04 	.word	0x0800be04
 800a250:	0800be24 	.word	0x0800be24
 800a254:	0800bde4 	.word	0x0800bde4

0800a258 <__swsetup_r>:
 800a258:	4b32      	ldr	r3, [pc, #200]	; (800a324 <__swsetup_r+0xcc>)
 800a25a:	b570      	push	{r4, r5, r6, lr}
 800a25c:	681d      	ldr	r5, [r3, #0]
 800a25e:	4606      	mov	r6, r0
 800a260:	460c      	mov	r4, r1
 800a262:	b125      	cbz	r5, 800a26e <__swsetup_r+0x16>
 800a264:	69ab      	ldr	r3, [r5, #24]
 800a266:	b913      	cbnz	r3, 800a26e <__swsetup_r+0x16>
 800a268:	4628      	mov	r0, r5
 800a26a:	f000 f97d 	bl	800a568 <__sinit>
 800a26e:	4b2e      	ldr	r3, [pc, #184]	; (800a328 <__swsetup_r+0xd0>)
 800a270:	429c      	cmp	r4, r3
 800a272:	d10f      	bne.n	800a294 <__swsetup_r+0x3c>
 800a274:	686c      	ldr	r4, [r5, #4]
 800a276:	89a3      	ldrh	r3, [r4, #12]
 800a278:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a27c:	0719      	lsls	r1, r3, #28
 800a27e:	d42c      	bmi.n	800a2da <__swsetup_r+0x82>
 800a280:	06dd      	lsls	r5, r3, #27
 800a282:	d411      	bmi.n	800a2a8 <__swsetup_r+0x50>
 800a284:	2309      	movs	r3, #9
 800a286:	6033      	str	r3, [r6, #0]
 800a288:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a28c:	f04f 30ff 	mov.w	r0, #4294967295
 800a290:	81a3      	strh	r3, [r4, #12]
 800a292:	e03e      	b.n	800a312 <__swsetup_r+0xba>
 800a294:	4b25      	ldr	r3, [pc, #148]	; (800a32c <__swsetup_r+0xd4>)
 800a296:	429c      	cmp	r4, r3
 800a298:	d101      	bne.n	800a29e <__swsetup_r+0x46>
 800a29a:	68ac      	ldr	r4, [r5, #8]
 800a29c:	e7eb      	b.n	800a276 <__swsetup_r+0x1e>
 800a29e:	4b24      	ldr	r3, [pc, #144]	; (800a330 <__swsetup_r+0xd8>)
 800a2a0:	429c      	cmp	r4, r3
 800a2a2:	bf08      	it	eq
 800a2a4:	68ec      	ldreq	r4, [r5, #12]
 800a2a6:	e7e6      	b.n	800a276 <__swsetup_r+0x1e>
 800a2a8:	0758      	lsls	r0, r3, #29
 800a2aa:	d512      	bpl.n	800a2d2 <__swsetup_r+0x7a>
 800a2ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2ae:	b141      	cbz	r1, 800a2c2 <__swsetup_r+0x6a>
 800a2b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2b4:	4299      	cmp	r1, r3
 800a2b6:	d002      	beq.n	800a2be <__swsetup_r+0x66>
 800a2b8:	4630      	mov	r0, r6
 800a2ba:	f000 fa59 	bl	800a770 <_free_r>
 800a2be:	2300      	movs	r3, #0
 800a2c0:	6363      	str	r3, [r4, #52]	; 0x34
 800a2c2:	89a3      	ldrh	r3, [r4, #12]
 800a2c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a2c8:	81a3      	strh	r3, [r4, #12]
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	6063      	str	r3, [r4, #4]
 800a2ce:	6923      	ldr	r3, [r4, #16]
 800a2d0:	6023      	str	r3, [r4, #0]
 800a2d2:	89a3      	ldrh	r3, [r4, #12]
 800a2d4:	f043 0308 	orr.w	r3, r3, #8
 800a2d8:	81a3      	strh	r3, [r4, #12]
 800a2da:	6923      	ldr	r3, [r4, #16]
 800a2dc:	b94b      	cbnz	r3, 800a2f2 <__swsetup_r+0x9a>
 800a2de:	89a3      	ldrh	r3, [r4, #12]
 800a2e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a2e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2e8:	d003      	beq.n	800a2f2 <__swsetup_r+0x9a>
 800a2ea:	4621      	mov	r1, r4
 800a2ec:	4630      	mov	r0, r6
 800a2ee:	f000 f9ff 	bl	800a6f0 <__smakebuf_r>
 800a2f2:	89a0      	ldrh	r0, [r4, #12]
 800a2f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2f8:	f010 0301 	ands.w	r3, r0, #1
 800a2fc:	d00a      	beq.n	800a314 <__swsetup_r+0xbc>
 800a2fe:	2300      	movs	r3, #0
 800a300:	60a3      	str	r3, [r4, #8]
 800a302:	6963      	ldr	r3, [r4, #20]
 800a304:	425b      	negs	r3, r3
 800a306:	61a3      	str	r3, [r4, #24]
 800a308:	6923      	ldr	r3, [r4, #16]
 800a30a:	b943      	cbnz	r3, 800a31e <__swsetup_r+0xc6>
 800a30c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a310:	d1ba      	bne.n	800a288 <__swsetup_r+0x30>
 800a312:	bd70      	pop	{r4, r5, r6, pc}
 800a314:	0781      	lsls	r1, r0, #30
 800a316:	bf58      	it	pl
 800a318:	6963      	ldrpl	r3, [r4, #20]
 800a31a:	60a3      	str	r3, [r4, #8]
 800a31c:	e7f4      	b.n	800a308 <__swsetup_r+0xb0>
 800a31e:	2000      	movs	r0, #0
 800a320:	e7f7      	b.n	800a312 <__swsetup_r+0xba>
 800a322:	bf00      	nop
 800a324:	2000001c 	.word	0x2000001c
 800a328:	0800be04 	.word	0x0800be04
 800a32c:	0800be24 	.word	0x0800be24
 800a330:	0800bde4 	.word	0x0800bde4

0800a334 <__sflush_r>:
 800a334:	898a      	ldrh	r2, [r1, #12]
 800a336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a33a:	4605      	mov	r5, r0
 800a33c:	0710      	lsls	r0, r2, #28
 800a33e:	460c      	mov	r4, r1
 800a340:	d458      	bmi.n	800a3f4 <__sflush_r+0xc0>
 800a342:	684b      	ldr	r3, [r1, #4]
 800a344:	2b00      	cmp	r3, #0
 800a346:	dc05      	bgt.n	800a354 <__sflush_r+0x20>
 800a348:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	dc02      	bgt.n	800a354 <__sflush_r+0x20>
 800a34e:	2000      	movs	r0, #0
 800a350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a354:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a356:	2e00      	cmp	r6, #0
 800a358:	d0f9      	beq.n	800a34e <__sflush_r+0x1a>
 800a35a:	2300      	movs	r3, #0
 800a35c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a360:	682f      	ldr	r7, [r5, #0]
 800a362:	602b      	str	r3, [r5, #0]
 800a364:	d032      	beq.n	800a3cc <__sflush_r+0x98>
 800a366:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a368:	89a3      	ldrh	r3, [r4, #12]
 800a36a:	075a      	lsls	r2, r3, #29
 800a36c:	d505      	bpl.n	800a37a <__sflush_r+0x46>
 800a36e:	6863      	ldr	r3, [r4, #4]
 800a370:	1ac0      	subs	r0, r0, r3
 800a372:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a374:	b10b      	cbz	r3, 800a37a <__sflush_r+0x46>
 800a376:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a378:	1ac0      	subs	r0, r0, r3
 800a37a:	2300      	movs	r3, #0
 800a37c:	4602      	mov	r2, r0
 800a37e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a380:	4628      	mov	r0, r5
 800a382:	6a21      	ldr	r1, [r4, #32]
 800a384:	47b0      	blx	r6
 800a386:	1c43      	adds	r3, r0, #1
 800a388:	89a3      	ldrh	r3, [r4, #12]
 800a38a:	d106      	bne.n	800a39a <__sflush_r+0x66>
 800a38c:	6829      	ldr	r1, [r5, #0]
 800a38e:	291d      	cmp	r1, #29
 800a390:	d82c      	bhi.n	800a3ec <__sflush_r+0xb8>
 800a392:	4a2a      	ldr	r2, [pc, #168]	; (800a43c <__sflush_r+0x108>)
 800a394:	40ca      	lsrs	r2, r1
 800a396:	07d6      	lsls	r6, r2, #31
 800a398:	d528      	bpl.n	800a3ec <__sflush_r+0xb8>
 800a39a:	2200      	movs	r2, #0
 800a39c:	6062      	str	r2, [r4, #4]
 800a39e:	6922      	ldr	r2, [r4, #16]
 800a3a0:	04d9      	lsls	r1, r3, #19
 800a3a2:	6022      	str	r2, [r4, #0]
 800a3a4:	d504      	bpl.n	800a3b0 <__sflush_r+0x7c>
 800a3a6:	1c42      	adds	r2, r0, #1
 800a3a8:	d101      	bne.n	800a3ae <__sflush_r+0x7a>
 800a3aa:	682b      	ldr	r3, [r5, #0]
 800a3ac:	b903      	cbnz	r3, 800a3b0 <__sflush_r+0x7c>
 800a3ae:	6560      	str	r0, [r4, #84]	; 0x54
 800a3b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3b2:	602f      	str	r7, [r5, #0]
 800a3b4:	2900      	cmp	r1, #0
 800a3b6:	d0ca      	beq.n	800a34e <__sflush_r+0x1a>
 800a3b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3bc:	4299      	cmp	r1, r3
 800a3be:	d002      	beq.n	800a3c6 <__sflush_r+0x92>
 800a3c0:	4628      	mov	r0, r5
 800a3c2:	f000 f9d5 	bl	800a770 <_free_r>
 800a3c6:	2000      	movs	r0, #0
 800a3c8:	6360      	str	r0, [r4, #52]	; 0x34
 800a3ca:	e7c1      	b.n	800a350 <__sflush_r+0x1c>
 800a3cc:	6a21      	ldr	r1, [r4, #32]
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	4628      	mov	r0, r5
 800a3d2:	47b0      	blx	r6
 800a3d4:	1c41      	adds	r1, r0, #1
 800a3d6:	d1c7      	bne.n	800a368 <__sflush_r+0x34>
 800a3d8:	682b      	ldr	r3, [r5, #0]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d0c4      	beq.n	800a368 <__sflush_r+0x34>
 800a3de:	2b1d      	cmp	r3, #29
 800a3e0:	d001      	beq.n	800a3e6 <__sflush_r+0xb2>
 800a3e2:	2b16      	cmp	r3, #22
 800a3e4:	d101      	bne.n	800a3ea <__sflush_r+0xb6>
 800a3e6:	602f      	str	r7, [r5, #0]
 800a3e8:	e7b1      	b.n	800a34e <__sflush_r+0x1a>
 800a3ea:	89a3      	ldrh	r3, [r4, #12]
 800a3ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3f0:	81a3      	strh	r3, [r4, #12]
 800a3f2:	e7ad      	b.n	800a350 <__sflush_r+0x1c>
 800a3f4:	690f      	ldr	r7, [r1, #16]
 800a3f6:	2f00      	cmp	r7, #0
 800a3f8:	d0a9      	beq.n	800a34e <__sflush_r+0x1a>
 800a3fa:	0793      	lsls	r3, r2, #30
 800a3fc:	bf18      	it	ne
 800a3fe:	2300      	movne	r3, #0
 800a400:	680e      	ldr	r6, [r1, #0]
 800a402:	bf08      	it	eq
 800a404:	694b      	ldreq	r3, [r1, #20]
 800a406:	eba6 0807 	sub.w	r8, r6, r7
 800a40a:	600f      	str	r7, [r1, #0]
 800a40c:	608b      	str	r3, [r1, #8]
 800a40e:	f1b8 0f00 	cmp.w	r8, #0
 800a412:	dd9c      	ble.n	800a34e <__sflush_r+0x1a>
 800a414:	4643      	mov	r3, r8
 800a416:	463a      	mov	r2, r7
 800a418:	4628      	mov	r0, r5
 800a41a:	6a21      	ldr	r1, [r4, #32]
 800a41c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a41e:	47b0      	blx	r6
 800a420:	2800      	cmp	r0, #0
 800a422:	dc06      	bgt.n	800a432 <__sflush_r+0xfe>
 800a424:	89a3      	ldrh	r3, [r4, #12]
 800a426:	f04f 30ff 	mov.w	r0, #4294967295
 800a42a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a42e:	81a3      	strh	r3, [r4, #12]
 800a430:	e78e      	b.n	800a350 <__sflush_r+0x1c>
 800a432:	4407      	add	r7, r0
 800a434:	eba8 0800 	sub.w	r8, r8, r0
 800a438:	e7e9      	b.n	800a40e <__sflush_r+0xda>
 800a43a:	bf00      	nop
 800a43c:	20400001 	.word	0x20400001

0800a440 <_fflush_r>:
 800a440:	b538      	push	{r3, r4, r5, lr}
 800a442:	690b      	ldr	r3, [r1, #16]
 800a444:	4605      	mov	r5, r0
 800a446:	460c      	mov	r4, r1
 800a448:	b913      	cbnz	r3, 800a450 <_fflush_r+0x10>
 800a44a:	2500      	movs	r5, #0
 800a44c:	4628      	mov	r0, r5
 800a44e:	bd38      	pop	{r3, r4, r5, pc}
 800a450:	b118      	cbz	r0, 800a45a <_fflush_r+0x1a>
 800a452:	6983      	ldr	r3, [r0, #24]
 800a454:	b90b      	cbnz	r3, 800a45a <_fflush_r+0x1a>
 800a456:	f000 f887 	bl	800a568 <__sinit>
 800a45a:	4b14      	ldr	r3, [pc, #80]	; (800a4ac <_fflush_r+0x6c>)
 800a45c:	429c      	cmp	r4, r3
 800a45e:	d11b      	bne.n	800a498 <_fflush_r+0x58>
 800a460:	686c      	ldr	r4, [r5, #4]
 800a462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d0ef      	beq.n	800a44a <_fflush_r+0xa>
 800a46a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a46c:	07d0      	lsls	r0, r2, #31
 800a46e:	d404      	bmi.n	800a47a <_fflush_r+0x3a>
 800a470:	0599      	lsls	r1, r3, #22
 800a472:	d402      	bmi.n	800a47a <_fflush_r+0x3a>
 800a474:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a476:	f000 f915 	bl	800a6a4 <__retarget_lock_acquire_recursive>
 800a47a:	4628      	mov	r0, r5
 800a47c:	4621      	mov	r1, r4
 800a47e:	f7ff ff59 	bl	800a334 <__sflush_r>
 800a482:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a484:	4605      	mov	r5, r0
 800a486:	07da      	lsls	r2, r3, #31
 800a488:	d4e0      	bmi.n	800a44c <_fflush_r+0xc>
 800a48a:	89a3      	ldrh	r3, [r4, #12]
 800a48c:	059b      	lsls	r3, r3, #22
 800a48e:	d4dd      	bmi.n	800a44c <_fflush_r+0xc>
 800a490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a492:	f000 f908 	bl	800a6a6 <__retarget_lock_release_recursive>
 800a496:	e7d9      	b.n	800a44c <_fflush_r+0xc>
 800a498:	4b05      	ldr	r3, [pc, #20]	; (800a4b0 <_fflush_r+0x70>)
 800a49a:	429c      	cmp	r4, r3
 800a49c:	d101      	bne.n	800a4a2 <_fflush_r+0x62>
 800a49e:	68ac      	ldr	r4, [r5, #8]
 800a4a0:	e7df      	b.n	800a462 <_fflush_r+0x22>
 800a4a2:	4b04      	ldr	r3, [pc, #16]	; (800a4b4 <_fflush_r+0x74>)
 800a4a4:	429c      	cmp	r4, r3
 800a4a6:	bf08      	it	eq
 800a4a8:	68ec      	ldreq	r4, [r5, #12]
 800a4aa:	e7da      	b.n	800a462 <_fflush_r+0x22>
 800a4ac:	0800be04 	.word	0x0800be04
 800a4b0:	0800be24 	.word	0x0800be24
 800a4b4:	0800bde4 	.word	0x0800bde4

0800a4b8 <std>:
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	b510      	push	{r4, lr}
 800a4bc:	4604      	mov	r4, r0
 800a4be:	e9c0 3300 	strd	r3, r3, [r0]
 800a4c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a4c6:	6083      	str	r3, [r0, #8]
 800a4c8:	8181      	strh	r1, [r0, #12]
 800a4ca:	6643      	str	r3, [r0, #100]	; 0x64
 800a4cc:	81c2      	strh	r2, [r0, #14]
 800a4ce:	6183      	str	r3, [r0, #24]
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	2208      	movs	r2, #8
 800a4d4:	305c      	adds	r0, #92	; 0x5c
 800a4d6:	f7ff fdc1 	bl	800a05c <memset>
 800a4da:	4b05      	ldr	r3, [pc, #20]	; (800a4f0 <std+0x38>)
 800a4dc:	6224      	str	r4, [r4, #32]
 800a4de:	6263      	str	r3, [r4, #36]	; 0x24
 800a4e0:	4b04      	ldr	r3, [pc, #16]	; (800a4f4 <std+0x3c>)
 800a4e2:	62a3      	str	r3, [r4, #40]	; 0x28
 800a4e4:	4b04      	ldr	r3, [pc, #16]	; (800a4f8 <std+0x40>)
 800a4e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a4e8:	4b04      	ldr	r3, [pc, #16]	; (800a4fc <std+0x44>)
 800a4ea:	6323      	str	r3, [r4, #48]	; 0x30
 800a4ec:	bd10      	pop	{r4, pc}
 800a4ee:	bf00      	nop
 800a4f0:	0800aeb9 	.word	0x0800aeb9
 800a4f4:	0800aedb 	.word	0x0800aedb
 800a4f8:	0800af13 	.word	0x0800af13
 800a4fc:	0800af37 	.word	0x0800af37

0800a500 <_cleanup_r>:
 800a500:	4901      	ldr	r1, [pc, #4]	; (800a508 <_cleanup_r+0x8>)
 800a502:	f000 b8af 	b.w	800a664 <_fwalk_reent>
 800a506:	bf00      	nop
 800a508:	0800a441 	.word	0x0800a441

0800a50c <__sfmoreglue>:
 800a50c:	b570      	push	{r4, r5, r6, lr}
 800a50e:	2568      	movs	r5, #104	; 0x68
 800a510:	1e4a      	subs	r2, r1, #1
 800a512:	4355      	muls	r5, r2
 800a514:	460e      	mov	r6, r1
 800a516:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a51a:	f000 f975 	bl	800a808 <_malloc_r>
 800a51e:	4604      	mov	r4, r0
 800a520:	b140      	cbz	r0, 800a534 <__sfmoreglue+0x28>
 800a522:	2100      	movs	r1, #0
 800a524:	e9c0 1600 	strd	r1, r6, [r0]
 800a528:	300c      	adds	r0, #12
 800a52a:	60a0      	str	r0, [r4, #8]
 800a52c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a530:	f7ff fd94 	bl	800a05c <memset>
 800a534:	4620      	mov	r0, r4
 800a536:	bd70      	pop	{r4, r5, r6, pc}

0800a538 <__sfp_lock_acquire>:
 800a538:	4801      	ldr	r0, [pc, #4]	; (800a540 <__sfp_lock_acquire+0x8>)
 800a53a:	f000 b8b3 	b.w	800a6a4 <__retarget_lock_acquire_recursive>
 800a53e:	bf00      	nop
 800a540:	2000095c 	.word	0x2000095c

0800a544 <__sfp_lock_release>:
 800a544:	4801      	ldr	r0, [pc, #4]	; (800a54c <__sfp_lock_release+0x8>)
 800a546:	f000 b8ae 	b.w	800a6a6 <__retarget_lock_release_recursive>
 800a54a:	bf00      	nop
 800a54c:	2000095c 	.word	0x2000095c

0800a550 <__sinit_lock_acquire>:
 800a550:	4801      	ldr	r0, [pc, #4]	; (800a558 <__sinit_lock_acquire+0x8>)
 800a552:	f000 b8a7 	b.w	800a6a4 <__retarget_lock_acquire_recursive>
 800a556:	bf00      	nop
 800a558:	20000957 	.word	0x20000957

0800a55c <__sinit_lock_release>:
 800a55c:	4801      	ldr	r0, [pc, #4]	; (800a564 <__sinit_lock_release+0x8>)
 800a55e:	f000 b8a2 	b.w	800a6a6 <__retarget_lock_release_recursive>
 800a562:	bf00      	nop
 800a564:	20000957 	.word	0x20000957

0800a568 <__sinit>:
 800a568:	b510      	push	{r4, lr}
 800a56a:	4604      	mov	r4, r0
 800a56c:	f7ff fff0 	bl	800a550 <__sinit_lock_acquire>
 800a570:	69a3      	ldr	r3, [r4, #24]
 800a572:	b11b      	cbz	r3, 800a57c <__sinit+0x14>
 800a574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a578:	f7ff bff0 	b.w	800a55c <__sinit_lock_release>
 800a57c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a580:	6523      	str	r3, [r4, #80]	; 0x50
 800a582:	4b13      	ldr	r3, [pc, #76]	; (800a5d0 <__sinit+0x68>)
 800a584:	4a13      	ldr	r2, [pc, #76]	; (800a5d4 <__sinit+0x6c>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	62a2      	str	r2, [r4, #40]	; 0x28
 800a58a:	42a3      	cmp	r3, r4
 800a58c:	bf08      	it	eq
 800a58e:	2301      	moveq	r3, #1
 800a590:	4620      	mov	r0, r4
 800a592:	bf08      	it	eq
 800a594:	61a3      	streq	r3, [r4, #24]
 800a596:	f000 f81f 	bl	800a5d8 <__sfp>
 800a59a:	6060      	str	r0, [r4, #4]
 800a59c:	4620      	mov	r0, r4
 800a59e:	f000 f81b 	bl	800a5d8 <__sfp>
 800a5a2:	60a0      	str	r0, [r4, #8]
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	f000 f817 	bl	800a5d8 <__sfp>
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	2104      	movs	r1, #4
 800a5ae:	60e0      	str	r0, [r4, #12]
 800a5b0:	6860      	ldr	r0, [r4, #4]
 800a5b2:	f7ff ff81 	bl	800a4b8 <std>
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	2109      	movs	r1, #9
 800a5ba:	68a0      	ldr	r0, [r4, #8]
 800a5bc:	f7ff ff7c 	bl	800a4b8 <std>
 800a5c0:	2202      	movs	r2, #2
 800a5c2:	2112      	movs	r1, #18
 800a5c4:	68e0      	ldr	r0, [r4, #12]
 800a5c6:	f7ff ff77 	bl	800a4b8 <std>
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	61a3      	str	r3, [r4, #24]
 800a5ce:	e7d1      	b.n	800a574 <__sinit+0xc>
 800a5d0:	0800bde0 	.word	0x0800bde0
 800a5d4:	0800a501 	.word	0x0800a501

0800a5d8 <__sfp>:
 800a5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5da:	4607      	mov	r7, r0
 800a5dc:	f7ff ffac 	bl	800a538 <__sfp_lock_acquire>
 800a5e0:	4b1e      	ldr	r3, [pc, #120]	; (800a65c <__sfp+0x84>)
 800a5e2:	681e      	ldr	r6, [r3, #0]
 800a5e4:	69b3      	ldr	r3, [r6, #24]
 800a5e6:	b913      	cbnz	r3, 800a5ee <__sfp+0x16>
 800a5e8:	4630      	mov	r0, r6
 800a5ea:	f7ff ffbd 	bl	800a568 <__sinit>
 800a5ee:	3648      	adds	r6, #72	; 0x48
 800a5f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a5f4:	3b01      	subs	r3, #1
 800a5f6:	d503      	bpl.n	800a600 <__sfp+0x28>
 800a5f8:	6833      	ldr	r3, [r6, #0]
 800a5fa:	b30b      	cbz	r3, 800a640 <__sfp+0x68>
 800a5fc:	6836      	ldr	r6, [r6, #0]
 800a5fe:	e7f7      	b.n	800a5f0 <__sfp+0x18>
 800a600:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a604:	b9d5      	cbnz	r5, 800a63c <__sfp+0x64>
 800a606:	4b16      	ldr	r3, [pc, #88]	; (800a660 <__sfp+0x88>)
 800a608:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a60c:	60e3      	str	r3, [r4, #12]
 800a60e:	6665      	str	r5, [r4, #100]	; 0x64
 800a610:	f000 f847 	bl	800a6a2 <__retarget_lock_init_recursive>
 800a614:	f7ff ff96 	bl	800a544 <__sfp_lock_release>
 800a618:	2208      	movs	r2, #8
 800a61a:	4629      	mov	r1, r5
 800a61c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a620:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a624:	6025      	str	r5, [r4, #0]
 800a626:	61a5      	str	r5, [r4, #24]
 800a628:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a62c:	f7ff fd16 	bl	800a05c <memset>
 800a630:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a634:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a638:	4620      	mov	r0, r4
 800a63a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a63c:	3468      	adds	r4, #104	; 0x68
 800a63e:	e7d9      	b.n	800a5f4 <__sfp+0x1c>
 800a640:	2104      	movs	r1, #4
 800a642:	4638      	mov	r0, r7
 800a644:	f7ff ff62 	bl	800a50c <__sfmoreglue>
 800a648:	4604      	mov	r4, r0
 800a64a:	6030      	str	r0, [r6, #0]
 800a64c:	2800      	cmp	r0, #0
 800a64e:	d1d5      	bne.n	800a5fc <__sfp+0x24>
 800a650:	f7ff ff78 	bl	800a544 <__sfp_lock_release>
 800a654:	230c      	movs	r3, #12
 800a656:	603b      	str	r3, [r7, #0]
 800a658:	e7ee      	b.n	800a638 <__sfp+0x60>
 800a65a:	bf00      	nop
 800a65c:	0800bde0 	.word	0x0800bde0
 800a660:	ffff0001 	.word	0xffff0001

0800a664 <_fwalk_reent>:
 800a664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a668:	4606      	mov	r6, r0
 800a66a:	4688      	mov	r8, r1
 800a66c:	2700      	movs	r7, #0
 800a66e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a672:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a676:	f1b9 0901 	subs.w	r9, r9, #1
 800a67a:	d505      	bpl.n	800a688 <_fwalk_reent+0x24>
 800a67c:	6824      	ldr	r4, [r4, #0]
 800a67e:	2c00      	cmp	r4, #0
 800a680:	d1f7      	bne.n	800a672 <_fwalk_reent+0xe>
 800a682:	4638      	mov	r0, r7
 800a684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a688:	89ab      	ldrh	r3, [r5, #12]
 800a68a:	2b01      	cmp	r3, #1
 800a68c:	d907      	bls.n	800a69e <_fwalk_reent+0x3a>
 800a68e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a692:	3301      	adds	r3, #1
 800a694:	d003      	beq.n	800a69e <_fwalk_reent+0x3a>
 800a696:	4629      	mov	r1, r5
 800a698:	4630      	mov	r0, r6
 800a69a:	47c0      	blx	r8
 800a69c:	4307      	orrs	r7, r0
 800a69e:	3568      	adds	r5, #104	; 0x68
 800a6a0:	e7e9      	b.n	800a676 <_fwalk_reent+0x12>

0800a6a2 <__retarget_lock_init_recursive>:
 800a6a2:	4770      	bx	lr

0800a6a4 <__retarget_lock_acquire_recursive>:
 800a6a4:	4770      	bx	lr

0800a6a6 <__retarget_lock_release_recursive>:
 800a6a6:	4770      	bx	lr

0800a6a8 <__swhatbuf_r>:
 800a6a8:	b570      	push	{r4, r5, r6, lr}
 800a6aa:	460e      	mov	r6, r1
 800a6ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6b0:	4614      	mov	r4, r2
 800a6b2:	2900      	cmp	r1, #0
 800a6b4:	461d      	mov	r5, r3
 800a6b6:	b096      	sub	sp, #88	; 0x58
 800a6b8:	da07      	bge.n	800a6ca <__swhatbuf_r+0x22>
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	602b      	str	r3, [r5, #0]
 800a6be:	89b3      	ldrh	r3, [r6, #12]
 800a6c0:	061a      	lsls	r2, r3, #24
 800a6c2:	d410      	bmi.n	800a6e6 <__swhatbuf_r+0x3e>
 800a6c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6c8:	e00e      	b.n	800a6e8 <__swhatbuf_r+0x40>
 800a6ca:	466a      	mov	r2, sp
 800a6cc:	f000 fc5a 	bl	800af84 <_fstat_r>
 800a6d0:	2800      	cmp	r0, #0
 800a6d2:	dbf2      	blt.n	800a6ba <__swhatbuf_r+0x12>
 800a6d4:	9a01      	ldr	r2, [sp, #4]
 800a6d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a6da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a6de:	425a      	negs	r2, r3
 800a6e0:	415a      	adcs	r2, r3
 800a6e2:	602a      	str	r2, [r5, #0]
 800a6e4:	e7ee      	b.n	800a6c4 <__swhatbuf_r+0x1c>
 800a6e6:	2340      	movs	r3, #64	; 0x40
 800a6e8:	2000      	movs	r0, #0
 800a6ea:	6023      	str	r3, [r4, #0]
 800a6ec:	b016      	add	sp, #88	; 0x58
 800a6ee:	bd70      	pop	{r4, r5, r6, pc}

0800a6f0 <__smakebuf_r>:
 800a6f0:	898b      	ldrh	r3, [r1, #12]
 800a6f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a6f4:	079d      	lsls	r5, r3, #30
 800a6f6:	4606      	mov	r6, r0
 800a6f8:	460c      	mov	r4, r1
 800a6fa:	d507      	bpl.n	800a70c <__smakebuf_r+0x1c>
 800a6fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a700:	6023      	str	r3, [r4, #0]
 800a702:	6123      	str	r3, [r4, #16]
 800a704:	2301      	movs	r3, #1
 800a706:	6163      	str	r3, [r4, #20]
 800a708:	b002      	add	sp, #8
 800a70a:	bd70      	pop	{r4, r5, r6, pc}
 800a70c:	466a      	mov	r2, sp
 800a70e:	ab01      	add	r3, sp, #4
 800a710:	f7ff ffca 	bl	800a6a8 <__swhatbuf_r>
 800a714:	9900      	ldr	r1, [sp, #0]
 800a716:	4605      	mov	r5, r0
 800a718:	4630      	mov	r0, r6
 800a71a:	f000 f875 	bl	800a808 <_malloc_r>
 800a71e:	b948      	cbnz	r0, 800a734 <__smakebuf_r+0x44>
 800a720:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a724:	059a      	lsls	r2, r3, #22
 800a726:	d4ef      	bmi.n	800a708 <__smakebuf_r+0x18>
 800a728:	f023 0303 	bic.w	r3, r3, #3
 800a72c:	f043 0302 	orr.w	r3, r3, #2
 800a730:	81a3      	strh	r3, [r4, #12]
 800a732:	e7e3      	b.n	800a6fc <__smakebuf_r+0xc>
 800a734:	4b0d      	ldr	r3, [pc, #52]	; (800a76c <__smakebuf_r+0x7c>)
 800a736:	62b3      	str	r3, [r6, #40]	; 0x28
 800a738:	89a3      	ldrh	r3, [r4, #12]
 800a73a:	6020      	str	r0, [r4, #0]
 800a73c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a740:	81a3      	strh	r3, [r4, #12]
 800a742:	9b00      	ldr	r3, [sp, #0]
 800a744:	6120      	str	r0, [r4, #16]
 800a746:	6163      	str	r3, [r4, #20]
 800a748:	9b01      	ldr	r3, [sp, #4]
 800a74a:	b15b      	cbz	r3, 800a764 <__smakebuf_r+0x74>
 800a74c:	4630      	mov	r0, r6
 800a74e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a752:	f000 fc29 	bl	800afa8 <_isatty_r>
 800a756:	b128      	cbz	r0, 800a764 <__smakebuf_r+0x74>
 800a758:	89a3      	ldrh	r3, [r4, #12]
 800a75a:	f023 0303 	bic.w	r3, r3, #3
 800a75e:	f043 0301 	orr.w	r3, r3, #1
 800a762:	81a3      	strh	r3, [r4, #12]
 800a764:	89a0      	ldrh	r0, [r4, #12]
 800a766:	4305      	orrs	r5, r0
 800a768:	81a5      	strh	r5, [r4, #12]
 800a76a:	e7cd      	b.n	800a708 <__smakebuf_r+0x18>
 800a76c:	0800a501 	.word	0x0800a501

0800a770 <_free_r>:
 800a770:	b538      	push	{r3, r4, r5, lr}
 800a772:	4605      	mov	r5, r0
 800a774:	2900      	cmp	r1, #0
 800a776:	d043      	beq.n	800a800 <_free_r+0x90>
 800a778:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a77c:	1f0c      	subs	r4, r1, #4
 800a77e:	2b00      	cmp	r3, #0
 800a780:	bfb8      	it	lt
 800a782:	18e4      	addlt	r4, r4, r3
 800a784:	f000 fc40 	bl	800b008 <__malloc_lock>
 800a788:	4a1e      	ldr	r2, [pc, #120]	; (800a804 <_free_r+0x94>)
 800a78a:	6813      	ldr	r3, [r2, #0]
 800a78c:	4610      	mov	r0, r2
 800a78e:	b933      	cbnz	r3, 800a79e <_free_r+0x2e>
 800a790:	6063      	str	r3, [r4, #4]
 800a792:	6014      	str	r4, [r2, #0]
 800a794:	4628      	mov	r0, r5
 800a796:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a79a:	f000 bc3b 	b.w	800b014 <__malloc_unlock>
 800a79e:	42a3      	cmp	r3, r4
 800a7a0:	d90a      	bls.n	800a7b8 <_free_r+0x48>
 800a7a2:	6821      	ldr	r1, [r4, #0]
 800a7a4:	1862      	adds	r2, r4, r1
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	bf01      	itttt	eq
 800a7aa:	681a      	ldreq	r2, [r3, #0]
 800a7ac:	685b      	ldreq	r3, [r3, #4]
 800a7ae:	1852      	addeq	r2, r2, r1
 800a7b0:	6022      	streq	r2, [r4, #0]
 800a7b2:	6063      	str	r3, [r4, #4]
 800a7b4:	6004      	str	r4, [r0, #0]
 800a7b6:	e7ed      	b.n	800a794 <_free_r+0x24>
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	b10b      	cbz	r3, 800a7c2 <_free_r+0x52>
 800a7be:	42a3      	cmp	r3, r4
 800a7c0:	d9fa      	bls.n	800a7b8 <_free_r+0x48>
 800a7c2:	6811      	ldr	r1, [r2, #0]
 800a7c4:	1850      	adds	r0, r2, r1
 800a7c6:	42a0      	cmp	r0, r4
 800a7c8:	d10b      	bne.n	800a7e2 <_free_r+0x72>
 800a7ca:	6820      	ldr	r0, [r4, #0]
 800a7cc:	4401      	add	r1, r0
 800a7ce:	1850      	adds	r0, r2, r1
 800a7d0:	4283      	cmp	r3, r0
 800a7d2:	6011      	str	r1, [r2, #0]
 800a7d4:	d1de      	bne.n	800a794 <_free_r+0x24>
 800a7d6:	6818      	ldr	r0, [r3, #0]
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	4401      	add	r1, r0
 800a7dc:	6011      	str	r1, [r2, #0]
 800a7de:	6053      	str	r3, [r2, #4]
 800a7e0:	e7d8      	b.n	800a794 <_free_r+0x24>
 800a7e2:	d902      	bls.n	800a7ea <_free_r+0x7a>
 800a7e4:	230c      	movs	r3, #12
 800a7e6:	602b      	str	r3, [r5, #0]
 800a7e8:	e7d4      	b.n	800a794 <_free_r+0x24>
 800a7ea:	6820      	ldr	r0, [r4, #0]
 800a7ec:	1821      	adds	r1, r4, r0
 800a7ee:	428b      	cmp	r3, r1
 800a7f0:	bf01      	itttt	eq
 800a7f2:	6819      	ldreq	r1, [r3, #0]
 800a7f4:	685b      	ldreq	r3, [r3, #4]
 800a7f6:	1809      	addeq	r1, r1, r0
 800a7f8:	6021      	streq	r1, [r4, #0]
 800a7fa:	6063      	str	r3, [r4, #4]
 800a7fc:	6054      	str	r4, [r2, #4]
 800a7fe:	e7c9      	b.n	800a794 <_free_r+0x24>
 800a800:	bd38      	pop	{r3, r4, r5, pc}
 800a802:	bf00      	nop
 800a804:	2000027c 	.word	0x2000027c

0800a808 <_malloc_r>:
 800a808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a80a:	1ccd      	adds	r5, r1, #3
 800a80c:	f025 0503 	bic.w	r5, r5, #3
 800a810:	3508      	adds	r5, #8
 800a812:	2d0c      	cmp	r5, #12
 800a814:	bf38      	it	cc
 800a816:	250c      	movcc	r5, #12
 800a818:	2d00      	cmp	r5, #0
 800a81a:	4606      	mov	r6, r0
 800a81c:	db01      	blt.n	800a822 <_malloc_r+0x1a>
 800a81e:	42a9      	cmp	r1, r5
 800a820:	d903      	bls.n	800a82a <_malloc_r+0x22>
 800a822:	230c      	movs	r3, #12
 800a824:	6033      	str	r3, [r6, #0]
 800a826:	2000      	movs	r0, #0
 800a828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a82a:	f000 fbed 	bl	800b008 <__malloc_lock>
 800a82e:	4921      	ldr	r1, [pc, #132]	; (800a8b4 <_malloc_r+0xac>)
 800a830:	680a      	ldr	r2, [r1, #0]
 800a832:	4614      	mov	r4, r2
 800a834:	b99c      	cbnz	r4, 800a85e <_malloc_r+0x56>
 800a836:	4f20      	ldr	r7, [pc, #128]	; (800a8b8 <_malloc_r+0xb0>)
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	b923      	cbnz	r3, 800a846 <_malloc_r+0x3e>
 800a83c:	4621      	mov	r1, r4
 800a83e:	4630      	mov	r0, r6
 800a840:	f000 fb2a 	bl	800ae98 <_sbrk_r>
 800a844:	6038      	str	r0, [r7, #0]
 800a846:	4629      	mov	r1, r5
 800a848:	4630      	mov	r0, r6
 800a84a:	f000 fb25 	bl	800ae98 <_sbrk_r>
 800a84e:	1c43      	adds	r3, r0, #1
 800a850:	d123      	bne.n	800a89a <_malloc_r+0x92>
 800a852:	230c      	movs	r3, #12
 800a854:	4630      	mov	r0, r6
 800a856:	6033      	str	r3, [r6, #0]
 800a858:	f000 fbdc 	bl	800b014 <__malloc_unlock>
 800a85c:	e7e3      	b.n	800a826 <_malloc_r+0x1e>
 800a85e:	6823      	ldr	r3, [r4, #0]
 800a860:	1b5b      	subs	r3, r3, r5
 800a862:	d417      	bmi.n	800a894 <_malloc_r+0x8c>
 800a864:	2b0b      	cmp	r3, #11
 800a866:	d903      	bls.n	800a870 <_malloc_r+0x68>
 800a868:	6023      	str	r3, [r4, #0]
 800a86a:	441c      	add	r4, r3
 800a86c:	6025      	str	r5, [r4, #0]
 800a86e:	e004      	b.n	800a87a <_malloc_r+0x72>
 800a870:	6863      	ldr	r3, [r4, #4]
 800a872:	42a2      	cmp	r2, r4
 800a874:	bf0c      	ite	eq
 800a876:	600b      	streq	r3, [r1, #0]
 800a878:	6053      	strne	r3, [r2, #4]
 800a87a:	4630      	mov	r0, r6
 800a87c:	f000 fbca 	bl	800b014 <__malloc_unlock>
 800a880:	f104 000b 	add.w	r0, r4, #11
 800a884:	1d23      	adds	r3, r4, #4
 800a886:	f020 0007 	bic.w	r0, r0, #7
 800a88a:	1ac2      	subs	r2, r0, r3
 800a88c:	d0cc      	beq.n	800a828 <_malloc_r+0x20>
 800a88e:	1a1b      	subs	r3, r3, r0
 800a890:	50a3      	str	r3, [r4, r2]
 800a892:	e7c9      	b.n	800a828 <_malloc_r+0x20>
 800a894:	4622      	mov	r2, r4
 800a896:	6864      	ldr	r4, [r4, #4]
 800a898:	e7cc      	b.n	800a834 <_malloc_r+0x2c>
 800a89a:	1cc4      	adds	r4, r0, #3
 800a89c:	f024 0403 	bic.w	r4, r4, #3
 800a8a0:	42a0      	cmp	r0, r4
 800a8a2:	d0e3      	beq.n	800a86c <_malloc_r+0x64>
 800a8a4:	1a21      	subs	r1, r4, r0
 800a8a6:	4630      	mov	r0, r6
 800a8a8:	f000 faf6 	bl	800ae98 <_sbrk_r>
 800a8ac:	3001      	adds	r0, #1
 800a8ae:	d1dd      	bne.n	800a86c <_malloc_r+0x64>
 800a8b0:	e7cf      	b.n	800a852 <_malloc_r+0x4a>
 800a8b2:	bf00      	nop
 800a8b4:	2000027c 	.word	0x2000027c
 800a8b8:	20000280 	.word	0x20000280

0800a8bc <__sfputc_r>:
 800a8bc:	6893      	ldr	r3, [r2, #8]
 800a8be:	b410      	push	{r4}
 800a8c0:	3b01      	subs	r3, #1
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	6093      	str	r3, [r2, #8]
 800a8c6:	da07      	bge.n	800a8d8 <__sfputc_r+0x1c>
 800a8c8:	6994      	ldr	r4, [r2, #24]
 800a8ca:	42a3      	cmp	r3, r4
 800a8cc:	db01      	blt.n	800a8d2 <__sfputc_r+0x16>
 800a8ce:	290a      	cmp	r1, #10
 800a8d0:	d102      	bne.n	800a8d8 <__sfputc_r+0x1c>
 800a8d2:	bc10      	pop	{r4}
 800a8d4:	f7ff bc6e 	b.w	800a1b4 <__swbuf_r>
 800a8d8:	6813      	ldr	r3, [r2, #0]
 800a8da:	1c58      	adds	r0, r3, #1
 800a8dc:	6010      	str	r0, [r2, #0]
 800a8de:	7019      	strb	r1, [r3, #0]
 800a8e0:	4608      	mov	r0, r1
 800a8e2:	bc10      	pop	{r4}
 800a8e4:	4770      	bx	lr

0800a8e6 <__sfputs_r>:
 800a8e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8e8:	4606      	mov	r6, r0
 800a8ea:	460f      	mov	r7, r1
 800a8ec:	4614      	mov	r4, r2
 800a8ee:	18d5      	adds	r5, r2, r3
 800a8f0:	42ac      	cmp	r4, r5
 800a8f2:	d101      	bne.n	800a8f8 <__sfputs_r+0x12>
 800a8f4:	2000      	movs	r0, #0
 800a8f6:	e007      	b.n	800a908 <__sfputs_r+0x22>
 800a8f8:	463a      	mov	r2, r7
 800a8fa:	4630      	mov	r0, r6
 800a8fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a900:	f7ff ffdc 	bl	800a8bc <__sfputc_r>
 800a904:	1c43      	adds	r3, r0, #1
 800a906:	d1f3      	bne.n	800a8f0 <__sfputs_r+0xa>
 800a908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a90c <_vfiprintf_r>:
 800a90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a910:	460d      	mov	r5, r1
 800a912:	4614      	mov	r4, r2
 800a914:	4698      	mov	r8, r3
 800a916:	4606      	mov	r6, r0
 800a918:	b09d      	sub	sp, #116	; 0x74
 800a91a:	b118      	cbz	r0, 800a924 <_vfiprintf_r+0x18>
 800a91c:	6983      	ldr	r3, [r0, #24]
 800a91e:	b90b      	cbnz	r3, 800a924 <_vfiprintf_r+0x18>
 800a920:	f7ff fe22 	bl	800a568 <__sinit>
 800a924:	4b89      	ldr	r3, [pc, #548]	; (800ab4c <_vfiprintf_r+0x240>)
 800a926:	429d      	cmp	r5, r3
 800a928:	d11b      	bne.n	800a962 <_vfiprintf_r+0x56>
 800a92a:	6875      	ldr	r5, [r6, #4]
 800a92c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a92e:	07d9      	lsls	r1, r3, #31
 800a930:	d405      	bmi.n	800a93e <_vfiprintf_r+0x32>
 800a932:	89ab      	ldrh	r3, [r5, #12]
 800a934:	059a      	lsls	r2, r3, #22
 800a936:	d402      	bmi.n	800a93e <_vfiprintf_r+0x32>
 800a938:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a93a:	f7ff feb3 	bl	800a6a4 <__retarget_lock_acquire_recursive>
 800a93e:	89ab      	ldrh	r3, [r5, #12]
 800a940:	071b      	lsls	r3, r3, #28
 800a942:	d501      	bpl.n	800a948 <_vfiprintf_r+0x3c>
 800a944:	692b      	ldr	r3, [r5, #16]
 800a946:	b9eb      	cbnz	r3, 800a984 <_vfiprintf_r+0x78>
 800a948:	4629      	mov	r1, r5
 800a94a:	4630      	mov	r0, r6
 800a94c:	f7ff fc84 	bl	800a258 <__swsetup_r>
 800a950:	b1c0      	cbz	r0, 800a984 <_vfiprintf_r+0x78>
 800a952:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a954:	07dc      	lsls	r4, r3, #31
 800a956:	d50e      	bpl.n	800a976 <_vfiprintf_r+0x6a>
 800a958:	f04f 30ff 	mov.w	r0, #4294967295
 800a95c:	b01d      	add	sp, #116	; 0x74
 800a95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a962:	4b7b      	ldr	r3, [pc, #492]	; (800ab50 <_vfiprintf_r+0x244>)
 800a964:	429d      	cmp	r5, r3
 800a966:	d101      	bne.n	800a96c <_vfiprintf_r+0x60>
 800a968:	68b5      	ldr	r5, [r6, #8]
 800a96a:	e7df      	b.n	800a92c <_vfiprintf_r+0x20>
 800a96c:	4b79      	ldr	r3, [pc, #484]	; (800ab54 <_vfiprintf_r+0x248>)
 800a96e:	429d      	cmp	r5, r3
 800a970:	bf08      	it	eq
 800a972:	68f5      	ldreq	r5, [r6, #12]
 800a974:	e7da      	b.n	800a92c <_vfiprintf_r+0x20>
 800a976:	89ab      	ldrh	r3, [r5, #12]
 800a978:	0598      	lsls	r0, r3, #22
 800a97a:	d4ed      	bmi.n	800a958 <_vfiprintf_r+0x4c>
 800a97c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a97e:	f7ff fe92 	bl	800a6a6 <__retarget_lock_release_recursive>
 800a982:	e7e9      	b.n	800a958 <_vfiprintf_r+0x4c>
 800a984:	2300      	movs	r3, #0
 800a986:	9309      	str	r3, [sp, #36]	; 0x24
 800a988:	2320      	movs	r3, #32
 800a98a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a98e:	2330      	movs	r3, #48	; 0x30
 800a990:	f04f 0901 	mov.w	r9, #1
 800a994:	f8cd 800c 	str.w	r8, [sp, #12]
 800a998:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ab58 <_vfiprintf_r+0x24c>
 800a99c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9a0:	4623      	mov	r3, r4
 800a9a2:	469a      	mov	sl, r3
 800a9a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9a8:	b10a      	cbz	r2, 800a9ae <_vfiprintf_r+0xa2>
 800a9aa:	2a25      	cmp	r2, #37	; 0x25
 800a9ac:	d1f9      	bne.n	800a9a2 <_vfiprintf_r+0x96>
 800a9ae:	ebba 0b04 	subs.w	fp, sl, r4
 800a9b2:	d00b      	beq.n	800a9cc <_vfiprintf_r+0xc0>
 800a9b4:	465b      	mov	r3, fp
 800a9b6:	4622      	mov	r2, r4
 800a9b8:	4629      	mov	r1, r5
 800a9ba:	4630      	mov	r0, r6
 800a9bc:	f7ff ff93 	bl	800a8e6 <__sfputs_r>
 800a9c0:	3001      	adds	r0, #1
 800a9c2:	f000 80aa 	beq.w	800ab1a <_vfiprintf_r+0x20e>
 800a9c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9c8:	445a      	add	r2, fp
 800a9ca:	9209      	str	r2, [sp, #36]	; 0x24
 800a9cc:	f89a 3000 	ldrb.w	r3, [sl]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	f000 80a2 	beq.w	800ab1a <_vfiprintf_r+0x20e>
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a9dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9e0:	f10a 0a01 	add.w	sl, sl, #1
 800a9e4:	9304      	str	r3, [sp, #16]
 800a9e6:	9307      	str	r3, [sp, #28]
 800a9e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a9ec:	931a      	str	r3, [sp, #104]	; 0x68
 800a9ee:	4654      	mov	r4, sl
 800a9f0:	2205      	movs	r2, #5
 800a9f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9f6:	4858      	ldr	r0, [pc, #352]	; (800ab58 <_vfiprintf_r+0x24c>)
 800a9f8:	f000 faf8 	bl	800afec <memchr>
 800a9fc:	9a04      	ldr	r2, [sp, #16]
 800a9fe:	b9d8      	cbnz	r0, 800aa38 <_vfiprintf_r+0x12c>
 800aa00:	06d1      	lsls	r1, r2, #27
 800aa02:	bf44      	itt	mi
 800aa04:	2320      	movmi	r3, #32
 800aa06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa0a:	0713      	lsls	r3, r2, #28
 800aa0c:	bf44      	itt	mi
 800aa0e:	232b      	movmi	r3, #43	; 0x2b
 800aa10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa14:	f89a 3000 	ldrb.w	r3, [sl]
 800aa18:	2b2a      	cmp	r3, #42	; 0x2a
 800aa1a:	d015      	beq.n	800aa48 <_vfiprintf_r+0x13c>
 800aa1c:	4654      	mov	r4, sl
 800aa1e:	2000      	movs	r0, #0
 800aa20:	f04f 0c0a 	mov.w	ip, #10
 800aa24:	9a07      	ldr	r2, [sp, #28]
 800aa26:	4621      	mov	r1, r4
 800aa28:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa2c:	3b30      	subs	r3, #48	; 0x30
 800aa2e:	2b09      	cmp	r3, #9
 800aa30:	d94e      	bls.n	800aad0 <_vfiprintf_r+0x1c4>
 800aa32:	b1b0      	cbz	r0, 800aa62 <_vfiprintf_r+0x156>
 800aa34:	9207      	str	r2, [sp, #28]
 800aa36:	e014      	b.n	800aa62 <_vfiprintf_r+0x156>
 800aa38:	eba0 0308 	sub.w	r3, r0, r8
 800aa3c:	fa09 f303 	lsl.w	r3, r9, r3
 800aa40:	4313      	orrs	r3, r2
 800aa42:	46a2      	mov	sl, r4
 800aa44:	9304      	str	r3, [sp, #16]
 800aa46:	e7d2      	b.n	800a9ee <_vfiprintf_r+0xe2>
 800aa48:	9b03      	ldr	r3, [sp, #12]
 800aa4a:	1d19      	adds	r1, r3, #4
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	9103      	str	r1, [sp, #12]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	bfbb      	ittet	lt
 800aa54:	425b      	neglt	r3, r3
 800aa56:	f042 0202 	orrlt.w	r2, r2, #2
 800aa5a:	9307      	strge	r3, [sp, #28]
 800aa5c:	9307      	strlt	r3, [sp, #28]
 800aa5e:	bfb8      	it	lt
 800aa60:	9204      	strlt	r2, [sp, #16]
 800aa62:	7823      	ldrb	r3, [r4, #0]
 800aa64:	2b2e      	cmp	r3, #46	; 0x2e
 800aa66:	d10c      	bne.n	800aa82 <_vfiprintf_r+0x176>
 800aa68:	7863      	ldrb	r3, [r4, #1]
 800aa6a:	2b2a      	cmp	r3, #42	; 0x2a
 800aa6c:	d135      	bne.n	800aada <_vfiprintf_r+0x1ce>
 800aa6e:	9b03      	ldr	r3, [sp, #12]
 800aa70:	3402      	adds	r4, #2
 800aa72:	1d1a      	adds	r2, r3, #4
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	9203      	str	r2, [sp, #12]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	bfb8      	it	lt
 800aa7c:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa80:	9305      	str	r3, [sp, #20]
 800aa82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ab68 <_vfiprintf_r+0x25c>
 800aa86:	2203      	movs	r2, #3
 800aa88:	4650      	mov	r0, sl
 800aa8a:	7821      	ldrb	r1, [r4, #0]
 800aa8c:	f000 faae 	bl	800afec <memchr>
 800aa90:	b140      	cbz	r0, 800aaa4 <_vfiprintf_r+0x198>
 800aa92:	2340      	movs	r3, #64	; 0x40
 800aa94:	eba0 000a 	sub.w	r0, r0, sl
 800aa98:	fa03 f000 	lsl.w	r0, r3, r0
 800aa9c:	9b04      	ldr	r3, [sp, #16]
 800aa9e:	3401      	adds	r4, #1
 800aaa0:	4303      	orrs	r3, r0
 800aaa2:	9304      	str	r3, [sp, #16]
 800aaa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaa8:	2206      	movs	r2, #6
 800aaaa:	482c      	ldr	r0, [pc, #176]	; (800ab5c <_vfiprintf_r+0x250>)
 800aaac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aab0:	f000 fa9c 	bl	800afec <memchr>
 800aab4:	2800      	cmp	r0, #0
 800aab6:	d03f      	beq.n	800ab38 <_vfiprintf_r+0x22c>
 800aab8:	4b29      	ldr	r3, [pc, #164]	; (800ab60 <_vfiprintf_r+0x254>)
 800aaba:	bb1b      	cbnz	r3, 800ab04 <_vfiprintf_r+0x1f8>
 800aabc:	9b03      	ldr	r3, [sp, #12]
 800aabe:	3307      	adds	r3, #7
 800aac0:	f023 0307 	bic.w	r3, r3, #7
 800aac4:	3308      	adds	r3, #8
 800aac6:	9303      	str	r3, [sp, #12]
 800aac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaca:	443b      	add	r3, r7
 800aacc:	9309      	str	r3, [sp, #36]	; 0x24
 800aace:	e767      	b.n	800a9a0 <_vfiprintf_r+0x94>
 800aad0:	460c      	mov	r4, r1
 800aad2:	2001      	movs	r0, #1
 800aad4:	fb0c 3202 	mla	r2, ip, r2, r3
 800aad8:	e7a5      	b.n	800aa26 <_vfiprintf_r+0x11a>
 800aada:	2300      	movs	r3, #0
 800aadc:	f04f 0c0a 	mov.w	ip, #10
 800aae0:	4619      	mov	r1, r3
 800aae2:	3401      	adds	r4, #1
 800aae4:	9305      	str	r3, [sp, #20]
 800aae6:	4620      	mov	r0, r4
 800aae8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aaec:	3a30      	subs	r2, #48	; 0x30
 800aaee:	2a09      	cmp	r2, #9
 800aaf0:	d903      	bls.n	800aafa <_vfiprintf_r+0x1ee>
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d0c5      	beq.n	800aa82 <_vfiprintf_r+0x176>
 800aaf6:	9105      	str	r1, [sp, #20]
 800aaf8:	e7c3      	b.n	800aa82 <_vfiprintf_r+0x176>
 800aafa:	4604      	mov	r4, r0
 800aafc:	2301      	movs	r3, #1
 800aafe:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab02:	e7f0      	b.n	800aae6 <_vfiprintf_r+0x1da>
 800ab04:	ab03      	add	r3, sp, #12
 800ab06:	9300      	str	r3, [sp, #0]
 800ab08:	462a      	mov	r2, r5
 800ab0a:	4630      	mov	r0, r6
 800ab0c:	4b15      	ldr	r3, [pc, #84]	; (800ab64 <_vfiprintf_r+0x258>)
 800ab0e:	a904      	add	r1, sp, #16
 800ab10:	f3af 8000 	nop.w
 800ab14:	4607      	mov	r7, r0
 800ab16:	1c78      	adds	r0, r7, #1
 800ab18:	d1d6      	bne.n	800aac8 <_vfiprintf_r+0x1bc>
 800ab1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab1c:	07d9      	lsls	r1, r3, #31
 800ab1e:	d405      	bmi.n	800ab2c <_vfiprintf_r+0x220>
 800ab20:	89ab      	ldrh	r3, [r5, #12]
 800ab22:	059a      	lsls	r2, r3, #22
 800ab24:	d402      	bmi.n	800ab2c <_vfiprintf_r+0x220>
 800ab26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab28:	f7ff fdbd 	bl	800a6a6 <__retarget_lock_release_recursive>
 800ab2c:	89ab      	ldrh	r3, [r5, #12]
 800ab2e:	065b      	lsls	r3, r3, #25
 800ab30:	f53f af12 	bmi.w	800a958 <_vfiprintf_r+0x4c>
 800ab34:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab36:	e711      	b.n	800a95c <_vfiprintf_r+0x50>
 800ab38:	ab03      	add	r3, sp, #12
 800ab3a:	9300      	str	r3, [sp, #0]
 800ab3c:	462a      	mov	r2, r5
 800ab3e:	4630      	mov	r0, r6
 800ab40:	4b08      	ldr	r3, [pc, #32]	; (800ab64 <_vfiprintf_r+0x258>)
 800ab42:	a904      	add	r1, sp, #16
 800ab44:	f000 f882 	bl	800ac4c <_printf_i>
 800ab48:	e7e4      	b.n	800ab14 <_vfiprintf_r+0x208>
 800ab4a:	bf00      	nop
 800ab4c:	0800be04 	.word	0x0800be04
 800ab50:	0800be24 	.word	0x0800be24
 800ab54:	0800bde4 	.word	0x0800bde4
 800ab58:	0800be44 	.word	0x0800be44
 800ab5c:	0800be4e 	.word	0x0800be4e
 800ab60:	00000000 	.word	0x00000000
 800ab64:	0800a8e7 	.word	0x0800a8e7
 800ab68:	0800be4a 	.word	0x0800be4a

0800ab6c <_printf_common>:
 800ab6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab70:	4616      	mov	r6, r2
 800ab72:	4699      	mov	r9, r3
 800ab74:	688a      	ldr	r2, [r1, #8]
 800ab76:	690b      	ldr	r3, [r1, #16]
 800ab78:	4607      	mov	r7, r0
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	bfb8      	it	lt
 800ab7e:	4613      	movlt	r3, r2
 800ab80:	6033      	str	r3, [r6, #0]
 800ab82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab86:	460c      	mov	r4, r1
 800ab88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab8c:	b10a      	cbz	r2, 800ab92 <_printf_common+0x26>
 800ab8e:	3301      	adds	r3, #1
 800ab90:	6033      	str	r3, [r6, #0]
 800ab92:	6823      	ldr	r3, [r4, #0]
 800ab94:	0699      	lsls	r1, r3, #26
 800ab96:	bf42      	ittt	mi
 800ab98:	6833      	ldrmi	r3, [r6, #0]
 800ab9a:	3302      	addmi	r3, #2
 800ab9c:	6033      	strmi	r3, [r6, #0]
 800ab9e:	6825      	ldr	r5, [r4, #0]
 800aba0:	f015 0506 	ands.w	r5, r5, #6
 800aba4:	d106      	bne.n	800abb4 <_printf_common+0x48>
 800aba6:	f104 0a19 	add.w	sl, r4, #25
 800abaa:	68e3      	ldr	r3, [r4, #12]
 800abac:	6832      	ldr	r2, [r6, #0]
 800abae:	1a9b      	subs	r3, r3, r2
 800abb0:	42ab      	cmp	r3, r5
 800abb2:	dc28      	bgt.n	800ac06 <_printf_common+0x9a>
 800abb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800abb8:	1e13      	subs	r3, r2, #0
 800abba:	6822      	ldr	r2, [r4, #0]
 800abbc:	bf18      	it	ne
 800abbe:	2301      	movne	r3, #1
 800abc0:	0692      	lsls	r2, r2, #26
 800abc2:	d42d      	bmi.n	800ac20 <_printf_common+0xb4>
 800abc4:	4649      	mov	r1, r9
 800abc6:	4638      	mov	r0, r7
 800abc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800abcc:	47c0      	blx	r8
 800abce:	3001      	adds	r0, #1
 800abd0:	d020      	beq.n	800ac14 <_printf_common+0xa8>
 800abd2:	6823      	ldr	r3, [r4, #0]
 800abd4:	68e5      	ldr	r5, [r4, #12]
 800abd6:	f003 0306 	and.w	r3, r3, #6
 800abda:	2b04      	cmp	r3, #4
 800abdc:	bf18      	it	ne
 800abde:	2500      	movne	r5, #0
 800abe0:	6832      	ldr	r2, [r6, #0]
 800abe2:	f04f 0600 	mov.w	r6, #0
 800abe6:	68a3      	ldr	r3, [r4, #8]
 800abe8:	bf08      	it	eq
 800abea:	1aad      	subeq	r5, r5, r2
 800abec:	6922      	ldr	r2, [r4, #16]
 800abee:	bf08      	it	eq
 800abf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800abf4:	4293      	cmp	r3, r2
 800abf6:	bfc4      	itt	gt
 800abf8:	1a9b      	subgt	r3, r3, r2
 800abfa:	18ed      	addgt	r5, r5, r3
 800abfc:	341a      	adds	r4, #26
 800abfe:	42b5      	cmp	r5, r6
 800ac00:	d11a      	bne.n	800ac38 <_printf_common+0xcc>
 800ac02:	2000      	movs	r0, #0
 800ac04:	e008      	b.n	800ac18 <_printf_common+0xac>
 800ac06:	2301      	movs	r3, #1
 800ac08:	4652      	mov	r2, sl
 800ac0a:	4649      	mov	r1, r9
 800ac0c:	4638      	mov	r0, r7
 800ac0e:	47c0      	blx	r8
 800ac10:	3001      	adds	r0, #1
 800ac12:	d103      	bne.n	800ac1c <_printf_common+0xb0>
 800ac14:	f04f 30ff 	mov.w	r0, #4294967295
 800ac18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac1c:	3501      	adds	r5, #1
 800ac1e:	e7c4      	b.n	800abaa <_printf_common+0x3e>
 800ac20:	2030      	movs	r0, #48	; 0x30
 800ac22:	18e1      	adds	r1, r4, r3
 800ac24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac28:	1c5a      	adds	r2, r3, #1
 800ac2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ac2e:	4422      	add	r2, r4
 800ac30:	3302      	adds	r3, #2
 800ac32:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ac36:	e7c5      	b.n	800abc4 <_printf_common+0x58>
 800ac38:	2301      	movs	r3, #1
 800ac3a:	4622      	mov	r2, r4
 800ac3c:	4649      	mov	r1, r9
 800ac3e:	4638      	mov	r0, r7
 800ac40:	47c0      	blx	r8
 800ac42:	3001      	adds	r0, #1
 800ac44:	d0e6      	beq.n	800ac14 <_printf_common+0xa8>
 800ac46:	3601      	adds	r6, #1
 800ac48:	e7d9      	b.n	800abfe <_printf_common+0x92>
	...

0800ac4c <_printf_i>:
 800ac4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac50:	460c      	mov	r4, r1
 800ac52:	7e27      	ldrb	r7, [r4, #24]
 800ac54:	4691      	mov	r9, r2
 800ac56:	2f78      	cmp	r7, #120	; 0x78
 800ac58:	4680      	mov	r8, r0
 800ac5a:	469a      	mov	sl, r3
 800ac5c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ac5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac62:	d807      	bhi.n	800ac74 <_printf_i+0x28>
 800ac64:	2f62      	cmp	r7, #98	; 0x62
 800ac66:	d80a      	bhi.n	800ac7e <_printf_i+0x32>
 800ac68:	2f00      	cmp	r7, #0
 800ac6a:	f000 80d9 	beq.w	800ae20 <_printf_i+0x1d4>
 800ac6e:	2f58      	cmp	r7, #88	; 0x58
 800ac70:	f000 80a4 	beq.w	800adbc <_printf_i+0x170>
 800ac74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ac78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ac7c:	e03a      	b.n	800acf4 <_printf_i+0xa8>
 800ac7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ac82:	2b15      	cmp	r3, #21
 800ac84:	d8f6      	bhi.n	800ac74 <_printf_i+0x28>
 800ac86:	a001      	add	r0, pc, #4	; (adr r0, 800ac8c <_printf_i+0x40>)
 800ac88:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ac8c:	0800ace5 	.word	0x0800ace5
 800ac90:	0800acf9 	.word	0x0800acf9
 800ac94:	0800ac75 	.word	0x0800ac75
 800ac98:	0800ac75 	.word	0x0800ac75
 800ac9c:	0800ac75 	.word	0x0800ac75
 800aca0:	0800ac75 	.word	0x0800ac75
 800aca4:	0800acf9 	.word	0x0800acf9
 800aca8:	0800ac75 	.word	0x0800ac75
 800acac:	0800ac75 	.word	0x0800ac75
 800acb0:	0800ac75 	.word	0x0800ac75
 800acb4:	0800ac75 	.word	0x0800ac75
 800acb8:	0800ae07 	.word	0x0800ae07
 800acbc:	0800ad29 	.word	0x0800ad29
 800acc0:	0800ade9 	.word	0x0800ade9
 800acc4:	0800ac75 	.word	0x0800ac75
 800acc8:	0800ac75 	.word	0x0800ac75
 800accc:	0800ae29 	.word	0x0800ae29
 800acd0:	0800ac75 	.word	0x0800ac75
 800acd4:	0800ad29 	.word	0x0800ad29
 800acd8:	0800ac75 	.word	0x0800ac75
 800acdc:	0800ac75 	.word	0x0800ac75
 800ace0:	0800adf1 	.word	0x0800adf1
 800ace4:	680b      	ldr	r3, [r1, #0]
 800ace6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800acea:	1d1a      	adds	r2, r3, #4
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	600a      	str	r2, [r1, #0]
 800acf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800acf4:	2301      	movs	r3, #1
 800acf6:	e0a4      	b.n	800ae42 <_printf_i+0x1f6>
 800acf8:	6825      	ldr	r5, [r4, #0]
 800acfa:	6808      	ldr	r0, [r1, #0]
 800acfc:	062e      	lsls	r6, r5, #24
 800acfe:	f100 0304 	add.w	r3, r0, #4
 800ad02:	d50a      	bpl.n	800ad1a <_printf_i+0xce>
 800ad04:	6805      	ldr	r5, [r0, #0]
 800ad06:	600b      	str	r3, [r1, #0]
 800ad08:	2d00      	cmp	r5, #0
 800ad0a:	da03      	bge.n	800ad14 <_printf_i+0xc8>
 800ad0c:	232d      	movs	r3, #45	; 0x2d
 800ad0e:	426d      	negs	r5, r5
 800ad10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad14:	230a      	movs	r3, #10
 800ad16:	485e      	ldr	r0, [pc, #376]	; (800ae90 <_printf_i+0x244>)
 800ad18:	e019      	b.n	800ad4e <_printf_i+0x102>
 800ad1a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ad1e:	6805      	ldr	r5, [r0, #0]
 800ad20:	600b      	str	r3, [r1, #0]
 800ad22:	bf18      	it	ne
 800ad24:	b22d      	sxthne	r5, r5
 800ad26:	e7ef      	b.n	800ad08 <_printf_i+0xbc>
 800ad28:	680b      	ldr	r3, [r1, #0]
 800ad2a:	6825      	ldr	r5, [r4, #0]
 800ad2c:	1d18      	adds	r0, r3, #4
 800ad2e:	6008      	str	r0, [r1, #0]
 800ad30:	0628      	lsls	r0, r5, #24
 800ad32:	d501      	bpl.n	800ad38 <_printf_i+0xec>
 800ad34:	681d      	ldr	r5, [r3, #0]
 800ad36:	e002      	b.n	800ad3e <_printf_i+0xf2>
 800ad38:	0669      	lsls	r1, r5, #25
 800ad3a:	d5fb      	bpl.n	800ad34 <_printf_i+0xe8>
 800ad3c:	881d      	ldrh	r5, [r3, #0]
 800ad3e:	2f6f      	cmp	r7, #111	; 0x6f
 800ad40:	bf0c      	ite	eq
 800ad42:	2308      	moveq	r3, #8
 800ad44:	230a      	movne	r3, #10
 800ad46:	4852      	ldr	r0, [pc, #328]	; (800ae90 <_printf_i+0x244>)
 800ad48:	2100      	movs	r1, #0
 800ad4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ad4e:	6866      	ldr	r6, [r4, #4]
 800ad50:	2e00      	cmp	r6, #0
 800ad52:	bfa8      	it	ge
 800ad54:	6821      	ldrge	r1, [r4, #0]
 800ad56:	60a6      	str	r6, [r4, #8]
 800ad58:	bfa4      	itt	ge
 800ad5a:	f021 0104 	bicge.w	r1, r1, #4
 800ad5e:	6021      	strge	r1, [r4, #0]
 800ad60:	b90d      	cbnz	r5, 800ad66 <_printf_i+0x11a>
 800ad62:	2e00      	cmp	r6, #0
 800ad64:	d04d      	beq.n	800ae02 <_printf_i+0x1b6>
 800ad66:	4616      	mov	r6, r2
 800ad68:	fbb5 f1f3 	udiv	r1, r5, r3
 800ad6c:	fb03 5711 	mls	r7, r3, r1, r5
 800ad70:	5dc7      	ldrb	r7, [r0, r7]
 800ad72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad76:	462f      	mov	r7, r5
 800ad78:	42bb      	cmp	r3, r7
 800ad7a:	460d      	mov	r5, r1
 800ad7c:	d9f4      	bls.n	800ad68 <_printf_i+0x11c>
 800ad7e:	2b08      	cmp	r3, #8
 800ad80:	d10b      	bne.n	800ad9a <_printf_i+0x14e>
 800ad82:	6823      	ldr	r3, [r4, #0]
 800ad84:	07df      	lsls	r7, r3, #31
 800ad86:	d508      	bpl.n	800ad9a <_printf_i+0x14e>
 800ad88:	6923      	ldr	r3, [r4, #16]
 800ad8a:	6861      	ldr	r1, [r4, #4]
 800ad8c:	4299      	cmp	r1, r3
 800ad8e:	bfde      	ittt	le
 800ad90:	2330      	movle	r3, #48	; 0x30
 800ad92:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad96:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ad9a:	1b92      	subs	r2, r2, r6
 800ad9c:	6122      	str	r2, [r4, #16]
 800ad9e:	464b      	mov	r3, r9
 800ada0:	4621      	mov	r1, r4
 800ada2:	4640      	mov	r0, r8
 800ada4:	f8cd a000 	str.w	sl, [sp]
 800ada8:	aa03      	add	r2, sp, #12
 800adaa:	f7ff fedf 	bl	800ab6c <_printf_common>
 800adae:	3001      	adds	r0, #1
 800adb0:	d14c      	bne.n	800ae4c <_printf_i+0x200>
 800adb2:	f04f 30ff 	mov.w	r0, #4294967295
 800adb6:	b004      	add	sp, #16
 800adb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adbc:	4834      	ldr	r0, [pc, #208]	; (800ae90 <_printf_i+0x244>)
 800adbe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800adc2:	680e      	ldr	r6, [r1, #0]
 800adc4:	6823      	ldr	r3, [r4, #0]
 800adc6:	f856 5b04 	ldr.w	r5, [r6], #4
 800adca:	061f      	lsls	r7, r3, #24
 800adcc:	600e      	str	r6, [r1, #0]
 800adce:	d514      	bpl.n	800adfa <_printf_i+0x1ae>
 800add0:	07d9      	lsls	r1, r3, #31
 800add2:	bf44      	itt	mi
 800add4:	f043 0320 	orrmi.w	r3, r3, #32
 800add8:	6023      	strmi	r3, [r4, #0]
 800adda:	b91d      	cbnz	r5, 800ade4 <_printf_i+0x198>
 800addc:	6823      	ldr	r3, [r4, #0]
 800adde:	f023 0320 	bic.w	r3, r3, #32
 800ade2:	6023      	str	r3, [r4, #0]
 800ade4:	2310      	movs	r3, #16
 800ade6:	e7af      	b.n	800ad48 <_printf_i+0xfc>
 800ade8:	6823      	ldr	r3, [r4, #0]
 800adea:	f043 0320 	orr.w	r3, r3, #32
 800adee:	6023      	str	r3, [r4, #0]
 800adf0:	2378      	movs	r3, #120	; 0x78
 800adf2:	4828      	ldr	r0, [pc, #160]	; (800ae94 <_printf_i+0x248>)
 800adf4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800adf8:	e7e3      	b.n	800adc2 <_printf_i+0x176>
 800adfa:	065e      	lsls	r6, r3, #25
 800adfc:	bf48      	it	mi
 800adfe:	b2ad      	uxthmi	r5, r5
 800ae00:	e7e6      	b.n	800add0 <_printf_i+0x184>
 800ae02:	4616      	mov	r6, r2
 800ae04:	e7bb      	b.n	800ad7e <_printf_i+0x132>
 800ae06:	680b      	ldr	r3, [r1, #0]
 800ae08:	6826      	ldr	r6, [r4, #0]
 800ae0a:	1d1d      	adds	r5, r3, #4
 800ae0c:	6960      	ldr	r0, [r4, #20]
 800ae0e:	600d      	str	r5, [r1, #0]
 800ae10:	0635      	lsls	r5, r6, #24
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	d501      	bpl.n	800ae1a <_printf_i+0x1ce>
 800ae16:	6018      	str	r0, [r3, #0]
 800ae18:	e002      	b.n	800ae20 <_printf_i+0x1d4>
 800ae1a:	0671      	lsls	r1, r6, #25
 800ae1c:	d5fb      	bpl.n	800ae16 <_printf_i+0x1ca>
 800ae1e:	8018      	strh	r0, [r3, #0]
 800ae20:	2300      	movs	r3, #0
 800ae22:	4616      	mov	r6, r2
 800ae24:	6123      	str	r3, [r4, #16]
 800ae26:	e7ba      	b.n	800ad9e <_printf_i+0x152>
 800ae28:	680b      	ldr	r3, [r1, #0]
 800ae2a:	1d1a      	adds	r2, r3, #4
 800ae2c:	600a      	str	r2, [r1, #0]
 800ae2e:	681e      	ldr	r6, [r3, #0]
 800ae30:	2100      	movs	r1, #0
 800ae32:	4630      	mov	r0, r6
 800ae34:	6862      	ldr	r2, [r4, #4]
 800ae36:	f000 f8d9 	bl	800afec <memchr>
 800ae3a:	b108      	cbz	r0, 800ae40 <_printf_i+0x1f4>
 800ae3c:	1b80      	subs	r0, r0, r6
 800ae3e:	6060      	str	r0, [r4, #4]
 800ae40:	6863      	ldr	r3, [r4, #4]
 800ae42:	6123      	str	r3, [r4, #16]
 800ae44:	2300      	movs	r3, #0
 800ae46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae4a:	e7a8      	b.n	800ad9e <_printf_i+0x152>
 800ae4c:	4632      	mov	r2, r6
 800ae4e:	4649      	mov	r1, r9
 800ae50:	4640      	mov	r0, r8
 800ae52:	6923      	ldr	r3, [r4, #16]
 800ae54:	47d0      	blx	sl
 800ae56:	3001      	adds	r0, #1
 800ae58:	d0ab      	beq.n	800adb2 <_printf_i+0x166>
 800ae5a:	6823      	ldr	r3, [r4, #0]
 800ae5c:	079b      	lsls	r3, r3, #30
 800ae5e:	d413      	bmi.n	800ae88 <_printf_i+0x23c>
 800ae60:	68e0      	ldr	r0, [r4, #12]
 800ae62:	9b03      	ldr	r3, [sp, #12]
 800ae64:	4298      	cmp	r0, r3
 800ae66:	bfb8      	it	lt
 800ae68:	4618      	movlt	r0, r3
 800ae6a:	e7a4      	b.n	800adb6 <_printf_i+0x16a>
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	4632      	mov	r2, r6
 800ae70:	4649      	mov	r1, r9
 800ae72:	4640      	mov	r0, r8
 800ae74:	47d0      	blx	sl
 800ae76:	3001      	adds	r0, #1
 800ae78:	d09b      	beq.n	800adb2 <_printf_i+0x166>
 800ae7a:	3501      	adds	r5, #1
 800ae7c:	68e3      	ldr	r3, [r4, #12]
 800ae7e:	9903      	ldr	r1, [sp, #12]
 800ae80:	1a5b      	subs	r3, r3, r1
 800ae82:	42ab      	cmp	r3, r5
 800ae84:	dcf2      	bgt.n	800ae6c <_printf_i+0x220>
 800ae86:	e7eb      	b.n	800ae60 <_printf_i+0x214>
 800ae88:	2500      	movs	r5, #0
 800ae8a:	f104 0619 	add.w	r6, r4, #25
 800ae8e:	e7f5      	b.n	800ae7c <_printf_i+0x230>
 800ae90:	0800be55 	.word	0x0800be55
 800ae94:	0800be66 	.word	0x0800be66

0800ae98 <_sbrk_r>:
 800ae98:	b538      	push	{r3, r4, r5, lr}
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	4d05      	ldr	r5, [pc, #20]	; (800aeb4 <_sbrk_r+0x1c>)
 800ae9e:	4604      	mov	r4, r0
 800aea0:	4608      	mov	r0, r1
 800aea2:	602b      	str	r3, [r5, #0]
 800aea4:	f7f7 f82c 	bl	8001f00 <_sbrk>
 800aea8:	1c43      	adds	r3, r0, #1
 800aeaa:	d102      	bne.n	800aeb2 <_sbrk_r+0x1a>
 800aeac:	682b      	ldr	r3, [r5, #0]
 800aeae:	b103      	cbz	r3, 800aeb2 <_sbrk_r+0x1a>
 800aeb0:	6023      	str	r3, [r4, #0]
 800aeb2:	bd38      	pop	{r3, r4, r5, pc}
 800aeb4:	20000960 	.word	0x20000960

0800aeb8 <__sread>:
 800aeb8:	b510      	push	{r4, lr}
 800aeba:	460c      	mov	r4, r1
 800aebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aec0:	f000 f8ae 	bl	800b020 <_read_r>
 800aec4:	2800      	cmp	r0, #0
 800aec6:	bfab      	itete	ge
 800aec8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aeca:	89a3      	ldrhlt	r3, [r4, #12]
 800aecc:	181b      	addge	r3, r3, r0
 800aece:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aed2:	bfac      	ite	ge
 800aed4:	6563      	strge	r3, [r4, #84]	; 0x54
 800aed6:	81a3      	strhlt	r3, [r4, #12]
 800aed8:	bd10      	pop	{r4, pc}

0800aeda <__swrite>:
 800aeda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aede:	461f      	mov	r7, r3
 800aee0:	898b      	ldrh	r3, [r1, #12]
 800aee2:	4605      	mov	r5, r0
 800aee4:	05db      	lsls	r3, r3, #23
 800aee6:	460c      	mov	r4, r1
 800aee8:	4616      	mov	r6, r2
 800aeea:	d505      	bpl.n	800aef8 <__swrite+0x1e>
 800aeec:	2302      	movs	r3, #2
 800aeee:	2200      	movs	r2, #0
 800aef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aef4:	f000 f868 	bl	800afc8 <_lseek_r>
 800aef8:	89a3      	ldrh	r3, [r4, #12]
 800aefa:	4632      	mov	r2, r6
 800aefc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af00:	81a3      	strh	r3, [r4, #12]
 800af02:	4628      	mov	r0, r5
 800af04:	463b      	mov	r3, r7
 800af06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af0e:	f000 b817 	b.w	800af40 <_write_r>

0800af12 <__sseek>:
 800af12:	b510      	push	{r4, lr}
 800af14:	460c      	mov	r4, r1
 800af16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af1a:	f000 f855 	bl	800afc8 <_lseek_r>
 800af1e:	1c43      	adds	r3, r0, #1
 800af20:	89a3      	ldrh	r3, [r4, #12]
 800af22:	bf15      	itete	ne
 800af24:	6560      	strne	r0, [r4, #84]	; 0x54
 800af26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800af2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800af2e:	81a3      	strheq	r3, [r4, #12]
 800af30:	bf18      	it	ne
 800af32:	81a3      	strhne	r3, [r4, #12]
 800af34:	bd10      	pop	{r4, pc}

0800af36 <__sclose>:
 800af36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af3a:	f000 b813 	b.w	800af64 <_close_r>
	...

0800af40 <_write_r>:
 800af40:	b538      	push	{r3, r4, r5, lr}
 800af42:	4604      	mov	r4, r0
 800af44:	4608      	mov	r0, r1
 800af46:	4611      	mov	r1, r2
 800af48:	2200      	movs	r2, #0
 800af4a:	4d05      	ldr	r5, [pc, #20]	; (800af60 <_write_r+0x20>)
 800af4c:	602a      	str	r2, [r5, #0]
 800af4e:	461a      	mov	r2, r3
 800af50:	f7f6 ff7c 	bl	8001e4c <_write>
 800af54:	1c43      	adds	r3, r0, #1
 800af56:	d102      	bne.n	800af5e <_write_r+0x1e>
 800af58:	682b      	ldr	r3, [r5, #0]
 800af5a:	b103      	cbz	r3, 800af5e <_write_r+0x1e>
 800af5c:	6023      	str	r3, [r4, #0]
 800af5e:	bd38      	pop	{r3, r4, r5, pc}
 800af60:	20000960 	.word	0x20000960

0800af64 <_close_r>:
 800af64:	b538      	push	{r3, r4, r5, lr}
 800af66:	2300      	movs	r3, #0
 800af68:	4d05      	ldr	r5, [pc, #20]	; (800af80 <_close_r+0x1c>)
 800af6a:	4604      	mov	r4, r0
 800af6c:	4608      	mov	r0, r1
 800af6e:	602b      	str	r3, [r5, #0]
 800af70:	f7f6 ff96 	bl	8001ea0 <_close>
 800af74:	1c43      	adds	r3, r0, #1
 800af76:	d102      	bne.n	800af7e <_close_r+0x1a>
 800af78:	682b      	ldr	r3, [r5, #0]
 800af7a:	b103      	cbz	r3, 800af7e <_close_r+0x1a>
 800af7c:	6023      	str	r3, [r4, #0]
 800af7e:	bd38      	pop	{r3, r4, r5, pc}
 800af80:	20000960 	.word	0x20000960

0800af84 <_fstat_r>:
 800af84:	b538      	push	{r3, r4, r5, lr}
 800af86:	2300      	movs	r3, #0
 800af88:	4d06      	ldr	r5, [pc, #24]	; (800afa4 <_fstat_r+0x20>)
 800af8a:	4604      	mov	r4, r0
 800af8c:	4608      	mov	r0, r1
 800af8e:	4611      	mov	r1, r2
 800af90:	602b      	str	r3, [r5, #0]
 800af92:	f7f6 ff90 	bl	8001eb6 <_fstat>
 800af96:	1c43      	adds	r3, r0, #1
 800af98:	d102      	bne.n	800afa0 <_fstat_r+0x1c>
 800af9a:	682b      	ldr	r3, [r5, #0]
 800af9c:	b103      	cbz	r3, 800afa0 <_fstat_r+0x1c>
 800af9e:	6023      	str	r3, [r4, #0]
 800afa0:	bd38      	pop	{r3, r4, r5, pc}
 800afa2:	bf00      	nop
 800afa4:	20000960 	.word	0x20000960

0800afa8 <_isatty_r>:
 800afa8:	b538      	push	{r3, r4, r5, lr}
 800afaa:	2300      	movs	r3, #0
 800afac:	4d05      	ldr	r5, [pc, #20]	; (800afc4 <_isatty_r+0x1c>)
 800afae:	4604      	mov	r4, r0
 800afb0:	4608      	mov	r0, r1
 800afb2:	602b      	str	r3, [r5, #0]
 800afb4:	f7f6 ff8e 	bl	8001ed4 <_isatty>
 800afb8:	1c43      	adds	r3, r0, #1
 800afba:	d102      	bne.n	800afc2 <_isatty_r+0x1a>
 800afbc:	682b      	ldr	r3, [r5, #0]
 800afbe:	b103      	cbz	r3, 800afc2 <_isatty_r+0x1a>
 800afc0:	6023      	str	r3, [r4, #0]
 800afc2:	bd38      	pop	{r3, r4, r5, pc}
 800afc4:	20000960 	.word	0x20000960

0800afc8 <_lseek_r>:
 800afc8:	b538      	push	{r3, r4, r5, lr}
 800afca:	4604      	mov	r4, r0
 800afcc:	4608      	mov	r0, r1
 800afce:	4611      	mov	r1, r2
 800afd0:	2200      	movs	r2, #0
 800afd2:	4d05      	ldr	r5, [pc, #20]	; (800afe8 <_lseek_r+0x20>)
 800afd4:	602a      	str	r2, [r5, #0]
 800afd6:	461a      	mov	r2, r3
 800afd8:	f7f6 ff86 	bl	8001ee8 <_lseek>
 800afdc:	1c43      	adds	r3, r0, #1
 800afde:	d102      	bne.n	800afe6 <_lseek_r+0x1e>
 800afe0:	682b      	ldr	r3, [r5, #0]
 800afe2:	b103      	cbz	r3, 800afe6 <_lseek_r+0x1e>
 800afe4:	6023      	str	r3, [r4, #0]
 800afe6:	bd38      	pop	{r3, r4, r5, pc}
 800afe8:	20000960 	.word	0x20000960

0800afec <memchr>:
 800afec:	4603      	mov	r3, r0
 800afee:	b510      	push	{r4, lr}
 800aff0:	b2c9      	uxtb	r1, r1
 800aff2:	4402      	add	r2, r0
 800aff4:	4293      	cmp	r3, r2
 800aff6:	4618      	mov	r0, r3
 800aff8:	d101      	bne.n	800affe <memchr+0x12>
 800affa:	2000      	movs	r0, #0
 800affc:	e003      	b.n	800b006 <memchr+0x1a>
 800affe:	7804      	ldrb	r4, [r0, #0]
 800b000:	3301      	adds	r3, #1
 800b002:	428c      	cmp	r4, r1
 800b004:	d1f6      	bne.n	800aff4 <memchr+0x8>
 800b006:	bd10      	pop	{r4, pc}

0800b008 <__malloc_lock>:
 800b008:	4801      	ldr	r0, [pc, #4]	; (800b010 <__malloc_lock+0x8>)
 800b00a:	f7ff bb4b 	b.w	800a6a4 <__retarget_lock_acquire_recursive>
 800b00e:	bf00      	nop
 800b010:	20000958 	.word	0x20000958

0800b014 <__malloc_unlock>:
 800b014:	4801      	ldr	r0, [pc, #4]	; (800b01c <__malloc_unlock+0x8>)
 800b016:	f7ff bb46 	b.w	800a6a6 <__retarget_lock_release_recursive>
 800b01a:	bf00      	nop
 800b01c:	20000958 	.word	0x20000958

0800b020 <_read_r>:
 800b020:	b538      	push	{r3, r4, r5, lr}
 800b022:	4604      	mov	r4, r0
 800b024:	4608      	mov	r0, r1
 800b026:	4611      	mov	r1, r2
 800b028:	2200      	movs	r2, #0
 800b02a:	4d05      	ldr	r5, [pc, #20]	; (800b040 <_read_r+0x20>)
 800b02c:	602a      	str	r2, [r5, #0]
 800b02e:	461a      	mov	r2, r3
 800b030:	f7f6 feee 	bl	8001e10 <_read>
 800b034:	1c43      	adds	r3, r0, #1
 800b036:	d102      	bne.n	800b03e <_read_r+0x1e>
 800b038:	682b      	ldr	r3, [r5, #0]
 800b03a:	b103      	cbz	r3, 800b03e <_read_r+0x1e>
 800b03c:	6023      	str	r3, [r4, #0]
 800b03e:	bd38      	pop	{r3, r4, r5, pc}
 800b040:	20000960 	.word	0x20000960

0800b044 <_init>:
 800b044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b046:	bf00      	nop
 800b048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b04a:	bc08      	pop	{r3}
 800b04c:	469e      	mov	lr, r3
 800b04e:	4770      	bx	lr

0800b050 <_fini>:
 800b050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b052:	bf00      	nop
 800b054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b056:	bc08      	pop	{r3}
 800b058:	469e      	mov	lr, r3
 800b05a:	4770      	bx	lr
