
RCFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f2c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d8  08008110  08008110  00018110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088e8  080088e8  00020274  2**0
                  CONTENTS
  4 .ARM          00000008  080088e8  080088e8  000188e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088f0  080088f0  00020274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088f0  080088f0  000188f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088f4  080088f4  000188f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000274  20000000  080088f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  20000274  08008b6c  00020274  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006f4  08008b6c  000206f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013dd3  00000000  00000000  0002029d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003010  00000000  00000000  00034070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fb8  00000000  00000000  00037080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e60  00000000  00000000  00038038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c881  00000000  00000000  00038e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000130c9  00000000  00000000  00055719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a100e  00000000  00000000  000687e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001097f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000523c  00000000  00000000  00109844  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  0010ea80  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  0010eaa4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000274 	.word	0x20000274
 8000200:	00000000 	.word	0x00000000
 8000204:	080080f8 	.word	0x080080f8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000278 	.word	0x20000278
 8000220:	080080f8 	.word	0x080080f8

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <strcmp>:
 8000234:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000238:	f811 3b01 	ldrb.w	r3, [r1], #1
 800023c:	2a01      	cmp	r2, #1
 800023e:	bf28      	it	cs
 8000240:	429a      	cmpcs	r2, r3
 8000242:	d0f7      	beq.n	8000234 <strcmp>
 8000244:	1ad0      	subs	r0, r2, r3
 8000246:	4770      	bx	lr

08000248 <__aeabi_ldivmod>:
 8000248:	b97b      	cbnz	r3, 800026a <__aeabi_ldivmod+0x22>
 800024a:	b972      	cbnz	r2, 800026a <__aeabi_ldivmod+0x22>
 800024c:	2900      	cmp	r1, #0
 800024e:	bfbe      	ittt	lt
 8000250:	2000      	movlt	r0, #0
 8000252:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000256:	e006      	blt.n	8000266 <__aeabi_ldivmod+0x1e>
 8000258:	bf08      	it	eq
 800025a:	2800      	cmpeq	r0, #0
 800025c:	bf1c      	itt	ne
 800025e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000262:	f04f 30ff 	movne.w	r0, #4294967295
 8000266:	f000 b9a1 	b.w	80005ac <__aeabi_idiv0>
 800026a:	f1ad 0c08 	sub.w	ip, sp, #8
 800026e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000272:	2900      	cmp	r1, #0
 8000274:	db09      	blt.n	800028a <__aeabi_ldivmod+0x42>
 8000276:	2b00      	cmp	r3, #0
 8000278:	db1a      	blt.n	80002b0 <__aeabi_ldivmod+0x68>
 800027a:	f000 f835 	bl	80002e8 <__udivmoddi4>
 800027e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000282:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000286:	b004      	add	sp, #16
 8000288:	4770      	bx	lr
 800028a:	4240      	negs	r0, r0
 800028c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000290:	2b00      	cmp	r3, #0
 8000292:	db1b      	blt.n	80002cc <__aeabi_ldivmod+0x84>
 8000294:	f000 f828 	bl	80002e8 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4240      	negs	r0, r0
 80002a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a8:	4252      	negs	r2, r2
 80002aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ae:	4770      	bx	lr
 80002b0:	4252      	negs	r2, r2
 80002b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b6:	f000 f817 	bl	80002e8 <__udivmoddi4>
 80002ba:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c2:	b004      	add	sp, #16
 80002c4:	4240      	negs	r0, r0
 80002c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ca:	4770      	bx	lr
 80002cc:	4252      	negs	r2, r2
 80002ce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d2:	f000 f809 	bl	80002e8 <__udivmoddi4>
 80002d6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002de:	b004      	add	sp, #16
 80002e0:	4252      	negs	r2, r2
 80002e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e6:	4770      	bx	lr

080002e8 <__udivmoddi4>:
 80002e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002ec:	9e08      	ldr	r6, [sp, #32]
 80002ee:	460d      	mov	r5, r1
 80002f0:	4604      	mov	r4, r0
 80002f2:	468e      	mov	lr, r1
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	f040 8083 	bne.w	8000400 <__udivmoddi4+0x118>
 80002fa:	428a      	cmp	r2, r1
 80002fc:	4617      	mov	r7, r2
 80002fe:	d947      	bls.n	8000390 <__udivmoddi4+0xa8>
 8000300:	fab2 f382 	clz	r3, r2
 8000304:	b14b      	cbz	r3, 800031a <__udivmoddi4+0x32>
 8000306:	f1c3 0120 	rsb	r1, r3, #32
 800030a:	fa05 fe03 	lsl.w	lr, r5, r3
 800030e:	fa20 f101 	lsr.w	r1, r0, r1
 8000312:	409f      	lsls	r7, r3
 8000314:	ea41 0e0e 	orr.w	lr, r1, lr
 8000318:	409c      	lsls	r4, r3
 800031a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800031e:	fbbe fcf8 	udiv	ip, lr, r8
 8000322:	fa1f f987 	uxth.w	r9, r7
 8000326:	fb08 e21c 	mls	r2, r8, ip, lr
 800032a:	fb0c f009 	mul.w	r0, ip, r9
 800032e:	0c21      	lsrs	r1, r4, #16
 8000330:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000334:	4290      	cmp	r0, r2
 8000336:	d90a      	bls.n	800034e <__udivmoddi4+0x66>
 8000338:	18ba      	adds	r2, r7, r2
 800033a:	f10c 31ff 	add.w	r1, ip, #4294967295
 800033e:	f080 8118 	bcs.w	8000572 <__udivmoddi4+0x28a>
 8000342:	4290      	cmp	r0, r2
 8000344:	f240 8115 	bls.w	8000572 <__udivmoddi4+0x28a>
 8000348:	f1ac 0c02 	sub.w	ip, ip, #2
 800034c:	443a      	add	r2, r7
 800034e:	1a12      	subs	r2, r2, r0
 8000350:	fbb2 f0f8 	udiv	r0, r2, r8
 8000354:	fb08 2210 	mls	r2, r8, r0, r2
 8000358:	fb00 f109 	mul.w	r1, r0, r9
 800035c:	b2a4      	uxth	r4, r4
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	42a1      	cmp	r1, r4
 8000364:	d909      	bls.n	800037a <__udivmoddi4+0x92>
 8000366:	193c      	adds	r4, r7, r4
 8000368:	f100 32ff 	add.w	r2, r0, #4294967295
 800036c:	f080 8103 	bcs.w	8000576 <__udivmoddi4+0x28e>
 8000370:	42a1      	cmp	r1, r4
 8000372:	f240 8100 	bls.w	8000576 <__udivmoddi4+0x28e>
 8000376:	3802      	subs	r0, #2
 8000378:	443c      	add	r4, r7
 800037a:	1a64      	subs	r4, r4, r1
 800037c:	2100      	movs	r1, #0
 800037e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000382:	b11e      	cbz	r6, 800038c <__udivmoddi4+0xa4>
 8000384:	2200      	movs	r2, #0
 8000386:	40dc      	lsrs	r4, r3
 8000388:	e9c6 4200 	strd	r4, r2, [r6]
 800038c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000390:	b902      	cbnz	r2, 8000394 <__udivmoddi4+0xac>
 8000392:	deff      	udf	#255	; 0xff
 8000394:	fab2 f382 	clz	r3, r2
 8000398:	2b00      	cmp	r3, #0
 800039a:	d14f      	bne.n	800043c <__udivmoddi4+0x154>
 800039c:	1a8d      	subs	r5, r1, r2
 800039e:	2101      	movs	r1, #1
 80003a0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80003a4:	fa1f f882 	uxth.w	r8, r2
 80003a8:	fbb5 fcfe 	udiv	ip, r5, lr
 80003ac:	fb0e 551c 	mls	r5, lr, ip, r5
 80003b0:	fb08 f00c 	mul.w	r0, r8, ip
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80003ba:	42a8      	cmp	r0, r5
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0xe6>
 80003be:	197d      	adds	r5, r7, r5
 80003c0:	f10c 32ff 	add.w	r2, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0xe4>
 80003c6:	42a8      	cmp	r0, r5
 80003c8:	f200 80e9 	bhi.w	800059e <__udivmoddi4+0x2b6>
 80003cc:	4694      	mov	ip, r2
 80003ce:	1a2d      	subs	r5, r5, r0
 80003d0:	fbb5 f0fe 	udiv	r0, r5, lr
 80003d4:	fb0e 5510 	mls	r5, lr, r0, r5
 80003d8:	fb08 f800 	mul.w	r8, r8, r0
 80003dc:	b2a4      	uxth	r4, r4
 80003de:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003e2:	45a0      	cmp	r8, r4
 80003e4:	d907      	bls.n	80003f6 <__udivmoddi4+0x10e>
 80003e6:	193c      	adds	r4, r7, r4
 80003e8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x10c>
 80003ee:	45a0      	cmp	r8, r4
 80003f0:	f200 80d9 	bhi.w	80005a6 <__udivmoddi4+0x2be>
 80003f4:	4610      	mov	r0, r2
 80003f6:	eba4 0408 	sub.w	r4, r4, r8
 80003fa:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003fe:	e7c0      	b.n	8000382 <__udivmoddi4+0x9a>
 8000400:	428b      	cmp	r3, r1
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x12e>
 8000404:	2e00      	cmp	r6, #0
 8000406:	f000 80b1 	beq.w	800056c <__udivmoddi4+0x284>
 800040a:	2100      	movs	r1, #0
 800040c:	e9c6 0500 	strd	r0, r5, [r6]
 8000410:	4608      	mov	r0, r1
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	fab3 f183 	clz	r1, r3
 800041a:	2900      	cmp	r1, #0
 800041c:	d14b      	bne.n	80004b6 <__udivmoddi4+0x1ce>
 800041e:	42ab      	cmp	r3, r5
 8000420:	d302      	bcc.n	8000428 <__udivmoddi4+0x140>
 8000422:	4282      	cmp	r2, r0
 8000424:	f200 80b9 	bhi.w	800059a <__udivmoddi4+0x2b2>
 8000428:	1a84      	subs	r4, r0, r2
 800042a:	eb65 0303 	sbc.w	r3, r5, r3
 800042e:	2001      	movs	r0, #1
 8000430:	469e      	mov	lr, r3
 8000432:	2e00      	cmp	r6, #0
 8000434:	d0aa      	beq.n	800038c <__udivmoddi4+0xa4>
 8000436:	e9c6 4e00 	strd	r4, lr, [r6]
 800043a:	e7a7      	b.n	800038c <__udivmoddi4+0xa4>
 800043c:	409f      	lsls	r7, r3
 800043e:	f1c3 0220 	rsb	r2, r3, #32
 8000442:	40d1      	lsrs	r1, r2
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fa1f f887 	uxth.w	r8, r7
 8000450:	fb0e 1110 	mls	r1, lr, r0, r1
 8000454:	fa24 f202 	lsr.w	r2, r4, r2
 8000458:	409d      	lsls	r5, r3
 800045a:	fb00 fc08 	mul.w	ip, r0, r8
 800045e:	432a      	orrs	r2, r5
 8000460:	0c15      	lsrs	r5, r2, #16
 8000462:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000466:	45ac      	cmp	ip, r5
 8000468:	fa04 f403 	lsl.w	r4, r4, r3
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0x19a>
 800046e:	197d      	adds	r5, r7, r5
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	f080 808f 	bcs.w	8000596 <__udivmoddi4+0x2ae>
 8000478:	45ac      	cmp	ip, r5
 800047a:	f240 808c 	bls.w	8000596 <__udivmoddi4+0x2ae>
 800047e:	3802      	subs	r0, #2
 8000480:	443d      	add	r5, r7
 8000482:	eba5 050c 	sub.w	r5, r5, ip
 8000486:	fbb5 f1fe 	udiv	r1, r5, lr
 800048a:	fb0e 5c11 	mls	ip, lr, r1, r5
 800048e:	fb01 f908 	mul.w	r9, r1, r8
 8000492:	b295      	uxth	r5, r2
 8000494:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000498:	45a9      	cmp	r9, r5
 800049a:	d907      	bls.n	80004ac <__udivmoddi4+0x1c4>
 800049c:	197d      	adds	r5, r7, r5
 800049e:	f101 32ff 	add.w	r2, r1, #4294967295
 80004a2:	d274      	bcs.n	800058e <__udivmoddi4+0x2a6>
 80004a4:	45a9      	cmp	r9, r5
 80004a6:	d972      	bls.n	800058e <__udivmoddi4+0x2a6>
 80004a8:	3902      	subs	r1, #2
 80004aa:	443d      	add	r5, r7
 80004ac:	eba5 0509 	sub.w	r5, r5, r9
 80004b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b4:	e778      	b.n	80003a8 <__udivmoddi4+0xc0>
 80004b6:	f1c1 0720 	rsb	r7, r1, #32
 80004ba:	408b      	lsls	r3, r1
 80004bc:	fa22 fc07 	lsr.w	ip, r2, r7
 80004c0:	ea4c 0c03 	orr.w	ip, ip, r3
 80004c4:	fa25 f407 	lsr.w	r4, r5, r7
 80004c8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004cc:	fbb4 f9fe 	udiv	r9, r4, lr
 80004d0:	fa1f f88c 	uxth.w	r8, ip
 80004d4:	fb0e 4419 	mls	r4, lr, r9, r4
 80004d8:	fa20 f307 	lsr.w	r3, r0, r7
 80004dc:	fb09 fa08 	mul.w	sl, r9, r8
 80004e0:	408d      	lsls	r5, r1
 80004e2:	431d      	orrs	r5, r3
 80004e4:	0c2b      	lsrs	r3, r5, #16
 80004e6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004ea:	45a2      	cmp	sl, r4
 80004ec:	fa02 f201 	lsl.w	r2, r2, r1
 80004f0:	fa00 f301 	lsl.w	r3, r0, r1
 80004f4:	d909      	bls.n	800050a <__udivmoddi4+0x222>
 80004f6:	eb1c 0404 	adds.w	r4, ip, r4
 80004fa:	f109 30ff 	add.w	r0, r9, #4294967295
 80004fe:	d248      	bcs.n	8000592 <__udivmoddi4+0x2aa>
 8000500:	45a2      	cmp	sl, r4
 8000502:	d946      	bls.n	8000592 <__udivmoddi4+0x2aa>
 8000504:	f1a9 0902 	sub.w	r9, r9, #2
 8000508:	4464      	add	r4, ip
 800050a:	eba4 040a 	sub.w	r4, r4, sl
 800050e:	fbb4 f0fe 	udiv	r0, r4, lr
 8000512:	fb0e 4410 	mls	r4, lr, r0, r4
 8000516:	fb00 fa08 	mul.w	sl, r0, r8
 800051a:	b2ad      	uxth	r5, r5
 800051c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000520:	45a2      	cmp	sl, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x24e>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f100 35ff 	add.w	r5, r0, #4294967295
 800052c:	d22d      	bcs.n	800058a <__udivmoddi4+0x2a2>
 800052e:	45a2      	cmp	sl, r4
 8000530:	d92b      	bls.n	800058a <__udivmoddi4+0x2a2>
 8000532:	3802      	subs	r0, #2
 8000534:	4464      	add	r4, ip
 8000536:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053a:	fba0 8902 	umull	r8, r9, r0, r2
 800053e:	eba4 040a 	sub.w	r4, r4, sl
 8000542:	454c      	cmp	r4, r9
 8000544:	46c6      	mov	lr, r8
 8000546:	464d      	mov	r5, r9
 8000548:	d319      	bcc.n	800057e <__udivmoddi4+0x296>
 800054a:	d016      	beq.n	800057a <__udivmoddi4+0x292>
 800054c:	b15e      	cbz	r6, 8000566 <__udivmoddi4+0x27e>
 800054e:	ebb3 020e 	subs.w	r2, r3, lr
 8000552:	eb64 0405 	sbc.w	r4, r4, r5
 8000556:	fa04 f707 	lsl.w	r7, r4, r7
 800055a:	fa22 f301 	lsr.w	r3, r2, r1
 800055e:	431f      	orrs	r7, r3
 8000560:	40cc      	lsrs	r4, r1
 8000562:	e9c6 7400 	strd	r7, r4, [r6]
 8000566:	2100      	movs	r1, #0
 8000568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056c:	4631      	mov	r1, r6
 800056e:	4630      	mov	r0, r6
 8000570:	e70c      	b.n	800038c <__udivmoddi4+0xa4>
 8000572:	468c      	mov	ip, r1
 8000574:	e6eb      	b.n	800034e <__udivmoddi4+0x66>
 8000576:	4610      	mov	r0, r2
 8000578:	e6ff      	b.n	800037a <__udivmoddi4+0x92>
 800057a:	4543      	cmp	r3, r8
 800057c:	d2e6      	bcs.n	800054c <__udivmoddi4+0x264>
 800057e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000582:	eb69 050c 	sbc.w	r5, r9, ip
 8000586:	3801      	subs	r0, #1
 8000588:	e7e0      	b.n	800054c <__udivmoddi4+0x264>
 800058a:	4628      	mov	r0, r5
 800058c:	e7d3      	b.n	8000536 <__udivmoddi4+0x24e>
 800058e:	4611      	mov	r1, r2
 8000590:	e78c      	b.n	80004ac <__udivmoddi4+0x1c4>
 8000592:	4681      	mov	r9, r0
 8000594:	e7b9      	b.n	800050a <__udivmoddi4+0x222>
 8000596:	4608      	mov	r0, r1
 8000598:	e773      	b.n	8000482 <__udivmoddi4+0x19a>
 800059a:	4608      	mov	r0, r1
 800059c:	e749      	b.n	8000432 <__udivmoddi4+0x14a>
 800059e:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a2:	443d      	add	r5, r7
 80005a4:	e713      	b.n	80003ce <__udivmoddi4+0xe6>
 80005a6:	3802      	subs	r0, #2
 80005a8:	443c      	add	r4, r7
 80005aa:	e724      	b.n	80003f6 <__udivmoddi4+0x10e>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f000 fe40 	bl	8001238 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f870 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 fab4 	bl	8000b28 <MX_GPIO_Init>
  MX_TIM1_Init();
 80005c0:	f000 f8fc 	bl	80007bc <MX_TIM1_Init>
  MX_TIM2_Init();
 80005c4:	f000 f94c 	bl	8000860 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80005c8:	f000 fa5a 	bl	8000a80 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005cc:	f000 fa82 	bl	8000ad4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005d0:	f000 f8b6 	bl	8000740 <MX_ADC1_Init>
  MX_TIM8_Init();
 80005d4:	f000 f990 	bl	80008f8 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  /* Setup and start using console and logs */
  CONSOLE_uartInit(&huart1);
 80005d8:	4826      	ldr	r0, [pc, #152]	; (8000674 <main+0xc4>)
 80005da:	f004 fa01 	bl	80049e0 <CONSOLE_uartInit>
  LOG_setLevel    (LOG_DEBUG);
 80005de:	2000      	movs	r0, #0
 80005e0:	f004 faea 	bl	8004bb8 <LOG_setLevel>
  LOG_info        ("Starting RCFW");
 80005e4:	4b24      	ldr	r3, [pc, #144]	; (8000678 <main+0xc8>)
 80005e6:	227e      	movs	r2, #126	; 0x7e
 80005e8:	4924      	ldr	r1, [pc, #144]	; (800067c <main+0xcc>)
 80005ea:	2001      	movs	r0, #1
 80005ec:	f004 faf2 	bl	8004bd4 <LOG_log>

  /* Initialize Timer 1 */
  HAL_TIM_Base_Start_IT(&htim1);
 80005f0:	4823      	ldr	r0, [pc, #140]	; (8000680 <main+0xd0>)
 80005f2:	f002 fa41 	bl	8002a78 <HAL_TIM_Base_Start_IT>

  LOG_debug("Started TIMER 1");
 80005f6:	4b23      	ldr	r3, [pc, #140]	; (8000684 <main+0xd4>)
 80005f8:	2283      	movs	r2, #131	; 0x83
 80005fa:	4920      	ldr	r1, [pc, #128]	; (800067c <main+0xcc>)
 80005fc:	2000      	movs	r0, #0
 80005fe:	f004 fae9 	bl	8004bd4 <LOG_log>

  /* Initialize Timer 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000602:	4821      	ldr	r0, [pc, #132]	; (8000688 <main+0xd8>)
 8000604:	f002 fa38 	bl	8002a78 <HAL_TIM_Base_Start_IT>
  UTILS_delayUsInit    (&htim2);
 8000608:	481f      	ldr	r0, [pc, #124]	; (8000688 <main+0xd8>)
 800060a:	f004 fc3b 	bl	8004e84 <UTILS_delayUsInit>

  LOG_debug("Started TIMER 2");
 800060e:	4b1f      	ldr	r3, [pc, #124]	; (800068c <main+0xdc>)
 8000610:	2289      	movs	r2, #137	; 0x89
 8000612:	491a      	ldr	r1, [pc, #104]	; (800067c <main+0xcc>)
 8000614:	2000      	movs	r0, #0
 8000616:	f004 fadd 	bl	8004bd4 <LOG_log>

  /* Initialize Timer 8 */
  HAL_TIM_Base_Start(&htim8);
 800061a:	481d      	ldr	r0, [pc, #116]	; (8000690 <main+0xe0>)
 800061c:	f002 f9d4 	bl	80029c8 <HAL_TIM_Base_Start>

  LOG_debug("Started TIMER 8");
 8000620:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <main+0xe4>)
 8000622:	228e      	movs	r2, #142	; 0x8e
 8000624:	4915      	ldr	r1, [pc, #84]	; (800067c <main+0xcc>)
 8000626:	2000      	movs	r0, #0
 8000628:	f004 fad4 	bl	8004bd4 <LOG_log>

  /* Initialize PWM channels */
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800062c:	2100      	movs	r1, #0
 800062e:	4818      	ldr	r0, [pc, #96]	; (8000690 <main+0xe0>)
 8000630:	f002 fae8 	bl	8002c04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000634:	2104      	movs	r1, #4
 8000636:	4816      	ldr	r0, [pc, #88]	; (8000690 <main+0xe0>)
 8000638:	f002 fae4 	bl	8002c04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800063c:	2108      	movs	r1, #8
 800063e:	4814      	ldr	r0, [pc, #80]	; (8000690 <main+0xe0>)
 8000640:	f002 fae0 	bl	8002c04 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000644:	210c      	movs	r1, #12
 8000646:	4812      	ldr	r0, [pc, #72]	; (8000690 <main+0xe0>)
 8000648:	f002 fadc 	bl	8002c04 <HAL_TIM_PWM_Start>

  LOG_debug("Started PWM channels");
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <main+0xe8>)
 800064e:	2296      	movs	r2, #150	; 0x96
 8000650:	490a      	ldr	r1, [pc, #40]	; (800067c <main+0xcc>)
 8000652:	2000      	movs	r0, #0
 8000654:	f004 fabe 	bl	8004bd4 <LOG_log>

  /* Initialize bluetooth control module */
  BLUETOOTH_CONTROL_init();
 8000658:	f004 f944 	bl	80048e4 <BLUETOOTH_CONTROL_init>

  /* Initialize driving module */
  DRIVE_init(&htim8);
 800065c:	480c      	ldr	r0, [pc, #48]	; (8000690 <main+0xe0>)
 800065e:	f004 f9f7 	bl	8004a50 <DRIVE_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    CONSOLE_receiveData();
 8000662:	f004 f9cb 	bl	80049fc <CONSOLE_receiveData>
    BLUETOOTH_CONTROL_receiveData();
 8000666:	f004 f98b 	bl	8004980 <BLUETOOTH_CONTROL_receiveData>
    UTILS_delayUs(10000);
 800066a:	f242 7010 	movw	r0, #10000	; 0x2710
 800066e:	f004 fc17 	bl	8004ea0 <UTILS_delayUs>
    CONSOLE_receiveData();
 8000672:	e7f6      	b.n	8000662 <main+0xb2>
 8000674:	200003cc 	.word	0x200003cc
 8000678:	08008110 	.word	0x08008110
 800067c:	08008120 	.word	0x08008120
 8000680:	20000440 	.word	0x20000440
 8000684:	08008134 	.word	0x08008134
 8000688:	200004f4 	.word	0x200004f4
 800068c:	08008144 	.word	0x08008144
 8000690:	200002e8 	.word	0x200002e8
 8000694:	08008154 	.word	0x08008154
 8000698:	08008164 	.word	0x08008164

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b096      	sub	sp, #88	; 0x58
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006a6:	2228      	movs	r2, #40	; 0x28
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f004 ff42 	bl	8005534 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 031c 	add.w	r3, r7, #28
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]
 80006ce:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d0:	2302      	movs	r3, #2
 80006d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d4:	2301      	movs	r3, #1
 80006d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d8:	2310      	movs	r3, #16
 80006da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006dc:	2300      	movs	r3, #0
 80006de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 fc43 	bl	8001f70 <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80006f0:	f000 fad6 	bl	8000ca0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	230f      	movs	r3, #15
 80006f6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f8:	2300      	movs	r3, #0
 80006fa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f001 feae 	bl	8002470 <HAL_RCC_ClockConfig>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800071a:	f000 fac1 	bl	8000ca0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800071e:	2302      	movs	r3, #2
 8000720:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	4618      	mov	r0, r3
 800072a:	f002 f83b 	bl	80027a4 <HAL_RCCEx_PeriphCLKConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000734:	f000 fab4 	bl	8000ca0 <Error_Handler>
  }
}
 8000738:	bf00      	nop
 800073a:	3758      	adds	r7, #88	; 0x58
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000750:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <MX_ADC1_Init+0x74>)
 8000752:	4a19      	ldr	r2, [pc, #100]	; (80007b8 <MX_ADC1_Init+0x78>)
 8000754:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000756:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <MX_ADC1_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800075c:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <MX_ADC1_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000762:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_ADC1_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <MX_ADC1_Init+0x74>)
 800076a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800076e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000770:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <MX_ADC1_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_ADC1_Init+0x74>)
 8000778:	2201      	movs	r2, #1
 800077a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800077c:	480d      	ldr	r0, [pc, #52]	; (80007b4 <MX_ADC1_Init+0x74>)
 800077e:	f000 fdbd 	bl	80012fc <HAL_ADC_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000788:	f000 fa8a 	bl	8000ca0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800078c:	2305      	movs	r3, #5
 800078e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000790:	2301      	movs	r3, #1
 8000792:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	4619      	mov	r1, r3
 800079c:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_ADC1_Init+0x74>)
 800079e:	f000 fe97 	bl	80014d0 <HAL_ADC_ConfigChannel>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80007a8:	f000 fa7a 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	2000039c 	.word	0x2000039c
 80007b8:	40012400 	.word	0x40012400

080007bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c2:	f107 0308 	add.w	r3, r7, #8
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d0:	463b      	mov	r3, r7
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007d8:	4b1f      	ldr	r3, [pc, #124]	; (8000858 <MX_TIM1_Init+0x9c>)
 80007da:	4a20      	ldr	r2, [pc, #128]	; (800085c <MX_TIM1_Init+0xa0>)
 80007dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 80007de:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <MX_TIM1_Init+0x9c>)
 80007e0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80007e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e6:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <MX_TIM1_Init+0x9c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80007ec:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <MX_TIM1_Init+0x9c>)
 80007ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f4:	4b18      	ldr	r3, [pc, #96]	; (8000858 <MX_TIM1_Init+0x9c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007fa:	4b17      	ldr	r3, [pc, #92]	; (8000858 <MX_TIM1_Init+0x9c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000800:	4b15      	ldr	r3, [pc, #84]	; (8000858 <MX_TIM1_Init+0x9c>)
 8000802:	2280      	movs	r2, #128	; 0x80
 8000804:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000806:	4814      	ldr	r0, [pc, #80]	; (8000858 <MX_TIM1_Init+0x9c>)
 8000808:	f002 f882 	bl	8002910 <HAL_TIM_Base_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000812:	f000 fa45 	bl	8000ca0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000816:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800081c:	f107 0308 	add.w	r3, r7, #8
 8000820:	4619      	mov	r1, r3
 8000822:	480d      	ldr	r0, [pc, #52]	; (8000858 <MX_TIM1_Init+0x9c>)
 8000824:	f002 fc8e 	bl	8003144 <HAL_TIM_ConfigClockSource>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800082e:	f000 fa37 	bl	8000ca0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000832:	2300      	movs	r3, #0
 8000834:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800083a:	463b      	mov	r3, r7
 800083c:	4619      	mov	r1, r3
 800083e:	4806      	ldr	r0, [pc, #24]	; (8000858 <MX_TIM1_Init+0x9c>)
 8000840:	f003 f8ce 	bl	80039e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800084a:	f000 fa29 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000440 	.word	0x20000440
 800085c:	40012c00 	.word	0x40012c00

08000860 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000866:	f107 0308 	add.w	r3, r7, #8
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000874:	463b      	mov	r3, r7
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800087c:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <MX_TIM2_Init+0x94>)
 800087e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000882:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8000884:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <MX_TIM2_Init+0x94>)
 8000886:	2207      	movs	r2, #7
 8000888:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088a:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <MX_TIM2_Init+0x94>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000890:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <MX_TIM2_Init+0x94>)
 8000892:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000896:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000898:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <MX_TIM2_Init+0x94>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <MX_TIM2_Init+0x94>)
 80008a0:	2280      	movs	r2, #128	; 0x80
 80008a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008a4:	4813      	ldr	r0, [pc, #76]	; (80008f4 <MX_TIM2_Init+0x94>)
 80008a6:	f002 f833 	bl	8002910 <HAL_TIM_Base_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008b0:	f000 f9f6 	bl	8000ca0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ba:	f107 0308 	add.w	r3, r7, #8
 80008be:	4619      	mov	r1, r3
 80008c0:	480c      	ldr	r0, [pc, #48]	; (80008f4 <MX_TIM2_Init+0x94>)
 80008c2:	f002 fc3f 	bl	8003144 <HAL_TIM_ConfigClockSource>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008cc:	f000 f9e8 	bl	8000ca0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d0:	2300      	movs	r3, #0
 80008d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008d8:	463b      	mov	r3, r7
 80008da:	4619      	mov	r1, r3
 80008dc:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_TIM2_Init+0x94>)
 80008de:	f003 f87f 	bl	80039e0 <HAL_TIMEx_MasterConfigSynchronization>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008e8:	f000 f9da 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	200004f4 	.word	0x200004f4

080008f8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b096      	sub	sp, #88	; 0x58
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800090c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]
 8000926:	615a      	str	r2, [r3, #20]
 8000928:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	2220      	movs	r2, #32
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f004 fdff 	bl	8005534 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000936:	4b50      	ldr	r3, [pc, #320]	; (8000a78 <MX_TIM8_Init+0x180>)
 8000938:	4a50      	ldr	r2, [pc, #320]	; (8000a7c <MX_TIM8_Init+0x184>)
 800093a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7;
 800093c:	4b4e      	ldr	r3, [pc, #312]	; (8000a78 <MX_TIM8_Init+0x180>)
 800093e:	2207      	movs	r2, #7
 8000940:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000942:	4b4d      	ldr	r3, [pc, #308]	; (8000a78 <MX_TIM8_Init+0x180>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100;
 8000948:	4b4b      	ldr	r3, [pc, #300]	; (8000a78 <MX_TIM8_Init+0x180>)
 800094a:	2264      	movs	r2, #100	; 0x64
 800094c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800094e:	4b4a      	ldr	r3, [pc, #296]	; (8000a78 <MX_TIM8_Init+0x180>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000954:	4b48      	ldr	r3, [pc, #288]	; (8000a78 <MX_TIM8_Init+0x180>)
 8000956:	2200      	movs	r2, #0
 8000958:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800095a:	4b47      	ldr	r3, [pc, #284]	; (8000a78 <MX_TIM8_Init+0x180>)
 800095c:	2280      	movs	r2, #128	; 0x80
 800095e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000960:	4845      	ldr	r0, [pc, #276]	; (8000a78 <MX_TIM8_Init+0x180>)
 8000962:	f001 ffd5 	bl	8002910 <HAL_TIM_Base_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 800096c:	f000 f998 	bl	8000ca0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000970:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000974:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000976:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800097a:	4619      	mov	r1, r3
 800097c:	483e      	ldr	r0, [pc, #248]	; (8000a78 <MX_TIM8_Init+0x180>)
 800097e:	f002 fbe1 	bl	8003144 <HAL_TIM_ConfigClockSource>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8000988:	f000 f98a 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800098c:	483a      	ldr	r0, [pc, #232]	; (8000a78 <MX_TIM8_Init+0x180>)
 800098e:	f002 f8d3 	bl	8002b38 <HAL_TIM_PWM_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000998:	f000 f982 	bl	8000ca0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099c:	2300      	movs	r3, #0
 800099e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80009a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80009a8:	4619      	mov	r1, r3
 80009aa:	4833      	ldr	r0, [pc, #204]	; (8000a78 <MX_TIM8_Init+0x180>)
 80009ac:	f003 f818 	bl	80039e0 <HAL_TIMEx_MasterConfigSynchronization>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 80009b6:	f000 f973 	bl	8000ca0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ba:	2360      	movs	r3, #96	; 0x60
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 20;
 80009be:	2314      	movs	r3, #20
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009c6:	2300      	movs	r3, #0
 80009c8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009ce:	2300      	movs	r3, #0
 80009d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009d2:	2300      	movs	r3, #0
 80009d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009da:	2200      	movs	r2, #0
 80009dc:	4619      	mov	r1, r3
 80009de:	4826      	ldr	r0, [pc, #152]	; (8000a78 <MX_TIM8_Init+0x180>)
 80009e0:	f002 faf2 	bl	8002fc8 <HAL_TIM_PWM_ConfigChannel>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 80009ea:	f000 f959 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f2:	2204      	movs	r2, #4
 80009f4:	4619      	mov	r1, r3
 80009f6:	4820      	ldr	r0, [pc, #128]	; (8000a78 <MX_TIM8_Init+0x180>)
 80009f8:	f002 fae6 	bl	8002fc8 <HAL_TIM_PWM_ConfigChannel>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8000a02:	f000 f94d 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0a:	2208      	movs	r2, #8
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	481a      	ldr	r0, [pc, #104]	; (8000a78 <MX_TIM8_Init+0x180>)
 8000a10:	f002 fada 	bl	8002fc8 <HAL_TIM_PWM_ConfigChannel>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8000a1a:	f000 f941 	bl	8000ca0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a22:	220c      	movs	r2, #12
 8000a24:	4619      	mov	r1, r3
 8000a26:	4814      	ldr	r0, [pc, #80]	; (8000a78 <MX_TIM8_Init+0x180>)
 8000a28:	f002 face 	bl	8002fc8 <HAL_TIM_PWM_ConfigChannel>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8000a32:	f000 f935 	bl	8000ca0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a4e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	4619      	mov	r1, r3
 8000a58:	4807      	ldr	r0, [pc, #28]	; (8000a78 <MX_TIM8_Init+0x180>)
 8000a5a:	f003 f82d 	bl	8003ab8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM8_Init+0x170>
  {
    Error_Handler();
 8000a64:	f000 f91c 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000a68:	4803      	ldr	r0, [pc, #12]	; (8000a78 <MX_TIM8_Init+0x180>)
 8000a6a:	f000 f9e1 	bl	8000e30 <HAL_TIM_MspPostInit>

}
 8000a6e:	bf00      	nop
 8000a70:	3758      	adds	r7, #88	; 0x58
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	200002e8 	.word	0x200002e8
 8000a7c:	40013400 	.word	0x40013400

08000a80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <MX_USART1_UART_Init+0x4c>)
 8000a86:	4a12      	ldr	r2, [pc, #72]	; (8000ad0 <MX_USART1_UART_Init+0x50>)
 8000a88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <MX_USART1_UART_Init+0x4c>)
 8000a8c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <MX_USART1_UART_Init+0x4c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <MX_USART1_UART_Init+0x4c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <MX_USART1_UART_Init+0x4c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <MX_USART1_UART_Init+0x4c>)
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	; (8000acc <MX_USART1_UART_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <MX_USART1_UART_Init+0x4c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ab6:	4805      	ldr	r0, [pc, #20]	; (8000acc <MX_USART1_UART_Init+0x4c>)
 8000ab8:	f003 f86a 	bl	8003b90 <HAL_UART_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ac2:	f000 f8ed 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200003cc 	.word	0x200003cc
 8000ad0:	40013800 	.word	0x40013800

08000ad4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <MX_USART2_UART_Init+0x4c>)
 8000ada:	4a12      	ldr	r2, [pc, #72]	; (8000b24 <MX_USART2_UART_Init+0x50>)
 8000adc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ade:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <MX_USART2_UART_Init+0x4c>)
 8000ae0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ae4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_USART2_UART_Init+0x4c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_USART2_UART_Init+0x4c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <MX_USART2_UART_Init+0x4c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_USART2_UART_Init+0x4c>)
 8000afa:	220c      	movs	r2, #12
 8000afc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <MX_USART2_UART_Init+0x4c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_USART2_UART_Init+0x4c>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b0a:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_USART2_UART_Init+0x4c>)
 8000b0c:	f003 f840 	bl	8003b90 <HAL_UART_Init>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b16:	f000 f8c3 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	200005a8 	.word	0x200005a8
 8000b24:	40004400 	.word	0x40004400

08000b28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2e:	f107 0310 	add.w	r3, r7, #16
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3c:	4b3e      	ldr	r3, [pc, #248]	; (8000c38 <MX_GPIO_Init+0x110>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4a3d      	ldr	r2, [pc, #244]	; (8000c38 <MX_GPIO_Init+0x110>)
 8000b42:	f043 0310 	orr.w	r3, r3, #16
 8000b46:	6193      	str	r3, [r2, #24]
 8000b48:	4b3b      	ldr	r3, [pc, #236]	; (8000c38 <MX_GPIO_Init+0x110>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	f003 0310 	and.w	r3, r3, #16
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b54:	4b38      	ldr	r3, [pc, #224]	; (8000c38 <MX_GPIO_Init+0x110>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	4a37      	ldr	r2, [pc, #220]	; (8000c38 <MX_GPIO_Init+0x110>)
 8000b5a:	f043 0304 	orr.w	r3, r3, #4
 8000b5e:	6193      	str	r3, [r2, #24]
 8000b60:	4b35      	ldr	r3, [pc, #212]	; (8000c38 <MX_GPIO_Init+0x110>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	f003 0304 	and.w	r3, r3, #4
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6c:	4b32      	ldr	r3, [pc, #200]	; (8000c38 <MX_GPIO_Init+0x110>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	4a31      	ldr	r2, [pc, #196]	; (8000c38 <MX_GPIO_Init+0x110>)
 8000b72:	f043 0308 	orr.w	r3, r3, #8
 8000b76:	6193      	str	r3, [r2, #24]
 8000b78:	4b2f      	ldr	r3, [pc, #188]	; (8000c38 <MX_GPIO_Init+0x110>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	f003 0308 	and.w	r3, r3, #8
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b84:	4b2c      	ldr	r3, [pc, #176]	; (8000c38 <MX_GPIO_Init+0x110>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	4a2b      	ldr	r2, [pc, #172]	; (8000c38 <MX_GPIO_Init+0x110>)
 8000b8a:	f043 0320 	orr.w	r3, r3, #32
 8000b8e:	6193      	str	r3, [r2, #24]
 8000b90:	4b29      	ldr	r3, [pc, #164]	; (8000c38 <MX_GPIO_Init+0x110>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	f003 0320 	and.w	r3, r3, #32
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BLUE_LED_Pin|MOTOR_1_IN_2_Pin|MOTOR_1_IN_1_Pin|MOTOR_4_IN_2_Pin, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f243 0130 	movw	r1, #12336	; 0x3030
 8000ba2:	4826      	ldr	r0, [pc, #152]	; (8000c3c <MX_GPIO_Init+0x114>)
 8000ba4:	f001 f9b2 	bl	8001f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_2_IN_1_Pin|MOTOR_2_IN_2_Pin|MOTOR_3_IN_1_Pin|MOTOR_3_IN_2_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2133      	movs	r1, #51	; 0x33
 8000bac:	4824      	ldr	r0, [pc, #144]	; (8000c40 <MX_GPIO_Init+0x118>)
 8000bae:	f001 f9ad 	bl	8001f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_4_IN_1_GPIO_Port, MOTOR_4_IN_1_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2104      	movs	r1, #4
 8000bb6:	4823      	ldr	r0, [pc, #140]	; (8000c44 <MX_GPIO_Init+0x11c>)
 8000bb8:	f001 f9a8 	bl	8001f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8000bbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 0310 	add.w	r3, r7, #16
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4819      	ldr	r0, [pc, #100]	; (8000c3c <MX_GPIO_Init+0x114>)
 8000bd6:	f001 f805 	bl	8001be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_1_IN_2_Pin MOTOR_1_IN_1_Pin MOTOR_4_IN_2_Pin */
  GPIO_InitStruct.Pin = MOTOR_1_IN_2_Pin|MOTOR_1_IN_1_Pin|MOTOR_4_IN_2_Pin;
 8000bda:	f241 0330 	movw	r3, #4144	; 0x1030
 8000bde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000be8:	2303      	movs	r3, #3
 8000bea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4812      	ldr	r0, [pc, #72]	; (8000c3c <MX_GPIO_Init+0x114>)
 8000bf4:	f000 fff6 	bl	8001be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_2_IN_1_Pin MOTOR_2_IN_2_Pin MOTOR_3_IN_1_Pin MOTOR_3_IN_2_Pin */
  GPIO_InitStruct.Pin = MOTOR_2_IN_1_Pin|MOTOR_2_IN_2_Pin|MOTOR_3_IN_1_Pin|MOTOR_3_IN_2_Pin;
 8000bf8:	2333      	movs	r3, #51	; 0x33
 8000bfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c04:	2303      	movs	r3, #3
 8000c06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c08:	f107 0310 	add.w	r3, r7, #16
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	480c      	ldr	r0, [pc, #48]	; (8000c40 <MX_GPIO_Init+0x118>)
 8000c10:	f000 ffe8 	bl	8001be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_4_IN_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_4_IN_1_Pin;
 8000c14:	2304      	movs	r3, #4
 8000c16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c20:	2303      	movs	r3, #3
 8000c22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MOTOR_4_IN_1_GPIO_Port, &GPIO_InitStruct);
 8000c24:	f107 0310 	add.w	r3, r7, #16
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4806      	ldr	r0, [pc, #24]	; (8000c44 <MX_GPIO_Init+0x11c>)
 8000c2c:	f000 ffda 	bl	8001be4 <HAL_GPIO_Init>

}
 8000c30:	bf00      	nop
 8000c32:	3720      	adds	r7, #32
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40011000 	.word	0x40011000
 8000c40:	40010c00 	.word	0x40010c00
 8000c44:	40011400 	.word	0x40011400

08000c48 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  /* Check the handle of the timer triggering this callback and toggle LED */
  if (htim == &htim1)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d101      	bne.n	8000c5c <HAL_TIM_PeriodElapsedCallback+0x14>
  {
    LED_toggle();
 8000c58:	f003 ff98 	bl	8004b8c <LED_toggle>
  }
  else
  {
    ; /* Nothing to do */
  }
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000440 	.word	0x20000440

08000c68 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Check the handle of the UART triggering this callback and actually receive date */
  if (huart == &huart1)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a09      	ldr	r2, [pc, #36]	; (8000c98 <HAL_UART_RxCpltCallback+0x30>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d103      	bne.n	8000c80 <HAL_UART_RxCpltCallback+0x18>
  {
    CONSOLE_receiveData(&huart1);
 8000c78:	4807      	ldr	r0, [pc, #28]	; (8000c98 <HAL_UART_RxCpltCallback+0x30>)
 8000c7a:	f003 febf 	bl	80049fc <CONSOLE_receiveData>
  }
  else
  {
    ; /* Nothing to do */
  }
}
 8000c7e:	e006      	b.n	8000c8e <HAL_UART_RxCpltCallback+0x26>
  else if (huart == &huart2)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4a06      	ldr	r2, [pc, #24]	; (8000c9c <HAL_UART_RxCpltCallback+0x34>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d102      	bne.n	8000c8e <HAL_UART_RxCpltCallback+0x26>
    MASTER_CONTROL_receiveData(&huart2);
 8000c88:	4804      	ldr	r0, [pc, #16]	; (8000c9c <HAL_UART_RxCpltCallback+0x34>)
 8000c8a:	f004 f805 	bl	8004c98 <MASTER_CONTROL_receiveData>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	200003cc 	.word	0x200003cc
 8000c9c:	200005a8 	.word	0x200005a8

08000ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca4:	b672      	cpsid	i
}
 8000ca6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <Error_Handler+0x8>
	...

08000cac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <HAL_MspInit+0x5c>)
 8000cb4:	699b      	ldr	r3, [r3, #24]
 8000cb6:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <HAL_MspInit+0x5c>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6193      	str	r3, [r2, #24]
 8000cbe:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <HAL_MspInit+0x5c>)
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	60bb      	str	r3, [r7, #8]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cca:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <HAL_MspInit+0x5c>)
 8000ccc:	69db      	ldr	r3, [r3, #28]
 8000cce:	4a0e      	ldr	r2, [pc, #56]	; (8000d08 <HAL_MspInit+0x5c>)
 8000cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd4:	61d3      	str	r3, [r2, #28]
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <HAL_MspInit+0x5c>)
 8000cd8:	69db      	ldr	r3, [r3, #28]
 8000cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <HAL_MspInit+0x60>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <HAL_MspInit+0x60>)
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	3714      	adds	r7, #20
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40010000 	.word	0x40010000

08000d10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0310 	add.w	r3, r7, #16
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a14      	ldr	r2, [pc, #80]	; (8000d7c <HAL_ADC_MspInit+0x6c>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d121      	bne.n	8000d74 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d30:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <HAL_ADC_MspInit+0x70>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <HAL_ADC_MspInit+0x70>)
 8000d36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d3a:	6193      	str	r3, [r2, #24]
 8000d3c:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <HAL_ADC_MspInit+0x70>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d48:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <HAL_ADC_MspInit+0x70>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4a0c      	ldr	r2, [pc, #48]	; (8000d80 <HAL_ADC_MspInit+0x70>)
 8000d4e:	f043 0304 	orr.w	r3, r3, #4
 8000d52:	6193      	str	r3, [r2, #24]
 8000d54:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <HAL_ADC_MspInit+0x70>)
 8000d56:	699b      	ldr	r3, [r3, #24]
 8000d58:	f003 0304 	and.w	r3, r3, #4
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = BATTERY_ADC_Pin;
 8000d60:	2320      	movs	r3, #32
 8000d62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d64:	2303      	movs	r3, #3
 8000d66:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATTERY_ADC_GPIO_Port, &GPIO_InitStruct);
 8000d68:	f107 0310 	add.w	r3, r7, #16
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <HAL_ADC_MspInit+0x74>)
 8000d70:	f000 ff38 	bl	8001be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d74:	bf00      	nop
 8000d76:	3720      	adds	r7, #32
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40012400 	.word	0x40012400
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40010800 	.word	0x40010800

08000d88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a23      	ldr	r2, [pc, #140]	; (8000e24 <HAL_TIM_Base_MspInit+0x9c>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d114      	bne.n	8000dc4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d9a:	4b23      	ldr	r3, [pc, #140]	; (8000e28 <HAL_TIM_Base_MspInit+0xa0>)
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	4a22      	ldr	r2, [pc, #136]	; (8000e28 <HAL_TIM_Base_MspInit+0xa0>)
 8000da0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000da4:	6193      	str	r3, [r2, #24]
 8000da6:	4b20      	ldr	r3, [pc, #128]	; (8000e28 <HAL_TIM_Base_MspInit+0xa0>)
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 4, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2104      	movs	r1, #4
 8000db6:	2019      	movs	r0, #25
 8000db8:	f000 fd9b 	bl	80018f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000dbc:	2019      	movs	r0, #25
 8000dbe:	f000 fdb4 	bl	800192a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000dc2:	e02a      	b.n	8000e1a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dcc:	d114      	bne.n	8000df8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dce:	4b16      	ldr	r3, [pc, #88]	; (8000e28 <HAL_TIM_Base_MspInit+0xa0>)
 8000dd0:	69db      	ldr	r3, [r3, #28]
 8000dd2:	4a15      	ldr	r2, [pc, #84]	; (8000e28 <HAL_TIM_Base_MspInit+0xa0>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	61d3      	str	r3, [r2, #28]
 8000dda:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <HAL_TIM_Base_MspInit+0xa0>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2101      	movs	r1, #1
 8000dea:	201c      	movs	r0, #28
 8000dec:	f000 fd81 	bl	80018f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000df0:	201c      	movs	r0, #28
 8000df2:	f000 fd9a 	bl	800192a <HAL_NVIC_EnableIRQ>
}
 8000df6:	e010      	b.n	8000e1a <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM8)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0b      	ldr	r2, [pc, #44]	; (8000e2c <HAL_TIM_Base_MspInit+0xa4>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d10b      	bne.n	8000e1a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <HAL_TIM_Base_MspInit+0xa0>)
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	4a08      	ldr	r2, [pc, #32]	; (8000e28 <HAL_TIM_Base_MspInit+0xa0>)
 8000e08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e0c:	6193      	str	r3, [r2, #24]
 8000e0e:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_TIM_Base_MspInit+0xa0>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
}
 8000e1a:	bf00      	nop
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40012c00 	.word	0x40012c00
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	40013400 	.word	0x40013400

08000e30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e38:	f107 0310 	add.w	r3, r7, #16
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM8)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a10      	ldr	r2, [pc, #64]	; (8000e8c <HAL_TIM_MspPostInit+0x5c>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d118      	bne.n	8000e82 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e50:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <HAL_TIM_MspPostInit+0x60>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	4a0e      	ldr	r2, [pc, #56]	; (8000e90 <HAL_TIM_MspPostInit+0x60>)
 8000e56:	f043 0310 	orr.w	r3, r3, #16
 8000e5a:	6193      	str	r3, [r2, #24]
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <HAL_TIM_MspPostInit+0x60>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	f003 0310 	and.w	r3, r3, #16
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_2_PWM_Pin|MOTOR_1_PWM_Pin|MOTOR_3_PWM_Pin|MOTOR_4_PWM_Pin;
 8000e68:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000e6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e72:	2303      	movs	r3, #3
 8000e74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e76:	f107 0310 	add.w	r3, r7, #16
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4805      	ldr	r0, [pc, #20]	; (8000e94 <HAL_TIM_MspPostInit+0x64>)
 8000e7e:	f000 feb1 	bl	8001be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000e82:	bf00      	nop
 8000e84:	3720      	adds	r7, #32
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40013400 	.word	0x40013400
 8000e90:	40021000 	.word	0x40021000
 8000e94:	40011000 	.word	0x40011000

08000e98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	; 0x28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 0318 	add.w	r3, r7, #24
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a3f      	ldr	r2, [pc, #252]	; (8000fb0 <HAL_UART_MspInit+0x118>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d13a      	bne.n	8000f2e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eb8:	4b3e      	ldr	r3, [pc, #248]	; (8000fb4 <HAL_UART_MspInit+0x11c>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	4a3d      	ldr	r2, [pc, #244]	; (8000fb4 <HAL_UART_MspInit+0x11c>)
 8000ebe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec2:	6193      	str	r3, [r2, #24]
 8000ec4:	4b3b      	ldr	r3, [pc, #236]	; (8000fb4 <HAL_UART_MspInit+0x11c>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ecc:	617b      	str	r3, [r7, #20]
 8000ece:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed0:	4b38      	ldr	r3, [pc, #224]	; (8000fb4 <HAL_UART_MspInit+0x11c>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	4a37      	ldr	r2, [pc, #220]	; (8000fb4 <HAL_UART_MspInit+0x11c>)
 8000ed6:	f043 0304 	orr.w	r3, r3, #4
 8000eda:	6193      	str	r3, [r2, #24]
 8000edc:	4b35      	ldr	r3, [pc, #212]	; (8000fb4 <HAL_UART_MspInit+0x11c>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	f003 0304 	and.w	r3, r3, #4
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ee8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef6:	f107 0318 	add.w	r3, r7, #24
 8000efa:	4619      	mov	r1, r3
 8000efc:	482e      	ldr	r0, [pc, #184]	; (8000fb8 <HAL_UART_MspInit+0x120>)
 8000efe:	f000 fe71 	bl	8001be4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f10:	f107 0318 	add.w	r3, r7, #24
 8000f14:	4619      	mov	r1, r3
 8000f16:	4828      	ldr	r0, [pc, #160]	; (8000fb8 <HAL_UART_MspInit+0x120>)
 8000f18:	f000 fe64 	bl	8001be4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2103      	movs	r1, #3
 8000f20:	2025      	movs	r0, #37	; 0x25
 8000f22:	f000 fce6 	bl	80018f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f26:	2025      	movs	r0, #37	; 0x25
 8000f28:	f000 fcff 	bl	800192a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f2c:	e03c      	b.n	8000fa8 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a22      	ldr	r2, [pc, #136]	; (8000fbc <HAL_UART_MspInit+0x124>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d137      	bne.n	8000fa8 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f38:	4b1e      	ldr	r3, [pc, #120]	; (8000fb4 <HAL_UART_MspInit+0x11c>)
 8000f3a:	69db      	ldr	r3, [r3, #28]
 8000f3c:	4a1d      	ldr	r2, [pc, #116]	; (8000fb4 <HAL_UART_MspInit+0x11c>)
 8000f3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f42:	61d3      	str	r3, [r2, #28]
 8000f44:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <HAL_UART_MspInit+0x11c>)
 8000f46:	69db      	ldr	r3, [r3, #28]
 8000f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f50:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <HAL_UART_MspInit+0x11c>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	4a17      	ldr	r2, [pc, #92]	; (8000fb4 <HAL_UART_MspInit+0x11c>)
 8000f56:	f043 0304 	orr.w	r3, r3, #4
 8000f5a:	6193      	str	r3, [r2, #24]
 8000f5c:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <HAL_UART_MspInit+0x11c>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	f003 0304 	and.w	r3, r3, #4
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f68:	2304      	movs	r3, #4
 8000f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f74:	f107 0318 	add.w	r3, r7, #24
 8000f78:	4619      	mov	r1, r3
 8000f7a:	480f      	ldr	r0, [pc, #60]	; (8000fb8 <HAL_UART_MspInit+0x120>)
 8000f7c:	f000 fe32 	bl	8001be4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f80:	2308      	movs	r3, #8
 8000f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8c:	f107 0318 	add.w	r3, r7, #24
 8000f90:	4619      	mov	r1, r3
 8000f92:	4809      	ldr	r0, [pc, #36]	; (8000fb8 <HAL_UART_MspInit+0x120>)
 8000f94:	f000 fe26 	bl	8001be4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2102      	movs	r1, #2
 8000f9c:	2026      	movs	r0, #38	; 0x26
 8000f9e:	f000 fca8 	bl	80018f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fa2:	2026      	movs	r0, #38	; 0x26
 8000fa4:	f000 fcc1 	bl	800192a <HAL_NVIC_EnableIRQ>
}
 8000fa8:	bf00      	nop
 8000faa:	3728      	adds	r7, #40	; 0x28
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40013800 	.word	0x40013800
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	40010800 	.word	0x40010800
 8000fbc:	40004400 	.word	0x40004400

08000fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <NMI_Handler+0x4>

08000fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <HardFault_Handler+0x4>

08000fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <MemManage_Handler+0x4>

08000fd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <BusFault_Handler+0x4>

08000fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <UsageFault_Handler+0x4>

08000fde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr

08000fea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr

08000ff6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr

08001002 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001006:	f000 f95d 	bl	80012c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
	...

08001010 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <TIM1_UP_IRQHandler+0x10>)
 8001016:	f001 feaf 	bl	8002d78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000440 	.word	0x20000440

08001024 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <TIM2_IRQHandler+0x10>)
 800102a:	f001 fea5 	bl	8002d78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200004f4 	.word	0x200004f4

08001038 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <USART1_IRQHandler+0x10>)
 800103e:	f002 fec3 	bl	8003dc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200003cc 	.word	0x200003cc

0800104c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001050:	4802      	ldr	r0, [pc, #8]	; (800105c <USART2_IRQHandler+0x10>)
 8001052:	f002 feb9 	bl	8003dc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200005a8 	.word	0x200005a8

08001060 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
	return 1;
 8001064:	2301      	movs	r3, #1
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr

0800106e <_kill>:

int _kill(int pid, int sig)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
 8001076:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001078:	f003 ff2c 	bl	8004ed4 <__errno>
 800107c:	4603      	mov	r3, r0
 800107e:	2216      	movs	r2, #22
 8001080:	601a      	str	r2, [r3, #0]
	return -1;
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <_exit>:

void _exit (int status)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001096:	f04f 31ff 	mov.w	r1, #4294967295
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff ffe7 	bl	800106e <_kill>
	while (1) {}		/* Make sure we hang here */
 80010a0:	e7fe      	b.n	80010a0 <_exit+0x12>

080010a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b086      	sub	sp, #24
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	60f8      	str	r0, [r7, #12]
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
 80010b2:	e00a      	b.n	80010ca <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010b4:	f3af 8000 	nop.w
 80010b8:	4601      	mov	r1, r0
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	1c5a      	adds	r2, r3, #1
 80010be:	60ba      	str	r2, [r7, #8]
 80010c0:	b2ca      	uxtb	r2, r1
 80010c2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	3301      	adds	r3, #1
 80010c8:	617b      	str	r3, [r7, #20]
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	dbf0      	blt.n	80010b4 <_read+0x12>
	}

return len;
 80010d2:	687b      	ldr	r3, [r7, #4]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	e009      	b.n	8001102 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	1c5a      	adds	r2, r3, #1
 80010f2:	60ba      	str	r2, [r7, #8]
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	3301      	adds	r3, #1
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	697a      	ldr	r2, [r7, #20]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	429a      	cmp	r2, r3
 8001108:	dbf1      	blt.n	80010ee <_write+0x12>
	}
	return len;
 800110a:	687b      	ldr	r3, [r7, #4]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3718      	adds	r7, #24
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <_close>:

int _close(int file)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	return -1;
 800111c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr

0800112a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
 8001132:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800113a:	605a      	str	r2, [r3, #4]
	return 0;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr

08001148 <_isatty>:

int _isatty(int file)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	return 1;
 8001150:	2301      	movs	r3, #1
}
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr

0800115c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
	return 0;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800117c:	4a14      	ldr	r2, [pc, #80]	; (80011d0 <_sbrk+0x5c>)
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <_sbrk+0x60>)
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001188:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <_sbrk+0x64>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d102      	bne.n	8001196 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <_sbrk+0x64>)
 8001192:	4a12      	ldr	r2, [pc, #72]	; (80011dc <_sbrk+0x68>)
 8001194:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <_sbrk+0x64>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d207      	bcs.n	80011b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a4:	f003 fe96 	bl	8004ed4 <__errno>
 80011a8:	4603      	mov	r3, r0
 80011aa:	220c      	movs	r2, #12
 80011ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
 80011b2:	e009      	b.n	80011c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <_sbrk+0x64>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ba:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <_sbrk+0x64>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	4a05      	ldr	r2, [pc, #20]	; (80011d8 <_sbrk+0x64>)
 80011c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011c6:	68fb      	ldr	r3, [r7, #12]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	2000c000 	.word	0x2000c000
 80011d4:	00000400 	.word	0x00000400
 80011d8:	20000294 	.word	0x20000294
 80011dc:	200006f8 	.word	0x200006f8

080011e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr

080011ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011ec:	480c      	ldr	r0, [pc, #48]	; (8001220 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ee:	490d      	ldr	r1, [pc, #52]	; (8001224 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011f0:	4a0d      	ldr	r2, [pc, #52]	; (8001228 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f4:	e002      	b.n	80011fc <LoopCopyDataInit>

080011f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fa:	3304      	adds	r3, #4

080011fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001200:	d3f9      	bcc.n	80011f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001202:	4a0a      	ldr	r2, [pc, #40]	; (800122c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001204:	4c0a      	ldr	r4, [pc, #40]	; (8001230 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001208:	e001      	b.n	800120e <LoopFillZerobss>

0800120a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800120c:	3204      	adds	r2, #4

0800120e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800120e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001210:	d3fb      	bcc.n	800120a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001212:	f7ff ffe5 	bl	80011e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001216:	f004 f83f 	bl	8005298 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800121a:	f7ff f9c9 	bl	80005b0 <main>
  bx lr
 800121e:	4770      	bx	lr
  ldr r0, =_sdata
 8001220:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001224:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 8001228:	080088f8 	.word	0x080088f8
  ldr r2, =_sbss
 800122c:	20000274 	.word	0x20000274
  ldr r4, =_ebss
 8001230:	200006f4 	.word	0x200006f4

08001234 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001234:	e7fe      	b.n	8001234 <ADC1_2_IRQHandler>
	...

08001238 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <HAL_Init+0x28>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a07      	ldr	r2, [pc, #28]	; (8001260 <HAL_Init+0x28>)
 8001242:	f043 0310 	orr.w	r3, r3, #16
 8001246:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001248:	2003      	movs	r0, #3
 800124a:	f000 fb47 	bl	80018dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124e:	2000      	movs	r0, #0
 8001250:	f000 f808 	bl	8001264 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001254:	f7ff fd2a 	bl	8000cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40022000 	.word	0x40022000

08001264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_InitTick+0x54>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_InitTick+0x58>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4619      	mov	r1, r3
 8001276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127a:	fbb3 f3f1 	udiv	r3, r3, r1
 800127e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f000 fb5f 	bl	8001946 <HAL_SYSTICK_Config>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e00e      	b.n	80012b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b0f      	cmp	r3, #15
 8001296:	d80a      	bhi.n	80012ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001298:	2200      	movs	r2, #0
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	f000 fb27 	bl	80018f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a4:	4a06      	ldr	r2, [pc, #24]	; (80012c0 <HAL_InitTick+0x5c>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	e000      	b.n	80012b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000004 	.word	0x20000004
 80012bc:	2000000c 	.word	0x2000000c
 80012c0:	20000008 	.word	0x20000008

080012c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <HAL_IncTick+0x1c>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <HAL_IncTick+0x20>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4413      	add	r3, r2
 80012d4:	4a03      	ldr	r2, [pc, #12]	; (80012e4 <HAL_IncTick+0x20>)
 80012d6:	6013      	str	r3, [r2, #0]
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr
 80012e0:	2000000c 	.word	0x2000000c
 80012e4:	2000061c 	.word	0x2000061c

080012e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return uwTick;
 80012ec:	4b02      	ldr	r3, [pc, #8]	; (80012f8 <HAL_GetTick+0x10>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	2000061c 	.word	0x2000061c

080012fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001304:	2300      	movs	r3, #0
 8001306:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001308:	2300      	movs	r3, #0
 800130a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e0ce      	b.n	80014bc <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001328:	2b00      	cmp	r3, #0
 800132a:	d109      	bne.n	8001340 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff fce8 	bl	8000d10 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 f9bd 	bl	80016c0 <ADC_ConversionStop_Disable>
 8001346:	4603      	mov	r3, r0
 8001348:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134e:	f003 0310 	and.w	r3, r3, #16
 8001352:	2b00      	cmp	r3, #0
 8001354:	f040 80a9 	bne.w	80014aa <HAL_ADC_Init+0x1ae>
 8001358:	7dfb      	ldrb	r3, [r7, #23]
 800135a:	2b00      	cmp	r3, #0
 800135c:	f040 80a5 	bne.w	80014aa <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001364:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001368:	f023 0302 	bic.w	r3, r3, #2
 800136c:	f043 0202 	orr.w	r2, r3, #2
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4951      	ldr	r1, [pc, #324]	; (80014c4 <HAL_ADC_Init+0x1c8>)
 800137e:	428b      	cmp	r3, r1
 8001380:	d10a      	bne.n	8001398 <HAL_ADC_Init+0x9c>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800138a:	d002      	beq.n	8001392 <HAL_ADC_Init+0x96>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	69db      	ldr	r3, [r3, #28]
 8001390:	e004      	b.n	800139c <HAL_ADC_Init+0xa0>
 8001392:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001396:	e001      	b.n	800139c <HAL_ADC_Init+0xa0>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800139c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	7b1b      	ldrb	r3, [r3, #12]
 80013a2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013a4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013b4:	d003      	beq.n	80013be <HAL_ADC_Init+0xc2>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d102      	bne.n	80013c4 <HAL_ADC_Init+0xc8>
 80013be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013c2:	e000      	b.n	80013c6 <HAL_ADC_Init+0xca>
 80013c4:	2300      	movs	r3, #0
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	7d1b      	ldrb	r3, [r3, #20]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d119      	bne.n	8001408 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	7b1b      	ldrb	r3, [r3, #12]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d109      	bne.n	80013f0 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	3b01      	subs	r3, #1
 80013e2:	035a      	lsls	r2, r3, #13
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	e00b      	b.n	8001408 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f4:	f043 0220 	orr.w	r2, r3, #32
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001400:	f043 0201 	orr.w	r2, r3, #1
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	430a      	orrs	r2, r1
 800141a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	689a      	ldr	r2, [r3, #8]
 8001422:	4b29      	ldr	r3, [pc, #164]	; (80014c8 <HAL_ADC_Init+0x1cc>)
 8001424:	4013      	ands	r3, r2
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	6812      	ldr	r2, [r2, #0]
 800142a:	68b9      	ldr	r1, [r7, #8]
 800142c:	430b      	orrs	r3, r1
 800142e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001438:	d003      	beq.n	8001442 <HAL_ADC_Init+0x146>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d104      	bne.n	800144c <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	3b01      	subs	r3, #1
 8001448:	051b      	lsls	r3, r3, #20
 800144a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001452:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	430a      	orrs	r2, r1
 800145e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	4b19      	ldr	r3, [pc, #100]	; (80014cc <HAL_ADC_Init+0x1d0>)
 8001468:	4013      	ands	r3, r2
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	429a      	cmp	r2, r3
 800146e:	d10b      	bne.n	8001488 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147a:	f023 0303 	bic.w	r3, r3, #3
 800147e:	f043 0201 	orr.w	r2, r3, #1
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001486:	e018      	b.n	80014ba <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148c:	f023 0312 	bic.w	r3, r3, #18
 8001490:	f043 0210 	orr.w	r2, r3, #16
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800149c:	f043 0201 	orr.w	r2, r3, #1
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014a8:	e007      	b.n	80014ba <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ae:	f043 0210 	orr.w	r2, r3, #16
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40013c00 	.word	0x40013c00
 80014c8:	ffe1f7fd 	.word	0xffe1f7fd
 80014cc:	ff1f0efe 	.word	0xff1f0efe

080014d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014da:	2300      	movs	r3, #0
 80014dc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80014de:	2300      	movs	r3, #0
 80014e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d101      	bne.n	80014f0 <HAL_ADC_ConfigChannel+0x20>
 80014ec:	2302      	movs	r3, #2
 80014ee:	e0dc      	b.n	80016aa <HAL_ADC_ConfigChannel+0x1da>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2201      	movs	r2, #1
 80014f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b06      	cmp	r3, #6
 80014fe:	d81c      	bhi.n	800153a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	3b05      	subs	r3, #5
 8001512:	221f      	movs	r2, #31
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	4019      	ands	r1, r3
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	6818      	ldr	r0, [r3, #0]
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	3b05      	subs	r3, #5
 800152c:	fa00 f203 	lsl.w	r2, r0, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	430a      	orrs	r2, r1
 8001536:	635a      	str	r2, [r3, #52]	; 0x34
 8001538:	e03c      	b.n	80015b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b0c      	cmp	r3, #12
 8001540:	d81c      	bhi.n	800157c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	4613      	mov	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	3b23      	subs	r3, #35	; 0x23
 8001554:	221f      	movs	r2, #31
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43db      	mvns	r3, r3
 800155c:	4019      	ands	r1, r3
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	6818      	ldr	r0, [r3, #0]
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	4613      	mov	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4413      	add	r3, r2
 800156c:	3b23      	subs	r3, #35	; 0x23
 800156e:	fa00 f203 	lsl.w	r2, r0, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	430a      	orrs	r2, r1
 8001578:	631a      	str	r2, [r3, #48]	; 0x30
 800157a:	e01b      	b.n	80015b4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	4613      	mov	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	4413      	add	r3, r2
 800158c:	3b41      	subs	r3, #65	; 0x41
 800158e:	221f      	movs	r2, #31
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	43db      	mvns	r3, r3
 8001596:	4019      	ands	r1, r3
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	6818      	ldr	r0, [r3, #0]
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	4613      	mov	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	3b41      	subs	r3, #65	; 0x41
 80015a8:	fa00 f203 	lsl.w	r2, r0, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	430a      	orrs	r2, r1
 80015b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b09      	cmp	r3, #9
 80015ba:	d91c      	bls.n	80015f6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68d9      	ldr	r1, [r3, #12]
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	4613      	mov	r3, r2
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4413      	add	r3, r2
 80015cc:	3b1e      	subs	r3, #30
 80015ce:	2207      	movs	r2, #7
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	43db      	mvns	r3, r3
 80015d6:	4019      	ands	r1, r3
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	6898      	ldr	r0, [r3, #8]
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4613      	mov	r3, r2
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	4413      	add	r3, r2
 80015e6:	3b1e      	subs	r3, #30
 80015e8:	fa00 f203 	lsl.w	r2, r0, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	430a      	orrs	r2, r1
 80015f2:	60da      	str	r2, [r3, #12]
 80015f4:	e019      	b.n	800162a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6919      	ldr	r1, [r3, #16]
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4613      	mov	r3, r2
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	4413      	add	r3, r2
 8001606:	2207      	movs	r2, #7
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	4019      	ands	r1, r3
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	6898      	ldr	r0, [r3, #8]
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4613      	mov	r3, r2
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	4413      	add	r3, r2
 800161e:	fa00 f203 	lsl.w	r2, r0, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	430a      	orrs	r2, r1
 8001628:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2b10      	cmp	r3, #16
 8001630:	d003      	beq.n	800163a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001636:	2b11      	cmp	r3, #17
 8001638:	d132      	bne.n	80016a0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a1d      	ldr	r2, [pc, #116]	; (80016b4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d125      	bne.n	8001690 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d126      	bne.n	80016a0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001660:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2b10      	cmp	r3, #16
 8001668:	d11a      	bne.n	80016a0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800166a:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <HAL_ADC_ConfigChannel+0x1e8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a13      	ldr	r2, [pc, #76]	; (80016bc <HAL_ADC_ConfigChannel+0x1ec>)
 8001670:	fba2 2303 	umull	r2, r3, r2, r3
 8001674:	0c9a      	lsrs	r2, r3, #18
 8001676:	4613      	mov	r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4413      	add	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001680:	e002      	b.n	8001688 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	3b01      	subs	r3, #1
 8001686:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d1f9      	bne.n	8001682 <HAL_ADC_ConfigChannel+0x1b2>
 800168e:	e007      	b.n	80016a0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001694:	f043 0220 	orr.w	r2, r3, #32
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr
 80016b4:	40012400 	.word	0x40012400
 80016b8:	20000004 	.word	0x20000004
 80016bc:	431bde83 	.word	0x431bde83

080016c0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d12e      	bne.n	8001738 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0201 	bic.w	r2, r2, #1
 80016e8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80016ea:	f7ff fdfd 	bl	80012e8 <HAL_GetTick>
 80016ee:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80016f0:	e01b      	b.n	800172a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80016f2:	f7ff fdf9 	bl	80012e8 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d914      	bls.n	800172a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b01      	cmp	r3, #1
 800170c:	d10d      	bne.n	800172a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001712:	f043 0210 	orr.w	r2, r3, #16
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171e:	f043 0201 	orr.w	r2, r3, #1
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e007      	b.n	800173a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b01      	cmp	r3, #1
 8001736:	d0dc      	beq.n	80016f2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001754:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001760:	4013      	ands	r3, r2
 8001762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800176c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001776:	4a04      	ldr	r2, [pc, #16]	; (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	60d3      	str	r3, [r2, #12]
}
 800177c:	bf00      	nop
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001790:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	0a1b      	lsrs	r3, r3, #8
 8001796:	f003 0307 	and.w	r3, r3, #7
}
 800179a:	4618      	mov	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	db0b      	blt.n	80017d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	f003 021f 	and.w	r2, r3, #31
 80017c0:	4906      	ldr	r1, [pc, #24]	; (80017dc <__NVIC_EnableIRQ+0x34>)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	095b      	lsrs	r3, r3, #5
 80017c8:	2001      	movs	r0, #1
 80017ca:	fa00 f202 	lsl.w	r2, r0, r2
 80017ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr
 80017dc:	e000e100 	.word	0xe000e100

080017e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	6039      	str	r1, [r7, #0]
 80017ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	db0a      	blt.n	800180a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	490c      	ldr	r1, [pc, #48]	; (800182c <__NVIC_SetPriority+0x4c>)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	0112      	lsls	r2, r2, #4
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	440b      	add	r3, r1
 8001804:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001808:	e00a      	b.n	8001820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4908      	ldr	r1, [pc, #32]	; (8001830 <__NVIC_SetPriority+0x50>)
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	3b04      	subs	r3, #4
 8001818:	0112      	lsls	r2, r2, #4
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	440b      	add	r3, r1
 800181e:	761a      	strb	r2, [r3, #24]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000e100 	.word	0xe000e100
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001834:	b480      	push	{r7}
 8001836:	b089      	sub	sp, #36	; 0x24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f1c3 0307 	rsb	r3, r3, #7
 800184e:	2b04      	cmp	r3, #4
 8001850:	bf28      	it	cs
 8001852:	2304      	movcs	r3, #4
 8001854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3304      	adds	r3, #4
 800185a:	2b06      	cmp	r3, #6
 800185c:	d902      	bls.n	8001864 <NVIC_EncodePriority+0x30>
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3b03      	subs	r3, #3
 8001862:	e000      	b.n	8001866 <NVIC_EncodePriority+0x32>
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001868:	f04f 32ff 	mov.w	r2, #4294967295
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43da      	mvns	r2, r3
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	401a      	ands	r2, r3
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800187c:	f04f 31ff 	mov.w	r1, #4294967295
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	fa01 f303 	lsl.w	r3, r1, r3
 8001886:	43d9      	mvns	r1, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800188c:	4313      	orrs	r3, r2
         );
}
 800188e:	4618      	mov	r0, r3
 8001890:	3724      	adds	r7, #36	; 0x24
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018a8:	d301      	bcc.n	80018ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018aa:	2301      	movs	r3, #1
 80018ac:	e00f      	b.n	80018ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ae:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <SysTick_Config+0x40>)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3b01      	subs	r3, #1
 80018b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018b6:	210f      	movs	r1, #15
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295
 80018bc:	f7ff ff90 	bl	80017e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <SysTick_Config+0x40>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018c6:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <SysTick_Config+0x40>)
 80018c8:	2207      	movs	r2, #7
 80018ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	e000e010 	.word	0xe000e010

080018dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff ff2d 	bl	8001744 <__NVIC_SetPriorityGrouping>
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b086      	sub	sp, #24
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	4603      	mov	r3, r0
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
 80018fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001904:	f7ff ff42 	bl	800178c <__NVIC_GetPriorityGrouping>
 8001908:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	68b9      	ldr	r1, [r7, #8]
 800190e:	6978      	ldr	r0, [r7, #20]
 8001910:	f7ff ff90 	bl	8001834 <NVIC_EncodePriority>
 8001914:	4602      	mov	r2, r0
 8001916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800191a:	4611      	mov	r1, r2
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff ff5f 	bl	80017e0 <__NVIC_SetPriority>
}
 8001922:	bf00      	nop
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
 8001930:	4603      	mov	r3, r0
 8001932:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff ff35 	bl	80017a8 <__NVIC_EnableIRQ>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7ff ffa2 	bl	8001898 <SysTick_Config>
 8001954:	4603      	mov	r3, r0
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800195e:	b480      	push	{r7}
 8001960:	b085      	sub	sp, #20
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001970:	2b02      	cmp	r3, #2
 8001972:	d008      	beq.n	8001986 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2204      	movs	r2, #4
 8001978:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e020      	b.n	80019c8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f022 020e 	bic.w	r2, r2, #14
 8001994:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f022 0201 	bic.w	r2, r2, #1
 80019a4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ae:	2101      	movs	r1, #1
 80019b0:	fa01 f202 	lsl.w	r2, r1, r2
 80019b4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr
	...

080019d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019dc:	2300      	movs	r3, #0
 80019de:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d005      	beq.n	80019f6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2204      	movs	r2, #4
 80019ee:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	73fb      	strb	r3, [r7, #15]
 80019f4:	e0d6      	b.n	8001ba4 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 020e 	bic.w	r2, r2, #14
 8001a04:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0201 	bic.w	r2, r2, #1
 8001a14:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	4b64      	ldr	r3, [pc, #400]	; (8001bb0 <HAL_DMA_Abort_IT+0x1dc>)
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d958      	bls.n	8001ad4 <HAL_DMA_Abort_IT+0x100>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a63      	ldr	r2, [pc, #396]	; (8001bb4 <HAL_DMA_Abort_IT+0x1e0>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d04f      	beq.n	8001acc <HAL_DMA_Abort_IT+0xf8>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a61      	ldr	r2, [pc, #388]	; (8001bb8 <HAL_DMA_Abort_IT+0x1e4>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d048      	beq.n	8001ac8 <HAL_DMA_Abort_IT+0xf4>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a60      	ldr	r2, [pc, #384]	; (8001bbc <HAL_DMA_Abort_IT+0x1e8>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d040      	beq.n	8001ac2 <HAL_DMA_Abort_IT+0xee>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a5e      	ldr	r2, [pc, #376]	; (8001bc0 <HAL_DMA_Abort_IT+0x1ec>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d038      	beq.n	8001abc <HAL_DMA_Abort_IT+0xe8>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a5d      	ldr	r2, [pc, #372]	; (8001bc4 <HAL_DMA_Abort_IT+0x1f0>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d030      	beq.n	8001ab6 <HAL_DMA_Abort_IT+0xe2>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a5b      	ldr	r2, [pc, #364]	; (8001bc8 <HAL_DMA_Abort_IT+0x1f4>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d028      	beq.n	8001ab0 <HAL_DMA_Abort_IT+0xdc>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a53      	ldr	r2, [pc, #332]	; (8001bb0 <HAL_DMA_Abort_IT+0x1dc>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d020      	beq.n	8001aaa <HAL_DMA_Abort_IT+0xd6>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a57      	ldr	r2, [pc, #348]	; (8001bcc <HAL_DMA_Abort_IT+0x1f8>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d019      	beq.n	8001aa6 <HAL_DMA_Abort_IT+0xd2>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a56      	ldr	r2, [pc, #344]	; (8001bd0 <HAL_DMA_Abort_IT+0x1fc>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d012      	beq.n	8001aa2 <HAL_DMA_Abort_IT+0xce>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a54      	ldr	r2, [pc, #336]	; (8001bd4 <HAL_DMA_Abort_IT+0x200>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d00a      	beq.n	8001a9c <HAL_DMA_Abort_IT+0xc8>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a53      	ldr	r2, [pc, #332]	; (8001bd8 <HAL_DMA_Abort_IT+0x204>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d102      	bne.n	8001a96 <HAL_DMA_Abort_IT+0xc2>
 8001a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a94:	e01b      	b.n	8001ace <HAL_DMA_Abort_IT+0xfa>
 8001a96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a9a:	e018      	b.n	8001ace <HAL_DMA_Abort_IT+0xfa>
 8001a9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aa0:	e015      	b.n	8001ace <HAL_DMA_Abort_IT+0xfa>
 8001aa2:	2310      	movs	r3, #16
 8001aa4:	e013      	b.n	8001ace <HAL_DMA_Abort_IT+0xfa>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e011      	b.n	8001ace <HAL_DMA_Abort_IT+0xfa>
 8001aaa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001aae:	e00e      	b.n	8001ace <HAL_DMA_Abort_IT+0xfa>
 8001ab0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ab4:	e00b      	b.n	8001ace <HAL_DMA_Abort_IT+0xfa>
 8001ab6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001aba:	e008      	b.n	8001ace <HAL_DMA_Abort_IT+0xfa>
 8001abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac0:	e005      	b.n	8001ace <HAL_DMA_Abort_IT+0xfa>
 8001ac2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ac6:	e002      	b.n	8001ace <HAL_DMA_Abort_IT+0xfa>
 8001ac8:	2310      	movs	r3, #16
 8001aca:	e000      	b.n	8001ace <HAL_DMA_Abort_IT+0xfa>
 8001acc:	2301      	movs	r3, #1
 8001ace:	4a43      	ldr	r2, [pc, #268]	; (8001bdc <HAL_DMA_Abort_IT+0x208>)
 8001ad0:	6053      	str	r3, [r2, #4]
 8001ad2:	e057      	b.n	8001b84 <HAL_DMA_Abort_IT+0x1b0>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a36      	ldr	r2, [pc, #216]	; (8001bb4 <HAL_DMA_Abort_IT+0x1e0>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d04f      	beq.n	8001b7e <HAL_DMA_Abort_IT+0x1aa>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a35      	ldr	r2, [pc, #212]	; (8001bb8 <HAL_DMA_Abort_IT+0x1e4>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d048      	beq.n	8001b7a <HAL_DMA_Abort_IT+0x1a6>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a33      	ldr	r2, [pc, #204]	; (8001bbc <HAL_DMA_Abort_IT+0x1e8>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d040      	beq.n	8001b74 <HAL_DMA_Abort_IT+0x1a0>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a32      	ldr	r2, [pc, #200]	; (8001bc0 <HAL_DMA_Abort_IT+0x1ec>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d038      	beq.n	8001b6e <HAL_DMA_Abort_IT+0x19a>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a30      	ldr	r2, [pc, #192]	; (8001bc4 <HAL_DMA_Abort_IT+0x1f0>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d030      	beq.n	8001b68 <HAL_DMA_Abort_IT+0x194>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a2f      	ldr	r2, [pc, #188]	; (8001bc8 <HAL_DMA_Abort_IT+0x1f4>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d028      	beq.n	8001b62 <HAL_DMA_Abort_IT+0x18e>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a26      	ldr	r2, [pc, #152]	; (8001bb0 <HAL_DMA_Abort_IT+0x1dc>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d020      	beq.n	8001b5c <HAL_DMA_Abort_IT+0x188>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a2b      	ldr	r2, [pc, #172]	; (8001bcc <HAL_DMA_Abort_IT+0x1f8>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d019      	beq.n	8001b58 <HAL_DMA_Abort_IT+0x184>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a29      	ldr	r2, [pc, #164]	; (8001bd0 <HAL_DMA_Abort_IT+0x1fc>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d012      	beq.n	8001b54 <HAL_DMA_Abort_IT+0x180>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a28      	ldr	r2, [pc, #160]	; (8001bd4 <HAL_DMA_Abort_IT+0x200>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d00a      	beq.n	8001b4e <HAL_DMA_Abort_IT+0x17a>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a26      	ldr	r2, [pc, #152]	; (8001bd8 <HAL_DMA_Abort_IT+0x204>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d102      	bne.n	8001b48 <HAL_DMA_Abort_IT+0x174>
 8001b42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b46:	e01b      	b.n	8001b80 <HAL_DMA_Abort_IT+0x1ac>
 8001b48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b4c:	e018      	b.n	8001b80 <HAL_DMA_Abort_IT+0x1ac>
 8001b4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b52:	e015      	b.n	8001b80 <HAL_DMA_Abort_IT+0x1ac>
 8001b54:	2310      	movs	r3, #16
 8001b56:	e013      	b.n	8001b80 <HAL_DMA_Abort_IT+0x1ac>
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e011      	b.n	8001b80 <HAL_DMA_Abort_IT+0x1ac>
 8001b5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b60:	e00e      	b.n	8001b80 <HAL_DMA_Abort_IT+0x1ac>
 8001b62:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b66:	e00b      	b.n	8001b80 <HAL_DMA_Abort_IT+0x1ac>
 8001b68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b6c:	e008      	b.n	8001b80 <HAL_DMA_Abort_IT+0x1ac>
 8001b6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b72:	e005      	b.n	8001b80 <HAL_DMA_Abort_IT+0x1ac>
 8001b74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b78:	e002      	b.n	8001b80 <HAL_DMA_Abort_IT+0x1ac>
 8001b7a:	2310      	movs	r3, #16
 8001b7c:	e000      	b.n	8001b80 <HAL_DMA_Abort_IT+0x1ac>
 8001b7e:	2301      	movs	r3, #1
 8001b80:	4a17      	ldr	r2, [pc, #92]	; (8001be0 <HAL_DMA_Abort_IT+0x20c>)
 8001b82:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	4798      	blx	r3
    } 
  }
  return status;
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40020080 	.word	0x40020080
 8001bb4:	40020008 	.word	0x40020008
 8001bb8:	4002001c 	.word	0x4002001c
 8001bbc:	40020030 	.word	0x40020030
 8001bc0:	40020044 	.word	0x40020044
 8001bc4:	40020058 	.word	0x40020058
 8001bc8:	4002006c 	.word	0x4002006c
 8001bcc:	40020408 	.word	0x40020408
 8001bd0:	4002041c 	.word	0x4002041c
 8001bd4:	40020430 	.word	0x40020430
 8001bd8:	40020444 	.word	0x40020444
 8001bdc:	40020400 	.word	0x40020400
 8001be0:	40020000 	.word	0x40020000

08001be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b08b      	sub	sp, #44	; 0x2c
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf6:	e179      	b.n	8001eec <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	69fa      	ldr	r2, [r7, #28]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	f040 8168 	bne.w	8001ee6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	4aa0      	ldr	r2, [pc, #640]	; (8001e9c <HAL_GPIO_Init+0x2b8>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d05e      	beq.n	8001cde <HAL_GPIO_Init+0xfa>
 8001c20:	4a9e      	ldr	r2, [pc, #632]	; (8001e9c <HAL_GPIO_Init+0x2b8>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d875      	bhi.n	8001d12 <HAL_GPIO_Init+0x12e>
 8001c26:	4a9e      	ldr	r2, [pc, #632]	; (8001ea0 <HAL_GPIO_Init+0x2bc>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d058      	beq.n	8001cde <HAL_GPIO_Init+0xfa>
 8001c2c:	4a9c      	ldr	r2, [pc, #624]	; (8001ea0 <HAL_GPIO_Init+0x2bc>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d86f      	bhi.n	8001d12 <HAL_GPIO_Init+0x12e>
 8001c32:	4a9c      	ldr	r2, [pc, #624]	; (8001ea4 <HAL_GPIO_Init+0x2c0>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d052      	beq.n	8001cde <HAL_GPIO_Init+0xfa>
 8001c38:	4a9a      	ldr	r2, [pc, #616]	; (8001ea4 <HAL_GPIO_Init+0x2c0>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d869      	bhi.n	8001d12 <HAL_GPIO_Init+0x12e>
 8001c3e:	4a9a      	ldr	r2, [pc, #616]	; (8001ea8 <HAL_GPIO_Init+0x2c4>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d04c      	beq.n	8001cde <HAL_GPIO_Init+0xfa>
 8001c44:	4a98      	ldr	r2, [pc, #608]	; (8001ea8 <HAL_GPIO_Init+0x2c4>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d863      	bhi.n	8001d12 <HAL_GPIO_Init+0x12e>
 8001c4a:	4a98      	ldr	r2, [pc, #608]	; (8001eac <HAL_GPIO_Init+0x2c8>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d046      	beq.n	8001cde <HAL_GPIO_Init+0xfa>
 8001c50:	4a96      	ldr	r2, [pc, #600]	; (8001eac <HAL_GPIO_Init+0x2c8>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d85d      	bhi.n	8001d12 <HAL_GPIO_Init+0x12e>
 8001c56:	2b12      	cmp	r3, #18
 8001c58:	d82a      	bhi.n	8001cb0 <HAL_GPIO_Init+0xcc>
 8001c5a:	2b12      	cmp	r3, #18
 8001c5c:	d859      	bhi.n	8001d12 <HAL_GPIO_Init+0x12e>
 8001c5e:	a201      	add	r2, pc, #4	; (adr r2, 8001c64 <HAL_GPIO_Init+0x80>)
 8001c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c64:	08001cdf 	.word	0x08001cdf
 8001c68:	08001cb9 	.word	0x08001cb9
 8001c6c:	08001ccb 	.word	0x08001ccb
 8001c70:	08001d0d 	.word	0x08001d0d
 8001c74:	08001d13 	.word	0x08001d13
 8001c78:	08001d13 	.word	0x08001d13
 8001c7c:	08001d13 	.word	0x08001d13
 8001c80:	08001d13 	.word	0x08001d13
 8001c84:	08001d13 	.word	0x08001d13
 8001c88:	08001d13 	.word	0x08001d13
 8001c8c:	08001d13 	.word	0x08001d13
 8001c90:	08001d13 	.word	0x08001d13
 8001c94:	08001d13 	.word	0x08001d13
 8001c98:	08001d13 	.word	0x08001d13
 8001c9c:	08001d13 	.word	0x08001d13
 8001ca0:	08001d13 	.word	0x08001d13
 8001ca4:	08001d13 	.word	0x08001d13
 8001ca8:	08001cc1 	.word	0x08001cc1
 8001cac:	08001cd5 	.word	0x08001cd5
 8001cb0:	4a7f      	ldr	r2, [pc, #508]	; (8001eb0 <HAL_GPIO_Init+0x2cc>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d013      	beq.n	8001cde <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cb6:	e02c      	b.n	8001d12 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	623b      	str	r3, [r7, #32]
          break;
 8001cbe:	e029      	b.n	8001d14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	3304      	adds	r3, #4
 8001cc6:	623b      	str	r3, [r7, #32]
          break;
 8001cc8:	e024      	b.n	8001d14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	3308      	adds	r3, #8
 8001cd0:	623b      	str	r3, [r7, #32]
          break;
 8001cd2:	e01f      	b.n	8001d14 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	330c      	adds	r3, #12
 8001cda:	623b      	str	r3, [r7, #32]
          break;
 8001cdc:	e01a      	b.n	8001d14 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d102      	bne.n	8001cec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ce6:	2304      	movs	r3, #4
 8001ce8:	623b      	str	r3, [r7, #32]
          break;
 8001cea:	e013      	b.n	8001d14 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d105      	bne.n	8001d00 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cf4:	2308      	movs	r3, #8
 8001cf6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69fa      	ldr	r2, [r7, #28]
 8001cfc:	611a      	str	r2, [r3, #16]
          break;
 8001cfe:	e009      	b.n	8001d14 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d00:	2308      	movs	r3, #8
 8001d02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	69fa      	ldr	r2, [r7, #28]
 8001d08:	615a      	str	r2, [r3, #20]
          break;
 8001d0a:	e003      	b.n	8001d14 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	623b      	str	r3, [r7, #32]
          break;
 8001d10:	e000      	b.n	8001d14 <HAL_GPIO_Init+0x130>
          break;
 8001d12:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	2bff      	cmp	r3, #255	; 0xff
 8001d18:	d801      	bhi.n	8001d1e <HAL_GPIO_Init+0x13a>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	e001      	b.n	8001d22 <HAL_GPIO_Init+0x13e>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3304      	adds	r3, #4
 8001d22:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	2bff      	cmp	r3, #255	; 0xff
 8001d28:	d802      	bhi.n	8001d30 <HAL_GPIO_Init+0x14c>
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	e002      	b.n	8001d36 <HAL_GPIO_Init+0x152>
 8001d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d32:	3b08      	subs	r3, #8
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	210f      	movs	r1, #15
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	fa01 f303 	lsl.w	r3, r1, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	401a      	ands	r2, r3
 8001d48:	6a39      	ldr	r1, [r7, #32]
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d50:	431a      	orrs	r2, r3
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 80c1 	beq.w	8001ee6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d64:	4b53      	ldr	r3, [pc, #332]	; (8001eb4 <HAL_GPIO_Init+0x2d0>)
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	4a52      	ldr	r2, [pc, #328]	; (8001eb4 <HAL_GPIO_Init+0x2d0>)
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	6193      	str	r3, [r2, #24]
 8001d70:	4b50      	ldr	r3, [pc, #320]	; (8001eb4 <HAL_GPIO_Init+0x2d0>)
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d7c:	4a4e      	ldr	r2, [pc, #312]	; (8001eb8 <HAL_GPIO_Init+0x2d4>)
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	089b      	lsrs	r3, r3, #2
 8001d82:	3302      	adds	r3, #2
 8001d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d88:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	f003 0303 	and.w	r3, r3, #3
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	220f      	movs	r2, #15
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a46      	ldr	r2, [pc, #280]	; (8001ebc <HAL_GPIO_Init+0x2d8>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d01f      	beq.n	8001de8 <HAL_GPIO_Init+0x204>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a45      	ldr	r2, [pc, #276]	; (8001ec0 <HAL_GPIO_Init+0x2dc>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d019      	beq.n	8001de4 <HAL_GPIO_Init+0x200>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a44      	ldr	r2, [pc, #272]	; (8001ec4 <HAL_GPIO_Init+0x2e0>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d013      	beq.n	8001de0 <HAL_GPIO_Init+0x1fc>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a43      	ldr	r2, [pc, #268]	; (8001ec8 <HAL_GPIO_Init+0x2e4>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d00d      	beq.n	8001ddc <HAL_GPIO_Init+0x1f8>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a42      	ldr	r2, [pc, #264]	; (8001ecc <HAL_GPIO_Init+0x2e8>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d007      	beq.n	8001dd8 <HAL_GPIO_Init+0x1f4>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a41      	ldr	r2, [pc, #260]	; (8001ed0 <HAL_GPIO_Init+0x2ec>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d101      	bne.n	8001dd4 <HAL_GPIO_Init+0x1f0>
 8001dd0:	2305      	movs	r3, #5
 8001dd2:	e00a      	b.n	8001dea <HAL_GPIO_Init+0x206>
 8001dd4:	2306      	movs	r3, #6
 8001dd6:	e008      	b.n	8001dea <HAL_GPIO_Init+0x206>
 8001dd8:	2304      	movs	r3, #4
 8001dda:	e006      	b.n	8001dea <HAL_GPIO_Init+0x206>
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e004      	b.n	8001dea <HAL_GPIO_Init+0x206>
 8001de0:	2302      	movs	r3, #2
 8001de2:	e002      	b.n	8001dea <HAL_GPIO_Init+0x206>
 8001de4:	2301      	movs	r3, #1
 8001de6:	e000      	b.n	8001dea <HAL_GPIO_Init+0x206>
 8001de8:	2300      	movs	r3, #0
 8001dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dec:	f002 0203 	and.w	r2, r2, #3
 8001df0:	0092      	lsls	r2, r2, #2
 8001df2:	4093      	lsls	r3, r2
 8001df4:	68fa      	ldr	r2, [r7, #12]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dfa:	492f      	ldr	r1, [pc, #188]	; (8001eb8 <HAL_GPIO_Init+0x2d4>)
 8001dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfe:	089b      	lsrs	r3, r3, #2
 8001e00:	3302      	adds	r3, #2
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d006      	beq.n	8001e22 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e14:	4b2f      	ldr	r3, [pc, #188]	; (8001ed4 <HAL_GPIO_Init+0x2f0>)
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	492e      	ldr	r1, [pc, #184]	; (8001ed4 <HAL_GPIO_Init+0x2f0>)
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	600b      	str	r3, [r1, #0]
 8001e20:	e006      	b.n	8001e30 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e22:	4b2c      	ldr	r3, [pc, #176]	; (8001ed4 <HAL_GPIO_Init+0x2f0>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	492a      	ldr	r1, [pc, #168]	; (8001ed4 <HAL_GPIO_Init+0x2f0>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d006      	beq.n	8001e4a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e3c:	4b25      	ldr	r3, [pc, #148]	; (8001ed4 <HAL_GPIO_Init+0x2f0>)
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	4924      	ldr	r1, [pc, #144]	; (8001ed4 <HAL_GPIO_Init+0x2f0>)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	604b      	str	r3, [r1, #4]
 8001e48:	e006      	b.n	8001e58 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e4a:	4b22      	ldr	r3, [pc, #136]	; (8001ed4 <HAL_GPIO_Init+0x2f0>)
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	4920      	ldr	r1, [pc, #128]	; (8001ed4 <HAL_GPIO_Init+0x2f0>)
 8001e54:	4013      	ands	r3, r2
 8001e56:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d006      	beq.n	8001e72 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e64:	4b1b      	ldr	r3, [pc, #108]	; (8001ed4 <HAL_GPIO_Init+0x2f0>)
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	491a      	ldr	r1, [pc, #104]	; (8001ed4 <HAL_GPIO_Init+0x2f0>)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	608b      	str	r3, [r1, #8]
 8001e70:	e006      	b.n	8001e80 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e72:	4b18      	ldr	r3, [pc, #96]	; (8001ed4 <HAL_GPIO_Init+0x2f0>)
 8001e74:	689a      	ldr	r2, [r3, #8]
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	4916      	ldr	r1, [pc, #88]	; (8001ed4 <HAL_GPIO_Init+0x2f0>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d025      	beq.n	8001ed8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e8c:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <HAL_GPIO_Init+0x2f0>)
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	4910      	ldr	r1, [pc, #64]	; (8001ed4 <HAL_GPIO_Init+0x2f0>)
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	60cb      	str	r3, [r1, #12]
 8001e98:	e025      	b.n	8001ee6 <HAL_GPIO_Init+0x302>
 8001e9a:	bf00      	nop
 8001e9c:	10320000 	.word	0x10320000
 8001ea0:	10310000 	.word	0x10310000
 8001ea4:	10220000 	.word	0x10220000
 8001ea8:	10210000 	.word	0x10210000
 8001eac:	10120000 	.word	0x10120000
 8001eb0:	10110000 	.word	0x10110000
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40010000 	.word	0x40010000
 8001ebc:	40010800 	.word	0x40010800
 8001ec0:	40010c00 	.word	0x40010c00
 8001ec4:	40011000 	.word	0x40011000
 8001ec8:	40011400 	.word	0x40011400
 8001ecc:	40011800 	.word	0x40011800
 8001ed0:	40011c00 	.word	0x40011c00
 8001ed4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ed8:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <HAL_GPIO_Init+0x324>)
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	4909      	ldr	r1, [pc, #36]	; (8001f08 <HAL_GPIO_Init+0x324>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	3301      	adds	r3, #1
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f47f ae7e 	bne.w	8001bf8 <HAL_GPIO_Init+0x14>
  }
}
 8001efc:	bf00      	nop
 8001efe:	bf00      	nop
 8001f00:	372c      	adds	r7, #44	; 0x2c
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr
 8001f08:	40010400 	.word	0x40010400

08001f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	460b      	mov	r3, r1
 8001f16:	807b      	strh	r3, [r7, #2]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f1c:	787b      	ldrb	r3, [r7, #1]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f22:	887a      	ldrh	r2, [r7, #2]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f28:	e003      	b.n	8001f32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f2a:	887b      	ldrh	r3, [r7, #2]
 8001f2c:	041a      	lsls	r2, r3, #16
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	611a      	str	r2, [r3, #16]
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr

08001f3c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f4e:	887a      	ldrh	r2, [r7, #2]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4013      	ands	r3, r2
 8001f54:	041a      	lsls	r2, r3, #16
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	43d9      	mvns	r1, r3
 8001f5a:	887b      	ldrh	r3, [r7, #2]
 8001f5c:	400b      	ands	r3, r1
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	611a      	str	r2, [r3, #16]
}
 8001f64:	bf00      	nop
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr
	...

08001f70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e26c      	b.n	800245c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 8087 	beq.w	800209e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f90:	4b92      	ldr	r3, [pc, #584]	; (80021dc <HAL_RCC_OscConfig+0x26c>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 030c 	and.w	r3, r3, #12
 8001f98:	2b04      	cmp	r3, #4
 8001f9a:	d00c      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f9c:	4b8f      	ldr	r3, [pc, #572]	; (80021dc <HAL_RCC_OscConfig+0x26c>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 030c 	and.w	r3, r3, #12
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d112      	bne.n	8001fce <HAL_RCC_OscConfig+0x5e>
 8001fa8:	4b8c      	ldr	r3, [pc, #560]	; (80021dc <HAL_RCC_OscConfig+0x26c>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fb4:	d10b      	bne.n	8001fce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb6:	4b89      	ldr	r3, [pc, #548]	; (80021dc <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d06c      	beq.n	800209c <HAL_RCC_OscConfig+0x12c>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d168      	bne.n	800209c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e246      	b.n	800245c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd6:	d106      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x76>
 8001fd8:	4b80      	ldr	r3, [pc, #512]	; (80021dc <HAL_RCC_OscConfig+0x26c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a7f      	ldr	r2, [pc, #508]	; (80021dc <HAL_RCC_OscConfig+0x26c>)
 8001fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe2:	6013      	str	r3, [r2, #0]
 8001fe4:	e02e      	b.n	8002044 <HAL_RCC_OscConfig+0xd4>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10c      	bne.n	8002008 <HAL_RCC_OscConfig+0x98>
 8001fee:	4b7b      	ldr	r3, [pc, #492]	; (80021dc <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a7a      	ldr	r2, [pc, #488]	; (80021dc <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	4b78      	ldr	r3, [pc, #480]	; (80021dc <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a77      	ldr	r2, [pc, #476]	; (80021dc <HAL_RCC_OscConfig+0x26c>)
 8002000:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	e01d      	b.n	8002044 <HAL_RCC_OscConfig+0xd4>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002010:	d10c      	bne.n	800202c <HAL_RCC_OscConfig+0xbc>
 8002012:	4b72      	ldr	r3, [pc, #456]	; (80021dc <HAL_RCC_OscConfig+0x26c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a71      	ldr	r2, [pc, #452]	; (80021dc <HAL_RCC_OscConfig+0x26c>)
 8002018:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	4b6f      	ldr	r3, [pc, #444]	; (80021dc <HAL_RCC_OscConfig+0x26c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a6e      	ldr	r2, [pc, #440]	; (80021dc <HAL_RCC_OscConfig+0x26c>)
 8002024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	e00b      	b.n	8002044 <HAL_RCC_OscConfig+0xd4>
 800202c:	4b6b      	ldr	r3, [pc, #428]	; (80021dc <HAL_RCC_OscConfig+0x26c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a6a      	ldr	r2, [pc, #424]	; (80021dc <HAL_RCC_OscConfig+0x26c>)
 8002032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	4b68      	ldr	r3, [pc, #416]	; (80021dc <HAL_RCC_OscConfig+0x26c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a67      	ldr	r2, [pc, #412]	; (80021dc <HAL_RCC_OscConfig+0x26c>)
 800203e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002042:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d013      	beq.n	8002074 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204c:	f7ff f94c 	bl	80012e8 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002054:	f7ff f948 	bl	80012e8 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b64      	cmp	r3, #100	; 0x64
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e1fa      	b.n	800245c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002066:	4b5d      	ldr	r3, [pc, #372]	; (80021dc <HAL_RCC_OscConfig+0x26c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0f0      	beq.n	8002054 <HAL_RCC_OscConfig+0xe4>
 8002072:	e014      	b.n	800209e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002074:	f7ff f938 	bl	80012e8 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800207c:	f7ff f934 	bl	80012e8 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b64      	cmp	r3, #100	; 0x64
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e1e6      	b.n	800245c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800208e:	4b53      	ldr	r3, [pc, #332]	; (80021dc <HAL_RCC_OscConfig+0x26c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f0      	bne.n	800207c <HAL_RCC_OscConfig+0x10c>
 800209a:	e000      	b.n	800209e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800209c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d063      	beq.n	8002172 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020aa:	4b4c      	ldr	r3, [pc, #304]	; (80021dc <HAL_RCC_OscConfig+0x26c>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f003 030c 	and.w	r3, r3, #12
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00b      	beq.n	80020ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020b6:	4b49      	ldr	r3, [pc, #292]	; (80021dc <HAL_RCC_OscConfig+0x26c>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f003 030c 	and.w	r3, r3, #12
 80020be:	2b08      	cmp	r3, #8
 80020c0:	d11c      	bne.n	80020fc <HAL_RCC_OscConfig+0x18c>
 80020c2:	4b46      	ldr	r3, [pc, #280]	; (80021dc <HAL_RCC_OscConfig+0x26c>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d116      	bne.n	80020fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ce:	4b43      	ldr	r3, [pc, #268]	; (80021dc <HAL_RCC_OscConfig+0x26c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d005      	beq.n	80020e6 <HAL_RCC_OscConfig+0x176>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d001      	beq.n	80020e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e1ba      	b.n	800245c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e6:	4b3d      	ldr	r3, [pc, #244]	; (80021dc <HAL_RCC_OscConfig+0x26c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4939      	ldr	r1, [pc, #228]	; (80021dc <HAL_RCC_OscConfig+0x26c>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020fa:	e03a      	b.n	8002172 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d020      	beq.n	8002146 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002104:	4b36      	ldr	r3, [pc, #216]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 8002106:	2201      	movs	r2, #1
 8002108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210a:	f7ff f8ed 	bl	80012e8 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002112:	f7ff f8e9 	bl	80012e8 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e19b      	b.n	800245c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002124:	4b2d      	ldr	r3, [pc, #180]	; (80021dc <HAL_RCC_OscConfig+0x26c>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0f0      	beq.n	8002112 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002130:	4b2a      	ldr	r3, [pc, #168]	; (80021dc <HAL_RCC_OscConfig+0x26c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	4927      	ldr	r1, [pc, #156]	; (80021dc <HAL_RCC_OscConfig+0x26c>)
 8002140:	4313      	orrs	r3, r2
 8002142:	600b      	str	r3, [r1, #0]
 8002144:	e015      	b.n	8002172 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002146:	4b26      	ldr	r3, [pc, #152]	; (80021e0 <HAL_RCC_OscConfig+0x270>)
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214c:	f7ff f8cc 	bl	80012e8 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002154:	f7ff f8c8 	bl	80012e8 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e17a      	b.n	800245c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002166:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <HAL_RCC_OscConfig+0x26c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f0      	bne.n	8002154 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b00      	cmp	r3, #0
 800217c:	d03a      	beq.n	80021f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d019      	beq.n	80021ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002186:	4b17      	ldr	r3, [pc, #92]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 8002188:	2201      	movs	r2, #1
 800218a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800218c:	f7ff f8ac 	bl	80012e8 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002194:	f7ff f8a8 	bl	80012e8 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e15a      	b.n	800245c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a6:	4b0d      	ldr	r3, [pc, #52]	; (80021dc <HAL_RCC_OscConfig+0x26c>)
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021b2:	2001      	movs	r0, #1
 80021b4:	f000 fad8 	bl	8002768 <RCC_Delay>
 80021b8:	e01c      	b.n	80021f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ba:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <HAL_RCC_OscConfig+0x274>)
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c0:	f7ff f892 	bl	80012e8 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c6:	e00f      	b.n	80021e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c8:	f7ff f88e 	bl	80012e8 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d908      	bls.n	80021e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e140      	b.n	800245c <HAL_RCC_OscConfig+0x4ec>
 80021da:	bf00      	nop
 80021dc:	40021000 	.word	0x40021000
 80021e0:	42420000 	.word	0x42420000
 80021e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e8:	4b9e      	ldr	r3, [pc, #632]	; (8002464 <HAL_RCC_OscConfig+0x4f4>)
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	f003 0302 	and.w	r3, r3, #2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d1e9      	bne.n	80021c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 80a6 	beq.w	800234e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002202:	2300      	movs	r3, #0
 8002204:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002206:	4b97      	ldr	r3, [pc, #604]	; (8002464 <HAL_RCC_OscConfig+0x4f4>)
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10d      	bne.n	800222e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002212:	4b94      	ldr	r3, [pc, #592]	; (8002464 <HAL_RCC_OscConfig+0x4f4>)
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	4a93      	ldr	r2, [pc, #588]	; (8002464 <HAL_RCC_OscConfig+0x4f4>)
 8002218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800221c:	61d3      	str	r3, [r2, #28]
 800221e:	4b91      	ldr	r3, [pc, #580]	; (8002464 <HAL_RCC_OscConfig+0x4f4>)
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002226:	60bb      	str	r3, [r7, #8]
 8002228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800222a:	2301      	movs	r3, #1
 800222c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222e:	4b8e      	ldr	r3, [pc, #568]	; (8002468 <HAL_RCC_OscConfig+0x4f8>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002236:	2b00      	cmp	r3, #0
 8002238:	d118      	bne.n	800226c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800223a:	4b8b      	ldr	r3, [pc, #556]	; (8002468 <HAL_RCC_OscConfig+0x4f8>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a8a      	ldr	r2, [pc, #552]	; (8002468 <HAL_RCC_OscConfig+0x4f8>)
 8002240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002244:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002246:	f7ff f84f 	bl	80012e8 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800224e:	f7ff f84b 	bl	80012e8 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b64      	cmp	r3, #100	; 0x64
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e0fd      	b.n	800245c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002260:	4b81      	ldr	r3, [pc, #516]	; (8002468 <HAL_RCC_OscConfig+0x4f8>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0f0      	beq.n	800224e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d106      	bne.n	8002282 <HAL_RCC_OscConfig+0x312>
 8002274:	4b7b      	ldr	r3, [pc, #492]	; (8002464 <HAL_RCC_OscConfig+0x4f4>)
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	4a7a      	ldr	r2, [pc, #488]	; (8002464 <HAL_RCC_OscConfig+0x4f4>)
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	6213      	str	r3, [r2, #32]
 8002280:	e02d      	b.n	80022de <HAL_RCC_OscConfig+0x36e>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10c      	bne.n	80022a4 <HAL_RCC_OscConfig+0x334>
 800228a:	4b76      	ldr	r3, [pc, #472]	; (8002464 <HAL_RCC_OscConfig+0x4f4>)
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	4a75      	ldr	r2, [pc, #468]	; (8002464 <HAL_RCC_OscConfig+0x4f4>)
 8002290:	f023 0301 	bic.w	r3, r3, #1
 8002294:	6213      	str	r3, [r2, #32]
 8002296:	4b73      	ldr	r3, [pc, #460]	; (8002464 <HAL_RCC_OscConfig+0x4f4>)
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	4a72      	ldr	r2, [pc, #456]	; (8002464 <HAL_RCC_OscConfig+0x4f4>)
 800229c:	f023 0304 	bic.w	r3, r3, #4
 80022a0:	6213      	str	r3, [r2, #32]
 80022a2:	e01c      	b.n	80022de <HAL_RCC_OscConfig+0x36e>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	2b05      	cmp	r3, #5
 80022aa:	d10c      	bne.n	80022c6 <HAL_RCC_OscConfig+0x356>
 80022ac:	4b6d      	ldr	r3, [pc, #436]	; (8002464 <HAL_RCC_OscConfig+0x4f4>)
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	4a6c      	ldr	r2, [pc, #432]	; (8002464 <HAL_RCC_OscConfig+0x4f4>)
 80022b2:	f043 0304 	orr.w	r3, r3, #4
 80022b6:	6213      	str	r3, [r2, #32]
 80022b8:	4b6a      	ldr	r3, [pc, #424]	; (8002464 <HAL_RCC_OscConfig+0x4f4>)
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	4a69      	ldr	r2, [pc, #420]	; (8002464 <HAL_RCC_OscConfig+0x4f4>)
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	6213      	str	r3, [r2, #32]
 80022c4:	e00b      	b.n	80022de <HAL_RCC_OscConfig+0x36e>
 80022c6:	4b67      	ldr	r3, [pc, #412]	; (8002464 <HAL_RCC_OscConfig+0x4f4>)
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	4a66      	ldr	r2, [pc, #408]	; (8002464 <HAL_RCC_OscConfig+0x4f4>)
 80022cc:	f023 0301 	bic.w	r3, r3, #1
 80022d0:	6213      	str	r3, [r2, #32]
 80022d2:	4b64      	ldr	r3, [pc, #400]	; (8002464 <HAL_RCC_OscConfig+0x4f4>)
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	4a63      	ldr	r2, [pc, #396]	; (8002464 <HAL_RCC_OscConfig+0x4f4>)
 80022d8:	f023 0304 	bic.w	r3, r3, #4
 80022dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d015      	beq.n	8002312 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e6:	f7fe ffff 	bl	80012e8 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ec:	e00a      	b.n	8002304 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ee:	f7fe fffb 	bl	80012e8 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e0ab      	b.n	800245c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002304:	4b57      	ldr	r3, [pc, #348]	; (8002464 <HAL_RCC_OscConfig+0x4f4>)
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0ee      	beq.n	80022ee <HAL_RCC_OscConfig+0x37e>
 8002310:	e014      	b.n	800233c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002312:	f7fe ffe9 	bl	80012e8 <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002318:	e00a      	b.n	8002330 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800231a:	f7fe ffe5 	bl	80012e8 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	f241 3288 	movw	r2, #5000	; 0x1388
 8002328:	4293      	cmp	r3, r2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e095      	b.n	800245c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002330:	4b4c      	ldr	r3, [pc, #304]	; (8002464 <HAL_RCC_OscConfig+0x4f4>)
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1ee      	bne.n	800231a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800233c:	7dfb      	ldrb	r3, [r7, #23]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d105      	bne.n	800234e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002342:	4b48      	ldr	r3, [pc, #288]	; (8002464 <HAL_RCC_OscConfig+0x4f4>)
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	4a47      	ldr	r2, [pc, #284]	; (8002464 <HAL_RCC_OscConfig+0x4f4>)
 8002348:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800234c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 8081 	beq.w	800245a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002358:	4b42      	ldr	r3, [pc, #264]	; (8002464 <HAL_RCC_OscConfig+0x4f4>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 030c 	and.w	r3, r3, #12
 8002360:	2b08      	cmp	r3, #8
 8002362:	d061      	beq.n	8002428 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	69db      	ldr	r3, [r3, #28]
 8002368:	2b02      	cmp	r3, #2
 800236a:	d146      	bne.n	80023fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800236c:	4b3f      	ldr	r3, [pc, #252]	; (800246c <HAL_RCC_OscConfig+0x4fc>)
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002372:	f7fe ffb9 	bl	80012e8 <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800237a:	f7fe ffb5 	bl	80012e8 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e067      	b.n	800245c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800238c:	4b35      	ldr	r3, [pc, #212]	; (8002464 <HAL_RCC_OscConfig+0x4f4>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1f0      	bne.n	800237a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a0:	d108      	bne.n	80023b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023a2:	4b30      	ldr	r3, [pc, #192]	; (8002464 <HAL_RCC_OscConfig+0x4f4>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	492d      	ldr	r1, [pc, #180]	; (8002464 <HAL_RCC_OscConfig+0x4f4>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023b4:	4b2b      	ldr	r3, [pc, #172]	; (8002464 <HAL_RCC_OscConfig+0x4f4>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a19      	ldr	r1, [r3, #32]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	430b      	orrs	r3, r1
 80023c6:	4927      	ldr	r1, [pc, #156]	; (8002464 <HAL_RCC_OscConfig+0x4f4>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023cc:	4b27      	ldr	r3, [pc, #156]	; (800246c <HAL_RCC_OscConfig+0x4fc>)
 80023ce:	2201      	movs	r2, #1
 80023d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d2:	f7fe ff89 	bl	80012e8 <HAL_GetTick>
 80023d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023d8:	e008      	b.n	80023ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023da:	f7fe ff85 	bl	80012e8 <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b02      	cmp	r3, #2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e037      	b.n	800245c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023ec:	4b1d      	ldr	r3, [pc, #116]	; (8002464 <HAL_RCC_OscConfig+0x4f4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d0f0      	beq.n	80023da <HAL_RCC_OscConfig+0x46a>
 80023f8:	e02f      	b.n	800245a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023fa:	4b1c      	ldr	r3, [pc, #112]	; (800246c <HAL_RCC_OscConfig+0x4fc>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002400:	f7fe ff72 	bl	80012e8 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002408:	f7fe ff6e 	bl	80012e8 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e020      	b.n	800245c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800241a:	4b12      	ldr	r3, [pc, #72]	; (8002464 <HAL_RCC_OscConfig+0x4f4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f0      	bne.n	8002408 <HAL_RCC_OscConfig+0x498>
 8002426:	e018      	b.n	800245a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	69db      	ldr	r3, [r3, #28]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d101      	bne.n	8002434 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e013      	b.n	800245c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002434:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <HAL_RCC_OscConfig+0x4f4>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	429a      	cmp	r2, r3
 8002446:	d106      	bne.n	8002456 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002452:	429a      	cmp	r2, r3
 8002454:	d001      	beq.n	800245a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40021000 	.word	0x40021000
 8002468:	40007000 	.word	0x40007000
 800246c:	42420060 	.word	0x42420060

08002470 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e0d0      	b.n	8002626 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002484:	4b6a      	ldr	r3, [pc, #424]	; (8002630 <HAL_RCC_ClockConfig+0x1c0>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d910      	bls.n	80024b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002492:	4b67      	ldr	r3, [pc, #412]	; (8002630 <HAL_RCC_ClockConfig+0x1c0>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f023 0207 	bic.w	r2, r3, #7
 800249a:	4965      	ldr	r1, [pc, #404]	; (8002630 <HAL_RCC_ClockConfig+0x1c0>)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	4313      	orrs	r3, r2
 80024a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a2:	4b63      	ldr	r3, [pc, #396]	; (8002630 <HAL_RCC_ClockConfig+0x1c0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d001      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e0b8      	b.n	8002626 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d020      	beq.n	8002502 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d005      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024cc:	4b59      	ldr	r3, [pc, #356]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	4a58      	ldr	r2, [pc, #352]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80024d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024e4:	4b53      	ldr	r3, [pc, #332]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	4a52      	ldr	r2, [pc, #328]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80024ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f0:	4b50      	ldr	r3, [pc, #320]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	494d      	ldr	r1, [pc, #308]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d040      	beq.n	8002590 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d107      	bne.n	8002526 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002516:	4b47      	ldr	r3, [pc, #284]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d115      	bne.n	800254e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e07f      	b.n	8002626 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b02      	cmp	r3, #2
 800252c:	d107      	bne.n	800253e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252e:	4b41      	ldr	r3, [pc, #260]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d109      	bne.n	800254e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e073      	b.n	8002626 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253e:	4b3d      	ldr	r3, [pc, #244]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e06b      	b.n	8002626 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800254e:	4b39      	ldr	r3, [pc, #228]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f023 0203 	bic.w	r2, r3, #3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	4936      	ldr	r1, [pc, #216]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 800255c:	4313      	orrs	r3, r2
 800255e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002560:	f7fe fec2 	bl	80012e8 <HAL_GetTick>
 8002564:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002566:	e00a      	b.n	800257e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002568:	f7fe febe 	bl	80012e8 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	f241 3288 	movw	r2, #5000	; 0x1388
 8002576:	4293      	cmp	r3, r2
 8002578:	d901      	bls.n	800257e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e053      	b.n	8002626 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257e:	4b2d      	ldr	r3, [pc, #180]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f003 020c 	and.w	r2, r3, #12
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	429a      	cmp	r2, r3
 800258e:	d1eb      	bne.n	8002568 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002590:	4b27      	ldr	r3, [pc, #156]	; (8002630 <HAL_RCC_ClockConfig+0x1c0>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d210      	bcs.n	80025c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259e:	4b24      	ldr	r3, [pc, #144]	; (8002630 <HAL_RCC_ClockConfig+0x1c0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f023 0207 	bic.w	r2, r3, #7
 80025a6:	4922      	ldr	r1, [pc, #136]	; (8002630 <HAL_RCC_ClockConfig+0x1c0>)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ae:	4b20      	ldr	r3, [pc, #128]	; (8002630 <HAL_RCC_ClockConfig+0x1c0>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d001      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e032      	b.n	8002626 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d008      	beq.n	80025de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025cc:	4b19      	ldr	r3, [pc, #100]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	4916      	ldr	r1, [pc, #88]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d009      	beq.n	80025fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025ea:	4b12      	ldr	r3, [pc, #72]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	490e      	ldr	r1, [pc, #56]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025fe:	f000 f821 	bl	8002644 <HAL_RCC_GetSysClockFreq>
 8002602:	4602      	mov	r2, r0
 8002604:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <HAL_RCC_ClockConfig+0x1c4>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	091b      	lsrs	r3, r3, #4
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	490a      	ldr	r1, [pc, #40]	; (8002638 <HAL_RCC_ClockConfig+0x1c8>)
 8002610:	5ccb      	ldrb	r3, [r1, r3]
 8002612:	fa22 f303 	lsr.w	r3, r2, r3
 8002616:	4a09      	ldr	r2, [pc, #36]	; (800263c <HAL_RCC_ClockConfig+0x1cc>)
 8002618:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800261a:	4b09      	ldr	r3, [pc, #36]	; (8002640 <HAL_RCC_ClockConfig+0x1d0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f7fe fe20 	bl	8001264 <HAL_InitTick>

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40022000 	.word	0x40022000
 8002634:	40021000 	.word	0x40021000
 8002638:	08008340 	.word	0x08008340
 800263c:	20000004 	.word	0x20000004
 8002640:	20000008 	.word	0x20000008

08002644 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002644:	b490      	push	{r4, r7}
 8002646:	b08a      	sub	sp, #40	; 0x28
 8002648:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800264a:	4b2a      	ldr	r3, [pc, #168]	; (80026f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800264c:	1d3c      	adds	r4, r7, #4
 800264e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002650:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002654:	f240 2301 	movw	r3, #513	; 0x201
 8002658:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800265a:	2300      	movs	r3, #0
 800265c:	61fb      	str	r3, [r7, #28]
 800265e:	2300      	movs	r3, #0
 8002660:	61bb      	str	r3, [r7, #24]
 8002662:	2300      	movs	r3, #0
 8002664:	627b      	str	r3, [r7, #36]	; 0x24
 8002666:	2300      	movs	r3, #0
 8002668:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800266a:	2300      	movs	r3, #0
 800266c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800266e:	4b22      	ldr	r3, [pc, #136]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f003 030c 	and.w	r3, r3, #12
 800267a:	2b04      	cmp	r3, #4
 800267c:	d002      	beq.n	8002684 <HAL_RCC_GetSysClockFreq+0x40>
 800267e:	2b08      	cmp	r3, #8
 8002680:	d003      	beq.n	800268a <HAL_RCC_GetSysClockFreq+0x46>
 8002682:	e02d      	b.n	80026e0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002684:	4b1d      	ldr	r3, [pc, #116]	; (80026fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002686:	623b      	str	r3, [r7, #32]
      break;
 8002688:	e02d      	b.n	80026e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	0c9b      	lsrs	r3, r3, #18
 800268e:	f003 030f 	and.w	r3, r3, #15
 8002692:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002696:	4413      	add	r3, r2
 8002698:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800269c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d013      	beq.n	80026d0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026a8:	4b13      	ldr	r3, [pc, #76]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	0c5b      	lsrs	r3, r3, #17
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80026b6:	4413      	add	r3, r2
 80026b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80026bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	4a0e      	ldr	r2, [pc, #56]	; (80026fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80026c2:	fb02 f203 	mul.w	r2, r2, r3
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
 80026ce:	e004      	b.n	80026da <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	4a0b      	ldr	r2, [pc, #44]	; (8002700 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026d4:	fb02 f303 	mul.w	r3, r2, r3
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	623b      	str	r3, [r7, #32]
      break;
 80026de:	e002      	b.n	80026e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80026e2:	623b      	str	r3, [r7, #32]
      break;
 80026e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026e6:	6a3b      	ldr	r3, [r7, #32]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3728      	adds	r7, #40	; 0x28
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bc90      	pop	{r4, r7}
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	0800817c 	.word	0x0800817c
 80026f8:	40021000 	.word	0x40021000
 80026fc:	007a1200 	.word	0x007a1200
 8002700:	003d0900 	.word	0x003d0900

08002704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002708:	4b02      	ldr	r3, [pc, #8]	; (8002714 <HAL_RCC_GetHCLKFreq+0x10>)
 800270a:	681b      	ldr	r3, [r3, #0]
}
 800270c:	4618      	mov	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr
 8002714:	20000004 	.word	0x20000004

08002718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800271c:	f7ff fff2 	bl	8002704 <HAL_RCC_GetHCLKFreq>
 8002720:	4602      	mov	r2, r0
 8002722:	4b05      	ldr	r3, [pc, #20]	; (8002738 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	0a1b      	lsrs	r3, r3, #8
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	4903      	ldr	r1, [pc, #12]	; (800273c <HAL_RCC_GetPCLK1Freq+0x24>)
 800272e:	5ccb      	ldrb	r3, [r1, r3]
 8002730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002734:	4618      	mov	r0, r3
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40021000 	.word	0x40021000
 800273c:	08008350 	.word	0x08008350

08002740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002744:	f7ff ffde 	bl	8002704 <HAL_RCC_GetHCLKFreq>
 8002748:	4602      	mov	r2, r0
 800274a:	4b05      	ldr	r3, [pc, #20]	; (8002760 <HAL_RCC_GetPCLK2Freq+0x20>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	0adb      	lsrs	r3, r3, #11
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	4903      	ldr	r1, [pc, #12]	; (8002764 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002756:	5ccb      	ldrb	r3, [r1, r3]
 8002758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800275c:	4618      	mov	r0, r3
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40021000 	.word	0x40021000
 8002764:	08008350 	.word	0x08008350

08002768 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002770:	4b0a      	ldr	r3, [pc, #40]	; (800279c <RCC_Delay+0x34>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a0a      	ldr	r2, [pc, #40]	; (80027a0 <RCC_Delay+0x38>)
 8002776:	fba2 2303 	umull	r2, r3, r2, r3
 800277a:	0a5b      	lsrs	r3, r3, #9
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	fb02 f303 	mul.w	r3, r2, r3
 8002782:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002784:	bf00      	nop
  }
  while (Delay --);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	1e5a      	subs	r2, r3, #1
 800278a:	60fa      	str	r2, [r7, #12]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1f9      	bne.n	8002784 <RCC_Delay+0x1c>
}
 8002790:	bf00      	nop
 8002792:	bf00      	nop
 8002794:	3714      	adds	r7, #20
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr
 800279c:	20000004 	.word	0x20000004
 80027a0:	10624dd3 	.word	0x10624dd3

080027a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	2300      	movs	r3, #0
 80027b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d07d      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80027c0:	2300      	movs	r3, #0
 80027c2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027c4:	4b4f      	ldr	r3, [pc, #316]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10d      	bne.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027d0:	4b4c      	ldr	r3, [pc, #304]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027d2:	69db      	ldr	r3, [r3, #28]
 80027d4:	4a4b      	ldr	r2, [pc, #300]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027da:	61d3      	str	r3, [r2, #28]
 80027dc:	4b49      	ldr	r3, [pc, #292]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027de:	69db      	ldr	r3, [r3, #28]
 80027e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027e8:	2301      	movs	r3, #1
 80027ea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ec:	4b46      	ldr	r3, [pc, #280]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d118      	bne.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027f8:	4b43      	ldr	r3, [pc, #268]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a42      	ldr	r2, [pc, #264]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002802:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002804:	f7fe fd70 	bl	80012e8 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280a:	e008      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280c:	f7fe fd6c 	bl	80012e8 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b64      	cmp	r3, #100	; 0x64
 8002818:	d901      	bls.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e06d      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281e:	4b3a      	ldr	r3, [pc, #232]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800282a:	4b36      	ldr	r3, [pc, #216]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002832:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d02e      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	429a      	cmp	r2, r3
 8002846:	d027      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002848:	4b2e      	ldr	r3, [pc, #184]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002850:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002852:	4b2e      	ldr	r3, [pc, #184]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002854:	2201      	movs	r2, #1
 8002856:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002858:	4b2c      	ldr	r3, [pc, #176]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800285e:	4a29      	ldr	r2, [pc, #164]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d014      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286e:	f7fe fd3b 	bl	80012e8 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002874:	e00a      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002876:	f7fe fd37 	bl	80012e8 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	f241 3288 	movw	r2, #5000	; 0x1388
 8002884:	4293      	cmp	r3, r2
 8002886:	d901      	bls.n	800288c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e036      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800288c:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0ee      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002898:	4b1a      	ldr	r3, [pc, #104]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	4917      	ldr	r1, [pc, #92]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028aa:	7dfb      	ldrb	r3, [r7, #23]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d105      	bne.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b0:	4b14      	ldr	r3, [pc, #80]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	4a13      	ldr	r2, [pc, #76]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d008      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028c8:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	490b      	ldr	r1, [pc, #44]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0310 	and.w	r3, r3, #16
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d008      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028e6:	4b07      	ldr	r3, [pc, #28]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	4904      	ldr	r1, [pc, #16]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40021000 	.word	0x40021000
 8002908:	40007000 	.word	0x40007000
 800290c:	42420440 	.word	0x42420440

08002910 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e04c      	b.n	80029bc <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d111      	bne.n	8002952 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 fffa 	bl	8003930 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002940:	2b00      	cmp	r3, #0
 8002942:	d102      	bne.n	800294a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4a1f      	ldr	r2, [pc, #124]	; (80029c4 <HAL_TIM_Base_Init+0xb4>)
 8002948:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2202      	movs	r2, #2
 8002956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	3304      	adds	r3, #4
 8002962:	4619      	mov	r1, r3
 8002964:	4610      	mov	r0, r2
 8002966:	f000 fd03 	bl	8003370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	08000d89 	.word	0x08000d89

080029c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d001      	beq.n	80029e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e03c      	b.n	8002a5a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2202      	movs	r2, #2
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a1d      	ldr	r2, [pc, #116]	; (8002a64 <HAL_TIM_Base_Start+0x9c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d018      	beq.n	8002a24 <HAL_TIM_Base_Start+0x5c>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a1c      	ldr	r2, [pc, #112]	; (8002a68 <HAL_TIM_Base_Start+0xa0>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d013      	beq.n	8002a24 <HAL_TIM_Base_Start+0x5c>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a04:	d00e      	beq.n	8002a24 <HAL_TIM_Base_Start+0x5c>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a18      	ldr	r2, [pc, #96]	; (8002a6c <HAL_TIM_Base_Start+0xa4>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d009      	beq.n	8002a24 <HAL_TIM_Base_Start+0x5c>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a16      	ldr	r2, [pc, #88]	; (8002a70 <HAL_TIM_Base_Start+0xa8>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d004      	beq.n	8002a24 <HAL_TIM_Base_Start+0x5c>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a15      	ldr	r2, [pc, #84]	; (8002a74 <HAL_TIM_Base_Start+0xac>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d111      	bne.n	8002a48 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2b06      	cmp	r3, #6
 8002a34:	d010      	beq.n	8002a58 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f042 0201 	orr.w	r2, r2, #1
 8002a44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a46:	e007      	b.n	8002a58 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0201 	orr.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr
 8002a64:	40012c00 	.word	0x40012c00
 8002a68:	40013400 	.word	0x40013400
 8002a6c:	40000400 	.word	0x40000400
 8002a70:	40000800 	.word	0x40000800
 8002a74:	40000c00 	.word	0x40000c00

08002a78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d001      	beq.n	8002a90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e044      	b.n	8002b1a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2202      	movs	r2, #2
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0201 	orr.w	r2, r2, #1
 8002aa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a1d      	ldr	r2, [pc, #116]	; (8002b24 <HAL_TIM_Base_Start_IT+0xac>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d018      	beq.n	8002ae4 <HAL_TIM_Base_Start_IT+0x6c>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a1c      	ldr	r2, [pc, #112]	; (8002b28 <HAL_TIM_Base_Start_IT+0xb0>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d013      	beq.n	8002ae4 <HAL_TIM_Base_Start_IT+0x6c>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac4:	d00e      	beq.n	8002ae4 <HAL_TIM_Base_Start_IT+0x6c>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a18      	ldr	r2, [pc, #96]	; (8002b2c <HAL_TIM_Base_Start_IT+0xb4>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d009      	beq.n	8002ae4 <HAL_TIM_Base_Start_IT+0x6c>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a16      	ldr	r2, [pc, #88]	; (8002b30 <HAL_TIM_Base_Start_IT+0xb8>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d004      	beq.n	8002ae4 <HAL_TIM_Base_Start_IT+0x6c>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a15      	ldr	r2, [pc, #84]	; (8002b34 <HAL_TIM_Base_Start_IT+0xbc>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d111      	bne.n	8002b08 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2b06      	cmp	r3, #6
 8002af4:	d010      	beq.n	8002b18 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f042 0201 	orr.w	r2, r2, #1
 8002b04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b06:	e007      	b.n	8002b18 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f042 0201 	orr.w	r2, r2, #1
 8002b16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr
 8002b24:	40012c00 	.word	0x40012c00
 8002b28:	40013400 	.word	0x40013400
 8002b2c:	40000400 	.word	0x40000400
 8002b30:	40000800 	.word	0x40000800
 8002b34:	40000c00 	.word	0x40000c00

08002b38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e04c      	b.n	8002be4 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d111      	bne.n	8002b7a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 fee6 	bl	8003930 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d102      	bne.n	8002b72 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a1f      	ldr	r2, [pc, #124]	; (8002bec <HAL_TIM_PWM_Init+0xb4>)
 8002b70:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2202      	movs	r2, #2
 8002b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	f000 fbef 	bl	8003370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	08002bf1 	.word	0x08002bf1

08002bf0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bc80      	pop	{r7}
 8002c00:	4770      	bx	lr
	...

08002c04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d109      	bne.n	8002c28 <HAL_TIM_PWM_Start+0x24>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	bf14      	ite	ne
 8002c20:	2301      	movne	r3, #1
 8002c22:	2300      	moveq	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	e022      	b.n	8002c6e <HAL_TIM_PWM_Start+0x6a>
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	2b04      	cmp	r3, #4
 8002c2c:	d109      	bne.n	8002c42 <HAL_TIM_PWM_Start+0x3e>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	bf14      	ite	ne
 8002c3a:	2301      	movne	r3, #1
 8002c3c:	2300      	moveq	r3, #0
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	e015      	b.n	8002c6e <HAL_TIM_PWM_Start+0x6a>
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d109      	bne.n	8002c5c <HAL_TIM_PWM_Start+0x58>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	bf14      	ite	ne
 8002c54:	2301      	movne	r3, #1
 8002c56:	2300      	moveq	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	e008      	b.n	8002c6e <HAL_TIM_PWM_Start+0x6a>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	bf14      	ite	ne
 8002c68:	2301      	movne	r3, #1
 8002c6a:	2300      	moveq	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e072      	b.n	8002d5c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d104      	bne.n	8002c86 <HAL_TIM_PWM_Start+0x82>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c84:	e013      	b.n	8002cae <HAL_TIM_PWM_Start+0xaa>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	2b04      	cmp	r3, #4
 8002c8a:	d104      	bne.n	8002c96 <HAL_TIM_PWM_Start+0x92>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c94:	e00b      	b.n	8002cae <HAL_TIM_PWM_Start+0xaa>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b08      	cmp	r3, #8
 8002c9a:	d104      	bne.n	8002ca6 <HAL_TIM_PWM_Start+0xa2>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ca4:	e003      	b.n	8002cae <HAL_TIM_PWM_Start+0xaa>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2202      	movs	r2, #2
 8002caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	6839      	ldr	r1, [r7, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 fe16 	bl	80038e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a28      	ldr	r2, [pc, #160]	; (8002d64 <HAL_TIM_PWM_Start+0x160>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d004      	beq.n	8002cd0 <HAL_TIM_PWM_Start+0xcc>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a27      	ldr	r2, [pc, #156]	; (8002d68 <HAL_TIM_PWM_Start+0x164>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d101      	bne.n	8002cd4 <HAL_TIM_PWM_Start+0xd0>
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <HAL_TIM_PWM_Start+0xd2>
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d007      	beq.n	8002cea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ce8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a1d      	ldr	r2, [pc, #116]	; (8002d64 <HAL_TIM_PWM_Start+0x160>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d018      	beq.n	8002d26 <HAL_TIM_PWM_Start+0x122>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a1b      	ldr	r2, [pc, #108]	; (8002d68 <HAL_TIM_PWM_Start+0x164>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d013      	beq.n	8002d26 <HAL_TIM_PWM_Start+0x122>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d06:	d00e      	beq.n	8002d26 <HAL_TIM_PWM_Start+0x122>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a17      	ldr	r2, [pc, #92]	; (8002d6c <HAL_TIM_PWM_Start+0x168>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d009      	beq.n	8002d26 <HAL_TIM_PWM_Start+0x122>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a16      	ldr	r2, [pc, #88]	; (8002d70 <HAL_TIM_PWM_Start+0x16c>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d004      	beq.n	8002d26 <HAL_TIM_PWM_Start+0x122>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a14      	ldr	r2, [pc, #80]	; (8002d74 <HAL_TIM_PWM_Start+0x170>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d111      	bne.n	8002d4a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 0307 	and.w	r3, r3, #7
 8002d30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2b06      	cmp	r3, #6
 8002d36:	d010      	beq.n	8002d5a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 0201 	orr.w	r2, r2, #1
 8002d46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d48:	e007      	b.n	8002d5a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f042 0201 	orr.w	r2, r2, #1
 8002d58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40012c00 	.word	0x40012c00
 8002d68:	40013400 	.word	0x40013400
 8002d6c:	40000400 	.word	0x40000400
 8002d70:	40000800 	.word	0x40000800
 8002d74:	40000c00 	.word	0x40000c00

08002d78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d128      	bne.n	8002de0 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d121      	bne.n	8002de0 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f06f 0202 	mvn.w	r2, #2
 8002da4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699b      	ldr	r3, [r3, #24]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d005      	beq.n	8002dc6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	4798      	blx	r3
 8002dc4:	e009      	b.n	8002dda <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d128      	bne.n	8002e40 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b04      	cmp	r3, #4
 8002dfa:	d121      	bne.n	8002e40 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f06f 0204 	mvn.w	r2, #4
 8002e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2202      	movs	r2, #2
 8002e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d005      	beq.n	8002e26 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	4798      	blx	r3
 8002e24:	e009      	b.n	8002e3a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	2b08      	cmp	r3, #8
 8002e4c:	d128      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f003 0308 	and.w	r3, r3, #8
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d121      	bne.n	8002ea0 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f06f 0208 	mvn.w	r2, #8
 8002e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2204      	movs	r2, #4
 8002e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	f003 0303 	and.w	r3, r3, #3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d005      	beq.n	8002e86 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	4798      	blx	r3
 8002e84:	e009      	b.n	8002e9a <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691b      	ldr	r3, [r3, #16]
 8002ea6:	f003 0310 	and.w	r3, r3, #16
 8002eaa:	2b10      	cmp	r3, #16
 8002eac:	d128      	bne.n	8002f00 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f003 0310 	and.w	r3, r3, #16
 8002eb8:	2b10      	cmp	r3, #16
 8002eba:	d121      	bne.n	8002f00 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f06f 0210 	mvn.w	r2, #16
 8002ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2208      	movs	r2, #8
 8002eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d005      	beq.n	8002ee6 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	4798      	blx	r3
 8002ee4:	e009      	b.n	8002efa <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d110      	bne.n	8002f30 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d109      	bne.n	8002f30 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f06f 0201 	mvn.w	r2, #1
 8002f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3a:	2b80      	cmp	r3, #128	; 0x80
 8002f3c:	d110      	bne.n	8002f60 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f48:	2b80      	cmp	r3, #128	; 0x80
 8002f4a:	d109      	bne.n	8002f60 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6a:	2b40      	cmp	r3, #64	; 0x40
 8002f6c:	d110      	bne.n	8002f90 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f78:	2b40      	cmp	r3, #64	; 0x40
 8002f7a:	d109      	bne.n	8002f90 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f003 0320 	and.w	r3, r3, #32
 8002f9a:	2b20      	cmp	r3, #32
 8002f9c:	d110      	bne.n	8002fc0 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f003 0320 	and.w	r3, r3, #32
 8002fa8:	2b20      	cmp	r3, #32
 8002faa:	d109      	bne.n	8002fc0 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f06f 0220 	mvn.w	r2, #32
 8002fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fc0:	bf00      	nop
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e0ac      	b.n	800313c <HAL_TIM_PWM_ConfigChannel+0x174>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b0c      	cmp	r3, #12
 8002fee:	f200 809f 	bhi.w	8003130 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002ff2:	a201      	add	r2, pc, #4	; (adr r2, 8002ff8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff8:	0800302d 	.word	0x0800302d
 8002ffc:	08003131 	.word	0x08003131
 8003000:	08003131 	.word	0x08003131
 8003004:	08003131 	.word	0x08003131
 8003008:	0800306d 	.word	0x0800306d
 800300c:	08003131 	.word	0x08003131
 8003010:	08003131 	.word	0x08003131
 8003014:	08003131 	.word	0x08003131
 8003018:	080030af 	.word	0x080030af
 800301c:	08003131 	.word	0x08003131
 8003020:	08003131 	.word	0x08003131
 8003024:	08003131 	.word	0x08003131
 8003028:	080030ef 	.word	0x080030ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68b9      	ldr	r1, [r7, #8]
 8003032:	4618      	mov	r0, r3
 8003034:	f000 fa16 	bl	8003464 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	699a      	ldr	r2, [r3, #24]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0208 	orr.w	r2, r2, #8
 8003046:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699a      	ldr	r2, [r3, #24]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 0204 	bic.w	r2, r2, #4
 8003056:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6999      	ldr	r1, [r3, #24]
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	691a      	ldr	r2, [r3, #16]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	619a      	str	r2, [r3, #24]
      break;
 800306a:	e062      	b.n	8003132 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68b9      	ldr	r1, [r7, #8]
 8003072:	4618      	mov	r0, r3
 8003074:	f000 fa66 	bl	8003544 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699a      	ldr	r2, [r3, #24]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	699a      	ldr	r2, [r3, #24]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6999      	ldr	r1, [r3, #24]
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	021a      	lsls	r2, r3, #8
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	619a      	str	r2, [r3, #24]
      break;
 80030ac:	e041      	b.n	8003132 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68b9      	ldr	r1, [r7, #8]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 fab9 	bl	800362c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	69da      	ldr	r2, [r3, #28]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f042 0208 	orr.w	r2, r2, #8
 80030c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	69da      	ldr	r2, [r3, #28]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0204 	bic.w	r2, r2, #4
 80030d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	69d9      	ldr	r1, [r3, #28]
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	691a      	ldr	r2, [r3, #16]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	61da      	str	r2, [r3, #28]
      break;
 80030ec:	e021      	b.n	8003132 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68b9      	ldr	r1, [r7, #8]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 fb0d 	bl	8003714 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69da      	ldr	r2, [r3, #28]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003108:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	69da      	ldr	r2, [r3, #28]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003118:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	69d9      	ldr	r1, [r3, #28]
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	021a      	lsls	r2, r3, #8
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	61da      	str	r2, [r3, #28]
      break;
 800312e:	e000      	b.n	8003132 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003130:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <HAL_TIM_ConfigClockSource+0x18>
 8003158:	2302      	movs	r3, #2
 800315a:	e0b3      	b.n	80032c4 <HAL_TIM_ConfigClockSource+0x180>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800317a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003182:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68fa      	ldr	r2, [r7, #12]
 800318a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003194:	d03e      	beq.n	8003214 <HAL_TIM_ConfigClockSource+0xd0>
 8003196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800319a:	f200 8087 	bhi.w	80032ac <HAL_TIM_ConfigClockSource+0x168>
 800319e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031a2:	f000 8085 	beq.w	80032b0 <HAL_TIM_ConfigClockSource+0x16c>
 80031a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031aa:	d87f      	bhi.n	80032ac <HAL_TIM_ConfigClockSource+0x168>
 80031ac:	2b70      	cmp	r3, #112	; 0x70
 80031ae:	d01a      	beq.n	80031e6 <HAL_TIM_ConfigClockSource+0xa2>
 80031b0:	2b70      	cmp	r3, #112	; 0x70
 80031b2:	d87b      	bhi.n	80032ac <HAL_TIM_ConfigClockSource+0x168>
 80031b4:	2b60      	cmp	r3, #96	; 0x60
 80031b6:	d050      	beq.n	800325a <HAL_TIM_ConfigClockSource+0x116>
 80031b8:	2b60      	cmp	r3, #96	; 0x60
 80031ba:	d877      	bhi.n	80032ac <HAL_TIM_ConfigClockSource+0x168>
 80031bc:	2b50      	cmp	r3, #80	; 0x50
 80031be:	d03c      	beq.n	800323a <HAL_TIM_ConfigClockSource+0xf6>
 80031c0:	2b50      	cmp	r3, #80	; 0x50
 80031c2:	d873      	bhi.n	80032ac <HAL_TIM_ConfigClockSource+0x168>
 80031c4:	2b40      	cmp	r3, #64	; 0x40
 80031c6:	d058      	beq.n	800327a <HAL_TIM_ConfigClockSource+0x136>
 80031c8:	2b40      	cmp	r3, #64	; 0x40
 80031ca:	d86f      	bhi.n	80032ac <HAL_TIM_ConfigClockSource+0x168>
 80031cc:	2b30      	cmp	r3, #48	; 0x30
 80031ce:	d064      	beq.n	800329a <HAL_TIM_ConfigClockSource+0x156>
 80031d0:	2b30      	cmp	r3, #48	; 0x30
 80031d2:	d86b      	bhi.n	80032ac <HAL_TIM_ConfigClockSource+0x168>
 80031d4:	2b20      	cmp	r3, #32
 80031d6:	d060      	beq.n	800329a <HAL_TIM_ConfigClockSource+0x156>
 80031d8:	2b20      	cmp	r3, #32
 80031da:	d867      	bhi.n	80032ac <HAL_TIM_ConfigClockSource+0x168>
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d05c      	beq.n	800329a <HAL_TIM_ConfigClockSource+0x156>
 80031e0:	2b10      	cmp	r3, #16
 80031e2:	d05a      	beq.n	800329a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80031e4:	e062      	b.n	80032ac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6818      	ldr	r0, [r3, #0]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	6899      	ldr	r1, [r3, #8]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f000 fb58 	bl	80038aa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003208:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	609a      	str	r2, [r3, #8]
      break;
 8003212:	e04e      	b.n	80032b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6818      	ldr	r0, [r3, #0]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	6899      	ldr	r1, [r3, #8]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f000 fb41 	bl	80038aa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003236:	609a      	str	r2, [r3, #8]
      break;
 8003238:	e03b      	b.n	80032b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6818      	ldr	r0, [r3, #0]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	6859      	ldr	r1, [r3, #4]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	461a      	mov	r2, r3
 8003248:	f000 fab8 	bl	80037bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2150      	movs	r1, #80	; 0x50
 8003252:	4618      	mov	r0, r3
 8003254:	f000 fb0f 	bl	8003876 <TIM_ITRx_SetConfig>
      break;
 8003258:	e02b      	b.n	80032b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6818      	ldr	r0, [r3, #0]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	6859      	ldr	r1, [r3, #4]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	461a      	mov	r2, r3
 8003268:	f000 fad6 	bl	8003818 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2160      	movs	r1, #96	; 0x60
 8003272:	4618      	mov	r0, r3
 8003274:	f000 faff 	bl	8003876 <TIM_ITRx_SetConfig>
      break;
 8003278:	e01b      	b.n	80032b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6818      	ldr	r0, [r3, #0]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	6859      	ldr	r1, [r3, #4]
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	461a      	mov	r2, r3
 8003288:	f000 fa98 	bl	80037bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2140      	movs	r1, #64	; 0x40
 8003292:	4618      	mov	r0, r3
 8003294:	f000 faef 	bl	8003876 <TIM_ITRx_SetConfig>
      break;
 8003298:	e00b      	b.n	80032b2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4619      	mov	r1, r3
 80032a4:	4610      	mov	r0, r2
 80032a6:	f000 fae6 	bl	8003876 <TIM_ITRx_SetConfig>
        break;
 80032aa:	e002      	b.n	80032b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80032ac:	bf00      	nop
 80032ae:	e000      	b.n	80032b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80032b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	4770      	bx	lr

080032de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr

080032f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bc80      	pop	{r7}
 8003300:	4770      	bx	lr

08003302 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003302:	b480      	push	{r7}
 8003304:	b083      	sub	sp, #12
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr

08003314 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	bc80      	pop	{r7}
 8003324:	4770      	bx	lr

08003326 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003326:	b480      	push	{r7}
 8003328:	b083      	sub	sp, #12
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr

08003338 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	bc80      	pop	{r7}
 8003348:	4770      	bx	lr

0800334a <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	bc80      	pop	{r7}
 800335a:	4770      	bx	lr

0800335c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	bc80      	pop	{r7}
 800336c:	4770      	bx	lr
	...

08003370 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a33      	ldr	r2, [pc, #204]	; (8003450 <TIM_Base_SetConfig+0xe0>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d013      	beq.n	80033b0 <TIM_Base_SetConfig+0x40>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a32      	ldr	r2, [pc, #200]	; (8003454 <TIM_Base_SetConfig+0xe4>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d00f      	beq.n	80033b0 <TIM_Base_SetConfig+0x40>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003396:	d00b      	beq.n	80033b0 <TIM_Base_SetConfig+0x40>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a2f      	ldr	r2, [pc, #188]	; (8003458 <TIM_Base_SetConfig+0xe8>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d007      	beq.n	80033b0 <TIM_Base_SetConfig+0x40>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a2e      	ldr	r2, [pc, #184]	; (800345c <TIM_Base_SetConfig+0xec>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d003      	beq.n	80033b0 <TIM_Base_SetConfig+0x40>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a2d      	ldr	r2, [pc, #180]	; (8003460 <TIM_Base_SetConfig+0xf0>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d108      	bne.n	80033c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	4313      	orrs	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a22      	ldr	r2, [pc, #136]	; (8003450 <TIM_Base_SetConfig+0xe0>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d013      	beq.n	80033f2 <TIM_Base_SetConfig+0x82>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a21      	ldr	r2, [pc, #132]	; (8003454 <TIM_Base_SetConfig+0xe4>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d00f      	beq.n	80033f2 <TIM_Base_SetConfig+0x82>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d8:	d00b      	beq.n	80033f2 <TIM_Base_SetConfig+0x82>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a1e      	ldr	r2, [pc, #120]	; (8003458 <TIM_Base_SetConfig+0xe8>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d007      	beq.n	80033f2 <TIM_Base_SetConfig+0x82>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a1d      	ldr	r2, [pc, #116]	; (800345c <TIM_Base_SetConfig+0xec>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d003      	beq.n	80033f2 <TIM_Base_SetConfig+0x82>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a1c      	ldr	r2, [pc, #112]	; (8003460 <TIM_Base_SetConfig+0xf0>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d108      	bne.n	8003404 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	4313      	orrs	r3, r2
 8003402:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a09      	ldr	r2, [pc, #36]	; (8003450 <TIM_Base_SetConfig+0xe0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d003      	beq.n	8003438 <TIM_Base_SetConfig+0xc8>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a08      	ldr	r2, [pc, #32]	; (8003454 <TIM_Base_SetConfig+0xe4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d103      	bne.n	8003440 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	691a      	ldr	r2, [r3, #16]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	615a      	str	r2, [r3, #20]
}
 8003446:	bf00      	nop
 8003448:	3714      	adds	r7, #20
 800344a:	46bd      	mov	sp, r7
 800344c:	bc80      	pop	{r7}
 800344e:	4770      	bx	lr
 8003450:	40012c00 	.word	0x40012c00
 8003454:	40013400 	.word	0x40013400
 8003458:	40000400 	.word	0x40000400
 800345c:	40000800 	.word	0x40000800
 8003460:	40000c00 	.word	0x40000c00

08003464 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003464:	b480      	push	{r7}
 8003466:	b087      	sub	sp, #28
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	f023 0201 	bic.w	r2, r3, #1
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f023 0303 	bic.w	r3, r3, #3
 800349a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f023 0302 	bic.w	r3, r3, #2
 80034ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a20      	ldr	r2, [pc, #128]	; (800353c <TIM_OC1_SetConfig+0xd8>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d003      	beq.n	80034c8 <TIM_OC1_SetConfig+0x64>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a1f      	ldr	r2, [pc, #124]	; (8003540 <TIM_OC1_SetConfig+0xdc>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d10c      	bne.n	80034e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f023 0308 	bic.w	r3, r3, #8
 80034ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f023 0304 	bic.w	r3, r3, #4
 80034e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a15      	ldr	r2, [pc, #84]	; (800353c <TIM_OC1_SetConfig+0xd8>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d003      	beq.n	80034f2 <TIM_OC1_SetConfig+0x8e>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a14      	ldr	r2, [pc, #80]	; (8003540 <TIM_OC1_SetConfig+0xdc>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d111      	bne.n	8003516 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003500:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	4313      	orrs	r3, r2
 800350a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	4313      	orrs	r3, r2
 8003514:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	621a      	str	r2, [r3, #32]
}
 8003530:	bf00      	nop
 8003532:	371c      	adds	r7, #28
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40012c00 	.word	0x40012c00
 8003540:	40013400 	.word	0x40013400

08003544 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003544:	b480      	push	{r7}
 8003546:	b087      	sub	sp, #28
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	f023 0210 	bic.w	r2, r3, #16
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800357a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	021b      	lsls	r3, r3, #8
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	4313      	orrs	r3, r2
 8003586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f023 0320 	bic.w	r3, r3, #32
 800358e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	4313      	orrs	r3, r2
 800359a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a21      	ldr	r2, [pc, #132]	; (8003624 <TIM_OC2_SetConfig+0xe0>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d003      	beq.n	80035ac <TIM_OC2_SetConfig+0x68>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a20      	ldr	r2, [pc, #128]	; (8003628 <TIM_OC2_SetConfig+0xe4>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d10d      	bne.n	80035c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	4313      	orrs	r3, r2
 80035be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a16      	ldr	r2, [pc, #88]	; (8003624 <TIM_OC2_SetConfig+0xe0>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d003      	beq.n	80035d8 <TIM_OC2_SetConfig+0x94>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a15      	ldr	r2, [pc, #84]	; (8003628 <TIM_OC2_SetConfig+0xe4>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d113      	bne.n	8003600 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	621a      	str	r2, [r3, #32]
}
 800361a:	bf00      	nop
 800361c:	371c      	adds	r7, #28
 800361e:	46bd      	mov	sp, r7
 8003620:	bc80      	pop	{r7}
 8003622:	4770      	bx	lr
 8003624:	40012c00 	.word	0x40012c00
 8003628:	40013400 	.word	0x40013400

0800362c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800362c:	b480      	push	{r7}
 800362e:	b087      	sub	sp, #28
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a1b      	ldr	r3, [r3, #32]
 800363a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f023 0303 	bic.w	r3, r3, #3
 8003662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	4313      	orrs	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003674:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	021b      	lsls	r3, r3, #8
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	4313      	orrs	r3, r2
 8003680:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a21      	ldr	r2, [pc, #132]	; (800370c <TIM_OC3_SetConfig+0xe0>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d003      	beq.n	8003692 <TIM_OC3_SetConfig+0x66>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a20      	ldr	r2, [pc, #128]	; (8003710 <TIM_OC3_SetConfig+0xe4>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d10d      	bne.n	80036ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003698:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	021b      	lsls	r3, r3, #8
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a16      	ldr	r2, [pc, #88]	; (800370c <TIM_OC3_SetConfig+0xe0>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d003      	beq.n	80036be <TIM_OC3_SetConfig+0x92>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a15      	ldr	r2, [pc, #84]	; (8003710 <TIM_OC3_SetConfig+0xe4>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d113      	bne.n	80036e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	011b      	lsls	r3, r3, #4
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	621a      	str	r2, [r3, #32]
}
 8003700:	bf00      	nop
 8003702:	371c      	adds	r7, #28
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	40012c00 	.word	0x40012c00
 8003710:	40013400 	.word	0x40013400

08003714 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003714:	b480      	push	{r7}
 8003716:	b087      	sub	sp, #28
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
 800372e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800374a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	021b      	lsls	r3, r3, #8
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	4313      	orrs	r3, r2
 8003756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800375e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	031b      	lsls	r3, r3, #12
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	4313      	orrs	r3, r2
 800376a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a11      	ldr	r2, [pc, #68]	; (80037b4 <TIM_OC4_SetConfig+0xa0>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d003      	beq.n	800377c <TIM_OC4_SetConfig+0x68>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a10      	ldr	r2, [pc, #64]	; (80037b8 <TIM_OC4_SetConfig+0xa4>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d109      	bne.n	8003790 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003782:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	019b      	lsls	r3, r3, #6
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	4313      	orrs	r3, r2
 800378e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	621a      	str	r2, [r3, #32]
}
 80037aa:	bf00      	nop
 80037ac:	371c      	adds	r7, #28
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bc80      	pop	{r7}
 80037b2:	4770      	bx	lr
 80037b4:	40012c00 	.word	0x40012c00
 80037b8:	40013400 	.word	0x40013400

080037bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037bc:	b480      	push	{r7}
 80037be:	b087      	sub	sp, #28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	f023 0201 	bic.w	r2, r3, #1
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f023 030a 	bic.w	r3, r3, #10
 80037f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	4313      	orrs	r3, r2
 8003800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	621a      	str	r2, [r3, #32]
}
 800380e:	bf00      	nop
 8003810:	371c      	adds	r7, #28
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr

08003818 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	f023 0210 	bic.w	r2, r3, #16
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003842:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	031b      	lsls	r3, r3, #12
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	4313      	orrs	r3, r2
 800384c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003854:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	4313      	orrs	r3, r2
 800385e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	621a      	str	r2, [r3, #32]
}
 800386c:	bf00      	nop
 800386e:	371c      	adds	r7, #28
 8003870:	46bd      	mov	sp, r7
 8003872:	bc80      	pop	{r7}
 8003874:	4770      	bx	lr

08003876 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003876:	b480      	push	{r7}
 8003878:	b085      	sub	sp, #20
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800388c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4313      	orrs	r3, r2
 8003894:	f043 0307 	orr.w	r3, r3, #7
 8003898:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	609a      	str	r2, [r3, #8]
}
 80038a0:	bf00      	nop
 80038a2:	3714      	adds	r7, #20
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bc80      	pop	{r7}
 80038a8:	4770      	bx	lr

080038aa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b087      	sub	sp, #28
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	60f8      	str	r0, [r7, #12]
 80038b2:	60b9      	str	r1, [r7, #8]
 80038b4:	607a      	str	r2, [r7, #4]
 80038b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038c4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	021a      	lsls	r2, r3, #8
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	431a      	orrs	r2, r3
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	697a      	ldr	r2, [r7, #20]
 80038dc:	609a      	str	r2, [r3, #8]
}
 80038de:	bf00      	nop
 80038e0:	371c      	adds	r7, #28
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bc80      	pop	{r7}
 80038e6:	4770      	bx	lr

080038e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	f003 031f 	and.w	r3, r3, #31
 80038fa:	2201      	movs	r2, #1
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a1a      	ldr	r2, [r3, #32]
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	43db      	mvns	r3, r3
 800390a:	401a      	ands	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6a1a      	ldr	r2, [r3, #32]
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	f003 031f 	and.w	r3, r3, #31
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	fa01 f303 	lsl.w	r3, r1, r3
 8003920:	431a      	orrs	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	621a      	str	r2, [r3, #32]
}
 8003926:	bf00      	nop
 8003928:	371c      	adds	r7, #28
 800392a:	46bd      	mov	sp, r7
 800392c:	bc80      	pop	{r7}
 800392e:	4770      	bx	lr

08003930 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a1c      	ldr	r2, [pc, #112]	; (80039ac <TIM_ResetCallback+0x7c>)
 800393c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a1b      	ldr	r2, [pc, #108]	; (80039b0 <TIM_ResetCallback+0x80>)
 8003944:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a1a      	ldr	r2, [pc, #104]	; (80039b4 <TIM_ResetCallback+0x84>)
 800394c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a19      	ldr	r2, [pc, #100]	; (80039b8 <TIM_ResetCallback+0x88>)
 8003954:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a18      	ldr	r2, [pc, #96]	; (80039bc <TIM_ResetCallback+0x8c>)
 800395c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a17      	ldr	r2, [pc, #92]	; (80039c0 <TIM_ResetCallback+0x90>)
 8003964:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a16      	ldr	r2, [pc, #88]	; (80039c4 <TIM_ResetCallback+0x94>)
 800396c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a15      	ldr	r2, [pc, #84]	; (80039c8 <TIM_ResetCallback+0x98>)
 8003974:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a14      	ldr	r2, [pc, #80]	; (80039cc <TIM_ResetCallback+0x9c>)
 800397c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a13      	ldr	r2, [pc, #76]	; (80039d0 <TIM_ResetCallback+0xa0>)
 8003984:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a12      	ldr	r2, [pc, #72]	; (80039d4 <TIM_ResetCallback+0xa4>)
 800398c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a11      	ldr	r2, [pc, #68]	; (80039d8 <TIM_ResetCallback+0xa8>)
 8003994:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a10      	ldr	r2, [pc, #64]	; (80039dc <TIM_ResetCallback+0xac>)
 800399c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bc80      	pop	{r7}
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	08000c49 	.word	0x08000c49
 80039b0:	080032cd 	.word	0x080032cd
 80039b4:	08003339 	.word	0x08003339
 80039b8:	0800334b 	.word	0x0800334b
 80039bc:	080032f1 	.word	0x080032f1
 80039c0:	08003303 	.word	0x08003303
 80039c4:	080032df 	.word	0x080032df
 80039c8:	08003315 	.word	0x08003315
 80039cc:	08003327 	.word	0x08003327
 80039d0:	0800335d 	.word	0x0800335d
 80039d4:	08003b5b 	.word	0x08003b5b
 80039d8:	08003b6d 	.word	0x08003b6d
 80039dc:	08003b7f 	.word	0x08003b7f

080039e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039f4:	2302      	movs	r3, #2
 80039f6:	e050      	b.n	8003a9a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a1b      	ldr	r2, [pc, #108]	; (8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d018      	beq.n	8003a6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a19      	ldr	r2, [pc, #100]	; (8003aa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d013      	beq.n	8003a6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a4e:	d00e      	beq.n	8003a6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a15      	ldr	r2, [pc, #84]	; (8003aac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d009      	beq.n	8003a6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a14      	ldr	r2, [pc, #80]	; (8003ab0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d004      	beq.n	8003a6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a12      	ldr	r2, [pc, #72]	; (8003ab4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d10c      	bne.n	8003a88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr
 8003aa4:	40012c00 	.word	0x40012c00
 8003aa8:	40013400 	.word	0x40013400
 8003aac:	40000400 	.word	0x40000400
 8003ab0:	40000800 	.word	0x40000800
 8003ab4:	40000c00 	.word	0x40000c00

08003ab8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d101      	bne.n	8003ad4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	e03d      	b.n	8003b50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bc80      	pop	{r7}
 8003b58:	4770      	bx	lr

08003b5a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr

08003b6c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bc80      	pop	{r7}
 8003b7c:	4770      	bx	lr

08003b7e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	b083      	sub	sp, #12
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bc80      	pop	{r7}
 8003b8e:	4770      	bx	lr

08003b90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e04a      	b.n	8003c38 <HAL_UART_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d111      	bne.n	8003bd2 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 fb00 	bl	80041bc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d102      	bne.n	8003bca <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a1e      	ldr	r2, [pc, #120]	; (8003c40 <HAL_UART_Init+0xb0>)
 8003bc8:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2224      	movs	r2, #36	; 0x24
 8003bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68da      	ldr	r2, [r3, #12]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003be8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 fcf4 	bl	80045d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	691a      	ldr	r2, [r3, #16]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bfe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	695a      	ldr	r2, [r3, #20]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c0e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c1e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2220      	movs	r2, #32
 8003c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	08000e99 	.word	0x08000e99

08003c44 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08a      	sub	sp, #40	; 0x28
 8003c48:	af02      	add	r7, sp, #8
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	603b      	str	r3, [r7, #0]
 8003c50:	4613      	mov	r3, r2
 8003c52:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b20      	cmp	r3, #32
 8003c62:	d17c      	bne.n	8003d5e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <HAL_UART_Transmit+0x2c>
 8003c6a:	88fb      	ldrh	r3, [r7, #6]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e075      	b.n	8003d60 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d101      	bne.n	8003c82 <HAL_UART_Transmit+0x3e>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	e06e      	b.n	8003d60 <HAL_UART_Transmit+0x11c>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2221      	movs	r2, #33	; 0x21
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c98:	f7fd fb26 	bl	80012e8 <HAL_GetTick>
 8003c9c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	88fa      	ldrh	r2, [r7, #6]
 8003ca2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	88fa      	ldrh	r2, [r7, #6]
 8003ca8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb2:	d108      	bne.n	8003cc6 <HAL_UART_Transmit+0x82>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d104      	bne.n	8003cc6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	61bb      	str	r3, [r7, #24]
 8003cc4:	e003      	b.n	8003cce <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003cd6:	e02a      	b.n	8003d2e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	2180      	movs	r1, #128	; 0x80
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 faa0 	bl	8004228 <UART_WaitOnFlagUntilTimeout>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e036      	b.n	8003d60 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10b      	bne.n	8003d10 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	881b      	ldrh	r3, [r3, #0]
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d06:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	3302      	adds	r3, #2
 8003d0c:	61bb      	str	r3, [r7, #24]
 8003d0e:	e007      	b.n	8003d20 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	781a      	ldrb	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	3b01      	subs	r3, #1
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d1cf      	bne.n	8003cd8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	2140      	movs	r1, #64	; 0x40
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 fa70 	bl	8004228 <UART_WaitOnFlagUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e006      	b.n	8003d60 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2220      	movs	r2, #32
 8003d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	e000      	b.n	8003d60 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d5e:	2302      	movs	r3, #2
  }
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3720      	adds	r7, #32
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	4613      	mov	r3, r2
 8003d74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b20      	cmp	r3, #32
 8003d80:	d11d      	bne.n	8003dbe <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <HAL_UART_Receive_IT+0x26>
 8003d88:	88fb      	ldrh	r3, [r7, #6]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e016      	b.n	8003dc0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d101      	bne.n	8003da0 <HAL_UART_Receive_IT+0x38>
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	e00f      	b.n	8003dc0 <HAL_UART_Receive_IT+0x58>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003dae:	88fb      	ldrh	r3, [r7, #6]
 8003db0:	461a      	mov	r2, r3
 8003db2:	68b9      	ldr	r1, [r7, #8]
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 fa81 	bl	80042bc <UART_Start_Receive_IT>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	e000      	b.n	8003dc0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003dbe:	2302      	movs	r3, #2
  }
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08a      	sub	sp, #40	; 0x28
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	f003 030f 	and.w	r3, r3, #15
 8003df6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10d      	bne.n	8003e1a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	f003 0320 	and.w	r3, r3, #32
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d008      	beq.n	8003e1a <HAL_UART_IRQHandler+0x52>
 8003e08:	6a3b      	ldr	r3, [r7, #32]
 8003e0a:	f003 0320 	and.w	r3, r3, #32
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 fb34 	bl	8004480 <UART_Receive_IT>
      return;
 8003e18:	e180      	b.n	800411c <HAL_UART_IRQHandler+0x354>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 80b4 	beq.w	8003f8a <HAL_UART_IRQHandler+0x1c2>
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d105      	bne.n	8003e38 <HAL_UART_IRQHandler+0x70>
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 80a9 	beq.w	8003f8a <HAL_UART_IRQHandler+0x1c2>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <HAL_UART_IRQHandler+0x90>
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d005      	beq.n	8003e58 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	f043 0201 	orr.w	r2, r3, #1
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	f003 0304 	and.w	r3, r3, #4
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <HAL_UART_IRQHandler+0xb0>
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d005      	beq.n	8003e78 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e70:	f043 0202 	orr.w	r2, r3, #2
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00a      	beq.n	8003e98 <HAL_UART_IRQHandler+0xd0>
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d005      	beq.n	8003e98 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e90:	f043 0204 	orr.w	r2, r3, #4
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00f      	beq.n	8003ec2 <HAL_UART_IRQHandler+0xfa>
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	f003 0320 	and.w	r3, r3, #32
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d104      	bne.n	8003eb6 <HAL_UART_IRQHandler+0xee>
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d005      	beq.n	8003ec2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	f043 0208 	orr.w	r2, r3, #8
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 8123 	beq.w	8004112 <HAL_UART_IRQHandler+0x34a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	f003 0320 	and.w	r3, r3, #32
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d007      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x11e>
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	f003 0320 	and.w	r3, r3, #32
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 facd 	bl	8004480 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	bf14      	ite	ne
 8003ef4:	2301      	movne	r3, #1
 8003ef6:	2300      	moveq	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f00:	f003 0308 	and.w	r3, r3, #8
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d102      	bne.n	8003f0e <HAL_UART_IRQHandler+0x146>
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d033      	beq.n	8003f76 <HAL_UART_IRQHandler+0x1ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 fa0d 	bl	800432e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d024      	beq.n	8003f6c <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	695a      	ldr	r2, [r3, #20]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f30:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d013      	beq.n	8003f62 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3e:	4a79      	ldr	r2, [pc, #484]	; (8004124 <HAL_UART_IRQHandler+0x35c>)
 8003f40:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fd fd44 	bl	80019d4 <HAL_DMA_Abort_IT>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d019      	beq.n	8003f86 <HAL_UART_IRQHandler+0x1be>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f60:	e011      	b.n	8003f86 <HAL_UART_IRQHandler+0x1be>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f6a:	e00c      	b.n	8003f86 <HAL_UART_IRQHandler+0x1be>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f74:	e007      	b.n	8003f86 <HAL_UART_IRQHandler+0x1be>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003f84:	e0c5      	b.n	8004112 <HAL_UART_IRQHandler+0x34a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f86:	bf00      	nop
    return;
 8003f88:	e0c3      	b.n	8004112 <HAL_UART_IRQHandler+0x34a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	f040 80a3 	bne.w	80040da <HAL_UART_IRQHandler+0x312>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	f003 0310 	and.w	r3, r3, #16
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f000 809d 	beq.w	80040da <HAL_UART_IRQHandler+0x312>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003fa0:	6a3b      	ldr	r3, [r7, #32]
 8003fa2:	f003 0310 	and.w	r3, r3, #16
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 8097 	beq.w	80040da <HAL_UART_IRQHandler+0x312>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fac:	2300      	movs	r3, #0
 8003fae:	60fb      	str	r3, [r7, #12]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d04f      	beq.n	8004070 <HAL_UART_IRQHandler+0x2a8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003fda:	8a3b      	ldrh	r3, [r7, #16]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 809a 	beq.w	8004116 <HAL_UART_IRQHandler+0x34e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fe6:	8a3a      	ldrh	r2, [r7, #16]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	f080 8094 	bcs.w	8004116 <HAL_UART_IRQHandler+0x34e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	8a3a      	ldrh	r2, [r7, #16]
 8003ff2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	2b20      	cmp	r3, #32
 8003ffc:	d02b      	beq.n	8004056 <HAL_UART_IRQHandler+0x28e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68da      	ldr	r2, [r3, #12]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800400c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	695a      	ldr	r2, [r3, #20]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 0201 	bic.w	r2, r2, #1
 800401c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695a      	ldr	r2, [r3, #20]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800402c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2220      	movs	r2, #32
 8004032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68da      	ldr	r2, [r3, #12]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0210 	bic.w	r2, r2, #16
 800404a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004050:	4618      	mov	r0, r3
 8004052:	f7fd fc84 	bl	800195e <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8004062:	b292      	uxth	r2, r2
 8004064:	1a8a      	subs	r2, r1, r2
 8004066:	b292      	uxth	r2, r2
 8004068:	4611      	mov	r1, r2
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
      return;
 800406e:	e052      	b.n	8004116 <HAL_UART_IRQHandler+0x34e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004078:	b29b      	uxth	r3, r3
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004082:	b29b      	uxth	r3, r3
 8004084:	2b00      	cmp	r3, #0
 8004086:	d048      	beq.n	800411a <HAL_UART_IRQHandler+0x352>
          &&(nb_rx_data > 0U) )
 8004088:	8a7b      	ldrh	r3, [r7, #18]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d045      	beq.n	800411a <HAL_UART_IRQHandler+0x352>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800409c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	695a      	ldr	r2, [r3, #20]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f022 0201 	bic.w	r2, r2, #1
 80040ac:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2220      	movs	r2, #32
 80040b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68da      	ldr	r2, [r3, #12]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0210 	bic.w	r2, r2, #16
 80040ca:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040d0:	8a7a      	ldrh	r2, [r7, #18]
 80040d2:	4611      	mov	r1, r2
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
      return;
 80040d8:	e01f      	b.n	800411a <HAL_UART_IRQHandler+0x352>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d008      	beq.n	80040f6 <HAL_UART_IRQHandler+0x32e>
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <HAL_UART_IRQHandler+0x32e>
  {
    UART_Transmit_IT(huart);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f95e 	bl	80043b0 <UART_Transmit_IT>
    return;
 80040f4:	e012      	b.n	800411c <HAL_UART_IRQHandler+0x354>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00d      	beq.n	800411c <HAL_UART_IRQHandler+0x354>
 8004100:	6a3b      	ldr	r3, [r7, #32]
 8004102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004106:	2b00      	cmp	r3, #0
 8004108:	d008      	beq.n	800411c <HAL_UART_IRQHandler+0x354>
  {
    UART_EndTransmit_IT(huart);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f99f 	bl	800444e <UART_EndTransmit_IT>
    return;
 8004110:	e004      	b.n	800411c <HAL_UART_IRQHandler+0x354>
    return;
 8004112:	bf00      	nop
 8004114:	e002      	b.n	800411c <HAL_UART_IRQHandler+0x354>
      return;
 8004116:	bf00      	nop
 8004118:	e000      	b.n	800411c <HAL_UART_IRQHandler+0x354>
      return;
 800411a:	bf00      	nop
  }
}
 800411c:	3728      	adds	r7, #40	; 0x28
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	08004387 	.word	0x08004387

08004128 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	bc80      	pop	{r7}
 8004138:	4770      	bx	lr

0800413a <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr

0800414c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	bc80      	pop	{r7}
 800415c:	4770      	bx	lr

0800415e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	bc80      	pop	{r7}
 800416e:	4770      	bx	lr

08004170 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	bc80      	pop	{r7}
 8004180:	4770      	bx	lr

08004182 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	bc80      	pop	{r7}
 8004192:	4770      	bx	lr

08004194 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bc80      	pop	{r7}
 80041a4:	4770      	bx	lr

080041a6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b083      	sub	sp, #12
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
 80041ae:	460b      	mov	r3, r1
 80041b0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr

080041bc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a0f      	ldr	r2, [pc, #60]	; (8004204 <UART_InitCallbacksToDefault+0x48>)
 80041c8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a0e      	ldr	r2, [pc, #56]	; (8004208 <UART_InitCallbacksToDefault+0x4c>)
 80041ce:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a0e      	ldr	r2, [pc, #56]	; (800420c <UART_InitCallbacksToDefault+0x50>)
 80041d4:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a0d      	ldr	r2, [pc, #52]	; (8004210 <UART_InitCallbacksToDefault+0x54>)
 80041da:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a0d      	ldr	r2, [pc, #52]	; (8004214 <UART_InitCallbacksToDefault+0x58>)
 80041e0:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a0c      	ldr	r2, [pc, #48]	; (8004218 <UART_InitCallbacksToDefault+0x5c>)
 80041e6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a0c      	ldr	r2, [pc, #48]	; (800421c <UART_InitCallbacksToDefault+0x60>)
 80041ec:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a0b      	ldr	r2, [pc, #44]	; (8004220 <UART_InitCallbacksToDefault+0x64>)
 80041f2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a0b      	ldr	r2, [pc, #44]	; (8004224 <UART_InitCallbacksToDefault+0x68>)
 80041f8:	669a      	str	r2, [r3, #104]	; 0x68

}
 80041fa:	bf00      	nop
 80041fc:	370c      	adds	r7, #12
 80041fe:	46bd      	mov	sp, r7
 8004200:	bc80      	pop	{r7}
 8004202:	4770      	bx	lr
 8004204:	0800413b 	.word	0x0800413b
 8004208:	08004129 	.word	0x08004129
 800420c:	0800414d 	.word	0x0800414d
 8004210:	08000c69 	.word	0x08000c69
 8004214:	0800415f 	.word	0x0800415f
 8004218:	08004171 	.word	0x08004171
 800421c:	08004183 	.word	0x08004183
 8004220:	08004195 	.word	0x08004195
 8004224:	080041a7 	.word	0x080041a7

08004228 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	603b      	str	r3, [r7, #0]
 8004234:	4613      	mov	r3, r2
 8004236:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004238:	e02c      	b.n	8004294 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004240:	d028      	beq.n	8004294 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d007      	beq.n	8004258 <UART_WaitOnFlagUntilTimeout+0x30>
 8004248:	f7fd f84e 	bl	80012e8 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	429a      	cmp	r2, r3
 8004256:	d21d      	bcs.n	8004294 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68da      	ldr	r2, [r3, #12]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004266:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	695a      	ldr	r2, [r3, #20]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 0201 	bic.w	r2, r2, #1
 8004276:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2220      	movs	r2, #32
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e00f      	b.n	80042b4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	4013      	ands	r3, r2
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	bf0c      	ite	eq
 80042a4:	2301      	moveq	r3, #1
 80042a6:	2300      	movne	r3, #0
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	461a      	mov	r2, r3
 80042ac:	79fb      	ldrb	r3, [r7, #7]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d0c3      	beq.n	800423a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	4613      	mov	r3, r2
 80042c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	88fa      	ldrh	r2, [r7, #6]
 80042d4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	88fa      	ldrh	r2, [r7, #6]
 80042da:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2222      	movs	r2, #34	; 0x22
 80042e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68da      	ldr	r2, [r3, #12]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004300:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	695a      	ldr	r2, [r3, #20]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0201 	orr.w	r2, r2, #1
 8004310:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68da      	ldr	r2, [r3, #12]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f042 0220 	orr.w	r2, r2, #32
 8004320:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	bc80      	pop	{r7}
 800432c:	4770      	bx	lr

0800432e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800432e:	b480      	push	{r7}
 8004330:	b083      	sub	sp, #12
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68da      	ldr	r2, [r3, #12]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004344:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	695a      	ldr	r2, [r3, #20]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0201 	bic.w	r2, r2, #1
 8004354:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435a:	2b01      	cmp	r3, #1
 800435c:	d107      	bne.n	800436e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68da      	ldr	r2, [r3, #12]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0210 	bic.w	r2, r2, #16
 800436c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2220      	movs	r2, #32
 8004372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800437c:	bf00      	nop
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	bc80      	pop	{r7}
 8004384:	4770      	bx	lr

08004386 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b084      	sub	sp, #16
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004392:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a4:	68f8      	ldr	r0, [r7, #12]
 80043a6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043a8:	bf00      	nop
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b21      	cmp	r3, #33	; 0x21
 80043c2:	d13e      	bne.n	8004442 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043cc:	d114      	bne.n	80043f8 <UART_Transmit_IT+0x48>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d110      	bne.n	80043f8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	881b      	ldrh	r3, [r3, #0]
 80043e0:	461a      	mov	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043ea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	1c9a      	adds	r2, r3, #2
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	621a      	str	r2, [r3, #32]
 80043f6:	e008      	b.n	800440a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	1c59      	adds	r1, r3, #1
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6211      	str	r1, [r2, #32]
 8004402:	781a      	ldrb	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800440e:	b29b      	uxth	r3, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	b29b      	uxth	r3, r3
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	4619      	mov	r1, r3
 8004418:	84d1      	strh	r1, [r2, #38]	; 0x26
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10f      	bne.n	800443e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800442c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68da      	ldr	r2, [r3, #12]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800443c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	e000      	b.n	8004444 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004442:	2302      	movs	r3, #2
  }
}
 8004444:	4618      	mov	r0, r3
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	bc80      	pop	{r7}
 800444c:	4770      	bx	lr

0800444e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b082      	sub	sp, #8
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68da      	ldr	r2, [r3, #12]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004464:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2220      	movs	r2, #32
 800446a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b22      	cmp	r3, #34	; 0x22
 8004492:	f040 809b 	bne.w	80045cc <UART_Receive_IT+0x14c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800449e:	d117      	bne.n	80044d0 <UART_Receive_IT+0x50>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d113      	bne.n	80044d0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80044a8:	2300      	movs	r3, #0
 80044aa:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b0:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044be:	b29a      	uxth	r2, r3
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c8:	1c9a      	adds	r2, r3, #2
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	629a      	str	r2, [r3, #40]	; 0x28
 80044ce:	e026      	b.n	800451e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d4:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044e2:	d007      	beq.n	80044f4 <UART_Receive_IT+0x74>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10a      	bne.n	8004502 <UART_Receive_IT+0x82>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d106      	bne.n	8004502 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	701a      	strb	r2, [r3, #0]
 8004500:	e008      	b.n	8004514 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	b2db      	uxtb	r3, r3
 800450a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800450e:	b2da      	uxtb	r2, r3
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004518:	1c5a      	adds	r2, r3, #1
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004522:	b29b      	uxth	r3, r3
 8004524:	3b01      	subs	r3, #1
 8004526:	b29b      	uxth	r3, r3
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	4619      	mov	r1, r3
 800452c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800452e:	2b00      	cmp	r3, #0
 8004530:	d14a      	bne.n	80045c8 <UART_Receive_IT+0x148>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68da      	ldr	r2, [r3, #12]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 0220 	bic.w	r2, r2, #32
 8004540:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68da      	ldr	r2, [r3, #12]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004550:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	695a      	ldr	r2, [r3, #20]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0201 	bic.w	r2, r2, #1
 8004560:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2220      	movs	r2, #32
 8004566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456e:	2b01      	cmp	r3, #1
 8004570:	d124      	bne.n	80045bc <UART_Receive_IT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68da      	ldr	r2, [r3, #12]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 0210 	bic.w	r2, r2, #16
 8004586:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0310 	and.w	r3, r3, #16
 8004592:	2b10      	cmp	r3, #16
 8004594:	d10a      	bne.n	80045ac <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004596:	2300      	movs	r3, #0
 8004598:	60fb      	str	r3, [r7, #12]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	60fb      	str	r3, [r7, #12]
 80045aa:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 80045b4:	4611      	mov	r1, r2
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	4798      	blx	r3
 80045ba:	e003      	b.n	80045c4 <UART_Receive_IT+0x144>
      else
      {
       /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	4798      	blx	r3
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80045c4:	2300      	movs	r3, #0
 80045c6:	e002      	b.n	80045ce <UART_Receive_IT+0x14e>
    }
    return HAL_OK;
 80045c8:	2300      	movs	r3, #0
 80045ca:	e000      	b.n	80045ce <UART_Receive_IT+0x14e>
  }
  else
  {
    return HAL_BUSY;
 80045cc:	2302      	movs	r3, #2
  }
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3718      	adds	r7, #24
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
	...

080045d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68da      	ldr	r2, [r3, #12]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	431a      	orrs	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	4313      	orrs	r3, r2
 8004606:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004612:	f023 030c 	bic.w	r3, r3, #12
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6812      	ldr	r2, [r2, #0]
 800461a:	68b9      	ldr	r1, [r7, #8]
 800461c:	430b      	orrs	r3, r1
 800461e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	699a      	ldr	r2, [r3, #24]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a2c      	ldr	r2, [pc, #176]	; (80046ec <UART_SetConfig+0x114>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d103      	bne.n	8004648 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004640:	f7fe f87e 	bl	8002740 <HAL_RCC_GetPCLK2Freq>
 8004644:	60f8      	str	r0, [r7, #12]
 8004646:	e002      	b.n	800464e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004648:	f7fe f866 	bl	8002718 <HAL_RCC_GetPCLK1Freq>
 800464c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	4613      	mov	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	009a      	lsls	r2, r3, #2
 8004658:	441a      	add	r2, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	fbb2 f3f3 	udiv	r3, r2, r3
 8004664:	4a22      	ldr	r2, [pc, #136]	; (80046f0 <UART_SetConfig+0x118>)
 8004666:	fba2 2303 	umull	r2, r3, r2, r3
 800466a:	095b      	lsrs	r3, r3, #5
 800466c:	0119      	lsls	r1, r3, #4
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	4613      	mov	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	009a      	lsls	r2, r3, #2
 8004678:	441a      	add	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	fbb2 f2f3 	udiv	r2, r2, r3
 8004684:	4b1a      	ldr	r3, [pc, #104]	; (80046f0 <UART_SetConfig+0x118>)
 8004686:	fba3 0302 	umull	r0, r3, r3, r2
 800468a:	095b      	lsrs	r3, r3, #5
 800468c:	2064      	movs	r0, #100	; 0x64
 800468e:	fb00 f303 	mul.w	r3, r0, r3
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	011b      	lsls	r3, r3, #4
 8004696:	3332      	adds	r3, #50	; 0x32
 8004698:	4a15      	ldr	r2, [pc, #84]	; (80046f0 <UART_SetConfig+0x118>)
 800469a:	fba2 2303 	umull	r2, r3, r2, r3
 800469e:	095b      	lsrs	r3, r3, #5
 80046a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046a4:	4419      	add	r1, r3
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	4613      	mov	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	009a      	lsls	r2, r3, #2
 80046b0:	441a      	add	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80046bc:	4b0c      	ldr	r3, [pc, #48]	; (80046f0 <UART_SetConfig+0x118>)
 80046be:	fba3 0302 	umull	r0, r3, r3, r2
 80046c2:	095b      	lsrs	r3, r3, #5
 80046c4:	2064      	movs	r0, #100	; 0x64
 80046c6:	fb00 f303 	mul.w	r3, r0, r3
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	3332      	adds	r3, #50	; 0x32
 80046d0:	4a07      	ldr	r2, [pc, #28]	; (80046f0 <UART_SetConfig+0x118>)
 80046d2:	fba2 2303 	umull	r2, r3, r2, r3
 80046d6:	095b      	lsrs	r3, r3, #5
 80046d8:	f003 020f 	and.w	r2, r3, #15
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	440a      	add	r2, r1
 80046e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046e4:	bf00      	nop
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	40013800 	.word	0x40013800
 80046f0:	51eb851f 	.word	0x51eb851f

080046f4 <BLUETOOTH_CONTROL_sendCommand>:
static void    BLUETOOTH_CONTROL_sendCommand(uint8_t command);
static uint8_t BLUETOOTH_CONTROL_getDataKey(void);
static void    BLUETOOTH_CONTROL_clearData(void);

void BLUETOOTH_CONTROL_sendCommand(uint8_t command)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	4603      	mov	r3, r0
 80046fc:	71fb      	strb	r3, [r7, #7]
  volatile uint16_t ref=0x01;
 80046fe:	2301      	movs	r3, #1
 8004700:	81fb      	strh	r3, [r7, #14]
  BLUETOOTH_CONTROL_buffer[1] = 0;
 8004702:	4b20      	ldr	r3, [pc, #128]	; (8004784 <BLUETOOTH_CONTROL_sendCommand+0x90>)
 8004704:	2200      	movs	r2, #0
 8004706:	705a      	strb	r2, [r3, #1]
  for(ref=0x01;ref<0x0100;ref<<=1)
 8004708:	2301      	movs	r3, #1
 800470a:	81fb      	strh	r3, [r7, #14]
 800470c:	e02e      	b.n	800476c <BLUETOOTH_CONTROL_sendCommand+0x78>
  {
    if(ref&command)
 800470e:	89fb      	ldrh	r3, [r7, #14]
 8004710:	b29b      	uxth	r3, r3
 8004712:	461a      	mov	r2, r3
 8004714:	79fb      	ldrb	r3, [r7, #7]
 8004716:	4013      	ands	r3, r2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <BLUETOOTH_CONTROL_sendCommand+0x30>
    {
      DO_H;
 800471c:	4b1a      	ldr	r3, [pc, #104]	; (8004788 <BLUETOOTH_CONTROL_sendCommand+0x94>)
 800471e:	2201      	movs	r2, #1
 8004720:	601a      	str	r2, [r3, #0]
 8004722:	e002      	b.n	800472a <BLUETOOTH_CONTROL_sendCommand+0x36>
    }
    else DO_L;
 8004724:	4b18      	ldr	r3, [pc, #96]	; (8004788 <BLUETOOTH_CONTROL_sendCommand+0x94>)
 8004726:	2200      	movs	r2, #0
 8004728:	601a      	str	r2, [r3, #0]

    CLK_H;
 800472a:	4b18      	ldr	r3, [pc, #96]	; (800478c <BLUETOOTH_CONTROL_sendCommand+0x98>)
 800472c:	2201      	movs	r2, #1
 800472e:	601a      	str	r2, [r3, #0]
    UTILS_delayUs(5);
 8004730:	2005      	movs	r0, #5
 8004732:	f000 fbb5 	bl	8004ea0 <UTILS_delayUs>
    CLK_L;
 8004736:	4b15      	ldr	r3, [pc, #84]	; (800478c <BLUETOOTH_CONTROL_sendCommand+0x98>)
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]
    UTILS_delayUs(5);
 800473c:	2005      	movs	r0, #5
 800473e:	f000 fbaf 	bl	8004ea0 <UTILS_delayUs>
    CLK_H;
 8004742:	4b12      	ldr	r3, [pc, #72]	; (800478c <BLUETOOTH_CONTROL_sendCommand+0x98>)
 8004744:	2201      	movs	r2, #1
 8004746:	601a      	str	r2, [r3, #0]
    if(DI)
 8004748:	4b11      	ldr	r3, [pc, #68]	; (8004790 <BLUETOOTH_CONTROL_sendCommand+0x9c>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d008      	beq.n	8004762 <BLUETOOTH_CONTROL_sendCommand+0x6e>
      BLUETOOTH_CONTROL_buffer[1] = ref|BLUETOOTH_CONTROL_buffer[1];
 8004750:	89fb      	ldrh	r3, [r7, #14]
 8004752:	b29b      	uxth	r3, r3
 8004754:	b2da      	uxtb	r2, r3
 8004756:	4b0b      	ldr	r3, [pc, #44]	; (8004784 <BLUETOOTH_CONTROL_sendCommand+0x90>)
 8004758:	785b      	ldrb	r3, [r3, #1]
 800475a:	4313      	orrs	r3, r2
 800475c:	b2da      	uxtb	r2, r3
 800475e:	4b09      	ldr	r3, [pc, #36]	; (8004784 <BLUETOOTH_CONTROL_sendCommand+0x90>)
 8004760:	705a      	strb	r2, [r3, #1]
  for(ref=0x01;ref<0x0100;ref<<=1)
 8004762:	89fb      	ldrh	r3, [r7, #14]
 8004764:	b29b      	uxth	r3, r3
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	b29b      	uxth	r3, r3
 800476a:	81fb      	strh	r3, [r7, #14]
 800476c:	89fb      	ldrh	r3, [r7, #14]
 800476e:	b29b      	uxth	r3, r3
 8004770:	2bff      	cmp	r3, #255	; 0xff
 8004772:	d9cc      	bls.n	800470e <BLUETOOTH_CONTROL_sendCommand+0x1a>
  }
  UTILS_delayUs(16);
 8004774:	2010      	movs	r0, #16
 8004776:	f000 fb93 	bl	8004ea0 <UTILS_delayUs>

  return;
 800477a:	bf00      	nop
}
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20000298 	.word	0x20000298
 8004788:	42220184 	.word	0x42220184
 800478c:	42210190 	.word	0x42210190
 8004790:	42220108 	.word	0x42220108

08004794 <BLUETOOTH_CONTROL_readData>:

void BLUETOOTH_CONTROL_readData(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
  volatile uint8_t byte=0;
 800479a:	2300      	movs	r3, #0
 800479c:	71fb      	strb	r3, [r7, #7]
  volatile uint16_t ref=0x01;
 800479e:	2301      	movs	r3, #1
 80047a0:	80bb      	strh	r3, [r7, #4]
  CS_L;
 80047a2:	4b26      	ldr	r3, [pc, #152]	; (800483c <BLUETOOTH_CONTROL_readData+0xa8>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	601a      	str	r2, [r3, #0]
  BLUETOOTH_CONTROL_sendCommand(0x01);
 80047a8:	2001      	movs	r0, #1
 80047aa:	f7ff ffa3 	bl	80046f4 <BLUETOOTH_CONTROL_sendCommand>
  BLUETOOTH_CONTROL_sendCommand(0x42);
 80047ae:	2042      	movs	r0, #66	; 0x42
 80047b0:	f7ff ffa0 	bl	80046f4 <BLUETOOTH_CONTROL_sendCommand>
  for(byte=2;byte<9;byte++)
 80047b4:	2302      	movs	r3, #2
 80047b6:	71fb      	strb	r3, [r7, #7]
 80047b8:	e034      	b.n	8004824 <BLUETOOTH_CONTROL_readData+0x90>
  {
    for(ref=0x01;ref<0x100;ref<<=1)
 80047ba:	2301      	movs	r3, #1
 80047bc:	80bb      	strh	r3, [r7, #4]
 80047be:	e025      	b.n	800480c <BLUETOOTH_CONTROL_readData+0x78>
    {
      CLK_H;
 80047c0:	4b1f      	ldr	r3, [pc, #124]	; (8004840 <BLUETOOTH_CONTROL_readData+0xac>)
 80047c2:	2201      	movs	r2, #1
 80047c4:	601a      	str	r2, [r3, #0]
      UTILS_delayUs(5);
 80047c6:	2005      	movs	r0, #5
 80047c8:	f000 fb6a 	bl	8004ea0 <UTILS_delayUs>
      CLK_L;
 80047cc:	4b1c      	ldr	r3, [pc, #112]	; (8004840 <BLUETOOTH_CONTROL_readData+0xac>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	601a      	str	r2, [r3, #0]
      UTILS_delayUs(5);
 80047d2:	2005      	movs	r0, #5
 80047d4:	f000 fb64 	bl	8004ea0 <UTILS_delayUs>
      CLK_H;
 80047d8:	4b19      	ldr	r3, [pc, #100]	; (8004840 <BLUETOOTH_CONTROL_readData+0xac>)
 80047da:	2201      	movs	r2, #1
 80047dc:	601a      	str	r2, [r3, #0]
          if(DI)
 80047de:	4b19      	ldr	r3, [pc, #100]	; (8004844 <BLUETOOTH_CONTROL_readData+0xb0>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00d      	beq.n	8004802 <BLUETOOTH_CONTROL_readData+0x6e>
          BLUETOOTH_CONTROL_buffer[byte] = ref|BLUETOOTH_CONTROL_buffer[byte];
 80047e6:	88bb      	ldrh	r3, [r7, #4]
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	79fb      	ldrb	r3, [r7, #7]
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	4619      	mov	r1, r3
 80047f2:	4b15      	ldr	r3, [pc, #84]	; (8004848 <BLUETOOTH_CONTROL_readData+0xb4>)
 80047f4:	5c5b      	ldrb	r3, [r3, r1]
 80047f6:	79f9      	ldrb	r1, [r7, #7]
 80047f8:	b2c9      	uxtb	r1, r1
 80047fa:	4313      	orrs	r3, r2
 80047fc:	b2da      	uxtb	r2, r3
 80047fe:	4b12      	ldr	r3, [pc, #72]	; (8004848 <BLUETOOTH_CONTROL_readData+0xb4>)
 8004800:	545a      	strb	r2, [r3, r1]
    for(ref=0x01;ref<0x100;ref<<=1)
 8004802:	88bb      	ldrh	r3, [r7, #4]
 8004804:	b29b      	uxth	r3, r3
 8004806:	005b      	lsls	r3, r3, #1
 8004808:	b29b      	uxth	r3, r3
 800480a:	80bb      	strh	r3, [r7, #4]
 800480c:	88bb      	ldrh	r3, [r7, #4]
 800480e:	b29b      	uxth	r3, r3
 8004810:	2bff      	cmp	r3, #255	; 0xff
 8004812:	d9d5      	bls.n	80047c0 <BLUETOOTH_CONTROL_readData+0x2c>
    }
        UTILS_delayUs(16);
 8004814:	2010      	movs	r0, #16
 8004816:	f000 fb43 	bl	8004ea0 <UTILS_delayUs>
  for(byte=2;byte<9;byte++)
 800481a:	79fb      	ldrb	r3, [r7, #7]
 800481c:	b2db      	uxtb	r3, r3
 800481e:	3301      	adds	r3, #1
 8004820:	b2db      	uxtb	r3, r3
 8004822:	71fb      	strb	r3, [r7, #7]
 8004824:	79fb      	ldrb	r3, [r7, #7]
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b08      	cmp	r3, #8
 800482a:	d9c6      	bls.n	80047ba <BLUETOOTH_CONTROL_readData+0x26>
  }
  CS_H;
 800482c:	4b03      	ldr	r3, [pc, #12]	; (800483c <BLUETOOTH_CONTROL_readData+0xa8>)
 800482e:	2201      	movs	r2, #1
 8004830:	601a      	str	r2, [r3, #0]

  return;
 8004832:	bf00      	nop
}
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	4222018c 	.word	0x4222018c
 8004840:	42210190 	.word	0x42210190
 8004844:	42220108 	.word	0x42220108
 8004848:	20000298 	.word	0x20000298

0800484c <BLUETOOTH_CONTROL_getDataKey>:

uint8_t BLUETOOTH_CONTROL_getDataKey()
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b082      	sub	sp, #8
 8004850:	af00      	add	r7, sp, #0
  uint8_t index;
  uint16_t handkey;

  BLUETOOTH_CONTROL_clearData();
 8004852:	f000 f82f 	bl	80048b4 <BLUETOOTH_CONTROL_clearData>
  BLUETOOTH_CONTROL_readData();
 8004856:	f7ff ff9d 	bl	8004794 <BLUETOOTH_CONTROL_readData>
  handkey=(BLUETOOTH_CONTROL_buffer[4]<<8)|BLUETOOTH_CONTROL_buffer[3];
 800485a:	4b14      	ldr	r3, [pc, #80]	; (80048ac <BLUETOOTH_CONTROL_getDataKey+0x60>)
 800485c:	791b      	ldrb	r3, [r3, #4]
 800485e:	021b      	lsls	r3, r3, #8
 8004860:	b21a      	sxth	r2, r3
 8004862:	4b12      	ldr	r3, [pc, #72]	; (80048ac <BLUETOOTH_CONTROL_getDataKey+0x60>)
 8004864:	78db      	ldrb	r3, [r3, #3]
 8004866:	b21b      	sxth	r3, r3
 8004868:	4313      	orrs	r3, r2
 800486a:	b21b      	sxth	r3, r3
 800486c:	80bb      	strh	r3, [r7, #4]
  for(index=0;index<16;index++)
 800486e:	2300      	movs	r3, #0
 8004870:	71fb      	strb	r3, [r7, #7]
 8004872:	e012      	b.n	800489a <BLUETOOTH_CONTROL_getDataKey+0x4e>
  {
    if((handkey&(1<<(BLUETOOTH_CONTROL_mask[index]-1)))==0)
 8004874:	88ba      	ldrh	r2, [r7, #4]
 8004876:	79fb      	ldrb	r3, [r7, #7]
 8004878:	490d      	ldr	r1, [pc, #52]	; (80048b0 <BLUETOOTH_CONTROL_getDataKey+0x64>)
 800487a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800487e:	3b01      	subs	r3, #1
 8004880:	fa42 f303 	asr.w	r3, r2, r3
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b00      	cmp	r3, #0
 800488a:	d103      	bne.n	8004894 <BLUETOOTH_CONTROL_getDataKey+0x48>
    return index+1;
 800488c:	79fb      	ldrb	r3, [r7, #7]
 800488e:	3301      	adds	r3, #1
 8004890:	b2db      	uxtb	r3, r3
 8004892:	e006      	b.n	80048a2 <BLUETOOTH_CONTROL_getDataKey+0x56>
  for(index=0;index<16;index++)
 8004894:	79fb      	ldrb	r3, [r7, #7]
 8004896:	3301      	adds	r3, #1
 8004898:	71fb      	strb	r3, [r7, #7]
 800489a:	79fb      	ldrb	r3, [r7, #7]
 800489c:	2b0f      	cmp	r3, #15
 800489e:	d9e9      	bls.n	8004874 <BLUETOOTH_CONTROL_getDataKey+0x28>
  }

  return 0;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20000298 	.word	0x20000298
 80048b0:	20000010 	.word	0x20000010

080048b4 <BLUETOOTH_CONTROL_clearData>:

void BLUETOOTH_CONTROL_clearData()
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
  uint8_t a;
  for(a=0;a<9;a++)
 80048ba:	2300      	movs	r3, #0
 80048bc:	71fb      	strb	r3, [r7, #7]
 80048be:	e006      	b.n	80048ce <BLUETOOTH_CONTROL_clearData+0x1a>
    BLUETOOTH_CONTROL_buffer[a]=0x00;
 80048c0:	79fb      	ldrb	r3, [r7, #7]
 80048c2:	4a07      	ldr	r2, [pc, #28]	; (80048e0 <BLUETOOTH_CONTROL_clearData+0x2c>)
 80048c4:	2100      	movs	r1, #0
 80048c6:	54d1      	strb	r1, [r2, r3]
  for(a=0;a<9;a++)
 80048c8:	79fb      	ldrb	r3, [r7, #7]
 80048ca:	3301      	adds	r3, #1
 80048cc:	71fb      	strb	r3, [r7, #7]
 80048ce:	79fb      	ldrb	r3, [r7, #7]
 80048d0:	2b08      	cmp	r3, #8
 80048d2:	d9f5      	bls.n	80048c0 <BLUETOOTH_CONTROL_clearData+0xc>

  return;
 80048d4:	bf00      	nop
}
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	bc80      	pop	{r7}
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	20000298 	.word	0x20000298

080048e4 <BLUETOOTH_CONTROL_init>:

void BLUETOOTH_CONTROL_init(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  LOG_info("Initializing Bluetooth control");
 80048e8:	4b20      	ldr	r3, [pc, #128]	; (800496c <BLUETOOTH_CONTROL_init+0x88>)
 80048ea:	228d      	movs	r2, #141	; 0x8d
 80048ec:	4920      	ldr	r1, [pc, #128]	; (8004970 <BLUETOOTH_CONTROL_init+0x8c>)
 80048ee:	2001      	movs	r0, #1
 80048f0:	f000 f970 	bl	8004bd4 <LOG_log>

  RCC->APB2ENR|=1<<2;     // PORTA
 80048f4:	4b1f      	ldr	r3, [pc, #124]	; (8004974 <BLUETOOTH_CONTROL_init+0x90>)
 80048f6:	699b      	ldr	r3, [r3, #24]
 80048f8:	4a1e      	ldr	r2, [pc, #120]	; (8004974 <BLUETOOTH_CONTROL_init+0x90>)
 80048fa:	f043 0304 	orr.w	r3, r3, #4
 80048fe:	6193      	str	r3, [r2, #24]
  RCC->APB2ENR|=1<<4;     // PORTC
 8004900:	4b1c      	ldr	r3, [pc, #112]	; (8004974 <BLUETOOTH_CONTROL_init+0x90>)
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	4a1b      	ldr	r2, [pc, #108]	; (8004974 <BLUETOOTH_CONTROL_init+0x90>)
 8004906:	f043 0310 	orr.w	r3, r3, #16
 800490a:	6193      	str	r3, [r2, #24]
  GPIOC->CRL&=0XFFFFF0FF;
 800490c:	4b1a      	ldr	r3, [pc, #104]	; (8004978 <BLUETOOTH_CONTROL_init+0x94>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a19      	ldr	r2, [pc, #100]	; (8004978 <BLUETOOTH_CONTROL_init+0x94>)
 8004912:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004916:	6013      	str	r3, [r2, #0]
  GPIOC->CRL|=0X00000800;
 8004918:	4b17      	ldr	r3, [pc, #92]	; (8004978 <BLUETOOTH_CONTROL_init+0x94>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a16      	ldr	r2, [pc, #88]	; (8004978 <BLUETOOTH_CONTROL_init+0x94>)
 800491e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004922:	6013      	str	r3, [r2, #0]

  RCC->APB2ENR|=1<<4;    // PORTC
 8004924:	4b13      	ldr	r3, [pc, #76]	; (8004974 <BLUETOOTH_CONTROL_init+0x90>)
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	4a12      	ldr	r2, [pc, #72]	; (8004974 <BLUETOOTH_CONTROL_init+0x90>)
 800492a:	f043 0310 	orr.w	r3, r3, #16
 800492e:	6193      	str	r3, [r2, #24]
  GPIOC->CRL&=0XFFFF0F0F;
 8004930:	4b11      	ldr	r3, [pc, #68]	; (8004978 <BLUETOOTH_CONTROL_init+0x94>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a10      	ldr	r2, [pc, #64]	; (8004978 <BLUETOOTH_CONTROL_init+0x94>)
 8004936:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800493a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800493e:	6013      	str	r3, [r2, #0]
  GPIOC->CRL|=0X00003030; // PC1 PC3
 8004940:	4b0d      	ldr	r3, [pc, #52]	; (8004978 <BLUETOOTH_CONTROL_init+0x94>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a0c      	ldr	r2, [pc, #48]	; (8004978 <BLUETOOTH_CONTROL_init+0x94>)
 8004946:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800494a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800494e:	6013      	str	r3, [r2, #0]

  GPIOA->CRL&=0XFFF0FFFF;
 8004950:	4b0a      	ldr	r3, [pc, #40]	; (800497c <BLUETOOTH_CONTROL_init+0x98>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a09      	ldr	r2, [pc, #36]	; (800497c <BLUETOOTH_CONTROL_init+0x98>)
 8004956:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800495a:	6013      	str	r3, [r2, #0]
  GPIOA->CRL|=0X00030000; // PA4
 800495c:	4b07      	ldr	r3, [pc, #28]	; (800497c <BLUETOOTH_CONTROL_init+0x98>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a06      	ldr	r2, [pc, #24]	; (800497c <BLUETOOTH_CONTROL_init+0x98>)
 8004962:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8004966:	6013      	str	r3, [r2, #0]

  return;
 8004968:	bf00      	nop
}
 800496a:	bd80      	pop	{r7, pc}
 800496c:	0800818c 	.word	0x0800818c
 8004970:	080081ac 	.word	0x080081ac
 8004974:	40021000 	.word	0x40021000
 8004978:	40011000 	.word	0x40011000
 800497c:	40010800 	.word	0x40010800

08004980 <BLUETOOTH_CONTROL_receiveData>:

void BLUETOOTH_CONTROL_receiveData(void)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	af00      	add	r7, sp, #0
  LOG_info("Receiving Bluetooth data");
 8004984:	4b0e      	ldr	r3, [pc, #56]	; (80049c0 <BLUETOOTH_CONTROL_receiveData+0x40>)
 8004986:	22a0      	movs	r2, #160	; 0xa0
 8004988:	490e      	ldr	r1, [pc, #56]	; (80049c4 <BLUETOOTH_CONTROL_receiveData+0x44>)
 800498a:	2001      	movs	r0, #1
 800498c:	f000 f922 	bl	8004bd4 <LOG_log>

  PS2_LX = BLUETOOTH_CONTROL_buffer[BLUETOOTH_CONTROL_LEFT_X];
 8004990:	4b0d      	ldr	r3, [pc, #52]	; (80049c8 <BLUETOOTH_CONTROL_receiveData+0x48>)
 8004992:	79da      	ldrb	r2, [r3, #7]
 8004994:	4b0d      	ldr	r3, [pc, #52]	; (80049cc <BLUETOOTH_CONTROL_receiveData+0x4c>)
 8004996:	701a      	strb	r2, [r3, #0]
  PS2_LY = BLUETOOTH_CONTROL_buffer[BLUETOOTH_CONTROL_LEFT_Y];
 8004998:	4b0b      	ldr	r3, [pc, #44]	; (80049c8 <BLUETOOTH_CONTROL_receiveData+0x48>)
 800499a:	7a1a      	ldrb	r2, [r3, #8]
 800499c:	4b0c      	ldr	r3, [pc, #48]	; (80049d0 <BLUETOOTH_CONTROL_receiveData+0x50>)
 800499e:	701a      	strb	r2, [r3, #0]
  PS2_RX = BLUETOOTH_CONTROL_buffer[BLUETOOTH_CONTROL_RIGHT_X];
 80049a0:	4b09      	ldr	r3, [pc, #36]	; (80049c8 <BLUETOOTH_CONTROL_receiveData+0x48>)
 80049a2:	795a      	ldrb	r2, [r3, #5]
 80049a4:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <BLUETOOTH_CONTROL_receiveData+0x54>)
 80049a6:	701a      	strb	r2, [r3, #0]
  PS2_RY = BLUETOOTH_CONTROL_buffer[BLUETOOTH_CONTROL_RIGHT_Y];
 80049a8:	4b07      	ldr	r3, [pc, #28]	; (80049c8 <BLUETOOTH_CONTROL_receiveData+0x48>)
 80049aa:	799a      	ldrb	r2, [r3, #6]
 80049ac:	4b0a      	ldr	r3, [pc, #40]	; (80049d8 <BLUETOOTH_CONTROL_receiveData+0x58>)
 80049ae:	701a      	strb	r2, [r3, #0]

  PS2_KEY = BLUETOOTH_CONTROL_getDataKey();
 80049b0:	f7ff ff4c 	bl	800484c <BLUETOOTH_CONTROL_getDataKey>
 80049b4:	4603      	mov	r3, r0
 80049b6:	461a      	mov	r2, r3
 80049b8:	4b08      	ldr	r3, [pc, #32]	; (80049dc <BLUETOOTH_CONTROL_receiveData+0x5c>)
 80049ba:	701a      	strb	r2, [r3, #0]

  return;
 80049bc:	bf00      	nop
}
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	080081cc 	.word	0x080081cc
 80049c4:	080081ac 	.word	0x080081ac
 80049c8:	20000298 	.word	0x20000298
 80049cc:	20000621 	.word	0x20000621
 80049d0:	20000622 	.word	0x20000622
 80049d4:	20000623 	.word	0x20000623
 80049d8:	20000620 	.word	0x20000620
 80049dc:	20000624 	.word	0x20000624

080049e0 <CONSOLE_uartInit>:

UART_HandleTypeDef *CONSOLE_uartHandle;
uint8_t CONSOLE_rxBuffer[12] = {0};

void CONSOLE_uartInit(UART_HandleTypeDef *huart)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  CONSOLE_uartHandle = huart;
 80049e8:	4a03      	ldr	r2, [pc, #12]	; (80049f8 <CONSOLE_uartInit+0x18>)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6013      	str	r3, [r2, #0]

  return;
 80049ee:	bf00      	nop
}
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bc80      	pop	{r7}
 80049f6:	4770      	bx	lr
 80049f8:	20000628 	.word	0x20000628

080049fc <CONSOLE_receiveData>:

void CONSOLE_receiveData()
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  HAL_UART_Receive_IT(CONSOLE_uartHandle, CONSOLE_rxBuffer, 12);
 8004a00:	4b07      	ldr	r3, [pc, #28]	; (8004a20 <CONSOLE_receiveData+0x24>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	220c      	movs	r2, #12
 8004a06:	4907      	ldr	r1, [pc, #28]	; (8004a24 <CONSOLE_receiveData+0x28>)
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7ff f9ad 	bl	8003d68 <HAL_UART_Receive_IT>

  /* Resend received data (echo) */
  HAL_UART_Transmit(CONSOLE_uartHandle, CONSOLE_rxBuffer, 12, 100);
 8004a0e:	4b04      	ldr	r3, [pc, #16]	; (8004a20 <CONSOLE_receiveData+0x24>)
 8004a10:	6818      	ldr	r0, [r3, #0]
 8004a12:	2364      	movs	r3, #100	; 0x64
 8004a14:	220c      	movs	r2, #12
 8004a16:	4903      	ldr	r1, [pc, #12]	; (8004a24 <CONSOLE_receiveData+0x28>)
 8004a18:	f7ff f914 	bl	8003c44 <HAL_UART_Transmit>

  return;
 8004a1c:	bf00      	nop
}
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	20000628 	.word	0x20000628
 8004a24:	200002a4 	.word	0x200002a4

08004a28 <fputc>:

int fputc(int character, FILE *fileDescriptor)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  HAL_UART_Transmit(CONSOLE_uartHandle, (uint8_t *)&character, 1, 100);
 8004a32:	4b06      	ldr	r3, [pc, #24]	; (8004a4c <fputc+0x24>)
 8004a34:	6818      	ldr	r0, [r3, #0]
 8004a36:	1d39      	adds	r1, r7, #4
 8004a38:	2364      	movs	r3, #100	; 0x64
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f7ff f902 	bl	8003c44 <HAL_UART_Transmit>

  return character;
 8004a40:	687b      	ldr	r3, [r7, #4]
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20000628 	.word	0x20000628

08004a50 <DRIVE_init>:
#include "utils.h"

MOTOR_Handle motor1, motor2, motor3, motor4;

void DRIVE_init(TIM_HandleTypeDef *htim)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing Drive module");
 8004a58:	4b3f      	ldr	r3, [pc, #252]	; (8004b58 <DRIVE_init+0x108>)
 8004a5a:	220d      	movs	r2, #13
 8004a5c:	493f      	ldr	r1, [pc, #252]	; (8004b5c <DRIVE_init+0x10c>)
 8004a5e:	2001      	movs	r0, #1
 8004a60:	f000 f8b8 	bl	8004bd4 <LOG_log>

  motor1.dirPin1Port    = MOTOR_1_IN_1_GPIO_Port;
 8004a64:	4b3e      	ldr	r3, [pc, #248]	; (8004b60 <DRIVE_init+0x110>)
 8004a66:	4a3f      	ldr	r2, [pc, #252]	; (8004b64 <DRIVE_init+0x114>)
 8004a68:	60da      	str	r2, [r3, #12]
  motor1.dirPin1        = MOTOR_1_IN_1_Pin;
 8004a6a:	4b3d      	ldr	r3, [pc, #244]	; (8004b60 <DRIVE_init+0x110>)
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	615a      	str	r2, [r3, #20]
  motor1.dirPin2Port    = MOTOR_1_IN_2_GPIO_Port;
 8004a70:	4b3b      	ldr	r3, [pc, #236]	; (8004b60 <DRIVE_init+0x110>)
 8004a72:	4a3c      	ldr	r2, [pc, #240]	; (8004b64 <DRIVE_init+0x114>)
 8004a74:	611a      	str	r2, [r3, #16]
  motor1.dirPin2        = MOTOR_1_IN_2_Pin;
 8004a76:	4b3a      	ldr	r3, [pc, #232]	; (8004b60 <DRIVE_init+0x110>)
 8004a78:	2210      	movs	r2, #16
 8004a7a:	619a      	str	r2, [r3, #24]
  motor1.pwmTimerHandle = htim;
 8004a7c:	4a38      	ldr	r2, [pc, #224]	; (8004b60 <DRIVE_init+0x110>)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6253      	str	r3, [r2, #36]	; 0x24
  motor1.pwmChannel     = TIM_CHANNEL_1;
 8004a82:	4b37      	ldr	r3, [pc, #220]	; (8004b60 <DRIVE_init+0x110>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	629a      	str	r2, [r3, #40]	; 0x28

  motor2.dirPin1Port    = MOTOR_2_IN_1_GPIO_Port;
 8004a88:	4b37      	ldr	r3, [pc, #220]	; (8004b68 <DRIVE_init+0x118>)
 8004a8a:	4a38      	ldr	r2, [pc, #224]	; (8004b6c <DRIVE_init+0x11c>)
 8004a8c:	60da      	str	r2, [r3, #12]
  motor2.dirPin1        = MOTOR_2_IN_1_Pin;
 8004a8e:	4b36      	ldr	r3, [pc, #216]	; (8004b68 <DRIVE_init+0x118>)
 8004a90:	2201      	movs	r2, #1
 8004a92:	615a      	str	r2, [r3, #20]
  motor2.dirPin2Port    = MOTOR_2_IN_2_GPIO_Port;
 8004a94:	4b34      	ldr	r3, [pc, #208]	; (8004b68 <DRIVE_init+0x118>)
 8004a96:	4a35      	ldr	r2, [pc, #212]	; (8004b6c <DRIVE_init+0x11c>)
 8004a98:	611a      	str	r2, [r3, #16]
  motor2.dirPin2        = MOTOR_2_IN_2_Pin;
 8004a9a:	4b33      	ldr	r3, [pc, #204]	; (8004b68 <DRIVE_init+0x118>)
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	619a      	str	r2, [r3, #24]
  motor2.pwmTimerHandle = htim;
 8004aa0:	4a31      	ldr	r2, [pc, #196]	; (8004b68 <DRIVE_init+0x118>)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6253      	str	r3, [r2, #36]	; 0x24
  motor2.pwmChannel     = TIM_CHANNEL_2;
 8004aa6:	4b30      	ldr	r3, [pc, #192]	; (8004b68 <DRIVE_init+0x118>)
 8004aa8:	2204      	movs	r2, #4
 8004aaa:	629a      	str	r2, [r3, #40]	; 0x28

  motor3.dirPin1Port    = MOTOR_3_IN_1_GPIO_Port;
 8004aac:	4b30      	ldr	r3, [pc, #192]	; (8004b70 <DRIVE_init+0x120>)
 8004aae:	4a2f      	ldr	r2, [pc, #188]	; (8004b6c <DRIVE_init+0x11c>)
 8004ab0:	60da      	str	r2, [r3, #12]
  motor3.dirPin1        = MOTOR_3_IN_1_Pin;
 8004ab2:	4b2f      	ldr	r3, [pc, #188]	; (8004b70 <DRIVE_init+0x120>)
 8004ab4:	2210      	movs	r2, #16
 8004ab6:	615a      	str	r2, [r3, #20]
  motor3.dirPin2Port    = MOTOR_3_IN_2_GPIO_Port;
 8004ab8:	4b2d      	ldr	r3, [pc, #180]	; (8004b70 <DRIVE_init+0x120>)
 8004aba:	4a2c      	ldr	r2, [pc, #176]	; (8004b6c <DRIVE_init+0x11c>)
 8004abc:	611a      	str	r2, [r3, #16]
  motor3.dirPin2        = MOTOR_3_IN_2_Pin;
 8004abe:	4b2c      	ldr	r3, [pc, #176]	; (8004b70 <DRIVE_init+0x120>)
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	619a      	str	r2, [r3, #24]
  motor3.pwmTimerHandle = htim;
 8004ac4:	4a2a      	ldr	r2, [pc, #168]	; (8004b70 <DRIVE_init+0x120>)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6253      	str	r3, [r2, #36]	; 0x24
  motor3.pwmChannel     = TIM_CHANNEL_3;
 8004aca:	4b29      	ldr	r3, [pc, #164]	; (8004b70 <DRIVE_init+0x120>)
 8004acc:	2208      	movs	r2, #8
 8004ace:	629a      	str	r2, [r3, #40]	; 0x28

  motor4.dirPin1Port    = MOTOR_4_IN_1_GPIO_Port;
 8004ad0:	4b28      	ldr	r3, [pc, #160]	; (8004b74 <DRIVE_init+0x124>)
 8004ad2:	4a29      	ldr	r2, [pc, #164]	; (8004b78 <DRIVE_init+0x128>)
 8004ad4:	60da      	str	r2, [r3, #12]
  motor4.dirPin1        = MOTOR_4_IN_1_Pin;
 8004ad6:	4b27      	ldr	r3, [pc, #156]	; (8004b74 <DRIVE_init+0x124>)
 8004ad8:	2204      	movs	r2, #4
 8004ada:	615a      	str	r2, [r3, #20]
  motor4.dirPin2Port    = MOTOR_4_IN_2_GPIO_Port;
 8004adc:	4b25      	ldr	r3, [pc, #148]	; (8004b74 <DRIVE_init+0x124>)
 8004ade:	4a21      	ldr	r2, [pc, #132]	; (8004b64 <DRIVE_init+0x114>)
 8004ae0:	611a      	str	r2, [r3, #16]
  motor4.dirPin2        = MOTOR_4_IN_2_Pin;
 8004ae2:	4b24      	ldr	r3, [pc, #144]	; (8004b74 <DRIVE_init+0x124>)
 8004ae4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004ae8:	619a      	str	r2, [r3, #24]
  motor4.pwmTimerHandle = htim;
 8004aea:	4a22      	ldr	r2, [pc, #136]	; (8004b74 <DRIVE_init+0x124>)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6253      	str	r3, [r2, #36]	; 0x24
  motor4.pwmChannel     = TIM_CHANNEL_4;
 8004af0:	4b20      	ldr	r3, [pc, #128]	; (8004b74 <DRIVE_init+0x124>)
 8004af2:	220c      	movs	r2, #12
 8004af4:	629a      	str	r2, [r3, #40]	; 0x28

  MOTOR_init(&motor1, "MOTOR_1");
 8004af6:	4921      	ldr	r1, [pc, #132]	; (8004b7c <DRIVE_init+0x12c>)
 8004af8:	4819      	ldr	r0, [pc, #100]	; (8004b60 <DRIVE_init+0x110>)
 8004afa:	f000 f8dd 	bl	8004cb8 <MOTOR_init>
  MOTOR_init(&motor2, "MOTOR_2");
 8004afe:	4920      	ldr	r1, [pc, #128]	; (8004b80 <DRIVE_init+0x130>)
 8004b00:	4819      	ldr	r0, [pc, #100]	; (8004b68 <DRIVE_init+0x118>)
 8004b02:	f000 f8d9 	bl	8004cb8 <MOTOR_init>
  MOTOR_init(&motor3, "MOTOR_3");
 8004b06:	491f      	ldr	r1, [pc, #124]	; (8004b84 <DRIVE_init+0x134>)
 8004b08:	4819      	ldr	r0, [pc, #100]	; (8004b70 <DRIVE_init+0x120>)
 8004b0a:	f000 f8d5 	bl	8004cb8 <MOTOR_init>
  MOTOR_init(&motor4, "MOTOR_4");
 8004b0e:	491e      	ldr	r1, [pc, #120]	; (8004b88 <DRIVE_init+0x138>)
 8004b10:	4818      	ldr	r0, [pc, #96]	; (8004b74 <DRIVE_init+0x124>)
 8004b12:	f000 f8d1 	bl	8004cb8 <MOTOR_init>

  MOTOR_setSpeed(&motor1, 20);
 8004b16:	2114      	movs	r1, #20
 8004b18:	4811      	ldr	r0, [pc, #68]	; (8004b60 <DRIVE_init+0x110>)
 8004b1a:	f000 f935 	bl	8004d88 <MOTOR_setSpeed>
  MOTOR_setSpeed(&motor2, 20);
 8004b1e:	2114      	movs	r1, #20
 8004b20:	4811      	ldr	r0, [pc, #68]	; (8004b68 <DRIVE_init+0x118>)
 8004b22:	f000 f931 	bl	8004d88 <MOTOR_setSpeed>
  MOTOR_setSpeed(&motor3, 20);
 8004b26:	2114      	movs	r1, #20
 8004b28:	4811      	ldr	r0, [pc, #68]	; (8004b70 <DRIVE_init+0x120>)
 8004b2a:	f000 f92d 	bl	8004d88 <MOTOR_setSpeed>
  MOTOR_setSpeed(&motor4, 20);
 8004b2e:	2114      	movs	r1, #20
 8004b30:	4810      	ldr	r0, [pc, #64]	; (8004b74 <DRIVE_init+0x124>)
 8004b32:	f000 f929 	bl	8004d88 <MOTOR_setSpeed>

  MOTOR_start(&motor1);
 8004b36:	480a      	ldr	r0, [pc, #40]	; (8004b60 <DRIVE_init+0x110>)
 8004b38:	f000 f964 	bl	8004e04 <MOTOR_start>
  MOTOR_start(&motor2);
 8004b3c:	480a      	ldr	r0, [pc, #40]	; (8004b68 <DRIVE_init+0x118>)
 8004b3e:	f000 f961 	bl	8004e04 <MOTOR_start>
  MOTOR_start(&motor3);
 8004b42:	480b      	ldr	r0, [pc, #44]	; (8004b70 <DRIVE_init+0x120>)
 8004b44:	f000 f95e 	bl	8004e04 <MOTOR_start>
  MOTOR_start(&motor4);
 8004b48:	480a      	ldr	r0, [pc, #40]	; (8004b74 <DRIVE_init+0x124>)
 8004b4a:	f000 f95b 	bl	8004e04 <MOTOR_start>

  while (1)
    UTILS_delayUs(60000);
 8004b4e:	f64e 2060 	movw	r0, #60000	; 0xea60
 8004b52:	f000 f9a5 	bl	8004ea0 <UTILS_delayUs>
 8004b56:	e7fa      	b.n	8004b4e <DRIVE_init+0xfe>
 8004b58:	080081e8 	.word	0x080081e8
 8004b5c:	08008204 	.word	0x08008204
 8004b60:	20000684 	.word	0x20000684
 8004b64:	40011000 	.word	0x40011000
 8004b68:	2000062c 	.word	0x2000062c
 8004b6c:	40010c00 	.word	0x40010c00
 8004b70:	200006b0 	.word	0x200006b0
 8004b74:	20000658 	.word	0x20000658
 8004b78:	40011400 	.word	0x40011400
 8004b7c:	08008218 	.word	0x08008218
 8004b80:	08008220 	.word	0x08008220
 8004b84:	08008228 	.word	0x08008228
 8004b88:	08008230 	.word	0x08008230

08004b8c <LED_toggle>:
#include "stm32f1xx_hal.h"
#include "main.h"
#include "log.h"

void LED_toggle(void)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	af00      	add	r7, sp, #0
  LOG_debug("Toggling LED");
 8004b90:	4b06      	ldr	r3, [pc, #24]	; (8004bac <LED_toggle+0x20>)
 8004b92:	2209      	movs	r2, #9
 8004b94:	4906      	ldr	r1, [pc, #24]	; (8004bb0 <LED_toggle+0x24>)
 8004b96:	2000      	movs	r0, #0
 8004b98:	f000 f81c 	bl	8004bd4 <LOG_log>

  HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8004b9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ba0:	4804      	ldr	r0, [pc, #16]	; (8004bb4 <LED_toggle+0x28>)
 8004ba2:	f7fd f9cb 	bl	8001f3c <HAL_GPIO_TogglePin>

  return;
 8004ba6:	bf00      	nop
}
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	08008250 	.word	0x08008250
 8004bb0:	08008260 	.word	0x08008260
 8004bb4:	40011000 	.word	0x40011000

08004bb8 <LOG_setLevel>:

static const char *levelStrings[] = {
  "DEBUG", "INFO", "WARN", "ERROR"
};

void LOG_setLevel(int level) {
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  LOG_level = level;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a03      	ldr	r2, [pc, #12]	; (8004bd0 <LOG_setLevel+0x18>)
 8004bc4:	6013      	str	r3, [r2, #0]

  return;
 8004bc6:	bf00      	nop
}
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bc80      	pop	{r7}
 8004bce:	4770      	bx	lr
 8004bd0:	200006dc 	.word	0x200006dc

08004bd4 <LOG_log>:

void LOG_log(int level, const char *file, int line, const char *format, ...) {
 8004bd4:	b408      	push	{r3}
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b08f      	sub	sp, #60	; 0x3c
 8004bda:	af02      	add	r7, sp, #8
 8004bdc:	60f8      	str	r0, [r7, #12]
 8004bde:	60b9      	str	r1, [r7, #8]
 8004be0:	607a      	str	r2, [r7, #4]

  va_list argumentsList;
  char buffer[16];

  time_t currentTime = time(NULL);
 8004be2:	2000      	movs	r0, #0
 8004be4:	f001 fea0 	bl	8006928 <time>
 8004be8:	4602      	mov	r2, r0
 8004bea:	460b      	mov	r3, r1
 8004bec:	e9c7 2304 	strd	r2, r3, [r7, #16]
  struct tm *localTime = localtime(&currentTime);
 8004bf0:	f107 0310 	add.w	r3, r7, #16
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 fb73 	bl	80052e0 <localtime>
 8004bfa:	62f8      	str	r0, [r7, #44]	; 0x2c

  if (level >= LOG_level) {
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	4b21      	ldr	r3, [pc, #132]	; (8004c84 <LOG_log+0xb0>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d337      	bcc.n	8004c76 <LOG_log+0xa2>
    va_start(argumentsList, format);
 8004c06:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c0a:	62bb      	str	r3, [r7, #40]	; 0x28

    buffer[strftime(buffer, sizeof(buffer), "%H:%M:%S", localTime)] = '\0';
 8004c0c:	f107 0018 	add.w	r0, r7, #24
 8004c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c12:	4a1d      	ldr	r2, [pc, #116]	; (8004c88 <LOG_log+0xb4>)
 8004c14:	2110      	movs	r1, #16
 8004c16:	f001 fde1 	bl	80067dc <strftime>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004c20:	4413      	add	r3, r2
 8004c22:	2200      	movs	r2, #0
 8004c24:	f803 2c18 	strb.w	r2, [r3, #-24]
    fprintf(stdout, "%s %-5s %s:%d: ", buffer, levelStrings[level], file, line);
 8004c28:	4b18      	ldr	r3, [pc, #96]	; (8004c8c <LOG_log+0xb8>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6898      	ldr	r0, [r3, #8]
 8004c2e:	4a18      	ldr	r2, [pc, #96]	; (8004c90 <LOG_log+0xbc>)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004c36:	f107 0218 	add.w	r2, r7, #24
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	9301      	str	r3, [sp, #4]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	9300      	str	r3, [sp, #0]
 8004c42:	460b      	mov	r3, r1
 8004c44:	4913      	ldr	r1, [pc, #76]	; (8004c94 <LOG_log+0xc0>)
 8004c46:	f000 faf5 	bl	8005234 <fiprintf>
    vfprintf(stdout, format, argumentsList);
 8004c4a:	4b10      	ldr	r3, [pc, #64]	; (8004c8c <LOG_log+0xb8>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004c54:	4618      	mov	r0, r3
 8004c56:	f000 fe73 	bl	8005940 <vfiprintf>
    fprintf(stdout, "\n");
 8004c5a:	4b0c      	ldr	r3, [pc, #48]	; (8004c8c <LOG_log+0xb8>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	4619      	mov	r1, r3
 8004c62:	200a      	movs	r0, #10
 8004c64:	f7ff fee0 	bl	8004a28 <fputc>
    fflush(stdout);
 8004c68:	4b08      	ldr	r3, [pc, #32]	; (8004c8c <LOG_log+0xb8>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 f9f8 	bl	8005064 <fflush>

    va_end(argumentsList);
  }

  return;
 8004c74:	bf00      	nop
 8004c76:	bf00      	nop
}
 8004c78:	3734      	adds	r7, #52	; 0x34
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c80:	b001      	add	sp, #4
 8004c82:	4770      	bx	lr
 8004c84:	200006dc 	.word	0x200006dc
 8004c88:	08008294 	.word	0x08008294
 8004c8c:	20000040 	.word	0x20000040
 8004c90:	20000030 	.word	0x20000030
 8004c94:	080082a0 	.word	0x080082a0

08004c98 <MASTER_CONTROL_receiveData>:
#include "stm32f1xx_hal.h"

uint8_t MASTER_CONTROL_rxBuffer[12] = {0};

void MASTER_CONTROL_receiveData(UART_HandleTypeDef *huart)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(huart, MASTER_CONTROL_rxBuffer, 1);
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	4904      	ldr	r1, [pc, #16]	; (8004cb4 <MASTER_CONTROL_receiveData+0x1c>)
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f7ff f85f 	bl	8003d68 <HAL_UART_Receive_IT>

  return;
 8004caa:	bf00      	nop
}
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	200002b0 	.word	0x200002b0

08004cb8 <MOTOR_init>:
#include "stm32f1xx_hal.h"

#include "log.h"

void MOTOR_init(MOTOR_Handle *handle, char *name)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af02      	add	r7, sp, #8
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  LOG_info("Initializing Motor module for %s", name);
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	4b0d      	ldr	r3, [pc, #52]	; (8004cfc <MOTOR_init+0x44>)
 8004cc8:	220b      	movs	r2, #11
 8004cca:	490d      	ldr	r1, [pc, #52]	; (8004d00 <MOTOR_init+0x48>)
 8004ccc:	2001      	movs	r0, #1
 8004cce:	f7ff ff81 	bl	8004bd4 <LOG_log>

  (void)strncpy((char *)handle->name, name, MOTOR_NAME_MAX_LENGTH);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	220c      	movs	r2, #12
 8004cd6:	6839      	ldr	r1, [r7, #0]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f001 fd89 	bl	80067f0 <strncpy>

  MOTOR_setSpeed    (handle, 0);
 8004cde:	2100      	movs	r1, #0
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 f851 	bl	8004d88 <MOTOR_setSpeed>
  MOTOR_setDirection(handle, MOTOR_DIRECTION_FORWARD);
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f80b 	bl	8004d04 <MOTOR_setDirection>
  MOTOR_stop        (handle);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f8a2 	bl	8004e38 <MOTOR_stop>

  return;
 8004cf4:	bf00      	nop
}
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	080082b0 	.word	0x080082b0
 8004d00:	080082d4 	.word	0x080082d4

08004d04 <MOTOR_setDirection>:

void MOTOR_setDirection(MOTOR_Handle *handle, uint32_t direction)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af02      	add	r7, sp, #8
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  LOG_debug("Setting %s direction to %u", handle->name, direction);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	683a      	ldr	r2, [r7, #0]
 8004d12:	9201      	str	r2, [sp, #4]
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	4b1a      	ldr	r3, [pc, #104]	; (8004d80 <MOTOR_setDirection+0x7c>)
 8004d18:	2218      	movs	r2, #24
 8004d1a:	491a      	ldr	r1, [pc, #104]	; (8004d84 <MOTOR_setDirection+0x80>)
 8004d1c:	2000      	movs	r0, #0
 8004d1e:	f7ff ff59 	bl	8004bd4 <LOG_log>

  if (direction == MOTOR_DIRECTION_FORWARD)
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d112      	bne.n	8004d4e <MOTOR_setDirection+0x4a>
  {
    HAL_GPIO_WritePin(handle->dirPin1Port, handle->dirPin1, GPIO_PIN_SET  );
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68d8      	ldr	r0, [r3, #12]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	2201      	movs	r2, #1
 8004d34:	4619      	mov	r1, r3
 8004d36:	f7fd f8e9 	bl	8001f0c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(handle->dirPin2Port, handle->dirPin2, GPIO_PIN_RESET);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6918      	ldr	r0, [r3, #16]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	2200      	movs	r2, #0
 8004d46:	4619      	mov	r1, r3
 8004d48:	f7fd f8e0 	bl	8001f0c <HAL_GPIO_WritePin>
 8004d4c:	e011      	b.n	8004d72 <MOTOR_setDirection+0x6e>
  }
  else
  {
    HAL_GPIO_WritePin(handle->dirPin1Port, handle->dirPin1, GPIO_PIN_RESET);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68d8      	ldr	r0, [r3, #12]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	2200      	movs	r2, #0
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	f7fd f8d6 	bl	8001f0c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(handle->dirPin2Port, handle->dirPin2, GPIO_PIN_SET  );
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6918      	ldr	r0, [r3, #16]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	f7fd f8cd 	bl	8001f0c <HAL_GPIO_WritePin>
  }

  handle->direction = direction;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	61da      	str	r2, [r3, #28]

  return;
 8004d78:	bf00      	nop
}
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	080082e8 	.word	0x080082e8
 8004d84:	080082d4 	.word	0x080082d4

08004d88 <MOTOR_setSpeed>:

void MOTOR_setSpeed(MOTOR_Handle *handle, uint32_t speed)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af02      	add	r7, sp, #8
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  LOG_debug("Setting %s speed to %u", handle->name, speed);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	9201      	str	r2, [sp, #4]
 8004d98:	9300      	str	r3, [sp, #0]
 8004d9a:	4b18      	ldr	r3, [pc, #96]	; (8004dfc <MOTOR_setSpeed+0x74>)
 8004d9c:	222c      	movs	r2, #44	; 0x2c
 8004d9e:	4918      	ldr	r1, [pc, #96]	; (8004e00 <MOTOR_setSpeed+0x78>)
 8004da0:	2000      	movs	r0, #0
 8004da2:	f7ff ff17 	bl	8004bd4 <LOG_log>

  __HAL_TIM_SET_COMPARE(handle->pwmTimerHandle, handle->pwmChannel, speed);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d105      	bne.n	8004dba <MOTOR_setSpeed+0x32>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	635a      	str	r2, [r3, #52]	; 0x34
 8004db8:	e018      	b.n	8004dec <MOTOR_setSpeed+0x64>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d105      	bne.n	8004dce <MOTOR_setSpeed+0x46>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	6393      	str	r3, [r2, #56]	; 0x38
 8004dcc:	e00e      	b.n	8004dec <MOTOR_setSpeed+0x64>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd2:	2b08      	cmp	r3, #8
 8004dd4:	d105      	bne.n	8004de2 <MOTOR_setSpeed+0x5a>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	63d3      	str	r3, [r2, #60]	; 0x3c
 8004de0:	e004      	b.n	8004dec <MOTOR_setSpeed+0x64>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	6413      	str	r3, [r2, #64]	; 0x40

  handle->speed = speed;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	621a      	str	r2, [r3, #32]

  return;
 8004df2:	bf00      	nop
}
 8004df4:	3708      	adds	r7, #8
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	08008304 	.word	0x08008304
 8004e00:	080082d4 	.word	0x080082d4

08004e04 <MOTOR_start>:

void MOTOR_start(MOTOR_Handle *handle)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af02      	add	r7, sp, #8
 8004e0a:	6078      	str	r0, [r7, #4]
  LOG_info("Starting %s", handle->name);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	4b07      	ldr	r3, [pc, #28]	; (8004e30 <MOTOR_start+0x2c>)
 8004e12:	2237      	movs	r2, #55	; 0x37
 8004e14:	4907      	ldr	r1, [pc, #28]	; (8004e34 <MOTOR_start+0x30>)
 8004e16:	2001      	movs	r0, #1
 8004e18:	f7ff fedc 	bl	8004bd4 <LOG_log>

  MOTOR_setDirection(handle, handle->direction);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	4619      	mov	r1, r3
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7ff ff6e 	bl	8004d04 <MOTOR_setDirection>

  return;
 8004e28:	bf00      	nop
}
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	0800831c 	.word	0x0800831c
 8004e34:	080082d4 	.word	0x080082d4

08004e38 <MOTOR_stop>:

void MOTOR_stop(MOTOR_Handle *handle)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af02      	add	r7, sp, #8
 8004e3e:	6078      	str	r0, [r7, #4]
  LOG_info("Stopping %s", handle->name);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	4b0d      	ldr	r3, [pc, #52]	; (8004e7c <MOTOR_stop+0x44>)
 8004e46:	2240      	movs	r2, #64	; 0x40
 8004e48:	490d      	ldr	r1, [pc, #52]	; (8004e80 <MOTOR_stop+0x48>)
 8004e4a:	2001      	movs	r0, #1
 8004e4c:	f7ff fec2 	bl	8004bd4 <LOG_log>

  HAL_GPIO_WritePin(handle->dirPin1Port, handle->dirPin1, GPIO_PIN_RESET);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68d8      	ldr	r0, [r3, #12]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	f7fd f855 	bl	8001f0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(handle->dirPin2Port, handle->dirPin2, GPIO_PIN_RESET);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6918      	ldr	r0, [r3, #16]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	4619      	mov	r1, r3
 8004e70:	f7fd f84c 	bl	8001f0c <HAL_GPIO_WritePin>

  return;
 8004e74:	bf00      	nop
}
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	08008328 	.word	0x08008328
 8004e80:	080082d4 	.word	0x080082d4

08004e84 <UTILS_delayUsInit>:
#include "stm32f1xx_hal.h"

TIM_HandleTypeDef *UTILS_delayTimerHandle;

void UTILS_delayUsInit(TIM_HandleTypeDef *htim)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  UTILS_delayTimerHandle = htim;
 8004e8c:	4a03      	ldr	r2, [pc, #12]	; (8004e9c <UTILS_delayUsInit+0x18>)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6013      	str	r3, [r2, #0]

  return;
 8004e92:	bf00      	nop
}
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bc80      	pop	{r7}
 8004e9a:	4770      	bx	lr
 8004e9c:	200006e0 	.word	0x200006e0

08004ea0 <UTILS_delayUs>:

void UTILS_delayUs(uint16_t delay)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	80fb      	strh	r3, [r7, #6]
  /* Reset the micro-seconds counter */
  __HAL_TIM_SET_COUNTER(UTILS_delayTimerHandle,0);
 8004eaa:	4b09      	ldr	r3, [pc, #36]	; (8004ed0 <UTILS_delayUs+0x30>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Wait for the counter to reach the input micro-seconds number */
  while (__HAL_TIM_GET_COUNTER(UTILS_delayTimerHandle) < delay)
 8004eb4:	bf00      	nop
 8004eb6:	4b06      	ldr	r3, [pc, #24]	; (8004ed0 <UTILS_delayUs+0x30>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ebe:	88fb      	ldrh	r3, [r7, #6]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d3f8      	bcc.n	8004eb6 <UTILS_delayUs+0x16>
  {
    ; /* Nothing to do */
  }

  return;
 8004ec4:	bf00      	nop
}
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bc80      	pop	{r7}
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	200006e0 	.word	0x200006e0

08004ed4 <__errno>:
 8004ed4:	4b01      	ldr	r3, [pc, #4]	; (8004edc <__errno+0x8>)
 8004ed6:	6818      	ldr	r0, [r3, #0]
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	20000040 	.word	0x20000040

08004ee0 <__sflush_r>:
 8004ee0:	898a      	ldrh	r2, [r1, #12]
 8004ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ee6:	4605      	mov	r5, r0
 8004ee8:	0710      	lsls	r0, r2, #28
 8004eea:	460c      	mov	r4, r1
 8004eec:	d458      	bmi.n	8004fa0 <__sflush_r+0xc0>
 8004eee:	684b      	ldr	r3, [r1, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	dc05      	bgt.n	8004f00 <__sflush_r+0x20>
 8004ef4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	dc02      	bgt.n	8004f00 <__sflush_r+0x20>
 8004efa:	2000      	movs	r0, #0
 8004efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f02:	2e00      	cmp	r6, #0
 8004f04:	d0f9      	beq.n	8004efa <__sflush_r+0x1a>
 8004f06:	2300      	movs	r3, #0
 8004f08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004f0c:	682f      	ldr	r7, [r5, #0]
 8004f0e:	602b      	str	r3, [r5, #0]
 8004f10:	d032      	beq.n	8004f78 <__sflush_r+0x98>
 8004f12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004f14:	89a3      	ldrh	r3, [r4, #12]
 8004f16:	075a      	lsls	r2, r3, #29
 8004f18:	d505      	bpl.n	8004f26 <__sflush_r+0x46>
 8004f1a:	6863      	ldr	r3, [r4, #4]
 8004f1c:	1ac0      	subs	r0, r0, r3
 8004f1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004f20:	b10b      	cbz	r3, 8004f26 <__sflush_r+0x46>
 8004f22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004f24:	1ac0      	subs	r0, r0, r3
 8004f26:	2300      	movs	r3, #0
 8004f28:	4602      	mov	r2, r0
 8004f2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004f2c:	4628      	mov	r0, r5
 8004f2e:	6a21      	ldr	r1, [r4, #32]
 8004f30:	47b0      	blx	r6
 8004f32:	1c43      	adds	r3, r0, #1
 8004f34:	89a3      	ldrh	r3, [r4, #12]
 8004f36:	d106      	bne.n	8004f46 <__sflush_r+0x66>
 8004f38:	6829      	ldr	r1, [r5, #0]
 8004f3a:	291d      	cmp	r1, #29
 8004f3c:	d82c      	bhi.n	8004f98 <__sflush_r+0xb8>
 8004f3e:	4a2a      	ldr	r2, [pc, #168]	; (8004fe8 <__sflush_r+0x108>)
 8004f40:	40ca      	lsrs	r2, r1
 8004f42:	07d6      	lsls	r6, r2, #31
 8004f44:	d528      	bpl.n	8004f98 <__sflush_r+0xb8>
 8004f46:	2200      	movs	r2, #0
 8004f48:	6062      	str	r2, [r4, #4]
 8004f4a:	6922      	ldr	r2, [r4, #16]
 8004f4c:	04d9      	lsls	r1, r3, #19
 8004f4e:	6022      	str	r2, [r4, #0]
 8004f50:	d504      	bpl.n	8004f5c <__sflush_r+0x7c>
 8004f52:	1c42      	adds	r2, r0, #1
 8004f54:	d101      	bne.n	8004f5a <__sflush_r+0x7a>
 8004f56:	682b      	ldr	r3, [r5, #0]
 8004f58:	b903      	cbnz	r3, 8004f5c <__sflush_r+0x7c>
 8004f5a:	6560      	str	r0, [r4, #84]	; 0x54
 8004f5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f5e:	602f      	str	r7, [r5, #0]
 8004f60:	2900      	cmp	r1, #0
 8004f62:	d0ca      	beq.n	8004efa <__sflush_r+0x1a>
 8004f64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f68:	4299      	cmp	r1, r3
 8004f6a:	d002      	beq.n	8004f72 <__sflush_r+0x92>
 8004f6c:	4628      	mov	r0, r5
 8004f6e:	f000 fae9 	bl	8005544 <_free_r>
 8004f72:	2000      	movs	r0, #0
 8004f74:	6360      	str	r0, [r4, #52]	; 0x34
 8004f76:	e7c1      	b.n	8004efc <__sflush_r+0x1c>
 8004f78:	6a21      	ldr	r1, [r4, #32]
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	47b0      	blx	r6
 8004f80:	1c41      	adds	r1, r0, #1
 8004f82:	d1c7      	bne.n	8004f14 <__sflush_r+0x34>
 8004f84:	682b      	ldr	r3, [r5, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0c4      	beq.n	8004f14 <__sflush_r+0x34>
 8004f8a:	2b1d      	cmp	r3, #29
 8004f8c:	d001      	beq.n	8004f92 <__sflush_r+0xb2>
 8004f8e:	2b16      	cmp	r3, #22
 8004f90:	d101      	bne.n	8004f96 <__sflush_r+0xb6>
 8004f92:	602f      	str	r7, [r5, #0]
 8004f94:	e7b1      	b.n	8004efa <__sflush_r+0x1a>
 8004f96:	89a3      	ldrh	r3, [r4, #12]
 8004f98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f9c:	81a3      	strh	r3, [r4, #12]
 8004f9e:	e7ad      	b.n	8004efc <__sflush_r+0x1c>
 8004fa0:	690f      	ldr	r7, [r1, #16]
 8004fa2:	2f00      	cmp	r7, #0
 8004fa4:	d0a9      	beq.n	8004efa <__sflush_r+0x1a>
 8004fa6:	0793      	lsls	r3, r2, #30
 8004fa8:	bf18      	it	ne
 8004faa:	2300      	movne	r3, #0
 8004fac:	680e      	ldr	r6, [r1, #0]
 8004fae:	bf08      	it	eq
 8004fb0:	694b      	ldreq	r3, [r1, #20]
 8004fb2:	eba6 0807 	sub.w	r8, r6, r7
 8004fb6:	600f      	str	r7, [r1, #0]
 8004fb8:	608b      	str	r3, [r1, #8]
 8004fba:	f1b8 0f00 	cmp.w	r8, #0
 8004fbe:	dd9c      	ble.n	8004efa <__sflush_r+0x1a>
 8004fc0:	4643      	mov	r3, r8
 8004fc2:	463a      	mov	r2, r7
 8004fc4:	4628      	mov	r0, r5
 8004fc6:	6a21      	ldr	r1, [r4, #32]
 8004fc8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004fca:	47b0      	blx	r6
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	dc06      	bgt.n	8004fde <__sflush_r+0xfe>
 8004fd0:	89a3      	ldrh	r3, [r4, #12]
 8004fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fda:	81a3      	strh	r3, [r4, #12]
 8004fdc:	e78e      	b.n	8004efc <__sflush_r+0x1c>
 8004fde:	4407      	add	r7, r0
 8004fe0:	eba8 0800 	sub.w	r8, r8, r0
 8004fe4:	e7e9      	b.n	8004fba <__sflush_r+0xda>
 8004fe6:	bf00      	nop
 8004fe8:	20400001 	.word	0x20400001

08004fec <_fflush_r>:
 8004fec:	b538      	push	{r3, r4, r5, lr}
 8004fee:	690b      	ldr	r3, [r1, #16]
 8004ff0:	4605      	mov	r5, r0
 8004ff2:	460c      	mov	r4, r1
 8004ff4:	b913      	cbnz	r3, 8004ffc <_fflush_r+0x10>
 8004ff6:	2500      	movs	r5, #0
 8004ff8:	4628      	mov	r0, r5
 8004ffa:	bd38      	pop	{r3, r4, r5, pc}
 8004ffc:	b118      	cbz	r0, 8005006 <_fflush_r+0x1a>
 8004ffe:	6983      	ldr	r3, [r0, #24]
 8005000:	b90b      	cbnz	r3, 8005006 <_fflush_r+0x1a>
 8005002:	f000 f899 	bl	8005138 <__sinit>
 8005006:	4b14      	ldr	r3, [pc, #80]	; (8005058 <_fflush_r+0x6c>)
 8005008:	429c      	cmp	r4, r3
 800500a:	d11b      	bne.n	8005044 <_fflush_r+0x58>
 800500c:	686c      	ldr	r4, [r5, #4]
 800500e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d0ef      	beq.n	8004ff6 <_fflush_r+0xa>
 8005016:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005018:	07d0      	lsls	r0, r2, #31
 800501a:	d404      	bmi.n	8005026 <_fflush_r+0x3a>
 800501c:	0599      	lsls	r1, r3, #22
 800501e:	d402      	bmi.n	8005026 <_fflush_r+0x3a>
 8005020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005022:	f000 fa73 	bl	800550c <__retarget_lock_acquire_recursive>
 8005026:	4628      	mov	r0, r5
 8005028:	4621      	mov	r1, r4
 800502a:	f7ff ff59 	bl	8004ee0 <__sflush_r>
 800502e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005030:	4605      	mov	r5, r0
 8005032:	07da      	lsls	r2, r3, #31
 8005034:	d4e0      	bmi.n	8004ff8 <_fflush_r+0xc>
 8005036:	89a3      	ldrh	r3, [r4, #12]
 8005038:	059b      	lsls	r3, r3, #22
 800503a:	d4dd      	bmi.n	8004ff8 <_fflush_r+0xc>
 800503c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800503e:	f000 fa67 	bl	8005510 <__retarget_lock_release_recursive>
 8005042:	e7d9      	b.n	8004ff8 <_fflush_r+0xc>
 8005044:	4b05      	ldr	r3, [pc, #20]	; (800505c <_fflush_r+0x70>)
 8005046:	429c      	cmp	r4, r3
 8005048:	d101      	bne.n	800504e <_fflush_r+0x62>
 800504a:	68ac      	ldr	r4, [r5, #8]
 800504c:	e7df      	b.n	800500e <_fflush_r+0x22>
 800504e:	4b04      	ldr	r3, [pc, #16]	; (8005060 <_fflush_r+0x74>)
 8005050:	429c      	cmp	r4, r3
 8005052:	bf08      	it	eq
 8005054:	68ec      	ldreq	r4, [r5, #12]
 8005056:	e7da      	b.n	800500e <_fflush_r+0x22>
 8005058:	08008378 	.word	0x08008378
 800505c:	08008398 	.word	0x08008398
 8005060:	08008358 	.word	0x08008358

08005064 <fflush>:
 8005064:	4601      	mov	r1, r0
 8005066:	b920      	cbnz	r0, 8005072 <fflush+0xe>
 8005068:	4b04      	ldr	r3, [pc, #16]	; (800507c <fflush+0x18>)
 800506a:	4905      	ldr	r1, [pc, #20]	; (8005080 <fflush+0x1c>)
 800506c:	6818      	ldr	r0, [r3, #0]
 800506e:	f000 b8f3 	b.w	8005258 <_fwalk_reent>
 8005072:	4b04      	ldr	r3, [pc, #16]	; (8005084 <fflush+0x20>)
 8005074:	6818      	ldr	r0, [r3, #0]
 8005076:	f7ff bfb9 	b.w	8004fec <_fflush_r>
 800507a:	bf00      	nop
 800507c:	080083b8 	.word	0x080083b8
 8005080:	08004fed 	.word	0x08004fed
 8005084:	20000040 	.word	0x20000040

08005088 <std>:
 8005088:	2300      	movs	r3, #0
 800508a:	b510      	push	{r4, lr}
 800508c:	4604      	mov	r4, r0
 800508e:	e9c0 3300 	strd	r3, r3, [r0]
 8005092:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005096:	6083      	str	r3, [r0, #8]
 8005098:	8181      	strh	r1, [r0, #12]
 800509a:	6643      	str	r3, [r0, #100]	; 0x64
 800509c:	81c2      	strh	r2, [r0, #14]
 800509e:	6183      	str	r3, [r0, #24]
 80050a0:	4619      	mov	r1, r3
 80050a2:	2208      	movs	r2, #8
 80050a4:	305c      	adds	r0, #92	; 0x5c
 80050a6:	f000 fa45 	bl	8005534 <memset>
 80050aa:	4b05      	ldr	r3, [pc, #20]	; (80050c0 <std+0x38>)
 80050ac:	6224      	str	r4, [r4, #32]
 80050ae:	6263      	str	r3, [r4, #36]	; 0x24
 80050b0:	4b04      	ldr	r3, [pc, #16]	; (80050c4 <std+0x3c>)
 80050b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80050b4:	4b04      	ldr	r3, [pc, #16]	; (80050c8 <std+0x40>)
 80050b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80050b8:	4b04      	ldr	r3, [pc, #16]	; (80050cc <std+0x44>)
 80050ba:	6323      	str	r3, [r4, #48]	; 0x30
 80050bc:	bd10      	pop	{r4, pc}
 80050be:	bf00      	nop
 80050c0:	08005ca1 	.word	0x08005ca1
 80050c4:	08005cc7 	.word	0x08005cc7
 80050c8:	08005cff 	.word	0x08005cff
 80050cc:	08005d23 	.word	0x08005d23

080050d0 <_cleanup_r>:
 80050d0:	4901      	ldr	r1, [pc, #4]	; (80050d8 <_cleanup_r+0x8>)
 80050d2:	f000 b8c1 	b.w	8005258 <_fwalk_reent>
 80050d6:	bf00      	nop
 80050d8:	08004fed 	.word	0x08004fed

080050dc <__sfmoreglue>:
 80050dc:	b570      	push	{r4, r5, r6, lr}
 80050de:	2568      	movs	r5, #104	; 0x68
 80050e0:	1e4a      	subs	r2, r1, #1
 80050e2:	4355      	muls	r5, r2
 80050e4:	460e      	mov	r6, r1
 80050e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80050ea:	f000 fa77 	bl	80055dc <_malloc_r>
 80050ee:	4604      	mov	r4, r0
 80050f0:	b140      	cbz	r0, 8005104 <__sfmoreglue+0x28>
 80050f2:	2100      	movs	r1, #0
 80050f4:	e9c0 1600 	strd	r1, r6, [r0]
 80050f8:	300c      	adds	r0, #12
 80050fa:	60a0      	str	r0, [r4, #8]
 80050fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005100:	f000 fa18 	bl	8005534 <memset>
 8005104:	4620      	mov	r0, r4
 8005106:	bd70      	pop	{r4, r5, r6, pc}

08005108 <__sfp_lock_acquire>:
 8005108:	4801      	ldr	r0, [pc, #4]	; (8005110 <__sfp_lock_acquire+0x8>)
 800510a:	f000 b9ff 	b.w	800550c <__retarget_lock_acquire_recursive>
 800510e:	bf00      	nop
 8005110:	200006ec 	.word	0x200006ec

08005114 <__sfp_lock_release>:
 8005114:	4801      	ldr	r0, [pc, #4]	; (800511c <__sfp_lock_release+0x8>)
 8005116:	f000 b9fb 	b.w	8005510 <__retarget_lock_release_recursive>
 800511a:	bf00      	nop
 800511c:	200006ec 	.word	0x200006ec

08005120 <__sinit_lock_acquire>:
 8005120:	4801      	ldr	r0, [pc, #4]	; (8005128 <__sinit_lock_acquire+0x8>)
 8005122:	f000 b9f3 	b.w	800550c <__retarget_lock_acquire_recursive>
 8005126:	bf00      	nop
 8005128:	200006e7 	.word	0x200006e7

0800512c <__sinit_lock_release>:
 800512c:	4801      	ldr	r0, [pc, #4]	; (8005134 <__sinit_lock_release+0x8>)
 800512e:	f000 b9ef 	b.w	8005510 <__retarget_lock_release_recursive>
 8005132:	bf00      	nop
 8005134:	200006e7 	.word	0x200006e7

08005138 <__sinit>:
 8005138:	b510      	push	{r4, lr}
 800513a:	4604      	mov	r4, r0
 800513c:	f7ff fff0 	bl	8005120 <__sinit_lock_acquire>
 8005140:	69a3      	ldr	r3, [r4, #24]
 8005142:	b11b      	cbz	r3, 800514c <__sinit+0x14>
 8005144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005148:	f7ff bff0 	b.w	800512c <__sinit_lock_release>
 800514c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005150:	6523      	str	r3, [r4, #80]	; 0x50
 8005152:	4b13      	ldr	r3, [pc, #76]	; (80051a0 <__sinit+0x68>)
 8005154:	4a13      	ldr	r2, [pc, #76]	; (80051a4 <__sinit+0x6c>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	62a2      	str	r2, [r4, #40]	; 0x28
 800515a:	42a3      	cmp	r3, r4
 800515c:	bf08      	it	eq
 800515e:	2301      	moveq	r3, #1
 8005160:	4620      	mov	r0, r4
 8005162:	bf08      	it	eq
 8005164:	61a3      	streq	r3, [r4, #24]
 8005166:	f000 f81f 	bl	80051a8 <__sfp>
 800516a:	6060      	str	r0, [r4, #4]
 800516c:	4620      	mov	r0, r4
 800516e:	f000 f81b 	bl	80051a8 <__sfp>
 8005172:	60a0      	str	r0, [r4, #8]
 8005174:	4620      	mov	r0, r4
 8005176:	f000 f817 	bl	80051a8 <__sfp>
 800517a:	2200      	movs	r2, #0
 800517c:	2104      	movs	r1, #4
 800517e:	60e0      	str	r0, [r4, #12]
 8005180:	6860      	ldr	r0, [r4, #4]
 8005182:	f7ff ff81 	bl	8005088 <std>
 8005186:	2201      	movs	r2, #1
 8005188:	2109      	movs	r1, #9
 800518a:	68a0      	ldr	r0, [r4, #8]
 800518c:	f7ff ff7c 	bl	8005088 <std>
 8005190:	2202      	movs	r2, #2
 8005192:	2112      	movs	r1, #18
 8005194:	68e0      	ldr	r0, [r4, #12]
 8005196:	f7ff ff77 	bl	8005088 <std>
 800519a:	2301      	movs	r3, #1
 800519c:	61a3      	str	r3, [r4, #24]
 800519e:	e7d1      	b.n	8005144 <__sinit+0xc>
 80051a0:	080083b8 	.word	0x080083b8
 80051a4:	080050d1 	.word	0x080050d1

080051a8 <__sfp>:
 80051a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051aa:	4607      	mov	r7, r0
 80051ac:	f7ff ffac 	bl	8005108 <__sfp_lock_acquire>
 80051b0:	4b1e      	ldr	r3, [pc, #120]	; (800522c <__sfp+0x84>)
 80051b2:	681e      	ldr	r6, [r3, #0]
 80051b4:	69b3      	ldr	r3, [r6, #24]
 80051b6:	b913      	cbnz	r3, 80051be <__sfp+0x16>
 80051b8:	4630      	mov	r0, r6
 80051ba:	f7ff ffbd 	bl	8005138 <__sinit>
 80051be:	3648      	adds	r6, #72	; 0x48
 80051c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80051c4:	3b01      	subs	r3, #1
 80051c6:	d503      	bpl.n	80051d0 <__sfp+0x28>
 80051c8:	6833      	ldr	r3, [r6, #0]
 80051ca:	b30b      	cbz	r3, 8005210 <__sfp+0x68>
 80051cc:	6836      	ldr	r6, [r6, #0]
 80051ce:	e7f7      	b.n	80051c0 <__sfp+0x18>
 80051d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80051d4:	b9d5      	cbnz	r5, 800520c <__sfp+0x64>
 80051d6:	4b16      	ldr	r3, [pc, #88]	; (8005230 <__sfp+0x88>)
 80051d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80051dc:	60e3      	str	r3, [r4, #12]
 80051de:	6665      	str	r5, [r4, #100]	; 0x64
 80051e0:	f000 f992 	bl	8005508 <__retarget_lock_init_recursive>
 80051e4:	f7ff ff96 	bl	8005114 <__sfp_lock_release>
 80051e8:	2208      	movs	r2, #8
 80051ea:	4629      	mov	r1, r5
 80051ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80051f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80051f4:	6025      	str	r5, [r4, #0]
 80051f6:	61a5      	str	r5, [r4, #24]
 80051f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80051fc:	f000 f99a 	bl	8005534 <memset>
 8005200:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005204:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005208:	4620      	mov	r0, r4
 800520a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800520c:	3468      	adds	r4, #104	; 0x68
 800520e:	e7d9      	b.n	80051c4 <__sfp+0x1c>
 8005210:	2104      	movs	r1, #4
 8005212:	4638      	mov	r0, r7
 8005214:	f7ff ff62 	bl	80050dc <__sfmoreglue>
 8005218:	4604      	mov	r4, r0
 800521a:	6030      	str	r0, [r6, #0]
 800521c:	2800      	cmp	r0, #0
 800521e:	d1d5      	bne.n	80051cc <__sfp+0x24>
 8005220:	f7ff ff78 	bl	8005114 <__sfp_lock_release>
 8005224:	230c      	movs	r3, #12
 8005226:	603b      	str	r3, [r7, #0]
 8005228:	e7ee      	b.n	8005208 <__sfp+0x60>
 800522a:	bf00      	nop
 800522c:	080083b8 	.word	0x080083b8
 8005230:	ffff0001 	.word	0xffff0001

08005234 <fiprintf>:
 8005234:	b40e      	push	{r1, r2, r3}
 8005236:	b503      	push	{r0, r1, lr}
 8005238:	4601      	mov	r1, r0
 800523a:	ab03      	add	r3, sp, #12
 800523c:	4805      	ldr	r0, [pc, #20]	; (8005254 <fiprintf+0x20>)
 800523e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005242:	6800      	ldr	r0, [r0, #0]
 8005244:	9301      	str	r3, [sp, #4]
 8005246:	f000 fa4b 	bl	80056e0 <_vfiprintf_r>
 800524a:	b002      	add	sp, #8
 800524c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005250:	b003      	add	sp, #12
 8005252:	4770      	bx	lr
 8005254:	20000040 	.word	0x20000040

08005258 <_fwalk_reent>:
 8005258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800525c:	4606      	mov	r6, r0
 800525e:	4688      	mov	r8, r1
 8005260:	2700      	movs	r7, #0
 8005262:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005266:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800526a:	f1b9 0901 	subs.w	r9, r9, #1
 800526e:	d505      	bpl.n	800527c <_fwalk_reent+0x24>
 8005270:	6824      	ldr	r4, [r4, #0]
 8005272:	2c00      	cmp	r4, #0
 8005274:	d1f7      	bne.n	8005266 <_fwalk_reent+0xe>
 8005276:	4638      	mov	r0, r7
 8005278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800527c:	89ab      	ldrh	r3, [r5, #12]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d907      	bls.n	8005292 <_fwalk_reent+0x3a>
 8005282:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005286:	3301      	adds	r3, #1
 8005288:	d003      	beq.n	8005292 <_fwalk_reent+0x3a>
 800528a:	4629      	mov	r1, r5
 800528c:	4630      	mov	r0, r6
 800528e:	47c0      	blx	r8
 8005290:	4307      	orrs	r7, r0
 8005292:	3568      	adds	r5, #104	; 0x68
 8005294:	e7e9      	b.n	800526a <_fwalk_reent+0x12>
	...

08005298 <__libc_init_array>:
 8005298:	b570      	push	{r4, r5, r6, lr}
 800529a:	2600      	movs	r6, #0
 800529c:	4d0c      	ldr	r5, [pc, #48]	; (80052d0 <__libc_init_array+0x38>)
 800529e:	4c0d      	ldr	r4, [pc, #52]	; (80052d4 <__libc_init_array+0x3c>)
 80052a0:	1b64      	subs	r4, r4, r5
 80052a2:	10a4      	asrs	r4, r4, #2
 80052a4:	42a6      	cmp	r6, r4
 80052a6:	d109      	bne.n	80052bc <__libc_init_array+0x24>
 80052a8:	f002 ff26 	bl	80080f8 <_init>
 80052ac:	2600      	movs	r6, #0
 80052ae:	4d0a      	ldr	r5, [pc, #40]	; (80052d8 <__libc_init_array+0x40>)
 80052b0:	4c0a      	ldr	r4, [pc, #40]	; (80052dc <__libc_init_array+0x44>)
 80052b2:	1b64      	subs	r4, r4, r5
 80052b4:	10a4      	asrs	r4, r4, #2
 80052b6:	42a6      	cmp	r6, r4
 80052b8:	d105      	bne.n	80052c6 <__libc_init_array+0x2e>
 80052ba:	bd70      	pop	{r4, r5, r6, pc}
 80052bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80052c0:	4798      	blx	r3
 80052c2:	3601      	adds	r6, #1
 80052c4:	e7ee      	b.n	80052a4 <__libc_init_array+0xc>
 80052c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ca:	4798      	blx	r3
 80052cc:	3601      	adds	r6, #1
 80052ce:	e7f2      	b.n	80052b6 <__libc_init_array+0x1e>
 80052d0:	080088f0 	.word	0x080088f0
 80052d4:	080088f0 	.word	0x080088f0
 80052d8:	080088f0 	.word	0x080088f0
 80052dc:	080088f4 	.word	0x080088f4

080052e0 <localtime>:
 80052e0:	b538      	push	{r3, r4, r5, lr}
 80052e2:	4b0b      	ldr	r3, [pc, #44]	; (8005310 <localtime+0x30>)
 80052e4:	4604      	mov	r4, r0
 80052e6:	681d      	ldr	r5, [r3, #0]
 80052e8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80052ea:	b953      	cbnz	r3, 8005302 <localtime+0x22>
 80052ec:	2024      	movs	r0, #36	; 0x24
 80052ee:	f000 f911 	bl	8005514 <malloc>
 80052f2:	4602      	mov	r2, r0
 80052f4:	63e8      	str	r0, [r5, #60]	; 0x3c
 80052f6:	b920      	cbnz	r0, 8005302 <localtime+0x22>
 80052f8:	2132      	movs	r1, #50	; 0x32
 80052fa:	4b06      	ldr	r3, [pc, #24]	; (8005314 <localtime+0x34>)
 80052fc:	4806      	ldr	r0, [pc, #24]	; (8005318 <localtime+0x38>)
 80052fe:	f001 fe3d 	bl	8006f7c <__assert_func>
 8005302:	4620      	mov	r0, r4
 8005304:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8005306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800530a:	f000 b807 	b.w	800531c <localtime_r>
 800530e:	bf00      	nop
 8005310:	20000040 	.word	0x20000040
 8005314:	080083bc 	.word	0x080083bc
 8005318:	080083d3 	.word	0x080083d3

0800531c <localtime_r>:
 800531c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005320:	460c      	mov	r4, r1
 8005322:	4607      	mov	r7, r0
 8005324:	f001 feac 	bl	8007080 <__gettzinfo>
 8005328:	4621      	mov	r1, r4
 800532a:	4680      	mov	r8, r0
 800532c:	4638      	mov	r0, r7
 800532e:	f001 feab 	bl	8007088 <gmtime_r>
 8005332:	6943      	ldr	r3, [r0, #20]
 8005334:	4604      	mov	r4, r0
 8005336:	079a      	lsls	r2, r3, #30
 8005338:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 800533c:	d105      	bne.n	800534a <localtime_r+0x2e>
 800533e:	2264      	movs	r2, #100	; 0x64
 8005340:	fb96 f3f2 	sdiv	r3, r6, r2
 8005344:	fb02 6313 	mls	r3, r2, r3, r6
 8005348:	bb7b      	cbnz	r3, 80053aa <localtime_r+0x8e>
 800534a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800534e:	fb96 f5f3 	sdiv	r5, r6, r3
 8005352:	fb03 6515 	mls	r5, r3, r5, r6
 8005356:	fab5 f585 	clz	r5, r5
 800535a:	096d      	lsrs	r5, r5, #5
 800535c:	2230      	movs	r2, #48	; 0x30
 800535e:	4b68      	ldr	r3, [pc, #416]	; (8005500 <localtime_r+0x1e4>)
 8005360:	fb02 3505 	mla	r5, r2, r5, r3
 8005364:	f001 fba2 	bl	8006aac <__tz_lock>
 8005368:	f001 fbac 	bl	8006ac4 <_tzset_unlocked>
 800536c:	4b65      	ldr	r3, [pc, #404]	; (8005504 <localtime_r+0x1e8>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	b353      	cbz	r3, 80053c8 <localtime_r+0xac>
 8005372:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005376:	42b3      	cmp	r3, r6
 8005378:	d119      	bne.n	80053ae <localtime_r+0x92>
 800537a:	e9d7 6700 	ldrd	r6, r7, [r7]
 800537e:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 8005382:	f8d8 1000 	ldr.w	r1, [r8]
 8005386:	b9d1      	cbnz	r1, 80053be <localtime_r+0xa2>
 8005388:	4296      	cmp	r6, r2
 800538a:	eb77 0303 	sbcs.w	r3, r7, r3
 800538e:	da23      	bge.n	80053d8 <localtime_r+0xbc>
 8005390:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8005394:	4296      	cmp	r6, r2
 8005396:	eb77 0303 	sbcs.w	r3, r7, r3
 800539a:	bfb4      	ite	lt
 800539c:	2301      	movlt	r3, #1
 800539e:	2300      	movge	r3, #0
 80053a0:	6223      	str	r3, [r4, #32]
 80053a2:	db1b      	blt.n	80053dc <localtime_r+0xc0>
 80053a4:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 80053a8:	e01a      	b.n	80053e0 <localtime_r+0xc4>
 80053aa:	2501      	movs	r5, #1
 80053ac:	e7d6      	b.n	800535c <localtime_r+0x40>
 80053ae:	4630      	mov	r0, r6
 80053b0:	f001 fad4 	bl	800695c <__tzcalc_limits>
 80053b4:	2800      	cmp	r0, #0
 80053b6:	d1e0      	bne.n	800537a <localtime_r+0x5e>
 80053b8:	f04f 33ff 	mov.w	r3, #4294967295
 80053bc:	e004      	b.n	80053c8 <localtime_r+0xac>
 80053be:	4296      	cmp	r6, r2
 80053c0:	eb77 0303 	sbcs.w	r3, r7, r3
 80053c4:	da02      	bge.n	80053cc <localtime_r+0xb0>
 80053c6:	2300      	movs	r3, #0
 80053c8:	6223      	str	r3, [r4, #32]
 80053ca:	e7eb      	b.n	80053a4 <localtime_r+0x88>
 80053cc:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 80053d0:	4296      	cmp	r6, r2
 80053d2:	eb77 0303 	sbcs.w	r3, r7, r3
 80053d6:	daf6      	bge.n	80053c6 <localtime_r+0xaa>
 80053d8:	2301      	movs	r3, #1
 80053da:	6223      	str	r3, [r4, #32]
 80053dc:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 80053e0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80053e4:	fb91 f6f3 	sdiv	r6, r1, r3
 80053e8:	203c      	movs	r0, #60	; 0x3c
 80053ea:	fb03 1316 	mls	r3, r3, r6, r1
 80053ee:	fb93 f2f0 	sdiv	r2, r3, r0
 80053f2:	fb00 3012 	mls	r0, r0, r2, r3
 80053f6:	6861      	ldr	r1, [r4, #4]
 80053f8:	6823      	ldr	r3, [r4, #0]
 80053fa:	1a89      	subs	r1, r1, r2
 80053fc:	68a2      	ldr	r2, [r4, #8]
 80053fe:	1a1b      	subs	r3, r3, r0
 8005400:	1b92      	subs	r2, r2, r6
 8005402:	2b3b      	cmp	r3, #59	; 0x3b
 8005404:	6023      	str	r3, [r4, #0]
 8005406:	6061      	str	r1, [r4, #4]
 8005408:	60a2      	str	r2, [r4, #8]
 800540a:	dd34      	ble.n	8005476 <localtime_r+0x15a>
 800540c:	3101      	adds	r1, #1
 800540e:	6061      	str	r1, [r4, #4]
 8005410:	3b3c      	subs	r3, #60	; 0x3c
 8005412:	6023      	str	r3, [r4, #0]
 8005414:	6863      	ldr	r3, [r4, #4]
 8005416:	2b3b      	cmp	r3, #59	; 0x3b
 8005418:	dd33      	ble.n	8005482 <localtime_r+0x166>
 800541a:	3201      	adds	r2, #1
 800541c:	60a2      	str	r2, [r4, #8]
 800541e:	3b3c      	subs	r3, #60	; 0x3c
 8005420:	6063      	str	r3, [r4, #4]
 8005422:	68a3      	ldr	r3, [r4, #8]
 8005424:	2b17      	cmp	r3, #23
 8005426:	dd32      	ble.n	800548e <localtime_r+0x172>
 8005428:	69e2      	ldr	r2, [r4, #28]
 800542a:	3b18      	subs	r3, #24
 800542c:	3201      	adds	r2, #1
 800542e:	61e2      	str	r2, [r4, #28]
 8005430:	69a2      	ldr	r2, [r4, #24]
 8005432:	60a3      	str	r3, [r4, #8]
 8005434:	3201      	adds	r2, #1
 8005436:	2a06      	cmp	r2, #6
 8005438:	bfc8      	it	gt
 800543a:	2200      	movgt	r2, #0
 800543c:	61a2      	str	r2, [r4, #24]
 800543e:	68e2      	ldr	r2, [r4, #12]
 8005440:	6923      	ldr	r3, [r4, #16]
 8005442:	3201      	adds	r2, #1
 8005444:	60e2      	str	r2, [r4, #12]
 8005446:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 800544a:	428a      	cmp	r2, r1
 800544c:	dd0e      	ble.n	800546c <localtime_r+0x150>
 800544e:	2b0b      	cmp	r3, #11
 8005450:	eba2 0201 	sub.w	r2, r2, r1
 8005454:	60e2      	str	r2, [r4, #12]
 8005456:	f103 0201 	add.w	r2, r3, #1
 800545a:	bf05      	ittet	eq
 800545c:	2200      	moveq	r2, #0
 800545e:	6963      	ldreq	r3, [r4, #20]
 8005460:	6122      	strne	r2, [r4, #16]
 8005462:	3301      	addeq	r3, #1
 8005464:	bf02      	ittt	eq
 8005466:	6122      	streq	r2, [r4, #16]
 8005468:	6163      	streq	r3, [r4, #20]
 800546a:	61e2      	streq	r2, [r4, #28]
 800546c:	f001 fb24 	bl	8006ab8 <__tz_unlock>
 8005470:	4620      	mov	r0, r4
 8005472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005476:	2b00      	cmp	r3, #0
 8005478:	dacc      	bge.n	8005414 <localtime_r+0xf8>
 800547a:	3901      	subs	r1, #1
 800547c:	6061      	str	r1, [r4, #4]
 800547e:	333c      	adds	r3, #60	; 0x3c
 8005480:	e7c7      	b.n	8005412 <localtime_r+0xf6>
 8005482:	2b00      	cmp	r3, #0
 8005484:	dacd      	bge.n	8005422 <localtime_r+0x106>
 8005486:	3a01      	subs	r2, #1
 8005488:	60a2      	str	r2, [r4, #8]
 800548a:	333c      	adds	r3, #60	; 0x3c
 800548c:	e7c8      	b.n	8005420 <localtime_r+0x104>
 800548e:	2b00      	cmp	r3, #0
 8005490:	daec      	bge.n	800546c <localtime_r+0x150>
 8005492:	69e2      	ldr	r2, [r4, #28]
 8005494:	3318      	adds	r3, #24
 8005496:	3a01      	subs	r2, #1
 8005498:	61e2      	str	r2, [r4, #28]
 800549a:	69a2      	ldr	r2, [r4, #24]
 800549c:	60a3      	str	r3, [r4, #8]
 800549e:	3a01      	subs	r2, #1
 80054a0:	bf48      	it	mi
 80054a2:	2206      	movmi	r2, #6
 80054a4:	61a2      	str	r2, [r4, #24]
 80054a6:	68e2      	ldr	r2, [r4, #12]
 80054a8:	3a01      	subs	r2, #1
 80054aa:	60e2      	str	r2, [r4, #12]
 80054ac:	2a00      	cmp	r2, #0
 80054ae:	d1dd      	bne.n	800546c <localtime_r+0x150>
 80054b0:	6923      	ldr	r3, [r4, #16]
 80054b2:	3b01      	subs	r3, #1
 80054b4:	d405      	bmi.n	80054c2 <localtime_r+0x1a6>
 80054b6:	6123      	str	r3, [r4, #16]
 80054b8:	6923      	ldr	r3, [r4, #16]
 80054ba:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80054be:	60e3      	str	r3, [r4, #12]
 80054c0:	e7d4      	b.n	800546c <localtime_r+0x150>
 80054c2:	230b      	movs	r3, #11
 80054c4:	6123      	str	r3, [r4, #16]
 80054c6:	6963      	ldr	r3, [r4, #20]
 80054c8:	1e5a      	subs	r2, r3, #1
 80054ca:	6162      	str	r2, [r4, #20]
 80054cc:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 80054d0:	0793      	lsls	r3, r2, #30
 80054d2:	d105      	bne.n	80054e0 <localtime_r+0x1c4>
 80054d4:	2164      	movs	r1, #100	; 0x64
 80054d6:	fb92 f3f1 	sdiv	r3, r2, r1
 80054da:	fb01 2313 	mls	r3, r1, r3, r2
 80054de:	b963      	cbnz	r3, 80054fa <localtime_r+0x1de>
 80054e0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80054e4:	fb92 f3f1 	sdiv	r3, r2, r1
 80054e8:	fb01 2313 	mls	r3, r1, r3, r2
 80054ec:	fab3 f383 	clz	r3, r3
 80054f0:	095b      	lsrs	r3, r3, #5
 80054f2:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80054f6:	61e3      	str	r3, [r4, #28]
 80054f8:	e7de      	b.n	80054b8 <localtime_r+0x19c>
 80054fa:	2301      	movs	r3, #1
 80054fc:	e7f9      	b.n	80054f2 <localtime_r+0x1d6>
 80054fe:	bf00      	nop
 8005500:	08008434 	.word	0x08008434
 8005504:	200002e0 	.word	0x200002e0

08005508 <__retarget_lock_init_recursive>:
 8005508:	4770      	bx	lr

0800550a <__retarget_lock_acquire>:
 800550a:	4770      	bx	lr

0800550c <__retarget_lock_acquire_recursive>:
 800550c:	4770      	bx	lr

0800550e <__retarget_lock_release>:
 800550e:	4770      	bx	lr

08005510 <__retarget_lock_release_recursive>:
 8005510:	4770      	bx	lr
	...

08005514 <malloc>:
 8005514:	4b02      	ldr	r3, [pc, #8]	; (8005520 <malloc+0xc>)
 8005516:	4601      	mov	r1, r0
 8005518:	6818      	ldr	r0, [r3, #0]
 800551a:	f000 b85f 	b.w	80055dc <_malloc_r>
 800551e:	bf00      	nop
 8005520:	20000040 	.word	0x20000040

08005524 <free>:
 8005524:	4b02      	ldr	r3, [pc, #8]	; (8005530 <free+0xc>)
 8005526:	4601      	mov	r1, r0
 8005528:	6818      	ldr	r0, [r3, #0]
 800552a:	f000 b80b 	b.w	8005544 <_free_r>
 800552e:	bf00      	nop
 8005530:	20000040 	.word	0x20000040

08005534 <memset>:
 8005534:	4603      	mov	r3, r0
 8005536:	4402      	add	r2, r0
 8005538:	4293      	cmp	r3, r2
 800553a:	d100      	bne.n	800553e <memset+0xa>
 800553c:	4770      	bx	lr
 800553e:	f803 1b01 	strb.w	r1, [r3], #1
 8005542:	e7f9      	b.n	8005538 <memset+0x4>

08005544 <_free_r>:
 8005544:	b538      	push	{r3, r4, r5, lr}
 8005546:	4605      	mov	r5, r0
 8005548:	2900      	cmp	r1, #0
 800554a:	d043      	beq.n	80055d4 <_free_r+0x90>
 800554c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005550:	1f0c      	subs	r4, r1, #4
 8005552:	2b00      	cmp	r3, #0
 8005554:	bfb8      	it	lt
 8005556:	18e4      	addlt	r4, r4, r3
 8005558:	f001 ff08 	bl	800736c <__malloc_lock>
 800555c:	4a1e      	ldr	r2, [pc, #120]	; (80055d8 <_free_r+0x94>)
 800555e:	6813      	ldr	r3, [r2, #0]
 8005560:	4610      	mov	r0, r2
 8005562:	b933      	cbnz	r3, 8005572 <_free_r+0x2e>
 8005564:	6063      	str	r3, [r4, #4]
 8005566:	6014      	str	r4, [r2, #0]
 8005568:	4628      	mov	r0, r5
 800556a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800556e:	f001 bf03 	b.w	8007378 <__malloc_unlock>
 8005572:	42a3      	cmp	r3, r4
 8005574:	d90a      	bls.n	800558c <_free_r+0x48>
 8005576:	6821      	ldr	r1, [r4, #0]
 8005578:	1862      	adds	r2, r4, r1
 800557a:	4293      	cmp	r3, r2
 800557c:	bf01      	itttt	eq
 800557e:	681a      	ldreq	r2, [r3, #0]
 8005580:	685b      	ldreq	r3, [r3, #4]
 8005582:	1852      	addeq	r2, r2, r1
 8005584:	6022      	streq	r2, [r4, #0]
 8005586:	6063      	str	r3, [r4, #4]
 8005588:	6004      	str	r4, [r0, #0]
 800558a:	e7ed      	b.n	8005568 <_free_r+0x24>
 800558c:	461a      	mov	r2, r3
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	b10b      	cbz	r3, 8005596 <_free_r+0x52>
 8005592:	42a3      	cmp	r3, r4
 8005594:	d9fa      	bls.n	800558c <_free_r+0x48>
 8005596:	6811      	ldr	r1, [r2, #0]
 8005598:	1850      	adds	r0, r2, r1
 800559a:	42a0      	cmp	r0, r4
 800559c:	d10b      	bne.n	80055b6 <_free_r+0x72>
 800559e:	6820      	ldr	r0, [r4, #0]
 80055a0:	4401      	add	r1, r0
 80055a2:	1850      	adds	r0, r2, r1
 80055a4:	4283      	cmp	r3, r0
 80055a6:	6011      	str	r1, [r2, #0]
 80055a8:	d1de      	bne.n	8005568 <_free_r+0x24>
 80055aa:	6818      	ldr	r0, [r3, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	4401      	add	r1, r0
 80055b0:	6011      	str	r1, [r2, #0]
 80055b2:	6053      	str	r3, [r2, #4]
 80055b4:	e7d8      	b.n	8005568 <_free_r+0x24>
 80055b6:	d902      	bls.n	80055be <_free_r+0x7a>
 80055b8:	230c      	movs	r3, #12
 80055ba:	602b      	str	r3, [r5, #0]
 80055bc:	e7d4      	b.n	8005568 <_free_r+0x24>
 80055be:	6820      	ldr	r0, [r4, #0]
 80055c0:	1821      	adds	r1, r4, r0
 80055c2:	428b      	cmp	r3, r1
 80055c4:	bf01      	itttt	eq
 80055c6:	6819      	ldreq	r1, [r3, #0]
 80055c8:	685b      	ldreq	r3, [r3, #4]
 80055ca:	1809      	addeq	r1, r1, r0
 80055cc:	6021      	streq	r1, [r4, #0]
 80055ce:	6063      	str	r3, [r4, #4]
 80055d0:	6054      	str	r4, [r2, #4]
 80055d2:	e7c9      	b.n	8005568 <_free_r+0x24>
 80055d4:	bd38      	pop	{r3, r4, r5, pc}
 80055d6:	bf00      	nop
 80055d8:	200002bc 	.word	0x200002bc

080055dc <_malloc_r>:
 80055dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055de:	1ccd      	adds	r5, r1, #3
 80055e0:	f025 0503 	bic.w	r5, r5, #3
 80055e4:	3508      	adds	r5, #8
 80055e6:	2d0c      	cmp	r5, #12
 80055e8:	bf38      	it	cc
 80055ea:	250c      	movcc	r5, #12
 80055ec:	2d00      	cmp	r5, #0
 80055ee:	4606      	mov	r6, r0
 80055f0:	db01      	blt.n	80055f6 <_malloc_r+0x1a>
 80055f2:	42a9      	cmp	r1, r5
 80055f4:	d903      	bls.n	80055fe <_malloc_r+0x22>
 80055f6:	230c      	movs	r3, #12
 80055f8:	6033      	str	r3, [r6, #0]
 80055fa:	2000      	movs	r0, #0
 80055fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055fe:	f001 feb5 	bl	800736c <__malloc_lock>
 8005602:	4921      	ldr	r1, [pc, #132]	; (8005688 <_malloc_r+0xac>)
 8005604:	680a      	ldr	r2, [r1, #0]
 8005606:	4614      	mov	r4, r2
 8005608:	b99c      	cbnz	r4, 8005632 <_malloc_r+0x56>
 800560a:	4f20      	ldr	r7, [pc, #128]	; (800568c <_malloc_r+0xb0>)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	b923      	cbnz	r3, 800561a <_malloc_r+0x3e>
 8005610:	4621      	mov	r1, r4
 8005612:	4630      	mov	r0, r6
 8005614:	f000 fb34 	bl	8005c80 <_sbrk_r>
 8005618:	6038      	str	r0, [r7, #0]
 800561a:	4629      	mov	r1, r5
 800561c:	4630      	mov	r0, r6
 800561e:	f000 fb2f 	bl	8005c80 <_sbrk_r>
 8005622:	1c43      	adds	r3, r0, #1
 8005624:	d123      	bne.n	800566e <_malloc_r+0x92>
 8005626:	230c      	movs	r3, #12
 8005628:	4630      	mov	r0, r6
 800562a:	6033      	str	r3, [r6, #0]
 800562c:	f001 fea4 	bl	8007378 <__malloc_unlock>
 8005630:	e7e3      	b.n	80055fa <_malloc_r+0x1e>
 8005632:	6823      	ldr	r3, [r4, #0]
 8005634:	1b5b      	subs	r3, r3, r5
 8005636:	d417      	bmi.n	8005668 <_malloc_r+0x8c>
 8005638:	2b0b      	cmp	r3, #11
 800563a:	d903      	bls.n	8005644 <_malloc_r+0x68>
 800563c:	6023      	str	r3, [r4, #0]
 800563e:	441c      	add	r4, r3
 8005640:	6025      	str	r5, [r4, #0]
 8005642:	e004      	b.n	800564e <_malloc_r+0x72>
 8005644:	6863      	ldr	r3, [r4, #4]
 8005646:	42a2      	cmp	r2, r4
 8005648:	bf0c      	ite	eq
 800564a:	600b      	streq	r3, [r1, #0]
 800564c:	6053      	strne	r3, [r2, #4]
 800564e:	4630      	mov	r0, r6
 8005650:	f001 fe92 	bl	8007378 <__malloc_unlock>
 8005654:	f104 000b 	add.w	r0, r4, #11
 8005658:	1d23      	adds	r3, r4, #4
 800565a:	f020 0007 	bic.w	r0, r0, #7
 800565e:	1ac2      	subs	r2, r0, r3
 8005660:	d0cc      	beq.n	80055fc <_malloc_r+0x20>
 8005662:	1a1b      	subs	r3, r3, r0
 8005664:	50a3      	str	r3, [r4, r2]
 8005666:	e7c9      	b.n	80055fc <_malloc_r+0x20>
 8005668:	4622      	mov	r2, r4
 800566a:	6864      	ldr	r4, [r4, #4]
 800566c:	e7cc      	b.n	8005608 <_malloc_r+0x2c>
 800566e:	1cc4      	adds	r4, r0, #3
 8005670:	f024 0403 	bic.w	r4, r4, #3
 8005674:	42a0      	cmp	r0, r4
 8005676:	d0e3      	beq.n	8005640 <_malloc_r+0x64>
 8005678:	1a21      	subs	r1, r4, r0
 800567a:	4630      	mov	r0, r6
 800567c:	f000 fb00 	bl	8005c80 <_sbrk_r>
 8005680:	3001      	adds	r0, #1
 8005682:	d1dd      	bne.n	8005640 <_malloc_r+0x64>
 8005684:	e7cf      	b.n	8005626 <_malloc_r+0x4a>
 8005686:	bf00      	nop
 8005688:	200002bc 	.word	0x200002bc
 800568c:	200002c0 	.word	0x200002c0

08005690 <__sfputc_r>:
 8005690:	6893      	ldr	r3, [r2, #8]
 8005692:	b410      	push	{r4}
 8005694:	3b01      	subs	r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	6093      	str	r3, [r2, #8]
 800569a:	da07      	bge.n	80056ac <__sfputc_r+0x1c>
 800569c:	6994      	ldr	r4, [r2, #24]
 800569e:	42a3      	cmp	r3, r4
 80056a0:	db01      	blt.n	80056a6 <__sfputc_r+0x16>
 80056a2:	290a      	cmp	r1, #10
 80056a4:	d102      	bne.n	80056ac <__sfputc_r+0x1c>
 80056a6:	bc10      	pop	{r4}
 80056a8:	f001 bb92 	b.w	8006dd0 <__swbuf_r>
 80056ac:	6813      	ldr	r3, [r2, #0]
 80056ae:	1c58      	adds	r0, r3, #1
 80056b0:	6010      	str	r0, [r2, #0]
 80056b2:	7019      	strb	r1, [r3, #0]
 80056b4:	4608      	mov	r0, r1
 80056b6:	bc10      	pop	{r4}
 80056b8:	4770      	bx	lr

080056ba <__sfputs_r>:
 80056ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056bc:	4606      	mov	r6, r0
 80056be:	460f      	mov	r7, r1
 80056c0:	4614      	mov	r4, r2
 80056c2:	18d5      	adds	r5, r2, r3
 80056c4:	42ac      	cmp	r4, r5
 80056c6:	d101      	bne.n	80056cc <__sfputs_r+0x12>
 80056c8:	2000      	movs	r0, #0
 80056ca:	e007      	b.n	80056dc <__sfputs_r+0x22>
 80056cc:	463a      	mov	r2, r7
 80056ce:	4630      	mov	r0, r6
 80056d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056d4:	f7ff ffdc 	bl	8005690 <__sfputc_r>
 80056d8:	1c43      	adds	r3, r0, #1
 80056da:	d1f3      	bne.n	80056c4 <__sfputs_r+0xa>
 80056dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080056e0 <_vfiprintf_r>:
 80056e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e4:	460d      	mov	r5, r1
 80056e6:	4614      	mov	r4, r2
 80056e8:	4698      	mov	r8, r3
 80056ea:	4606      	mov	r6, r0
 80056ec:	b09d      	sub	sp, #116	; 0x74
 80056ee:	b118      	cbz	r0, 80056f8 <_vfiprintf_r+0x18>
 80056f0:	6983      	ldr	r3, [r0, #24]
 80056f2:	b90b      	cbnz	r3, 80056f8 <_vfiprintf_r+0x18>
 80056f4:	f7ff fd20 	bl	8005138 <__sinit>
 80056f8:	4b89      	ldr	r3, [pc, #548]	; (8005920 <_vfiprintf_r+0x240>)
 80056fa:	429d      	cmp	r5, r3
 80056fc:	d11b      	bne.n	8005736 <_vfiprintf_r+0x56>
 80056fe:	6875      	ldr	r5, [r6, #4]
 8005700:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005702:	07d9      	lsls	r1, r3, #31
 8005704:	d405      	bmi.n	8005712 <_vfiprintf_r+0x32>
 8005706:	89ab      	ldrh	r3, [r5, #12]
 8005708:	059a      	lsls	r2, r3, #22
 800570a:	d402      	bmi.n	8005712 <_vfiprintf_r+0x32>
 800570c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800570e:	f7ff fefd 	bl	800550c <__retarget_lock_acquire_recursive>
 8005712:	89ab      	ldrh	r3, [r5, #12]
 8005714:	071b      	lsls	r3, r3, #28
 8005716:	d501      	bpl.n	800571c <_vfiprintf_r+0x3c>
 8005718:	692b      	ldr	r3, [r5, #16]
 800571a:	b9eb      	cbnz	r3, 8005758 <_vfiprintf_r+0x78>
 800571c:	4629      	mov	r1, r5
 800571e:	4630      	mov	r0, r6
 8005720:	f001 fbba 	bl	8006e98 <__swsetup_r>
 8005724:	b1c0      	cbz	r0, 8005758 <_vfiprintf_r+0x78>
 8005726:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005728:	07dc      	lsls	r4, r3, #31
 800572a:	d50e      	bpl.n	800574a <_vfiprintf_r+0x6a>
 800572c:	f04f 30ff 	mov.w	r0, #4294967295
 8005730:	b01d      	add	sp, #116	; 0x74
 8005732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005736:	4b7b      	ldr	r3, [pc, #492]	; (8005924 <_vfiprintf_r+0x244>)
 8005738:	429d      	cmp	r5, r3
 800573a:	d101      	bne.n	8005740 <_vfiprintf_r+0x60>
 800573c:	68b5      	ldr	r5, [r6, #8]
 800573e:	e7df      	b.n	8005700 <_vfiprintf_r+0x20>
 8005740:	4b79      	ldr	r3, [pc, #484]	; (8005928 <_vfiprintf_r+0x248>)
 8005742:	429d      	cmp	r5, r3
 8005744:	bf08      	it	eq
 8005746:	68f5      	ldreq	r5, [r6, #12]
 8005748:	e7da      	b.n	8005700 <_vfiprintf_r+0x20>
 800574a:	89ab      	ldrh	r3, [r5, #12]
 800574c:	0598      	lsls	r0, r3, #22
 800574e:	d4ed      	bmi.n	800572c <_vfiprintf_r+0x4c>
 8005750:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005752:	f7ff fedd 	bl	8005510 <__retarget_lock_release_recursive>
 8005756:	e7e9      	b.n	800572c <_vfiprintf_r+0x4c>
 8005758:	2300      	movs	r3, #0
 800575a:	9309      	str	r3, [sp, #36]	; 0x24
 800575c:	2320      	movs	r3, #32
 800575e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005762:	2330      	movs	r3, #48	; 0x30
 8005764:	f04f 0901 	mov.w	r9, #1
 8005768:	f8cd 800c 	str.w	r8, [sp, #12]
 800576c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800592c <_vfiprintf_r+0x24c>
 8005770:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005774:	4623      	mov	r3, r4
 8005776:	469a      	mov	sl, r3
 8005778:	f813 2b01 	ldrb.w	r2, [r3], #1
 800577c:	b10a      	cbz	r2, 8005782 <_vfiprintf_r+0xa2>
 800577e:	2a25      	cmp	r2, #37	; 0x25
 8005780:	d1f9      	bne.n	8005776 <_vfiprintf_r+0x96>
 8005782:	ebba 0b04 	subs.w	fp, sl, r4
 8005786:	d00b      	beq.n	80057a0 <_vfiprintf_r+0xc0>
 8005788:	465b      	mov	r3, fp
 800578a:	4622      	mov	r2, r4
 800578c:	4629      	mov	r1, r5
 800578e:	4630      	mov	r0, r6
 8005790:	f7ff ff93 	bl	80056ba <__sfputs_r>
 8005794:	3001      	adds	r0, #1
 8005796:	f000 80aa 	beq.w	80058ee <_vfiprintf_r+0x20e>
 800579a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800579c:	445a      	add	r2, fp
 800579e:	9209      	str	r2, [sp, #36]	; 0x24
 80057a0:	f89a 3000 	ldrb.w	r3, [sl]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 80a2 	beq.w	80058ee <_vfiprintf_r+0x20e>
 80057aa:	2300      	movs	r3, #0
 80057ac:	f04f 32ff 	mov.w	r2, #4294967295
 80057b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057b4:	f10a 0a01 	add.w	sl, sl, #1
 80057b8:	9304      	str	r3, [sp, #16]
 80057ba:	9307      	str	r3, [sp, #28]
 80057bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057c0:	931a      	str	r3, [sp, #104]	; 0x68
 80057c2:	4654      	mov	r4, sl
 80057c4:	2205      	movs	r2, #5
 80057c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057ca:	4858      	ldr	r0, [pc, #352]	; (800592c <_vfiprintf_r+0x24c>)
 80057cc:	f001 fd98 	bl	8007300 <memchr>
 80057d0:	9a04      	ldr	r2, [sp, #16]
 80057d2:	b9d8      	cbnz	r0, 800580c <_vfiprintf_r+0x12c>
 80057d4:	06d1      	lsls	r1, r2, #27
 80057d6:	bf44      	itt	mi
 80057d8:	2320      	movmi	r3, #32
 80057da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057de:	0713      	lsls	r3, r2, #28
 80057e0:	bf44      	itt	mi
 80057e2:	232b      	movmi	r3, #43	; 0x2b
 80057e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057e8:	f89a 3000 	ldrb.w	r3, [sl]
 80057ec:	2b2a      	cmp	r3, #42	; 0x2a
 80057ee:	d015      	beq.n	800581c <_vfiprintf_r+0x13c>
 80057f0:	4654      	mov	r4, sl
 80057f2:	2000      	movs	r0, #0
 80057f4:	f04f 0c0a 	mov.w	ip, #10
 80057f8:	9a07      	ldr	r2, [sp, #28]
 80057fa:	4621      	mov	r1, r4
 80057fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005800:	3b30      	subs	r3, #48	; 0x30
 8005802:	2b09      	cmp	r3, #9
 8005804:	d94e      	bls.n	80058a4 <_vfiprintf_r+0x1c4>
 8005806:	b1b0      	cbz	r0, 8005836 <_vfiprintf_r+0x156>
 8005808:	9207      	str	r2, [sp, #28]
 800580a:	e014      	b.n	8005836 <_vfiprintf_r+0x156>
 800580c:	eba0 0308 	sub.w	r3, r0, r8
 8005810:	fa09 f303 	lsl.w	r3, r9, r3
 8005814:	4313      	orrs	r3, r2
 8005816:	46a2      	mov	sl, r4
 8005818:	9304      	str	r3, [sp, #16]
 800581a:	e7d2      	b.n	80057c2 <_vfiprintf_r+0xe2>
 800581c:	9b03      	ldr	r3, [sp, #12]
 800581e:	1d19      	adds	r1, r3, #4
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	9103      	str	r1, [sp, #12]
 8005824:	2b00      	cmp	r3, #0
 8005826:	bfbb      	ittet	lt
 8005828:	425b      	neglt	r3, r3
 800582a:	f042 0202 	orrlt.w	r2, r2, #2
 800582e:	9307      	strge	r3, [sp, #28]
 8005830:	9307      	strlt	r3, [sp, #28]
 8005832:	bfb8      	it	lt
 8005834:	9204      	strlt	r2, [sp, #16]
 8005836:	7823      	ldrb	r3, [r4, #0]
 8005838:	2b2e      	cmp	r3, #46	; 0x2e
 800583a:	d10c      	bne.n	8005856 <_vfiprintf_r+0x176>
 800583c:	7863      	ldrb	r3, [r4, #1]
 800583e:	2b2a      	cmp	r3, #42	; 0x2a
 8005840:	d135      	bne.n	80058ae <_vfiprintf_r+0x1ce>
 8005842:	9b03      	ldr	r3, [sp, #12]
 8005844:	3402      	adds	r4, #2
 8005846:	1d1a      	adds	r2, r3, #4
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	9203      	str	r2, [sp, #12]
 800584c:	2b00      	cmp	r3, #0
 800584e:	bfb8      	it	lt
 8005850:	f04f 33ff 	movlt.w	r3, #4294967295
 8005854:	9305      	str	r3, [sp, #20]
 8005856:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800593c <_vfiprintf_r+0x25c>
 800585a:	2203      	movs	r2, #3
 800585c:	4650      	mov	r0, sl
 800585e:	7821      	ldrb	r1, [r4, #0]
 8005860:	f001 fd4e 	bl	8007300 <memchr>
 8005864:	b140      	cbz	r0, 8005878 <_vfiprintf_r+0x198>
 8005866:	2340      	movs	r3, #64	; 0x40
 8005868:	eba0 000a 	sub.w	r0, r0, sl
 800586c:	fa03 f000 	lsl.w	r0, r3, r0
 8005870:	9b04      	ldr	r3, [sp, #16]
 8005872:	3401      	adds	r4, #1
 8005874:	4303      	orrs	r3, r0
 8005876:	9304      	str	r3, [sp, #16]
 8005878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800587c:	2206      	movs	r2, #6
 800587e:	482c      	ldr	r0, [pc, #176]	; (8005930 <_vfiprintf_r+0x250>)
 8005880:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005884:	f001 fd3c 	bl	8007300 <memchr>
 8005888:	2800      	cmp	r0, #0
 800588a:	d03f      	beq.n	800590c <_vfiprintf_r+0x22c>
 800588c:	4b29      	ldr	r3, [pc, #164]	; (8005934 <_vfiprintf_r+0x254>)
 800588e:	bb1b      	cbnz	r3, 80058d8 <_vfiprintf_r+0x1f8>
 8005890:	9b03      	ldr	r3, [sp, #12]
 8005892:	3307      	adds	r3, #7
 8005894:	f023 0307 	bic.w	r3, r3, #7
 8005898:	3308      	adds	r3, #8
 800589a:	9303      	str	r3, [sp, #12]
 800589c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800589e:	443b      	add	r3, r7
 80058a0:	9309      	str	r3, [sp, #36]	; 0x24
 80058a2:	e767      	b.n	8005774 <_vfiprintf_r+0x94>
 80058a4:	460c      	mov	r4, r1
 80058a6:	2001      	movs	r0, #1
 80058a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80058ac:	e7a5      	b.n	80057fa <_vfiprintf_r+0x11a>
 80058ae:	2300      	movs	r3, #0
 80058b0:	f04f 0c0a 	mov.w	ip, #10
 80058b4:	4619      	mov	r1, r3
 80058b6:	3401      	adds	r4, #1
 80058b8:	9305      	str	r3, [sp, #20]
 80058ba:	4620      	mov	r0, r4
 80058bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058c0:	3a30      	subs	r2, #48	; 0x30
 80058c2:	2a09      	cmp	r2, #9
 80058c4:	d903      	bls.n	80058ce <_vfiprintf_r+0x1ee>
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d0c5      	beq.n	8005856 <_vfiprintf_r+0x176>
 80058ca:	9105      	str	r1, [sp, #20]
 80058cc:	e7c3      	b.n	8005856 <_vfiprintf_r+0x176>
 80058ce:	4604      	mov	r4, r0
 80058d0:	2301      	movs	r3, #1
 80058d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80058d6:	e7f0      	b.n	80058ba <_vfiprintf_r+0x1da>
 80058d8:	ab03      	add	r3, sp, #12
 80058da:	9300      	str	r3, [sp, #0]
 80058dc:	462a      	mov	r2, r5
 80058de:	4630      	mov	r0, r6
 80058e0:	4b15      	ldr	r3, [pc, #84]	; (8005938 <_vfiprintf_r+0x258>)
 80058e2:	a904      	add	r1, sp, #16
 80058e4:	f3af 8000 	nop.w
 80058e8:	4607      	mov	r7, r0
 80058ea:	1c78      	adds	r0, r7, #1
 80058ec:	d1d6      	bne.n	800589c <_vfiprintf_r+0x1bc>
 80058ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058f0:	07d9      	lsls	r1, r3, #31
 80058f2:	d405      	bmi.n	8005900 <_vfiprintf_r+0x220>
 80058f4:	89ab      	ldrh	r3, [r5, #12]
 80058f6:	059a      	lsls	r2, r3, #22
 80058f8:	d402      	bmi.n	8005900 <_vfiprintf_r+0x220>
 80058fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058fc:	f7ff fe08 	bl	8005510 <__retarget_lock_release_recursive>
 8005900:	89ab      	ldrh	r3, [r5, #12]
 8005902:	065b      	lsls	r3, r3, #25
 8005904:	f53f af12 	bmi.w	800572c <_vfiprintf_r+0x4c>
 8005908:	9809      	ldr	r0, [sp, #36]	; 0x24
 800590a:	e711      	b.n	8005730 <_vfiprintf_r+0x50>
 800590c:	ab03      	add	r3, sp, #12
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	462a      	mov	r2, r5
 8005912:	4630      	mov	r0, r6
 8005914:	4b08      	ldr	r3, [pc, #32]	; (8005938 <_vfiprintf_r+0x258>)
 8005916:	a904      	add	r1, sp, #16
 8005918:	f000 f88c 	bl	8005a34 <_printf_i>
 800591c:	e7e4      	b.n	80058e8 <_vfiprintf_r+0x208>
 800591e:	bf00      	nop
 8005920:	08008378 	.word	0x08008378
 8005924:	08008398 	.word	0x08008398
 8005928:	08008358 	.word	0x08008358
 800592c:	08008494 	.word	0x08008494
 8005930:	0800849e 	.word	0x0800849e
 8005934:	00000000 	.word	0x00000000
 8005938:	080056bb 	.word	0x080056bb
 800593c:	0800849a 	.word	0x0800849a

08005940 <vfiprintf>:
 8005940:	4613      	mov	r3, r2
 8005942:	460a      	mov	r2, r1
 8005944:	4601      	mov	r1, r0
 8005946:	4802      	ldr	r0, [pc, #8]	; (8005950 <vfiprintf+0x10>)
 8005948:	6800      	ldr	r0, [r0, #0]
 800594a:	f7ff bec9 	b.w	80056e0 <_vfiprintf_r>
 800594e:	bf00      	nop
 8005950:	20000040 	.word	0x20000040

08005954 <_printf_common>:
 8005954:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005958:	4616      	mov	r6, r2
 800595a:	4699      	mov	r9, r3
 800595c:	688a      	ldr	r2, [r1, #8]
 800595e:	690b      	ldr	r3, [r1, #16]
 8005960:	4607      	mov	r7, r0
 8005962:	4293      	cmp	r3, r2
 8005964:	bfb8      	it	lt
 8005966:	4613      	movlt	r3, r2
 8005968:	6033      	str	r3, [r6, #0]
 800596a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800596e:	460c      	mov	r4, r1
 8005970:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005974:	b10a      	cbz	r2, 800597a <_printf_common+0x26>
 8005976:	3301      	adds	r3, #1
 8005978:	6033      	str	r3, [r6, #0]
 800597a:	6823      	ldr	r3, [r4, #0]
 800597c:	0699      	lsls	r1, r3, #26
 800597e:	bf42      	ittt	mi
 8005980:	6833      	ldrmi	r3, [r6, #0]
 8005982:	3302      	addmi	r3, #2
 8005984:	6033      	strmi	r3, [r6, #0]
 8005986:	6825      	ldr	r5, [r4, #0]
 8005988:	f015 0506 	ands.w	r5, r5, #6
 800598c:	d106      	bne.n	800599c <_printf_common+0x48>
 800598e:	f104 0a19 	add.w	sl, r4, #25
 8005992:	68e3      	ldr	r3, [r4, #12]
 8005994:	6832      	ldr	r2, [r6, #0]
 8005996:	1a9b      	subs	r3, r3, r2
 8005998:	42ab      	cmp	r3, r5
 800599a:	dc28      	bgt.n	80059ee <_printf_common+0x9a>
 800599c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059a0:	1e13      	subs	r3, r2, #0
 80059a2:	6822      	ldr	r2, [r4, #0]
 80059a4:	bf18      	it	ne
 80059a6:	2301      	movne	r3, #1
 80059a8:	0692      	lsls	r2, r2, #26
 80059aa:	d42d      	bmi.n	8005a08 <_printf_common+0xb4>
 80059ac:	4649      	mov	r1, r9
 80059ae:	4638      	mov	r0, r7
 80059b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059b4:	47c0      	blx	r8
 80059b6:	3001      	adds	r0, #1
 80059b8:	d020      	beq.n	80059fc <_printf_common+0xa8>
 80059ba:	6823      	ldr	r3, [r4, #0]
 80059bc:	68e5      	ldr	r5, [r4, #12]
 80059be:	f003 0306 	and.w	r3, r3, #6
 80059c2:	2b04      	cmp	r3, #4
 80059c4:	bf18      	it	ne
 80059c6:	2500      	movne	r5, #0
 80059c8:	6832      	ldr	r2, [r6, #0]
 80059ca:	f04f 0600 	mov.w	r6, #0
 80059ce:	68a3      	ldr	r3, [r4, #8]
 80059d0:	bf08      	it	eq
 80059d2:	1aad      	subeq	r5, r5, r2
 80059d4:	6922      	ldr	r2, [r4, #16]
 80059d6:	bf08      	it	eq
 80059d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059dc:	4293      	cmp	r3, r2
 80059de:	bfc4      	itt	gt
 80059e0:	1a9b      	subgt	r3, r3, r2
 80059e2:	18ed      	addgt	r5, r5, r3
 80059e4:	341a      	adds	r4, #26
 80059e6:	42b5      	cmp	r5, r6
 80059e8:	d11a      	bne.n	8005a20 <_printf_common+0xcc>
 80059ea:	2000      	movs	r0, #0
 80059ec:	e008      	b.n	8005a00 <_printf_common+0xac>
 80059ee:	2301      	movs	r3, #1
 80059f0:	4652      	mov	r2, sl
 80059f2:	4649      	mov	r1, r9
 80059f4:	4638      	mov	r0, r7
 80059f6:	47c0      	blx	r8
 80059f8:	3001      	adds	r0, #1
 80059fa:	d103      	bne.n	8005a04 <_printf_common+0xb0>
 80059fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a04:	3501      	adds	r5, #1
 8005a06:	e7c4      	b.n	8005992 <_printf_common+0x3e>
 8005a08:	2030      	movs	r0, #48	; 0x30
 8005a0a:	18e1      	adds	r1, r4, r3
 8005a0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a10:	1c5a      	adds	r2, r3, #1
 8005a12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a16:	4422      	add	r2, r4
 8005a18:	3302      	adds	r3, #2
 8005a1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a1e:	e7c5      	b.n	80059ac <_printf_common+0x58>
 8005a20:	2301      	movs	r3, #1
 8005a22:	4622      	mov	r2, r4
 8005a24:	4649      	mov	r1, r9
 8005a26:	4638      	mov	r0, r7
 8005a28:	47c0      	blx	r8
 8005a2a:	3001      	adds	r0, #1
 8005a2c:	d0e6      	beq.n	80059fc <_printf_common+0xa8>
 8005a2e:	3601      	adds	r6, #1
 8005a30:	e7d9      	b.n	80059e6 <_printf_common+0x92>
	...

08005a34 <_printf_i>:
 8005a34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a38:	460c      	mov	r4, r1
 8005a3a:	7e27      	ldrb	r7, [r4, #24]
 8005a3c:	4691      	mov	r9, r2
 8005a3e:	2f78      	cmp	r7, #120	; 0x78
 8005a40:	4680      	mov	r8, r0
 8005a42:	469a      	mov	sl, r3
 8005a44:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005a46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a4a:	d807      	bhi.n	8005a5c <_printf_i+0x28>
 8005a4c:	2f62      	cmp	r7, #98	; 0x62
 8005a4e:	d80a      	bhi.n	8005a66 <_printf_i+0x32>
 8005a50:	2f00      	cmp	r7, #0
 8005a52:	f000 80d9 	beq.w	8005c08 <_printf_i+0x1d4>
 8005a56:	2f58      	cmp	r7, #88	; 0x58
 8005a58:	f000 80a4 	beq.w	8005ba4 <_printf_i+0x170>
 8005a5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005a60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a64:	e03a      	b.n	8005adc <_printf_i+0xa8>
 8005a66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a6a:	2b15      	cmp	r3, #21
 8005a6c:	d8f6      	bhi.n	8005a5c <_printf_i+0x28>
 8005a6e:	a001      	add	r0, pc, #4	; (adr r0, 8005a74 <_printf_i+0x40>)
 8005a70:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005a74:	08005acd 	.word	0x08005acd
 8005a78:	08005ae1 	.word	0x08005ae1
 8005a7c:	08005a5d 	.word	0x08005a5d
 8005a80:	08005a5d 	.word	0x08005a5d
 8005a84:	08005a5d 	.word	0x08005a5d
 8005a88:	08005a5d 	.word	0x08005a5d
 8005a8c:	08005ae1 	.word	0x08005ae1
 8005a90:	08005a5d 	.word	0x08005a5d
 8005a94:	08005a5d 	.word	0x08005a5d
 8005a98:	08005a5d 	.word	0x08005a5d
 8005a9c:	08005a5d 	.word	0x08005a5d
 8005aa0:	08005bef 	.word	0x08005bef
 8005aa4:	08005b11 	.word	0x08005b11
 8005aa8:	08005bd1 	.word	0x08005bd1
 8005aac:	08005a5d 	.word	0x08005a5d
 8005ab0:	08005a5d 	.word	0x08005a5d
 8005ab4:	08005c11 	.word	0x08005c11
 8005ab8:	08005a5d 	.word	0x08005a5d
 8005abc:	08005b11 	.word	0x08005b11
 8005ac0:	08005a5d 	.word	0x08005a5d
 8005ac4:	08005a5d 	.word	0x08005a5d
 8005ac8:	08005bd9 	.word	0x08005bd9
 8005acc:	680b      	ldr	r3, [r1, #0]
 8005ace:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ad2:	1d1a      	adds	r2, r3, #4
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	600a      	str	r2, [r1, #0]
 8005ad8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005adc:	2301      	movs	r3, #1
 8005ade:	e0a4      	b.n	8005c2a <_printf_i+0x1f6>
 8005ae0:	6825      	ldr	r5, [r4, #0]
 8005ae2:	6808      	ldr	r0, [r1, #0]
 8005ae4:	062e      	lsls	r6, r5, #24
 8005ae6:	f100 0304 	add.w	r3, r0, #4
 8005aea:	d50a      	bpl.n	8005b02 <_printf_i+0xce>
 8005aec:	6805      	ldr	r5, [r0, #0]
 8005aee:	600b      	str	r3, [r1, #0]
 8005af0:	2d00      	cmp	r5, #0
 8005af2:	da03      	bge.n	8005afc <_printf_i+0xc8>
 8005af4:	232d      	movs	r3, #45	; 0x2d
 8005af6:	426d      	negs	r5, r5
 8005af8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005afc:	230a      	movs	r3, #10
 8005afe:	485e      	ldr	r0, [pc, #376]	; (8005c78 <_printf_i+0x244>)
 8005b00:	e019      	b.n	8005b36 <_printf_i+0x102>
 8005b02:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005b06:	6805      	ldr	r5, [r0, #0]
 8005b08:	600b      	str	r3, [r1, #0]
 8005b0a:	bf18      	it	ne
 8005b0c:	b22d      	sxthne	r5, r5
 8005b0e:	e7ef      	b.n	8005af0 <_printf_i+0xbc>
 8005b10:	680b      	ldr	r3, [r1, #0]
 8005b12:	6825      	ldr	r5, [r4, #0]
 8005b14:	1d18      	adds	r0, r3, #4
 8005b16:	6008      	str	r0, [r1, #0]
 8005b18:	0628      	lsls	r0, r5, #24
 8005b1a:	d501      	bpl.n	8005b20 <_printf_i+0xec>
 8005b1c:	681d      	ldr	r5, [r3, #0]
 8005b1e:	e002      	b.n	8005b26 <_printf_i+0xf2>
 8005b20:	0669      	lsls	r1, r5, #25
 8005b22:	d5fb      	bpl.n	8005b1c <_printf_i+0xe8>
 8005b24:	881d      	ldrh	r5, [r3, #0]
 8005b26:	2f6f      	cmp	r7, #111	; 0x6f
 8005b28:	bf0c      	ite	eq
 8005b2a:	2308      	moveq	r3, #8
 8005b2c:	230a      	movne	r3, #10
 8005b2e:	4852      	ldr	r0, [pc, #328]	; (8005c78 <_printf_i+0x244>)
 8005b30:	2100      	movs	r1, #0
 8005b32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b36:	6866      	ldr	r6, [r4, #4]
 8005b38:	2e00      	cmp	r6, #0
 8005b3a:	bfa8      	it	ge
 8005b3c:	6821      	ldrge	r1, [r4, #0]
 8005b3e:	60a6      	str	r6, [r4, #8]
 8005b40:	bfa4      	itt	ge
 8005b42:	f021 0104 	bicge.w	r1, r1, #4
 8005b46:	6021      	strge	r1, [r4, #0]
 8005b48:	b90d      	cbnz	r5, 8005b4e <_printf_i+0x11a>
 8005b4a:	2e00      	cmp	r6, #0
 8005b4c:	d04d      	beq.n	8005bea <_printf_i+0x1b6>
 8005b4e:	4616      	mov	r6, r2
 8005b50:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b54:	fb03 5711 	mls	r7, r3, r1, r5
 8005b58:	5dc7      	ldrb	r7, [r0, r7]
 8005b5a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b5e:	462f      	mov	r7, r5
 8005b60:	42bb      	cmp	r3, r7
 8005b62:	460d      	mov	r5, r1
 8005b64:	d9f4      	bls.n	8005b50 <_printf_i+0x11c>
 8005b66:	2b08      	cmp	r3, #8
 8005b68:	d10b      	bne.n	8005b82 <_printf_i+0x14e>
 8005b6a:	6823      	ldr	r3, [r4, #0]
 8005b6c:	07df      	lsls	r7, r3, #31
 8005b6e:	d508      	bpl.n	8005b82 <_printf_i+0x14e>
 8005b70:	6923      	ldr	r3, [r4, #16]
 8005b72:	6861      	ldr	r1, [r4, #4]
 8005b74:	4299      	cmp	r1, r3
 8005b76:	bfde      	ittt	le
 8005b78:	2330      	movle	r3, #48	; 0x30
 8005b7a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b7e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b82:	1b92      	subs	r2, r2, r6
 8005b84:	6122      	str	r2, [r4, #16]
 8005b86:	464b      	mov	r3, r9
 8005b88:	4621      	mov	r1, r4
 8005b8a:	4640      	mov	r0, r8
 8005b8c:	f8cd a000 	str.w	sl, [sp]
 8005b90:	aa03      	add	r2, sp, #12
 8005b92:	f7ff fedf 	bl	8005954 <_printf_common>
 8005b96:	3001      	adds	r0, #1
 8005b98:	d14c      	bne.n	8005c34 <_printf_i+0x200>
 8005b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b9e:	b004      	add	sp, #16
 8005ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ba4:	4834      	ldr	r0, [pc, #208]	; (8005c78 <_printf_i+0x244>)
 8005ba6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005baa:	680e      	ldr	r6, [r1, #0]
 8005bac:	6823      	ldr	r3, [r4, #0]
 8005bae:	f856 5b04 	ldr.w	r5, [r6], #4
 8005bb2:	061f      	lsls	r7, r3, #24
 8005bb4:	600e      	str	r6, [r1, #0]
 8005bb6:	d514      	bpl.n	8005be2 <_printf_i+0x1ae>
 8005bb8:	07d9      	lsls	r1, r3, #31
 8005bba:	bf44      	itt	mi
 8005bbc:	f043 0320 	orrmi.w	r3, r3, #32
 8005bc0:	6023      	strmi	r3, [r4, #0]
 8005bc2:	b91d      	cbnz	r5, 8005bcc <_printf_i+0x198>
 8005bc4:	6823      	ldr	r3, [r4, #0]
 8005bc6:	f023 0320 	bic.w	r3, r3, #32
 8005bca:	6023      	str	r3, [r4, #0]
 8005bcc:	2310      	movs	r3, #16
 8005bce:	e7af      	b.n	8005b30 <_printf_i+0xfc>
 8005bd0:	6823      	ldr	r3, [r4, #0]
 8005bd2:	f043 0320 	orr.w	r3, r3, #32
 8005bd6:	6023      	str	r3, [r4, #0]
 8005bd8:	2378      	movs	r3, #120	; 0x78
 8005bda:	4828      	ldr	r0, [pc, #160]	; (8005c7c <_printf_i+0x248>)
 8005bdc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005be0:	e7e3      	b.n	8005baa <_printf_i+0x176>
 8005be2:	065e      	lsls	r6, r3, #25
 8005be4:	bf48      	it	mi
 8005be6:	b2ad      	uxthmi	r5, r5
 8005be8:	e7e6      	b.n	8005bb8 <_printf_i+0x184>
 8005bea:	4616      	mov	r6, r2
 8005bec:	e7bb      	b.n	8005b66 <_printf_i+0x132>
 8005bee:	680b      	ldr	r3, [r1, #0]
 8005bf0:	6826      	ldr	r6, [r4, #0]
 8005bf2:	1d1d      	adds	r5, r3, #4
 8005bf4:	6960      	ldr	r0, [r4, #20]
 8005bf6:	600d      	str	r5, [r1, #0]
 8005bf8:	0635      	lsls	r5, r6, #24
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	d501      	bpl.n	8005c02 <_printf_i+0x1ce>
 8005bfe:	6018      	str	r0, [r3, #0]
 8005c00:	e002      	b.n	8005c08 <_printf_i+0x1d4>
 8005c02:	0671      	lsls	r1, r6, #25
 8005c04:	d5fb      	bpl.n	8005bfe <_printf_i+0x1ca>
 8005c06:	8018      	strh	r0, [r3, #0]
 8005c08:	2300      	movs	r3, #0
 8005c0a:	4616      	mov	r6, r2
 8005c0c:	6123      	str	r3, [r4, #16]
 8005c0e:	e7ba      	b.n	8005b86 <_printf_i+0x152>
 8005c10:	680b      	ldr	r3, [r1, #0]
 8005c12:	1d1a      	adds	r2, r3, #4
 8005c14:	600a      	str	r2, [r1, #0]
 8005c16:	681e      	ldr	r6, [r3, #0]
 8005c18:	2100      	movs	r1, #0
 8005c1a:	4630      	mov	r0, r6
 8005c1c:	6862      	ldr	r2, [r4, #4]
 8005c1e:	f001 fb6f 	bl	8007300 <memchr>
 8005c22:	b108      	cbz	r0, 8005c28 <_printf_i+0x1f4>
 8005c24:	1b80      	subs	r0, r0, r6
 8005c26:	6060      	str	r0, [r4, #4]
 8005c28:	6863      	ldr	r3, [r4, #4]
 8005c2a:	6123      	str	r3, [r4, #16]
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c32:	e7a8      	b.n	8005b86 <_printf_i+0x152>
 8005c34:	4632      	mov	r2, r6
 8005c36:	4649      	mov	r1, r9
 8005c38:	4640      	mov	r0, r8
 8005c3a:	6923      	ldr	r3, [r4, #16]
 8005c3c:	47d0      	blx	sl
 8005c3e:	3001      	adds	r0, #1
 8005c40:	d0ab      	beq.n	8005b9a <_printf_i+0x166>
 8005c42:	6823      	ldr	r3, [r4, #0]
 8005c44:	079b      	lsls	r3, r3, #30
 8005c46:	d413      	bmi.n	8005c70 <_printf_i+0x23c>
 8005c48:	68e0      	ldr	r0, [r4, #12]
 8005c4a:	9b03      	ldr	r3, [sp, #12]
 8005c4c:	4298      	cmp	r0, r3
 8005c4e:	bfb8      	it	lt
 8005c50:	4618      	movlt	r0, r3
 8005c52:	e7a4      	b.n	8005b9e <_printf_i+0x16a>
 8005c54:	2301      	movs	r3, #1
 8005c56:	4632      	mov	r2, r6
 8005c58:	4649      	mov	r1, r9
 8005c5a:	4640      	mov	r0, r8
 8005c5c:	47d0      	blx	sl
 8005c5e:	3001      	adds	r0, #1
 8005c60:	d09b      	beq.n	8005b9a <_printf_i+0x166>
 8005c62:	3501      	adds	r5, #1
 8005c64:	68e3      	ldr	r3, [r4, #12]
 8005c66:	9903      	ldr	r1, [sp, #12]
 8005c68:	1a5b      	subs	r3, r3, r1
 8005c6a:	42ab      	cmp	r3, r5
 8005c6c:	dcf2      	bgt.n	8005c54 <_printf_i+0x220>
 8005c6e:	e7eb      	b.n	8005c48 <_printf_i+0x214>
 8005c70:	2500      	movs	r5, #0
 8005c72:	f104 0619 	add.w	r6, r4, #25
 8005c76:	e7f5      	b.n	8005c64 <_printf_i+0x230>
 8005c78:	080084a5 	.word	0x080084a5
 8005c7c:	080084b6 	.word	0x080084b6

08005c80 <_sbrk_r>:
 8005c80:	b538      	push	{r3, r4, r5, lr}
 8005c82:	2300      	movs	r3, #0
 8005c84:	4d05      	ldr	r5, [pc, #20]	; (8005c9c <_sbrk_r+0x1c>)
 8005c86:	4604      	mov	r4, r0
 8005c88:	4608      	mov	r0, r1
 8005c8a:	602b      	str	r3, [r5, #0]
 8005c8c:	f7fb fa72 	bl	8001174 <_sbrk>
 8005c90:	1c43      	adds	r3, r0, #1
 8005c92:	d102      	bne.n	8005c9a <_sbrk_r+0x1a>
 8005c94:	682b      	ldr	r3, [r5, #0]
 8005c96:	b103      	cbz	r3, 8005c9a <_sbrk_r+0x1a>
 8005c98:	6023      	str	r3, [r4, #0]
 8005c9a:	bd38      	pop	{r3, r4, r5, pc}
 8005c9c:	200006f0 	.word	0x200006f0

08005ca0 <__sread>:
 8005ca0:	b510      	push	{r4, lr}
 8005ca2:	460c      	mov	r4, r1
 8005ca4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ca8:	f001 fb92 	bl	80073d0 <_read_r>
 8005cac:	2800      	cmp	r0, #0
 8005cae:	bfab      	itete	ge
 8005cb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005cb2:	89a3      	ldrhlt	r3, [r4, #12]
 8005cb4:	181b      	addge	r3, r3, r0
 8005cb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005cba:	bfac      	ite	ge
 8005cbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8005cbe:	81a3      	strhlt	r3, [r4, #12]
 8005cc0:	bd10      	pop	{r4, pc}

08005cc2 <__seofread>:
 8005cc2:	2000      	movs	r0, #0
 8005cc4:	4770      	bx	lr

08005cc6 <__swrite>:
 8005cc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cca:	461f      	mov	r7, r3
 8005ccc:	898b      	ldrh	r3, [r1, #12]
 8005cce:	4605      	mov	r5, r0
 8005cd0:	05db      	lsls	r3, r3, #23
 8005cd2:	460c      	mov	r4, r1
 8005cd4:	4616      	mov	r6, r2
 8005cd6:	d505      	bpl.n	8005ce4 <__swrite+0x1e>
 8005cd8:	2302      	movs	r3, #2
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ce0:	f001 fa86 	bl	80071f0 <_lseek_r>
 8005ce4:	89a3      	ldrh	r3, [r4, #12]
 8005ce6:	4632      	mov	r2, r6
 8005ce8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cec:	81a3      	strh	r3, [r4, #12]
 8005cee:	4628      	mov	r0, r5
 8005cf0:	463b      	mov	r3, r7
 8005cf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cfa:	f001 b8bb 	b.w	8006e74 <_write_r>

08005cfe <__sseek>:
 8005cfe:	b510      	push	{r4, lr}
 8005d00:	460c      	mov	r4, r1
 8005d02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d06:	f001 fa73 	bl	80071f0 <_lseek_r>
 8005d0a:	1c43      	adds	r3, r0, #1
 8005d0c:	89a3      	ldrh	r3, [r4, #12]
 8005d0e:	bf15      	itete	ne
 8005d10:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005d1a:	81a3      	strheq	r3, [r4, #12]
 8005d1c:	bf18      	it	ne
 8005d1e:	81a3      	strhne	r3, [r4, #12]
 8005d20:	bd10      	pop	{r4, pc}

08005d22 <__sclose>:
 8005d22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d26:	f001 b947 	b.w	8006fb8 <_close_r>
	...

08005d2c <iso_year_adjust>:
 8005d2c:	6941      	ldr	r1, [r0, #20]
 8005d2e:	f240 736c 	movw	r3, #1900	; 0x76c
 8005d32:	2900      	cmp	r1, #0
 8005d34:	bfa8      	it	ge
 8005d36:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8005d3a:	18ca      	adds	r2, r1, r3
 8005d3c:	078b      	lsls	r3, r1, #30
 8005d3e:	d105      	bne.n	8005d4c <iso_year_adjust+0x20>
 8005d40:	2164      	movs	r1, #100	; 0x64
 8005d42:	fb92 f3f1 	sdiv	r3, r2, r1
 8005d46:	fb01 2313 	mls	r3, r1, r3, r2
 8005d4a:	b9db      	cbnz	r3, 8005d84 <iso_year_adjust+0x58>
 8005d4c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005d50:	fb92 f3f1 	sdiv	r3, r2, r1
 8005d54:	fb01 2313 	mls	r3, r1, r3, r2
 8005d58:	fab3 f383 	clz	r3, r3
 8005d5c:	095b      	lsrs	r3, r3, #5
 8005d5e:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 8005d62:	0040      	lsls	r0, r0, #1
 8005d64:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8005d68:	4418      	add	r0, r3
 8005d6a:	f241 63a2 	movw	r3, #5794	; 0x16a2
 8005d6e:	4298      	cmp	r0, r3
 8005d70:	d03a      	beq.n	8005de8 <iso_year_adjust+0xbc>
 8005d72:	dc21      	bgt.n	8005db8 <iso_year_adjust+0x8c>
 8005d74:	2801      	cmp	r0, #1
 8005d76:	dc1a      	bgt.n	8005dae <iso_year_adjust+0x82>
 8005d78:	2800      	cmp	r0, #0
 8005d7a:	bfb4      	ite	lt
 8005d7c:	2000      	movlt	r0, #0
 8005d7e:	f04f 30ff 	movge.w	r0, #4294967295
 8005d82:	4770      	bx	lr
 8005d84:	2301      	movs	r3, #1
 8005d86:	e7ea      	b.n	8005d5e <iso_year_adjust+0x32>
 8005d88:	2817      	cmp	r0, #23
 8005d8a:	d813      	bhi.n	8005db4 <iso_year_adjust+0x88>
 8005d8c:	e8df f000 	tbb	[pc, r0]
 8005d90:	0c0c0c0c 	.word	0x0c0c0c0c
 8005d94:	0c0c1212 	.word	0x0c0c1212
 8005d98:	12121212 	.word	0x12121212
 8005d9c:	12121212 	.word	0x12121212
 8005da0:	0c0c1212 	.word	0x0c0c1212
 8005da4:	0c0c1212 	.word	0x0c0c1212
 8005da8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dac:	4770      	bx	lr
 8005dae:	380a      	subs	r0, #10
 8005db0:	2817      	cmp	r0, #23
 8005db2:	d9e9      	bls.n	8005d88 <iso_year_adjust+0x5c>
 8005db4:	2000      	movs	r0, #0
 8005db6:	4770      	bx	lr
 8005db8:	f241 63b4 	movw	r3, #5812	; 0x16b4
 8005dbc:	4298      	cmp	r0, r3
 8005dbe:	dc06      	bgt.n	8005dce <iso_year_adjust+0xa2>
 8005dc0:	f241 63b1 	movw	r3, #5809	; 0x16b1
 8005dc4:	4298      	cmp	r0, r3
 8005dc6:	bfd4      	ite	le
 8005dc8:	2000      	movle	r0, #0
 8005dca:	2001      	movgt	r0, #1
 8005dcc:	4770      	bx	lr
 8005dce:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 8005dd2:	3802      	subs	r0, #2
 8005dd4:	2815      	cmp	r0, #21
 8005dd6:	d8ed      	bhi.n	8005db4 <iso_year_adjust+0x88>
 8005dd8:	2301      	movs	r3, #1
 8005dda:	4083      	lsls	r3, r0
 8005ddc:	4803      	ldr	r0, [pc, #12]	; (8005dec <iso_year_adjust+0xc0>)
 8005dde:	4018      	ands	r0, r3
 8005de0:	3800      	subs	r0, #0
 8005de2:	bf18      	it	ne
 8005de4:	2001      	movne	r0, #1
 8005de6:	4770      	bx	lr
 8005de8:	2001      	movs	r0, #1
 8005dea:	4770      	bx	lr
 8005dec:	002a001f 	.word	0x002a001f

08005df0 <__strftime>:
 8005df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005df4:	461e      	mov	r6, r3
 8005df6:	2300      	movs	r3, #0
 8005df8:	4607      	mov	r7, r0
 8005dfa:	460d      	mov	r5, r1
 8005dfc:	461c      	mov	r4, r3
 8005dfe:	b091      	sub	sp, #68	; 0x44
 8005e00:	9304      	str	r3, [sp, #16]
 8005e02:	7813      	ldrb	r3, [r2, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f000 84da 	beq.w	80067be <__strftime+0x9ce>
 8005e0a:	2b25      	cmp	r3, #37	; 0x25
 8005e0c:	d11f      	bne.n	8005e4e <__strftime+0x5e>
 8005e0e:	f892 9001 	ldrb.w	r9, [r2, #1]
 8005e12:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
 8005e16:	d024      	beq.n	8005e62 <__strftime+0x72>
 8005e18:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 8005e1c:	d021      	beq.n	8005e62 <__strftime+0x72>
 8005e1e:	f04f 0900 	mov.w	r9, #0
 8005e22:	f102 0a01 	add.w	sl, r2, #1
 8005e26:	f89a 3000 	ldrb.w	r3, [sl]
 8005e2a:	3b31      	subs	r3, #49	; 0x31
 8005e2c:	2b08      	cmp	r3, #8
 8005e2e:	d81b      	bhi.n	8005e68 <__strftime+0x78>
 8005e30:	4650      	mov	r0, sl
 8005e32:	220a      	movs	r2, #10
 8005e34:	a908      	add	r1, sp, #32
 8005e36:	f000 fd6d 	bl	8006914 <strtoul>
 8005e3a:	4680      	mov	r8, r0
 8005e3c:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005e40:	f89a 3000 	ldrb.w	r3, [sl]
 8005e44:	2b45      	cmp	r3, #69	; 0x45
 8005e46:	d112      	bne.n	8005e6e <__strftime+0x7e>
 8005e48:	f10a 0a01 	add.w	sl, sl, #1
 8005e4c:	e011      	b.n	8005e72 <__strftime+0x82>
 8005e4e:	1e69      	subs	r1, r5, #1
 8005e50:	42a1      	cmp	r1, r4
 8005e52:	d802      	bhi.n	8005e5a <__strftime+0x6a>
 8005e54:	2400      	movs	r4, #0
 8005e56:	f000 bcb5 	b.w	80067c4 <__strftime+0x9d4>
 8005e5a:	553b      	strb	r3, [r7, r4]
 8005e5c:	3201      	adds	r2, #1
 8005e5e:	3401      	adds	r4, #1
 8005e60:	e7cf      	b.n	8005e02 <__strftime+0x12>
 8005e62:	f102 0a02 	add.w	sl, r2, #2
 8005e66:	e7de      	b.n	8005e26 <__strftime+0x36>
 8005e68:	f04f 0800 	mov.w	r8, #0
 8005e6c:	e7e8      	b.n	8005e40 <__strftime+0x50>
 8005e6e:	2b4f      	cmp	r3, #79	; 0x4f
 8005e70:	d0ea      	beq.n	8005e48 <__strftime+0x58>
 8005e72:	f89a 0000 	ldrb.w	r0, [sl]
 8005e76:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 8005e7a:	2b55      	cmp	r3, #85	; 0x55
 8005e7c:	d8ea      	bhi.n	8005e54 <__strftime+0x64>
 8005e7e:	a201      	add	r2, pc, #4	; (adr r2, 8005e84 <__strftime+0x94>)
 8005e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e84:	080067b3 	.word	0x080067b3
 8005e88:	08005e55 	.word	0x08005e55
 8005e8c:	08005e55 	.word	0x08005e55
 8005e90:	08005e55 	.word	0x08005e55
 8005e94:	08005e55 	.word	0x08005e55
 8005e98:	08005e55 	.word	0x08005e55
 8005e9c:	08005e55 	.word	0x08005e55
 8005ea0:	08005e55 	.word	0x08005e55
 8005ea4:	08005e55 	.word	0x08005e55
 8005ea8:	08005e55 	.word	0x08005e55
 8005eac:	08005e55 	.word	0x08005e55
 8005eb0:	08005e55 	.word	0x08005e55
 8005eb4:	08005e55 	.word	0x08005e55
 8005eb8:	08005e55 	.word	0x08005e55
 8005ebc:	08005e55 	.word	0x08005e55
 8005ec0:	08005e55 	.word	0x08005e55
 8005ec4:	08005e55 	.word	0x08005e55
 8005ec8:	08005e55 	.word	0x08005e55
 8005ecc:	08005e55 	.word	0x08005e55
 8005ed0:	08005e55 	.word	0x08005e55
 8005ed4:	08005e55 	.word	0x08005e55
 8005ed8:	08005e55 	.word	0x08005e55
 8005edc:	08005e55 	.word	0x08005e55
 8005ee0:	08005e55 	.word	0x08005e55
 8005ee4:	08005e55 	.word	0x08005e55
 8005ee8:	08005e55 	.word	0x08005e55
 8005eec:	08005e55 	.word	0x08005e55
 8005ef0:	08005e55 	.word	0x08005e55
 8005ef4:	08006019 	.word	0x08006019
 8005ef8:	08006071 	.word	0x08006071
 8005efc:	080060e3 	.word	0x080060e3
 8005f00:	0800617b 	.word	0x0800617b
 8005f04:	08005e55 	.word	0x08005e55
 8005f08:	080061c5 	.word	0x080061c5
 8005f0c:	080062b9 	.word	0x080062b9
 8005f10:	080063c3 	.word	0x080063c3
 8005f14:	080063d1 	.word	0x080063d1
 8005f18:	08005e55 	.word	0x08005e55
 8005f1c:	08005e55 	.word	0x08005e55
 8005f20:	08005e55 	.word	0x08005e55
 8005f24:	08006401 	.word	0x08006401
 8005f28:	08005e55 	.word	0x08005e55
 8005f2c:	08005e55 	.word	0x08005e55
 8005f30:	08006415 	.word	0x08006415
 8005f34:	08005e55 	.word	0x08005e55
 8005f38:	08006465 	.word	0x08006465
 8005f3c:	0800657b 	.word	0x0800657b
 8005f40:	0800658b 	.word	0x0800658b
 8005f44:	080065df 	.word	0x080065df
 8005f48:	080065ef 	.word	0x080065ef
 8005f4c:	08006661 	.word	0x08006661
 8005f50:	080060db 	.word	0x080060db
 8005f54:	08006695 	.word	0x08006695
 8005f58:	08006761 	.word	0x08006761
 8005f5c:	08005e55 	.word	0x08005e55
 8005f60:	08005e55 	.word	0x08005e55
 8005f64:	08005e55 	.word	0x08005e55
 8005f68:	08005e55 	.word	0x08005e55
 8005f6c:	08005e55 	.word	0x08005e55
 8005f70:	08005e55 	.word	0x08005e55
 8005f74:	08005fdd 	.word	0x08005fdd
 8005f78:	08006047 	.word	0x08006047
 8005f7c:	0800609d 	.word	0x0800609d
 8005f80:	08006157 	.word	0x08006157
 8005f84:	08006157 	.word	0x08006157
 8005f88:	08005e55 	.word	0x08005e55
 8005f8c:	0800621b 	.word	0x0800621b
 8005f90:	08006047 	.word	0x08006047
 8005f94:	08005e55 	.word	0x08005e55
 8005f98:	080063f3 	.word	0x080063f3
 8005f9c:	080063c3 	.word	0x080063c3
 8005fa0:	080063d1 	.word	0x080063d1
 8005fa4:	080063fb 	.word	0x080063fb
 8005fa8:	08006405 	.word	0x08006405
 8005fac:	08005e55 	.word	0x08005e55
 8005fb0:	08006415 	.word	0x08006415
 8005fb4:	08005e55 	.word	0x08005e55
 8005fb8:	080060cb 	.word	0x080060cb
 8005fbc:	08006477 	.word	0x08006477
 8005fc0:	0800657f 	.word	0x0800657f
 8005fc4:	080065c5 	.word	0x080065c5
 8005fc8:	08005e55 	.word	0x08005e55
 8005fcc:	08006653 	.word	0x08006653
 8005fd0:	080060d3 	.word	0x080060d3
 8005fd4:	08006679 	.word	0x08006679
 8005fd8:	080066f1 	.word	0x080066f1
 8005fdc:	69b3      	ldr	r3, [r6, #24]
 8005fde:	4aa9      	ldr	r2, [pc, #676]	; (8006284 <__strftime+0x494>)
 8005fe0:	3318      	adds	r3, #24
 8005fe2:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 8005fe6:	4640      	mov	r0, r8
 8005fe8:	f7fa f91c 	bl	8000224 <strlen>
 8005fec:	f108 38ff 	add.w	r8, r8, #4294967295
 8005ff0:	4420      	add	r0, r4
 8005ff2:	1e6b      	subs	r3, r5, #1
 8005ff4:	42a0      	cmp	r0, r4
 8005ff6:	d107      	bne.n	8006008 <__strftime+0x218>
 8005ff8:	f89a 3000 	ldrb.w	r3, [sl]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 83de 	beq.w	80067be <__strftime+0x9ce>
 8006002:	f10a 0201 	add.w	r2, sl, #1
 8006006:	e6fc      	b.n	8005e02 <__strftime+0x12>
 8006008:	42a3      	cmp	r3, r4
 800600a:	f67f af23 	bls.w	8005e54 <__strftime+0x64>
 800600e:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 8006012:	553a      	strb	r2, [r7, r4]
 8006014:	3401      	adds	r4, #1
 8006016:	e7ed      	b.n	8005ff4 <__strftime+0x204>
 8006018:	69b2      	ldr	r2, [r6, #24]
 800601a:	4b9a      	ldr	r3, [pc, #616]	; (8006284 <__strftime+0x494>)
 800601c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8006020:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
 8006024:	4640      	mov	r0, r8
 8006026:	f7fa f8fd 	bl	8000224 <strlen>
 800602a:	f108 38ff 	add.w	r8, r8, #4294967295
 800602e:	4420      	add	r0, r4
 8006030:	1e6b      	subs	r3, r5, #1
 8006032:	42a0      	cmp	r0, r4
 8006034:	d0e0      	beq.n	8005ff8 <__strftime+0x208>
 8006036:	42a3      	cmp	r3, r4
 8006038:	f67f af0c 	bls.w	8005e54 <__strftime+0x64>
 800603c:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 8006040:	553a      	strb	r2, [r7, r4]
 8006042:	3401      	adds	r4, #1
 8006044:	e7f5      	b.n	8006032 <__strftime+0x242>
 8006046:	4b8f      	ldr	r3, [pc, #572]	; (8006284 <__strftime+0x494>)
 8006048:	6932      	ldr	r2, [r6, #16]
 800604a:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 800604e:	4640      	mov	r0, r8
 8006050:	f7fa f8e8 	bl	8000224 <strlen>
 8006054:	f108 38ff 	add.w	r8, r8, #4294967295
 8006058:	4420      	add	r0, r4
 800605a:	1e6b      	subs	r3, r5, #1
 800605c:	42a0      	cmp	r0, r4
 800605e:	d0cb      	beq.n	8005ff8 <__strftime+0x208>
 8006060:	42a3      	cmp	r3, r4
 8006062:	f67f aef7 	bls.w	8005e54 <__strftime+0x64>
 8006066:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 800606a:	553a      	strb	r2, [r7, r4]
 800606c:	3401      	adds	r4, #1
 800606e:	e7f5      	b.n	800605c <__strftime+0x26c>
 8006070:	6933      	ldr	r3, [r6, #16]
 8006072:	4a84      	ldr	r2, [pc, #528]	; (8006284 <__strftime+0x494>)
 8006074:	330c      	adds	r3, #12
 8006076:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 800607a:	4640      	mov	r0, r8
 800607c:	f7fa f8d2 	bl	8000224 <strlen>
 8006080:	f108 38ff 	add.w	r8, r8, #4294967295
 8006084:	4420      	add	r0, r4
 8006086:	1e6b      	subs	r3, r5, #1
 8006088:	42a0      	cmp	r0, r4
 800608a:	d0b5      	beq.n	8005ff8 <__strftime+0x208>
 800608c:	42a3      	cmp	r3, r4
 800608e:	f67f aee1 	bls.w	8005e54 <__strftime+0x64>
 8006092:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 8006096:	553a      	strb	r2, [r7, r4]
 8006098:	3401      	adds	r4, #1
 800609a:	e7f5      	b.n	8006088 <__strftime+0x298>
 800609c:	4b79      	ldr	r3, [pc, #484]	; (8006284 <__strftime+0x494>)
 800609e:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 80060a2:	4640      	mov	r0, r8
 80060a4:	f7fa f8be 	bl	8000224 <strlen>
 80060a8:	f898 3000 	ldrb.w	r3, [r8]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d0a3      	beq.n	8005ff8 <__strftime+0x208>
 80060b0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80060b2:	4642      	mov	r2, r8
 80060b4:	9300      	str	r3, [sp, #0]
 80060b6:	4633      	mov	r3, r6
 80060b8:	1b29      	subs	r1, r5, r4
 80060ba:	1938      	adds	r0, r7, r4
 80060bc:	f7ff fe98 	bl	8005df0 <__strftime>
 80060c0:	2800      	cmp	r0, #0
 80060c2:	f77f aec7 	ble.w	8005e54 <__strftime+0x64>
 80060c6:	4404      	add	r4, r0
 80060c8:	e796      	b.n	8005ff8 <__strftime+0x208>
 80060ca:	4b6e      	ldr	r3, [pc, #440]	; (8006284 <__strftime+0x494>)
 80060cc:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
 80060d0:	e7e7      	b.n	80060a2 <__strftime+0x2b2>
 80060d2:	4b6c      	ldr	r3, [pc, #432]	; (8006284 <__strftime+0x494>)
 80060d4:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
 80060d8:	e7e3      	b.n	80060a2 <__strftime+0x2b2>
 80060da:	4b6a      	ldr	r3, [pc, #424]	; (8006284 <__strftime+0x494>)
 80060dc:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
 80060e0:	e7df      	b.n	80060a2 <__strftime+0x2b2>
 80060e2:	4969      	ldr	r1, [pc, #420]	; (8006288 <__strftime+0x498>)
 80060e4:	f8d6 b014 	ldr.w	fp, [r6, #20]
 80060e8:	458b      	cmp	fp, r1
 80060ea:	bfac      	ite	ge
 80060ec:	2100      	movge	r1, #0
 80060ee:	2101      	movlt	r1, #1
 80060f0:	f1bb 0f00 	cmp.w	fp, #0
 80060f4:	db10      	blt.n	8006118 <__strftime+0x328>
 80060f6:	2064      	movs	r0, #100	; 0x64
 80060f8:	fb9b f0f0 	sdiv	r0, fp, r0
 80060fc:	3013      	adds	r0, #19
 80060fe:	f1b9 0f00 	cmp.w	r9, #0
 8006102:	d013      	beq.n	800612c <__strftime+0x33c>
 8006104:	2863      	cmp	r0, #99	; 0x63
 8006106:	dd24      	ble.n	8006152 <__strftime+0x362>
 8006108:	4a60      	ldr	r2, [pc, #384]	; (800628c <__strftime+0x49c>)
 800610a:	4b61      	ldr	r3, [pc, #388]	; (8006290 <__strftime+0x4a0>)
 800610c:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 8006110:	bf18      	it	ne
 8006112:	4613      	movne	r3, r2
 8006114:	4a5f      	ldr	r2, [pc, #380]	; (8006294 <__strftime+0x4a4>)
 8006116:	e00b      	b.n	8006130 <__strftime+0x340>
 8006118:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
 800611c:	9105      	str	r1, [sp, #20]
 800611e:	f000 ff29 	bl	8006f74 <abs>
 8006122:	2364      	movs	r3, #100	; 0x64
 8006124:	9905      	ldr	r1, [sp, #20]
 8006126:	fb90 f0f3 	sdiv	r0, r0, r3
 800612a:	e7e8      	b.n	80060fe <__strftime+0x30e>
 800612c:	4b57      	ldr	r3, [pc, #348]	; (800628c <__strftime+0x49c>)
 800612e:	4a5a      	ldr	r2, [pc, #360]	; (8006298 <__strftime+0x4a8>)
 8006130:	f1b8 0f02 	cmp.w	r8, #2
 8006134:	bf2c      	ite	cs
 8006136:	ebc1 0108 	rsbcs	r1, r1, r8
 800613a:	f1c1 0102 	rsbcc	r1, r1, #2
 800613e:	9001      	str	r0, [sp, #4]
 8006140:	9100      	str	r1, [sp, #0]
 8006142:	4851      	ldr	r0, [pc, #324]	; (8006288 <__strftime+0x498>)
 8006144:	4955      	ldr	r1, [pc, #340]	; (800629c <__strftime+0x4ac>)
 8006146:	4583      	cmp	fp, r0
 8006148:	bfb8      	it	lt
 800614a:	460b      	movlt	r3, r1
 800614c:	1b29      	subs	r1, r5, r4
 800614e:	1938      	adds	r0, r7, r4
 8006150:	e029      	b.n	80061a6 <__strftime+0x3b6>
 8006152:	4b4e      	ldr	r3, [pc, #312]	; (800628c <__strftime+0x49c>)
 8006154:	e7de      	b.n	8006114 <__strftime+0x324>
 8006156:	4952      	ldr	r1, [pc, #328]	; (80062a0 <__strftime+0x4b0>)
 8006158:	4a52      	ldr	r2, [pc, #328]	; (80062a4 <__strftime+0x4b4>)
 800615a:	68f3      	ldr	r3, [r6, #12]
 800615c:	2864      	cmp	r0, #100	; 0x64
 800615e:	bf08      	it	eq
 8006160:	460a      	moveq	r2, r1
 8006162:	1b29      	subs	r1, r5, r4
 8006164:	1938      	adds	r0, r7, r4
 8006166:	f001 f945 	bl	80073f4 <sniprintf>
 800616a:	2800      	cmp	r0, #0
 800616c:	f6ff ae72 	blt.w	8005e54 <__strftime+0x64>
 8006170:	4404      	add	r4, r0
 8006172:	42a5      	cmp	r5, r4
 8006174:	f63f af40 	bhi.w	8005ff8 <__strftime+0x208>
 8006178:	e66c      	b.n	8005e54 <__strftime+0x64>
 800617a:	6970      	ldr	r0, [r6, #20]
 800617c:	6933      	ldr	r3, [r6, #16]
 800617e:	2800      	cmp	r0, #0
 8006180:	f103 0b01 	add.w	fp, r3, #1
 8006184:	eb07 0804 	add.w	r8, r7, r4
 8006188:	68f3      	ldr	r3, [r6, #12]
 800618a:	eba5 0904 	sub.w	r9, r5, r4
 800618e:	db0d      	blt.n	80061ac <__strftime+0x3bc>
 8006190:	2164      	movs	r1, #100	; 0x64
 8006192:	fb90 f2f1 	sdiv	r2, r0, r1
 8006196:	fb01 0212 	mls	r2, r1, r2, r0
 800619a:	e9cd 3200 	strd	r3, r2, [sp]
 800619e:	4649      	mov	r1, r9
 80061a0:	465b      	mov	r3, fp
 80061a2:	4640      	mov	r0, r8
 80061a4:	4a40      	ldr	r2, [pc, #256]	; (80062a8 <__strftime+0x4b8>)
 80061a6:	f001 f925 	bl	80073f4 <sniprintf>
 80061aa:	e7de      	b.n	800616a <__strftime+0x37a>
 80061ac:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80061b0:	9305      	str	r3, [sp, #20]
 80061b2:	f000 fedf 	bl	8006f74 <abs>
 80061b6:	2264      	movs	r2, #100	; 0x64
 80061b8:	fb90 f1f2 	sdiv	r1, r0, r2
 80061bc:	9b05      	ldr	r3, [sp, #20]
 80061be:	fb01 0212 	mls	r2, r1, r2, r0
 80061c2:	e7ea      	b.n	800619a <__strftime+0x3aa>
 80061c4:	2325      	movs	r3, #37	; 0x25
 80061c6:	f88d 3020 	strb.w	r3, [sp, #32]
 80061ca:	f1b9 0f00 	cmp.w	r9, #0
 80061ce:	d013      	beq.n	80061f8 <__strftime+0x408>
 80061d0:	f1b8 0f06 	cmp.w	r8, #6
 80061d4:	bf38      	it	cc
 80061d6:	f04f 0806 	movcc.w	r8, #6
 80061da:	f1b8 0306 	subs.w	r3, r8, #6
 80061de:	f88d 9021 	strb.w	r9, [sp, #33]	; 0x21
 80061e2:	d10e      	bne.n	8006202 <__strftime+0x412>
 80061e4:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 80061e8:	4930      	ldr	r1, [pc, #192]	; (80062ac <__strftime+0x4bc>)
 80061ea:	f001 f961 	bl	80074b0 <strcpy>
 80061ee:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80061f0:	aa08      	add	r2, sp, #32
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	4633      	mov	r3, r6
 80061f6:	e75f      	b.n	80060b8 <__strftime+0x2c8>
 80061f8:	f04f 092b 	mov.w	r9, #43	; 0x2b
 80061fc:	f04f 080a 	mov.w	r8, #10
 8006200:	e7eb      	b.n	80061da <__strftime+0x3ea>
 8006202:	211e      	movs	r1, #30
 8006204:	4a2a      	ldr	r2, [pc, #168]	; (80062b0 <__strftime+0x4c0>)
 8006206:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 800620a:	f001 f8f3 	bl	80073f4 <sniprintf>
 800620e:	2800      	cmp	r0, #0
 8006210:	dde8      	ble.n	80061e4 <__strftime+0x3f4>
 8006212:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8006216:	4418      	add	r0, r3
 8006218:	e7e6      	b.n	80061e8 <__strftime+0x3f8>
 800621a:	4630      	mov	r0, r6
 800621c:	f7ff fd86 	bl	8005d2c <iso_year_adjust>
 8006220:	4680      	mov	r8, r0
 8006222:	6970      	ldr	r0, [r6, #20]
 8006224:	2800      	cmp	r0, #0
 8006226:	db11      	blt.n	800624c <__strftime+0x45c>
 8006228:	2264      	movs	r2, #100	; 0x64
 800622a:	fb90 f3f2 	sdiv	r3, r0, r2
 800622e:	fb02 0313 	mls	r3, r2, r3, r0
 8006232:	4498      	add	r8, r3
 8006234:	2364      	movs	r3, #100	; 0x64
 8006236:	fb98 f0f3 	sdiv	r0, r8, r3
 800623a:	fb03 8810 	mls	r8, r3, r0, r8
 800623e:	4498      	add	r8, r3
 8006240:	fbb8 f2f3 	udiv	r2, r8, r3
 8006244:	fb03 8312 	mls	r3, r3, r2, r8
 8006248:	4a15      	ldr	r2, [pc, #84]	; (80062a0 <__strftime+0x4b0>)
 800624a:	e78a      	b.n	8006162 <__strftime+0x372>
 800624c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8006250:	f000 fe90 	bl	8006f74 <abs>
 8006254:	2364      	movs	r3, #100	; 0x64
 8006256:	fb90 f2f3 	sdiv	r2, r0, r3
 800625a:	f1b8 0f00 	cmp.w	r8, #0
 800625e:	fb02 0313 	mls	r3, r2, r3, r0
 8006262:	da06      	bge.n	8006272 <__strftime+0x482>
 8006264:	6971      	ldr	r1, [r6, #20]
 8006266:	4a13      	ldr	r2, [pc, #76]	; (80062b4 <__strftime+0x4c4>)
 8006268:	4291      	cmp	r1, r2
 800626a:	bfb8      	it	lt
 800626c:	f04f 0801 	movlt.w	r8, #1
 8006270:	e7df      	b.n	8006232 <__strftime+0x442>
 8006272:	d0de      	beq.n	8006232 <__strftime+0x442>
 8006274:	6971      	ldr	r1, [r6, #20]
 8006276:	4a04      	ldr	r2, [pc, #16]	; (8006288 <__strftime+0x498>)
 8006278:	4291      	cmp	r1, r2
 800627a:	bfb8      	it	lt
 800627c:	f04f 38ff 	movlt.w	r8, #4294967295
 8006280:	e7d7      	b.n	8006232 <__strftime+0x442>
 8006282:	bf00      	nop
 8006284:	0800864c 	.word	0x0800864c
 8006288:	fffff894 	.word	0xfffff894
 800628c:	080087bf 	.word	0x080087bf
 8006290:	080084d6 	.word	0x080084d6
 8006294:	080084ce 	.word	0x080084ce
 8006298:	080084c7 	.word	0x080084c7
 800629c:	080088cc 	.word	0x080088cc
 80062a0:	080084e6 	.word	0x080084e6
 80062a4:	080084d8 	.word	0x080084d8
 80062a8:	080084dc 	.word	0x080084dc
 80062ac:	080084ef 	.word	0x080084ef
 80062b0:	080084eb 	.word	0x080084eb
 80062b4:	fffff895 	.word	0xfffff895
 80062b8:	4bb7      	ldr	r3, [pc, #732]	; (8006598 <__strftime+0x7a8>)
 80062ba:	6971      	ldr	r1, [r6, #20]
 80062bc:	4630      	mov	r0, r6
 80062be:	4299      	cmp	r1, r3
 80062c0:	bfac      	ite	ge
 80062c2:	2300      	movge	r3, #0
 80062c4:	2301      	movlt	r3, #1
 80062c6:	e9cd 3105 	strd	r3, r1, [sp, #20]
 80062ca:	f7ff fd2f 	bl	8005d2c <iso_year_adjust>
 80062ce:	9906      	ldr	r1, [sp, #24]
 80062d0:	4683      	mov	fp, r0
 80062d2:	2900      	cmp	r1, #0
 80062d4:	db2a      	blt.n	800632c <__strftime+0x53c>
 80062d6:	2264      	movs	r2, #100	; 0x64
 80062d8:	fb91 f2f2 	sdiv	r2, r1, r2
 80062dc:	3213      	adds	r2, #19
 80062de:	6970      	ldr	r0, [r6, #20]
 80062e0:	2800      	cmp	r0, #0
 80062e2:	db2d      	blt.n	8006340 <__strftime+0x550>
 80062e4:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80062e8:	fb90 fefc 	sdiv	lr, r0, ip
 80062ec:	fb0c 001e 	mls	r0, ip, lr, r0
 80062f0:	f1bb 0f00 	cmp.w	fp, #0
 80062f4:	da33      	bge.n	800635e <__strftime+0x56e>
 80062f6:	6971      	ldr	r1, [r6, #20]
 80062f8:	4ba8      	ldr	r3, [pc, #672]	; (800659c <__strftime+0x7ac>)
 80062fa:	4299      	cmp	r1, r3
 80062fc:	db39      	blt.n	8006372 <__strftime+0x582>
 80062fe:	eb0b 0300 	add.w	r3, fp, r0
 8006302:	1c59      	adds	r1, r3, #1
 8006304:	d13a      	bne.n	800637c <__strftime+0x58c>
 8006306:	2363      	movs	r3, #99	; 0x63
 8006308:	3a01      	subs	r2, #1
 800630a:	2064      	movs	r0, #100	; 0x64
 800630c:	fb00 3202 	mla	r2, r0, r2, r3
 8006310:	9b05      	ldr	r3, [sp, #20]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d037      	beq.n	8006386 <__strftime+0x596>
 8006316:	232d      	movs	r3, #45	; 0x2d
 8006318:	f88d 3020 	strb.w	r3, [sp, #32]
 800631c:	f1b8 0f00 	cmp.w	r8, #0
 8006320:	d001      	beq.n	8006326 <__strftime+0x536>
 8006322:	f108 38ff 	add.w	r8, r8, #4294967295
 8006326:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 800632a:	e037      	b.n	800639c <__strftime+0x5ac>
 800632c:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8006330:	9106      	str	r1, [sp, #24]
 8006332:	f000 fe1f 	bl	8006f74 <abs>
 8006336:	2264      	movs	r2, #100	; 0x64
 8006338:	9906      	ldr	r1, [sp, #24]
 800633a:	fb90 f2f2 	sdiv	r2, r0, r2
 800633e:	e7ce      	b.n	80062de <__strftime+0x4ee>
 8006340:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8006344:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8006348:	f000 fe14 	bl	8006f74 <abs>
 800634c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8006350:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8006354:	fb90 fefc 	sdiv	lr, r0, ip
 8006358:	fb0e 001c 	mls	r0, lr, ip, r0
 800635c:	e7c8      	b.n	80062f0 <__strftime+0x500>
 800635e:	d0ce      	beq.n	80062fe <__strftime+0x50e>
 8006360:	4b8d      	ldr	r3, [pc, #564]	; (8006598 <__strftime+0x7a8>)
 8006362:	4299      	cmp	r1, r3
 8006364:	bfb6      	itet	lt
 8006366:	2301      	movlt	r3, #1
 8006368:	2300      	movge	r3, #0
 800636a:	f04f 3bff 	movlt.w	fp, #4294967295
 800636e:	9305      	str	r3, [sp, #20]
 8006370:	e7c5      	b.n	80062fe <__strftime+0x50e>
 8006372:	f04f 0b01 	mov.w	fp, #1
 8006376:	f8cd b014 	str.w	fp, [sp, #20]
 800637a:	e7c0      	b.n	80062fe <__strftime+0x50e>
 800637c:	2b64      	cmp	r3, #100	; 0x64
 800637e:	bf04      	itt	eq
 8006380:	2300      	moveq	r3, #0
 8006382:	3201      	addeq	r2, #1
 8006384:	e7c1      	b.n	800630a <__strftime+0x51a>
 8006386:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 800638a:	d106      	bne.n	800639a <__strftime+0x5aa>
 800638c:	f242 730f 	movw	r3, #9999	; 0x270f
 8006390:	429a      	cmp	r2, r3
 8006392:	d902      	bls.n	800639a <__strftime+0x5aa>
 8006394:	f88d 9020 	strb.w	r9, [sp, #32]
 8006398:	e7c0      	b.n	800631c <__strftime+0x52c>
 800639a:	ab08      	add	r3, sp, #32
 800639c:	2125      	movs	r1, #37	; 0x25
 800639e:	7019      	strb	r1, [r3, #0]
 80063a0:	f1b9 0f00 	cmp.w	r9, #0
 80063a4:	d109      	bne.n	80063ba <__strftime+0x5ca>
 80063a6:	1c58      	adds	r0, r3, #1
 80063a8:	497d      	ldr	r1, [pc, #500]	; (80065a0 <__strftime+0x7b0>)
 80063aa:	9205      	str	r2, [sp, #20]
 80063ac:	f001 f880 	bl	80074b0 <strcpy>
 80063b0:	9a05      	ldr	r2, [sp, #20]
 80063b2:	9200      	str	r2, [sp, #0]
 80063b4:	4643      	mov	r3, r8
 80063b6:	aa08      	add	r2, sp, #32
 80063b8:	e058      	b.n	800646c <__strftime+0x67c>
 80063ba:	2130      	movs	r1, #48	; 0x30
 80063bc:	1c98      	adds	r0, r3, #2
 80063be:	7059      	strb	r1, [r3, #1]
 80063c0:	e7f2      	b.n	80063a8 <__strftime+0x5b8>
 80063c2:	4978      	ldr	r1, [pc, #480]	; (80065a4 <__strftime+0x7b4>)
 80063c4:	4a78      	ldr	r2, [pc, #480]	; (80065a8 <__strftime+0x7b8>)
 80063c6:	68b3      	ldr	r3, [r6, #8]
 80063c8:	286b      	cmp	r0, #107	; 0x6b
 80063ca:	bf08      	it	eq
 80063cc:	460a      	moveq	r2, r1
 80063ce:	e6c8      	b.n	8006162 <__strftime+0x372>
 80063d0:	68b3      	ldr	r3, [r6, #8]
 80063d2:	b163      	cbz	r3, 80063ee <__strftime+0x5fe>
 80063d4:	2b0c      	cmp	r3, #12
 80063d6:	d004      	beq.n	80063e2 <__strftime+0x5f2>
 80063d8:	210c      	movs	r1, #12
 80063da:	fb93 f2f1 	sdiv	r2, r3, r1
 80063de:	fb01 3312 	mls	r3, r1, r2, r3
 80063e2:	4971      	ldr	r1, [pc, #452]	; (80065a8 <__strftime+0x7b8>)
 80063e4:	4a6f      	ldr	r2, [pc, #444]	; (80065a4 <__strftime+0x7b4>)
 80063e6:	2849      	cmp	r0, #73	; 0x49
 80063e8:	bf08      	it	eq
 80063ea:	460a      	moveq	r2, r1
 80063ec:	e6b9      	b.n	8006162 <__strftime+0x372>
 80063ee:	230c      	movs	r3, #12
 80063f0:	e7f7      	b.n	80063e2 <__strftime+0x5f2>
 80063f2:	69f3      	ldr	r3, [r6, #28]
 80063f4:	4a6d      	ldr	r2, [pc, #436]	; (80065ac <__strftime+0x7bc>)
 80063f6:	3301      	adds	r3, #1
 80063f8:	e6b3      	b.n	8006162 <__strftime+0x372>
 80063fa:	6933      	ldr	r3, [r6, #16]
 80063fc:	3301      	adds	r3, #1
 80063fe:	e723      	b.n	8006248 <__strftime+0x458>
 8006400:	6873      	ldr	r3, [r6, #4]
 8006402:	e721      	b.n	8006248 <__strftime+0x458>
 8006404:	1e6b      	subs	r3, r5, #1
 8006406:	42a3      	cmp	r3, r4
 8006408:	f67f ad24 	bls.w	8005e54 <__strftime+0x64>
 800640c:	230a      	movs	r3, #10
 800640e:	553b      	strb	r3, [r7, r4]
 8006410:	3401      	adds	r4, #1
 8006412:	e5f1      	b.n	8005ff8 <__strftime+0x208>
 8006414:	68b3      	ldr	r3, [r6, #8]
 8006416:	2b0b      	cmp	r3, #11
 8006418:	bfcc      	ite	gt
 800641a:	22a4      	movgt	r2, #164	; 0xa4
 800641c:	22a0      	movle	r2, #160	; 0xa0
 800641e:	4b64      	ldr	r3, [pc, #400]	; (80065b0 <__strftime+0x7c0>)
 8006420:	4413      	add	r3, r2
 8006422:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8006426:	4640      	mov	r0, r8
 8006428:	f7f9 fefc 	bl	8000224 <strlen>
 800642c:	f108 32ff 	add.w	r2, r8, #4294967295
 8006430:	4420      	add	r0, r4
 8006432:	f105 3cff 	add.w	ip, r5, #4294967295
 8006436:	42a0      	cmp	r0, r4
 8006438:	f43f adde 	beq.w	8005ff8 <__strftime+0x208>
 800643c:	45a4      	cmp	ip, r4
 800643e:	f67f ad09 	bls.w	8005e54 <__strftime+0x64>
 8006442:	f89a 1000 	ldrb.w	r1, [sl]
 8006446:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800644a:	2950      	cmp	r1, #80	; 0x50
 800644c:	d107      	bne.n	800645e <__strftime+0x66e>
 800644e:	4959      	ldr	r1, [pc, #356]	; (80065b4 <__strftime+0x7c4>)
 8006450:	5cc9      	ldrb	r1, [r1, r3]
 8006452:	f001 0103 	and.w	r1, r1, #3
 8006456:	2901      	cmp	r1, #1
 8006458:	bf08      	it	eq
 800645a:	3320      	addeq	r3, #32
 800645c:	b2db      	uxtb	r3, r3
 800645e:	553b      	strb	r3, [r7, r4]
 8006460:	3401      	adds	r4, #1
 8006462:	e7e8      	b.n	8006436 <__strftime+0x646>
 8006464:	6873      	ldr	r3, [r6, #4]
 8006466:	4a54      	ldr	r2, [pc, #336]	; (80065b8 <__strftime+0x7c8>)
 8006468:	9300      	str	r3, [sp, #0]
 800646a:	68b3      	ldr	r3, [r6, #8]
 800646c:	1b29      	subs	r1, r5, r4
 800646e:	1938      	adds	r0, r7, r4
 8006470:	f000 ffc0 	bl	80073f4 <sniprintf>
 8006474:	e679      	b.n	800616a <__strftime+0x37a>
 8006476:	6a33      	ldr	r3, [r6, #32]
 8006478:	2b00      	cmp	r3, #0
 800647a:	db7b      	blt.n	8006574 <__strftime+0x784>
 800647c:	f000 fb16 	bl	8006aac <__tz_lock>
 8006480:	9b04      	ldr	r3, [sp, #16]
 8006482:	b90b      	cbnz	r3, 8006488 <__strftime+0x698>
 8006484:	f000 fb1e 	bl	8006ac4 <_tzset_unlocked>
 8006488:	f000 fdfa 	bl	8007080 <__gettzinfo>
 800648c:	6a33      	ldr	r3, [r6, #32]
 800648e:	2b00      	cmp	r3, #0
 8006490:	bfcc      	ite	gt
 8006492:	2350      	movgt	r3, #80	; 0x50
 8006494:	2328      	movle	r3, #40	; 0x28
 8006496:	58c3      	ldr	r3, [r0, r3]
 8006498:	f1c3 0900 	rsb	r9, r3, #0
 800649c:	f000 fb0c 	bl	8006ab8 <__tz_unlock>
 80064a0:	2301      	movs	r3, #1
 80064a2:	9304      	str	r3, [sp, #16]
 80064a4:	f8d6 c014 	ldr.w	ip, [r6, #20]
 80064a8:	eba5 0e04 	sub.w	lr, r5, r4
 80064ac:	4662      	mov	r2, ip
 80064ae:	f1bc 0145 	subs.w	r1, ip, #69	; 0x45
 80064b2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80064b6:	9102      	str	r1, [sp, #8]
 80064b8:	f143 31ff 	adc.w	r1, r3, #4294967295
 80064bc:	9103      	str	r1, [sp, #12]
 80064be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064c2:	2800      	cmp	r0, #0
 80064c4:	f171 0100 	sbcs.w	r1, r1, #0
 80064c8:	eb07 0804 	add.w	r8, r7, r4
 80064cc:	da05      	bge.n	80064da <__strftime+0x6ea>
 80064ce:	f1bc 0142 	subs.w	r1, ip, #66	; 0x42
 80064d2:	f143 33ff 	adc.w	r3, r3, #4294967295
 80064d6:	9102      	str	r1, [sp, #8]
 80064d8:	9303      	str	r3, [sp, #12]
 80064da:	9b02      	ldr	r3, [sp, #8]
 80064dc:	f10c 32ff 	add.w	r2, ip, #4294967295
 80064e0:	0898      	lsrs	r0, r3, #2
 80064e2:	9b03      	ldr	r3, [sp, #12]
 80064e4:	ea40 7083 	orr.w	r0, r0, r3, lsl #30
 80064e8:	1099      	asrs	r1, r3, #2
 80064ea:	2364      	movs	r3, #100	; 0x64
 80064ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80064f0:	1ac0      	subs	r0, r0, r3
 80064f2:	eb61 71e3 	sbc.w	r1, r1, r3, asr #31
 80064f6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80064fa:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 80064fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8006502:	18c0      	adds	r0, r0, r3
 8006504:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 8006508:	f240 136d 	movw	r3, #365	; 0x16d
 800650c:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 8006510:	fb03 fc0c 	mul.w	ip, r3, ip
 8006514:	eb10 000c 	adds.w	r0, r0, ip
 8006518:	eb41 71ec 	adc.w	r1, r1, ip, asr #31
 800651c:	f04f 0c18 	mov.w	ip, #24
 8006520:	69f3      	ldr	r3, [r6, #28]
 8006522:	18c0      	adds	r0, r0, r3
 8006524:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 8006528:	fba0 230c 	umull	r2, r3, r0, ip
 800652c:	fb0c 3301 	mla	r3, ip, r1, r3
 8006530:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8006534:	68b1      	ldr	r1, [r6, #8]
 8006536:	1852      	adds	r2, r2, r1
 8006538:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 800653c:	fba2 010c 	umull	r0, r1, r2, ip
 8006540:	fb0c 1103 	mla	r1, ip, r3, r1
 8006544:	6873      	ldr	r3, [r6, #4]
 8006546:	18c0      	adds	r0, r0, r3
 8006548:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 800654c:	fba0 230c 	umull	r2, r3, r0, ip
 8006550:	fb0c 3301 	mla	r3, ip, r1, r3
 8006554:	6831      	ldr	r1, [r6, #0]
 8006556:	4640      	mov	r0, r8
 8006558:	1852      	adds	r2, r2, r1
 800655a:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 800655e:	ebb2 0209 	subs.w	r2, r2, r9
 8006562:	eb63 73e9 	sbc.w	r3, r3, r9, asr #31
 8006566:	e9cd 2300 	strd	r2, r3, [sp]
 800656a:	4671      	mov	r1, lr
 800656c:	4a13      	ldr	r2, [pc, #76]	; (80065bc <__strftime+0x7cc>)
 800656e:	f000 ff41 	bl	80073f4 <sniprintf>
 8006572:	e5fa      	b.n	800616a <__strftime+0x37a>
 8006574:	f04f 0900 	mov.w	r9, #0
 8006578:	e794      	b.n	80064a4 <__strftime+0x6b4>
 800657a:	6833      	ldr	r3, [r6, #0]
 800657c:	e664      	b.n	8006248 <__strftime+0x458>
 800657e:	1e6b      	subs	r3, r5, #1
 8006580:	42a3      	cmp	r3, r4
 8006582:	f67f ac67 	bls.w	8005e54 <__strftime+0x64>
 8006586:	2309      	movs	r3, #9
 8006588:	e741      	b.n	800640e <__strftime+0x61e>
 800658a:	6833      	ldr	r3, [r6, #0]
 800658c:	4a0c      	ldr	r2, [pc, #48]	; (80065c0 <__strftime+0x7d0>)
 800658e:	9301      	str	r3, [sp, #4]
 8006590:	6873      	ldr	r3, [r6, #4]
 8006592:	9300      	str	r3, [sp, #0]
 8006594:	68b3      	ldr	r3, [r6, #8]
 8006596:	e5d9      	b.n	800614c <__strftime+0x35c>
 8006598:	fffff894 	.word	0xfffff894
 800659c:	fffff895 	.word	0xfffff895
 80065a0:	080084f7 	.word	0x080084f7
 80065a4:	080084d8 	.word	0x080084d8
 80065a8:	080084e6 	.word	0x080084e6
 80065ac:	080084fb 	.word	0x080084fb
 80065b0:	0800864c 	.word	0x0800864c
 80065b4:	080087c1 	.word	0x080087c1
 80065b8:	0800850a 	.word	0x0800850a
 80065bc:	08008500 	.word	0x08008500
 80065c0:	08008505 	.word	0x08008505
 80065c4:	1e6b      	subs	r3, r5, #1
 80065c6:	42a3      	cmp	r3, r4
 80065c8:	f67f ac44 	bls.w	8005e54 <__strftime+0x64>
 80065cc:	69b3      	ldr	r3, [r6, #24]
 80065ce:	193a      	adds	r2, r7, r4
 80065d0:	3401      	adds	r4, #1
 80065d2:	b913      	cbnz	r3, 80065da <__strftime+0x7ea>
 80065d4:	2337      	movs	r3, #55	; 0x37
 80065d6:	7013      	strb	r3, [r2, #0]
 80065d8:	e50e      	b.n	8005ff8 <__strftime+0x208>
 80065da:	3330      	adds	r3, #48	; 0x30
 80065dc:	e7fb      	b.n	80065d6 <__strftime+0x7e6>
 80065de:	69f3      	ldr	r3, [r6, #28]
 80065e0:	69b2      	ldr	r2, [r6, #24]
 80065e2:	3307      	adds	r3, #7
 80065e4:	1a9b      	subs	r3, r3, r2
 80065e6:	2207      	movs	r2, #7
 80065e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80065ec:	e62c      	b.n	8006248 <__strftime+0x458>
 80065ee:	4630      	mov	r0, r6
 80065f0:	f7ff fb9c 	bl	8005d2c <iso_year_adjust>
 80065f4:	69b2      	ldr	r2, [r6, #24]
 80065f6:	b132      	cbz	r2, 8006606 <__strftime+0x816>
 80065f8:	3a01      	subs	r2, #1
 80065fa:	2800      	cmp	r0, #0
 80065fc:	dc27      	bgt.n	800664e <__strftime+0x85e>
 80065fe:	69f3      	ldr	r3, [r6, #28]
 8006600:	d103      	bne.n	800660a <__strftime+0x81a>
 8006602:	330a      	adds	r3, #10
 8006604:	e7ee      	b.n	80065e4 <__strftime+0x7f4>
 8006606:	2206      	movs	r2, #6
 8006608:	e7f7      	b.n	80065fa <__strftime+0x80a>
 800660a:	6970      	ldr	r0, [r6, #20]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	2800      	cmp	r0, #0
 8006610:	f240 726b 	movw	r2, #1899	; 0x76b
 8006614:	bfa8      	it	ge
 8006616:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 800661a:	4410      	add	r0, r2
 800661c:	0782      	lsls	r2, r0, #30
 800661e:	d105      	bne.n	800662c <__strftime+0x83c>
 8006620:	2264      	movs	r2, #100	; 0x64
 8006622:	fb90 f1f2 	sdiv	r1, r0, r2
 8006626:	fb02 0111 	mls	r1, r2, r1, r0
 800662a:	b971      	cbnz	r1, 800664a <__strftime+0x85a>
 800662c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8006630:	fb90 f2f1 	sdiv	r2, r0, r1
 8006634:	fb01 0212 	mls	r2, r1, r2, r0
 8006638:	fab2 f282 	clz	r2, r2
 800663c:	0952      	lsrs	r2, r2, #5
 800663e:	1a9a      	subs	r2, r3, r2
 8006640:	2a05      	cmp	r2, #5
 8006642:	bfb4      	ite	lt
 8006644:	2335      	movlt	r3, #53	; 0x35
 8006646:	2334      	movge	r3, #52	; 0x34
 8006648:	e5fe      	b.n	8006248 <__strftime+0x458>
 800664a:	2201      	movs	r2, #1
 800664c:	e7f7      	b.n	800663e <__strftime+0x84e>
 800664e:	2301      	movs	r3, #1
 8006650:	e5fa      	b.n	8006248 <__strftime+0x458>
 8006652:	1e6b      	subs	r3, r5, #1
 8006654:	42a3      	cmp	r3, r4
 8006656:	f67f abfd 	bls.w	8005e54 <__strftime+0x64>
 800665a:	69b3      	ldr	r3, [r6, #24]
 800665c:	3330      	adds	r3, #48	; 0x30
 800665e:	e6d6      	b.n	800640e <__strftime+0x61e>
 8006660:	69b3      	ldr	r3, [r6, #24]
 8006662:	b13b      	cbz	r3, 8006674 <__strftime+0x884>
 8006664:	3b01      	subs	r3, #1
 8006666:	69f2      	ldr	r2, [r6, #28]
 8006668:	3207      	adds	r2, #7
 800666a:	1ad2      	subs	r2, r2, r3
 800666c:	2307      	movs	r3, #7
 800666e:	fb92 f3f3 	sdiv	r3, r2, r3
 8006672:	e5e9      	b.n	8006248 <__strftime+0x458>
 8006674:	2306      	movs	r3, #6
 8006676:	e7f6      	b.n	8006666 <__strftime+0x876>
 8006678:	6970      	ldr	r0, [r6, #20]
 800667a:	2800      	cmp	r0, #0
 800667c:	db05      	blt.n	800668a <__strftime+0x89a>
 800667e:	2264      	movs	r2, #100	; 0x64
 8006680:	fb90 f3f2 	sdiv	r3, r0, r2
 8006684:	fb03 0312 	mls	r3, r3, r2, r0
 8006688:	e5de      	b.n	8006248 <__strftime+0x458>
 800668a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 800668e:	f000 fc71 	bl	8006f74 <abs>
 8006692:	e7f4      	b.n	800667e <__strftime+0x88e>
 8006694:	6973      	ldr	r3, [r6, #20]
 8006696:	4a4d      	ldr	r2, [pc, #308]	; (80067cc <__strftime+0x9dc>)
 8006698:	4293      	cmp	r3, r2
 800669a:	da0c      	bge.n	80066b6 <__strftime+0x8c6>
 800669c:	212d      	movs	r1, #45	; 0x2d
 800669e:	eba2 0b03 	sub.w	fp, r2, r3
 80066a2:	f88d 1020 	strb.w	r1, [sp, #32]
 80066a6:	f1b8 0f00 	cmp.w	r8, #0
 80066aa:	d001      	beq.n	80066b0 <__strftime+0x8c0>
 80066ac:	f108 38ff 	add.w	r8, r8, #4294967295
 80066b0:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 80066b4:	e00c      	b.n	80066d0 <__strftime+0x8e0>
 80066b6:	f1b9 0f2b 	cmp.w	r9, #43	; 0x2b
 80066ba:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
 80066be:	d106      	bne.n	80066ce <__strftime+0x8de>
 80066c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80066c4:	459b      	cmp	fp, r3
 80066c6:	d902      	bls.n	80066ce <__strftime+0x8de>
 80066c8:	f88d 9020 	strb.w	r9, [sp, #32]
 80066cc:	e7eb      	b.n	80066a6 <__strftime+0x8b6>
 80066ce:	ab08      	add	r3, sp, #32
 80066d0:	2225      	movs	r2, #37	; 0x25
 80066d2:	701a      	strb	r2, [r3, #0]
 80066d4:	f1b9 0f00 	cmp.w	r9, #0
 80066d8:	d106      	bne.n	80066e8 <__strftime+0x8f8>
 80066da:	1c58      	adds	r0, r3, #1
 80066dc:	493c      	ldr	r1, [pc, #240]	; (80067d0 <__strftime+0x9e0>)
 80066de:	f000 fee7 	bl	80074b0 <strcpy>
 80066e2:	f8cd b000 	str.w	fp, [sp]
 80066e6:	e665      	b.n	80063b4 <__strftime+0x5c4>
 80066e8:	2230      	movs	r2, #48	; 0x30
 80066ea:	1c98      	adds	r0, r3, #2
 80066ec:	705a      	strb	r2, [r3, #1]
 80066ee:	e7f5      	b.n	80066dc <__strftime+0x8ec>
 80066f0:	6a33      	ldr	r3, [r6, #32]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f6ff ac80 	blt.w	8005ff8 <__strftime+0x208>
 80066f8:	f000 f9d8 	bl	8006aac <__tz_lock>
 80066fc:	9b04      	ldr	r3, [sp, #16]
 80066fe:	b90b      	cbnz	r3, 8006704 <__strftime+0x914>
 8006700:	f000 f9e0 	bl	8006ac4 <_tzset_unlocked>
 8006704:	f000 fcbc 	bl	8007080 <__gettzinfo>
 8006708:	6a33      	ldr	r3, [r6, #32]
 800670a:	eb07 0904 	add.w	r9, r7, r4
 800670e:	2b00      	cmp	r3, #0
 8006710:	bfcc      	ite	gt
 8006712:	2350      	movgt	r3, #80	; 0x50
 8006714:	2328      	movle	r3, #40	; 0x28
 8006716:	58c3      	ldr	r3, [r0, r3]
 8006718:	eba5 0b04 	sub.w	fp, r5, r4
 800671c:	f1c3 0800 	rsb	r8, r3, #0
 8006720:	f000 f9ca 	bl	8006ab8 <__tz_unlock>
 8006724:	233c      	movs	r3, #60	; 0x3c
 8006726:	fb98 f0f3 	sdiv	r0, r8, r3
 800672a:	f000 fd5d 	bl	80071e8 <labs>
 800672e:	233c      	movs	r3, #60	; 0x3c
 8006730:	fb90 f2f3 	sdiv	r2, r0, r3
 8006734:	fb02 0013 	mls	r0, r2, r3, r0
 8006738:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800673c:	9000      	str	r0, [sp, #0]
 800673e:	fb98 f3f3 	sdiv	r3, r8, r3
 8006742:	4659      	mov	r1, fp
 8006744:	4648      	mov	r0, r9
 8006746:	4a23      	ldr	r2, [pc, #140]	; (80067d4 <__strftime+0x9e4>)
 8006748:	f000 fe54 	bl	80073f4 <sniprintf>
 800674c:	2800      	cmp	r0, #0
 800674e:	f6ff ab81 	blt.w	8005e54 <__strftime+0x64>
 8006752:	4404      	add	r4, r0
 8006754:	42a5      	cmp	r5, r4
 8006756:	f67f ab7d 	bls.w	8005e54 <__strftime+0x64>
 800675a:	2301      	movs	r3, #1
 800675c:	9304      	str	r3, [sp, #16]
 800675e:	e44b      	b.n	8005ff8 <__strftime+0x208>
 8006760:	6a33      	ldr	r3, [r6, #32]
 8006762:	2b00      	cmp	r3, #0
 8006764:	f6ff ac48 	blt.w	8005ff8 <__strftime+0x208>
 8006768:	f000 f9a0 	bl	8006aac <__tz_lock>
 800676c:	9b04      	ldr	r3, [sp, #16]
 800676e:	b90b      	cbnz	r3, 8006774 <__strftime+0x984>
 8006770:	f000 f9a8 	bl	8006ac4 <_tzset_unlocked>
 8006774:	6a33      	ldr	r3, [r6, #32]
 8006776:	4a18      	ldr	r2, [pc, #96]	; (80067d8 <__strftime+0x9e8>)
 8006778:	2b00      	cmp	r3, #0
 800677a:	bfd4      	ite	le
 800677c:	2300      	movle	r3, #0
 800677e:	2301      	movgt	r3, #1
 8006780:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 8006784:	4640      	mov	r0, r8
 8006786:	f7f9 fd4d 	bl	8000224 <strlen>
 800678a:	f108 38ff 	add.w	r8, r8, #4294967295
 800678e:	4420      	add	r0, r4
 8006790:	1e6b      	subs	r3, r5, #1
 8006792:	42a0      	cmp	r0, r4
 8006794:	d102      	bne.n	800679c <__strftime+0x9ac>
 8006796:	f000 f98f 	bl	8006ab8 <__tz_unlock>
 800679a:	e7de      	b.n	800675a <__strftime+0x96a>
 800679c:	42a3      	cmp	r3, r4
 800679e:	d904      	bls.n	80067aa <__strftime+0x9ba>
 80067a0:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80067a4:	553a      	strb	r2, [r7, r4]
 80067a6:	3401      	adds	r4, #1
 80067a8:	e7f3      	b.n	8006792 <__strftime+0x9a2>
 80067aa:	f000 f985 	bl	8006ab8 <__tz_unlock>
 80067ae:	f7ff bb51 	b.w	8005e54 <__strftime+0x64>
 80067b2:	1e6b      	subs	r3, r5, #1
 80067b4:	42a3      	cmp	r3, r4
 80067b6:	f67f ab4d 	bls.w	8005e54 <__strftime+0x64>
 80067ba:	2325      	movs	r3, #37	; 0x25
 80067bc:	e627      	b.n	800640e <__strftime+0x61e>
 80067be:	b10d      	cbz	r5, 80067c4 <__strftime+0x9d4>
 80067c0:	2300      	movs	r3, #0
 80067c2:	553b      	strb	r3, [r7, r4]
 80067c4:	4620      	mov	r0, r4
 80067c6:	b011      	add	sp, #68	; 0x44
 80067c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067cc:	fffff894 	.word	0xfffff894
 80067d0:	080084f7 	.word	0x080084f7
 80067d4:	08008514 	.word	0x08008514
 80067d8:	200000a4 	.word	0x200000a4

080067dc <strftime>:
 80067dc:	b513      	push	{r0, r1, r4, lr}
 80067de:	4c03      	ldr	r4, [pc, #12]	; (80067ec <strftime+0x10>)
 80067e0:	9400      	str	r4, [sp, #0]
 80067e2:	f7ff fb05 	bl	8005df0 <__strftime>
 80067e6:	b002      	add	sp, #8
 80067e8:	bd10      	pop	{r4, pc}
 80067ea:	bf00      	nop
 80067ec:	20000108 	.word	0x20000108

080067f0 <strncpy>:
 80067f0:	4603      	mov	r3, r0
 80067f2:	b510      	push	{r4, lr}
 80067f4:	3901      	subs	r1, #1
 80067f6:	b132      	cbz	r2, 8006806 <strncpy+0x16>
 80067f8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80067fc:	3a01      	subs	r2, #1
 80067fe:	f803 4b01 	strb.w	r4, [r3], #1
 8006802:	2c00      	cmp	r4, #0
 8006804:	d1f7      	bne.n	80067f6 <strncpy+0x6>
 8006806:	2100      	movs	r1, #0
 8006808:	441a      	add	r2, r3
 800680a:	4293      	cmp	r3, r2
 800680c:	d100      	bne.n	8006810 <strncpy+0x20>
 800680e:	bd10      	pop	{r4, pc}
 8006810:	f803 1b01 	strb.w	r1, [r3], #1
 8006814:	e7f9      	b.n	800680a <strncpy+0x1a>
	...

08006818 <_strtoul_l.isra.0>:
 8006818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800681c:	468c      	mov	ip, r1
 800681e:	4686      	mov	lr, r0
 8006820:	4e3a      	ldr	r6, [pc, #232]	; (800690c <_strtoul_l.isra.0+0xf4>)
 8006822:	4660      	mov	r0, ip
 8006824:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8006828:	5da5      	ldrb	r5, [r4, r6]
 800682a:	f015 0508 	ands.w	r5, r5, #8
 800682e:	d1f8      	bne.n	8006822 <_strtoul_l.isra.0+0xa>
 8006830:	2c2d      	cmp	r4, #45	; 0x2d
 8006832:	d134      	bne.n	800689e <_strtoul_l.isra.0+0x86>
 8006834:	f04f 0801 	mov.w	r8, #1
 8006838:	f89c 4000 	ldrb.w	r4, [ip]
 800683c:	f100 0c02 	add.w	ip, r0, #2
 8006840:	2b00      	cmp	r3, #0
 8006842:	d05e      	beq.n	8006902 <_strtoul_l.isra.0+0xea>
 8006844:	2b10      	cmp	r3, #16
 8006846:	d10c      	bne.n	8006862 <_strtoul_l.isra.0+0x4a>
 8006848:	2c30      	cmp	r4, #48	; 0x30
 800684a:	d10a      	bne.n	8006862 <_strtoul_l.isra.0+0x4a>
 800684c:	f89c 0000 	ldrb.w	r0, [ip]
 8006850:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006854:	2858      	cmp	r0, #88	; 0x58
 8006856:	d14f      	bne.n	80068f8 <_strtoul_l.isra.0+0xe0>
 8006858:	2310      	movs	r3, #16
 800685a:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800685e:	f10c 0c02 	add.w	ip, ip, #2
 8006862:	f04f 37ff 	mov.w	r7, #4294967295
 8006866:	fbb7 f7f3 	udiv	r7, r7, r3
 800686a:	2500      	movs	r5, #0
 800686c:	fb03 f907 	mul.w	r9, r3, r7
 8006870:	4628      	mov	r0, r5
 8006872:	ea6f 0909 	mvn.w	r9, r9
 8006876:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800687a:	2e09      	cmp	r6, #9
 800687c:	d818      	bhi.n	80068b0 <_strtoul_l.isra.0+0x98>
 800687e:	4634      	mov	r4, r6
 8006880:	42a3      	cmp	r3, r4
 8006882:	dd24      	ble.n	80068ce <_strtoul_l.isra.0+0xb6>
 8006884:	2d00      	cmp	r5, #0
 8006886:	db1f      	blt.n	80068c8 <_strtoul_l.isra.0+0xb0>
 8006888:	4287      	cmp	r7, r0
 800688a:	d31d      	bcc.n	80068c8 <_strtoul_l.isra.0+0xb0>
 800688c:	d101      	bne.n	8006892 <_strtoul_l.isra.0+0x7a>
 800688e:	45a1      	cmp	r9, r4
 8006890:	db1a      	blt.n	80068c8 <_strtoul_l.isra.0+0xb0>
 8006892:	2501      	movs	r5, #1
 8006894:	fb00 4003 	mla	r0, r0, r3, r4
 8006898:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800689c:	e7eb      	b.n	8006876 <_strtoul_l.isra.0+0x5e>
 800689e:	2c2b      	cmp	r4, #43	; 0x2b
 80068a0:	bf08      	it	eq
 80068a2:	f89c 4000 	ldrbeq.w	r4, [ip]
 80068a6:	46a8      	mov	r8, r5
 80068a8:	bf08      	it	eq
 80068aa:	f100 0c02 	addeq.w	ip, r0, #2
 80068ae:	e7c7      	b.n	8006840 <_strtoul_l.isra.0+0x28>
 80068b0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80068b4:	2e19      	cmp	r6, #25
 80068b6:	d801      	bhi.n	80068bc <_strtoul_l.isra.0+0xa4>
 80068b8:	3c37      	subs	r4, #55	; 0x37
 80068ba:	e7e1      	b.n	8006880 <_strtoul_l.isra.0+0x68>
 80068bc:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80068c0:	2e19      	cmp	r6, #25
 80068c2:	d804      	bhi.n	80068ce <_strtoul_l.isra.0+0xb6>
 80068c4:	3c57      	subs	r4, #87	; 0x57
 80068c6:	e7db      	b.n	8006880 <_strtoul_l.isra.0+0x68>
 80068c8:	f04f 35ff 	mov.w	r5, #4294967295
 80068cc:	e7e4      	b.n	8006898 <_strtoul_l.isra.0+0x80>
 80068ce:	2d00      	cmp	r5, #0
 80068d0:	da07      	bge.n	80068e2 <_strtoul_l.isra.0+0xca>
 80068d2:	2322      	movs	r3, #34	; 0x22
 80068d4:	f04f 30ff 	mov.w	r0, #4294967295
 80068d8:	f8ce 3000 	str.w	r3, [lr]
 80068dc:	b942      	cbnz	r2, 80068f0 <_strtoul_l.isra.0+0xd8>
 80068de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068e2:	f1b8 0f00 	cmp.w	r8, #0
 80068e6:	d000      	beq.n	80068ea <_strtoul_l.isra.0+0xd2>
 80068e8:	4240      	negs	r0, r0
 80068ea:	2a00      	cmp	r2, #0
 80068ec:	d0f7      	beq.n	80068de <_strtoul_l.isra.0+0xc6>
 80068ee:	b10d      	cbz	r5, 80068f4 <_strtoul_l.isra.0+0xdc>
 80068f0:	f10c 31ff 	add.w	r1, ip, #4294967295
 80068f4:	6011      	str	r1, [r2, #0]
 80068f6:	e7f2      	b.n	80068de <_strtoul_l.isra.0+0xc6>
 80068f8:	2430      	movs	r4, #48	; 0x30
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1b1      	bne.n	8006862 <_strtoul_l.isra.0+0x4a>
 80068fe:	2308      	movs	r3, #8
 8006900:	e7af      	b.n	8006862 <_strtoul_l.isra.0+0x4a>
 8006902:	2c30      	cmp	r4, #48	; 0x30
 8006904:	d0a2      	beq.n	800684c <_strtoul_l.isra.0+0x34>
 8006906:	230a      	movs	r3, #10
 8006908:	e7ab      	b.n	8006862 <_strtoul_l.isra.0+0x4a>
 800690a:	bf00      	nop
 800690c:	080087c1 	.word	0x080087c1

08006910 <_strtoul_r>:
 8006910:	f7ff bf82 	b.w	8006818 <_strtoul_l.isra.0>

08006914 <strtoul>:
 8006914:	4613      	mov	r3, r2
 8006916:	460a      	mov	r2, r1
 8006918:	4601      	mov	r1, r0
 800691a:	4802      	ldr	r0, [pc, #8]	; (8006924 <strtoul+0x10>)
 800691c:	6800      	ldr	r0, [r0, #0]
 800691e:	f7ff bf7b 	b.w	8006818 <_strtoul_l.isra.0>
 8006922:	bf00      	nop
 8006924:	20000040 	.word	0x20000040

08006928 <time>:
 8006928:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800692a:	4b0b      	ldr	r3, [pc, #44]	; (8006958 <time+0x30>)
 800692c:	4604      	mov	r4, r0
 800692e:	2200      	movs	r2, #0
 8006930:	4669      	mov	r1, sp
 8006932:	6818      	ldr	r0, [r3, #0]
 8006934:	f000 fb92 	bl	800705c <_gettimeofday_r>
 8006938:	2800      	cmp	r0, #0
 800693a:	da05      	bge.n	8006948 <time+0x20>
 800693c:	f04f 32ff 	mov.w	r2, #4294967295
 8006940:	f04f 33ff 	mov.w	r3, #4294967295
 8006944:	e9cd 2300 	strd	r2, r3, [sp]
 8006948:	e9dd 0100 	ldrd	r0, r1, [sp]
 800694c:	b10c      	cbz	r4, 8006952 <time+0x2a>
 800694e:	e9c4 0100 	strd	r0, r1, [r4]
 8006952:	b004      	add	sp, #16
 8006954:	bd10      	pop	{r4, pc}
 8006956:	bf00      	nop
 8006958:	20000040 	.word	0x20000040

0800695c <__tzcalc_limits>:
 800695c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006960:	4680      	mov	r8, r0
 8006962:	f000 fb8d 	bl	8007080 <__gettzinfo>
 8006966:	f240 73b1 	movw	r3, #1969	; 0x7b1
 800696a:	4598      	cmp	r8, r3
 800696c:	f340 8097 	ble.w	8006a9e <__tzcalc_limits+0x142>
 8006970:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8006974:	f240 126d 	movw	r2, #365	; 0x16d
 8006978:	4443      	add	r3, r8
 800697a:	109b      	asrs	r3, r3, #2
 800697c:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 8006980:	fb02 3505 	mla	r5, r2, r5, r3
 8006984:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8006988:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 800698c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006990:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8006994:	441d      	add	r5, r3
 8006996:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800699a:	4442      	add	r2, r8
 800699c:	fbb2 f2f3 	udiv	r2, r2, r3
 80069a0:	fb98 f7f3 	sdiv	r7, r8, r3
 80069a4:	4415      	add	r5, r2
 80069a6:	2264      	movs	r2, #100	; 0x64
 80069a8:	fb03 8717 	mls	r7, r3, r7, r8
 80069ac:	fb98 f6f2 	sdiv	r6, r8, r2
 80069b0:	fab7 fc87 	clz	ip, r7
 80069b4:	4604      	mov	r4, r0
 80069b6:	f04f 0e07 	mov.w	lr, #7
 80069ba:	fb02 8616 	mls	r6, r2, r6, r8
 80069be:	f008 0303 	and.w	r3, r8, #3
 80069c2:	f8c0 8004 	str.w	r8, [r0, #4]
 80069c6:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80069ca:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	7a22      	ldrb	r2, [r4, #8]
 80069d2:	6963      	ldr	r3, [r4, #20]
 80069d4:	2a4a      	cmp	r2, #74	; 0x4a
 80069d6:	d128      	bne.n	8006a2a <__tzcalc_limits+0xce>
 80069d8:	9900      	ldr	r1, [sp, #0]
 80069da:	18ea      	adds	r2, r5, r3
 80069dc:	b901      	cbnz	r1, 80069e0 <__tzcalc_limits+0x84>
 80069de:	b906      	cbnz	r6, 80069e2 <__tzcalc_limits+0x86>
 80069e0:	bb0f      	cbnz	r7, 8006a26 <__tzcalc_limits+0xca>
 80069e2:	2b3b      	cmp	r3, #59	; 0x3b
 80069e4:	bfd4      	ite	le
 80069e6:	2300      	movle	r3, #0
 80069e8:	2301      	movgt	r3, #1
 80069ea:	4413      	add	r3, r2
 80069ec:	1e5a      	subs	r2, r3, #1
 80069ee:	69a3      	ldr	r3, [r4, #24]
 80069f0:	492c      	ldr	r1, [pc, #176]	; (8006aa4 <__tzcalc_limits+0x148>)
 80069f2:	3428      	adds	r4, #40	; 0x28
 80069f4:	fb01 3202 	mla	r2, r1, r2, r3
 80069f8:	6823      	ldr	r3, [r4, #0]
 80069fa:	4413      	add	r3, r2
 80069fc:	461a      	mov	r2, r3
 80069fe:	17db      	asrs	r3, r3, #31
 8006a00:	e944 2302 	strd	r2, r3, [r4, #-8]
 8006a04:	45a3      	cmp	fp, r4
 8006a06:	d1e3      	bne.n	80069d0 <__tzcalc_limits+0x74>
 8006a08:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8006a0c:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 8006a10:	4294      	cmp	r4, r2
 8006a12:	eb75 0303 	sbcs.w	r3, r5, r3
 8006a16:	bfb4      	ite	lt
 8006a18:	2301      	movlt	r3, #1
 8006a1a:	2300      	movge	r3, #0
 8006a1c:	6003      	str	r3, [r0, #0]
 8006a1e:	2001      	movs	r0, #1
 8006a20:	b003      	add	sp, #12
 8006a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a26:	2300      	movs	r3, #0
 8006a28:	e7df      	b.n	80069ea <__tzcalc_limits+0x8e>
 8006a2a:	2a44      	cmp	r2, #68	; 0x44
 8006a2c:	d101      	bne.n	8006a32 <__tzcalc_limits+0xd6>
 8006a2e:	18ea      	adds	r2, r5, r3
 8006a30:	e7dd      	b.n	80069ee <__tzcalc_limits+0x92>
 8006a32:	9a00      	ldr	r2, [sp, #0]
 8006a34:	bb6a      	cbnz	r2, 8006a92 <__tzcalc_limits+0x136>
 8006a36:	2e00      	cmp	r6, #0
 8006a38:	bf0c      	ite	eq
 8006a3a:	46e0      	moveq	r8, ip
 8006a3c:	f04f 0801 	movne.w	r8, #1
 8006a40:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8006a44:	68e2      	ldr	r2, [r4, #12]
 8006a46:	f04f 0900 	mov.w	r9, #0
 8006a4a:	9201      	str	r2, [sp, #4]
 8006a4c:	462a      	mov	r2, r5
 8006a4e:	4916      	ldr	r1, [pc, #88]	; (8006aa8 <__tzcalc_limits+0x14c>)
 8006a50:	fb0a 1808 	mla	r8, sl, r8, r1
 8006a54:	f1a8 0804 	sub.w	r8, r8, #4
 8006a58:	9901      	ldr	r1, [sp, #4]
 8006a5a:	f109 0901 	add.w	r9, r9, #1
 8006a5e:	4549      	cmp	r1, r9
 8006a60:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 8006a64:	dc17      	bgt.n	8006a96 <__tzcalc_limits+0x13a>
 8006a66:	f102 0804 	add.w	r8, r2, #4
 8006a6a:	fb98 f9fe 	sdiv	r9, r8, lr
 8006a6e:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 8006a72:	eba8 0909 	sub.w	r9, r8, r9
 8006a76:	ebb3 0909 	subs.w	r9, r3, r9
 8006a7a:	6923      	ldr	r3, [r4, #16]
 8006a7c:	bf48      	it	mi
 8006a7e:	f109 0907 	addmi.w	r9, r9, #7
 8006a82:	3b01      	subs	r3, #1
 8006a84:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006a88:	444b      	add	r3, r9
 8006a8a:	4553      	cmp	r3, sl
 8006a8c:	da05      	bge.n	8006a9a <__tzcalc_limits+0x13e>
 8006a8e:	441a      	add	r2, r3
 8006a90:	e7ad      	b.n	80069ee <__tzcalc_limits+0x92>
 8006a92:	46e0      	mov	r8, ip
 8006a94:	e7d4      	b.n	8006a40 <__tzcalc_limits+0xe4>
 8006a96:	4452      	add	r2, sl
 8006a98:	e7de      	b.n	8006a58 <__tzcalc_limits+0xfc>
 8006a9a:	3b07      	subs	r3, #7
 8006a9c:	e7f5      	b.n	8006a8a <__tzcalc_limits+0x12e>
 8006a9e:	2000      	movs	r0, #0
 8006aa0:	e7be      	b.n	8006a20 <__tzcalc_limits+0xc4>
 8006aa2:	bf00      	nop
 8006aa4:	00015180 	.word	0x00015180
 8006aa8:	08008434 	.word	0x08008434

08006aac <__tz_lock>:
 8006aac:	4801      	ldr	r0, [pc, #4]	; (8006ab4 <__tz_lock+0x8>)
 8006aae:	f7fe bd2c 	b.w	800550a <__retarget_lock_acquire>
 8006ab2:	bf00      	nop
 8006ab4:	200006eb 	.word	0x200006eb

08006ab8 <__tz_unlock>:
 8006ab8:	4801      	ldr	r0, [pc, #4]	; (8006ac0 <__tz_unlock+0x8>)
 8006aba:	f7fe bd28 	b.w	800550e <__retarget_lock_release>
 8006abe:	bf00      	nop
 8006ac0:	200006eb 	.word	0x200006eb

08006ac4 <_tzset_unlocked>:
 8006ac4:	4b01      	ldr	r3, [pc, #4]	; (8006acc <_tzset_unlocked+0x8>)
 8006ac6:	6818      	ldr	r0, [r3, #0]
 8006ac8:	f000 b802 	b.w	8006ad0 <_tzset_unlocked_r>
 8006acc:	20000040 	.word	0x20000040

08006ad0 <_tzset_unlocked_r>:
 8006ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ad4:	b08d      	sub	sp, #52	; 0x34
 8006ad6:	4607      	mov	r7, r0
 8006ad8:	f000 fad2 	bl	8007080 <__gettzinfo>
 8006adc:	49b0      	ldr	r1, [pc, #704]	; (8006da0 <_tzset_unlocked_r+0x2d0>)
 8006ade:	4605      	mov	r5, r0
 8006ae0:	4638      	mov	r0, r7
 8006ae2:	f000 fab3 	bl	800704c <_getenv_r>
 8006ae6:	4eaf      	ldr	r6, [pc, #700]	; (8006da4 <_tzset_unlocked_r+0x2d4>)
 8006ae8:	4604      	mov	r4, r0
 8006aea:	b970      	cbnz	r0, 8006b0a <_tzset_unlocked_r+0x3a>
 8006aec:	4bae      	ldr	r3, [pc, #696]	; (8006da8 <_tzset_unlocked_r+0x2d8>)
 8006aee:	4aaf      	ldr	r2, [pc, #700]	; (8006dac <_tzset_unlocked_r+0x2dc>)
 8006af0:	6018      	str	r0, [r3, #0]
 8006af2:	4baf      	ldr	r3, [pc, #700]	; (8006db0 <_tzset_unlocked_r+0x2e0>)
 8006af4:	6018      	str	r0, [r3, #0]
 8006af6:	4baf      	ldr	r3, [pc, #700]	; (8006db4 <_tzset_unlocked_r+0x2e4>)
 8006af8:	6830      	ldr	r0, [r6, #0]
 8006afa:	e9c3 2200 	strd	r2, r2, [r3]
 8006afe:	f7fe fd11 	bl	8005524 <free>
 8006b02:	6034      	str	r4, [r6, #0]
 8006b04:	b00d      	add	sp, #52	; 0x34
 8006b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b0a:	6831      	ldr	r1, [r6, #0]
 8006b0c:	2900      	cmp	r1, #0
 8006b0e:	d15f      	bne.n	8006bd0 <_tzset_unlocked_r+0x100>
 8006b10:	6830      	ldr	r0, [r6, #0]
 8006b12:	f7fe fd07 	bl	8005524 <free>
 8006b16:	4620      	mov	r0, r4
 8006b18:	f7f9 fb84 	bl	8000224 <strlen>
 8006b1c:	1c41      	adds	r1, r0, #1
 8006b1e:	4638      	mov	r0, r7
 8006b20:	f7fe fd5c 	bl	80055dc <_malloc_r>
 8006b24:	6030      	str	r0, [r6, #0]
 8006b26:	2800      	cmp	r0, #0
 8006b28:	d157      	bne.n	8006bda <_tzset_unlocked_r+0x10a>
 8006b2a:	7823      	ldrb	r3, [r4, #0]
 8006b2c:	ae0a      	add	r6, sp, #40	; 0x28
 8006b2e:	2b3a      	cmp	r3, #58	; 0x3a
 8006b30:	bf08      	it	eq
 8006b32:	3401      	addeq	r4, #1
 8006b34:	4633      	mov	r3, r6
 8006b36:	4620      	mov	r0, r4
 8006b38:	4a9f      	ldr	r2, [pc, #636]	; (8006db8 <_tzset_unlocked_r+0x2e8>)
 8006b3a:	49a0      	ldr	r1, [pc, #640]	; (8006dbc <_tzset_unlocked_r+0x2ec>)
 8006b3c:	f000 fc8e 	bl	800745c <siscanf>
 8006b40:	2800      	cmp	r0, #0
 8006b42:	dddf      	ble.n	8006b04 <_tzset_unlocked_r+0x34>
 8006b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b46:	18e7      	adds	r7, r4, r3
 8006b48:	5ce3      	ldrb	r3, [r4, r3]
 8006b4a:	2b2d      	cmp	r3, #45	; 0x2d
 8006b4c:	d149      	bne.n	8006be2 <_tzset_unlocked_r+0x112>
 8006b4e:	f04f 34ff 	mov.w	r4, #4294967295
 8006b52:	3701      	adds	r7, #1
 8006b54:	f04f 0800 	mov.w	r8, #0
 8006b58:	f10d 0a20 	add.w	sl, sp, #32
 8006b5c:	f10d 0b1e 	add.w	fp, sp, #30
 8006b60:	4633      	mov	r3, r6
 8006b62:	4638      	mov	r0, r7
 8006b64:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8006b68:	4995      	ldr	r1, [pc, #596]	; (8006dc0 <_tzset_unlocked_r+0x2f0>)
 8006b6a:	9603      	str	r6, [sp, #12]
 8006b6c:	f8cd b000 	str.w	fp, [sp]
 8006b70:	aa07      	add	r2, sp, #28
 8006b72:	f8ad 801e 	strh.w	r8, [sp, #30]
 8006b76:	f8ad 8020 	strh.w	r8, [sp, #32]
 8006b7a:	f000 fc6f 	bl	800745c <siscanf>
 8006b7e:	4540      	cmp	r0, r8
 8006b80:	ddc0      	ble.n	8006b04 <_tzset_unlocked_r+0x34>
 8006b82:	213c      	movs	r1, #60	; 0x3c
 8006b84:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8006b88:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8006b8c:	f8df 923c 	ldr.w	r9, [pc, #572]	; 8006dcc <_tzset_unlocked_r+0x2fc>
 8006b90:	fb01 2203 	mla	r2, r1, r3, r2
 8006b94:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8006b98:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8006b9c:	fb01 2303 	mla	r3, r1, r3, r2
 8006ba0:	435c      	muls	r4, r3
 8006ba2:	4b85      	ldr	r3, [pc, #532]	; (8006db8 <_tzset_unlocked_r+0x2e8>)
 8006ba4:	62ac      	str	r4, [r5, #40]	; 0x28
 8006ba6:	4c83      	ldr	r4, [pc, #524]	; (8006db4 <_tzset_unlocked_r+0x2e4>)
 8006ba8:	464a      	mov	r2, r9
 8006baa:	6023      	str	r3, [r4, #0]
 8006bac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bae:	4983      	ldr	r1, [pc, #524]	; (8006dbc <_tzset_unlocked_r+0x2ec>)
 8006bb0:	441f      	add	r7, r3
 8006bb2:	4638      	mov	r0, r7
 8006bb4:	4633      	mov	r3, r6
 8006bb6:	f000 fc51 	bl	800745c <siscanf>
 8006bba:	4540      	cmp	r0, r8
 8006bbc:	dc17      	bgt.n	8006bee <_tzset_unlocked_r+0x11e>
 8006bbe:	6823      	ldr	r3, [r4, #0]
 8006bc0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8006bc2:	6063      	str	r3, [r4, #4]
 8006bc4:	4b78      	ldr	r3, [pc, #480]	; (8006da8 <_tzset_unlocked_r+0x2d8>)
 8006bc6:	601a      	str	r2, [r3, #0]
 8006bc8:	4b79      	ldr	r3, [pc, #484]	; (8006db0 <_tzset_unlocked_r+0x2e0>)
 8006bca:	f8c3 8000 	str.w	r8, [r3]
 8006bce:	e799      	b.n	8006b04 <_tzset_unlocked_r+0x34>
 8006bd0:	f7f9 fb30 	bl	8000234 <strcmp>
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	d19b      	bne.n	8006b10 <_tzset_unlocked_r+0x40>
 8006bd8:	e794      	b.n	8006b04 <_tzset_unlocked_r+0x34>
 8006bda:	4621      	mov	r1, r4
 8006bdc:	f000 fc68 	bl	80074b0 <strcpy>
 8006be0:	e7a3      	b.n	8006b2a <_tzset_unlocked_r+0x5a>
 8006be2:	2b2b      	cmp	r3, #43	; 0x2b
 8006be4:	f04f 0401 	mov.w	r4, #1
 8006be8:	bf08      	it	eq
 8006bea:	3701      	addeq	r7, #1
 8006bec:	e7b2      	b.n	8006b54 <_tzset_unlocked_r+0x84>
 8006bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bf0:	f8c4 9004 	str.w	r9, [r4, #4]
 8006bf4:	18fc      	adds	r4, r7, r3
 8006bf6:	5cfb      	ldrb	r3, [r7, r3]
 8006bf8:	2b2d      	cmp	r3, #45	; 0x2d
 8006bfa:	f040 808c 	bne.w	8006d16 <_tzset_unlocked_r+0x246>
 8006bfe:	f04f 37ff 	mov.w	r7, #4294967295
 8006c02:	3401      	adds	r4, #1
 8006c04:	2300      	movs	r3, #0
 8006c06:	4620      	mov	r0, r4
 8006c08:	f8ad 301c 	strh.w	r3, [sp, #28]
 8006c0c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006c10:	f8ad 3020 	strh.w	r3, [sp, #32]
 8006c14:	930a      	str	r3, [sp, #40]	; 0x28
 8006c16:	e9cd a602 	strd	sl, r6, [sp, #8]
 8006c1a:	4633      	mov	r3, r6
 8006c1c:	e9cd b600 	strd	fp, r6, [sp]
 8006c20:	4967      	ldr	r1, [pc, #412]	; (8006dc0 <_tzset_unlocked_r+0x2f0>)
 8006c22:	aa07      	add	r2, sp, #28
 8006c24:	f000 fc1a 	bl	800745c <siscanf>
 8006c28:	2800      	cmp	r0, #0
 8006c2a:	dc7a      	bgt.n	8006d22 <_tzset_unlocked_r+0x252>
 8006c2c:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8006c2e:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 8006c32:	652f      	str	r7, [r5, #80]	; 0x50
 8006c34:	f04f 0900 	mov.w	r9, #0
 8006c38:	462f      	mov	r7, r5
 8006c3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c3c:	441c      	add	r4, r3
 8006c3e:	7823      	ldrb	r3, [r4, #0]
 8006c40:	2b2c      	cmp	r3, #44	; 0x2c
 8006c42:	bf08      	it	eq
 8006c44:	3401      	addeq	r4, #1
 8006c46:	f894 8000 	ldrb.w	r8, [r4]
 8006c4a:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8006c4e:	d17a      	bne.n	8006d46 <_tzset_unlocked_r+0x276>
 8006c50:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8006c54:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8006c58:	ab09      	add	r3, sp, #36	; 0x24
 8006c5a:	9300      	str	r3, [sp, #0]
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	4633      	mov	r3, r6
 8006c60:	4958      	ldr	r1, [pc, #352]	; (8006dc4 <_tzset_unlocked_r+0x2f4>)
 8006c62:	9603      	str	r6, [sp, #12]
 8006c64:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8006c68:	f000 fbf8 	bl	800745c <siscanf>
 8006c6c:	2803      	cmp	r0, #3
 8006c6e:	f47f af49 	bne.w	8006b04 <_tzset_unlocked_r+0x34>
 8006c72:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8006c76:	1e4b      	subs	r3, r1, #1
 8006c78:	2b0b      	cmp	r3, #11
 8006c7a:	f63f af43 	bhi.w	8006b04 <_tzset_unlocked_r+0x34>
 8006c7e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8006c82:	1e53      	subs	r3, r2, #1
 8006c84:	2b04      	cmp	r3, #4
 8006c86:	f63f af3d 	bhi.w	8006b04 <_tzset_unlocked_r+0x34>
 8006c8a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8006c8e:	2b06      	cmp	r3, #6
 8006c90:	f63f af38 	bhi.w	8006b04 <_tzset_unlocked_r+0x34>
 8006c94:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8006c98:	f887 8008 	strb.w	r8, [r7, #8]
 8006c9c:	617b      	str	r3, [r7, #20]
 8006c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ca0:	eb04 0803 	add.w	r8, r4, r3
 8006ca4:	2302      	movs	r3, #2
 8006ca6:	f8ad 301c 	strh.w	r3, [sp, #28]
 8006caa:	2300      	movs	r3, #0
 8006cac:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006cb0:	f8ad 3020 	strh.w	r3, [sp, #32]
 8006cb4:	930a      	str	r3, [sp, #40]	; 0x28
 8006cb6:	f898 3000 	ldrb.w	r3, [r8]
 8006cba:	2b2f      	cmp	r3, #47	; 0x2f
 8006cbc:	d109      	bne.n	8006cd2 <_tzset_unlocked_r+0x202>
 8006cbe:	4633      	mov	r3, r6
 8006cc0:	4640      	mov	r0, r8
 8006cc2:	e9cd a602 	strd	sl, r6, [sp, #8]
 8006cc6:	e9cd b600 	strd	fp, r6, [sp]
 8006cca:	493f      	ldr	r1, [pc, #252]	; (8006dc8 <_tzset_unlocked_r+0x2f8>)
 8006ccc:	aa07      	add	r2, sp, #28
 8006cce:	f000 fbc5 	bl	800745c <siscanf>
 8006cd2:	213c      	movs	r1, #60	; 0x3c
 8006cd4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8006cd8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8006cdc:	3728      	adds	r7, #40	; 0x28
 8006cde:	fb01 2203 	mla	r2, r1, r3, r2
 8006ce2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8006ce6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8006cea:	fb01 2303 	mla	r3, r1, r3, r2
 8006cee:	f847 3c10 	str.w	r3, [r7, #-16]
 8006cf2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006cf4:	4444      	add	r4, r8
 8006cf6:	f1b9 0f00 	cmp.w	r9, #0
 8006cfa:	d021      	beq.n	8006d40 <_tzset_unlocked_r+0x270>
 8006cfc:	6868      	ldr	r0, [r5, #4]
 8006cfe:	f7ff fe2d 	bl	800695c <__tzcalc_limits>
 8006d02:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8006d04:	4b28      	ldr	r3, [pc, #160]	; (8006da8 <_tzset_unlocked_r+0x2d8>)
 8006d06:	601a      	str	r2, [r3, #0]
 8006d08:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8006d0a:	1a9b      	subs	r3, r3, r2
 8006d0c:	bf18      	it	ne
 8006d0e:	2301      	movne	r3, #1
 8006d10:	4a27      	ldr	r2, [pc, #156]	; (8006db0 <_tzset_unlocked_r+0x2e0>)
 8006d12:	6013      	str	r3, [r2, #0]
 8006d14:	e6f6      	b.n	8006b04 <_tzset_unlocked_r+0x34>
 8006d16:	2b2b      	cmp	r3, #43	; 0x2b
 8006d18:	f04f 0701 	mov.w	r7, #1
 8006d1c:	bf08      	it	eq
 8006d1e:	3401      	addeq	r4, #1
 8006d20:	e770      	b.n	8006c04 <_tzset_unlocked_r+0x134>
 8006d22:	213c      	movs	r1, #60	; 0x3c
 8006d24:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8006d28:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8006d2c:	fb01 2203 	mla	r2, r1, r3, r2
 8006d30:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8006d34:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8006d38:	fb01 2303 	mla	r3, r1, r3, r2
 8006d3c:	435f      	muls	r7, r3
 8006d3e:	e778      	b.n	8006c32 <_tzset_unlocked_r+0x162>
 8006d40:	f04f 0901 	mov.w	r9, #1
 8006d44:	e77b      	b.n	8006c3e <_tzset_unlocked_r+0x16e>
 8006d46:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8006d4a:	bf0a      	itet	eq
 8006d4c:	4643      	moveq	r3, r8
 8006d4e:	2344      	movne	r3, #68	; 0x44
 8006d50:	3401      	addeq	r4, #1
 8006d52:	220a      	movs	r2, #10
 8006d54:	4620      	mov	r0, r4
 8006d56:	a90b      	add	r1, sp, #44	; 0x2c
 8006d58:	9305      	str	r3, [sp, #20]
 8006d5a:	f7ff fddb 	bl	8006914 <strtoul>
 8006d5e:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8006d62:	9b05      	ldr	r3, [sp, #20]
 8006d64:	45a0      	cmp	r8, r4
 8006d66:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8006d6a:	d114      	bne.n	8006d96 <_tzset_unlocked_r+0x2c6>
 8006d6c:	234d      	movs	r3, #77	; 0x4d
 8006d6e:	f1b9 0f00 	cmp.w	r9, #0
 8006d72:	d107      	bne.n	8006d84 <_tzset_unlocked_r+0x2b4>
 8006d74:	2103      	movs	r1, #3
 8006d76:	722b      	strb	r3, [r5, #8]
 8006d78:	2302      	movs	r3, #2
 8006d7a:	f8c5 9014 	str.w	r9, [r5, #20]
 8006d7e:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8006d82:	e78f      	b.n	8006ca4 <_tzset_unlocked_r+0x1d4>
 8006d84:	220b      	movs	r2, #11
 8006d86:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8006d90:	2300      	movs	r3, #0
 8006d92:	63eb      	str	r3, [r5, #60]	; 0x3c
 8006d94:	e786      	b.n	8006ca4 <_tzset_unlocked_r+0x1d4>
 8006d96:	b280      	uxth	r0, r0
 8006d98:	723b      	strb	r3, [r7, #8]
 8006d9a:	6178      	str	r0, [r7, #20]
 8006d9c:	e782      	b.n	8006ca4 <_tzset_unlocked_r+0x1d4>
 8006d9e:	bf00      	nop
 8006da0:	08008748 	.word	0x08008748
 8006da4:	200002dc 	.word	0x200002dc
 8006da8:	200002e4 	.word	0x200002e4
 8006dac:	0800874b 	.word	0x0800874b
 8006db0:	200002e0 	.word	0x200002e0
 8006db4:	200000a4 	.word	0x200000a4
 8006db8:	200002cf 	.word	0x200002cf
 8006dbc:	0800874f 	.word	0x0800874f
 8006dc0:	08008772 	.word	0x08008772
 8006dc4:	0800875e 	.word	0x0800875e
 8006dc8:	08008771 	.word	0x08008771
 8006dcc:	200002c4 	.word	0x200002c4

08006dd0 <__swbuf_r>:
 8006dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dd2:	460e      	mov	r6, r1
 8006dd4:	4614      	mov	r4, r2
 8006dd6:	4605      	mov	r5, r0
 8006dd8:	b118      	cbz	r0, 8006de2 <__swbuf_r+0x12>
 8006dda:	6983      	ldr	r3, [r0, #24]
 8006ddc:	b90b      	cbnz	r3, 8006de2 <__swbuf_r+0x12>
 8006dde:	f7fe f9ab 	bl	8005138 <__sinit>
 8006de2:	4b21      	ldr	r3, [pc, #132]	; (8006e68 <__swbuf_r+0x98>)
 8006de4:	429c      	cmp	r4, r3
 8006de6:	d12b      	bne.n	8006e40 <__swbuf_r+0x70>
 8006de8:	686c      	ldr	r4, [r5, #4]
 8006dea:	69a3      	ldr	r3, [r4, #24]
 8006dec:	60a3      	str	r3, [r4, #8]
 8006dee:	89a3      	ldrh	r3, [r4, #12]
 8006df0:	071a      	lsls	r2, r3, #28
 8006df2:	d52f      	bpl.n	8006e54 <__swbuf_r+0x84>
 8006df4:	6923      	ldr	r3, [r4, #16]
 8006df6:	b36b      	cbz	r3, 8006e54 <__swbuf_r+0x84>
 8006df8:	6923      	ldr	r3, [r4, #16]
 8006dfa:	6820      	ldr	r0, [r4, #0]
 8006dfc:	b2f6      	uxtb	r6, r6
 8006dfe:	1ac0      	subs	r0, r0, r3
 8006e00:	6963      	ldr	r3, [r4, #20]
 8006e02:	4637      	mov	r7, r6
 8006e04:	4283      	cmp	r3, r0
 8006e06:	dc04      	bgt.n	8006e12 <__swbuf_r+0x42>
 8006e08:	4621      	mov	r1, r4
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	f7fe f8ee 	bl	8004fec <_fflush_r>
 8006e10:	bb30      	cbnz	r0, 8006e60 <__swbuf_r+0x90>
 8006e12:	68a3      	ldr	r3, [r4, #8]
 8006e14:	3001      	adds	r0, #1
 8006e16:	3b01      	subs	r3, #1
 8006e18:	60a3      	str	r3, [r4, #8]
 8006e1a:	6823      	ldr	r3, [r4, #0]
 8006e1c:	1c5a      	adds	r2, r3, #1
 8006e1e:	6022      	str	r2, [r4, #0]
 8006e20:	701e      	strb	r6, [r3, #0]
 8006e22:	6963      	ldr	r3, [r4, #20]
 8006e24:	4283      	cmp	r3, r0
 8006e26:	d004      	beq.n	8006e32 <__swbuf_r+0x62>
 8006e28:	89a3      	ldrh	r3, [r4, #12]
 8006e2a:	07db      	lsls	r3, r3, #31
 8006e2c:	d506      	bpl.n	8006e3c <__swbuf_r+0x6c>
 8006e2e:	2e0a      	cmp	r6, #10
 8006e30:	d104      	bne.n	8006e3c <__swbuf_r+0x6c>
 8006e32:	4621      	mov	r1, r4
 8006e34:	4628      	mov	r0, r5
 8006e36:	f7fe f8d9 	bl	8004fec <_fflush_r>
 8006e3a:	b988      	cbnz	r0, 8006e60 <__swbuf_r+0x90>
 8006e3c:	4638      	mov	r0, r7
 8006e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e40:	4b0a      	ldr	r3, [pc, #40]	; (8006e6c <__swbuf_r+0x9c>)
 8006e42:	429c      	cmp	r4, r3
 8006e44:	d101      	bne.n	8006e4a <__swbuf_r+0x7a>
 8006e46:	68ac      	ldr	r4, [r5, #8]
 8006e48:	e7cf      	b.n	8006dea <__swbuf_r+0x1a>
 8006e4a:	4b09      	ldr	r3, [pc, #36]	; (8006e70 <__swbuf_r+0xa0>)
 8006e4c:	429c      	cmp	r4, r3
 8006e4e:	bf08      	it	eq
 8006e50:	68ec      	ldreq	r4, [r5, #12]
 8006e52:	e7ca      	b.n	8006dea <__swbuf_r+0x1a>
 8006e54:	4621      	mov	r1, r4
 8006e56:	4628      	mov	r0, r5
 8006e58:	f000 f81e 	bl	8006e98 <__swsetup_r>
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	d0cb      	beq.n	8006df8 <__swbuf_r+0x28>
 8006e60:	f04f 37ff 	mov.w	r7, #4294967295
 8006e64:	e7ea      	b.n	8006e3c <__swbuf_r+0x6c>
 8006e66:	bf00      	nop
 8006e68:	08008378 	.word	0x08008378
 8006e6c:	08008398 	.word	0x08008398
 8006e70:	08008358 	.word	0x08008358

08006e74 <_write_r>:
 8006e74:	b538      	push	{r3, r4, r5, lr}
 8006e76:	4604      	mov	r4, r0
 8006e78:	4608      	mov	r0, r1
 8006e7a:	4611      	mov	r1, r2
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	4d05      	ldr	r5, [pc, #20]	; (8006e94 <_write_r+0x20>)
 8006e80:	602a      	str	r2, [r5, #0]
 8006e82:	461a      	mov	r2, r3
 8006e84:	f7fa f92a 	bl	80010dc <_write>
 8006e88:	1c43      	adds	r3, r0, #1
 8006e8a:	d102      	bne.n	8006e92 <_write_r+0x1e>
 8006e8c:	682b      	ldr	r3, [r5, #0]
 8006e8e:	b103      	cbz	r3, 8006e92 <_write_r+0x1e>
 8006e90:	6023      	str	r3, [r4, #0]
 8006e92:	bd38      	pop	{r3, r4, r5, pc}
 8006e94:	200006f0 	.word	0x200006f0

08006e98 <__swsetup_r>:
 8006e98:	4b32      	ldr	r3, [pc, #200]	; (8006f64 <__swsetup_r+0xcc>)
 8006e9a:	b570      	push	{r4, r5, r6, lr}
 8006e9c:	681d      	ldr	r5, [r3, #0]
 8006e9e:	4606      	mov	r6, r0
 8006ea0:	460c      	mov	r4, r1
 8006ea2:	b125      	cbz	r5, 8006eae <__swsetup_r+0x16>
 8006ea4:	69ab      	ldr	r3, [r5, #24]
 8006ea6:	b913      	cbnz	r3, 8006eae <__swsetup_r+0x16>
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	f7fe f945 	bl	8005138 <__sinit>
 8006eae:	4b2e      	ldr	r3, [pc, #184]	; (8006f68 <__swsetup_r+0xd0>)
 8006eb0:	429c      	cmp	r4, r3
 8006eb2:	d10f      	bne.n	8006ed4 <__swsetup_r+0x3c>
 8006eb4:	686c      	ldr	r4, [r5, #4]
 8006eb6:	89a3      	ldrh	r3, [r4, #12]
 8006eb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ebc:	0719      	lsls	r1, r3, #28
 8006ebe:	d42c      	bmi.n	8006f1a <__swsetup_r+0x82>
 8006ec0:	06dd      	lsls	r5, r3, #27
 8006ec2:	d411      	bmi.n	8006ee8 <__swsetup_r+0x50>
 8006ec4:	2309      	movs	r3, #9
 8006ec6:	6033      	str	r3, [r6, #0]
 8006ec8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed0:	81a3      	strh	r3, [r4, #12]
 8006ed2:	e03e      	b.n	8006f52 <__swsetup_r+0xba>
 8006ed4:	4b25      	ldr	r3, [pc, #148]	; (8006f6c <__swsetup_r+0xd4>)
 8006ed6:	429c      	cmp	r4, r3
 8006ed8:	d101      	bne.n	8006ede <__swsetup_r+0x46>
 8006eda:	68ac      	ldr	r4, [r5, #8]
 8006edc:	e7eb      	b.n	8006eb6 <__swsetup_r+0x1e>
 8006ede:	4b24      	ldr	r3, [pc, #144]	; (8006f70 <__swsetup_r+0xd8>)
 8006ee0:	429c      	cmp	r4, r3
 8006ee2:	bf08      	it	eq
 8006ee4:	68ec      	ldreq	r4, [r5, #12]
 8006ee6:	e7e6      	b.n	8006eb6 <__swsetup_r+0x1e>
 8006ee8:	0758      	lsls	r0, r3, #29
 8006eea:	d512      	bpl.n	8006f12 <__swsetup_r+0x7a>
 8006eec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006eee:	b141      	cbz	r1, 8006f02 <__swsetup_r+0x6a>
 8006ef0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ef4:	4299      	cmp	r1, r3
 8006ef6:	d002      	beq.n	8006efe <__swsetup_r+0x66>
 8006ef8:	4630      	mov	r0, r6
 8006efa:	f7fe fb23 	bl	8005544 <_free_r>
 8006efe:	2300      	movs	r3, #0
 8006f00:	6363      	str	r3, [r4, #52]	; 0x34
 8006f02:	89a3      	ldrh	r3, [r4, #12]
 8006f04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f08:	81a3      	strh	r3, [r4, #12]
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	6063      	str	r3, [r4, #4]
 8006f0e:	6923      	ldr	r3, [r4, #16]
 8006f10:	6023      	str	r3, [r4, #0]
 8006f12:	89a3      	ldrh	r3, [r4, #12]
 8006f14:	f043 0308 	orr.w	r3, r3, #8
 8006f18:	81a3      	strh	r3, [r4, #12]
 8006f1a:	6923      	ldr	r3, [r4, #16]
 8006f1c:	b94b      	cbnz	r3, 8006f32 <__swsetup_r+0x9a>
 8006f1e:	89a3      	ldrh	r3, [r4, #12]
 8006f20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f28:	d003      	beq.n	8006f32 <__swsetup_r+0x9a>
 8006f2a:	4621      	mov	r1, r4
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	f000 f995 	bl	800725c <__smakebuf_r>
 8006f32:	89a0      	ldrh	r0, [r4, #12]
 8006f34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f38:	f010 0301 	ands.w	r3, r0, #1
 8006f3c:	d00a      	beq.n	8006f54 <__swsetup_r+0xbc>
 8006f3e:	2300      	movs	r3, #0
 8006f40:	60a3      	str	r3, [r4, #8]
 8006f42:	6963      	ldr	r3, [r4, #20]
 8006f44:	425b      	negs	r3, r3
 8006f46:	61a3      	str	r3, [r4, #24]
 8006f48:	6923      	ldr	r3, [r4, #16]
 8006f4a:	b943      	cbnz	r3, 8006f5e <__swsetup_r+0xc6>
 8006f4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f50:	d1ba      	bne.n	8006ec8 <__swsetup_r+0x30>
 8006f52:	bd70      	pop	{r4, r5, r6, pc}
 8006f54:	0781      	lsls	r1, r0, #30
 8006f56:	bf58      	it	pl
 8006f58:	6963      	ldrpl	r3, [r4, #20]
 8006f5a:	60a3      	str	r3, [r4, #8]
 8006f5c:	e7f4      	b.n	8006f48 <__swsetup_r+0xb0>
 8006f5e:	2000      	movs	r0, #0
 8006f60:	e7f7      	b.n	8006f52 <__swsetup_r+0xba>
 8006f62:	bf00      	nop
 8006f64:	20000040 	.word	0x20000040
 8006f68:	08008378 	.word	0x08008378
 8006f6c:	08008398 	.word	0x08008398
 8006f70:	08008358 	.word	0x08008358

08006f74 <abs>:
 8006f74:	2800      	cmp	r0, #0
 8006f76:	bfb8      	it	lt
 8006f78:	4240      	neglt	r0, r0
 8006f7a:	4770      	bx	lr

08006f7c <__assert_func>:
 8006f7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f7e:	4614      	mov	r4, r2
 8006f80:	461a      	mov	r2, r3
 8006f82:	4b09      	ldr	r3, [pc, #36]	; (8006fa8 <__assert_func+0x2c>)
 8006f84:	4605      	mov	r5, r0
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68d8      	ldr	r0, [r3, #12]
 8006f8a:	b14c      	cbz	r4, 8006fa0 <__assert_func+0x24>
 8006f8c:	4b07      	ldr	r3, [pc, #28]	; (8006fac <__assert_func+0x30>)
 8006f8e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f92:	9100      	str	r1, [sp, #0]
 8006f94:	462b      	mov	r3, r5
 8006f96:	4906      	ldr	r1, [pc, #24]	; (8006fb0 <__assert_func+0x34>)
 8006f98:	f7fe f94c 	bl	8005234 <fiprintf>
 8006f9c:	f000 faaf 	bl	80074fe <abort>
 8006fa0:	4b04      	ldr	r3, [pc, #16]	; (8006fb4 <__assert_func+0x38>)
 8006fa2:	461c      	mov	r4, r3
 8006fa4:	e7f3      	b.n	8006f8e <__assert_func+0x12>
 8006fa6:	bf00      	nop
 8006fa8:	20000040 	.word	0x20000040
 8006fac:	08008784 	.word	0x08008784
 8006fb0:	08008791 	.word	0x08008791
 8006fb4:	080087bf 	.word	0x080087bf

08006fb8 <_close_r>:
 8006fb8:	b538      	push	{r3, r4, r5, lr}
 8006fba:	2300      	movs	r3, #0
 8006fbc:	4d05      	ldr	r5, [pc, #20]	; (8006fd4 <_close_r+0x1c>)
 8006fbe:	4604      	mov	r4, r0
 8006fc0:	4608      	mov	r0, r1
 8006fc2:	602b      	str	r3, [r5, #0]
 8006fc4:	f7fa f8a6 	bl	8001114 <_close>
 8006fc8:	1c43      	adds	r3, r0, #1
 8006fca:	d102      	bne.n	8006fd2 <_close_r+0x1a>
 8006fcc:	682b      	ldr	r3, [r5, #0]
 8006fce:	b103      	cbz	r3, 8006fd2 <_close_r+0x1a>
 8006fd0:	6023      	str	r3, [r4, #0]
 8006fd2:	bd38      	pop	{r3, r4, r5, pc}
 8006fd4:	200006f0 	.word	0x200006f0

08006fd8 <_findenv_r>:
 8006fd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fdc:	4607      	mov	r7, r0
 8006fde:	4689      	mov	r9, r1
 8006fe0:	4616      	mov	r6, r2
 8006fe2:	f000 fa93 	bl	800750c <__env_lock>
 8006fe6:	4b18      	ldr	r3, [pc, #96]	; (8007048 <_findenv_r+0x70>)
 8006fe8:	681c      	ldr	r4, [r3, #0]
 8006fea:	469a      	mov	sl, r3
 8006fec:	b134      	cbz	r4, 8006ffc <_findenv_r+0x24>
 8006fee:	464b      	mov	r3, r9
 8006ff0:	4698      	mov	r8, r3
 8006ff2:	f813 1b01 	ldrb.w	r1, [r3], #1
 8006ff6:	b139      	cbz	r1, 8007008 <_findenv_r+0x30>
 8006ff8:	293d      	cmp	r1, #61	; 0x3d
 8006ffa:	d1f9      	bne.n	8006ff0 <_findenv_r+0x18>
 8006ffc:	4638      	mov	r0, r7
 8006ffe:	f000 fa8b 	bl	8007518 <__env_unlock>
 8007002:	2000      	movs	r0, #0
 8007004:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007008:	eba8 0809 	sub.w	r8, r8, r9
 800700c:	46a3      	mov	fp, r4
 800700e:	f854 0b04 	ldr.w	r0, [r4], #4
 8007012:	2800      	cmp	r0, #0
 8007014:	d0f2      	beq.n	8006ffc <_findenv_r+0x24>
 8007016:	4642      	mov	r2, r8
 8007018:	4649      	mov	r1, r9
 800701a:	f000 fa51 	bl	80074c0 <strncmp>
 800701e:	2800      	cmp	r0, #0
 8007020:	d1f4      	bne.n	800700c <_findenv_r+0x34>
 8007022:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007026:	eb03 0508 	add.w	r5, r3, r8
 800702a:	f813 3008 	ldrb.w	r3, [r3, r8]
 800702e:	2b3d      	cmp	r3, #61	; 0x3d
 8007030:	d1ec      	bne.n	800700c <_findenv_r+0x34>
 8007032:	f8da 3000 	ldr.w	r3, [sl]
 8007036:	4638      	mov	r0, r7
 8007038:	ebab 0303 	sub.w	r3, fp, r3
 800703c:	109b      	asrs	r3, r3, #2
 800703e:	6033      	str	r3, [r6, #0]
 8007040:	f000 fa6a 	bl	8007518 <__env_unlock>
 8007044:	1c68      	adds	r0, r5, #1
 8007046:	e7dd      	b.n	8007004 <_findenv_r+0x2c>
 8007048:	20000000 	.word	0x20000000

0800704c <_getenv_r>:
 800704c:	b507      	push	{r0, r1, r2, lr}
 800704e:	aa01      	add	r2, sp, #4
 8007050:	f7ff ffc2 	bl	8006fd8 <_findenv_r>
 8007054:	b003      	add	sp, #12
 8007056:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800705c <_gettimeofday_r>:
 800705c:	b538      	push	{r3, r4, r5, lr}
 800705e:	2300      	movs	r3, #0
 8007060:	4d06      	ldr	r5, [pc, #24]	; (800707c <_gettimeofday_r+0x20>)
 8007062:	4604      	mov	r4, r0
 8007064:	4608      	mov	r0, r1
 8007066:	4611      	mov	r1, r2
 8007068:	602b      	str	r3, [r5, #0]
 800706a:	f001 f83d 	bl	80080e8 <_gettimeofday>
 800706e:	1c43      	adds	r3, r0, #1
 8007070:	d102      	bne.n	8007078 <_gettimeofday_r+0x1c>
 8007072:	682b      	ldr	r3, [r5, #0]
 8007074:	b103      	cbz	r3, 8007078 <_gettimeofday_r+0x1c>
 8007076:	6023      	str	r3, [r4, #0]
 8007078:	bd38      	pop	{r3, r4, r5, pc}
 800707a:	bf00      	nop
 800707c:	200006f0 	.word	0x200006f0

08007080 <__gettzinfo>:
 8007080:	4800      	ldr	r0, [pc, #0]	; (8007084 <__gettzinfo+0x4>)
 8007082:	4770      	bx	lr
 8007084:	200000b0 	.word	0x200000b0

08007088 <gmtime_r>:
 8007088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800708c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8007090:	460c      	mov	r4, r1
 8007092:	2300      	movs	r3, #0
 8007094:	4630      	mov	r0, r6
 8007096:	4639      	mov	r1, r7
 8007098:	4a4f      	ldr	r2, [pc, #316]	; (80071d8 <gmtime_r+0x150>)
 800709a:	f7f9 f8d5 	bl	8000248 <__aeabi_ldivmod>
 800709e:	4639      	mov	r1, r7
 80070a0:	4605      	mov	r5, r0
 80070a2:	2300      	movs	r3, #0
 80070a4:	4630      	mov	r0, r6
 80070a6:	4a4c      	ldr	r2, [pc, #304]	; (80071d8 <gmtime_r+0x150>)
 80070a8:	f7f9 f8ce 	bl	8000248 <__aeabi_ldivmod>
 80070ac:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80070b0:	2a00      	cmp	r2, #0
 80070b2:	bfbc      	itt	lt
 80070b4:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80070b8:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80070bc:	fbb2 f3f1 	udiv	r3, r2, r1
 80070c0:	fb01 2213 	mls	r2, r1, r3, r2
 80070c4:	f04f 013c 	mov.w	r1, #60	; 0x3c
 80070c8:	60a3      	str	r3, [r4, #8]
 80070ca:	fbb2 f3f1 	udiv	r3, r2, r1
 80070ce:	fb01 2213 	mls	r2, r1, r3, r2
 80070d2:	6022      	str	r2, [r4, #0]
 80070d4:	f04f 0207 	mov.w	r2, #7
 80070d8:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 80070dc:	bfac      	ite	ge
 80070de:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 80070e2:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 80070e6:	6063      	str	r3, [r4, #4]
 80070e8:	1cc3      	adds	r3, r0, #3
 80070ea:	fb93 f2f2 	sdiv	r2, r3, r2
 80070ee:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 80070f2:	1a9b      	subs	r3, r3, r2
 80070f4:	bf48      	it	mi
 80070f6:	3307      	addmi	r3, #7
 80070f8:	2800      	cmp	r0, #0
 80070fa:	4938      	ldr	r1, [pc, #224]	; (80071dc <gmtime_r+0x154>)
 80070fc:	61a3      	str	r3, [r4, #24]
 80070fe:	bfbd      	ittte	lt
 8007100:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8007104:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8007108:	fb93 f1f1 	sdivlt	r1, r3, r1
 800710c:	fb90 f1f1 	sdivge	r1, r0, r1
 8007110:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8007114:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 8007118:	4b31      	ldr	r3, [pc, #196]	; (80071e0 <gmtime_r+0x158>)
 800711a:	f240 176d 	movw	r7, #365	; 0x16d
 800711e:	fb03 0001 	mla	r0, r3, r1, r0
 8007122:	fbb0 f2f2 	udiv	r2, r0, r2
 8007126:	fbb0 f3fc 	udiv	r3, r0, ip
 800712a:	4402      	add	r2, r0
 800712c:	1ad2      	subs	r2, r2, r3
 800712e:	4b2d      	ldr	r3, [pc, #180]	; (80071e4 <gmtime_r+0x15c>)
 8007130:	2664      	movs	r6, #100	; 0x64
 8007132:	fbb0 f3f3 	udiv	r3, r0, r3
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	fbb3 f5f7 	udiv	r5, r3, r7
 800713c:	fbb3 f3fc 	udiv	r3, r3, ip
 8007140:	fbb5 f2f6 	udiv	r2, r5, r6
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	4403      	add	r3, r0
 8007148:	2099      	movs	r0, #153	; 0x99
 800714a:	fb07 3315 	mls	r3, r7, r5, r3
 800714e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8007152:	f10c 0c02 	add.w	ip, ip, #2
 8007156:	fbbc f7f0 	udiv	r7, ip, r0
 800715a:	f04f 0805 	mov.w	r8, #5
 800715e:	4378      	muls	r0, r7
 8007160:	3002      	adds	r0, #2
 8007162:	fbb0 f0f8 	udiv	r0, r0, r8
 8007166:	f103 0e01 	add.w	lr, r3, #1
 800716a:	ebae 0000 	sub.w	r0, lr, r0
 800716e:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 8007172:	45f4      	cmp	ip, lr
 8007174:	bf94      	ite	ls
 8007176:	f04f 0c02 	movls.w	ip, #2
 800717a:	f06f 0c09 	mvnhi.w	ip, #9
 800717e:	4467      	add	r7, ip
 8007180:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8007184:	fb0c 5101 	mla	r1, ip, r1, r5
 8007188:	2f01      	cmp	r7, #1
 800718a:	bf98      	it	ls
 800718c:	3101      	addls	r1, #1
 800718e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8007192:	d30c      	bcc.n	80071ae <gmtime_r+0x126>
 8007194:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8007198:	61e3      	str	r3, [r4, #28]
 800719a:	2300      	movs	r3, #0
 800719c:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 80071a0:	60e0      	str	r0, [r4, #12]
 80071a2:	e9c4 7104 	strd	r7, r1, [r4, #16]
 80071a6:	4620      	mov	r0, r4
 80071a8:	6223      	str	r3, [r4, #32]
 80071aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071ae:	f015 0f03 	tst.w	r5, #3
 80071b2:	d102      	bne.n	80071ba <gmtime_r+0x132>
 80071b4:	fb06 5212 	mls	r2, r6, r2, r5
 80071b8:	b95a      	cbnz	r2, 80071d2 <gmtime_r+0x14a>
 80071ba:	f44f 76c8 	mov.w	r6, #400	; 0x190
 80071be:	fbb5 f2f6 	udiv	r2, r5, r6
 80071c2:	fb06 5212 	mls	r2, r6, r2, r5
 80071c6:	fab2 f282 	clz	r2, r2
 80071ca:	0952      	lsrs	r2, r2, #5
 80071cc:	333b      	adds	r3, #59	; 0x3b
 80071ce:	4413      	add	r3, r2
 80071d0:	e7e2      	b.n	8007198 <gmtime_r+0x110>
 80071d2:	2201      	movs	r2, #1
 80071d4:	e7fa      	b.n	80071cc <gmtime_r+0x144>
 80071d6:	bf00      	nop
 80071d8:	00015180 	.word	0x00015180
 80071dc:	00023ab1 	.word	0x00023ab1
 80071e0:	fffdc54f 	.word	0xfffdc54f
 80071e4:	00023ab0 	.word	0x00023ab0

080071e8 <labs>:
 80071e8:	2800      	cmp	r0, #0
 80071ea:	bfb8      	it	lt
 80071ec:	4240      	neglt	r0, r0
 80071ee:	4770      	bx	lr

080071f0 <_lseek_r>:
 80071f0:	b538      	push	{r3, r4, r5, lr}
 80071f2:	4604      	mov	r4, r0
 80071f4:	4608      	mov	r0, r1
 80071f6:	4611      	mov	r1, r2
 80071f8:	2200      	movs	r2, #0
 80071fa:	4d05      	ldr	r5, [pc, #20]	; (8007210 <_lseek_r+0x20>)
 80071fc:	602a      	str	r2, [r5, #0]
 80071fe:	461a      	mov	r2, r3
 8007200:	f7f9 ffac 	bl	800115c <_lseek>
 8007204:	1c43      	adds	r3, r0, #1
 8007206:	d102      	bne.n	800720e <_lseek_r+0x1e>
 8007208:	682b      	ldr	r3, [r5, #0]
 800720a:	b103      	cbz	r3, 800720e <_lseek_r+0x1e>
 800720c:	6023      	str	r3, [r4, #0]
 800720e:	bd38      	pop	{r3, r4, r5, pc}
 8007210:	200006f0 	.word	0x200006f0

08007214 <__swhatbuf_r>:
 8007214:	b570      	push	{r4, r5, r6, lr}
 8007216:	460e      	mov	r6, r1
 8007218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800721c:	4614      	mov	r4, r2
 800721e:	2900      	cmp	r1, #0
 8007220:	461d      	mov	r5, r3
 8007222:	b096      	sub	sp, #88	; 0x58
 8007224:	da07      	bge.n	8007236 <__swhatbuf_r+0x22>
 8007226:	2300      	movs	r3, #0
 8007228:	602b      	str	r3, [r5, #0]
 800722a:	89b3      	ldrh	r3, [r6, #12]
 800722c:	061a      	lsls	r2, r3, #24
 800722e:	d410      	bmi.n	8007252 <__swhatbuf_r+0x3e>
 8007230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007234:	e00e      	b.n	8007254 <__swhatbuf_r+0x40>
 8007236:	466a      	mov	r2, sp
 8007238:	f000 f974 	bl	8007524 <_fstat_r>
 800723c:	2800      	cmp	r0, #0
 800723e:	dbf2      	blt.n	8007226 <__swhatbuf_r+0x12>
 8007240:	9a01      	ldr	r2, [sp, #4]
 8007242:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007246:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800724a:	425a      	negs	r2, r3
 800724c:	415a      	adcs	r2, r3
 800724e:	602a      	str	r2, [r5, #0]
 8007250:	e7ee      	b.n	8007230 <__swhatbuf_r+0x1c>
 8007252:	2340      	movs	r3, #64	; 0x40
 8007254:	2000      	movs	r0, #0
 8007256:	6023      	str	r3, [r4, #0]
 8007258:	b016      	add	sp, #88	; 0x58
 800725a:	bd70      	pop	{r4, r5, r6, pc}

0800725c <__smakebuf_r>:
 800725c:	898b      	ldrh	r3, [r1, #12]
 800725e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007260:	079d      	lsls	r5, r3, #30
 8007262:	4606      	mov	r6, r0
 8007264:	460c      	mov	r4, r1
 8007266:	d507      	bpl.n	8007278 <__smakebuf_r+0x1c>
 8007268:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800726c:	6023      	str	r3, [r4, #0]
 800726e:	6123      	str	r3, [r4, #16]
 8007270:	2301      	movs	r3, #1
 8007272:	6163      	str	r3, [r4, #20]
 8007274:	b002      	add	sp, #8
 8007276:	bd70      	pop	{r4, r5, r6, pc}
 8007278:	466a      	mov	r2, sp
 800727a:	ab01      	add	r3, sp, #4
 800727c:	f7ff ffca 	bl	8007214 <__swhatbuf_r>
 8007280:	9900      	ldr	r1, [sp, #0]
 8007282:	4605      	mov	r5, r0
 8007284:	4630      	mov	r0, r6
 8007286:	f7fe f9a9 	bl	80055dc <_malloc_r>
 800728a:	b948      	cbnz	r0, 80072a0 <__smakebuf_r+0x44>
 800728c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007290:	059a      	lsls	r2, r3, #22
 8007292:	d4ef      	bmi.n	8007274 <__smakebuf_r+0x18>
 8007294:	f023 0303 	bic.w	r3, r3, #3
 8007298:	f043 0302 	orr.w	r3, r3, #2
 800729c:	81a3      	strh	r3, [r4, #12]
 800729e:	e7e3      	b.n	8007268 <__smakebuf_r+0xc>
 80072a0:	4b0d      	ldr	r3, [pc, #52]	; (80072d8 <__smakebuf_r+0x7c>)
 80072a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80072a4:	89a3      	ldrh	r3, [r4, #12]
 80072a6:	6020      	str	r0, [r4, #0]
 80072a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ac:	81a3      	strh	r3, [r4, #12]
 80072ae:	9b00      	ldr	r3, [sp, #0]
 80072b0:	6120      	str	r0, [r4, #16]
 80072b2:	6163      	str	r3, [r4, #20]
 80072b4:	9b01      	ldr	r3, [sp, #4]
 80072b6:	b15b      	cbz	r3, 80072d0 <__smakebuf_r+0x74>
 80072b8:	4630      	mov	r0, r6
 80072ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072be:	f000 f943 	bl	8007548 <_isatty_r>
 80072c2:	b128      	cbz	r0, 80072d0 <__smakebuf_r+0x74>
 80072c4:	89a3      	ldrh	r3, [r4, #12]
 80072c6:	f023 0303 	bic.w	r3, r3, #3
 80072ca:	f043 0301 	orr.w	r3, r3, #1
 80072ce:	81a3      	strh	r3, [r4, #12]
 80072d0:	89a0      	ldrh	r0, [r4, #12]
 80072d2:	4305      	orrs	r5, r0
 80072d4:	81a5      	strh	r5, [r4, #12]
 80072d6:	e7cd      	b.n	8007274 <__smakebuf_r+0x18>
 80072d8:	080050d1 	.word	0x080050d1

080072dc <__ascii_mbtowc>:
 80072dc:	b082      	sub	sp, #8
 80072de:	b901      	cbnz	r1, 80072e2 <__ascii_mbtowc+0x6>
 80072e0:	a901      	add	r1, sp, #4
 80072e2:	b142      	cbz	r2, 80072f6 <__ascii_mbtowc+0x1a>
 80072e4:	b14b      	cbz	r3, 80072fa <__ascii_mbtowc+0x1e>
 80072e6:	7813      	ldrb	r3, [r2, #0]
 80072e8:	600b      	str	r3, [r1, #0]
 80072ea:	7812      	ldrb	r2, [r2, #0]
 80072ec:	1e10      	subs	r0, r2, #0
 80072ee:	bf18      	it	ne
 80072f0:	2001      	movne	r0, #1
 80072f2:	b002      	add	sp, #8
 80072f4:	4770      	bx	lr
 80072f6:	4610      	mov	r0, r2
 80072f8:	e7fb      	b.n	80072f2 <__ascii_mbtowc+0x16>
 80072fa:	f06f 0001 	mvn.w	r0, #1
 80072fe:	e7f8      	b.n	80072f2 <__ascii_mbtowc+0x16>

08007300 <memchr>:
 8007300:	4603      	mov	r3, r0
 8007302:	b510      	push	{r4, lr}
 8007304:	b2c9      	uxtb	r1, r1
 8007306:	4402      	add	r2, r0
 8007308:	4293      	cmp	r3, r2
 800730a:	4618      	mov	r0, r3
 800730c:	d101      	bne.n	8007312 <memchr+0x12>
 800730e:	2000      	movs	r0, #0
 8007310:	e003      	b.n	800731a <memchr+0x1a>
 8007312:	7804      	ldrb	r4, [r0, #0]
 8007314:	3301      	adds	r3, #1
 8007316:	428c      	cmp	r4, r1
 8007318:	d1f6      	bne.n	8007308 <memchr+0x8>
 800731a:	bd10      	pop	{r4, pc}

0800731c <memcpy>:
 800731c:	440a      	add	r2, r1
 800731e:	4291      	cmp	r1, r2
 8007320:	f100 33ff 	add.w	r3, r0, #4294967295
 8007324:	d100      	bne.n	8007328 <memcpy+0xc>
 8007326:	4770      	bx	lr
 8007328:	b510      	push	{r4, lr}
 800732a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800732e:	4291      	cmp	r1, r2
 8007330:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007334:	d1f9      	bne.n	800732a <memcpy+0xe>
 8007336:	bd10      	pop	{r4, pc}

08007338 <memmove>:
 8007338:	4288      	cmp	r0, r1
 800733a:	b510      	push	{r4, lr}
 800733c:	eb01 0402 	add.w	r4, r1, r2
 8007340:	d902      	bls.n	8007348 <memmove+0x10>
 8007342:	4284      	cmp	r4, r0
 8007344:	4623      	mov	r3, r4
 8007346:	d807      	bhi.n	8007358 <memmove+0x20>
 8007348:	1e43      	subs	r3, r0, #1
 800734a:	42a1      	cmp	r1, r4
 800734c:	d008      	beq.n	8007360 <memmove+0x28>
 800734e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007352:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007356:	e7f8      	b.n	800734a <memmove+0x12>
 8007358:	4601      	mov	r1, r0
 800735a:	4402      	add	r2, r0
 800735c:	428a      	cmp	r2, r1
 800735e:	d100      	bne.n	8007362 <memmove+0x2a>
 8007360:	bd10      	pop	{r4, pc}
 8007362:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007366:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800736a:	e7f7      	b.n	800735c <memmove+0x24>

0800736c <__malloc_lock>:
 800736c:	4801      	ldr	r0, [pc, #4]	; (8007374 <__malloc_lock+0x8>)
 800736e:	f7fe b8cd 	b.w	800550c <__retarget_lock_acquire_recursive>
 8007372:	bf00      	nop
 8007374:	200006e8 	.word	0x200006e8

08007378 <__malloc_unlock>:
 8007378:	4801      	ldr	r0, [pc, #4]	; (8007380 <__malloc_unlock+0x8>)
 800737a:	f7fe b8c9 	b.w	8005510 <__retarget_lock_release_recursive>
 800737e:	bf00      	nop
 8007380:	200006e8 	.word	0x200006e8

08007384 <_realloc_r>:
 8007384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007386:	4607      	mov	r7, r0
 8007388:	4614      	mov	r4, r2
 800738a:	460e      	mov	r6, r1
 800738c:	b921      	cbnz	r1, 8007398 <_realloc_r+0x14>
 800738e:	4611      	mov	r1, r2
 8007390:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007394:	f7fe b922 	b.w	80055dc <_malloc_r>
 8007398:	b922      	cbnz	r2, 80073a4 <_realloc_r+0x20>
 800739a:	f7fe f8d3 	bl	8005544 <_free_r>
 800739e:	4625      	mov	r5, r4
 80073a0:	4628      	mov	r0, r5
 80073a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073a4:	f000 f8e0 	bl	8007568 <_malloc_usable_size_r>
 80073a8:	42a0      	cmp	r0, r4
 80073aa:	d20f      	bcs.n	80073cc <_realloc_r+0x48>
 80073ac:	4621      	mov	r1, r4
 80073ae:	4638      	mov	r0, r7
 80073b0:	f7fe f914 	bl	80055dc <_malloc_r>
 80073b4:	4605      	mov	r5, r0
 80073b6:	2800      	cmp	r0, #0
 80073b8:	d0f2      	beq.n	80073a0 <_realloc_r+0x1c>
 80073ba:	4631      	mov	r1, r6
 80073bc:	4622      	mov	r2, r4
 80073be:	f7ff ffad 	bl	800731c <memcpy>
 80073c2:	4631      	mov	r1, r6
 80073c4:	4638      	mov	r0, r7
 80073c6:	f7fe f8bd 	bl	8005544 <_free_r>
 80073ca:	e7e9      	b.n	80073a0 <_realloc_r+0x1c>
 80073cc:	4635      	mov	r5, r6
 80073ce:	e7e7      	b.n	80073a0 <_realloc_r+0x1c>

080073d0 <_read_r>:
 80073d0:	b538      	push	{r3, r4, r5, lr}
 80073d2:	4604      	mov	r4, r0
 80073d4:	4608      	mov	r0, r1
 80073d6:	4611      	mov	r1, r2
 80073d8:	2200      	movs	r2, #0
 80073da:	4d05      	ldr	r5, [pc, #20]	; (80073f0 <_read_r+0x20>)
 80073dc:	602a      	str	r2, [r5, #0]
 80073de:	461a      	mov	r2, r3
 80073e0:	f7f9 fe5f 	bl	80010a2 <_read>
 80073e4:	1c43      	adds	r3, r0, #1
 80073e6:	d102      	bne.n	80073ee <_read_r+0x1e>
 80073e8:	682b      	ldr	r3, [r5, #0]
 80073ea:	b103      	cbz	r3, 80073ee <_read_r+0x1e>
 80073ec:	6023      	str	r3, [r4, #0]
 80073ee:	bd38      	pop	{r3, r4, r5, pc}
 80073f0:	200006f0 	.word	0x200006f0

080073f4 <sniprintf>:
 80073f4:	b40c      	push	{r2, r3}
 80073f6:	b530      	push	{r4, r5, lr}
 80073f8:	4b17      	ldr	r3, [pc, #92]	; (8007458 <sniprintf+0x64>)
 80073fa:	1e0c      	subs	r4, r1, #0
 80073fc:	681d      	ldr	r5, [r3, #0]
 80073fe:	b09d      	sub	sp, #116	; 0x74
 8007400:	da08      	bge.n	8007414 <sniprintf+0x20>
 8007402:	238b      	movs	r3, #139	; 0x8b
 8007404:	f04f 30ff 	mov.w	r0, #4294967295
 8007408:	602b      	str	r3, [r5, #0]
 800740a:	b01d      	add	sp, #116	; 0x74
 800740c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007410:	b002      	add	sp, #8
 8007412:	4770      	bx	lr
 8007414:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007418:	f8ad 3014 	strh.w	r3, [sp, #20]
 800741c:	bf0c      	ite	eq
 800741e:	4623      	moveq	r3, r4
 8007420:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007424:	9304      	str	r3, [sp, #16]
 8007426:	9307      	str	r3, [sp, #28]
 8007428:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800742c:	9002      	str	r0, [sp, #8]
 800742e:	9006      	str	r0, [sp, #24]
 8007430:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007434:	4628      	mov	r0, r5
 8007436:	ab21      	add	r3, sp, #132	; 0x84
 8007438:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800743a:	a902      	add	r1, sp, #8
 800743c:	9301      	str	r3, [sp, #4]
 800743e:	f000 f8f7 	bl	8007630 <_svfiprintf_r>
 8007442:	1c43      	adds	r3, r0, #1
 8007444:	bfbc      	itt	lt
 8007446:	238b      	movlt	r3, #139	; 0x8b
 8007448:	602b      	strlt	r3, [r5, #0]
 800744a:	2c00      	cmp	r4, #0
 800744c:	d0dd      	beq.n	800740a <sniprintf+0x16>
 800744e:	2200      	movs	r2, #0
 8007450:	9b02      	ldr	r3, [sp, #8]
 8007452:	701a      	strb	r2, [r3, #0]
 8007454:	e7d9      	b.n	800740a <sniprintf+0x16>
 8007456:	bf00      	nop
 8007458:	20000040 	.word	0x20000040

0800745c <siscanf>:
 800745c:	b40e      	push	{r1, r2, r3}
 800745e:	f44f 7201 	mov.w	r2, #516	; 0x204
 8007462:	b530      	push	{r4, r5, lr}
 8007464:	b09c      	sub	sp, #112	; 0x70
 8007466:	ac1f      	add	r4, sp, #124	; 0x7c
 8007468:	f854 5b04 	ldr.w	r5, [r4], #4
 800746c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007470:	9002      	str	r0, [sp, #8]
 8007472:	9006      	str	r0, [sp, #24]
 8007474:	f7f8 fed6 	bl	8000224 <strlen>
 8007478:	4b0b      	ldr	r3, [pc, #44]	; (80074a8 <siscanf+0x4c>)
 800747a:	9003      	str	r0, [sp, #12]
 800747c:	930b      	str	r3, [sp, #44]	; 0x2c
 800747e:	2300      	movs	r3, #0
 8007480:	930f      	str	r3, [sp, #60]	; 0x3c
 8007482:	9314      	str	r3, [sp, #80]	; 0x50
 8007484:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007488:	9007      	str	r0, [sp, #28]
 800748a:	4808      	ldr	r0, [pc, #32]	; (80074ac <siscanf+0x50>)
 800748c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007490:	462a      	mov	r2, r5
 8007492:	4623      	mov	r3, r4
 8007494:	a902      	add	r1, sp, #8
 8007496:	6800      	ldr	r0, [r0, #0]
 8007498:	9401      	str	r4, [sp, #4]
 800749a:	f000 fa23 	bl	80078e4 <__ssvfiscanf_r>
 800749e:	b01c      	add	sp, #112	; 0x70
 80074a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074a4:	b003      	add	sp, #12
 80074a6:	4770      	bx	lr
 80074a8:	08005cc3 	.word	0x08005cc3
 80074ac:	20000040 	.word	0x20000040

080074b0 <strcpy>:
 80074b0:	4603      	mov	r3, r0
 80074b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80074b6:	f803 2b01 	strb.w	r2, [r3], #1
 80074ba:	2a00      	cmp	r2, #0
 80074bc:	d1f9      	bne.n	80074b2 <strcpy+0x2>
 80074be:	4770      	bx	lr

080074c0 <strncmp>:
 80074c0:	b510      	push	{r4, lr}
 80074c2:	b16a      	cbz	r2, 80074e0 <strncmp+0x20>
 80074c4:	3901      	subs	r1, #1
 80074c6:	1884      	adds	r4, r0, r2
 80074c8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80074cc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d103      	bne.n	80074dc <strncmp+0x1c>
 80074d4:	42a0      	cmp	r0, r4
 80074d6:	d001      	beq.n	80074dc <strncmp+0x1c>
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1f5      	bne.n	80074c8 <strncmp+0x8>
 80074dc:	1a98      	subs	r0, r3, r2
 80074de:	bd10      	pop	{r4, pc}
 80074e0:	4610      	mov	r0, r2
 80074e2:	e7fc      	b.n	80074de <strncmp+0x1e>

080074e4 <__ascii_wctomb>:
 80074e4:	4603      	mov	r3, r0
 80074e6:	4608      	mov	r0, r1
 80074e8:	b141      	cbz	r1, 80074fc <__ascii_wctomb+0x18>
 80074ea:	2aff      	cmp	r2, #255	; 0xff
 80074ec:	d904      	bls.n	80074f8 <__ascii_wctomb+0x14>
 80074ee:	228a      	movs	r2, #138	; 0x8a
 80074f0:	f04f 30ff 	mov.w	r0, #4294967295
 80074f4:	601a      	str	r2, [r3, #0]
 80074f6:	4770      	bx	lr
 80074f8:	2001      	movs	r0, #1
 80074fa:	700a      	strb	r2, [r1, #0]
 80074fc:	4770      	bx	lr

080074fe <abort>:
 80074fe:	2006      	movs	r0, #6
 8007500:	b508      	push	{r3, lr}
 8007502:	f000 fd15 	bl	8007f30 <raise>
 8007506:	2001      	movs	r0, #1
 8007508:	f7f9 fdc1 	bl	800108e <_exit>

0800750c <__env_lock>:
 800750c:	4801      	ldr	r0, [pc, #4]	; (8007514 <__env_lock+0x8>)
 800750e:	f7fd bffd 	b.w	800550c <__retarget_lock_acquire_recursive>
 8007512:	bf00      	nop
 8007514:	200006e6 	.word	0x200006e6

08007518 <__env_unlock>:
 8007518:	4801      	ldr	r0, [pc, #4]	; (8007520 <__env_unlock+0x8>)
 800751a:	f7fd bff9 	b.w	8005510 <__retarget_lock_release_recursive>
 800751e:	bf00      	nop
 8007520:	200006e6 	.word	0x200006e6

08007524 <_fstat_r>:
 8007524:	b538      	push	{r3, r4, r5, lr}
 8007526:	2300      	movs	r3, #0
 8007528:	4d06      	ldr	r5, [pc, #24]	; (8007544 <_fstat_r+0x20>)
 800752a:	4604      	mov	r4, r0
 800752c:	4608      	mov	r0, r1
 800752e:	4611      	mov	r1, r2
 8007530:	602b      	str	r3, [r5, #0]
 8007532:	f7f9 fdfa 	bl	800112a <_fstat>
 8007536:	1c43      	adds	r3, r0, #1
 8007538:	d102      	bne.n	8007540 <_fstat_r+0x1c>
 800753a:	682b      	ldr	r3, [r5, #0]
 800753c:	b103      	cbz	r3, 8007540 <_fstat_r+0x1c>
 800753e:	6023      	str	r3, [r4, #0]
 8007540:	bd38      	pop	{r3, r4, r5, pc}
 8007542:	bf00      	nop
 8007544:	200006f0 	.word	0x200006f0

08007548 <_isatty_r>:
 8007548:	b538      	push	{r3, r4, r5, lr}
 800754a:	2300      	movs	r3, #0
 800754c:	4d05      	ldr	r5, [pc, #20]	; (8007564 <_isatty_r+0x1c>)
 800754e:	4604      	mov	r4, r0
 8007550:	4608      	mov	r0, r1
 8007552:	602b      	str	r3, [r5, #0]
 8007554:	f7f9 fdf8 	bl	8001148 <_isatty>
 8007558:	1c43      	adds	r3, r0, #1
 800755a:	d102      	bne.n	8007562 <_isatty_r+0x1a>
 800755c:	682b      	ldr	r3, [r5, #0]
 800755e:	b103      	cbz	r3, 8007562 <_isatty_r+0x1a>
 8007560:	6023      	str	r3, [r4, #0]
 8007562:	bd38      	pop	{r3, r4, r5, pc}
 8007564:	200006f0 	.word	0x200006f0

08007568 <_malloc_usable_size_r>:
 8007568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800756c:	1f18      	subs	r0, r3, #4
 800756e:	2b00      	cmp	r3, #0
 8007570:	bfbc      	itt	lt
 8007572:	580b      	ldrlt	r3, [r1, r0]
 8007574:	18c0      	addlt	r0, r0, r3
 8007576:	4770      	bx	lr

08007578 <__ssputs_r>:
 8007578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800757c:	688e      	ldr	r6, [r1, #8]
 800757e:	4682      	mov	sl, r0
 8007580:	429e      	cmp	r6, r3
 8007582:	460c      	mov	r4, r1
 8007584:	4690      	mov	r8, r2
 8007586:	461f      	mov	r7, r3
 8007588:	d838      	bhi.n	80075fc <__ssputs_r+0x84>
 800758a:	898a      	ldrh	r2, [r1, #12]
 800758c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007590:	d032      	beq.n	80075f8 <__ssputs_r+0x80>
 8007592:	6825      	ldr	r5, [r4, #0]
 8007594:	6909      	ldr	r1, [r1, #16]
 8007596:	3301      	adds	r3, #1
 8007598:	eba5 0901 	sub.w	r9, r5, r1
 800759c:	6965      	ldr	r5, [r4, #20]
 800759e:	444b      	add	r3, r9
 80075a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80075a8:	106d      	asrs	r5, r5, #1
 80075aa:	429d      	cmp	r5, r3
 80075ac:	bf38      	it	cc
 80075ae:	461d      	movcc	r5, r3
 80075b0:	0553      	lsls	r3, r2, #21
 80075b2:	d531      	bpl.n	8007618 <__ssputs_r+0xa0>
 80075b4:	4629      	mov	r1, r5
 80075b6:	f7fe f811 	bl	80055dc <_malloc_r>
 80075ba:	4606      	mov	r6, r0
 80075bc:	b950      	cbnz	r0, 80075d4 <__ssputs_r+0x5c>
 80075be:	230c      	movs	r3, #12
 80075c0:	f04f 30ff 	mov.w	r0, #4294967295
 80075c4:	f8ca 3000 	str.w	r3, [sl]
 80075c8:	89a3      	ldrh	r3, [r4, #12]
 80075ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075ce:	81a3      	strh	r3, [r4, #12]
 80075d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075d4:	464a      	mov	r2, r9
 80075d6:	6921      	ldr	r1, [r4, #16]
 80075d8:	f7ff fea0 	bl	800731c <memcpy>
 80075dc:	89a3      	ldrh	r3, [r4, #12]
 80075de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80075e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075e6:	81a3      	strh	r3, [r4, #12]
 80075e8:	6126      	str	r6, [r4, #16]
 80075ea:	444e      	add	r6, r9
 80075ec:	6026      	str	r6, [r4, #0]
 80075ee:	463e      	mov	r6, r7
 80075f0:	6165      	str	r5, [r4, #20]
 80075f2:	eba5 0509 	sub.w	r5, r5, r9
 80075f6:	60a5      	str	r5, [r4, #8]
 80075f8:	42be      	cmp	r6, r7
 80075fa:	d900      	bls.n	80075fe <__ssputs_r+0x86>
 80075fc:	463e      	mov	r6, r7
 80075fe:	4632      	mov	r2, r6
 8007600:	4641      	mov	r1, r8
 8007602:	6820      	ldr	r0, [r4, #0]
 8007604:	f7ff fe98 	bl	8007338 <memmove>
 8007608:	68a3      	ldr	r3, [r4, #8]
 800760a:	6822      	ldr	r2, [r4, #0]
 800760c:	1b9b      	subs	r3, r3, r6
 800760e:	4432      	add	r2, r6
 8007610:	2000      	movs	r0, #0
 8007612:	60a3      	str	r3, [r4, #8]
 8007614:	6022      	str	r2, [r4, #0]
 8007616:	e7db      	b.n	80075d0 <__ssputs_r+0x58>
 8007618:	462a      	mov	r2, r5
 800761a:	f7ff feb3 	bl	8007384 <_realloc_r>
 800761e:	4606      	mov	r6, r0
 8007620:	2800      	cmp	r0, #0
 8007622:	d1e1      	bne.n	80075e8 <__ssputs_r+0x70>
 8007624:	4650      	mov	r0, sl
 8007626:	6921      	ldr	r1, [r4, #16]
 8007628:	f7fd ff8c 	bl	8005544 <_free_r>
 800762c:	e7c7      	b.n	80075be <__ssputs_r+0x46>
	...

08007630 <_svfiprintf_r>:
 8007630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007634:	4698      	mov	r8, r3
 8007636:	898b      	ldrh	r3, [r1, #12]
 8007638:	4607      	mov	r7, r0
 800763a:	061b      	lsls	r3, r3, #24
 800763c:	460d      	mov	r5, r1
 800763e:	4614      	mov	r4, r2
 8007640:	b09d      	sub	sp, #116	; 0x74
 8007642:	d50e      	bpl.n	8007662 <_svfiprintf_r+0x32>
 8007644:	690b      	ldr	r3, [r1, #16]
 8007646:	b963      	cbnz	r3, 8007662 <_svfiprintf_r+0x32>
 8007648:	2140      	movs	r1, #64	; 0x40
 800764a:	f7fd ffc7 	bl	80055dc <_malloc_r>
 800764e:	6028      	str	r0, [r5, #0]
 8007650:	6128      	str	r0, [r5, #16]
 8007652:	b920      	cbnz	r0, 800765e <_svfiprintf_r+0x2e>
 8007654:	230c      	movs	r3, #12
 8007656:	603b      	str	r3, [r7, #0]
 8007658:	f04f 30ff 	mov.w	r0, #4294967295
 800765c:	e0d1      	b.n	8007802 <_svfiprintf_r+0x1d2>
 800765e:	2340      	movs	r3, #64	; 0x40
 8007660:	616b      	str	r3, [r5, #20]
 8007662:	2300      	movs	r3, #0
 8007664:	9309      	str	r3, [sp, #36]	; 0x24
 8007666:	2320      	movs	r3, #32
 8007668:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800766c:	2330      	movs	r3, #48	; 0x30
 800766e:	f04f 0901 	mov.w	r9, #1
 8007672:	f8cd 800c 	str.w	r8, [sp, #12]
 8007676:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800781c <_svfiprintf_r+0x1ec>
 800767a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800767e:	4623      	mov	r3, r4
 8007680:	469a      	mov	sl, r3
 8007682:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007686:	b10a      	cbz	r2, 800768c <_svfiprintf_r+0x5c>
 8007688:	2a25      	cmp	r2, #37	; 0x25
 800768a:	d1f9      	bne.n	8007680 <_svfiprintf_r+0x50>
 800768c:	ebba 0b04 	subs.w	fp, sl, r4
 8007690:	d00b      	beq.n	80076aa <_svfiprintf_r+0x7a>
 8007692:	465b      	mov	r3, fp
 8007694:	4622      	mov	r2, r4
 8007696:	4629      	mov	r1, r5
 8007698:	4638      	mov	r0, r7
 800769a:	f7ff ff6d 	bl	8007578 <__ssputs_r>
 800769e:	3001      	adds	r0, #1
 80076a0:	f000 80aa 	beq.w	80077f8 <_svfiprintf_r+0x1c8>
 80076a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076a6:	445a      	add	r2, fp
 80076a8:	9209      	str	r2, [sp, #36]	; 0x24
 80076aa:	f89a 3000 	ldrb.w	r3, [sl]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f000 80a2 	beq.w	80077f8 <_svfiprintf_r+0x1c8>
 80076b4:	2300      	movs	r3, #0
 80076b6:	f04f 32ff 	mov.w	r2, #4294967295
 80076ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076be:	f10a 0a01 	add.w	sl, sl, #1
 80076c2:	9304      	str	r3, [sp, #16]
 80076c4:	9307      	str	r3, [sp, #28]
 80076c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076ca:	931a      	str	r3, [sp, #104]	; 0x68
 80076cc:	4654      	mov	r4, sl
 80076ce:	2205      	movs	r2, #5
 80076d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076d4:	4851      	ldr	r0, [pc, #324]	; (800781c <_svfiprintf_r+0x1ec>)
 80076d6:	f7ff fe13 	bl	8007300 <memchr>
 80076da:	9a04      	ldr	r2, [sp, #16]
 80076dc:	b9d8      	cbnz	r0, 8007716 <_svfiprintf_r+0xe6>
 80076de:	06d0      	lsls	r0, r2, #27
 80076e0:	bf44      	itt	mi
 80076e2:	2320      	movmi	r3, #32
 80076e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076e8:	0711      	lsls	r1, r2, #28
 80076ea:	bf44      	itt	mi
 80076ec:	232b      	movmi	r3, #43	; 0x2b
 80076ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076f2:	f89a 3000 	ldrb.w	r3, [sl]
 80076f6:	2b2a      	cmp	r3, #42	; 0x2a
 80076f8:	d015      	beq.n	8007726 <_svfiprintf_r+0xf6>
 80076fa:	4654      	mov	r4, sl
 80076fc:	2000      	movs	r0, #0
 80076fe:	f04f 0c0a 	mov.w	ip, #10
 8007702:	9a07      	ldr	r2, [sp, #28]
 8007704:	4621      	mov	r1, r4
 8007706:	f811 3b01 	ldrb.w	r3, [r1], #1
 800770a:	3b30      	subs	r3, #48	; 0x30
 800770c:	2b09      	cmp	r3, #9
 800770e:	d94e      	bls.n	80077ae <_svfiprintf_r+0x17e>
 8007710:	b1b0      	cbz	r0, 8007740 <_svfiprintf_r+0x110>
 8007712:	9207      	str	r2, [sp, #28]
 8007714:	e014      	b.n	8007740 <_svfiprintf_r+0x110>
 8007716:	eba0 0308 	sub.w	r3, r0, r8
 800771a:	fa09 f303 	lsl.w	r3, r9, r3
 800771e:	4313      	orrs	r3, r2
 8007720:	46a2      	mov	sl, r4
 8007722:	9304      	str	r3, [sp, #16]
 8007724:	e7d2      	b.n	80076cc <_svfiprintf_r+0x9c>
 8007726:	9b03      	ldr	r3, [sp, #12]
 8007728:	1d19      	adds	r1, r3, #4
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	9103      	str	r1, [sp, #12]
 800772e:	2b00      	cmp	r3, #0
 8007730:	bfbb      	ittet	lt
 8007732:	425b      	neglt	r3, r3
 8007734:	f042 0202 	orrlt.w	r2, r2, #2
 8007738:	9307      	strge	r3, [sp, #28]
 800773a:	9307      	strlt	r3, [sp, #28]
 800773c:	bfb8      	it	lt
 800773e:	9204      	strlt	r2, [sp, #16]
 8007740:	7823      	ldrb	r3, [r4, #0]
 8007742:	2b2e      	cmp	r3, #46	; 0x2e
 8007744:	d10c      	bne.n	8007760 <_svfiprintf_r+0x130>
 8007746:	7863      	ldrb	r3, [r4, #1]
 8007748:	2b2a      	cmp	r3, #42	; 0x2a
 800774a:	d135      	bne.n	80077b8 <_svfiprintf_r+0x188>
 800774c:	9b03      	ldr	r3, [sp, #12]
 800774e:	3402      	adds	r4, #2
 8007750:	1d1a      	adds	r2, r3, #4
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	9203      	str	r2, [sp, #12]
 8007756:	2b00      	cmp	r3, #0
 8007758:	bfb8      	it	lt
 800775a:	f04f 33ff 	movlt.w	r3, #4294967295
 800775e:	9305      	str	r3, [sp, #20]
 8007760:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800782c <_svfiprintf_r+0x1fc>
 8007764:	2203      	movs	r2, #3
 8007766:	4650      	mov	r0, sl
 8007768:	7821      	ldrb	r1, [r4, #0]
 800776a:	f7ff fdc9 	bl	8007300 <memchr>
 800776e:	b140      	cbz	r0, 8007782 <_svfiprintf_r+0x152>
 8007770:	2340      	movs	r3, #64	; 0x40
 8007772:	eba0 000a 	sub.w	r0, r0, sl
 8007776:	fa03 f000 	lsl.w	r0, r3, r0
 800777a:	9b04      	ldr	r3, [sp, #16]
 800777c:	3401      	adds	r4, #1
 800777e:	4303      	orrs	r3, r0
 8007780:	9304      	str	r3, [sp, #16]
 8007782:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007786:	2206      	movs	r2, #6
 8007788:	4825      	ldr	r0, [pc, #148]	; (8007820 <_svfiprintf_r+0x1f0>)
 800778a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800778e:	f7ff fdb7 	bl	8007300 <memchr>
 8007792:	2800      	cmp	r0, #0
 8007794:	d038      	beq.n	8007808 <_svfiprintf_r+0x1d8>
 8007796:	4b23      	ldr	r3, [pc, #140]	; (8007824 <_svfiprintf_r+0x1f4>)
 8007798:	bb1b      	cbnz	r3, 80077e2 <_svfiprintf_r+0x1b2>
 800779a:	9b03      	ldr	r3, [sp, #12]
 800779c:	3307      	adds	r3, #7
 800779e:	f023 0307 	bic.w	r3, r3, #7
 80077a2:	3308      	adds	r3, #8
 80077a4:	9303      	str	r3, [sp, #12]
 80077a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077a8:	4433      	add	r3, r6
 80077aa:	9309      	str	r3, [sp, #36]	; 0x24
 80077ac:	e767      	b.n	800767e <_svfiprintf_r+0x4e>
 80077ae:	460c      	mov	r4, r1
 80077b0:	2001      	movs	r0, #1
 80077b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80077b6:	e7a5      	b.n	8007704 <_svfiprintf_r+0xd4>
 80077b8:	2300      	movs	r3, #0
 80077ba:	f04f 0c0a 	mov.w	ip, #10
 80077be:	4619      	mov	r1, r3
 80077c0:	3401      	adds	r4, #1
 80077c2:	9305      	str	r3, [sp, #20]
 80077c4:	4620      	mov	r0, r4
 80077c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077ca:	3a30      	subs	r2, #48	; 0x30
 80077cc:	2a09      	cmp	r2, #9
 80077ce:	d903      	bls.n	80077d8 <_svfiprintf_r+0x1a8>
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d0c5      	beq.n	8007760 <_svfiprintf_r+0x130>
 80077d4:	9105      	str	r1, [sp, #20]
 80077d6:	e7c3      	b.n	8007760 <_svfiprintf_r+0x130>
 80077d8:	4604      	mov	r4, r0
 80077da:	2301      	movs	r3, #1
 80077dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80077e0:	e7f0      	b.n	80077c4 <_svfiprintf_r+0x194>
 80077e2:	ab03      	add	r3, sp, #12
 80077e4:	9300      	str	r3, [sp, #0]
 80077e6:	462a      	mov	r2, r5
 80077e8:	4638      	mov	r0, r7
 80077ea:	4b0f      	ldr	r3, [pc, #60]	; (8007828 <_svfiprintf_r+0x1f8>)
 80077ec:	a904      	add	r1, sp, #16
 80077ee:	f3af 8000 	nop.w
 80077f2:	1c42      	adds	r2, r0, #1
 80077f4:	4606      	mov	r6, r0
 80077f6:	d1d6      	bne.n	80077a6 <_svfiprintf_r+0x176>
 80077f8:	89ab      	ldrh	r3, [r5, #12]
 80077fa:	065b      	lsls	r3, r3, #25
 80077fc:	f53f af2c 	bmi.w	8007658 <_svfiprintf_r+0x28>
 8007800:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007802:	b01d      	add	sp, #116	; 0x74
 8007804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007808:	ab03      	add	r3, sp, #12
 800780a:	9300      	str	r3, [sp, #0]
 800780c:	462a      	mov	r2, r5
 800780e:	4638      	mov	r0, r7
 8007810:	4b05      	ldr	r3, [pc, #20]	; (8007828 <_svfiprintf_r+0x1f8>)
 8007812:	a904      	add	r1, sp, #16
 8007814:	f7fe f90e 	bl	8005a34 <_printf_i>
 8007818:	e7eb      	b.n	80077f2 <_svfiprintf_r+0x1c2>
 800781a:	bf00      	nop
 800781c:	08008494 	.word	0x08008494
 8007820:	0800849e 	.word	0x0800849e
 8007824:	00000000 	.word	0x00000000
 8007828:	08007579 	.word	0x08007579
 800782c:	0800849a 	.word	0x0800849a

08007830 <_sungetc_r>:
 8007830:	b538      	push	{r3, r4, r5, lr}
 8007832:	1c4b      	adds	r3, r1, #1
 8007834:	4614      	mov	r4, r2
 8007836:	d103      	bne.n	8007840 <_sungetc_r+0x10>
 8007838:	f04f 35ff 	mov.w	r5, #4294967295
 800783c:	4628      	mov	r0, r5
 800783e:	bd38      	pop	{r3, r4, r5, pc}
 8007840:	8993      	ldrh	r3, [r2, #12]
 8007842:	b2cd      	uxtb	r5, r1
 8007844:	f023 0320 	bic.w	r3, r3, #32
 8007848:	8193      	strh	r3, [r2, #12]
 800784a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800784c:	6852      	ldr	r2, [r2, #4]
 800784e:	b18b      	cbz	r3, 8007874 <_sungetc_r+0x44>
 8007850:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007852:	4293      	cmp	r3, r2
 8007854:	dd08      	ble.n	8007868 <_sungetc_r+0x38>
 8007856:	6823      	ldr	r3, [r4, #0]
 8007858:	1e5a      	subs	r2, r3, #1
 800785a:	6022      	str	r2, [r4, #0]
 800785c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007860:	6863      	ldr	r3, [r4, #4]
 8007862:	3301      	adds	r3, #1
 8007864:	6063      	str	r3, [r4, #4]
 8007866:	e7e9      	b.n	800783c <_sungetc_r+0xc>
 8007868:	4621      	mov	r1, r4
 800786a:	f000 fc05 	bl	8008078 <__submore>
 800786e:	2800      	cmp	r0, #0
 8007870:	d0f1      	beq.n	8007856 <_sungetc_r+0x26>
 8007872:	e7e1      	b.n	8007838 <_sungetc_r+0x8>
 8007874:	6921      	ldr	r1, [r4, #16]
 8007876:	6823      	ldr	r3, [r4, #0]
 8007878:	b151      	cbz	r1, 8007890 <_sungetc_r+0x60>
 800787a:	4299      	cmp	r1, r3
 800787c:	d208      	bcs.n	8007890 <_sungetc_r+0x60>
 800787e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007882:	42a9      	cmp	r1, r5
 8007884:	d104      	bne.n	8007890 <_sungetc_r+0x60>
 8007886:	3b01      	subs	r3, #1
 8007888:	3201      	adds	r2, #1
 800788a:	6023      	str	r3, [r4, #0]
 800788c:	6062      	str	r2, [r4, #4]
 800788e:	e7d5      	b.n	800783c <_sungetc_r+0xc>
 8007890:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007894:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007898:	6363      	str	r3, [r4, #52]	; 0x34
 800789a:	2303      	movs	r3, #3
 800789c:	63a3      	str	r3, [r4, #56]	; 0x38
 800789e:	4623      	mov	r3, r4
 80078a0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80078a4:	6023      	str	r3, [r4, #0]
 80078a6:	2301      	movs	r3, #1
 80078a8:	e7dc      	b.n	8007864 <_sungetc_r+0x34>

080078aa <__ssrefill_r>:
 80078aa:	b510      	push	{r4, lr}
 80078ac:	460c      	mov	r4, r1
 80078ae:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80078b0:	b169      	cbz	r1, 80078ce <__ssrefill_r+0x24>
 80078b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078b6:	4299      	cmp	r1, r3
 80078b8:	d001      	beq.n	80078be <__ssrefill_r+0x14>
 80078ba:	f7fd fe43 	bl	8005544 <_free_r>
 80078be:	2000      	movs	r0, #0
 80078c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80078c2:	6360      	str	r0, [r4, #52]	; 0x34
 80078c4:	6063      	str	r3, [r4, #4]
 80078c6:	b113      	cbz	r3, 80078ce <__ssrefill_r+0x24>
 80078c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80078ca:	6023      	str	r3, [r4, #0]
 80078cc:	bd10      	pop	{r4, pc}
 80078ce:	6923      	ldr	r3, [r4, #16]
 80078d0:	f04f 30ff 	mov.w	r0, #4294967295
 80078d4:	6023      	str	r3, [r4, #0]
 80078d6:	2300      	movs	r3, #0
 80078d8:	6063      	str	r3, [r4, #4]
 80078da:	89a3      	ldrh	r3, [r4, #12]
 80078dc:	f043 0320 	orr.w	r3, r3, #32
 80078e0:	81a3      	strh	r3, [r4, #12]
 80078e2:	e7f3      	b.n	80078cc <__ssrefill_r+0x22>

080078e4 <__ssvfiscanf_r>:
 80078e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078e8:	460c      	mov	r4, r1
 80078ea:	2100      	movs	r1, #0
 80078ec:	4606      	mov	r6, r0
 80078ee:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80078f2:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80078f6:	49b3      	ldr	r1, [pc, #716]	; (8007bc4 <__ssvfiscanf_r+0x2e0>)
 80078f8:	f10d 0804 	add.w	r8, sp, #4
 80078fc:	91a0      	str	r1, [sp, #640]	; 0x280
 80078fe:	49b2      	ldr	r1, [pc, #712]	; (8007bc8 <__ssvfiscanf_r+0x2e4>)
 8007900:	4fb2      	ldr	r7, [pc, #712]	; (8007bcc <__ssvfiscanf_r+0x2e8>)
 8007902:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 8007bd0 <__ssvfiscanf_r+0x2ec>
 8007906:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800790a:	91a1      	str	r1, [sp, #644]	; 0x284
 800790c:	9300      	str	r3, [sp, #0]
 800790e:	f892 a000 	ldrb.w	sl, [r2]
 8007912:	f1ba 0f00 	cmp.w	sl, #0
 8007916:	f000 8153 	beq.w	8007bc0 <__ssvfiscanf_r+0x2dc>
 800791a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800791e:	1c55      	adds	r5, r2, #1
 8007920:	f013 0308 	ands.w	r3, r3, #8
 8007924:	d019      	beq.n	800795a <__ssvfiscanf_r+0x76>
 8007926:	6863      	ldr	r3, [r4, #4]
 8007928:	2b00      	cmp	r3, #0
 800792a:	dd0f      	ble.n	800794c <__ssvfiscanf_r+0x68>
 800792c:	6823      	ldr	r3, [r4, #0]
 800792e:	781a      	ldrb	r2, [r3, #0]
 8007930:	5cba      	ldrb	r2, [r7, r2]
 8007932:	0712      	lsls	r2, r2, #28
 8007934:	d401      	bmi.n	800793a <__ssvfiscanf_r+0x56>
 8007936:	462a      	mov	r2, r5
 8007938:	e7e9      	b.n	800790e <__ssvfiscanf_r+0x2a>
 800793a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800793c:	3301      	adds	r3, #1
 800793e:	3201      	adds	r2, #1
 8007940:	9245      	str	r2, [sp, #276]	; 0x114
 8007942:	6862      	ldr	r2, [r4, #4]
 8007944:	6023      	str	r3, [r4, #0]
 8007946:	3a01      	subs	r2, #1
 8007948:	6062      	str	r2, [r4, #4]
 800794a:	e7ec      	b.n	8007926 <__ssvfiscanf_r+0x42>
 800794c:	4621      	mov	r1, r4
 800794e:	4630      	mov	r0, r6
 8007950:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007952:	4798      	blx	r3
 8007954:	2800      	cmp	r0, #0
 8007956:	d0e9      	beq.n	800792c <__ssvfiscanf_r+0x48>
 8007958:	e7ed      	b.n	8007936 <__ssvfiscanf_r+0x52>
 800795a:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800795e:	f040 8086 	bne.w	8007a6e <__ssvfiscanf_r+0x18a>
 8007962:	9341      	str	r3, [sp, #260]	; 0x104
 8007964:	9343      	str	r3, [sp, #268]	; 0x10c
 8007966:	7853      	ldrb	r3, [r2, #1]
 8007968:	2b2a      	cmp	r3, #42	; 0x2a
 800796a:	bf04      	itt	eq
 800796c:	2310      	moveq	r3, #16
 800796e:	1c95      	addeq	r5, r2, #2
 8007970:	f04f 020a 	mov.w	r2, #10
 8007974:	bf08      	it	eq
 8007976:	9341      	streq	r3, [sp, #260]	; 0x104
 8007978:	46ab      	mov	fp, r5
 800797a:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800797e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8007982:	2b09      	cmp	r3, #9
 8007984:	d91d      	bls.n	80079c2 <__ssvfiscanf_r+0xde>
 8007986:	2203      	movs	r2, #3
 8007988:	4891      	ldr	r0, [pc, #580]	; (8007bd0 <__ssvfiscanf_r+0x2ec>)
 800798a:	f7ff fcb9 	bl	8007300 <memchr>
 800798e:	b140      	cbz	r0, 80079a2 <__ssvfiscanf_r+0xbe>
 8007990:	2301      	movs	r3, #1
 8007992:	465d      	mov	r5, fp
 8007994:	eba0 0009 	sub.w	r0, r0, r9
 8007998:	fa03 f000 	lsl.w	r0, r3, r0
 800799c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800799e:	4318      	orrs	r0, r3
 80079a0:	9041      	str	r0, [sp, #260]	; 0x104
 80079a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80079a6:	2b78      	cmp	r3, #120	; 0x78
 80079a8:	d806      	bhi.n	80079b8 <__ssvfiscanf_r+0xd4>
 80079aa:	2b57      	cmp	r3, #87	; 0x57
 80079ac:	d810      	bhi.n	80079d0 <__ssvfiscanf_r+0xec>
 80079ae:	2b25      	cmp	r3, #37	; 0x25
 80079b0:	d05d      	beq.n	8007a6e <__ssvfiscanf_r+0x18a>
 80079b2:	d857      	bhi.n	8007a64 <__ssvfiscanf_r+0x180>
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d075      	beq.n	8007aa4 <__ssvfiscanf_r+0x1c0>
 80079b8:	2303      	movs	r3, #3
 80079ba:	9347      	str	r3, [sp, #284]	; 0x11c
 80079bc:	230a      	movs	r3, #10
 80079be:	9342      	str	r3, [sp, #264]	; 0x108
 80079c0:	e082      	b.n	8007ac8 <__ssvfiscanf_r+0x1e4>
 80079c2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80079c4:	465d      	mov	r5, fp
 80079c6:	fb02 1303 	mla	r3, r2, r3, r1
 80079ca:	3b30      	subs	r3, #48	; 0x30
 80079cc:	9343      	str	r3, [sp, #268]	; 0x10c
 80079ce:	e7d3      	b.n	8007978 <__ssvfiscanf_r+0x94>
 80079d0:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80079d4:	2a20      	cmp	r2, #32
 80079d6:	d8ef      	bhi.n	80079b8 <__ssvfiscanf_r+0xd4>
 80079d8:	a101      	add	r1, pc, #4	; (adr r1, 80079e0 <__ssvfiscanf_r+0xfc>)
 80079da:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80079de:	bf00      	nop
 80079e0:	08007ab3 	.word	0x08007ab3
 80079e4:	080079b9 	.word	0x080079b9
 80079e8:	080079b9 	.word	0x080079b9
 80079ec:	08007b11 	.word	0x08007b11
 80079f0:	080079b9 	.word	0x080079b9
 80079f4:	080079b9 	.word	0x080079b9
 80079f8:	080079b9 	.word	0x080079b9
 80079fc:	080079b9 	.word	0x080079b9
 8007a00:	080079b9 	.word	0x080079b9
 8007a04:	080079b9 	.word	0x080079b9
 8007a08:	080079b9 	.word	0x080079b9
 8007a0c:	08007b27 	.word	0x08007b27
 8007a10:	08007afd 	.word	0x08007afd
 8007a14:	08007a6b 	.word	0x08007a6b
 8007a18:	08007a6b 	.word	0x08007a6b
 8007a1c:	08007a6b 	.word	0x08007a6b
 8007a20:	080079b9 	.word	0x080079b9
 8007a24:	08007b01 	.word	0x08007b01
 8007a28:	080079b9 	.word	0x080079b9
 8007a2c:	080079b9 	.word	0x080079b9
 8007a30:	080079b9 	.word	0x080079b9
 8007a34:	080079b9 	.word	0x080079b9
 8007a38:	08007b37 	.word	0x08007b37
 8007a3c:	08007b09 	.word	0x08007b09
 8007a40:	08007aab 	.word	0x08007aab
 8007a44:	080079b9 	.word	0x080079b9
 8007a48:	080079b9 	.word	0x080079b9
 8007a4c:	08007b33 	.word	0x08007b33
 8007a50:	080079b9 	.word	0x080079b9
 8007a54:	08007afd 	.word	0x08007afd
 8007a58:	080079b9 	.word	0x080079b9
 8007a5c:	080079b9 	.word	0x080079b9
 8007a60:	08007ab3 	.word	0x08007ab3
 8007a64:	3b45      	subs	r3, #69	; 0x45
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d8a6      	bhi.n	80079b8 <__ssvfiscanf_r+0xd4>
 8007a6a:	2305      	movs	r3, #5
 8007a6c:	e02b      	b.n	8007ac6 <__ssvfiscanf_r+0x1e2>
 8007a6e:	6863      	ldr	r3, [r4, #4]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	dd0d      	ble.n	8007a90 <__ssvfiscanf_r+0x1ac>
 8007a74:	6823      	ldr	r3, [r4, #0]
 8007a76:	781a      	ldrb	r2, [r3, #0]
 8007a78:	4552      	cmp	r2, sl
 8007a7a:	f040 80a1 	bne.w	8007bc0 <__ssvfiscanf_r+0x2dc>
 8007a7e:	3301      	adds	r3, #1
 8007a80:	6862      	ldr	r2, [r4, #4]
 8007a82:	6023      	str	r3, [r4, #0]
 8007a84:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007a86:	3a01      	subs	r2, #1
 8007a88:	3301      	adds	r3, #1
 8007a8a:	6062      	str	r2, [r4, #4]
 8007a8c:	9345      	str	r3, [sp, #276]	; 0x114
 8007a8e:	e752      	b.n	8007936 <__ssvfiscanf_r+0x52>
 8007a90:	4621      	mov	r1, r4
 8007a92:	4630      	mov	r0, r6
 8007a94:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007a96:	4798      	blx	r3
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	d0eb      	beq.n	8007a74 <__ssvfiscanf_r+0x190>
 8007a9c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	f040 8084 	bne.w	8007bac <__ssvfiscanf_r+0x2c8>
 8007aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa8:	e086      	b.n	8007bb8 <__ssvfiscanf_r+0x2d4>
 8007aaa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007aac:	f042 0220 	orr.w	r2, r2, #32
 8007ab0:	9241      	str	r2, [sp, #260]	; 0x104
 8007ab2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007ab4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ab8:	9241      	str	r2, [sp, #260]	; 0x104
 8007aba:	2210      	movs	r2, #16
 8007abc:	2b6f      	cmp	r3, #111	; 0x6f
 8007abe:	bf34      	ite	cc
 8007ac0:	2303      	movcc	r3, #3
 8007ac2:	2304      	movcs	r3, #4
 8007ac4:	9242      	str	r2, [sp, #264]	; 0x108
 8007ac6:	9347      	str	r3, [sp, #284]	; 0x11c
 8007ac8:	6863      	ldr	r3, [r4, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	dd41      	ble.n	8007b52 <__ssvfiscanf_r+0x26e>
 8007ace:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007ad0:	0659      	lsls	r1, r3, #25
 8007ad2:	d404      	bmi.n	8007ade <__ssvfiscanf_r+0x1fa>
 8007ad4:	6823      	ldr	r3, [r4, #0]
 8007ad6:	781a      	ldrb	r2, [r3, #0]
 8007ad8:	5cba      	ldrb	r2, [r7, r2]
 8007ada:	0712      	lsls	r2, r2, #28
 8007adc:	d440      	bmi.n	8007b60 <__ssvfiscanf_r+0x27c>
 8007ade:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	dc4f      	bgt.n	8007b84 <__ssvfiscanf_r+0x2a0>
 8007ae4:	466b      	mov	r3, sp
 8007ae6:	4622      	mov	r2, r4
 8007ae8:	4630      	mov	r0, r6
 8007aea:	a941      	add	r1, sp, #260	; 0x104
 8007aec:	f000 f874 	bl	8007bd8 <_scanf_chars>
 8007af0:	2801      	cmp	r0, #1
 8007af2:	d065      	beq.n	8007bc0 <__ssvfiscanf_r+0x2dc>
 8007af4:	2802      	cmp	r0, #2
 8007af6:	f47f af1e 	bne.w	8007936 <__ssvfiscanf_r+0x52>
 8007afa:	e7cf      	b.n	8007a9c <__ssvfiscanf_r+0x1b8>
 8007afc:	220a      	movs	r2, #10
 8007afe:	e7dd      	b.n	8007abc <__ssvfiscanf_r+0x1d8>
 8007b00:	2300      	movs	r3, #0
 8007b02:	9342      	str	r3, [sp, #264]	; 0x108
 8007b04:	2303      	movs	r3, #3
 8007b06:	e7de      	b.n	8007ac6 <__ssvfiscanf_r+0x1e2>
 8007b08:	2308      	movs	r3, #8
 8007b0a:	9342      	str	r3, [sp, #264]	; 0x108
 8007b0c:	2304      	movs	r3, #4
 8007b0e:	e7da      	b.n	8007ac6 <__ssvfiscanf_r+0x1e2>
 8007b10:	4629      	mov	r1, r5
 8007b12:	4640      	mov	r0, r8
 8007b14:	f000 f9aa 	bl	8007e6c <__sccl>
 8007b18:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007b1a:	4605      	mov	r5, r0
 8007b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b20:	9341      	str	r3, [sp, #260]	; 0x104
 8007b22:	2301      	movs	r3, #1
 8007b24:	e7cf      	b.n	8007ac6 <__ssvfiscanf_r+0x1e2>
 8007b26:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b2c:	9341      	str	r3, [sp, #260]	; 0x104
 8007b2e:	2300      	movs	r3, #0
 8007b30:	e7c9      	b.n	8007ac6 <__ssvfiscanf_r+0x1e2>
 8007b32:	2302      	movs	r3, #2
 8007b34:	e7c7      	b.n	8007ac6 <__ssvfiscanf_r+0x1e2>
 8007b36:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007b38:	06c3      	lsls	r3, r0, #27
 8007b3a:	f53f aefc 	bmi.w	8007936 <__ssvfiscanf_r+0x52>
 8007b3e:	9b00      	ldr	r3, [sp, #0]
 8007b40:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007b42:	1d19      	adds	r1, r3, #4
 8007b44:	9100      	str	r1, [sp, #0]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	07c0      	lsls	r0, r0, #31
 8007b4a:	bf4c      	ite	mi
 8007b4c:	801a      	strhmi	r2, [r3, #0]
 8007b4e:	601a      	strpl	r2, [r3, #0]
 8007b50:	e6f1      	b.n	8007936 <__ssvfiscanf_r+0x52>
 8007b52:	4621      	mov	r1, r4
 8007b54:	4630      	mov	r0, r6
 8007b56:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007b58:	4798      	blx	r3
 8007b5a:	2800      	cmp	r0, #0
 8007b5c:	d0b7      	beq.n	8007ace <__ssvfiscanf_r+0x1ea>
 8007b5e:	e79d      	b.n	8007a9c <__ssvfiscanf_r+0x1b8>
 8007b60:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007b62:	3201      	adds	r2, #1
 8007b64:	9245      	str	r2, [sp, #276]	; 0x114
 8007b66:	6862      	ldr	r2, [r4, #4]
 8007b68:	3a01      	subs	r2, #1
 8007b6a:	2a00      	cmp	r2, #0
 8007b6c:	6062      	str	r2, [r4, #4]
 8007b6e:	dd02      	ble.n	8007b76 <__ssvfiscanf_r+0x292>
 8007b70:	3301      	adds	r3, #1
 8007b72:	6023      	str	r3, [r4, #0]
 8007b74:	e7ae      	b.n	8007ad4 <__ssvfiscanf_r+0x1f0>
 8007b76:	4621      	mov	r1, r4
 8007b78:	4630      	mov	r0, r6
 8007b7a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007b7c:	4798      	blx	r3
 8007b7e:	2800      	cmp	r0, #0
 8007b80:	d0a8      	beq.n	8007ad4 <__ssvfiscanf_r+0x1f0>
 8007b82:	e78b      	b.n	8007a9c <__ssvfiscanf_r+0x1b8>
 8007b84:	2b04      	cmp	r3, #4
 8007b86:	dc06      	bgt.n	8007b96 <__ssvfiscanf_r+0x2b2>
 8007b88:	466b      	mov	r3, sp
 8007b8a:	4622      	mov	r2, r4
 8007b8c:	4630      	mov	r0, r6
 8007b8e:	a941      	add	r1, sp, #260	; 0x104
 8007b90:	f000 f87a 	bl	8007c88 <_scanf_i>
 8007b94:	e7ac      	b.n	8007af0 <__ssvfiscanf_r+0x20c>
 8007b96:	4b0f      	ldr	r3, [pc, #60]	; (8007bd4 <__ssvfiscanf_r+0x2f0>)
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f43f aecc 	beq.w	8007936 <__ssvfiscanf_r+0x52>
 8007b9e:	466b      	mov	r3, sp
 8007ba0:	4622      	mov	r2, r4
 8007ba2:	4630      	mov	r0, r6
 8007ba4:	a941      	add	r1, sp, #260	; 0x104
 8007ba6:	f3af 8000 	nop.w
 8007baa:	e7a1      	b.n	8007af0 <__ssvfiscanf_r+0x20c>
 8007bac:	89a3      	ldrh	r3, [r4, #12]
 8007bae:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007bb2:	bf18      	it	ne
 8007bb4:	f04f 30ff 	movne.w	r0, #4294967295
 8007bb8:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8007bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bc0:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007bc2:	e7f9      	b.n	8007bb8 <__ssvfiscanf_r+0x2d4>
 8007bc4:	08007831 	.word	0x08007831
 8007bc8:	080078ab 	.word	0x080078ab
 8007bcc:	080087c1 	.word	0x080087c1
 8007bd0:	0800849a 	.word	0x0800849a
 8007bd4:	00000000 	.word	0x00000000

08007bd8 <_scanf_chars>:
 8007bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bdc:	4615      	mov	r5, r2
 8007bde:	688a      	ldr	r2, [r1, #8]
 8007be0:	4680      	mov	r8, r0
 8007be2:	460c      	mov	r4, r1
 8007be4:	b932      	cbnz	r2, 8007bf4 <_scanf_chars+0x1c>
 8007be6:	698a      	ldr	r2, [r1, #24]
 8007be8:	2a00      	cmp	r2, #0
 8007bea:	bf0c      	ite	eq
 8007bec:	2201      	moveq	r2, #1
 8007bee:	f04f 32ff 	movne.w	r2, #4294967295
 8007bf2:	608a      	str	r2, [r1, #8]
 8007bf4:	2700      	movs	r7, #0
 8007bf6:	6822      	ldr	r2, [r4, #0]
 8007bf8:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8007c84 <_scanf_chars+0xac>
 8007bfc:	06d1      	lsls	r1, r2, #27
 8007bfe:	bf5f      	itttt	pl
 8007c00:	681a      	ldrpl	r2, [r3, #0]
 8007c02:	1d11      	addpl	r1, r2, #4
 8007c04:	6019      	strpl	r1, [r3, #0]
 8007c06:	6816      	ldrpl	r6, [r2, #0]
 8007c08:	69a0      	ldr	r0, [r4, #24]
 8007c0a:	b188      	cbz	r0, 8007c30 <_scanf_chars+0x58>
 8007c0c:	2801      	cmp	r0, #1
 8007c0e:	d107      	bne.n	8007c20 <_scanf_chars+0x48>
 8007c10:	682b      	ldr	r3, [r5, #0]
 8007c12:	781a      	ldrb	r2, [r3, #0]
 8007c14:	6963      	ldr	r3, [r4, #20]
 8007c16:	5c9b      	ldrb	r3, [r3, r2]
 8007c18:	b953      	cbnz	r3, 8007c30 <_scanf_chars+0x58>
 8007c1a:	bb27      	cbnz	r7, 8007c66 <_scanf_chars+0x8e>
 8007c1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c20:	2802      	cmp	r0, #2
 8007c22:	d120      	bne.n	8007c66 <_scanf_chars+0x8e>
 8007c24:	682b      	ldr	r3, [r5, #0]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	f813 3009 	ldrb.w	r3, [r3, r9]
 8007c2c:	071b      	lsls	r3, r3, #28
 8007c2e:	d41a      	bmi.n	8007c66 <_scanf_chars+0x8e>
 8007c30:	6823      	ldr	r3, [r4, #0]
 8007c32:	3701      	adds	r7, #1
 8007c34:	06da      	lsls	r2, r3, #27
 8007c36:	bf5e      	ittt	pl
 8007c38:	682b      	ldrpl	r3, [r5, #0]
 8007c3a:	781b      	ldrbpl	r3, [r3, #0]
 8007c3c:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007c40:	682a      	ldr	r2, [r5, #0]
 8007c42:	686b      	ldr	r3, [r5, #4]
 8007c44:	3201      	adds	r2, #1
 8007c46:	602a      	str	r2, [r5, #0]
 8007c48:	68a2      	ldr	r2, [r4, #8]
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	3a01      	subs	r2, #1
 8007c4e:	606b      	str	r3, [r5, #4]
 8007c50:	60a2      	str	r2, [r4, #8]
 8007c52:	b142      	cbz	r2, 8007c66 <_scanf_chars+0x8e>
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	dcd7      	bgt.n	8007c08 <_scanf_chars+0x30>
 8007c58:	4629      	mov	r1, r5
 8007c5a:	4640      	mov	r0, r8
 8007c5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007c60:	4798      	blx	r3
 8007c62:	2800      	cmp	r0, #0
 8007c64:	d0d0      	beq.n	8007c08 <_scanf_chars+0x30>
 8007c66:	6823      	ldr	r3, [r4, #0]
 8007c68:	f013 0310 	ands.w	r3, r3, #16
 8007c6c:	d105      	bne.n	8007c7a <_scanf_chars+0xa2>
 8007c6e:	68e2      	ldr	r2, [r4, #12]
 8007c70:	3201      	adds	r2, #1
 8007c72:	60e2      	str	r2, [r4, #12]
 8007c74:	69a2      	ldr	r2, [r4, #24]
 8007c76:	b102      	cbz	r2, 8007c7a <_scanf_chars+0xa2>
 8007c78:	7033      	strb	r3, [r6, #0]
 8007c7a:	6923      	ldr	r3, [r4, #16]
 8007c7c:	2000      	movs	r0, #0
 8007c7e:	441f      	add	r7, r3
 8007c80:	6127      	str	r7, [r4, #16]
 8007c82:	e7cb      	b.n	8007c1c <_scanf_chars+0x44>
 8007c84:	080087c1 	.word	0x080087c1

08007c88 <_scanf_i>:
 8007c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c8c:	460c      	mov	r4, r1
 8007c8e:	4698      	mov	r8, r3
 8007c90:	4b72      	ldr	r3, [pc, #456]	; (8007e5c <_scanf_i+0x1d4>)
 8007c92:	b087      	sub	sp, #28
 8007c94:	4682      	mov	sl, r0
 8007c96:	4616      	mov	r6, r2
 8007c98:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007c9c:	ab03      	add	r3, sp, #12
 8007c9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007ca2:	4b6f      	ldr	r3, [pc, #444]	; (8007e60 <_scanf_i+0x1d8>)
 8007ca4:	69a1      	ldr	r1, [r4, #24]
 8007ca6:	4a6f      	ldr	r2, [pc, #444]	; (8007e64 <_scanf_i+0x1dc>)
 8007ca8:	4627      	mov	r7, r4
 8007caa:	2903      	cmp	r1, #3
 8007cac:	bf18      	it	ne
 8007cae:	461a      	movne	r2, r3
 8007cb0:	68a3      	ldr	r3, [r4, #8]
 8007cb2:	9201      	str	r2, [sp, #4]
 8007cb4:	1e5a      	subs	r2, r3, #1
 8007cb6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007cba:	bf81      	itttt	hi
 8007cbc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007cc0:	eb03 0905 	addhi.w	r9, r3, r5
 8007cc4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007cc8:	60a3      	strhi	r3, [r4, #8]
 8007cca:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007cce:	bf98      	it	ls
 8007cd0:	f04f 0900 	movls.w	r9, #0
 8007cd4:	463d      	mov	r5, r7
 8007cd6:	f04f 0b00 	mov.w	fp, #0
 8007cda:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007cde:	6023      	str	r3, [r4, #0]
 8007ce0:	6831      	ldr	r1, [r6, #0]
 8007ce2:	ab03      	add	r3, sp, #12
 8007ce4:	2202      	movs	r2, #2
 8007ce6:	7809      	ldrb	r1, [r1, #0]
 8007ce8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007cec:	f7ff fb08 	bl	8007300 <memchr>
 8007cf0:	b328      	cbz	r0, 8007d3e <_scanf_i+0xb6>
 8007cf2:	f1bb 0f01 	cmp.w	fp, #1
 8007cf6:	d159      	bne.n	8007dac <_scanf_i+0x124>
 8007cf8:	6862      	ldr	r2, [r4, #4]
 8007cfa:	b92a      	cbnz	r2, 8007d08 <_scanf_i+0x80>
 8007cfc:	2308      	movs	r3, #8
 8007cfe:	6822      	ldr	r2, [r4, #0]
 8007d00:	6063      	str	r3, [r4, #4]
 8007d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d06:	6022      	str	r2, [r4, #0]
 8007d08:	6822      	ldr	r2, [r4, #0]
 8007d0a:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8007d0e:	6022      	str	r2, [r4, #0]
 8007d10:	68a2      	ldr	r2, [r4, #8]
 8007d12:	1e51      	subs	r1, r2, #1
 8007d14:	60a1      	str	r1, [r4, #8]
 8007d16:	b192      	cbz	r2, 8007d3e <_scanf_i+0xb6>
 8007d18:	6832      	ldr	r2, [r6, #0]
 8007d1a:	1c51      	adds	r1, r2, #1
 8007d1c:	6031      	str	r1, [r6, #0]
 8007d1e:	7812      	ldrb	r2, [r2, #0]
 8007d20:	f805 2b01 	strb.w	r2, [r5], #1
 8007d24:	6872      	ldr	r2, [r6, #4]
 8007d26:	3a01      	subs	r2, #1
 8007d28:	2a00      	cmp	r2, #0
 8007d2a:	6072      	str	r2, [r6, #4]
 8007d2c:	dc07      	bgt.n	8007d3e <_scanf_i+0xb6>
 8007d2e:	4631      	mov	r1, r6
 8007d30:	4650      	mov	r0, sl
 8007d32:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8007d36:	4790      	blx	r2
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	f040 8085 	bne.w	8007e48 <_scanf_i+0x1c0>
 8007d3e:	f10b 0b01 	add.w	fp, fp, #1
 8007d42:	f1bb 0f03 	cmp.w	fp, #3
 8007d46:	d1cb      	bne.n	8007ce0 <_scanf_i+0x58>
 8007d48:	6863      	ldr	r3, [r4, #4]
 8007d4a:	b90b      	cbnz	r3, 8007d50 <_scanf_i+0xc8>
 8007d4c:	230a      	movs	r3, #10
 8007d4e:	6063      	str	r3, [r4, #4]
 8007d50:	6863      	ldr	r3, [r4, #4]
 8007d52:	4945      	ldr	r1, [pc, #276]	; (8007e68 <_scanf_i+0x1e0>)
 8007d54:	6960      	ldr	r0, [r4, #20]
 8007d56:	1ac9      	subs	r1, r1, r3
 8007d58:	f000 f888 	bl	8007e6c <__sccl>
 8007d5c:	f04f 0b00 	mov.w	fp, #0
 8007d60:	68a3      	ldr	r3, [r4, #8]
 8007d62:	6822      	ldr	r2, [r4, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d03d      	beq.n	8007de4 <_scanf_i+0x15c>
 8007d68:	6831      	ldr	r1, [r6, #0]
 8007d6a:	6960      	ldr	r0, [r4, #20]
 8007d6c:	f891 c000 	ldrb.w	ip, [r1]
 8007d70:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007d74:	2800      	cmp	r0, #0
 8007d76:	d035      	beq.n	8007de4 <_scanf_i+0x15c>
 8007d78:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007d7c:	d124      	bne.n	8007dc8 <_scanf_i+0x140>
 8007d7e:	0510      	lsls	r0, r2, #20
 8007d80:	d522      	bpl.n	8007dc8 <_scanf_i+0x140>
 8007d82:	f10b 0b01 	add.w	fp, fp, #1
 8007d86:	f1b9 0f00 	cmp.w	r9, #0
 8007d8a:	d003      	beq.n	8007d94 <_scanf_i+0x10c>
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	f109 39ff 	add.w	r9, r9, #4294967295
 8007d92:	60a3      	str	r3, [r4, #8]
 8007d94:	6873      	ldr	r3, [r6, #4]
 8007d96:	3b01      	subs	r3, #1
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	6073      	str	r3, [r6, #4]
 8007d9c:	dd1b      	ble.n	8007dd6 <_scanf_i+0x14e>
 8007d9e:	6833      	ldr	r3, [r6, #0]
 8007da0:	3301      	adds	r3, #1
 8007da2:	6033      	str	r3, [r6, #0]
 8007da4:	68a3      	ldr	r3, [r4, #8]
 8007da6:	3b01      	subs	r3, #1
 8007da8:	60a3      	str	r3, [r4, #8]
 8007daa:	e7d9      	b.n	8007d60 <_scanf_i+0xd8>
 8007dac:	f1bb 0f02 	cmp.w	fp, #2
 8007db0:	d1ae      	bne.n	8007d10 <_scanf_i+0x88>
 8007db2:	6822      	ldr	r2, [r4, #0]
 8007db4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007db8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007dbc:	d1bf      	bne.n	8007d3e <_scanf_i+0xb6>
 8007dbe:	2310      	movs	r3, #16
 8007dc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007dc4:	6063      	str	r3, [r4, #4]
 8007dc6:	e7a2      	b.n	8007d0e <_scanf_i+0x86>
 8007dc8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8007dcc:	6022      	str	r2, [r4, #0]
 8007dce:	780b      	ldrb	r3, [r1, #0]
 8007dd0:	f805 3b01 	strb.w	r3, [r5], #1
 8007dd4:	e7de      	b.n	8007d94 <_scanf_i+0x10c>
 8007dd6:	4631      	mov	r1, r6
 8007dd8:	4650      	mov	r0, sl
 8007dda:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007dde:	4798      	blx	r3
 8007de0:	2800      	cmp	r0, #0
 8007de2:	d0df      	beq.n	8007da4 <_scanf_i+0x11c>
 8007de4:	6823      	ldr	r3, [r4, #0]
 8007de6:	05d9      	lsls	r1, r3, #23
 8007de8:	d50d      	bpl.n	8007e06 <_scanf_i+0x17e>
 8007dea:	42bd      	cmp	r5, r7
 8007dec:	d909      	bls.n	8007e02 <_scanf_i+0x17a>
 8007dee:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007df2:	4632      	mov	r2, r6
 8007df4:	4650      	mov	r0, sl
 8007df6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007dfa:	f105 39ff 	add.w	r9, r5, #4294967295
 8007dfe:	4798      	blx	r3
 8007e00:	464d      	mov	r5, r9
 8007e02:	42bd      	cmp	r5, r7
 8007e04:	d028      	beq.n	8007e58 <_scanf_i+0x1d0>
 8007e06:	6822      	ldr	r2, [r4, #0]
 8007e08:	f012 0210 	ands.w	r2, r2, #16
 8007e0c:	d113      	bne.n	8007e36 <_scanf_i+0x1ae>
 8007e0e:	702a      	strb	r2, [r5, #0]
 8007e10:	4639      	mov	r1, r7
 8007e12:	6863      	ldr	r3, [r4, #4]
 8007e14:	4650      	mov	r0, sl
 8007e16:	9e01      	ldr	r6, [sp, #4]
 8007e18:	47b0      	blx	r6
 8007e1a:	f8d8 3000 	ldr.w	r3, [r8]
 8007e1e:	6821      	ldr	r1, [r4, #0]
 8007e20:	1d1a      	adds	r2, r3, #4
 8007e22:	f8c8 2000 	str.w	r2, [r8]
 8007e26:	f011 0f20 	tst.w	r1, #32
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	d00f      	beq.n	8007e4e <_scanf_i+0x1c6>
 8007e2e:	6018      	str	r0, [r3, #0]
 8007e30:	68e3      	ldr	r3, [r4, #12]
 8007e32:	3301      	adds	r3, #1
 8007e34:	60e3      	str	r3, [r4, #12]
 8007e36:	2000      	movs	r0, #0
 8007e38:	1bed      	subs	r5, r5, r7
 8007e3a:	44ab      	add	fp, r5
 8007e3c:	6925      	ldr	r5, [r4, #16]
 8007e3e:	445d      	add	r5, fp
 8007e40:	6125      	str	r5, [r4, #16]
 8007e42:	b007      	add	sp, #28
 8007e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e48:	f04f 0b00 	mov.w	fp, #0
 8007e4c:	e7ca      	b.n	8007de4 <_scanf_i+0x15c>
 8007e4e:	07ca      	lsls	r2, r1, #31
 8007e50:	bf4c      	ite	mi
 8007e52:	8018      	strhmi	r0, [r3, #0]
 8007e54:	6018      	strpl	r0, [r3, #0]
 8007e56:	e7eb      	b.n	8007e30 <_scanf_i+0x1a8>
 8007e58:	2001      	movs	r0, #1
 8007e5a:	e7f2      	b.n	8007e42 <_scanf_i+0x1ba>
 8007e5c:	08008334 	.word	0x08008334
 8007e60:	08006911 	.word	0x08006911
 8007e64:	08008075 	.word	0x08008075
 8007e68:	080088e4 	.word	0x080088e4

08007e6c <__sccl>:
 8007e6c:	b570      	push	{r4, r5, r6, lr}
 8007e6e:	780b      	ldrb	r3, [r1, #0]
 8007e70:	4604      	mov	r4, r0
 8007e72:	2b5e      	cmp	r3, #94	; 0x5e
 8007e74:	bf13      	iteet	ne
 8007e76:	2200      	movne	r2, #0
 8007e78:	2201      	moveq	r2, #1
 8007e7a:	784b      	ldrbeq	r3, [r1, #1]
 8007e7c:	1c48      	addne	r0, r1, #1
 8007e7e:	bf08      	it	eq
 8007e80:	1c88      	addeq	r0, r1, #2
 8007e82:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8007e86:	1e61      	subs	r1, r4, #1
 8007e88:	f801 2f01 	strb.w	r2, [r1, #1]!
 8007e8c:	42a9      	cmp	r1, r5
 8007e8e:	d1fb      	bne.n	8007e88 <__sccl+0x1c>
 8007e90:	b90b      	cbnz	r3, 8007e96 <__sccl+0x2a>
 8007e92:	3801      	subs	r0, #1
 8007e94:	bd70      	pop	{r4, r5, r6, pc}
 8007e96:	f082 0101 	eor.w	r1, r2, #1
 8007e9a:	54e1      	strb	r1, [r4, r3]
 8007e9c:	1c42      	adds	r2, r0, #1
 8007e9e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8007ea2:	4610      	mov	r0, r2
 8007ea4:	2d2d      	cmp	r5, #45	; 0x2d
 8007ea6:	f102 36ff 	add.w	r6, r2, #4294967295
 8007eaa:	d006      	beq.n	8007eba <__sccl+0x4e>
 8007eac:	2d5d      	cmp	r5, #93	; 0x5d
 8007eae:	d0f1      	beq.n	8007e94 <__sccl+0x28>
 8007eb0:	b90d      	cbnz	r5, 8007eb6 <__sccl+0x4a>
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	e7ee      	b.n	8007e94 <__sccl+0x28>
 8007eb6:	462b      	mov	r3, r5
 8007eb8:	e7ef      	b.n	8007e9a <__sccl+0x2e>
 8007eba:	7816      	ldrb	r6, [r2, #0]
 8007ebc:	2e5d      	cmp	r6, #93	; 0x5d
 8007ebe:	d0fa      	beq.n	8007eb6 <__sccl+0x4a>
 8007ec0:	42b3      	cmp	r3, r6
 8007ec2:	dcf8      	bgt.n	8007eb6 <__sccl+0x4a>
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3001      	adds	r0, #1
 8007ec8:	4286      	cmp	r6, r0
 8007eca:	5421      	strb	r1, [r4, r0]
 8007ecc:	dcfb      	bgt.n	8007ec6 <__sccl+0x5a>
 8007ece:	43d8      	mvns	r0, r3
 8007ed0:	4430      	add	r0, r6
 8007ed2:	42b3      	cmp	r3, r6
 8007ed4:	bfa8      	it	ge
 8007ed6:	2000      	movge	r0, #0
 8007ed8:	1c5d      	adds	r5, r3, #1
 8007eda:	182b      	adds	r3, r5, r0
 8007edc:	3202      	adds	r2, #2
 8007ede:	e7de      	b.n	8007e9e <__sccl+0x32>

08007ee0 <_raise_r>:
 8007ee0:	291f      	cmp	r1, #31
 8007ee2:	b538      	push	{r3, r4, r5, lr}
 8007ee4:	4604      	mov	r4, r0
 8007ee6:	460d      	mov	r5, r1
 8007ee8:	d904      	bls.n	8007ef4 <_raise_r+0x14>
 8007eea:	2316      	movs	r3, #22
 8007eec:	6003      	str	r3, [r0, #0]
 8007eee:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef2:	bd38      	pop	{r3, r4, r5, pc}
 8007ef4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007ef6:	b112      	cbz	r2, 8007efe <_raise_r+0x1e>
 8007ef8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007efc:	b94b      	cbnz	r3, 8007f12 <_raise_r+0x32>
 8007efe:	4620      	mov	r0, r4
 8007f00:	f000 f830 	bl	8007f64 <_getpid_r>
 8007f04:	462a      	mov	r2, r5
 8007f06:	4601      	mov	r1, r0
 8007f08:	4620      	mov	r0, r4
 8007f0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f0e:	f000 b817 	b.w	8007f40 <_kill_r>
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d00a      	beq.n	8007f2c <_raise_r+0x4c>
 8007f16:	1c59      	adds	r1, r3, #1
 8007f18:	d103      	bne.n	8007f22 <_raise_r+0x42>
 8007f1a:	2316      	movs	r3, #22
 8007f1c:	6003      	str	r3, [r0, #0]
 8007f1e:	2001      	movs	r0, #1
 8007f20:	e7e7      	b.n	8007ef2 <_raise_r+0x12>
 8007f22:	2400      	movs	r4, #0
 8007f24:	4628      	mov	r0, r5
 8007f26:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007f2a:	4798      	blx	r3
 8007f2c:	2000      	movs	r0, #0
 8007f2e:	e7e0      	b.n	8007ef2 <_raise_r+0x12>

08007f30 <raise>:
 8007f30:	4b02      	ldr	r3, [pc, #8]	; (8007f3c <raise+0xc>)
 8007f32:	4601      	mov	r1, r0
 8007f34:	6818      	ldr	r0, [r3, #0]
 8007f36:	f7ff bfd3 	b.w	8007ee0 <_raise_r>
 8007f3a:	bf00      	nop
 8007f3c:	20000040 	.word	0x20000040

08007f40 <_kill_r>:
 8007f40:	b538      	push	{r3, r4, r5, lr}
 8007f42:	2300      	movs	r3, #0
 8007f44:	4d06      	ldr	r5, [pc, #24]	; (8007f60 <_kill_r+0x20>)
 8007f46:	4604      	mov	r4, r0
 8007f48:	4608      	mov	r0, r1
 8007f4a:	4611      	mov	r1, r2
 8007f4c:	602b      	str	r3, [r5, #0]
 8007f4e:	f7f9 f88e 	bl	800106e <_kill>
 8007f52:	1c43      	adds	r3, r0, #1
 8007f54:	d102      	bne.n	8007f5c <_kill_r+0x1c>
 8007f56:	682b      	ldr	r3, [r5, #0]
 8007f58:	b103      	cbz	r3, 8007f5c <_kill_r+0x1c>
 8007f5a:	6023      	str	r3, [r4, #0]
 8007f5c:	bd38      	pop	{r3, r4, r5, pc}
 8007f5e:	bf00      	nop
 8007f60:	200006f0 	.word	0x200006f0

08007f64 <_getpid_r>:
 8007f64:	f7f9 b87c 	b.w	8001060 <_getpid>

08007f68 <_strtol_l.isra.0>:
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f6e:	4686      	mov	lr, r0
 8007f70:	d001      	beq.n	8007f76 <_strtol_l.isra.0+0xe>
 8007f72:	2b24      	cmp	r3, #36	; 0x24
 8007f74:	d906      	bls.n	8007f84 <_strtol_l.isra.0+0x1c>
 8007f76:	f7fc ffad 	bl	8004ed4 <__errno>
 8007f7a:	2316      	movs	r3, #22
 8007f7c:	6003      	str	r3, [r0, #0]
 8007f7e:	2000      	movs	r0, #0
 8007f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f84:	468c      	mov	ip, r1
 8007f86:	4e3a      	ldr	r6, [pc, #232]	; (8008070 <_strtol_l.isra.0+0x108>)
 8007f88:	4660      	mov	r0, ip
 8007f8a:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8007f8e:	5da5      	ldrb	r5, [r4, r6]
 8007f90:	f015 0508 	ands.w	r5, r5, #8
 8007f94:	d1f8      	bne.n	8007f88 <_strtol_l.isra.0+0x20>
 8007f96:	2c2d      	cmp	r4, #45	; 0x2d
 8007f98:	d133      	bne.n	8008002 <_strtol_l.isra.0+0x9a>
 8007f9a:	f04f 0801 	mov.w	r8, #1
 8007f9e:	f89c 4000 	ldrb.w	r4, [ip]
 8007fa2:	f100 0c02 	add.w	ip, r0, #2
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d05d      	beq.n	8008066 <_strtol_l.isra.0+0xfe>
 8007faa:	2b10      	cmp	r3, #16
 8007fac:	d10c      	bne.n	8007fc8 <_strtol_l.isra.0+0x60>
 8007fae:	2c30      	cmp	r4, #48	; 0x30
 8007fb0:	d10a      	bne.n	8007fc8 <_strtol_l.isra.0+0x60>
 8007fb2:	f89c 0000 	ldrb.w	r0, [ip]
 8007fb6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007fba:	2858      	cmp	r0, #88	; 0x58
 8007fbc:	d14e      	bne.n	800805c <_strtol_l.isra.0+0xf4>
 8007fbe:	2310      	movs	r3, #16
 8007fc0:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8007fc4:	f10c 0c02 	add.w	ip, ip, #2
 8007fc8:	2500      	movs	r5, #0
 8007fca:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8007fce:	3f01      	subs	r7, #1
 8007fd0:	fbb7 f9f3 	udiv	r9, r7, r3
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	fb03 7a19 	mls	sl, r3, r9, r7
 8007fda:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8007fde:	2e09      	cmp	r6, #9
 8007fe0:	d818      	bhi.n	8008014 <_strtol_l.isra.0+0xac>
 8007fe2:	4634      	mov	r4, r6
 8007fe4:	42a3      	cmp	r3, r4
 8007fe6:	dd24      	ble.n	8008032 <_strtol_l.isra.0+0xca>
 8007fe8:	2d00      	cmp	r5, #0
 8007fea:	db1f      	blt.n	800802c <_strtol_l.isra.0+0xc4>
 8007fec:	4581      	cmp	r9, r0
 8007fee:	d31d      	bcc.n	800802c <_strtol_l.isra.0+0xc4>
 8007ff0:	d101      	bne.n	8007ff6 <_strtol_l.isra.0+0x8e>
 8007ff2:	45a2      	cmp	sl, r4
 8007ff4:	db1a      	blt.n	800802c <_strtol_l.isra.0+0xc4>
 8007ff6:	2501      	movs	r5, #1
 8007ff8:	fb00 4003 	mla	r0, r0, r3, r4
 8007ffc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8008000:	e7eb      	b.n	8007fda <_strtol_l.isra.0+0x72>
 8008002:	2c2b      	cmp	r4, #43	; 0x2b
 8008004:	bf08      	it	eq
 8008006:	f89c 4000 	ldrbeq.w	r4, [ip]
 800800a:	46a8      	mov	r8, r5
 800800c:	bf08      	it	eq
 800800e:	f100 0c02 	addeq.w	ip, r0, #2
 8008012:	e7c8      	b.n	8007fa6 <_strtol_l.isra.0+0x3e>
 8008014:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8008018:	2e19      	cmp	r6, #25
 800801a:	d801      	bhi.n	8008020 <_strtol_l.isra.0+0xb8>
 800801c:	3c37      	subs	r4, #55	; 0x37
 800801e:	e7e1      	b.n	8007fe4 <_strtol_l.isra.0+0x7c>
 8008020:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8008024:	2e19      	cmp	r6, #25
 8008026:	d804      	bhi.n	8008032 <_strtol_l.isra.0+0xca>
 8008028:	3c57      	subs	r4, #87	; 0x57
 800802a:	e7db      	b.n	8007fe4 <_strtol_l.isra.0+0x7c>
 800802c:	f04f 35ff 	mov.w	r5, #4294967295
 8008030:	e7e4      	b.n	8007ffc <_strtol_l.isra.0+0x94>
 8008032:	2d00      	cmp	r5, #0
 8008034:	da08      	bge.n	8008048 <_strtol_l.isra.0+0xe0>
 8008036:	2322      	movs	r3, #34	; 0x22
 8008038:	4638      	mov	r0, r7
 800803a:	f8ce 3000 	str.w	r3, [lr]
 800803e:	2a00      	cmp	r2, #0
 8008040:	d09e      	beq.n	8007f80 <_strtol_l.isra.0+0x18>
 8008042:	f10c 31ff 	add.w	r1, ip, #4294967295
 8008046:	e007      	b.n	8008058 <_strtol_l.isra.0+0xf0>
 8008048:	f1b8 0f00 	cmp.w	r8, #0
 800804c:	d000      	beq.n	8008050 <_strtol_l.isra.0+0xe8>
 800804e:	4240      	negs	r0, r0
 8008050:	2a00      	cmp	r2, #0
 8008052:	d095      	beq.n	8007f80 <_strtol_l.isra.0+0x18>
 8008054:	2d00      	cmp	r5, #0
 8008056:	d1f4      	bne.n	8008042 <_strtol_l.isra.0+0xda>
 8008058:	6011      	str	r1, [r2, #0]
 800805a:	e791      	b.n	8007f80 <_strtol_l.isra.0+0x18>
 800805c:	2430      	movs	r4, #48	; 0x30
 800805e:	2b00      	cmp	r3, #0
 8008060:	d1b2      	bne.n	8007fc8 <_strtol_l.isra.0+0x60>
 8008062:	2308      	movs	r3, #8
 8008064:	e7b0      	b.n	8007fc8 <_strtol_l.isra.0+0x60>
 8008066:	2c30      	cmp	r4, #48	; 0x30
 8008068:	d0a3      	beq.n	8007fb2 <_strtol_l.isra.0+0x4a>
 800806a:	230a      	movs	r3, #10
 800806c:	e7ac      	b.n	8007fc8 <_strtol_l.isra.0+0x60>
 800806e:	bf00      	nop
 8008070:	080087c1 	.word	0x080087c1

08008074 <_strtol_r>:
 8008074:	f7ff bf78 	b.w	8007f68 <_strtol_l.isra.0>

08008078 <__submore>:
 8008078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800807c:	460c      	mov	r4, r1
 800807e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008080:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008084:	4299      	cmp	r1, r3
 8008086:	d11b      	bne.n	80080c0 <__submore+0x48>
 8008088:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800808c:	f7fd faa6 	bl	80055dc <_malloc_r>
 8008090:	b918      	cbnz	r0, 800809a <__submore+0x22>
 8008092:	f04f 30ff 	mov.w	r0, #4294967295
 8008096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800809a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800809e:	63a3      	str	r3, [r4, #56]	; 0x38
 80080a0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80080a4:	6360      	str	r0, [r4, #52]	; 0x34
 80080a6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80080aa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80080ae:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80080b2:	7043      	strb	r3, [r0, #1]
 80080b4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80080b8:	7003      	strb	r3, [r0, #0]
 80080ba:	6020      	str	r0, [r4, #0]
 80080bc:	2000      	movs	r0, #0
 80080be:	e7ea      	b.n	8008096 <__submore+0x1e>
 80080c0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80080c2:	0077      	lsls	r7, r6, #1
 80080c4:	463a      	mov	r2, r7
 80080c6:	f7ff f95d 	bl	8007384 <_realloc_r>
 80080ca:	4605      	mov	r5, r0
 80080cc:	2800      	cmp	r0, #0
 80080ce:	d0e0      	beq.n	8008092 <__submore+0x1a>
 80080d0:	eb00 0806 	add.w	r8, r0, r6
 80080d4:	4601      	mov	r1, r0
 80080d6:	4632      	mov	r2, r6
 80080d8:	4640      	mov	r0, r8
 80080da:	f7ff f91f 	bl	800731c <memcpy>
 80080de:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80080e2:	f8c4 8000 	str.w	r8, [r4]
 80080e6:	e7e9      	b.n	80080bc <__submore+0x44>

080080e8 <_gettimeofday>:
 80080e8:	2258      	movs	r2, #88	; 0x58
 80080ea:	4b02      	ldr	r3, [pc, #8]	; (80080f4 <_gettimeofday+0xc>)
 80080ec:	f04f 30ff 	mov.w	r0, #4294967295
 80080f0:	601a      	str	r2, [r3, #0]
 80080f2:	4770      	bx	lr
 80080f4:	200006f0 	.word	0x200006f0

080080f8 <_init>:
 80080f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080fa:	bf00      	nop
 80080fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080fe:	bc08      	pop	{r3}
 8008100:	469e      	mov	lr, r3
 8008102:	4770      	bx	lr

08008104 <_fini>:
 8008104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008106:	bf00      	nop
 8008108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800810a:	bc08      	pop	{r3}
 800810c:	469e      	mov	lr, r3
 800810e:	4770      	bx	lr
