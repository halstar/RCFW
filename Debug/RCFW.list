
RCFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f6c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003150  08003150  00013150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003178  08003178  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08003178  08003178  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003178  08003178  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003178  08003178  00013178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800317c  0800317c  0001317c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08003180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000030  080031b0  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d0  080031b0  000202d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7b6  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000218f  00000000  00000000  0002d80f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d08  00000000  00000000  0002f9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c20  00000000  00000000  000306a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001954f  00000000  00000000  000312c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eda5  00000000  00000000  0004a817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000956fe  00000000  00000000  000595bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eecba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003520  00000000  00000000  000eed10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000030 	.word	0x20000030
 8000200:	00000000 	.word	0x00000000
 8000204:	08003138 	.word	0x08003138

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000034 	.word	0x20000034
 8000220:	08003138 	.word	0x08003138

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000228:	f000 fb44 	bl	80008b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022c:	f000 f820 	bl	8000270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000230:	f000 f94c 	bl	80004cc <MX_GPIO_Init>
  MX_TIM1_Init();
 8000234:	f000 f858 	bl	80002e8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000238:	f000 f8a8 	bl	800038c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800023c:	f000 f8f2 	bl	8000424 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000240:	f000 f91a 	bl	8000478 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Initialize Timer 1 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000244:	4808      	ldr	r0, [pc, #32]	; (8000268 <main+0x44>)
 8000246:	f001 fc23 	bl	8001a90 <HAL_TIM_Base_Start_IT>

  /* Initialize Timer 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800024a:	4808      	ldr	r0, [pc, #32]	; (800026c <main+0x48>)
 800024c:	f001 fc20 	bl	8001a90 <HAL_TIM_Base_Start_IT>
  UTILS_delayUsInit    (&htim2);
 8000250:	4806      	ldr	r0, [pc, #24]	; (800026c <main+0x48>)
 8000252:	f002 ff1d 	bl	8003090 <UTILS_delayUsInit>

  /* Initialize bluetooth control module */
  BLUETOOTH_CONTROL_init();
 8000256:	f002 fe83 	bl	8002f60 <BLUETOOTH_CONTROL_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    BLUETOOTH_CONTROL_receiveData();
 800025a:	f002 fec7 	bl	8002fec <BLUETOOTH_CONTROL_receiveData>
    UTILS_delayUs(10000);
 800025e:	f242 7010 	movw	r0, #10000	; 0x2710
 8000262:	f002 ff23 	bl	80030ac <UTILS_delayUs>
    BLUETOOTH_CONTROL_receiveData();
 8000266:	e7f8      	b.n	800025a <main+0x36>
 8000268:	200000e4 	.word	0x200000e4
 800026c:	20000198 	.word	0x20000198

08000270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b090      	sub	sp, #64	; 0x40
 8000274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000276:	f107 0318 	add.w	r3, r7, #24
 800027a:	2228      	movs	r2, #40	; 0x28
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f002 ff52 	bl	8003128 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	605a      	str	r2, [r3, #4]
 800028c:	609a      	str	r2, [r3, #8]
 800028e:	60da      	str	r2, [r3, #12]
 8000290:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000292:	2302      	movs	r3, #2
 8000294:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000296:	2301      	movs	r3, #1
 8000298:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029a:	2310      	movs	r3, #16
 800029c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800029e:	2300      	movs	r3, #0
 80002a0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a2:	f107 0318 	add.w	r3, r7, #24
 80002a6:	4618      	mov	r0, r3
 80002a8:	f000 ff7c 	bl	80011a4 <HAL_RCC_OscConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002b2:	f000 f977 	bl	80005a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b6:	230f      	movs	r3, #15
 80002b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	2100      	movs	r1, #0
 80002ce:	4618      	mov	r0, r3
 80002d0:	f001 f9e8 	bl	80016a4 <HAL_RCC_ClockConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002da:	f000 f963 	bl	80005a4 <Error_Handler>
  }
}
 80002de:	bf00      	nop
 80002e0:	3740      	adds	r7, #64	; 0x40
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b086      	sub	sp, #24
 80002ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002ee:	f107 0308 	add.w	r3, r7, #8
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	605a      	str	r2, [r3, #4]
 80002f8:	609a      	str	r2, [r3, #8]
 80002fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002fc:	463b      	mov	r3, r7
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
 8000302:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000304:	4b1f      	ldr	r3, [pc, #124]	; (8000384 <MX_TIM1_Init+0x9c>)
 8000306:	4a20      	ldr	r2, [pc, #128]	; (8000388 <MX_TIM1_Init+0xa0>)
 8000308:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 800030a:	4b1e      	ldr	r3, [pc, #120]	; (8000384 <MX_TIM1_Init+0x9c>)
 800030c:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000310:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000312:	4b1c      	ldr	r3, [pc, #112]	; (8000384 <MX_TIM1_Init+0x9c>)
 8000314:	2200      	movs	r2, #0
 8000316:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000318:	4b1a      	ldr	r3, [pc, #104]	; (8000384 <MX_TIM1_Init+0x9c>)
 800031a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800031e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000320:	4b18      	ldr	r3, [pc, #96]	; (8000384 <MX_TIM1_Init+0x9c>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000326:	4b17      	ldr	r3, [pc, #92]	; (8000384 <MX_TIM1_Init+0x9c>)
 8000328:	2200      	movs	r2, #0
 800032a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800032c:	4b15      	ldr	r3, [pc, #84]	; (8000384 <MX_TIM1_Init+0x9c>)
 800032e:	2280      	movs	r2, #128	; 0x80
 8000330:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000332:	4814      	ldr	r0, [pc, #80]	; (8000384 <MX_TIM1_Init+0x9c>)
 8000334:	f001 fb50 	bl	80019d8 <HAL_TIM_Base_Init>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800033e:	f000 f931 	bl	80005a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000346:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000348:	f107 0308 	add.w	r3, r7, #8
 800034c:	4619      	mov	r1, r3
 800034e:	480d      	ldr	r0, [pc, #52]	; (8000384 <MX_TIM1_Init+0x9c>)
 8000350:	f001 fd26 	bl	8001da0 <HAL_TIM_ConfigClockSource>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800035a:	f000 f923 	bl	80005a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800035e:	2300      	movs	r3, #0
 8000360:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000362:	2300      	movs	r3, #0
 8000364:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000366:	463b      	mov	r3, r7
 8000368:	4619      	mov	r1, r3
 800036a:	4806      	ldr	r0, [pc, #24]	; (8000384 <MX_TIM1_Init+0x9c>)
 800036c:	f001 ff96 	bl	800229c <HAL_TIMEx_MasterConfigSynchronization>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000376:	f000 f915 	bl	80005a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800037a:	bf00      	nop
 800037c:	3718      	adds	r7, #24
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	200000e4 	.word	0x200000e4
 8000388:	40012c00 	.word	0x40012c00

0800038c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b086      	sub	sp, #24
 8000390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000392:	f107 0308 	add.w	r3, r7, #8
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
 800039a:	605a      	str	r2, [r3, #4]
 800039c:	609a      	str	r2, [r3, #8]
 800039e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003a0:	463b      	mov	r3, r7
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003a8:	4b1d      	ldr	r3, [pc, #116]	; (8000420 <MX_TIM2_Init+0x94>)
 80003aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 80003b0:	4b1b      	ldr	r3, [pc, #108]	; (8000420 <MX_TIM2_Init+0x94>)
 80003b2:	2207      	movs	r2, #7
 80003b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003b6:	4b1a      	ldr	r3, [pc, #104]	; (8000420 <MX_TIM2_Init+0x94>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80003bc:	4b18      	ldr	r3, [pc, #96]	; (8000420 <MX_TIM2_Init+0x94>)
 80003be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003c2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003c4:	4b16      	ldr	r3, [pc, #88]	; (8000420 <MX_TIM2_Init+0x94>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003ca:	4b15      	ldr	r3, [pc, #84]	; (8000420 <MX_TIM2_Init+0x94>)
 80003cc:	2280      	movs	r2, #128	; 0x80
 80003ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003d0:	4813      	ldr	r0, [pc, #76]	; (8000420 <MX_TIM2_Init+0x94>)
 80003d2:	f001 fb01 	bl	80019d8 <HAL_TIM_Base_Init>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80003dc:	f000 f8e2 	bl	80005a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003e6:	f107 0308 	add.w	r3, r7, #8
 80003ea:	4619      	mov	r1, r3
 80003ec:	480c      	ldr	r0, [pc, #48]	; (8000420 <MX_TIM2_Init+0x94>)
 80003ee:	f001 fcd7 	bl	8001da0 <HAL_TIM_ConfigClockSource>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80003f8:	f000 f8d4 	bl	80005a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003fc:	2300      	movs	r3, #0
 80003fe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000400:	2300      	movs	r3, #0
 8000402:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000404:	463b      	mov	r3, r7
 8000406:	4619      	mov	r1, r3
 8000408:	4805      	ldr	r0, [pc, #20]	; (8000420 <MX_TIM2_Init+0x94>)
 800040a:	f001 ff47 	bl	800229c <HAL_TIMEx_MasterConfigSynchronization>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000414:	f000 f8c6 	bl	80005a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000418:	bf00      	nop
 800041a:	3718      	adds	r7, #24
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	20000198 	.word	0x20000198

08000424 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000428:	4b11      	ldr	r3, [pc, #68]	; (8000470 <MX_USART1_UART_Init+0x4c>)
 800042a:	4a12      	ldr	r2, [pc, #72]	; (8000474 <MX_USART1_UART_Init+0x50>)
 800042c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800042e:	4b10      	ldr	r3, [pc, #64]	; (8000470 <MX_USART1_UART_Init+0x4c>)
 8000430:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000434:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000436:	4b0e      	ldr	r3, [pc, #56]	; (8000470 <MX_USART1_UART_Init+0x4c>)
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800043c:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <MX_USART1_UART_Init+0x4c>)
 800043e:	2200      	movs	r2, #0
 8000440:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000442:	4b0b      	ldr	r3, [pc, #44]	; (8000470 <MX_USART1_UART_Init+0x4c>)
 8000444:	2200      	movs	r2, #0
 8000446:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000448:	4b09      	ldr	r3, [pc, #36]	; (8000470 <MX_USART1_UART_Init+0x4c>)
 800044a:	220c      	movs	r2, #12
 800044c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800044e:	4b08      	ldr	r3, [pc, #32]	; (8000470 <MX_USART1_UART_Init+0x4c>)
 8000450:	2200      	movs	r2, #0
 8000452:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000454:	4b06      	ldr	r3, [pc, #24]	; (8000470 <MX_USART1_UART_Init+0x4c>)
 8000456:	2200      	movs	r2, #0
 8000458:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800045a:	4805      	ldr	r0, [pc, #20]	; (8000470 <MX_USART1_UART_Init+0x4c>)
 800045c:	f001 ffa6 	bl	80023ac <HAL_UART_Init>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000466:	f000 f89d 	bl	80005a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	20000070 	.word	0x20000070
 8000474:	40013800 	.word	0x40013800

08000478 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800047c:	4b11      	ldr	r3, [pc, #68]	; (80004c4 <MX_USART2_UART_Init+0x4c>)
 800047e:	4a12      	ldr	r2, [pc, #72]	; (80004c8 <MX_USART2_UART_Init+0x50>)
 8000480:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000482:	4b10      	ldr	r3, [pc, #64]	; (80004c4 <MX_USART2_UART_Init+0x4c>)
 8000484:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000488:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800048a:	4b0e      	ldr	r3, [pc, #56]	; (80004c4 <MX_USART2_UART_Init+0x4c>)
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000490:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <MX_USART2_UART_Init+0x4c>)
 8000492:	2200      	movs	r2, #0
 8000494:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000496:	4b0b      	ldr	r3, [pc, #44]	; (80004c4 <MX_USART2_UART_Init+0x4c>)
 8000498:	2200      	movs	r2, #0
 800049a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800049c:	4b09      	ldr	r3, [pc, #36]	; (80004c4 <MX_USART2_UART_Init+0x4c>)
 800049e:	220c      	movs	r2, #12
 80004a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004a2:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <MX_USART2_UART_Init+0x4c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <MX_USART2_UART_Init+0x4c>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004ae:	4805      	ldr	r0, [pc, #20]	; (80004c4 <MX_USART2_UART_Init+0x4c>)
 80004b0:	f001 ff7c 	bl	80023ac <HAL_UART_Init>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80004ba:	f000 f873 	bl	80005a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	2000024c 	.word	0x2000024c
 80004c8:	40004400 	.word	0x40004400

080004cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b086      	sub	sp, #24
 80004d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 0308 	add.w	r3, r7, #8
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e0:	4b18      	ldr	r3, [pc, #96]	; (8000544 <MX_GPIO_Init+0x78>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	4a17      	ldr	r2, [pc, #92]	; (8000544 <MX_GPIO_Init+0x78>)
 80004e6:	f043 0310 	orr.w	r3, r3, #16
 80004ea:	6193      	str	r3, [r2, #24]
 80004ec:	4b15      	ldr	r3, [pc, #84]	; (8000544 <MX_GPIO_Init+0x78>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	f003 0310 	and.w	r3, r3, #16
 80004f4:	607b      	str	r3, [r7, #4]
 80004f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f8:	4b12      	ldr	r3, [pc, #72]	; (8000544 <MX_GPIO_Init+0x78>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	4a11      	ldr	r2, [pc, #68]	; (8000544 <MX_GPIO_Init+0x78>)
 80004fe:	f043 0304 	orr.w	r3, r3, #4
 8000502:	6193      	str	r3, [r2, #24]
 8000504:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <MX_GPIO_Init+0x78>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	f003 0304 	and.w	r3, r3, #4
 800050c:	603b      	str	r3, [r7, #0]
 800050e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000516:	480c      	ldr	r0, [pc, #48]	; (8000548 <MX_GPIO_Init+0x7c>)
 8000518:	f000 fe12 	bl	8001140 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 800051c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000520:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000522:	2301      	movs	r3, #1
 8000524:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000526:	2300      	movs	r3, #0
 8000528:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052a:	2302      	movs	r3, #2
 800052c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 800052e:	f107 0308 	add.w	r3, r7, #8
 8000532:	4619      	mov	r1, r3
 8000534:	4804      	ldr	r0, [pc, #16]	; (8000548 <MX_GPIO_Init+0x7c>)
 8000536:	f000 fc6f 	bl	8000e18 <HAL_GPIO_Init>

}
 800053a:	bf00      	nop
 800053c:	3718      	adds	r7, #24
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40021000 	.word	0x40021000
 8000548:	40011000 	.word	0x40011000

0800054c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  /* Check the handle of the timer triggering this callback and toggle LED */
  if (htim == &htim1)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	4a04      	ldr	r2, [pc, #16]	; (8000568 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d101      	bne.n	8000560 <HAL_TIM_PeriodElapsedCallback+0x14>
  {
    LED_toggle();
 800055c:	f002 fd7c 	bl	8003058 <LED_toggle>
  }
  else
  {
    ; /* Nothing to do */
  }
}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	200000e4 	.word	0x200000e4

0800056c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  /* Check the handle of the UART triggering this callback and actually receive date */
  if (huart == &huart1)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4a09      	ldr	r2, [pc, #36]	; (800059c <HAL_UART_RxCpltCallback+0x30>)
 8000578:	4293      	cmp	r3, r2
 800057a:	d103      	bne.n	8000584 <HAL_UART_RxCpltCallback+0x18>
  {
    CONSOLE_receiveData(&huart1);
 800057c:	4807      	ldr	r0, [pc, #28]	; (800059c <HAL_UART_RxCpltCallback+0x30>)
 800057e:	f002 fd5b 	bl	8003038 <CONSOLE_receiveData>
  }
  else
  {
    ; /* Nothing to do */
  }
}
 8000582:	e006      	b.n	8000592 <HAL_UART_RxCpltCallback+0x26>
  else if (huart == &huart2)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4a06      	ldr	r2, [pc, #24]	; (80005a0 <HAL_UART_RxCpltCallback+0x34>)
 8000588:	4293      	cmp	r3, r2
 800058a:	d102      	bne.n	8000592 <HAL_UART_RxCpltCallback+0x26>
    MASTER_CONTROL_receiveData(&huart2);
 800058c:	4804      	ldr	r0, [pc, #16]	; (80005a0 <HAL_UART_RxCpltCallback+0x34>)
 800058e:	f002 fd6f 	bl	8003070 <MASTER_CONTROL_receiveData>
}
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000070 	.word	0x20000070
 80005a0:	2000024c 	.word	0x2000024c

080005a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a8:	b672      	cpsid	i
}
 80005aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ac:	e7fe      	b.n	80005ac <Error_Handler+0x8>
	...

080005b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005b6:	4b15      	ldr	r3, [pc, #84]	; (800060c <HAL_MspInit+0x5c>)
 80005b8:	699b      	ldr	r3, [r3, #24]
 80005ba:	4a14      	ldr	r2, [pc, #80]	; (800060c <HAL_MspInit+0x5c>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	6193      	str	r3, [r2, #24]
 80005c2:	4b12      	ldr	r3, [pc, #72]	; (800060c <HAL_MspInit+0x5c>)
 80005c4:	699b      	ldr	r3, [r3, #24]
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ce:	4b0f      	ldr	r3, [pc, #60]	; (800060c <HAL_MspInit+0x5c>)
 80005d0:	69db      	ldr	r3, [r3, #28]
 80005d2:	4a0e      	ldr	r2, [pc, #56]	; (800060c <HAL_MspInit+0x5c>)
 80005d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d8:	61d3      	str	r3, [r2, #28]
 80005da:	4b0c      	ldr	r3, [pc, #48]	; (800060c <HAL_MspInit+0x5c>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <HAL_MspInit+0x60>)
 80005e8:	685b      	ldr	r3, [r3, #4]
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	4a04      	ldr	r2, [pc, #16]	; (8000610 <HAL_MspInit+0x60>)
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr
 800060c:	40021000 	.word	0x40021000
 8000610:	40010000 	.word	0x40010000

08000614 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a1a      	ldr	r2, [pc, #104]	; (800068c <HAL_TIM_Base_MspInit+0x78>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d114      	bne.n	8000650 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000626:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <HAL_TIM_Base_MspInit+0x7c>)
 8000628:	699b      	ldr	r3, [r3, #24]
 800062a:	4a19      	ldr	r2, [pc, #100]	; (8000690 <HAL_TIM_Base_MspInit+0x7c>)
 800062c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000630:	6193      	str	r3, [r2, #24]
 8000632:	4b17      	ldr	r3, [pc, #92]	; (8000690 <HAL_TIM_Base_MspInit+0x7c>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 4, 0);
 800063e:	2200      	movs	r2, #0
 8000640:	2104      	movs	r1, #4
 8000642:	2019      	movs	r0, #25
 8000644:	f000 fa6f 	bl	8000b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000648:	2019      	movs	r0, #25
 800064a:	f000 fa88 	bl	8000b5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800064e:	e018      	b.n	8000682 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000658:	d113      	bne.n	8000682 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800065a:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <HAL_TIM_Base_MspInit+0x7c>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	4a0c      	ldr	r2, [pc, #48]	; (8000690 <HAL_TIM_Base_MspInit+0x7c>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	61d3      	str	r3, [r2, #28]
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <HAL_TIM_Base_MspInit+0x7c>)
 8000668:	69db      	ldr	r3, [r3, #28]
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	2101      	movs	r1, #1
 8000676:	201c      	movs	r0, #28
 8000678:	f000 fa55 	bl	8000b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800067c:	201c      	movs	r0, #28
 800067e:	f000 fa6e 	bl	8000b5e <HAL_NVIC_EnableIRQ>
}
 8000682:	bf00      	nop
 8000684:	3710      	adds	r7, #16
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40012c00 	.word	0x40012c00
 8000690:	40021000 	.word	0x40021000

08000694 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08a      	sub	sp, #40	; 0x28
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069c:	f107 0318 	add.w	r3, r7, #24
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a3f      	ldr	r2, [pc, #252]	; (80007ac <HAL_UART_MspInit+0x118>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d13a      	bne.n	800072a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006b4:	4b3e      	ldr	r3, [pc, #248]	; (80007b0 <HAL_UART_MspInit+0x11c>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	4a3d      	ldr	r2, [pc, #244]	; (80007b0 <HAL_UART_MspInit+0x11c>)
 80006ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006be:	6193      	str	r3, [r2, #24]
 80006c0:	4b3b      	ldr	r3, [pc, #236]	; (80007b0 <HAL_UART_MspInit+0x11c>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c8:	617b      	str	r3, [r7, #20]
 80006ca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006cc:	4b38      	ldr	r3, [pc, #224]	; (80007b0 <HAL_UART_MspInit+0x11c>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a37      	ldr	r2, [pc, #220]	; (80007b0 <HAL_UART_MspInit+0x11c>)
 80006d2:	f043 0304 	orr.w	r3, r3, #4
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b35      	ldr	r3, [pc, #212]	; (80007b0 <HAL_UART_MspInit+0x11c>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f003 0304 	and.w	r3, r3, #4
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ea:	2302      	movs	r3, #2
 80006ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ee:	2303      	movs	r3, #3
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f2:	f107 0318 	add.w	r3, r7, #24
 80006f6:	4619      	mov	r1, r3
 80006f8:	482e      	ldr	r0, [pc, #184]	; (80007b4 <HAL_UART_MspInit+0x120>)
 80006fa:	f000 fb8d 	bl	8000e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000704:	2300      	movs	r3, #0
 8000706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070c:	f107 0318 	add.w	r3, r7, #24
 8000710:	4619      	mov	r1, r3
 8000712:	4828      	ldr	r0, [pc, #160]	; (80007b4 <HAL_UART_MspInit+0x120>)
 8000714:	f000 fb80 	bl	8000e18 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8000718:	2200      	movs	r2, #0
 800071a:	2103      	movs	r1, #3
 800071c:	2025      	movs	r0, #37	; 0x25
 800071e:	f000 fa02 	bl	8000b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000722:	2025      	movs	r0, #37	; 0x25
 8000724:	f000 fa1b 	bl	8000b5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000728:	e03c      	b.n	80007a4 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a22      	ldr	r2, [pc, #136]	; (80007b8 <HAL_UART_MspInit+0x124>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d137      	bne.n	80007a4 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000734:	4b1e      	ldr	r3, [pc, #120]	; (80007b0 <HAL_UART_MspInit+0x11c>)
 8000736:	69db      	ldr	r3, [r3, #28]
 8000738:	4a1d      	ldr	r2, [pc, #116]	; (80007b0 <HAL_UART_MspInit+0x11c>)
 800073a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800073e:	61d3      	str	r3, [r2, #28]
 8000740:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <HAL_UART_MspInit+0x11c>)
 8000742:	69db      	ldr	r3, [r3, #28]
 8000744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800074c:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <HAL_UART_MspInit+0x11c>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	4a17      	ldr	r2, [pc, #92]	; (80007b0 <HAL_UART_MspInit+0x11c>)
 8000752:	f043 0304 	orr.w	r3, r3, #4
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <HAL_UART_MspInit+0x11c>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f003 0304 	and.w	r3, r3, #4
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000764:	2304      	movs	r3, #4
 8000766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000768:	2302      	movs	r3, #2
 800076a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800076c:	2303      	movs	r3, #3
 800076e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000770:	f107 0318 	add.w	r3, r7, #24
 8000774:	4619      	mov	r1, r3
 8000776:	480f      	ldr	r0, [pc, #60]	; (80007b4 <HAL_UART_MspInit+0x120>)
 8000778:	f000 fb4e 	bl	8000e18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800077c:	2308      	movs	r3, #8
 800077e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	f107 0318 	add.w	r3, r7, #24
 800078c:	4619      	mov	r1, r3
 800078e:	4809      	ldr	r0, [pc, #36]	; (80007b4 <HAL_UART_MspInit+0x120>)
 8000790:	f000 fb42 	bl	8000e18 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	2102      	movs	r1, #2
 8000798:	2026      	movs	r0, #38	; 0x26
 800079a:	f000 f9c4 	bl	8000b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800079e:	2026      	movs	r0, #38	; 0x26
 80007a0:	f000 f9dd 	bl	8000b5e <HAL_NVIC_EnableIRQ>
}
 80007a4:	bf00      	nop
 80007a6:	3728      	adds	r7, #40	; 0x28
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40013800 	.word	0x40013800
 80007b0:	40021000 	.word	0x40021000
 80007b4:	40010800 	.word	0x40010800
 80007b8:	40004400 	.word	0x40004400

080007bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <NMI_Handler+0x4>

080007c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c6:	e7fe      	b.n	80007c6 <HardFault_Handler+0x4>

080007c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <MemManage_Handler+0x4>

080007ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <BusFault_Handler+0x4>

080007d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <UsageFault_Handler+0x4>

080007da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr

080007e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr

080007f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr

080007fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000802:	f000 f89d 	bl	8000940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
	...

0800080c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000810:	4802      	ldr	r0, [pc, #8]	; (800081c <TIM1_UP_IRQHandler+0x10>)
 8000812:	f001 f99d 	bl	8001b50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200000e4 	.word	0x200000e4

08000820 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000824:	4802      	ldr	r0, [pc, #8]	; (8000830 <TIM2_IRQHandler+0x10>)
 8000826:	f001 f993 	bl	8001b50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000198 	.word	0x20000198

08000834 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000838:	4802      	ldr	r0, [pc, #8]	; (8000844 <USART1_IRQHandler+0x10>)
 800083a:	f001 fe41 	bl	80024c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000070 	.word	0x20000070

08000848 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800084c:	4802      	ldr	r0, [pc, #8]	; (8000858 <USART2_IRQHandler+0x10>)
 800084e:	f001 fe37 	bl	80024c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	2000024c 	.word	0x2000024c

0800085c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr

08000868 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000868:	480c      	ldr	r0, [pc, #48]	; (800089c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800086a:	490d      	ldr	r1, [pc, #52]	; (80008a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800086c:	4a0d      	ldr	r2, [pc, #52]	; (80008a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000870:	e002      	b.n	8000878 <LoopCopyDataInit>

08000872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000876:	3304      	adds	r3, #4

08000878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800087a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800087c:	d3f9      	bcc.n	8000872 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087e:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000880:	4c0a      	ldr	r4, [pc, #40]	; (80008ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000884:	e001      	b.n	800088a <LoopFillZerobss>

08000886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000888:	3204      	adds	r2, #4

0800088a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800088a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800088c:	d3fb      	bcc.n	8000886 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800088e:	f7ff ffe5 	bl	800085c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000892:	f002 fc25 	bl	80030e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000896:	f7ff fcc5 	bl	8000224 <main>
  bx lr
 800089a:	4770      	bx	lr
  ldr r0, =_sdata
 800089c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a0:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 80008a4:	08003180 	.word	0x08003180
  ldr r2, =_sbss
 80008a8:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80008ac:	200002d0 	.word	0x200002d0

080008b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008b0:	e7fe      	b.n	80008b0 <ADC1_2_IRQHandler>
	...

080008b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <HAL_Init+0x28>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a07      	ldr	r2, [pc, #28]	; (80008dc <HAL_Init+0x28>)
 80008be:	f043 0310 	orr.w	r3, r3, #16
 80008c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008c4:	2003      	movs	r0, #3
 80008c6:	f000 f923 	bl	8000b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ca:	2000      	movs	r0, #0
 80008cc:	f000 f808 	bl	80008e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008d0:	f7ff fe6e 	bl	80005b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40022000 	.word	0x40022000

080008e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <HAL_InitTick+0x54>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4b12      	ldr	r3, [pc, #72]	; (8000938 <HAL_InitTick+0x58>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	4619      	mov	r1, r3
 80008f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80008fe:	4618      	mov	r0, r3
 8000900:	f000 f93b 	bl	8000b7a <HAL_SYSTICK_Config>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
 800090c:	e00e      	b.n	800092c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b0f      	cmp	r3, #15
 8000912:	d80a      	bhi.n	800092a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000914:	2200      	movs	r2, #0
 8000916:	6879      	ldr	r1, [r7, #4]
 8000918:	f04f 30ff 	mov.w	r0, #4294967295
 800091c:	f000 f903 	bl	8000b26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000920:	4a06      	ldr	r2, [pc, #24]	; (800093c <HAL_InitTick+0x5c>)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000926:	2300      	movs	r3, #0
 8000928:	e000      	b.n	800092c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
}
 800092c:	4618      	mov	r0, r3
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000000 	.word	0x20000000
 8000938:	20000008 	.word	0x20000008
 800093c:	20000004 	.word	0x20000004

08000940 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <HAL_IncTick+0x1c>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	461a      	mov	r2, r3
 800094a:	4b05      	ldr	r3, [pc, #20]	; (8000960 <HAL_IncTick+0x20>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4413      	add	r3, r2
 8000950:	4a03      	ldr	r2, [pc, #12]	; (8000960 <HAL_IncTick+0x20>)
 8000952:	6013      	str	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr
 800095c:	20000008 	.word	0x20000008
 8000960:	200002c0 	.word	0x200002c0

08000964 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  return uwTick;
 8000968:	4b02      	ldr	r3, [pc, #8]	; (8000974 <HAL_GetTick+0x10>)
 800096a:	681b      	ldr	r3, [r3, #0]
}
 800096c:	4618      	mov	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	200002c0 	.word	0x200002c0

08000978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <__NVIC_SetPriorityGrouping+0x44>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800098e:	68ba      	ldr	r2, [r7, #8]
 8000990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000994:	4013      	ands	r3, r2
 8000996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009aa:	4a04      	ldr	r2, [pc, #16]	; (80009bc <__NVIC_SetPriorityGrouping+0x44>)
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	60d3      	str	r3, [r2, #12]
}
 80009b0:	bf00      	nop
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <__NVIC_GetPriorityGrouping+0x18>)
 80009c6:	68db      	ldr	r3, [r3, #12]
 80009c8:	0a1b      	lsrs	r3, r3, #8
 80009ca:	f003 0307 	and.w	r3, r3, #7
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	db0b      	blt.n	8000a06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	f003 021f 	and.w	r2, r3, #31
 80009f4:	4906      	ldr	r1, [pc, #24]	; (8000a10 <__NVIC_EnableIRQ+0x34>)
 80009f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fa:	095b      	lsrs	r3, r3, #5
 80009fc:	2001      	movs	r0, #1
 80009fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr
 8000a10:	e000e100 	.word	0xe000e100

08000a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	6039      	str	r1, [r7, #0]
 8000a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	db0a      	blt.n	8000a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	490c      	ldr	r1, [pc, #48]	; (8000a60 <__NVIC_SetPriority+0x4c>)
 8000a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a32:	0112      	lsls	r2, r2, #4
 8000a34:	b2d2      	uxtb	r2, r2
 8000a36:	440b      	add	r3, r1
 8000a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a3c:	e00a      	b.n	8000a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	4908      	ldr	r1, [pc, #32]	; (8000a64 <__NVIC_SetPriority+0x50>)
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	f003 030f 	and.w	r3, r3, #15
 8000a4a:	3b04      	subs	r3, #4
 8000a4c:	0112      	lsls	r2, r2, #4
 8000a4e:	b2d2      	uxtb	r2, r2
 8000a50:	440b      	add	r3, r1
 8000a52:	761a      	strb	r2, [r3, #24]
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000e100 	.word	0xe000e100
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b089      	sub	sp, #36	; 0x24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	f1c3 0307 	rsb	r3, r3, #7
 8000a82:	2b04      	cmp	r3, #4
 8000a84:	bf28      	it	cs
 8000a86:	2304      	movcs	r3, #4
 8000a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	2b06      	cmp	r3, #6
 8000a90:	d902      	bls.n	8000a98 <NVIC_EncodePriority+0x30>
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	3b03      	subs	r3, #3
 8000a96:	e000      	b.n	8000a9a <NVIC_EncodePriority+0x32>
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43da      	mvns	r2, r3
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	401a      	ands	r2, r3
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aba:	43d9      	mvns	r1, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	4313      	orrs	r3, r2
         );
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3724      	adds	r7, #36	; 0x24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr

08000acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000adc:	d301      	bcc.n	8000ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e00f      	b.n	8000b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae2:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <SysTick_Config+0x40>)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aea:	210f      	movs	r1, #15
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	f7ff ff90 	bl	8000a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <SysTick_Config+0x40>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000afa:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <SysTick_Config+0x40>)
 8000afc:	2207      	movs	r2, #7
 8000afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	e000e010 	.word	0xe000e010

08000b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f7ff ff2d 	bl	8000978 <__NVIC_SetPriorityGrouping>
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b086      	sub	sp, #24
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
 8000b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b38:	f7ff ff42 	bl	80009c0 <__NVIC_GetPriorityGrouping>
 8000b3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b3e:	687a      	ldr	r2, [r7, #4]
 8000b40:	68b9      	ldr	r1, [r7, #8]
 8000b42:	6978      	ldr	r0, [r7, #20]
 8000b44:	f7ff ff90 	bl	8000a68 <NVIC_EncodePriority>
 8000b48:	4602      	mov	r2, r0
 8000b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b4e:	4611      	mov	r1, r2
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff ff5f 	bl	8000a14 <__NVIC_SetPriority>
}
 8000b56:	bf00      	nop
 8000b58:	3718      	adds	r7, #24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	4603      	mov	r3, r0
 8000b66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff ff35 	bl	80009dc <__NVIC_EnableIRQ>
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b082      	sub	sp, #8
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b82:	6878      	ldr	r0, [r7, #4]
 8000b84:	f7ff ffa2 	bl	8000acc <SysTick_Config>
 8000b88:	4603      	mov	r3, r0
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b085      	sub	sp, #20
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ba4:	2b02      	cmp	r3, #2
 8000ba6:	d008      	beq.n	8000bba <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2204      	movs	r2, #4
 8000bac:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e020      	b.n	8000bfc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f022 020e 	bic.w	r2, r2, #14
 8000bc8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f022 0201 	bic.w	r2, r2, #1
 8000bd8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000be2:	2101      	movs	r1, #1
 8000be4:	fa01 f202 	lsl.w	r2, r1, r2
 8000be8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2201      	movs	r2, #1
 8000bee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr
	...

08000c08 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c10:	2300      	movs	r3, #0
 8000c12:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	d005      	beq.n	8000c2a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2204      	movs	r2, #4
 8000c22:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c24:	2301      	movs	r3, #1
 8000c26:	73fb      	strb	r3, [r7, #15]
 8000c28:	e0d6      	b.n	8000dd8 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f022 020e 	bic.w	r2, r2, #14
 8000c38:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f022 0201 	bic.w	r2, r2, #1
 8000c48:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4b64      	ldr	r3, [pc, #400]	; (8000de4 <HAL_DMA_Abort_IT+0x1dc>)
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d958      	bls.n	8000d08 <HAL_DMA_Abort_IT+0x100>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a63      	ldr	r2, [pc, #396]	; (8000de8 <HAL_DMA_Abort_IT+0x1e0>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d04f      	beq.n	8000d00 <HAL_DMA_Abort_IT+0xf8>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a61      	ldr	r2, [pc, #388]	; (8000dec <HAL_DMA_Abort_IT+0x1e4>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d048      	beq.n	8000cfc <HAL_DMA_Abort_IT+0xf4>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a60      	ldr	r2, [pc, #384]	; (8000df0 <HAL_DMA_Abort_IT+0x1e8>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d040      	beq.n	8000cf6 <HAL_DMA_Abort_IT+0xee>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a5e      	ldr	r2, [pc, #376]	; (8000df4 <HAL_DMA_Abort_IT+0x1ec>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d038      	beq.n	8000cf0 <HAL_DMA_Abort_IT+0xe8>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a5d      	ldr	r2, [pc, #372]	; (8000df8 <HAL_DMA_Abort_IT+0x1f0>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d030      	beq.n	8000cea <HAL_DMA_Abort_IT+0xe2>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a5b      	ldr	r2, [pc, #364]	; (8000dfc <HAL_DMA_Abort_IT+0x1f4>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d028      	beq.n	8000ce4 <HAL_DMA_Abort_IT+0xdc>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a53      	ldr	r2, [pc, #332]	; (8000de4 <HAL_DMA_Abort_IT+0x1dc>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d020      	beq.n	8000cde <HAL_DMA_Abort_IT+0xd6>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a57      	ldr	r2, [pc, #348]	; (8000e00 <HAL_DMA_Abort_IT+0x1f8>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d019      	beq.n	8000cda <HAL_DMA_Abort_IT+0xd2>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a56      	ldr	r2, [pc, #344]	; (8000e04 <HAL_DMA_Abort_IT+0x1fc>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d012      	beq.n	8000cd6 <HAL_DMA_Abort_IT+0xce>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a54      	ldr	r2, [pc, #336]	; (8000e08 <HAL_DMA_Abort_IT+0x200>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d00a      	beq.n	8000cd0 <HAL_DMA_Abort_IT+0xc8>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a53      	ldr	r2, [pc, #332]	; (8000e0c <HAL_DMA_Abort_IT+0x204>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d102      	bne.n	8000cca <HAL_DMA_Abort_IT+0xc2>
 8000cc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc8:	e01b      	b.n	8000d02 <HAL_DMA_Abort_IT+0xfa>
 8000cca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cce:	e018      	b.n	8000d02 <HAL_DMA_Abort_IT+0xfa>
 8000cd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cd4:	e015      	b.n	8000d02 <HAL_DMA_Abort_IT+0xfa>
 8000cd6:	2310      	movs	r3, #16
 8000cd8:	e013      	b.n	8000d02 <HAL_DMA_Abort_IT+0xfa>
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e011      	b.n	8000d02 <HAL_DMA_Abort_IT+0xfa>
 8000cde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ce2:	e00e      	b.n	8000d02 <HAL_DMA_Abort_IT+0xfa>
 8000ce4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ce8:	e00b      	b.n	8000d02 <HAL_DMA_Abort_IT+0xfa>
 8000cea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cee:	e008      	b.n	8000d02 <HAL_DMA_Abort_IT+0xfa>
 8000cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf4:	e005      	b.n	8000d02 <HAL_DMA_Abort_IT+0xfa>
 8000cf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cfa:	e002      	b.n	8000d02 <HAL_DMA_Abort_IT+0xfa>
 8000cfc:	2310      	movs	r3, #16
 8000cfe:	e000      	b.n	8000d02 <HAL_DMA_Abort_IT+0xfa>
 8000d00:	2301      	movs	r3, #1
 8000d02:	4a43      	ldr	r2, [pc, #268]	; (8000e10 <HAL_DMA_Abort_IT+0x208>)
 8000d04:	6053      	str	r3, [r2, #4]
 8000d06:	e057      	b.n	8000db8 <HAL_DMA_Abort_IT+0x1b0>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a36      	ldr	r2, [pc, #216]	; (8000de8 <HAL_DMA_Abort_IT+0x1e0>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d04f      	beq.n	8000db2 <HAL_DMA_Abort_IT+0x1aa>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a35      	ldr	r2, [pc, #212]	; (8000dec <HAL_DMA_Abort_IT+0x1e4>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d048      	beq.n	8000dae <HAL_DMA_Abort_IT+0x1a6>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a33      	ldr	r2, [pc, #204]	; (8000df0 <HAL_DMA_Abort_IT+0x1e8>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d040      	beq.n	8000da8 <HAL_DMA_Abort_IT+0x1a0>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a32      	ldr	r2, [pc, #200]	; (8000df4 <HAL_DMA_Abort_IT+0x1ec>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d038      	beq.n	8000da2 <HAL_DMA_Abort_IT+0x19a>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a30      	ldr	r2, [pc, #192]	; (8000df8 <HAL_DMA_Abort_IT+0x1f0>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d030      	beq.n	8000d9c <HAL_DMA_Abort_IT+0x194>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a2f      	ldr	r2, [pc, #188]	; (8000dfc <HAL_DMA_Abort_IT+0x1f4>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d028      	beq.n	8000d96 <HAL_DMA_Abort_IT+0x18e>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a26      	ldr	r2, [pc, #152]	; (8000de4 <HAL_DMA_Abort_IT+0x1dc>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d020      	beq.n	8000d90 <HAL_DMA_Abort_IT+0x188>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a2b      	ldr	r2, [pc, #172]	; (8000e00 <HAL_DMA_Abort_IT+0x1f8>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d019      	beq.n	8000d8c <HAL_DMA_Abort_IT+0x184>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a29      	ldr	r2, [pc, #164]	; (8000e04 <HAL_DMA_Abort_IT+0x1fc>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d012      	beq.n	8000d88 <HAL_DMA_Abort_IT+0x180>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a28      	ldr	r2, [pc, #160]	; (8000e08 <HAL_DMA_Abort_IT+0x200>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d00a      	beq.n	8000d82 <HAL_DMA_Abort_IT+0x17a>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a26      	ldr	r2, [pc, #152]	; (8000e0c <HAL_DMA_Abort_IT+0x204>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d102      	bne.n	8000d7c <HAL_DMA_Abort_IT+0x174>
 8000d76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7a:	e01b      	b.n	8000db4 <HAL_DMA_Abort_IT+0x1ac>
 8000d7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d80:	e018      	b.n	8000db4 <HAL_DMA_Abort_IT+0x1ac>
 8000d82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d86:	e015      	b.n	8000db4 <HAL_DMA_Abort_IT+0x1ac>
 8000d88:	2310      	movs	r3, #16
 8000d8a:	e013      	b.n	8000db4 <HAL_DMA_Abort_IT+0x1ac>
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e011      	b.n	8000db4 <HAL_DMA_Abort_IT+0x1ac>
 8000d90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d94:	e00e      	b.n	8000db4 <HAL_DMA_Abort_IT+0x1ac>
 8000d96:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d9a:	e00b      	b.n	8000db4 <HAL_DMA_Abort_IT+0x1ac>
 8000d9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000da0:	e008      	b.n	8000db4 <HAL_DMA_Abort_IT+0x1ac>
 8000da2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da6:	e005      	b.n	8000db4 <HAL_DMA_Abort_IT+0x1ac>
 8000da8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dac:	e002      	b.n	8000db4 <HAL_DMA_Abort_IT+0x1ac>
 8000dae:	2310      	movs	r3, #16
 8000db0:	e000      	b.n	8000db4 <HAL_DMA_Abort_IT+0x1ac>
 8000db2:	2301      	movs	r3, #1
 8000db4:	4a17      	ldr	r2, [pc, #92]	; (8000e14 <HAL_DMA_Abort_IT+0x20c>)
 8000db6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2201      	movs	r2, #1
 8000dbc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d003      	beq.n	8000dd8 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	4798      	blx	r3
    } 
  }
  return status;
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40020080 	.word	0x40020080
 8000de8:	40020008 	.word	0x40020008
 8000dec:	4002001c 	.word	0x4002001c
 8000df0:	40020030 	.word	0x40020030
 8000df4:	40020044 	.word	0x40020044
 8000df8:	40020058 	.word	0x40020058
 8000dfc:	4002006c 	.word	0x4002006c
 8000e00:	40020408 	.word	0x40020408
 8000e04:	4002041c 	.word	0x4002041c
 8000e08:	40020430 	.word	0x40020430
 8000e0c:	40020444 	.word	0x40020444
 8000e10:	40020400 	.word	0x40020400
 8000e14:	40020000 	.word	0x40020000

08000e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b08b      	sub	sp, #44	; 0x2c
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e22:	2300      	movs	r3, #0
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e26:	2300      	movs	r3, #0
 8000e28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e2a:	e179      	b.n	8001120 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	69fa      	ldr	r2, [r7, #28]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	f040 8168 	bne.w	800111a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	4aa0      	ldr	r2, [pc, #640]	; (80010d0 <HAL_GPIO_Init+0x2b8>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d05e      	beq.n	8000f12 <HAL_GPIO_Init+0xfa>
 8000e54:	4a9e      	ldr	r2, [pc, #632]	; (80010d0 <HAL_GPIO_Init+0x2b8>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d875      	bhi.n	8000f46 <HAL_GPIO_Init+0x12e>
 8000e5a:	4a9e      	ldr	r2, [pc, #632]	; (80010d4 <HAL_GPIO_Init+0x2bc>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d058      	beq.n	8000f12 <HAL_GPIO_Init+0xfa>
 8000e60:	4a9c      	ldr	r2, [pc, #624]	; (80010d4 <HAL_GPIO_Init+0x2bc>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d86f      	bhi.n	8000f46 <HAL_GPIO_Init+0x12e>
 8000e66:	4a9c      	ldr	r2, [pc, #624]	; (80010d8 <HAL_GPIO_Init+0x2c0>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d052      	beq.n	8000f12 <HAL_GPIO_Init+0xfa>
 8000e6c:	4a9a      	ldr	r2, [pc, #616]	; (80010d8 <HAL_GPIO_Init+0x2c0>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d869      	bhi.n	8000f46 <HAL_GPIO_Init+0x12e>
 8000e72:	4a9a      	ldr	r2, [pc, #616]	; (80010dc <HAL_GPIO_Init+0x2c4>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d04c      	beq.n	8000f12 <HAL_GPIO_Init+0xfa>
 8000e78:	4a98      	ldr	r2, [pc, #608]	; (80010dc <HAL_GPIO_Init+0x2c4>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d863      	bhi.n	8000f46 <HAL_GPIO_Init+0x12e>
 8000e7e:	4a98      	ldr	r2, [pc, #608]	; (80010e0 <HAL_GPIO_Init+0x2c8>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d046      	beq.n	8000f12 <HAL_GPIO_Init+0xfa>
 8000e84:	4a96      	ldr	r2, [pc, #600]	; (80010e0 <HAL_GPIO_Init+0x2c8>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d85d      	bhi.n	8000f46 <HAL_GPIO_Init+0x12e>
 8000e8a:	2b12      	cmp	r3, #18
 8000e8c:	d82a      	bhi.n	8000ee4 <HAL_GPIO_Init+0xcc>
 8000e8e:	2b12      	cmp	r3, #18
 8000e90:	d859      	bhi.n	8000f46 <HAL_GPIO_Init+0x12e>
 8000e92:	a201      	add	r2, pc, #4	; (adr r2, 8000e98 <HAL_GPIO_Init+0x80>)
 8000e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e98:	08000f13 	.word	0x08000f13
 8000e9c:	08000eed 	.word	0x08000eed
 8000ea0:	08000eff 	.word	0x08000eff
 8000ea4:	08000f41 	.word	0x08000f41
 8000ea8:	08000f47 	.word	0x08000f47
 8000eac:	08000f47 	.word	0x08000f47
 8000eb0:	08000f47 	.word	0x08000f47
 8000eb4:	08000f47 	.word	0x08000f47
 8000eb8:	08000f47 	.word	0x08000f47
 8000ebc:	08000f47 	.word	0x08000f47
 8000ec0:	08000f47 	.word	0x08000f47
 8000ec4:	08000f47 	.word	0x08000f47
 8000ec8:	08000f47 	.word	0x08000f47
 8000ecc:	08000f47 	.word	0x08000f47
 8000ed0:	08000f47 	.word	0x08000f47
 8000ed4:	08000f47 	.word	0x08000f47
 8000ed8:	08000f47 	.word	0x08000f47
 8000edc:	08000ef5 	.word	0x08000ef5
 8000ee0:	08000f09 	.word	0x08000f09
 8000ee4:	4a7f      	ldr	r2, [pc, #508]	; (80010e4 <HAL_GPIO_Init+0x2cc>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d013      	beq.n	8000f12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000eea:	e02c      	b.n	8000f46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	623b      	str	r3, [r7, #32]
          break;
 8000ef2:	e029      	b.n	8000f48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	3304      	adds	r3, #4
 8000efa:	623b      	str	r3, [r7, #32]
          break;
 8000efc:	e024      	b.n	8000f48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	3308      	adds	r3, #8
 8000f04:	623b      	str	r3, [r7, #32]
          break;
 8000f06:	e01f      	b.n	8000f48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	330c      	adds	r3, #12
 8000f0e:	623b      	str	r3, [r7, #32]
          break;
 8000f10:	e01a      	b.n	8000f48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d102      	bne.n	8000f20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	623b      	str	r3, [r7, #32]
          break;
 8000f1e:	e013      	b.n	8000f48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d105      	bne.n	8000f34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f28:	2308      	movs	r3, #8
 8000f2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	69fa      	ldr	r2, [r7, #28]
 8000f30:	611a      	str	r2, [r3, #16]
          break;
 8000f32:	e009      	b.n	8000f48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f34:	2308      	movs	r3, #8
 8000f36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	69fa      	ldr	r2, [r7, #28]
 8000f3c:	615a      	str	r2, [r3, #20]
          break;
 8000f3e:	e003      	b.n	8000f48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f40:	2300      	movs	r3, #0
 8000f42:	623b      	str	r3, [r7, #32]
          break;
 8000f44:	e000      	b.n	8000f48 <HAL_GPIO_Init+0x130>
          break;
 8000f46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	2bff      	cmp	r3, #255	; 0xff
 8000f4c:	d801      	bhi.n	8000f52 <HAL_GPIO_Init+0x13a>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	e001      	b.n	8000f56 <HAL_GPIO_Init+0x13e>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3304      	adds	r3, #4
 8000f56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	2bff      	cmp	r3, #255	; 0xff
 8000f5c:	d802      	bhi.n	8000f64 <HAL_GPIO_Init+0x14c>
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	e002      	b.n	8000f6a <HAL_GPIO_Init+0x152>
 8000f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f66:	3b08      	subs	r3, #8
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	210f      	movs	r1, #15
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	fa01 f303 	lsl.w	r3, r1, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	6a39      	ldr	r1, [r7, #32]
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	fa01 f303 	lsl.w	r3, r1, r3
 8000f84:	431a      	orrs	r2, r3
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f000 80c1 	beq.w	800111a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f98:	4b53      	ldr	r3, [pc, #332]	; (80010e8 <HAL_GPIO_Init+0x2d0>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	4a52      	ldr	r2, [pc, #328]	; (80010e8 <HAL_GPIO_Init+0x2d0>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	6193      	str	r3, [r2, #24]
 8000fa4:	4b50      	ldr	r3, [pc, #320]	; (80010e8 <HAL_GPIO_Init+0x2d0>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000fb0:	4a4e      	ldr	r2, [pc, #312]	; (80010ec <HAL_GPIO_Init+0x2d4>)
 8000fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb4:	089b      	lsrs	r3, r3, #2
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fbc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	220f      	movs	r2, #15
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a46      	ldr	r2, [pc, #280]	; (80010f0 <HAL_GPIO_Init+0x2d8>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d01f      	beq.n	800101c <HAL_GPIO_Init+0x204>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a45      	ldr	r2, [pc, #276]	; (80010f4 <HAL_GPIO_Init+0x2dc>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d019      	beq.n	8001018 <HAL_GPIO_Init+0x200>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a44      	ldr	r2, [pc, #272]	; (80010f8 <HAL_GPIO_Init+0x2e0>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d013      	beq.n	8001014 <HAL_GPIO_Init+0x1fc>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a43      	ldr	r2, [pc, #268]	; (80010fc <HAL_GPIO_Init+0x2e4>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d00d      	beq.n	8001010 <HAL_GPIO_Init+0x1f8>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a42      	ldr	r2, [pc, #264]	; (8001100 <HAL_GPIO_Init+0x2e8>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d007      	beq.n	800100c <HAL_GPIO_Init+0x1f4>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a41      	ldr	r2, [pc, #260]	; (8001104 <HAL_GPIO_Init+0x2ec>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d101      	bne.n	8001008 <HAL_GPIO_Init+0x1f0>
 8001004:	2305      	movs	r3, #5
 8001006:	e00a      	b.n	800101e <HAL_GPIO_Init+0x206>
 8001008:	2306      	movs	r3, #6
 800100a:	e008      	b.n	800101e <HAL_GPIO_Init+0x206>
 800100c:	2304      	movs	r3, #4
 800100e:	e006      	b.n	800101e <HAL_GPIO_Init+0x206>
 8001010:	2303      	movs	r3, #3
 8001012:	e004      	b.n	800101e <HAL_GPIO_Init+0x206>
 8001014:	2302      	movs	r3, #2
 8001016:	e002      	b.n	800101e <HAL_GPIO_Init+0x206>
 8001018:	2301      	movs	r3, #1
 800101a:	e000      	b.n	800101e <HAL_GPIO_Init+0x206>
 800101c:	2300      	movs	r3, #0
 800101e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001020:	f002 0203 	and.w	r2, r2, #3
 8001024:	0092      	lsls	r2, r2, #2
 8001026:	4093      	lsls	r3, r2
 8001028:	68fa      	ldr	r2, [r7, #12]
 800102a:	4313      	orrs	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800102e:	492f      	ldr	r1, [pc, #188]	; (80010ec <HAL_GPIO_Init+0x2d4>)
 8001030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001032:	089b      	lsrs	r3, r3, #2
 8001034:	3302      	adds	r3, #2
 8001036:	68fa      	ldr	r2, [r7, #12]
 8001038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d006      	beq.n	8001056 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001048:	4b2f      	ldr	r3, [pc, #188]	; (8001108 <HAL_GPIO_Init+0x2f0>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	492e      	ldr	r1, [pc, #184]	; (8001108 <HAL_GPIO_Init+0x2f0>)
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	4313      	orrs	r3, r2
 8001052:	600b      	str	r3, [r1, #0]
 8001054:	e006      	b.n	8001064 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001056:	4b2c      	ldr	r3, [pc, #176]	; (8001108 <HAL_GPIO_Init+0x2f0>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	43db      	mvns	r3, r3
 800105e:	492a      	ldr	r1, [pc, #168]	; (8001108 <HAL_GPIO_Init+0x2f0>)
 8001060:	4013      	ands	r3, r2
 8001062:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d006      	beq.n	800107e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001070:	4b25      	ldr	r3, [pc, #148]	; (8001108 <HAL_GPIO_Init+0x2f0>)
 8001072:	685a      	ldr	r2, [r3, #4]
 8001074:	4924      	ldr	r1, [pc, #144]	; (8001108 <HAL_GPIO_Init+0x2f0>)
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	4313      	orrs	r3, r2
 800107a:	604b      	str	r3, [r1, #4]
 800107c:	e006      	b.n	800108c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800107e:	4b22      	ldr	r3, [pc, #136]	; (8001108 <HAL_GPIO_Init+0x2f0>)
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	43db      	mvns	r3, r3
 8001086:	4920      	ldr	r1, [pc, #128]	; (8001108 <HAL_GPIO_Init+0x2f0>)
 8001088:	4013      	ands	r3, r2
 800108a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d006      	beq.n	80010a6 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001098:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <HAL_GPIO_Init+0x2f0>)
 800109a:	689a      	ldr	r2, [r3, #8]
 800109c:	491a      	ldr	r1, [pc, #104]	; (8001108 <HAL_GPIO_Init+0x2f0>)
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	608b      	str	r3, [r1, #8]
 80010a4:	e006      	b.n	80010b4 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010a6:	4b18      	ldr	r3, [pc, #96]	; (8001108 <HAL_GPIO_Init+0x2f0>)
 80010a8:	689a      	ldr	r2, [r3, #8]
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	43db      	mvns	r3, r3
 80010ae:	4916      	ldr	r1, [pc, #88]	; (8001108 <HAL_GPIO_Init+0x2f0>)
 80010b0:	4013      	ands	r3, r2
 80010b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d025      	beq.n	800110c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <HAL_GPIO_Init+0x2f0>)
 80010c2:	68da      	ldr	r2, [r3, #12]
 80010c4:	4910      	ldr	r1, [pc, #64]	; (8001108 <HAL_GPIO_Init+0x2f0>)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	60cb      	str	r3, [r1, #12]
 80010cc:	e025      	b.n	800111a <HAL_GPIO_Init+0x302>
 80010ce:	bf00      	nop
 80010d0:	10320000 	.word	0x10320000
 80010d4:	10310000 	.word	0x10310000
 80010d8:	10220000 	.word	0x10220000
 80010dc:	10210000 	.word	0x10210000
 80010e0:	10120000 	.word	0x10120000
 80010e4:	10110000 	.word	0x10110000
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40010000 	.word	0x40010000
 80010f0:	40010800 	.word	0x40010800
 80010f4:	40010c00 	.word	0x40010c00
 80010f8:	40011000 	.word	0x40011000
 80010fc:	40011400 	.word	0x40011400
 8001100:	40011800 	.word	0x40011800
 8001104:	40011c00 	.word	0x40011c00
 8001108:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800110c:	4b0b      	ldr	r3, [pc, #44]	; (800113c <HAL_GPIO_Init+0x324>)
 800110e:	68da      	ldr	r2, [r3, #12]
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	43db      	mvns	r3, r3
 8001114:	4909      	ldr	r1, [pc, #36]	; (800113c <HAL_GPIO_Init+0x324>)
 8001116:	4013      	ands	r3, r2
 8001118:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800111a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111c:	3301      	adds	r3, #1
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001126:	fa22 f303 	lsr.w	r3, r2, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	f47f ae7e 	bne.w	8000e2c <HAL_GPIO_Init+0x14>
  }
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	372c      	adds	r7, #44	; 0x2c
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr
 800113c:	40010400 	.word	0x40010400

08001140 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	807b      	strh	r3, [r7, #2]
 800114c:	4613      	mov	r3, r2
 800114e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001150:	787b      	ldrb	r3, [r7, #1]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001156:	887a      	ldrh	r2, [r7, #2]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800115c:	e003      	b.n	8001166 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800115e:	887b      	ldrh	r3, [r7, #2]
 8001160:	041a      	lsls	r2, r3, #16
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	611a      	str	r2, [r3, #16]
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr

08001170 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001182:	887a      	ldrh	r2, [r7, #2]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4013      	ands	r3, r2
 8001188:	041a      	lsls	r2, r3, #16
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	43d9      	mvns	r1, r3
 800118e:	887b      	ldrh	r3, [r7, #2]
 8001190:	400b      	ands	r3, r1
 8001192:	431a      	orrs	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	611a      	str	r2, [r3, #16]
}
 8001198:	bf00      	nop
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr
	...

080011a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e26c      	b.n	8001690 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f000 8087 	beq.w	80012d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011c4:	4b92      	ldr	r3, [pc, #584]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 030c 	and.w	r3, r3, #12
 80011cc:	2b04      	cmp	r3, #4
 80011ce:	d00c      	beq.n	80011ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011d0:	4b8f      	ldr	r3, [pc, #572]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 030c 	and.w	r3, r3, #12
 80011d8:	2b08      	cmp	r3, #8
 80011da:	d112      	bne.n	8001202 <HAL_RCC_OscConfig+0x5e>
 80011dc:	4b8c      	ldr	r3, [pc, #560]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e8:	d10b      	bne.n	8001202 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ea:	4b89      	ldr	r3, [pc, #548]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d06c      	beq.n	80012d0 <HAL_RCC_OscConfig+0x12c>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d168      	bne.n	80012d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e246      	b.n	8001690 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800120a:	d106      	bne.n	800121a <HAL_RCC_OscConfig+0x76>
 800120c:	4b80      	ldr	r3, [pc, #512]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a7f      	ldr	r2, [pc, #508]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001216:	6013      	str	r3, [r2, #0]
 8001218:	e02e      	b.n	8001278 <HAL_RCC_OscConfig+0xd4>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d10c      	bne.n	800123c <HAL_RCC_OscConfig+0x98>
 8001222:	4b7b      	ldr	r3, [pc, #492]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a7a      	ldr	r2, [pc, #488]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	4b78      	ldr	r3, [pc, #480]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a77      	ldr	r2, [pc, #476]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001234:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	e01d      	b.n	8001278 <HAL_RCC_OscConfig+0xd4>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001244:	d10c      	bne.n	8001260 <HAL_RCC_OscConfig+0xbc>
 8001246:	4b72      	ldr	r3, [pc, #456]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a71      	ldr	r2, [pc, #452]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 800124c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	4b6f      	ldr	r3, [pc, #444]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a6e      	ldr	r2, [pc, #440]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	e00b      	b.n	8001278 <HAL_RCC_OscConfig+0xd4>
 8001260:	4b6b      	ldr	r3, [pc, #428]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a6a      	ldr	r2, [pc, #424]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	4b68      	ldr	r3, [pc, #416]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a67      	ldr	r2, [pc, #412]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001272:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001276:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d013      	beq.n	80012a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001280:	f7ff fb70 	bl	8000964 <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001288:	f7ff fb6c 	bl	8000964 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b64      	cmp	r3, #100	; 0x64
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e1fa      	b.n	8001690 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129a:	4b5d      	ldr	r3, [pc, #372]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0f0      	beq.n	8001288 <HAL_RCC_OscConfig+0xe4>
 80012a6:	e014      	b.n	80012d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a8:	f7ff fb5c 	bl	8000964 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012b0:	f7ff fb58 	bl	8000964 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b64      	cmp	r3, #100	; 0x64
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e1e6      	b.n	8001690 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c2:	4b53      	ldr	r3, [pc, #332]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1f0      	bne.n	80012b0 <HAL_RCC_OscConfig+0x10c>
 80012ce:	e000      	b.n	80012d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d063      	beq.n	80013a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012de:	4b4c      	ldr	r3, [pc, #304]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f003 030c 	and.w	r3, r3, #12
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d00b      	beq.n	8001302 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012ea:	4b49      	ldr	r3, [pc, #292]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f003 030c 	and.w	r3, r3, #12
 80012f2:	2b08      	cmp	r3, #8
 80012f4:	d11c      	bne.n	8001330 <HAL_RCC_OscConfig+0x18c>
 80012f6:	4b46      	ldr	r3, [pc, #280]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d116      	bne.n	8001330 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001302:	4b43      	ldr	r3, [pc, #268]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d005      	beq.n	800131a <HAL_RCC_OscConfig+0x176>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d001      	beq.n	800131a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e1ba      	b.n	8001690 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800131a:	4b3d      	ldr	r3, [pc, #244]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	4939      	ldr	r1, [pc, #228]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 800132a:	4313      	orrs	r3, r2
 800132c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800132e:	e03a      	b.n	80013a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d020      	beq.n	800137a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001338:	4b36      	ldr	r3, [pc, #216]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 800133a:	2201      	movs	r2, #1
 800133c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133e:	f7ff fb11 	bl	8000964 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001344:	e008      	b.n	8001358 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001346:	f7ff fb0d 	bl	8000964 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e19b      	b.n	8001690 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001358:	4b2d      	ldr	r3, [pc, #180]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0f0      	beq.n	8001346 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001364:	4b2a      	ldr	r3, [pc, #168]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	4927      	ldr	r1, [pc, #156]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 8001374:	4313      	orrs	r3, r2
 8001376:	600b      	str	r3, [r1, #0]
 8001378:	e015      	b.n	80013a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800137a:	4b26      	ldr	r3, [pc, #152]	; (8001414 <HAL_RCC_OscConfig+0x270>)
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001380:	f7ff faf0 	bl	8000964 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001388:	f7ff faec 	bl	8000964 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e17a      	b.n	8001690 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800139a:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d1f0      	bne.n	8001388 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0308 	and.w	r3, r3, #8
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d03a      	beq.n	8001428 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d019      	beq.n	80013ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ba:	4b17      	ldr	r3, [pc, #92]	; (8001418 <HAL_RCC_OscConfig+0x274>)
 80013bc:	2201      	movs	r2, #1
 80013be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c0:	f7ff fad0 	bl	8000964 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013c8:	f7ff facc 	bl	8000964 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e15a      	b.n	8001690 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013da:	4b0d      	ldr	r3, [pc, #52]	; (8001410 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d0f0      	beq.n	80013c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013e6:	2001      	movs	r0, #1
 80013e8:	f000 fad8 	bl	800199c <RCC_Delay>
 80013ec:	e01c      	b.n	8001428 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ee:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <HAL_RCC_OscConfig+0x274>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f4:	f7ff fab6 	bl	8000964 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013fa:	e00f      	b.n	800141c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013fc:	f7ff fab2 	bl	8000964 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d908      	bls.n	800141c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e140      	b.n	8001690 <HAL_RCC_OscConfig+0x4ec>
 800140e:	bf00      	nop
 8001410:	40021000 	.word	0x40021000
 8001414:	42420000 	.word	0x42420000
 8001418:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800141c:	4b9e      	ldr	r3, [pc, #632]	; (8001698 <HAL_RCC_OscConfig+0x4f4>)
 800141e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1e9      	bne.n	80013fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 80a6 	beq.w	8001582 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001436:	2300      	movs	r3, #0
 8001438:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800143a:	4b97      	ldr	r3, [pc, #604]	; (8001698 <HAL_RCC_OscConfig+0x4f4>)
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10d      	bne.n	8001462 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	4b94      	ldr	r3, [pc, #592]	; (8001698 <HAL_RCC_OscConfig+0x4f4>)
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	4a93      	ldr	r2, [pc, #588]	; (8001698 <HAL_RCC_OscConfig+0x4f4>)
 800144c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001450:	61d3      	str	r3, [r2, #28]
 8001452:	4b91      	ldr	r3, [pc, #580]	; (8001698 <HAL_RCC_OscConfig+0x4f4>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800145e:	2301      	movs	r3, #1
 8001460:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001462:	4b8e      	ldr	r3, [pc, #568]	; (800169c <HAL_RCC_OscConfig+0x4f8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146a:	2b00      	cmp	r3, #0
 800146c:	d118      	bne.n	80014a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800146e:	4b8b      	ldr	r3, [pc, #556]	; (800169c <HAL_RCC_OscConfig+0x4f8>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a8a      	ldr	r2, [pc, #552]	; (800169c <HAL_RCC_OscConfig+0x4f8>)
 8001474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800147a:	f7ff fa73 	bl	8000964 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001482:	f7ff fa6f 	bl	8000964 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b64      	cmp	r3, #100	; 0x64
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e0fd      	b.n	8001690 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001494:	4b81      	ldr	r3, [pc, #516]	; (800169c <HAL_RCC_OscConfig+0x4f8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0f0      	beq.n	8001482 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d106      	bne.n	80014b6 <HAL_RCC_OscConfig+0x312>
 80014a8:	4b7b      	ldr	r3, [pc, #492]	; (8001698 <HAL_RCC_OscConfig+0x4f4>)
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	4a7a      	ldr	r2, [pc, #488]	; (8001698 <HAL_RCC_OscConfig+0x4f4>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	6213      	str	r3, [r2, #32]
 80014b4:	e02d      	b.n	8001512 <HAL_RCC_OscConfig+0x36e>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10c      	bne.n	80014d8 <HAL_RCC_OscConfig+0x334>
 80014be:	4b76      	ldr	r3, [pc, #472]	; (8001698 <HAL_RCC_OscConfig+0x4f4>)
 80014c0:	6a1b      	ldr	r3, [r3, #32]
 80014c2:	4a75      	ldr	r2, [pc, #468]	; (8001698 <HAL_RCC_OscConfig+0x4f4>)
 80014c4:	f023 0301 	bic.w	r3, r3, #1
 80014c8:	6213      	str	r3, [r2, #32]
 80014ca:	4b73      	ldr	r3, [pc, #460]	; (8001698 <HAL_RCC_OscConfig+0x4f4>)
 80014cc:	6a1b      	ldr	r3, [r3, #32]
 80014ce:	4a72      	ldr	r2, [pc, #456]	; (8001698 <HAL_RCC_OscConfig+0x4f4>)
 80014d0:	f023 0304 	bic.w	r3, r3, #4
 80014d4:	6213      	str	r3, [r2, #32]
 80014d6:	e01c      	b.n	8001512 <HAL_RCC_OscConfig+0x36e>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	2b05      	cmp	r3, #5
 80014de:	d10c      	bne.n	80014fa <HAL_RCC_OscConfig+0x356>
 80014e0:	4b6d      	ldr	r3, [pc, #436]	; (8001698 <HAL_RCC_OscConfig+0x4f4>)
 80014e2:	6a1b      	ldr	r3, [r3, #32]
 80014e4:	4a6c      	ldr	r2, [pc, #432]	; (8001698 <HAL_RCC_OscConfig+0x4f4>)
 80014e6:	f043 0304 	orr.w	r3, r3, #4
 80014ea:	6213      	str	r3, [r2, #32]
 80014ec:	4b6a      	ldr	r3, [pc, #424]	; (8001698 <HAL_RCC_OscConfig+0x4f4>)
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	4a69      	ldr	r2, [pc, #420]	; (8001698 <HAL_RCC_OscConfig+0x4f4>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	6213      	str	r3, [r2, #32]
 80014f8:	e00b      	b.n	8001512 <HAL_RCC_OscConfig+0x36e>
 80014fa:	4b67      	ldr	r3, [pc, #412]	; (8001698 <HAL_RCC_OscConfig+0x4f4>)
 80014fc:	6a1b      	ldr	r3, [r3, #32]
 80014fe:	4a66      	ldr	r2, [pc, #408]	; (8001698 <HAL_RCC_OscConfig+0x4f4>)
 8001500:	f023 0301 	bic.w	r3, r3, #1
 8001504:	6213      	str	r3, [r2, #32]
 8001506:	4b64      	ldr	r3, [pc, #400]	; (8001698 <HAL_RCC_OscConfig+0x4f4>)
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	4a63      	ldr	r2, [pc, #396]	; (8001698 <HAL_RCC_OscConfig+0x4f4>)
 800150c:	f023 0304 	bic.w	r3, r3, #4
 8001510:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d015      	beq.n	8001546 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800151a:	f7ff fa23 	bl	8000964 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001520:	e00a      	b.n	8001538 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001522:	f7ff fa1f 	bl	8000964 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001530:	4293      	cmp	r3, r2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e0ab      	b.n	8001690 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001538:	4b57      	ldr	r3, [pc, #348]	; (8001698 <HAL_RCC_OscConfig+0x4f4>)
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0ee      	beq.n	8001522 <HAL_RCC_OscConfig+0x37e>
 8001544:	e014      	b.n	8001570 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001546:	f7ff fa0d 	bl	8000964 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800154c:	e00a      	b.n	8001564 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800154e:	f7ff fa09 	bl	8000964 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	f241 3288 	movw	r2, #5000	; 0x1388
 800155c:	4293      	cmp	r3, r2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e095      	b.n	8001690 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001564:	4b4c      	ldr	r3, [pc, #304]	; (8001698 <HAL_RCC_OscConfig+0x4f4>)
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1ee      	bne.n	800154e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001570:	7dfb      	ldrb	r3, [r7, #23]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d105      	bne.n	8001582 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001576:	4b48      	ldr	r3, [pc, #288]	; (8001698 <HAL_RCC_OscConfig+0x4f4>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	4a47      	ldr	r2, [pc, #284]	; (8001698 <HAL_RCC_OscConfig+0x4f4>)
 800157c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001580:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	2b00      	cmp	r3, #0
 8001588:	f000 8081 	beq.w	800168e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800158c:	4b42      	ldr	r3, [pc, #264]	; (8001698 <HAL_RCC_OscConfig+0x4f4>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 030c 	and.w	r3, r3, #12
 8001594:	2b08      	cmp	r3, #8
 8001596:	d061      	beq.n	800165c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	69db      	ldr	r3, [r3, #28]
 800159c:	2b02      	cmp	r3, #2
 800159e:	d146      	bne.n	800162e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a0:	4b3f      	ldr	r3, [pc, #252]	; (80016a0 <HAL_RCC_OscConfig+0x4fc>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a6:	f7ff f9dd 	bl	8000964 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ae:	f7ff f9d9 	bl	8000964 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e067      	b.n	8001690 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015c0:	4b35      	ldr	r3, [pc, #212]	; (8001698 <HAL_RCC_OscConfig+0x4f4>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1f0      	bne.n	80015ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6a1b      	ldr	r3, [r3, #32]
 80015d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015d4:	d108      	bne.n	80015e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015d6:	4b30      	ldr	r3, [pc, #192]	; (8001698 <HAL_RCC_OscConfig+0x4f4>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	492d      	ldr	r1, [pc, #180]	; (8001698 <HAL_RCC_OscConfig+0x4f4>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015e8:	4b2b      	ldr	r3, [pc, #172]	; (8001698 <HAL_RCC_OscConfig+0x4f4>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a19      	ldr	r1, [r3, #32]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f8:	430b      	orrs	r3, r1
 80015fa:	4927      	ldr	r1, [pc, #156]	; (8001698 <HAL_RCC_OscConfig+0x4f4>)
 80015fc:	4313      	orrs	r3, r2
 80015fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001600:	4b27      	ldr	r3, [pc, #156]	; (80016a0 <HAL_RCC_OscConfig+0x4fc>)
 8001602:	2201      	movs	r2, #1
 8001604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001606:	f7ff f9ad 	bl	8000964 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800160e:	f7ff f9a9 	bl	8000964 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e037      	b.n	8001690 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001620:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <HAL_RCC_OscConfig+0x4f4>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0f0      	beq.n	800160e <HAL_RCC_OscConfig+0x46a>
 800162c:	e02f      	b.n	800168e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800162e:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <HAL_RCC_OscConfig+0x4fc>)
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001634:	f7ff f996 	bl	8000964 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800163c:	f7ff f992 	bl	8000964 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b02      	cmp	r3, #2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e020      	b.n	8001690 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800164e:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_RCC_OscConfig+0x4f4>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1f0      	bne.n	800163c <HAL_RCC_OscConfig+0x498>
 800165a:	e018      	b.n	800168e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	69db      	ldr	r3, [r3, #28]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d101      	bne.n	8001668 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e013      	b.n	8001690 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001668:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <HAL_RCC_OscConfig+0x4f4>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	429a      	cmp	r2, r3
 800167a:	d106      	bne.n	800168a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001686:	429a      	cmp	r2, r3
 8001688:	d001      	beq.n	800168e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e000      	b.n	8001690 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40021000 	.word	0x40021000
 800169c:	40007000 	.word	0x40007000
 80016a0:	42420060 	.word	0x42420060

080016a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d101      	bne.n	80016b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e0d0      	b.n	800185a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016b8:	4b6a      	ldr	r3, [pc, #424]	; (8001864 <HAL_RCC_ClockConfig+0x1c0>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0307 	and.w	r3, r3, #7
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d910      	bls.n	80016e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016c6:	4b67      	ldr	r3, [pc, #412]	; (8001864 <HAL_RCC_ClockConfig+0x1c0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f023 0207 	bic.w	r2, r3, #7
 80016ce:	4965      	ldr	r1, [pc, #404]	; (8001864 <HAL_RCC_ClockConfig+0x1c0>)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d6:	4b63      	ldr	r3, [pc, #396]	; (8001864 <HAL_RCC_ClockConfig+0x1c0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	683a      	ldr	r2, [r7, #0]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d001      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e0b8      	b.n	800185a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d020      	beq.n	8001736 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d005      	beq.n	800170c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001700:	4b59      	ldr	r3, [pc, #356]	; (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	4a58      	ldr	r2, [pc, #352]	; (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 8001706:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800170a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0308 	and.w	r3, r3, #8
 8001714:	2b00      	cmp	r3, #0
 8001716:	d005      	beq.n	8001724 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001718:	4b53      	ldr	r3, [pc, #332]	; (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	4a52      	ldr	r2, [pc, #328]	; (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 800171e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001722:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001724:	4b50      	ldr	r3, [pc, #320]	; (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	494d      	ldr	r1, [pc, #308]	; (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 8001732:	4313      	orrs	r3, r2
 8001734:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	2b00      	cmp	r3, #0
 8001740:	d040      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d107      	bne.n	800175a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174a:	4b47      	ldr	r3, [pc, #284]	; (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d115      	bne.n	8001782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e07f      	b.n	800185a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b02      	cmp	r3, #2
 8001760:	d107      	bne.n	8001772 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001762:	4b41      	ldr	r3, [pc, #260]	; (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d109      	bne.n	8001782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e073      	b.n	800185a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001772:	4b3d      	ldr	r3, [pc, #244]	; (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e06b      	b.n	800185a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001782:	4b39      	ldr	r3, [pc, #228]	; (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f023 0203 	bic.w	r2, r3, #3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	4936      	ldr	r1, [pc, #216]	; (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 8001790:	4313      	orrs	r3, r2
 8001792:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001794:	f7ff f8e6 	bl	8000964 <HAL_GetTick>
 8001798:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179a:	e00a      	b.n	80017b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800179c:	f7ff f8e2 	bl	8000964 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e053      	b.n	800185a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b2:	4b2d      	ldr	r3, [pc, #180]	; (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f003 020c 	and.w	r2, r3, #12
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d1eb      	bne.n	800179c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017c4:	4b27      	ldr	r3, [pc, #156]	; (8001864 <HAL_RCC_ClockConfig+0x1c0>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0307 	and.w	r3, r3, #7
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d210      	bcs.n	80017f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d2:	4b24      	ldr	r3, [pc, #144]	; (8001864 <HAL_RCC_ClockConfig+0x1c0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f023 0207 	bic.w	r2, r3, #7
 80017da:	4922      	ldr	r1, [pc, #136]	; (8001864 <HAL_RCC_ClockConfig+0x1c0>)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	4313      	orrs	r3, r2
 80017e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e2:	4b20      	ldr	r3, [pc, #128]	; (8001864 <HAL_RCC_ClockConfig+0x1c0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d001      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e032      	b.n	800185a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d008      	beq.n	8001812 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001800:	4b19      	ldr	r3, [pc, #100]	; (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	4916      	ldr	r1, [pc, #88]	; (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 800180e:	4313      	orrs	r3, r2
 8001810:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0308 	and.w	r3, r3, #8
 800181a:	2b00      	cmp	r3, #0
 800181c:	d009      	beq.n	8001832 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800181e:	4b12      	ldr	r3, [pc, #72]	; (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	490e      	ldr	r1, [pc, #56]	; (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 800182e:	4313      	orrs	r3, r2
 8001830:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001832:	f000 f821 	bl	8001878 <HAL_RCC_GetSysClockFreq>
 8001836:	4602      	mov	r2, r0
 8001838:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <HAL_RCC_ClockConfig+0x1c4>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	091b      	lsrs	r3, r3, #4
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	490a      	ldr	r1, [pc, #40]	; (800186c <HAL_RCC_ClockConfig+0x1c8>)
 8001844:	5ccb      	ldrb	r3, [r1, r3]
 8001846:	fa22 f303 	lsr.w	r3, r2, r3
 800184a:	4a09      	ldr	r2, [pc, #36]	; (8001870 <HAL_RCC_ClockConfig+0x1cc>)
 800184c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800184e:	4b09      	ldr	r3, [pc, #36]	; (8001874 <HAL_RCC_ClockConfig+0x1d0>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff f844 	bl	80008e0 <HAL_InitTick>

  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40022000 	.word	0x40022000
 8001868:	40021000 	.word	0x40021000
 800186c:	08003160 	.word	0x08003160
 8001870:	20000000 	.word	0x20000000
 8001874:	20000004 	.word	0x20000004

08001878 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001878:	b490      	push	{r4, r7}
 800187a:	b08a      	sub	sp, #40	; 0x28
 800187c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800187e:	4b2a      	ldr	r3, [pc, #168]	; (8001928 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001880:	1d3c      	adds	r4, r7, #4
 8001882:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001884:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001888:	f240 2301 	movw	r3, #513	; 0x201
 800188c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
 8001892:	2300      	movs	r3, #0
 8001894:	61bb      	str	r3, [r7, #24]
 8001896:	2300      	movs	r3, #0
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800189e:	2300      	movs	r3, #0
 80018a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018a2:	4b22      	ldr	r3, [pc, #136]	; (800192c <HAL_RCC_GetSysClockFreq+0xb4>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f003 030c 	and.w	r3, r3, #12
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d002      	beq.n	80018b8 <HAL_RCC_GetSysClockFreq+0x40>
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	d003      	beq.n	80018be <HAL_RCC_GetSysClockFreq+0x46>
 80018b6:	e02d      	b.n	8001914 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018b8:	4b1d      	ldr	r3, [pc, #116]	; (8001930 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018ba:	623b      	str	r3, [r7, #32]
      break;
 80018bc:	e02d      	b.n	800191a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	0c9b      	lsrs	r3, r3, #18
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018ca:	4413      	add	r3, r2
 80018cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80018d0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d013      	beq.n	8001904 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018dc:	4b13      	ldr	r3, [pc, #76]	; (800192c <HAL_RCC_GetSysClockFreq+0xb4>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	0c5b      	lsrs	r3, r3, #17
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018ea:	4413      	add	r3, r2
 80018ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80018f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	4a0e      	ldr	r2, [pc, #56]	; (8001930 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018f6:	fb02 f203 	mul.w	r2, r2, r3
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
 8001902:	e004      	b.n	800190e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	4a0b      	ldr	r2, [pc, #44]	; (8001934 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001908:	fb02 f303 	mul.w	r3, r2, r3
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	623b      	str	r3, [r7, #32]
      break;
 8001912:	e002      	b.n	800191a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001914:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001916:	623b      	str	r3, [r7, #32]
      break;
 8001918:	bf00      	nop
    }
  }
  return sysclockfreq;
 800191a:	6a3b      	ldr	r3, [r7, #32]
}
 800191c:	4618      	mov	r0, r3
 800191e:	3728      	adds	r7, #40	; 0x28
 8001920:	46bd      	mov	sp, r7
 8001922:	bc90      	pop	{r4, r7}
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	08003150 	.word	0x08003150
 800192c:	40021000 	.word	0x40021000
 8001930:	007a1200 	.word	0x007a1200
 8001934:	003d0900 	.word	0x003d0900

08001938 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800193c:	4b02      	ldr	r3, [pc, #8]	; (8001948 <HAL_RCC_GetHCLKFreq+0x10>)
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr
 8001948:	20000000 	.word	0x20000000

0800194c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001950:	f7ff fff2 	bl	8001938 <HAL_RCC_GetHCLKFreq>
 8001954:	4602      	mov	r2, r0
 8001956:	4b05      	ldr	r3, [pc, #20]	; (800196c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	0a1b      	lsrs	r3, r3, #8
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	4903      	ldr	r1, [pc, #12]	; (8001970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001962:	5ccb      	ldrb	r3, [r1, r3]
 8001964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001968:	4618      	mov	r0, r3
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40021000 	.word	0x40021000
 8001970:	08003170 	.word	0x08003170

08001974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001978:	f7ff ffde 	bl	8001938 <HAL_RCC_GetHCLKFreq>
 800197c:	4602      	mov	r2, r0
 800197e:	4b05      	ldr	r3, [pc, #20]	; (8001994 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	0adb      	lsrs	r3, r3, #11
 8001984:	f003 0307 	and.w	r3, r3, #7
 8001988:	4903      	ldr	r1, [pc, #12]	; (8001998 <HAL_RCC_GetPCLK2Freq+0x24>)
 800198a:	5ccb      	ldrb	r3, [r1, r3]
 800198c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001990:	4618      	mov	r0, r3
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40021000 	.word	0x40021000
 8001998:	08003170 	.word	0x08003170

0800199c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019a4:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <RCC_Delay+0x34>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <RCC_Delay+0x38>)
 80019aa:	fba2 2303 	umull	r2, r3, r2, r3
 80019ae:	0a5b      	lsrs	r3, r3, #9
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	fb02 f303 	mul.w	r3, r2, r3
 80019b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019b8:	bf00      	nop
  }
  while (Delay --);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	1e5a      	subs	r2, r3, #1
 80019be:	60fa      	str	r2, [r7, #12]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1f9      	bne.n	80019b8 <RCC_Delay+0x1c>
}
 80019c4:	bf00      	nop
 80019c6:	bf00      	nop
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr
 80019d0:	20000000 	.word	0x20000000
 80019d4:	10624dd3 	.word	0x10624dd3

080019d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e04c      	b.n	8001a84 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d111      	bne.n	8001a1a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 fbf4 	bl	80021ec <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d102      	bne.n	8001a12 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a1f      	ldr	r2, [pc, #124]	; (8001a8c <HAL_TIM_Base_Init+0xb4>)
 8001a10:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	3304      	adds	r3, #4
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	f000 facd 	bl	8001fcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2201      	movs	r2, #1
 8001a66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	08000615 	.word	0x08000615

08001a90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d001      	beq.n	8001aa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e044      	b.n	8001b32 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2202      	movs	r2, #2
 8001aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68da      	ldr	r2, [r3, #12]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f042 0201 	orr.w	r2, r2, #1
 8001abe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a1d      	ldr	r2, [pc, #116]	; (8001b3c <HAL_TIM_Base_Start_IT+0xac>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d018      	beq.n	8001afc <HAL_TIM_Base_Start_IT+0x6c>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a1c      	ldr	r2, [pc, #112]	; (8001b40 <HAL_TIM_Base_Start_IT+0xb0>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d013      	beq.n	8001afc <HAL_TIM_Base_Start_IT+0x6c>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001adc:	d00e      	beq.n	8001afc <HAL_TIM_Base_Start_IT+0x6c>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a18      	ldr	r2, [pc, #96]	; (8001b44 <HAL_TIM_Base_Start_IT+0xb4>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d009      	beq.n	8001afc <HAL_TIM_Base_Start_IT+0x6c>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a16      	ldr	r2, [pc, #88]	; (8001b48 <HAL_TIM_Base_Start_IT+0xb8>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d004      	beq.n	8001afc <HAL_TIM_Base_Start_IT+0x6c>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a15      	ldr	r2, [pc, #84]	; (8001b4c <HAL_TIM_Base_Start_IT+0xbc>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d111      	bne.n	8001b20 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2b06      	cmp	r3, #6
 8001b0c:	d010      	beq.n	8001b30 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f042 0201 	orr.w	r2, r2, #1
 8001b1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b1e:	e007      	b.n	8001b30 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0201 	orr.w	r2, r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	40012c00 	.word	0x40012c00
 8001b40:	40013400 	.word	0x40013400
 8001b44:	40000400 	.word	0x40000400
 8001b48:	40000800 	.word	0x40000800
 8001b4c:	40000c00 	.word	0x40000c00

08001b50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d128      	bne.n	8001bb8 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d121      	bne.n	8001bb8 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f06f 0202 	mvn.w	r2, #2
 8001b7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d005      	beq.n	8001b9e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	4798      	blx	r3
 8001b9c:	e009      	b.n	8001bb2 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	f003 0304 	and.w	r3, r3, #4
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	d128      	bne.n	8001c18 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d121      	bne.n	8001c18 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f06f 0204 	mvn.w	r2, #4
 8001bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2202      	movs	r2, #2
 8001be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d005      	beq.n	8001bfe <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	4798      	blx	r3
 8001bfc:	e009      	b.n	8001c12 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	f003 0308 	and.w	r3, r3, #8
 8001c22:	2b08      	cmp	r3, #8
 8001c24:	d128      	bne.n	8001c78 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d121      	bne.n	8001c78 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f06f 0208 	mvn.w	r2, #8
 8001c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2204      	movs	r2, #4
 8001c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d005      	beq.n	8001c5e <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	4798      	blx	r3
 8001c5c:	e009      	b.n	8001c72 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	f003 0310 	and.w	r3, r3, #16
 8001c82:	2b10      	cmp	r3, #16
 8001c84:	d128      	bne.n	8001cd8 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	f003 0310 	and.w	r3, r3, #16
 8001c90:	2b10      	cmp	r3, #16
 8001c92:	d121      	bne.n	8001cd8 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f06f 0210 	mvn.w	r2, #16
 8001c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2208      	movs	r2, #8
 8001ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d005      	beq.n	8001cbe <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	4798      	blx	r3
 8001cbc:	e009      	b.n	8001cd2 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d110      	bne.n	8001d08 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d109      	bne.n	8001d08 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f06f 0201 	mvn.w	r2, #1
 8001cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d12:	2b80      	cmp	r3, #128	; 0x80
 8001d14:	d110      	bne.n	8001d38 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d20:	2b80      	cmp	r3, #128	; 0x80
 8001d22:	d109      	bne.n	8001d38 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d42:	2b40      	cmp	r3, #64	; 0x40
 8001d44:	d110      	bne.n	8001d68 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d50:	2b40      	cmp	r3, #64	; 0x40
 8001d52:	d109      	bne.n	8001d68 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	f003 0320 	and.w	r3, r3, #32
 8001d72:	2b20      	cmp	r3, #32
 8001d74:	d110      	bne.n	8001d98 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	f003 0320 	and.w	r3, r3, #32
 8001d80:	2b20      	cmp	r3, #32
 8001d82:	d109      	bne.n	8001d98 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f06f 0220 	mvn.w	r2, #32
 8001d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d101      	bne.n	8001db8 <HAL_TIM_ConfigClockSource+0x18>
 8001db4:	2302      	movs	r3, #2
 8001db6:	e0b3      	b.n	8001f20 <HAL_TIM_ConfigClockSource+0x180>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001dd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001dde:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	68fa      	ldr	r2, [r7, #12]
 8001de6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001df0:	d03e      	beq.n	8001e70 <HAL_TIM_ConfigClockSource+0xd0>
 8001df2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001df6:	f200 8087 	bhi.w	8001f08 <HAL_TIM_ConfigClockSource+0x168>
 8001dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dfe:	f000 8085 	beq.w	8001f0c <HAL_TIM_ConfigClockSource+0x16c>
 8001e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e06:	d87f      	bhi.n	8001f08 <HAL_TIM_ConfigClockSource+0x168>
 8001e08:	2b70      	cmp	r3, #112	; 0x70
 8001e0a:	d01a      	beq.n	8001e42 <HAL_TIM_ConfigClockSource+0xa2>
 8001e0c:	2b70      	cmp	r3, #112	; 0x70
 8001e0e:	d87b      	bhi.n	8001f08 <HAL_TIM_ConfigClockSource+0x168>
 8001e10:	2b60      	cmp	r3, #96	; 0x60
 8001e12:	d050      	beq.n	8001eb6 <HAL_TIM_ConfigClockSource+0x116>
 8001e14:	2b60      	cmp	r3, #96	; 0x60
 8001e16:	d877      	bhi.n	8001f08 <HAL_TIM_ConfigClockSource+0x168>
 8001e18:	2b50      	cmp	r3, #80	; 0x50
 8001e1a:	d03c      	beq.n	8001e96 <HAL_TIM_ConfigClockSource+0xf6>
 8001e1c:	2b50      	cmp	r3, #80	; 0x50
 8001e1e:	d873      	bhi.n	8001f08 <HAL_TIM_ConfigClockSource+0x168>
 8001e20:	2b40      	cmp	r3, #64	; 0x40
 8001e22:	d058      	beq.n	8001ed6 <HAL_TIM_ConfigClockSource+0x136>
 8001e24:	2b40      	cmp	r3, #64	; 0x40
 8001e26:	d86f      	bhi.n	8001f08 <HAL_TIM_ConfigClockSource+0x168>
 8001e28:	2b30      	cmp	r3, #48	; 0x30
 8001e2a:	d064      	beq.n	8001ef6 <HAL_TIM_ConfigClockSource+0x156>
 8001e2c:	2b30      	cmp	r3, #48	; 0x30
 8001e2e:	d86b      	bhi.n	8001f08 <HAL_TIM_ConfigClockSource+0x168>
 8001e30:	2b20      	cmp	r3, #32
 8001e32:	d060      	beq.n	8001ef6 <HAL_TIM_ConfigClockSource+0x156>
 8001e34:	2b20      	cmp	r3, #32
 8001e36:	d867      	bhi.n	8001f08 <HAL_TIM_ConfigClockSource+0x168>
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d05c      	beq.n	8001ef6 <HAL_TIM_ConfigClockSource+0x156>
 8001e3c:	2b10      	cmp	r3, #16
 8001e3e:	d05a      	beq.n	8001ef6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001e40:	e062      	b.n	8001f08 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6818      	ldr	r0, [r3, #0]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	6899      	ldr	r1, [r3, #8]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	f000 f9ac 	bl	80021ae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001e64:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	609a      	str	r2, [r3, #8]
      break;
 8001e6e:	e04e      	b.n	8001f0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6818      	ldr	r0, [r3, #0]
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	6899      	ldr	r1, [r3, #8]
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f000 f995 	bl	80021ae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e92:	609a      	str	r2, [r3, #8]
      break;
 8001e94:	e03b      	b.n	8001f0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6818      	ldr	r0, [r3, #0]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	6859      	ldr	r1, [r3, #4]
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	f000 f90c 	bl	80020c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2150      	movs	r1, #80	; 0x50
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 f963 	bl	800217a <TIM_ITRx_SetConfig>
      break;
 8001eb4:	e02b      	b.n	8001f0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6818      	ldr	r0, [r3, #0]
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	6859      	ldr	r1, [r3, #4]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	f000 f92a 	bl	800211c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2160      	movs	r1, #96	; 0x60
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f000 f953 	bl	800217a <TIM_ITRx_SetConfig>
      break;
 8001ed4:	e01b      	b.n	8001f0e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6818      	ldr	r0, [r3, #0]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	6859      	ldr	r1, [r3, #4]
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	f000 f8ec 	bl	80020c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2140      	movs	r1, #64	; 0x40
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 f943 	bl	800217a <TIM_ITRx_SetConfig>
      break;
 8001ef4:	e00b      	b.n	8001f0e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4619      	mov	r1, r3
 8001f00:	4610      	mov	r0, r2
 8001f02:	f000 f93a 	bl	800217a <TIM_ITRx_SetConfig>
        break;
 8001f06:	e002      	b.n	8001f0e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001f08:	bf00      	nop
 8001f0a:	e000      	b.n	8001f0e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001f0c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr

08001f3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr

08001f4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr

08001f5e <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr

08001f70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr

08001f82 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr

08001f94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr

08001fa6 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bc80      	pop	{r7}
 8001fc8:	4770      	bx	lr
	...

08001fcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a33      	ldr	r2, [pc, #204]	; (80020ac <TIM_Base_SetConfig+0xe0>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d013      	beq.n	800200c <TIM_Base_SetConfig+0x40>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a32      	ldr	r2, [pc, #200]	; (80020b0 <TIM_Base_SetConfig+0xe4>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d00f      	beq.n	800200c <TIM_Base_SetConfig+0x40>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff2:	d00b      	beq.n	800200c <TIM_Base_SetConfig+0x40>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a2f      	ldr	r2, [pc, #188]	; (80020b4 <TIM_Base_SetConfig+0xe8>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d007      	beq.n	800200c <TIM_Base_SetConfig+0x40>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a2e      	ldr	r2, [pc, #184]	; (80020b8 <TIM_Base_SetConfig+0xec>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d003      	beq.n	800200c <TIM_Base_SetConfig+0x40>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a2d      	ldr	r2, [pc, #180]	; (80020bc <TIM_Base_SetConfig+0xf0>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d108      	bne.n	800201e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002012:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	4313      	orrs	r3, r2
 800201c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a22      	ldr	r2, [pc, #136]	; (80020ac <TIM_Base_SetConfig+0xe0>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d013      	beq.n	800204e <TIM_Base_SetConfig+0x82>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a21      	ldr	r2, [pc, #132]	; (80020b0 <TIM_Base_SetConfig+0xe4>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d00f      	beq.n	800204e <TIM_Base_SetConfig+0x82>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002034:	d00b      	beq.n	800204e <TIM_Base_SetConfig+0x82>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a1e      	ldr	r2, [pc, #120]	; (80020b4 <TIM_Base_SetConfig+0xe8>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d007      	beq.n	800204e <TIM_Base_SetConfig+0x82>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a1d      	ldr	r2, [pc, #116]	; (80020b8 <TIM_Base_SetConfig+0xec>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d003      	beq.n	800204e <TIM_Base_SetConfig+0x82>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a1c      	ldr	r2, [pc, #112]	; (80020bc <TIM_Base_SetConfig+0xf0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d108      	bne.n	8002060 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4313      	orrs	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	4313      	orrs	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a09      	ldr	r2, [pc, #36]	; (80020ac <TIM_Base_SetConfig+0xe0>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d003      	beq.n	8002094 <TIM_Base_SetConfig+0xc8>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a08      	ldr	r2, [pc, #32]	; (80020b0 <TIM_Base_SetConfig+0xe4>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d103      	bne.n	800209c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	615a      	str	r2, [r3, #20]
}
 80020a2:	bf00      	nop
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr
 80020ac:	40012c00 	.word	0x40012c00
 80020b0:	40013400 	.word	0x40013400
 80020b4:	40000400 	.word	0x40000400
 80020b8:	40000800 	.word	0x40000800
 80020bc:	40000c00 	.word	0x40000c00

080020c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b087      	sub	sp, #28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	f023 0201 	bic.w	r2, r3, #1
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	011b      	lsls	r3, r3, #4
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	f023 030a 	bic.w	r3, r3, #10
 80020fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	4313      	orrs	r3, r2
 8002104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	621a      	str	r2, [r3, #32]
}
 8002112:	bf00      	nop
 8002114:	371c      	adds	r7, #28
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr

0800211c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800211c:	b480      	push	{r7}
 800211e:	b087      	sub	sp, #28
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	f023 0210 	bic.w	r2, r3, #16
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002146:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	031b      	lsls	r3, r3, #12
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	4313      	orrs	r3, r2
 8002150:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002158:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	011b      	lsls	r3, r3, #4
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	621a      	str	r2, [r3, #32]
}
 8002170:	bf00      	nop
 8002172:	371c      	adds	r7, #28
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr

0800217a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800217a:	b480      	push	{r7}
 800217c:	b085      	sub	sp, #20
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002190:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4313      	orrs	r3, r2
 8002198:	f043 0307 	orr.w	r3, r3, #7
 800219c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	609a      	str	r2, [r3, #8]
}
 80021a4:	bf00      	nop
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr

080021ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b087      	sub	sp, #28
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	60f8      	str	r0, [r7, #12]
 80021b6:	60b9      	str	r1, [r7, #8]
 80021b8:	607a      	str	r2, [r7, #4]
 80021ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	021a      	lsls	r2, r3, #8
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	431a      	orrs	r2, r3
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	4313      	orrs	r3, r2
 80021da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	609a      	str	r2, [r3, #8]
}
 80021e2:	bf00      	nop
 80021e4:	371c      	adds	r7, #28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr

080021ec <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a1c      	ldr	r2, [pc, #112]	; (8002268 <TIM_ResetCallback+0x7c>)
 80021f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a1b      	ldr	r2, [pc, #108]	; (800226c <TIM_ResetCallback+0x80>)
 8002200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a1a      	ldr	r2, [pc, #104]	; (8002270 <TIM_ResetCallback+0x84>)
 8002208:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4a19      	ldr	r2, [pc, #100]	; (8002274 <TIM_ResetCallback+0x88>)
 8002210:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a18      	ldr	r2, [pc, #96]	; (8002278 <TIM_ResetCallback+0x8c>)
 8002218:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a17      	ldr	r2, [pc, #92]	; (800227c <TIM_ResetCallback+0x90>)
 8002220:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a16      	ldr	r2, [pc, #88]	; (8002280 <TIM_ResetCallback+0x94>)
 8002228:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a15      	ldr	r2, [pc, #84]	; (8002284 <TIM_ResetCallback+0x98>)
 8002230:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a14      	ldr	r2, [pc, #80]	; (8002288 <TIM_ResetCallback+0x9c>)
 8002238:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a13      	ldr	r2, [pc, #76]	; (800228c <TIM_ResetCallback+0xa0>)
 8002240:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a12      	ldr	r2, [pc, #72]	; (8002290 <TIM_ResetCallback+0xa4>)
 8002248:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a11      	ldr	r2, [pc, #68]	; (8002294 <TIM_ResetCallback+0xa8>)
 8002250:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a10      	ldr	r2, [pc, #64]	; (8002298 <TIM_ResetCallback+0xac>)
 8002258:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	0800054d 	.word	0x0800054d
 800226c:	08001f29 	.word	0x08001f29
 8002270:	08001f95 	.word	0x08001f95
 8002274:	08001fa7 	.word	0x08001fa7
 8002278:	08001f4d 	.word	0x08001f4d
 800227c:	08001f5f 	.word	0x08001f5f
 8002280:	08001f3b 	.word	0x08001f3b
 8002284:	08001f71 	.word	0x08001f71
 8002288:	08001f83 	.word	0x08001f83
 800228c:	08001fb9 	.word	0x08001fb9
 8002290:	08002375 	.word	0x08002375
 8002294:	08002387 	.word	0x08002387
 8002298:	08002399 	.word	0x08002399

0800229c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e050      	b.n	8002356 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2202      	movs	r2, #2
 80022c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a1b      	ldr	r2, [pc, #108]	; (8002360 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d018      	beq.n	800232a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a19      	ldr	r2, [pc, #100]	; (8002364 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d013      	beq.n	800232a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800230a:	d00e      	beq.n	800232a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a15      	ldr	r2, [pc, #84]	; (8002368 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d009      	beq.n	800232a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a14      	ldr	r2, [pc, #80]	; (800236c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d004      	beq.n	800232a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a12      	ldr	r2, [pc, #72]	; (8002370 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d10c      	bne.n	8002344 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002330:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	4313      	orrs	r3, r2
 800233a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr
 8002360:	40012c00 	.word	0x40012c00
 8002364:	40013400 	.word	0x40013400
 8002368:	40000400 	.word	0x40000400
 800236c:	40000800 	.word	0x40000800
 8002370:	40000c00 	.word	0x40000c00

08002374 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr

08002386 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	4770      	bx	lr

08002398 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr
	...

080023ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e04a      	b.n	8002454 <HAL_UART_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d111      	bne.n	80023ee <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 fa6e 	bl	80028b4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d102      	bne.n	80023e6 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a1e      	ldr	r2, [pc, #120]	; (800245c <HAL_UART_Init+0xb0>)
 80023e4:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2224      	movs	r2, #36	; 0x24
 80023f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68da      	ldr	r2, [r3, #12]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002404:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 fc18 	bl	8002c3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	691a      	ldr	r2, [r3, #16]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800241a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	695a      	ldr	r2, [r3, #20]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800242a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68da      	ldr	r2, [r3, #12]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800243a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2220      	movs	r2, #32
 8002446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2220      	movs	r2, #32
 800244e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	08000695 	.word	0x08000695

08002460 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	4613      	mov	r3, r2
 800246c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b20      	cmp	r3, #32
 8002478:	d11d      	bne.n	80024b6 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d002      	beq.n	8002486 <HAL_UART_Receive_IT+0x26>
 8002480:	88fb      	ldrh	r3, [r7, #6]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e016      	b.n	80024b8 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002490:	2b01      	cmp	r3, #1
 8002492:	d101      	bne.n	8002498 <HAL_UART_Receive_IT+0x38>
 8002494:	2302      	movs	r3, #2
 8002496:	e00f      	b.n	80024b8 <HAL_UART_Receive_IT+0x58>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80024a6:	88fb      	ldrh	r3, [r7, #6]
 80024a8:	461a      	mov	r2, r3
 80024aa:	68b9      	ldr	r1, [r7, #8]
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f000 fa37 	bl	8002920 <UART_Start_Receive_IT>
 80024b2:	4603      	mov	r3, r0
 80024b4:	e000      	b.n	80024b8 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80024b6:	2302      	movs	r3, #2
  }
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08a      	sub	sp, #40	; 0x28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10d      	bne.n	8002512 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	f003 0320 	and.w	r3, r3, #32
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d008      	beq.n	8002512 <HAL_UART_IRQHandler+0x52>
 8002500:	6a3b      	ldr	r3, [r7, #32]
 8002502:	f003 0320 	and.w	r3, r3, #32
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 faea 	bl	8002ae4 <UART_Receive_IT>
      return;
 8002510:	e180      	b.n	8002814 <HAL_UART_IRQHandler+0x354>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 80b4 	beq.w	8002682 <HAL_UART_IRQHandler+0x1c2>
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b00      	cmp	r3, #0
 8002522:	d105      	bne.n	8002530 <HAL_UART_IRQHandler+0x70>
 8002524:	6a3b      	ldr	r3, [r7, #32]
 8002526:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 80a9 	beq.w	8002682 <HAL_UART_IRQHandler+0x1c2>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00a      	beq.n	8002550 <HAL_UART_IRQHandler+0x90>
 800253a:	6a3b      	ldr	r3, [r7, #32]
 800253c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002540:	2b00      	cmp	r3, #0
 8002542:	d005      	beq.n	8002550 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002548:	f043 0201 	orr.w	r2, r3, #1
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00a      	beq.n	8002570 <HAL_UART_IRQHandler+0xb0>
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	f043 0202 	orr.w	r2, r3, #2
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00a      	beq.n	8002590 <HAL_UART_IRQHandler+0xd0>
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	f043 0204 	orr.w	r2, r3, #4
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00f      	beq.n	80025ba <HAL_UART_IRQHandler+0xfa>
 800259a:	6a3b      	ldr	r3, [r7, #32]
 800259c:	f003 0320 	and.w	r3, r3, #32
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d104      	bne.n	80025ae <HAL_UART_IRQHandler+0xee>
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f003 0301 	and.w	r3, r3, #1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d005      	beq.n	80025ba <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	f043 0208 	orr.w	r2, r3, #8
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 8123 	beq.w	800280a <HAL_UART_IRQHandler+0x34a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	f003 0320 	and.w	r3, r3, #32
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d007      	beq.n	80025de <HAL_UART_IRQHandler+0x11e>
 80025ce:	6a3b      	ldr	r3, [r7, #32]
 80025d0:	f003 0320 	and.w	r3, r3, #32
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d002      	beq.n	80025de <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 fa83 	bl	8002ae4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	bf14      	ite	ne
 80025ec:	2301      	movne	r3, #1
 80025ee:	2300      	moveq	r3, #0
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	f003 0308 	and.w	r3, r3, #8
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d102      	bne.n	8002606 <HAL_UART_IRQHandler+0x146>
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d033      	beq.n	800266e <HAL_UART_IRQHandler+0x1ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f9c3 	bl	8002992 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002616:	2b00      	cmp	r3, #0
 8002618:	d024      	beq.n	8002664 <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	695a      	ldr	r2, [r3, #20]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002628:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262e:	2b00      	cmp	r3, #0
 8002630:	d013      	beq.n	800265a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002636:	4a79      	ldr	r2, [pc, #484]	; (800281c <HAL_UART_IRQHandler+0x35c>)
 8002638:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263e:	4618      	mov	r0, r3
 8002640:	f7fe fae2 	bl	8000c08 <HAL_DMA_Abort_IT>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d019      	beq.n	800267e <HAL_UART_IRQHandler+0x1be>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002654:	4610      	mov	r0, r2
 8002656:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002658:	e011      	b.n	800267e <HAL_UART_IRQHandler+0x1be>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002662:	e00c      	b.n	800267e <HAL_UART_IRQHandler+0x1be>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800266c:	e007      	b.n	800267e <HAL_UART_IRQHandler+0x1be>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800267c:	e0c5      	b.n	800280a <HAL_UART_IRQHandler+0x34a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800267e:	bf00      	nop
    return;
 8002680:	e0c3      	b.n	800280a <HAL_UART_IRQHandler+0x34a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	2b01      	cmp	r3, #1
 8002688:	f040 80a3 	bne.w	80027d2 <HAL_UART_IRQHandler+0x312>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	f003 0310 	and.w	r3, r3, #16
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 809d 	beq.w	80027d2 <HAL_UART_IRQHandler+0x312>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	f003 0310 	and.w	r3, r3, #16
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 8097 	beq.w	80027d2 <HAL_UART_IRQHandler+0x312>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80026a4:	2300      	movs	r3, #0
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d04f      	beq.n	8002768 <HAL_UART_IRQHandler+0x2a8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80026d2:	8a3b      	ldrh	r3, [r7, #16]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 809a 	beq.w	800280e <HAL_UART_IRQHandler+0x34e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80026de:	8a3a      	ldrh	r2, [r7, #16]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	f080 8094 	bcs.w	800280e <HAL_UART_IRQHandler+0x34e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	8a3a      	ldrh	r2, [r7, #16]
 80026ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	2b20      	cmp	r3, #32
 80026f4:	d02b      	beq.n	800274e <HAL_UART_IRQHandler+0x28e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002704:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695a      	ldr	r2, [r3, #20]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0201 	bic.w	r2, r2, #1
 8002714:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695a      	ldr	r2, [r3, #20]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002724:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2220      	movs	r2, #32
 800272a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68da      	ldr	r2, [r3, #12]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0210 	bic.w	r2, r2, #16
 8002742:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002748:	4618      	mov	r0, r3
 800274a:	f7fe fa22 	bl	8000b92 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800275a:	b292      	uxth	r2, r2
 800275c:	1a8a      	subs	r2, r1, r2
 800275e:	b292      	uxth	r2, r2
 8002760:	4611      	mov	r1, r2
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
      return;
 8002766:	e052      	b.n	800280e <HAL_UART_IRQHandler+0x34e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002770:	b29b      	uxth	r3, r3
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800277a:	b29b      	uxth	r3, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	d048      	beq.n	8002812 <HAL_UART_IRQHandler+0x352>
          &&(nb_rx_data > 0U) )
 8002780:	8a7b      	ldrh	r3, [r7, #18]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d045      	beq.n	8002812 <HAL_UART_IRQHandler+0x352>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002794:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695a      	ldr	r2, [r3, #20]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0201 	bic.w	r2, r2, #1
 80027a4:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2220      	movs	r2, #32
 80027aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0210 	bic.w	r2, r2, #16
 80027c2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027c8:	8a7a      	ldrh	r2, [r7, #18]
 80027ca:	4611      	mov	r1, r2
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
      return;
 80027d0:	e01f      	b.n	8002812 <HAL_UART_IRQHandler+0x352>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d008      	beq.n	80027ee <HAL_UART_IRQHandler+0x32e>
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_UART_IRQHandler+0x32e>
  {
    UART_Transmit_IT(huart);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f914 	bl	8002a14 <UART_Transmit_IT>
    return;
 80027ec:	e012      	b.n	8002814 <HAL_UART_IRQHandler+0x354>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00d      	beq.n	8002814 <HAL_UART_IRQHandler+0x354>
 80027f8:	6a3b      	ldr	r3, [r7, #32]
 80027fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d008      	beq.n	8002814 <HAL_UART_IRQHandler+0x354>
  {
    UART_EndTransmit_IT(huart);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f955 	bl	8002ab2 <UART_EndTransmit_IT>
    return;
 8002808:	e004      	b.n	8002814 <HAL_UART_IRQHandler+0x354>
    return;
 800280a:	bf00      	nop
 800280c:	e002      	b.n	8002814 <HAL_UART_IRQHandler+0x354>
      return;
 800280e:	bf00      	nop
 8002810:	e000      	b.n	8002814 <HAL_UART_IRQHandler+0x354>
      return;
 8002812:	bf00      	nop
  }
}
 8002814:	3728      	adds	r7, #40	; 0x28
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	080029eb 	.word	0x080029eb

08002820 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr

08002832 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr

08002844 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	bc80      	pop	{r7}
 8002854:	4770      	bx	lr

08002856 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr

08002868 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	bc80      	pop	{r7}
 8002878:	4770      	bx	lr

0800287a <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800287a:	b480      	push	{r7}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr

0800288c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr

0800289e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
 80028a6:	460b      	mov	r3, r1
 80028a8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a0f      	ldr	r2, [pc, #60]	; (80028fc <UART_InitCallbacksToDefault+0x48>)
 80028c0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a0e      	ldr	r2, [pc, #56]	; (8002900 <UART_InitCallbacksToDefault+0x4c>)
 80028c6:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a0e      	ldr	r2, [pc, #56]	; (8002904 <UART_InitCallbacksToDefault+0x50>)
 80028cc:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a0d      	ldr	r2, [pc, #52]	; (8002908 <UART_InitCallbacksToDefault+0x54>)
 80028d2:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a0d      	ldr	r2, [pc, #52]	; (800290c <UART_InitCallbacksToDefault+0x58>)
 80028d8:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a0c      	ldr	r2, [pc, #48]	; (8002910 <UART_InitCallbacksToDefault+0x5c>)
 80028de:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a0c      	ldr	r2, [pc, #48]	; (8002914 <UART_InitCallbacksToDefault+0x60>)
 80028e4:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a0b      	ldr	r2, [pc, #44]	; (8002918 <UART_InitCallbacksToDefault+0x64>)
 80028ea:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a0b      	ldr	r2, [pc, #44]	; (800291c <UART_InitCallbacksToDefault+0x68>)
 80028f0:	669a      	str	r2, [r3, #104]	; 0x68

}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr
 80028fc:	08002833 	.word	0x08002833
 8002900:	08002821 	.word	0x08002821
 8002904:	08002845 	.word	0x08002845
 8002908:	0800056d 	.word	0x0800056d
 800290c:	08002857 	.word	0x08002857
 8002910:	08002869 	.word	0x08002869
 8002914:	0800287b 	.word	0x0800287b
 8002918:	0800288d 	.word	0x0800288d
 800291c:	0800289f 	.word	0x0800289f

08002920 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	4613      	mov	r3, r2
 800292c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	88fa      	ldrh	r2, [r7, #6]
 8002938:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	88fa      	ldrh	r2, [r7, #6]
 800293e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2222      	movs	r2, #34	; 0x22
 800294a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002964:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	695a      	ldr	r2, [r3, #20]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f042 0201 	orr.w	r2, r2, #1
 8002974:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f042 0220 	orr.w	r2, r2, #32
 8002984:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3714      	adds	r7, #20
 800298c:	46bd      	mov	sp, r7
 800298e:	bc80      	pop	{r7}
 8002990:	4770      	bx	lr

08002992 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80029a8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	695a      	ldr	r2, [r3, #20]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0201 	bic.w	r2, r2, #1
 80029b8:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d107      	bne.n	80029d2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0210 	bic.w	r2, r2, #16
 80029d0:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2220      	movs	r2, #32
 80029d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	631a      	str	r2, [r3, #48]	; 0x30
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr

080029ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b084      	sub	sp, #16
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a0c:	bf00      	nop
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b21      	cmp	r3, #33	; 0x21
 8002a26:	d13e      	bne.n	8002aa6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a30:	d114      	bne.n	8002a5c <UART_Transmit_IT+0x48>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d110      	bne.n	8002a5c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	881b      	ldrh	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a4e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	1c9a      	adds	r2, r3, #2
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	621a      	str	r2, [r3, #32]
 8002a5a:	e008      	b.n	8002a6e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	1c59      	adds	r1, r3, #1
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	6211      	str	r1, [r2, #32]
 8002a66:	781a      	ldrb	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10f      	bne.n	8002aa2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68da      	ldr	r2, [r3, #12]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a90:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aa0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	e000      	b.n	8002aa8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002aa6:	2302      	movs	r3, #2
  }
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr

08002ab2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68da      	ldr	r2, [r3, #12]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ac8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2220      	movs	r2, #32
 8002ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b22      	cmp	r3, #34	; 0x22
 8002af6:	f040 809b 	bne.w	8002c30 <UART_Receive_IT+0x14c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b02:	d117      	bne.n	8002b34 <UART_Receive_IT+0x50>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d113      	bne.n	8002b34 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b14:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2c:	1c9a      	adds	r2, r3, #2
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	629a      	str	r2, [r3, #40]	; 0x28
 8002b32:	e026      	b.n	8002b82 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b38:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b46:	d007      	beq.n	8002b58 <UART_Receive_IT+0x74>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10a      	bne.n	8002b66 <UART_Receive_IT+0x82>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d106      	bne.n	8002b66 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	701a      	strb	r2, [r3, #0]
 8002b64:	e008      	b.n	8002b78 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	4619      	mov	r1, r3
 8002b90:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d14a      	bne.n	8002c2c <UART_Receive_IT+0x148>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68da      	ldr	r2, [r3, #12]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0220 	bic.w	r2, r2, #32
 8002ba4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	695a      	ldr	r2, [r3, #20]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0201 	bic.w	r2, r2, #1
 8002bc4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2220      	movs	r2, #32
 8002bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d124      	bne.n	8002c20 <UART_Receive_IT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68da      	ldr	r2, [r3, #12]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0210 	bic.w	r2, r2, #16
 8002bea:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0310 	and.w	r3, r3, #16
 8002bf6:	2b10      	cmp	r3, #16
 8002bf8:	d10a      	bne.n	8002c10 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8002c18:	4611      	mov	r1, r2
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	4798      	blx	r3
 8002c1e:	e003      	b.n	8002c28 <UART_Receive_IT+0x144>
      else
      {
       /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	4798      	blx	r3
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	e002      	b.n	8002c32 <UART_Receive_IT+0x14e>
    }
    return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	e000      	b.n	8002c32 <UART_Receive_IT+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8002c30:	2302      	movs	r3, #2
  }
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3718      	adds	r7, #24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68da      	ldr	r2, [r3, #12]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689a      	ldr	r2, [r3, #8]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002c76:	f023 030c 	bic.w	r3, r3, #12
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6812      	ldr	r2, [r2, #0]
 8002c7e:	68b9      	ldr	r1, [r7, #8]
 8002c80:	430b      	orrs	r3, r1
 8002c82:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699a      	ldr	r2, [r3, #24]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a2c      	ldr	r2, [pc, #176]	; (8002d50 <UART_SetConfig+0x114>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d103      	bne.n	8002cac <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ca4:	f7fe fe66 	bl	8001974 <HAL_RCC_GetPCLK2Freq>
 8002ca8:	60f8      	str	r0, [r7, #12]
 8002caa:	e002      	b.n	8002cb2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002cac:	f7fe fe4e 	bl	800194c <HAL_RCC_GetPCLK1Freq>
 8002cb0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	009a      	lsls	r2, r3, #2
 8002cbc:	441a      	add	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc8:	4a22      	ldr	r2, [pc, #136]	; (8002d54 <UART_SetConfig+0x118>)
 8002cca:	fba2 2303 	umull	r2, r3, r2, r3
 8002cce:	095b      	lsrs	r3, r3, #5
 8002cd0:	0119      	lsls	r1, r3, #4
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	009a      	lsls	r2, r3, #2
 8002cdc:	441a      	add	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ce8:	4b1a      	ldr	r3, [pc, #104]	; (8002d54 <UART_SetConfig+0x118>)
 8002cea:	fba3 0302 	umull	r0, r3, r3, r2
 8002cee:	095b      	lsrs	r3, r3, #5
 8002cf0:	2064      	movs	r0, #100	; 0x64
 8002cf2:	fb00 f303 	mul.w	r3, r0, r3
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	011b      	lsls	r3, r3, #4
 8002cfa:	3332      	adds	r3, #50	; 0x32
 8002cfc:	4a15      	ldr	r2, [pc, #84]	; (8002d54 <UART_SetConfig+0x118>)
 8002cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002d02:	095b      	lsrs	r3, r3, #5
 8002d04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d08:	4419      	add	r1, r3
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	009a      	lsls	r2, r3, #2
 8002d14:	441a      	add	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d20:	4b0c      	ldr	r3, [pc, #48]	; (8002d54 <UART_SetConfig+0x118>)
 8002d22:	fba3 0302 	umull	r0, r3, r3, r2
 8002d26:	095b      	lsrs	r3, r3, #5
 8002d28:	2064      	movs	r0, #100	; 0x64
 8002d2a:	fb00 f303 	mul.w	r3, r0, r3
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	3332      	adds	r3, #50	; 0x32
 8002d34:	4a07      	ldr	r2, [pc, #28]	; (8002d54 <UART_SetConfig+0x118>)
 8002d36:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3a:	095b      	lsrs	r3, r3, #5
 8002d3c:	f003 020f 	and.w	r2, r3, #15
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	440a      	add	r2, r1
 8002d46:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d48:	bf00      	nop
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40013800 	.word	0x40013800
 8002d54:	51eb851f 	.word	0x51eb851f

08002d58 <PS2_Cmd>:
static void PS2_Cmd(uint8_t CMD);
static uint8_t PS2_DataKey(void);
static void PS2_ClearData(void);

void PS2_Cmd(uint8_t CMD)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	71fb      	strb	r3, [r7, #7]
  volatile uint16_t ref=0x01;
 8002d62:	2301      	movs	r3, #1
 8002d64:	81fb      	strh	r3, [r7, #14]
  Data[1] = 0;
 8002d66:	4b20      	ldr	r3, [pc, #128]	; (8002de8 <PS2_Cmd+0x90>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	705a      	strb	r2, [r3, #1]
  for(ref=0x01;ref<0x0100;ref<<=1)
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	81fb      	strh	r3, [r7, #14]
 8002d70:	e02e      	b.n	8002dd0 <PS2_Cmd+0x78>
  {
    if(ref&CMD)
 8002d72:	89fb      	ldrh	r3, [r7, #14]
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	461a      	mov	r2, r3
 8002d78:	79fb      	ldrb	r3, [r7, #7]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <PS2_Cmd+0x30>
    {
      DO_H;
 8002d80:	4b1a      	ldr	r3, [pc, #104]	; (8002dec <PS2_Cmd+0x94>)
 8002d82:	2201      	movs	r2, #1
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	e002      	b.n	8002d8e <PS2_Cmd+0x36>
    }
    else DO_L;
 8002d88:	4b18      	ldr	r3, [pc, #96]	; (8002dec <PS2_Cmd+0x94>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]

    CLK_H;
 8002d8e:	4b18      	ldr	r3, [pc, #96]	; (8002df0 <PS2_Cmd+0x98>)
 8002d90:	2201      	movs	r2, #1
 8002d92:	601a      	str	r2, [r3, #0]
    UTILS_delayUs(5);
 8002d94:	2005      	movs	r0, #5
 8002d96:	f000 f989 	bl	80030ac <UTILS_delayUs>
    CLK_L;
 8002d9a:	4b15      	ldr	r3, [pc, #84]	; (8002df0 <PS2_Cmd+0x98>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
    UTILS_delayUs(5);
 8002da0:	2005      	movs	r0, #5
 8002da2:	f000 f983 	bl	80030ac <UTILS_delayUs>
    CLK_H;
 8002da6:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <PS2_Cmd+0x98>)
 8002da8:	2201      	movs	r2, #1
 8002daa:	601a      	str	r2, [r3, #0]
    if(DI)
 8002dac:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <PS2_Cmd+0x9c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d008      	beq.n	8002dc6 <PS2_Cmd+0x6e>
      Data[1] = ref|Data[1];
 8002db4:	89fb      	ldrh	r3, [r7, #14]
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	4b0b      	ldr	r3, [pc, #44]	; (8002de8 <PS2_Cmd+0x90>)
 8002dbc:	785b      	ldrb	r3, [r3, #1]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <PS2_Cmd+0x90>)
 8002dc4:	705a      	strb	r2, [r3, #1]
  for(ref=0x01;ref<0x0100;ref<<=1)
 8002dc6:	89fb      	ldrh	r3, [r7, #14]
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	81fb      	strh	r3, [r7, #14]
 8002dd0:	89fb      	ldrh	r3, [r7, #14]
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	2bff      	cmp	r3, #255	; 0xff
 8002dd6:	d9cc      	bls.n	8002d72 <PS2_Cmd+0x1a>
  }
  UTILS_delayUs(16);
 8002dd8:	2010      	movs	r0, #16
 8002dda:	f000 f967 	bl	80030ac <UTILS_delayUs>
}
 8002dde:	bf00      	nop
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	2000004c 	.word	0x2000004c
 8002dec:	42220184 	.word	0x42220184
 8002df0:	42210190 	.word	0x42210190
 8002df4:	42220108 	.word	0x42220108

08002df8 <PS2_ReadData>:

void PS2_ReadData(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
  volatile uint8_t byte=0;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	71fb      	strb	r3, [r7, #7]
  volatile uint16_t ref=0x01;
 8002e02:	2301      	movs	r3, #1
 8002e04:	80bb      	strh	r3, [r7, #4]
  CS_L;
 8002e06:	4b28      	ldr	r3, [pc, #160]	; (8002ea8 <PS2_ReadData+0xb0>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
  PS2_Cmd(Comd[0]);
 8002e0c:	4b27      	ldr	r3, [pc, #156]	; (8002eac <PS2_ReadData+0xb4>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff ffa1 	bl	8002d58 <PS2_Cmd>
  PS2_Cmd(Comd[1]);
 8002e16:	4b25      	ldr	r3, [pc, #148]	; (8002eac <PS2_ReadData+0xb4>)
 8002e18:	785b      	ldrb	r3, [r3, #1]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff ff9c 	bl	8002d58 <PS2_Cmd>
  for(byte=2;byte<9;byte++)
 8002e20:	2302      	movs	r3, #2
 8002e22:	71fb      	strb	r3, [r7, #7]
 8002e24:	e034      	b.n	8002e90 <PS2_ReadData+0x98>
  {
    for(ref=0x01;ref<0x100;ref<<=1)
 8002e26:	2301      	movs	r3, #1
 8002e28:	80bb      	strh	r3, [r7, #4]
 8002e2a:	e025      	b.n	8002e78 <PS2_ReadData+0x80>
    {
      CLK_H;
 8002e2c:	4b20      	ldr	r3, [pc, #128]	; (8002eb0 <PS2_ReadData+0xb8>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	601a      	str	r2, [r3, #0]
      UTILS_delayUs(5);
 8002e32:	2005      	movs	r0, #5
 8002e34:	f000 f93a 	bl	80030ac <UTILS_delayUs>
      CLK_L;
 8002e38:	4b1d      	ldr	r3, [pc, #116]	; (8002eb0 <PS2_ReadData+0xb8>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
      UTILS_delayUs(5);
 8002e3e:	2005      	movs	r0, #5
 8002e40:	f000 f934 	bl	80030ac <UTILS_delayUs>
      CLK_H;
 8002e44:	4b1a      	ldr	r3, [pc, #104]	; (8002eb0 <PS2_ReadData+0xb8>)
 8002e46:	2201      	movs	r2, #1
 8002e48:	601a      	str	r2, [r3, #0]
          if(DI)
 8002e4a:	4b1a      	ldr	r3, [pc, #104]	; (8002eb4 <PS2_ReadData+0xbc>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00d      	beq.n	8002e6e <PS2_ReadData+0x76>
          Data[byte] = ref|Data[byte];
 8002e52:	88bb      	ldrh	r3, [r7, #4]
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	79fb      	ldrb	r3, [r7, #7]
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4b16      	ldr	r3, [pc, #88]	; (8002eb8 <PS2_ReadData+0xc0>)
 8002e60:	5c5b      	ldrb	r3, [r3, r1]
 8002e62:	79f9      	ldrb	r1, [r7, #7]
 8002e64:	b2c9      	uxtb	r1, r1
 8002e66:	4313      	orrs	r3, r2
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	4b13      	ldr	r3, [pc, #76]	; (8002eb8 <PS2_ReadData+0xc0>)
 8002e6c:	545a      	strb	r2, [r3, r1]
    for(ref=0x01;ref<0x100;ref<<=1)
 8002e6e:	88bb      	ldrh	r3, [r7, #4]
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	80bb      	strh	r3, [r7, #4]
 8002e78:	88bb      	ldrh	r3, [r7, #4]
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	2bff      	cmp	r3, #255	; 0xff
 8002e7e:	d9d5      	bls.n	8002e2c <PS2_ReadData+0x34>
    }
        UTILS_delayUs(16);
 8002e80:	2010      	movs	r0, #16
 8002e82:	f000 f913 	bl	80030ac <UTILS_delayUs>
  for(byte=2;byte<9;byte++)
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	71fb      	strb	r3, [r7, #7]
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d9c6      	bls.n	8002e26 <PS2_ReadData+0x2e>
  }
  CS_H;
 8002e98:	4b03      	ldr	r3, [pc, #12]	; (8002ea8 <PS2_ReadData+0xb0>)
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	601a      	str	r2, [r3, #0]
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	4222018c 	.word	0x4222018c
 8002eac:	2000000c 	.word	0x2000000c
 8002eb0:	42210190 	.word	0x42210190
 8002eb4:	42220108 	.word	0x42220108
 8002eb8:	2000004c 	.word	0x2000004c

08002ebc <PS2_DataKey>:

uint8_t PS2_DataKey()
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
  uint8_t index;

  PS2_ClearData();
 8002ec2:	f000 f835 	bl	8002f30 <PS2_ClearData>
  PS2_ReadData();
 8002ec6:	f7ff ff97 	bl	8002df8 <PS2_ReadData>

  Handkey=(Data[4]<<8)|Data[3];
 8002eca:	4b16      	ldr	r3, [pc, #88]	; (8002f24 <PS2_DataKey+0x68>)
 8002ecc:	791b      	ldrb	r3, [r3, #4]
 8002ece:	021b      	lsls	r3, r3, #8
 8002ed0:	b21a      	sxth	r2, r3
 8002ed2:	4b14      	ldr	r3, [pc, #80]	; (8002f24 <PS2_DataKey+0x68>)
 8002ed4:	78db      	ldrb	r3, [r3, #3]
 8002ed6:	b21b      	sxth	r3, r3
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	b21b      	sxth	r3, r3
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	4b12      	ldr	r3, [pc, #72]	; (8002f28 <PS2_DataKey+0x6c>)
 8002ee0:	801a      	strh	r2, [r3, #0]
  for(index=0;index<16;index++)
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	71fb      	strb	r3, [r7, #7]
 8002ee6:	e014      	b.n	8002f12 <PS2_DataKey+0x56>
  {
    if((Handkey&(1<<(MASK[index]-1)))==0)
 8002ee8:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <PS2_DataKey+0x6c>)
 8002eea:	881b      	ldrh	r3, [r3, #0]
 8002eec:	4619      	mov	r1, r3
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	4a0e      	ldr	r2, [pc, #56]	; (8002f2c <PS2_DataKey+0x70>)
 8002ef2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	fa41 f303 	asr.w	r3, r1, r3
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d103      	bne.n	8002f0c <PS2_DataKey+0x50>
    return index+1;
 8002f04:	79fb      	ldrb	r3, [r7, #7]
 8002f06:	3301      	adds	r3, #1
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	e006      	b.n	8002f1a <PS2_DataKey+0x5e>
  for(index=0;index<16;index++)
 8002f0c:	79fb      	ldrb	r3, [r7, #7]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	71fb      	strb	r3, [r7, #7]
 8002f12:	79fb      	ldrb	r3, [r7, #7]
 8002f14:	2b0f      	cmp	r3, #15
 8002f16:	d9e7      	bls.n	8002ee8 <PS2_DataKey+0x2c>
  }

  return 0;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	2000004c 	.word	0x2000004c
 8002f28:	200002c6 	.word	0x200002c6
 8002f2c:	20000010 	.word	0x20000010

08002f30 <PS2_ClearData>:

void PS2_ClearData()
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
  uint8_t a;
  for(a=0;a<9;a++)
 8002f36:	2300      	movs	r3, #0
 8002f38:	71fb      	strb	r3, [r7, #7]
 8002f3a:	e006      	b.n	8002f4a <PS2_ClearData+0x1a>
    Data[a]=0x00;
 8002f3c:	79fb      	ldrb	r3, [r7, #7]
 8002f3e:	4a07      	ldr	r2, [pc, #28]	; (8002f5c <PS2_ClearData+0x2c>)
 8002f40:	2100      	movs	r1, #0
 8002f42:	54d1      	strb	r1, [r2, r3]
  for(a=0;a<9;a++)
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	3301      	adds	r3, #1
 8002f48:	71fb      	strb	r3, [r7, #7]
 8002f4a:	79fb      	ldrb	r3, [r7, #7]
 8002f4c:	2b08      	cmp	r3, #8
 8002f4e:	d9f5      	bls.n	8002f3c <PS2_ClearData+0xc>
}
 8002f50:	bf00      	nop
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr
 8002f5c:	2000004c 	.word	0x2000004c

08002f60 <BLUETOOTH_CONTROL_init>:

void BLUETOOTH_CONTROL_init(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  RCC->APB2ENR|=1<<2;     // PORTA
 8002f64:	4b1e      	ldr	r3, [pc, #120]	; (8002fe0 <BLUETOOTH_CONTROL_init+0x80>)
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	4a1d      	ldr	r2, [pc, #116]	; (8002fe0 <BLUETOOTH_CONTROL_init+0x80>)
 8002f6a:	f043 0304 	orr.w	r3, r3, #4
 8002f6e:	6193      	str	r3, [r2, #24]
  RCC->APB2ENR|=1<<4;     // PORTC
 8002f70:	4b1b      	ldr	r3, [pc, #108]	; (8002fe0 <BLUETOOTH_CONTROL_init+0x80>)
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	4a1a      	ldr	r2, [pc, #104]	; (8002fe0 <BLUETOOTH_CONTROL_init+0x80>)
 8002f76:	f043 0310 	orr.w	r3, r3, #16
 8002f7a:	6193      	str	r3, [r2, #24]
  GPIOC->CRL&=0XFFFFF0FF;
 8002f7c:	4b19      	ldr	r3, [pc, #100]	; (8002fe4 <BLUETOOTH_CONTROL_init+0x84>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a18      	ldr	r2, [pc, #96]	; (8002fe4 <BLUETOOTH_CONTROL_init+0x84>)
 8002f82:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f86:	6013      	str	r3, [r2, #0]
  GPIOC->CRL|=0X00000800;
 8002f88:	4b16      	ldr	r3, [pc, #88]	; (8002fe4 <BLUETOOTH_CONTROL_init+0x84>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a15      	ldr	r2, [pc, #84]	; (8002fe4 <BLUETOOTH_CONTROL_init+0x84>)
 8002f8e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f92:	6013      	str	r3, [r2, #0]

  RCC->APB2ENR|=1<<4;    // PORTC
 8002f94:	4b12      	ldr	r3, [pc, #72]	; (8002fe0 <BLUETOOTH_CONTROL_init+0x80>)
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	4a11      	ldr	r2, [pc, #68]	; (8002fe0 <BLUETOOTH_CONTROL_init+0x80>)
 8002f9a:	f043 0310 	orr.w	r3, r3, #16
 8002f9e:	6193      	str	r3, [r2, #24]
  GPIOC->CRL&=0XFFFF0F0F;
 8002fa0:	4b10      	ldr	r3, [pc, #64]	; (8002fe4 <BLUETOOTH_CONTROL_init+0x84>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a0f      	ldr	r2, [pc, #60]	; (8002fe4 <BLUETOOTH_CONTROL_init+0x84>)
 8002fa6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002faa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002fae:	6013      	str	r3, [r2, #0]
  GPIOC->CRL|=0X00003030; // PC1 PC3
 8002fb0:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <BLUETOOTH_CONTROL_init+0x84>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a0b      	ldr	r2, [pc, #44]	; (8002fe4 <BLUETOOTH_CONTROL_init+0x84>)
 8002fb6:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8002fba:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002fbe:	6013      	str	r3, [r2, #0]

  GPIOA->CRL&=0XFFF0FFFF;
 8002fc0:	4b09      	ldr	r3, [pc, #36]	; (8002fe8 <BLUETOOTH_CONTROL_init+0x88>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a08      	ldr	r2, [pc, #32]	; (8002fe8 <BLUETOOTH_CONTROL_init+0x88>)
 8002fc6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002fca:	6013      	str	r3, [r2, #0]
  GPIOA->CRL|=0X00030000; // PA4
 8002fcc:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <BLUETOOTH_CONTROL_init+0x88>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a05      	ldr	r2, [pc, #20]	; (8002fe8 <BLUETOOTH_CONTROL_init+0x88>)
 8002fd2:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8002fd6:	6013      	str	r3, [r2, #0]
}
 8002fd8:	bf00      	nop
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc80      	pop	{r7}
 8002fde:	4770      	bx	lr
 8002fe0:	40021000 	.word	0x40021000
 8002fe4:	40011000 	.word	0x40011000
 8002fe8:	40010800 	.word	0x40010800

08002fec <BLUETOOTH_CONTROL_receiveData>:

void BLUETOOTH_CONTROL_receiveData(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  PS2_LX = Data[PSS_LX];
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <BLUETOOTH_CONTROL_receiveData+0x34>)
 8002ff2:	79da      	ldrb	r2, [r3, #7]
 8002ff4:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <BLUETOOTH_CONTROL_receiveData+0x38>)
 8002ff6:	701a      	strb	r2, [r3, #0]
  PS2_LY = Data[PSS_LY];
 8002ff8:	4b09      	ldr	r3, [pc, #36]	; (8003020 <BLUETOOTH_CONTROL_receiveData+0x34>)
 8002ffa:	7a1a      	ldrb	r2, [r3, #8]
 8002ffc:	4b0a      	ldr	r3, [pc, #40]	; (8003028 <BLUETOOTH_CONTROL_receiveData+0x3c>)
 8002ffe:	701a      	strb	r2, [r3, #0]
  PS2_RX = Data[PSS_RX];
 8003000:	4b07      	ldr	r3, [pc, #28]	; (8003020 <BLUETOOTH_CONTROL_receiveData+0x34>)
 8003002:	795a      	ldrb	r2, [r3, #5]
 8003004:	4b09      	ldr	r3, [pc, #36]	; (800302c <BLUETOOTH_CONTROL_receiveData+0x40>)
 8003006:	701a      	strb	r2, [r3, #0]
  PS2_RY = Data[PSS_RY];
 8003008:	4b05      	ldr	r3, [pc, #20]	; (8003020 <BLUETOOTH_CONTROL_receiveData+0x34>)
 800300a:	799a      	ldrb	r2, [r3, #6]
 800300c:	4b08      	ldr	r3, [pc, #32]	; (8003030 <BLUETOOTH_CONTROL_receiveData+0x44>)
 800300e:	701a      	strb	r2, [r3, #0]

  PS2_KEY = PS2_DataKey();
 8003010:	f7ff ff54 	bl	8002ebc <PS2_DataKey>
 8003014:	4603      	mov	r3, r0
 8003016:	461a      	mov	r2, r3
 8003018:	4b06      	ldr	r3, [pc, #24]	; (8003034 <BLUETOOTH_CONTROL_receiveData+0x48>)
 800301a:	701a      	strb	r2, [r3, #0]
}
 800301c:	bf00      	nop
 800301e:	bd80      	pop	{r7, pc}
 8003020:	2000004c 	.word	0x2000004c
 8003024:	200002c5 	.word	0x200002c5
 8003028:	200002c8 	.word	0x200002c8
 800302c:	200002c9 	.word	0x200002c9
 8003030:	200002c4 	.word	0x200002c4
 8003034:	200002ca 	.word	0x200002ca

08003038 <CONSOLE_receiveData>:
#include "stm32f1xx_hal.h"

uint8_t CONSOLE_rxBuffer[12] = {0};

void CONSOLE_receiveData(UART_HandleTypeDef *huart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(huart, CONSOLE_rxBuffer, 1);
 8003040:	2201      	movs	r2, #1
 8003042:	4904      	ldr	r1, [pc, #16]	; (8003054 <CONSOLE_receiveData+0x1c>)
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7ff fa0b 	bl	8002460 <HAL_UART_Receive_IT>

}
 800304a:	bf00      	nop
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	20000058 	.word	0x20000058

08003058 <LED_toggle>:

#include "stm32f1xx_hal.h"
#include "main.h"

void LED_toggle(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 800305c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003060:	4802      	ldr	r0, [pc, #8]	; (800306c <LED_toggle+0x14>)
 8003062:	f7fe f885 	bl	8001170 <HAL_GPIO_TogglePin>
}
 8003066:	bf00      	nop
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40011000 	.word	0x40011000

08003070 <MASTER_CONTROL_receiveData>:
#include "stm32f1xx_hal.h"

uint8_t MASTER_CONTROL_rxBuffer[12] = {0};

void MASTER_CONTROL_receiveData(UART_HandleTypeDef *huart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(huart, MASTER_CONTROL_rxBuffer, 1);
 8003078:	2201      	movs	r2, #1
 800307a:	4904      	ldr	r1, [pc, #16]	; (800308c <MASTER_CONTROL_receiveData+0x1c>)
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f7ff f9ef 	bl	8002460 <HAL_UART_Receive_IT>

}
 8003082:	bf00      	nop
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	20000064 	.word	0x20000064

08003090 <UTILS_delayUsInit>:
#include "stm32f1xx_hal.h"

TIM_HandleTypeDef *UTILS_delayTimerHandle;

void UTILS_delayUsInit(TIM_HandleTypeDef *htim)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  UTILS_delayTimerHandle = htim;
 8003098:	4a03      	ldr	r2, [pc, #12]	; (80030a8 <UTILS_delayUsInit+0x18>)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6013      	str	r3, [r2, #0]
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bc80      	pop	{r7}
 80030a6:	4770      	bx	lr
 80030a8:	200002cc 	.word	0x200002cc

080030ac <UTILS_delayUs>:

void UTILS_delayUs(uint16_t delay)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	80fb      	strh	r3, [r7, #6]
  /* Reset the micro-seconds counter */
  __HAL_TIM_SET_COUNTER(UTILS_delayTimerHandle,0);
 80030b6:	4b09      	ldr	r3, [pc, #36]	; (80030dc <UTILS_delayUs+0x30>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2200      	movs	r2, #0
 80030be:	625a      	str	r2, [r3, #36]	; 0x24

  /* Wait for the counter to reach the input micro-seconds number */
  while (__HAL_TIM_GET_COUNTER(UTILS_delayTimerHandle) < delay)
 80030c0:	bf00      	nop
 80030c2:	4b06      	ldr	r3, [pc, #24]	; (80030dc <UTILS_delayUs+0x30>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030ca:	88fb      	ldrh	r3, [r7, #6]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d3f8      	bcc.n	80030c2 <UTILS_delayUs+0x16>
//    temp=SysTick->CTRL;      //��ȡ��ǰ������ֵ
//  }
//  while((temp&0x01)&&(!(temp&(1<<16))));   //�ȴ�ʱ�䵽��
//  SysTick->CTRL=0;  //�رռ�����
//  SysTick->VAL=0;   //��ռ�����
}
 80030d0:	bf00      	nop
 80030d2:	bf00      	nop
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr
 80030dc:	200002cc 	.word	0x200002cc

080030e0 <__libc_init_array>:
 80030e0:	b570      	push	{r4, r5, r6, lr}
 80030e2:	2600      	movs	r6, #0
 80030e4:	4d0c      	ldr	r5, [pc, #48]	; (8003118 <__libc_init_array+0x38>)
 80030e6:	4c0d      	ldr	r4, [pc, #52]	; (800311c <__libc_init_array+0x3c>)
 80030e8:	1b64      	subs	r4, r4, r5
 80030ea:	10a4      	asrs	r4, r4, #2
 80030ec:	42a6      	cmp	r6, r4
 80030ee:	d109      	bne.n	8003104 <__libc_init_array+0x24>
 80030f0:	f000 f822 	bl	8003138 <_init>
 80030f4:	2600      	movs	r6, #0
 80030f6:	4d0a      	ldr	r5, [pc, #40]	; (8003120 <__libc_init_array+0x40>)
 80030f8:	4c0a      	ldr	r4, [pc, #40]	; (8003124 <__libc_init_array+0x44>)
 80030fa:	1b64      	subs	r4, r4, r5
 80030fc:	10a4      	asrs	r4, r4, #2
 80030fe:	42a6      	cmp	r6, r4
 8003100:	d105      	bne.n	800310e <__libc_init_array+0x2e>
 8003102:	bd70      	pop	{r4, r5, r6, pc}
 8003104:	f855 3b04 	ldr.w	r3, [r5], #4
 8003108:	4798      	blx	r3
 800310a:	3601      	adds	r6, #1
 800310c:	e7ee      	b.n	80030ec <__libc_init_array+0xc>
 800310e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003112:	4798      	blx	r3
 8003114:	3601      	adds	r6, #1
 8003116:	e7f2      	b.n	80030fe <__libc_init_array+0x1e>
 8003118:	08003178 	.word	0x08003178
 800311c:	08003178 	.word	0x08003178
 8003120:	08003178 	.word	0x08003178
 8003124:	0800317c 	.word	0x0800317c

08003128 <memset>:
 8003128:	4603      	mov	r3, r0
 800312a:	4402      	add	r2, r0
 800312c:	4293      	cmp	r3, r2
 800312e:	d100      	bne.n	8003132 <memset+0xa>
 8003130:	4770      	bx	lr
 8003132:	f803 1b01 	strb.w	r1, [r3], #1
 8003136:	e7f9      	b.n	800312c <memset+0x4>

08003138 <_init>:
 8003138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800313a:	bf00      	nop
 800313c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800313e:	bc08      	pop	{r3}
 8003140:	469e      	mov	lr, r3
 8003142:	4770      	bx	lr

08003144 <_fini>:
 8003144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003146:	bf00      	nop
 8003148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800314a:	bc08      	pop	{r3}
 800314c:	469e      	mov	lr, r3
 800314e:	4770      	bx	lr
