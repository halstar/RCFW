
RCFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aad0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b80  0800acb4  0800acb4  0001acb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b834  0800b834  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800b834  0800b834  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b834  0800b834  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b834  0800b834  0001b834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b838  0800b838  0001b838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800b83c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008dc  20000080  0800b8bc  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000095c  0800b8bc  0002095c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001935a  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003af4  00000000  00000000  00039403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  0003cef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c8  00000000  00000000  0003e268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e585  00000000  00000000  0003f430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a9ea  00000000  00000000  0005d9b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a55d1  00000000  00000000  0007839f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011d970  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005830  00000000  00000000  0011d9c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000080 	.word	0x20000080
 8000200:	00000000 	.word	0x00000000
 8000204:	0800ac9c 	.word	0x0800ac9c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000084 	.word	0x20000084
 8000220:	0800ac9c 	.word	0x0800ac9c

08000224 <__aeabi_frsub>:
 8000224:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000228:	e002      	b.n	8000230 <__addsf3>
 800022a:	bf00      	nop

0800022c <__aeabi_fsub>:
 800022c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000230 <__addsf3>:
 8000230:	0042      	lsls	r2, r0, #1
 8000232:	bf1f      	itttt	ne
 8000234:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000238:	ea92 0f03 	teqne	r2, r3
 800023c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000240:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000244:	d06a      	beq.n	800031c <__addsf3+0xec>
 8000246:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800024a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800024e:	bfc1      	itttt	gt
 8000250:	18d2      	addgt	r2, r2, r3
 8000252:	4041      	eorgt	r1, r0
 8000254:	4048      	eorgt	r0, r1
 8000256:	4041      	eorgt	r1, r0
 8000258:	bfb8      	it	lt
 800025a:	425b      	neglt	r3, r3
 800025c:	2b19      	cmp	r3, #25
 800025e:	bf88      	it	hi
 8000260:	4770      	bxhi	lr
 8000262:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000266:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800026a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800026e:	bf18      	it	ne
 8000270:	4240      	negne	r0, r0
 8000272:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000276:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800027a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800027e:	bf18      	it	ne
 8000280:	4249      	negne	r1, r1
 8000282:	ea92 0f03 	teq	r2, r3
 8000286:	d03f      	beq.n	8000308 <__addsf3+0xd8>
 8000288:	f1a2 0201 	sub.w	r2, r2, #1
 800028c:	fa41 fc03 	asr.w	ip, r1, r3
 8000290:	eb10 000c 	adds.w	r0, r0, ip
 8000294:	f1c3 0320 	rsb	r3, r3, #32
 8000298:	fa01 f103 	lsl.w	r1, r1, r3
 800029c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a0:	d502      	bpl.n	80002a8 <__addsf3+0x78>
 80002a2:	4249      	negs	r1, r1
 80002a4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002a8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002ac:	d313      	bcc.n	80002d6 <__addsf3+0xa6>
 80002ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002b2:	d306      	bcc.n	80002c2 <__addsf3+0x92>
 80002b4:	0840      	lsrs	r0, r0, #1
 80002b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ba:	f102 0201 	add.w	r2, r2, #1
 80002be:	2afe      	cmp	r2, #254	; 0xfe
 80002c0:	d251      	bcs.n	8000366 <__addsf3+0x136>
 80002c2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002ca:	bf08      	it	eq
 80002cc:	f020 0001 	biceq.w	r0, r0, #1
 80002d0:	ea40 0003 	orr.w	r0, r0, r3
 80002d4:	4770      	bx	lr
 80002d6:	0049      	lsls	r1, r1, #1
 80002d8:	eb40 0000 	adc.w	r0, r0, r0
 80002dc:	3a01      	subs	r2, #1
 80002de:	bf28      	it	cs
 80002e0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002e4:	d2ed      	bcs.n	80002c2 <__addsf3+0x92>
 80002e6:	fab0 fc80 	clz	ip, r0
 80002ea:	f1ac 0c08 	sub.w	ip, ip, #8
 80002ee:	ebb2 020c 	subs.w	r2, r2, ip
 80002f2:	fa00 f00c 	lsl.w	r0, r0, ip
 80002f6:	bfaa      	itet	ge
 80002f8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002fc:	4252      	neglt	r2, r2
 80002fe:	4318      	orrge	r0, r3
 8000300:	bfbc      	itt	lt
 8000302:	40d0      	lsrlt	r0, r2
 8000304:	4318      	orrlt	r0, r3
 8000306:	4770      	bx	lr
 8000308:	f092 0f00 	teq	r2, #0
 800030c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000310:	bf06      	itte	eq
 8000312:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000316:	3201      	addeq	r2, #1
 8000318:	3b01      	subne	r3, #1
 800031a:	e7b5      	b.n	8000288 <__addsf3+0x58>
 800031c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000320:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000324:	bf18      	it	ne
 8000326:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800032a:	d021      	beq.n	8000370 <__addsf3+0x140>
 800032c:	ea92 0f03 	teq	r2, r3
 8000330:	d004      	beq.n	800033c <__addsf3+0x10c>
 8000332:	f092 0f00 	teq	r2, #0
 8000336:	bf08      	it	eq
 8000338:	4608      	moveq	r0, r1
 800033a:	4770      	bx	lr
 800033c:	ea90 0f01 	teq	r0, r1
 8000340:	bf1c      	itt	ne
 8000342:	2000      	movne	r0, #0
 8000344:	4770      	bxne	lr
 8000346:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800034a:	d104      	bne.n	8000356 <__addsf3+0x126>
 800034c:	0040      	lsls	r0, r0, #1
 800034e:	bf28      	it	cs
 8000350:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800035a:	bf3c      	itt	cc
 800035c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000360:	4770      	bxcc	lr
 8000362:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000366:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800036a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800036e:	4770      	bx	lr
 8000370:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000374:	bf16      	itet	ne
 8000376:	4608      	movne	r0, r1
 8000378:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800037c:	4601      	movne	r1, r0
 800037e:	0242      	lsls	r2, r0, #9
 8000380:	bf06      	itte	eq
 8000382:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000386:	ea90 0f01 	teqeq	r0, r1
 800038a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800038e:	4770      	bx	lr

08000390 <__aeabi_ui2f>:
 8000390:	f04f 0300 	mov.w	r3, #0
 8000394:	e004      	b.n	80003a0 <__aeabi_i2f+0x8>
 8000396:	bf00      	nop

08000398 <__aeabi_i2f>:
 8000398:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800039c:	bf48      	it	mi
 800039e:	4240      	negmi	r0, r0
 80003a0:	ea5f 0c00 	movs.w	ip, r0
 80003a4:	bf08      	it	eq
 80003a6:	4770      	bxeq	lr
 80003a8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003ac:	4601      	mov	r1, r0
 80003ae:	f04f 0000 	mov.w	r0, #0
 80003b2:	e01c      	b.n	80003ee <__aeabi_l2f+0x2a>

080003b4 <__aeabi_ul2f>:
 80003b4:	ea50 0201 	orrs.w	r2, r0, r1
 80003b8:	bf08      	it	eq
 80003ba:	4770      	bxeq	lr
 80003bc:	f04f 0300 	mov.w	r3, #0
 80003c0:	e00a      	b.n	80003d8 <__aeabi_l2f+0x14>
 80003c2:	bf00      	nop

080003c4 <__aeabi_l2f>:
 80003c4:	ea50 0201 	orrs.w	r2, r0, r1
 80003c8:	bf08      	it	eq
 80003ca:	4770      	bxeq	lr
 80003cc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003d0:	d502      	bpl.n	80003d8 <__aeabi_l2f+0x14>
 80003d2:	4240      	negs	r0, r0
 80003d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003d8:	ea5f 0c01 	movs.w	ip, r1
 80003dc:	bf02      	ittt	eq
 80003de:	4684      	moveq	ip, r0
 80003e0:	4601      	moveq	r1, r0
 80003e2:	2000      	moveq	r0, #0
 80003e4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003e8:	bf08      	it	eq
 80003ea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003ee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003f2:	fabc f28c 	clz	r2, ip
 80003f6:	3a08      	subs	r2, #8
 80003f8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003fc:	db10      	blt.n	8000420 <__aeabi_l2f+0x5c>
 80003fe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000402:	4463      	add	r3, ip
 8000404:	fa00 fc02 	lsl.w	ip, r0, r2
 8000408:	f1c2 0220 	rsb	r2, r2, #32
 800040c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000410:	fa20 f202 	lsr.w	r2, r0, r2
 8000414:	eb43 0002 	adc.w	r0, r3, r2
 8000418:	bf08      	it	eq
 800041a:	f020 0001 	biceq.w	r0, r0, #1
 800041e:	4770      	bx	lr
 8000420:	f102 0220 	add.w	r2, r2, #32
 8000424:	fa01 fc02 	lsl.w	ip, r1, r2
 8000428:	f1c2 0220 	rsb	r2, r2, #32
 800042c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000430:	fa21 f202 	lsr.w	r2, r1, r2
 8000434:	eb43 0002 	adc.w	r0, r3, r2
 8000438:	bf08      	it	eq
 800043a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043e:	4770      	bx	lr

08000440 <__aeabi_fmul>:
 8000440:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000444:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000448:	bf1e      	ittt	ne
 800044a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800044e:	ea92 0f0c 	teqne	r2, ip
 8000452:	ea93 0f0c 	teqne	r3, ip
 8000456:	d06f      	beq.n	8000538 <__aeabi_fmul+0xf8>
 8000458:	441a      	add	r2, r3
 800045a:	ea80 0c01 	eor.w	ip, r0, r1
 800045e:	0240      	lsls	r0, r0, #9
 8000460:	bf18      	it	ne
 8000462:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000466:	d01e      	beq.n	80004a6 <__aeabi_fmul+0x66>
 8000468:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800046c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000470:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000474:	fba0 3101 	umull	r3, r1, r0, r1
 8000478:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800047c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000480:	bf3e      	ittt	cc
 8000482:	0049      	lslcc	r1, r1, #1
 8000484:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000488:	005b      	lslcc	r3, r3, #1
 800048a:	ea40 0001 	orr.w	r0, r0, r1
 800048e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000492:	2afd      	cmp	r2, #253	; 0xfd
 8000494:	d81d      	bhi.n	80004d2 <__aeabi_fmul+0x92>
 8000496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800049a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800049e:	bf08      	it	eq
 80004a0:	f020 0001 	biceq.w	r0, r0, #1
 80004a4:	4770      	bx	lr
 80004a6:	f090 0f00 	teq	r0, #0
 80004aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004ae:	bf08      	it	eq
 80004b0:	0249      	lsleq	r1, r1, #9
 80004b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004ba:	3a7f      	subs	r2, #127	; 0x7f
 80004bc:	bfc2      	ittt	gt
 80004be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004c6:	4770      	bxgt	lr
 80004c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004cc:	f04f 0300 	mov.w	r3, #0
 80004d0:	3a01      	subs	r2, #1
 80004d2:	dc5d      	bgt.n	8000590 <__aeabi_fmul+0x150>
 80004d4:	f112 0f19 	cmn.w	r2, #25
 80004d8:	bfdc      	itt	le
 80004da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004de:	4770      	bxle	lr
 80004e0:	f1c2 0200 	rsb	r2, r2, #0
 80004e4:	0041      	lsls	r1, r0, #1
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	f1c2 0220 	rsb	r2, r2, #32
 80004ee:	fa00 fc02 	lsl.w	ip, r0, r2
 80004f2:	ea5f 0031 	movs.w	r0, r1, rrx
 80004f6:	f140 0000 	adc.w	r0, r0, #0
 80004fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004fe:	bf08      	it	eq
 8000500:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000504:	4770      	bx	lr
 8000506:	f092 0f00 	teq	r2, #0
 800050a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800050e:	bf02      	ittt	eq
 8000510:	0040      	lsleq	r0, r0, #1
 8000512:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000516:	3a01      	subeq	r2, #1
 8000518:	d0f9      	beq.n	800050e <__aeabi_fmul+0xce>
 800051a:	ea40 000c 	orr.w	r0, r0, ip
 800051e:	f093 0f00 	teq	r3, #0
 8000522:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000526:	bf02      	ittt	eq
 8000528:	0049      	lsleq	r1, r1, #1
 800052a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800052e:	3b01      	subeq	r3, #1
 8000530:	d0f9      	beq.n	8000526 <__aeabi_fmul+0xe6>
 8000532:	ea41 010c 	orr.w	r1, r1, ip
 8000536:	e78f      	b.n	8000458 <__aeabi_fmul+0x18>
 8000538:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800053c:	ea92 0f0c 	teq	r2, ip
 8000540:	bf18      	it	ne
 8000542:	ea93 0f0c 	teqne	r3, ip
 8000546:	d00a      	beq.n	800055e <__aeabi_fmul+0x11e>
 8000548:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800054c:	bf18      	it	ne
 800054e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000552:	d1d8      	bne.n	8000506 <__aeabi_fmul+0xc6>
 8000554:	ea80 0001 	eor.w	r0, r0, r1
 8000558:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800055c:	4770      	bx	lr
 800055e:	f090 0f00 	teq	r0, #0
 8000562:	bf17      	itett	ne
 8000564:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000568:	4608      	moveq	r0, r1
 800056a:	f091 0f00 	teqne	r1, #0
 800056e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000572:	d014      	beq.n	800059e <__aeabi_fmul+0x15e>
 8000574:	ea92 0f0c 	teq	r2, ip
 8000578:	d101      	bne.n	800057e <__aeabi_fmul+0x13e>
 800057a:	0242      	lsls	r2, r0, #9
 800057c:	d10f      	bne.n	800059e <__aeabi_fmul+0x15e>
 800057e:	ea93 0f0c 	teq	r3, ip
 8000582:	d103      	bne.n	800058c <__aeabi_fmul+0x14c>
 8000584:	024b      	lsls	r3, r1, #9
 8000586:	bf18      	it	ne
 8000588:	4608      	movne	r0, r1
 800058a:	d108      	bne.n	800059e <__aeabi_fmul+0x15e>
 800058c:	ea80 0001 	eor.w	r0, r0, r1
 8000590:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000594:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000598:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800059c:	4770      	bx	lr
 800059e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005a2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005a6:	4770      	bx	lr

080005a8 <__aeabi_fdiv>:
 80005a8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005b0:	bf1e      	ittt	ne
 80005b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005b6:	ea92 0f0c 	teqne	r2, ip
 80005ba:	ea93 0f0c 	teqne	r3, ip
 80005be:	d069      	beq.n	8000694 <__aeabi_fdiv+0xec>
 80005c0:	eba2 0203 	sub.w	r2, r2, r3
 80005c4:	ea80 0c01 	eor.w	ip, r0, r1
 80005c8:	0249      	lsls	r1, r1, #9
 80005ca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005ce:	d037      	beq.n	8000640 <__aeabi_fdiv+0x98>
 80005d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005d4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005d8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005e0:	428b      	cmp	r3, r1
 80005e2:	bf38      	it	cc
 80005e4:	005b      	lslcc	r3, r3, #1
 80005e6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005ea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80005ee:	428b      	cmp	r3, r1
 80005f0:	bf24      	itt	cs
 80005f2:	1a5b      	subcs	r3, r3, r1
 80005f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80005f8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005fc:	bf24      	itt	cs
 80005fe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000602:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000606:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800060a:	bf24      	itt	cs
 800060c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000610:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000614:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000618:	bf24      	itt	cs
 800061a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800061e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000622:	011b      	lsls	r3, r3, #4
 8000624:	bf18      	it	ne
 8000626:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800062a:	d1e0      	bne.n	80005ee <__aeabi_fdiv+0x46>
 800062c:	2afd      	cmp	r2, #253	; 0xfd
 800062e:	f63f af50 	bhi.w	80004d2 <__aeabi_fmul+0x92>
 8000632:	428b      	cmp	r3, r1
 8000634:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000638:	bf08      	it	eq
 800063a:	f020 0001 	biceq.w	r0, r0, #1
 800063e:	4770      	bx	lr
 8000640:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000644:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000648:	327f      	adds	r2, #127	; 0x7f
 800064a:	bfc2      	ittt	gt
 800064c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000650:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000654:	4770      	bxgt	lr
 8000656:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800065a:	f04f 0300 	mov.w	r3, #0
 800065e:	3a01      	subs	r2, #1
 8000660:	e737      	b.n	80004d2 <__aeabi_fmul+0x92>
 8000662:	f092 0f00 	teq	r2, #0
 8000666:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800066a:	bf02      	ittt	eq
 800066c:	0040      	lsleq	r0, r0, #1
 800066e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000672:	3a01      	subeq	r2, #1
 8000674:	d0f9      	beq.n	800066a <__aeabi_fdiv+0xc2>
 8000676:	ea40 000c 	orr.w	r0, r0, ip
 800067a:	f093 0f00 	teq	r3, #0
 800067e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000682:	bf02      	ittt	eq
 8000684:	0049      	lsleq	r1, r1, #1
 8000686:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800068a:	3b01      	subeq	r3, #1
 800068c:	d0f9      	beq.n	8000682 <__aeabi_fdiv+0xda>
 800068e:	ea41 010c 	orr.w	r1, r1, ip
 8000692:	e795      	b.n	80005c0 <__aeabi_fdiv+0x18>
 8000694:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000698:	ea92 0f0c 	teq	r2, ip
 800069c:	d108      	bne.n	80006b0 <__aeabi_fdiv+0x108>
 800069e:	0242      	lsls	r2, r0, #9
 80006a0:	f47f af7d 	bne.w	800059e <__aeabi_fmul+0x15e>
 80006a4:	ea93 0f0c 	teq	r3, ip
 80006a8:	f47f af70 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006ac:	4608      	mov	r0, r1
 80006ae:	e776      	b.n	800059e <__aeabi_fmul+0x15e>
 80006b0:	ea93 0f0c 	teq	r3, ip
 80006b4:	d104      	bne.n	80006c0 <__aeabi_fdiv+0x118>
 80006b6:	024b      	lsls	r3, r1, #9
 80006b8:	f43f af4c 	beq.w	8000554 <__aeabi_fmul+0x114>
 80006bc:	4608      	mov	r0, r1
 80006be:	e76e      	b.n	800059e <__aeabi_fmul+0x15e>
 80006c0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006c4:	bf18      	it	ne
 80006c6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006ca:	d1ca      	bne.n	8000662 <__aeabi_fdiv+0xba>
 80006cc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80006d0:	f47f af5c 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006d4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80006d8:	f47f af3c 	bne.w	8000554 <__aeabi_fmul+0x114>
 80006dc:	e75f      	b.n	800059e <__aeabi_fmul+0x15e>
 80006de:	bf00      	nop

080006e0 <__gesf2>:
 80006e0:	f04f 3cff 	mov.w	ip, #4294967295
 80006e4:	e006      	b.n	80006f4 <__cmpsf2+0x4>
 80006e6:	bf00      	nop

080006e8 <__lesf2>:
 80006e8:	f04f 0c01 	mov.w	ip, #1
 80006ec:	e002      	b.n	80006f4 <__cmpsf2+0x4>
 80006ee:	bf00      	nop

080006f0 <__cmpsf2>:
 80006f0:	f04f 0c01 	mov.w	ip, #1
 80006f4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80006f8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006fc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000700:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000704:	bf18      	it	ne
 8000706:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800070a:	d011      	beq.n	8000730 <__cmpsf2+0x40>
 800070c:	b001      	add	sp, #4
 800070e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000712:	bf18      	it	ne
 8000714:	ea90 0f01 	teqne	r0, r1
 8000718:	bf58      	it	pl
 800071a:	ebb2 0003 	subspl.w	r0, r2, r3
 800071e:	bf88      	it	hi
 8000720:	17c8      	asrhi	r0, r1, #31
 8000722:	bf38      	it	cc
 8000724:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000728:	bf18      	it	ne
 800072a:	f040 0001 	orrne.w	r0, r0, #1
 800072e:	4770      	bx	lr
 8000730:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000734:	d102      	bne.n	800073c <__cmpsf2+0x4c>
 8000736:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800073a:	d105      	bne.n	8000748 <__cmpsf2+0x58>
 800073c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000740:	d1e4      	bne.n	800070c <__cmpsf2+0x1c>
 8000742:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000746:	d0e1      	beq.n	800070c <__cmpsf2+0x1c>
 8000748:	f85d 0b04 	ldr.w	r0, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop

08000750 <__aeabi_cfrcmple>:
 8000750:	4684      	mov	ip, r0
 8000752:	4608      	mov	r0, r1
 8000754:	4661      	mov	r1, ip
 8000756:	e7ff      	b.n	8000758 <__aeabi_cfcmpeq>

08000758 <__aeabi_cfcmpeq>:
 8000758:	b50f      	push	{r0, r1, r2, r3, lr}
 800075a:	f7ff ffc9 	bl	80006f0 <__cmpsf2>
 800075e:	2800      	cmp	r0, #0
 8000760:	bf48      	it	mi
 8000762:	f110 0f00 	cmnmi.w	r0, #0
 8000766:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000768 <__aeabi_fcmpeq>:
 8000768:	f84d ed08 	str.w	lr, [sp, #-8]!
 800076c:	f7ff fff4 	bl	8000758 <__aeabi_cfcmpeq>
 8000770:	bf0c      	ite	eq
 8000772:	2001      	moveq	r0, #1
 8000774:	2000      	movne	r0, #0
 8000776:	f85d fb08 	ldr.w	pc, [sp], #8
 800077a:	bf00      	nop

0800077c <__aeabi_fcmplt>:
 800077c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000780:	f7ff ffea 	bl	8000758 <__aeabi_cfcmpeq>
 8000784:	bf34      	ite	cc
 8000786:	2001      	movcc	r0, #1
 8000788:	2000      	movcs	r0, #0
 800078a:	f85d fb08 	ldr.w	pc, [sp], #8
 800078e:	bf00      	nop

08000790 <__aeabi_fcmple>:
 8000790:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000794:	f7ff ffe0 	bl	8000758 <__aeabi_cfcmpeq>
 8000798:	bf94      	ite	ls
 800079a:	2001      	movls	r0, #1
 800079c:	2000      	movhi	r0, #0
 800079e:	f85d fb08 	ldr.w	pc, [sp], #8
 80007a2:	bf00      	nop

080007a4 <__aeabi_fcmpge>:
 80007a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007a8:	f7ff ffd2 	bl	8000750 <__aeabi_cfrcmple>
 80007ac:	bf94      	ite	ls
 80007ae:	2001      	movls	r0, #1
 80007b0:	2000      	movhi	r0, #0
 80007b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80007b6:	bf00      	nop

080007b8 <__aeabi_fcmpgt>:
 80007b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007bc:	f7ff ffc8 	bl	8000750 <__aeabi_cfrcmple>
 80007c0:	bf34      	ite	cc
 80007c2:	2001      	movcc	r0, #1
 80007c4:	2000      	movcs	r0, #0
 80007c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ca:	bf00      	nop

080007cc <__aeabi_f2iz>:
 80007cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80007d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80007d4:	d30f      	bcc.n	80007f6 <__aeabi_f2iz+0x2a>
 80007d6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80007da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80007de:	d90d      	bls.n	80007fc <__aeabi_f2iz+0x30>
 80007e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80007e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007e8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007ec:	fa23 f002 	lsr.w	r0, r3, r2
 80007f0:	bf18      	it	ne
 80007f2:	4240      	negne	r0, r0
 80007f4:	4770      	bx	lr
 80007f6:	f04f 0000 	mov.w	r0, #0
 80007fa:	4770      	bx	lr
 80007fc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000800:	d101      	bne.n	8000806 <__aeabi_f2iz+0x3a>
 8000802:	0242      	lsls	r2, r0, #9
 8000804:	d105      	bne.n	8000812 <__aeabi_f2iz+0x46>
 8000806:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800080a:	bf08      	it	eq
 800080c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000810:	4770      	bx	lr
 8000812:	f04f 0000 	mov.w	r0, #0
 8000816:	4770      	bx	lr

08000818 <__aeabi_f2uiz>:
 8000818:	0042      	lsls	r2, r0, #1
 800081a:	d20e      	bcs.n	800083a <__aeabi_f2uiz+0x22>
 800081c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000820:	d30b      	bcc.n	800083a <__aeabi_f2uiz+0x22>
 8000822:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000826:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800082a:	d409      	bmi.n	8000840 <__aeabi_f2uiz+0x28>
 800082c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000830:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000834:	fa23 f002 	lsr.w	r0, r3, r2
 8000838:	4770      	bx	lr
 800083a:	f04f 0000 	mov.w	r0, #0
 800083e:	4770      	bx	lr
 8000840:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000844:	d101      	bne.n	800084a <__aeabi_f2uiz+0x32>
 8000846:	0242      	lsls	r2, r0, #9
 8000848:	d102      	bne.n	8000850 <__aeabi_f2uiz+0x38>
 800084a:	f04f 30ff 	mov.w	r0, #4294967295
 800084e:	4770      	bx	lr
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop

08000858 <MAIN_displayRcfwBanner>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void MAIN_displayRcfwBanner(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* Used ASCII art generator from https://patorjk.com with font called "Colossal" */
  (void)printf("\n\r");
 800085c:	480f      	ldr	r0, [pc, #60]	; (800089c <MAIN_displayRcfwBanner+0x44>)
 800085e:	f009 fa31 	bl	8009cc4 <iprintf>
  (void)printf("    8888888b.        .d8888b.       8888888888      888       888\n\r");
 8000862:	480f      	ldr	r0, [pc, #60]	; (80008a0 <MAIN_displayRcfwBanner+0x48>)
 8000864:	f009 fa2e 	bl	8009cc4 <iprintf>
  (void)printf("    888   Y88b      d88P  Y88b      888             888   o   888\n\r");
 8000868:	480e      	ldr	r0, [pc, #56]	; (80008a4 <MAIN_displayRcfwBanner+0x4c>)
 800086a:	f009 fa2b 	bl	8009cc4 <iprintf>
  (void)printf("    888    888      888    888      888             888  d8b  888\n\r");
 800086e:	480e      	ldr	r0, [pc, #56]	; (80008a8 <MAIN_displayRcfwBanner+0x50>)
 8000870:	f009 fa28 	bl	8009cc4 <iprintf>
  (void)printf("    888   d88P      888             8888888         888 d888b 888\n\r");
 8000874:	480d      	ldr	r0, [pc, #52]	; (80008ac <MAIN_displayRcfwBanner+0x54>)
 8000876:	f009 fa25 	bl	8009cc4 <iprintf>
  (void)printf("    8888888P\"       888             888             888d88888b888\n\r");
 800087a:	480d      	ldr	r0, [pc, #52]	; (80008b0 <MAIN_displayRcfwBanner+0x58>)
 800087c:	f009 fa22 	bl	8009cc4 <iprintf>
  (void)printf("    888 T88b        888    888      888             88888P Y88888\n\r");
 8000880:	480c      	ldr	r0, [pc, #48]	; (80008b4 <MAIN_displayRcfwBanner+0x5c>)
 8000882:	f009 fa1f 	bl	8009cc4 <iprintf>
  (void)printf("    888  T88b       Y88b  d88P      888             8888P   Y8888\n\r");
 8000886:	480c      	ldr	r0, [pc, #48]	; (80008b8 <MAIN_displayRcfwBanner+0x60>)
 8000888:	f009 fa1c 	bl	8009cc4 <iprintf>
  (void)printf("    888   T88b       \"Y8888P\"       888             888P     Y888\n\r");
 800088c:	480b      	ldr	r0, [pc, #44]	; (80008bc <MAIN_displayRcfwBanner+0x64>)
 800088e:	f009 fa19 	bl	8009cc4 <iprintf>
  (void)printf("\n\r");
 8000892:	4802      	ldr	r0, [pc, #8]	; (800089c <MAIN_displayRcfwBanner+0x44>)
 8000894:	f009 fa16 	bl	8009cc4 <iprintf>

  return;
 8000898:	bf00      	nop
}
 800089a:	bd80      	pop	{r7, pc}
 800089c:	0800acb4 	.word	0x0800acb4
 80008a0:	0800acb8 	.word	0x0800acb8
 80008a4:	0800acfc 	.word	0x0800acfc
 80008a8:	0800ad40 	.word	0x0800ad40
 80008ac:	0800ad84 	.word	0x0800ad84
 80008b0:	0800adc8 	.word	0x0800adc8
 80008b4:	0800ae0c 	.word	0x0800ae0c
 80008b8:	0800ae50 	.word	0x0800ae50
 80008bc:	0800ae94 	.word	0x0800ae94

080008c0 <MAIN_updateLedMode>:

static void MAIN_updateLedMode(T_BLU_Data *p_data, uint32_t p_voltageInMv)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	6039      	str	r1, [r7, #0]
  T_LED_MODE l_currentLedMode;
  T_LED_MODE l_requestLedMode;

  l_currentLedMode = LED_getMode();
 80008ca:	f008 feb7 	bl	800963c <LED_getMode>
 80008ce:	4603      	mov	r3, r0
 80008d0:	73bb      	strb	r3, [r7, #14]

  /* Regarding LED mode, battery check is prioritary on user requests. */
  /* Ignore 0 value as we could get it at startup or while debugging.  */
  if ((p_voltageInMv != 0) && (p_voltageInMv < MAIN_MIN_BATTERY_LEVEL_IN_MV))
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d00c      	beq.n	80008f2 <MAIN_updateLedMode+0x32>
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	f242 720f 	movw	r2, #9999	; 0x270f
 80008de:	4293      	cmp	r3, r2
 80008e0:	d807      	bhi.n	80008f2 <MAIN_updateLedMode+0x32>
  {
    LOG_warning("Battery is getting low: %u mV", p_voltageInMv);
 80008e2:	683a      	ldr	r2, [r7, #0]
 80008e4:	4919      	ldr	r1, [pc, #100]	; (800094c <MAIN_updateLedMode+0x8c>)
 80008e6:	2002      	movs	r0, #2
 80008e8:	f008 ff30 	bl	800974c <LOG_log>

    l_requestLedMode = LED_MODE_BATTERY_LOW;
 80008ec:	2304      	movs	r3, #4
 80008ee:	73fb      	strb	r3, [r7, #15]
 80008f0:	e01f      	b.n	8000932 <MAIN_updateLedMode+0x72>
  }
  else
  {
    switch (p_data->button)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	7c1b      	ldrb	r3, [r3, #16]
 80008f6:	3b05      	subs	r3, #5
 80008f8:	2b03      	cmp	r3, #3
 80008fa:	d817      	bhi.n	800092c <MAIN_updateLedMode+0x6c>
 80008fc:	a201      	add	r2, pc, #4	; (adr r2, 8000904 <MAIN_updateLedMode+0x44>)
 80008fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000902:	bf00      	nop
 8000904:	08000915 	.word	0x08000915
 8000908:	08000927 	.word	0x08000927
 800090c:	0800091b 	.word	0x0800091b
 8000910:	08000921 	.word	0x08000921
    {
      case BLU_BUTTON_PAD_UP:
        l_requestLedMode = LED_MODE_FORCED_ON;
 8000914:	2301      	movs	r3, #1
 8000916:	73fb      	strb	r3, [r7, #15]
        break;
 8000918:	e00b      	b.n	8000932 <MAIN_updateLedMode+0x72>

      case BLU_BUTTON_PAD_DOWN:
        l_requestLedMode = LED_MODE_FORCED_OFF;
 800091a:	2300      	movs	r3, #0
 800091c:	73fb      	strb	r3, [r7, #15]
        break;
 800091e:	e008      	b.n	8000932 <MAIN_updateLedMode+0x72>

      case BLU_BUTTON_PAD_LEFT:
        l_requestLedMode = LED_MODE_BLINK_SLOW;
 8000920:	2302      	movs	r3, #2
 8000922:	73fb      	strb	r3, [r7, #15]
        break;
 8000924:	e005      	b.n	8000932 <MAIN_updateLedMode+0x72>

      case BLU_BUTTON_PAD_RIGHT:
        l_requestLedMode = LED_MODE_BLINK_FAST;
 8000926:	2303      	movs	r3, #3
 8000928:	73fb      	strb	r3, [r7, #15]
        break;
 800092a:	e002      	b.n	8000932 <MAIN_updateLedMode+0x72>

      default:
        l_requestLedMode = l_currentLedMode;
 800092c:	7bbb      	ldrb	r3, [r7, #14]
 800092e:	73fb      	strb	r3, [r7, #15]
        break;
 8000930:	bf00      	nop
    }
  }

  if (l_requestLedMode != l_currentLedMode)
 8000932:	7bfa      	ldrb	r2, [r7, #15]
 8000934:	7bbb      	ldrb	r3, [r7, #14]
 8000936:	429a      	cmp	r2, r3
 8000938:	d004      	beq.n	8000944 <MAIN_updateLedMode+0x84>
  {
    LED_setMode(l_requestLedMode);
 800093a:	7bfb      	ldrb	r3, [r7, #15]
 800093c:	4618      	mov	r0, r3
 800093e:	f008 fe67 	bl	8009610 <LED_setMode>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8000942:	bf00      	nop
 8000944:	bf00      	nop
}
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	0800aed8 	.word	0x0800aed8

08000950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	; 0x28
 8000954:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000956:	f001 fa37 	bl	8001dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095a:	f000 f8d1 	bl	8000b00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800095e:	f000 fcd3 	bl	8001308 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000962:	f000 f9ad 	bl	8000cc0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000966:	f000 fc7b 	bl	8001260 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800096a:	f000 fca3 	bl	80012b4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800096e:	f000 f91f 	bl	8000bb0 <MX_ADC1_Init>
  MX_TIM8_Init();
 8000972:	f000 fbb1 	bl	80010d8 <MX_TIM8_Init>
  MX_RTC_Init();
 8000976:	f000 f959 	bl	8000c2c <MX_RTC_Init>
  MX_TIM7_Init();
 800097a:	f000 fb77 	bl	800106c <MX_TIM7_Init>
  MX_TIM2_Init();
 800097e:	f000 f9ef 	bl	8000d60 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000982:	f000 fa41 	bl	8000e08 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000986:	f000 fa93 	bl	8000eb0 <MX_TIM4_Init>
  MX_TIM5_Init();
 800098a:	f000 fae5 	bl	8000f58 <MX_TIM5_Init>
  MX_TIM6_Init();
 800098e:	f000 fb37 	bl	8001000 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* Setup console */
  CON_init(&huart1);
 8000992:	4849      	ldr	r0, [pc, #292]	; (8000ab8 <main+0x168>)
 8000994:	f007 ffea 	bl	800896c <CON_init>

  /* Display RCFW banner */
  MAIN_displayRcfwBanner();
 8000998:	f7ff ff5e 	bl	8000858 <MAIN_displayRcfwBanner>

  /* Setup and start using logs */
  LOG_init    (&hrtc          );
 800099c:	4847      	ldr	r0, [pc, #284]	; (8000abc <main+0x16c>)
 800099e:	f008 feb7 	bl	8009710 <LOG_init>
  LOG_setLevel(LOG_LEVEL_DEBUG);
 80009a2:	2000      	movs	r0, #0
 80009a4:	f008 fec2 	bl	800972c <LOG_setLevel>
  LOG_info    ("Starting RCFW");
 80009a8:	4945      	ldr	r1, [pc, #276]	; (8000ac0 <main+0x170>)
 80009aa:	2001      	movs	r0, #1
 80009ac:	f008 fece 	bl	800974c <LOG_log>

  /* Initialize Timer 6 */
  HAL_TIM_Base_Start(&htim6);
 80009b0:	4844      	ldr	r0, [pc, #272]	; (8000ac4 <main+0x174>)
 80009b2:	f004 fd53 	bl	800545c <HAL_TIM_Base_Start>

  LOG_info("Started TIMER 6 (time measurement)");
 80009b6:	4944      	ldr	r1, [pc, #272]	; (8000ac8 <main+0x178>)
 80009b8:	2001      	movs	r0, #1
 80009ba:	f008 fec7 	bl	800974c <LOG_log>

  /* Initialize Timer 7 and delay function in utilities */
  HAL_TIM_Base_Start_IT(&htim7);
 80009be:	4843      	ldr	r0, [pc, #268]	; (8000acc <main+0x17c>)
 80009c0:	f004 fdd6 	bl	8005570 <HAL_TIM_Base_Start_IT>
  UTI_init             (&htim7);
 80009c4:	4841      	ldr	r0, [pc, #260]	; (8000acc <main+0x17c>)
 80009c6:	f009 f8f7 	bl	8009bb8 <UTI_init>

  LOG_info("Started TIMER 7 (utilities/delay)");
 80009ca:	4941      	ldr	r1, [pc, #260]	; (8000ad0 <main+0x180>)
 80009cc:	2001      	movs	r0, #1
 80009ce:	f008 febd 	bl	800974c <LOG_log>

  /* Initialize Timer 1 and green LED */
  HAL_TIM_Base_Start_IT(&htim1);
 80009d2:	4840      	ldr	r0, [pc, #256]	; (8000ad4 <main+0x184>)
 80009d4:	f004 fdcc 	bl	8005570 <HAL_TIM_Base_Start_IT>
  LED_setMode(LED_MODE_BLINK_SLOW);
 80009d8:	2002      	movs	r0, #2
 80009da:	f008 fe19 	bl	8009610 <LED_setMode>

  LOG_info("Started TIMER 1 (blue LED)");
 80009de:	493e      	ldr	r1, [pc, #248]	; (8000ad8 <main+0x188>)
 80009e0:	2001      	movs	r0, #1
 80009e2:	f008 feb3 	bl	800974c <LOG_log>

  /* Initialize Timers 2, 3, 4 & 5 */
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 80009e6:	213c      	movs	r1, #60	; 0x3c
 80009e8:	483c      	ldr	r0, [pc, #240]	; (8000adc <main+0x18c>)
 80009ea:	f005 f9f9 	bl	8005de0 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80009ee:	213c      	movs	r1, #60	; 0x3c
 80009f0:	483b      	ldr	r0, [pc, #236]	; (8000ae0 <main+0x190>)
 80009f2:	f005 f9f5 	bl	8005de0 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 80009f6:	213c      	movs	r1, #60	; 0x3c
 80009f8:	483a      	ldr	r0, [pc, #232]	; (8000ae4 <main+0x194>)
 80009fa:	f005 f9f1 	bl	8005de0 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 80009fe:	213c      	movs	r1, #60	; 0x3c
 8000a00:	4839      	ldr	r0, [pc, #228]	; (8000ae8 <main+0x198>)
 8000a02:	f005 f9ed 	bl	8005de0 <HAL_TIM_Encoder_Start_IT>

  LOG_info("Started TIMER 2, 3, 4, 5 (encoders)");
 8000a06:	4939      	ldr	r1, [pc, #228]	; (8000aec <main+0x19c>)
 8000a08:	2001      	movs	r0, #1
 8000a0a:	f008 fe9f 	bl	800974c <LOG_log>

  /* Initialize Timer 8 */
  HAL_TIM_Base_Start(&htim8);
 8000a0e:	4838      	ldr	r0, [pc, #224]	; (8000af0 <main+0x1a0>)
 8000a10:	f004 fd24 	bl	800545c <HAL_TIM_Base_Start>

  LOG_info("Started TIMER 8 (PWM channels)");
 8000a14:	4937      	ldr	r1, [pc, #220]	; (8000af4 <main+0x1a4>)
 8000a16:	2001      	movs	r0, #1
 8000a18:	f008 fe98 	bl	800974c <LOG_log>

  /* Initialize battery monitor */
  BAT_init(&hadc1, &hrtc);
 8000a1c:	4927      	ldr	r1, [pc, #156]	; (8000abc <main+0x16c>)
 8000a1e:	4836      	ldr	r0, [pc, #216]	; (8000af8 <main+0x1a8>)
 8000a20:	f007 fcf2 	bl	8008408 <BAT_init>

  /* Initialize PWM channels */
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000a24:	2100      	movs	r1, #0
 8000a26:	4832      	ldr	r0, [pc, #200]	; (8000af0 <main+0x1a0>)
 8000a28:	f004 ff10 	bl	800584c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000a2c:	2104      	movs	r1, #4
 8000a2e:	4830      	ldr	r0, [pc, #192]	; (8000af0 <main+0x1a0>)
 8000a30:	f004 ff0c 	bl	800584c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000a34:	2108      	movs	r1, #8
 8000a36:	482e      	ldr	r0, [pc, #184]	; (8000af0 <main+0x1a0>)
 8000a38:	f004 ff08 	bl	800584c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000a3c:	210c      	movs	r1, #12
 8000a3e:	482c      	ldr	r0, [pc, #176]	; (8000af0 <main+0x1a0>)
 8000a40:	f004 ff04 	bl	800584c <HAL_TIM_PWM_Start>

  LOG_debug("Started PWM channels");
 8000a44:	492d      	ldr	r1, [pc, #180]	; (8000afc <main+0x1ac>)
 8000a46:	2000      	movs	r0, #0
 8000a48:	f008 fe80 	bl	800974c <LOG_log>

  /* Initialize bluetooth control */
  BLU_init(DRV_MAXIMUM_SPEED);
 8000a4c:	203c      	movs	r0, #60	; 0x3c
 8000a4e:	f007 fed3 	bl	80087f8 <BLU_init>

  /* Initialize driving module */
  DRV_init(&htim8, &htim2, &htim3, &htim4, &htim5);
 8000a52:	4b25      	ldr	r3, [pc, #148]	; (8000ae8 <main+0x198>)
 8000a54:	9300      	str	r3, [sp, #0]
 8000a56:	4b23      	ldr	r3, [pc, #140]	; (8000ae4 <main+0x194>)
 8000a58:	4a21      	ldr	r2, [pc, #132]	; (8000ae0 <main+0x190>)
 8000a5a:	4920      	ldr	r1, [pc, #128]	; (8000adc <main+0x18c>)
 8000a5c:	4824      	ldr	r0, [pc, #144]	; (8000af0 <main+0x1a0>)
 8000a5e:	f007 ffa9 	bl	80089b4 <DRV_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  /* Initialize ime measurement for master board control */
  l_lastTime = __HAL_TIM_GET_COUNTER(&htim6);
 8000a62:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <main+0x174>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a68:	83fb      	strh	r3, [r7, #30]

  while (1)
  {
    BAT_update             (&l_voltageInMv                 );
 8000a6a:	463b      	mov	r3, r7
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f007 fcff 	bl	8008470 <BAT_update>
    CON_receiveData        (                               );
 8000a72:	f007 ff8f 	bl	8008994 <CON_receiveData>
    BLU_receiveData        (&l_bluetoothData               );
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f007 fee1 	bl	8008840 <BLU_receiveData>
    DRV_updateFromBluetooth(&l_bluetoothData               );
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	4618      	mov	r0, r3
 8000a82:	f008 f8e9 	bl	8008c58 <DRV_updateFromBluetooth>
    MAIN_updateLedMode     (&l_bluetoothData, l_voltageInMv);
 8000a86:	683a      	ldr	r2, [r7, #0]
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff ff17 	bl	80008c0 <MAIN_updateLedMode>
    UTI_delayUs            (MAIN_LOOP_DELAY_IN_MS          );
 8000a92:	f242 7010 	movw	r0, #10000	; 0x2710
 8000a96:	f009 f8a3 	bl	8009be0 <UTI_delayUs>

    l_currentTime = __HAL_TIM_GET_COUNTER(&htim6);
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <main+0x174>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa0:	83bb      	strh	r3, [r7, #28]
    l_deltaTime   = l_lastTime - l_currentTime;
 8000aa2:	8bfa      	ldrh	r2, [r7, #30]
 8000aa4:	8bbb      	ldrh	r3, [r7, #28]
 8000aa6:	1ad3      	subs	r3, r2, r3
 8000aa8:	837b      	strh	r3, [r7, #26]
    l_lastTime    = l_currentTime;
 8000aaa:	8bbb      	ldrh	r3, [r7, #28]
 8000aac:	83fb      	strh	r3, [r7, #30]

    //LOG_debug("%d", l_deltaTime);

    DRV_updateFromMaster(l_deltaTime);
 8000aae:	8b7b      	ldrh	r3, [r7, #26]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f008 fa11 	bl	8008ed8 <DRV_updateFromMaster>
    BAT_update             (&l_voltageInMv                 );
 8000ab6:	e7d8      	b.n	8000a6a <main+0x11a>
 8000ab8:	2000057c 	.word	0x2000057c
 8000abc:	200005f0 	.word	0x200005f0
 8000ac0:	0800aef8 	.word	0x0800aef8
 8000ac4:	20000604 	.word	0x20000604
 8000ac8:	0800af08 	.word	0x0800af08
 8000acc:	20000894 	.word	0x20000894
 8000ad0:	0800af2c 	.word	0x0800af2c
 8000ad4:	200006b8 	.word	0x200006b8
 8000ad8:	0800af50 	.word	0x0800af50
 8000adc:	2000076c 	.word	0x2000076c
 8000ae0:	20000498 	.word	0x20000498
 8000ae4:	20000330 	.word	0x20000330
 8000ae8:	200003e4 	.word	0x200003e4
 8000aec:	0800af6c 	.word	0x0800af6c
 8000af0:	2000027c 	.word	0x2000027c
 8000af4:	0800af90 	.word	0x0800af90
 8000af8:	2000054c 	.word	0x2000054c
 8000afc:	0800afb0 	.word	0x0800afb0

08000b00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b096      	sub	sp, #88	; 0x58
 8000b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b0a:	2228      	movs	r2, #40	; 0x28
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f009 f8d0 	bl	8009cb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b24:	1d3b      	adds	r3, r7, #4
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
 8000b30:	611a      	str	r2, [r3, #16]
 8000b32:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000b34:	230a      	movs	r3, #10
 8000b36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b3c:	2310      	movs	r3, #16
 8000b3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b40:	2301      	movs	r3, #1
 8000b42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b44:	2300      	movs	r3, #0
 8000b46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f002 fd2f 	bl	80035b0 <HAL_RCC_OscConfig>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000b58:	f000 fcd6 	bl	8001508 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b5c:	230f      	movs	r3, #15
 8000b5e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b60:	2300      	movs	r3, #0
 8000b62:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	2100      	movs	r1, #0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f003 f88a 	bl	8003c90 <HAL_RCC_ClockConfig>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000b82:	f000 fcc1 	bl	8001508 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000b86:	2303      	movs	r3, #3
 8000b88:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b8e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000b90:	2300      	movs	r3, #0
 8000b92:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	4618      	mov	r0, r3
 8000b98:	f003 faba 	bl	8004110 <HAL_RCCEx_PeriphCLKConfig>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ba2:	f000 fcb1 	bl	8001508 <Error_Handler>
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	3758      	adds	r7, #88	; 0x58
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bc0:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <MX_ADC1_Init+0x74>)
 8000bc2:	4a19      	ldr	r2, [pc, #100]	; (8000c28 <MX_ADC1_Init+0x78>)
 8000bc4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bc6:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <MX_ADC1_Init+0x74>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bcc:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <MX_ADC1_Init+0x74>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bd2:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <MX_ADC1_Init+0x74>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <MX_ADC1_Init+0x74>)
 8000bda:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000bde:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000be0:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <MX_ADC1_Init+0x74>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000be6:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <MX_ADC1_Init+0x74>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bec:	480d      	ldr	r0, [pc, #52]	; (8000c24 <MX_ADC1_Init+0x74>)
 8000bee:	f001 f94d 	bl	8001e8c <HAL_ADC_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000bf8:	f000 fc86 	bl	8001508 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000bfc:	2305      	movs	r3, #5
 8000bfe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c00:	2301      	movs	r3, #1
 8000c02:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4805      	ldr	r0, [pc, #20]	; (8000c24 <MX_ADC1_Init+0x74>)
 8000c0e:	f001 fcef 	bl	80025f0 <HAL_ADC_ConfigChannel>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000c18:	f000 fc76 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	2000054c 	.word	0x2000054c
 8000c28:	40012400 	.word	0x40012400

08000c2c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000c32:	1d3b      	adds	r3, r7, #4
 8000c34:	2100      	movs	r1, #0
 8000c36:	460a      	mov	r2, r1
 8000c38:	801a      	strh	r2, [r3, #0]
 8000c3a:	460a      	mov	r2, r1
 8000c3c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000c3e:	2300      	movs	r3, #0
 8000c40:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c42:	4b1d      	ldr	r3, [pc, #116]	; (8000cb8 <MX_RTC_Init+0x8c>)
 8000c44:	4a1d      	ldr	r2, [pc, #116]	; (8000cbc <MX_RTC_Init+0x90>)
 8000c46:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000c48:	4b1b      	ldr	r3, [pc, #108]	; (8000cb8 <MX_RTC_Init+0x8c>)
 8000c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8000c4e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8000c50:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <MX_RTC_Init+0x8c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c56:	4818      	ldr	r0, [pc, #96]	; (8000cb8 <MX_RTC_Init+0x8c>)
 8000c58:	f003 fc76 	bl	8004548 <HAL_RTC_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 8000c62:	f000 fc51 	bl	8001508 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	2201      	movs	r2, #1
 8000c76:	4619      	mov	r1, r3
 8000c78:	480f      	ldr	r0, [pc, #60]	; (8000cb8 <MX_RTC_Init+0x8c>)
 8000c7a:	f003 fd2f 	bl	80046dc <HAL_RTC_SetTime>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8000c84:	f000 fc40 	bl	8001508 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8000c90:	2301      	movs	r3, #1
 8000c92:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000c98:	463b      	mov	r3, r7
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4806      	ldr	r0, [pc, #24]	; (8000cb8 <MX_RTC_Init+0x8c>)
 8000ca0:	f003 fee8 	bl	8004a74 <HAL_RTC_SetDate>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000caa:	f000 fc2d 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	200005f0 	.word	0x200005f0
 8000cbc:	40002800 	.word	0x40002800

08000cc0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cc6:	f107 0308 	add.w	r3, r7, #8
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cdc:	4b1e      	ldr	r3, [pc, #120]	; (8000d58 <MX_TIM1_Init+0x98>)
 8000cde:	4a1f      	ldr	r2, [pc, #124]	; (8000d5c <MX_TIM1_Init+0x9c>)
 8000ce0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 8000ce2:	4b1d      	ldr	r3, [pc, #116]	; (8000d58 <MX_TIM1_Init+0x98>)
 8000ce4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000ce8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cea:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <MX_TIM1_Init+0x98>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8000cf0:	4b19      	ldr	r3, [pc, #100]	; (8000d58 <MX_TIM1_Init+0x98>)
 8000cf2:	22f9      	movs	r2, #249	; 0xf9
 8000cf4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf6:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <MX_TIM1_Init+0x98>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cfc:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <MX_TIM1_Init+0x98>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <MX_TIM1_Init+0x98>)
 8000d04:	2280      	movs	r2, #128	; 0x80
 8000d06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d08:	4813      	ldr	r0, [pc, #76]	; (8000d58 <MX_TIM1_Init+0x98>)
 8000d0a:	f004 fad5 	bl	80052b8 <HAL_TIM_Base_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000d14:	f000 fbf8 	bl	8001508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d1e:	f107 0308 	add.w	r3, r7, #8
 8000d22:	4619      	mov	r1, r3
 8000d24:	480c      	ldr	r0, [pc, #48]	; (8000d58 <MX_TIM1_Init+0x98>)
 8000d26:	f005 fbff 	bl	8006528 <HAL_TIM_ConfigClockSource>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000d30:	f000 fbea 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d34:	2300      	movs	r3, #0
 8000d36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4805      	ldr	r0, [pc, #20]	; (8000d58 <MX_TIM1_Init+0x98>)
 8000d42:	f006 fb4d 	bl	80073e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d4c:	f000 fbdc 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d50:	bf00      	nop
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	200006b8 	.word	0x200006b8
 8000d5c:	40012c00 	.word	0x40012c00

08000d60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08c      	sub	sp, #48	; 0x30
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d66:	f107 030c 	add.w	r3, r7, #12
 8000d6a:	2224      	movs	r2, #36	; 0x24
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f008 ffa0 	bl	8009cb4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
 8000d7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d7c:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <MX_TIM2_Init+0xa4>)
 8000d7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d84:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <MX_TIM2_Init+0xa4>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8a:	4b1e      	ldr	r3, [pc, #120]	; (8000e04 <MX_TIM2_Init+0xa4>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000d90:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <MX_TIM2_Init+0xa4>)
 8000d92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d98:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <MX_TIM2_Init+0xa4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d9e:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <MX_TIM2_Init+0xa4>)
 8000da0:	2280      	movs	r2, #128	; 0x80
 8000da2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000da4:	2303      	movs	r3, #3
 8000da6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000da8:	2300      	movs	r3, #0
 8000daa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000dac:	2301      	movs	r3, #1
 8000dae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000db4:	230a      	movs	r3, #10
 8000db6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000db8:	2300      	movs	r3, #0
 8000dba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	4619      	mov	r1, r3
 8000dce:	480d      	ldr	r0, [pc, #52]	; (8000e04 <MX_TIM2_Init+0xa4>)
 8000dd0:	f004 fe64 	bl	8005a9c <HAL_TIM_Encoder_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000dda:	f000 fb95 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	4619      	mov	r1, r3
 8000dea:	4806      	ldr	r0, [pc, #24]	; (8000e04 <MX_TIM2_Init+0xa4>)
 8000dec:	f006 faf8 	bl	80073e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000df6:	f000 fb87 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	3730      	adds	r7, #48	; 0x30
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	2000076c 	.word	0x2000076c

08000e08 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08c      	sub	sp, #48	; 0x30
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	2224      	movs	r2, #36	; 0x24
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f008 ff4c 	bl	8009cb4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e24:	4b20      	ldr	r3, [pc, #128]	; (8000ea8 <MX_TIM3_Init+0xa0>)
 8000e26:	4a21      	ldr	r2, [pc, #132]	; (8000eac <MX_TIM3_Init+0xa4>)
 8000e28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000e2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ea8 <MX_TIM3_Init+0xa0>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e30:	4b1d      	ldr	r3, [pc, #116]	; (8000ea8 <MX_TIM3_Init+0xa0>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000e36:	4b1c      	ldr	r3, [pc, #112]	; (8000ea8 <MX_TIM3_Init+0xa0>)
 8000e38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e3c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ea8 <MX_TIM3_Init+0xa0>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e44:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <MX_TIM3_Init+0xa0>)
 8000e46:	2280      	movs	r2, #128	; 0x80
 8000e48:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e52:	2301      	movs	r3, #1
 8000e54:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000e5a:	230a      	movs	r3, #10
 8000e5c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e62:	2301      	movs	r3, #1
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000e6e:	f107 030c 	add.w	r3, r7, #12
 8000e72:	4619      	mov	r1, r3
 8000e74:	480c      	ldr	r0, [pc, #48]	; (8000ea8 <MX_TIM3_Init+0xa0>)
 8000e76:	f004 fe11 	bl	8005a9c <HAL_TIM_Encoder_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000e80:	f000 fb42 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e84:	2300      	movs	r3, #0
 8000e86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <MX_TIM3_Init+0xa0>)
 8000e92:	f006 faa5 	bl	80073e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000e9c:	f000 fb34 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ea0:	bf00      	nop
 8000ea2:	3730      	adds	r7, #48	; 0x30
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000498 	.word	0x20000498
 8000eac:	40000400 	.word	0x40000400

08000eb0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08c      	sub	sp, #48	; 0x30
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000eb6:	f107 030c 	add.w	r3, r7, #12
 8000eba:	2224      	movs	r2, #36	; 0x24
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f008 fef8 	bl	8009cb4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ecc:	4b20      	ldr	r3, [pc, #128]	; (8000f50 <MX_TIM4_Init+0xa0>)
 8000ece:	4a21      	ldr	r2, [pc, #132]	; (8000f54 <MX_TIM4_Init+0xa4>)
 8000ed0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ed2:	4b1f      	ldr	r3, [pc, #124]	; (8000f50 <MX_TIM4_Init+0xa0>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed8:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <MX_TIM4_Init+0xa0>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ede:	4b1c      	ldr	r3, [pc, #112]	; (8000f50 <MX_TIM4_Init+0xa0>)
 8000ee0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ee4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <MX_TIM4_Init+0xa0>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000eec:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <MX_TIM4_Init+0xa0>)
 8000eee:	2280      	movs	r2, #128	; 0x80
 8000ef0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000efa:	2301      	movs	r3, #1
 8000efc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000f02:	230a      	movs	r3, #10
 8000f04:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f06:	2300      	movs	r3, #0
 8000f08:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000f16:	f107 030c 	add.w	r3, r7, #12
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	480c      	ldr	r0, [pc, #48]	; (8000f50 <MX_TIM4_Init+0xa0>)
 8000f1e:	f004 fdbd 	bl	8005a9c <HAL_TIM_Encoder_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000f28:	f000 faee 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f30:	2300      	movs	r3, #0
 8000f32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	4619      	mov	r1, r3
 8000f38:	4805      	ldr	r0, [pc, #20]	; (8000f50 <MX_TIM4_Init+0xa0>)
 8000f3a:	f006 fa51 	bl	80073e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000f44:	f000 fae0 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f48:	bf00      	nop
 8000f4a:	3730      	adds	r7, #48	; 0x30
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000330 	.word	0x20000330
 8000f54:	40000800 	.word	0x40000800

08000f58 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08c      	sub	sp, #48	; 0x30
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f5e:	f107 030c 	add.w	r3, r7, #12
 8000f62:	2224      	movs	r2, #36	; 0x24
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f008 fea4 	bl	8009cb4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6c:	1d3b      	adds	r3, r7, #4
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f74:	4b20      	ldr	r3, [pc, #128]	; (8000ff8 <MX_TIM5_Init+0xa0>)
 8000f76:	4a21      	ldr	r2, [pc, #132]	; (8000ffc <MX_TIM5_Init+0xa4>)
 8000f78:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000f7a:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <MX_TIM5_Init+0xa0>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f80:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <MX_TIM5_Init+0xa0>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000f86:	4b1c      	ldr	r3, [pc, #112]	; (8000ff8 <MX_TIM5_Init+0xa0>)
 8000f88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f8c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f8e:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <MX_TIM5_Init+0xa0>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f94:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <MX_TIM5_Init+0xa0>)
 8000f96:	2280      	movs	r2, #128	; 0x80
 8000f98:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000faa:	230a      	movs	r3, #10
 8000fac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000fbe:	f107 030c 	add.w	r3, r7, #12
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	480c      	ldr	r0, [pc, #48]	; (8000ff8 <MX_TIM5_Init+0xa0>)
 8000fc6:	f004 fd69 	bl	8005a9c <HAL_TIM_Encoder_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000fd0:	f000 fa9a 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <MX_TIM5_Init+0xa0>)
 8000fe2:	f006 f9fd 	bl	80073e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000fec:	f000 fa8c 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000ff0:	bf00      	nop
 8000ff2:	3730      	adds	r7, #48	; 0x30
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	200003e4 	.word	0x200003e4
 8000ffc:	40000c00 	.word	0x40000c00

08001000 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001006:	463b      	mov	r3, r7
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <MX_TIM6_Init+0x64>)
 8001010:	4a15      	ldr	r2, [pc, #84]	; (8001068 <MX_TIM6_Init+0x68>)
 8001012:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7;
 8001014:	4b13      	ldr	r3, [pc, #76]	; (8001064 <MX_TIM6_Init+0x64>)
 8001016:	2207      	movs	r2, #7
 8001018:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <MX_TIM6_Init+0x64>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001020:	4b10      	ldr	r3, [pc, #64]	; (8001064 <MX_TIM6_Init+0x64>)
 8001022:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001026:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001028:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <MX_TIM6_Init+0x64>)
 800102a:	2280      	movs	r2, #128	; 0x80
 800102c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800102e:	480d      	ldr	r0, [pc, #52]	; (8001064 <MX_TIM6_Init+0x64>)
 8001030:	f004 f942 	bl	80052b8 <HAL_TIM_Base_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800103a:	f000 fa65 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800103e:	2300      	movs	r3, #0
 8001040:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001042:	2300      	movs	r3, #0
 8001044:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001046:	463b      	mov	r3, r7
 8001048:	4619      	mov	r1, r3
 800104a:	4806      	ldr	r0, [pc, #24]	; (8001064 <MX_TIM6_Init+0x64>)
 800104c:	f006 f9c8 	bl	80073e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001056:	f000 fa57 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000604 	.word	0x20000604
 8001068:	40001000 	.word	0x40001000

0800106c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001072:	463b      	mov	r3, r7
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <MX_TIM7_Init+0x64>)
 800107c:	4a15      	ldr	r2, [pc, #84]	; (80010d4 <MX_TIM7_Init+0x68>)
 800107e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7;
 8001080:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <MX_TIM7_Init+0x64>)
 8001082:	2207      	movs	r2, #7
 8001084:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001086:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <MX_TIM7_Init+0x64>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800108c:	4b10      	ldr	r3, [pc, #64]	; (80010d0 <MX_TIM7_Init+0x64>)
 800108e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001092:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001094:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <MX_TIM7_Init+0x64>)
 8001096:	2280      	movs	r2, #128	; 0x80
 8001098:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800109a:	480d      	ldr	r0, [pc, #52]	; (80010d0 <MX_TIM7_Init+0x64>)
 800109c:	f004 f90c 	bl	80052b8 <HAL_TIM_Base_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80010a6:	f000 fa2f 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010aa:	2300      	movs	r3, #0
 80010ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80010b2:	463b      	mov	r3, r7
 80010b4:	4619      	mov	r1, r3
 80010b6:	4806      	ldr	r0, [pc, #24]	; (80010d0 <MX_TIM7_Init+0x64>)
 80010b8:	f006 f992 	bl	80073e0 <HAL_TIMEx_MasterConfigSynchronization>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80010c2:	f000 fa21 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000894 	.word	0x20000894
 80010d4:	40001400 	.word	0x40001400

080010d8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b096      	sub	sp, #88	; 0x58
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
 8001104:	611a      	str	r2, [r3, #16]
 8001106:	615a      	str	r2, [r3, #20]
 8001108:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	2220      	movs	r2, #32
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f008 fdcf 	bl	8009cb4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001116:	4b50      	ldr	r3, [pc, #320]	; (8001258 <MX_TIM8_Init+0x180>)
 8001118:	4a50      	ldr	r2, [pc, #320]	; (800125c <MX_TIM8_Init+0x184>)
 800111a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7;
 800111c:	4b4e      	ldr	r3, [pc, #312]	; (8001258 <MX_TIM8_Init+0x180>)
 800111e:	2207      	movs	r2, #7
 8001120:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001122:	4b4d      	ldr	r3, [pc, #308]	; (8001258 <MX_TIM8_Init+0x180>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100;
 8001128:	4b4b      	ldr	r3, [pc, #300]	; (8001258 <MX_TIM8_Init+0x180>)
 800112a:	2264      	movs	r2, #100	; 0x64
 800112c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112e:	4b4a      	ldr	r3, [pc, #296]	; (8001258 <MX_TIM8_Init+0x180>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001134:	4b48      	ldr	r3, [pc, #288]	; (8001258 <MX_TIM8_Init+0x180>)
 8001136:	2200      	movs	r2, #0
 8001138:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800113a:	4b47      	ldr	r3, [pc, #284]	; (8001258 <MX_TIM8_Init+0x180>)
 800113c:	2280      	movs	r2, #128	; 0x80
 800113e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001140:	4845      	ldr	r0, [pc, #276]	; (8001258 <MX_TIM8_Init+0x180>)
 8001142:	f004 f8b9 	bl	80052b8 <HAL_TIM_Base_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 800114c:	f000 f9dc 	bl	8001508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001154:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001156:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800115a:	4619      	mov	r1, r3
 800115c:	483e      	ldr	r0, [pc, #248]	; (8001258 <MX_TIM8_Init+0x180>)
 800115e:	f005 f9e3 	bl	8006528 <HAL_TIM_ConfigClockSource>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001168:	f000 f9ce 	bl	8001508 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800116c:	483a      	ldr	r0, [pc, #232]	; (8001258 <MX_TIM8_Init+0x180>)
 800116e:	f004 fa91 	bl	8005694 <HAL_TIM_PWM_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001178:	f000 f9c6 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117c:	2300      	movs	r3, #0
 800117e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001184:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001188:	4619      	mov	r1, r3
 800118a:	4833      	ldr	r0, [pc, #204]	; (8001258 <MX_TIM8_Init+0x180>)
 800118c:	f006 f928 	bl	80073e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8001196:	f000 f9b7 	bl	8001508 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800119a:	2360      	movs	r3, #96	; 0x60
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a2:	2300      	movs	r3, #0
 80011a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011a6:	2300      	movs	r3, #0
 80011a8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011ae:	2300      	movs	r3, #0
 80011b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011b2:	2300      	movs	r3, #0
 80011b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ba:	2200      	movs	r2, #0
 80011bc:	4619      	mov	r1, r3
 80011be:	4826      	ldr	r0, [pc, #152]	; (8001258 <MX_TIM8_Init+0x180>)
 80011c0:	f005 f814 	bl	80061ec <HAL_TIM_PWM_ConfigChannel>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 80011ca:	f000 f99d 	bl	8001508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d2:	2204      	movs	r2, #4
 80011d4:	4619      	mov	r1, r3
 80011d6:	4820      	ldr	r0, [pc, #128]	; (8001258 <MX_TIM8_Init+0x180>)
 80011d8:	f005 f808 	bl	80061ec <HAL_TIM_PWM_ConfigChannel>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 80011e2:	f000 f991 	bl	8001508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ea:	2208      	movs	r2, #8
 80011ec:	4619      	mov	r1, r3
 80011ee:	481a      	ldr	r0, [pc, #104]	; (8001258 <MX_TIM8_Init+0x180>)
 80011f0:	f004 fffc 	bl	80061ec <HAL_TIM_PWM_ConfigChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 80011fa:	f000 f985 	bl	8001508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001202:	220c      	movs	r2, #12
 8001204:	4619      	mov	r1, r3
 8001206:	4814      	ldr	r0, [pc, #80]	; (8001258 <MX_TIM8_Init+0x180>)
 8001208:	f004 fff0 	bl	80061ec <HAL_TIM_PWM_ConfigChannel>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8001212:	f000 f979 	bl	8001508 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800122a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800122e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001230:	2300      	movs	r3, #0
 8001232:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	4619      	mov	r1, r3
 8001238:	4807      	ldr	r0, [pc, #28]	; (8001258 <MX_TIM8_Init+0x180>)
 800123a:	f006 f9a1 	bl	8007580 <HAL_TIMEx_ConfigBreakDeadTime>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM8_Init+0x170>
  {
    Error_Handler();
 8001244:	f000 f960 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001248:	4803      	ldr	r0, [pc, #12]	; (8001258 <MX_TIM8_Init+0x180>)
 800124a:	f000 fb7f 	bl	800194c <HAL_TIM_MspPostInit>

}
 800124e:	bf00      	nop
 8001250:	3758      	adds	r7, #88	; 0x58
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	2000027c 	.word	0x2000027c
 800125c:	40013400 	.word	0x40013400

08001260 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 8001266:	4a12      	ldr	r2, [pc, #72]	; (80012b0 <MX_USART1_UART_Init+0x50>)
 8001268:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 800126c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001270:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001284:	4b09      	ldr	r3, [pc, #36]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 8001286:	220c      	movs	r2, #12
 8001288:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800128a:	4b08      	ldr	r3, [pc, #32]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 8001292:	2200      	movs	r2, #0
 8001294:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001296:	4805      	ldr	r0, [pc, #20]	; (80012ac <MX_USART1_UART_Init+0x4c>)
 8001298:	f006 fa5a 	bl	8007750 <HAL_UART_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012a2:	f000 f931 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2000057c 	.word	0x2000057c
 80012b0:	40013800 	.word	0x40013800

080012b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012ba:	4a12      	ldr	r2, [pc, #72]	; (8001304 <MX_USART2_UART_Init+0x50>)
 80012bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012d2:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012d8:	4b09      	ldr	r3, [pc, #36]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012da:	220c      	movs	r2, #12
 80012dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ea:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_USART2_UART_Init+0x4c>)
 80012ec:	f006 fa30 	bl	8007750 <HAL_UART_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012f6:	f000 f907 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	20000820 	.word	0x20000820
 8001304:	40004400 	.word	0x40004400

08001308 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800131c:	4b4e      	ldr	r3, [pc, #312]	; (8001458 <MX_GPIO_Init+0x150>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	4a4d      	ldr	r2, [pc, #308]	; (8001458 <MX_GPIO_Init+0x150>)
 8001322:	f043 0310 	orr.w	r3, r3, #16
 8001326:	6193      	str	r3, [r2, #24]
 8001328:	4b4b      	ldr	r3, [pc, #300]	; (8001458 <MX_GPIO_Init+0x150>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	f003 0310 	and.w	r3, r3, #16
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	4b48      	ldr	r3, [pc, #288]	; (8001458 <MX_GPIO_Init+0x150>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a47      	ldr	r2, [pc, #284]	; (8001458 <MX_GPIO_Init+0x150>)
 800133a:	f043 0304 	orr.w	r3, r3, #4
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b45      	ldr	r3, [pc, #276]	; (8001458 <MX_GPIO_Init+0x150>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134c:	4b42      	ldr	r3, [pc, #264]	; (8001458 <MX_GPIO_Init+0x150>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	4a41      	ldr	r2, [pc, #260]	; (8001458 <MX_GPIO_Init+0x150>)
 8001352:	f043 0308 	orr.w	r3, r3, #8
 8001356:	6193      	str	r3, [r2, #24]
 8001358:	4b3f      	ldr	r3, [pc, #252]	; (8001458 <MX_GPIO_Init+0x150>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	f003 0308 	and.w	r3, r3, #8
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001364:	4b3c      	ldr	r3, [pc, #240]	; (8001458 <MX_GPIO_Init+0x150>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	4a3b      	ldr	r2, [pc, #236]	; (8001458 <MX_GPIO_Init+0x150>)
 800136a:	f043 0320 	orr.w	r3, r3, #32
 800136e:	6193      	str	r3, [r2, #24]
 8001370:	4b39      	ldr	r3, [pc, #228]	; (8001458 <MX_GPIO_Init+0x150>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	f003 0320 	and.w	r3, r3, #32
 8001378:	603b      	str	r3, [r7, #0]
 800137a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BLUE_LED_Pin|BLUETOOTH_SPI_CMD_Pin|BLUETOOTH_SPI_CS_Pin|MOTOR_FRONT_RIGHT_IN_1_Pin
 800137c:	2200      	movs	r2, #0
 800137e:	f243 013a 	movw	r1, #12346	; 0x303a
 8001382:	4836      	ldr	r0, [pc, #216]	; (800145c <MX_GPIO_Init+0x154>)
 8001384:	f002 f8ae 	bl	80034e4 <HAL_GPIO_WritePin>
                          |MOTOR_FRONT_RIGHT_IN_2_Pin|MOTOR_REAR_LEFT_IN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUETOOTH_SPI_CLK_GPIO_Port, BLUETOOTH_SPI_CLK_Pin, GPIO_PIN_RESET);
 8001388:	2200      	movs	r2, #0
 800138a:	2110      	movs	r1, #16
 800138c:	4834      	ldr	r0, [pc, #208]	; (8001460 <MX_GPIO_Init+0x158>)
 800138e:	f002 f8a9 	bl	80034e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_FRONT_LEFT_IN_1_Pin|MOTOR_FRONT_LEFT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_1_Pin, GPIO_PIN_RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	2133      	movs	r1, #51	; 0x33
 8001396:	4833      	ldr	r0, [pc, #204]	; (8001464 <MX_GPIO_Init+0x15c>)
 8001398:	f002 f8a4 	bl	80034e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_REAR_LEFT_IN_1_GPIO_Port, MOTOR_REAR_LEFT_IN_1_Pin, GPIO_PIN_RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	2104      	movs	r1, #4
 80013a0:	4831      	ldr	r0, [pc, #196]	; (8001468 <MX_GPIO_Init+0x160>)
 80013a2:	f002 f89f 	bl	80034e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 80013a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ac:	2301      	movs	r3, #1
 80013ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2302      	movs	r3, #2
 80013b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 80013b8:	f107 0310 	add.w	r3, r7, #16
 80013bc:	4619      	mov	r1, r3
 80013be:	4827      	ldr	r0, [pc, #156]	; (800145c <MX_GPIO_Init+0x154>)
 80013c0:	f001 fdfc 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : BLUETOOTH_SPI_CMD_Pin BLUETOOTH_SPI_CS_Pin MOTOR_FRONT_RIGHT_IN_1_Pin MOTOR_FRONT_RIGHT_IN_2_Pin
                           MOTOR_REAR_LEFT_IN_2_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_CMD_Pin|BLUETOOTH_SPI_CS_Pin|MOTOR_FRONT_RIGHT_IN_1_Pin|MOTOR_FRONT_RIGHT_IN_2_Pin
 80013c4:	f241 033a 	movw	r3, #4154	; 0x103a
 80013c8:	613b      	str	r3, [r7, #16]
                          |MOTOR_REAR_LEFT_IN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ca:	2301      	movs	r3, #1
 80013cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013d2:	2303      	movs	r3, #3
 80013d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d6:	f107 0310 	add.w	r3, r7, #16
 80013da:	4619      	mov	r1, r3
 80013dc:	481f      	ldr	r0, [pc, #124]	; (800145c <MX_GPIO_Init+0x154>)
 80013de:	f001 fded 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUETOOTH_SPI_DAT_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_DAT_Pin;
 80013e2:	2304      	movs	r3, #4
 80013e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BLUETOOTH_SPI_DAT_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 0310 	add.w	r3, r7, #16
 80013f2:	4619      	mov	r1, r3
 80013f4:	4819      	ldr	r0, [pc, #100]	; (800145c <MX_GPIO_Init+0x154>)
 80013f6:	f001 fde1 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUETOOTH_SPI_CLK_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_CLK_Pin;
 80013fa:	2310      	movs	r3, #16
 80013fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fe:	2301      	movs	r3, #1
 8001400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001406:	2303      	movs	r3, #3
 8001408:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUETOOTH_SPI_CLK_GPIO_Port, &GPIO_InitStruct);
 800140a:	f107 0310 	add.w	r3, r7, #16
 800140e:	4619      	mov	r1, r3
 8001410:	4813      	ldr	r0, [pc, #76]	; (8001460 <MX_GPIO_Init+0x158>)
 8001412:	f001 fdd3 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_FRONT_LEFT_IN_1_Pin MOTOR_FRONT_LEFT_IN_2_Pin MOTOR_REAR_RIGHT_IN_2_Pin MOTOR_REAR_RIGHT_IN_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_FRONT_LEFT_IN_1_Pin|MOTOR_FRONT_LEFT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_1_Pin;
 8001416:	2333      	movs	r3, #51	; 0x33
 8001418:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141a:	2301      	movs	r3, #1
 800141c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001422:	2303      	movs	r3, #3
 8001424:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001426:	f107 0310 	add.w	r3, r7, #16
 800142a:	4619      	mov	r1, r3
 800142c:	480d      	ldr	r0, [pc, #52]	; (8001464 <MX_GPIO_Init+0x15c>)
 800142e:	f001 fdc5 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_REAR_LEFT_IN_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_REAR_LEFT_IN_1_Pin;
 8001432:	2304      	movs	r3, #4
 8001434:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001436:	2301      	movs	r3, #1
 8001438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800143e:	2303      	movs	r3, #3
 8001440:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MOTOR_REAR_LEFT_IN_1_GPIO_Port, &GPIO_InitStruct);
 8001442:	f107 0310 	add.w	r3, r7, #16
 8001446:	4619      	mov	r1, r3
 8001448:	4807      	ldr	r0, [pc, #28]	; (8001468 <MX_GPIO_Init+0x160>)
 800144a:	f001 fdb7 	bl	8002fbc <HAL_GPIO_Init>

}
 800144e:	bf00      	nop
 8001450:	3720      	adds	r7, #32
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40021000 	.word	0x40021000
 800145c:	40011000 	.word	0x40011000
 8001460:	40010800 	.word	0x40010800
 8001464:	40010c00 	.word	0x40010c00
 8001468:	40011400 	.word	0x40011400

0800146c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  if ((htim == &htim2) || (htim == &htim3) || (htim == &htim4) || (htim == &htim5))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <HAL_TIM_IC_CaptureCallback+0x38>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d00b      	beq.n	8001494 <HAL_TIM_IC_CaptureCallback+0x28>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d007      	beq.n	8001494 <HAL_TIM_IC_CaptureCallback+0x28>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a09      	ldr	r2, [pc, #36]	; (80014ac <HAL_TIM_IC_CaptureCallback+0x40>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d003      	beq.n	8001494 <HAL_TIM_IC_CaptureCallback+0x28>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a08      	ldr	r2, [pc, #32]	; (80014b0 <HAL_TIM_IC_CaptureCallback+0x44>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d103      	bne.n	800149c <HAL_TIM_IC_CaptureCallback+0x30>
  {
    DRV_updateEncoder(htim);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f007 fb6d 	bl	8008b74 <DRV_updateEncoder>
  else
  {
    ; /* Nothing to do */
  }

  return;
 800149a:	bf00      	nop
 800149c:	bf00      	nop
}
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	2000076c 	.word	0x2000076c
 80014a8:	20000498 	.word	0x20000498
 80014ac:	20000330 	.word	0x20000330
 80014b0:	200003e4 	.word	0x200003e4

080014b4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Check the handle of the timer triggering this callback and update LED */
  if (htim == &htim1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d101      	bne.n	80014c8 <HAL_TIM_PeriodElapsedCallback+0x14>
  {
    LED_update();
 80014c4:	f008 f8c4 	bl	8009650 <LED_update>
  }
  else
  {
    ; /* Nothing to do */
  }
}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	200006b8 	.word	0x200006b8

080014d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /* Check the handle of the UART triggering this callback and actually receive date */
  if (huart == &huart1)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a08      	ldr	r2, [pc, #32]	; (8001500 <HAL_UART_RxCpltCallback+0x2c>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d102      	bne.n	80014ea <HAL_UART_RxCpltCallback+0x16>
  {
    CON_receiveData();
 80014e4:	f007 fa56 	bl	8008994 <CON_receiveData>
  }
  else
  {
    ; /* Nothing to do */
  }
}
 80014e8:	e006      	b.n	80014f8 <HAL_UART_RxCpltCallback+0x24>
  else if (huart == &huart2)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a05      	ldr	r2, [pc, #20]	; (8001504 <HAL_UART_RxCpltCallback+0x30>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d102      	bne.n	80014f8 <HAL_UART_RxCpltCallback+0x24>
    MAS_receiveData(&huart2);
 80014f2:	4804      	ldr	r0, [pc, #16]	; (8001504 <HAL_UART_RxCpltCallback+0x30>)
 80014f4:	f008 f970 	bl	80097d8 <MAS_receiveData>
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	2000057c 	.word	0x2000057c
 8001504:	20000820 	.word	0x20000820

08001508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800150c:	b672      	cpsid	i
}
 800150e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  LOG_error("Error_Handler() triggered");
 8001510:	4902      	ldr	r1, [pc, #8]	; (800151c <Error_Handler+0x14>)
 8001512:	2003      	movs	r0, #3
 8001514:	f008 f91a 	bl	800974c <LOG_log>

  while (1)
 8001518:	e7fe      	b.n	8001518 <Error_Handler+0x10>
 800151a:	bf00      	nop
 800151c:	0800afc8 	.word	0x0800afc8

08001520 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
     LOG_error("Wrong parameters: %s@%d", file, line);
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	4904      	ldr	r1, [pc, #16]	; (8001540 <assert_failed+0x20>)
 8001530:	2003      	movs	r0, #3
 8001532:	f008 f90b 	bl	800974c <LOG_log>

    return;
 8001536:	bf00      	nop
  /* USER CODE END 6 */
}
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	0800afe4 	.word	0x0800afe4

08001544 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_MspInit+0x5c>)
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	4a14      	ldr	r2, [pc, #80]	; (80015a0 <HAL_MspInit+0x5c>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6193      	str	r3, [r2, #24]
 8001556:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <HAL_MspInit+0x5c>)
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001562:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <HAL_MspInit+0x5c>)
 8001564:	69db      	ldr	r3, [r3, #28]
 8001566:	4a0e      	ldr	r2, [pc, #56]	; (80015a0 <HAL_MspInit+0x5c>)
 8001568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800156c:	61d3      	str	r3, [r2, #28]
 800156e:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <HAL_MspInit+0x5c>)
 8001570:	69db      	ldr	r3, [r3, #28]
 8001572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800157a:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <HAL_MspInit+0x60>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <HAL_MspInit+0x60>)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001596:	bf00      	nop
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40010000 	.word	0x40010000

080015a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a14      	ldr	r2, [pc, #80]	; (8001614 <HAL_ADC_MspInit+0x6c>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d121      	bne.n	800160c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015c8:	4b13      	ldr	r3, [pc, #76]	; (8001618 <HAL_ADC_MspInit+0x70>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	4a12      	ldr	r2, [pc, #72]	; (8001618 <HAL_ADC_MspInit+0x70>)
 80015ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015d2:	6193      	str	r3, [r2, #24]
 80015d4:	4b10      	ldr	r3, [pc, #64]	; (8001618 <HAL_ADC_MspInit+0x70>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e0:	4b0d      	ldr	r3, [pc, #52]	; (8001618 <HAL_ADC_MspInit+0x70>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	4a0c      	ldr	r2, [pc, #48]	; (8001618 <HAL_ADC_MspInit+0x70>)
 80015e6:	f043 0304 	orr.w	r3, r3, #4
 80015ea:	6193      	str	r3, [r2, #24]
 80015ec:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <HAL_ADC_MspInit+0x70>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = BATTERY_ADC_Pin;
 80015f8:	2320      	movs	r3, #32
 80015fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015fc:	2303      	movs	r3, #3
 80015fe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATTERY_ADC_GPIO_Port, &GPIO_InitStruct);
 8001600:	f107 0310 	add.w	r3, r7, #16
 8001604:	4619      	mov	r1, r3
 8001606:	4805      	ldr	r0, [pc, #20]	; (800161c <HAL_ADC_MspInit+0x74>)
 8001608:	f001 fcd8 	bl	8002fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800160c:	bf00      	nop
 800160e:	3720      	adds	r7, #32
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40012400 	.word	0x40012400
 8001618:	40021000 	.word	0x40021000
 800161c:	40010800 	.word	0x40010800

08001620 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0b      	ldr	r2, [pc, #44]	; (800165c <HAL_RTC_MspInit+0x3c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d110      	bne.n	8001654 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001632:	f001 ffb1 	bl	8003598 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001636:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <HAL_RTC_MspInit+0x40>)
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	4a09      	ldr	r2, [pc, #36]	; (8001660 <HAL_RTC_MspInit+0x40>)
 800163c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001640:	61d3      	str	r3, [r2, #28]
 8001642:	4b07      	ldr	r3, [pc, #28]	; (8001660 <HAL_RTC_MspInit+0x40>)
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800164e:	4b05      	ldr	r3, [pc, #20]	; (8001664 <HAL_RTC_MspInit+0x44>)
 8001650:	2201      	movs	r2, #1
 8001652:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001654:	bf00      	nop
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40002800 	.word	0x40002800
 8001660:	40021000 	.word	0x40021000
 8001664:	4242043c 	.word	0x4242043c

08001668 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a28      	ldr	r2, [pc, #160]	; (8001718 <HAL_TIM_Base_MspInit+0xb0>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d114      	bne.n	80016a4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800167a:	4b28      	ldr	r3, [pc, #160]	; (800171c <HAL_TIM_Base_MspInit+0xb4>)
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	4a27      	ldr	r2, [pc, #156]	; (800171c <HAL_TIM_Base_MspInit+0xb4>)
 8001680:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001684:	6193      	str	r3, [r2, #24]
 8001686:	4b25      	ldr	r3, [pc, #148]	; (800171c <HAL_TIM_Base_MspInit+0xb4>)
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 4, 0);
 8001692:	2200      	movs	r2, #0
 8001694:	2104      	movs	r1, #4
 8001696:	2019      	movs	r0, #25
 8001698:	f001 fafe 	bl	8002c98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800169c:	2019      	movs	r0, #25
 800169e:	f001 fb27 	bl	8002cf0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80016a2:	e034      	b.n	800170e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM6)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a1d      	ldr	r2, [pc, #116]	; (8001720 <HAL_TIM_Base_MspInit+0xb8>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d10c      	bne.n	80016c8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80016ae:	4b1b      	ldr	r3, [pc, #108]	; (800171c <HAL_TIM_Base_MspInit+0xb4>)
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	4a1a      	ldr	r2, [pc, #104]	; (800171c <HAL_TIM_Base_MspInit+0xb4>)
 80016b4:	f043 0310 	orr.w	r3, r3, #16
 80016b8:	61d3      	str	r3, [r2, #28]
 80016ba:	4b18      	ldr	r3, [pc, #96]	; (800171c <HAL_TIM_Base_MspInit+0xb4>)
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	f003 0310 	and.w	r3, r3, #16
 80016c2:	613b      	str	r3, [r7, #16]
 80016c4:	693b      	ldr	r3, [r7, #16]
}
 80016c6:	e022      	b.n	800170e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM7)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a15      	ldr	r2, [pc, #84]	; (8001724 <HAL_TIM_Base_MspInit+0xbc>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d10c      	bne.n	80016ec <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80016d2:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_TIM_Base_MspInit+0xb4>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	4a11      	ldr	r2, [pc, #68]	; (800171c <HAL_TIM_Base_MspInit+0xb4>)
 80016d8:	f043 0320 	orr.w	r3, r3, #32
 80016dc:	61d3      	str	r3, [r2, #28]
 80016de:	4b0f      	ldr	r3, [pc, #60]	; (800171c <HAL_TIM_Base_MspInit+0xb4>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	f003 0320 	and.w	r3, r3, #32
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
}
 80016ea:	e010      	b.n	800170e <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM8)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a0d      	ldr	r2, [pc, #52]	; (8001728 <HAL_TIM_Base_MspInit+0xc0>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d10b      	bne.n	800170e <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <HAL_TIM_Base_MspInit+0xb4>)
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	4a08      	ldr	r2, [pc, #32]	; (800171c <HAL_TIM_Base_MspInit+0xb4>)
 80016fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001700:	6193      	str	r3, [r2, #24]
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_TIM_Base_MspInit+0xb4>)
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]
}
 800170e:	bf00      	nop
 8001710:	3718      	adds	r7, #24
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40012c00 	.word	0x40012c00
 800171c:	40021000 	.word	0x40021000
 8001720:	40001000 	.word	0x40001000
 8001724:	40001400 	.word	0x40001400
 8001728:	40013400 	.word	0x40013400

0800172c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b090      	sub	sp, #64	; 0x40
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800174a:	d157      	bne.n	80017fc <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800174c:	4b78      	ldr	r3, [pc, #480]	; (8001930 <HAL_TIM_Encoder_MspInit+0x204>)
 800174e:	69db      	ldr	r3, [r3, #28]
 8001750:	4a77      	ldr	r2, [pc, #476]	; (8001930 <HAL_TIM_Encoder_MspInit+0x204>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	61d3      	str	r3, [r2, #28]
 8001758:	4b75      	ldr	r3, [pc, #468]	; (8001930 <HAL_TIM_Encoder_MspInit+0x204>)
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	62bb      	str	r3, [r7, #40]	; 0x28
 8001762:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001764:	4b72      	ldr	r3, [pc, #456]	; (8001930 <HAL_TIM_Encoder_MspInit+0x204>)
 8001766:	699b      	ldr	r3, [r3, #24]
 8001768:	4a71      	ldr	r2, [pc, #452]	; (8001930 <HAL_TIM_Encoder_MspInit+0x204>)
 800176a:	f043 0304 	orr.w	r3, r3, #4
 800176e:	6193      	str	r3, [r2, #24]
 8001770:	4b6f      	ldr	r3, [pc, #444]	; (8001930 <HAL_TIM_Encoder_MspInit+0x204>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800177c:	4b6c      	ldr	r3, [pc, #432]	; (8001930 <HAL_TIM_Encoder_MspInit+0x204>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	4a6b      	ldr	r2, [pc, #428]	; (8001930 <HAL_TIM_Encoder_MspInit+0x204>)
 8001782:	f043 0308 	orr.w	r3, r3, #8
 8001786:	6193      	str	r3, [r2, #24]
 8001788:	4b69      	ldr	r3, [pc, #420]	; (8001930 <HAL_TIM_Encoder_MspInit+0x204>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	f003 0308 	and.w	r3, r3, #8
 8001790:	623b      	str	r3, [r7, #32]
 8001792:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_1_IN_1_Pin;
 8001794:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001798:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800179a:	2300      	movs	r3, #0
 800179c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENCODER_1_IN_1_GPIO_Port, &GPIO_InitStruct);
 80017a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017a6:	4619      	mov	r1, r3
 80017a8:	4862      	ldr	r0, [pc, #392]	; (8001934 <HAL_TIM_Encoder_MspInit+0x208>)
 80017aa:	f001 fc07 	bl	8002fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER_1_IN_2_Pin;
 80017ae:	2308      	movs	r3, #8
 80017b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b2:	2300      	movs	r3, #0
 80017b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENCODER_1_IN_2_GPIO_Port, &GPIO_InitStruct);
 80017ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017be:	4619      	mov	r1, r3
 80017c0:	485d      	ldr	r0, [pc, #372]	; (8001938 <HAL_TIM_Encoder_MspInit+0x20c>)
 80017c2:	f001 fbfb 	bl	8002fbc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80017c6:	4b5d      	ldr	r3, [pc, #372]	; (800193c <HAL_TIM_Encoder_MspInit+0x210>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017d6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80017da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017e4:	4a55      	ldr	r2, [pc, #340]	; (800193c <HAL_TIM_Encoder_MspInit+0x210>)
 80017e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017e8:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2105      	movs	r1, #5
 80017ee:	201c      	movs	r0, #28
 80017f0:	f001 fa52 	bl	8002c98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017f4:	201c      	movs	r0, #28
 80017f6:	f001 fa7b 	bl	8002cf0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80017fa:	e094      	b.n	8001926 <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM3)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a4f      	ldr	r2, [pc, #316]	; (8001940 <HAL_TIM_Encoder_MspInit+0x214>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d12c      	bne.n	8001860 <HAL_TIM_Encoder_MspInit+0x134>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001806:	4b4a      	ldr	r3, [pc, #296]	; (8001930 <HAL_TIM_Encoder_MspInit+0x204>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	4a49      	ldr	r2, [pc, #292]	; (8001930 <HAL_TIM_Encoder_MspInit+0x204>)
 800180c:	f043 0302 	orr.w	r3, r3, #2
 8001810:	61d3      	str	r3, [r2, #28]
 8001812:	4b47      	ldr	r3, [pc, #284]	; (8001930 <HAL_TIM_Encoder_MspInit+0x204>)
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	61fb      	str	r3, [r7, #28]
 800181c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800181e:	4b44      	ldr	r3, [pc, #272]	; (8001930 <HAL_TIM_Encoder_MspInit+0x204>)
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	4a43      	ldr	r2, [pc, #268]	; (8001930 <HAL_TIM_Encoder_MspInit+0x204>)
 8001824:	f043 0304 	orr.w	r3, r3, #4
 8001828:	6193      	str	r3, [r2, #24]
 800182a:	4b41      	ldr	r3, [pc, #260]	; (8001930 <HAL_TIM_Encoder_MspInit+0x204>)
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	f003 0304 	and.w	r3, r3, #4
 8001832:	61bb      	str	r3, [r7, #24]
 8001834:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENCODER_2_IN_1_Pin|ENCODER_2_IN_2_Pin;
 8001836:	23c0      	movs	r3, #192	; 0xc0
 8001838:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800183a:	2300      	movs	r3, #0
 800183c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001842:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001846:	4619      	mov	r1, r3
 8001848:	483a      	ldr	r0, [pc, #232]	; (8001934 <HAL_TIM_Encoder_MspInit+0x208>)
 800184a:	f001 fbb7 	bl	8002fbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	2105      	movs	r1, #5
 8001852:	201d      	movs	r0, #29
 8001854:	f001 fa20 	bl	8002c98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001858:	201d      	movs	r0, #29
 800185a:	f001 fa49 	bl	8002cf0 <HAL_NVIC_EnableIRQ>
}
 800185e:	e062      	b.n	8001926 <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM4)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a37      	ldr	r2, [pc, #220]	; (8001944 <HAL_TIM_Encoder_MspInit+0x218>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d12c      	bne.n	80018c4 <HAL_TIM_Encoder_MspInit+0x198>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800186a:	4b31      	ldr	r3, [pc, #196]	; (8001930 <HAL_TIM_Encoder_MspInit+0x204>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	4a30      	ldr	r2, [pc, #192]	; (8001930 <HAL_TIM_Encoder_MspInit+0x204>)
 8001870:	f043 0304 	orr.w	r3, r3, #4
 8001874:	61d3      	str	r3, [r2, #28]
 8001876:	4b2e      	ldr	r3, [pc, #184]	; (8001930 <HAL_TIM_Encoder_MspInit+0x204>)
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	f003 0304 	and.w	r3, r3, #4
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001882:	4b2b      	ldr	r3, [pc, #172]	; (8001930 <HAL_TIM_Encoder_MspInit+0x204>)
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	4a2a      	ldr	r2, [pc, #168]	; (8001930 <HAL_TIM_Encoder_MspInit+0x204>)
 8001888:	f043 0308 	orr.w	r3, r3, #8
 800188c:	6193      	str	r3, [r2, #24]
 800188e:	4b28      	ldr	r3, [pc, #160]	; (8001930 <HAL_TIM_Encoder_MspInit+0x204>)
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	613b      	str	r3, [r7, #16]
 8001898:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENCODER_3_IN_1_Pin|ENCODER_3_IN_2_Pin;
 800189a:	23c0      	movs	r3, #192	; 0xc0
 800189c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800189e:	2300      	movs	r3, #0
 80018a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018aa:	4619      	mov	r1, r3
 80018ac:	4822      	ldr	r0, [pc, #136]	; (8001938 <HAL_TIM_Encoder_MspInit+0x20c>)
 80018ae:	f001 fb85 	bl	8002fbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2105      	movs	r1, #5
 80018b6:	201e      	movs	r0, #30
 80018b8:	f001 f9ee 	bl	8002c98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80018bc:	201e      	movs	r0, #30
 80018be:	f001 fa17 	bl	8002cf0 <HAL_NVIC_EnableIRQ>
}
 80018c2:	e030      	b.n	8001926 <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM5)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a1f      	ldr	r2, [pc, #124]	; (8001948 <HAL_TIM_Encoder_MspInit+0x21c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d12b      	bne.n	8001926 <HAL_TIM_Encoder_MspInit+0x1fa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80018ce:	4b18      	ldr	r3, [pc, #96]	; (8001930 <HAL_TIM_Encoder_MspInit+0x204>)
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	4a17      	ldr	r2, [pc, #92]	; (8001930 <HAL_TIM_Encoder_MspInit+0x204>)
 80018d4:	f043 0308 	orr.w	r3, r3, #8
 80018d8:	61d3      	str	r3, [r2, #28]
 80018da:	4b15      	ldr	r3, [pc, #84]	; (8001930 <HAL_TIM_Encoder_MspInit+0x204>)
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e6:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_TIM_Encoder_MspInit+0x204>)
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	4a11      	ldr	r2, [pc, #68]	; (8001930 <HAL_TIM_Encoder_MspInit+0x204>)
 80018ec:	f043 0304 	orr.w	r3, r3, #4
 80018f0:	6193      	str	r3, [r2, #24]
 80018f2:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <HAL_TIM_Encoder_MspInit+0x204>)
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	f003 0304 	and.w	r3, r3, #4
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_4_IN_1_Pin|ENCODER_4_IN_2_Pin;
 80018fe:	2303      	movs	r3, #3
 8001900:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001902:	2300      	movs	r3, #0
 8001904:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800190e:	4619      	mov	r1, r3
 8001910:	4808      	ldr	r0, [pc, #32]	; (8001934 <HAL_TIM_Encoder_MspInit+0x208>)
 8001912:	f001 fb53 	bl	8002fbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	2105      	movs	r1, #5
 800191a:	2032      	movs	r0, #50	; 0x32
 800191c:	f001 f9bc 	bl	8002c98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001920:	2032      	movs	r0, #50	; 0x32
 8001922:	f001 f9e5 	bl	8002cf0 <HAL_NVIC_EnableIRQ>
}
 8001926:	bf00      	nop
 8001928:	3740      	adds	r7, #64	; 0x40
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40021000 	.word	0x40021000
 8001934:	40010800 	.word	0x40010800
 8001938:	40010c00 	.word	0x40010c00
 800193c:	40010000 	.word	0x40010000
 8001940:	40000400 	.word	0x40000400
 8001944:	40000800 	.word	0x40000800
 8001948:	40000c00 	.word	0x40000c00

0800194c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	f107 0310 	add.w	r3, r7, #16
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM8)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a10      	ldr	r2, [pc, #64]	; (80019a8 <HAL_TIM_MspPostInit+0x5c>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d118      	bne.n	800199e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800196c:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <HAL_TIM_MspPostInit+0x60>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	4a0e      	ldr	r2, [pc, #56]	; (80019ac <HAL_TIM_MspPostInit+0x60>)
 8001972:	f043 0310 	orr.w	r3, r3, #16
 8001976:	6193      	str	r3, [r2, #24]
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <HAL_TIM_MspPostInit+0x60>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	f003 0310 	and.w	r3, r3, #16
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	68fb      	ldr	r3, [r7, #12]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_FRONT_LEFT_PWM_Pin|MOTOR_FRONT_RIGHT_PWM_Pin|MOTOR_REAR_LEFT_PWM_Pin|MOTOR_REAR_RIGHT_PWM_Pin;
 8001984:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001988:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198a:	2302      	movs	r3, #2
 800198c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800198e:	2303      	movs	r3, #3
 8001990:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001992:	f107 0310 	add.w	r3, r7, #16
 8001996:	4619      	mov	r1, r3
 8001998:	4805      	ldr	r0, [pc, #20]	; (80019b0 <HAL_TIM_MspPostInit+0x64>)
 800199a:	f001 fb0f 	bl	8002fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800199e:	bf00      	nop
 80019a0:	3720      	adds	r7, #32
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40013400 	.word	0x40013400
 80019ac:	40021000 	.word	0x40021000
 80019b0:	40011000 	.word	0x40011000

080019b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08a      	sub	sp, #40	; 0x28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	f107 0318 	add.w	r3, r7, #24
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a3f      	ldr	r2, [pc, #252]	; (8001acc <HAL_UART_MspInit+0x118>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d13a      	bne.n	8001a4a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019d4:	4b3e      	ldr	r3, [pc, #248]	; (8001ad0 <HAL_UART_MspInit+0x11c>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	4a3d      	ldr	r2, [pc, #244]	; (8001ad0 <HAL_UART_MspInit+0x11c>)
 80019da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019de:	6193      	str	r3, [r2, #24]
 80019e0:	4b3b      	ldr	r3, [pc, #236]	; (8001ad0 <HAL_UART_MspInit+0x11c>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ec:	4b38      	ldr	r3, [pc, #224]	; (8001ad0 <HAL_UART_MspInit+0x11c>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	4a37      	ldr	r2, [pc, #220]	; (8001ad0 <HAL_UART_MspInit+0x11c>)
 80019f2:	f043 0304 	orr.w	r3, r3, #4
 80019f6:	6193      	str	r3, [r2, #24]
 80019f8:	4b35      	ldr	r3, [pc, #212]	; (8001ad0 <HAL_UART_MspInit+0x11c>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a12:	f107 0318 	add.w	r3, r7, #24
 8001a16:	4619      	mov	r1, r3
 8001a18:	482e      	ldr	r0, [pc, #184]	; (8001ad4 <HAL_UART_MspInit+0x120>)
 8001a1a:	f001 facf 	bl	8002fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a24:	2300      	movs	r3, #0
 8001a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2c:	f107 0318 	add.w	r3, r7, #24
 8001a30:	4619      	mov	r1, r3
 8001a32:	4828      	ldr	r0, [pc, #160]	; (8001ad4 <HAL_UART_MspInit+0x120>)
 8001a34:	f001 fac2 	bl	8002fbc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2103      	movs	r1, #3
 8001a3c:	2025      	movs	r0, #37	; 0x25
 8001a3e:	f001 f92b 	bl	8002c98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a42:	2025      	movs	r0, #37	; 0x25
 8001a44:	f001 f954 	bl	8002cf0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a48:	e03c      	b.n	8001ac4 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a22      	ldr	r2, [pc, #136]	; (8001ad8 <HAL_UART_MspInit+0x124>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d137      	bne.n	8001ac4 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a54:	4b1e      	ldr	r3, [pc, #120]	; (8001ad0 <HAL_UART_MspInit+0x11c>)
 8001a56:	69db      	ldr	r3, [r3, #28]
 8001a58:	4a1d      	ldr	r2, [pc, #116]	; (8001ad0 <HAL_UART_MspInit+0x11c>)
 8001a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a5e:	61d3      	str	r3, [r2, #28]
 8001a60:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <HAL_UART_MspInit+0x11c>)
 8001a62:	69db      	ldr	r3, [r3, #28]
 8001a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6c:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <HAL_UART_MspInit+0x11c>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	4a17      	ldr	r2, [pc, #92]	; (8001ad0 <HAL_UART_MspInit+0x11c>)
 8001a72:	f043 0304 	orr.w	r3, r3, #4
 8001a76:	6193      	str	r3, [r2, #24]
 8001a78:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <HAL_UART_MspInit+0x11c>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a84:	2304      	movs	r3, #4
 8001a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a90:	f107 0318 	add.w	r3, r7, #24
 8001a94:	4619      	mov	r1, r3
 8001a96:	480f      	ldr	r0, [pc, #60]	; (8001ad4 <HAL_UART_MspInit+0x120>)
 8001a98:	f001 fa90 	bl	8002fbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a9c:	2308      	movs	r3, #8
 8001a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa8:	f107 0318 	add.w	r3, r7, #24
 8001aac:	4619      	mov	r1, r3
 8001aae:	4809      	ldr	r0, [pc, #36]	; (8001ad4 <HAL_UART_MspInit+0x120>)
 8001ab0:	f001 fa84 	bl	8002fbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2102      	movs	r1, #2
 8001ab8:	2026      	movs	r0, #38	; 0x26
 8001aba:	f001 f8ed 	bl	8002c98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001abe:	2026      	movs	r0, #38	; 0x26
 8001ac0:	f001 f916 	bl	8002cf0 <HAL_NVIC_EnableIRQ>
}
 8001ac4:	bf00      	nop
 8001ac6:	3728      	adds	r7, #40	; 0x28
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40013800 	.word	0x40013800
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	40010800 	.word	0x40010800
 8001ad8:	40004400 	.word	0x40004400

08001adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  LOG_error("NMI_Handler() triggered");
 8001ae0:	4902      	ldr	r1, [pc, #8]	; (8001aec <NMI_Handler+0x10>)
 8001ae2:	2003      	movs	r0, #3
 8001ae4:	f007 fe32 	bl	800974c <LOG_log>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ae8:	e7fe      	b.n	8001ae8 <NMI_Handler+0xc>
 8001aea:	bf00      	nop
 8001aec:	0800affc 	.word	0x0800affc

08001af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  LOG_error("HardFault_Handler() triggered");
 8001af4:	4902      	ldr	r1, [pc, #8]	; (8001b00 <HardFault_Handler+0x10>)
 8001af6:	2003      	movs	r0, #3
 8001af8:	f007 fe28 	bl	800974c <LOG_log>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001afc:	e7fe      	b.n	8001afc <HardFault_Handler+0xc>
 8001afe:	bf00      	nop
 8001b00:	0800b014 	.word	0x0800b014

08001b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  LOG_error("MemManage_Handler() triggered");
 8001b08:	4902      	ldr	r1, [pc, #8]	; (8001b14 <MemManage_Handler+0x10>)
 8001b0a:	2003      	movs	r0, #3
 8001b0c:	f007 fe1e 	bl	800974c <LOG_log>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <MemManage_Handler+0xc>
 8001b12:	bf00      	nop
 8001b14:	0800b034 	.word	0x0800b034

08001b18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  LOG_error("BusFault_Handler() triggered");
 8001b1c:	4902      	ldr	r1, [pc, #8]	; (8001b28 <BusFault_Handler+0x10>)
 8001b1e:	2003      	movs	r0, #3
 8001b20:	f007 fe14 	bl	800974c <LOG_log>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <BusFault_Handler+0xc>
 8001b26:	bf00      	nop
 8001b28:	0800b054 	.word	0x0800b054

08001b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  LOG_error("UsageFault_Handler() triggered");
 8001b30:	4902      	ldr	r1, [pc, #8]	; (8001b3c <UsageFault_Handler+0x10>)
 8001b32:	2003      	movs	r0, #3
 8001b34:	f007 fe0a 	bl	800974c <LOG_log>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <UsageFault_Handler+0xc>
 8001b3a:	bf00      	nop
 8001b3c:	0800b074 	.word	0x0800b074

08001b40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
  LOG_error("SVC_Handler() triggered");
 8001b44:	4902      	ldr	r1, [pc, #8]	; (8001b50 <SVC_Handler+0x10>)
 8001b46:	2003      	movs	r0, #3
 8001b48:	f007 fe00 	bl	800974c <LOG_log>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	0800b094 	.word	0x0800b094

08001b54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  LOG_error("DebugMon_Handler() triggered");
 8001b58:	4902      	ldr	r1, [pc, #8]	; (8001b64 <DebugMon_Handler+0x10>)
 8001b5a:	2003      	movs	r0, #3
 8001b5c:	f007 fdf6 	bl	800974c <LOG_log>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	0800b0ac 	.word	0x0800b0ac

08001b68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  LOG_error("PendSV_Handler() triggered");
 8001b6c:	4902      	ldr	r1, [pc, #8]	; (8001b78 <PendSV_Handler+0x10>)
 8001b6e:	2003      	movs	r0, #3
 8001b70:	f007 fdec 	bl	800974c <LOG_log>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	0800b0cc 	.word	0x0800b0cc

08001b7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b80:	f000 f968 	bl	8001e54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b84:	bf00      	nop
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b8c:	4802      	ldr	r0, [pc, #8]	; (8001b98 <TIM1_UP_IRQHandler+0x10>)
 8001b8e:	f004 fa05 	bl	8005f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200006b8 	.word	0x200006b8

08001b9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ba0:	4802      	ldr	r0, [pc, #8]	; (8001bac <TIM2_IRQHandler+0x10>)
 8001ba2:	f004 f9fb 	bl	8005f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	2000076c 	.word	0x2000076c

08001bb0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001bb4:	4802      	ldr	r0, [pc, #8]	; (8001bc0 <TIM3_IRQHandler+0x10>)
 8001bb6:	f004 f9f1 	bl	8005f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000498 	.word	0x20000498

08001bc4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001bc8:	4802      	ldr	r0, [pc, #8]	; (8001bd4 <TIM4_IRQHandler+0x10>)
 8001bca:	f004 f9e7 	bl	8005f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000330 	.word	0x20000330

08001bd8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001bdc:	4802      	ldr	r0, [pc, #8]	; (8001be8 <USART1_IRQHandler+0x10>)
 8001bde:	f005 ff3d 	bl	8007a5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	2000057c 	.word	0x2000057c

08001bec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001bf0:	4802      	ldr	r0, [pc, #8]	; (8001bfc <USART2_IRQHandler+0x10>)
 8001bf2:	f005 ff33 	bl	8007a5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001bf6:	bf00      	nop
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20000820 	.word	0x20000820

08001c00 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001c04:	4802      	ldr	r0, [pc, #8]	; (8001c10 <TIM5_IRQHandler+0x10>)
 8001c06:	f004 f9c9 	bl	8005f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	200003e4 	.word	0x200003e4

08001c14 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	e00a      	b.n	8001c3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c26:	f3af 8000 	nop.w
 8001c2a:	4601      	mov	r1, r0
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	60ba      	str	r2, [r7, #8]
 8001c32:	b2ca      	uxtb	r2, r1
 8001c34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	dbf0      	blt.n	8001c26 <_read+0x12>
	}

return len;
 8001c44:	687b      	ldr	r3, [r7, #4]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d00a      	beq.n	8001c78 <_write+0x28>
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d007      	beq.n	8001c78 <_write+0x28>
  {
    errno = EBADF;
 8001c68:	f007 fffa 	bl	8009c60 <__errno>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2209      	movs	r2, #9
 8001c70:	601a      	str	r2, [r3, #0]
    return -1;
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295
 8001c76:	e00f      	b.n	8001c98 <_write+0x48>
  }

  HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 1000);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c80:	68b9      	ldr	r1, [r7, #8]
 8001c82:	4807      	ldr	r0, [pc, #28]	; (8001ca0 <_write+0x50>)
 8001c84:	f005 fe28 	bl	80078d8 <HAL_UART_Transmit>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	75fb      	strb	r3, [r7, #23]
  return (status == HAL_OK ? len : 0);
 8001c8c:	7dfb      	ldrb	r3, [r7, #23]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <_write+0x46>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	e000      	b.n	8001c98 <_write+0x48>
 8001c96:	2300      	movs	r3, #0

}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	2000057c 	.word	0x2000057c

08001ca4 <_close>:

int _close(int file)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
	return -1;
 8001cac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr

08001cba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cca:	605a      	str	r2, [r3, #4]
	return 0;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr

08001cd8 <_isatty>:

int _isatty(int file)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
	return 1;
 8001ce0:	2301      	movs	r3, #1
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr

08001cec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
	return 0;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d0c:	4a14      	ldr	r2, [pc, #80]	; (8001d60 <_sbrk+0x5c>)
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <_sbrk+0x60>)
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d18:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <_sbrk+0x64>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d102      	bne.n	8001d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d20:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <_sbrk+0x64>)
 8001d22:	4a12      	ldr	r2, [pc, #72]	; (8001d6c <_sbrk+0x68>)
 8001d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d26:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <_sbrk+0x64>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d207      	bcs.n	8001d44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d34:	f007 ff94 	bl	8009c60 <__errno>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	220c      	movs	r2, #12
 8001d3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d42:	e009      	b.n	8001d58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d44:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <_sbrk+0x64>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d4a:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <_sbrk+0x64>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	4a05      	ldr	r2, [pc, #20]	; (8001d68 <_sbrk+0x64>)
 8001d54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d56:	68fb      	ldr	r3, [r7, #12]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	2000c000 	.word	0x2000c000
 8001d64:	00000400 	.word	0x00000400
 8001d68:	2000009c 	.word	0x2000009c
 8001d6c:	20000960 	.word	0x20000960

08001d70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr

08001d7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d7c:	480c      	ldr	r0, [pc, #48]	; (8001db0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d7e:	490d      	ldr	r1, [pc, #52]	; (8001db4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d80:	4a0d      	ldr	r2, [pc, #52]	; (8001db8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d84:	e002      	b.n	8001d8c <LoopCopyDataInit>

08001d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d8a:	3304      	adds	r3, #4

08001d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d90:	d3f9      	bcc.n	8001d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d92:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d94:	4c0a      	ldr	r4, [pc, #40]	; (8001dc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d98:	e001      	b.n	8001d9e <LoopFillZerobss>

08001d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d9c:	3204      	adds	r2, #4

08001d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da0:	d3fb      	bcc.n	8001d9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001da2:	f7ff ffe5 	bl	8001d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001da6:	f007 ff61 	bl	8009c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001daa:	f7fe fdd1 	bl	8000950 <main>
  bx lr
 8001dae:	4770      	bx	lr
  ldr r0, =_sdata
 8001db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001db8:	0800b83c 	.word	0x0800b83c
  ldr r2, =_sbss
 8001dbc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001dc0:	2000095c 	.word	0x2000095c

08001dc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dc4:	e7fe      	b.n	8001dc4 <ADC1_2_IRQHandler>
	...

08001dc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dcc:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <HAL_Init+0x28>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a07      	ldr	r2, [pc, #28]	; (8001df0 <HAL_Init+0x28>)
 8001dd2:	f043 0310 	orr.w	r3, r3, #16
 8001dd6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dd8:	2003      	movs	r0, #3
 8001dda:	f000 ff3d 	bl	8002c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dde:	2000      	movs	r0, #0
 8001de0:	f000 f808 	bl	8001df4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001de4:	f7ff fbae 	bl	8001544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40022000 	.word	0x40022000

08001df4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dfc:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <HAL_InitTick+0x54>)
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <HAL_InitTick+0x58>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	4619      	mov	r1, r3
 8001e06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e12:	4618      	mov	r0, r3
 8001e14:	f000 ff84 	bl	8002d20 <HAL_SYSTICK_Config>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e00e      	b.n	8001e40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b0f      	cmp	r3, #15
 8001e26:	d80a      	bhi.n	8001e3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e30:	f000 ff32 	bl	8002c98 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e34:	4a06      	ldr	r2, [pc, #24]	; (8001e50 <HAL_InitTick+0x5c>)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	e000      	b.n	8001e40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20000000 	.word	0x20000000
 8001e4c:	20000008 	.word	0x20000008
 8001e50:	20000004 	.word	0x20000004

08001e54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e58:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <HAL_IncTick+0x1c>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <HAL_IncTick+0x20>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4413      	add	r3, r2
 8001e64:	4a03      	ldr	r2, [pc, #12]	; (8001e74 <HAL_IncTick+0x20>)
 8001e66:	6013      	str	r3, [r2, #0]
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr
 8001e70:	20000008 	.word	0x20000008
 8001e74:	20000948 	.word	0x20000948

08001e78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e7c:	4b02      	ldr	r3, [pc, #8]	; (8001e88 <HAL_GetTick+0x10>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr
 8001e88:	20000948 	.word	0x20000948

08001e8c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e94:	2300      	movs	r3, #0
 8001e96:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e188      	b.n	80021c0 <HAL_ADC_Init+0x334>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a8c      	ldr	r2, [pc, #560]	; (80020e4 <HAL_ADC_Init+0x258>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d00e      	beq.n	8001ed6 <HAL_ADC_Init+0x4a>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a8a      	ldr	r2, [pc, #552]	; (80020e8 <HAL_ADC_Init+0x25c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d009      	beq.n	8001ed6 <HAL_ADC_Init+0x4a>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a89      	ldr	r2, [pc, #548]	; (80020ec <HAL_ADC_Init+0x260>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d004      	beq.n	8001ed6 <HAL_ADC_Init+0x4a>
 8001ecc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8001ed0:	4887      	ldr	r0, [pc, #540]	; (80020f0 <HAL_ADC_Init+0x264>)
 8001ed2:	f7ff fb25 	bl	8001520 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d009      	beq.n	8001ef2 <HAL_ADC_Init+0x66>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ee6:	d004      	beq.n	8001ef2 <HAL_ADC_Init+0x66>
 8001ee8:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8001eec:	4880      	ldr	r0, [pc, #512]	; (80020f0 <HAL_ADC_Init+0x264>)
 8001eee:	f7ff fb17 	bl	8001520 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d009      	beq.n	8001f0e <HAL_ADC_Init+0x82>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f02:	d004      	beq.n	8001f0e <HAL_ADC_Init+0x82>
 8001f04:	f240 11b5 	movw	r1, #437	; 0x1b5
 8001f08:	4879      	ldr	r0, [pc, #484]	; (80020f0 <HAL_ADC_Init+0x264>)
 8001f0a:	f7ff fb09 	bl	8001520 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	7b1b      	ldrb	r3, [r3, #12]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d008      	beq.n	8001f28 <HAL_ADC_Init+0x9c>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	7b1b      	ldrb	r3, [r3, #12]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d004      	beq.n	8001f28 <HAL_ADC_Init+0x9c>
 8001f1e:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8001f22:	4873      	ldr	r0, [pc, #460]	; (80020f0 <HAL_ADC_Init+0x264>)
 8001f24:	f7ff fafc 	bl	8001520 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	69db      	ldr	r3, [r3, #28]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d044      	beq.n	8001fba <HAL_ADC_Init+0x12e>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f38:	d03f      	beq.n	8001fba <HAL_ADC_Init+0x12e>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8001f42:	d03a      	beq.n	8001fba <HAL_ADC_Init+0x12e>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	69db      	ldr	r3, [r3, #28]
 8001f48:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001f4c:	d035      	beq.n	8001fba <HAL_ADC_Init+0x12e>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8001f56:	d030      	beq.n	8001fba <HAL_ADC_Init+0x12e>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	69db      	ldr	r3, [r3, #28]
 8001f5c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001f60:	d02b      	beq.n	8001fba <HAL_ADC_Init+0x12e>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d027      	beq.n	8001fba <HAL_ADC_Init+0x12e>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f72:	d022      	beq.n	8001fba <HAL_ADC_Init+0x12e>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69db      	ldr	r3, [r3, #28]
 8001f78:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8001f7c:	d01d      	beq.n	8001fba <HAL_ADC_Init+0x12e>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69db      	ldr	r3, [r3, #28]
 8001f82:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 8001f86:	d018      	beq.n	8001fba <HAL_ADC_Init+0x12e>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69db      	ldr	r3, [r3, #28]
 8001f8c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001f90:	d013      	beq.n	8001fba <HAL_ADC_Init+0x12e>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f9a:	d00e      	beq.n	8001fba <HAL_ADC_Init+0x12e>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	69db      	ldr	r3, [r3, #28]
 8001fa0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001fa4:	d009      	beq.n	8001fba <HAL_ADC_Init+0x12e>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001fae:	d004      	beq.n	8001fba <HAL_ADC_Init+0x12e>
 8001fb0:	f240 11b7 	movw	r1, #439	; 0x1b7
 8001fb4:	484e      	ldr	r0, [pc, #312]	; (80020f0 <HAL_ADC_Init+0x264>)
 8001fb6:	f7ff fab3 	bl	8001520 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d02a      	beq.n	8002018 <HAL_ADC_Init+0x18c>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_ADC_Init+0x146>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	2b10      	cmp	r3, #16
 8001fd0:	d904      	bls.n	8001fdc <HAL_ADC_Init+0x150>
 8001fd2:	f240 11bb 	movw	r1, #443	; 0x1bb
 8001fd6:	4846      	ldr	r0, [pc, #280]	; (80020f0 <HAL_ADC_Init+0x264>)
 8001fd8:	f7ff faa2 	bl	8001520 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	7d1b      	ldrb	r3, [r3, #20]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d008      	beq.n	8001ff6 <HAL_ADC_Init+0x16a>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	7d1b      	ldrb	r3, [r3, #20]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d004      	beq.n	8001ff6 <HAL_ADC_Init+0x16a>
 8001fec:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8001ff0:	483f      	ldr	r0, [pc, #252]	; (80020f0 <HAL_ADC_Init+0x264>)
 8001ff2:	f7ff fa95 	bl	8001520 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	7d1b      	ldrb	r3, [r3, #20]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00c      	beq.n	8002018 <HAL_ADC_Init+0x18c>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_ADC_Init+0x182>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	2b08      	cmp	r3, #8
 800200c:	d904      	bls.n	8002018 <HAL_ADC_Init+0x18c>
 800200e:	f240 11bf 	movw	r1, #447	; 0x1bf
 8002012:	4837      	ldr	r0, [pc, #220]	; (80020f0 <HAL_ADC_Init+0x264>)
 8002014:	f7ff fa84 	bl	8001520 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201c:	2b00      	cmp	r3, #0
 800201e:	d109      	bne.n	8002034 <HAL_ADC_Init+0x1a8>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff faba 	bl	80015a8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 fd01 	bl	8002a3c <ADC_ConversionStop_Disable>
 800203a:	4603      	mov	r3, r0
 800203c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002042:	f003 0310 	and.w	r3, r3, #16
 8002046:	2b00      	cmp	r3, #0
 8002048:	f040 80b1 	bne.w	80021ae <HAL_ADC_Init+0x322>
 800204c:	7dfb      	ldrb	r3, [r7, #23]
 800204e:	2b00      	cmp	r3, #0
 8002050:	f040 80ad 	bne.w	80021ae <HAL_ADC_Init+0x322>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002058:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800205c:	f023 0302 	bic.w	r3, r3, #2
 8002060:	f043 0202 	orr.w	r2, r3, #2
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	491e      	ldr	r1, [pc, #120]	; (80020ec <HAL_ADC_Init+0x260>)
 8002072:	428b      	cmp	r3, r1
 8002074:	d10a      	bne.n	800208c <HAL_ADC_Init+0x200>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800207e:	d002      	beq.n	8002086 <HAL_ADC_Init+0x1fa>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	e004      	b.n	8002090 <HAL_ADC_Init+0x204>
 8002086:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800208a:	e001      	b.n	8002090 <HAL_ADC_Init+0x204>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002090:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	7b1b      	ldrb	r3, [r3, #12]
 8002096:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002098:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	4313      	orrs	r3, r2
 800209e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020a8:	d003      	beq.n	80020b2 <HAL_ADC_Init+0x226>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d102      	bne.n	80020b8 <HAL_ADC_Init+0x22c>
 80020b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020b6:	e000      	b.n	80020ba <HAL_ADC_Init+0x22e>
 80020b8:	2300      	movs	r3, #0
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	4313      	orrs	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	7d1b      	ldrb	r3, [r3, #20]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d121      	bne.n	800210c <HAL_ADC_Init+0x280>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	7b1b      	ldrb	r3, [r3, #12]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d111      	bne.n	80020f4 <HAL_ADC_Init+0x268>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	3b01      	subs	r3, #1
 80020d6:	035a      	lsls	r2, r3, #13
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4313      	orrs	r3, r2
 80020dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020e0:	613b      	str	r3, [r7, #16]
 80020e2:	e013      	b.n	800210c <HAL_ADC_Init+0x280>
 80020e4:	40012400 	.word	0x40012400
 80020e8:	40012800 	.word	0x40012800
 80020ec:	40013c00 	.word	0x40013c00
 80020f0:	0800b0e8 	.word	0x0800b0e8
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f8:	f043 0220 	orr.w	r2, r3, #32
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002104:	f043 0201 	orr.w	r2, r3, #1
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	430a      	orrs	r2, r1
 800211e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	4b28      	ldr	r3, [pc, #160]	; (80021c8 <HAL_ADC_Init+0x33c>)
 8002128:	4013      	ands	r3, r2
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6812      	ldr	r2, [r2, #0]
 800212e:	68b9      	ldr	r1, [r7, #8]
 8002130:	430b      	orrs	r3, r1
 8002132:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800213c:	d003      	beq.n	8002146 <HAL_ADC_Init+0x2ba>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d104      	bne.n	8002150 <HAL_ADC_Init+0x2c4>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	3b01      	subs	r3, #1
 800214c:	051b      	lsls	r3, r3, #20
 800214e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002156:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	430a      	orrs	r2, r1
 8002162:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	4b18      	ldr	r3, [pc, #96]	; (80021cc <HAL_ADC_Init+0x340>)
 800216c:	4013      	ands	r3, r2
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	429a      	cmp	r2, r3
 8002172:	d10b      	bne.n	800218c <HAL_ADC_Init+0x300>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217e:	f023 0303 	bic.w	r3, r3, #3
 8002182:	f043 0201 	orr.w	r2, r3, #1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800218a:	e018      	b.n	80021be <HAL_ADC_Init+0x332>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002190:	f023 0312 	bic.w	r3, r3, #18
 8002194:	f043 0210 	orr.w	r2, r3, #16
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a0:	f043 0201 	orr.w	r2, r3, #1
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80021ac:	e007      	b.n	80021be <HAL_ADC_Init+0x332>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b2:	f043 0210 	orr.w	r2, r3, #16
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80021be:	7dfb      	ldrb	r3, [r7, #23]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	ffe1f7fd 	.word	0xffe1f7fd
 80021cc:	ff1f0efe 	.word	0xff1f0efe

080021d0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021d8:	2300      	movs	r3, #0
 80021da:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a5a      	ldr	r2, [pc, #360]	; (800234c <HAL_ADC_Start+0x17c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d00e      	beq.n	8002204 <HAL_ADC_Start+0x34>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a59      	ldr	r2, [pc, #356]	; (8002350 <HAL_ADC_Start+0x180>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d009      	beq.n	8002204 <HAL_ADC_Start+0x34>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a57      	ldr	r2, [pc, #348]	; (8002354 <HAL_ADC_Start+0x184>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d004      	beq.n	8002204 <HAL_ADC_Start+0x34>
 80021fa:	f240 411b 	movw	r1, #1051	; 0x41b
 80021fe:	4856      	ldr	r0, [pc, #344]	; (8002358 <HAL_ADC_Start+0x188>)
 8002200:	f7ff f98e 	bl	8001520 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800220a:	2b01      	cmp	r3, #1
 800220c:	d101      	bne.n	8002212 <HAL_ADC_Start+0x42>
 800220e:	2302      	movs	r3, #2
 8002210:	e098      	b.n	8002344 <HAL_ADC_Start+0x174>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 fbb4 	bl	8002988 <ADC_Enable>
 8002220:	4603      	mov	r3, r0
 8002222:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	2b00      	cmp	r3, #0
 8002228:	f040 8087 	bne.w	800233a <HAL_ADC_Start+0x16a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002230:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002234:	f023 0301 	bic.w	r3, r3, #1
 8002238:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a42      	ldr	r2, [pc, #264]	; (8002350 <HAL_ADC_Start+0x180>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d105      	bne.n	8002256 <HAL_ADC_Start+0x86>
 800224a:	4b40      	ldr	r3, [pc, #256]	; (800234c <HAL_ADC_Start+0x17c>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d115      	bne.n	8002282 <HAL_ADC_Start+0xb2>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800226c:	2b00      	cmp	r3, #0
 800226e:	d026      	beq.n	80022be <HAL_ADC_Start+0xee>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002274:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002278:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002280:	e01d      	b.n	80022be <HAL_ADC_Start+0xee>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002286:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a2e      	ldr	r2, [pc, #184]	; (800234c <HAL_ADC_Start+0x17c>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d004      	beq.n	80022a2 <HAL_ADC_Start+0xd2>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a2c      	ldr	r2, [pc, #176]	; (8002350 <HAL_ADC_Start+0x180>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d10d      	bne.n	80022be <HAL_ADC_Start+0xee>
 80022a2:	4b2a      	ldr	r3, [pc, #168]	; (800234c <HAL_ADC_Start+0x17c>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d007      	beq.n	80022be <HAL_ADC_Start+0xee>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d006      	beq.n	80022d8 <HAL_ADC_Start+0x108>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ce:	f023 0206 	bic.w	r2, r3, #6
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80022d6:	e002      	b.n	80022de <HAL_ADC_Start+0x10e>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f06f 0202 	mvn.w	r2, #2
 80022ee:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80022fa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80022fe:	d113      	bne.n	8002328 <HAL_ADC_Start+0x158>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002304:	4a12      	ldr	r2, [pc, #72]	; (8002350 <HAL_ADC_Start+0x180>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d105      	bne.n	8002316 <HAL_ADC_Start+0x146>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800230a:	4b10      	ldr	r3, [pc, #64]	; (800234c <HAL_ADC_Start+0x17c>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002312:	2b00      	cmp	r3, #0
 8002314:	d108      	bne.n	8002328 <HAL_ADC_Start+0x158>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002324:	609a      	str	r2, [r3, #8]
 8002326:	e00c      	b.n	8002342 <HAL_ADC_Start+0x172>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	e003      	b.n	8002342 <HAL_ADC_Start+0x172>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002342:	7bfb      	ldrb	r3, [r7, #15]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40012400 	.word	0x40012400
 8002350:	40012800 	.word	0x40012800
 8002354:	40013c00 	.word	0x40013c00
 8002358:	0800b0e8 	.word	0x0800b0e8

0800235c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800235c:	b590      	push	{r4, r7, lr}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002366:	2300      	movs	r3, #0
 8002368:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a80      	ldr	r2, [pc, #512]	; (8002578 <HAL_ADC_PollForConversion+0x21c>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d00e      	beq.n	800239a <HAL_ADC_PollForConversion+0x3e>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a7e      	ldr	r2, [pc, #504]	; (800257c <HAL_ADC_PollForConversion+0x220>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d009      	beq.n	800239a <HAL_ADC_PollForConversion+0x3e>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a7d      	ldr	r2, [pc, #500]	; (8002580 <HAL_ADC_PollForConversion+0x224>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d004      	beq.n	800239a <HAL_ADC_PollForConversion+0x3e>
 8002390:	f240 41bd 	movw	r1, #1213	; 0x4bd
 8002394:	487b      	ldr	r0, [pc, #492]	; (8002584 <HAL_ADC_PollForConversion+0x228>)
 8002396:	f7ff f8c3 	bl	8001520 <assert_failed>
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800239a:	f7ff fd6d 	bl	8001e78 <HAL_GetTick>
 800239e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00b      	beq.n	80023c6 <HAL_ADC_PollForConversion+0x6a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b2:	f043 0220 	orr.w	r2, r3, #32
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e0d3      	b.n	800256e <HAL_ADC_PollForConversion+0x212>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d131      	bne.n	8002438 <HAL_ADC_PollForConversion+0xdc>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023da:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d12a      	bne.n	8002438 <HAL_ADC_PollForConversion+0xdc>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80023e2:	e021      	b.n	8002428 <HAL_ADC_PollForConversion+0xcc>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ea:	d01d      	beq.n	8002428 <HAL_ADC_PollForConversion+0xcc>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d007      	beq.n	8002402 <HAL_ADC_PollForConversion+0xa6>
 80023f2:	f7ff fd41 	bl	8001e78 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d212      	bcs.n	8002428 <HAL_ADC_PollForConversion+0xcc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10b      	bne.n	8002428 <HAL_ADC_PollForConversion+0xcc>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002414:	f043 0204 	orr.w	r2, r3, #4
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e0a2      	b.n	800256e <HAL_ADC_PollForConversion+0x212>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0d6      	beq.n	80023e4 <HAL_ADC_PollForConversion+0x88>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002436:	e070      	b.n	800251a <HAL_ADC_PollForConversion+0x1be>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002438:	4b53      	ldr	r3, [pc, #332]	; (8002588 <HAL_ADC_PollForConversion+0x22c>)
 800243a:	681c      	ldr	r4, [r3, #0]
 800243c:	2002      	movs	r0, #2
 800243e:	f001 ff7d 	bl	800433c <HAL_RCCEx_GetPeriphCLKFreq>
 8002442:	4603      	mov	r3, r0
 8002444:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6919      	ldr	r1, [r3, #16]
 800244e:	4b4f      	ldr	r3, [pc, #316]	; (800258c <HAL_ADC_PollForConversion+0x230>)
 8002450:	400b      	ands	r3, r1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d118      	bne.n	8002488 <HAL_ADC_PollForConversion+0x12c>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68d9      	ldr	r1, [r3, #12]
 800245c:	4b4c      	ldr	r3, [pc, #304]	; (8002590 <HAL_ADC_PollForConversion+0x234>)
 800245e:	400b      	ands	r3, r1
 8002460:	2b00      	cmp	r3, #0
 8002462:	d111      	bne.n	8002488 <HAL_ADC_PollForConversion+0x12c>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6919      	ldr	r1, [r3, #16]
 800246a:	4b4a      	ldr	r3, [pc, #296]	; (8002594 <HAL_ADC_PollForConversion+0x238>)
 800246c:	400b      	ands	r3, r1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d108      	bne.n	8002484 <HAL_ADC_PollForConversion+0x128>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68d9      	ldr	r1, [r3, #12]
 8002478:	4b47      	ldr	r3, [pc, #284]	; (8002598 <HAL_ADC_PollForConversion+0x23c>)
 800247a:	400b      	ands	r3, r1
 800247c:	2b00      	cmp	r3, #0
 800247e:	d101      	bne.n	8002484 <HAL_ADC_PollForConversion+0x128>
 8002480:	2314      	movs	r3, #20
 8002482:	e020      	b.n	80024c6 <HAL_ADC_PollForConversion+0x16a>
 8002484:	2329      	movs	r3, #41	; 0x29
 8002486:	e01e      	b.n	80024c6 <HAL_ADC_PollForConversion+0x16a>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6919      	ldr	r1, [r3, #16]
 800248e:	4b41      	ldr	r3, [pc, #260]	; (8002594 <HAL_ADC_PollForConversion+0x238>)
 8002490:	400b      	ands	r3, r1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d106      	bne.n	80024a4 <HAL_ADC_PollForConversion+0x148>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68d9      	ldr	r1, [r3, #12]
 800249c:	4b3e      	ldr	r3, [pc, #248]	; (8002598 <HAL_ADC_PollForConversion+0x23c>)
 800249e:	400b      	ands	r3, r1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00d      	beq.n	80024c0 <HAL_ADC_PollForConversion+0x164>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6919      	ldr	r1, [r3, #16]
 80024aa:	4b3c      	ldr	r3, [pc, #240]	; (800259c <HAL_ADC_PollForConversion+0x240>)
 80024ac:	400b      	ands	r3, r1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d108      	bne.n	80024c4 <HAL_ADC_PollForConversion+0x168>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68d9      	ldr	r1, [r3, #12]
 80024b8:	4b38      	ldr	r3, [pc, #224]	; (800259c <HAL_ADC_PollForConversion+0x240>)
 80024ba:	400b      	ands	r3, r1
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d101      	bne.n	80024c4 <HAL_ADC_PollForConversion+0x168>
 80024c0:	2354      	movs	r3, #84	; 0x54
 80024c2:	e000      	b.n	80024c6 <HAL_ADC_PollForConversion+0x16a>
 80024c4:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80024c6:	fb02 f303 	mul.w	r3, r2, r3
 80024ca:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80024cc:	e021      	b.n	8002512 <HAL_ADC_PollForConversion+0x1b6>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d4:	d01a      	beq.n	800250c <HAL_ADC_PollForConversion+0x1b0>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d007      	beq.n	80024ec <HAL_ADC_PollForConversion+0x190>
 80024dc:	f7ff fccc 	bl	8001e78 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d20f      	bcs.n	800250c <HAL_ADC_PollForConversion+0x1b0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d90b      	bls.n	800250c <HAL_ADC_PollForConversion+0x1b0>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f8:	f043 0204 	orr.w	r2, r3, #4
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e030      	b.n	800256e <HAL_ADC_PollForConversion+0x212>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	3301      	adds	r3, #1
 8002510:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	429a      	cmp	r2, r3
 8002518:	d8d9      	bhi.n	80024ce <HAL_ADC_PollForConversion+0x172>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f06f 0212 	mvn.w	r2, #18
 8002522:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002528:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800253a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800253e:	d115      	bne.n	800256c <HAL_ADC_PollForConversion+0x210>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002544:	2b00      	cmp	r3, #0
 8002546:	d111      	bne.n	800256c <HAL_ADC_PollForConversion+0x210>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002558:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d105      	bne.n	800256c <HAL_ADC_PollForConversion+0x210>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002564:	f043 0201 	orr.w	r2, r3, #1
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	371c      	adds	r7, #28
 8002572:	46bd      	mov	sp, r7
 8002574:	bd90      	pop	{r4, r7, pc}
 8002576:	bf00      	nop
 8002578:	40012400 	.word	0x40012400
 800257c:	40012800 	.word	0x40012800
 8002580:	40013c00 	.word	0x40013c00
 8002584:	0800b0e8 	.word	0x0800b0e8
 8002588:	20000000 	.word	0x20000000
 800258c:	24924924 	.word	0x24924924
 8002590:	00924924 	.word	0x00924924
 8002594:	12492492 	.word	0x12492492
 8002598:	00492492 	.word	0x00492492
 800259c:	00249249 	.word	0x00249249

080025a0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a0c      	ldr	r2, [pc, #48]	; (80025e0 <HAL_ADC_GetValue+0x40>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d00e      	beq.n	80025d0 <HAL_ADC_GetValue+0x30>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a0b      	ldr	r2, [pc, #44]	; (80025e4 <HAL_ADC_GetValue+0x44>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d009      	beq.n	80025d0 <HAL_ADC_GetValue+0x30>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a09      	ldr	r2, [pc, #36]	; (80025e8 <HAL_ADC_GetValue+0x48>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d004      	beq.n	80025d0 <HAL_ADC_GetValue+0x30>
 80025c6:	f240 61ef 	movw	r1, #1775	; 0x6ef
 80025ca:	4808      	ldr	r0, [pc, #32]	; (80025ec <HAL_ADC_GetValue+0x4c>)
 80025cc:	f7fe ffa8 	bl	8001520 <assert_failed>

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40012400 	.word	0x40012400
 80025e4:	40012800 	.word	0x40012800
 80025e8:	40013c00 	.word	0x40013c00
 80025ec:	0800b0e8 	.word	0x0800b0e8

080025f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80025fe:	2300      	movs	r3, #0
 8002600:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a8b      	ldr	r2, [pc, #556]	; (8002834 <HAL_ADC_ConfigChannel+0x244>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d00e      	beq.n	800262a <HAL_ADC_ConfigChannel+0x3a>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a89      	ldr	r2, [pc, #548]	; (8002838 <HAL_ADC_ConfigChannel+0x248>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d009      	beq.n	800262a <HAL_ADC_ConfigChannel+0x3a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a88      	ldr	r2, [pc, #544]	; (800283c <HAL_ADC_ConfigChannel+0x24c>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d004      	beq.n	800262a <HAL_ADC_ConfigChannel+0x3a>
 8002620:	f240 71dd 	movw	r1, #2013	; 0x7dd
 8002624:	4886      	ldr	r0, [pc, #536]	; (8002840 <HAL_ADC_ConfigChannel+0x250>)
 8002626:	f7fe ff7b 	bl	8001520 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d048      	beq.n	80026c4 <HAL_ADC_ConfigChannel+0xd4>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d044      	beq.n	80026c4 <HAL_ADC_ConfigChannel+0xd4>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d040      	beq.n	80026c4 <HAL_ADC_ConfigChannel+0xd4>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2b03      	cmp	r3, #3
 8002648:	d03c      	beq.n	80026c4 <HAL_ADC_ConfigChannel+0xd4>
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2b04      	cmp	r3, #4
 8002650:	d038      	beq.n	80026c4 <HAL_ADC_ConfigChannel+0xd4>
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2b05      	cmp	r3, #5
 8002658:	d034      	beq.n	80026c4 <HAL_ADC_ConfigChannel+0xd4>
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2b06      	cmp	r3, #6
 8002660:	d030      	beq.n	80026c4 <HAL_ADC_ConfigChannel+0xd4>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2b07      	cmp	r3, #7
 8002668:	d02c      	beq.n	80026c4 <HAL_ADC_ConfigChannel+0xd4>
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2b08      	cmp	r3, #8
 8002670:	d028      	beq.n	80026c4 <HAL_ADC_ConfigChannel+0xd4>
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2b09      	cmp	r3, #9
 8002678:	d024      	beq.n	80026c4 <HAL_ADC_ConfigChannel+0xd4>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2b0a      	cmp	r3, #10
 8002680:	d020      	beq.n	80026c4 <HAL_ADC_ConfigChannel+0xd4>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2b0b      	cmp	r3, #11
 8002688:	d01c      	beq.n	80026c4 <HAL_ADC_ConfigChannel+0xd4>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b0c      	cmp	r3, #12
 8002690:	d018      	beq.n	80026c4 <HAL_ADC_ConfigChannel+0xd4>
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2b0d      	cmp	r3, #13
 8002698:	d014      	beq.n	80026c4 <HAL_ADC_ConfigChannel+0xd4>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2b0e      	cmp	r3, #14
 80026a0:	d010      	beq.n	80026c4 <HAL_ADC_ConfigChannel+0xd4>
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2b0f      	cmp	r3, #15
 80026a8:	d00c      	beq.n	80026c4 <HAL_ADC_ConfigChannel+0xd4>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2b10      	cmp	r3, #16
 80026b0:	d008      	beq.n	80026c4 <HAL_ADC_ConfigChannel+0xd4>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2b11      	cmp	r3, #17
 80026b8:	d004      	beq.n	80026c4 <HAL_ADC_ConfigChannel+0xd4>
 80026ba:	f240 71de 	movw	r1, #2014	; 0x7de
 80026be:	4860      	ldr	r0, [pc, #384]	; (8002840 <HAL_ADC_ConfigChannel+0x250>)
 80026c0:	f7fe ff2e 	bl	8001520 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d040      	beq.n	800274e <HAL_ADC_ConfigChannel+0x15e>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d03c      	beq.n	800274e <HAL_ADC_ConfigChannel+0x15e>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b03      	cmp	r3, #3
 80026da:	d038      	beq.n	800274e <HAL_ADC_ConfigChannel+0x15e>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b04      	cmp	r3, #4
 80026e2:	d034      	beq.n	800274e <HAL_ADC_ConfigChannel+0x15e>
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b05      	cmp	r3, #5
 80026ea:	d030      	beq.n	800274e <HAL_ADC_ConfigChannel+0x15e>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b06      	cmp	r3, #6
 80026f2:	d02c      	beq.n	800274e <HAL_ADC_ConfigChannel+0x15e>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	2b07      	cmp	r3, #7
 80026fa:	d028      	beq.n	800274e <HAL_ADC_ConfigChannel+0x15e>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b08      	cmp	r3, #8
 8002702:	d024      	beq.n	800274e <HAL_ADC_ConfigChannel+0x15e>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b09      	cmp	r3, #9
 800270a:	d020      	beq.n	800274e <HAL_ADC_ConfigChannel+0x15e>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2b0a      	cmp	r3, #10
 8002712:	d01c      	beq.n	800274e <HAL_ADC_ConfigChannel+0x15e>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b0b      	cmp	r3, #11
 800271a:	d018      	beq.n	800274e <HAL_ADC_ConfigChannel+0x15e>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b0c      	cmp	r3, #12
 8002722:	d014      	beq.n	800274e <HAL_ADC_ConfigChannel+0x15e>
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2b0d      	cmp	r3, #13
 800272a:	d010      	beq.n	800274e <HAL_ADC_ConfigChannel+0x15e>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	2b0e      	cmp	r3, #14
 8002732:	d00c      	beq.n	800274e <HAL_ADC_ConfigChannel+0x15e>
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b0f      	cmp	r3, #15
 800273a:	d008      	beq.n	800274e <HAL_ADC_ConfigChannel+0x15e>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b10      	cmp	r3, #16
 8002742:	d004      	beq.n	800274e <HAL_ADC_ConfigChannel+0x15e>
 8002744:	f240 71df 	movw	r1, #2015	; 0x7df
 8002748:	483d      	ldr	r0, [pc, #244]	; (8002840 <HAL_ADC_ConfigChannel+0x250>)
 800274a:	f7fe fee9 	bl	8001520 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d020      	beq.n	8002798 <HAL_ADC_ConfigChannel+0x1a8>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d01c      	beq.n	8002798 <HAL_ADC_ConfigChannel+0x1a8>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d018      	beq.n	8002798 <HAL_ADC_ConfigChannel+0x1a8>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	2b03      	cmp	r3, #3
 800276c:	d014      	beq.n	8002798 <HAL_ADC_ConfigChannel+0x1a8>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	2b04      	cmp	r3, #4
 8002774:	d010      	beq.n	8002798 <HAL_ADC_ConfigChannel+0x1a8>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2b05      	cmp	r3, #5
 800277c:	d00c      	beq.n	8002798 <HAL_ADC_ConfigChannel+0x1a8>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	2b06      	cmp	r3, #6
 8002784:	d008      	beq.n	8002798 <HAL_ADC_ConfigChannel+0x1a8>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	2b07      	cmp	r3, #7
 800278c:	d004      	beq.n	8002798 <HAL_ADC_ConfigChannel+0x1a8>
 800278e:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8002792:	482b      	ldr	r0, [pc, #172]	; (8002840 <HAL_ADC_ConfigChannel+0x250>)
 8002794:	f7fe fec4 	bl	8001520 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d101      	bne.n	80027a6 <HAL_ADC_ConfigChannel+0x1b6>
 80027a2:	2302      	movs	r3, #2
 80027a4:	e0e5      	b.n	8002972 <HAL_ADC_ConfigChannel+0x382>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b06      	cmp	r3, #6
 80027b4:	d81c      	bhi.n	80027f0 <HAL_ADC_ConfigChannel+0x200>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	4613      	mov	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	3b05      	subs	r3, #5
 80027c8:	221f      	movs	r2, #31
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43db      	mvns	r3, r3
 80027d0:	4019      	ands	r1, r3
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	6818      	ldr	r0, [r3, #0]
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	4613      	mov	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	3b05      	subs	r3, #5
 80027e2:	fa00 f203 	lsl.w	r2, r0, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	635a      	str	r2, [r3, #52]	; 0x34
 80027ee:	e045      	b.n	800287c <HAL_ADC_ConfigChannel+0x28c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b0c      	cmp	r3, #12
 80027f6:	d825      	bhi.n	8002844 <HAL_ADC_ConfigChannel+0x254>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	3b23      	subs	r3, #35	; 0x23
 800280a:	221f      	movs	r2, #31
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	4019      	ands	r1, r3
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	6818      	ldr	r0, [r3, #0]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	3b23      	subs	r3, #35	; 0x23
 8002824:	fa00 f203 	lsl.w	r2, r0, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	631a      	str	r2, [r3, #48]	; 0x30
 8002830:	e024      	b.n	800287c <HAL_ADC_ConfigChannel+0x28c>
 8002832:	bf00      	nop
 8002834:	40012400 	.word	0x40012400
 8002838:	40012800 	.word	0x40012800
 800283c:	40013c00 	.word	0x40013c00
 8002840:	0800b0e8 	.word	0x0800b0e8
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	4613      	mov	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	3b41      	subs	r3, #65	; 0x41
 8002856:	221f      	movs	r2, #31
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43db      	mvns	r3, r3
 800285e:	4019      	ands	r1, r3
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	3b41      	subs	r3, #65	; 0x41
 8002870:	fa00 f203 	lsl.w	r2, r0, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2b09      	cmp	r3, #9
 8002882:	d91c      	bls.n	80028be <HAL_ADC_ConfigChannel+0x2ce>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68d9      	ldr	r1, [r3, #12]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	4613      	mov	r3, r2
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	4413      	add	r3, r2
 8002894:	3b1e      	subs	r3, #30
 8002896:	2207      	movs	r2, #7
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	4019      	ands	r1, r3
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	6898      	ldr	r0, [r3, #8]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4613      	mov	r3, r2
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	4413      	add	r3, r2
 80028ae:	3b1e      	subs	r3, #30
 80028b0:	fa00 f203 	lsl.w	r2, r0, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	60da      	str	r2, [r3, #12]
 80028bc:	e019      	b.n	80028f2 <HAL_ADC_ConfigChannel+0x302>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6919      	ldr	r1, [r3, #16]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	4613      	mov	r3, r2
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	4413      	add	r3, r2
 80028ce:	2207      	movs	r2, #7
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	4019      	ands	r1, r3
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	6898      	ldr	r0, [r3, #8]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	4613      	mov	r3, r2
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	4413      	add	r3, r2
 80028e6:	fa00 f203 	lsl.w	r2, r0, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2b10      	cmp	r3, #16
 80028f8:	d003      	beq.n	8002902 <HAL_ADC_ConfigChannel+0x312>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80028fe:	2b11      	cmp	r3, #17
 8002900:	d132      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x378>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a1d      	ldr	r2, [pc, #116]	; (800297c <HAL_ADC_ConfigChannel+0x38c>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d125      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x368>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d126      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x378>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002928:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2b10      	cmp	r3, #16
 8002930:	d11a      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x378>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002932:	4b13      	ldr	r3, [pc, #76]	; (8002980 <HAL_ADC_ConfigChannel+0x390>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a13      	ldr	r2, [pc, #76]	; (8002984 <HAL_ADC_ConfigChannel+0x394>)
 8002938:	fba2 2303 	umull	r2, r3, r2, r3
 800293c:	0c9a      	lsrs	r2, r3, #18
 800293e:	4613      	mov	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002948:	e002      	b.n	8002950 <HAL_ADC_ConfigChannel+0x360>
          {
            wait_loop_index--;
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	3b01      	subs	r3, #1
 800294e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f9      	bne.n	800294a <HAL_ADC_ConfigChannel+0x35a>
 8002956:	e007      	b.n	8002968 <HAL_ADC_ConfigChannel+0x378>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295c:	f043 0220 	orr.w	r2, r3, #32
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002970:	7bfb      	ldrb	r3, [r7, #15]
}
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40012400 	.word	0x40012400
 8002980:	20000000 	.word	0x20000000
 8002984:	431bde83 	.word	0x431bde83

08002988 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002990:	2300      	movs	r3, #0
 8002992:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002994:	2300      	movs	r3, #0
 8002996:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d040      	beq.n	8002a28 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f042 0201 	orr.w	r2, r2, #1
 80029b4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029b6:	4b1f      	ldr	r3, [pc, #124]	; (8002a34 <ADC_Enable+0xac>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a1f      	ldr	r2, [pc, #124]	; (8002a38 <ADC_Enable+0xb0>)
 80029bc:	fba2 2303 	umull	r2, r3, r2, r3
 80029c0:	0c9b      	lsrs	r3, r3, #18
 80029c2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80029c4:	e002      	b.n	80029cc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	3b01      	subs	r3, #1
 80029ca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f9      	bne.n	80029c6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80029d2:	f7ff fa51 	bl	8001e78 <HAL_GetTick>
 80029d6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80029d8:	e01f      	b.n	8002a1a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029da:	f7ff fa4d 	bl	8001e78 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d918      	bls.n	8002a1a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d011      	beq.n	8002a1a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fa:	f043 0210 	orr.w	r2, r3, #16
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a06:	f043 0201 	orr.w	r2, r3, #1
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e007      	b.n	8002a2a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d1d8      	bne.n	80029da <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20000000 	.word	0x20000000
 8002a38:	431bde83 	.word	0x431bde83

08002a3c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d12e      	bne.n	8002ab4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0201 	bic.w	r2, r2, #1
 8002a64:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a66:	f7ff fa07 	bl	8001e78 <HAL_GetTick>
 8002a6a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a6c:	e01b      	b.n	8002aa6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a6e:	f7ff fa03 	bl	8001e78 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d914      	bls.n	8002aa6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d10d      	bne.n	8002aa6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8e:	f043 0210 	orr.w	r2, r3, #16
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9a:	f043 0201 	orr.w	r2, r3, #1
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e007      	b.n	8002ab6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d0dc      	beq.n	8002a6e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ad0:	4b0c      	ldr	r3, [pc, #48]	; (8002b04 <__NVIC_SetPriorityGrouping+0x44>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ad6:	68ba      	ldr	r2, [r7, #8]
 8002ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002adc:	4013      	ands	r3, r2
 8002ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ae8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002af2:	4a04      	ldr	r2, [pc, #16]	; (8002b04 <__NVIC_SetPriorityGrouping+0x44>)
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	60d3      	str	r3, [r2, #12]
}
 8002af8:	bf00      	nop
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	e000ed00 	.word	0xe000ed00

08002b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b0c:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <__NVIC_GetPriorityGrouping+0x18>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	0a1b      	lsrs	r3, r3, #8
 8002b12:	f003 0307 	and.w	r3, r3, #7
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	e000ed00 	.word	0xe000ed00

08002b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	db0b      	blt.n	8002b4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	f003 021f 	and.w	r2, r3, #31
 8002b3c:	4906      	ldr	r1, [pc, #24]	; (8002b58 <__NVIC_EnableIRQ+0x34>)
 8002b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b42:	095b      	lsrs	r3, r3, #5
 8002b44:	2001      	movs	r0, #1
 8002b46:	fa00 f202 	lsl.w	r2, r0, r2
 8002b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr
 8002b58:	e000e100 	.word	0xe000e100

08002b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	6039      	str	r1, [r7, #0]
 8002b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	db0a      	blt.n	8002b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	490c      	ldr	r1, [pc, #48]	; (8002ba8 <__NVIC_SetPriority+0x4c>)
 8002b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7a:	0112      	lsls	r2, r2, #4
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	440b      	add	r3, r1
 8002b80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b84:	e00a      	b.n	8002b9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	4908      	ldr	r1, [pc, #32]	; (8002bac <__NVIC_SetPriority+0x50>)
 8002b8c:	79fb      	ldrb	r3, [r7, #7]
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	3b04      	subs	r3, #4
 8002b94:	0112      	lsls	r2, r2, #4
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	440b      	add	r3, r1
 8002b9a:	761a      	strb	r2, [r3, #24]
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	e000e100 	.word	0xe000e100
 8002bac:	e000ed00 	.word	0xe000ed00

08002bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b089      	sub	sp, #36	; 0x24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	f1c3 0307 	rsb	r3, r3, #7
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	bf28      	it	cs
 8002bce:	2304      	movcs	r3, #4
 8002bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	2b06      	cmp	r3, #6
 8002bd8:	d902      	bls.n	8002be0 <NVIC_EncodePriority+0x30>
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	3b03      	subs	r3, #3
 8002bde:	e000      	b.n	8002be2 <NVIC_EncodePriority+0x32>
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be4:	f04f 32ff 	mov.w	r2, #4294967295
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	43da      	mvns	r2, r3
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	401a      	ands	r2, r3
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002c02:	43d9      	mvns	r1, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c08:	4313      	orrs	r3, r2
         );
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3724      	adds	r7, #36	; 0x24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr

08002c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c24:	d301      	bcc.n	8002c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c26:	2301      	movs	r3, #1
 8002c28:	e00f      	b.n	8002c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c2a:	4a0a      	ldr	r2, [pc, #40]	; (8002c54 <SysTick_Config+0x40>)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c32:	210f      	movs	r1, #15
 8002c34:	f04f 30ff 	mov.w	r0, #4294967295
 8002c38:	f7ff ff90 	bl	8002b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c3c:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <SysTick_Config+0x40>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c42:	4b04      	ldr	r3, [pc, #16]	; (8002c54 <SysTick_Config+0x40>)
 8002c44:	2207      	movs	r2, #7
 8002c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	e000e010 	.word	0xe000e010

08002c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b07      	cmp	r3, #7
 8002c64:	d00f      	beq.n	8002c86 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b06      	cmp	r3, #6
 8002c6a:	d00c      	beq.n	8002c86 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b05      	cmp	r3, #5
 8002c70:	d009      	beq.n	8002c86 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d006      	beq.n	8002c86 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b03      	cmp	r3, #3
 8002c7c:	d003      	beq.n	8002c86 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002c7e:	2192      	movs	r1, #146	; 0x92
 8002c80:	4804      	ldr	r0, [pc, #16]	; (8002c94 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002c82:	f7fe fc4d 	bl	8001520 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff ff1a 	bl	8002ac0 <__NVIC_SetPriorityGrouping>
}
 8002c8c:	bf00      	nop
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	0800b120 	.word	0x0800b120

08002c98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
 8002ca4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b0f      	cmp	r3, #15
 8002cae:	d903      	bls.n	8002cb8 <HAL_NVIC_SetPriority+0x20>
 8002cb0:	21aa      	movs	r1, #170	; 0xaa
 8002cb2:	480e      	ldr	r0, [pc, #56]	; (8002cec <HAL_NVIC_SetPriority+0x54>)
 8002cb4:	f7fe fc34 	bl	8001520 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2b0f      	cmp	r3, #15
 8002cbc:	d903      	bls.n	8002cc6 <HAL_NVIC_SetPriority+0x2e>
 8002cbe:	21ab      	movs	r1, #171	; 0xab
 8002cc0:	480a      	ldr	r0, [pc, #40]	; (8002cec <HAL_NVIC_SetPriority+0x54>)
 8002cc2:	f7fe fc2d 	bl	8001520 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cc6:	f7ff ff1f 	bl	8002b08 <__NVIC_GetPriorityGrouping>
 8002cca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	68b9      	ldr	r1, [r7, #8]
 8002cd0:	6978      	ldr	r0, [r7, #20]
 8002cd2:	f7ff ff6d 	bl	8002bb0 <NVIC_EncodePriority>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cdc:	4611      	mov	r1, r2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff ff3c 	bl	8002b5c <__NVIC_SetPriority>
}
 8002ce4:	bf00      	nop
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	0800b120 	.word	0x0800b120

08002cf0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	da03      	bge.n	8002d0a <HAL_NVIC_EnableIRQ+0x1a>
 8002d02:	21be      	movs	r1, #190	; 0xbe
 8002d04:	4805      	ldr	r0, [pc, #20]	; (8002d1c <HAL_NVIC_EnableIRQ+0x2c>)
 8002d06:	f7fe fc0b 	bl	8001520 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff ff08 	bl	8002b24 <__NVIC_EnableIRQ>
}
 8002d14:	bf00      	nop
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	0800b120 	.word	0x0800b120

08002d20 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f7ff ff73 	bl	8002c14 <SysTick_Config>
 8002d2e:	4603      	mov	r3, r0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d40:	2300      	movs	r3, #0
 8002d42:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d008      	beq.n	8002d60 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2204      	movs	r2, #4
 8002d52:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e020      	b.n	8002da2 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 020e 	bic.w	r2, r2, #14
 8002d6e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0201 	bic.w	r2, r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d88:	2101      	movs	r1, #1
 8002d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d8e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr

08002dac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002db4:	2300      	movs	r3, #0
 8002db6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d005      	beq.n	8002dce <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2204      	movs	r2, #4
 8002dc6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	73fb      	strb	r3, [r7, #15]
 8002dcc:	e0d6      	b.n	8002f7c <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 020e 	bic.w	r2, r2, #14
 8002ddc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0201 	bic.w	r2, r2, #1
 8002dec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	4b64      	ldr	r3, [pc, #400]	; (8002f88 <HAL_DMA_Abort_IT+0x1dc>)
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d958      	bls.n	8002eac <HAL_DMA_Abort_IT+0x100>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a63      	ldr	r2, [pc, #396]	; (8002f8c <HAL_DMA_Abort_IT+0x1e0>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d04f      	beq.n	8002ea4 <HAL_DMA_Abort_IT+0xf8>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a61      	ldr	r2, [pc, #388]	; (8002f90 <HAL_DMA_Abort_IT+0x1e4>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d048      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0xf4>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a60      	ldr	r2, [pc, #384]	; (8002f94 <HAL_DMA_Abort_IT+0x1e8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d040      	beq.n	8002e9a <HAL_DMA_Abort_IT+0xee>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a5e      	ldr	r2, [pc, #376]	; (8002f98 <HAL_DMA_Abort_IT+0x1ec>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d038      	beq.n	8002e94 <HAL_DMA_Abort_IT+0xe8>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a5d      	ldr	r2, [pc, #372]	; (8002f9c <HAL_DMA_Abort_IT+0x1f0>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d030      	beq.n	8002e8e <HAL_DMA_Abort_IT+0xe2>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a5b      	ldr	r2, [pc, #364]	; (8002fa0 <HAL_DMA_Abort_IT+0x1f4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d028      	beq.n	8002e88 <HAL_DMA_Abort_IT+0xdc>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a53      	ldr	r2, [pc, #332]	; (8002f88 <HAL_DMA_Abort_IT+0x1dc>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d020      	beq.n	8002e82 <HAL_DMA_Abort_IT+0xd6>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a57      	ldr	r2, [pc, #348]	; (8002fa4 <HAL_DMA_Abort_IT+0x1f8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d019      	beq.n	8002e7e <HAL_DMA_Abort_IT+0xd2>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a56      	ldr	r2, [pc, #344]	; (8002fa8 <HAL_DMA_Abort_IT+0x1fc>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d012      	beq.n	8002e7a <HAL_DMA_Abort_IT+0xce>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a54      	ldr	r2, [pc, #336]	; (8002fac <HAL_DMA_Abort_IT+0x200>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00a      	beq.n	8002e74 <HAL_DMA_Abort_IT+0xc8>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a53      	ldr	r2, [pc, #332]	; (8002fb0 <HAL_DMA_Abort_IT+0x204>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d102      	bne.n	8002e6e <HAL_DMA_Abort_IT+0xc2>
 8002e68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e6c:	e01b      	b.n	8002ea6 <HAL_DMA_Abort_IT+0xfa>
 8002e6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e72:	e018      	b.n	8002ea6 <HAL_DMA_Abort_IT+0xfa>
 8002e74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e78:	e015      	b.n	8002ea6 <HAL_DMA_Abort_IT+0xfa>
 8002e7a:	2310      	movs	r3, #16
 8002e7c:	e013      	b.n	8002ea6 <HAL_DMA_Abort_IT+0xfa>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e011      	b.n	8002ea6 <HAL_DMA_Abort_IT+0xfa>
 8002e82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e86:	e00e      	b.n	8002ea6 <HAL_DMA_Abort_IT+0xfa>
 8002e88:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e8c:	e00b      	b.n	8002ea6 <HAL_DMA_Abort_IT+0xfa>
 8002e8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e92:	e008      	b.n	8002ea6 <HAL_DMA_Abort_IT+0xfa>
 8002e94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e98:	e005      	b.n	8002ea6 <HAL_DMA_Abort_IT+0xfa>
 8002e9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e9e:	e002      	b.n	8002ea6 <HAL_DMA_Abort_IT+0xfa>
 8002ea0:	2310      	movs	r3, #16
 8002ea2:	e000      	b.n	8002ea6 <HAL_DMA_Abort_IT+0xfa>
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	4a43      	ldr	r2, [pc, #268]	; (8002fb4 <HAL_DMA_Abort_IT+0x208>)
 8002ea8:	6053      	str	r3, [r2, #4]
 8002eaa:	e057      	b.n	8002f5c <HAL_DMA_Abort_IT+0x1b0>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a36      	ldr	r2, [pc, #216]	; (8002f8c <HAL_DMA_Abort_IT+0x1e0>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d04f      	beq.n	8002f56 <HAL_DMA_Abort_IT+0x1aa>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a35      	ldr	r2, [pc, #212]	; (8002f90 <HAL_DMA_Abort_IT+0x1e4>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d048      	beq.n	8002f52 <HAL_DMA_Abort_IT+0x1a6>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a33      	ldr	r2, [pc, #204]	; (8002f94 <HAL_DMA_Abort_IT+0x1e8>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d040      	beq.n	8002f4c <HAL_DMA_Abort_IT+0x1a0>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a32      	ldr	r2, [pc, #200]	; (8002f98 <HAL_DMA_Abort_IT+0x1ec>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d038      	beq.n	8002f46 <HAL_DMA_Abort_IT+0x19a>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a30      	ldr	r2, [pc, #192]	; (8002f9c <HAL_DMA_Abort_IT+0x1f0>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d030      	beq.n	8002f40 <HAL_DMA_Abort_IT+0x194>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a2f      	ldr	r2, [pc, #188]	; (8002fa0 <HAL_DMA_Abort_IT+0x1f4>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d028      	beq.n	8002f3a <HAL_DMA_Abort_IT+0x18e>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a26      	ldr	r2, [pc, #152]	; (8002f88 <HAL_DMA_Abort_IT+0x1dc>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d020      	beq.n	8002f34 <HAL_DMA_Abort_IT+0x188>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a2b      	ldr	r2, [pc, #172]	; (8002fa4 <HAL_DMA_Abort_IT+0x1f8>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d019      	beq.n	8002f30 <HAL_DMA_Abort_IT+0x184>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a29      	ldr	r2, [pc, #164]	; (8002fa8 <HAL_DMA_Abort_IT+0x1fc>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d012      	beq.n	8002f2c <HAL_DMA_Abort_IT+0x180>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a28      	ldr	r2, [pc, #160]	; (8002fac <HAL_DMA_Abort_IT+0x200>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d00a      	beq.n	8002f26 <HAL_DMA_Abort_IT+0x17a>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a26      	ldr	r2, [pc, #152]	; (8002fb0 <HAL_DMA_Abort_IT+0x204>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d102      	bne.n	8002f20 <HAL_DMA_Abort_IT+0x174>
 8002f1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f1e:	e01b      	b.n	8002f58 <HAL_DMA_Abort_IT+0x1ac>
 8002f20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f24:	e018      	b.n	8002f58 <HAL_DMA_Abort_IT+0x1ac>
 8002f26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f2a:	e015      	b.n	8002f58 <HAL_DMA_Abort_IT+0x1ac>
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	e013      	b.n	8002f58 <HAL_DMA_Abort_IT+0x1ac>
 8002f30:	2301      	movs	r3, #1
 8002f32:	e011      	b.n	8002f58 <HAL_DMA_Abort_IT+0x1ac>
 8002f34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f38:	e00e      	b.n	8002f58 <HAL_DMA_Abort_IT+0x1ac>
 8002f3a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f3e:	e00b      	b.n	8002f58 <HAL_DMA_Abort_IT+0x1ac>
 8002f40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f44:	e008      	b.n	8002f58 <HAL_DMA_Abort_IT+0x1ac>
 8002f46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f4a:	e005      	b.n	8002f58 <HAL_DMA_Abort_IT+0x1ac>
 8002f4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f50:	e002      	b.n	8002f58 <HAL_DMA_Abort_IT+0x1ac>
 8002f52:	2310      	movs	r3, #16
 8002f54:	e000      	b.n	8002f58 <HAL_DMA_Abort_IT+0x1ac>
 8002f56:	2301      	movs	r3, #1
 8002f58:	4a17      	ldr	r2, [pc, #92]	; (8002fb8 <HAL_DMA_Abort_IT+0x20c>)
 8002f5a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d003      	beq.n	8002f7c <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	4798      	blx	r3
    } 
  }
  return status;
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40020080 	.word	0x40020080
 8002f8c:	40020008 	.word	0x40020008
 8002f90:	4002001c 	.word	0x4002001c
 8002f94:	40020030 	.word	0x40020030
 8002f98:	40020044 	.word	0x40020044
 8002f9c:	40020058 	.word	0x40020058
 8002fa0:	4002006c 	.word	0x4002006c
 8002fa4:	40020408 	.word	0x40020408
 8002fa8:	4002041c 	.word	0x4002041c
 8002fac:	40020430 	.word	0x40020430
 8002fb0:	40020444 	.word	0x40020444
 8002fb4:	40020400 	.word	0x40020400
 8002fb8:	40020000 	.word	0x40020000

08002fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08a      	sub	sp, #40	; 0x28
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4aa9      	ldr	r2, [pc, #676]	; (8003278 <HAL_GPIO_Init+0x2bc>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d01b      	beq.n	800300e <HAL_GPIO_Init+0x52>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4aa8      	ldr	r2, [pc, #672]	; (800327c <HAL_GPIO_Init+0x2c0>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d017      	beq.n	800300e <HAL_GPIO_Init+0x52>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4aa7      	ldr	r2, [pc, #668]	; (8003280 <HAL_GPIO_Init+0x2c4>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d013      	beq.n	800300e <HAL_GPIO_Init+0x52>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4aa6      	ldr	r2, [pc, #664]	; (8003284 <HAL_GPIO_Init+0x2c8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d00f      	beq.n	800300e <HAL_GPIO_Init+0x52>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4aa5      	ldr	r2, [pc, #660]	; (8003288 <HAL_GPIO_Init+0x2cc>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d00b      	beq.n	800300e <HAL_GPIO_Init+0x52>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4aa4      	ldr	r2, [pc, #656]	; (800328c <HAL_GPIO_Init+0x2d0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d007      	beq.n	800300e <HAL_GPIO_Init+0x52>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4aa3      	ldr	r2, [pc, #652]	; (8003290 <HAL_GPIO_Init+0x2d4>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d003      	beq.n	800300e <HAL_GPIO_Init+0x52>
 8003006:	21bd      	movs	r1, #189	; 0xbd
 8003008:	48a2      	ldr	r0, [pc, #648]	; (8003294 <HAL_GPIO_Init+0x2d8>)
 800300a:	f7fe fa89 	bl	8001520 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	b29b      	uxth	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <HAL_GPIO_Init+0x68>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	0c1b      	lsrs	r3, r3, #16
 800301e:	041b      	lsls	r3, r3, #16
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <HAL_GPIO_Init+0x70>
 8003024:	21be      	movs	r1, #190	; 0xbe
 8003026:	489b      	ldr	r0, [pc, #620]	; (8003294 <HAL_GPIO_Init+0x2d8>)
 8003028:	f7fe fa7a 	bl	8001520 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 8235 	beq.w	80034a0 <HAL_GPIO_Init+0x4e4>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b01      	cmp	r3, #1
 800303c:	f000 8230 	beq.w	80034a0 <HAL_GPIO_Init+0x4e4>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b11      	cmp	r3, #17
 8003046:	f000 822b 	beq.w	80034a0 <HAL_GPIO_Init+0x4e4>
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b02      	cmp	r3, #2
 8003050:	f000 8226 	beq.w	80034a0 <HAL_GPIO_Init+0x4e4>
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	2b12      	cmp	r3, #18
 800305a:	f000 8221 	beq.w	80034a0 <HAL_GPIO_Init+0x4e4>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	4a8d      	ldr	r2, [pc, #564]	; (8003298 <HAL_GPIO_Init+0x2dc>)
 8003064:	4293      	cmp	r3, r2
 8003066:	f000 821b 	beq.w	80034a0 <HAL_GPIO_Init+0x4e4>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	4a8b      	ldr	r2, [pc, #556]	; (800329c <HAL_GPIO_Init+0x2e0>)
 8003070:	4293      	cmp	r3, r2
 8003072:	f000 8215 	beq.w	80034a0 <HAL_GPIO_Init+0x4e4>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	4a89      	ldr	r2, [pc, #548]	; (80032a0 <HAL_GPIO_Init+0x2e4>)
 800307c:	4293      	cmp	r3, r2
 800307e:	f000 820f 	beq.w	80034a0 <HAL_GPIO_Init+0x4e4>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	4a87      	ldr	r2, [pc, #540]	; (80032a4 <HAL_GPIO_Init+0x2e8>)
 8003088:	4293      	cmp	r3, r2
 800308a:	f000 8209 	beq.w	80034a0 <HAL_GPIO_Init+0x4e4>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	4a85      	ldr	r2, [pc, #532]	; (80032a8 <HAL_GPIO_Init+0x2ec>)
 8003094:	4293      	cmp	r3, r2
 8003096:	f000 8203 	beq.w	80034a0 <HAL_GPIO_Init+0x4e4>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	4a83      	ldr	r2, [pc, #524]	; (80032ac <HAL_GPIO_Init+0x2f0>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	f000 81fd 	beq.w	80034a0 <HAL_GPIO_Init+0x4e4>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b03      	cmp	r3, #3
 80030ac:	f000 81f8 	beq.w	80034a0 <HAL_GPIO_Init+0x4e4>
 80030b0:	21bf      	movs	r1, #191	; 0xbf
 80030b2:	4878      	ldr	r0, [pc, #480]	; (8003294 <HAL_GPIO_Init+0x2d8>)
 80030b4:	f7fe fa34 	bl	8001520 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030b8:	e1f2      	b.n	80034a0 <HAL_GPIO_Init+0x4e4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80030ba:	2201      	movs	r2, #1
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	69fa      	ldr	r2, [r7, #28]
 80030ca:	4013      	ands	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	f040 81e1 	bne.w	800349a <HAL_GPIO_Init+0x4de>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a67      	ldr	r2, [pc, #412]	; (8003278 <HAL_GPIO_Init+0x2bc>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d01b      	beq.n	8003118 <HAL_GPIO_Init+0x15c>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a66      	ldr	r2, [pc, #408]	; (800327c <HAL_GPIO_Init+0x2c0>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d017      	beq.n	8003118 <HAL_GPIO_Init+0x15c>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a65      	ldr	r2, [pc, #404]	; (8003280 <HAL_GPIO_Init+0x2c4>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d013      	beq.n	8003118 <HAL_GPIO_Init+0x15c>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a64      	ldr	r2, [pc, #400]	; (8003284 <HAL_GPIO_Init+0x2c8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d00f      	beq.n	8003118 <HAL_GPIO_Init+0x15c>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a63      	ldr	r2, [pc, #396]	; (8003288 <HAL_GPIO_Init+0x2cc>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d00b      	beq.n	8003118 <HAL_GPIO_Init+0x15c>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a62      	ldr	r2, [pc, #392]	; (800328c <HAL_GPIO_Init+0x2d0>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d007      	beq.n	8003118 <HAL_GPIO_Init+0x15c>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a61      	ldr	r2, [pc, #388]	; (8003290 <HAL_GPIO_Init+0x2d4>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d003      	beq.n	8003118 <HAL_GPIO_Init+0x15c>
 8003110:	21cd      	movs	r1, #205	; 0xcd
 8003112:	4860      	ldr	r0, [pc, #384]	; (8003294 <HAL_GPIO_Init+0x2d8>)
 8003114:	f7fe fa04 	bl	8001520 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	4a63      	ldr	r2, [pc, #396]	; (80032ac <HAL_GPIO_Init+0x2f0>)
 800311e:	4293      	cmp	r3, r2
 8003120:	f000 80c6 	beq.w	80032b0 <HAL_GPIO_Init+0x2f4>
 8003124:	4a61      	ldr	r2, [pc, #388]	; (80032ac <HAL_GPIO_Init+0x2f0>)
 8003126:	4293      	cmp	r3, r2
 8003128:	f200 80ec 	bhi.w	8003304 <HAL_GPIO_Init+0x348>
 800312c:	4a5c      	ldr	r2, [pc, #368]	; (80032a0 <HAL_GPIO_Init+0x2e4>)
 800312e:	4293      	cmp	r3, r2
 8003130:	f000 80be 	beq.w	80032b0 <HAL_GPIO_Init+0x2f4>
 8003134:	4a5a      	ldr	r2, [pc, #360]	; (80032a0 <HAL_GPIO_Init+0x2e4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	f200 80e4 	bhi.w	8003304 <HAL_GPIO_Init+0x348>
 800313c:	4a5a      	ldr	r2, [pc, #360]	; (80032a8 <HAL_GPIO_Init+0x2ec>)
 800313e:	4293      	cmp	r3, r2
 8003140:	f000 80b6 	beq.w	80032b0 <HAL_GPIO_Init+0x2f4>
 8003144:	4a58      	ldr	r2, [pc, #352]	; (80032a8 <HAL_GPIO_Init+0x2ec>)
 8003146:	4293      	cmp	r3, r2
 8003148:	f200 80dc 	bhi.w	8003304 <HAL_GPIO_Init+0x348>
 800314c:	4a53      	ldr	r2, [pc, #332]	; (800329c <HAL_GPIO_Init+0x2e0>)
 800314e:	4293      	cmp	r3, r2
 8003150:	f000 80ae 	beq.w	80032b0 <HAL_GPIO_Init+0x2f4>
 8003154:	4a51      	ldr	r2, [pc, #324]	; (800329c <HAL_GPIO_Init+0x2e0>)
 8003156:	4293      	cmp	r3, r2
 8003158:	f200 80d4 	bhi.w	8003304 <HAL_GPIO_Init+0x348>
 800315c:	4a51      	ldr	r2, [pc, #324]	; (80032a4 <HAL_GPIO_Init+0x2e8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	f000 80a6 	beq.w	80032b0 <HAL_GPIO_Init+0x2f4>
 8003164:	4a4f      	ldr	r2, [pc, #316]	; (80032a4 <HAL_GPIO_Init+0x2e8>)
 8003166:	4293      	cmp	r3, r2
 8003168:	f200 80cc 	bhi.w	8003304 <HAL_GPIO_Init+0x348>
 800316c:	2b12      	cmp	r3, #18
 800316e:	d82b      	bhi.n	80031c8 <HAL_GPIO_Init+0x20c>
 8003170:	2b12      	cmp	r3, #18
 8003172:	f200 80c7 	bhi.w	8003304 <HAL_GPIO_Init+0x348>
 8003176:	a201      	add	r2, pc, #4	; (adr r2, 800317c <HAL_GPIO_Init+0x1c0>)
 8003178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317c:	080032b1 	.word	0x080032b1
 8003180:	080031d1 	.word	0x080031d1
 8003184:	08003223 	.word	0x08003223
 8003188:	080032ff 	.word	0x080032ff
 800318c:	08003305 	.word	0x08003305
 8003190:	08003305 	.word	0x08003305
 8003194:	08003305 	.word	0x08003305
 8003198:	08003305 	.word	0x08003305
 800319c:	08003305 	.word	0x08003305
 80031a0:	08003305 	.word	0x08003305
 80031a4:	08003305 	.word	0x08003305
 80031a8:	08003305 	.word	0x08003305
 80031ac:	08003305 	.word	0x08003305
 80031b0:	08003305 	.word	0x08003305
 80031b4:	08003305 	.word	0x08003305
 80031b8:	08003305 	.word	0x08003305
 80031bc:	08003305 	.word	0x08003305
 80031c0:	080031f9 	.word	0x080031f9
 80031c4:	0800324d 	.word	0x0800324d
 80031c8:	4a33      	ldr	r2, [pc, #204]	; (8003298 <HAL_GPIO_Init+0x2dc>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d070      	beq.n	80032b0 <HAL_GPIO_Init+0x2f4>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80031ce:	e099      	b.n	8003304 <HAL_GPIO_Init+0x348>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d00b      	beq.n	80031f0 <HAL_GPIO_Init+0x234>
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d007      	beq.n	80031f0 <HAL_GPIO_Init+0x234>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	2b03      	cmp	r3, #3
 80031e6:	d003      	beq.n	80031f0 <HAL_GPIO_Init+0x234>
 80031e8:	21d5      	movs	r1, #213	; 0xd5
 80031ea:	482a      	ldr	r0, [pc, #168]	; (8003294 <HAL_GPIO_Init+0x2d8>)
 80031ec:	f7fe f998 	bl	8001520 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	623b      	str	r3, [r7, #32]
          break;
 80031f6:	e086      	b.n	8003306 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d00b      	beq.n	8003218 <HAL_GPIO_Init+0x25c>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d007      	beq.n	8003218 <HAL_GPIO_Init+0x25c>
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	2b03      	cmp	r3, #3
 800320e:	d003      	beq.n	8003218 <HAL_GPIO_Init+0x25c>
 8003210:	21dc      	movs	r1, #220	; 0xdc
 8003212:	4820      	ldr	r0, [pc, #128]	; (8003294 <HAL_GPIO_Init+0x2d8>)
 8003214:	f7fe f984 	bl	8001520 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	3304      	adds	r3, #4
 800321e:	623b      	str	r3, [r7, #32]
          break;
 8003220:	e071      	b.n	8003306 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d00b      	beq.n	8003242 <HAL_GPIO_Init+0x286>
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d007      	beq.n	8003242 <HAL_GPIO_Init+0x286>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	2b03      	cmp	r3, #3
 8003238:	d003      	beq.n	8003242 <HAL_GPIO_Init+0x286>
 800323a:	21e3      	movs	r1, #227	; 0xe3
 800323c:	4815      	ldr	r0, [pc, #84]	; (8003294 <HAL_GPIO_Init+0x2d8>)
 800323e:	f7fe f96f 	bl	8001520 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	3308      	adds	r3, #8
 8003248:	623b      	str	r3, [r7, #32]
          break;
 800324a:	e05c      	b.n	8003306 <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	2b02      	cmp	r3, #2
 8003252:	d00b      	beq.n	800326c <HAL_GPIO_Init+0x2b0>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d007      	beq.n	800326c <HAL_GPIO_Init+0x2b0>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	2b03      	cmp	r3, #3
 8003262:	d003      	beq.n	800326c <HAL_GPIO_Init+0x2b0>
 8003264:	21ea      	movs	r1, #234	; 0xea
 8003266:	480b      	ldr	r0, [pc, #44]	; (8003294 <HAL_GPIO_Init+0x2d8>)
 8003268:	f7fe f95a 	bl	8001520 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	330c      	adds	r3, #12
 8003272:	623b      	str	r3, [r7, #32]
          break;
 8003274:	e047      	b.n	8003306 <HAL_GPIO_Init+0x34a>
 8003276:	bf00      	nop
 8003278:	40010800 	.word	0x40010800
 800327c:	40010c00 	.word	0x40010c00
 8003280:	40011000 	.word	0x40011000
 8003284:	40011400 	.word	0x40011400
 8003288:	40011800 	.word	0x40011800
 800328c:	40011c00 	.word	0x40011c00
 8003290:	40012000 	.word	0x40012000
 8003294:	0800b15c 	.word	0x0800b15c
 8003298:	10110000 	.word	0x10110000
 800329c:	10210000 	.word	0x10210000
 80032a0:	10310000 	.word	0x10310000
 80032a4:	10120000 	.word	0x10120000
 80032a8:	10220000 	.word	0x10220000
 80032ac:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00b      	beq.n	80032d0 <HAL_GPIO_Init+0x314>
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d007      	beq.n	80032d0 <HAL_GPIO_Init+0x314>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d003      	beq.n	80032d0 <HAL_GPIO_Init+0x314>
 80032c8:	21f7      	movs	r1, #247	; 0xf7
 80032ca:	487c      	ldr	r0, [pc, #496]	; (80034bc <HAL_GPIO_Init+0x500>)
 80032cc:	f7fe f928 	bl	8001520 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d102      	bne.n	80032de <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80032d8:	2304      	movs	r3, #4
 80032da:	623b      	str	r3, [r7, #32]
          break;
 80032dc:	e013      	b.n	8003306 <HAL_GPIO_Init+0x34a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d105      	bne.n	80032f2 <HAL_GPIO_Init+0x336>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032e6:	2308      	movs	r3, #8
 80032e8:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69fa      	ldr	r2, [r7, #28]
 80032ee:	611a      	str	r2, [r3, #16]
          break;
 80032f0:	e009      	b.n	8003306 <HAL_GPIO_Init+0x34a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032f2:	2308      	movs	r3, #8
 80032f4:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69fa      	ldr	r2, [r7, #28]
 80032fa:	615a      	str	r2, [r3, #20]
          break;
 80032fc:	e003      	b.n	8003306 <HAL_GPIO_Init+0x34a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80032fe:	2300      	movs	r3, #0
 8003300:	623b      	str	r3, [r7, #32]
          break;
 8003302:	e000      	b.n	8003306 <HAL_GPIO_Init+0x34a>
          break;
 8003304:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	2bff      	cmp	r3, #255	; 0xff
 800330a:	d801      	bhi.n	8003310 <HAL_GPIO_Init+0x354>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	e001      	b.n	8003314 <HAL_GPIO_Init+0x358>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3304      	adds	r3, #4
 8003314:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	2bff      	cmp	r3, #255	; 0xff
 800331a:	d802      	bhi.n	8003322 <HAL_GPIO_Init+0x366>
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	e002      	b.n	8003328 <HAL_GPIO_Init+0x36c>
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	3b08      	subs	r3, #8
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	210f      	movs	r1, #15
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	fa01 f303 	lsl.w	r3, r1, r3
 8003336:	43db      	mvns	r3, r3
 8003338:	401a      	ands	r2, r3
 800333a:	6a39      	ldr	r1, [r7, #32]
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	fa01 f303 	lsl.w	r3, r1, r3
 8003342:	431a      	orrs	r2, r3
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 80a2 	beq.w	800349a <HAL_GPIO_Init+0x4de>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003356:	4b5a      	ldr	r3, [pc, #360]	; (80034c0 <HAL_GPIO_Init+0x504>)
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	4a59      	ldr	r2, [pc, #356]	; (80034c0 <HAL_GPIO_Init+0x504>)
 800335c:	f043 0301 	orr.w	r3, r3, #1
 8003360:	6193      	str	r3, [r2, #24]
 8003362:	4b57      	ldr	r3, [pc, #348]	; (80034c0 <HAL_GPIO_Init+0x504>)
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	60bb      	str	r3, [r7, #8]
 800336c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800336e:	4a55      	ldr	r2, [pc, #340]	; (80034c4 <HAL_GPIO_Init+0x508>)
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	089b      	lsrs	r3, r3, #2
 8003374:	3302      	adds	r3, #2
 8003376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800337a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	220f      	movs	r2, #15
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	43db      	mvns	r3, r3
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	4013      	ands	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a4c      	ldr	r2, [pc, #304]	; (80034c8 <HAL_GPIO_Init+0x50c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d01f      	beq.n	80033da <HAL_GPIO_Init+0x41e>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a4b      	ldr	r2, [pc, #300]	; (80034cc <HAL_GPIO_Init+0x510>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d019      	beq.n	80033d6 <HAL_GPIO_Init+0x41a>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a4a      	ldr	r2, [pc, #296]	; (80034d0 <HAL_GPIO_Init+0x514>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d013      	beq.n	80033d2 <HAL_GPIO_Init+0x416>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a49      	ldr	r2, [pc, #292]	; (80034d4 <HAL_GPIO_Init+0x518>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d00d      	beq.n	80033ce <HAL_GPIO_Init+0x412>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a48      	ldr	r2, [pc, #288]	; (80034d8 <HAL_GPIO_Init+0x51c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d007      	beq.n	80033ca <HAL_GPIO_Init+0x40e>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a47      	ldr	r2, [pc, #284]	; (80034dc <HAL_GPIO_Init+0x520>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d101      	bne.n	80033c6 <HAL_GPIO_Init+0x40a>
 80033c2:	2305      	movs	r3, #5
 80033c4:	e00a      	b.n	80033dc <HAL_GPIO_Init+0x420>
 80033c6:	2306      	movs	r3, #6
 80033c8:	e008      	b.n	80033dc <HAL_GPIO_Init+0x420>
 80033ca:	2304      	movs	r3, #4
 80033cc:	e006      	b.n	80033dc <HAL_GPIO_Init+0x420>
 80033ce:	2303      	movs	r3, #3
 80033d0:	e004      	b.n	80033dc <HAL_GPIO_Init+0x420>
 80033d2:	2302      	movs	r3, #2
 80033d4:	e002      	b.n	80033dc <HAL_GPIO_Init+0x420>
 80033d6:	2301      	movs	r3, #1
 80033d8:	e000      	b.n	80033dc <HAL_GPIO_Init+0x420>
 80033da:	2300      	movs	r3, #0
 80033dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033de:	f002 0203 	and.w	r2, r2, #3
 80033e2:	0092      	lsls	r2, r2, #2
 80033e4:	4093      	lsls	r3, r2
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80033ec:	4935      	ldr	r1, [pc, #212]	; (80034c4 <HAL_GPIO_Init+0x508>)
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	089b      	lsrs	r3, r3, #2
 80033f2:	3302      	adds	r3, #2
 80033f4:	68fa      	ldr	r2, [r7, #12]
 80033f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d006      	beq.n	8003414 <HAL_GPIO_Init+0x458>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003406:	4b36      	ldr	r3, [pc, #216]	; (80034e0 <HAL_GPIO_Init+0x524>)
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	4935      	ldr	r1, [pc, #212]	; (80034e0 <HAL_GPIO_Init+0x524>)
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	4313      	orrs	r3, r2
 8003410:	600b      	str	r3, [r1, #0]
 8003412:	e006      	b.n	8003422 <HAL_GPIO_Init+0x466>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003414:	4b32      	ldr	r3, [pc, #200]	; (80034e0 <HAL_GPIO_Init+0x524>)
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	43db      	mvns	r3, r3
 800341c:	4930      	ldr	r1, [pc, #192]	; (80034e0 <HAL_GPIO_Init+0x524>)
 800341e:	4013      	ands	r3, r2
 8003420:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d006      	beq.n	800343c <HAL_GPIO_Init+0x480>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800342e:	4b2c      	ldr	r3, [pc, #176]	; (80034e0 <HAL_GPIO_Init+0x524>)
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	492b      	ldr	r1, [pc, #172]	; (80034e0 <HAL_GPIO_Init+0x524>)
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	4313      	orrs	r3, r2
 8003438:	604b      	str	r3, [r1, #4]
 800343a:	e006      	b.n	800344a <HAL_GPIO_Init+0x48e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800343c:	4b28      	ldr	r3, [pc, #160]	; (80034e0 <HAL_GPIO_Init+0x524>)
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	43db      	mvns	r3, r3
 8003444:	4926      	ldr	r1, [pc, #152]	; (80034e0 <HAL_GPIO_Init+0x524>)
 8003446:	4013      	ands	r3, r2
 8003448:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d006      	beq.n	8003464 <HAL_GPIO_Init+0x4a8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003456:	4b22      	ldr	r3, [pc, #136]	; (80034e0 <HAL_GPIO_Init+0x524>)
 8003458:	689a      	ldr	r2, [r3, #8]
 800345a:	4921      	ldr	r1, [pc, #132]	; (80034e0 <HAL_GPIO_Init+0x524>)
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	4313      	orrs	r3, r2
 8003460:	608b      	str	r3, [r1, #8]
 8003462:	e006      	b.n	8003472 <HAL_GPIO_Init+0x4b6>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003464:	4b1e      	ldr	r3, [pc, #120]	; (80034e0 <HAL_GPIO_Init+0x524>)
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	43db      	mvns	r3, r3
 800346c:	491c      	ldr	r1, [pc, #112]	; (80034e0 <HAL_GPIO_Init+0x524>)
 800346e:	4013      	ands	r3, r2
 8003470:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d006      	beq.n	800348c <HAL_GPIO_Init+0x4d0>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800347e:	4b18      	ldr	r3, [pc, #96]	; (80034e0 <HAL_GPIO_Init+0x524>)
 8003480:	68da      	ldr	r2, [r3, #12]
 8003482:	4917      	ldr	r1, [pc, #92]	; (80034e0 <HAL_GPIO_Init+0x524>)
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	4313      	orrs	r3, r2
 8003488:	60cb      	str	r3, [r1, #12]
 800348a:	e006      	b.n	800349a <HAL_GPIO_Init+0x4de>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800348c:	4b14      	ldr	r3, [pc, #80]	; (80034e0 <HAL_GPIO_Init+0x524>)
 800348e:	68da      	ldr	r2, [r3, #12]
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	43db      	mvns	r3, r3
 8003494:	4912      	ldr	r1, [pc, #72]	; (80034e0 <HAL_GPIO_Init+0x524>)
 8003496:	4013      	ands	r3, r2
 8003498:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	3301      	adds	r3, #1
 800349e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	fa22 f303 	lsr.w	r3, r2, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f47f ae05 	bne.w	80030ba <HAL_GPIO_Init+0xfe>
  }
}
 80034b0:	bf00      	nop
 80034b2:	bf00      	nop
 80034b4:	3728      	adds	r7, #40	; 0x28
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	0800b15c 	.word	0x0800b15c
 80034c0:	40021000 	.word	0x40021000
 80034c4:	40010000 	.word	0x40010000
 80034c8:	40010800 	.word	0x40010800
 80034cc:	40010c00 	.word	0x40010c00
 80034d0:	40011000 	.word	0x40011000
 80034d4:	40011400 	.word	0x40011400
 80034d8:	40011800 	.word	0x40011800
 80034dc:	40011c00 	.word	0x40011c00
 80034e0:	40010400 	.word	0x40010400

080034e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	460b      	mov	r3, r1
 80034ee:	807b      	strh	r3, [r7, #2]
 80034f0:	4613      	mov	r3, r2
 80034f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80034f4:	887b      	ldrh	r3, [r7, #2]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d004      	beq.n	8003504 <HAL_GPIO_WritePin+0x20>
 80034fa:	887b      	ldrh	r3, [r7, #2]
 80034fc:	0c1b      	lsrs	r3, r3, #16
 80034fe:	041b      	lsls	r3, r3, #16
 8003500:	2b00      	cmp	r3, #0
 8003502:	d004      	beq.n	800350e <HAL_GPIO_WritePin+0x2a>
 8003504:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8003508:	480e      	ldr	r0, [pc, #56]	; (8003544 <HAL_GPIO_WritePin+0x60>)
 800350a:	f7fe f809 	bl	8001520 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800350e:	787b      	ldrb	r3, [r7, #1]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d007      	beq.n	8003524 <HAL_GPIO_WritePin+0x40>
 8003514:	787b      	ldrb	r3, [r7, #1]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d004      	beq.n	8003524 <HAL_GPIO_WritePin+0x40>
 800351a:	f240 11d5 	movw	r1, #469	; 0x1d5
 800351e:	4809      	ldr	r0, [pc, #36]	; (8003544 <HAL_GPIO_WritePin+0x60>)
 8003520:	f7fd fffe 	bl	8001520 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8003524:	787b      	ldrb	r3, [r7, #1]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800352a:	887a      	ldrh	r2, [r7, #2]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003530:	e003      	b.n	800353a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003532:	887b      	ldrh	r3, [r7, #2]
 8003534:	041a      	lsls	r2, r3, #16
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	611a      	str	r2, [r3, #16]
}
 800353a:	bf00      	nop
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	0800b15c 	.word	0x0800b15c

08003548 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	460b      	mov	r3, r1
 8003552:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003554:	887b      	ldrh	r3, [r7, #2]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d004      	beq.n	8003564 <HAL_GPIO_TogglePin+0x1c>
 800355a:	887b      	ldrh	r3, [r7, #2]
 800355c:	0c1b      	lsrs	r3, r3, #16
 800355e:	041b      	lsls	r3, r3, #16
 8003560:	2b00      	cmp	r3, #0
 8003562:	d004      	beq.n	800356e <HAL_GPIO_TogglePin+0x26>
 8003564:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8003568:	480a      	ldr	r0, [pc, #40]	; (8003594 <HAL_GPIO_TogglePin+0x4c>)
 800356a:	f7fd ffd9 	bl	8001520 <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003574:	887a      	ldrh	r2, [r7, #2]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	4013      	ands	r3, r2
 800357a:	041a      	lsls	r2, r3, #16
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	43d9      	mvns	r1, r3
 8003580:	887b      	ldrh	r3, [r7, #2]
 8003582:	400b      	ands	r3, r1
 8003584:	431a      	orrs	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	611a      	str	r2, [r3, #16]
}
 800358a:	bf00      	nop
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	0800b15c 	.word	0x0800b15c

08003598 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800359c:	4b03      	ldr	r3, [pc, #12]	; (80035ac <HAL_PWR_EnableBkUpAccess+0x14>)
 800359e:	2201      	movs	r2, #1
 80035a0:	601a      	str	r2, [r3, #0]
}
 80035a2:	bf00      	nop
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bc80      	pop	{r7}
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	420e0020 	.word	0x420e0020

080035b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e35c      	b.n	8003c7c <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d01c      	beq.n	8003604 <HAL_RCC_OscConfig+0x54>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d116      	bne.n	8003604 <HAL_RCC_OscConfig+0x54>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d110      	bne.n	8003604 <HAL_RCC_OscConfig+0x54>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10a      	bne.n	8003604 <HAL_RCC_OscConfig+0x54>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0304 	and.w	r3, r3, #4
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d104      	bne.n	8003604 <HAL_RCC_OscConfig+0x54>
 80035fa:	f240 1167 	movw	r1, #359	; 0x167
 80035fe:	48a5      	ldr	r0, [pc, #660]	; (8003894 <HAL_RCC_OscConfig+0x2e4>)
 8003600:	f7fd ff8e 	bl	8001520 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 809a 	beq.w	8003746 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00e      	beq.n	8003638 <HAL_RCC_OscConfig+0x88>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003622:	d009      	beq.n	8003638 <HAL_RCC_OscConfig+0x88>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800362c:	d004      	beq.n	8003638 <HAL_RCC_OscConfig+0x88>
 800362e:	f240 116d 	movw	r1, #365	; 0x16d
 8003632:	4898      	ldr	r0, [pc, #608]	; (8003894 <HAL_RCC_OscConfig+0x2e4>)
 8003634:	f7fd ff74 	bl	8001520 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003638:	4b97      	ldr	r3, [pc, #604]	; (8003898 <HAL_RCC_OscConfig+0x2e8>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f003 030c 	and.w	r3, r3, #12
 8003640:	2b04      	cmp	r3, #4
 8003642:	d00c      	beq.n	800365e <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003644:	4b94      	ldr	r3, [pc, #592]	; (8003898 <HAL_RCC_OscConfig+0x2e8>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f003 030c 	and.w	r3, r3, #12
 800364c:	2b08      	cmp	r3, #8
 800364e:	d112      	bne.n	8003676 <HAL_RCC_OscConfig+0xc6>
 8003650:	4b91      	ldr	r3, [pc, #580]	; (8003898 <HAL_RCC_OscConfig+0x2e8>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800365c:	d10b      	bne.n	8003676 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800365e:	4b8e      	ldr	r3, [pc, #568]	; (8003898 <HAL_RCC_OscConfig+0x2e8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d06c      	beq.n	8003744 <HAL_RCC_OscConfig+0x194>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d168      	bne.n	8003744 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e302      	b.n	8003c7c <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800367e:	d106      	bne.n	800368e <HAL_RCC_OscConfig+0xde>
 8003680:	4b85      	ldr	r3, [pc, #532]	; (8003898 <HAL_RCC_OscConfig+0x2e8>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a84      	ldr	r2, [pc, #528]	; (8003898 <HAL_RCC_OscConfig+0x2e8>)
 8003686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800368a:	6013      	str	r3, [r2, #0]
 800368c:	e02e      	b.n	80036ec <HAL_RCC_OscConfig+0x13c>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10c      	bne.n	80036b0 <HAL_RCC_OscConfig+0x100>
 8003696:	4b80      	ldr	r3, [pc, #512]	; (8003898 <HAL_RCC_OscConfig+0x2e8>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a7f      	ldr	r2, [pc, #508]	; (8003898 <HAL_RCC_OscConfig+0x2e8>)
 800369c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036a0:	6013      	str	r3, [r2, #0]
 80036a2:	4b7d      	ldr	r3, [pc, #500]	; (8003898 <HAL_RCC_OscConfig+0x2e8>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a7c      	ldr	r2, [pc, #496]	; (8003898 <HAL_RCC_OscConfig+0x2e8>)
 80036a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	e01d      	b.n	80036ec <HAL_RCC_OscConfig+0x13c>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036b8:	d10c      	bne.n	80036d4 <HAL_RCC_OscConfig+0x124>
 80036ba:	4b77      	ldr	r3, [pc, #476]	; (8003898 <HAL_RCC_OscConfig+0x2e8>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a76      	ldr	r2, [pc, #472]	; (8003898 <HAL_RCC_OscConfig+0x2e8>)
 80036c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036c4:	6013      	str	r3, [r2, #0]
 80036c6:	4b74      	ldr	r3, [pc, #464]	; (8003898 <HAL_RCC_OscConfig+0x2e8>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a73      	ldr	r2, [pc, #460]	; (8003898 <HAL_RCC_OscConfig+0x2e8>)
 80036cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036d0:	6013      	str	r3, [r2, #0]
 80036d2:	e00b      	b.n	80036ec <HAL_RCC_OscConfig+0x13c>
 80036d4:	4b70      	ldr	r3, [pc, #448]	; (8003898 <HAL_RCC_OscConfig+0x2e8>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a6f      	ldr	r2, [pc, #444]	; (8003898 <HAL_RCC_OscConfig+0x2e8>)
 80036da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036de:	6013      	str	r3, [r2, #0]
 80036e0:	4b6d      	ldr	r3, [pc, #436]	; (8003898 <HAL_RCC_OscConfig+0x2e8>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a6c      	ldr	r2, [pc, #432]	; (8003898 <HAL_RCC_OscConfig+0x2e8>)
 80036e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d013      	beq.n	800371c <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f4:	f7fe fbc0 	bl	8001e78 <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036fc:	f7fe fbbc 	bl	8001e78 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b64      	cmp	r3, #100	; 0x64
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e2b6      	b.n	8003c7c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370e:	4b62      	ldr	r3, [pc, #392]	; (8003898 <HAL_RCC_OscConfig+0x2e8>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0f0      	beq.n	80036fc <HAL_RCC_OscConfig+0x14c>
 800371a:	e014      	b.n	8003746 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371c:	f7fe fbac 	bl	8001e78 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003724:	f7fe fba8 	bl	8001e78 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b64      	cmp	r3, #100	; 0x64
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e2a2      	b.n	8003c7c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003736:	4b58      	ldr	r3, [pc, #352]	; (8003898 <HAL_RCC_OscConfig+0x2e8>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f0      	bne.n	8003724 <HAL_RCC_OscConfig+0x174>
 8003742:	e000      	b.n	8003746 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d079      	beq.n	8003846 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d008      	beq.n	800376c <HAL_RCC_OscConfig+0x1bc>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d004      	beq.n	800376c <HAL_RCC_OscConfig+0x1bc>
 8003762:	f240 11a1 	movw	r1, #417	; 0x1a1
 8003766:	484b      	ldr	r0, [pc, #300]	; (8003894 <HAL_RCC_OscConfig+0x2e4>)
 8003768:	f7fd feda 	bl	8001520 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	2b1f      	cmp	r3, #31
 8003772:	d904      	bls.n	800377e <HAL_RCC_OscConfig+0x1ce>
 8003774:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8003778:	4846      	ldr	r0, [pc, #280]	; (8003894 <HAL_RCC_OscConfig+0x2e4>)
 800377a:	f7fd fed1 	bl	8001520 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800377e:	4b46      	ldr	r3, [pc, #280]	; (8003898 <HAL_RCC_OscConfig+0x2e8>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f003 030c 	and.w	r3, r3, #12
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00b      	beq.n	80037a2 <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800378a:	4b43      	ldr	r3, [pc, #268]	; (8003898 <HAL_RCC_OscConfig+0x2e8>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f003 030c 	and.w	r3, r3, #12
 8003792:	2b08      	cmp	r3, #8
 8003794:	d11c      	bne.n	80037d0 <HAL_RCC_OscConfig+0x220>
 8003796:	4b40      	ldr	r3, [pc, #256]	; (8003898 <HAL_RCC_OscConfig+0x2e8>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d116      	bne.n	80037d0 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037a2:	4b3d      	ldr	r3, [pc, #244]	; (8003898 <HAL_RCC_OscConfig+0x2e8>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d005      	beq.n	80037ba <HAL_RCC_OscConfig+0x20a>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d001      	beq.n	80037ba <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e260      	b.n	8003c7c <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ba:	4b37      	ldr	r3, [pc, #220]	; (8003898 <HAL_RCC_OscConfig+0x2e8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	4933      	ldr	r1, [pc, #204]	; (8003898 <HAL_RCC_OscConfig+0x2e8>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ce:	e03a      	b.n	8003846 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d020      	beq.n	800381a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037d8:	4b30      	ldr	r3, [pc, #192]	; (800389c <HAL_RCC_OscConfig+0x2ec>)
 80037da:	2201      	movs	r2, #1
 80037dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037de:	f7fe fb4b 	bl	8001e78 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037e6:	f7fe fb47 	bl	8001e78 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e241      	b.n	8003c7c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f8:	4b27      	ldr	r3, [pc, #156]	; (8003898 <HAL_RCC_OscConfig+0x2e8>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0f0      	beq.n	80037e6 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003804:	4b24      	ldr	r3, [pc, #144]	; (8003898 <HAL_RCC_OscConfig+0x2e8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	4921      	ldr	r1, [pc, #132]	; (8003898 <HAL_RCC_OscConfig+0x2e8>)
 8003814:	4313      	orrs	r3, r2
 8003816:	600b      	str	r3, [r1, #0]
 8003818:	e015      	b.n	8003846 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800381a:	4b20      	ldr	r3, [pc, #128]	; (800389c <HAL_RCC_OscConfig+0x2ec>)
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003820:	f7fe fb2a 	bl	8001e78 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003828:	f7fe fb26 	bl	8001e78 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e220      	b.n	8003c7c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800383a:	4b17      	ldr	r3, [pc, #92]	; (8003898 <HAL_RCC_OscConfig+0x2e8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1f0      	bne.n	8003828 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0308 	and.w	r3, r3, #8
 800384e:	2b00      	cmp	r3, #0
 8003850:	d048      	beq.n	80038e4 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d008      	beq.n	800386c <HAL_RCC_OscConfig+0x2bc>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d004      	beq.n	800386c <HAL_RCC_OscConfig+0x2bc>
 8003862:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8003866:	480b      	ldr	r0, [pc, #44]	; (8003894 <HAL_RCC_OscConfig+0x2e4>)
 8003868:	f7fd fe5a 	bl	8001520 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d021      	beq.n	80038b8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003874:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <HAL_RCC_OscConfig+0x2f0>)
 8003876:	2201      	movs	r2, #1
 8003878:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800387a:	f7fe fafd 	bl	8001e78 <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003880:	e010      	b.n	80038a4 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003882:	f7fe faf9 	bl	8001e78 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d909      	bls.n	80038a4 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e1f3      	b.n	8003c7c <HAL_RCC_OscConfig+0x6cc>
 8003894:	0800b198 	.word	0x0800b198
 8003898:	40021000 	.word	0x40021000
 800389c:	42420000 	.word	0x42420000
 80038a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038a4:	4b67      	ldr	r3, [pc, #412]	; (8003a44 <HAL_RCC_OscConfig+0x494>)
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d0e8      	beq.n	8003882 <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80038b0:	2001      	movs	r0, #1
 80038b2:	f000 fc0f 	bl	80040d4 <RCC_Delay>
 80038b6:	e015      	b.n	80038e4 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038b8:	4b63      	ldr	r3, [pc, #396]	; (8003a48 <HAL_RCC_OscConfig+0x498>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038be:	f7fe fadb 	bl	8001e78 <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038c4:	e008      	b.n	80038d8 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038c6:	f7fe fad7 	bl	8001e78 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e1d1      	b.n	8003c7c <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d8:	4b5a      	ldr	r3, [pc, #360]	; (8003a44 <HAL_RCC_OscConfig+0x494>)
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1f0      	bne.n	80038c6 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 80c0 	beq.w	8003a72 <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038f2:	2300      	movs	r3, #0
 80038f4:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00c      	beq.n	8003918 <HAL_RCC_OscConfig+0x368>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d008      	beq.n	8003918 <HAL_RCC_OscConfig+0x368>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	2b05      	cmp	r3, #5
 800390c:	d004      	beq.n	8003918 <HAL_RCC_OscConfig+0x368>
 800390e:	f240 2111 	movw	r1, #529	; 0x211
 8003912:	484e      	ldr	r0, [pc, #312]	; (8003a4c <HAL_RCC_OscConfig+0x49c>)
 8003914:	f7fd fe04 	bl	8001520 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003918:	4b4a      	ldr	r3, [pc, #296]	; (8003a44 <HAL_RCC_OscConfig+0x494>)
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10d      	bne.n	8003940 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003924:	4b47      	ldr	r3, [pc, #284]	; (8003a44 <HAL_RCC_OscConfig+0x494>)
 8003926:	69db      	ldr	r3, [r3, #28]
 8003928:	4a46      	ldr	r2, [pc, #280]	; (8003a44 <HAL_RCC_OscConfig+0x494>)
 800392a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800392e:	61d3      	str	r3, [r2, #28]
 8003930:	4b44      	ldr	r3, [pc, #272]	; (8003a44 <HAL_RCC_OscConfig+0x494>)
 8003932:	69db      	ldr	r3, [r3, #28]
 8003934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003938:	60bb      	str	r3, [r7, #8]
 800393a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800393c:	2301      	movs	r3, #1
 800393e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003940:	4b43      	ldr	r3, [pc, #268]	; (8003a50 <HAL_RCC_OscConfig+0x4a0>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003948:	2b00      	cmp	r3, #0
 800394a:	d118      	bne.n	800397e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800394c:	4b40      	ldr	r3, [pc, #256]	; (8003a50 <HAL_RCC_OscConfig+0x4a0>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a3f      	ldr	r2, [pc, #252]	; (8003a50 <HAL_RCC_OscConfig+0x4a0>)
 8003952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003956:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003958:	f7fe fa8e 	bl	8001e78 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003960:	f7fe fa8a 	bl	8001e78 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b64      	cmp	r3, #100	; 0x64
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e184      	b.n	8003c7c <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003972:	4b37      	ldr	r3, [pc, #220]	; (8003a50 <HAL_RCC_OscConfig+0x4a0>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0f0      	beq.n	8003960 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d106      	bne.n	8003994 <HAL_RCC_OscConfig+0x3e4>
 8003986:	4b2f      	ldr	r3, [pc, #188]	; (8003a44 <HAL_RCC_OscConfig+0x494>)
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	4a2e      	ldr	r2, [pc, #184]	; (8003a44 <HAL_RCC_OscConfig+0x494>)
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	6213      	str	r3, [r2, #32]
 8003992:	e02d      	b.n	80039f0 <HAL_RCC_OscConfig+0x440>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10c      	bne.n	80039b6 <HAL_RCC_OscConfig+0x406>
 800399c:	4b29      	ldr	r3, [pc, #164]	; (8003a44 <HAL_RCC_OscConfig+0x494>)
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	4a28      	ldr	r2, [pc, #160]	; (8003a44 <HAL_RCC_OscConfig+0x494>)
 80039a2:	f023 0301 	bic.w	r3, r3, #1
 80039a6:	6213      	str	r3, [r2, #32]
 80039a8:	4b26      	ldr	r3, [pc, #152]	; (8003a44 <HAL_RCC_OscConfig+0x494>)
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	4a25      	ldr	r2, [pc, #148]	; (8003a44 <HAL_RCC_OscConfig+0x494>)
 80039ae:	f023 0304 	bic.w	r3, r3, #4
 80039b2:	6213      	str	r3, [r2, #32]
 80039b4:	e01c      	b.n	80039f0 <HAL_RCC_OscConfig+0x440>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	2b05      	cmp	r3, #5
 80039bc:	d10c      	bne.n	80039d8 <HAL_RCC_OscConfig+0x428>
 80039be:	4b21      	ldr	r3, [pc, #132]	; (8003a44 <HAL_RCC_OscConfig+0x494>)
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	4a20      	ldr	r2, [pc, #128]	; (8003a44 <HAL_RCC_OscConfig+0x494>)
 80039c4:	f043 0304 	orr.w	r3, r3, #4
 80039c8:	6213      	str	r3, [r2, #32]
 80039ca:	4b1e      	ldr	r3, [pc, #120]	; (8003a44 <HAL_RCC_OscConfig+0x494>)
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	4a1d      	ldr	r2, [pc, #116]	; (8003a44 <HAL_RCC_OscConfig+0x494>)
 80039d0:	f043 0301 	orr.w	r3, r3, #1
 80039d4:	6213      	str	r3, [r2, #32]
 80039d6:	e00b      	b.n	80039f0 <HAL_RCC_OscConfig+0x440>
 80039d8:	4b1a      	ldr	r3, [pc, #104]	; (8003a44 <HAL_RCC_OscConfig+0x494>)
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	4a19      	ldr	r2, [pc, #100]	; (8003a44 <HAL_RCC_OscConfig+0x494>)
 80039de:	f023 0301 	bic.w	r3, r3, #1
 80039e2:	6213      	str	r3, [r2, #32]
 80039e4:	4b17      	ldr	r3, [pc, #92]	; (8003a44 <HAL_RCC_OscConfig+0x494>)
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	4a16      	ldr	r2, [pc, #88]	; (8003a44 <HAL_RCC_OscConfig+0x494>)
 80039ea:	f023 0304 	bic.w	r3, r3, #4
 80039ee:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d015      	beq.n	8003a24 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039f8:	f7fe fa3e 	bl	8001e78 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039fe:	e00a      	b.n	8003a16 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a00:	f7fe fa3a 	bl	8001e78 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e132      	b.n	8003c7c <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a16:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <HAL_RCC_OscConfig+0x494>)
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0ee      	beq.n	8003a00 <HAL_RCC_OscConfig+0x450>
 8003a22:	e01d      	b.n	8003a60 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a24:	f7fe fa28 	bl	8001e78 <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a2a:	e013      	b.n	8003a54 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a2c:	f7fe fa24 	bl	8001e78 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d90a      	bls.n	8003a54 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e11c      	b.n	8003c7c <HAL_RCC_OscConfig+0x6cc>
 8003a42:	bf00      	nop
 8003a44:	40021000 	.word	0x40021000
 8003a48:	42420480 	.word	0x42420480
 8003a4c:	0800b198 	.word	0x0800b198
 8003a50:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a54:	4b8b      	ldr	r3, [pc, #556]	; (8003c84 <HAL_RCC_OscConfig+0x6d4>)
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1e5      	bne.n	8003a2c <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a60:	7dfb      	ldrb	r3, [r7, #23]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d105      	bne.n	8003a72 <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a66:	4b87      	ldr	r3, [pc, #540]	; (8003c84 <HAL_RCC_OscConfig+0x6d4>)
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	4a86      	ldr	r2, [pc, #536]	; (8003c84 <HAL_RCC_OscConfig+0x6d4>)
 8003a6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a70:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00c      	beq.n	8003a94 <HAL_RCC_OscConfig+0x4e4>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d008      	beq.n	8003a94 <HAL_RCC_OscConfig+0x4e4>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d004      	beq.n	8003a94 <HAL_RCC_OscConfig+0x4e4>
 8003a8a:	f240 21af 	movw	r1, #687	; 0x2af
 8003a8e:	487e      	ldr	r0, [pc, #504]	; (8003c88 <HAL_RCC_OscConfig+0x6d8>)
 8003a90:	f7fd fd46 	bl	8001520 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 80ee 	beq.w	8003c7a <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a9e:	4b79      	ldr	r3, [pc, #484]	; (8003c84 <HAL_RCC_OscConfig+0x6d4>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
 8003aa6:	2b08      	cmp	r3, #8
 8003aa8:	f000 80ce 	beq.w	8003c48 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	f040 80b2 	bne.w	8003c1a <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d009      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x522>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1b      	ldr	r3, [r3, #32]
 8003ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac6:	d004      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x522>
 8003ac8:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8003acc:	486e      	ldr	r0, [pc, #440]	; (8003c88 <HAL_RCC_OscConfig+0x6d8>)
 8003ace:	f7fd fd27 	bl	8001520 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d04a      	beq.n	8003b70 <HAL_RCC_OscConfig+0x5c0>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ae2:	d045      	beq.n	8003b70 <HAL_RCC_OscConfig+0x5c0>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003aec:	d040      	beq.n	8003b70 <HAL_RCC_OscConfig+0x5c0>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003af6:	d03b      	beq.n	8003b70 <HAL_RCC_OscConfig+0x5c0>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b00:	d036      	beq.n	8003b70 <HAL_RCC_OscConfig+0x5c0>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b06:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003b0a:	d031      	beq.n	8003b70 <HAL_RCC_OscConfig+0x5c0>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003b14:	d02c      	beq.n	8003b70 <HAL_RCC_OscConfig+0x5c0>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003b1e:	d027      	beq.n	8003b70 <HAL_RCC_OscConfig+0x5c0>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b28:	d022      	beq.n	8003b70 <HAL_RCC_OscConfig+0x5c0>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003b32:	d01d      	beq.n	8003b70 <HAL_RCC_OscConfig+0x5c0>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003b3c:	d018      	beq.n	8003b70 <HAL_RCC_OscConfig+0x5c0>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003b46:	d013      	beq.n	8003b70 <HAL_RCC_OscConfig+0x5c0>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b50:	d00e      	beq.n	8003b70 <HAL_RCC_OscConfig+0x5c0>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b56:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8003b5a:	d009      	beq.n	8003b70 <HAL_RCC_OscConfig+0x5c0>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8003b64:	d004      	beq.n	8003b70 <HAL_RCC_OscConfig+0x5c0>
 8003b66:	f240 21b9 	movw	r1, #697	; 0x2b9
 8003b6a:	4847      	ldr	r0, [pc, #284]	; (8003c88 <HAL_RCC_OscConfig+0x6d8>)
 8003b6c:	f7fd fcd8 	bl	8001520 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b70:	4b46      	ldr	r3, [pc, #280]	; (8003c8c <HAL_RCC_OscConfig+0x6dc>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b76:	f7fe f97f 	bl	8001e78 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b7e:	f7fe f97b 	bl	8001e78 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e075      	b.n	8003c7c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b90:	4b3c      	ldr	r3, [pc, #240]	; (8003c84 <HAL_RCC_OscConfig+0x6d4>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1f0      	bne.n	8003b7e <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba4:	d116      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d009      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x612>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bb6:	d004      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x612>
 8003bb8:	f240 21cf 	movw	r1, #719	; 0x2cf
 8003bbc:	4832      	ldr	r0, [pc, #200]	; (8003c88 <HAL_RCC_OscConfig+0x6d8>)
 8003bbe:	f7fd fcaf 	bl	8001520 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003bc2:	4b30      	ldr	r3, [pc, #192]	; (8003c84 <HAL_RCC_OscConfig+0x6d4>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	492d      	ldr	r1, [pc, #180]	; (8003c84 <HAL_RCC_OscConfig+0x6d4>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bd4:	4b2b      	ldr	r3, [pc, #172]	; (8003c84 <HAL_RCC_OscConfig+0x6d4>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a19      	ldr	r1, [r3, #32]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	430b      	orrs	r3, r1
 8003be6:	4927      	ldr	r1, [pc, #156]	; (8003c84 <HAL_RCC_OscConfig+0x6d4>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bec:	4b27      	ldr	r3, [pc, #156]	; (8003c8c <HAL_RCC_OscConfig+0x6dc>)
 8003bee:	2201      	movs	r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf2:	f7fe f941 	bl	8001e78 <HAL_GetTick>
 8003bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bf8:	e008      	b.n	8003c0c <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bfa:	f7fe f93d 	bl	8001e78 <HAL_GetTick>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e037      	b.n	8003c7c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c0c:	4b1d      	ldr	r3, [pc, #116]	; (8003c84 <HAL_RCC_OscConfig+0x6d4>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0f0      	beq.n	8003bfa <HAL_RCC_OscConfig+0x64a>
 8003c18:	e02f      	b.n	8003c7a <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c1a:	4b1c      	ldr	r3, [pc, #112]	; (8003c8c <HAL_RCC_OscConfig+0x6dc>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c20:	f7fe f92a 	bl	8001e78 <HAL_GetTick>
 8003c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c28:	f7fe f926 	bl	8001e78 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e020      	b.n	8003c7c <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c3a:	4b12      	ldr	r3, [pc, #72]	; (8003c84 <HAL_RCC_OscConfig+0x6d4>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f0      	bne.n	8003c28 <HAL_RCC_OscConfig+0x678>
 8003c46:	e018      	b.n	8003c7a <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d101      	bne.n	8003c54 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e013      	b.n	8003c7c <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c54:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <HAL_RCC_OscConfig+0x6d4>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d106      	bne.n	8003c76 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d001      	beq.n	8003c7a <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40021000 	.word	0x40021000
 8003c88:	0800b198 	.word	0x0800b198
 8003c8c:	42420060 	.word	0x42420060

08003c90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e176      	b.n	8003f92 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d116      	bne.n	8003cde <HAL_RCC_ClockConfig+0x4e>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d110      	bne.n	8003cde <HAL_RCC_ClockConfig+0x4e>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10a      	bne.n	8003cde <HAL_RCC_ClockConfig+0x4e>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0308 	and.w	r3, r3, #8
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d104      	bne.n	8003cde <HAL_RCC_ClockConfig+0x4e>
 8003cd4:	f44f 714e 	mov.w	r1, #824	; 0x338
 8003cd8:	4874      	ldr	r0, [pc, #464]	; (8003eac <HAL_RCC_ClockConfig+0x21c>)
 8003cda:	f7fd fc21 	bl	8001520 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00a      	beq.n	8003cfa <HAL_RCC_ClockConfig+0x6a>
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d007      	beq.n	8003cfa <HAL_RCC_ClockConfig+0x6a>
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d004      	beq.n	8003cfa <HAL_RCC_ClockConfig+0x6a>
 8003cf0:	f240 3139 	movw	r1, #825	; 0x339
 8003cf4:	486d      	ldr	r0, [pc, #436]	; (8003eac <HAL_RCC_ClockConfig+0x21c>)
 8003cf6:	f7fd fc13 	bl	8001520 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cfa:	4b6d      	ldr	r3, [pc, #436]	; (8003eb0 <HAL_RCC_ClockConfig+0x220>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d910      	bls.n	8003d2a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d08:	4b69      	ldr	r3, [pc, #420]	; (8003eb0 <HAL_RCC_ClockConfig+0x220>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f023 0207 	bic.w	r2, r3, #7
 8003d10:	4967      	ldr	r1, [pc, #412]	; (8003eb0 <HAL_RCC_ClockConfig+0x220>)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d18:	4b65      	ldr	r3, [pc, #404]	; (8003eb0 <HAL_RCC_ClockConfig+0x220>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d001      	beq.n	8003d2a <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e133      	b.n	8003f92 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d049      	beq.n	8003dca <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0304 	and.w	r3, r3, #4
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d005      	beq.n	8003d4e <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d42:	4b5c      	ldr	r3, [pc, #368]	; (8003eb4 <HAL_RCC_ClockConfig+0x224>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	4a5b      	ldr	r2, [pc, #364]	; (8003eb4 <HAL_RCC_ClockConfig+0x224>)
 8003d48:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d4c:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0308 	and.w	r3, r3, #8
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d005      	beq.n	8003d66 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d5a:	4b56      	ldr	r3, [pc, #344]	; (8003eb4 <HAL_RCC_ClockConfig+0x224>)
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	4a55      	ldr	r2, [pc, #340]	; (8003eb4 <HAL_RCC_ClockConfig+0x224>)
 8003d60:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003d64:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d024      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x128>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	2b80      	cmp	r3, #128	; 0x80
 8003d74:	d020      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x128>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	2b90      	cmp	r3, #144	; 0x90
 8003d7c:	d01c      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x128>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	2ba0      	cmp	r3, #160	; 0xa0
 8003d84:	d018      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x128>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	2bb0      	cmp	r3, #176	; 0xb0
 8003d8c:	d014      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x128>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	2bc0      	cmp	r3, #192	; 0xc0
 8003d94:	d010      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x128>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	2bd0      	cmp	r3, #208	; 0xd0
 8003d9c:	d00c      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x128>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	2be0      	cmp	r3, #224	; 0xe0
 8003da4:	d008      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x128>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	2bf0      	cmp	r3, #240	; 0xf0
 8003dac:	d004      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x128>
 8003dae:	f240 315f 	movw	r1, #863	; 0x35f
 8003db2:	483e      	ldr	r0, [pc, #248]	; (8003eac <HAL_RCC_ClockConfig+0x21c>)
 8003db4:	f7fd fbb4 	bl	8001520 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003db8:	4b3e      	ldr	r3, [pc, #248]	; (8003eb4 <HAL_RCC_ClockConfig+0x224>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	493b      	ldr	r1, [pc, #236]	; (8003eb4 <HAL_RCC_ClockConfig+0x224>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d051      	beq.n	8003e7a <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00c      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x168>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d008      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x168>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d004      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x168>
 8003dee:	f240 3166 	movw	r1, #870	; 0x366
 8003df2:	482e      	ldr	r0, [pc, #184]	; (8003eac <HAL_RCC_ClockConfig+0x21c>)
 8003df4:	f7fd fb94 	bl	8001520 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d107      	bne.n	8003e10 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e00:	4b2c      	ldr	r3, [pc, #176]	; (8003eb4 <HAL_RCC_ClockConfig+0x224>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d115      	bne.n	8003e38 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e0c0      	b.n	8003f92 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d107      	bne.n	8003e28 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e18:	4b26      	ldr	r3, [pc, #152]	; (8003eb4 <HAL_RCC_ClockConfig+0x224>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d109      	bne.n	8003e38 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e0b4      	b.n	8003f92 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e28:	4b22      	ldr	r3, [pc, #136]	; (8003eb4 <HAL_RCC_ClockConfig+0x224>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e0ac      	b.n	8003f92 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e38:	4b1e      	ldr	r3, [pc, #120]	; (8003eb4 <HAL_RCC_ClockConfig+0x224>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f023 0203 	bic.w	r2, r3, #3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	491b      	ldr	r1, [pc, #108]	; (8003eb4 <HAL_RCC_ClockConfig+0x224>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e4a:	f7fe f815 	bl	8001e78 <HAL_GetTick>
 8003e4e:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e50:	e00a      	b.n	8003e68 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e52:	f7fe f811 	bl	8001e78 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d901      	bls.n	8003e68 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e094      	b.n	8003f92 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e68:	4b12      	ldr	r3, [pc, #72]	; (8003eb4 <HAL_RCC_ClockConfig+0x224>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f003 020c 	and.w	r2, r3, #12
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d1eb      	bne.n	8003e52 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e7a:	4b0d      	ldr	r3, [pc, #52]	; (8003eb0 <HAL_RCC_ClockConfig+0x220>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d217      	bcs.n	8003eb8 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e88:	4b09      	ldr	r3, [pc, #36]	; (8003eb0 <HAL_RCC_ClockConfig+0x220>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f023 0207 	bic.w	r2, r3, #7
 8003e90:	4907      	ldr	r1, [pc, #28]	; (8003eb0 <HAL_RCC_ClockConfig+0x220>)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e98:	4b05      	ldr	r3, [pc, #20]	; (8003eb0 <HAL_RCC_ClockConfig+0x220>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d008      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e073      	b.n	8003f92 <HAL_RCC_ClockConfig+0x302>
 8003eaa:	bf00      	nop
 8003eac:	0800b198 	.word	0x0800b198
 8003eb0:	40022000 	.word	0x40022000
 8003eb4:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0304 	and.w	r3, r3, #4
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d025      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d018      	beq.n	8003efe <HAL_RCC_ClockConfig+0x26e>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ed4:	d013      	beq.n	8003efe <HAL_RCC_ClockConfig+0x26e>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003ede:	d00e      	beq.n	8003efe <HAL_RCC_ClockConfig+0x26e>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003ee8:	d009      	beq.n	8003efe <HAL_RCC_ClockConfig+0x26e>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ef2:	d004      	beq.n	8003efe <HAL_RCC_ClockConfig+0x26e>
 8003ef4:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8003ef8:	4828      	ldr	r0, [pc, #160]	; (8003f9c <HAL_RCC_ClockConfig+0x30c>)
 8003efa:	f7fd fb11 	bl	8001520 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003efe:	4b28      	ldr	r3, [pc, #160]	; (8003fa0 <HAL_RCC_ClockConfig+0x310>)
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	4925      	ldr	r1, [pc, #148]	; (8003fa0 <HAL_RCC_ClockConfig+0x310>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d026      	beq.n	8003f6a <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d018      	beq.n	8003f56 <HAL_RCC_ClockConfig+0x2c6>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f2c:	d013      	beq.n	8003f56 <HAL_RCC_ClockConfig+0x2c6>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003f36:	d00e      	beq.n	8003f56 <HAL_RCC_ClockConfig+0x2c6>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003f40:	d009      	beq.n	8003f56 <HAL_RCC_ClockConfig+0x2c6>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f4a:	d004      	beq.n	8003f56 <HAL_RCC_ClockConfig+0x2c6>
 8003f4c:	f240 31ab 	movw	r1, #939	; 0x3ab
 8003f50:	4812      	ldr	r0, [pc, #72]	; (8003f9c <HAL_RCC_ClockConfig+0x30c>)
 8003f52:	f7fd fae5 	bl	8001520 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f56:	4b12      	ldr	r3, [pc, #72]	; (8003fa0 <HAL_RCC_ClockConfig+0x310>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	00db      	lsls	r3, r3, #3
 8003f64:	490e      	ldr	r1, [pc, #56]	; (8003fa0 <HAL_RCC_ClockConfig+0x310>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f6a:	f000 f821 	bl	8003fb0 <HAL_RCC_GetSysClockFreq>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	4b0b      	ldr	r3, [pc, #44]	; (8003fa0 <HAL_RCC_ClockConfig+0x310>)
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	091b      	lsrs	r3, r3, #4
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	490a      	ldr	r1, [pc, #40]	; (8003fa4 <HAL_RCC_ClockConfig+0x314>)
 8003f7c:	5ccb      	ldrb	r3, [r1, r3]
 8003f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f82:	4a09      	ldr	r2, [pc, #36]	; (8003fa8 <HAL_RCC_ClockConfig+0x318>)
 8003f84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f86:	4b09      	ldr	r3, [pc, #36]	; (8003fac <HAL_RCC_ClockConfig+0x31c>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fd ff32 	bl	8001df4 <HAL_InitTick>

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	0800b198 	.word	0x0800b198
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	0800b784 	.word	0x0800b784
 8003fa8:	20000000 	.word	0x20000000
 8003fac:	20000004 	.word	0x20000004

08003fb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fb0:	b490      	push	{r4, r7}
 8003fb2:	b08a      	sub	sp, #40	; 0x28
 8003fb4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003fb6:	4b2a      	ldr	r3, [pc, #168]	; (8004060 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003fb8:	1d3c      	adds	r4, r7, #4
 8003fba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003fbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003fc0:	f240 2301 	movw	r3, #513	; 0x201
 8003fc4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61fb      	str	r3, [r7, #28]
 8003fca:	2300      	movs	r3, #0
 8003fcc:	61bb      	str	r3, [r7, #24]
 8003fce:	2300      	movs	r3, #0
 8003fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003fda:	4b22      	ldr	r3, [pc, #136]	; (8004064 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	f003 030c 	and.w	r3, r3, #12
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	d002      	beq.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x40>
 8003fea:	2b08      	cmp	r3, #8
 8003fec:	d003      	beq.n	8003ff6 <HAL_RCC_GetSysClockFreq+0x46>
 8003fee:	e02d      	b.n	800404c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ff0:	4b1d      	ldr	r3, [pc, #116]	; (8004068 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ff2:	623b      	str	r3, [r7, #32]
      break;
 8003ff4:	e02d      	b.n	8004052 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	0c9b      	lsrs	r3, r3, #18
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004002:	4413      	add	r3, r2
 8004004:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004008:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d013      	beq.n	800403c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004014:	4b13      	ldr	r3, [pc, #76]	; (8004064 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	0c5b      	lsrs	r3, r3, #17
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004022:	4413      	add	r3, r2
 8004024:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004028:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	4a0e      	ldr	r2, [pc, #56]	; (8004068 <HAL_RCC_GetSysClockFreq+0xb8>)
 800402e:	fb02 f203 	mul.w	r2, r2, r3
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	fbb2 f3f3 	udiv	r3, r2, r3
 8004038:	627b      	str	r3, [r7, #36]	; 0x24
 800403a:	e004      	b.n	8004046 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	4a0b      	ldr	r2, [pc, #44]	; (800406c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004040:	fb02 f303 	mul.w	r3, r2, r3
 8004044:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	623b      	str	r3, [r7, #32]
      break;
 800404a:	e002      	b.n	8004052 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800404c:	4b06      	ldr	r3, [pc, #24]	; (8004068 <HAL_RCC_GetSysClockFreq+0xb8>)
 800404e:	623b      	str	r3, [r7, #32]
      break;
 8004050:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004052:	6a3b      	ldr	r3, [r7, #32]
}
 8004054:	4618      	mov	r0, r3
 8004056:	3728      	adds	r7, #40	; 0x28
 8004058:	46bd      	mov	sp, r7
 800405a:	bc90      	pop	{r4, r7}
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	0800b1d0 	.word	0x0800b1d0
 8004064:	40021000 	.word	0x40021000
 8004068:	007a1200 	.word	0x007a1200
 800406c:	003d0900 	.word	0x003d0900

08004070 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004074:	4b02      	ldr	r3, [pc, #8]	; (8004080 <HAL_RCC_GetHCLKFreq+0x10>)
 8004076:	681b      	ldr	r3, [r3, #0]
}
 8004078:	4618      	mov	r0, r3
 800407a:	46bd      	mov	sp, r7
 800407c:	bc80      	pop	{r7}
 800407e:	4770      	bx	lr
 8004080:	20000000 	.word	0x20000000

08004084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004088:	f7ff fff2 	bl	8004070 <HAL_RCC_GetHCLKFreq>
 800408c:	4602      	mov	r2, r0
 800408e:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	0a1b      	lsrs	r3, r3, #8
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	4903      	ldr	r1, [pc, #12]	; (80040a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800409a:	5ccb      	ldrb	r3, [r1, r3]
 800409c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40021000 	.word	0x40021000
 80040a8:	0800b794 	.word	0x0800b794

080040ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040b0:	f7ff ffde 	bl	8004070 <HAL_RCC_GetHCLKFreq>
 80040b4:	4602      	mov	r2, r0
 80040b6:	4b05      	ldr	r3, [pc, #20]	; (80040cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	0adb      	lsrs	r3, r3, #11
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	4903      	ldr	r1, [pc, #12]	; (80040d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040c2:	5ccb      	ldrb	r3, [r1, r3]
 80040c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40021000 	.word	0x40021000
 80040d0:	0800b794 	.word	0x0800b794

080040d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80040dc:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <RCC_Delay+0x34>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a0a      	ldr	r2, [pc, #40]	; (800410c <RCC_Delay+0x38>)
 80040e2:	fba2 2303 	umull	r2, r3, r2, r3
 80040e6:	0a5b      	lsrs	r3, r3, #9
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	fb02 f303 	mul.w	r3, r2, r3
 80040ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80040f0:	bf00      	nop
  }
  while (Delay --);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	1e5a      	subs	r2, r3, #1
 80040f6:	60fa      	str	r2, [r7, #12]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1f9      	bne.n	80040f0 <RCC_Delay+0x1c>
}
 80040fc:	bf00      	nop
 80040fe:	bf00      	nop
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	bc80      	pop	{r7}
 8004106:	4770      	bx	lr
 8004108:	20000000 	.word	0x20000000
 800410c:	10624dd3 	.word	0x10624dd3

08004110 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004118:	2300      	movs	r3, #0
 800411a:	613b      	str	r3, [r7, #16]
 800411c:	2300      	movs	r3, #0
 800411e:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	2b00      	cmp	r3, #0
 800412a:	d11b      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	d115      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10f      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0308 	and.w	r3, r3, #8
 800414c:	2b00      	cmp	r3, #0
 800414e:	d109      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0310 	and.w	r3, r3, #16
 8004158:	2b00      	cmp	r3, #0
 800415a:	d103      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800415c:	216c      	movs	r1, #108	; 0x6c
 800415e:	4873      	ldr	r0, [pc, #460]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004160:	f7fd f9de 	bl	8001520 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	f000 8095 	beq.w	800429c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    FlagStatus pwrclkchanged = RESET;
 8004172:	2300      	movs	r3, #0
 8004174:	75fb      	strb	r3, [r7, #23]

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d012      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004186:	d00d      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004190:	d008      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800419a:	d003      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
 800419c:	2174      	movs	r1, #116	; 0x74
 800419e:	4863      	ldr	r0, [pc, #396]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80041a0:	f7fd f9be 	bl	8001520 <assert_failed>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041a4:	4b62      	ldr	r3, [pc, #392]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80041a6:	69db      	ldr	r3, [r3, #28]
 80041a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10d      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041b0:	4b5f      	ldr	r3, [pc, #380]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	4a5e      	ldr	r2, [pc, #376]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80041b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ba:	61d3      	str	r3, [r2, #28]
 80041bc:	4b5c      	ldr	r3, [pc, #368]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c4:	60bb      	str	r3, [r7, #8]
 80041c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041c8:	2301      	movs	r3, #1
 80041ca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041cc:	4b59      	ldr	r3, [pc, #356]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d118      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xfa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041d8:	4b56      	ldr	r3, [pc, #344]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a55      	ldr	r2, [pc, #340]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80041de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041e4:	f7fd fe48 	bl	8001e78 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ea:	e008      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ec:	f7fd fe44 	bl	8001e78 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b64      	cmp	r3, #100	; 0x64
 80041f8:	d901      	bls.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xee>
        {
          return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e092      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x214>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041fe:	4b4d      	ldr	r3, [pc, #308]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0f0      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xdc>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800420a:	4b49      	ldr	r3, [pc, #292]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004212:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d02e      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	429a      	cmp	r2, r3
 8004226:	d027      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004228:	4b41      	ldr	r3, [pc, #260]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004230:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004232:	4b41      	ldr	r3, [pc, #260]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004234:	2201      	movs	r2, #1
 8004236:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004238:	4b3f      	ldr	r3, [pc, #252]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800423e:	4a3c      	ldr	r2, [pc, #240]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d014      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800424e:	f7fd fe13 	bl	8001e78 <HAL_GetTick>
 8004252:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004254:	e00a      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x15c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004256:	f7fd fe0f 	bl	8001e78 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	f241 3288 	movw	r2, #5000	; 0x1388
 8004264:	4293      	cmp	r3, r2
 8004266:	d901      	bls.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x15c>
          {
            return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e05b      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x214>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800426c:	4b30      	ldr	r3, [pc, #192]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0ee      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x146>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004278:	4b2d      	ldr	r3, [pc, #180]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800427a:	6a1b      	ldr	r3, [r3, #32]
 800427c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	492a      	ldr	r1, [pc, #168]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004286:	4313      	orrs	r3, r2
 8004288:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800428a:	7dfb      	ldrb	r3, [r7, #23]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d105      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004290:	4b27      	ldr	r3, [pc, #156]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	4a26      	ldr	r2, [pc, #152]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004296:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800429a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d01f      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d012      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042b8:	d00d      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042c2:	d008      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80042cc:	d003      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80042ce:	21b9      	movs	r1, #185	; 0xb9
 80042d0:	4816      	ldr	r0, [pc, #88]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80042d2:	f7fd f925 	bl	8001520 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042d6:	4b16      	ldr	r3, [pc, #88]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	4913      	ldr	r1, [pc, #76]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0310 	and.w	r3, r3, #16
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d016      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042fc:	d008      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d004      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004306:	f240 1115 	movw	r1, #277	; 0x115
 800430a:	4808      	ldr	r0, [pc, #32]	; (800432c <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 800430c:	f7fd f908 	bl	8001520 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004310:	4b07      	ldr	r3, [pc, #28]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	4904      	ldr	r1, [pc, #16]	; (8004330 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800431e:	4313      	orrs	r3, r2
 8004320:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3718      	adds	r7, #24
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	0800b1e0 	.word	0x0800b1e0
 8004330:	40021000 	.word	0x40021000
 8004334:	40007000 	.word	0x40007000
 8004338:	42420440 	.word	0x42420440

0800433c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800433c:	b590      	push	{r4, r7, lr}
 800433e:	b08d      	sub	sp, #52	; 0x34
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004344:	4b7a      	ldr	r3, [pc, #488]	; (8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>)
 8004346:	f107 040c 	add.w	r4, r7, #12
 800434a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800434c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004350:	f240 2301 	movw	r3, #513	; 0x201
 8004354:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004356:	2300      	movs	r3, #0
 8004358:	627b      	str	r3, [r7, #36]	; 0x24
 800435a:	2300      	movs	r3, #0
 800435c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800435e:	2300      	movs	r3, #0
 8004360:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004362:	2300      	movs	r3, #0
 8004364:	61fb      	str	r3, [r7, #28]
 8004366:	2300      	movs	r3, #0
 8004368:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	2b00      	cmp	r3, #0
 8004372:	d118      	bne.n	80043a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d113      	bne.n	80043a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f003 0304 	and.w	r3, r3, #4
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10e      	bne.n	80043a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f003 0308 	and.w	r3, r3, #8
 800438e:	2b00      	cmp	r3, #0
 8004390:	d109      	bne.n	80043a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f003 0310 	and.w	r3, r3, #16
 8004398:	2b00      	cmp	r3, #0
 800439a:	d104      	bne.n	80043a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 800439c:	f44f 71cb 	mov.w	r1, #406	; 0x196
 80043a0:	4864      	ldr	r0, [pc, #400]	; (8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>)
 80043a2:	f7fd f8bd 	bl	8001520 <assert_failed>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	3b01      	subs	r3, #1
 80043aa:	2b0f      	cmp	r3, #15
 80043ac:	f200 80b6 	bhi.w	800451c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80043b0:	a201      	add	r2, pc, #4	; (adr r2, 80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>)
 80043b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b6:	bf00      	nop
 80043b8:	0800449b 	.word	0x0800449b
 80043bc:	08004501 	.word	0x08004501
 80043c0:	0800451d 	.word	0x0800451d
 80043c4:	0800448b 	.word	0x0800448b
 80043c8:	0800451d 	.word	0x0800451d
 80043cc:	0800451d 	.word	0x0800451d
 80043d0:	0800451d 	.word	0x0800451d
 80043d4:	08004493 	.word	0x08004493
 80043d8:	0800451d 	.word	0x0800451d
 80043dc:	0800451d 	.word	0x0800451d
 80043e0:	0800451d 	.word	0x0800451d
 80043e4:	0800451d 	.word	0x0800451d
 80043e8:	0800451d 	.word	0x0800451d
 80043ec:	0800451d 	.word	0x0800451d
 80043f0:	0800451d 	.word	0x0800451d
 80043f4:	080043f9 	.word	0x080043f9
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80043f8:	4b4f      	ldr	r3, [pc, #316]	; (8004538 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80043fe:	4b4e      	ldr	r3, [pc, #312]	; (8004538 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	f000 808a 	beq.w	8004520 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	0c9b      	lsrs	r3, r3, #18
 8004410:	f003 030f 	and.w	r3, r3, #15
 8004414:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004418:	4413      	add	r3, r2
 800441a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800441e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d018      	beq.n	800445c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800442a:	4b43      	ldr	r3, [pc, #268]	; (8004538 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	0c5b      	lsrs	r3, r3, #17
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004438:	4413      	add	r3, r2
 800443a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800443e:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00d      	beq.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800444a:	4a3c      	ldr	r2, [pc, #240]	; (800453c <HAL_RCCEx_GetPeriphCLKFreq+0x200>)
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004452:	6a3b      	ldr	r3, [r7, #32]
 8004454:	fb02 f303 	mul.w	r3, r2, r3
 8004458:	62fb      	str	r3, [r7, #44]	; 0x2c
 800445a:	e004      	b.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800445c:	6a3b      	ldr	r3, [r7, #32]
 800445e:	4a38      	ldr	r2, [pc, #224]	; (8004540 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8004460:	fb02 f303 	mul.w	r3, r2, r3
 8004464:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004466:	4b34      	ldr	r3, [pc, #208]	; (8004538 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800446e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004472:	d102      	bne.n	800447a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8004474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004476:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8004478:	e052      	b.n	8004520 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          frequency = (pllclk * 2) / 3;
 800447a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	4a31      	ldr	r2, [pc, #196]	; (8004544 <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8004480:	fba2 2303 	umull	r2, r3, r2, r3
 8004484:	085b      	lsrs	r3, r3, #1
 8004486:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004488:	e04a      	b.n	8004520 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 800448a:	f7ff fd91 	bl	8003fb0 <HAL_RCC_GetSysClockFreq>
 800448e:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004490:	e049      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8004492:	f7ff fd8d 	bl	8003fb0 <HAL_RCC_GetSysClockFreq>
 8004496:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004498:	e045      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800449a:	4b27      	ldr	r3, [pc, #156]	; (8004538 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044aa:	d108      	bne.n	80044be <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        frequency = LSE_VALUE;
 80044b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80044bc:	e01f      	b.n	80044fe <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044c8:	d109      	bne.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80044ca:	4b1b      	ldr	r3, [pc, #108]	; (8004538 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
      {
        frequency = LSI_VALUE;
 80044d6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80044da:	62bb      	str	r3, [r7, #40]	; 0x28
 80044dc:	e00f      	b.n	80044fe <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044e8:	d11c      	bne.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 80044ea:	4b13      	ldr	r3, [pc, #76]	; (8004538 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d016      	beq.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
      {
        frequency = HSE_VALUE / 128U;
 80044f6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80044fa:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80044fc:	e012      	b.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 80044fe:	e011      	b.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004500:	f7ff fdd4 	bl	80040ac <HAL_RCC_GetPCLK2Freq>
 8004504:	4602      	mov	r2, r0
 8004506:	4b0c      	ldr	r3, [pc, #48]	; (8004538 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	0b9b      	lsrs	r3, r3, #14
 800450c:	f003 0303 	and.w	r3, r3, #3
 8004510:	3301      	adds	r3, #1
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	fbb2 f3f3 	udiv	r3, r2, r3
 8004518:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800451a:	e004      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
    default:
    {
      break;
 800451c:	bf00      	nop
 800451e:	e002      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
      break;
 8004520:	bf00      	nop
 8004522:	e000      	b.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
      break;
 8004524:	bf00      	nop
    }
  }
  return (frequency);
 8004526:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004528:	4618      	mov	r0, r3
 800452a:	3734      	adds	r7, #52	; 0x34
 800452c:	46bd      	mov	sp, r7
 800452e:	bd90      	pop	{r4, r7, pc}
 8004530:	0800b21c 	.word	0x0800b21c
 8004534:	0800b1e0 	.word	0x0800b1e0
 8004538:	40021000 	.word	0x40021000
 800453c:	007a1200 	.word	0x007a1200
 8004540:	003d0900 	.word	0x003d0900
 8004544:	aaaaaaab 	.word	0xaaaaaaab

08004548 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8004550:	2300      	movs	r3, #0
 8004552:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e0b4      	b.n	80046c8 <HAL_RTC_Init+0x180>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a5b      	ldr	r2, [pc, #364]	; (80046d0 <HAL_RTC_Init+0x188>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d004      	beq.n	8004572 <HAL_RTC_Init+0x2a>
 8004568:	f240 111d 	movw	r1, #285	; 0x11d
 800456c:	4859      	ldr	r0, [pc, #356]	; (80046d4 <HAL_RTC_Init+0x18c>)
 800456e:	f7fc ffd7 	bl	8001520 <assert_failed>
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d012      	beq.n	80045a0 <HAL_RTC_Init+0x58>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	2b80      	cmp	r3, #128	; 0x80
 8004580:	d00e      	beq.n	80045a0 <HAL_RTC_Init+0x58>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800458a:	d009      	beq.n	80045a0 <HAL_RTC_Init+0x58>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004594:	d004      	beq.n	80045a0 <HAL_RTC_Init+0x58>
 8004596:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800459a:	484e      	ldr	r0, [pc, #312]	; (80046d4 <HAL_RTC_Init+0x18c>)
 800459c:	f7fc ffc0 	bl	8001520 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045a8:	d309      	bcc.n	80045be <HAL_RTC_Init+0x76>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b2:	d004      	beq.n	80045be <HAL_RTC_Init+0x76>
 80045b4:	f240 111f 	movw	r1, #287	; 0x11f
 80045b8:	4846      	ldr	r0, [pc, #280]	; (80046d4 <HAL_RTC_Init+0x18c>)
 80045ba:	f7fc ffb1 	bl	8001520 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	7c5b      	ldrb	r3, [r3, #17]
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d105      	bne.n	80045d4 <HAL_RTC_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7fd f826 	bl	8001620 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2202      	movs	r2, #2
 80045d8:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 fbca 	bl	8004d74 <HAL_RTC_WaitForSynchro>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d004      	beq.n	80045f0 <HAL_RTC_Init+0xa8>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2204      	movs	r2, #4
 80045ea:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e06b      	b.n	80046c8 <HAL_RTC_Init+0x180>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 fc83 	bl	8004efc <RTC_EnterInitMode>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d004      	beq.n	8004606 <HAL_RTC_Init+0xbe>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2204      	movs	r2, #4
 8004600:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e060      	b.n	80046c8 <HAL_RTC_Init+0x180>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 0207 	bic.w	r2, r2, #7
 8004614:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d005      	beq.n	800462a <HAL_RTC_Init+0xe2>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800461e:	4b2e      	ldr	r3, [pc, #184]	; (80046d8 <HAL_RTC_Init+0x190>)
 8004620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004622:	4a2d      	ldr	r2, [pc, #180]	; (80046d8 <HAL_RTC_Init+0x190>)
 8004624:	f023 0301 	bic.w	r3, r3, #1
 8004628:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800462a:	4b2b      	ldr	r3, [pc, #172]	; (80046d8 <HAL_RTC_Init+0x190>)
 800462c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	4928      	ldr	r1, [pc, #160]	; (80046d8 <HAL_RTC_Init+0x190>)
 8004638:	4313      	orrs	r3, r2
 800463a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004644:	d003      	beq.n	800464e <HAL_RTC_Init+0x106>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	e00e      	b.n	800466c <HAL_RTC_Init+0x124>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800464e:	2001      	movs	r0, #1
 8004650:	f7ff fe74 	bl	800433c <HAL_RCCEx_GetPeriphCLKFreq>
 8004654:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d104      	bne.n	8004666 <HAL_RTC_Init+0x11e>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2204      	movs	r2, #4
 8004660:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e030      	b.n	80046c8 <HAL_RTC_Init+0x180>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	3b01      	subs	r3, #1
 800466a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f023 010f 	bic.w	r1, r3, #15
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	0c1a      	lsrs	r2, r3, #16
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	430a      	orrs	r2, r1
 8004680:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	0c1b      	lsrs	r3, r3, #16
 800468a:	041b      	lsls	r3, r3, #16
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	b291      	uxth	r1, r2
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6812      	ldr	r2, [r2, #0]
 8004694:	430b      	orrs	r3, r1
 8004696:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 fc57 	bl	8004f4c <RTC_ExitInitMode>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d004      	beq.n	80046ae <HAL_RTC_Init+0x166>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2204      	movs	r2, #4
 80046a8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e00c      	b.n	80046c8 <HAL_RTC_Init+0x180>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80046c6:	2300      	movs	r3, #0
  }
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	40002800 	.word	0x40002800
 80046d4:	0800b22c 	.word	0x0800b22c
 80046d8:	40006c00 	.word	0x40006c00

080046dc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80046dc:	b590      	push	{r4, r7, lr}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80046e8:	2300      	movs	r3, #0
 80046ea:	617b      	str	r3, [r7, #20]
 80046ec:	2300      	movs	r3, #0
 80046ee:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <HAL_RTC_SetTime+0x20>
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e0cd      	b.n	800489c <HAL_RTC_SetTime+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d007      	beq.n	8004716 <HAL_RTC_SetTime+0x3a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d004      	beq.n	8004716 <HAL_RTC_SetTime+0x3a>
 800470c:	f240 21ca 	movw	r1, #714	; 0x2ca
 8004710:	4864      	ldr	r0, [pc, #400]	; (80048a4 <HAL_RTC_SetTime+0x1c8>)
 8004712:	f7fc ff05 	bl	8001520 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	7c1b      	ldrb	r3, [r3, #16]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d101      	bne.n	8004722 <HAL_RTC_SetTime+0x46>
 800471e:	2302      	movs	r3, #2
 8004720:	e0bc      	b.n	800489c <HAL_RTC_SetTime+0x1c0>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2201      	movs	r2, #1
 8004726:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2202      	movs	r2, #2
 800472c:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d12e      	bne.n	8004792 <HAL_RTC_SetTime+0xb6>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	2b17      	cmp	r3, #23
 800473a:	d904      	bls.n	8004746 <HAL_RTC_SetTime+0x6a>
 800473c:	f240 21d3 	movw	r1, #723	; 0x2d3
 8004740:	4858      	ldr	r0, [pc, #352]	; (80048a4 <HAL_RTC_SetTime+0x1c8>)
 8004742:	f7fc feed 	bl	8001520 <assert_failed>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	785b      	ldrb	r3, [r3, #1]
 800474a:	2b3b      	cmp	r3, #59	; 0x3b
 800474c:	d904      	bls.n	8004758 <HAL_RTC_SetTime+0x7c>
 800474e:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 8004752:	4854      	ldr	r0, [pc, #336]	; (80048a4 <HAL_RTC_SetTime+0x1c8>)
 8004754:	f7fc fee4 	bl	8001520 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	789b      	ldrb	r3, [r3, #2]
 800475c:	2b3b      	cmp	r3, #59	; 0x3b
 800475e:	d904      	bls.n	800476a <HAL_RTC_SetTime+0x8e>
 8004760:	f240 21d5 	movw	r1, #725	; 0x2d5
 8004764:	484f      	ldr	r0, [pc, #316]	; (80048a4 <HAL_RTC_SetTime+0x1c8>)
 8004766:	f7fc fedb 	bl	8001520 <assert_failed>

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	461a      	mov	r2, r3
 8004770:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8004774:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	785b      	ldrb	r3, [r3, #1]
 800477c:	4619      	mov	r1, r3
 800477e:	460b      	mov	r3, r1
 8004780:	011b      	lsls	r3, r3, #4
 8004782:	1a5b      	subs	r3, r3, r1
 8004784:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004786:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800478c:	4413      	add	r3, r2
 800478e:	617b      	str	r3, [r7, #20]
 8004790:	e045      	b.n	800481e <HAL_RTC_SetTime+0x142>
  }
  else
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	4618      	mov	r0, r3
 8004798:	f000 fc1d 	bl	8004fd6 <RTC_Bcd2ToByte>
 800479c:	4603      	mov	r3, r0
 800479e:	2b17      	cmp	r3, #23
 80047a0:	d904      	bls.n	80047ac <HAL_RTC_SetTime+0xd0>
 80047a2:	f240 21dd 	movw	r1, #733	; 0x2dd
 80047a6:	483f      	ldr	r0, [pc, #252]	; (80048a4 <HAL_RTC_SetTime+0x1c8>)
 80047a8:	f7fc feba 	bl	8001520 <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	785b      	ldrb	r3, [r3, #1]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f000 fc10 	bl	8004fd6 <RTC_Bcd2ToByte>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b3b      	cmp	r3, #59	; 0x3b
 80047ba:	d904      	bls.n	80047c6 <HAL_RTC_SetTime+0xea>
 80047bc:	f240 21de 	movw	r1, #734	; 0x2de
 80047c0:	4838      	ldr	r0, [pc, #224]	; (80048a4 <HAL_RTC_SetTime+0x1c8>)
 80047c2:	f7fc fead 	bl	8001520 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	789b      	ldrb	r3, [r3, #2]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 fc03 	bl	8004fd6 <RTC_Bcd2ToByte>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b3b      	cmp	r3, #59	; 0x3b
 80047d4:	d904      	bls.n	80047e0 <HAL_RTC_SetTime+0x104>
 80047d6:	f240 21df 	movw	r1, #735	; 0x2df
 80047da:	4832      	ldr	r0, [pc, #200]	; (80048a4 <HAL_RTC_SetTime+0x1c8>)
 80047dc:	f7fc fea0 	bl	8001520 <assert_failed>

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 fbf6 	bl	8004fd6 <RTC_Bcd2ToByte>
 80047ea:	4603      	mov	r3, r0
 80047ec:	461a      	mov	r2, r3
 80047ee:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80047f2:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	785b      	ldrb	r3, [r3, #1]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f000 fbeb 	bl	8004fd6 <RTC_Bcd2ToByte>
 8004800:	4603      	mov	r3, r0
 8004802:	461a      	mov	r2, r3
 8004804:	4613      	mov	r3, r2
 8004806:	011b      	lsls	r3, r3, #4
 8004808:	1a9b      	subs	r3, r3, r2
 800480a:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800480c:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	789b      	ldrb	r3, [r3, #2]
 8004812:	4618      	mov	r0, r3
 8004814:	f000 fbdf 	bl	8004fd6 <RTC_Bcd2ToByte>
 8004818:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800481a:	4423      	add	r3, r4
 800481c:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800481e:	6979      	ldr	r1, [r7, #20]
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f000 fb04 	bl	8004e2e <RTC_WriteTimeCounter>
 8004826:	4603      	mov	r3, r0
 8004828:	2b00      	cmp	r3, #0
 800482a:	d007      	beq.n	800483c <HAL_RTC_SetTime+0x160>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2204      	movs	r2, #4
 8004830:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e02f      	b.n	800489c <HAL_RTC_SetTime+0x1c0>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 0205 	bic.w	r2, r2, #5
 800484a:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f000 fb15 	bl	8004e7c <RTC_ReadAlarmCounter>
 8004852:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800485a:	d018      	beq.n	800488e <HAL_RTC_SetTime+0x1b2>
    {
      if (counter_alarm < counter_time)
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	429a      	cmp	r2, r3
 8004862:	d214      	bcs.n	800488e <HAL_RTC_SetTime+0x1b2>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800486a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800486e:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004870:	6939      	ldr	r1, [r7, #16]
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 fb1b 	bl	8004eae <RTC_WriteAlarmCounter>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d007      	beq.n	800488e <HAL_RTC_SetTime+0x1b2>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2204      	movs	r2, #4
 8004882:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e006      	b.n	800489c <HAL_RTC_SetTime+0x1c0>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2201      	movs	r2, #1
 8004892:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800489a:	2300      	movs	r3, #0
  }
}
 800489c:	4618      	mov	r0, r3
 800489e:	371c      	adds	r7, #28
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd90      	pop	{r4, r7, pc}
 80048a4:	0800b22c 	.word	0x0800b22c

080048a8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b088      	sub	sp, #32
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	61bb      	str	r3, [r7, #24]
 80048b8:	2300      	movs	r3, #0
 80048ba:	61fb      	str	r3, [r7, #28]
 80048bc:	2300      	movs	r3, #0
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	2300      	movs	r3, #0
 80048c2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d002      	beq.n	80048d0 <HAL_RTC_GetTime+0x28>
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e0c0      	b.n	8004a56 <HAL_RTC_GetTime+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d007      	beq.n	80048ea <HAL_RTC_GetTime+0x42>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d004      	beq.n	80048ea <HAL_RTC_GetTime+0x42>
 80048e0:	f240 312d 	movw	r1, #813	; 0x32d
 80048e4:	485e      	ldr	r0, [pc, #376]	; (8004a60 <HAL_RTC_GetTime+0x1b8>)
 80048e6:	f7fc fe1b 	bl	8001520 <assert_failed>

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <HAL_RTC_GetTime+0x54>
  {
    return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e0ac      	b.n	8004a56 <HAL_RTC_GetTime+0x1ae>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 fa66 	bl	8004dce <RTC_ReadTimeCounter>
 8004902:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	4a57      	ldr	r2, [pc, #348]	; (8004a64 <HAL_RTC_GetTime+0x1bc>)
 8004908:	fba2 2303 	umull	r2, r3, r2, r3
 800490c:	0adb      	lsrs	r3, r3, #11
 800490e:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	4b54      	ldr	r3, [pc, #336]	; (8004a64 <HAL_RTC_GetTime+0x1bc>)
 8004914:	fba3 1302 	umull	r1, r3, r3, r2
 8004918:	0adb      	lsrs	r3, r3, #11
 800491a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800491e:	fb01 f303 	mul.w	r3, r1, r3
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	4a50      	ldr	r2, [pc, #320]	; (8004a68 <HAL_RTC_GetTime+0x1c0>)
 8004926:	fba2 2303 	umull	r2, r3, r2, r3
 800492a:	095b      	lsrs	r3, r3, #5
 800492c:	b2da      	uxtb	r2, r3
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	4a4b      	ldr	r2, [pc, #300]	; (8004a64 <HAL_RTC_GetTime+0x1bc>)
 8004936:	fba2 1203 	umull	r1, r2, r2, r3
 800493a:	0ad2      	lsrs	r2, r2, #11
 800493c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004940:	fb01 f202 	mul.w	r2, r1, r2
 8004944:	1a9a      	subs	r2, r3, r2
 8004946:	4b48      	ldr	r3, [pc, #288]	; (8004a68 <HAL_RTC_GetTime+0x1c0>)
 8004948:	fba3 1302 	umull	r1, r3, r3, r2
 800494c:	0959      	lsrs	r1, r3, #5
 800494e:	460b      	mov	r3, r1
 8004950:	011b      	lsls	r3, r3, #4
 8004952:	1a5b      	subs	r3, r3, r1
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	1ad1      	subs	r1, r2, r3
 8004958:	b2ca      	uxtb	r2, r1
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	2b17      	cmp	r3, #23
 8004962:	d955      	bls.n	8004a10 <HAL_RTC_GetTime+0x168>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	4a41      	ldr	r2, [pc, #260]	; (8004a6c <HAL_RTC_GetTime+0x1c4>)
 8004968:	fba2 2303 	umull	r2, r3, r2, r3
 800496c:	091b      	lsrs	r3, r3, #4
 800496e:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8004970:	6939      	ldr	r1, [r7, #16]
 8004972:	4b3e      	ldr	r3, [pc, #248]	; (8004a6c <HAL_RTC_GetTime+0x1c4>)
 8004974:	fba3 2301 	umull	r2, r3, r3, r1
 8004978:	091a      	lsrs	r2, r3, #4
 800497a:	4613      	mov	r3, r2
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	4413      	add	r3, r2
 8004980:	00db      	lsls	r3, r3, #3
 8004982:	1aca      	subs	r2, r1, r3
 8004984:	b2d2      	uxtb	r2, r2
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f000 fa76 	bl	8004e7c <RTC_ReadAlarmCounter>
 8004990:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004998:	d008      	beq.n	80049ac <HAL_RTC_GetTime+0x104>
 800499a:	69fa      	ldr	r2, [r7, #28]
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d904      	bls.n	80049ac <HAL_RTC_GetTime+0x104>
    {
      counter_alarm -= counter_time;
 80049a2:	69fa      	ldr	r2, [r7, #28]
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	61fb      	str	r3, [r7, #28]
 80049aa:	e002      	b.n	80049b2 <HAL_RTC_GetTime+0x10a>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80049ac:	f04f 33ff 	mov.w	r3, #4294967295
 80049b0:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	4a2e      	ldr	r2, [pc, #184]	; (8004a70 <HAL_RTC_GetTime+0x1c8>)
 80049b6:	fb02 f303 	mul.w	r3, r2, r3
 80049ba:	69ba      	ldr	r2, [r7, #24]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80049c0:	69b9      	ldr	r1, [r7, #24]
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 fa33 	bl	8004e2e <RTC_WriteTimeCounter>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <HAL_RTC_GetTime+0x12a>
    {
      return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e041      	b.n	8004a56 <HAL_RTC_GetTime+0x1ae>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d8:	d00c      	beq.n	80049f4 <HAL_RTC_GetTime+0x14c>
    {
      counter_alarm += counter_time;
 80049da:	69fa      	ldr	r2, [r7, #28]
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	4413      	add	r3, r2
 80049e0:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80049e2:	69f9      	ldr	r1, [r7, #28]
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f000 fa62 	bl	8004eae <RTC_WriteAlarmCounter>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00a      	beq.n	8004a06 <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e030      	b.n	8004a56 <HAL_RTC_GetTime+0x1ae>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80049f4:	69f9      	ldr	r1, [r7, #28]
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 fa59 	bl	8004eae <RTC_WriteAlarmCounter>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e027      	b.n	8004a56 <HAL_RTC_GetTime+0x1ae>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8004a06:	6979      	ldr	r1, [r7, #20]
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f000 fb01 	bl	8005010 <RTC_DateUpdate>
 8004a0e:	e003      	b.n	8004a18 <HAL_RTC_GetTime+0x170>
  }
  else
  {
    sTime->Hours = hours;
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	b2da      	uxtb	r2, r3
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d01a      	beq.n	8004a54 <HAL_RTC_GetTime+0x1ac>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 faba 	bl	8004f9c <RTC_ByteToBcd2>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	785b      	ldrb	r3, [r3, #1]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f000 fab1 	bl	8004f9c <RTC_ByteToBcd2>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	789b      	ldrb	r3, [r3, #2]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 faa8 	bl	8004f9c <RTC_ByteToBcd2>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	461a      	mov	r2, r3
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3720      	adds	r7, #32
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	0800b22c 	.word	0x0800b22c
 8004a64:	91a2b3c5 	.word	0x91a2b3c5
 8004a68:	88888889 	.word	0x88888889
 8004a6c:	aaaaaaab 	.word	0xaaaaaaab
 8004a70:	00015180 	.word	0x00015180

08004a74 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b088      	sub	sp, #32
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8004a80:	2300      	movs	r3, #0
 8004a82:	61fb      	str	r3, [r7, #28]
 8004a84:	2300      	movs	r3, #0
 8004a86:	61bb      	str	r3, [r7, #24]
 8004a88:	2300      	movs	r3, #0
 8004a8a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d002      	beq.n	8004a98 <HAL_RTC_SetDate+0x24>
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e0fc      	b.n	8004c96 <HAL_RTC_SetDate+0x222>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d007      	beq.n	8004ab2 <HAL_RTC_SetDate+0x3e>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d004      	beq.n	8004ab2 <HAL_RTC_SetDate+0x3e>
 8004aa8:	f44f 7167 	mov.w	r1, #924	; 0x39c
 8004aac:	487c      	ldr	r0, [pc, #496]	; (8004ca0 <HAL_RTC_SetDate+0x22c>)
 8004aae:	f7fc fd37 	bl	8001520 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	7c1b      	ldrb	r3, [r3, #16]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d101      	bne.n	8004abe <HAL_RTC_SetDate+0x4a>
 8004aba:	2302      	movs	r3, #2
 8004abc:	e0eb      	b.n	8004c96 <HAL_RTC_SetDate+0x222>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d12f      	bne.n	8004b30 <HAL_RTC_SetDate+0xbc>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	78db      	ldrb	r3, [r3, #3]
 8004ad4:	2b63      	cmp	r3, #99	; 0x63
 8004ad6:	d904      	bls.n	8004ae2 <HAL_RTC_SetDate+0x6e>
 8004ad8:	f240 31a5 	movw	r1, #933	; 0x3a5
 8004adc:	4870      	ldr	r0, [pc, #448]	; (8004ca0 <HAL_RTC_SetDate+0x22c>)
 8004ade:	f7fc fd1f 	bl	8001520 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	785b      	ldrb	r3, [r3, #1]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <HAL_RTC_SetDate+0x7e>
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	785b      	ldrb	r3, [r3, #1]
 8004aee:	2b0c      	cmp	r3, #12
 8004af0:	d904      	bls.n	8004afc <HAL_RTC_SetDate+0x88>
 8004af2:	f240 31a6 	movw	r1, #934	; 0x3a6
 8004af6:	486a      	ldr	r0, [pc, #424]	; (8004ca0 <HAL_RTC_SetDate+0x22c>)
 8004af8:	f7fc fd12 	bl	8001520 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	789b      	ldrb	r3, [r3, #2]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d003      	beq.n	8004b0c <HAL_RTC_SetDate+0x98>
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	789b      	ldrb	r3, [r3, #2]
 8004b08:	2b1f      	cmp	r3, #31
 8004b0a:	d904      	bls.n	8004b16 <HAL_RTC_SetDate+0xa2>
 8004b0c:	f240 31a7 	movw	r1, #935	; 0x3a7
 8004b10:	4863      	ldr	r0, [pc, #396]	; (8004ca0 <HAL_RTC_SetDate+0x22c>)
 8004b12:	f7fc fd05 	bl	8001520 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	78da      	ldrb	r2, [r3, #3]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	785a      	ldrb	r2, [r3, #1]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	789a      	ldrb	r2, [r3, #2]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	739a      	strb	r2, [r3, #14]
 8004b2e:	e051      	b.n	8004bd4 <HAL_RTC_SetDate+0x160>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	78db      	ldrb	r3, [r3, #3]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f000 fa4e 	bl	8004fd6 <RTC_Bcd2ToByte>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b63      	cmp	r3, #99	; 0x63
 8004b3e:	d904      	bls.n	8004b4a <HAL_RTC_SetDate+0xd6>
 8004b40:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 8004b44:	4856      	ldr	r0, [pc, #344]	; (8004ca0 <HAL_RTC_SetDate+0x22c>)
 8004b46:	f7fc fceb 	bl	8001520 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	785b      	ldrb	r3, [r3, #1]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 fa41 	bl	8004fd6 <RTC_Bcd2ToByte>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d007      	beq.n	8004b6a <HAL_RTC_SetDate+0xf6>
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	785b      	ldrb	r3, [r3, #1]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 fa39 	bl	8004fd6 <RTC_Bcd2ToByte>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b0c      	cmp	r3, #12
 8004b68:	d904      	bls.n	8004b74 <HAL_RTC_SetDate+0x100>
 8004b6a:	f240 31b1 	movw	r1, #945	; 0x3b1
 8004b6e:	484c      	ldr	r0, [pc, #304]	; (8004ca0 <HAL_RTC_SetDate+0x22c>)
 8004b70:	f7fc fcd6 	bl	8001520 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	789b      	ldrb	r3, [r3, #2]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 fa2c 	bl	8004fd6 <RTC_Bcd2ToByte>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d007      	beq.n	8004b94 <HAL_RTC_SetDate+0x120>
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	789b      	ldrb	r3, [r3, #2]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 fa24 	bl	8004fd6 <RTC_Bcd2ToByte>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b1f      	cmp	r3, #31
 8004b92:	d904      	bls.n	8004b9e <HAL_RTC_SetDate+0x12a>
 8004b94:	f240 31b2 	movw	r1, #946	; 0x3b2
 8004b98:	4841      	ldr	r0, [pc, #260]	; (8004ca0 <HAL_RTC_SetDate+0x22c>)
 8004b9a:	f7fc fcc1 	bl	8001520 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	78db      	ldrb	r3, [r3, #3]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 fa17 	bl	8004fd6 <RTC_Bcd2ToByte>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	461a      	mov	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	785b      	ldrb	r3, [r3, #1]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f000 fa0e 	bl	8004fd6 <RTC_Bcd2ToByte>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	789b      	ldrb	r3, [r3, #2]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 fa05 	bl	8004fd6 <RTC_Bcd2ToByte>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	461a      	mov	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	7bdb      	ldrb	r3, [r3, #15]
 8004bd8:	4618      	mov	r0, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	7b59      	ldrb	r1, [r3, #13]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	7b9b      	ldrb	r3, [r3, #14]
 8004be2:	461a      	mov	r2, r3
 8004be4:	f000 faf0 	bl	80051c8 <RTC_WeekDayNum>
 8004be8:	4603      	mov	r3, r0
 8004bea:	461a      	mov	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	7b1a      	ldrb	r2, [r3, #12]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f000 f8e8 	bl	8004dce <RTC_ReadTimeCounter>
 8004bfe:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	4a28      	ldr	r2, [pc, #160]	; (8004ca4 <HAL_RTC_SetDate+0x230>)
 8004c04:	fba2 2303 	umull	r2, r3, r2, r3
 8004c08:	0adb      	lsrs	r3, r3, #11
 8004c0a:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	2b18      	cmp	r3, #24
 8004c10:	d93a      	bls.n	8004c88 <HAL_RTC_SetDate+0x214>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	4a24      	ldr	r2, [pc, #144]	; (8004ca8 <HAL_RTC_SetDate+0x234>)
 8004c16:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1a:	091b      	lsrs	r3, r3, #4
 8004c1c:	4a23      	ldr	r2, [pc, #140]	; (8004cac <HAL_RTC_SetDate+0x238>)
 8004c1e:	fb02 f303 	mul.w	r3, r2, r3
 8004c22:	69fa      	ldr	r2, [r7, #28]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004c28:	69f9      	ldr	r1, [r7, #28]
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f000 f8ff 	bl	8004e2e <RTC_WriteTimeCounter>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d007      	beq.n	8004c46 <HAL_RTC_SetDate+0x1d2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2204      	movs	r2, #4
 8004c3a:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e027      	b.n	8004c96 <HAL_RTC_SetDate+0x222>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f000 f918 	bl	8004e7c <RTC_ReadAlarmCounter>
 8004c4c:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c54:	d018      	beq.n	8004c88 <HAL_RTC_SetDate+0x214>
    {
      if (counter_alarm < counter_time)
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d214      	bcs.n	8004c88 <HAL_RTC_SetDate+0x214>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004c64:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004c68:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004c6a:	69b9      	ldr	r1, [r7, #24]
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 f91e 	bl	8004eae <RTC_WriteAlarmCounter>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d007      	beq.n	8004c88 <HAL_RTC_SetDate+0x214>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2204      	movs	r2, #4
 8004c7c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e006      	b.n	8004c96 <HAL_RTC_SetDate+0x222>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3720      	adds	r7, #32
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	0800b22c 	.word	0x0800b22c
 8004ca4:	91a2b3c5 	.word	0x91a2b3c5
 8004ca8:	aaaaaaab 	.word	0xaaaaaaab
 8004cac:	00015180 	.word	0x00015180

08004cb0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8004cbc:	f107 0314 	add.w	r3, r7, #20
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	460a      	mov	r2, r1
 8004cc4:	801a      	strh	r2, [r3, #0]
 8004cc6:	460a      	mov	r2, r1
 8004cc8:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d002      	beq.n	8004cd6 <HAL_RTC_GetDate+0x26>
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e045      	b.n	8004d66 <HAL_RTC_GetDate+0xb6>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d007      	beq.n	8004cf0 <HAL_RTC_GetDate+0x40>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d004      	beq.n	8004cf0 <HAL_RTC_GetDate+0x40>
 8004ce6:	f240 410e 	movw	r1, #1038	; 0x40e
 8004cea:	4821      	ldr	r0, [pc, #132]	; (8004d70 <HAL_RTC_GetDate+0xc0>)
 8004cec:	f7fc fc18 	bl	8001520 <assert_failed>

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8004cf0:	f107 0314 	add.w	r3, r7, #20
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f7ff fdd5 	bl	80048a8 <HAL_RTC_GetTime>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <HAL_RTC_GetDate+0x58>
  {
    return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e02e      	b.n	8004d66 <HAL_RTC_GetDate+0xb6>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	7b1a      	ldrb	r2, [r3, #12]
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	7bda      	ldrb	r2, [r3, #15]
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	7b5a      	ldrb	r2, [r3, #13]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	7b9a      	ldrb	r2, [r3, #14]
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d01a      	beq.n	8004d64 <HAL_RTC_GetDate+0xb4>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	78db      	ldrb	r3, [r3, #3]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 f932 	bl	8004f9c <RTC_ByteToBcd2>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	785b      	ldrb	r3, [r3, #1]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 f929 	bl	8004f9c <RTC_ByteToBcd2>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	461a      	mov	r2, r3
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	789b      	ldrb	r3, [r3, #2]
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 f920 	bl	8004f9c <RTC_ByteToBcd2>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	461a      	mov	r2, r3
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3718      	adds	r7, #24
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	0800b22c 	.word	0x0800b22c

08004d74 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e01d      	b.n	8004dc6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0208 	bic.w	r2, r2, #8
 8004d98:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004d9a:	f7fd f86d 	bl	8001e78 <HAL_GetTick>
 8004d9e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004da0:	e009      	b.n	8004db6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004da2:	f7fd f869 	bl	8001e78 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004db0:	d901      	bls.n	8004db6 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e007      	b.n	8004dc6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f003 0308 	and.w	r3, r3, #8
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0ee      	beq.n	8004da2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b087      	sub	sp, #28
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	827b      	strh	r3, [r7, #18]
 8004dda:	2300      	movs	r3, #0
 8004ddc:	823b      	strh	r3, [r7, #16]
 8004dde:	2300      	movs	r3, #0
 8004de0:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004de2:	2300      	movs	r3, #0
 8004de4:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004dfe:	8a7a      	ldrh	r2, [r7, #18]
 8004e00:	8a3b      	ldrh	r3, [r7, #16]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d008      	beq.n	8004e18 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004e06:	8a3b      	ldrh	r3, [r7, #16]
 8004e08:	041a      	lsls	r2, r3, #16
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	69db      	ldr	r3, [r3, #28]
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	4313      	orrs	r3, r2
 8004e14:	617b      	str	r3, [r7, #20]
 8004e16:	e004      	b.n	8004e22 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004e18:	8a7b      	ldrh	r3, [r7, #18]
 8004e1a:	041a      	lsls	r2, r3, #16
 8004e1c:	89fb      	ldrh	r3, [r7, #14]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8004e22:	697b      	ldr	r3, [r7, #20]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	371c      	adds	r7, #28
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bc80      	pop	{r7}
 8004e2c:	4770      	bx	lr

08004e2e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b084      	sub	sp, #16
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
 8004e36:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 f85d 	bl	8004efc <RTC_EnterInitMode>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d002      	beq.n	8004e4e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	73fb      	strb	r3, [r7, #15]
 8004e4c:	e011      	b.n	8004e72 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	0c12      	lsrs	r2, r2, #16
 8004e56:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	683a      	ldr	r2, [r7, #0]
 8004e5e:	b292      	uxth	r2, r2
 8004e60:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f872 	bl	8004f4c <RTC_ExitInitMode>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8004e84:	2300      	movs	r3, #0
 8004e86:	81fb      	strh	r3, [r7, #14]
 8004e88:	2300      	movs	r3, #0
 8004e8a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004e9c:	89fb      	ldrh	r3, [r7, #14]
 8004e9e:	041a      	lsls	r2, r3, #16
 8004ea0:	89bb      	ldrh	r3, [r7, #12]
 8004ea2:	4313      	orrs	r3, r2
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bc80      	pop	{r7}
 8004eac:	4770      	bx	lr

08004eae <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f81d 	bl	8004efc <RTC_EnterInitMode>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d002      	beq.n	8004ece <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	73fb      	strb	r3, [r7, #15]
 8004ecc:	e011      	b.n	8004ef2 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	0c12      	lsrs	r2, r2, #16
 8004ed6:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	b292      	uxth	r2, r2
 8004ee0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f832 	bl	8004f4c <RTC_ExitInitMode>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8004f08:	f7fc ffb6 	bl	8001e78 <HAL_GetTick>
 8004f0c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004f0e:	e009      	b.n	8004f24 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004f10:	f7fc ffb2 	bl	8001e78 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f1e:	d901      	bls.n	8004f24 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e00f      	b.n	8004f44 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f003 0320 	and.w	r3, r3, #32
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d0ee      	beq.n	8004f10 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f042 0210 	orr.w	r2, r2, #16
 8004f40:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	685a      	ldr	r2, [r3, #4]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f022 0210 	bic.w	r2, r2, #16
 8004f66:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004f68:	f7fc ff86 	bl	8001e78 <HAL_GetTick>
 8004f6c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004f6e:	e009      	b.n	8004f84 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004f70:	f7fc ff82 	bl	8001e78 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f7e:	d901      	bls.n	8004f84 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e007      	b.n	8004f94 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f003 0320 	and.w	r3, r3, #32
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d0ee      	beq.n	8004f70 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8004faa:	e005      	b.n	8004fb8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004fb2:	79fb      	ldrb	r3, [r7, #7]
 8004fb4:	3b0a      	subs	r3, #10
 8004fb6:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8004fb8:	79fb      	ldrb	r3, [r7, #7]
 8004fba:	2b09      	cmp	r3, #9
 8004fbc:	d8f6      	bhi.n	8004fac <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	79fb      	ldrb	r3, [r7, #7]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	b2db      	uxtb	r3, r3
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bc80      	pop	{r7}
 8004fd4:	4770      	bx	lr

08004fd6 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b085      	sub	sp, #20
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	4603      	mov	r3, r0
 8004fde:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004fe4:	79fb      	ldrb	r3, [r7, #7]
 8004fe6:	091b      	lsrs	r3, r3, #4
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	461a      	mov	r2, r3
 8004fec:	4613      	mov	r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4413      	add	r3, r2
 8004ff2:	005b      	lsls	r3, r3, #1
 8004ff4:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8004ff6:	79fb      	ldrb	r3, [r7, #7]
 8004ff8:	f003 030f 	and.w	r3, r3, #15
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	b2db      	uxtb	r3, r3
 8005002:	4413      	add	r3, r2
 8005004:	b2db      	uxtb	r3, r3
}
 8005006:	4618      	mov	r0, r3
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	bc80      	pop	{r7}
 800500e:	4770      	bx	lr

08005010 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800501a:	2300      	movs	r3, #0
 800501c:	617b      	str	r3, [r7, #20]
 800501e:	2300      	movs	r3, #0
 8005020:	613b      	str	r3, [r7, #16]
 8005022:	2300      	movs	r3, #0
 8005024:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8005026:	2300      	movs	r3, #0
 8005028:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	7bdb      	ldrb	r3, [r3, #15]
 800502e:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	7b5b      	ldrb	r3, [r3, #13]
 8005034:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	7b9b      	ldrb	r3, [r3, #14]
 800503a:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 800503c:	2300      	movs	r3, #0
 800503e:	60bb      	str	r3, [r7, #8]
 8005040:	e06f      	b.n	8005122 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d011      	beq.n	800506c <RTC_DateUpdate+0x5c>
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	2b03      	cmp	r3, #3
 800504c:	d00e      	beq.n	800506c <RTC_DateUpdate+0x5c>
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	2b05      	cmp	r3, #5
 8005052:	d00b      	beq.n	800506c <RTC_DateUpdate+0x5c>
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	2b07      	cmp	r3, #7
 8005058:	d008      	beq.n	800506c <RTC_DateUpdate+0x5c>
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	2b08      	cmp	r3, #8
 800505e:	d005      	beq.n	800506c <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	2b0a      	cmp	r3, #10
 8005064:	d002      	beq.n	800506c <RTC_DateUpdate+0x5c>
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	2b0c      	cmp	r3, #12
 800506a:	d117      	bne.n	800509c <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2b1e      	cmp	r3, #30
 8005070:	d803      	bhi.n	800507a <RTC_DateUpdate+0x6a>
      {
        day++;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	3301      	adds	r3, #1
 8005076:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005078:	e050      	b.n	800511c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	2b0c      	cmp	r3, #12
 800507e:	d005      	beq.n	800508c <RTC_DateUpdate+0x7c>
        {
          month++;
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	3301      	adds	r3, #1
 8005084:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005086:	2301      	movs	r3, #1
 8005088:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800508a:	e047      	b.n	800511c <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800508c:	2301      	movs	r3, #1
 800508e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005090:	2301      	movs	r3, #1
 8005092:	60fb      	str	r3, [r7, #12]
          year++;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	3301      	adds	r3, #1
 8005098:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800509a:	e03f      	b.n	800511c <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d008      	beq.n	80050b4 <RTC_DateUpdate+0xa4>
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	2b06      	cmp	r3, #6
 80050a6:	d005      	beq.n	80050b4 <RTC_DateUpdate+0xa4>
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	2b09      	cmp	r3, #9
 80050ac:	d002      	beq.n	80050b4 <RTC_DateUpdate+0xa4>
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	2b0b      	cmp	r3, #11
 80050b2:	d10c      	bne.n	80050ce <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2b1d      	cmp	r3, #29
 80050b8:	d803      	bhi.n	80050c2 <RTC_DateUpdate+0xb2>
      {
        day++;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	3301      	adds	r3, #1
 80050be:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80050c0:	e02c      	b.n	800511c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	3301      	adds	r3, #1
 80050c6:	613b      	str	r3, [r7, #16]
        day = 1U;
 80050c8:	2301      	movs	r3, #1
 80050ca:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80050cc:	e026      	b.n	800511c <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d123      	bne.n	800511c <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2b1b      	cmp	r3, #27
 80050d8:	d803      	bhi.n	80050e2 <RTC_DateUpdate+0xd2>
      {
        day++;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	3301      	adds	r3, #1
 80050de:	60fb      	str	r3, [r7, #12]
 80050e0:	e01c      	b.n	800511c <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2b1c      	cmp	r3, #28
 80050e6:	d111      	bne.n	800510c <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	4618      	mov	r0, r3
 80050ee:	f000 f839 	bl	8005164 <RTC_IsLeapYear>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d003      	beq.n	8005100 <RTC_DateUpdate+0xf0>
        {
          day++;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	3301      	adds	r3, #1
 80050fc:	60fb      	str	r3, [r7, #12]
 80050fe:	e00d      	b.n	800511c <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	3301      	adds	r3, #1
 8005104:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005106:	2301      	movs	r3, #1
 8005108:	60fb      	str	r3, [r7, #12]
 800510a:	e007      	b.n	800511c <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2b1d      	cmp	r3, #29
 8005110:	d104      	bne.n	800511c <RTC_DateUpdate+0x10c>
      {
        month++;
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	3301      	adds	r3, #1
 8005116:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005118:	2301      	movs	r3, #1
 800511a:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	3301      	adds	r3, #1
 8005120:	60bb      	str	r3, [r7, #8]
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	429a      	cmp	r2, r3
 8005128:	d38b      	bcc.n	8005042 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	b2da      	uxtb	r2, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	b2da      	uxtb	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	b2da      	uxtb	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	b2db      	uxtb	r3, r3
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	b2d2      	uxtb	r2, r2
 800514a:	4619      	mov	r1, r3
 800514c:	6978      	ldr	r0, [r7, #20]
 800514e:	f000 f83b 	bl	80051c8 <RTC_WeekDayNum>
 8005152:	4603      	mov	r3, r0
 8005154:	461a      	mov	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	731a      	strb	r2, [r3, #12]
}
 800515a:	bf00      	nop
 800515c:	3718      	adds	r7, #24
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
	...

08005164 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	4603      	mov	r3, r0
 800516c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800516e:	88fb      	ldrh	r3, [r7, #6]
 8005170:	f003 0303 	and.w	r3, r3, #3
 8005174:	b29b      	uxth	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800517a:	2300      	movs	r3, #0
 800517c:	e01d      	b.n	80051ba <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800517e:	88fb      	ldrh	r3, [r7, #6]
 8005180:	4a10      	ldr	r2, [pc, #64]	; (80051c4 <RTC_IsLeapYear+0x60>)
 8005182:	fba2 1203 	umull	r1, r2, r2, r3
 8005186:	0952      	lsrs	r2, r2, #5
 8005188:	2164      	movs	r1, #100	; 0x64
 800518a:	fb01 f202 	mul.w	r2, r1, r2
 800518e:	1a9b      	subs	r3, r3, r2
 8005190:	b29b      	uxth	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d001      	beq.n	800519a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005196:	2301      	movs	r3, #1
 8005198:	e00f      	b.n	80051ba <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800519a:	88fb      	ldrh	r3, [r7, #6]
 800519c:	4a09      	ldr	r2, [pc, #36]	; (80051c4 <RTC_IsLeapYear+0x60>)
 800519e:	fba2 1203 	umull	r1, r2, r2, r3
 80051a2:	09d2      	lsrs	r2, r2, #7
 80051a4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80051a8:	fb01 f202 	mul.w	r2, r1, r2
 80051ac:	1a9b      	subs	r3, r3, r2
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d101      	bne.n	80051b8 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e000      	b.n	80051ba <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80051b8:	2300      	movs	r3, #0
  }
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	bc80      	pop	{r7}
 80051c2:	4770      	bx	lr
 80051c4:	51eb851f 	.word	0x51eb851f

080051c8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b085      	sub	sp, #20
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	460b      	mov	r3, r1
 80051d2:	70fb      	strb	r3, [r7, #3]
 80051d4:	4613      	mov	r3, r2
 80051d6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80051d8:	2300      	movs	r3, #0
 80051da:	60bb      	str	r3, [r7, #8]
 80051dc:	2300      	movs	r3, #0
 80051de:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80051e6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80051e8:	78fb      	ldrb	r3, [r7, #3]
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d82d      	bhi.n	800524a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80051ee:	78fa      	ldrb	r2, [r7, #3]
 80051f0:	4613      	mov	r3, r2
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	4413      	add	r3, r2
 80051f6:	00db      	lsls	r3, r3, #3
 80051f8:	1a9b      	subs	r3, r3, r2
 80051fa:	4a2c      	ldr	r2, [pc, #176]	; (80052ac <RTC_WeekDayNum+0xe4>)
 80051fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005200:	085a      	lsrs	r2, r3, #1
 8005202:	78bb      	ldrb	r3, [r7, #2]
 8005204:	441a      	add	r2, r3
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	441a      	add	r2, r3
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	3b01      	subs	r3, #1
 800520e:	089b      	lsrs	r3, r3, #2
 8005210:	441a      	add	r2, r3
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	3b01      	subs	r3, #1
 8005216:	4926      	ldr	r1, [pc, #152]	; (80052b0 <RTC_WeekDayNum+0xe8>)
 8005218:	fba1 1303 	umull	r1, r3, r1, r3
 800521c:	095b      	lsrs	r3, r3, #5
 800521e:	1ad2      	subs	r2, r2, r3
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	3b01      	subs	r3, #1
 8005224:	4922      	ldr	r1, [pc, #136]	; (80052b0 <RTC_WeekDayNum+0xe8>)
 8005226:	fba1 1303 	umull	r1, r3, r1, r3
 800522a:	09db      	lsrs	r3, r3, #7
 800522c:	4413      	add	r3, r2
 800522e:	1d1a      	adds	r2, r3, #4
 8005230:	4b20      	ldr	r3, [pc, #128]	; (80052b4 <RTC_WeekDayNum+0xec>)
 8005232:	fba3 1302 	umull	r1, r3, r3, r2
 8005236:	1ad1      	subs	r1, r2, r3
 8005238:	0849      	lsrs	r1, r1, #1
 800523a:	440b      	add	r3, r1
 800523c:	0899      	lsrs	r1, r3, #2
 800523e:	460b      	mov	r3, r1
 8005240:	00db      	lsls	r3, r3, #3
 8005242:	1a5b      	subs	r3, r3, r1
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	e029      	b.n	800529e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800524a:	78fa      	ldrb	r2, [r7, #3]
 800524c:	4613      	mov	r3, r2
 800524e:	005b      	lsls	r3, r3, #1
 8005250:	4413      	add	r3, r2
 8005252:	00db      	lsls	r3, r3, #3
 8005254:	1a9b      	subs	r3, r3, r2
 8005256:	4a15      	ldr	r2, [pc, #84]	; (80052ac <RTC_WeekDayNum+0xe4>)
 8005258:	fba2 2303 	umull	r2, r3, r2, r3
 800525c:	085a      	lsrs	r2, r3, #1
 800525e:	78bb      	ldrb	r3, [r7, #2]
 8005260:	441a      	add	r2, r3
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	441a      	add	r2, r3
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	089b      	lsrs	r3, r3, #2
 800526a:	441a      	add	r2, r3
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	4910      	ldr	r1, [pc, #64]	; (80052b0 <RTC_WeekDayNum+0xe8>)
 8005270:	fba1 1303 	umull	r1, r3, r1, r3
 8005274:	095b      	lsrs	r3, r3, #5
 8005276:	1ad2      	subs	r2, r2, r3
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	490d      	ldr	r1, [pc, #52]	; (80052b0 <RTC_WeekDayNum+0xe8>)
 800527c:	fba1 1303 	umull	r1, r3, r1, r3
 8005280:	09db      	lsrs	r3, r3, #7
 8005282:	4413      	add	r3, r2
 8005284:	1c9a      	adds	r2, r3, #2
 8005286:	4b0b      	ldr	r3, [pc, #44]	; (80052b4 <RTC_WeekDayNum+0xec>)
 8005288:	fba3 1302 	umull	r1, r3, r3, r2
 800528c:	1ad1      	subs	r1, r2, r3
 800528e:	0849      	lsrs	r1, r1, #1
 8005290:	440b      	add	r3, r1
 8005292:	0899      	lsrs	r1, r3, #2
 8005294:	460b      	mov	r3, r1
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	1a5b      	subs	r3, r3, r1
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	b2db      	uxtb	r3, r3
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bc80      	pop	{r7}
 80052aa:	4770      	bx	lr
 80052ac:	38e38e39 	.word	0x38e38e39
 80052b0:	51eb851f 	.word	0x51eb851f
 80052b4:	24924925 	.word	0x24924925

080052b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e0b2      	b.n	8005430 <HAL_TIM_Base_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a5a      	ldr	r2, [pc, #360]	; (8005438 <HAL_TIM_Base_Init+0x180>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d027      	beq.n	8005324 <HAL_TIM_Base_Init+0x6c>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a58      	ldr	r2, [pc, #352]	; (800543c <HAL_TIM_Base_Init+0x184>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d022      	beq.n	8005324 <HAL_TIM_Base_Init+0x6c>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052e6:	d01d      	beq.n	8005324 <HAL_TIM_Base_Init+0x6c>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a54      	ldr	r2, [pc, #336]	; (8005440 <HAL_TIM_Base_Init+0x188>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d018      	beq.n	8005324 <HAL_TIM_Base_Init+0x6c>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a53      	ldr	r2, [pc, #332]	; (8005444 <HAL_TIM_Base_Init+0x18c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d013      	beq.n	8005324 <HAL_TIM_Base_Init+0x6c>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a51      	ldr	r2, [pc, #324]	; (8005448 <HAL_TIM_Base_Init+0x190>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d00e      	beq.n	8005324 <HAL_TIM_Base_Init+0x6c>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a50      	ldr	r2, [pc, #320]	; (800544c <HAL_TIM_Base_Init+0x194>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d009      	beq.n	8005324 <HAL_TIM_Base_Init+0x6c>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a4e      	ldr	r2, [pc, #312]	; (8005450 <HAL_TIM_Base_Init+0x198>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d004      	beq.n	8005324 <HAL_TIM_Base_Init+0x6c>
 800531a:	f240 1113 	movw	r1, #275	; 0x113
 800531e:	484d      	ldr	r0, [pc, #308]	; (8005454 <HAL_TIM_Base_Init+0x19c>)
 8005320:	f7fc f8fe 	bl	8001520 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d014      	beq.n	8005356 <HAL_TIM_Base_Init+0x9e>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	2b10      	cmp	r3, #16
 8005332:	d010      	beq.n	8005356 <HAL_TIM_Base_Init+0x9e>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	2b20      	cmp	r3, #32
 800533a:	d00c      	beq.n	8005356 <HAL_TIM_Base_Init+0x9e>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	2b40      	cmp	r3, #64	; 0x40
 8005342:	d008      	beq.n	8005356 <HAL_TIM_Base_Init+0x9e>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	2b60      	cmp	r3, #96	; 0x60
 800534a:	d004      	beq.n	8005356 <HAL_TIM_Base_Init+0x9e>
 800534c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8005350:	4840      	ldr	r0, [pc, #256]	; (8005454 <HAL_TIM_Base_Init+0x19c>)
 8005352:	f7fc f8e5 	bl	8001520 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00e      	beq.n	800537c <HAL_TIM_Base_Init+0xc4>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005366:	d009      	beq.n	800537c <HAL_TIM_Base_Init+0xc4>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005370:	d004      	beq.n	800537c <HAL_TIM_Base_Init+0xc4>
 8005372:	f240 1115 	movw	r1, #277	; 0x115
 8005376:	4837      	ldr	r0, [pc, #220]	; (8005454 <HAL_TIM_Base_Init+0x19c>)
 8005378:	f7fc f8d2 	bl	8001520 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d008      	beq.n	8005396 <HAL_TIM_Base_Init+0xde>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	2b80      	cmp	r3, #128	; 0x80
 800538a:	d004      	beq.n	8005396 <HAL_TIM_Base_Init+0xde>
 800538c:	f44f 718b 	mov.w	r1, #278	; 0x116
 8005390:	4830      	ldr	r0, [pc, #192]	; (8005454 <HAL_TIM_Base_Init+0x19c>)
 8005392:	f7fc f8c5 	bl	8001520 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d111      	bne.n	80053c6 <HAL_TIM_Base_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f001 ffc0 	bl	8007330 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d102      	bne.n	80053be <HAL_TIM_Base_Init+0x106>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a27      	ldr	r2, [pc, #156]	; (8005458 <HAL_TIM_Base_Init+0x1a0>)
 80053bc:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2202      	movs	r2, #2
 80053ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	3304      	adds	r3, #4
 80053d6:	4619      	mov	r1, r3
 80053d8:	4610      	mov	r0, r2
 80053da:	f001 fbff 	bl	8006bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3708      	adds	r7, #8
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	40012c00 	.word	0x40012c00
 800543c:	40013400 	.word	0x40013400
 8005440:	40000400 	.word	0x40000400
 8005444:	40000800 	.word	0x40000800
 8005448:	40000c00 	.word	0x40000c00
 800544c:	40001000 	.word	0x40001000
 8005450:	40001400 	.word	0x40001400
 8005454:	0800b264 	.word	0x0800b264
 8005458:	08001669 	.word	0x08001669

0800545c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a39      	ldr	r2, [pc, #228]	; (8005550 <HAL_TIM_Base_Start+0xf4>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d027      	beq.n	80054be <HAL_TIM_Base_Start+0x62>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a38      	ldr	r2, [pc, #224]	; (8005554 <HAL_TIM_Base_Start+0xf8>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d022      	beq.n	80054be <HAL_TIM_Base_Start+0x62>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005480:	d01d      	beq.n	80054be <HAL_TIM_Base_Start+0x62>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a34      	ldr	r2, [pc, #208]	; (8005558 <HAL_TIM_Base_Start+0xfc>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d018      	beq.n	80054be <HAL_TIM_Base_Start+0x62>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a32      	ldr	r2, [pc, #200]	; (800555c <HAL_TIM_Base_Start+0x100>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d013      	beq.n	80054be <HAL_TIM_Base_Start+0x62>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a31      	ldr	r2, [pc, #196]	; (8005560 <HAL_TIM_Base_Start+0x104>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d00e      	beq.n	80054be <HAL_TIM_Base_Start+0x62>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a2f      	ldr	r2, [pc, #188]	; (8005564 <HAL_TIM_Base_Start+0x108>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d009      	beq.n	80054be <HAL_TIM_Base_Start+0x62>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a2e      	ldr	r2, [pc, #184]	; (8005568 <HAL_TIM_Base_Start+0x10c>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d004      	beq.n	80054be <HAL_TIM_Base_Start+0x62>
 80054b4:	f44f 71ca 	mov.w	r1, #404	; 0x194
 80054b8:	482c      	ldr	r0, [pc, #176]	; (800556c <HAL_TIM_Base_Start+0x110>)
 80054ba:	f7fc f831 	bl	8001520 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d001      	beq.n	80054ce <HAL_TIM_Base_Start+0x72>
  {
    return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e03c      	b.n	8005548 <HAL_TIM_Base_Start+0xec>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2202      	movs	r2, #2
 80054d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a1d      	ldr	r2, [pc, #116]	; (8005550 <HAL_TIM_Base_Start+0xf4>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d018      	beq.n	8005512 <HAL_TIM_Base_Start+0xb6>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a1b      	ldr	r2, [pc, #108]	; (8005554 <HAL_TIM_Base_Start+0xf8>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d013      	beq.n	8005512 <HAL_TIM_Base_Start+0xb6>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054f2:	d00e      	beq.n	8005512 <HAL_TIM_Base_Start+0xb6>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a17      	ldr	r2, [pc, #92]	; (8005558 <HAL_TIM_Base_Start+0xfc>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d009      	beq.n	8005512 <HAL_TIM_Base_Start+0xb6>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a16      	ldr	r2, [pc, #88]	; (800555c <HAL_TIM_Base_Start+0x100>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d004      	beq.n	8005512 <HAL_TIM_Base_Start+0xb6>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a14      	ldr	r2, [pc, #80]	; (8005560 <HAL_TIM_Base_Start+0x104>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d111      	bne.n	8005536 <HAL_TIM_Base_Start+0xda>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f003 0307 	and.w	r3, r3, #7
 800551c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2b06      	cmp	r3, #6
 8005522:	d010      	beq.n	8005546 <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f042 0201 	orr.w	r2, r2, #1
 8005532:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005534:	e007      	b.n	8005546 <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f042 0201 	orr.w	r2, r2, #1
 8005544:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	40012c00 	.word	0x40012c00
 8005554:	40013400 	.word	0x40013400
 8005558:	40000400 	.word	0x40000400
 800555c:	40000800 	.word	0x40000800
 8005560:	40000c00 	.word	0x40000c00
 8005564:	40001000 	.word	0x40001000
 8005568:	40001400 	.word	0x40001400
 800556c:	0800b264 	.word	0x0800b264

08005570 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a3d      	ldr	r2, [pc, #244]	; (8005674 <HAL_TIM_Base_Start_IT+0x104>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d027      	beq.n	80055d2 <HAL_TIM_Base_Start_IT+0x62>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a3c      	ldr	r2, [pc, #240]	; (8005678 <HAL_TIM_Base_Start_IT+0x108>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d022      	beq.n	80055d2 <HAL_TIM_Base_Start_IT+0x62>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005594:	d01d      	beq.n	80055d2 <HAL_TIM_Base_Start_IT+0x62>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a38      	ldr	r2, [pc, #224]	; (800567c <HAL_TIM_Base_Start_IT+0x10c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d018      	beq.n	80055d2 <HAL_TIM_Base_Start_IT+0x62>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a36      	ldr	r2, [pc, #216]	; (8005680 <HAL_TIM_Base_Start_IT+0x110>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d013      	beq.n	80055d2 <HAL_TIM_Base_Start_IT+0x62>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a35      	ldr	r2, [pc, #212]	; (8005684 <HAL_TIM_Base_Start_IT+0x114>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d00e      	beq.n	80055d2 <HAL_TIM_Base_Start_IT+0x62>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a33      	ldr	r2, [pc, #204]	; (8005688 <HAL_TIM_Base_Start_IT+0x118>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d009      	beq.n	80055d2 <HAL_TIM_Base_Start_IT+0x62>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a32      	ldr	r2, [pc, #200]	; (800568c <HAL_TIM_Base_Start_IT+0x11c>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d004      	beq.n	80055d2 <HAL_TIM_Base_Start_IT+0x62>
 80055c8:	f240 11cf 	movw	r1, #463	; 0x1cf
 80055cc:	4830      	ldr	r0, [pc, #192]	; (8005690 <HAL_TIM_Base_Start_IT+0x120>)
 80055ce:	f7fb ffa7 	bl	8001520 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d001      	beq.n	80055e2 <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e044      	b.n	800566c <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2202      	movs	r2, #2
 80055e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68da      	ldr	r2, [r3, #12]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f042 0201 	orr.w	r2, r2, #1
 80055f8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a1d      	ldr	r2, [pc, #116]	; (8005674 <HAL_TIM_Base_Start_IT+0x104>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d018      	beq.n	8005636 <HAL_TIM_Base_Start_IT+0xc6>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a1b      	ldr	r2, [pc, #108]	; (8005678 <HAL_TIM_Base_Start_IT+0x108>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d013      	beq.n	8005636 <HAL_TIM_Base_Start_IT+0xc6>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005616:	d00e      	beq.n	8005636 <HAL_TIM_Base_Start_IT+0xc6>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a17      	ldr	r2, [pc, #92]	; (800567c <HAL_TIM_Base_Start_IT+0x10c>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d009      	beq.n	8005636 <HAL_TIM_Base_Start_IT+0xc6>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a16      	ldr	r2, [pc, #88]	; (8005680 <HAL_TIM_Base_Start_IT+0x110>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d004      	beq.n	8005636 <HAL_TIM_Base_Start_IT+0xc6>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a14      	ldr	r2, [pc, #80]	; (8005684 <HAL_TIM_Base_Start_IT+0x114>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d111      	bne.n	800565a <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f003 0307 	and.w	r3, r3, #7
 8005640:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2b06      	cmp	r3, #6
 8005646:	d010      	beq.n	800566a <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f042 0201 	orr.w	r2, r2, #1
 8005656:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005658:	e007      	b.n	800566a <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f042 0201 	orr.w	r2, r2, #1
 8005668:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	40012c00 	.word	0x40012c00
 8005678:	40013400 	.word	0x40013400
 800567c:	40000400 	.word	0x40000400
 8005680:	40000800 	.word	0x40000800
 8005684:	40000c00 	.word	0x40000c00
 8005688:	40001000 	.word	0x40001000
 800568c:	40001400 	.word	0x40001400
 8005690:	0800b264 	.word	0x0800b264

08005694 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e0b2      	b.n	800580c <HAL_TIM_PWM_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a5a      	ldr	r2, [pc, #360]	; (8005814 <HAL_TIM_PWM_Init+0x180>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d027      	beq.n	8005700 <HAL_TIM_PWM_Init+0x6c>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a58      	ldr	r2, [pc, #352]	; (8005818 <HAL_TIM_PWM_Init+0x184>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d022      	beq.n	8005700 <HAL_TIM_PWM_Init+0x6c>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c2:	d01d      	beq.n	8005700 <HAL_TIM_PWM_Init+0x6c>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a54      	ldr	r2, [pc, #336]	; (800581c <HAL_TIM_PWM_Init+0x188>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d018      	beq.n	8005700 <HAL_TIM_PWM_Init+0x6c>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a53      	ldr	r2, [pc, #332]	; (8005820 <HAL_TIM_PWM_Init+0x18c>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d013      	beq.n	8005700 <HAL_TIM_PWM_Init+0x6c>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a51      	ldr	r2, [pc, #324]	; (8005824 <HAL_TIM_PWM_Init+0x190>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d00e      	beq.n	8005700 <HAL_TIM_PWM_Init+0x6c>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a50      	ldr	r2, [pc, #320]	; (8005828 <HAL_TIM_PWM_Init+0x194>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d009      	beq.n	8005700 <HAL_TIM_PWM_Init+0x6c>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a4e      	ldr	r2, [pc, #312]	; (800582c <HAL_TIM_PWM_Init+0x198>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d004      	beq.n	8005700 <HAL_TIM_PWM_Init+0x6c>
 80056f6:	f240 5113 	movw	r1, #1299	; 0x513
 80056fa:	484d      	ldr	r0, [pc, #308]	; (8005830 <HAL_TIM_PWM_Init+0x19c>)
 80056fc:	f7fb ff10 	bl	8001520 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d014      	beq.n	8005732 <HAL_TIM_PWM_Init+0x9e>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	2b10      	cmp	r3, #16
 800570e:	d010      	beq.n	8005732 <HAL_TIM_PWM_Init+0x9e>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	2b20      	cmp	r3, #32
 8005716:	d00c      	beq.n	8005732 <HAL_TIM_PWM_Init+0x9e>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	2b40      	cmp	r3, #64	; 0x40
 800571e:	d008      	beq.n	8005732 <HAL_TIM_PWM_Init+0x9e>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	2b60      	cmp	r3, #96	; 0x60
 8005726:	d004      	beq.n	8005732 <HAL_TIM_PWM_Init+0x9e>
 8005728:	f240 5114 	movw	r1, #1300	; 0x514
 800572c:	4840      	ldr	r0, [pc, #256]	; (8005830 <HAL_TIM_PWM_Init+0x19c>)
 800572e:	f7fb fef7 	bl	8001520 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00e      	beq.n	8005758 <HAL_TIM_PWM_Init+0xc4>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005742:	d009      	beq.n	8005758 <HAL_TIM_PWM_Init+0xc4>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800574c:	d004      	beq.n	8005758 <HAL_TIM_PWM_Init+0xc4>
 800574e:	f240 5115 	movw	r1, #1301	; 0x515
 8005752:	4837      	ldr	r0, [pc, #220]	; (8005830 <HAL_TIM_PWM_Init+0x19c>)
 8005754:	f7fb fee4 	bl	8001520 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d008      	beq.n	8005772 <HAL_TIM_PWM_Init+0xde>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	2b80      	cmp	r3, #128	; 0x80
 8005766:	d004      	beq.n	8005772 <HAL_TIM_PWM_Init+0xde>
 8005768:	f240 5116 	movw	r1, #1302	; 0x516
 800576c:	4830      	ldr	r0, [pc, #192]	; (8005830 <HAL_TIM_PWM_Init+0x19c>)
 800576e:	f7fb fed7 	bl	8001520 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d111      	bne.n	80057a2 <HAL_TIM_PWM_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f001 fdd2 	bl	8007330 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005790:	2b00      	cmp	r3, #0
 8005792:	d102      	bne.n	800579a <HAL_TIM_PWM_Init+0x106>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a27      	ldr	r2, [pc, #156]	; (8005834 <HAL_TIM_PWM_Init+0x1a0>)
 8005798:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2202      	movs	r2, #2
 80057a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	3304      	adds	r3, #4
 80057b2:	4619      	mov	r1, r3
 80057b4:	4610      	mov	r0, r2
 80057b6:	f001 fa11 	bl	8006bdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3708      	adds	r7, #8
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	40012c00 	.word	0x40012c00
 8005818:	40013400 	.word	0x40013400
 800581c:	40000400 	.word	0x40000400
 8005820:	40000800 	.word	0x40000800
 8005824:	40000c00 	.word	0x40000c00
 8005828:	40001000 	.word	0x40001000
 800582c:	40001400 	.word	0x40001400
 8005830:	0800b264 	.word	0x0800b264
 8005834:	08005839 	.word	0x08005839

08005838 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	bc80      	pop	{r7}
 8005848:	4770      	bx	lr
	...

0800584c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a8a      	ldr	r2, [pc, #552]	; (8005a84 <HAL_TIM_PWM_Start+0x238>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d10b      	bne.n	8005878 <HAL_TIM_PWM_Start+0x2c>
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d062      	beq.n	800592c <HAL_TIM_PWM_Start+0xe0>
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	2b04      	cmp	r3, #4
 800586a:	d05f      	beq.n	800592c <HAL_TIM_PWM_Start+0xe0>
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	2b08      	cmp	r3, #8
 8005870:	d05c      	beq.n	800592c <HAL_TIM_PWM_Start+0xe0>
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	2b0c      	cmp	r3, #12
 8005876:	d059      	beq.n	800592c <HAL_TIM_PWM_Start+0xe0>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a82      	ldr	r2, [pc, #520]	; (8005a88 <HAL_TIM_PWM_Start+0x23c>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d10b      	bne.n	800589a <HAL_TIM_PWM_Start+0x4e>
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d051      	beq.n	800592c <HAL_TIM_PWM_Start+0xe0>
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	2b04      	cmp	r3, #4
 800588c:	d04e      	beq.n	800592c <HAL_TIM_PWM_Start+0xe0>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b08      	cmp	r3, #8
 8005892:	d04b      	beq.n	800592c <HAL_TIM_PWM_Start+0xe0>
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	2b0c      	cmp	r3, #12
 8005898:	d048      	beq.n	800592c <HAL_TIM_PWM_Start+0xe0>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058a2:	d10b      	bne.n	80058bc <HAL_TIM_PWM_Start+0x70>
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d040      	beq.n	800592c <HAL_TIM_PWM_Start+0xe0>
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b04      	cmp	r3, #4
 80058ae:	d03d      	beq.n	800592c <HAL_TIM_PWM_Start+0xe0>
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	2b08      	cmp	r3, #8
 80058b4:	d03a      	beq.n	800592c <HAL_TIM_PWM_Start+0xe0>
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	2b0c      	cmp	r3, #12
 80058ba:	d037      	beq.n	800592c <HAL_TIM_PWM_Start+0xe0>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a72      	ldr	r2, [pc, #456]	; (8005a8c <HAL_TIM_PWM_Start+0x240>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d10b      	bne.n	80058de <HAL_TIM_PWM_Start+0x92>
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d02f      	beq.n	800592c <HAL_TIM_PWM_Start+0xe0>
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	2b04      	cmp	r3, #4
 80058d0:	d02c      	beq.n	800592c <HAL_TIM_PWM_Start+0xe0>
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b08      	cmp	r3, #8
 80058d6:	d029      	beq.n	800592c <HAL_TIM_PWM_Start+0xe0>
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	2b0c      	cmp	r3, #12
 80058dc:	d026      	beq.n	800592c <HAL_TIM_PWM_Start+0xe0>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a6b      	ldr	r2, [pc, #428]	; (8005a90 <HAL_TIM_PWM_Start+0x244>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d10b      	bne.n	8005900 <HAL_TIM_PWM_Start+0xb4>
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d01e      	beq.n	800592c <HAL_TIM_PWM_Start+0xe0>
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	2b04      	cmp	r3, #4
 80058f2:	d01b      	beq.n	800592c <HAL_TIM_PWM_Start+0xe0>
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	2b08      	cmp	r3, #8
 80058f8:	d018      	beq.n	800592c <HAL_TIM_PWM_Start+0xe0>
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	2b0c      	cmp	r3, #12
 80058fe:	d015      	beq.n	800592c <HAL_TIM_PWM_Start+0xe0>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a63      	ldr	r2, [pc, #396]	; (8005a94 <HAL_TIM_PWM_Start+0x248>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d10b      	bne.n	8005922 <HAL_TIM_PWM_Start+0xd6>
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00d      	beq.n	800592c <HAL_TIM_PWM_Start+0xe0>
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	2b04      	cmp	r3, #4
 8005914:	d00a      	beq.n	800592c <HAL_TIM_PWM_Start+0xe0>
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	2b08      	cmp	r3, #8
 800591a:	d007      	beq.n	800592c <HAL_TIM_PWM_Start+0xe0>
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	2b0c      	cmp	r3, #12
 8005920:	d004      	beq.n	800592c <HAL_TIM_PWM_Start+0xe0>
 8005922:	f240 5199 	movw	r1, #1433	; 0x599
 8005926:	485c      	ldr	r0, [pc, #368]	; (8005a98 <HAL_TIM_PWM_Start+0x24c>)
 8005928:	f7fb fdfa 	bl	8001520 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d109      	bne.n	8005946 <HAL_TIM_PWM_Start+0xfa>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b01      	cmp	r3, #1
 800593c:	bf14      	ite	ne
 800593e:	2301      	movne	r3, #1
 8005940:	2300      	moveq	r3, #0
 8005942:	b2db      	uxtb	r3, r3
 8005944:	e022      	b.n	800598c <HAL_TIM_PWM_Start+0x140>
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2b04      	cmp	r3, #4
 800594a:	d109      	bne.n	8005960 <HAL_TIM_PWM_Start+0x114>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b01      	cmp	r3, #1
 8005956:	bf14      	ite	ne
 8005958:	2301      	movne	r3, #1
 800595a:	2300      	moveq	r3, #0
 800595c:	b2db      	uxtb	r3, r3
 800595e:	e015      	b.n	800598c <HAL_TIM_PWM_Start+0x140>
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	2b08      	cmp	r3, #8
 8005964:	d109      	bne.n	800597a <HAL_TIM_PWM_Start+0x12e>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b01      	cmp	r3, #1
 8005970:	bf14      	ite	ne
 8005972:	2301      	movne	r3, #1
 8005974:	2300      	moveq	r3, #0
 8005976:	b2db      	uxtb	r3, r3
 8005978:	e008      	b.n	800598c <HAL_TIM_PWM_Start+0x140>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b01      	cmp	r3, #1
 8005984:	bf14      	ite	ne
 8005986:	2301      	movne	r3, #1
 8005988:	2300      	moveq	r3, #0
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d001      	beq.n	8005994 <HAL_TIM_PWM_Start+0x148>
  {
    return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e072      	b.n	8005a7a <HAL_TIM_PWM_Start+0x22e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d104      	bne.n	80059a4 <HAL_TIM_PWM_Start+0x158>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2202      	movs	r2, #2
 800599e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059a2:	e013      	b.n	80059cc <HAL_TIM_PWM_Start+0x180>
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	2b04      	cmp	r3, #4
 80059a8:	d104      	bne.n	80059b4 <HAL_TIM_PWM_Start+0x168>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2202      	movs	r2, #2
 80059ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059b2:	e00b      	b.n	80059cc <HAL_TIM_PWM_Start+0x180>
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	2b08      	cmp	r3, #8
 80059b8:	d104      	bne.n	80059c4 <HAL_TIM_PWM_Start+0x178>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2202      	movs	r2, #2
 80059be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059c2:	e003      	b.n	80059cc <HAL_TIM_PWM_Start+0x180>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2202      	movs	r2, #2
 80059c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2201      	movs	r2, #1
 80059d2:	6839      	ldr	r1, [r7, #0]
 80059d4:	4618      	mov	r0, r3
 80059d6:	f001 fc4b 	bl	8007270 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a29      	ldr	r2, [pc, #164]	; (8005a84 <HAL_TIM_PWM_Start+0x238>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d004      	beq.n	80059ee <HAL_TIM_PWM_Start+0x1a2>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a27      	ldr	r2, [pc, #156]	; (8005a88 <HAL_TIM_PWM_Start+0x23c>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d101      	bne.n	80059f2 <HAL_TIM_PWM_Start+0x1a6>
 80059ee:	2301      	movs	r3, #1
 80059f0:	e000      	b.n	80059f4 <HAL_TIM_PWM_Start+0x1a8>
 80059f2:	2300      	movs	r3, #0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d007      	beq.n	8005a08 <HAL_TIM_PWM_Start+0x1bc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a06:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a1d      	ldr	r2, [pc, #116]	; (8005a84 <HAL_TIM_PWM_Start+0x238>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d018      	beq.n	8005a44 <HAL_TIM_PWM_Start+0x1f8>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a1c      	ldr	r2, [pc, #112]	; (8005a88 <HAL_TIM_PWM_Start+0x23c>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d013      	beq.n	8005a44 <HAL_TIM_PWM_Start+0x1f8>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a24:	d00e      	beq.n	8005a44 <HAL_TIM_PWM_Start+0x1f8>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a18      	ldr	r2, [pc, #96]	; (8005a8c <HAL_TIM_PWM_Start+0x240>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d009      	beq.n	8005a44 <HAL_TIM_PWM_Start+0x1f8>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a16      	ldr	r2, [pc, #88]	; (8005a90 <HAL_TIM_PWM_Start+0x244>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d004      	beq.n	8005a44 <HAL_TIM_PWM_Start+0x1f8>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a15      	ldr	r2, [pc, #84]	; (8005a94 <HAL_TIM_PWM_Start+0x248>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d111      	bne.n	8005a68 <HAL_TIM_PWM_Start+0x21c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f003 0307 	and.w	r3, r3, #7
 8005a4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2b06      	cmp	r3, #6
 8005a54:	d010      	beq.n	8005a78 <HAL_TIM_PWM_Start+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f042 0201 	orr.w	r2, r2, #1
 8005a64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a66:	e007      	b.n	8005a78 <HAL_TIM_PWM_Start+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f042 0201 	orr.w	r2, r2, #1
 8005a76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	40012c00 	.word	0x40012c00
 8005a88:	40013400 	.word	0x40013400
 8005a8c:	40000400 	.word	0x40000400
 8005a90:	40000800 	.word	0x40000800
 8005a94:	40000c00 	.word	0x40000c00
 8005a98:	0800b264 	.word	0x0800b264

08005a9c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b086      	sub	sp, #24
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d101      	bne.n	8005ab0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e192      	b.n	8005dd6 <HAL_TIM_Encoder_Init+0x33a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a7d      	ldr	r2, [pc, #500]	; (8005cac <HAL_TIM_Encoder_Init+0x210>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d01d      	beq.n	8005af6 <HAL_TIM_Encoder_Init+0x5a>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a7c      	ldr	r2, [pc, #496]	; (8005cb0 <HAL_TIM_Encoder_Init+0x214>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d018      	beq.n	8005af6 <HAL_TIM_Encoder_Init+0x5a>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005acc:	d013      	beq.n	8005af6 <HAL_TIM_Encoder_Init+0x5a>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a78      	ldr	r2, [pc, #480]	; (8005cb4 <HAL_TIM_Encoder_Init+0x218>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d00e      	beq.n	8005af6 <HAL_TIM_Encoder_Init+0x5a>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a76      	ldr	r2, [pc, #472]	; (8005cb8 <HAL_TIM_Encoder_Init+0x21c>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d009      	beq.n	8005af6 <HAL_TIM_Encoder_Init+0x5a>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a75      	ldr	r2, [pc, #468]	; (8005cbc <HAL_TIM_Encoder_Init+0x220>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d004      	beq.n	8005af6 <HAL_TIM_Encoder_Init+0x5a>
 8005aec:	f640 318e 	movw	r1, #2958	; 0xb8e
 8005af0:	4873      	ldr	r0, [pc, #460]	; (8005cc0 <HAL_TIM_Encoder_Init+0x224>)
 8005af2:	f7fb fd15 	bl	8001520 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d014      	beq.n	8005b28 <HAL_TIM_Encoder_Init+0x8c>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	2b10      	cmp	r3, #16
 8005b04:	d010      	beq.n	8005b28 <HAL_TIM_Encoder_Init+0x8c>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	2b20      	cmp	r3, #32
 8005b0c:	d00c      	beq.n	8005b28 <HAL_TIM_Encoder_Init+0x8c>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	2b40      	cmp	r3, #64	; 0x40
 8005b14:	d008      	beq.n	8005b28 <HAL_TIM_Encoder_Init+0x8c>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	2b60      	cmp	r3, #96	; 0x60
 8005b1c:	d004      	beq.n	8005b28 <HAL_TIM_Encoder_Init+0x8c>
 8005b1e:	f640 318f 	movw	r1, #2959	; 0xb8f
 8005b22:	4867      	ldr	r0, [pc, #412]	; (8005cc0 <HAL_TIM_Encoder_Init+0x224>)
 8005b24:	f7fb fcfc 	bl	8001520 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00e      	beq.n	8005b4e <HAL_TIM_Encoder_Init+0xb2>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b38:	d009      	beq.n	8005b4e <HAL_TIM_Encoder_Init+0xb2>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b42:	d004      	beq.n	8005b4e <HAL_TIM_Encoder_Init+0xb2>
 8005b44:	f44f 6139 	mov.w	r1, #2960	; 0xb90
 8005b48:	485d      	ldr	r0, [pc, #372]	; (8005cc0 <HAL_TIM_Encoder_Init+0x224>)
 8005b4a:	f7fb fce9 	bl	8001520 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d008      	beq.n	8005b68 <HAL_TIM_Encoder_Init+0xcc>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	2b80      	cmp	r3, #128	; 0x80
 8005b5c:	d004      	beq.n	8005b68 <HAL_TIM_Encoder_Init+0xcc>
 8005b5e:	f640 3191 	movw	r1, #2961	; 0xb91
 8005b62:	4857      	ldr	r0, [pc, #348]	; (8005cc0 <HAL_TIM_Encoder_Init+0x224>)
 8005b64:	f7fb fcdc 	bl	8001520 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d00c      	beq.n	8005b8a <HAL_TIM_Encoder_Init+0xee>
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	d008      	beq.n	8005b8a <HAL_TIM_Encoder_Init+0xee>
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2b03      	cmp	r3, #3
 8005b7e:	d004      	beq.n	8005b8a <HAL_TIM_Encoder_Init+0xee>
 8005b80:	f640 3192 	movw	r1, #2962	; 0xb92
 8005b84:	484e      	ldr	r0, [pc, #312]	; (8005cc0 <HAL_TIM_Encoder_Init+0x224>)
 8005b86:	f7fb fccb 	bl	8001520 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d00c      	beq.n	8005bac <HAL_TIM_Encoder_Init+0x110>
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d008      	beq.n	8005bac <HAL_TIM_Encoder_Init+0x110>
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	2b03      	cmp	r3, #3
 8005ba0:	d004      	beq.n	8005bac <HAL_TIM_Encoder_Init+0x110>
 8005ba2:	f640 3193 	movw	r1, #2963	; 0xb93
 8005ba6:	4846      	ldr	r0, [pc, #280]	; (8005cc0 <HAL_TIM_Encoder_Init+0x224>)
 8005ba8:	f7fb fcba 	bl	8001520 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d00c      	beq.n	8005bce <HAL_TIM_Encoder_Init+0x132>
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	d008      	beq.n	8005bce <HAL_TIM_Encoder_Init+0x132>
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	2b03      	cmp	r3, #3
 8005bc2:	d004      	beq.n	8005bce <HAL_TIM_Encoder_Init+0x132>
 8005bc4:	f640 3194 	movw	r1, #2964	; 0xb94
 8005bc8:	483d      	ldr	r0, [pc, #244]	; (8005cc0 <HAL_TIM_Encoder_Init+0x224>)
 8005bca:	f7fb fca9 	bl	8001520 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d008      	beq.n	8005be8 <HAL_TIM_Encoder_Init+0x14c>
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d004      	beq.n	8005be8 <HAL_TIM_Encoder_Init+0x14c>
 8005bde:	f640 3195 	movw	r1, #2965	; 0xb95
 8005be2:	4837      	ldr	r0, [pc, #220]	; (8005cc0 <HAL_TIM_Encoder_Init+0x224>)
 8005be4:	f7fb fc9c 	bl	8001520 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d008      	beq.n	8005c02 <HAL_TIM_Encoder_Init+0x166>
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d004      	beq.n	8005c02 <HAL_TIM_Encoder_Init+0x166>
 8005bf8:	f640 3196 	movw	r1, #2966	; 0xb96
 8005bfc:	4830      	ldr	r0, [pc, #192]	; (8005cc0 <HAL_TIM_Encoder_Init+0x224>)
 8005bfe:	f7fb fc8f 	bl	8001520 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d010      	beq.n	8005c2c <HAL_TIM_Encoder_Init+0x190>
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	2b04      	cmp	r3, #4
 8005c10:	d00c      	beq.n	8005c2c <HAL_TIM_Encoder_Init+0x190>
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	2b08      	cmp	r3, #8
 8005c18:	d008      	beq.n	8005c2c <HAL_TIM_Encoder_Init+0x190>
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	2b0c      	cmp	r3, #12
 8005c20:	d004      	beq.n	8005c2c <HAL_TIM_Encoder_Init+0x190>
 8005c22:	f640 3197 	movw	r1, #2967	; 0xb97
 8005c26:	4826      	ldr	r0, [pc, #152]	; (8005cc0 <HAL_TIM_Encoder_Init+0x224>)
 8005c28:	f7fb fc7a 	bl	8001520 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	69db      	ldr	r3, [r3, #28]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d010      	beq.n	8005c56 <HAL_TIM_Encoder_Init+0x1ba>
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	69db      	ldr	r3, [r3, #28]
 8005c38:	2b04      	cmp	r3, #4
 8005c3a:	d00c      	beq.n	8005c56 <HAL_TIM_Encoder_Init+0x1ba>
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	69db      	ldr	r3, [r3, #28]
 8005c40:	2b08      	cmp	r3, #8
 8005c42:	d008      	beq.n	8005c56 <HAL_TIM_Encoder_Init+0x1ba>
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	69db      	ldr	r3, [r3, #28]
 8005c48:	2b0c      	cmp	r3, #12
 8005c4a:	d004      	beq.n	8005c56 <HAL_TIM_Encoder_Init+0x1ba>
 8005c4c:	f640 3198 	movw	r1, #2968	; 0xb98
 8005c50:	481b      	ldr	r0, [pc, #108]	; (8005cc0 <HAL_TIM_Encoder_Init+0x224>)
 8005c52:	f7fb fc65 	bl	8001520 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	2b0f      	cmp	r3, #15
 8005c5c:	d904      	bls.n	8005c68 <HAL_TIM_Encoder_Init+0x1cc>
 8005c5e:	f640 3199 	movw	r1, #2969	; 0xb99
 8005c62:	4817      	ldr	r0, [pc, #92]	; (8005cc0 <HAL_TIM_Encoder_Init+0x224>)
 8005c64:	f7fb fc5c 	bl	8001520 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	6a1b      	ldr	r3, [r3, #32]
 8005c6c:	2b0f      	cmp	r3, #15
 8005c6e:	d904      	bls.n	8005c7a <HAL_TIM_Encoder_Init+0x1de>
 8005c70:	f640 319a 	movw	r1, #2970	; 0xb9a
 8005c74:	4812      	ldr	r0, [pc, #72]	; (8005cc0 <HAL_TIM_Encoder_Init+0x224>)
 8005c76:	f7fb fc53 	bl	8001520 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d120      	bne.n	8005cc8 <HAL_TIM_Encoder_Init+0x22c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f001 fb4e 	bl	8007330 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d102      	bne.n	8005ca2 <HAL_TIM_Encoder_Init+0x206>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a09      	ldr	r2, [pc, #36]	; (8005cc4 <HAL_TIM_Encoder_Init+0x228>)
 8005ca0:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	4798      	blx	r3
 8005caa:	e00d      	b.n	8005cc8 <HAL_TIM_Encoder_Init+0x22c>
 8005cac:	40012c00 	.word	0x40012c00
 8005cb0:	40013400 	.word	0x40013400
 8005cb4:	40000400 	.word	0x40000400
 8005cb8:	40000800 	.word	0x40000800
 8005cbc:	40000c00 	.word	0x40000c00
 8005cc0:	0800b264 	.word	0x0800b264
 8005cc4:	0800172d 	.word	0x0800172d
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2202      	movs	r2, #2
 8005ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	6812      	ldr	r2, [r2, #0]
 8005cda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cde:	f023 0307 	bic.w	r3, r3, #7
 8005ce2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	3304      	adds	r3, #4
 8005cec:	4619      	mov	r1, r3
 8005cee:	4610      	mov	r0, r2
 8005cf0:	f000 ff74 	bl	8006bdc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d1c:	f023 0303 	bic.w	r3, r3, #3
 8005d20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	689a      	ldr	r2, [r3, #8]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	021b      	lsls	r3, r3, #8
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005d3a:	f023 030c 	bic.w	r3, r3, #12
 8005d3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	68da      	ldr	r2, [r3, #12]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	69db      	ldr	r3, [r3, #28]
 8005d54:	021b      	lsls	r3, r3, #8
 8005d56:	4313      	orrs	r3, r2
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	011a      	lsls	r2, r3, #4
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	031b      	lsls	r3, r3, #12
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005d78:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	011b      	lsls	r3, r3, #4
 8005d84:	4313      	orrs	r3, r2
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	697a      	ldr	r2, [r7, #20]
 8005d92:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3718      	adds	r7, #24
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop

08005de0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005df0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005df8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e00:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e08:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a5d      	ldr	r2, [pc, #372]	; (8005f84 <HAL_TIM_Encoder_Start_IT+0x1a4>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d01d      	beq.n	8005e50 <HAL_TIM_Encoder_Start_IT+0x70>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a5b      	ldr	r2, [pc, #364]	; (8005f88 <HAL_TIM_Encoder_Start_IT+0x1a8>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d018      	beq.n	8005e50 <HAL_TIM_Encoder_Start_IT+0x70>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e26:	d013      	beq.n	8005e50 <HAL_TIM_Encoder_Start_IT+0x70>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a57      	ldr	r2, [pc, #348]	; (8005f8c <HAL_TIM_Encoder_Start_IT+0x1ac>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d00e      	beq.n	8005e50 <HAL_TIM_Encoder_Start_IT+0x70>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a56      	ldr	r2, [pc, #344]	; (8005f90 <HAL_TIM_Encoder_Start_IT+0x1b0>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d009      	beq.n	8005e50 <HAL_TIM_Encoder_Start_IT+0x70>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a54      	ldr	r2, [pc, #336]	; (8005f94 <HAL_TIM_Encoder_Start_IT+0x1b4>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d004      	beq.n	8005e50 <HAL_TIM_Encoder_Start_IT+0x70>
 8005e46:	f640 41e4 	movw	r1, #3300	; 0xce4
 8005e4a:	4853      	ldr	r0, [pc, #332]	; (8005f98 <HAL_TIM_Encoder_Start_IT+0x1b8>)
 8005e4c:	f7fb fb68 	bl	8001520 <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d110      	bne.n	8005e78 <HAL_TIM_Encoder_Start_IT+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e56:	7bfb      	ldrb	r3, [r7, #15]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d102      	bne.n	8005e62 <HAL_TIM_Encoder_Start_IT+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e5c:	7b7b      	ldrb	r3, [r7, #13]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d001      	beq.n	8005e66 <HAL_TIM_Encoder_Start_IT+0x86>
    {
      return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e089      	b.n	8005f7a <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2202      	movs	r2, #2
 8005e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2202      	movs	r2, #2
 8005e72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e76:	e031      	b.n	8005edc <HAL_TIM_Encoder_Start_IT+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	2b04      	cmp	r3, #4
 8005e7c:	d110      	bne.n	8005ea0 <HAL_TIM_Encoder_Start_IT+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e7e:	7bbb      	ldrb	r3, [r7, #14]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d102      	bne.n	8005e8a <HAL_TIM_Encoder_Start_IT+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e84:	7b3b      	ldrb	r3, [r7, #12]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d001      	beq.n	8005e8e <HAL_TIM_Encoder_Start_IT+0xae>
    {
      return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e075      	b.n	8005f7a <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2202      	movs	r2, #2
 8005e92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2202      	movs	r2, #2
 8005e9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e9e:	e01d      	b.n	8005edc <HAL_TIM_Encoder_Start_IT+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ea0:	7bfb      	ldrb	r3, [r7, #15]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d108      	bne.n	8005eb8 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ea6:	7bbb      	ldrb	r3, [r7, #14]
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d105      	bne.n	8005eb8 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005eac:	7b7b      	ldrb	r3, [r7, #13]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d102      	bne.n	8005eb8 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005eb2:	7b3b      	ldrb	r3, [r7, #12]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d001      	beq.n	8005ebc <HAL_TIM_Encoder_Start_IT+0xdc>
    {
      return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e05e      	b.n	8005f7a <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2202      	movs	r2, #2
 8005ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2202      	movs	r2, #2
 8005ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <HAL_TIM_Encoder_Start_IT+0x10a>
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	2b04      	cmp	r3, #4
 8005ee6:	d010      	beq.n	8005f0a <HAL_TIM_Encoder_Start_IT+0x12a>
 8005ee8:	e01f      	b.n	8005f2a <HAL_TIM_Encoder_Start_IT+0x14a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f001 f9bc 	bl	8007270 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68da      	ldr	r2, [r3, #12]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f042 0202 	orr.w	r2, r2, #2
 8005f06:	60da      	str	r2, [r3, #12]
      break;
 8005f08:	e02e      	b.n	8005f68 <HAL_TIM_Encoder_Start_IT+0x188>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	2104      	movs	r1, #4
 8005f12:	4618      	mov	r0, r3
 8005f14:	f001 f9ac 	bl	8007270 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68da      	ldr	r2, [r3, #12]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f042 0204 	orr.w	r2, r2, #4
 8005f26:	60da      	str	r2, [r3, #12]
      break;
 8005f28:	e01e      	b.n	8005f68 <HAL_TIM_Encoder_Start_IT+0x188>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	2100      	movs	r1, #0
 8005f32:	4618      	mov	r0, r3
 8005f34:	f001 f99c 	bl	8007270 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	2104      	movs	r1, #4
 8005f40:	4618      	mov	r0, r3
 8005f42:	f001 f995 	bl	8007270 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68da      	ldr	r2, [r3, #12]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f042 0202 	orr.w	r2, r2, #2
 8005f54:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68da      	ldr	r2, [r3, #12]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f042 0204 	orr.w	r2, r2, #4
 8005f64:	60da      	str	r2, [r3, #12]
      break;
 8005f66:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f042 0201 	orr.w	r2, r2, #1
 8005f76:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	40012c00 	.word	0x40012c00
 8005f88:	40013400 	.word	0x40013400
 8005f8c:	40000400 	.word	0x40000400
 8005f90:	40000800 	.word	0x40000800
 8005f94:	40000c00 	.word	0x40000c00
 8005f98:	0800b264 	.word	0x0800b264

08005f9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d128      	bne.n	8006004 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	f003 0302 	and.w	r3, r3, #2
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d121      	bne.n	8006004 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f06f 0202 	mvn.w	r2, #2
 8005fc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	f003 0303 	and.w	r3, r3, #3
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d005      	beq.n	8005fea <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	4798      	blx	r3
 8005fe8:	e009      	b.n	8005ffe <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	f003 0304 	and.w	r3, r3, #4
 800600e:	2b04      	cmp	r3, #4
 8006010:	d128      	bne.n	8006064 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	f003 0304 	and.w	r3, r3, #4
 800601c:	2b04      	cmp	r3, #4
 800601e:	d121      	bne.n	8006064 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f06f 0204 	mvn.w	r2, #4
 8006028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2202      	movs	r2, #2
 800602e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800603a:	2b00      	cmp	r3, #0
 800603c:	d005      	beq.n	800604a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	4798      	blx	r3
 8006048:	e009      	b.n	800605e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	f003 0308 	and.w	r3, r3, #8
 800606e:	2b08      	cmp	r3, #8
 8006070:	d128      	bne.n	80060c4 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f003 0308 	and.w	r3, r3, #8
 800607c:	2b08      	cmp	r3, #8
 800607e:	d121      	bne.n	80060c4 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f06f 0208 	mvn.w	r2, #8
 8006088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2204      	movs	r2, #4
 800608e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	69db      	ldr	r3, [r3, #28]
 8006096:	f003 0303 	and.w	r3, r3, #3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d005      	beq.n	80060aa <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	4798      	blx	r3
 80060a8:	e009      	b.n	80060be <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	f003 0310 	and.w	r3, r3, #16
 80060ce:	2b10      	cmp	r3, #16
 80060d0:	d128      	bne.n	8006124 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	f003 0310 	and.w	r3, r3, #16
 80060dc:	2b10      	cmp	r3, #16
 80060de:	d121      	bne.n	8006124 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f06f 0210 	mvn.w	r2, #16
 80060e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2208      	movs	r2, #8
 80060ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d005      	beq.n	800610a <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	4798      	blx	r3
 8006108:	e009      	b.n	800611e <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	2b01      	cmp	r3, #1
 8006130:	d110      	bne.n	8006154 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	f003 0301 	and.w	r3, r3, #1
 800613c:	2b01      	cmp	r3, #1
 800613e:	d109      	bne.n	8006154 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f06f 0201 	mvn.w	r2, #1
 8006148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800615e:	2b80      	cmp	r3, #128	; 0x80
 8006160:	d110      	bne.n	8006184 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800616c:	2b80      	cmp	r3, #128	; 0x80
 800616e:	d109      	bne.n	8006184 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800618e:	2b40      	cmp	r3, #64	; 0x40
 8006190:	d110      	bne.n	80061b4 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619c:	2b40      	cmp	r3, #64	; 0x40
 800619e:	d109      	bne.n	80061b4 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	691b      	ldr	r3, [r3, #16]
 80061ba:	f003 0320 	and.w	r3, r3, #32
 80061be:	2b20      	cmp	r3, #32
 80061c0:	d110      	bne.n	80061e4 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	f003 0320 	and.w	r3, r3, #32
 80061cc:	2b20      	cmp	r3, #32
 80061ce:	d109      	bne.n	80061e4 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f06f 0220 	mvn.w	r2, #32
 80061d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061e4:	bf00      	nop
 80061e6:	3708      	adds	r7, #8
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d010      	beq.n	8006220 <HAL_TIM_PWM_ConfigChannel+0x34>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2b04      	cmp	r3, #4
 8006202:	d00d      	beq.n	8006220 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2b08      	cmp	r3, #8
 8006208:	d00a      	beq.n	8006220 <HAL_TIM_PWM_ConfigChannel+0x34>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2b0c      	cmp	r3, #12
 800620e:	d007      	beq.n	8006220 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b3c      	cmp	r3, #60	; 0x3c
 8006214:	d004      	beq.n	8006220 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006216:	f241 0127 	movw	r1, #4135	; 0x1027
 800621a:	4890      	ldr	r0, [pc, #576]	; (800645c <HAL_TIM_PWM_ConfigChannel+0x270>)
 800621c:	f7fb f980 	bl	8001520 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b60      	cmp	r3, #96	; 0x60
 8006226:	d008      	beq.n	800623a <HAL_TIM_PWM_ConfigChannel+0x4e>
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b70      	cmp	r3, #112	; 0x70
 800622e:	d004      	beq.n	800623a <HAL_TIM_PWM_ConfigChannel+0x4e>
 8006230:	f241 0128 	movw	r1, #4136	; 0x1028
 8006234:	4889      	ldr	r0, [pc, #548]	; (800645c <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006236:	f7fb f973 	bl	8001520 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d008      	beq.n	8006254 <HAL_TIM_PWM_ConfigChannel+0x68>
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	2b02      	cmp	r3, #2
 8006248:	d004      	beq.n	8006254 <HAL_TIM_PWM_ConfigChannel+0x68>
 800624a:	f241 0129 	movw	r1, #4137	; 0x1029
 800624e:	4883      	ldr	r0, [pc, #524]	; (800645c <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006250:	f7fb f966 	bl	8001520 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d008      	beq.n	800626e <HAL_TIM_PWM_ConfigChannel+0x82>
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	2b04      	cmp	r3, #4
 8006262:	d004      	beq.n	800626e <HAL_TIM_PWM_ConfigChannel+0x82>
 8006264:	f241 012a 	movw	r1, #4138	; 0x102a
 8006268:	487c      	ldr	r0, [pc, #496]	; (800645c <HAL_TIM_PWM_ConfigChannel+0x270>)
 800626a:	f7fb f959 	bl	8001520 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006274:	2b01      	cmp	r3, #1
 8006276:	d101      	bne.n	800627c <HAL_TIM_PWM_ConfigChannel+0x90>
 8006278:	2302      	movs	r3, #2
 800627a:	e145      	b.n	8006508 <HAL_TIM_PWM_ConfigChannel+0x31c>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b0c      	cmp	r3, #12
 8006288:	f200 8138 	bhi.w	80064fc <HAL_TIM_PWM_ConfigChannel+0x310>
 800628c:	a201      	add	r2, pc, #4	; (adr r2, 8006294 <HAL_TIM_PWM_ConfigChannel+0xa8>)
 800628e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006292:	bf00      	nop
 8006294:	080062c9 	.word	0x080062c9
 8006298:	080064fd 	.word	0x080064fd
 800629c:	080064fd 	.word	0x080064fd
 80062a0:	080064fd 	.word	0x080064fd
 80062a4:	0800634f 	.word	0x0800634f
 80062a8:	080064fd 	.word	0x080064fd
 80062ac:	080064fd 	.word	0x080064fd
 80062b0:	080064fd 	.word	0x080064fd
 80062b4:	080063d7 	.word	0x080063d7
 80062b8:	080064fd 	.word	0x080064fd
 80062bc:	080064fd 	.word	0x080064fd
 80062c0:	080064fd 	.word	0x080064fd
 80062c4:	08006475 	.word	0x08006475
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a64      	ldr	r2, [pc, #400]	; (8006460 <HAL_TIM_PWM_ConfigChannel+0x274>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d01d      	beq.n	800630e <HAL_TIM_PWM_ConfigChannel+0x122>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a63      	ldr	r2, [pc, #396]	; (8006464 <HAL_TIM_PWM_ConfigChannel+0x278>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d018      	beq.n	800630e <HAL_TIM_PWM_ConfigChannel+0x122>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062e4:	d013      	beq.n	800630e <HAL_TIM_PWM_ConfigChannel+0x122>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a5f      	ldr	r2, [pc, #380]	; (8006468 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d00e      	beq.n	800630e <HAL_TIM_PWM_ConfigChannel+0x122>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a5d      	ldr	r2, [pc, #372]	; (800646c <HAL_TIM_PWM_ConfigChannel+0x280>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d009      	beq.n	800630e <HAL_TIM_PWM_ConfigChannel+0x122>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a5c      	ldr	r2, [pc, #368]	; (8006470 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d004      	beq.n	800630e <HAL_TIM_PWM_ConfigChannel+0x122>
 8006304:	f241 0134 	movw	r1, #4148	; 0x1034
 8006308:	4854      	ldr	r0, [pc, #336]	; (800645c <HAL_TIM_PWM_ConfigChannel+0x270>)
 800630a:	f7fb f909 	bl	8001520 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68b9      	ldr	r1, [r7, #8]
 8006314:	4618      	mov	r0, r3
 8006316:	f000 fcdb 	bl	8006cd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	699a      	ldr	r2, [r3, #24]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f042 0208 	orr.w	r2, r2, #8
 8006328:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	699a      	ldr	r2, [r3, #24]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f022 0204 	bic.w	r2, r2, #4
 8006338:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	6999      	ldr	r1, [r3, #24]
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	691a      	ldr	r2, [r3, #16]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	430a      	orrs	r2, r1
 800634a:	619a      	str	r2, [r3, #24]
      break;
 800634c:	e0d7      	b.n	80064fe <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a43      	ldr	r2, [pc, #268]	; (8006460 <HAL_TIM_PWM_ConfigChannel+0x274>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d01d      	beq.n	8006394 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a41      	ldr	r2, [pc, #260]	; (8006464 <HAL_TIM_PWM_ConfigChannel+0x278>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d018      	beq.n	8006394 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800636a:	d013      	beq.n	8006394 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a3d      	ldr	r2, [pc, #244]	; (8006468 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d00e      	beq.n	8006394 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a3c      	ldr	r2, [pc, #240]	; (800646c <HAL_TIM_PWM_ConfigChannel+0x280>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d009      	beq.n	8006394 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a3a      	ldr	r2, [pc, #232]	; (8006470 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d004      	beq.n	8006394 <HAL_TIM_PWM_ConfigChannel+0x1a8>
 800638a:	f241 0145 	movw	r1, #4165	; 0x1045
 800638e:	4833      	ldr	r0, [pc, #204]	; (800645c <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006390:	f7fb f8c6 	bl	8001520 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68b9      	ldr	r1, [r7, #8]
 800639a:	4618      	mov	r0, r3
 800639c:	f000 fd32 	bl	8006e04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	699a      	ldr	r2, [r3, #24]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	699a      	ldr	r2, [r3, #24]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	6999      	ldr	r1, [r3, #24]
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	021a      	lsls	r2, r3, #8
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	430a      	orrs	r2, r1
 80063d2:	619a      	str	r2, [r3, #24]
      break;
 80063d4:	e093      	b.n	80064fe <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a21      	ldr	r2, [pc, #132]	; (8006460 <HAL_TIM_PWM_ConfigChannel+0x274>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d01d      	beq.n	800641c <HAL_TIM_PWM_ConfigChannel+0x230>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a1f      	ldr	r2, [pc, #124]	; (8006464 <HAL_TIM_PWM_ConfigChannel+0x278>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d018      	beq.n	800641c <HAL_TIM_PWM_ConfigChannel+0x230>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063f2:	d013      	beq.n	800641c <HAL_TIM_PWM_ConfigChannel+0x230>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a1b      	ldr	r2, [pc, #108]	; (8006468 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d00e      	beq.n	800641c <HAL_TIM_PWM_ConfigChannel+0x230>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a1a      	ldr	r2, [pc, #104]	; (800646c <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d009      	beq.n	800641c <HAL_TIM_PWM_ConfigChannel+0x230>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a18      	ldr	r2, [pc, #96]	; (8006470 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d004      	beq.n	800641c <HAL_TIM_PWM_ConfigChannel+0x230>
 8006412:	f241 0156 	movw	r1, #4182	; 0x1056
 8006416:	4811      	ldr	r0, [pc, #68]	; (800645c <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006418:	f7fb f882 	bl	8001520 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68b9      	ldr	r1, [r7, #8]
 8006422:	4618      	mov	r0, r3
 8006424:	f000 fd8c 	bl	8006f40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	69da      	ldr	r2, [r3, #28]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f042 0208 	orr.w	r2, r2, #8
 8006436:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	69da      	ldr	r2, [r3, #28]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f022 0204 	bic.w	r2, r2, #4
 8006446:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	69d9      	ldr	r1, [r3, #28]
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	691a      	ldr	r2, [r3, #16]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	430a      	orrs	r2, r1
 8006458:	61da      	str	r2, [r3, #28]
      break;
 800645a:	e050      	b.n	80064fe <HAL_TIM_PWM_ConfigChannel+0x312>
 800645c:	0800b264 	.word	0x0800b264
 8006460:	40012c00 	.word	0x40012c00
 8006464:	40013400 	.word	0x40013400
 8006468:	40000400 	.word	0x40000400
 800646c:	40000800 	.word	0x40000800
 8006470:	40000c00 	.word	0x40000c00
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a25      	ldr	r2, [pc, #148]	; (8006510 <HAL_TIM_PWM_ConfigChannel+0x324>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d01d      	beq.n	80064ba <HAL_TIM_PWM_ConfigChannel+0x2ce>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a24      	ldr	r2, [pc, #144]	; (8006514 <HAL_TIM_PWM_ConfigChannel+0x328>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d018      	beq.n	80064ba <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006490:	d013      	beq.n	80064ba <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a20      	ldr	r2, [pc, #128]	; (8006518 <HAL_TIM_PWM_ConfigChannel+0x32c>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d00e      	beq.n	80064ba <HAL_TIM_PWM_ConfigChannel+0x2ce>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a1e      	ldr	r2, [pc, #120]	; (800651c <HAL_TIM_PWM_ConfigChannel+0x330>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d009      	beq.n	80064ba <HAL_TIM_PWM_ConfigChannel+0x2ce>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a1d      	ldr	r2, [pc, #116]	; (8006520 <HAL_TIM_PWM_ConfigChannel+0x334>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d004      	beq.n	80064ba <HAL_TIM_PWM_ConfigChannel+0x2ce>
 80064b0:	f241 0167 	movw	r1, #4199	; 0x1067
 80064b4:	481b      	ldr	r0, [pc, #108]	; (8006524 <HAL_TIM_PWM_ConfigChannel+0x338>)
 80064b6:	f7fb f833 	bl	8001520 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68b9      	ldr	r1, [r7, #8]
 80064c0:	4618      	mov	r0, r3
 80064c2:	f000 fddb 	bl	800707c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	69da      	ldr	r2, [r3, #28]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	69da      	ldr	r2, [r3, #28]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	69d9      	ldr	r1, [r3, #28]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	021a      	lsls	r2, r3, #8
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	61da      	str	r2, [r3, #28]
      break;
 80064fa:	e000      	b.n	80064fe <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    default:
      break;
 80064fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	40012c00 	.word	0x40012c00
 8006514:	40013400 	.word	0x40013400
 8006518:	40000400 	.word	0x40000400
 800651c:	40000800 	.word	0x40000800
 8006520:	40000c00 	.word	0x40000c00
 8006524:	0800b264 	.word	0x0800b264

08006528 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006538:	2b01      	cmp	r3, #1
 800653a:	d101      	bne.n	8006540 <HAL_TIM_ConfigClockSource+0x18>
 800653c:	2302      	movs	r3, #2
 800653e:	e2f5      	b.n	8006b2c <HAL_TIM_ConfigClockSource+0x604>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2202      	movs	r2, #2
 800654c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006558:	d029      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0x86>
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006562:	d024      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0x86>
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d020      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0x86>
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b10      	cmp	r3, #16
 8006572:	d01c      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0x86>
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2b20      	cmp	r3, #32
 800657a:	d018      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0x86>
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2b30      	cmp	r3, #48	; 0x30
 8006582:	d014      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0x86>
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2b40      	cmp	r3, #64	; 0x40
 800658a:	d010      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0x86>
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2b50      	cmp	r3, #80	; 0x50
 8006592:	d00c      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0x86>
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2b60      	cmp	r3, #96	; 0x60
 800659a:	d008      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0x86>
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b70      	cmp	r3, #112	; 0x70
 80065a2:	d004      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0x86>
 80065a4:	f241 4132 	movw	r1, #5170	; 0x1432
 80065a8:	487c      	ldr	r0, [pc, #496]	; (800679c <HAL_TIM_ConfigClockSource+0x274>)
 80065aa:	f7fa ffb9 	bl	8001520 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80065bc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065c4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065d6:	f000 80f1 	beq.w	80067bc <HAL_TIM_ConfigClockSource+0x294>
 80065da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065de:	f200 8299 	bhi.w	8006b14 <HAL_TIM_ConfigClockSource+0x5ec>
 80065e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065e6:	d02d      	beq.n	8006644 <HAL_TIM_ConfigClockSource+0x11c>
 80065e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ec:	f200 8292 	bhi.w	8006b14 <HAL_TIM_ConfigClockSource+0x5ec>
 80065f0:	2b70      	cmp	r3, #112	; 0x70
 80065f2:	d05d      	beq.n	80066b0 <HAL_TIM_ConfigClockSource+0x188>
 80065f4:	2b70      	cmp	r3, #112	; 0x70
 80065f6:	f200 828d 	bhi.w	8006b14 <HAL_TIM_ConfigClockSource+0x5ec>
 80065fa:	2b60      	cmp	r3, #96	; 0x60
 80065fc:	f000 81a5 	beq.w	800694a <HAL_TIM_ConfigClockSource+0x422>
 8006600:	2b60      	cmp	r3, #96	; 0x60
 8006602:	f200 8287 	bhi.w	8006b14 <HAL_TIM_ConfigClockSource+0x5ec>
 8006606:	2b50      	cmp	r3, #80	; 0x50
 8006608:	f000 8149 	beq.w	800689e <HAL_TIM_ConfigClockSource+0x376>
 800660c:	2b50      	cmp	r3, #80	; 0x50
 800660e:	f200 8281 	bhi.w	8006b14 <HAL_TIM_ConfigClockSource+0x5ec>
 8006612:	2b40      	cmp	r3, #64	; 0x40
 8006614:	f000 81fc 	beq.w	8006a10 <HAL_TIM_ConfigClockSource+0x4e8>
 8006618:	2b40      	cmp	r3, #64	; 0x40
 800661a:	f200 827b 	bhi.w	8006b14 <HAL_TIM_ConfigClockSource+0x5ec>
 800661e:	2b30      	cmp	r3, #48	; 0x30
 8006620:	f000 824c 	beq.w	8006abc <HAL_TIM_ConfigClockSource+0x594>
 8006624:	2b30      	cmp	r3, #48	; 0x30
 8006626:	f200 8275 	bhi.w	8006b14 <HAL_TIM_ConfigClockSource+0x5ec>
 800662a:	2b20      	cmp	r3, #32
 800662c:	f000 8246 	beq.w	8006abc <HAL_TIM_ConfigClockSource+0x594>
 8006630:	2b20      	cmp	r3, #32
 8006632:	f200 826f 	bhi.w	8006b14 <HAL_TIM_ConfigClockSource+0x5ec>
 8006636:	2b00      	cmp	r3, #0
 8006638:	f000 8240 	beq.w	8006abc <HAL_TIM_ConfigClockSource+0x594>
 800663c:	2b10      	cmp	r3, #16
 800663e:	f000 823d 	beq.w	8006abc <HAL_TIM_ConfigClockSource+0x594>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006642:	e267      	b.n	8006b14 <HAL_TIM_ConfigClockSource+0x5ec>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a55      	ldr	r2, [pc, #340]	; (80067a0 <HAL_TIM_ConfigClockSource+0x278>)
 800664a:	4293      	cmp	r3, r2
 800664c:	f000 8264 	beq.w	8006b18 <HAL_TIM_ConfigClockSource+0x5f0>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a53      	ldr	r2, [pc, #332]	; (80067a4 <HAL_TIM_ConfigClockSource+0x27c>)
 8006656:	4293      	cmp	r3, r2
 8006658:	f000 825e 	beq.w	8006b18 <HAL_TIM_ConfigClockSource+0x5f0>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006664:	f000 8258 	beq.w	8006b18 <HAL_TIM_ConfigClockSource+0x5f0>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a4e      	ldr	r2, [pc, #312]	; (80067a8 <HAL_TIM_ConfigClockSource+0x280>)
 800666e:	4293      	cmp	r3, r2
 8006670:	f000 8252 	beq.w	8006b18 <HAL_TIM_ConfigClockSource+0x5f0>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a4c      	ldr	r2, [pc, #304]	; (80067ac <HAL_TIM_ConfigClockSource+0x284>)
 800667a:	4293      	cmp	r3, r2
 800667c:	f000 824c 	beq.w	8006b18 <HAL_TIM_ConfigClockSource+0x5f0>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a4a      	ldr	r2, [pc, #296]	; (80067b0 <HAL_TIM_ConfigClockSource+0x288>)
 8006686:	4293      	cmp	r3, r2
 8006688:	f000 8246 	beq.w	8006b18 <HAL_TIM_ConfigClockSource+0x5f0>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a48      	ldr	r2, [pc, #288]	; (80067b4 <HAL_TIM_ConfigClockSource+0x28c>)
 8006692:	4293      	cmp	r3, r2
 8006694:	f000 8240 	beq.w	8006b18 <HAL_TIM_ConfigClockSource+0x5f0>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a46      	ldr	r2, [pc, #280]	; (80067b8 <HAL_TIM_ConfigClockSource+0x290>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	f000 823a 	beq.w	8006b18 <HAL_TIM_ConfigClockSource+0x5f0>
 80066a4:	f241 413e 	movw	r1, #5182	; 0x143e
 80066a8:	483c      	ldr	r0, [pc, #240]	; (800679c <HAL_TIM_ConfigClockSource+0x274>)
 80066aa:	f7fa ff39 	bl	8001520 <assert_failed>
      break;
 80066ae:	e233      	b.n	8006b18 <HAL_TIM_ConfigClockSource+0x5f0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a3a      	ldr	r2, [pc, #232]	; (80067a0 <HAL_TIM_ConfigClockSource+0x278>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d01d      	beq.n	80066f6 <HAL_TIM_ConfigClockSource+0x1ce>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a39      	ldr	r2, [pc, #228]	; (80067a4 <HAL_TIM_ConfigClockSource+0x27c>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d018      	beq.n	80066f6 <HAL_TIM_ConfigClockSource+0x1ce>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066cc:	d013      	beq.n	80066f6 <HAL_TIM_ConfigClockSource+0x1ce>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a35      	ldr	r2, [pc, #212]	; (80067a8 <HAL_TIM_ConfigClockSource+0x280>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d00e      	beq.n	80066f6 <HAL_TIM_ConfigClockSource+0x1ce>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a33      	ldr	r2, [pc, #204]	; (80067ac <HAL_TIM_ConfigClockSource+0x284>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d009      	beq.n	80066f6 <HAL_TIM_ConfigClockSource+0x1ce>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a32      	ldr	r2, [pc, #200]	; (80067b0 <HAL_TIM_ConfigClockSource+0x288>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d004      	beq.n	80066f6 <HAL_TIM_ConfigClockSource+0x1ce>
 80066ec:	f241 4145 	movw	r1, #5189	; 0x1445
 80066f0:	482a      	ldr	r0, [pc, #168]	; (800679c <HAL_TIM_ConfigClockSource+0x274>)
 80066f2:	f7fa ff15 	bl	8001520 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d013      	beq.n	8006726 <HAL_TIM_ConfigClockSource+0x1fe>
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006706:	d00e      	beq.n	8006726 <HAL_TIM_ConfigClockSource+0x1fe>
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006710:	d009      	beq.n	8006726 <HAL_TIM_ConfigClockSource+0x1fe>
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800671a:	d004      	beq.n	8006726 <HAL_TIM_ConfigClockSource+0x1fe>
 800671c:	f241 4148 	movw	r1, #5192	; 0x1448
 8006720:	481e      	ldr	r0, [pc, #120]	; (800679c <HAL_TIM_ConfigClockSource+0x274>)
 8006722:	f7fa fefd 	bl	8001520 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800672e:	d014      	beq.n	800675a <HAL_TIM_ConfigClockSource+0x232>
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d010      	beq.n	800675a <HAL_TIM_ConfigClockSource+0x232>
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00c      	beq.n	800675a <HAL_TIM_ConfigClockSource+0x232>
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	2b02      	cmp	r3, #2
 8006746:	d008      	beq.n	800675a <HAL_TIM_ConfigClockSource+0x232>
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	2b0a      	cmp	r3, #10
 800674e:	d004      	beq.n	800675a <HAL_TIM_ConfigClockSource+0x232>
 8006750:	f241 4149 	movw	r1, #5193	; 0x1449
 8006754:	4811      	ldr	r0, [pc, #68]	; (800679c <HAL_TIM_ConfigClockSource+0x274>)
 8006756:	f7fa fee3 	bl	8001520 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	2b0f      	cmp	r3, #15
 8006760:	d904      	bls.n	800676c <HAL_TIM_ConfigClockSource+0x244>
 8006762:	f241 414a 	movw	r1, #5194	; 0x144a
 8006766:	480d      	ldr	r0, [pc, #52]	; (800679c <HAL_TIM_ConfigClockSource+0x274>)
 8006768:	f7fa feda 	bl	8001520 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6818      	ldr	r0, [r3, #0]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	6899      	ldr	r1, [r3, #8]
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	f000 fd59 	bl	8007232 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800678e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	609a      	str	r2, [r3, #8]
      break;
 8006798:	e1bf      	b.n	8006b1a <HAL_TIM_ConfigClockSource+0x5f2>
 800679a:	bf00      	nop
 800679c:	0800b264 	.word	0x0800b264
 80067a0:	40012c00 	.word	0x40012c00
 80067a4:	40013400 	.word	0x40013400
 80067a8:	40000400 	.word	0x40000400
 80067ac:	40000800 	.word	0x40000800
 80067b0:	40000c00 	.word	0x40000c00
 80067b4:	40001000 	.word	0x40001000
 80067b8:	40001400 	.word	0x40001400
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a8d      	ldr	r2, [pc, #564]	; (80069f8 <HAL_TIM_ConfigClockSource+0x4d0>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d01d      	beq.n	8006802 <HAL_TIM_ConfigClockSource+0x2da>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a8c      	ldr	r2, [pc, #560]	; (80069fc <HAL_TIM_ConfigClockSource+0x4d4>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d018      	beq.n	8006802 <HAL_TIM_ConfigClockSource+0x2da>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067d8:	d013      	beq.n	8006802 <HAL_TIM_ConfigClockSource+0x2da>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a88      	ldr	r2, [pc, #544]	; (8006a00 <HAL_TIM_ConfigClockSource+0x4d8>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d00e      	beq.n	8006802 <HAL_TIM_ConfigClockSource+0x2da>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a86      	ldr	r2, [pc, #536]	; (8006a04 <HAL_TIM_ConfigClockSource+0x4dc>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d009      	beq.n	8006802 <HAL_TIM_ConfigClockSource+0x2da>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a85      	ldr	r2, [pc, #532]	; (8006a08 <HAL_TIM_ConfigClockSource+0x4e0>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d004      	beq.n	8006802 <HAL_TIM_ConfigClockSource+0x2da>
 80067f8:	f241 415d 	movw	r1, #5213	; 0x145d
 80067fc:	4883      	ldr	r0, [pc, #524]	; (8006a0c <HAL_TIM_ConfigClockSource+0x4e4>)
 80067fe:	f7fa fe8f 	bl	8001520 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d013      	beq.n	8006832 <HAL_TIM_ConfigClockSource+0x30a>
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006812:	d00e      	beq.n	8006832 <HAL_TIM_ConfigClockSource+0x30a>
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800681c:	d009      	beq.n	8006832 <HAL_TIM_ConfigClockSource+0x30a>
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006826:	d004      	beq.n	8006832 <HAL_TIM_ConfigClockSource+0x30a>
 8006828:	f44f 51a3 	mov.w	r1, #5216	; 0x1460
 800682c:	4877      	ldr	r0, [pc, #476]	; (8006a0c <HAL_TIM_ConfigClockSource+0x4e4>)
 800682e:	f7fa fe77 	bl	8001520 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800683a:	d014      	beq.n	8006866 <HAL_TIM_ConfigClockSource+0x33e>
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d010      	beq.n	8006866 <HAL_TIM_ConfigClockSource+0x33e>
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00c      	beq.n	8006866 <HAL_TIM_ConfigClockSource+0x33e>
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	2b02      	cmp	r3, #2
 8006852:	d008      	beq.n	8006866 <HAL_TIM_ConfigClockSource+0x33e>
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	2b0a      	cmp	r3, #10
 800685a:	d004      	beq.n	8006866 <HAL_TIM_ConfigClockSource+0x33e>
 800685c:	f241 4161 	movw	r1, #5217	; 0x1461
 8006860:	486a      	ldr	r0, [pc, #424]	; (8006a0c <HAL_TIM_ConfigClockSource+0x4e4>)
 8006862:	f7fa fe5d 	bl	8001520 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	2b0f      	cmp	r3, #15
 800686c:	d904      	bls.n	8006878 <HAL_TIM_ConfigClockSource+0x350>
 800686e:	f241 4162 	movw	r1, #5218	; 0x1462
 8006872:	4866      	ldr	r0, [pc, #408]	; (8006a0c <HAL_TIM_ConfigClockSource+0x4e4>)
 8006874:	f7fa fe54 	bl	8001520 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6818      	ldr	r0, [r3, #0]
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	6899      	ldr	r1, [r3, #8]
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	f000 fcd3 	bl	8007232 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	689a      	ldr	r2, [r3, #8]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800689a:	609a      	str	r2, [r3, #8]
      break;
 800689c:	e13d      	b.n	8006b1a <HAL_TIM_ConfigClockSource+0x5f2>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a55      	ldr	r2, [pc, #340]	; (80069f8 <HAL_TIM_ConfigClockSource+0x4d0>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d01d      	beq.n	80068e4 <HAL_TIM_ConfigClockSource+0x3bc>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a53      	ldr	r2, [pc, #332]	; (80069fc <HAL_TIM_ConfigClockSource+0x4d4>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d018      	beq.n	80068e4 <HAL_TIM_ConfigClockSource+0x3bc>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ba:	d013      	beq.n	80068e4 <HAL_TIM_ConfigClockSource+0x3bc>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a4f      	ldr	r2, [pc, #316]	; (8006a00 <HAL_TIM_ConfigClockSource+0x4d8>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d00e      	beq.n	80068e4 <HAL_TIM_ConfigClockSource+0x3bc>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a4e      	ldr	r2, [pc, #312]	; (8006a04 <HAL_TIM_ConfigClockSource+0x4dc>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d009      	beq.n	80068e4 <HAL_TIM_ConfigClockSource+0x3bc>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a4c      	ldr	r2, [pc, #304]	; (8006a08 <HAL_TIM_ConfigClockSource+0x4e0>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d004      	beq.n	80068e4 <HAL_TIM_ConfigClockSource+0x3bc>
 80068da:	f241 4171 	movw	r1, #5233	; 0x1471
 80068de:	484b      	ldr	r0, [pc, #300]	; (8006a0c <HAL_TIM_ConfigClockSource+0x4e4>)
 80068e0:	f7fa fe1e 	bl	8001520 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068ec:	d014      	beq.n	8006918 <HAL_TIM_ConfigClockSource+0x3f0>
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d010      	beq.n	8006918 <HAL_TIM_ConfigClockSource+0x3f0>
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00c      	beq.n	8006918 <HAL_TIM_ConfigClockSource+0x3f0>
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	2b02      	cmp	r3, #2
 8006904:	d008      	beq.n	8006918 <HAL_TIM_ConfigClockSource+0x3f0>
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	2b0a      	cmp	r3, #10
 800690c:	d004      	beq.n	8006918 <HAL_TIM_ConfigClockSource+0x3f0>
 800690e:	f241 4174 	movw	r1, #5236	; 0x1474
 8006912:	483e      	ldr	r0, [pc, #248]	; (8006a0c <HAL_TIM_ConfigClockSource+0x4e4>)
 8006914:	f7fa fe04 	bl	8001520 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	2b0f      	cmp	r3, #15
 800691e:	d904      	bls.n	800692a <HAL_TIM_ConfigClockSource+0x402>
 8006920:	f241 4175 	movw	r1, #5237	; 0x1475
 8006924:	4839      	ldr	r0, [pc, #228]	; (8006a0c <HAL_TIM_ConfigClockSource+0x4e4>)
 8006926:	f7fa fdfb 	bl	8001520 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6818      	ldr	r0, [r3, #0]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	6859      	ldr	r1, [r3, #4]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	461a      	mov	r2, r3
 8006938:	f000 fc04 	bl	8007144 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2150      	movs	r1, #80	; 0x50
 8006942:	4618      	mov	r0, r3
 8006944:	f000 fc5b 	bl	80071fe <TIM_ITRx_SetConfig>
      break;
 8006948:	e0e7      	b.n	8006b1a <HAL_TIM_ConfigClockSource+0x5f2>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a2a      	ldr	r2, [pc, #168]	; (80069f8 <HAL_TIM_ConfigClockSource+0x4d0>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d01d      	beq.n	8006990 <HAL_TIM_ConfigClockSource+0x468>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a28      	ldr	r2, [pc, #160]	; (80069fc <HAL_TIM_ConfigClockSource+0x4d4>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d018      	beq.n	8006990 <HAL_TIM_ConfigClockSource+0x468>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006966:	d013      	beq.n	8006990 <HAL_TIM_ConfigClockSource+0x468>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a24      	ldr	r2, [pc, #144]	; (8006a00 <HAL_TIM_ConfigClockSource+0x4d8>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d00e      	beq.n	8006990 <HAL_TIM_ConfigClockSource+0x468>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a23      	ldr	r2, [pc, #140]	; (8006a04 <HAL_TIM_ConfigClockSource+0x4dc>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d009      	beq.n	8006990 <HAL_TIM_ConfigClockSource+0x468>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a21      	ldr	r2, [pc, #132]	; (8006a08 <HAL_TIM_ConfigClockSource+0x4e0>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d004      	beq.n	8006990 <HAL_TIM_ConfigClockSource+0x468>
 8006986:	f241 4181 	movw	r1, #5249	; 0x1481
 800698a:	4820      	ldr	r0, [pc, #128]	; (8006a0c <HAL_TIM_ConfigClockSource+0x4e4>)
 800698c:	f7fa fdc8 	bl	8001520 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006998:	d014      	beq.n	80069c4 <HAL_TIM_ConfigClockSource+0x49c>
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d010      	beq.n	80069c4 <HAL_TIM_ConfigClockSource+0x49c>
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00c      	beq.n	80069c4 <HAL_TIM_ConfigClockSource+0x49c>
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d008      	beq.n	80069c4 <HAL_TIM_ConfigClockSource+0x49c>
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	2b0a      	cmp	r3, #10
 80069b8:	d004      	beq.n	80069c4 <HAL_TIM_ConfigClockSource+0x49c>
 80069ba:	f241 4184 	movw	r1, #5252	; 0x1484
 80069be:	4813      	ldr	r0, [pc, #76]	; (8006a0c <HAL_TIM_ConfigClockSource+0x4e4>)
 80069c0:	f7fa fdae 	bl	8001520 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	2b0f      	cmp	r3, #15
 80069ca:	d904      	bls.n	80069d6 <HAL_TIM_ConfigClockSource+0x4ae>
 80069cc:	f241 4185 	movw	r1, #5253	; 0x1485
 80069d0:	480e      	ldr	r0, [pc, #56]	; (8006a0c <HAL_TIM_ConfigClockSource+0x4e4>)
 80069d2:	f7fa fda5 	bl	8001520 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6818      	ldr	r0, [r3, #0]
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	6859      	ldr	r1, [r3, #4]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	461a      	mov	r2, r3
 80069e4:	f000 fbdc 	bl	80071a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	2160      	movs	r1, #96	; 0x60
 80069ee:	4618      	mov	r0, r3
 80069f0:	f000 fc05 	bl	80071fe <TIM_ITRx_SetConfig>
      break;
 80069f4:	e091      	b.n	8006b1a <HAL_TIM_ConfigClockSource+0x5f2>
 80069f6:	bf00      	nop
 80069f8:	40012c00 	.word	0x40012c00
 80069fc:	40013400 	.word	0x40013400
 8006a00:	40000400 	.word	0x40000400
 8006a04:	40000800 	.word	0x40000800
 8006a08:	40000c00 	.word	0x40000c00
 8006a0c:	0800b264 	.word	0x0800b264
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a47      	ldr	r2, [pc, #284]	; (8006b34 <HAL_TIM_ConfigClockSource+0x60c>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d01d      	beq.n	8006a56 <HAL_TIM_ConfigClockSource+0x52e>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a46      	ldr	r2, [pc, #280]	; (8006b38 <HAL_TIM_ConfigClockSource+0x610>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d018      	beq.n	8006a56 <HAL_TIM_ConfigClockSource+0x52e>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a2c:	d013      	beq.n	8006a56 <HAL_TIM_ConfigClockSource+0x52e>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a42      	ldr	r2, [pc, #264]	; (8006b3c <HAL_TIM_ConfigClockSource+0x614>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d00e      	beq.n	8006a56 <HAL_TIM_ConfigClockSource+0x52e>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a40      	ldr	r2, [pc, #256]	; (8006b40 <HAL_TIM_ConfigClockSource+0x618>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d009      	beq.n	8006a56 <HAL_TIM_ConfigClockSource+0x52e>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a3f      	ldr	r2, [pc, #252]	; (8006b44 <HAL_TIM_ConfigClockSource+0x61c>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d004      	beq.n	8006a56 <HAL_TIM_ConfigClockSource+0x52e>
 8006a4c:	f241 4191 	movw	r1, #5265	; 0x1491
 8006a50:	483d      	ldr	r0, [pc, #244]	; (8006b48 <HAL_TIM_ConfigClockSource+0x620>)
 8006a52:	f7fa fd65 	bl	8001520 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a5e:	d014      	beq.n	8006a8a <HAL_TIM_ConfigClockSource+0x562>
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d010      	beq.n	8006a8a <HAL_TIM_ConfigClockSource+0x562>
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d00c      	beq.n	8006a8a <HAL_TIM_ConfigClockSource+0x562>
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d008      	beq.n	8006a8a <HAL_TIM_ConfigClockSource+0x562>
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	2b0a      	cmp	r3, #10
 8006a7e:	d004      	beq.n	8006a8a <HAL_TIM_ConfigClockSource+0x562>
 8006a80:	f241 4194 	movw	r1, #5268	; 0x1494
 8006a84:	4830      	ldr	r0, [pc, #192]	; (8006b48 <HAL_TIM_ConfigClockSource+0x620>)
 8006a86:	f7fa fd4b 	bl	8001520 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	2b0f      	cmp	r3, #15
 8006a90:	d904      	bls.n	8006a9c <HAL_TIM_ConfigClockSource+0x574>
 8006a92:	f241 4195 	movw	r1, #5269	; 0x1495
 8006a96:	482c      	ldr	r0, [pc, #176]	; (8006b48 <HAL_TIM_ConfigClockSource+0x620>)
 8006a98:	f7fa fd42 	bl	8001520 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6818      	ldr	r0, [r3, #0]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	6859      	ldr	r1, [r3, #4]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	f000 fb4b 	bl	8007144 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2140      	movs	r1, #64	; 0x40
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f000 fba2 	bl	80071fe <TIM_ITRx_SetConfig>
      break;
 8006aba:	e02e      	b.n	8006b1a <HAL_TIM_ConfigClockSource+0x5f2>
        assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a1c      	ldr	r2, [pc, #112]	; (8006b34 <HAL_TIM_ConfigClockSource+0x60c>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d01d      	beq.n	8006b02 <HAL_TIM_ConfigClockSource+0x5da>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a1b      	ldr	r2, [pc, #108]	; (8006b38 <HAL_TIM_ConfigClockSource+0x610>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d018      	beq.n	8006b02 <HAL_TIM_ConfigClockSource+0x5da>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ad8:	d013      	beq.n	8006b02 <HAL_TIM_ConfigClockSource+0x5da>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a17      	ldr	r2, [pc, #92]	; (8006b3c <HAL_TIM_ConfigClockSource+0x614>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d00e      	beq.n	8006b02 <HAL_TIM_ConfigClockSource+0x5da>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a15      	ldr	r2, [pc, #84]	; (8006b40 <HAL_TIM_ConfigClockSource+0x618>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d009      	beq.n	8006b02 <HAL_TIM_ConfigClockSource+0x5da>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a14      	ldr	r2, [pc, #80]	; (8006b44 <HAL_TIM_ConfigClockSource+0x61c>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d004      	beq.n	8006b02 <HAL_TIM_ConfigClockSource+0x5da>
 8006af8:	f241 41a4 	movw	r1, #5284	; 0x14a4
 8006afc:	4812      	ldr	r0, [pc, #72]	; (8006b48 <HAL_TIM_ConfigClockSource+0x620>)
 8006afe:	f7fa fd0f 	bl	8001520 <assert_failed>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	4610      	mov	r0, r2
 8006b0e:	f000 fb76 	bl	80071fe <TIM_ITRx_SetConfig>
        break;
 8006b12:	e002      	b.n	8006b1a <HAL_TIM_ConfigClockSource+0x5f2>
      break;
 8006b14:	bf00      	nop
 8006b16:	e000      	b.n	8006b1a <HAL_TIM_ConfigClockSource+0x5f2>
      break;
 8006b18:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	40012c00 	.word	0x40012c00
 8006b38:	40013400 	.word	0x40013400
 8006b3c:	40000400 	.word	0x40000400
 8006b40:	40000800 	.word	0x40000800
 8006b44:	40000c00 	.word	0x40000c00
 8006b48:	0800b264 	.word	0x0800b264

08006b4c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006b54:	bf00      	nop
 8006b56:	370c      	adds	r7, #12
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bc80      	pop	{r7}
 8006b5c:	4770      	bx	lr

08006b5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b083      	sub	sp, #12
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b66:	bf00      	nop
 8006b68:	370c      	adds	r7, #12
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bc80      	pop	{r7}
 8006b6e:	4770      	bx	lr

08006b70 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bc80      	pop	{r7}
 8006b80:	4770      	bx	lr

08006b82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b083      	sub	sp, #12
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b8a:	bf00      	nop
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bc80      	pop	{r7}
 8006b92:	4770      	bx	lr

08006b94 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006b9c:	bf00      	nop
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bc80      	pop	{r7}
 8006ba4:	4770      	bx	lr

08006ba6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b083      	sub	sp, #12
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006bae:	bf00      	nop
 8006bb0:	370c      	adds	r7, #12
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bc80      	pop	{r7}
 8006bb6:	4770      	bx	lr

08006bb8 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bc80      	pop	{r7}
 8006bc8:	4770      	bx	lr

08006bca <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b083      	sub	sp, #12
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006bd2:	bf00      	nop
 8006bd4:	370c      	adds	r7, #12
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bc80      	pop	{r7}
 8006bda:	4770      	bx	lr

08006bdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b085      	sub	sp, #20
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a33      	ldr	r2, [pc, #204]	; (8006cbc <TIM_Base_SetConfig+0xe0>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d013      	beq.n	8006c1c <TIM_Base_SetConfig+0x40>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a32      	ldr	r2, [pc, #200]	; (8006cc0 <TIM_Base_SetConfig+0xe4>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d00f      	beq.n	8006c1c <TIM_Base_SetConfig+0x40>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c02:	d00b      	beq.n	8006c1c <TIM_Base_SetConfig+0x40>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a2f      	ldr	r2, [pc, #188]	; (8006cc4 <TIM_Base_SetConfig+0xe8>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d007      	beq.n	8006c1c <TIM_Base_SetConfig+0x40>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a2e      	ldr	r2, [pc, #184]	; (8006cc8 <TIM_Base_SetConfig+0xec>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d003      	beq.n	8006c1c <TIM_Base_SetConfig+0x40>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a2d      	ldr	r2, [pc, #180]	; (8006ccc <TIM_Base_SetConfig+0xf0>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d108      	bne.n	8006c2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a22      	ldr	r2, [pc, #136]	; (8006cbc <TIM_Base_SetConfig+0xe0>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d013      	beq.n	8006c5e <TIM_Base_SetConfig+0x82>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a21      	ldr	r2, [pc, #132]	; (8006cc0 <TIM_Base_SetConfig+0xe4>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d00f      	beq.n	8006c5e <TIM_Base_SetConfig+0x82>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c44:	d00b      	beq.n	8006c5e <TIM_Base_SetConfig+0x82>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a1e      	ldr	r2, [pc, #120]	; (8006cc4 <TIM_Base_SetConfig+0xe8>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d007      	beq.n	8006c5e <TIM_Base_SetConfig+0x82>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a1d      	ldr	r2, [pc, #116]	; (8006cc8 <TIM_Base_SetConfig+0xec>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d003      	beq.n	8006c5e <TIM_Base_SetConfig+0x82>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a1c      	ldr	r2, [pc, #112]	; (8006ccc <TIM_Base_SetConfig+0xf0>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d108      	bne.n	8006c70 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	689a      	ldr	r2, [r3, #8]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a09      	ldr	r2, [pc, #36]	; (8006cbc <TIM_Base_SetConfig+0xe0>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d003      	beq.n	8006ca4 <TIM_Base_SetConfig+0xc8>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a08      	ldr	r2, [pc, #32]	; (8006cc0 <TIM_Base_SetConfig+0xe4>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d103      	bne.n	8006cac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	691a      	ldr	r2, [r3, #16]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	615a      	str	r2, [r3, #20]
}
 8006cb2:	bf00      	nop
 8006cb4:	3714      	adds	r7, #20
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bc80      	pop	{r7}
 8006cba:	4770      	bx	lr
 8006cbc:	40012c00 	.word	0x40012c00
 8006cc0:	40013400 	.word	0x40013400
 8006cc4:	40000400 	.word	0x40000400
 8006cc8:	40000800 	.word	0x40000800
 8006ccc:	40000c00 	.word	0x40000c00

08006cd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a1b      	ldr	r3, [r3, #32]
 8006cde:	f023 0201 	bic.w	r2, r3, #1
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a1b      	ldr	r3, [r3, #32]
 8006cea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f023 0303 	bic.w	r3, r3, #3
 8006d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f023 0302 	bic.w	r3, r3, #2
 8006d18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a34      	ldr	r2, [pc, #208]	; (8006df8 <TIM_OC1_SetConfig+0x128>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d003      	beq.n	8006d34 <TIM_OC1_SetConfig+0x64>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a33      	ldr	r2, [pc, #204]	; (8006dfc <TIM_OC1_SetConfig+0x12c>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d119      	bne.n	8006d68 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d008      	beq.n	8006d4e <TIM_OC1_SetConfig+0x7e>
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	2b08      	cmp	r3, #8
 8006d42:	d004      	beq.n	8006d4e <TIM_OC1_SetConfig+0x7e>
 8006d44:	f641 2141 	movw	r1, #6721	; 0x1a41
 8006d48:	482d      	ldr	r0, [pc, #180]	; (8006e00 <TIM_OC1_SetConfig+0x130>)
 8006d4a:	f7fa fbe9 	bl	8001520 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	f023 0308 	bic.w	r3, r3, #8
 8006d54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	f023 0304 	bic.w	r3, r3, #4
 8006d66:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	4a23      	ldr	r2, [pc, #140]	; (8006df8 <TIM_OC1_SetConfig+0x128>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d003      	beq.n	8006d78 <TIM_OC1_SetConfig+0xa8>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a22      	ldr	r2, [pc, #136]	; (8006dfc <TIM_OC1_SetConfig+0x12c>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d12d      	bne.n	8006dd4 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	699b      	ldr	r3, [r3, #24]
 8006d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d80:	d008      	beq.n	8006d94 <TIM_OC1_SetConfig+0xc4>
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	699b      	ldr	r3, [r3, #24]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d004      	beq.n	8006d94 <TIM_OC1_SetConfig+0xc4>
 8006d8a:	f641 214e 	movw	r1, #6734	; 0x1a4e
 8006d8e:	481c      	ldr	r0, [pc, #112]	; (8006e00 <TIM_OC1_SetConfig+0x130>)
 8006d90:	f7fa fbc6 	bl	8001520 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d9c:	d008      	beq.n	8006db0 <TIM_OC1_SetConfig+0xe0>
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	695b      	ldr	r3, [r3, #20]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d004      	beq.n	8006db0 <TIM_OC1_SetConfig+0xe0>
 8006da6:	f641 214f 	movw	r1, #6735	; 0x1a4f
 8006daa:	4815      	ldr	r0, [pc, #84]	; (8006e00 <TIM_OC1_SetConfig+0x130>)
 8006dac:	f7fa fbb8 	bl	8001520 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006db6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	695b      	ldr	r3, [r3, #20]
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	693a      	ldr	r2, [r7, #16]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	693a      	ldr	r2, [r7, #16]
 8006dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	685a      	ldr	r2, [r3, #4]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	697a      	ldr	r2, [r7, #20]
 8006dec:	621a      	str	r2, [r3, #32]
}
 8006dee:	bf00      	nop
 8006df0:	3718      	adds	r7, #24
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	40012c00 	.word	0x40012c00
 8006dfc:	40013400 	.word	0x40013400
 8006e00:	0800b264 	.word	0x0800b264

08006e04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b086      	sub	sp, #24
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	f023 0210 	bic.w	r2, r3, #16
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	021b      	lsls	r3, r3, #8
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	f023 0320 	bic.w	r3, r3, #32
 8006e4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	011b      	lsls	r3, r3, #4
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a35      	ldr	r2, [pc, #212]	; (8006f34 <TIM_OC2_SetConfig+0x130>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d003      	beq.n	8006e6c <TIM_OC2_SetConfig+0x68>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a34      	ldr	r2, [pc, #208]	; (8006f38 <TIM_OC2_SetConfig+0x134>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d11a      	bne.n	8006ea2 <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d008      	beq.n	8006e86 <TIM_OC2_SetConfig+0x82>
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	2b08      	cmp	r3, #8
 8006e7a:	d004      	beq.n	8006e86 <TIM_OC2_SetConfig+0x82>
 8006e7c:	f641 218c 	movw	r1, #6796	; 0x1a8c
 8006e80:	482e      	ldr	r0, [pc, #184]	; (8006f3c <TIM_OC2_SetConfig+0x138>)
 8006e82:	f7fa fb4d 	bl	8001520 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	011b      	lsls	r3, r3, #4
 8006e94:	697a      	ldr	r2, [r7, #20]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ea0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a23      	ldr	r2, [pc, #140]	; (8006f34 <TIM_OC2_SetConfig+0x130>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d003      	beq.n	8006eb2 <TIM_OC2_SetConfig+0xae>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a22      	ldr	r2, [pc, #136]	; (8006f38 <TIM_OC2_SetConfig+0x134>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d12f      	bne.n	8006f12 <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eba:	d008      	beq.n	8006ece <TIM_OC2_SetConfig+0xca>
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d004      	beq.n	8006ece <TIM_OC2_SetConfig+0xca>
 8006ec4:	f641 219a 	movw	r1, #6810	; 0x1a9a
 8006ec8:	481c      	ldr	r0, [pc, #112]	; (8006f3c <TIM_OC2_SetConfig+0x138>)
 8006eca:	f7fa fb29 	bl	8001520 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	695b      	ldr	r3, [r3, #20]
 8006ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ed6:	d008      	beq.n	8006eea <TIM_OC2_SetConfig+0xe6>
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	695b      	ldr	r3, [r3, #20]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d004      	beq.n	8006eea <TIM_OC2_SetConfig+0xe6>
 8006ee0:	f641 219b 	movw	r1, #6811	; 0x1a9b
 8006ee4:	4815      	ldr	r0, [pc, #84]	; (8006f3c <TIM_OC2_SetConfig+0x138>)
 8006ee6:	f7fa fb1b 	bl	8001520 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ef0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	699b      	ldr	r3, [r3, #24]
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	693a      	ldr	r2, [r7, #16]
 8006f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	685a      	ldr	r2, [r3, #4]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	697a      	ldr	r2, [r7, #20]
 8006f2a:	621a      	str	r2, [r3, #32]
}
 8006f2c:	bf00      	nop
 8006f2e:	3718      	adds	r7, #24
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	40012c00 	.word	0x40012c00
 8006f38:	40013400 	.word	0x40013400
 8006f3c:	0800b264 	.word	0x0800b264

08006f40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b086      	sub	sp, #24
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a1b      	ldr	r3, [r3, #32]
 8006f5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	69db      	ldr	r3, [r3, #28]
 8006f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f023 0303 	bic.w	r3, r3, #3
 8006f76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	021b      	lsls	r3, r3, #8
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a35      	ldr	r2, [pc, #212]	; (8007070 <TIM_OC3_SetConfig+0x130>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d003      	beq.n	8006fa6 <TIM_OC3_SetConfig+0x66>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a34      	ldr	r2, [pc, #208]	; (8007074 <TIM_OC3_SetConfig+0x134>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d11a      	bne.n	8006fdc <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d008      	beq.n	8006fc0 <TIM_OC3_SetConfig+0x80>
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	2b08      	cmp	r3, #8
 8006fb4:	d004      	beq.n	8006fc0 <TIM_OC3_SetConfig+0x80>
 8006fb6:	f641 21d7 	movw	r1, #6871	; 0x1ad7
 8006fba:	482f      	ldr	r0, [pc, #188]	; (8007078 <TIM_OC3_SetConfig+0x138>)
 8006fbc:	f7fa fab0 	bl	8001520 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	021b      	lsls	r3, r3, #8
 8006fce:	697a      	ldr	r2, [r7, #20]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fda:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a24      	ldr	r2, [pc, #144]	; (8007070 <TIM_OC3_SetConfig+0x130>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d003      	beq.n	8006fec <TIM_OC3_SetConfig+0xac>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a23      	ldr	r2, [pc, #140]	; (8007074 <TIM_OC3_SetConfig+0x134>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d12f      	bne.n	800704c <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	699b      	ldr	r3, [r3, #24]
 8006ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ff4:	d008      	beq.n	8007008 <TIM_OC3_SetConfig+0xc8>
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d004      	beq.n	8007008 <TIM_OC3_SetConfig+0xc8>
 8006ffe:	f641 21e4 	movw	r1, #6884	; 0x1ae4
 8007002:	481d      	ldr	r0, [pc, #116]	; (8007078 <TIM_OC3_SetConfig+0x138>)
 8007004:	f7fa fa8c 	bl	8001520 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	695b      	ldr	r3, [r3, #20]
 800700c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007010:	d008      	beq.n	8007024 <TIM_OC3_SetConfig+0xe4>
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d004      	beq.n	8007024 <TIM_OC3_SetConfig+0xe4>
 800701a:	f641 21e5 	movw	r1, #6885	; 0x1ae5
 800701e:	4816      	ldr	r0, [pc, #88]	; (8007078 <TIM_OC3_SetConfig+0x138>)
 8007020:	f7fa fa7e 	bl	8001520 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800702a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007032:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	695b      	ldr	r3, [r3, #20]
 8007038:	011b      	lsls	r3, r3, #4
 800703a:	693a      	ldr	r2, [r7, #16]
 800703c:	4313      	orrs	r3, r2
 800703e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	011b      	lsls	r3, r3, #4
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	4313      	orrs	r3, r2
 800704a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	693a      	ldr	r2, [r7, #16]
 8007050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	685a      	ldr	r2, [r3, #4]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	697a      	ldr	r2, [r7, #20]
 8007064:	621a      	str	r2, [r3, #32]
}
 8007066:	bf00      	nop
 8007068:	3718      	adds	r7, #24
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	40012c00 	.word	0x40012c00
 8007074:	40013400 	.word	0x40013400
 8007078:	0800b264 	.word	0x0800b264

0800707c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b086      	sub	sp, #24
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a1b      	ldr	r3, [r3, #32]
 800708a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	69db      	ldr	r3, [r3, #28]
 80070a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	021b      	lsls	r3, r3, #8
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	4313      	orrs	r3, r2
 80070be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	031b      	lsls	r3, r3, #12
 80070ce:	693a      	ldr	r2, [r7, #16]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a18      	ldr	r2, [pc, #96]	; (8007138 <TIM_OC4_SetConfig+0xbc>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d003      	beq.n	80070e4 <TIM_OC4_SetConfig+0x68>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a17      	ldr	r2, [pc, #92]	; (800713c <TIM_OC4_SetConfig+0xc0>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d117      	bne.n	8007114 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	695b      	ldr	r3, [r3, #20]
 80070e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070ec:	d008      	beq.n	8007100 <TIM_OC4_SetConfig+0x84>
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d004      	beq.n	8007100 <TIM_OC4_SetConfig+0x84>
 80070f6:	f641 3123 	movw	r1, #6947	; 0x1b23
 80070fa:	4811      	ldr	r0, [pc, #68]	; (8007140 <TIM_OC4_SetConfig+0xc4>)
 80070fc:	f7fa fa10 	bl	8001520 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007106:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	695b      	ldr	r3, [r3, #20]
 800710c:	019b      	lsls	r3, r3, #6
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	4313      	orrs	r3, r2
 8007112:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	697a      	ldr	r2, [r7, #20]
 8007118:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	685a      	ldr	r2, [r3, #4]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	693a      	ldr	r2, [r7, #16]
 800712c:	621a      	str	r2, [r3, #32]
}
 800712e:	bf00      	nop
 8007130:	3718      	adds	r7, #24
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	40012c00 	.word	0x40012c00
 800713c:	40013400 	.word	0x40013400
 8007140:	0800b264 	.word	0x0800b264

08007144 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007144:	b480      	push	{r7}
 8007146:	b087      	sub	sp, #28
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6a1b      	ldr	r3, [r3, #32]
 8007154:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6a1b      	ldr	r3, [r3, #32]
 800715a:	f023 0201 	bic.w	r2, r3, #1
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800716e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	011b      	lsls	r3, r3, #4
 8007174:	693a      	ldr	r2, [r7, #16]
 8007176:	4313      	orrs	r3, r2
 8007178:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f023 030a 	bic.w	r3, r3, #10
 8007180:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007182:	697a      	ldr	r2, [r7, #20]
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	4313      	orrs	r3, r2
 8007188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	693a      	ldr	r2, [r7, #16]
 800718e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	697a      	ldr	r2, [r7, #20]
 8007194:	621a      	str	r2, [r3, #32]
}
 8007196:	bf00      	nop
 8007198:	371c      	adds	r7, #28
 800719a:	46bd      	mov	sp, r7
 800719c:	bc80      	pop	{r7}
 800719e:	4770      	bx	lr

080071a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b087      	sub	sp, #28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6a1b      	ldr	r3, [r3, #32]
 80071b0:	f023 0210 	bic.w	r2, r3, #16
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6a1b      	ldr	r3, [r3, #32]
 80071c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80071ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	031b      	lsls	r3, r3, #12
 80071d0:	697a      	ldr	r2, [r7, #20]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80071dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	011b      	lsls	r3, r3, #4
 80071e2:	693a      	ldr	r2, [r7, #16]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	621a      	str	r2, [r3, #32]
}
 80071f4:	bf00      	nop
 80071f6:	371c      	adds	r7, #28
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bc80      	pop	{r7}
 80071fc:	4770      	bx	lr

080071fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071fe:	b480      	push	{r7}
 8007200:	b085      	sub	sp, #20
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
 8007206:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007214:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	4313      	orrs	r3, r2
 800721c:	f043 0307 	orr.w	r3, r3, #7
 8007220:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	609a      	str	r2, [r3, #8]
}
 8007228:	bf00      	nop
 800722a:	3714      	adds	r7, #20
 800722c:	46bd      	mov	sp, r7
 800722e:	bc80      	pop	{r7}
 8007230:	4770      	bx	lr

08007232 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007232:	b480      	push	{r7}
 8007234:	b087      	sub	sp, #28
 8007236:	af00      	add	r7, sp, #0
 8007238:	60f8      	str	r0, [r7, #12]
 800723a:	60b9      	str	r1, [r7, #8]
 800723c:	607a      	str	r2, [r7, #4]
 800723e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800724c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	021a      	lsls	r2, r3, #8
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	431a      	orrs	r2, r3
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	4313      	orrs	r3, r2
 800725a:	697a      	ldr	r2, [r7, #20]
 800725c:	4313      	orrs	r3, r2
 800725e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	609a      	str	r2, [r3, #8]
}
 8007266:	bf00      	nop
 8007268:	371c      	adds	r7, #28
 800726a:	46bd      	mov	sp, r7
 800726c:	bc80      	pop	{r7}
 800726e:	4770      	bx	lr

08007270 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b086      	sub	sp, #24
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	4a26      	ldr	r2, [pc, #152]	; (8007318 <TIM_CCxChannelCmd+0xa8>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d018      	beq.n	80072b6 <TIM_CCxChannelCmd+0x46>
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	4a25      	ldr	r2, [pc, #148]	; (800731c <TIM_CCxChannelCmd+0xac>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d014      	beq.n	80072b6 <TIM_CCxChannelCmd+0x46>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007292:	d010      	beq.n	80072b6 <TIM_CCxChannelCmd+0x46>
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	4a22      	ldr	r2, [pc, #136]	; (8007320 <TIM_CCxChannelCmd+0xb0>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d00c      	beq.n	80072b6 <TIM_CCxChannelCmd+0x46>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	4a21      	ldr	r2, [pc, #132]	; (8007324 <TIM_CCxChannelCmd+0xb4>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d008      	beq.n	80072b6 <TIM_CCxChannelCmd+0x46>
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	4a20      	ldr	r2, [pc, #128]	; (8007328 <TIM_CCxChannelCmd+0xb8>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d004      	beq.n	80072b6 <TIM_CCxChannelCmd+0x46>
 80072ac:	f641 5109 	movw	r1, #7433	; 0x1d09
 80072b0:	481e      	ldr	r0, [pc, #120]	; (800732c <TIM_CCxChannelCmd+0xbc>)
 80072b2:	f7fa f935 	bl	8001520 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d010      	beq.n	80072de <TIM_CCxChannelCmd+0x6e>
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	2b04      	cmp	r3, #4
 80072c0:	d00d      	beq.n	80072de <TIM_CCxChannelCmd+0x6e>
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	2b08      	cmp	r3, #8
 80072c6:	d00a      	beq.n	80072de <TIM_CCxChannelCmd+0x6e>
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	2b0c      	cmp	r3, #12
 80072cc:	d007      	beq.n	80072de <TIM_CCxChannelCmd+0x6e>
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	2b3c      	cmp	r3, #60	; 0x3c
 80072d2:	d004      	beq.n	80072de <TIM_CCxChannelCmd+0x6e>
 80072d4:	f641 510a 	movw	r1, #7434	; 0x1d0a
 80072d8:	4814      	ldr	r0, [pc, #80]	; (800732c <TIM_CCxChannelCmd+0xbc>)
 80072da:	f7fa f921 	bl	8001520 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	f003 031f 	and.w	r3, r3, #31
 80072e4:	2201      	movs	r2, #1
 80072e6:	fa02 f303 	lsl.w	r3, r2, r3
 80072ea:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6a1a      	ldr	r2, [r3, #32]
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	43db      	mvns	r3, r3
 80072f4:	401a      	ands	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6a1a      	ldr	r2, [r3, #32]
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	f003 031f 	and.w	r3, r3, #31
 8007304:	6879      	ldr	r1, [r7, #4]
 8007306:	fa01 f303 	lsl.w	r3, r1, r3
 800730a:	431a      	orrs	r2, r3
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	621a      	str	r2, [r3, #32]
}
 8007310:	bf00      	nop
 8007312:	3718      	adds	r7, #24
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	40012c00 	.word	0x40012c00
 800731c:	40013400 	.word	0x40013400
 8007320:	40000400 	.word	0x40000400
 8007324:	40000800 	.word	0x40000800
 8007328:	40000c00 	.word	0x40000c00
 800732c:	0800b264 	.word	0x0800b264

08007330 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a1c      	ldr	r2, [pc, #112]	; (80073ac <TIM_ResetCallback+0x7c>)
 800733c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a1b      	ldr	r2, [pc, #108]	; (80073b0 <TIM_ResetCallback+0x80>)
 8007344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a1a      	ldr	r2, [pc, #104]	; (80073b4 <TIM_ResetCallback+0x84>)
 800734c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a19      	ldr	r2, [pc, #100]	; (80073b8 <TIM_ResetCallback+0x88>)
 8007354:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a18      	ldr	r2, [pc, #96]	; (80073bc <TIM_ResetCallback+0x8c>)
 800735c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a17      	ldr	r2, [pc, #92]	; (80073c0 <TIM_ResetCallback+0x90>)
 8007364:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a16      	ldr	r2, [pc, #88]	; (80073c4 <TIM_ResetCallback+0x94>)
 800736c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a15      	ldr	r2, [pc, #84]	; (80073c8 <TIM_ResetCallback+0x98>)
 8007374:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a14      	ldr	r2, [pc, #80]	; (80073cc <TIM_ResetCallback+0x9c>)
 800737c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a13      	ldr	r2, [pc, #76]	; (80073d0 <TIM_ResetCallback+0xa0>)
 8007384:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a12      	ldr	r2, [pc, #72]	; (80073d4 <TIM_ResetCallback+0xa4>)
 800738c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a11      	ldr	r2, [pc, #68]	; (80073d8 <TIM_ResetCallback+0xa8>)
 8007394:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a10      	ldr	r2, [pc, #64]	; (80073dc <TIM_ResetCallback+0xac>)
 800739c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80073a0:	bf00      	nop
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bc80      	pop	{r7}
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	080014b5 	.word	0x080014b5
 80073b0:	08006b4d 	.word	0x08006b4d
 80073b4:	08006ba7 	.word	0x08006ba7
 80073b8:	08006bb9 	.word	0x08006bb9
 80073bc:	0800146d 	.word	0x0800146d
 80073c0:	08006b71 	.word	0x08006b71
 80073c4:	08006b5f 	.word	0x08006b5f
 80073c8:	08006b83 	.word	0x08006b83
 80073cc:	08006b95 	.word	0x08006b95
 80073d0:	08006bcb 	.word	0x08006bcb
 80073d4:	08007719 	.word	0x08007719
 80073d8:	0800772b 	.word	0x0800772b
 80073dc:	0800773d 	.word	0x0800773d

080073e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a5c      	ldr	r2, [pc, #368]	; (8007560 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d027      	beq.n	8007444 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a5a      	ldr	r2, [pc, #360]	; (8007564 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d022      	beq.n	8007444 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007406:	d01d      	beq.n	8007444 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a56      	ldr	r2, [pc, #344]	; (8007568 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d018      	beq.n	8007444 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a55      	ldr	r2, [pc, #340]	; (800756c <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d013      	beq.n	8007444 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a53      	ldr	r2, [pc, #332]	; (8007570 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d00e      	beq.n	8007444 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a52      	ldr	r2, [pc, #328]	; (8007574 <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d009      	beq.n	8007444 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a50      	ldr	r2, [pc, #320]	; (8007578 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d004      	beq.n	8007444 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800743a:	f240 7186 	movw	r1, #1926	; 0x786
 800743e:	484f      	ldr	r0, [pc, #316]	; (800757c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8007440:	f7fa f86e 	bl	8001520 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d020      	beq.n	800748e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2b10      	cmp	r3, #16
 8007452:	d01c      	beq.n	800748e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2b20      	cmp	r3, #32
 800745a:	d018      	beq.n	800748e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2b30      	cmp	r3, #48	; 0x30
 8007462:	d014      	beq.n	800748e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2b40      	cmp	r3, #64	; 0x40
 800746a:	d010      	beq.n	800748e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2b50      	cmp	r3, #80	; 0x50
 8007472:	d00c      	beq.n	800748e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2b60      	cmp	r3, #96	; 0x60
 800747a:	d008      	beq.n	800748e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2b70      	cmp	r3, #112	; 0x70
 8007482:	d004      	beq.n	800748e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007484:	f240 7187 	movw	r1, #1927	; 0x787
 8007488:	483c      	ldr	r0, [pc, #240]	; (800757c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 800748a:	f7fa f849 	bl	8001520 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	2b80      	cmp	r3, #128	; 0x80
 8007494:	d008      	beq.n	80074a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d004      	beq.n	80074a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800749e:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 80074a2:	4836      	ldr	r0, [pc, #216]	; (800757c <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 80074a4:	f7fa f83c 	bl	8001520 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d101      	bne.n	80074b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80074b2:	2302      	movs	r3, #2
 80074b4:	e050      	b.n	8007558 <HAL_TIMEx_MasterConfigSynchronization+0x178>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2201      	movs	r2, #1
 80074ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2202      	movs	r2, #2
 80074c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a1a      	ldr	r2, [pc, #104]	; (8007560 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d018      	beq.n	800752c <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a19      	ldr	r2, [pc, #100]	; (8007564 <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d013      	beq.n	800752c <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800750c:	d00e      	beq.n	800752c <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a15      	ldr	r2, [pc, #84]	; (8007568 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d009      	beq.n	800752c <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a13      	ldr	r2, [pc, #76]	; (800756c <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d004      	beq.n	800752c <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a12      	ldr	r2, [pc, #72]	; (8007570 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d10c      	bne.n	8007546 <HAL_TIMEx_MasterConfigSynchronization+0x166>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007532:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	4313      	orrs	r3, r2
 800753c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68ba      	ldr	r2, [r7, #8]
 8007544:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	40012c00 	.word	0x40012c00
 8007564:	40013400 	.word	0x40013400
 8007568:	40000400 	.word	0x40000400
 800756c:	40000800 	.word	0x40000800
 8007570:	40000c00 	.word	0x40000c00
 8007574:	40001000 	.word	0x40001000
 8007578:	40001400 	.word	0x40001400
 800757c:	0800b29c 	.word	0x0800b29c

08007580 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800758a:	2300      	movs	r3, #0
 800758c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a5e      	ldr	r2, [pc, #376]	; (800770c <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d009      	beq.n	80075ac <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a5c      	ldr	r2, [pc, #368]	; (8007710 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d004      	beq.n	80075ac <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 80075a2:	f240 71c3 	movw	r1, #1987	; 0x7c3
 80075a6:	485b      	ldr	r0, [pc, #364]	; (8007714 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80075a8:	f7f9 ffba 	bl	8001520 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075b4:	d008      	beq.n	80075c8 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d004      	beq.n	80075c8 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 80075be:	f240 71c4 	movw	r1, #1988	; 0x7c4
 80075c2:	4854      	ldr	r0, [pc, #336]	; (8007714 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80075c4:	f7f9 ffac 	bl	8001520 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075d0:	d008      	beq.n	80075e4 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d004      	beq.n	80075e4 <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 80075da:	f240 71c5 	movw	r1, #1989	; 0x7c5
 80075de:	484d      	ldr	r0, [pc, #308]	; (8007714 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80075e0:	f7f9 ff9e 	bl	8001520 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d013      	beq.n	8007614 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075f4:	d00e      	beq.n	8007614 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	689b      	ldr	r3, [r3, #8]
 80075fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075fe:	d009      	beq.n	8007614 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007608:	d004      	beq.n	8007614 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800760a:	f240 71c6 	movw	r1, #1990	; 0x7c6
 800760e:	4841      	ldr	r0, [pc, #260]	; (8007714 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007610:	f7f9 ff86 	bl	8001520 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	2bff      	cmp	r3, #255	; 0xff
 800761a:	d904      	bls.n	8007626 <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 800761c:	f240 71c7 	movw	r1, #1991	; 0x7c7
 8007620:	483c      	ldr	r0, [pc, #240]	; (8007714 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007622:	f7f9 ff7d 	bl	8001520 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800762e:	d008      	beq.n	8007642 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d004      	beq.n	8007642 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007638:	f44f 61f9 	mov.w	r1, #1992	; 0x7c8
 800763c:	4835      	ldr	r0, [pc, #212]	; (8007714 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800763e:	f7f9 ff6f 	bl	8001520 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d009      	beq.n	800765e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007652:	d004      	beq.n	800765e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007654:	f240 71c9 	movw	r1, #1993	; 0x7c9
 8007658:	482e      	ldr	r0, [pc, #184]	; (8007714 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800765a:	f7f9 ff61 	bl	8001520 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	69db      	ldr	r3, [r3, #28]
 8007662:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007666:	d008      	beq.n	800767a <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	69db      	ldr	r3, [r3, #28]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d004      	beq.n	800767a <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8007670:	f240 71ca 	movw	r1, #1994	; 0x7ca
 8007674:	4827      	ldr	r0, [pc, #156]	; (8007714 <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007676:	f7f9 ff53 	bl	8001520 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007680:	2b01      	cmp	r3, #1
 8007682:	d101      	bne.n	8007688 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 8007684:	2302      	movs	r3, #2
 8007686:	e03d      	b.n	8007704 <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	4313      	orrs	r3, r2
 800769c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4313      	orrs	r3, r2
 80076c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	695b      	ldr	r3, [r3, #20]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	69db      	ldr	r3, [r3, #28]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	40012c00 	.word	0x40012c00
 8007710:	40013400 	.word	0x40013400
 8007714:	0800b29c 	.word	0x0800b29c

08007718 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007720:	bf00      	nop
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	bc80      	pop	{r7}
 8007728:	4770      	bx	lr

0800772a <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800772a:	b480      	push	{r7}
 800772c:	b083      	sub	sp, #12
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8007732:	bf00      	nop
 8007734:	370c      	adds	r7, #12
 8007736:	46bd      	mov	sp, r7
 8007738:	bc80      	pop	{r7}
 800773a:	4770      	bx	lr

0800773c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007744:	bf00      	nop
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	bc80      	pop	{r7}
 800774c:	4770      	bx	lr
	...

08007750 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d101      	bne.n	8007762 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e0a7      	b.n	80078b2 <HAL_UART_Init+0x162>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d02c      	beq.n	80077c4 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a53      	ldr	r2, [pc, #332]	; (80078bc <HAL_UART_Init+0x16c>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d00e      	beq.n	8007792 <HAL_UART_Init+0x42>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a51      	ldr	r2, [pc, #324]	; (80078c0 <HAL_UART_Init+0x170>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d009      	beq.n	8007792 <HAL_UART_Init+0x42>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a50      	ldr	r2, [pc, #320]	; (80078c4 <HAL_UART_Init+0x174>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d004      	beq.n	8007792 <HAL_UART_Init+0x42>
 8007788:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 800778c:	484e      	ldr	r0, [pc, #312]	; (80078c8 <HAL_UART_Init+0x178>)
 800778e:	f7f9 fec7 	bl	8001520 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d032      	beq.n	8007800 <HAL_UART_Init+0xb0>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	699b      	ldr	r3, [r3, #24]
 800779e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077a2:	d02d      	beq.n	8007800 <HAL_UART_Init+0xb0>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	699b      	ldr	r3, [r3, #24]
 80077a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077ac:	d028      	beq.n	8007800 <HAL_UART_Init+0xb0>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	699b      	ldr	r3, [r3, #24]
 80077b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077b6:	d023      	beq.n	8007800 <HAL_UART_Init+0xb0>
 80077b8:	f240 116d 	movw	r1, #365	; 0x16d
 80077bc:	4842      	ldr	r0, [pc, #264]	; (80078c8 <HAL_UART_Init+0x178>)
 80077be:	f7f9 feaf 	bl	8001520 <assert_failed>
 80077c2:	e01d      	b.n	8007800 <HAL_UART_Init+0xb0>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a3c      	ldr	r2, [pc, #240]	; (80078bc <HAL_UART_Init+0x16c>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d018      	beq.n	8007800 <HAL_UART_Init+0xb0>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a3b      	ldr	r2, [pc, #236]	; (80078c0 <HAL_UART_Init+0x170>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d013      	beq.n	8007800 <HAL_UART_Init+0xb0>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a39      	ldr	r2, [pc, #228]	; (80078c4 <HAL_UART_Init+0x174>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d00e      	beq.n	8007800 <HAL_UART_Init+0xb0>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a39      	ldr	r2, [pc, #228]	; (80078cc <HAL_UART_Init+0x17c>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d009      	beq.n	8007800 <HAL_UART_Init+0xb0>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a37      	ldr	r2, [pc, #220]	; (80078d0 <HAL_UART_Init+0x180>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d004      	beq.n	8007800 <HAL_UART_Init+0xb0>
 80077f6:	f240 1171 	movw	r1, #369	; 0x171
 80077fa:	4833      	ldr	r0, [pc, #204]	; (80078c8 <HAL_UART_Init+0x178>)
 80077fc:	f7f9 fe90 	bl	8001520 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d009      	beq.n	800781c <HAL_UART_Init+0xcc>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007810:	d004      	beq.n	800781c <HAL_UART_Init+0xcc>
 8007812:	f240 1173 	movw	r1, #371	; 0x173
 8007816:	482c      	ldr	r0, [pc, #176]	; (80078c8 <HAL_UART_Init+0x178>)
 8007818:	f7f9 fe82 	bl	8001520 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007822:	b2db      	uxtb	r3, r3
 8007824:	2b00      	cmp	r3, #0
 8007826:	d111      	bne.n	800784c <HAL_UART_Init+0xfc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 fb0d 	bl	8007e50 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800783a:	2b00      	cmp	r3, #0
 800783c:	d102      	bne.n	8007844 <HAL_UART_Init+0xf4>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4a24      	ldr	r2, [pc, #144]	; (80078d4 <HAL_UART_Init+0x184>)
 8007842:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2224      	movs	r2, #36	; 0x24
 8007850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68da      	ldr	r2, [r3, #12]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007862:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fd01 	bl	800826c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	691a      	ldr	r2, [r3, #16]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007878:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	695a      	ldr	r2, [r3, #20]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007888:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68da      	ldr	r2, [r3, #12]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007898:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2220      	movs	r2, #32
 80078a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2220      	movs	r2, #32
 80078ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3708      	adds	r7, #8
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	bf00      	nop
 80078bc:	40013800 	.word	0x40013800
 80078c0:	40004400 	.word	0x40004400
 80078c4:	40004800 	.word	0x40004800
 80078c8:	0800b2d8 	.word	0x0800b2d8
 80078cc:	40004c00 	.word	0x40004c00
 80078d0:	40005000 	.word	0x40005000
 80078d4:	080019b5 	.word	0x080019b5

080078d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b08a      	sub	sp, #40	; 0x28
 80078dc:	af02      	add	r7, sp, #8
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	603b      	str	r3, [r7, #0]
 80078e4:	4613      	mov	r3, r2
 80078e6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80078e8:	2300      	movs	r3, #0
 80078ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	2b20      	cmp	r3, #32
 80078f6:	d17c      	bne.n	80079f2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d002      	beq.n	8007904 <HAL_UART_Transmit+0x2c>
 80078fe:	88fb      	ldrh	r3, [r7, #6]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d101      	bne.n	8007908 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e075      	b.n	80079f4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800790e:	2b01      	cmp	r3, #1
 8007910:	d101      	bne.n	8007916 <HAL_UART_Transmit+0x3e>
 8007912:	2302      	movs	r3, #2
 8007914:	e06e      	b.n	80079f4 <HAL_UART_Transmit+0x11c>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2201      	movs	r2, #1
 800791a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	2221      	movs	r2, #33	; 0x21
 8007928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800792c:	f7fa faa4 	bl	8001e78 <HAL_GetTick>
 8007930:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	88fa      	ldrh	r2, [r7, #6]
 8007936:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	88fa      	ldrh	r2, [r7, #6]
 800793c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007946:	d108      	bne.n	800795a <HAL_UART_Transmit+0x82>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d104      	bne.n	800795a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007950:	2300      	movs	r3, #0
 8007952:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	61bb      	str	r3, [r7, #24]
 8007958:	e003      	b.n	8007962 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800795e:	2300      	movs	r3, #0
 8007960:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2200      	movs	r2, #0
 8007966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800796a:	e02a      	b.n	80079c2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	2200      	movs	r2, #0
 8007974:	2180      	movs	r1, #128	; 0x80
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f000 faa0 	bl	8007ebc <UART_WaitOnFlagUntilTimeout>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d001      	beq.n	8007986 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007982:	2303      	movs	r3, #3
 8007984:	e036      	b.n	80079f4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007986:	69fb      	ldr	r3, [r7, #28]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d10b      	bne.n	80079a4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800798c:	69bb      	ldr	r3, [r7, #24]
 800798e:	881b      	ldrh	r3, [r3, #0]
 8007990:	461a      	mov	r2, r3
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800799a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	3302      	adds	r3, #2
 80079a0:	61bb      	str	r3, [r7, #24]
 80079a2:	e007      	b.n	80079b4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	781a      	ldrb	r2, [r3, #0]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	3301      	adds	r3, #1
 80079b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	3b01      	subs	r3, #1
 80079bc:	b29a      	uxth	r2, r3
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1cf      	bne.n	800796c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	9300      	str	r3, [sp, #0]
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	2200      	movs	r2, #0
 80079d4:	2140      	movs	r1, #64	; 0x40
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f000 fa70 	bl	8007ebc <UART_WaitOnFlagUntilTimeout>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d001      	beq.n	80079e6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	e006      	b.n	80079f4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2220      	movs	r2, #32
 80079ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80079ee:	2300      	movs	r3, #0
 80079f0:	e000      	b.n	80079f4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80079f2:	2302      	movs	r3, #2
  }
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3720      	adds	r7, #32
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	4613      	mov	r3, r2
 8007a08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	2b20      	cmp	r3, #32
 8007a14:	d11d      	bne.n	8007a52 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d002      	beq.n	8007a22 <HAL_UART_Receive_IT+0x26>
 8007a1c:	88fb      	ldrh	r3, [r7, #6]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d101      	bne.n	8007a26 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e016      	b.n	8007a54 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d101      	bne.n	8007a34 <HAL_UART_Receive_IT+0x38>
 8007a30:	2302      	movs	r3, #2
 8007a32:	e00f      	b.n	8007a54 <HAL_UART_Receive_IT+0x58>
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007a42:	88fb      	ldrh	r3, [r7, #6]
 8007a44:	461a      	mov	r2, r3
 8007a46:	68b9      	ldr	r1, [r7, #8]
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f000 fa81 	bl	8007f50 <UART_Start_Receive_IT>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	e000      	b.n	8007a54 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007a52:	2302      	movs	r3, #2
  }
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3710      	adds	r7, #16
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b08a      	sub	sp, #40	; 0x28
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	695b      	ldr	r3, [r3, #20]
 8007a7a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007a80:	2300      	movs	r3, #0
 8007a82:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a86:	f003 030f 	and.w	r3, r3, #15
 8007a8a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d10d      	bne.n	8007aae <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a94:	f003 0320 	and.w	r3, r3, #32
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d008      	beq.n	8007aae <HAL_UART_IRQHandler+0x52>
 8007a9c:	6a3b      	ldr	r3, [r7, #32]
 8007a9e:	f003 0320 	and.w	r3, r3, #32
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d003      	beq.n	8007aae <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 fb34 	bl	8008114 <UART_Receive_IT>
      return;
 8007aac:	e180      	b.n	8007db0 <HAL_UART_IRQHandler+0x354>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f000 80b4 	beq.w	8007c1e <HAL_UART_IRQHandler+0x1c2>
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	f003 0301 	and.w	r3, r3, #1
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d105      	bne.n	8007acc <HAL_UART_IRQHandler+0x70>
 8007ac0:	6a3b      	ldr	r3, [r7, #32]
 8007ac2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	f000 80a9 	beq.w	8007c1e <HAL_UART_IRQHandler+0x1c2>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ace:	f003 0301 	and.w	r3, r3, #1
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00a      	beq.n	8007aec <HAL_UART_IRQHandler+0x90>
 8007ad6:	6a3b      	ldr	r3, [r7, #32]
 8007ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d005      	beq.n	8007aec <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae4:	f043 0201 	orr.w	r2, r3, #1
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aee:	f003 0304 	and.w	r3, r3, #4
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00a      	beq.n	8007b0c <HAL_UART_IRQHandler+0xb0>
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	f003 0301 	and.w	r3, r3, #1
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d005      	beq.n	8007b0c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b04:	f043 0202 	orr.w	r2, r3, #2
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0e:	f003 0302 	and.w	r3, r3, #2
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00a      	beq.n	8007b2c <HAL_UART_IRQHandler+0xd0>
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	f003 0301 	and.w	r3, r3, #1
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d005      	beq.n	8007b2c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b24:	f043 0204 	orr.w	r2, r3, #4
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2e:	f003 0308 	and.w	r3, r3, #8
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00f      	beq.n	8007b56 <HAL_UART_IRQHandler+0xfa>
 8007b36:	6a3b      	ldr	r3, [r7, #32]
 8007b38:	f003 0320 	and.w	r3, r3, #32
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d104      	bne.n	8007b4a <HAL_UART_IRQHandler+0xee>
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d005      	beq.n	8007b56 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4e:	f043 0208 	orr.w	r2, r3, #8
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f000 8123 	beq.w	8007da6 <HAL_UART_IRQHandler+0x34a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b62:	f003 0320 	and.w	r3, r3, #32
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d007      	beq.n	8007b7a <HAL_UART_IRQHandler+0x11e>
 8007b6a:	6a3b      	ldr	r3, [r7, #32]
 8007b6c:	f003 0320 	and.w	r3, r3, #32
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d002      	beq.n	8007b7a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 facd 	bl	8008114 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	695b      	ldr	r3, [r3, #20]
 8007b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	bf14      	ite	ne
 8007b88:	2301      	movne	r3, #1
 8007b8a:	2300      	moveq	r3, #0
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b94:	f003 0308 	and.w	r3, r3, #8
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d102      	bne.n	8007ba2 <HAL_UART_IRQHandler+0x146>
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d033      	beq.n	8007c0a <HAL_UART_IRQHandler+0x1ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fa0d 	bl	8007fc2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d024      	beq.n	8007c00 <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	695a      	ldr	r2, [r3, #20]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bc4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d013      	beq.n	8007bf6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd2:	4a79      	ldr	r2, [pc, #484]	; (8007db8 <HAL_UART_IRQHandler+0x35c>)
 8007bd4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7fb f8e6 	bl	8002dac <HAL_DMA_Abort_IT>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d019      	beq.n	8007c1a <HAL_UART_IRQHandler+0x1be>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007bf0:	4610      	mov	r0, r2
 8007bf2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf4:	e011      	b.n	8007c1a <HAL_UART_IRQHandler+0x1be>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bfe:	e00c      	b.n	8007c1a <HAL_UART_IRQHandler+0x1be>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c08:	e007      	b.n	8007c1a <HAL_UART_IRQHandler+0x1be>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007c18:	e0c5      	b.n	8007da6 <HAL_UART_IRQHandler+0x34a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c1a:	bf00      	nop
    return;
 8007c1c:	e0c3      	b.n	8007da6 <HAL_UART_IRQHandler+0x34a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	f040 80a3 	bne.w	8007d6e <HAL_UART_IRQHandler+0x312>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2a:	f003 0310 	and.w	r3, r3, #16
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f000 809d 	beq.w	8007d6e <HAL_UART_IRQHandler+0x312>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	f003 0310 	and.w	r3, r3, #16
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	f000 8097 	beq.w	8007d6e <HAL_UART_IRQHandler+0x312>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c40:	2300      	movs	r3, #0
 8007c42:	60fb      	str	r3, [r7, #12]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	60fb      	str	r3, [r7, #12]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	60fb      	str	r3, [r7, #12]
 8007c54:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	695b      	ldr	r3, [r3, #20]
 8007c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d04f      	beq.n	8007d04 <HAL_UART_IRQHandler+0x2a8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007c6e:	8a3b      	ldrh	r3, [r7, #16]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f000 809a 	beq.w	8007daa <HAL_UART_IRQHandler+0x34e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c7a:	8a3a      	ldrh	r2, [r7, #16]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	f080 8094 	bcs.w	8007daa <HAL_UART_IRQHandler+0x34e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	8a3a      	ldrh	r2, [r7, #16]
 8007c86:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	2b20      	cmp	r3, #32
 8007c90:	d02b      	beq.n	8007cea <HAL_UART_IRQHandler+0x28e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	68da      	ldr	r2, [r3, #12]
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ca0:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	695a      	ldr	r2, [r3, #20]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f022 0201 	bic.w	r2, r2, #1
 8007cb0:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	695a      	ldr	r2, [r3, #20]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cc0:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2220      	movs	r2, #32
 8007cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68da      	ldr	r2, [r3, #12]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f022 0210 	bic.w	r2, r2, #16
 8007cde:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7fb f827 	bl	8002d38 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8007cf6:	b292      	uxth	r2, r2
 8007cf8:	1a8a      	subs	r2, r1, r2
 8007cfa:	b292      	uxth	r2, r2
 8007cfc:	4611      	mov	r1, r2
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
      return;
 8007d02:	e052      	b.n	8007daa <HAL_UART_IRQHandler+0x34e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	1ad3      	subs	r3, r2, r3
 8007d10:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d048      	beq.n	8007dae <HAL_UART_IRQHandler+0x352>
          &&(nb_rx_data > 0U) )
 8007d1c:	8a7b      	ldrh	r3, [r7, #18]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d045      	beq.n	8007dae <HAL_UART_IRQHandler+0x352>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	68da      	ldr	r2, [r3, #12]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007d30:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	695a      	ldr	r2, [r3, #20]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f022 0201 	bic.w	r2, r2, #1
 8007d40:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2220      	movs	r2, #32
 8007d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68da      	ldr	r2, [r3, #12]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f022 0210 	bic.w	r2, r2, #16
 8007d5e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d64:	8a7a      	ldrh	r2, [r7, #18]
 8007d66:	4611      	mov	r1, r2
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
      return;
 8007d6c:	e01f      	b.n	8007dae <HAL_UART_IRQHandler+0x352>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d008      	beq.n	8007d8a <HAL_UART_IRQHandler+0x32e>
 8007d78:	6a3b      	ldr	r3, [r7, #32]
 8007d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d003      	beq.n	8007d8a <HAL_UART_IRQHandler+0x32e>
  {
    UART_Transmit_IT(huart);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 f95e 	bl	8008044 <UART_Transmit_IT>
    return;
 8007d88:	e012      	b.n	8007db0 <HAL_UART_IRQHandler+0x354>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00d      	beq.n	8007db0 <HAL_UART_IRQHandler+0x354>
 8007d94:	6a3b      	ldr	r3, [r7, #32]
 8007d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d008      	beq.n	8007db0 <HAL_UART_IRQHandler+0x354>
  {
    UART_EndTransmit_IT(huart);
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f99f 	bl	80080e2 <UART_EndTransmit_IT>
    return;
 8007da4:	e004      	b.n	8007db0 <HAL_UART_IRQHandler+0x354>
    return;
 8007da6:	bf00      	nop
 8007da8:	e002      	b.n	8007db0 <HAL_UART_IRQHandler+0x354>
      return;
 8007daa:	bf00      	nop
 8007dac:	e000      	b.n	8007db0 <HAL_UART_IRQHandler+0x354>
      return;
 8007dae:	bf00      	nop
  }
}
 8007db0:	3728      	adds	r7, #40	; 0x28
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	0800801b 	.word	0x0800801b

08007dbc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007dc4:	bf00      	nop
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bc80      	pop	{r7}
 8007dcc:	4770      	bx	lr

08007dce <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007dce:	b480      	push	{r7}
 8007dd0:	b083      	sub	sp, #12
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007dd6:	bf00      	nop
 8007dd8:	370c      	adds	r7, #12
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bc80      	pop	{r7}
 8007dde:	4770      	bx	lr

08007de0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007de8:	bf00      	nop
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bc80      	pop	{r7}
 8007df0:	4770      	bx	lr

08007df2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007df2:	b480      	push	{r7}
 8007df4:	b083      	sub	sp, #12
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007dfa:	bf00      	nop
 8007dfc:	370c      	adds	r7, #12
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bc80      	pop	{r7}
 8007e02:	4770      	bx	lr

08007e04 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8007e0c:	bf00      	nop
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bc80      	pop	{r7}
 8007e14:	4770      	bx	lr

08007e16 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8007e16:	b480      	push	{r7}
 8007e18:	b083      	sub	sp, #12
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8007e1e:	bf00      	nop
 8007e20:	370c      	adds	r7, #12
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bc80      	pop	{r7}
 8007e26:	4770      	bx	lr

08007e28 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007e30:	bf00      	nop
 8007e32:	370c      	adds	r7, #12
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bc80      	pop	{r7}
 8007e38:	4770      	bx	lr

08007e3a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e3a:	b480      	push	{r7}
 8007e3c:	b083      	sub	sp, #12
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
 8007e42:	460b      	mov	r3, r1
 8007e44:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e46:	bf00      	nop
 8007e48:	370c      	adds	r7, #12
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bc80      	pop	{r7}
 8007e4e:	4770      	bx	lr

08007e50 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a0f      	ldr	r2, [pc, #60]	; (8007e98 <UART_InitCallbacksToDefault+0x48>)
 8007e5c:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a0e      	ldr	r2, [pc, #56]	; (8007e9c <UART_InitCallbacksToDefault+0x4c>)
 8007e62:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4a0e      	ldr	r2, [pc, #56]	; (8007ea0 <UART_InitCallbacksToDefault+0x50>)
 8007e68:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a0d      	ldr	r2, [pc, #52]	; (8007ea4 <UART_InitCallbacksToDefault+0x54>)
 8007e6e:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4a0d      	ldr	r2, [pc, #52]	; (8007ea8 <UART_InitCallbacksToDefault+0x58>)
 8007e74:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a0c      	ldr	r2, [pc, #48]	; (8007eac <UART_InitCallbacksToDefault+0x5c>)
 8007e7a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	4a0c      	ldr	r2, [pc, #48]	; (8007eb0 <UART_InitCallbacksToDefault+0x60>)
 8007e80:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a0b      	ldr	r2, [pc, #44]	; (8007eb4 <UART_InitCallbacksToDefault+0x64>)
 8007e86:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	4a0b      	ldr	r2, [pc, #44]	; (8007eb8 <UART_InitCallbacksToDefault+0x68>)
 8007e8c:	669a      	str	r2, [r3, #104]	; 0x68

}
 8007e8e:	bf00      	nop
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bc80      	pop	{r7}
 8007e96:	4770      	bx	lr
 8007e98:	08007dcf 	.word	0x08007dcf
 8007e9c:	08007dbd 	.word	0x08007dbd
 8007ea0:	08007de1 	.word	0x08007de1
 8007ea4:	080014d5 	.word	0x080014d5
 8007ea8:	08007df3 	.word	0x08007df3
 8007eac:	08007e05 	.word	0x08007e05
 8007eb0:	08007e17 	.word	0x08007e17
 8007eb4:	08007e29 	.word	0x08007e29
 8007eb8:	08007e3b 	.word	0x08007e3b

08007ebc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	603b      	str	r3, [r7, #0]
 8007ec8:	4613      	mov	r3, r2
 8007eca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ecc:	e02c      	b.n	8007f28 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed4:	d028      	beq.n	8007f28 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d007      	beq.n	8007eec <UART_WaitOnFlagUntilTimeout+0x30>
 8007edc:	f7f9 ffcc 	bl	8001e78 <HAL_GetTick>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	1ad3      	subs	r3, r2, r3
 8007ee6:	69ba      	ldr	r2, [r7, #24]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d21d      	bcs.n	8007f28 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	68da      	ldr	r2, [r3, #12]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007efa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	695a      	ldr	r2, [r3, #20]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f022 0201 	bic.w	r2, r2, #1
 8007f0a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2220      	movs	r2, #32
 8007f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2220      	movs	r2, #32
 8007f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007f24:	2303      	movs	r3, #3
 8007f26:	e00f      	b.n	8007f48 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	4013      	ands	r3, r2
 8007f32:	68ba      	ldr	r2, [r7, #8]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	bf0c      	ite	eq
 8007f38:	2301      	moveq	r3, #1
 8007f3a:	2300      	movne	r3, #0
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	461a      	mov	r2, r3
 8007f40:	79fb      	ldrb	r3, [r7, #7]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d0c3      	beq.n	8007ece <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3710      	adds	r7, #16
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	68ba      	ldr	r2, [r7, #8]
 8007f62:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	88fa      	ldrh	r2, [r7, #6]
 8007f68:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	88fa      	ldrh	r2, [r7, #6]
 8007f6e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2200      	movs	r2, #0
 8007f74:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2222      	movs	r2, #34	; 0x22
 8007f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	68da      	ldr	r2, [r3, #12]
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f94:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	695a      	ldr	r2, [r3, #20]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f042 0201 	orr.w	r2, r2, #1
 8007fa4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68da      	ldr	r2, [r3, #12]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f042 0220 	orr.w	r2, r2, #32
 8007fb4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007fb6:	2300      	movs	r3, #0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3714      	adds	r7, #20
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bc80      	pop	{r7}
 8007fc0:	4770      	bx	lr

08007fc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fc2:	b480      	push	{r7}
 8007fc4:	b083      	sub	sp, #12
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	68da      	ldr	r2, [r3, #12]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007fd8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	695a      	ldr	r2, [r3, #20]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f022 0201 	bic.w	r2, r2, #1
 8007fe8:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d107      	bne.n	8008002 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	68da      	ldr	r2, [r3, #12]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f022 0210 	bic.w	r2, r2, #16
 8008000:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2220      	movs	r2, #32
 8008006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008010:	bf00      	nop
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	bc80      	pop	{r7}
 8008018:	4770      	bx	lr

0800801a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b084      	sub	sp, #16
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008026:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2200      	movs	r2, #0
 800802c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2200      	movs	r2, #0
 8008032:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800803c:	bf00      	nop
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008052:	b2db      	uxtb	r3, r3
 8008054:	2b21      	cmp	r3, #33	; 0x21
 8008056:	d13e      	bne.n	80080d6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008060:	d114      	bne.n	800808c <UART_Transmit_IT+0x48>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d110      	bne.n	800808c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	881b      	ldrh	r3, [r3, #0]
 8008074:	461a      	mov	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800807e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6a1b      	ldr	r3, [r3, #32]
 8008084:	1c9a      	adds	r2, r3, #2
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	621a      	str	r2, [r3, #32]
 800808a:	e008      	b.n	800809e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a1b      	ldr	r3, [r3, #32]
 8008090:	1c59      	adds	r1, r3, #1
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	6211      	str	r1, [r2, #32]
 8008096:	781a      	ldrb	r2, [r3, #0]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	3b01      	subs	r3, #1
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	4619      	mov	r1, r3
 80080ac:	84d1      	strh	r1, [r2, #38]	; 0x26
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d10f      	bne.n	80080d2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	68da      	ldr	r2, [r3, #12]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68da      	ldr	r2, [r3, #12]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80080d2:	2300      	movs	r3, #0
 80080d4:	e000      	b.n	80080d8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80080d6:	2302      	movs	r3, #2
  }
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3714      	adds	r7, #20
 80080dc:	46bd      	mov	sp, r7
 80080de:	bc80      	pop	{r7}
 80080e0:	4770      	bx	lr

080080e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b082      	sub	sp, #8
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68da      	ldr	r2, [r3, #12]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2220      	movs	r2, #32
 80080fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	3708      	adds	r7, #8
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b086      	sub	sp, #24
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008122:	b2db      	uxtb	r3, r3
 8008124:	2b22      	cmp	r3, #34	; 0x22
 8008126:	f040 809b 	bne.w	8008260 <UART_Receive_IT+0x14c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008132:	d117      	bne.n	8008164 <UART_Receive_IT+0x50>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d113      	bne.n	8008164 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800813c:	2300      	movs	r3, #0
 800813e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008144:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	b29b      	uxth	r3, r3
 800814e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008152:	b29a      	uxth	r2, r3
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800815c:	1c9a      	adds	r2, r3, #2
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	629a      	str	r2, [r3, #40]	; 0x28
 8008162:	e026      	b.n	80081b2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008168:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 800816a:	2300      	movs	r3, #0
 800816c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008176:	d007      	beq.n	8008188 <UART_Receive_IT+0x74>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10a      	bne.n	8008196 <UART_Receive_IT+0x82>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	691b      	ldr	r3, [r3, #16]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d106      	bne.n	8008196 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	b2da      	uxtb	r2, r3
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	701a      	strb	r2, [r3, #0]
 8008194:	e008      	b.n	80081a8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	b2db      	uxtb	r3, r3
 800819e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081a2:	b2da      	uxtb	r2, r3
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ac:	1c5a      	adds	r2, r3, #1
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	3b01      	subs	r3, #1
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	687a      	ldr	r2, [r7, #4]
 80081be:	4619      	mov	r1, r3
 80081c0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d14a      	bne.n	800825c <UART_Receive_IT+0x148>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	68da      	ldr	r2, [r3, #12]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f022 0220 	bic.w	r2, r2, #32
 80081d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68da      	ldr	r2, [r3, #12]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80081e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	695a      	ldr	r2, [r3, #20]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f022 0201 	bic.w	r2, r2, #1
 80081f4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2220      	movs	r2, #32
 80081fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008202:	2b01      	cmp	r3, #1
 8008204:	d124      	bne.n	8008250 <UART_Receive_IT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68da      	ldr	r2, [r3, #12]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f022 0210 	bic.w	r2, r2, #16
 800821a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f003 0310 	and.w	r3, r3, #16
 8008226:	2b10      	cmp	r3, #16
 8008228:	d10a      	bne.n	8008240 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800822a:	2300      	movs	r3, #0
 800822c:	60fb      	str	r3, [r7, #12]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	60fb      	str	r3, [r7, #12]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	60fb      	str	r3, [r7, #12]
 800823e:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8008248:	4611      	mov	r1, r2
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	4798      	blx	r3
 800824e:	e003      	b.n	8008258 <UART_Receive_IT+0x144>
      else
      {
       /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	4798      	blx	r3
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008258:	2300      	movs	r3, #0
 800825a:	e002      	b.n	8008262 <UART_Receive_IT+0x14e>
    }
    return HAL_OK;
 800825c:	2300      	movs	r3, #0
 800825e:	e000      	b.n	8008262 <UART_Receive_IT+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8008260:	2302      	movs	r3, #2
  }
}
 8008262:	4618      	mov	r0, r3
 8008264:	3718      	adds	r7, #24
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
	...

0800826c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	4a5f      	ldr	r2, [pc, #380]	; (80083f8 <UART_SetConfig+0x18c>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d904      	bls.n	8008288 <UART_SetConfig+0x1c>
 800827e:	f640 6153 	movw	r1, #3667	; 0xe53
 8008282:	485e      	ldr	r0, [pc, #376]	; (80083fc <UART_SetConfig+0x190>)
 8008284:	f7f9 f94c 	bl	8001520 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d009      	beq.n	80082a4 <UART_SetConfig+0x38>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008298:	d004      	beq.n	80082a4 <UART_SetConfig+0x38>
 800829a:	f640 6154 	movw	r1, #3668	; 0xe54
 800829e:	4857      	ldr	r0, [pc, #348]	; (80083fc <UART_SetConfig+0x190>)
 80082a0:	f7f9 f93e 	bl	8001520 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00e      	beq.n	80082ca <UART_SetConfig+0x5e>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082b4:	d009      	beq.n	80082ca <UART_SetConfig+0x5e>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80082be:	d004      	beq.n	80082ca <UART_SetConfig+0x5e>
 80082c0:	f640 6155 	movw	r1, #3669	; 0xe55
 80082c4:	484d      	ldr	r0, [pc, #308]	; (80083fc <UART_SetConfig+0x190>)
 80082c6:	f7f9 f92b 	bl	8001520 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	695a      	ldr	r2, [r3, #20]
 80082ce:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80082d2:	4013      	ands	r3, r2
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d103      	bne.n	80082e0 <UART_SetConfig+0x74>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	695b      	ldr	r3, [r3, #20]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d104      	bne.n	80082ea <UART_SetConfig+0x7e>
 80082e0:	f640 6156 	movw	r1, #3670	; 0xe56
 80082e4:	4845      	ldr	r0, [pc, #276]	; (80083fc <UART_SetConfig+0x190>)
 80082e6:	f7f9 f91b 	bl	8001520 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	691b      	ldr	r3, [r3, #16]
 80082f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	68da      	ldr	r2, [r3, #12]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	430a      	orrs	r2, r1
 80082fe:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	689a      	ldr	r2, [r3, #8]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	691b      	ldr	r3, [r3, #16]
 8008308:	431a      	orrs	r2, r3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	695b      	ldr	r3, [r3, #20]
 800830e:	4313      	orrs	r3, r2
 8008310:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800831c:	f023 030c 	bic.w	r3, r3, #12
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	6812      	ldr	r2, [r2, #0]
 8008324:	68b9      	ldr	r1, [r7, #8]
 8008326:	430b      	orrs	r3, r1
 8008328:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	695b      	ldr	r3, [r3, #20]
 8008330:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	699a      	ldr	r2, [r3, #24]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	430a      	orrs	r2, r1
 800833e:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a2e      	ldr	r2, [pc, #184]	; (8008400 <UART_SetConfig+0x194>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d103      	bne.n	8008352 <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800834a:	f7fb feaf 	bl	80040ac <HAL_RCC_GetPCLK2Freq>
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	e002      	b.n	8008358 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008352:	f7fb fe97 	bl	8004084 <HAL_RCC_GetPCLK1Freq>
 8008356:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	4613      	mov	r3, r2
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	4413      	add	r3, r2
 8008360:	009a      	lsls	r2, r3, #2
 8008362:	441a      	add	r2, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	fbb2 f3f3 	udiv	r3, r2, r3
 800836e:	4a25      	ldr	r2, [pc, #148]	; (8008404 <UART_SetConfig+0x198>)
 8008370:	fba2 2303 	umull	r2, r3, r2, r3
 8008374:	095b      	lsrs	r3, r3, #5
 8008376:	0119      	lsls	r1, r3, #4
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	4613      	mov	r3, r2
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	4413      	add	r3, r2
 8008380:	009a      	lsls	r2, r3, #2
 8008382:	441a      	add	r2, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	fbb2 f2f3 	udiv	r2, r2, r3
 800838e:	4b1d      	ldr	r3, [pc, #116]	; (8008404 <UART_SetConfig+0x198>)
 8008390:	fba3 0302 	umull	r0, r3, r3, r2
 8008394:	095b      	lsrs	r3, r3, #5
 8008396:	2064      	movs	r0, #100	; 0x64
 8008398:	fb00 f303 	mul.w	r3, r0, r3
 800839c:	1ad3      	subs	r3, r2, r3
 800839e:	011b      	lsls	r3, r3, #4
 80083a0:	3332      	adds	r3, #50	; 0x32
 80083a2:	4a18      	ldr	r2, [pc, #96]	; (8008404 <UART_SetConfig+0x198>)
 80083a4:	fba2 2303 	umull	r2, r3, r2, r3
 80083a8:	095b      	lsrs	r3, r3, #5
 80083aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083ae:	4419      	add	r1, r3
 80083b0:	68fa      	ldr	r2, [r7, #12]
 80083b2:	4613      	mov	r3, r2
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	4413      	add	r3, r2
 80083b8:	009a      	lsls	r2, r3, #2
 80083ba:	441a      	add	r2, r3
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80083c6:	4b0f      	ldr	r3, [pc, #60]	; (8008404 <UART_SetConfig+0x198>)
 80083c8:	fba3 0302 	umull	r0, r3, r3, r2
 80083cc:	095b      	lsrs	r3, r3, #5
 80083ce:	2064      	movs	r0, #100	; 0x64
 80083d0:	fb00 f303 	mul.w	r3, r0, r3
 80083d4:	1ad3      	subs	r3, r2, r3
 80083d6:	011b      	lsls	r3, r3, #4
 80083d8:	3332      	adds	r3, #50	; 0x32
 80083da:	4a0a      	ldr	r2, [pc, #40]	; (8008404 <UART_SetConfig+0x198>)
 80083dc:	fba2 2303 	umull	r2, r3, r2, r3
 80083e0:	095b      	lsrs	r3, r3, #5
 80083e2:	f003 020f 	and.w	r2, r3, #15
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	440a      	add	r2, r1
 80083ec:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80083ee:	bf00      	nop
 80083f0:	3710      	adds	r7, #16
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	0044aa20 	.word	0x0044aa20
 80083fc:	0800b2d8 	.word	0x0800b2d8
 8008400:	40013800 	.word	0x40013800
 8008404:	51eb851f 	.word	0x51eb851f

08008408 <BAT_init>:
static ADC_HandleTypeDef *g_BAT_adcHandle;
static RTC_HandleTypeDef *g_BAT_rtcHandle;
static RTC_TimeTypeDef    g_BAT_lastReadTime;

void BAT_init(ADC_HandleTypeDef *p_adcHandle, RTC_HandleTypeDef *p_rtcHandle)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef l_time;
  RTC_DateTypeDef l_date;

  LOG_info("Initializing battery check");
 8008412:	4913      	ldr	r1, [pc, #76]	; (8008460 <BAT_init+0x58>)
 8008414:	2001      	movs	r0, #1
 8008416:	f001 f999 	bl	800974c <LOG_log>

  g_BAT_adcHandle = p_adcHandle;
 800841a:	4a12      	ldr	r2, [pc, #72]	; (8008464 <BAT_init+0x5c>)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6013      	str	r3, [r2, #0]
  g_BAT_rtcHandle = p_rtcHandle;
 8008420:	4a11      	ldr	r2, [pc, #68]	; (8008468 <BAT_init+0x60>)
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	6013      	str	r3, [r2, #0]

  HAL_RTC_GetTime(g_BAT_rtcHandle, &l_time, RTC_FORMAT_BCD);
 8008426:	4b10      	ldr	r3, [pc, #64]	; (8008468 <BAT_init+0x60>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f107 010c 	add.w	r1, r7, #12
 800842e:	2201      	movs	r2, #1
 8008430:	4618      	mov	r0, r3
 8008432:	f7fc fa39 	bl	80048a8 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(g_BAT_rtcHandle, &l_date, RTC_FORMAT_BCD);
 8008436:	4b0c      	ldr	r3, [pc, #48]	; (8008468 <BAT_init+0x60>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f107 0108 	add.w	r1, r7, #8
 800843e:	2201      	movs	r2, #1
 8008440:	4618      	mov	r0, r3
 8008442:	f7fc fc35 	bl	8004cb0 <HAL_RTC_GetDate>

  g_BAT_lastReadTime = l_time;
 8008446:	4b09      	ldr	r3, [pc, #36]	; (800846c <BAT_init+0x64>)
 8008448:	f107 020c 	add.w	r2, r7, #12
 800844c:	6812      	ldr	r2, [r2, #0]
 800844e:	4611      	mov	r1, r2
 8008450:	8019      	strh	r1, [r3, #0]
 8008452:	3302      	adds	r3, #2
 8008454:	0c12      	lsrs	r2, r2, #16
 8008456:	701a      	strb	r2, [r3, #0]

  return;
 8008458:	bf00      	nop
}
 800845a:	3710      	adds	r7, #16
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}
 8008460:	0800b314 	.word	0x0800b314
 8008464:	200000a0 	.word	0x200000a0
 8008468:	200000a4 	.word	0x200000a4
 800846c:	200000a8 	.word	0x200000a8

08008470 <BAT_update>:

void BAT_update(uint32_t *p_voltageInMv)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b086      	sub	sp, #24
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef l_time;
  RTC_DateTypeDef l_date;
  uint32_t        l_adcRawData;
  float           l_voltageInV;

  HAL_RTC_GetTime(g_BAT_rtcHandle, &l_time, RTC_FORMAT_BCD);
 8008478:	4b3d      	ldr	r3, [pc, #244]	; (8008570 <BAT_update+0x100>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f107 010c 	add.w	r1, r7, #12
 8008480:	2201      	movs	r2, #1
 8008482:	4618      	mov	r0, r3
 8008484:	f7fc fa10 	bl	80048a8 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(g_BAT_rtcHandle, &l_date, RTC_FORMAT_BCD);
 8008488:	4b39      	ldr	r3, [pc, #228]	; (8008570 <BAT_update+0x100>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f107 0108 	add.w	r1, r7, #8
 8008490:	2201      	movs	r2, #1
 8008492:	4618      	mov	r0, r3
 8008494:	f7fc fc0c 	bl	8004cb0 <HAL_RTC_GetDate>

  if ((            l_time.Hours * 3600 +             l_time.Minutes * 60 +             l_time.Seconds) -
 8008498:	7b3b      	ldrb	r3, [r7, #12]
 800849a:	461a      	mov	r2, r3
 800849c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80084a0:	fb03 f202 	mul.w	r2, r3, r2
 80084a4:	7b7b      	ldrb	r3, [r7, #13]
 80084a6:	4619      	mov	r1, r3
 80084a8:	460b      	mov	r3, r1
 80084aa:	011b      	lsls	r3, r3, #4
 80084ac:	1a5b      	subs	r3, r3, r1
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	4413      	add	r3, r2
 80084b2:	7bba      	ldrb	r2, [r7, #14]
 80084b4:	441a      	add	r2, r3
      (g_BAT_lastReadTime.Hours * 3600 + g_BAT_lastReadTime.Minutes * 60 + g_BAT_lastReadTime.Seconds) >= BAT_POLLING_PERIOD_IN_S)
 80084b6:	4b2f      	ldr	r3, [pc, #188]	; (8008574 <BAT_update+0x104>)
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	4619      	mov	r1, r3
 80084bc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80084c0:	fb03 f101 	mul.w	r1, r3, r1
 80084c4:	4b2b      	ldr	r3, [pc, #172]	; (8008574 <BAT_update+0x104>)
 80084c6:	785b      	ldrb	r3, [r3, #1]
 80084c8:	4618      	mov	r0, r3
 80084ca:	4603      	mov	r3, r0
 80084cc:	011b      	lsls	r3, r3, #4
 80084ce:	1a1b      	subs	r3, r3, r0
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	440b      	add	r3, r1
 80084d4:	4927      	ldr	r1, [pc, #156]	; (8008574 <BAT_update+0x104>)
 80084d6:	7889      	ldrb	r1, [r1, #2]
 80084d8:	440b      	add	r3, r1
  if ((            l_time.Hours * 3600 +             l_time.Minutes * 60 +             l_time.Seconds) -
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	2b09      	cmp	r3, #9
 80084de:	dd43      	ble.n	8008568 <BAT_update+0xf8>
  {
    g_BAT_lastReadTime = l_time;
 80084e0:	4b24      	ldr	r3, [pc, #144]	; (8008574 <BAT_update+0x104>)
 80084e2:	f107 020c 	add.w	r2, r7, #12
 80084e6:	6812      	ldr	r2, [r2, #0]
 80084e8:	4611      	mov	r1, r2
 80084ea:	8019      	strh	r1, [r3, #0]
 80084ec:	3302      	adds	r3, #2
 80084ee:	0c12      	lsrs	r2, r2, #16
 80084f0:	701a      	strb	r2, [r3, #0]

    HAL_ADC_Start                  (g_BAT_adcHandle);
 80084f2:	4b21      	ldr	r3, [pc, #132]	; (8008578 <BAT_update+0x108>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7f9 fe6a 	bl	80021d0 <HAL_ADC_Start>
    HAL_ADC_PollForConversion      (g_BAT_adcHandle, HAL_MAX_DELAY);
 80084fc:	4b1e      	ldr	r3, [pc, #120]	; (8008578 <BAT_update+0x108>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f04f 31ff 	mov.w	r1, #4294967295
 8008504:	4618      	mov	r0, r3
 8008506:	f7f9 ff29 	bl	800235c <HAL_ADC_PollForConversion>
    l_adcRawData = HAL_ADC_GetValue(g_BAT_adcHandle);
 800850a:	4b1b      	ldr	r3, [pc, #108]	; (8008578 <BAT_update+0x108>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4618      	mov	r0, r3
 8008510:	f7fa f846 	bl	80025a0 <HAL_ADC_GetValue>
 8008514:	6178      	str	r0, [r7, #20]

    /* Apply conversion based on STM32 reference voltage & resolution */
    l_voltageInV  = (l_adcRawData * 3.30f ) / 4096.0f;
 8008516:	6978      	ldr	r0, [r7, #20]
 8008518:	f7f7 ff3a 	bl	8000390 <__aeabi_ui2f>
 800851c:	4603      	mov	r3, r0
 800851e:	4917      	ldr	r1, [pc, #92]	; (800857c <BAT_update+0x10c>)
 8008520:	4618      	mov	r0, r3
 8008522:	f7f7 ff8d 	bl	8000440 <__aeabi_fmul>
 8008526:	4603      	mov	r3, r0
 8008528:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 800852c:	4618      	mov	r0, r3
 800852e:	f7f8 f83b 	bl	80005a8 <__aeabi_fdiv>
 8008532:	4603      	mov	r3, r0
 8008534:	613b      	str	r3, [r7, #16]

    /* Consider voltage divider used between the battery & the ADC input */
    l_voltageInV *= 11.0f;
 8008536:	4912      	ldr	r1, [pc, #72]	; (8008580 <BAT_update+0x110>)
 8008538:	6938      	ldr	r0, [r7, #16]
 800853a:	f7f7 ff81 	bl	8000440 <__aeabi_fmul>
 800853e:	4603      	mov	r3, r0
 8008540:	613b      	str	r3, [r7, #16]

    *p_voltageInMv = (uint32_t)(l_voltageInV * 1000.0f);
 8008542:	4910      	ldr	r1, [pc, #64]	; (8008584 <BAT_update+0x114>)
 8008544:	6938      	ldr	r0, [r7, #16]
 8008546:	f7f7 ff7b 	bl	8000440 <__aeabi_fmul>
 800854a:	4603      	mov	r3, r0
 800854c:	4618      	mov	r0, r3
 800854e:	f7f8 f963 	bl	8000818 <__aeabi_f2uiz>
 8008552:	4602      	mov	r2, r0
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	601a      	str	r2, [r3, #0]

    LOG_debug("Battery level: %u mV", *p_voltageInMv);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	461a      	mov	r2, r3
 800855e:	490a      	ldr	r1, [pc, #40]	; (8008588 <BAT_update+0x118>)
 8008560:	2000      	movs	r0, #0
 8008562:	f001 f8f3 	bl	800974c <LOG_log>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8008566:	bf00      	nop
 8008568:	bf00      	nop
}
 800856a:	3718      	adds	r7, #24
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	200000a4 	.word	0x200000a4
 8008574:	200000a8 	.word	0x200000a8
 8008578:	200000a0 	.word	0x200000a0
 800857c:	40533333 	.word	0x40533333
 8008580:	41300000 	.word	0x41300000
 8008584:	447a0000 	.word	0x447a0000
 8008588:	0800b330 	.word	0x0800b330

0800858c <BLU_sendCommand>:
static void         BLU_readData     (uint8_t *p_buffer                                                );
static T_BLU_BUTTON BLU_getButton    (uint8_t *p_buffer                                                );
static int32_t      BLU_normalizeData(uint32_t p_rawData, uint32_t p_maxValue, bool p_isInversionNeeded);

static void BLU_sendCommand(uint8_t p_command)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	4603      	mov	r3, r0
 8008594:	71fb      	strb	r3, [r7, #7]
  volatile uint16_t l_bitValue;

  for (l_bitValue = 0x01; l_bitValue < 0x0100; l_bitValue <<= 1)
 8008596:	2301      	movs	r3, #1
 8008598:	81fb      	strh	r3, [r7, #14]
 800859a:	e030      	b.n	80085fe <BLU_sendCommand+0x72>
  {
    if ((l_bitValue & p_command) != 0)
 800859c:	89fb      	ldrh	r3, [r7, #14]
 800859e:	b29b      	uxth	r3, r3
 80085a0:	461a      	mov	r2, r3
 80085a2:	79fb      	ldrb	r3, [r7, #7]
 80085a4:	4013      	ands	r3, r2
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d006      	beq.n	80085b8 <BLU_sendCommand+0x2c>
    {
      SET_BIT(GPIOC->ODR, BLUETOOTH_SPI_CMD_Pin);
 80085aa:	4b1a      	ldr	r3, [pc, #104]	; (8008614 <BLU_sendCommand+0x88>)
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	4a19      	ldr	r2, [pc, #100]	; (8008614 <BLU_sendCommand+0x88>)
 80085b0:	f043 0302 	orr.w	r3, r3, #2
 80085b4:	60d3      	str	r3, [r2, #12]
 80085b6:	e005      	b.n	80085c4 <BLU_sendCommand+0x38>
    }
    else
    {
      CLEAR_BIT(GPIOC->ODR, BLUETOOTH_SPI_CMD_Pin);
 80085b8:	4b16      	ldr	r3, [pc, #88]	; (8008614 <BLU_sendCommand+0x88>)
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	4a15      	ldr	r2, [pc, #84]	; (8008614 <BLU_sendCommand+0x88>)
 80085be:	f023 0302 	bic.w	r3, r3, #2
 80085c2:	60d3      	str	r3, [r2, #12]
    }

    SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 80085c4:	4b14      	ldr	r3, [pc, #80]	; (8008618 <BLU_sendCommand+0x8c>)
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	4a13      	ldr	r2, [pc, #76]	; (8008618 <BLU_sendCommand+0x8c>)
 80085ca:	f043 0310 	orr.w	r3, r3, #16
 80085ce:	60d3      	str	r3, [r2, #12]
    UTI_delayUs(5);
 80085d0:	2005      	movs	r0, #5
 80085d2:	f001 fb05 	bl	8009be0 <UTI_delayUs>
    CLEAR_BIT(GPIOA->ODR, BLUETOOTH_SPI_CLK_Pin);
 80085d6:	4b10      	ldr	r3, [pc, #64]	; (8008618 <BLU_sendCommand+0x8c>)
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	4a0f      	ldr	r2, [pc, #60]	; (8008618 <BLU_sendCommand+0x8c>)
 80085dc:	f023 0310 	bic.w	r3, r3, #16
 80085e0:	60d3      	str	r3, [r2, #12]
    UTI_delayUs(5);
 80085e2:	2005      	movs	r0, #5
 80085e4:	f001 fafc 	bl	8009be0 <UTI_delayUs>
    SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 80085e8:	4b0b      	ldr	r3, [pc, #44]	; (8008618 <BLU_sendCommand+0x8c>)
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	4a0a      	ldr	r2, [pc, #40]	; (8008618 <BLU_sendCommand+0x8c>)
 80085ee:	f043 0310 	orr.w	r3, r3, #16
 80085f2:	60d3      	str	r3, [r2, #12]
  for (l_bitValue = 0x01; l_bitValue < 0x0100; l_bitValue <<= 1)
 80085f4:	89fb      	ldrh	r3, [r7, #14]
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	005b      	lsls	r3, r3, #1
 80085fa:	b29b      	uxth	r3, r3
 80085fc:	81fb      	strh	r3, [r7, #14]
 80085fe:	89fb      	ldrh	r3, [r7, #14]
 8008600:	b29b      	uxth	r3, r3
 8008602:	2bff      	cmp	r3, #255	; 0xff
 8008604:	d9ca      	bls.n	800859c <BLU_sendCommand+0x10>
  }
  UTI_delayUs(16);
 8008606:	2010      	movs	r0, #16
 8008608:	f001 faea 	bl	8009be0 <UTI_delayUs>

  return;
 800860c:	bf00      	nop
}
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	40011000 	.word	0x40011000
 8008618:	40010800 	.word	0x40010800

0800861c <BLU_readData>:

static void BLU_readData(uint8_t *p_buffer)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  volatile uint8_t  l_index;
  volatile uint16_t l_bitValue;

  /* Reset buffer */
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 8008624:	2300      	movs	r3, #0
 8008626:	73fb      	strb	r3, [r7, #15]
 8008628:	e00b      	b.n	8008642 <BLU_readData+0x26>
  {
    p_buffer[l_index] = 0x00;
 800862a:	7bfb      	ldrb	r3, [r7, #15]
 800862c:	b2db      	uxtb	r3, r3
 800862e:	461a      	mov	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4413      	add	r3, r2
 8008634:	2200      	movs	r2, #0
 8008636:	701a      	strb	r2, [r3, #0]
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 8008638:	7bfb      	ldrb	r3, [r7, #15]
 800863a:	b2db      	uxtb	r3, r3
 800863c:	3301      	adds	r3, #1
 800863e:	b2db      	uxtb	r3, r3
 8008640:	73fb      	strb	r3, [r7, #15]
 8008642:	7bfb      	ldrb	r3, [r7, #15]
 8008644:	b2db      	uxtb	r3, r3
 8008646:	2b06      	cmp	r3, #6
 8008648:	d9ef      	bls.n	800862a <BLU_readData+0xe>
  }

  CLEAR_BIT(GPIOC->ODR, BLUETOOTH_SPI_CS_Pin);
 800864a:	4b2e      	ldr	r3, [pc, #184]	; (8008704 <BLU_readData+0xe8>)
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	4a2d      	ldr	r2, [pc, #180]	; (8008704 <BLU_readData+0xe8>)
 8008650:	f023 0308 	bic.w	r3, r3, #8
 8008654:	60d3      	str	r3, [r2, #12]

  BLU_sendCommand(0x01);
 8008656:	2001      	movs	r0, #1
 8008658:	f7ff ff98 	bl	800858c <BLU_sendCommand>
  BLU_sendCommand(0x42);
 800865c:	2042      	movs	r0, #66	; 0x42
 800865e:	f7ff ff95 	bl	800858c <BLU_sendCommand>

  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 8008662:	2300      	movs	r3, #0
 8008664:	73fb      	strb	r3, [r7, #15]
 8008666:	e03f      	b.n	80086e8 <BLU_readData+0xcc>
  {
    for (l_bitValue = 0x01; l_bitValue < 0x100; l_bitValue <<= 1)
 8008668:	2301      	movs	r3, #1
 800866a:	81bb      	strh	r3, [r7, #12]
 800866c:	e030      	b.n	80086d0 <BLU_readData+0xb4>
    {
      SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 800866e:	4b26      	ldr	r3, [pc, #152]	; (8008708 <BLU_readData+0xec>)
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	4a25      	ldr	r2, [pc, #148]	; (8008708 <BLU_readData+0xec>)
 8008674:	f043 0310 	orr.w	r3, r3, #16
 8008678:	60d3      	str	r3, [r2, #12]
      UTI_delayUs(5);
 800867a:	2005      	movs	r0, #5
 800867c:	f001 fab0 	bl	8009be0 <UTI_delayUs>
      CLEAR_BIT(GPIOA->ODR, BLUETOOTH_SPI_CLK_Pin);
 8008680:	4b21      	ldr	r3, [pc, #132]	; (8008708 <BLU_readData+0xec>)
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	4a20      	ldr	r2, [pc, #128]	; (8008708 <BLU_readData+0xec>)
 8008686:	f023 0310 	bic.w	r3, r3, #16
 800868a:	60d3      	str	r3, [r2, #12]
      UTI_delayUs(5);
 800868c:	2005      	movs	r0, #5
 800868e:	f001 faa7 	bl	8009be0 <UTI_delayUs>
      SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 8008692:	4b1d      	ldr	r3, [pc, #116]	; (8008708 <BLU_readData+0xec>)
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	4a1c      	ldr	r2, [pc, #112]	; (8008708 <BLU_readData+0xec>)
 8008698:	f043 0310 	orr.w	r3, r3, #16
 800869c:	60d3      	str	r3, [r2, #12]

      if (READ_BIT(GPIOC->IDR, BLUETOOTH_SPI_DAT_Pin) != GPIO_PIN_RESET)
 800869e:	4b19      	ldr	r3, [pc, #100]	; (8008704 <BLU_readData+0xe8>)
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	f003 0304 	and.w	r3, r3, #4
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d00d      	beq.n	80086c6 <BLU_readData+0xaa>
      {
        p_buffer[l_index] |= l_bitValue;
 80086aa:	89bb      	ldrh	r3, [r7, #12]
 80086ac:	b29a      	uxth	r2, r3
 80086ae:	7bfb      	ldrb	r3, [r7, #15]
 80086b0:	b2d8      	uxtb	r0, r3
 80086b2:	4601      	mov	r1, r0
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	440b      	add	r3, r1
 80086b8:	7819      	ldrb	r1, [r3, #0]
 80086ba:	b2d2      	uxtb	r2, r2
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	4403      	add	r3, r0
 80086c0:	430a      	orrs	r2, r1
 80086c2:	b2d2      	uxtb	r2, r2
 80086c4:	701a      	strb	r2, [r3, #0]
    for (l_bitValue = 0x01; l_bitValue < 0x100; l_bitValue <<= 1)
 80086c6:	89bb      	ldrh	r3, [r7, #12]
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	005b      	lsls	r3, r3, #1
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	81bb      	strh	r3, [r7, #12]
 80086d0:	89bb      	ldrh	r3, [r7, #12]
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	2bff      	cmp	r3, #255	; 0xff
 80086d6:	d9ca      	bls.n	800866e <BLU_readData+0x52>
      else
      {
        ; /* Nothing to do */
      }
    }
      UTI_delayUs(16);
 80086d8:	2010      	movs	r0, #16
 80086da:	f001 fa81 	bl	8009be0 <UTI_delayUs>
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 80086de:	7bfb      	ldrb	r3, [r7, #15]
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	3301      	adds	r3, #1
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	73fb      	strb	r3, [r7, #15]
 80086e8:	7bfb      	ldrb	r3, [r7, #15]
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	2b06      	cmp	r3, #6
 80086ee:	d9bb      	bls.n	8008668 <BLU_readData+0x4c>
  }

  SET_BIT(GPIOC->ODR, BLUETOOTH_SPI_CS_Pin);
 80086f0:	4b04      	ldr	r3, [pc, #16]	; (8008704 <BLU_readData+0xe8>)
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	4a03      	ldr	r2, [pc, #12]	; (8008704 <BLU_readData+0xe8>)
 80086f6:	f043 0308 	orr.w	r3, r3, #8
 80086fa:	60d3      	str	r3, [r2, #12]

  return;
 80086fc:	bf00      	nop
}
 80086fe:	3710      	adds	r7, #16
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}
 8008704:	40011000 	.word	0x40011000
 8008708:	40010800 	.word	0x40010800

0800870c <BLU_getButton>:

static T_BLU_BUTTON BLU_getButton(uint8_t *p_buffer)
{
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  uint16_t l_buttonRawValue;
  uint8_t  l_index;

  l_buttonRawValue = (p_buffer[BLU_BUTTON_HIGH_OFFSET] << 8) | p_buffer[BLU_BUTTON_LOW_OFFSET];
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	3302      	adds	r3, #2
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	021b      	lsls	r3, r3, #8
 800871c:	b21a      	sxth	r2, r3
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	3301      	adds	r3, #1
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	b21b      	sxth	r3, r3
 8008726:	4313      	orrs	r3, r2
 8008728:	b21b      	sxth	r3, r3
 800872a:	81bb      	strh	r3, [r7, #12]

  /* Ignore BLU_BUTTON_NONE value as it is not directly coded in raw data */
  for (l_index = BLU_BUTTON_SELECT; l_index < BLU_BUTTON_COUNT_VALUE; l_index++)
 800872c:	2301      	movs	r3, #1
 800872e:	73fb      	strb	r3, [r7, #15]
 8008730:	e00d      	b.n	800874e <BLU_getButton+0x42>
  {
    /* Stop decoding button data on 1st match (do not deal with multiple presses case) */
    if ((l_buttonRawValue & (1 << (l_index - 1))) == 0)
 8008732:	89ba      	ldrh	r2, [r7, #12]
 8008734:	7bfb      	ldrb	r3, [r7, #15]
 8008736:	3b01      	subs	r3, #1
 8008738:	fa42 f303 	asr.w	r3, r2, r3
 800873c:	f003 0301 	and.w	r3, r3, #1
 8008740:	2b00      	cmp	r3, #0
 8008742:	d101      	bne.n	8008748 <BLU_getButton+0x3c>
    {
      return l_index;
 8008744:	7bfb      	ldrb	r3, [r7, #15]
 8008746:	e006      	b.n	8008756 <BLU_getButton+0x4a>
  for (l_index = BLU_BUTTON_SELECT; l_index < BLU_BUTTON_COUNT_VALUE; l_index++)
 8008748:	7bfb      	ldrb	r3, [r7, #15]
 800874a:	3301      	adds	r3, #1
 800874c:	73fb      	strb	r3, [r7, #15]
 800874e:	7bfb      	ldrb	r3, [r7, #15]
 8008750:	2b10      	cmp	r3, #16
 8008752:	d9ee      	bls.n	8008732 <BLU_getButton+0x26>
    {
      ; /* Nothing to do */
    }
  }

  return BLU_BUTTON_NONE;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3714      	adds	r7, #20
 800875a:	46bd      	mov	sp, r7
 800875c:	bc80      	pop	{r7}
 800875e:	4770      	bx	lr

08008760 <BLU_normalizeData>:

static int32_t BLU_normalizeData(uint32_t p_rawData, uint32_t p_maxValue, bool p_isInversionNeeded)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b086      	sub	sp, #24
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	4613      	mov	r3, r2
 800876c:	71fb      	strb	r3, [r7, #7]
  float l_normalizedData;

  l_normalizedData = p_rawData - 128.0f;
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f7f7 fe0e 	bl	8000390 <__aeabi_ui2f>
 8008774:	4603      	mov	r3, r0
 8008776:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 800877a:	4618      	mov	r0, r3
 800877c:	f7f7 fd56 	bl	800022c <__aeabi_fsub>
 8008780:	4603      	mov	r3, r0
 8008782:	617b      	str	r3, [r7, #20]

  if (l_normalizedData > 0.0f)
 8008784:	f04f 0100 	mov.w	r1, #0
 8008788:	6978      	ldr	r0, [r7, #20]
 800878a:	f7f8 f815 	bl	80007b8 <__aeabi_fcmpgt>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d00f      	beq.n	80087b4 <BLU_normalizeData+0x54>
  {
    l_normalizedData *= (float)p_maxValue / 127.0f;
 8008794:	68b8      	ldr	r0, [r7, #8]
 8008796:	f7f7 fdfb 	bl	8000390 <__aeabi_ui2f>
 800879a:	4603      	mov	r3, r0
 800879c:	4915      	ldr	r1, [pc, #84]	; (80087f4 <BLU_normalizeData+0x94>)
 800879e:	4618      	mov	r0, r3
 80087a0:	f7f7 ff02 	bl	80005a8 <__aeabi_fdiv>
 80087a4:	4603      	mov	r3, r0
 80087a6:	4619      	mov	r1, r3
 80087a8:	6978      	ldr	r0, [r7, #20]
 80087aa:	f7f7 fe49 	bl	8000440 <__aeabi_fmul>
 80087ae:	4603      	mov	r3, r0
 80087b0:	617b      	str	r3, [r7, #20]
 80087b2:	e00f      	b.n	80087d4 <BLU_normalizeData+0x74>
  }
  else
  {
    l_normalizedData *= (float)p_maxValue / 128.0f;
 80087b4:	68b8      	ldr	r0, [r7, #8]
 80087b6:	f7f7 fdeb 	bl	8000390 <__aeabi_ui2f>
 80087ba:	4603      	mov	r3, r0
 80087bc:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 80087c0:	4618      	mov	r0, r3
 80087c2:	f7f7 fef1 	bl	80005a8 <__aeabi_fdiv>
 80087c6:	4603      	mov	r3, r0
 80087c8:	4619      	mov	r1, r3
 80087ca:	6978      	ldr	r0, [r7, #20]
 80087cc:	f7f7 fe38 	bl	8000440 <__aeabi_fmul>
 80087d0:	4603      	mov	r3, r0
 80087d2:	617b      	str	r3, [r7, #20]
  }

  if (p_isInversionNeeded == true)
 80087d4:	79fb      	ldrb	r3, [r7, #7]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d003      	beq.n	80087e2 <BLU_normalizeData+0x82>
  {
    l_normalizedData *= -1.0f;
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80087e0:	617b      	str	r3, [r7, #20]
  else
  {
    ; /* Nothing to do */
  }

  return (int32_t)l_normalizedData;
 80087e2:	6978      	ldr	r0, [r7, #20]
 80087e4:	f7f7 fff2 	bl	80007cc <__aeabi_f2iz>
 80087e8:	4603      	mov	r3, r0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3718      	adds	r7, #24
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	42fe0000 	.word	0x42fe0000

080087f8 <BLU_init>:

void BLU_init(uint32_t p_maxDataValue)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing bluetooth control");
 8008800:	490c      	ldr	r1, [pc, #48]	; (8008834 <BLU_init+0x3c>)
 8008802:	2001      	movs	r0, #1
 8008804:	f000 ffa2 	bl	800974c <LOG_log>

  g_BLU_maxDataValue = p_maxDataValue;
 8008808:	4a0b      	ldr	r2, [pc, #44]	; (8008838 <BLU_init+0x40>)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6013      	str	r3, [r2, #0]

  g_BLU_lastData.leftX  = BLU_DATA_DEFAUT_DIRECTION;
 800880e:	4b0b      	ldr	r3, [pc, #44]	; (800883c <BLU_init+0x44>)
 8008810:	2280      	movs	r2, #128	; 0x80
 8008812:	601a      	str	r2, [r3, #0]
  g_BLU_lastData.leftY  = BLU_DATA_DEFAUT_DIRECTION;
 8008814:	4b09      	ldr	r3, [pc, #36]	; (800883c <BLU_init+0x44>)
 8008816:	2280      	movs	r2, #128	; 0x80
 8008818:	605a      	str	r2, [r3, #4]
  g_BLU_lastData.rightX = BLU_DATA_DEFAUT_DIRECTION;
 800881a:	4b08      	ldr	r3, [pc, #32]	; (800883c <BLU_init+0x44>)
 800881c:	2280      	movs	r2, #128	; 0x80
 800881e:	609a      	str	r2, [r3, #8]
  g_BLU_lastData.rightY = BLU_DATA_DEFAUT_DIRECTION;
 8008820:	4b06      	ldr	r3, [pc, #24]	; (800883c <BLU_init+0x44>)
 8008822:	2280      	movs	r2, #128	; 0x80
 8008824:	60da      	str	r2, [r3, #12]
  g_BLU_lastData.button = BLU_BUTTON_NONE;
 8008826:	4b05      	ldr	r3, [pc, #20]	; (800883c <BLU_init+0x44>)
 8008828:	2200      	movs	r2, #0
 800882a:	741a      	strb	r2, [r3, #16]

  return;
 800882c:	bf00      	nop
}
 800882e:	3708      	adds	r7, #8
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}
 8008834:	0800b348 	.word	0x0800b348
 8008838:	200000ac 	.word	0x200000ac
 800883c:	200000b0 	.word	0x200000b0

08008840 <BLU_receiveData>:

void BLU_receiveData(T_BLU_Data *p_data)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b088      	sub	sp, #32
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  T_BLU_BUTTON l_button;

  // LOG_info("Receiving Bluetooth data");

  /* Read raw data */
  BLU_readData(l_buffer);
 8008848:	f107 0308 	add.w	r3, r7, #8
 800884c:	4618      	mov	r0, r3
 800884e:	f7ff fee5 	bl	800861c <BLU_readData>

  /* Start and decode raw data */
  l_leftX  = l_buffer[BLU_LEFT_X_OFFSET ];
 8008852:	7b7b      	ldrb	r3, [r7, #13]
 8008854:	61fb      	str	r3, [r7, #28]
  l_leftY  = l_buffer[BLU_LEFT_Y_OFFSET ];
 8008856:	7bbb      	ldrb	r3, [r7, #14]
 8008858:	61bb      	str	r3, [r7, #24]
  l_rightX = l_buffer[BLU_RIGHT_X_OFFSET];
 800885a:	7afb      	ldrb	r3, [r7, #11]
 800885c:	617b      	str	r3, [r7, #20]
  l_rightY = l_buffer[BLU_RIGHT_Y_OFFSET];
 800885e:	7b3b      	ldrb	r3, [r7, #12]
 8008860:	613b      	str	r3, [r7, #16]
  l_button = BLU_getButton(l_buffer);
 8008862:	f107 0308 	add.w	r3, r7, #8
 8008866:	4618      	mov	r0, r3
 8008868:	f7ff ff50 	bl	800870c <BLU_getButton>
 800886c:	4603      	mov	r3, r0
 800886e:	73fb      	strb	r3, [r7, #15]

  /* Deal with startup condition, while read data is not valid yet */
  if  ((l_leftX == 255 && l_leftY == 255 && l_rightX == 255 && l_rightY ==255)
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	2bff      	cmp	r3, #255	; 0xff
 8008874:	d108      	bne.n	8008888 <BLU_receiveData+0x48>
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	2bff      	cmp	r3, #255	; 0xff
 800887a:	d105      	bne.n	8008888 <BLU_receiveData+0x48>
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	2bff      	cmp	r3, #255	; 0xff
 8008880:	d102      	bne.n	8008888 <BLU_receiveData+0x48>
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	2bff      	cmp	r3, #255	; 0xff
 8008886:	d00b      	beq.n	80088a0 <BLU_receiveData+0x60>
    || (l_leftX ==   0 && l_leftY ==   0 && l_rightX ==   0 && l_rightY ==  0))
 8008888:	69fb      	ldr	r3, [r7, #28]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d113      	bne.n	80088b6 <BLU_receiveData+0x76>
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d110      	bne.n	80088b6 <BLU_receiveData+0x76>
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d10d      	bne.n	80088b6 <BLU_receiveData+0x76>
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d10a      	bne.n	80088b6 <BLU_receiveData+0x76>
  {
    l_leftX  = BLU_DATA_DEFAUT_DIRECTION;
 80088a0:	2380      	movs	r3, #128	; 0x80
 80088a2:	61fb      	str	r3, [r7, #28]
    l_leftY  = BLU_DATA_DEFAUT_DIRECTION;
 80088a4:	2380      	movs	r3, #128	; 0x80
 80088a6:	61bb      	str	r3, [r7, #24]
    l_rightX = BLU_DATA_DEFAUT_DIRECTION;
 80088a8:	2380      	movs	r3, #128	; 0x80
 80088aa:	617b      	str	r3, [r7, #20]
    l_rightY = BLU_DATA_DEFAUT_DIRECTION;
 80088ac:	2380      	movs	r3, #128	; 0x80
 80088ae:	613b      	str	r3, [r7, #16]
    l_button = BLU_BUTTON_NONE;
 80088b0:	2300      	movs	r3, #0
 80088b2:	73fb      	strb	r3, [r7, #15]
 80088b4:	e043      	b.n	800893e <BLU_receiveData+0xfe>
  }
  /* Use a confirmation mechanism, on 2 cycles, as glitches are observed */
  else if ((l_leftX  == g_BLU_lastData.leftX) &&
 80088b6:	4b2b      	ldr	r3, [pc, #172]	; (8008964 <BLU_receiveData+0x124>)
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d13e      	bne.n	800893e <BLU_receiveData+0xfe>
           (l_leftY  == g_BLU_lastData.leftY) &&
 80088c0:	4b28      	ldr	r3, [pc, #160]	; (8008964 <BLU_receiveData+0x124>)
 80088c2:	685a      	ldr	r2, [r3, #4]
 80088c4:	69bb      	ldr	r3, [r7, #24]
  else if ((l_leftX  == g_BLU_lastData.leftX) &&
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d139      	bne.n	800893e <BLU_receiveData+0xfe>
           (l_rightX == g_BLU_lastData.rightX) &&
 80088ca:	4b26      	ldr	r3, [pc, #152]	; (8008964 <BLU_receiveData+0x124>)
 80088cc:	689a      	ldr	r2, [r3, #8]
 80088ce:	697b      	ldr	r3, [r7, #20]
           (l_leftY  == g_BLU_lastData.leftY) &&
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d134      	bne.n	800893e <BLU_receiveData+0xfe>
           (l_rightY == g_BLU_lastData.rightY) &&
 80088d4:	4b23      	ldr	r3, [pc, #140]	; (8008964 <BLU_receiveData+0x124>)
 80088d6:	68da      	ldr	r2, [r3, #12]
 80088d8:	693b      	ldr	r3, [r7, #16]
           (l_rightX == g_BLU_lastData.rightX) &&
 80088da:	429a      	cmp	r2, r3
 80088dc:	d12f      	bne.n	800893e <BLU_receiveData+0xfe>
           (l_button == g_BLU_lastData.button))
 80088de:	4b21      	ldr	r3, [pc, #132]	; (8008964 <BLU_receiveData+0x124>)
 80088e0:	7c1b      	ldrb	r3, [r3, #16]
           (l_rightY == g_BLU_lastData.rightY) &&
 80088e2:	7bfa      	ldrb	r2, [r7, #15]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d12a      	bne.n	800893e <BLU_receiveData+0xfe>
  {
    /* Normalize directions data in range [-100..100] */
    p_data->leftX  = BLU_normalizeData(l_leftX , g_BLU_maxDataValue, false);
 80088e8:	4b1f      	ldr	r3, [pc, #124]	; (8008968 <BLU_receiveData+0x128>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	2200      	movs	r2, #0
 80088ee:	4619      	mov	r1, r3
 80088f0:	69f8      	ldr	r0, [r7, #28]
 80088f2:	f7ff ff35 	bl	8008760 <BLU_normalizeData>
 80088f6:	4602      	mov	r2, r0
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	601a      	str	r2, [r3, #0]
    p_data->leftY  = BLU_normalizeData(l_leftY , g_BLU_maxDataValue, true );
 80088fc:	4b1a      	ldr	r3, [pc, #104]	; (8008968 <BLU_receiveData+0x128>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2201      	movs	r2, #1
 8008902:	4619      	mov	r1, r3
 8008904:	69b8      	ldr	r0, [r7, #24]
 8008906:	f7ff ff2b 	bl	8008760 <BLU_normalizeData>
 800890a:	4602      	mov	r2, r0
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	605a      	str	r2, [r3, #4]
    p_data->rightX = BLU_normalizeData(l_rightX, g_BLU_maxDataValue, false);
 8008910:	4b15      	ldr	r3, [pc, #84]	; (8008968 <BLU_receiveData+0x128>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2200      	movs	r2, #0
 8008916:	4619      	mov	r1, r3
 8008918:	6978      	ldr	r0, [r7, #20]
 800891a:	f7ff ff21 	bl	8008760 <BLU_normalizeData>
 800891e:	4602      	mov	r2, r0
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	609a      	str	r2, [r3, #8]
    p_data->rightY = BLU_normalizeData(l_rightY, g_BLU_maxDataValue, true );
 8008924:	4b10      	ldr	r3, [pc, #64]	; (8008968 <BLU_receiveData+0x128>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2201      	movs	r2, #1
 800892a:	4619      	mov	r1, r3
 800892c:	6938      	ldr	r0, [r7, #16]
 800892e:	f7ff ff17 	bl	8008760 <BLU_normalizeData>
 8008932:	4602      	mov	r2, r0
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	60da      	str	r2, [r3, #12]
    p_data->button = l_button;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	7bfa      	ldrb	r2, [r7, #15]
 800893c:	741a      	strb	r2, [r3, #16]
  {
    ; /* Nothing to do */
  }

  /* Saved received data for later use in confirmation mechanism */
  g_BLU_lastData.leftX  = l_leftX;
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	4a08      	ldr	r2, [pc, #32]	; (8008964 <BLU_receiveData+0x124>)
 8008942:	6013      	str	r3, [r2, #0]
  g_BLU_lastData.leftY  = l_leftY;
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	4a07      	ldr	r2, [pc, #28]	; (8008964 <BLU_receiveData+0x124>)
 8008948:	6053      	str	r3, [r2, #4]
  g_BLU_lastData.rightX = l_rightX;
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	4a05      	ldr	r2, [pc, #20]	; (8008964 <BLU_receiveData+0x124>)
 800894e:	6093      	str	r3, [r2, #8]
  g_BLU_lastData.rightY = l_rightY;
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	4a04      	ldr	r2, [pc, #16]	; (8008964 <BLU_receiveData+0x124>)
 8008954:	60d3      	str	r3, [r2, #12]
  g_BLU_lastData.button = l_button;
 8008956:	4a03      	ldr	r2, [pc, #12]	; (8008964 <BLU_receiveData+0x124>)
 8008958:	7bfb      	ldrb	r3, [r7, #15]
 800895a:	7413      	strb	r3, [r2, #16]

  return;
 800895c:	bf00      	nop
}
 800895e:	3720      	adds	r7, #32
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}
 8008964:	200000b0 	.word	0x200000b0
 8008968:	200000ac 	.word	0x200000ac

0800896c <CON_init>:

static UART_HandleTypeDef *g_CON_uartHandle;
static uint8_t             g_CON_rxBuffer[12] = {0};

void CON_init(UART_HandleTypeDef *p_uartHandle)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing console");
 8008974:	4905      	ldr	r1, [pc, #20]	; (800898c <CON_init+0x20>)
 8008976:	2001      	movs	r0, #1
 8008978:	f000 fee8 	bl	800974c <LOG_log>

  g_CON_uartHandle = p_uartHandle;
 800897c:	4a04      	ldr	r2, [pc, #16]	; (8008990 <CON_init+0x24>)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6013      	str	r3, [r2, #0]

  return;
 8008982:	bf00      	nop
}
 8008984:	3708      	adds	r7, #8
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	0800b368 	.word	0x0800b368
 8008990:	200000c4 	.word	0x200000c4

08008994 <CON_receiveData>:

void CON_receiveData(void)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	af00      	add	r7, sp, #0
  HAL_UART_Receive_IT(g_CON_uartHandle, g_CON_rxBuffer, 12);
 8008998:	4b04      	ldr	r3, [pc, #16]	; (80089ac <CON_receiveData+0x18>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	220c      	movs	r2, #12
 800899e:	4904      	ldr	r1, [pc, #16]	; (80089b0 <CON_receiveData+0x1c>)
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7ff f82b 	bl	80079fc <HAL_UART_Receive_IT>

  /* Resend received data (echo) */
//  HAL_UART_Transmit(CON_uartHandle, CON_rxBuffer, 12, 100);

  return;
 80089a6:	bf00      	nop
}
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	200000c4 	.word	0x200000c4
 80089b0:	200000c8 	.word	0x200000c8

080089b4 <DRV_init>:
void DRV_init(TIM_HandleTypeDef *p_pwmTimerHandle,
              TIM_HandleTypeDef *p_rearLeftEncoderTimerHandle,
              TIM_HandleTypeDef *p_rearRightEncoderTimerHandle,
              TIM_HandleTypeDef *p_frontRightEncoderTimerHandle,
              TIM_HandleTypeDef *p_frontLeftEncoderTimerHandle)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b088      	sub	sp, #32
 80089b8:	af04      	add	r7, sp, #16
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	607a      	str	r2, [r7, #4]
 80089c0:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing Drive module");
 80089c2:	4955      	ldr	r1, [pc, #340]	; (8008b18 <DRV_init+0x164>)
 80089c4:	2001      	movs	r0, #1
 80089c6:	f000 fec1 	bl	800974c <LOG_log>

  /* Setup PIDs */
  PID_init(&g_DRV_pidFrontRight, 1, 1, 1, 0, -100, 100, 0.5);
 80089ca:	2300      	movs	r3, #0
 80089cc:	9303      	str	r3, [sp, #12]
 80089ce:	2364      	movs	r3, #100	; 0x64
 80089d0:	9302      	str	r3, [sp, #8]
 80089d2:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80089d6:	9301      	str	r3, [sp, #4]
 80089d8:	2300      	movs	r3, #0
 80089da:	9300      	str	r3, [sp, #0]
 80089dc:	2301      	movs	r3, #1
 80089de:	2201      	movs	r2, #1
 80089e0:	2101      	movs	r1, #1
 80089e2:	484e      	ldr	r0, [pc, #312]	; (8008b1c <DRV_init+0x168>)
 80089e4:	f000 fff8 	bl	80099d8 <PID_init>
  PID_init(&g_DRV_pidFrontLeft , 1, 1, 1, 0, -100, 100, 0.5);
 80089e8:	2300      	movs	r3, #0
 80089ea:	9303      	str	r3, [sp, #12]
 80089ec:	2364      	movs	r3, #100	; 0x64
 80089ee:	9302      	str	r3, [sp, #8]
 80089f0:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80089f4:	9301      	str	r3, [sp, #4]
 80089f6:	2300      	movs	r3, #0
 80089f8:	9300      	str	r3, [sp, #0]
 80089fa:	2301      	movs	r3, #1
 80089fc:	2201      	movs	r2, #1
 80089fe:	2101      	movs	r1, #1
 8008a00:	4847      	ldr	r0, [pc, #284]	; (8008b20 <DRV_init+0x16c>)
 8008a02:	f000 ffe9 	bl	80099d8 <PID_init>
  PID_init(&g_DRV_pidRearLeft  , 1, 1, 1, 0, -100, 100, 0.5);
 8008a06:	2300      	movs	r3, #0
 8008a08:	9303      	str	r3, [sp, #12]
 8008a0a:	2364      	movs	r3, #100	; 0x64
 8008a0c:	9302      	str	r3, [sp, #8]
 8008a0e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008a12:	9301      	str	r3, [sp, #4]
 8008a14:	2300      	movs	r3, #0
 8008a16:	9300      	str	r3, [sp, #0]
 8008a18:	2301      	movs	r3, #1
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	2101      	movs	r1, #1
 8008a1e:	4841      	ldr	r0, [pc, #260]	; (8008b24 <DRV_init+0x170>)
 8008a20:	f000 ffda 	bl	80099d8 <PID_init>
  PID_init(&g_DRV_pidRearRight , 1, 1, 1, 0, -100, 100, 0.5);
 8008a24:	2300      	movs	r3, #0
 8008a26:	9303      	str	r3, [sp, #12]
 8008a28:	2364      	movs	r3, #100	; 0x64
 8008a2a:	9302      	str	r3, [sp, #8]
 8008a2c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008a30:	9301      	str	r3, [sp, #4]
 8008a32:	2300      	movs	r3, #0
 8008a34:	9300      	str	r3, [sp, #0]
 8008a36:	2301      	movs	r3, #1
 8008a38:	2201      	movs	r2, #1
 8008a3a:	2101      	movs	r1, #1
 8008a3c:	483a      	ldr	r0, [pc, #232]	; (8008b28 <DRV_init+0x174>)
 8008a3e:	f000 ffcb 	bl	80099d8 <PID_init>

  /* Setup motors */
  MTR_init(&g_DRV_motorFrontRight,
 8008a42:	2304      	movs	r3, #4
 8008a44:	9303      	str	r3, [sp, #12]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	9302      	str	r3, [sp, #8]
 8008a4a:	2320      	movs	r3, #32
 8008a4c:	9301      	str	r3, [sp, #4]
 8008a4e:	4b37      	ldr	r3, [pc, #220]	; (8008b2c <DRV_init+0x178>)
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	2310      	movs	r3, #16
 8008a54:	4a35      	ldr	r2, [pc, #212]	; (8008b2c <DRV_init+0x178>)
 8008a56:	4936      	ldr	r1, [pc, #216]	; (8008b30 <DRV_init+0x17c>)
 8008a58:	4836      	ldr	r0, [pc, #216]	; (8008b34 <DRV_init+0x180>)
 8008a5a:	f000 fecd 	bl	80097f8 <MTR_init>
           MOTOR_FRONT_RIGHT_IN_2_GPIO_Port,
           MOTOR_FRONT_RIGHT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_2);

  MTR_init(&g_DRV_motorFrontLeft,
 8008a5e:	2300      	movs	r3, #0
 8008a60:	9303      	str	r3, [sp, #12]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	9302      	str	r3, [sp, #8]
 8008a66:	2302      	movs	r3, #2
 8008a68:	9301      	str	r3, [sp, #4]
 8008a6a:	4b33      	ldr	r3, [pc, #204]	; (8008b38 <DRV_init+0x184>)
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	2301      	movs	r3, #1
 8008a70:	4a31      	ldr	r2, [pc, #196]	; (8008b38 <DRV_init+0x184>)
 8008a72:	4932      	ldr	r1, [pc, #200]	; (8008b3c <DRV_init+0x188>)
 8008a74:	4832      	ldr	r0, [pc, #200]	; (8008b40 <DRV_init+0x18c>)
 8008a76:	f000 febf 	bl	80097f8 <MTR_init>
           MOTOR_FRONT_LEFT_IN_2_GPIO_Port,
           MOTOR_FRONT_LEFT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_1);

  MTR_init(&g_DRV_motorRearLeft,
 8008a7a:	230c      	movs	r3, #12
 8008a7c:	9303      	str	r3, [sp, #12]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	9302      	str	r3, [sp, #8]
 8008a82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a86:	9301      	str	r3, [sp, #4]
 8008a88:	4b28      	ldr	r3, [pc, #160]	; (8008b2c <DRV_init+0x178>)
 8008a8a:	9300      	str	r3, [sp, #0]
 8008a8c:	2304      	movs	r3, #4
 8008a8e:	4a2d      	ldr	r2, [pc, #180]	; (8008b44 <DRV_init+0x190>)
 8008a90:	492d      	ldr	r1, [pc, #180]	; (8008b48 <DRV_init+0x194>)
 8008a92:	482e      	ldr	r0, [pc, #184]	; (8008b4c <DRV_init+0x198>)
 8008a94:	f000 feb0 	bl	80097f8 <MTR_init>
           MOTOR_REAR_LEFT_IN_2_GPIO_Port,
           MOTOR_REAR_LEFT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_4);

  MTR_init(&g_DRV_motorRearRight,
 8008a98:	2308      	movs	r3, #8
 8008a9a:	9303      	str	r3, [sp, #12]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	9302      	str	r3, [sp, #8]
 8008aa0:	2310      	movs	r3, #16
 8008aa2:	9301      	str	r3, [sp, #4]
 8008aa4:	4b24      	ldr	r3, [pc, #144]	; (8008b38 <DRV_init+0x184>)
 8008aa6:	9300      	str	r3, [sp, #0]
 8008aa8:	2320      	movs	r3, #32
 8008aaa:	4a23      	ldr	r2, [pc, #140]	; (8008b38 <DRV_init+0x184>)
 8008aac:	4928      	ldr	r1, [pc, #160]	; (8008b50 <DRV_init+0x19c>)
 8008aae:	4829      	ldr	r0, [pc, #164]	; (8008b54 <DRV_init+0x1a0>)
 8008ab0:	f000 fea2 	bl	80097f8 <MTR_init>
           MOTOR_REAR_RIGHT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_3);

  /* Setup encoders */
  ENC_init(&g_DRV_encoderFrontRight, DRV_FRONT_RIGHT_MOTOR_NAME, true , p_frontRightEncoderTimerHandle);
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	491d      	ldr	r1, [pc, #116]	; (8008b30 <DRV_init+0x17c>)
 8008aba:	4827      	ldr	r0, [pc, #156]	; (8008b58 <DRV_init+0x1a4>)
 8008abc:	f000 fd54 	bl	8009568 <ENC_init>
  ENC_init(&g_DRV_encoderFrontLeft , DRV_FRONT_LEFT_MOTOR_NAME , false, p_frontLeftEncoderTimerHandle );
 8008ac0:	69bb      	ldr	r3, [r7, #24]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	491d      	ldr	r1, [pc, #116]	; (8008b3c <DRV_init+0x188>)
 8008ac6:	4825      	ldr	r0, [pc, #148]	; (8008b5c <DRV_init+0x1a8>)
 8008ac8:	f000 fd4e 	bl	8009568 <ENC_init>
  ENC_init(&g_DRV_encoderRearLeft  , DRV_REAR_LEFT_MOTOR_NAME  , false, p_rearLeftEncoderTimerHandle  );
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	491d      	ldr	r1, [pc, #116]	; (8008b48 <DRV_init+0x194>)
 8008ad2:	4823      	ldr	r0, [pc, #140]	; (8008b60 <DRV_init+0x1ac>)
 8008ad4:	f000 fd48 	bl	8009568 <ENC_init>
  ENC_init(&g_DRV_encoderRearRight , DRV_REAR_RIGHT_MOTOR_NAME , true , p_rearRightEncoderTimerHandle );
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2201      	movs	r2, #1
 8008adc:	491c      	ldr	r1, [pc, #112]	; (8008b50 <DRV_init+0x19c>)
 8008ade:	4821      	ldr	r0, [pc, #132]	; (8008b64 <DRV_init+0x1b0>)
 8008ae0:	f000 fd42 	bl	8009568 <ENC_init>

  /* Start motors (but with a 0 speed at this point) */
  MTR_start(&g_DRV_motorFrontRight);
 8008ae4:	4813      	ldr	r0, [pc, #76]	; (8008b34 <DRV_init+0x180>)
 8008ae6:	f000 ff3b 	bl	8009960 <MTR_start>
  MTR_start(&g_DRV_motorFrontLeft );
 8008aea:	4815      	ldr	r0, [pc, #84]	; (8008b40 <DRV_init+0x18c>)
 8008aec:	f000 ff38 	bl	8009960 <MTR_start>
  MTR_start(&g_DRV_motorRearRight );
 8008af0:	4818      	ldr	r0, [pc, #96]	; (8008b54 <DRV_init+0x1a0>)
 8008af2:	f000 ff35 	bl	8009960 <MTR_start>
  MTR_start(&g_DRV_motorRearLeft  );
 8008af6:	4815      	ldr	r0, [pc, #84]	; (8008b4c <DRV_init+0x198>)
 8008af8:	f000 ff32 	bl	8009960 <MTR_start>

  /* Activate motors by default (de-activating them is used for debug  */
  g_DRV_areMotorsOn = true;
 8008afc:	4b1a      	ldr	r3, [pc, #104]	; (8008b68 <DRV_init+0x1b4>)
 8008afe:	2201      	movs	r2, #1
 8008b00:	701a      	strb	r2, [r3, #0]

  /* Considered that drive is inactive when the code starts */
  g_DRV_isActive = false;
 8008b02:	4b1a      	ldr	r3, [pc, #104]	; (8008b6c <DRV_init+0x1b8>)
 8008b04:	2200      	movs	r2, #0
 8008b06:	701a      	strb	r2, [r3, #0]

  /* Start with master board control mode */
  g_DRV_mode = DRV_MODE_MASTER_BOARD_CONTROLLED_SPEED;
 8008b08:	4b19      	ldr	r3, [pc, #100]	; (8008b70 <DRV_init+0x1bc>)
 8008b0a:	2202      	movs	r2, #2
 8008b0c:	701a      	strb	r2, [r3, #0]

  return;
 8008b0e:	bf00      	nop
}
 8008b10:	3710      	adds	r7, #16
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	0800b380 	.word	0x0800b380
 8008b1c:	200000d8 	.word	0x200000d8
 8008b20:	20000108 	.word	0x20000108
 8008b24:	20000138 	.word	0x20000138
 8008b28:	20000168 	.word	0x20000168
 8008b2c:	40011000 	.word	0x40011000
 8008b30:	0800b39c 	.word	0x0800b39c
 8008b34:	20000198 	.word	0x20000198
 8008b38:	40010c00 	.word	0x40010c00
 8008b3c:	0800b3a8 	.word	0x0800b3a8
 8008b40:	200001bc 	.word	0x200001bc
 8008b44:	40011400 	.word	0x40011400
 8008b48:	0800b3b4 	.word	0x0800b3b4
 8008b4c:	200001e0 	.word	0x200001e0
 8008b50:	0800b3c0 	.word	0x0800b3c0
 8008b54:	20000204 	.word	0x20000204
 8008b58:	20000228 	.word	0x20000228
 8008b5c:	20000234 	.word	0x20000234
 8008b60:	20000240 	.word	0x20000240
 8008b64:	2000024c 	.word	0x2000024c
 8008b68:	200000d4 	.word	0x200000d4
 8008b6c:	200000d5 	.word	0x200000d5
 8008b70:	200000d6 	.word	0x200000d6

08008b74 <DRV_updateEncoder>:

void DRV_updateEncoder(TIM_HandleTypeDef *p_encoderTimerHandle)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  int16_t l_count;

  l_count = __HAL_TIM_GET_COUNTER(p_encoderTimerHandle);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b82:	81fb      	strh	r3, [r7, #14]

  /* Check the handle of the triggering timer and update encoder accordingly */
  if (p_encoderTimerHandle == g_DRV_encoderRearLeft.timerHandle)
 8008b84:	4b2b      	ldr	r3, [pc, #172]	; (8008c34 <DRV_updateEncoder+0xc0>)
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d10f      	bne.n	8008bae <DRV_updateEncoder+0x3a>
  {
    ENC_update(&g_DRV_encoderRearLeft, l_count);
 8008b8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008b92:	4619      	mov	r1, r3
 8008b94:	4827      	ldr	r0, [pc, #156]	; (8008c34 <DRV_updateEncoder+0xc0>)
 8008b96:	f000 fd13 	bl	80095c0 <ENC_update>

    LOG_debug("%s encoder: %d", DRV_REAR_LEFT_MOTOR_NAME, ENC_getCount(&g_DRV_encoderRearLeft));
 8008b9a:	4826      	ldr	r0, [pc, #152]	; (8008c34 <DRV_updateEncoder+0xc0>)
 8008b9c:	f000 fd2c 	bl	80095f8 <ENC_getCount>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	4a25      	ldr	r2, [pc, #148]	; (8008c38 <DRV_updateEncoder+0xc4>)
 8008ba4:	4925      	ldr	r1, [pc, #148]	; (8008c3c <DRV_updateEncoder+0xc8>)
 8008ba6:	2000      	movs	r0, #0
 8008ba8:	f000 fdd0 	bl	800974c <LOG_log>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8008bac:	e03e      	b.n	8008c2c <DRV_updateEncoder+0xb8>
  else if (p_encoderTimerHandle == g_DRV_encoderRearRight.timerHandle)
 8008bae:	4b24      	ldr	r3, [pc, #144]	; (8008c40 <DRV_updateEncoder+0xcc>)
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d10f      	bne.n	8008bd8 <DRV_updateEncoder+0x64>
    ENC_update(&g_DRV_encoderRearRight, l_count);
 8008bb8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	4820      	ldr	r0, [pc, #128]	; (8008c40 <DRV_updateEncoder+0xcc>)
 8008bc0:	f000 fcfe 	bl	80095c0 <ENC_update>
    LOG_debug("%s encoder: %d", DRV_REAR_RIGHT_MOTOR_NAME, ENC_getCount(&g_DRV_encoderRearRight));
 8008bc4:	481e      	ldr	r0, [pc, #120]	; (8008c40 <DRV_updateEncoder+0xcc>)
 8008bc6:	f000 fd17 	bl	80095f8 <ENC_getCount>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	4a1d      	ldr	r2, [pc, #116]	; (8008c44 <DRV_updateEncoder+0xd0>)
 8008bce:	491b      	ldr	r1, [pc, #108]	; (8008c3c <DRV_updateEncoder+0xc8>)
 8008bd0:	2000      	movs	r0, #0
 8008bd2:	f000 fdbb 	bl	800974c <LOG_log>
  return;
 8008bd6:	e029      	b.n	8008c2c <DRV_updateEncoder+0xb8>
  else if (p_encoderTimerHandle == g_DRV_encoderFrontRight.timerHandle)
 8008bd8:	4b1b      	ldr	r3, [pc, #108]	; (8008c48 <DRV_updateEncoder+0xd4>)
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d10f      	bne.n	8008c02 <DRV_updateEncoder+0x8e>
    ENC_update(&g_DRV_encoderFrontRight, l_count);
 8008be2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008be6:	4619      	mov	r1, r3
 8008be8:	4817      	ldr	r0, [pc, #92]	; (8008c48 <DRV_updateEncoder+0xd4>)
 8008bea:	f000 fce9 	bl	80095c0 <ENC_update>
    LOG_debug("%s encoder: %d", DRV_FRONT_RIGHT_MOTOR_NAME, ENC_getCount(&g_DRV_encoderFrontRight));
 8008bee:	4816      	ldr	r0, [pc, #88]	; (8008c48 <DRV_updateEncoder+0xd4>)
 8008bf0:	f000 fd02 	bl	80095f8 <ENC_getCount>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	4a15      	ldr	r2, [pc, #84]	; (8008c4c <DRV_updateEncoder+0xd8>)
 8008bf8:	4910      	ldr	r1, [pc, #64]	; (8008c3c <DRV_updateEncoder+0xc8>)
 8008bfa:	2000      	movs	r0, #0
 8008bfc:	f000 fda6 	bl	800974c <LOG_log>
  return;
 8008c00:	e014      	b.n	8008c2c <DRV_updateEncoder+0xb8>
  else if (p_encoderTimerHandle == g_DRV_encoderFrontLeft.timerHandle)
 8008c02:	4b13      	ldr	r3, [pc, #76]	; (8008c50 <DRV_updateEncoder+0xdc>)
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d10f      	bne.n	8008c2c <DRV_updateEncoder+0xb8>
    ENC_update(&g_DRV_encoderFrontLeft, l_count);
 8008c0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008c10:	4619      	mov	r1, r3
 8008c12:	480f      	ldr	r0, [pc, #60]	; (8008c50 <DRV_updateEncoder+0xdc>)
 8008c14:	f000 fcd4 	bl	80095c0 <ENC_update>
    LOG_debug("%s encoder: %d", DRV_FRONT_LEFT_MOTOR_NAME, ENC_getCount(&g_DRV_encoderFrontLeft));
 8008c18:	480d      	ldr	r0, [pc, #52]	; (8008c50 <DRV_updateEncoder+0xdc>)
 8008c1a:	f000 fced 	bl	80095f8 <ENC_getCount>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	4a0c      	ldr	r2, [pc, #48]	; (8008c54 <DRV_updateEncoder+0xe0>)
 8008c22:	4906      	ldr	r1, [pc, #24]	; (8008c3c <DRV_updateEncoder+0xc8>)
 8008c24:	2000      	movs	r0, #0
 8008c26:	f000 fd91 	bl	800974c <LOG_log>
  return;
 8008c2a:	bf00      	nop
 8008c2c:	bf00      	nop
}
 8008c2e:	3710      	adds	r7, #16
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	20000240 	.word	0x20000240
 8008c38:	0800b3b4 	.word	0x0800b3b4
 8008c3c:	0800b3cc 	.word	0x0800b3cc
 8008c40:	2000024c 	.word	0x2000024c
 8008c44:	0800b3c0 	.word	0x0800b3c0
 8008c48:	20000228 	.word	0x20000228
 8008c4c:	0800b39c 	.word	0x0800b39c
 8008c50:	20000234 	.word	0x20000234
 8008c54:	0800b3a8 	.word	0x0800b3a8

08008c58 <DRV_updateFromBluetooth>:

void DRV_updateFromBluetooth(T_BLU_Data *p_bluetoothData)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  uint32_t l_speed;

  /* Check possible requested mode change */
  switch (p_bluetoothData->button)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	7c1b      	ldrb	r3, [r3, #16]
 8008c64:	3b01      	subs	r3, #1
 8008c66:	2b0f      	cmp	r3, #15
 8008c68:	d861      	bhi.n	8008d2e <DRV_updateFromBluetooth+0xd6>
 8008c6a:	a201      	add	r2, pc, #4	; (adr r2, 8008c70 <DRV_updateFromBluetooth+0x18>)
 8008c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c70:	08008cf9 	.word	0x08008cf9
 8008c74:	08008d2f 	.word	0x08008d2f
 8008c78:	08008d2f 	.word	0x08008d2f
 8008c7c:	08008d11 	.word	0x08008d11
 8008c80:	08008d2f 	.word	0x08008d2f
 8008c84:	08008d2f 	.word	0x08008d2f
 8008c88:	08008d2f 	.word	0x08008d2f
 8008c8c:	08008d2f 	.word	0x08008d2f
 8008c90:	08008d2f 	.word	0x08008d2f
 8008c94:	08008d2f 	.word	0x08008d2f
 8008c98:	08008d2f 	.word	0x08008d2f
 8008c9c:	08008d2f 	.word	0x08008d2f
 8008ca0:	08008d2f 	.word	0x08008d2f
 8008ca4:	08008ce1 	.word	0x08008ce1
 8008ca8:	08008cc9 	.word	0x08008cc9
 8008cac:	08008cb1 	.word	0x08008cb1
  {
    case BLU_BUTTON_PINK_SQUARE:
      if (g_DRV_mode != DRV_MODE_MANUAL_FIXED_SPEED)
 8008cb0:	4b82      	ldr	r3, [pc, #520]	; (8008ebc <DRV_updateFromBluetooth+0x264>)
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d03c      	beq.n	8008d32 <DRV_updateFromBluetooth+0xda>
      {
        LOG_info("Drive mode now DRV_MODE_MANUAL_FIXED_SPEED");
 8008cb8:	4981      	ldr	r1, [pc, #516]	; (8008ec0 <DRV_updateFromBluetooth+0x268>)
 8008cba:	2001      	movs	r0, #1
 8008cbc:	f000 fd46 	bl	800974c <LOG_log>
        g_DRV_mode = DRV_MODE_MANUAL_FIXED_SPEED;
 8008cc0:	4b7e      	ldr	r3, [pc, #504]	; (8008ebc <DRV_updateFromBluetooth+0x264>)
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8008cc6:	e034      	b.n	8008d32 <DRV_updateFromBluetooth+0xda>

    case BLU_BUTTON_BLUE_CROSS:
      if (g_DRV_mode != DRV_MODE_MANUAL_VARIABLE_SPEED)
 8008cc8:	4b7c      	ldr	r3, [pc, #496]	; (8008ebc <DRV_updateFromBluetooth+0x264>)
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d032      	beq.n	8008d36 <DRV_updateFromBluetooth+0xde>
      {
        LOG_info("Drive mode now DRV_MODE_MANUAL_VARIABLE_SPEED");
 8008cd0:	497c      	ldr	r1, [pc, #496]	; (8008ec4 <DRV_updateFromBluetooth+0x26c>)
 8008cd2:	2001      	movs	r0, #1
 8008cd4:	f000 fd3a 	bl	800974c <LOG_log>
        g_DRV_mode = DRV_MODE_MANUAL_VARIABLE_SPEED;
 8008cd8:	4b78      	ldr	r3, [pc, #480]	; (8008ebc <DRV_updateFromBluetooth+0x264>)
 8008cda:	2201      	movs	r2, #1
 8008cdc:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8008cde:	e02a      	b.n	8008d36 <DRV_updateFromBluetooth+0xde>

    case BLU_BUTTON_RED_CIRCLE:
      if (g_DRV_mode != DRV_MODE_MASTER_BOARD_CONTROLLED_SPEED)
 8008ce0:	4b76      	ldr	r3, [pc, #472]	; (8008ebc <DRV_updateFromBluetooth+0x264>)
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	d028      	beq.n	8008d3a <DRV_updateFromBluetooth+0xe2>
      {
        LOG_info("Drive mode now DRV_MODE_MASTER_BOARD_CONTROLLED_SPEED");
 8008ce8:	4977      	ldr	r1, [pc, #476]	; (8008ec8 <DRV_updateFromBluetooth+0x270>)
 8008cea:	2001      	movs	r0, #1
 8008cec:	f000 fd2e 	bl	800974c <LOG_log>
        g_DRV_mode = DRV_MODE_MASTER_BOARD_CONTROLLED_SPEED;
 8008cf0:	4b72      	ldr	r3, [pc, #456]	; (8008ebc <DRV_updateFromBluetooth+0x264>)
 8008cf2:	2202      	movs	r2, #2
 8008cf4:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8008cf6:	e020      	b.n	8008d3a <DRV_updateFromBluetooth+0xe2>

    case BLU_BUTTON_SELECT:
      if (g_DRV_areMotorsOn == true)
 8008cf8:	4b74      	ldr	r3, [pc, #464]	; (8008ecc <DRV_updateFromBluetooth+0x274>)
 8008cfa:	781b      	ldrb	r3, [r3, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d01e      	beq.n	8008d3e <DRV_updateFromBluetooth+0xe6>
      {
        LOG_info("Drive turning motor OFF");
 8008d00:	4973      	ldr	r1, [pc, #460]	; (8008ed0 <DRV_updateFromBluetooth+0x278>)
 8008d02:	2001      	movs	r0, #1
 8008d04:	f000 fd22 	bl	800974c <LOG_log>
        g_DRV_areMotorsOn = false;
 8008d08:	4b70      	ldr	r3, [pc, #448]	; (8008ecc <DRV_updateFromBluetooth+0x274>)
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8008d0e:	e016      	b.n	8008d3e <DRV_updateFromBluetooth+0xe6>

    case BLU_BUTTON_START:
      if (g_DRV_areMotorsOn == false)
 8008d10:	4b6e      	ldr	r3, [pc, #440]	; (8008ecc <DRV_updateFromBluetooth+0x274>)
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	f083 0301 	eor.w	r3, r3, #1
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d011      	beq.n	8008d42 <DRV_updateFromBluetooth+0xea>
      {
        LOG_info("Drive turning motors ON");
 8008d1e:	496d      	ldr	r1, [pc, #436]	; (8008ed4 <DRV_updateFromBluetooth+0x27c>)
 8008d20:	2001      	movs	r0, #1
 8008d22:	f000 fd13 	bl	800974c <LOG_log>
        g_DRV_areMotorsOn = true;
 8008d26:	4b69      	ldr	r3, [pc, #420]	; (8008ecc <DRV_updateFromBluetooth+0x274>)
 8008d28:	2201      	movs	r2, #1
 8008d2a:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8008d2c:	e009      	b.n	8008d42 <DRV_updateFromBluetooth+0xea>

    default:
      ; /* Nothing to do */
      break;
 8008d2e:	bf00      	nop
 8008d30:	e008      	b.n	8008d44 <DRV_updateFromBluetooth+0xec>
      break;
 8008d32:	bf00      	nop
 8008d34:	e006      	b.n	8008d44 <DRV_updateFromBluetooth+0xec>
      break;
 8008d36:	bf00      	nop
 8008d38:	e004      	b.n	8008d44 <DRV_updateFromBluetooth+0xec>
      break;
 8008d3a:	bf00      	nop
 8008d3c:	e002      	b.n	8008d44 <DRV_updateFromBluetooth+0xec>
      break;
 8008d3e:	bf00      	nop
 8008d40:	e000      	b.n	8008d44 <DRV_updateFromBluetooth+0xec>
      break;
 8008d42:	bf00      	nop
  }

  /* Master board control mode is an automated mode, so that we will */
  /* ignore any direction/button press received via bluetooth.       */
  if (g_DRV_mode == DRV_MODE_MASTER_BOARD_CONTROLLED_SPEED)
 8008d44:	4b5d      	ldr	r3, [pc, #372]	; (8008ebc <DRV_updateFromBluetooth+0x264>)
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	f000 80b3 	beq.w	8008eb4 <DRV_updateFromBluetooth+0x25c>
    ; /* Nothing to do */
  }
  /* Manual mode, applying directions received by bluetooth */
  else
  {
    if (p_bluetoothData->leftY > DRV_JOYSTICKS_THRESHOLD)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	2b0a      	cmp	r3, #10
 8008d54:	dd0c      	ble.n	8008d70 <DRV_updateFromBluetooth+0x118>
    {
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->leftY;
 8008d56:	4b59      	ldr	r3, [pc, #356]	; (8008ebc <DRV_updateFromBluetooth+0x264>)
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d002      	beq.n	8008d64 <DRV_updateFromBluetooth+0x10c>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	e000      	b.n	8008d66 <DRV_updateFromBluetooth+0x10e>
 8008d64:	2319      	movs	r3, #25
 8008d66:	60fb      	str	r3, [r7, #12]

      DRV_moveForward(l_speed);
 8008d68:	68f8      	ldr	r0, [r7, #12]
 8008d6a:	f000 f94d 	bl	8009008 <DRV_moveForward>
      /* Most of the time, we will get here */
      DRV_sleep();
    }
  }

  return;
 8008d6e:	e0a1      	b.n	8008eb4 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightY > DRV_JOYSTICKS_THRESHOLD)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	68db      	ldr	r3, [r3, #12]
 8008d74:	2b0a      	cmp	r3, #10
 8008d76:	dd0c      	ble.n	8008d92 <DRV_updateFromBluetooth+0x13a>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->rightY;
 8008d78:	4b50      	ldr	r3, [pc, #320]	; (8008ebc <DRV_updateFromBluetooth+0x264>)
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d002      	beq.n	8008d86 <DRV_updateFromBluetooth+0x12e>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	e000      	b.n	8008d88 <DRV_updateFromBluetooth+0x130>
 8008d86:	2319      	movs	r3, #25
 8008d88:	60fb      	str	r3, [r7, #12]
      DRV_moveForward(l_speed);
 8008d8a:	68f8      	ldr	r0, [r7, #12]
 8008d8c:	f000 f93c 	bl	8009008 <DRV_moveForward>
  return;
 8008d90:	e090      	b.n	8008eb4 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->leftY < -DRV_JOYSTICKS_THRESHOLD)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	f113 0f0a 	cmn.w	r3, #10
 8008d9a:	da0d      	bge.n	8008db8 <DRV_updateFromBluetooth+0x160>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->leftY;
 8008d9c:	4b47      	ldr	r3, [pc, #284]	; (8008ebc <DRV_updateFromBluetooth+0x264>)
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d003      	beq.n	8008dac <DRV_updateFromBluetooth+0x154>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	425b      	negs	r3, r3
 8008daa:	e000      	b.n	8008dae <DRV_updateFromBluetooth+0x156>
 8008dac:	2319      	movs	r3, #25
 8008dae:	60fb      	str	r3, [r7, #12]
      DRV_moveBackward(l_speed);
 8008db0:	68f8      	ldr	r0, [r7, #12]
 8008db2:	f000 f971 	bl	8009098 <DRV_moveBackward>
  return;
 8008db6:	e07d      	b.n	8008eb4 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightY < -DRV_JOYSTICKS_THRESHOLD)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	68db      	ldr	r3, [r3, #12]
 8008dbc:	f113 0f0a 	cmn.w	r3, #10
 8008dc0:	da0d      	bge.n	8008dde <DRV_updateFromBluetooth+0x186>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->rightY;
 8008dc2:	4b3e      	ldr	r3, [pc, #248]	; (8008ebc <DRV_updateFromBluetooth+0x264>)
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d003      	beq.n	8008dd2 <DRV_updateFromBluetooth+0x17a>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	425b      	negs	r3, r3
 8008dd0:	e000      	b.n	8008dd4 <DRV_updateFromBluetooth+0x17c>
 8008dd2:	2319      	movs	r3, #25
 8008dd4:	60fb      	str	r3, [r7, #12]
      DRV_moveBackward(l_speed);
 8008dd6:	68f8      	ldr	r0, [r7, #12]
 8008dd8:	f000 f95e 	bl	8009098 <DRV_moveBackward>
  return;
 8008ddc:	e06a      	b.n	8008eb4 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->leftX < -DRV_JOYSTICKS_THRESHOLD)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f113 0f0a 	cmn.w	r3, #10
 8008de6:	da0d      	bge.n	8008e04 <DRV_updateFromBluetooth+0x1ac>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->leftX;
 8008de8:	4b34      	ldr	r3, [pc, #208]	; (8008ebc <DRV_updateFromBluetooth+0x264>)
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d003      	beq.n	8008df8 <DRV_updateFromBluetooth+0x1a0>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	425b      	negs	r3, r3
 8008df6:	e000      	b.n	8008dfa <DRV_updateFromBluetooth+0x1a2>
 8008df8:	2319      	movs	r3, #25
 8008dfa:	60fb      	str	r3, [r7, #12]
      DRV_turnLeft(l_speed);
 8008dfc:	68f8      	ldr	r0, [r7, #12]
 8008dfe:	f000 fa93 	bl	8009328 <DRV_turnLeft>
  return;
 8008e02:	e057      	b.n	8008eb4 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->leftX > DRV_JOYSTICKS_THRESHOLD)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2b0a      	cmp	r3, #10
 8008e0a:	dd0c      	ble.n	8008e26 <DRV_updateFromBluetooth+0x1ce>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->leftX;
 8008e0c:	4b2b      	ldr	r3, [pc, #172]	; (8008ebc <DRV_updateFromBluetooth+0x264>)
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d002      	beq.n	8008e1a <DRV_updateFromBluetooth+0x1c2>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	e000      	b.n	8008e1c <DRV_updateFromBluetooth+0x1c4>
 8008e1a:	2319      	movs	r3, #25
 8008e1c:	60fb      	str	r3, [r7, #12]
      DRV_turnRight(l_speed);
 8008e1e:	68f8      	ldr	r0, [r7, #12]
 8008e20:	f000 faca 	bl	80093b8 <DRV_turnRight>
  return;
 8008e24:	e046      	b.n	8008eb4 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightX < -DRV_JOYSTICKS_THRESHOLD)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	f113 0f0a 	cmn.w	r3, #10
 8008e2e:	da0d      	bge.n	8008e4c <DRV_updateFromBluetooth+0x1f4>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->rightX;
 8008e30:	4b22      	ldr	r3, [pc, #136]	; (8008ebc <DRV_updateFromBluetooth+0x264>)
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d003      	beq.n	8008e40 <DRV_updateFromBluetooth+0x1e8>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	425b      	negs	r3, r3
 8008e3e:	e000      	b.n	8008e42 <DRV_updateFromBluetooth+0x1ea>
 8008e40:	2319      	movs	r3, #25
 8008e42:	60fb      	str	r3, [r7, #12]
      DRV_translateLeft(l_speed);
 8008e44:	68f8      	ldr	r0, [r7, #12]
 8008e46:	f000 faff 	bl	8009448 <DRV_translateLeft>
  return;
 8008e4a:	e033      	b.n	8008eb4 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightX > DRV_JOYSTICKS_THRESHOLD)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	2b0a      	cmp	r3, #10
 8008e52:	dd0c      	ble.n	8008e6e <DRV_updateFromBluetooth+0x216>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->rightX;
 8008e54:	4b19      	ldr	r3, [pc, #100]	; (8008ebc <DRV_updateFromBluetooth+0x264>)
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d002      	beq.n	8008e62 <DRV_updateFromBluetooth+0x20a>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	e000      	b.n	8008e64 <DRV_updateFromBluetooth+0x20c>
 8008e62:	2319      	movs	r3, #25
 8008e64:	60fb      	str	r3, [r7, #12]
      DRV_translateRight(l_speed);
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	f000 fb36 	bl	80094d8 <DRV_translateRight>
  return;
 8008e6c:	e022      	b.n	8008eb4 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_L1)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	7c1b      	ldrb	r3, [r3, #16]
 8008e72:	2b0b      	cmp	r3, #11
 8008e74:	d103      	bne.n	8008e7e <DRV_updateFromBluetooth+0x226>
      DRV_moveForwardLeft(DRV_BUTTONS_FIXED_SPEED);
 8008e76:	2032      	movs	r0, #50	; 0x32
 8008e78:	f000 f996 	bl	80091a8 <DRV_moveForwardLeft>
  return;
 8008e7c:	e01a      	b.n	8008eb4 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_L2)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	7c1b      	ldrb	r3, [r3, #16]
 8008e82:	2b09      	cmp	r3, #9
 8008e84:	d103      	bne.n	8008e8e <DRV_updateFromBluetooth+0x236>
      DRV_moveBackwardRight(DRV_BUTTONS_FIXED_SPEED);
 8008e86:	2032      	movs	r0, #50	; 0x32
 8008e88:	f000 f9ce 	bl	8009228 <DRV_moveBackwardRight>
  return;
 8008e8c:	e012      	b.n	8008eb4 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_R1)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	7c1b      	ldrb	r3, [r3, #16]
 8008e92:	2b0c      	cmp	r3, #12
 8008e94:	d103      	bne.n	8008e9e <DRV_updateFromBluetooth+0x246>
      DRV_moveForwardRight(DRV_BUTTONS_FIXED_SPEED);
 8008e96:	2032      	movs	r0, #50	; 0x32
 8008e98:	f000 f946 	bl	8009128 <DRV_moveForwardRight>
  return;
 8008e9c:	e00a      	b.n	8008eb4 <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_R2)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	7c1b      	ldrb	r3, [r3, #16]
 8008ea2:	2b0a      	cmp	r3, #10
 8008ea4:	d103      	bne.n	8008eae <DRV_updateFromBluetooth+0x256>
      DRV_moveBackwardLeft(DRV_BUTTONS_FIXED_SPEED);
 8008ea6:	2032      	movs	r0, #50	; 0x32
 8008ea8:	f000 f9fe 	bl	80092a8 <DRV_moveBackwardLeft>
  return;
 8008eac:	e002      	b.n	8008eb4 <DRV_updateFromBluetooth+0x25c>
      DRV_sleep();
 8008eae:	f000 f87f 	bl	8008fb0 <DRV_sleep>
  return;
 8008eb2:	bf00      	nop
 8008eb4:	bf00      	nop
}
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	200000d6 	.word	0x200000d6
 8008ec0:	0800b3dc 	.word	0x0800b3dc
 8008ec4:	0800b408 	.word	0x0800b408
 8008ec8:	0800b438 	.word	0x0800b438
 8008ecc:	200000d4 	.word	0x200000d4
 8008ed0:	0800b470 	.word	0x0800b470
 8008ed4:	0800b488 	.word	0x0800b488

08008ed8 <DRV_updateFromMaster>:

void DRV_updateFromMaster(uint16_t p_deltaTime)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b08a      	sub	sp, #40	; 0x28
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	4603      	mov	r3, r0
 8008ee0:	80fb      	strh	r3, [r7, #6]
  int32_t l_pidSpeedFrontLeft;
  int32_t l_pidSpeedRearRight;
  int32_t l_pidSpeedRearLeft;

  /* Ignore master board data only whenever a manual mode is selected */
  if (g_DRV_mode != DRV_MODE_MASTER_BOARD_CONTROLLED_SPEED)
 8008ee2:	4b26      	ldr	r3, [pc, #152]	; (8008f7c <DRV_updateFromMaster+0xa4>)
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	2b02      	cmp	r3, #2
 8008ee8:	d144      	bne.n	8008f74 <DRV_updateFromMaster+0x9c>
    ; /* Nothing to do */
  }
  else
  {
    /* Get measurements */
    l_measuredSpeedFrontRight = ENC_getCount(&g_DRV_encoderFrontRight);
 8008eea:	4825      	ldr	r0, [pc, #148]	; (8008f80 <DRV_updateFromMaster+0xa8>)
 8008eec:	f000 fb84 	bl	80095f8 <ENC_getCount>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	627b      	str	r3, [r7, #36]	; 0x24
    l_measuredSpeedFrontLeft  = ENC_getCount(&g_DRV_encoderFrontLeft );
 8008ef4:	4823      	ldr	r0, [pc, #140]	; (8008f84 <DRV_updateFromMaster+0xac>)
 8008ef6:	f000 fb7f 	bl	80095f8 <ENC_getCount>
 8008efa:	4603      	mov	r3, r0
 8008efc:	623b      	str	r3, [r7, #32]
    l_measuredSpeedRearRight  = ENC_getCount(&g_DRV_encoderRearRight );
 8008efe:	4822      	ldr	r0, [pc, #136]	; (8008f88 <DRV_updateFromMaster+0xb0>)
 8008f00:	f000 fb7a 	bl	80095f8 <ENC_getCount>
 8008f04:	4603      	mov	r3, r0
 8008f06:	61fb      	str	r3, [r7, #28]
    l_measuredSpeedRearLeft   = ENC_getCount(&g_DRV_encoderRearLeft  );
 8008f08:	4820      	ldr	r0, [pc, #128]	; (8008f8c <DRV_updateFromMaster+0xb4>)
 8008f0a:	f000 fb75 	bl	80095f8 <ENC_getCount>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	61bb      	str	r3, [r7, #24]

    /* Update PIDs */
    l_pidSpeedFrontRight = PID_update(&g_DRV_pidFrontRight, l_measuredSpeedFrontRight, p_deltaTime);
 8008f12:	88fb      	ldrh	r3, [r7, #6]
 8008f14:	461a      	mov	r2, r3
 8008f16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f18:	481d      	ldr	r0, [pc, #116]	; (8008f90 <DRV_updateFromMaster+0xb8>)
 8008f1a:	f000 fdb1 	bl	8009a80 <PID_update>
 8008f1e:	6178      	str	r0, [r7, #20]
    l_pidSpeedFrontLeft  = PID_update(&g_DRV_pidFrontLeft , l_measuredSpeedFrontLeft , p_deltaTime);
 8008f20:	88fb      	ldrh	r3, [r7, #6]
 8008f22:	461a      	mov	r2, r3
 8008f24:	6a39      	ldr	r1, [r7, #32]
 8008f26:	481b      	ldr	r0, [pc, #108]	; (8008f94 <DRV_updateFromMaster+0xbc>)
 8008f28:	f000 fdaa 	bl	8009a80 <PID_update>
 8008f2c:	6138      	str	r0, [r7, #16]
    l_pidSpeedRearRight  = PID_update(&g_DRV_pidRearRight , l_measuredSpeedRearRight , p_deltaTime);
 8008f2e:	88fb      	ldrh	r3, [r7, #6]
 8008f30:	461a      	mov	r2, r3
 8008f32:	69f9      	ldr	r1, [r7, #28]
 8008f34:	4818      	ldr	r0, [pc, #96]	; (8008f98 <DRV_updateFromMaster+0xc0>)
 8008f36:	f000 fda3 	bl	8009a80 <PID_update>
 8008f3a:	60f8      	str	r0, [r7, #12]
    l_pidSpeedRearLeft   = PID_update(&g_DRV_pidRearLeft  , l_measuredSpeedRearLeft  , p_deltaTime);
 8008f3c:	88fb      	ldrh	r3, [r7, #6]
 8008f3e:	461a      	mov	r2, r3
 8008f40:	69b9      	ldr	r1, [r7, #24]
 8008f42:	4816      	ldr	r0, [pc, #88]	; (8008f9c <DRV_updateFromMaster+0xc4>)
 8008f44:	f000 fd9c 	bl	8009a80 <PID_update>
 8008f48:	60b8      	str	r0, [r7, #8]

    /* Update motors */
    MTR_setSpeed(&g_DRV_motorFrontRight, l_pidSpeedFrontRight);
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	4814      	ldr	r0, [pc, #80]	; (8008fa0 <DRV_updateFromMaster+0xc8>)
 8008f50:	f000 fcc8 	bl	80098e4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_pidSpeedFrontLeft );
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	4619      	mov	r1, r3
 8008f58:	4812      	ldr	r0, [pc, #72]	; (8008fa4 <DRV_updateFromMaster+0xcc>)
 8008f5a:	f000 fcc3 	bl	80098e4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_pidSpeedRearRight );
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	4619      	mov	r1, r3
 8008f62:	4811      	ldr	r0, [pc, #68]	; (8008fa8 <DRV_updateFromMaster+0xd0>)
 8008f64:	f000 fcbe 	bl	80098e4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_pidSpeedRearLeft  );
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	480f      	ldr	r0, [pc, #60]	; (8008fac <DRV_updateFromMaster+0xd4>)
 8008f6e:	f000 fcb9 	bl	80098e4 <MTR_setSpeed>
  }

  return;
 8008f72:	bf00      	nop
 8008f74:	bf00      	nop
}
 8008f76:	3728      	adds	r7, #40	; 0x28
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	200000d6 	.word	0x200000d6
 8008f80:	20000228 	.word	0x20000228
 8008f84:	20000234 	.word	0x20000234
 8008f88:	2000024c 	.word	0x2000024c
 8008f8c:	20000240 	.word	0x20000240
 8008f90:	200000d8 	.word	0x200000d8
 8008f94:	20000108 	.word	0x20000108
 8008f98:	20000168 	.word	0x20000168
 8008f9c:	20000138 	.word	0x20000138
 8008fa0:	20000198 	.word	0x20000198
 8008fa4:	200001bc 	.word	0x200001bc
 8008fa8:	20000204 	.word	0x20000204
 8008fac:	200001e0 	.word	0x200001e0

08008fb0 <DRV_sleep>:

static void DRV_sleep(void)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	af00      	add	r7, sp, #0
  if (g_DRV_isActive == true)
 8008fb4:	4b0e      	ldr	r3, [pc, #56]	; (8008ff0 <DRV_sleep+0x40>)
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d017      	beq.n	8008fec <DRV_sleep+0x3c>
  {
    LOG_info("Drive going to sleep");
 8008fbc:	490d      	ldr	r1, [pc, #52]	; (8008ff4 <DRV_sleep+0x44>)
 8008fbe:	2001      	movs	r0, #1
 8008fc0:	f000 fbc4 	bl	800974c <LOG_log>

    MTR_setSpeed(&g_DRV_motorFrontRight, 0);
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	480c      	ldr	r0, [pc, #48]	; (8008ff8 <DRV_sleep+0x48>)
 8008fc8:	f000 fc8c 	bl	80098e4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , 0);
 8008fcc:	2100      	movs	r1, #0
 8008fce:	480b      	ldr	r0, [pc, #44]	; (8008ffc <DRV_sleep+0x4c>)
 8008fd0:	f000 fc88 	bl	80098e4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , 0);
 8008fd4:	2100      	movs	r1, #0
 8008fd6:	480a      	ldr	r0, [pc, #40]	; (8009000 <DRV_sleep+0x50>)
 8008fd8:	f000 fc84 	bl	80098e4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , 0);
 8008fdc:	2100      	movs	r1, #0
 8008fde:	4809      	ldr	r0, [pc, #36]	; (8009004 <DRV_sleep+0x54>)
 8008fe0:	f000 fc80 	bl	80098e4 <MTR_setSpeed>

    g_DRV_isActive = false;
 8008fe4:	4b02      	ldr	r3, [pc, #8]	; (8008ff0 <DRV_sleep+0x40>)
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 8008fea:	bf00      	nop
 8008fec:	bf00      	nop
}
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	200000d5 	.word	0x200000d5
 8008ff4:	0800b4a0 	.word	0x0800b4a0
 8008ff8:	20000198 	.word	0x20000198
 8008ffc:	200001bc 	.word	0x200001bc
 8009000:	20000204 	.word	0x20000204
 8009004:	200001e0 	.word	0x200001e0

08009008 <DRV_moveForward>:

static void DRV_moveForward(uint32_t p_speed)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward @%u", l_speed);
 8009014:	68fa      	ldr	r2, [r7, #12]
 8009016:	4919      	ldr	r1, [pc, #100]	; (800907c <DRV_moveForward+0x74>)
 8009018:	2000      	movs	r0, #0
 800901a:	f000 fb97 	bl	800974c <LOG_log>

  g_DRV_isActive = true;
 800901e:	4b18      	ldr	r3, [pc, #96]	; (8009080 <DRV_moveForward+0x78>)
 8009020:	2201      	movs	r2, #1
 8009022:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD);
 8009024:	2100      	movs	r1, #0
 8009026:	4817      	ldr	r0, [pc, #92]	; (8009084 <DRV_moveForward+0x7c>)
 8009028:	f000 fc18 	bl	800985c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD);
 800902c:	2100      	movs	r1, #0
 800902e:	4816      	ldr	r0, [pc, #88]	; (8009088 <DRV_moveForward+0x80>)
 8009030:	f000 fc14 	bl	800985c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD);
 8009034:	2100      	movs	r1, #0
 8009036:	4815      	ldr	r0, [pc, #84]	; (800908c <DRV_moveForward+0x84>)
 8009038:	f000 fc10 	bl	800985c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD);
 800903c:	2100      	movs	r1, #0
 800903e:	4814      	ldr	r0, [pc, #80]	; (8009090 <DRV_moveForward+0x88>)
 8009040:	f000 fc0c 	bl	800985c <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009044:	4b13      	ldr	r3, [pc, #76]	; (8009094 <DRV_moveForward+0x8c>)
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	f083 0301 	eor.w	r3, r3, #1
 800904c:	b2db      	uxtb	r3, r3
 800904e:	2b00      	cmp	r3, #0
 8009050:	d110      	bne.n	8009074 <DRV_moveForward+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 8009052:	68f9      	ldr	r1, [r7, #12]
 8009054:	480b      	ldr	r0, [pc, #44]	; (8009084 <DRV_moveForward+0x7c>)
 8009056:	f000 fc45 	bl	80098e4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800905a:	68f9      	ldr	r1, [r7, #12]
 800905c:	480a      	ldr	r0, [pc, #40]	; (8009088 <DRV_moveForward+0x80>)
 800905e:	f000 fc41 	bl	80098e4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 8009062:	68f9      	ldr	r1, [r7, #12]
 8009064:	4809      	ldr	r0, [pc, #36]	; (800908c <DRV_moveForward+0x84>)
 8009066:	f000 fc3d 	bl	80098e4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800906a:	68f9      	ldr	r1, [r7, #12]
 800906c:	4808      	ldr	r0, [pc, #32]	; (8009090 <DRV_moveForward+0x88>)
 800906e:	f000 fc39 	bl	80098e4 <MTR_setSpeed>
  }

  return;
 8009072:	bf00      	nop
 8009074:	bf00      	nop
}
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}
 800907c:	0800b4b8 	.word	0x0800b4b8
 8009080:	200000d5 	.word	0x200000d5
 8009084:	20000198 	.word	0x20000198
 8009088:	200001bc 	.word	0x200001bc
 800908c:	20000204 	.word	0x20000204
 8009090:	200001e0 	.word	0x200001e0
 8009094:	200000d4 	.word	0x200000d4

08009098 <DRV_moveBackward>:

static void DRV_moveBackward(uint32_t p_speed)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward @%u", l_speed);
 80090a4:	68fa      	ldr	r2, [r7, #12]
 80090a6:	4919      	ldr	r1, [pc, #100]	; (800910c <DRV_moveBackward+0x74>)
 80090a8:	2000      	movs	r0, #0
 80090aa:	f000 fb4f 	bl	800974c <LOG_log>

  g_DRV_isActive = true;
 80090ae:	4b18      	ldr	r3, [pc, #96]	; (8009110 <DRV_moveBackward+0x78>)
 80090b0:	2201      	movs	r2, #1
 80090b2:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 80090b4:	2101      	movs	r1, #1
 80090b6:	4817      	ldr	r0, [pc, #92]	; (8009114 <DRV_moveBackward+0x7c>)
 80090b8:	f000 fbd0 	bl	800985c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 80090bc:	2101      	movs	r1, #1
 80090be:	4816      	ldr	r0, [pc, #88]	; (8009118 <DRV_moveBackward+0x80>)
 80090c0:	f000 fbcc 	bl	800985c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 80090c4:	2101      	movs	r1, #1
 80090c6:	4815      	ldr	r0, [pc, #84]	; (800911c <DRV_moveBackward+0x84>)
 80090c8:	f000 fbc8 	bl	800985c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 80090cc:	2101      	movs	r1, #1
 80090ce:	4814      	ldr	r0, [pc, #80]	; (8009120 <DRV_moveBackward+0x88>)
 80090d0:	f000 fbc4 	bl	800985c <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 80090d4:	4b13      	ldr	r3, [pc, #76]	; (8009124 <DRV_moveBackward+0x8c>)
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	f083 0301 	eor.w	r3, r3, #1
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d110      	bne.n	8009104 <DRV_moveBackward+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 80090e2:	68f9      	ldr	r1, [r7, #12]
 80090e4:	480b      	ldr	r0, [pc, #44]	; (8009114 <DRV_moveBackward+0x7c>)
 80090e6:	f000 fbfd 	bl	80098e4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 80090ea:	68f9      	ldr	r1, [r7, #12]
 80090ec:	480a      	ldr	r0, [pc, #40]	; (8009118 <DRV_moveBackward+0x80>)
 80090ee:	f000 fbf9 	bl	80098e4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 80090f2:	68f9      	ldr	r1, [r7, #12]
 80090f4:	4809      	ldr	r0, [pc, #36]	; (800911c <DRV_moveBackward+0x84>)
 80090f6:	f000 fbf5 	bl	80098e4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 80090fa:	68f9      	ldr	r1, [r7, #12]
 80090fc:	4808      	ldr	r0, [pc, #32]	; (8009120 <DRV_moveBackward+0x88>)
 80090fe:	f000 fbf1 	bl	80098e4 <MTR_setSpeed>
  }

  return;
 8009102:	bf00      	nop
 8009104:	bf00      	nop
}
 8009106:	3710      	adds	r7, #16
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}
 800910c:	0800b4cc 	.word	0x0800b4cc
 8009110:	200000d5 	.word	0x200000d5
 8009114:	20000198 	.word	0x20000198
 8009118:	200001bc 	.word	0x200001bc
 800911c:	20000204 	.word	0x20000204
 8009120:	200001e0 	.word	0x200001e0
 8009124:	200000d4 	.word	0x200000d4

08009128 <DRV_moveForwardRight>:

static void DRV_moveForwardRight (uint32_t p_speed)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward-right @%u", l_speed);
 8009134:	68fa      	ldr	r2, [r7, #12]
 8009136:	4915      	ldr	r1, [pc, #84]	; (800918c <DRV_moveForwardRight+0x64>)
 8009138:	2000      	movs	r0, #0
 800913a:	f000 fb07 	bl	800974c <LOG_log>

  g_DRV_isActive = true;
 800913e:	4b14      	ldr	r3, [pc, #80]	; (8009190 <DRV_moveForwardRight+0x68>)
 8009140:	2201      	movs	r2, #1
 8009142:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontLeft, MTR_DIRECTION_FORWARD);
 8009144:	2100      	movs	r1, #0
 8009146:	4813      	ldr	r0, [pc, #76]	; (8009194 <DRV_moveForwardRight+0x6c>)
 8009148:	f000 fb88 	bl	800985c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight, MTR_DIRECTION_FORWARD);
 800914c:	2100      	movs	r1, #0
 800914e:	4812      	ldr	r0, [pc, #72]	; (8009198 <DRV_moveForwardRight+0x70>)
 8009150:	f000 fb84 	bl	800985c <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009154:	4b11      	ldr	r3, [pc, #68]	; (800919c <DRV_moveForwardRight+0x74>)
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	f083 0301 	eor.w	r3, r3, #1
 800915c:	b2db      	uxtb	r3, r3
 800915e:	2b00      	cmp	r3, #0
 8009160:	d110      	bne.n	8009184 <DRV_moveForwardRight+0x5c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight,       0);
 8009162:	2100      	movs	r1, #0
 8009164:	480e      	ldr	r0, [pc, #56]	; (80091a0 <DRV_moveForwardRight+0x78>)
 8009166:	f000 fbbd 	bl	80098e4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800916a:	68f9      	ldr	r1, [r7, #12]
 800916c:	4809      	ldr	r0, [pc, #36]	; (8009194 <DRV_moveForwardRight+0x6c>)
 800916e:	f000 fbb9 	bl	80098e4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 8009172:	68f9      	ldr	r1, [r7, #12]
 8009174:	4808      	ldr	r0, [pc, #32]	; (8009198 <DRV_moveForwardRight+0x70>)
 8009176:	f000 fbb5 	bl	80098e4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  ,       0);
 800917a:	2100      	movs	r1, #0
 800917c:	4809      	ldr	r0, [pc, #36]	; (80091a4 <DRV_moveForwardRight+0x7c>)
 800917e:	f000 fbb1 	bl	80098e4 <MTR_setSpeed>
  }

  return;
 8009182:	bf00      	nop
 8009184:	bf00      	nop
}
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	0800b4e0 	.word	0x0800b4e0
 8009190:	200000d5 	.word	0x200000d5
 8009194:	200001bc 	.word	0x200001bc
 8009198:	20000204 	.word	0x20000204
 800919c:	200000d4 	.word	0x200000d4
 80091a0:	20000198 	.word	0x20000198
 80091a4:	200001e0 	.word	0x200001e0

080091a8 <DRV_moveForwardLeft>:

static void DRV_moveForwardLeft  (uint32_t p_speed)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward-left @%u", l_speed);
 80091b4:	68fa      	ldr	r2, [r7, #12]
 80091b6:	4915      	ldr	r1, [pc, #84]	; (800920c <DRV_moveForwardLeft+0x64>)
 80091b8:	2000      	movs	r0, #0
 80091ba:	f000 fac7 	bl	800974c <LOG_log>

  g_DRV_isActive = true;
 80091be:	4b14      	ldr	r3, [pc, #80]	; (8009210 <DRV_moveForwardLeft+0x68>)
 80091c0:	2201      	movs	r2, #1
 80091c2:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD);
 80091c4:	2100      	movs	r1, #0
 80091c6:	4813      	ldr	r0, [pc, #76]	; (8009214 <DRV_moveForwardLeft+0x6c>)
 80091c8:	f000 fb48 	bl	800985c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD);
 80091cc:	2100      	movs	r1, #0
 80091ce:	4812      	ldr	r0, [pc, #72]	; (8009218 <DRV_moveForwardLeft+0x70>)
 80091d0:	f000 fb44 	bl	800985c <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 80091d4:	4b11      	ldr	r3, [pc, #68]	; (800921c <DRV_moveForwardLeft+0x74>)
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	f083 0301 	eor.w	r3, r3, #1
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d110      	bne.n	8009204 <DRV_moveForwardLeft+0x5c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 80091e2:	68f9      	ldr	r1, [r7, #12]
 80091e4:	480b      	ldr	r0, [pc, #44]	; (8009214 <DRV_moveForwardLeft+0x6c>)
 80091e6:	f000 fb7d 	bl	80098e4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft ,       0);
 80091ea:	2100      	movs	r1, #0
 80091ec:	480c      	ldr	r0, [pc, #48]	; (8009220 <DRV_moveForwardLeft+0x78>)
 80091ee:	f000 fb79 	bl	80098e4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight ,       0);
 80091f2:	2100      	movs	r1, #0
 80091f4:	480b      	ldr	r0, [pc, #44]	; (8009224 <DRV_moveForwardLeft+0x7c>)
 80091f6:	f000 fb75 	bl	80098e4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 80091fa:	68f9      	ldr	r1, [r7, #12]
 80091fc:	4806      	ldr	r0, [pc, #24]	; (8009218 <DRV_moveForwardLeft+0x70>)
 80091fe:	f000 fb71 	bl	80098e4 <MTR_setSpeed>
  }

  return;
 8009202:	bf00      	nop
 8009204:	bf00      	nop
}
 8009206:	3710      	adds	r7, #16
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}
 800920c:	0800b4fc 	.word	0x0800b4fc
 8009210:	200000d5 	.word	0x200000d5
 8009214:	20000198 	.word	0x20000198
 8009218:	200001e0 	.word	0x200001e0
 800921c:	200000d4 	.word	0x200000d4
 8009220:	200001bc 	.word	0x200001bc
 8009224:	20000204 	.word	0x20000204

08009228 <DRV_moveBackwardRight>:

static void DRV_moveBackwardRight(uint32_t p_speed)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b084      	sub	sp, #16
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward-right @%u", l_speed);
 8009234:	68fa      	ldr	r2, [r7, #12]
 8009236:	4915      	ldr	r1, [pc, #84]	; (800928c <DRV_moveBackwardRight+0x64>)
 8009238:	2000      	movs	r0, #0
 800923a:	f000 fa87 	bl	800974c <LOG_log>

  g_DRV_isActive = true;
 800923e:	4b14      	ldr	r3, [pc, #80]	; (8009290 <DRV_moveBackwardRight+0x68>)
 8009240:	2201      	movs	r2, #1
 8009242:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 8009244:	2101      	movs	r1, #1
 8009246:	4813      	ldr	r0, [pc, #76]	; (8009294 <DRV_moveBackwardRight+0x6c>)
 8009248:	f000 fb08 	bl	800985c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 800924c:	2101      	movs	r1, #1
 800924e:	4812      	ldr	r0, [pc, #72]	; (8009298 <DRV_moveBackwardRight+0x70>)
 8009250:	f000 fb04 	bl	800985c <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009254:	4b11      	ldr	r3, [pc, #68]	; (800929c <DRV_moveBackwardRight+0x74>)
 8009256:	781b      	ldrb	r3, [r3, #0]
 8009258:	f083 0301 	eor.w	r3, r3, #1
 800925c:	b2db      	uxtb	r3, r3
 800925e:	2b00      	cmp	r3, #0
 8009260:	d110      	bne.n	8009284 <DRV_moveBackwardRight+0x5c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 8009262:	68f9      	ldr	r1, [r7, #12]
 8009264:	480b      	ldr	r0, [pc, #44]	; (8009294 <DRV_moveBackwardRight+0x6c>)
 8009266:	f000 fb3d 	bl	80098e4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft ,       0);
 800926a:	2100      	movs	r1, #0
 800926c:	480c      	ldr	r0, [pc, #48]	; (80092a0 <DRV_moveBackwardRight+0x78>)
 800926e:	f000 fb39 	bl	80098e4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight ,       0);
 8009272:	2100      	movs	r1, #0
 8009274:	480b      	ldr	r0, [pc, #44]	; (80092a4 <DRV_moveBackwardRight+0x7c>)
 8009276:	f000 fb35 	bl	80098e4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800927a:	68f9      	ldr	r1, [r7, #12]
 800927c:	4806      	ldr	r0, [pc, #24]	; (8009298 <DRV_moveBackwardRight+0x70>)
 800927e:	f000 fb31 	bl	80098e4 <MTR_setSpeed>
  }

  return;
 8009282:	bf00      	nop
 8009284:	bf00      	nop
}
 8009286:	3710      	adds	r7, #16
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}
 800928c:	0800b514 	.word	0x0800b514
 8009290:	200000d5 	.word	0x200000d5
 8009294:	20000198 	.word	0x20000198
 8009298:	200001e0 	.word	0x200001e0
 800929c:	200000d4 	.word	0x200000d4
 80092a0:	200001bc 	.word	0x200001bc
 80092a4:	20000204 	.word	0x20000204

080092a8 <DRV_moveBackwardLeft>:

static void DRV_moveBackwardLeft (uint32_t p_speed)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward-left @%u", l_speed);
 80092b4:	68fa      	ldr	r2, [r7, #12]
 80092b6:	4915      	ldr	r1, [pc, #84]	; (800930c <DRV_moveBackwardLeft+0x64>)
 80092b8:	2000      	movs	r0, #0
 80092ba:	f000 fa47 	bl	800974c <LOG_log>

  g_DRV_isActive = true;
 80092be:	4b14      	ldr	r3, [pc, #80]	; (8009310 <DRV_moveBackwardLeft+0x68>)
 80092c0:	2201      	movs	r2, #1
 80092c2:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontLeft, MTR_DIRECTION_BACKWARD);
 80092c4:	2101      	movs	r1, #1
 80092c6:	4813      	ldr	r0, [pc, #76]	; (8009314 <DRV_moveBackwardLeft+0x6c>)
 80092c8:	f000 fac8 	bl	800985c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight, MTR_DIRECTION_BACKWARD);
 80092cc:	2101      	movs	r1, #1
 80092ce:	4812      	ldr	r0, [pc, #72]	; (8009318 <DRV_moveBackwardLeft+0x70>)
 80092d0:	f000 fac4 	bl	800985c <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 80092d4:	4b11      	ldr	r3, [pc, #68]	; (800931c <DRV_moveBackwardLeft+0x74>)
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	f083 0301 	eor.w	r3, r3, #1
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d110      	bne.n	8009304 <DRV_moveBackwardLeft+0x5c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight,       0);
 80092e2:	2100      	movs	r1, #0
 80092e4:	480e      	ldr	r0, [pc, #56]	; (8009320 <DRV_moveBackwardLeft+0x78>)
 80092e6:	f000 fafd 	bl	80098e4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 80092ea:	68f9      	ldr	r1, [r7, #12]
 80092ec:	4809      	ldr	r0, [pc, #36]	; (8009314 <DRV_moveBackwardLeft+0x6c>)
 80092ee:	f000 faf9 	bl	80098e4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 80092f2:	68f9      	ldr	r1, [r7, #12]
 80092f4:	4808      	ldr	r0, [pc, #32]	; (8009318 <DRV_moveBackwardLeft+0x70>)
 80092f6:	f000 faf5 	bl	80098e4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  ,       0);
 80092fa:	2100      	movs	r1, #0
 80092fc:	4809      	ldr	r0, [pc, #36]	; (8009324 <DRV_moveBackwardLeft+0x7c>)
 80092fe:	f000 faf1 	bl	80098e4 <MTR_setSpeed>
  }

  return;
 8009302:	bf00      	nop
 8009304:	bf00      	nop
}
 8009306:	3710      	adds	r7, #16
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}
 800930c:	0800b530 	.word	0x0800b530
 8009310:	200000d5 	.word	0x200000d5
 8009314:	200001bc 	.word	0x200001bc
 8009318:	20000204 	.word	0x20000204
 800931c:	200000d4 	.word	0x200000d4
 8009320:	20000198 	.word	0x20000198
 8009324:	200001e0 	.word	0x200001e0

08009328 <DRV_turnLeft>:

static void DRV_turnLeft(uint32_t p_speed)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	60fb      	str	r3, [r7, #12]

  LOG_debug("Turning left @%u", l_speed);
 8009334:	68fa      	ldr	r2, [r7, #12]
 8009336:	4919      	ldr	r1, [pc, #100]	; (800939c <DRV_turnLeft+0x74>)
 8009338:	2000      	movs	r0, #0
 800933a:	f000 fa07 	bl	800974c <LOG_log>

  g_DRV_isActive = true;
 800933e:	4b18      	ldr	r3, [pc, #96]	; (80093a0 <DRV_turnLeft+0x78>)
 8009340:	2201      	movs	r2, #1
 8009342:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD );
 8009344:	2100      	movs	r1, #0
 8009346:	4817      	ldr	r0, [pc, #92]	; (80093a4 <DRV_turnLeft+0x7c>)
 8009348:	f000 fa88 	bl	800985c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 800934c:	2101      	movs	r1, #1
 800934e:	4816      	ldr	r0, [pc, #88]	; (80093a8 <DRV_turnLeft+0x80>)
 8009350:	f000 fa84 	bl	800985c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD );
 8009354:	2100      	movs	r1, #0
 8009356:	4815      	ldr	r0, [pc, #84]	; (80093ac <DRV_turnLeft+0x84>)
 8009358:	f000 fa80 	bl	800985c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 800935c:	2101      	movs	r1, #1
 800935e:	4814      	ldr	r0, [pc, #80]	; (80093b0 <DRV_turnLeft+0x88>)
 8009360:	f000 fa7c 	bl	800985c <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009364:	4b13      	ldr	r3, [pc, #76]	; (80093b4 <DRV_turnLeft+0x8c>)
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	f083 0301 	eor.w	r3, r3, #1
 800936c:	b2db      	uxtb	r3, r3
 800936e:	2b00      	cmp	r3, #0
 8009370:	d110      	bne.n	8009394 <DRV_turnLeft+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 8009372:	68f9      	ldr	r1, [r7, #12]
 8009374:	480b      	ldr	r0, [pc, #44]	; (80093a4 <DRV_turnLeft+0x7c>)
 8009376:	f000 fab5 	bl	80098e4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800937a:	68f9      	ldr	r1, [r7, #12]
 800937c:	480a      	ldr	r0, [pc, #40]	; (80093a8 <DRV_turnLeft+0x80>)
 800937e:	f000 fab1 	bl	80098e4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 8009382:	68f9      	ldr	r1, [r7, #12]
 8009384:	4809      	ldr	r0, [pc, #36]	; (80093ac <DRV_turnLeft+0x84>)
 8009386:	f000 faad 	bl	80098e4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800938a:	68f9      	ldr	r1, [r7, #12]
 800938c:	4808      	ldr	r0, [pc, #32]	; (80093b0 <DRV_turnLeft+0x88>)
 800938e:	f000 faa9 	bl	80098e4 <MTR_setSpeed>
  }

  return;
 8009392:	bf00      	nop
 8009394:	bf00      	nop
}
 8009396:	3710      	adds	r7, #16
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}
 800939c:	0800b54c 	.word	0x0800b54c
 80093a0:	200000d5 	.word	0x200000d5
 80093a4:	20000198 	.word	0x20000198
 80093a8:	200001bc 	.word	0x200001bc
 80093ac:	20000204 	.word	0x20000204
 80093b0:	200001e0 	.word	0x200001e0
 80093b4:	200000d4 	.word	0x200000d4

080093b8 <DRV_turnRight>:

static void DRV_turnRight(uint32_t p_speed)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	60fb      	str	r3, [r7, #12]

  LOG_debug("Turning right @%u", l_speed);
 80093c4:	68fa      	ldr	r2, [r7, #12]
 80093c6:	4919      	ldr	r1, [pc, #100]	; (800942c <DRV_turnRight+0x74>)
 80093c8:	2000      	movs	r0, #0
 80093ca:	f000 f9bf 	bl	800974c <LOG_log>

  g_DRV_isActive = true;
 80093ce:	4b18      	ldr	r3, [pc, #96]	; (8009430 <DRV_turnRight+0x78>)
 80093d0:	2201      	movs	r2, #1
 80093d2:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 80093d4:	2101      	movs	r1, #1
 80093d6:	4817      	ldr	r0, [pc, #92]	; (8009434 <DRV_turnRight+0x7c>)
 80093d8:	f000 fa40 	bl	800985c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD );
 80093dc:	2100      	movs	r1, #0
 80093de:	4816      	ldr	r0, [pc, #88]	; (8009438 <DRV_turnRight+0x80>)
 80093e0:	f000 fa3c 	bl	800985c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 80093e4:	2101      	movs	r1, #1
 80093e6:	4815      	ldr	r0, [pc, #84]	; (800943c <DRV_turnRight+0x84>)
 80093e8:	f000 fa38 	bl	800985c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD );
 80093ec:	2100      	movs	r1, #0
 80093ee:	4814      	ldr	r0, [pc, #80]	; (8009440 <DRV_turnRight+0x88>)
 80093f0:	f000 fa34 	bl	800985c <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 80093f4:	4b13      	ldr	r3, [pc, #76]	; (8009444 <DRV_turnRight+0x8c>)
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	f083 0301 	eor.w	r3, r3, #1
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d110      	bne.n	8009424 <DRV_turnRight+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 8009402:	68f9      	ldr	r1, [r7, #12]
 8009404:	480b      	ldr	r0, [pc, #44]	; (8009434 <DRV_turnRight+0x7c>)
 8009406:	f000 fa6d 	bl	80098e4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800940a:	68f9      	ldr	r1, [r7, #12]
 800940c:	480a      	ldr	r0, [pc, #40]	; (8009438 <DRV_turnRight+0x80>)
 800940e:	f000 fa69 	bl	80098e4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 8009412:	68f9      	ldr	r1, [r7, #12]
 8009414:	4809      	ldr	r0, [pc, #36]	; (800943c <DRV_turnRight+0x84>)
 8009416:	f000 fa65 	bl	80098e4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800941a:	68f9      	ldr	r1, [r7, #12]
 800941c:	4808      	ldr	r0, [pc, #32]	; (8009440 <DRV_turnRight+0x88>)
 800941e:	f000 fa61 	bl	80098e4 <MTR_setSpeed>
  }

  return;
 8009422:	bf00      	nop
 8009424:	bf00      	nop
}
 8009426:	3710      	adds	r7, #16
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}
 800942c:	0800b560 	.word	0x0800b560
 8009430:	200000d5 	.word	0x200000d5
 8009434:	20000198 	.word	0x20000198
 8009438:	200001bc 	.word	0x200001bc
 800943c:	20000204 	.word	0x20000204
 8009440:	200001e0 	.word	0x200001e0
 8009444:	200000d4 	.word	0x200000d4

08009448 <DRV_translateLeft>:

static void DRV_translateLeft(uint32_t p_speed)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	60fb      	str	r3, [r7, #12]

  LOG_debug("Translating left @%u", l_speed);
 8009454:	68fa      	ldr	r2, [r7, #12]
 8009456:	4919      	ldr	r1, [pc, #100]	; (80094bc <DRV_translateLeft+0x74>)
 8009458:	2000      	movs	r0, #0
 800945a:	f000 f977 	bl	800974c <LOG_log>

  g_DRV_isActive = true;
 800945e:	4b18      	ldr	r3, [pc, #96]	; (80094c0 <DRV_translateLeft+0x78>)
 8009460:	2201      	movs	r2, #1
 8009462:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD );
 8009464:	2100      	movs	r1, #0
 8009466:	4817      	ldr	r0, [pc, #92]	; (80094c4 <DRV_translateLeft+0x7c>)
 8009468:	f000 f9f8 	bl	800985c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 800946c:	2101      	movs	r1, #1
 800946e:	4816      	ldr	r0, [pc, #88]	; (80094c8 <DRV_translateLeft+0x80>)
 8009470:	f000 f9f4 	bl	800985c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 8009474:	2101      	movs	r1, #1
 8009476:	4815      	ldr	r0, [pc, #84]	; (80094cc <DRV_translateLeft+0x84>)
 8009478:	f000 f9f0 	bl	800985c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD );
 800947c:	2100      	movs	r1, #0
 800947e:	4814      	ldr	r0, [pc, #80]	; (80094d0 <DRV_translateLeft+0x88>)
 8009480:	f000 f9ec 	bl	800985c <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009484:	4b13      	ldr	r3, [pc, #76]	; (80094d4 <DRV_translateLeft+0x8c>)
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	f083 0301 	eor.w	r3, r3, #1
 800948c:	b2db      	uxtb	r3, r3
 800948e:	2b00      	cmp	r3, #0
 8009490:	d110      	bne.n	80094b4 <DRV_translateLeft+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 8009492:	68f9      	ldr	r1, [r7, #12]
 8009494:	480b      	ldr	r0, [pc, #44]	; (80094c4 <DRV_translateLeft+0x7c>)
 8009496:	f000 fa25 	bl	80098e4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800949a:	68f9      	ldr	r1, [r7, #12]
 800949c:	480a      	ldr	r0, [pc, #40]	; (80094c8 <DRV_translateLeft+0x80>)
 800949e:	f000 fa21 	bl	80098e4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 80094a2:	68f9      	ldr	r1, [r7, #12]
 80094a4:	4809      	ldr	r0, [pc, #36]	; (80094cc <DRV_translateLeft+0x84>)
 80094a6:	f000 fa1d 	bl	80098e4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 80094aa:	68f9      	ldr	r1, [r7, #12]
 80094ac:	4808      	ldr	r0, [pc, #32]	; (80094d0 <DRV_translateLeft+0x88>)
 80094ae:	f000 fa19 	bl	80098e4 <MTR_setSpeed>
  }

  return;
 80094b2:	bf00      	nop
 80094b4:	bf00      	nop
}
 80094b6:	3710      	adds	r7, #16
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	0800b574 	.word	0x0800b574
 80094c0:	200000d5 	.word	0x200000d5
 80094c4:	20000198 	.word	0x20000198
 80094c8:	200001bc 	.word	0x200001bc
 80094cc:	20000204 	.word	0x20000204
 80094d0:	200001e0 	.word	0x200001e0
 80094d4:	200000d4 	.word	0x200000d4

080094d8 <DRV_translateRight>:

static void DRV_translateRight(uint32_t p_speed)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	60fb      	str	r3, [r7, #12]

  LOG_debug("Translating right @%u", l_speed);
 80094e4:	68fa      	ldr	r2, [r7, #12]
 80094e6:	4919      	ldr	r1, [pc, #100]	; (800954c <DRV_translateRight+0x74>)
 80094e8:	2000      	movs	r0, #0
 80094ea:	f000 f92f 	bl	800974c <LOG_log>

  g_DRV_isActive = true;
 80094ee:	4b18      	ldr	r3, [pc, #96]	; (8009550 <DRV_translateRight+0x78>)
 80094f0:	2201      	movs	r2, #1
 80094f2:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 80094f4:	2101      	movs	r1, #1
 80094f6:	4817      	ldr	r0, [pc, #92]	; (8009554 <DRV_translateRight+0x7c>)
 80094f8:	f000 f9b0 	bl	800985c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD );
 80094fc:	2100      	movs	r1, #0
 80094fe:	4816      	ldr	r0, [pc, #88]	; (8009558 <DRV_translateRight+0x80>)
 8009500:	f000 f9ac 	bl	800985c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD );
 8009504:	2100      	movs	r1, #0
 8009506:	4815      	ldr	r0, [pc, #84]	; (800955c <DRV_translateRight+0x84>)
 8009508:	f000 f9a8 	bl	800985c <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 800950c:	2101      	movs	r1, #1
 800950e:	4814      	ldr	r0, [pc, #80]	; (8009560 <DRV_translateRight+0x88>)
 8009510:	f000 f9a4 	bl	800985c <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009514:	4b13      	ldr	r3, [pc, #76]	; (8009564 <DRV_translateRight+0x8c>)
 8009516:	781b      	ldrb	r3, [r3, #0]
 8009518:	f083 0301 	eor.w	r3, r3, #1
 800951c:	b2db      	uxtb	r3, r3
 800951e:	2b00      	cmp	r3, #0
 8009520:	d110      	bne.n	8009544 <DRV_translateRight+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 8009522:	68f9      	ldr	r1, [r7, #12]
 8009524:	480b      	ldr	r0, [pc, #44]	; (8009554 <DRV_translateRight+0x7c>)
 8009526:	f000 f9dd 	bl	80098e4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 800952a:	68f9      	ldr	r1, [r7, #12]
 800952c:	480a      	ldr	r0, [pc, #40]	; (8009558 <DRV_translateRight+0x80>)
 800952e:	f000 f9d9 	bl	80098e4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 8009532:	68f9      	ldr	r1, [r7, #12]
 8009534:	4809      	ldr	r0, [pc, #36]	; (800955c <DRV_translateRight+0x84>)
 8009536:	f000 f9d5 	bl	80098e4 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 800953a:	68f9      	ldr	r1, [r7, #12]
 800953c:	4808      	ldr	r0, [pc, #32]	; (8009560 <DRV_translateRight+0x88>)
 800953e:	f000 f9d1 	bl	80098e4 <MTR_setSpeed>
  }

  return;
 8009542:	bf00      	nop
 8009544:	bf00      	nop
}
 8009546:	3710      	adds	r7, #16
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	0800b58c 	.word	0x0800b58c
 8009550:	200000d5 	.word	0x200000d5
 8009554:	20000198 	.word	0x20000198
 8009558:	200001bc 	.word	0x200001bc
 800955c:	20000204 	.word	0x20000204
 8009560:	200001e0 	.word	0x200001e0
 8009564:	200000d4 	.word	0x200000d4

08009568 <ENC_init>:
#include "encoder.h"

#include "log.h"

void ENC_init(T_ENC_Handle *p_handle, char *p_name, bool p_invertOnUpdate, TIM_HandleTypeDef *p_encoderTimerHandle)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b084      	sub	sp, #16
 800956c:	af00      	add	r7, sp, #0
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	60b9      	str	r1, [r7, #8]
 8009572:	603b      	str	r3, [r7, #0]
 8009574:	4613      	mov	r3, r2
 8009576:	71fb      	strb	r3, [r7, #7]
  LOG_info("Initializing Encoder module for %s", p_name);
 8009578:	68ba      	ldr	r2, [r7, #8]
 800957a:	490a      	ldr	r1, [pc, #40]	; (80095a4 <ENC_init+0x3c>)
 800957c:	2001      	movs	r0, #1
 800957e:	f000 f8e5 	bl	800974c <LOG_log>

  p_handle->name           = p_name;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	68ba      	ldr	r2, [r7, #8]
 8009586:	601a      	str	r2, [r3, #0]
  p_handle->invertOnUpdate = p_invertOnUpdate;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	79fa      	ldrb	r2, [r7, #7]
 800958c:	719a      	strb	r2, [r3, #6]
  p_handle->timerHandle    = p_encoderTimerHandle;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	683a      	ldr	r2, [r7, #0]
 8009592:	609a      	str	r2, [r3, #8]

  ENC_reset(p_handle);
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	f000 f807 	bl	80095a8 <ENC_reset>

  return;
 800959a:	bf00      	nop
}
 800959c:	3710      	adds	r7, #16
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	0800b5a4 	.word	0x0800b5a4

080095a8 <ENC_reset>:

void ENC_reset(T_ENC_Handle *p_handle)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  p_handle->value = 0;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	809a      	strh	r2, [r3, #4]

  return;
 80095b6:	bf00      	nop
}
 80095b8:	370c      	adds	r7, #12
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bc80      	pop	{r7}
 80095be:	4770      	bx	lr

080095c0 <ENC_update>:

void ENC_update(T_ENC_Handle *p_handle, int16_t p_value)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	460b      	mov	r3, r1
 80095ca:	807b      	strh	r3, [r7, #2]
  if (p_handle->invertOnUpdate == false)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	799b      	ldrb	r3, [r3, #6]
 80095d0:	f083 0301 	eor.w	r3, r3, #1
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d003      	beq.n	80095e2 <ENC_update+0x22>
  {
    p_handle->value = p_value;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	887a      	ldrh	r2, [r7, #2]
 80095de:	809a      	strh	r2, [r3, #4]
  else
  {
    p_handle->value = -p_value;
  }

  return;
 80095e0:	e006      	b.n	80095f0 <ENC_update+0x30>
    p_handle->value = -p_value;
 80095e2:	887b      	ldrh	r3, [r7, #2]
 80095e4:	425b      	negs	r3, r3
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	b21a      	sxth	r2, r3
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	809a      	strh	r2, [r3, #4]
  return;
 80095ee:	bf00      	nop
}
 80095f0:	370c      	adds	r7, #12
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bc80      	pop	{r7}
 80095f6:	4770      	bx	lr

080095f8 <ENC_getCount>:

int16_t ENC_getCount(T_ENC_Handle *p_handle)
{
 80095f8:	b480      	push	{r7}
 80095fa:	b083      	sub	sp, #12
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  return p_handle->value;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 8009606:	4618      	mov	r0, r3
 8009608:	370c      	adds	r7, #12
 800960a:	46bd      	mov	sp, r7
 800960c:	bc80      	pop	{r7}
 800960e:	4770      	bx	lr

08009610 <LED_setMode>:
#include "log.h"

static T_LED_MODE g_LED_mode = LED_MODE_BLINK_SLOW;

void LED_setMode(T_LED_MODE p_mode)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	4603      	mov	r3, r0
 8009618:	71fb      	strb	r3, [r7, #7]
  LOG_info("Setting LED mode to %u", p_mode);
 800961a:	79fb      	ldrb	r3, [r7, #7]
 800961c:	461a      	mov	r2, r3
 800961e:	4905      	ldr	r1, [pc, #20]	; (8009634 <LED_setMode+0x24>)
 8009620:	2001      	movs	r0, #1
 8009622:	f000 f893 	bl	800974c <LOG_log>

  g_LED_mode = p_mode;
 8009626:	4a04      	ldr	r2, [pc, #16]	; (8009638 <LED_setMode+0x28>)
 8009628:	79fb      	ldrb	r3, [r7, #7]
 800962a:	7013      	strb	r3, [r2, #0]

  return;
 800962c:	bf00      	nop
}
 800962e:	3708      	adds	r7, #8
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}
 8009634:	0800b5c8 	.word	0x0800b5c8
 8009638:	20000009 	.word	0x20000009

0800963c <LED_getMode>:

T_LED_MODE LED_getMode(void)
{
 800963c:	b480      	push	{r7}
 800963e:	af00      	add	r7, sp, #0
  return g_LED_mode;
 8009640:	4b02      	ldr	r3, [pc, #8]	; (800964c <LED_getMode+0x10>)
 8009642:	781b      	ldrb	r3, [r3, #0]
}
 8009644:	4618      	mov	r0, r3
 8009646:	46bd      	mov	sp, r7
 8009648:	bc80      	pop	{r7}
 800964a:	4770      	bx	lr
 800964c:	20000009 	.word	0x20000009

08009650 <LED_update>:

void LED_update(void)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	af00      	add	r7, sp, #0
  static uint32_t l_blinkCounter = 0;

  switch (g_LED_mode)
 8009654:	4b2a      	ldr	r3, [pc, #168]	; (8009700 <LED_update+0xb0>)
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	2b04      	cmp	r3, #4
 800965a:	d849      	bhi.n	80096f0 <LED_update+0xa0>
 800965c:	a201      	add	r2, pc, #4	; (adr r2, 8009664 <LED_update+0x14>)
 800965e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009662:	bf00      	nop
 8009664:	08009679 	.word	0x08009679
 8009668:	08009687 	.word	0x08009687
 800966c:	08009695 	.word	0x08009695
 8009670:	080096c3 	.word	0x080096c3
 8009674:	080096e5 	.word	0x080096e5
  {
    case LED_MODE_FORCED_OFF:
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 8009678:	2201      	movs	r2, #1
 800967a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800967e:	4821      	ldr	r0, [pc, #132]	; (8009704 <LED_update+0xb4>)
 8009680:	f7f9 ff30 	bl	80034e4 <HAL_GPIO_WritePin>
      break;
 8009684:	e039      	b.n	80096fa <LED_update+0xaa>

    case LED_MODE_FORCED_ON:
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8009686:	2200      	movs	r2, #0
 8009688:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800968c:	481d      	ldr	r0, [pc, #116]	; (8009704 <LED_update+0xb4>)
 800968e:	f7f9 ff29 	bl	80034e4 <HAL_GPIO_WritePin>
      break;
 8009692:	e032      	b.n	80096fa <LED_update+0xaa>

    case LED_MODE_BLINK_SLOW:
      l_blinkCounter++;
 8009694:	4b1c      	ldr	r3, [pc, #112]	; (8009708 <LED_update+0xb8>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	3301      	adds	r3, #1
 800969a:	4a1b      	ldr	r2, [pc, #108]	; (8009708 <LED_update+0xb8>)
 800969c:	6013      	str	r3, [r2, #0]
      if (l_blinkCounter % 5 == 0)
 800969e:	4b1a      	ldr	r3, [pc, #104]	; (8009708 <LED_update+0xb8>)
 80096a0:	6819      	ldr	r1, [r3, #0]
 80096a2:	4b1a      	ldr	r3, [pc, #104]	; (800970c <LED_update+0xbc>)
 80096a4:	fba3 2301 	umull	r2, r3, r3, r1
 80096a8:	089a      	lsrs	r2, r3, #2
 80096aa:	4613      	mov	r3, r2
 80096ac:	009b      	lsls	r3, r3, #2
 80096ae:	4413      	add	r3, r2
 80096b0:	1aca      	subs	r2, r1, r3
 80096b2:	2a00      	cmp	r2, #0
 80096b4:	d11e      	bne.n	80096f4 <LED_update+0xa4>
      {
        HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 80096b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80096ba:	4812      	ldr	r0, [pc, #72]	; (8009704 <LED_update+0xb4>)
 80096bc:	f7f9 ff44 	bl	8003548 <HAL_GPIO_TogglePin>
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 80096c0:	e018      	b.n	80096f4 <LED_update+0xa4>

    case LED_MODE_BLINK_FAST:
      l_blinkCounter++;
 80096c2:	4b11      	ldr	r3, [pc, #68]	; (8009708 <LED_update+0xb8>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	3301      	adds	r3, #1
 80096c8:	4a0f      	ldr	r2, [pc, #60]	; (8009708 <LED_update+0xb8>)
 80096ca:	6013      	str	r3, [r2, #0]
      if (l_blinkCounter % 2 == 0)
 80096cc:	4b0e      	ldr	r3, [pc, #56]	; (8009708 <LED_update+0xb8>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f003 0301 	and.w	r3, r3, #1
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d10f      	bne.n	80096f8 <LED_update+0xa8>
      {
        HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 80096d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80096dc:	4809      	ldr	r0, [pc, #36]	; (8009704 <LED_update+0xb4>)
 80096de:	f7f9 ff33 	bl	8003548 <HAL_GPIO_TogglePin>
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 80096e2:	e009      	b.n	80096f8 <LED_update+0xa8>

    case LED_MODE_BATTERY_LOW:
      HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 80096e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80096e8:	4806      	ldr	r0, [pc, #24]	; (8009704 <LED_update+0xb4>)
 80096ea:	f7f9 ff2d 	bl	8003548 <HAL_GPIO_TogglePin>
      break;
 80096ee:	e004      	b.n	80096fa <LED_update+0xaa>

    default:
      ; /* Nothing to do */
      break;
 80096f0:	bf00      	nop
 80096f2:	e002      	b.n	80096fa <LED_update+0xaa>
      break;
 80096f4:	bf00      	nop
 80096f6:	e000      	b.n	80096fa <LED_update+0xaa>
      break;
 80096f8:	bf00      	nop
  }

  return;
 80096fa:	bf00      	nop
}
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	20000009 	.word	0x20000009
 8009704:	40011000 	.word	0x40011000
 8009708:	20000258 	.word	0x20000258
 800970c:	cccccccd 	.word	0xcccccccd

08009710 <LOG_init>:
{
  "DEBUG", "INFO", "WARNING", "ERROR"
};

void LOG_init(RTC_HandleTypeDef *p_rctHandle)
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  g_LOG_rtcHandle = p_rctHandle;
 8009718:	4a03      	ldr	r2, [pc, #12]	; (8009728 <LOG_init+0x18>)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6013      	str	r3, [r2, #0]

  return;
 800971e:	bf00      	nop
}
 8009720:	370c      	adds	r7, #12
 8009722:	46bd      	mov	sp, r7
 8009724:	bc80      	pop	{r7}
 8009726:	4770      	bx	lr
 8009728:	20000260 	.word	0x20000260

0800972c <LOG_setLevel>:

void LOG_setLevel(T_LOG_LEVEL p_level)
{
 800972c:	b480      	push	{r7}
 800972e:	b083      	sub	sp, #12
 8009730:	af00      	add	r7, sp, #0
 8009732:	4603      	mov	r3, r0
 8009734:	71fb      	strb	r3, [r7, #7]
  g_LOG_level = p_level;
 8009736:	79fb      	ldrb	r3, [r7, #7]
 8009738:	4a03      	ldr	r2, [pc, #12]	; (8009748 <LOG_setLevel+0x1c>)
 800973a:	6013      	str	r3, [r2, #0]

  return;
 800973c:	bf00      	nop
}
 800973e:	370c      	adds	r7, #12
 8009740:	46bd      	mov	sp, r7
 8009742:	bc80      	pop	{r7}
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	2000025c 	.word	0x2000025c

0800974c <LOG_log>:

void LOG_log(T_LOG_LEVEL p_level, const char *p_format, ...)
{
 800974c:	b40e      	push	{r1, r2, r3}
 800974e:	b580      	push	{r7, lr}
 8009750:	b089      	sub	sp, #36	; 0x24
 8009752:	af02      	add	r7, sp, #8
 8009754:	4603      	mov	r3, r0
 8009756:	71fb      	strb	r3, [r7, #7]
  va_list         l_argumentsList;
  RTC_TimeTypeDef l_time;
  RTC_DateTypeDef l_date;

  if (p_level >= g_LOG_level)
 8009758:	79fa      	ldrb	r2, [r7, #7]
 800975a:	4b1a      	ldr	r3, [pc, #104]	; (80097c4 <LOG_log+0x78>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	429a      	cmp	r2, r3
 8009760:	d328      	bcc.n	80097b4 <LOG_log+0x68>
  {
    HAL_RTC_GetTime(g_LOG_rtcHandle, &l_time, RTC_FORMAT_BCD);
 8009762:	4b19      	ldr	r3, [pc, #100]	; (80097c8 <LOG_log+0x7c>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f107 0110 	add.w	r1, r7, #16
 800976a:	2201      	movs	r2, #1
 800976c:	4618      	mov	r0, r3
 800976e:	f7fb f89b 	bl	80048a8 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(g_LOG_rtcHandle, &l_date, RTC_FORMAT_BCD);
 8009772:	4b15      	ldr	r3, [pc, #84]	; (80097c8 <LOG_log+0x7c>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f107 010c 	add.w	r1, r7, #12
 800977a:	2201      	movs	r2, #1
 800977c:	4618      	mov	r0, r3
 800977e:	f7fb fa97 	bl	8004cb0 <HAL_RTC_GetDate>

    va_start(l_argumentsList, p_format);
 8009782:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009786:	617b      	str	r3, [r7, #20]

    (void)printf("%-7s - %02x:%02x:%02x - ", g_LOG_levelStrings[p_level], l_time.Hours, l_time.Minutes, l_time.Seconds);
 8009788:	79fb      	ldrb	r3, [r7, #7]
 800978a:	4a10      	ldr	r2, [pc, #64]	; (80097cc <LOG_log+0x80>)
 800978c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009790:	7c3b      	ldrb	r3, [r7, #16]
 8009792:	461a      	mov	r2, r3
 8009794:	7c7b      	ldrb	r3, [r7, #17]
 8009796:	4618      	mov	r0, r3
 8009798:	7cbb      	ldrb	r3, [r7, #18]
 800979a:	9300      	str	r3, [sp, #0]
 800979c:	4603      	mov	r3, r0
 800979e:	480c      	ldr	r0, [pc, #48]	; (80097d0 <LOG_log+0x84>)
 80097a0:	f000 fa90 	bl	8009cc4 <iprintf>
    (void)vprintf(p_format, l_argumentsList);
 80097a4:	6979      	ldr	r1, [r7, #20]
 80097a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80097a8:	f000 fb1a 	bl	8009de0 <viprintf>
    (void)printf("\r\n");
 80097ac:	4809      	ldr	r0, [pc, #36]	; (80097d4 <LOG_log+0x88>)
 80097ae:	f000 fb0f 	bl	8009dd0 <puts>
  else
  {
    ; /* Nothing to do */
  }

  return;
 80097b2:	bf00      	nop
 80097b4:	bf00      	nop
}
 80097b6:	371c      	adds	r7, #28
 80097b8:	46bd      	mov	sp, r7
 80097ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80097be:	b003      	add	sp, #12
 80097c0:	4770      	bx	lr
 80097c2:	bf00      	nop
 80097c4:	2000025c 	.word	0x2000025c
 80097c8:	20000260 	.word	0x20000260
 80097cc:	2000000c 	.word	0x2000000c
 80097d0:	0800b600 	.word	0x0800b600
 80097d4:	0800b61c 	.word	0x0800b61c

080097d8 <MAS_receiveData>:
#include "stm32f1xx_hal.h"

static uint8_t g_MAS_rxBuffer[12] = {0};

void MAS_receiveData(UART_HandleTypeDef *p_huart)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(p_huart, g_MAS_rxBuffer, 1);
 80097e0:	2201      	movs	r2, #1
 80097e2:	4904      	ldr	r1, [pc, #16]	; (80097f4 <MAS_receiveData+0x1c>)
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f7fe f909 	bl	80079fc <HAL_UART_Receive_IT>

  return;
 80097ea:	bf00      	nop
}
 80097ec:	3708      	adds	r7, #8
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	20000264 	.word	0x20000264

080097f8 <MTR_init>:
              uint32_t           p_dirPin1,
              GPIO_TypeDef      *p_dirPin2Port,
              uint32_t           p_dirPin2,
              TIM_HandleTypeDef *p_pwmTimerHandle,
              uint32_t           p_pwmChannel)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	60f8      	str	r0, [r7, #12]
 8009800:	60b9      	str	r1, [r7, #8]
 8009802:	607a      	str	r2, [r7, #4]
 8009804:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing Motor module for %s", p_name);
 8009806:	68ba      	ldr	r2, [r7, #8]
 8009808:	4913      	ldr	r1, [pc, #76]	; (8009858 <MTR_init+0x60>)
 800980a:	2001      	movs	r0, #1
 800980c:	f7ff ff9e 	bl	800974c <LOG_log>

  p_handle->name           = p_name;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	68ba      	ldr	r2, [r7, #8]
 8009814:	601a      	str	r2, [r3, #0]
  p_handle->dirPin1Port    = p_dirPin1Port;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	605a      	str	r2, [r3, #4]
  p_handle->dirPin1        = p_dirPin1;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	683a      	ldr	r2, [r7, #0]
 8009820:	609a      	str	r2, [r3, #8]
  p_handle->dirPin2Port    = p_dirPin2Port;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	69ba      	ldr	r2, [r7, #24]
 8009826:	60da      	str	r2, [r3, #12]
  p_handle->dirPin2        = p_dirPin2;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	69fa      	ldr	r2, [r7, #28]
 800982c:	611a      	str	r2, [r3, #16]
  p_handle->pwmTimerHandle = p_pwmTimerHandle;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	6a3a      	ldr	r2, [r7, #32]
 8009832:	61da      	str	r2, [r3, #28]
  p_handle->pwmChannel     = p_pwmChannel;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009838:	621a      	str	r2, [r3, #32]

  MTR_setDirection(p_handle, MTR_DIRECTION_FORWARD);
 800983a:	2100      	movs	r1, #0
 800983c:	68f8      	ldr	r0, [r7, #12]
 800983e:	f000 f80d 	bl	800985c <MTR_setDirection>
  MTR_setSpeed    (p_handle, 0                    );
 8009842:	2100      	movs	r1, #0
 8009844:	68f8      	ldr	r0, [r7, #12]
 8009846:	f000 f84d 	bl	80098e4 <MTR_setSpeed>
  MTR_stop        (p_handle                       );
 800984a:	68f8      	ldr	r0, [r7, #12]
 800984c:	f000 f8a0 	bl	8009990 <MTR_stop>

  return;
 8009850:	bf00      	nop
}
 8009852:	3710      	adds	r7, #16
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}
 8009858:	0800b620 	.word	0x0800b620

0800985c <MTR_setDirection>:

void MTR_setDirection(T_MTR_Handle *p_handle, T_MTR_DIRECTION p_direction)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b082      	sub	sp, #8
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	460b      	mov	r3, r1
 8009866:	70fb      	strb	r3, [r7, #3]
  if (p_direction == p_handle->direction)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	7d1b      	ldrb	r3, [r3, #20]
 800986c:	78fa      	ldrb	r2, [r7, #3]
 800986e:	429a      	cmp	r2, r3
 8009870:	d032      	beq.n	80098d8 <MTR_setDirection+0x7c>
  {
    ; /* Nothing to do */
  }
  else
  {
    LOG_debug("Setting  %s motor direction to %u", p_handle->name, p_direction);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	78fb      	ldrb	r3, [r7, #3]
 8009878:	4919      	ldr	r1, [pc, #100]	; (80098e0 <MTR_setDirection+0x84>)
 800987a:	2000      	movs	r0, #0
 800987c:	f7ff ff66 	bl	800974c <LOG_log>

    if (p_direction == MTR_DIRECTION_FORWARD)
 8009880:	78fb      	ldrb	r3, [r7, #3]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d112      	bne.n	80098ac <MTR_setDirection+0x50>
    {
      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_RESET);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6858      	ldr	r0, [r3, #4]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	b29b      	uxth	r3, r3
 8009890:	2200      	movs	r2, #0
 8009892:	4619      	mov	r1, r3
 8009894:	f7f9 fe26 	bl	80034e4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_SET  );
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	68d8      	ldr	r0, [r3, #12]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	691b      	ldr	r3, [r3, #16]
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	2201      	movs	r2, #1
 80098a4:	4619      	mov	r1, r3
 80098a6:	f7f9 fe1d 	bl	80034e4 <HAL_GPIO_WritePin>
 80098aa:	e011      	b.n	80098d0 <MTR_setDirection+0x74>
    }
    else
    {
      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_SET  );
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6858      	ldr	r0, [r3, #4]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	2201      	movs	r2, #1
 80098b8:	4619      	mov	r1, r3
 80098ba:	f7f9 fe13 	bl	80034e4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_RESET);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	68d8      	ldr	r0, [r3, #12]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	691b      	ldr	r3, [r3, #16]
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	2200      	movs	r2, #0
 80098ca:	4619      	mov	r1, r3
 80098cc:	f7f9 fe0a 	bl	80034e4 <HAL_GPIO_WritePin>
    }

    p_handle->direction = p_direction;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	78fa      	ldrb	r2, [r7, #3]
 80098d4:	751a      	strb	r2, [r3, #20]
  }

  return;
 80098d6:	bf00      	nop
 80098d8:	bf00      	nop
}
 80098da:	3708      	adds	r7, #8
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	0800b644 	.word	0x0800b644

080098e4 <MTR_setSpeed>:

void MTR_setSpeed(T_MTR_Handle *p_handle, uint32_t p_speed)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	6039      	str	r1, [r7, #0]
  if (p_speed == p_handle->speed)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	699b      	ldr	r3, [r3, #24]
 80098f2:	683a      	ldr	r2, [r7, #0]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d02d      	beq.n	8009954 <MTR_setSpeed+0x70>
  {
    ; /* Nothing to do */
  }
  else
  {
    LOG_debug("Setting  %s motor p_speed to %u", p_handle->name, p_speed);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	4917      	ldr	r1, [pc, #92]	; (800995c <MTR_setSpeed+0x78>)
 8009900:	2000      	movs	r0, #0
 8009902:	f7ff ff23 	bl	800974c <LOG_log>

    __HAL_TIM_SET_COMPARE(p_handle->pwmTimerHandle, p_handle->pwmChannel, p_speed);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6a1b      	ldr	r3, [r3, #32]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d105      	bne.n	800991a <MTR_setSpeed+0x36>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	69db      	ldr	r3, [r3, #28]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	683a      	ldr	r2, [r7, #0]
 8009916:	635a      	str	r2, [r3, #52]	; 0x34
 8009918:	e018      	b.n	800994c <MTR_setSpeed+0x68>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a1b      	ldr	r3, [r3, #32]
 800991e:	2b04      	cmp	r3, #4
 8009920:	d105      	bne.n	800992e <MTR_setSpeed+0x4a>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	69db      	ldr	r3, [r3, #28]
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	6393      	str	r3, [r2, #56]	; 0x38
 800992c:	e00e      	b.n	800994c <MTR_setSpeed+0x68>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6a1b      	ldr	r3, [r3, #32]
 8009932:	2b08      	cmp	r3, #8
 8009934:	d105      	bne.n	8009942 <MTR_setSpeed+0x5e>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	69db      	ldr	r3, [r3, #28]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8009940:	e004      	b.n	800994c <MTR_setSpeed+0x68>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	69db      	ldr	r3, [r3, #28]
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	6413      	str	r3, [r2, #64]	; 0x40

    p_handle->speed = p_speed;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	683a      	ldr	r2, [r7, #0]
 8009950:	619a      	str	r2, [r3, #24]
  }

  return;
 8009952:	bf00      	nop
 8009954:	bf00      	nop
}
 8009956:	3708      	adds	r7, #8
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}
 800995c:	0800b668 	.word	0x0800b668

08009960 <MTR_start>:

void MTR_start(T_MTR_Handle *p_handle)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  LOG_info("Starting %s motor", p_handle->name);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	461a      	mov	r2, r3
 800996e:	4907      	ldr	r1, [pc, #28]	; (800998c <MTR_start+0x2c>)
 8009970:	2001      	movs	r0, #1
 8009972:	f7ff feeb 	bl	800974c <LOG_log>

  MTR_setDirection(p_handle, p_handle->direction);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	7d1b      	ldrb	r3, [r3, #20]
 800997a:	4619      	mov	r1, r3
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f7ff ff6d 	bl	800985c <MTR_setDirection>

  return;
 8009982:	bf00      	nop
}
 8009984:	3708      	adds	r7, #8
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	0800b688 	.word	0x0800b688

08009990 <MTR_stop>:

void MTR_stop(T_MTR_Handle *p_handle)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  LOG_info("Stopping %s", p_handle->name);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	461a      	mov	r2, r3
 800999e:	490d      	ldr	r1, [pc, #52]	; (80099d4 <MTR_stop+0x44>)
 80099a0:	2001      	movs	r0, #1
 80099a2:	f7ff fed3 	bl	800974c <LOG_log>

  HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_RESET);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6858      	ldr	r0, [r3, #4]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	689b      	ldr	r3, [r3, #8]
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	2200      	movs	r2, #0
 80099b2:	4619      	mov	r1, r3
 80099b4:	f7f9 fd96 	bl	80034e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_RESET);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	68d8      	ldr	r0, [r3, #12]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	691b      	ldr	r3, [r3, #16]
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	2200      	movs	r2, #0
 80099c4:	4619      	mov	r1, r3
 80099c6:	f7f9 fd8d 	bl	80034e4 <HAL_GPIO_WritePin>

  return;
 80099ca:	bf00      	nop
}
 80099cc:	3708      	adds	r7, #8
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	0800b69c 	.word	0x0800b69c

080099d8 <PID_init>:

#include "utils.h"
#include "log.h"

void PID_init(T_PID_Handle *p_handle, int32_t p_kp, int32_t p_ki, int32_t p_kd, int32_t p_targetValue, int32_t p_minValue, int32_t p_maxValue, int32_t p_antiWindUpFactor)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	60f8      	str	r0, [r7, #12]
 80099e0:	60b9      	str	r1, [r7, #8]
 80099e2:	607a      	str	r2, [r7, #4]
 80099e4:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing PID");
 80099e6:	4919      	ldr	r1, [pc, #100]	; (8009a4c <PID_init+0x74>)
 80099e8:	2001      	movs	r0, #1
 80099ea:	f7ff feaf 	bl	800974c <LOG_log>

  p_handle->kp              = p_kp;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	68ba      	ldr	r2, [r7, #8]
 80099f2:	601a      	str	r2, [r3, #0]
  p_handle->ki              = p_ki;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	605a      	str	r2, [r3, #4]
  p_handle->kd              = p_kd;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	683a      	ldr	r2, [r7, #0]
 80099fe:	609a      	str	r2, [r3, #8]
  p_handle->targetValue     = p_targetValue;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	69ba      	ldr	r2, [r7, #24]
 8009a04:	60da      	str	r2, [r3, #12]
  p_handle->minValue        = p_minValue;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	69fa      	ldr	r2, [r7, #28]
 8009a0a:	611a      	str	r2, [r3, #16]
  p_handle->maxValue        = p_maxValue;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	6a3a      	ldr	r2, [r7, #32]
 8009a10:	615a      	str	r2, [r3, #20]
  p_handle->antiWindUpValue = p_antiWindUpFactor * UTI_MAX(abs(p_handle->minValue), abs(p_handle->maxValue));
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	695b      	ldr	r3, [r3, #20]
 8009a16:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8009a1a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	691b      	ldr	r3, [r3, #16]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	bfb8      	it	lt
 8009a26:	425b      	neglt	r3, r3
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	bfb8      	it	lt
 8009a2c:	4613      	movlt	r3, r2
 8009a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a30:	fb02 f203 	mul.w	r2, r2, r3
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	619a      	str	r2, [r3, #24]

  PID_reset  (p_handle);
 8009a38:	68f8      	ldr	r0, [r7, #12]
 8009a3a:	f000 f809 	bl	8009a50 <PID_reset>
  PID_logInfo(p_handle);
 8009a3e:	68f8      	ldr	r0, [r7, #12]
 8009a40:	f000 f87e 	bl	8009b40 <PID_logInfo>

  return;
 8009a44:	bf00      	nop
}
 8009a46:	3710      	adds	r7, #16
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	0800b6a8 	.word	0x0800b6a8

08009a50 <PID_reset>:

void PID_reset(T_PID_Handle *p_handle)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b083      	sub	sp, #12
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  p_handle->pValue        = 0;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	61da      	str	r2, [r3, #28]
  p_handle->iValue        = 0;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	621a      	str	r2, [r3, #32]
  p_handle->dValue        = 0;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	625a      	str	r2, [r3, #36]	; 0x24
  p_handle->computedValue = 0;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	629a      	str	r2, [r3, #40]	; 0x28
  p_handle->lastError     = 0;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	62da      	str	r2, [r3, #44]	; 0x2c

  return;
 8009a76:	bf00      	nop
}
 8009a78:	370c      	adds	r7, #12
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bc80      	pop	{r7}
 8009a7e:	4770      	bx	lr

08009a80 <PID_update>:
{
  return p_handle->antiWindUpValue;
}

int32_t PID_update(T_PID_Handle *p_handle, int32_t p_currentValue, uint32_t p_timeDelta)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b088      	sub	sp, #32
 8009a84:	af02      	add	r7, sp, #8
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	607a      	str	r2, [r7, #4]
  int32_t l_currentError;

  l_currentError = p_handle->targetValue - p_currentValue;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	68da      	ldr	r2, [r3, #12]
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	1ad3      	subs	r3, r2, r3
 8009a94:	617b      	str	r3, [r7, #20]

  p_handle->pValue    =  l_currentError;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	697a      	ldr	r2, [r7, #20]
 8009a9a:	61da      	str	r2, [r3, #28]
  p_handle->iValue   +=  l_currentError * p_timeDelta;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6a1b      	ldr	r3, [r3, #32]
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	fb02 f303 	mul.w	r3, r2, r3
 8009aaa:	440b      	add	r3, r1
 8009aac:	461a      	mov	r2, r3
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	621a      	str	r2, [r3, #32]
  p_handle->iValue    =  UTI_clampIntValue(p_handle->iValue, -p_handle->antiWindUpValue, p_handle->antiWindUpValue, false, 0);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	6a18      	ldr	r0, [r3, #32]
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	699b      	ldr	r3, [r3, #24]
 8009aba:	4259      	negs	r1, r3
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	699a      	ldr	r2, [r3, #24]
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	9300      	str	r3, [sp, #0]
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	f000 f8a5 	bl	8009c14 <UTI_clampIntValue>
 8009aca:	4602      	mov	r2, r0
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	621a      	str	r2, [r3, #32]
  p_handle->dValue    = (l_currentError - p_handle->lastError) / p_timeDelta;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad4:	697a      	ldr	r2, [r7, #20]
 8009ad6:	1ad3      	subs	r3, r2, r3
 8009ad8:	461a      	mov	r2, r3
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	625a      	str	r2, [r3, #36]	; 0x24
  p_handle->lastError =  l_currentError;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	697a      	ldr	r2, [r7, #20]
 8009aea:	62da      	str	r2, [r3, #44]	; 0x2c

  p_handle->computedValue = p_handle->kp * p_handle->pValue + p_handle->ki * p_handle->iValue + p_handle->kd * p_handle->dValue;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	68fa      	ldr	r2, [r7, #12]
 8009af2:	69d2      	ldr	r2, [r2, #28]
 8009af4:	fb02 f203 	mul.w	r2, r2, r3
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	68f9      	ldr	r1, [r7, #12]
 8009afe:	6a09      	ldr	r1, [r1, #32]
 8009b00:	fb01 f303 	mul.w	r3, r1, r3
 8009b04:	441a      	add	r2, r3
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	68f9      	ldr	r1, [r7, #12]
 8009b0c:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8009b0e:	fb01 f303 	mul.w	r3, r1, r3
 8009b12:	441a      	add	r2, r3
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	629a      	str	r2, [r3, #40]	; 0x28
  p_handle->computedValue = UTI_clampIntValue(p_handle->computedValue, p_handle->minValue, p_handle->maxValue, false, 0);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6919      	ldr	r1, [r3, #16]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	695a      	ldr	r2, [r3, #20]
 8009b24:	2300      	movs	r3, #0
 8009b26:	9300      	str	r3, [sp, #0]
 8009b28:	2300      	movs	r3, #0
 8009b2a:	f000 f873 	bl	8009c14 <UTI_clampIntValue>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	629a      	str	r2, [r3, #40]	; 0x28

  return p_currentValue;
 8009b34:	68bb      	ldr	r3, [r7, #8]
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3718      	adds	r7, #24
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}
	...

08009b40 <PID_logInfo>:

void PID_logInfo(T_PID_Handle *p_handle)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af02      	add	r7, sp, #8
 8009b46:	6078      	str	r0, [r7, #4]
  LOG_info(" kp = %6.2f -  ki = %6.2f -     kd = %6.2f", p_handle->kp         , p_handle->ki      , p_handle->kd             );
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6859      	ldr	r1, [r3, #4]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	9300      	str	r3, [sp, #0]
 8009b56:	460b      	mov	r3, r1
 8009b58:	4913      	ldr	r1, [pc, #76]	; (8009ba8 <PID_logInfo+0x68>)
 8009b5a:	2001      	movs	r0, #1
 8009b5c:	f7ff fdf6 	bl	800974c <LOG_log>
  LOG_info("  p = %6.2f -   i = %6.2f -      d = %6.2f", p_handle->pValue     , p_handle->iValue  , p_handle->dValue         );
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	69da      	ldr	r2, [r3, #28]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6a19      	ldr	r1, [r3, #32]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b6c:	9300      	str	r3, [sp, #0]
 8009b6e:	460b      	mov	r3, r1
 8009b70:	490e      	ldr	r1, [pc, #56]	; (8009bac <PID_logInfo+0x6c>)
 8009b72:	2001      	movs	r0, #1
 8009b74:	f7ff fdea 	bl	800974c <LOG_log>
  LOG_info("min = %6.1f - max = %6.1f - a.w.up = %6.1f", p_handle->minValue   , p_handle->maxValue, p_handle->antiWindUpValue);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	691a      	ldr	r2, [r3, #16]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	6959      	ldr	r1, [r3, #20]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	699b      	ldr	r3, [r3, #24]
 8009b84:	9300      	str	r3, [sp, #0]
 8009b86:	460b      	mov	r3, r1
 8009b88:	4909      	ldr	r1, [pc, #36]	; (8009bb0 <PID_logInfo+0x70>)
 8009b8a:	2001      	movs	r0, #1
 8009b8c:	f7ff fdde 	bl	800974c <LOG_log>
  LOG_info("  t = %6.2f - val = %6.2f                 ", p_handle->targetValue, p_handle->computedValue                      );
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	68da      	ldr	r2, [r3, #12]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b98:	4906      	ldr	r1, [pc, #24]	; (8009bb4 <PID_logInfo+0x74>)
 8009b9a:	2001      	movs	r0, #1
 8009b9c:	f7ff fdd6 	bl	800974c <LOG_log>

  return;
 8009ba0:	bf00      	nop
}
 8009ba2:	3708      	adds	r7, #8
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	0800b6bc 	.word	0x0800b6bc
 8009bac:	0800b6e8 	.word	0x0800b6e8
 8009bb0:	0800b714 	.word	0x0800b714
 8009bb4:	0800b740 	.word	0x0800b740

08009bb8 <UTI_init>:
#include "log.h"

static TIM_HandleTypeDef *g_UTI_delayTimerHandle;

void UTI_init(TIM_HandleTypeDef *p_delayTimerHandle)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing utilities");
 8009bc0:	4905      	ldr	r1, [pc, #20]	; (8009bd8 <UTI_init+0x20>)
 8009bc2:	2001      	movs	r0, #1
 8009bc4:	f7ff fdc2 	bl	800974c <LOG_log>

  g_UTI_delayTimerHandle = p_delayTimerHandle;
 8009bc8:	4a04      	ldr	r2, [pc, #16]	; (8009bdc <UTI_init+0x24>)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6013      	str	r3, [r2, #0]

  return;
 8009bce:	bf00      	nop
}
 8009bd0:	3708      	adds	r7, #8
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	0800b76c 	.word	0x0800b76c
 8009bdc:	20000270 	.word	0x20000270

08009be0 <UTI_delayUs>:

void UTI_delayUs(uint16_t p_delay)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b083      	sub	sp, #12
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	4603      	mov	r3, r0
 8009be8:	80fb      	strh	r3, [r7, #6]
  /* Reset the micro-seconds counter */
  __HAL_TIM_SET_COUNTER(g_UTI_delayTimerHandle, 0);
 8009bea:	4b09      	ldr	r3, [pc, #36]	; (8009c10 <UTI_delayUs+0x30>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Wait for the counter to reach the input micro-seconds number */
  while (__HAL_TIM_GET_COUNTER(g_UTI_delayTimerHandle) < p_delay)
 8009bf4:	bf00      	nop
 8009bf6:	4b06      	ldr	r3, [pc, #24]	; (8009c10 <UTI_delayUs+0x30>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009bfe:	88fb      	ldrh	r3, [r7, #6]
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d3f8      	bcc.n	8009bf6 <UTI_delayUs+0x16>
  {
    ; /* Nothing to do */
  }

  return;
 8009c04:	bf00      	nop
}
 8009c06:	370c      	adds	r7, #12
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bc80      	pop	{r7}
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop
 8009c10:	20000270 	.word	0x20000270

08009c14 <UTI_clampIntValue>:

int32_t UTI_clampIntValue(int32_t p_value, int32_t p_minValue, int32_t p_maxValue, bool p_clampToNearest, int32_t p_clampValue)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b087      	sub	sp, #28
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	607a      	str	r2, [r7, #4]
 8009c20:	70fb      	strb	r3, [r7, #3]
  int32_t l_returnValue;

  if (p_value < p_minValue)
 8009c22:	68fa      	ldr	r2, [r7, #12]
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	429a      	cmp	r2, r3
 8009c28:	da08      	bge.n	8009c3c <UTI_clampIntValue+0x28>
  {
    if (p_clampToNearest == true)
 8009c2a:	78fb      	ldrb	r3, [r7, #3]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d002      	beq.n	8009c36 <UTI_clampIntValue+0x22>
    {
      l_returnValue = p_minValue;
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	617b      	str	r3, [r7, #20]
 8009c34:	e00e      	b.n	8009c54 <UTI_clampIntValue+0x40>
    }
    else
    {
      l_returnValue = p_clampValue;
 8009c36:	6a3b      	ldr	r3, [r7, #32]
 8009c38:	617b      	str	r3, [r7, #20]
 8009c3a:	e00b      	b.n	8009c54 <UTI_clampIntValue+0x40>
    }
  }
  else if (p_value > p_maxValue)
 8009c3c:	68fa      	ldr	r2, [r7, #12]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	dd07      	ble.n	8009c54 <UTI_clampIntValue+0x40>
  {
    if (p_clampToNearest == true)
 8009c44:	78fb      	ldrb	r3, [r7, #3]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d002      	beq.n	8009c50 <UTI_clampIntValue+0x3c>
    {
      l_returnValue = p_maxValue;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	617b      	str	r3, [r7, #20]
 8009c4e:	e001      	b.n	8009c54 <UTI_clampIntValue+0x40>
    }
    else
    {
      l_returnValue = p_clampValue;
 8009c50:	6a3b      	ldr	r3, [r7, #32]
 8009c52:	617b      	str	r3, [r7, #20]
  else
  {
    ; /* Nothing to do */
  }

  return l_returnValue;
 8009c54:	697b      	ldr	r3, [r7, #20]
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	371c      	adds	r7, #28
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bc80      	pop	{r7}
 8009c5e:	4770      	bx	lr

08009c60 <__errno>:
 8009c60:	4b01      	ldr	r3, [pc, #4]	; (8009c68 <__errno+0x8>)
 8009c62:	6818      	ldr	r0, [r3, #0]
 8009c64:	4770      	bx	lr
 8009c66:	bf00      	nop
 8009c68:	2000001c 	.word	0x2000001c

08009c6c <__libc_init_array>:
 8009c6c:	b570      	push	{r4, r5, r6, lr}
 8009c6e:	2600      	movs	r6, #0
 8009c70:	4d0c      	ldr	r5, [pc, #48]	; (8009ca4 <__libc_init_array+0x38>)
 8009c72:	4c0d      	ldr	r4, [pc, #52]	; (8009ca8 <__libc_init_array+0x3c>)
 8009c74:	1b64      	subs	r4, r4, r5
 8009c76:	10a4      	asrs	r4, r4, #2
 8009c78:	42a6      	cmp	r6, r4
 8009c7a:	d109      	bne.n	8009c90 <__libc_init_array+0x24>
 8009c7c:	f001 f80e 	bl	800ac9c <_init>
 8009c80:	2600      	movs	r6, #0
 8009c82:	4d0a      	ldr	r5, [pc, #40]	; (8009cac <__libc_init_array+0x40>)
 8009c84:	4c0a      	ldr	r4, [pc, #40]	; (8009cb0 <__libc_init_array+0x44>)
 8009c86:	1b64      	subs	r4, r4, r5
 8009c88:	10a4      	asrs	r4, r4, #2
 8009c8a:	42a6      	cmp	r6, r4
 8009c8c:	d105      	bne.n	8009c9a <__libc_init_array+0x2e>
 8009c8e:	bd70      	pop	{r4, r5, r6, pc}
 8009c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c94:	4798      	blx	r3
 8009c96:	3601      	adds	r6, #1
 8009c98:	e7ee      	b.n	8009c78 <__libc_init_array+0xc>
 8009c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c9e:	4798      	blx	r3
 8009ca0:	3601      	adds	r6, #1
 8009ca2:	e7f2      	b.n	8009c8a <__libc_init_array+0x1e>
 8009ca4:	0800b834 	.word	0x0800b834
 8009ca8:	0800b834 	.word	0x0800b834
 8009cac:	0800b834 	.word	0x0800b834
 8009cb0:	0800b838 	.word	0x0800b838

08009cb4 <memset>:
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	4402      	add	r2, r0
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d100      	bne.n	8009cbe <memset+0xa>
 8009cbc:	4770      	bx	lr
 8009cbe:	f803 1b01 	strb.w	r1, [r3], #1
 8009cc2:	e7f9      	b.n	8009cb8 <memset+0x4>

08009cc4 <iprintf>:
 8009cc4:	b40f      	push	{r0, r1, r2, r3}
 8009cc6:	4b0a      	ldr	r3, [pc, #40]	; (8009cf0 <iprintf+0x2c>)
 8009cc8:	b513      	push	{r0, r1, r4, lr}
 8009cca:	681c      	ldr	r4, [r3, #0]
 8009ccc:	b124      	cbz	r4, 8009cd8 <iprintf+0x14>
 8009cce:	69a3      	ldr	r3, [r4, #24]
 8009cd0:	b913      	cbnz	r3, 8009cd8 <iprintf+0x14>
 8009cd2:	4620      	mov	r0, r4
 8009cd4:	f000 fa74 	bl	800a1c0 <__sinit>
 8009cd8:	ab05      	add	r3, sp, #20
 8009cda:	4620      	mov	r0, r4
 8009cdc:	9a04      	ldr	r2, [sp, #16]
 8009cde:	68a1      	ldr	r1, [r4, #8]
 8009ce0:	9301      	str	r3, [sp, #4]
 8009ce2:	f000 fc3f 	bl	800a564 <_vfiprintf_r>
 8009ce6:	b002      	add	sp, #8
 8009ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cec:	b004      	add	sp, #16
 8009cee:	4770      	bx	lr
 8009cf0:	2000001c 	.word	0x2000001c

08009cf4 <_puts_r>:
 8009cf4:	b570      	push	{r4, r5, r6, lr}
 8009cf6:	460e      	mov	r6, r1
 8009cf8:	4605      	mov	r5, r0
 8009cfa:	b118      	cbz	r0, 8009d04 <_puts_r+0x10>
 8009cfc:	6983      	ldr	r3, [r0, #24]
 8009cfe:	b90b      	cbnz	r3, 8009d04 <_puts_r+0x10>
 8009d00:	f000 fa5e 	bl	800a1c0 <__sinit>
 8009d04:	69ab      	ldr	r3, [r5, #24]
 8009d06:	68ac      	ldr	r4, [r5, #8]
 8009d08:	b913      	cbnz	r3, 8009d10 <_puts_r+0x1c>
 8009d0a:	4628      	mov	r0, r5
 8009d0c:	f000 fa58 	bl	800a1c0 <__sinit>
 8009d10:	4b2c      	ldr	r3, [pc, #176]	; (8009dc4 <_puts_r+0xd0>)
 8009d12:	429c      	cmp	r4, r3
 8009d14:	d120      	bne.n	8009d58 <_puts_r+0x64>
 8009d16:	686c      	ldr	r4, [r5, #4]
 8009d18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d1a:	07db      	lsls	r3, r3, #31
 8009d1c:	d405      	bmi.n	8009d2a <_puts_r+0x36>
 8009d1e:	89a3      	ldrh	r3, [r4, #12]
 8009d20:	0598      	lsls	r0, r3, #22
 8009d22:	d402      	bmi.n	8009d2a <_puts_r+0x36>
 8009d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d26:	f000 fae9 	bl	800a2fc <__retarget_lock_acquire_recursive>
 8009d2a:	89a3      	ldrh	r3, [r4, #12]
 8009d2c:	0719      	lsls	r1, r3, #28
 8009d2e:	d51d      	bpl.n	8009d6c <_puts_r+0x78>
 8009d30:	6923      	ldr	r3, [r4, #16]
 8009d32:	b1db      	cbz	r3, 8009d6c <_puts_r+0x78>
 8009d34:	3e01      	subs	r6, #1
 8009d36:	68a3      	ldr	r3, [r4, #8]
 8009d38:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009d3c:	3b01      	subs	r3, #1
 8009d3e:	60a3      	str	r3, [r4, #8]
 8009d40:	bb39      	cbnz	r1, 8009d92 <_puts_r+0x9e>
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	da38      	bge.n	8009db8 <_puts_r+0xc4>
 8009d46:	4622      	mov	r2, r4
 8009d48:	210a      	movs	r1, #10
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	f000 f85e 	bl	8009e0c <__swbuf_r>
 8009d50:	3001      	adds	r0, #1
 8009d52:	d011      	beq.n	8009d78 <_puts_r+0x84>
 8009d54:	250a      	movs	r5, #10
 8009d56:	e011      	b.n	8009d7c <_puts_r+0x88>
 8009d58:	4b1b      	ldr	r3, [pc, #108]	; (8009dc8 <_puts_r+0xd4>)
 8009d5a:	429c      	cmp	r4, r3
 8009d5c:	d101      	bne.n	8009d62 <_puts_r+0x6e>
 8009d5e:	68ac      	ldr	r4, [r5, #8]
 8009d60:	e7da      	b.n	8009d18 <_puts_r+0x24>
 8009d62:	4b1a      	ldr	r3, [pc, #104]	; (8009dcc <_puts_r+0xd8>)
 8009d64:	429c      	cmp	r4, r3
 8009d66:	bf08      	it	eq
 8009d68:	68ec      	ldreq	r4, [r5, #12]
 8009d6a:	e7d5      	b.n	8009d18 <_puts_r+0x24>
 8009d6c:	4621      	mov	r1, r4
 8009d6e:	4628      	mov	r0, r5
 8009d70:	f000 f89e 	bl	8009eb0 <__swsetup_r>
 8009d74:	2800      	cmp	r0, #0
 8009d76:	d0dd      	beq.n	8009d34 <_puts_r+0x40>
 8009d78:	f04f 35ff 	mov.w	r5, #4294967295
 8009d7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d7e:	07da      	lsls	r2, r3, #31
 8009d80:	d405      	bmi.n	8009d8e <_puts_r+0x9a>
 8009d82:	89a3      	ldrh	r3, [r4, #12]
 8009d84:	059b      	lsls	r3, r3, #22
 8009d86:	d402      	bmi.n	8009d8e <_puts_r+0x9a>
 8009d88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d8a:	f000 fab8 	bl	800a2fe <__retarget_lock_release_recursive>
 8009d8e:	4628      	mov	r0, r5
 8009d90:	bd70      	pop	{r4, r5, r6, pc}
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	da04      	bge.n	8009da0 <_puts_r+0xac>
 8009d96:	69a2      	ldr	r2, [r4, #24]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	dc06      	bgt.n	8009daa <_puts_r+0xb6>
 8009d9c:	290a      	cmp	r1, #10
 8009d9e:	d004      	beq.n	8009daa <_puts_r+0xb6>
 8009da0:	6823      	ldr	r3, [r4, #0]
 8009da2:	1c5a      	adds	r2, r3, #1
 8009da4:	6022      	str	r2, [r4, #0]
 8009da6:	7019      	strb	r1, [r3, #0]
 8009da8:	e7c5      	b.n	8009d36 <_puts_r+0x42>
 8009daa:	4622      	mov	r2, r4
 8009dac:	4628      	mov	r0, r5
 8009dae:	f000 f82d 	bl	8009e0c <__swbuf_r>
 8009db2:	3001      	adds	r0, #1
 8009db4:	d1bf      	bne.n	8009d36 <_puts_r+0x42>
 8009db6:	e7df      	b.n	8009d78 <_puts_r+0x84>
 8009db8:	250a      	movs	r5, #10
 8009dba:	6823      	ldr	r3, [r4, #0]
 8009dbc:	1c5a      	adds	r2, r3, #1
 8009dbe:	6022      	str	r2, [r4, #0]
 8009dc0:	701d      	strb	r5, [r3, #0]
 8009dc2:	e7db      	b.n	8009d7c <_puts_r+0x88>
 8009dc4:	0800b7c0 	.word	0x0800b7c0
 8009dc8:	0800b7e0 	.word	0x0800b7e0
 8009dcc:	0800b7a0 	.word	0x0800b7a0

08009dd0 <puts>:
 8009dd0:	4b02      	ldr	r3, [pc, #8]	; (8009ddc <puts+0xc>)
 8009dd2:	4601      	mov	r1, r0
 8009dd4:	6818      	ldr	r0, [r3, #0]
 8009dd6:	f7ff bf8d 	b.w	8009cf4 <_puts_r>
 8009dda:	bf00      	nop
 8009ddc:	2000001c 	.word	0x2000001c

08009de0 <viprintf>:
 8009de0:	4b09      	ldr	r3, [pc, #36]	; (8009e08 <viprintf+0x28>)
 8009de2:	b570      	push	{r4, r5, r6, lr}
 8009de4:	681c      	ldr	r4, [r3, #0]
 8009de6:	4605      	mov	r5, r0
 8009de8:	460e      	mov	r6, r1
 8009dea:	b124      	cbz	r4, 8009df6 <viprintf+0x16>
 8009dec:	69a3      	ldr	r3, [r4, #24]
 8009dee:	b913      	cbnz	r3, 8009df6 <viprintf+0x16>
 8009df0:	4620      	mov	r0, r4
 8009df2:	f000 f9e5 	bl	800a1c0 <__sinit>
 8009df6:	4633      	mov	r3, r6
 8009df8:	462a      	mov	r2, r5
 8009dfa:	4620      	mov	r0, r4
 8009dfc:	68a1      	ldr	r1, [r4, #8]
 8009dfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009e02:	f000 bbaf 	b.w	800a564 <_vfiprintf_r>
 8009e06:	bf00      	nop
 8009e08:	2000001c 	.word	0x2000001c

08009e0c <__swbuf_r>:
 8009e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e0e:	460e      	mov	r6, r1
 8009e10:	4614      	mov	r4, r2
 8009e12:	4605      	mov	r5, r0
 8009e14:	b118      	cbz	r0, 8009e1e <__swbuf_r+0x12>
 8009e16:	6983      	ldr	r3, [r0, #24]
 8009e18:	b90b      	cbnz	r3, 8009e1e <__swbuf_r+0x12>
 8009e1a:	f000 f9d1 	bl	800a1c0 <__sinit>
 8009e1e:	4b21      	ldr	r3, [pc, #132]	; (8009ea4 <__swbuf_r+0x98>)
 8009e20:	429c      	cmp	r4, r3
 8009e22:	d12b      	bne.n	8009e7c <__swbuf_r+0x70>
 8009e24:	686c      	ldr	r4, [r5, #4]
 8009e26:	69a3      	ldr	r3, [r4, #24]
 8009e28:	60a3      	str	r3, [r4, #8]
 8009e2a:	89a3      	ldrh	r3, [r4, #12]
 8009e2c:	071a      	lsls	r2, r3, #28
 8009e2e:	d52f      	bpl.n	8009e90 <__swbuf_r+0x84>
 8009e30:	6923      	ldr	r3, [r4, #16]
 8009e32:	b36b      	cbz	r3, 8009e90 <__swbuf_r+0x84>
 8009e34:	6923      	ldr	r3, [r4, #16]
 8009e36:	6820      	ldr	r0, [r4, #0]
 8009e38:	b2f6      	uxtb	r6, r6
 8009e3a:	1ac0      	subs	r0, r0, r3
 8009e3c:	6963      	ldr	r3, [r4, #20]
 8009e3e:	4637      	mov	r7, r6
 8009e40:	4283      	cmp	r3, r0
 8009e42:	dc04      	bgt.n	8009e4e <__swbuf_r+0x42>
 8009e44:	4621      	mov	r1, r4
 8009e46:	4628      	mov	r0, r5
 8009e48:	f000 f926 	bl	800a098 <_fflush_r>
 8009e4c:	bb30      	cbnz	r0, 8009e9c <__swbuf_r+0x90>
 8009e4e:	68a3      	ldr	r3, [r4, #8]
 8009e50:	3001      	adds	r0, #1
 8009e52:	3b01      	subs	r3, #1
 8009e54:	60a3      	str	r3, [r4, #8]
 8009e56:	6823      	ldr	r3, [r4, #0]
 8009e58:	1c5a      	adds	r2, r3, #1
 8009e5a:	6022      	str	r2, [r4, #0]
 8009e5c:	701e      	strb	r6, [r3, #0]
 8009e5e:	6963      	ldr	r3, [r4, #20]
 8009e60:	4283      	cmp	r3, r0
 8009e62:	d004      	beq.n	8009e6e <__swbuf_r+0x62>
 8009e64:	89a3      	ldrh	r3, [r4, #12]
 8009e66:	07db      	lsls	r3, r3, #31
 8009e68:	d506      	bpl.n	8009e78 <__swbuf_r+0x6c>
 8009e6a:	2e0a      	cmp	r6, #10
 8009e6c:	d104      	bne.n	8009e78 <__swbuf_r+0x6c>
 8009e6e:	4621      	mov	r1, r4
 8009e70:	4628      	mov	r0, r5
 8009e72:	f000 f911 	bl	800a098 <_fflush_r>
 8009e76:	b988      	cbnz	r0, 8009e9c <__swbuf_r+0x90>
 8009e78:	4638      	mov	r0, r7
 8009e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e7c:	4b0a      	ldr	r3, [pc, #40]	; (8009ea8 <__swbuf_r+0x9c>)
 8009e7e:	429c      	cmp	r4, r3
 8009e80:	d101      	bne.n	8009e86 <__swbuf_r+0x7a>
 8009e82:	68ac      	ldr	r4, [r5, #8]
 8009e84:	e7cf      	b.n	8009e26 <__swbuf_r+0x1a>
 8009e86:	4b09      	ldr	r3, [pc, #36]	; (8009eac <__swbuf_r+0xa0>)
 8009e88:	429c      	cmp	r4, r3
 8009e8a:	bf08      	it	eq
 8009e8c:	68ec      	ldreq	r4, [r5, #12]
 8009e8e:	e7ca      	b.n	8009e26 <__swbuf_r+0x1a>
 8009e90:	4621      	mov	r1, r4
 8009e92:	4628      	mov	r0, r5
 8009e94:	f000 f80c 	bl	8009eb0 <__swsetup_r>
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	d0cb      	beq.n	8009e34 <__swbuf_r+0x28>
 8009e9c:	f04f 37ff 	mov.w	r7, #4294967295
 8009ea0:	e7ea      	b.n	8009e78 <__swbuf_r+0x6c>
 8009ea2:	bf00      	nop
 8009ea4:	0800b7c0 	.word	0x0800b7c0
 8009ea8:	0800b7e0 	.word	0x0800b7e0
 8009eac:	0800b7a0 	.word	0x0800b7a0

08009eb0 <__swsetup_r>:
 8009eb0:	4b32      	ldr	r3, [pc, #200]	; (8009f7c <__swsetup_r+0xcc>)
 8009eb2:	b570      	push	{r4, r5, r6, lr}
 8009eb4:	681d      	ldr	r5, [r3, #0]
 8009eb6:	4606      	mov	r6, r0
 8009eb8:	460c      	mov	r4, r1
 8009eba:	b125      	cbz	r5, 8009ec6 <__swsetup_r+0x16>
 8009ebc:	69ab      	ldr	r3, [r5, #24]
 8009ebe:	b913      	cbnz	r3, 8009ec6 <__swsetup_r+0x16>
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	f000 f97d 	bl	800a1c0 <__sinit>
 8009ec6:	4b2e      	ldr	r3, [pc, #184]	; (8009f80 <__swsetup_r+0xd0>)
 8009ec8:	429c      	cmp	r4, r3
 8009eca:	d10f      	bne.n	8009eec <__swsetup_r+0x3c>
 8009ecc:	686c      	ldr	r4, [r5, #4]
 8009ece:	89a3      	ldrh	r3, [r4, #12]
 8009ed0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ed4:	0719      	lsls	r1, r3, #28
 8009ed6:	d42c      	bmi.n	8009f32 <__swsetup_r+0x82>
 8009ed8:	06dd      	lsls	r5, r3, #27
 8009eda:	d411      	bmi.n	8009f00 <__swsetup_r+0x50>
 8009edc:	2309      	movs	r3, #9
 8009ede:	6033      	str	r3, [r6, #0]
 8009ee0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee8:	81a3      	strh	r3, [r4, #12]
 8009eea:	e03e      	b.n	8009f6a <__swsetup_r+0xba>
 8009eec:	4b25      	ldr	r3, [pc, #148]	; (8009f84 <__swsetup_r+0xd4>)
 8009eee:	429c      	cmp	r4, r3
 8009ef0:	d101      	bne.n	8009ef6 <__swsetup_r+0x46>
 8009ef2:	68ac      	ldr	r4, [r5, #8]
 8009ef4:	e7eb      	b.n	8009ece <__swsetup_r+0x1e>
 8009ef6:	4b24      	ldr	r3, [pc, #144]	; (8009f88 <__swsetup_r+0xd8>)
 8009ef8:	429c      	cmp	r4, r3
 8009efa:	bf08      	it	eq
 8009efc:	68ec      	ldreq	r4, [r5, #12]
 8009efe:	e7e6      	b.n	8009ece <__swsetup_r+0x1e>
 8009f00:	0758      	lsls	r0, r3, #29
 8009f02:	d512      	bpl.n	8009f2a <__swsetup_r+0x7a>
 8009f04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f06:	b141      	cbz	r1, 8009f1a <__swsetup_r+0x6a>
 8009f08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f0c:	4299      	cmp	r1, r3
 8009f0e:	d002      	beq.n	8009f16 <__swsetup_r+0x66>
 8009f10:	4630      	mov	r0, r6
 8009f12:	f000 fa59 	bl	800a3c8 <_free_r>
 8009f16:	2300      	movs	r3, #0
 8009f18:	6363      	str	r3, [r4, #52]	; 0x34
 8009f1a:	89a3      	ldrh	r3, [r4, #12]
 8009f1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f20:	81a3      	strh	r3, [r4, #12]
 8009f22:	2300      	movs	r3, #0
 8009f24:	6063      	str	r3, [r4, #4]
 8009f26:	6923      	ldr	r3, [r4, #16]
 8009f28:	6023      	str	r3, [r4, #0]
 8009f2a:	89a3      	ldrh	r3, [r4, #12]
 8009f2c:	f043 0308 	orr.w	r3, r3, #8
 8009f30:	81a3      	strh	r3, [r4, #12]
 8009f32:	6923      	ldr	r3, [r4, #16]
 8009f34:	b94b      	cbnz	r3, 8009f4a <__swsetup_r+0x9a>
 8009f36:	89a3      	ldrh	r3, [r4, #12]
 8009f38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f40:	d003      	beq.n	8009f4a <__swsetup_r+0x9a>
 8009f42:	4621      	mov	r1, r4
 8009f44:	4630      	mov	r0, r6
 8009f46:	f000 f9ff 	bl	800a348 <__smakebuf_r>
 8009f4a:	89a0      	ldrh	r0, [r4, #12]
 8009f4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f50:	f010 0301 	ands.w	r3, r0, #1
 8009f54:	d00a      	beq.n	8009f6c <__swsetup_r+0xbc>
 8009f56:	2300      	movs	r3, #0
 8009f58:	60a3      	str	r3, [r4, #8]
 8009f5a:	6963      	ldr	r3, [r4, #20]
 8009f5c:	425b      	negs	r3, r3
 8009f5e:	61a3      	str	r3, [r4, #24]
 8009f60:	6923      	ldr	r3, [r4, #16]
 8009f62:	b943      	cbnz	r3, 8009f76 <__swsetup_r+0xc6>
 8009f64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f68:	d1ba      	bne.n	8009ee0 <__swsetup_r+0x30>
 8009f6a:	bd70      	pop	{r4, r5, r6, pc}
 8009f6c:	0781      	lsls	r1, r0, #30
 8009f6e:	bf58      	it	pl
 8009f70:	6963      	ldrpl	r3, [r4, #20]
 8009f72:	60a3      	str	r3, [r4, #8]
 8009f74:	e7f4      	b.n	8009f60 <__swsetup_r+0xb0>
 8009f76:	2000      	movs	r0, #0
 8009f78:	e7f7      	b.n	8009f6a <__swsetup_r+0xba>
 8009f7a:	bf00      	nop
 8009f7c:	2000001c 	.word	0x2000001c
 8009f80:	0800b7c0 	.word	0x0800b7c0
 8009f84:	0800b7e0 	.word	0x0800b7e0
 8009f88:	0800b7a0 	.word	0x0800b7a0

08009f8c <__sflush_r>:
 8009f8c:	898a      	ldrh	r2, [r1, #12]
 8009f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f92:	4605      	mov	r5, r0
 8009f94:	0710      	lsls	r0, r2, #28
 8009f96:	460c      	mov	r4, r1
 8009f98:	d458      	bmi.n	800a04c <__sflush_r+0xc0>
 8009f9a:	684b      	ldr	r3, [r1, #4]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	dc05      	bgt.n	8009fac <__sflush_r+0x20>
 8009fa0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	dc02      	bgt.n	8009fac <__sflush_r+0x20>
 8009fa6:	2000      	movs	r0, #0
 8009fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fae:	2e00      	cmp	r6, #0
 8009fb0:	d0f9      	beq.n	8009fa6 <__sflush_r+0x1a>
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009fb8:	682f      	ldr	r7, [r5, #0]
 8009fba:	602b      	str	r3, [r5, #0]
 8009fbc:	d032      	beq.n	800a024 <__sflush_r+0x98>
 8009fbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009fc0:	89a3      	ldrh	r3, [r4, #12]
 8009fc2:	075a      	lsls	r2, r3, #29
 8009fc4:	d505      	bpl.n	8009fd2 <__sflush_r+0x46>
 8009fc6:	6863      	ldr	r3, [r4, #4]
 8009fc8:	1ac0      	subs	r0, r0, r3
 8009fca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009fcc:	b10b      	cbz	r3, 8009fd2 <__sflush_r+0x46>
 8009fce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009fd0:	1ac0      	subs	r0, r0, r3
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fd8:	4628      	mov	r0, r5
 8009fda:	6a21      	ldr	r1, [r4, #32]
 8009fdc:	47b0      	blx	r6
 8009fde:	1c43      	adds	r3, r0, #1
 8009fe0:	89a3      	ldrh	r3, [r4, #12]
 8009fe2:	d106      	bne.n	8009ff2 <__sflush_r+0x66>
 8009fe4:	6829      	ldr	r1, [r5, #0]
 8009fe6:	291d      	cmp	r1, #29
 8009fe8:	d82c      	bhi.n	800a044 <__sflush_r+0xb8>
 8009fea:	4a2a      	ldr	r2, [pc, #168]	; (800a094 <__sflush_r+0x108>)
 8009fec:	40ca      	lsrs	r2, r1
 8009fee:	07d6      	lsls	r6, r2, #31
 8009ff0:	d528      	bpl.n	800a044 <__sflush_r+0xb8>
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	6062      	str	r2, [r4, #4]
 8009ff6:	6922      	ldr	r2, [r4, #16]
 8009ff8:	04d9      	lsls	r1, r3, #19
 8009ffa:	6022      	str	r2, [r4, #0]
 8009ffc:	d504      	bpl.n	800a008 <__sflush_r+0x7c>
 8009ffe:	1c42      	adds	r2, r0, #1
 800a000:	d101      	bne.n	800a006 <__sflush_r+0x7a>
 800a002:	682b      	ldr	r3, [r5, #0]
 800a004:	b903      	cbnz	r3, 800a008 <__sflush_r+0x7c>
 800a006:	6560      	str	r0, [r4, #84]	; 0x54
 800a008:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a00a:	602f      	str	r7, [r5, #0]
 800a00c:	2900      	cmp	r1, #0
 800a00e:	d0ca      	beq.n	8009fa6 <__sflush_r+0x1a>
 800a010:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a014:	4299      	cmp	r1, r3
 800a016:	d002      	beq.n	800a01e <__sflush_r+0x92>
 800a018:	4628      	mov	r0, r5
 800a01a:	f000 f9d5 	bl	800a3c8 <_free_r>
 800a01e:	2000      	movs	r0, #0
 800a020:	6360      	str	r0, [r4, #52]	; 0x34
 800a022:	e7c1      	b.n	8009fa8 <__sflush_r+0x1c>
 800a024:	6a21      	ldr	r1, [r4, #32]
 800a026:	2301      	movs	r3, #1
 800a028:	4628      	mov	r0, r5
 800a02a:	47b0      	blx	r6
 800a02c:	1c41      	adds	r1, r0, #1
 800a02e:	d1c7      	bne.n	8009fc0 <__sflush_r+0x34>
 800a030:	682b      	ldr	r3, [r5, #0]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d0c4      	beq.n	8009fc0 <__sflush_r+0x34>
 800a036:	2b1d      	cmp	r3, #29
 800a038:	d001      	beq.n	800a03e <__sflush_r+0xb2>
 800a03a:	2b16      	cmp	r3, #22
 800a03c:	d101      	bne.n	800a042 <__sflush_r+0xb6>
 800a03e:	602f      	str	r7, [r5, #0]
 800a040:	e7b1      	b.n	8009fa6 <__sflush_r+0x1a>
 800a042:	89a3      	ldrh	r3, [r4, #12]
 800a044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a048:	81a3      	strh	r3, [r4, #12]
 800a04a:	e7ad      	b.n	8009fa8 <__sflush_r+0x1c>
 800a04c:	690f      	ldr	r7, [r1, #16]
 800a04e:	2f00      	cmp	r7, #0
 800a050:	d0a9      	beq.n	8009fa6 <__sflush_r+0x1a>
 800a052:	0793      	lsls	r3, r2, #30
 800a054:	bf18      	it	ne
 800a056:	2300      	movne	r3, #0
 800a058:	680e      	ldr	r6, [r1, #0]
 800a05a:	bf08      	it	eq
 800a05c:	694b      	ldreq	r3, [r1, #20]
 800a05e:	eba6 0807 	sub.w	r8, r6, r7
 800a062:	600f      	str	r7, [r1, #0]
 800a064:	608b      	str	r3, [r1, #8]
 800a066:	f1b8 0f00 	cmp.w	r8, #0
 800a06a:	dd9c      	ble.n	8009fa6 <__sflush_r+0x1a>
 800a06c:	4643      	mov	r3, r8
 800a06e:	463a      	mov	r2, r7
 800a070:	4628      	mov	r0, r5
 800a072:	6a21      	ldr	r1, [r4, #32]
 800a074:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a076:	47b0      	blx	r6
 800a078:	2800      	cmp	r0, #0
 800a07a:	dc06      	bgt.n	800a08a <__sflush_r+0xfe>
 800a07c:	89a3      	ldrh	r3, [r4, #12]
 800a07e:	f04f 30ff 	mov.w	r0, #4294967295
 800a082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a086:	81a3      	strh	r3, [r4, #12]
 800a088:	e78e      	b.n	8009fa8 <__sflush_r+0x1c>
 800a08a:	4407      	add	r7, r0
 800a08c:	eba8 0800 	sub.w	r8, r8, r0
 800a090:	e7e9      	b.n	800a066 <__sflush_r+0xda>
 800a092:	bf00      	nop
 800a094:	20400001 	.word	0x20400001

0800a098 <_fflush_r>:
 800a098:	b538      	push	{r3, r4, r5, lr}
 800a09a:	690b      	ldr	r3, [r1, #16]
 800a09c:	4605      	mov	r5, r0
 800a09e:	460c      	mov	r4, r1
 800a0a0:	b913      	cbnz	r3, 800a0a8 <_fflush_r+0x10>
 800a0a2:	2500      	movs	r5, #0
 800a0a4:	4628      	mov	r0, r5
 800a0a6:	bd38      	pop	{r3, r4, r5, pc}
 800a0a8:	b118      	cbz	r0, 800a0b2 <_fflush_r+0x1a>
 800a0aa:	6983      	ldr	r3, [r0, #24]
 800a0ac:	b90b      	cbnz	r3, 800a0b2 <_fflush_r+0x1a>
 800a0ae:	f000 f887 	bl	800a1c0 <__sinit>
 800a0b2:	4b14      	ldr	r3, [pc, #80]	; (800a104 <_fflush_r+0x6c>)
 800a0b4:	429c      	cmp	r4, r3
 800a0b6:	d11b      	bne.n	800a0f0 <_fflush_r+0x58>
 800a0b8:	686c      	ldr	r4, [r5, #4]
 800a0ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d0ef      	beq.n	800a0a2 <_fflush_r+0xa>
 800a0c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a0c4:	07d0      	lsls	r0, r2, #31
 800a0c6:	d404      	bmi.n	800a0d2 <_fflush_r+0x3a>
 800a0c8:	0599      	lsls	r1, r3, #22
 800a0ca:	d402      	bmi.n	800a0d2 <_fflush_r+0x3a>
 800a0cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0ce:	f000 f915 	bl	800a2fc <__retarget_lock_acquire_recursive>
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	4621      	mov	r1, r4
 800a0d6:	f7ff ff59 	bl	8009f8c <__sflush_r>
 800a0da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0dc:	4605      	mov	r5, r0
 800a0de:	07da      	lsls	r2, r3, #31
 800a0e0:	d4e0      	bmi.n	800a0a4 <_fflush_r+0xc>
 800a0e2:	89a3      	ldrh	r3, [r4, #12]
 800a0e4:	059b      	lsls	r3, r3, #22
 800a0e6:	d4dd      	bmi.n	800a0a4 <_fflush_r+0xc>
 800a0e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0ea:	f000 f908 	bl	800a2fe <__retarget_lock_release_recursive>
 800a0ee:	e7d9      	b.n	800a0a4 <_fflush_r+0xc>
 800a0f0:	4b05      	ldr	r3, [pc, #20]	; (800a108 <_fflush_r+0x70>)
 800a0f2:	429c      	cmp	r4, r3
 800a0f4:	d101      	bne.n	800a0fa <_fflush_r+0x62>
 800a0f6:	68ac      	ldr	r4, [r5, #8]
 800a0f8:	e7df      	b.n	800a0ba <_fflush_r+0x22>
 800a0fa:	4b04      	ldr	r3, [pc, #16]	; (800a10c <_fflush_r+0x74>)
 800a0fc:	429c      	cmp	r4, r3
 800a0fe:	bf08      	it	eq
 800a100:	68ec      	ldreq	r4, [r5, #12]
 800a102:	e7da      	b.n	800a0ba <_fflush_r+0x22>
 800a104:	0800b7c0 	.word	0x0800b7c0
 800a108:	0800b7e0 	.word	0x0800b7e0
 800a10c:	0800b7a0 	.word	0x0800b7a0

0800a110 <std>:
 800a110:	2300      	movs	r3, #0
 800a112:	b510      	push	{r4, lr}
 800a114:	4604      	mov	r4, r0
 800a116:	e9c0 3300 	strd	r3, r3, [r0]
 800a11a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a11e:	6083      	str	r3, [r0, #8]
 800a120:	8181      	strh	r1, [r0, #12]
 800a122:	6643      	str	r3, [r0, #100]	; 0x64
 800a124:	81c2      	strh	r2, [r0, #14]
 800a126:	6183      	str	r3, [r0, #24]
 800a128:	4619      	mov	r1, r3
 800a12a:	2208      	movs	r2, #8
 800a12c:	305c      	adds	r0, #92	; 0x5c
 800a12e:	f7ff fdc1 	bl	8009cb4 <memset>
 800a132:	4b05      	ldr	r3, [pc, #20]	; (800a148 <std+0x38>)
 800a134:	6224      	str	r4, [r4, #32]
 800a136:	6263      	str	r3, [r4, #36]	; 0x24
 800a138:	4b04      	ldr	r3, [pc, #16]	; (800a14c <std+0x3c>)
 800a13a:	62a3      	str	r3, [r4, #40]	; 0x28
 800a13c:	4b04      	ldr	r3, [pc, #16]	; (800a150 <std+0x40>)
 800a13e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a140:	4b04      	ldr	r3, [pc, #16]	; (800a154 <std+0x44>)
 800a142:	6323      	str	r3, [r4, #48]	; 0x30
 800a144:	bd10      	pop	{r4, pc}
 800a146:	bf00      	nop
 800a148:	0800ab11 	.word	0x0800ab11
 800a14c:	0800ab33 	.word	0x0800ab33
 800a150:	0800ab6b 	.word	0x0800ab6b
 800a154:	0800ab8f 	.word	0x0800ab8f

0800a158 <_cleanup_r>:
 800a158:	4901      	ldr	r1, [pc, #4]	; (800a160 <_cleanup_r+0x8>)
 800a15a:	f000 b8af 	b.w	800a2bc <_fwalk_reent>
 800a15e:	bf00      	nop
 800a160:	0800a099 	.word	0x0800a099

0800a164 <__sfmoreglue>:
 800a164:	b570      	push	{r4, r5, r6, lr}
 800a166:	2568      	movs	r5, #104	; 0x68
 800a168:	1e4a      	subs	r2, r1, #1
 800a16a:	4355      	muls	r5, r2
 800a16c:	460e      	mov	r6, r1
 800a16e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a172:	f000 f975 	bl	800a460 <_malloc_r>
 800a176:	4604      	mov	r4, r0
 800a178:	b140      	cbz	r0, 800a18c <__sfmoreglue+0x28>
 800a17a:	2100      	movs	r1, #0
 800a17c:	e9c0 1600 	strd	r1, r6, [r0]
 800a180:	300c      	adds	r0, #12
 800a182:	60a0      	str	r0, [r4, #8]
 800a184:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a188:	f7ff fd94 	bl	8009cb4 <memset>
 800a18c:	4620      	mov	r0, r4
 800a18e:	bd70      	pop	{r4, r5, r6, pc}

0800a190 <__sfp_lock_acquire>:
 800a190:	4801      	ldr	r0, [pc, #4]	; (800a198 <__sfp_lock_acquire+0x8>)
 800a192:	f000 b8b3 	b.w	800a2fc <__retarget_lock_acquire_recursive>
 800a196:	bf00      	nop
 800a198:	20000954 	.word	0x20000954

0800a19c <__sfp_lock_release>:
 800a19c:	4801      	ldr	r0, [pc, #4]	; (800a1a4 <__sfp_lock_release+0x8>)
 800a19e:	f000 b8ae 	b.w	800a2fe <__retarget_lock_release_recursive>
 800a1a2:	bf00      	nop
 800a1a4:	20000954 	.word	0x20000954

0800a1a8 <__sinit_lock_acquire>:
 800a1a8:	4801      	ldr	r0, [pc, #4]	; (800a1b0 <__sinit_lock_acquire+0x8>)
 800a1aa:	f000 b8a7 	b.w	800a2fc <__retarget_lock_acquire_recursive>
 800a1ae:	bf00      	nop
 800a1b0:	2000094f 	.word	0x2000094f

0800a1b4 <__sinit_lock_release>:
 800a1b4:	4801      	ldr	r0, [pc, #4]	; (800a1bc <__sinit_lock_release+0x8>)
 800a1b6:	f000 b8a2 	b.w	800a2fe <__retarget_lock_release_recursive>
 800a1ba:	bf00      	nop
 800a1bc:	2000094f 	.word	0x2000094f

0800a1c0 <__sinit>:
 800a1c0:	b510      	push	{r4, lr}
 800a1c2:	4604      	mov	r4, r0
 800a1c4:	f7ff fff0 	bl	800a1a8 <__sinit_lock_acquire>
 800a1c8:	69a3      	ldr	r3, [r4, #24]
 800a1ca:	b11b      	cbz	r3, 800a1d4 <__sinit+0x14>
 800a1cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1d0:	f7ff bff0 	b.w	800a1b4 <__sinit_lock_release>
 800a1d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a1d8:	6523      	str	r3, [r4, #80]	; 0x50
 800a1da:	4b13      	ldr	r3, [pc, #76]	; (800a228 <__sinit+0x68>)
 800a1dc:	4a13      	ldr	r2, [pc, #76]	; (800a22c <__sinit+0x6c>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a1e2:	42a3      	cmp	r3, r4
 800a1e4:	bf08      	it	eq
 800a1e6:	2301      	moveq	r3, #1
 800a1e8:	4620      	mov	r0, r4
 800a1ea:	bf08      	it	eq
 800a1ec:	61a3      	streq	r3, [r4, #24]
 800a1ee:	f000 f81f 	bl	800a230 <__sfp>
 800a1f2:	6060      	str	r0, [r4, #4]
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	f000 f81b 	bl	800a230 <__sfp>
 800a1fa:	60a0      	str	r0, [r4, #8]
 800a1fc:	4620      	mov	r0, r4
 800a1fe:	f000 f817 	bl	800a230 <__sfp>
 800a202:	2200      	movs	r2, #0
 800a204:	2104      	movs	r1, #4
 800a206:	60e0      	str	r0, [r4, #12]
 800a208:	6860      	ldr	r0, [r4, #4]
 800a20a:	f7ff ff81 	bl	800a110 <std>
 800a20e:	2201      	movs	r2, #1
 800a210:	2109      	movs	r1, #9
 800a212:	68a0      	ldr	r0, [r4, #8]
 800a214:	f7ff ff7c 	bl	800a110 <std>
 800a218:	2202      	movs	r2, #2
 800a21a:	2112      	movs	r1, #18
 800a21c:	68e0      	ldr	r0, [r4, #12]
 800a21e:	f7ff ff77 	bl	800a110 <std>
 800a222:	2301      	movs	r3, #1
 800a224:	61a3      	str	r3, [r4, #24]
 800a226:	e7d1      	b.n	800a1cc <__sinit+0xc>
 800a228:	0800b79c 	.word	0x0800b79c
 800a22c:	0800a159 	.word	0x0800a159

0800a230 <__sfp>:
 800a230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a232:	4607      	mov	r7, r0
 800a234:	f7ff ffac 	bl	800a190 <__sfp_lock_acquire>
 800a238:	4b1e      	ldr	r3, [pc, #120]	; (800a2b4 <__sfp+0x84>)
 800a23a:	681e      	ldr	r6, [r3, #0]
 800a23c:	69b3      	ldr	r3, [r6, #24]
 800a23e:	b913      	cbnz	r3, 800a246 <__sfp+0x16>
 800a240:	4630      	mov	r0, r6
 800a242:	f7ff ffbd 	bl	800a1c0 <__sinit>
 800a246:	3648      	adds	r6, #72	; 0x48
 800a248:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a24c:	3b01      	subs	r3, #1
 800a24e:	d503      	bpl.n	800a258 <__sfp+0x28>
 800a250:	6833      	ldr	r3, [r6, #0]
 800a252:	b30b      	cbz	r3, 800a298 <__sfp+0x68>
 800a254:	6836      	ldr	r6, [r6, #0]
 800a256:	e7f7      	b.n	800a248 <__sfp+0x18>
 800a258:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a25c:	b9d5      	cbnz	r5, 800a294 <__sfp+0x64>
 800a25e:	4b16      	ldr	r3, [pc, #88]	; (800a2b8 <__sfp+0x88>)
 800a260:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a264:	60e3      	str	r3, [r4, #12]
 800a266:	6665      	str	r5, [r4, #100]	; 0x64
 800a268:	f000 f847 	bl	800a2fa <__retarget_lock_init_recursive>
 800a26c:	f7ff ff96 	bl	800a19c <__sfp_lock_release>
 800a270:	2208      	movs	r2, #8
 800a272:	4629      	mov	r1, r5
 800a274:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a278:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a27c:	6025      	str	r5, [r4, #0]
 800a27e:	61a5      	str	r5, [r4, #24]
 800a280:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a284:	f7ff fd16 	bl	8009cb4 <memset>
 800a288:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a28c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a290:	4620      	mov	r0, r4
 800a292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a294:	3468      	adds	r4, #104	; 0x68
 800a296:	e7d9      	b.n	800a24c <__sfp+0x1c>
 800a298:	2104      	movs	r1, #4
 800a29a:	4638      	mov	r0, r7
 800a29c:	f7ff ff62 	bl	800a164 <__sfmoreglue>
 800a2a0:	4604      	mov	r4, r0
 800a2a2:	6030      	str	r0, [r6, #0]
 800a2a4:	2800      	cmp	r0, #0
 800a2a6:	d1d5      	bne.n	800a254 <__sfp+0x24>
 800a2a8:	f7ff ff78 	bl	800a19c <__sfp_lock_release>
 800a2ac:	230c      	movs	r3, #12
 800a2ae:	603b      	str	r3, [r7, #0]
 800a2b0:	e7ee      	b.n	800a290 <__sfp+0x60>
 800a2b2:	bf00      	nop
 800a2b4:	0800b79c 	.word	0x0800b79c
 800a2b8:	ffff0001 	.word	0xffff0001

0800a2bc <_fwalk_reent>:
 800a2bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2c0:	4606      	mov	r6, r0
 800a2c2:	4688      	mov	r8, r1
 800a2c4:	2700      	movs	r7, #0
 800a2c6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a2ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a2ce:	f1b9 0901 	subs.w	r9, r9, #1
 800a2d2:	d505      	bpl.n	800a2e0 <_fwalk_reent+0x24>
 800a2d4:	6824      	ldr	r4, [r4, #0]
 800a2d6:	2c00      	cmp	r4, #0
 800a2d8:	d1f7      	bne.n	800a2ca <_fwalk_reent+0xe>
 800a2da:	4638      	mov	r0, r7
 800a2dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2e0:	89ab      	ldrh	r3, [r5, #12]
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d907      	bls.n	800a2f6 <_fwalk_reent+0x3a>
 800a2e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a2ea:	3301      	adds	r3, #1
 800a2ec:	d003      	beq.n	800a2f6 <_fwalk_reent+0x3a>
 800a2ee:	4629      	mov	r1, r5
 800a2f0:	4630      	mov	r0, r6
 800a2f2:	47c0      	blx	r8
 800a2f4:	4307      	orrs	r7, r0
 800a2f6:	3568      	adds	r5, #104	; 0x68
 800a2f8:	e7e9      	b.n	800a2ce <_fwalk_reent+0x12>

0800a2fa <__retarget_lock_init_recursive>:
 800a2fa:	4770      	bx	lr

0800a2fc <__retarget_lock_acquire_recursive>:
 800a2fc:	4770      	bx	lr

0800a2fe <__retarget_lock_release_recursive>:
 800a2fe:	4770      	bx	lr

0800a300 <__swhatbuf_r>:
 800a300:	b570      	push	{r4, r5, r6, lr}
 800a302:	460e      	mov	r6, r1
 800a304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a308:	4614      	mov	r4, r2
 800a30a:	2900      	cmp	r1, #0
 800a30c:	461d      	mov	r5, r3
 800a30e:	b096      	sub	sp, #88	; 0x58
 800a310:	da07      	bge.n	800a322 <__swhatbuf_r+0x22>
 800a312:	2300      	movs	r3, #0
 800a314:	602b      	str	r3, [r5, #0]
 800a316:	89b3      	ldrh	r3, [r6, #12]
 800a318:	061a      	lsls	r2, r3, #24
 800a31a:	d410      	bmi.n	800a33e <__swhatbuf_r+0x3e>
 800a31c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a320:	e00e      	b.n	800a340 <__swhatbuf_r+0x40>
 800a322:	466a      	mov	r2, sp
 800a324:	f000 fc5a 	bl	800abdc <_fstat_r>
 800a328:	2800      	cmp	r0, #0
 800a32a:	dbf2      	blt.n	800a312 <__swhatbuf_r+0x12>
 800a32c:	9a01      	ldr	r2, [sp, #4]
 800a32e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a332:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a336:	425a      	negs	r2, r3
 800a338:	415a      	adcs	r2, r3
 800a33a:	602a      	str	r2, [r5, #0]
 800a33c:	e7ee      	b.n	800a31c <__swhatbuf_r+0x1c>
 800a33e:	2340      	movs	r3, #64	; 0x40
 800a340:	2000      	movs	r0, #0
 800a342:	6023      	str	r3, [r4, #0]
 800a344:	b016      	add	sp, #88	; 0x58
 800a346:	bd70      	pop	{r4, r5, r6, pc}

0800a348 <__smakebuf_r>:
 800a348:	898b      	ldrh	r3, [r1, #12]
 800a34a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a34c:	079d      	lsls	r5, r3, #30
 800a34e:	4606      	mov	r6, r0
 800a350:	460c      	mov	r4, r1
 800a352:	d507      	bpl.n	800a364 <__smakebuf_r+0x1c>
 800a354:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a358:	6023      	str	r3, [r4, #0]
 800a35a:	6123      	str	r3, [r4, #16]
 800a35c:	2301      	movs	r3, #1
 800a35e:	6163      	str	r3, [r4, #20]
 800a360:	b002      	add	sp, #8
 800a362:	bd70      	pop	{r4, r5, r6, pc}
 800a364:	466a      	mov	r2, sp
 800a366:	ab01      	add	r3, sp, #4
 800a368:	f7ff ffca 	bl	800a300 <__swhatbuf_r>
 800a36c:	9900      	ldr	r1, [sp, #0]
 800a36e:	4605      	mov	r5, r0
 800a370:	4630      	mov	r0, r6
 800a372:	f000 f875 	bl	800a460 <_malloc_r>
 800a376:	b948      	cbnz	r0, 800a38c <__smakebuf_r+0x44>
 800a378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a37c:	059a      	lsls	r2, r3, #22
 800a37e:	d4ef      	bmi.n	800a360 <__smakebuf_r+0x18>
 800a380:	f023 0303 	bic.w	r3, r3, #3
 800a384:	f043 0302 	orr.w	r3, r3, #2
 800a388:	81a3      	strh	r3, [r4, #12]
 800a38a:	e7e3      	b.n	800a354 <__smakebuf_r+0xc>
 800a38c:	4b0d      	ldr	r3, [pc, #52]	; (800a3c4 <__smakebuf_r+0x7c>)
 800a38e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a390:	89a3      	ldrh	r3, [r4, #12]
 800a392:	6020      	str	r0, [r4, #0]
 800a394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a398:	81a3      	strh	r3, [r4, #12]
 800a39a:	9b00      	ldr	r3, [sp, #0]
 800a39c:	6120      	str	r0, [r4, #16]
 800a39e:	6163      	str	r3, [r4, #20]
 800a3a0:	9b01      	ldr	r3, [sp, #4]
 800a3a2:	b15b      	cbz	r3, 800a3bc <__smakebuf_r+0x74>
 800a3a4:	4630      	mov	r0, r6
 800a3a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3aa:	f000 fc29 	bl	800ac00 <_isatty_r>
 800a3ae:	b128      	cbz	r0, 800a3bc <__smakebuf_r+0x74>
 800a3b0:	89a3      	ldrh	r3, [r4, #12]
 800a3b2:	f023 0303 	bic.w	r3, r3, #3
 800a3b6:	f043 0301 	orr.w	r3, r3, #1
 800a3ba:	81a3      	strh	r3, [r4, #12]
 800a3bc:	89a0      	ldrh	r0, [r4, #12]
 800a3be:	4305      	orrs	r5, r0
 800a3c0:	81a5      	strh	r5, [r4, #12]
 800a3c2:	e7cd      	b.n	800a360 <__smakebuf_r+0x18>
 800a3c4:	0800a159 	.word	0x0800a159

0800a3c8 <_free_r>:
 800a3c8:	b538      	push	{r3, r4, r5, lr}
 800a3ca:	4605      	mov	r5, r0
 800a3cc:	2900      	cmp	r1, #0
 800a3ce:	d043      	beq.n	800a458 <_free_r+0x90>
 800a3d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3d4:	1f0c      	subs	r4, r1, #4
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	bfb8      	it	lt
 800a3da:	18e4      	addlt	r4, r4, r3
 800a3dc:	f000 fc40 	bl	800ac60 <__malloc_lock>
 800a3e0:	4a1e      	ldr	r2, [pc, #120]	; (800a45c <_free_r+0x94>)
 800a3e2:	6813      	ldr	r3, [r2, #0]
 800a3e4:	4610      	mov	r0, r2
 800a3e6:	b933      	cbnz	r3, 800a3f6 <_free_r+0x2e>
 800a3e8:	6063      	str	r3, [r4, #4]
 800a3ea:	6014      	str	r4, [r2, #0]
 800a3ec:	4628      	mov	r0, r5
 800a3ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a3f2:	f000 bc3b 	b.w	800ac6c <__malloc_unlock>
 800a3f6:	42a3      	cmp	r3, r4
 800a3f8:	d90a      	bls.n	800a410 <_free_r+0x48>
 800a3fa:	6821      	ldr	r1, [r4, #0]
 800a3fc:	1862      	adds	r2, r4, r1
 800a3fe:	4293      	cmp	r3, r2
 800a400:	bf01      	itttt	eq
 800a402:	681a      	ldreq	r2, [r3, #0]
 800a404:	685b      	ldreq	r3, [r3, #4]
 800a406:	1852      	addeq	r2, r2, r1
 800a408:	6022      	streq	r2, [r4, #0]
 800a40a:	6063      	str	r3, [r4, #4]
 800a40c:	6004      	str	r4, [r0, #0]
 800a40e:	e7ed      	b.n	800a3ec <_free_r+0x24>
 800a410:	461a      	mov	r2, r3
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	b10b      	cbz	r3, 800a41a <_free_r+0x52>
 800a416:	42a3      	cmp	r3, r4
 800a418:	d9fa      	bls.n	800a410 <_free_r+0x48>
 800a41a:	6811      	ldr	r1, [r2, #0]
 800a41c:	1850      	adds	r0, r2, r1
 800a41e:	42a0      	cmp	r0, r4
 800a420:	d10b      	bne.n	800a43a <_free_r+0x72>
 800a422:	6820      	ldr	r0, [r4, #0]
 800a424:	4401      	add	r1, r0
 800a426:	1850      	adds	r0, r2, r1
 800a428:	4283      	cmp	r3, r0
 800a42a:	6011      	str	r1, [r2, #0]
 800a42c:	d1de      	bne.n	800a3ec <_free_r+0x24>
 800a42e:	6818      	ldr	r0, [r3, #0]
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	4401      	add	r1, r0
 800a434:	6011      	str	r1, [r2, #0]
 800a436:	6053      	str	r3, [r2, #4]
 800a438:	e7d8      	b.n	800a3ec <_free_r+0x24>
 800a43a:	d902      	bls.n	800a442 <_free_r+0x7a>
 800a43c:	230c      	movs	r3, #12
 800a43e:	602b      	str	r3, [r5, #0]
 800a440:	e7d4      	b.n	800a3ec <_free_r+0x24>
 800a442:	6820      	ldr	r0, [r4, #0]
 800a444:	1821      	adds	r1, r4, r0
 800a446:	428b      	cmp	r3, r1
 800a448:	bf01      	itttt	eq
 800a44a:	6819      	ldreq	r1, [r3, #0]
 800a44c:	685b      	ldreq	r3, [r3, #4]
 800a44e:	1809      	addeq	r1, r1, r0
 800a450:	6021      	streq	r1, [r4, #0]
 800a452:	6063      	str	r3, [r4, #4]
 800a454:	6054      	str	r4, [r2, #4]
 800a456:	e7c9      	b.n	800a3ec <_free_r+0x24>
 800a458:	bd38      	pop	{r3, r4, r5, pc}
 800a45a:	bf00      	nop
 800a45c:	20000274 	.word	0x20000274

0800a460 <_malloc_r>:
 800a460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a462:	1ccd      	adds	r5, r1, #3
 800a464:	f025 0503 	bic.w	r5, r5, #3
 800a468:	3508      	adds	r5, #8
 800a46a:	2d0c      	cmp	r5, #12
 800a46c:	bf38      	it	cc
 800a46e:	250c      	movcc	r5, #12
 800a470:	2d00      	cmp	r5, #0
 800a472:	4606      	mov	r6, r0
 800a474:	db01      	blt.n	800a47a <_malloc_r+0x1a>
 800a476:	42a9      	cmp	r1, r5
 800a478:	d903      	bls.n	800a482 <_malloc_r+0x22>
 800a47a:	230c      	movs	r3, #12
 800a47c:	6033      	str	r3, [r6, #0]
 800a47e:	2000      	movs	r0, #0
 800a480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a482:	f000 fbed 	bl	800ac60 <__malloc_lock>
 800a486:	4921      	ldr	r1, [pc, #132]	; (800a50c <_malloc_r+0xac>)
 800a488:	680a      	ldr	r2, [r1, #0]
 800a48a:	4614      	mov	r4, r2
 800a48c:	b99c      	cbnz	r4, 800a4b6 <_malloc_r+0x56>
 800a48e:	4f20      	ldr	r7, [pc, #128]	; (800a510 <_malloc_r+0xb0>)
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	b923      	cbnz	r3, 800a49e <_malloc_r+0x3e>
 800a494:	4621      	mov	r1, r4
 800a496:	4630      	mov	r0, r6
 800a498:	f000 fb2a 	bl	800aaf0 <_sbrk_r>
 800a49c:	6038      	str	r0, [r7, #0]
 800a49e:	4629      	mov	r1, r5
 800a4a0:	4630      	mov	r0, r6
 800a4a2:	f000 fb25 	bl	800aaf0 <_sbrk_r>
 800a4a6:	1c43      	adds	r3, r0, #1
 800a4a8:	d123      	bne.n	800a4f2 <_malloc_r+0x92>
 800a4aa:	230c      	movs	r3, #12
 800a4ac:	4630      	mov	r0, r6
 800a4ae:	6033      	str	r3, [r6, #0]
 800a4b0:	f000 fbdc 	bl	800ac6c <__malloc_unlock>
 800a4b4:	e7e3      	b.n	800a47e <_malloc_r+0x1e>
 800a4b6:	6823      	ldr	r3, [r4, #0]
 800a4b8:	1b5b      	subs	r3, r3, r5
 800a4ba:	d417      	bmi.n	800a4ec <_malloc_r+0x8c>
 800a4bc:	2b0b      	cmp	r3, #11
 800a4be:	d903      	bls.n	800a4c8 <_malloc_r+0x68>
 800a4c0:	6023      	str	r3, [r4, #0]
 800a4c2:	441c      	add	r4, r3
 800a4c4:	6025      	str	r5, [r4, #0]
 800a4c6:	e004      	b.n	800a4d2 <_malloc_r+0x72>
 800a4c8:	6863      	ldr	r3, [r4, #4]
 800a4ca:	42a2      	cmp	r2, r4
 800a4cc:	bf0c      	ite	eq
 800a4ce:	600b      	streq	r3, [r1, #0]
 800a4d0:	6053      	strne	r3, [r2, #4]
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	f000 fbca 	bl	800ac6c <__malloc_unlock>
 800a4d8:	f104 000b 	add.w	r0, r4, #11
 800a4dc:	1d23      	adds	r3, r4, #4
 800a4de:	f020 0007 	bic.w	r0, r0, #7
 800a4e2:	1ac2      	subs	r2, r0, r3
 800a4e4:	d0cc      	beq.n	800a480 <_malloc_r+0x20>
 800a4e6:	1a1b      	subs	r3, r3, r0
 800a4e8:	50a3      	str	r3, [r4, r2]
 800a4ea:	e7c9      	b.n	800a480 <_malloc_r+0x20>
 800a4ec:	4622      	mov	r2, r4
 800a4ee:	6864      	ldr	r4, [r4, #4]
 800a4f0:	e7cc      	b.n	800a48c <_malloc_r+0x2c>
 800a4f2:	1cc4      	adds	r4, r0, #3
 800a4f4:	f024 0403 	bic.w	r4, r4, #3
 800a4f8:	42a0      	cmp	r0, r4
 800a4fa:	d0e3      	beq.n	800a4c4 <_malloc_r+0x64>
 800a4fc:	1a21      	subs	r1, r4, r0
 800a4fe:	4630      	mov	r0, r6
 800a500:	f000 faf6 	bl	800aaf0 <_sbrk_r>
 800a504:	3001      	adds	r0, #1
 800a506:	d1dd      	bne.n	800a4c4 <_malloc_r+0x64>
 800a508:	e7cf      	b.n	800a4aa <_malloc_r+0x4a>
 800a50a:	bf00      	nop
 800a50c:	20000274 	.word	0x20000274
 800a510:	20000278 	.word	0x20000278

0800a514 <__sfputc_r>:
 800a514:	6893      	ldr	r3, [r2, #8]
 800a516:	b410      	push	{r4}
 800a518:	3b01      	subs	r3, #1
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	6093      	str	r3, [r2, #8]
 800a51e:	da07      	bge.n	800a530 <__sfputc_r+0x1c>
 800a520:	6994      	ldr	r4, [r2, #24]
 800a522:	42a3      	cmp	r3, r4
 800a524:	db01      	blt.n	800a52a <__sfputc_r+0x16>
 800a526:	290a      	cmp	r1, #10
 800a528:	d102      	bne.n	800a530 <__sfputc_r+0x1c>
 800a52a:	bc10      	pop	{r4}
 800a52c:	f7ff bc6e 	b.w	8009e0c <__swbuf_r>
 800a530:	6813      	ldr	r3, [r2, #0]
 800a532:	1c58      	adds	r0, r3, #1
 800a534:	6010      	str	r0, [r2, #0]
 800a536:	7019      	strb	r1, [r3, #0]
 800a538:	4608      	mov	r0, r1
 800a53a:	bc10      	pop	{r4}
 800a53c:	4770      	bx	lr

0800a53e <__sfputs_r>:
 800a53e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a540:	4606      	mov	r6, r0
 800a542:	460f      	mov	r7, r1
 800a544:	4614      	mov	r4, r2
 800a546:	18d5      	adds	r5, r2, r3
 800a548:	42ac      	cmp	r4, r5
 800a54a:	d101      	bne.n	800a550 <__sfputs_r+0x12>
 800a54c:	2000      	movs	r0, #0
 800a54e:	e007      	b.n	800a560 <__sfputs_r+0x22>
 800a550:	463a      	mov	r2, r7
 800a552:	4630      	mov	r0, r6
 800a554:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a558:	f7ff ffdc 	bl	800a514 <__sfputc_r>
 800a55c:	1c43      	adds	r3, r0, #1
 800a55e:	d1f3      	bne.n	800a548 <__sfputs_r+0xa>
 800a560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a564 <_vfiprintf_r>:
 800a564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a568:	460d      	mov	r5, r1
 800a56a:	4614      	mov	r4, r2
 800a56c:	4698      	mov	r8, r3
 800a56e:	4606      	mov	r6, r0
 800a570:	b09d      	sub	sp, #116	; 0x74
 800a572:	b118      	cbz	r0, 800a57c <_vfiprintf_r+0x18>
 800a574:	6983      	ldr	r3, [r0, #24]
 800a576:	b90b      	cbnz	r3, 800a57c <_vfiprintf_r+0x18>
 800a578:	f7ff fe22 	bl	800a1c0 <__sinit>
 800a57c:	4b89      	ldr	r3, [pc, #548]	; (800a7a4 <_vfiprintf_r+0x240>)
 800a57e:	429d      	cmp	r5, r3
 800a580:	d11b      	bne.n	800a5ba <_vfiprintf_r+0x56>
 800a582:	6875      	ldr	r5, [r6, #4]
 800a584:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a586:	07d9      	lsls	r1, r3, #31
 800a588:	d405      	bmi.n	800a596 <_vfiprintf_r+0x32>
 800a58a:	89ab      	ldrh	r3, [r5, #12]
 800a58c:	059a      	lsls	r2, r3, #22
 800a58e:	d402      	bmi.n	800a596 <_vfiprintf_r+0x32>
 800a590:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a592:	f7ff feb3 	bl	800a2fc <__retarget_lock_acquire_recursive>
 800a596:	89ab      	ldrh	r3, [r5, #12]
 800a598:	071b      	lsls	r3, r3, #28
 800a59a:	d501      	bpl.n	800a5a0 <_vfiprintf_r+0x3c>
 800a59c:	692b      	ldr	r3, [r5, #16]
 800a59e:	b9eb      	cbnz	r3, 800a5dc <_vfiprintf_r+0x78>
 800a5a0:	4629      	mov	r1, r5
 800a5a2:	4630      	mov	r0, r6
 800a5a4:	f7ff fc84 	bl	8009eb0 <__swsetup_r>
 800a5a8:	b1c0      	cbz	r0, 800a5dc <_vfiprintf_r+0x78>
 800a5aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5ac:	07dc      	lsls	r4, r3, #31
 800a5ae:	d50e      	bpl.n	800a5ce <_vfiprintf_r+0x6a>
 800a5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b4:	b01d      	add	sp, #116	; 0x74
 800a5b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ba:	4b7b      	ldr	r3, [pc, #492]	; (800a7a8 <_vfiprintf_r+0x244>)
 800a5bc:	429d      	cmp	r5, r3
 800a5be:	d101      	bne.n	800a5c4 <_vfiprintf_r+0x60>
 800a5c0:	68b5      	ldr	r5, [r6, #8]
 800a5c2:	e7df      	b.n	800a584 <_vfiprintf_r+0x20>
 800a5c4:	4b79      	ldr	r3, [pc, #484]	; (800a7ac <_vfiprintf_r+0x248>)
 800a5c6:	429d      	cmp	r5, r3
 800a5c8:	bf08      	it	eq
 800a5ca:	68f5      	ldreq	r5, [r6, #12]
 800a5cc:	e7da      	b.n	800a584 <_vfiprintf_r+0x20>
 800a5ce:	89ab      	ldrh	r3, [r5, #12]
 800a5d0:	0598      	lsls	r0, r3, #22
 800a5d2:	d4ed      	bmi.n	800a5b0 <_vfiprintf_r+0x4c>
 800a5d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5d6:	f7ff fe92 	bl	800a2fe <__retarget_lock_release_recursive>
 800a5da:	e7e9      	b.n	800a5b0 <_vfiprintf_r+0x4c>
 800a5dc:	2300      	movs	r3, #0
 800a5de:	9309      	str	r3, [sp, #36]	; 0x24
 800a5e0:	2320      	movs	r3, #32
 800a5e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5e6:	2330      	movs	r3, #48	; 0x30
 800a5e8:	f04f 0901 	mov.w	r9, #1
 800a5ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5f0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a7b0 <_vfiprintf_r+0x24c>
 800a5f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5f8:	4623      	mov	r3, r4
 800a5fa:	469a      	mov	sl, r3
 800a5fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a600:	b10a      	cbz	r2, 800a606 <_vfiprintf_r+0xa2>
 800a602:	2a25      	cmp	r2, #37	; 0x25
 800a604:	d1f9      	bne.n	800a5fa <_vfiprintf_r+0x96>
 800a606:	ebba 0b04 	subs.w	fp, sl, r4
 800a60a:	d00b      	beq.n	800a624 <_vfiprintf_r+0xc0>
 800a60c:	465b      	mov	r3, fp
 800a60e:	4622      	mov	r2, r4
 800a610:	4629      	mov	r1, r5
 800a612:	4630      	mov	r0, r6
 800a614:	f7ff ff93 	bl	800a53e <__sfputs_r>
 800a618:	3001      	adds	r0, #1
 800a61a:	f000 80aa 	beq.w	800a772 <_vfiprintf_r+0x20e>
 800a61e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a620:	445a      	add	r2, fp
 800a622:	9209      	str	r2, [sp, #36]	; 0x24
 800a624:	f89a 3000 	ldrb.w	r3, [sl]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	f000 80a2 	beq.w	800a772 <_vfiprintf_r+0x20e>
 800a62e:	2300      	movs	r3, #0
 800a630:	f04f 32ff 	mov.w	r2, #4294967295
 800a634:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a638:	f10a 0a01 	add.w	sl, sl, #1
 800a63c:	9304      	str	r3, [sp, #16]
 800a63e:	9307      	str	r3, [sp, #28]
 800a640:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a644:	931a      	str	r3, [sp, #104]	; 0x68
 800a646:	4654      	mov	r4, sl
 800a648:	2205      	movs	r2, #5
 800a64a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a64e:	4858      	ldr	r0, [pc, #352]	; (800a7b0 <_vfiprintf_r+0x24c>)
 800a650:	f000 faf8 	bl	800ac44 <memchr>
 800a654:	9a04      	ldr	r2, [sp, #16]
 800a656:	b9d8      	cbnz	r0, 800a690 <_vfiprintf_r+0x12c>
 800a658:	06d1      	lsls	r1, r2, #27
 800a65a:	bf44      	itt	mi
 800a65c:	2320      	movmi	r3, #32
 800a65e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a662:	0713      	lsls	r3, r2, #28
 800a664:	bf44      	itt	mi
 800a666:	232b      	movmi	r3, #43	; 0x2b
 800a668:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a66c:	f89a 3000 	ldrb.w	r3, [sl]
 800a670:	2b2a      	cmp	r3, #42	; 0x2a
 800a672:	d015      	beq.n	800a6a0 <_vfiprintf_r+0x13c>
 800a674:	4654      	mov	r4, sl
 800a676:	2000      	movs	r0, #0
 800a678:	f04f 0c0a 	mov.w	ip, #10
 800a67c:	9a07      	ldr	r2, [sp, #28]
 800a67e:	4621      	mov	r1, r4
 800a680:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a684:	3b30      	subs	r3, #48	; 0x30
 800a686:	2b09      	cmp	r3, #9
 800a688:	d94e      	bls.n	800a728 <_vfiprintf_r+0x1c4>
 800a68a:	b1b0      	cbz	r0, 800a6ba <_vfiprintf_r+0x156>
 800a68c:	9207      	str	r2, [sp, #28]
 800a68e:	e014      	b.n	800a6ba <_vfiprintf_r+0x156>
 800a690:	eba0 0308 	sub.w	r3, r0, r8
 800a694:	fa09 f303 	lsl.w	r3, r9, r3
 800a698:	4313      	orrs	r3, r2
 800a69a:	46a2      	mov	sl, r4
 800a69c:	9304      	str	r3, [sp, #16]
 800a69e:	e7d2      	b.n	800a646 <_vfiprintf_r+0xe2>
 800a6a0:	9b03      	ldr	r3, [sp, #12]
 800a6a2:	1d19      	adds	r1, r3, #4
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	9103      	str	r1, [sp, #12]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	bfbb      	ittet	lt
 800a6ac:	425b      	neglt	r3, r3
 800a6ae:	f042 0202 	orrlt.w	r2, r2, #2
 800a6b2:	9307      	strge	r3, [sp, #28]
 800a6b4:	9307      	strlt	r3, [sp, #28]
 800a6b6:	bfb8      	it	lt
 800a6b8:	9204      	strlt	r2, [sp, #16]
 800a6ba:	7823      	ldrb	r3, [r4, #0]
 800a6bc:	2b2e      	cmp	r3, #46	; 0x2e
 800a6be:	d10c      	bne.n	800a6da <_vfiprintf_r+0x176>
 800a6c0:	7863      	ldrb	r3, [r4, #1]
 800a6c2:	2b2a      	cmp	r3, #42	; 0x2a
 800a6c4:	d135      	bne.n	800a732 <_vfiprintf_r+0x1ce>
 800a6c6:	9b03      	ldr	r3, [sp, #12]
 800a6c8:	3402      	adds	r4, #2
 800a6ca:	1d1a      	adds	r2, r3, #4
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	9203      	str	r2, [sp, #12]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	bfb8      	it	lt
 800a6d4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6d8:	9305      	str	r3, [sp, #20]
 800a6da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a7c0 <_vfiprintf_r+0x25c>
 800a6de:	2203      	movs	r2, #3
 800a6e0:	4650      	mov	r0, sl
 800a6e2:	7821      	ldrb	r1, [r4, #0]
 800a6e4:	f000 faae 	bl	800ac44 <memchr>
 800a6e8:	b140      	cbz	r0, 800a6fc <_vfiprintf_r+0x198>
 800a6ea:	2340      	movs	r3, #64	; 0x40
 800a6ec:	eba0 000a 	sub.w	r0, r0, sl
 800a6f0:	fa03 f000 	lsl.w	r0, r3, r0
 800a6f4:	9b04      	ldr	r3, [sp, #16]
 800a6f6:	3401      	adds	r4, #1
 800a6f8:	4303      	orrs	r3, r0
 800a6fa:	9304      	str	r3, [sp, #16]
 800a6fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a700:	2206      	movs	r2, #6
 800a702:	482c      	ldr	r0, [pc, #176]	; (800a7b4 <_vfiprintf_r+0x250>)
 800a704:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a708:	f000 fa9c 	bl	800ac44 <memchr>
 800a70c:	2800      	cmp	r0, #0
 800a70e:	d03f      	beq.n	800a790 <_vfiprintf_r+0x22c>
 800a710:	4b29      	ldr	r3, [pc, #164]	; (800a7b8 <_vfiprintf_r+0x254>)
 800a712:	bb1b      	cbnz	r3, 800a75c <_vfiprintf_r+0x1f8>
 800a714:	9b03      	ldr	r3, [sp, #12]
 800a716:	3307      	adds	r3, #7
 800a718:	f023 0307 	bic.w	r3, r3, #7
 800a71c:	3308      	adds	r3, #8
 800a71e:	9303      	str	r3, [sp, #12]
 800a720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a722:	443b      	add	r3, r7
 800a724:	9309      	str	r3, [sp, #36]	; 0x24
 800a726:	e767      	b.n	800a5f8 <_vfiprintf_r+0x94>
 800a728:	460c      	mov	r4, r1
 800a72a:	2001      	movs	r0, #1
 800a72c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a730:	e7a5      	b.n	800a67e <_vfiprintf_r+0x11a>
 800a732:	2300      	movs	r3, #0
 800a734:	f04f 0c0a 	mov.w	ip, #10
 800a738:	4619      	mov	r1, r3
 800a73a:	3401      	adds	r4, #1
 800a73c:	9305      	str	r3, [sp, #20]
 800a73e:	4620      	mov	r0, r4
 800a740:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a744:	3a30      	subs	r2, #48	; 0x30
 800a746:	2a09      	cmp	r2, #9
 800a748:	d903      	bls.n	800a752 <_vfiprintf_r+0x1ee>
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d0c5      	beq.n	800a6da <_vfiprintf_r+0x176>
 800a74e:	9105      	str	r1, [sp, #20]
 800a750:	e7c3      	b.n	800a6da <_vfiprintf_r+0x176>
 800a752:	4604      	mov	r4, r0
 800a754:	2301      	movs	r3, #1
 800a756:	fb0c 2101 	mla	r1, ip, r1, r2
 800a75a:	e7f0      	b.n	800a73e <_vfiprintf_r+0x1da>
 800a75c:	ab03      	add	r3, sp, #12
 800a75e:	9300      	str	r3, [sp, #0]
 800a760:	462a      	mov	r2, r5
 800a762:	4630      	mov	r0, r6
 800a764:	4b15      	ldr	r3, [pc, #84]	; (800a7bc <_vfiprintf_r+0x258>)
 800a766:	a904      	add	r1, sp, #16
 800a768:	f3af 8000 	nop.w
 800a76c:	4607      	mov	r7, r0
 800a76e:	1c78      	adds	r0, r7, #1
 800a770:	d1d6      	bne.n	800a720 <_vfiprintf_r+0x1bc>
 800a772:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a774:	07d9      	lsls	r1, r3, #31
 800a776:	d405      	bmi.n	800a784 <_vfiprintf_r+0x220>
 800a778:	89ab      	ldrh	r3, [r5, #12]
 800a77a:	059a      	lsls	r2, r3, #22
 800a77c:	d402      	bmi.n	800a784 <_vfiprintf_r+0x220>
 800a77e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a780:	f7ff fdbd 	bl	800a2fe <__retarget_lock_release_recursive>
 800a784:	89ab      	ldrh	r3, [r5, #12]
 800a786:	065b      	lsls	r3, r3, #25
 800a788:	f53f af12 	bmi.w	800a5b0 <_vfiprintf_r+0x4c>
 800a78c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a78e:	e711      	b.n	800a5b4 <_vfiprintf_r+0x50>
 800a790:	ab03      	add	r3, sp, #12
 800a792:	9300      	str	r3, [sp, #0]
 800a794:	462a      	mov	r2, r5
 800a796:	4630      	mov	r0, r6
 800a798:	4b08      	ldr	r3, [pc, #32]	; (800a7bc <_vfiprintf_r+0x258>)
 800a79a:	a904      	add	r1, sp, #16
 800a79c:	f000 f882 	bl	800a8a4 <_printf_i>
 800a7a0:	e7e4      	b.n	800a76c <_vfiprintf_r+0x208>
 800a7a2:	bf00      	nop
 800a7a4:	0800b7c0 	.word	0x0800b7c0
 800a7a8:	0800b7e0 	.word	0x0800b7e0
 800a7ac:	0800b7a0 	.word	0x0800b7a0
 800a7b0:	0800b800 	.word	0x0800b800
 800a7b4:	0800b80a 	.word	0x0800b80a
 800a7b8:	00000000 	.word	0x00000000
 800a7bc:	0800a53f 	.word	0x0800a53f
 800a7c0:	0800b806 	.word	0x0800b806

0800a7c4 <_printf_common>:
 800a7c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7c8:	4616      	mov	r6, r2
 800a7ca:	4699      	mov	r9, r3
 800a7cc:	688a      	ldr	r2, [r1, #8]
 800a7ce:	690b      	ldr	r3, [r1, #16]
 800a7d0:	4607      	mov	r7, r0
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	bfb8      	it	lt
 800a7d6:	4613      	movlt	r3, r2
 800a7d8:	6033      	str	r3, [r6, #0]
 800a7da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a7de:	460c      	mov	r4, r1
 800a7e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a7e4:	b10a      	cbz	r2, 800a7ea <_printf_common+0x26>
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	6033      	str	r3, [r6, #0]
 800a7ea:	6823      	ldr	r3, [r4, #0]
 800a7ec:	0699      	lsls	r1, r3, #26
 800a7ee:	bf42      	ittt	mi
 800a7f0:	6833      	ldrmi	r3, [r6, #0]
 800a7f2:	3302      	addmi	r3, #2
 800a7f4:	6033      	strmi	r3, [r6, #0]
 800a7f6:	6825      	ldr	r5, [r4, #0]
 800a7f8:	f015 0506 	ands.w	r5, r5, #6
 800a7fc:	d106      	bne.n	800a80c <_printf_common+0x48>
 800a7fe:	f104 0a19 	add.w	sl, r4, #25
 800a802:	68e3      	ldr	r3, [r4, #12]
 800a804:	6832      	ldr	r2, [r6, #0]
 800a806:	1a9b      	subs	r3, r3, r2
 800a808:	42ab      	cmp	r3, r5
 800a80a:	dc28      	bgt.n	800a85e <_printf_common+0x9a>
 800a80c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a810:	1e13      	subs	r3, r2, #0
 800a812:	6822      	ldr	r2, [r4, #0]
 800a814:	bf18      	it	ne
 800a816:	2301      	movne	r3, #1
 800a818:	0692      	lsls	r2, r2, #26
 800a81a:	d42d      	bmi.n	800a878 <_printf_common+0xb4>
 800a81c:	4649      	mov	r1, r9
 800a81e:	4638      	mov	r0, r7
 800a820:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a824:	47c0      	blx	r8
 800a826:	3001      	adds	r0, #1
 800a828:	d020      	beq.n	800a86c <_printf_common+0xa8>
 800a82a:	6823      	ldr	r3, [r4, #0]
 800a82c:	68e5      	ldr	r5, [r4, #12]
 800a82e:	f003 0306 	and.w	r3, r3, #6
 800a832:	2b04      	cmp	r3, #4
 800a834:	bf18      	it	ne
 800a836:	2500      	movne	r5, #0
 800a838:	6832      	ldr	r2, [r6, #0]
 800a83a:	f04f 0600 	mov.w	r6, #0
 800a83e:	68a3      	ldr	r3, [r4, #8]
 800a840:	bf08      	it	eq
 800a842:	1aad      	subeq	r5, r5, r2
 800a844:	6922      	ldr	r2, [r4, #16]
 800a846:	bf08      	it	eq
 800a848:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a84c:	4293      	cmp	r3, r2
 800a84e:	bfc4      	itt	gt
 800a850:	1a9b      	subgt	r3, r3, r2
 800a852:	18ed      	addgt	r5, r5, r3
 800a854:	341a      	adds	r4, #26
 800a856:	42b5      	cmp	r5, r6
 800a858:	d11a      	bne.n	800a890 <_printf_common+0xcc>
 800a85a:	2000      	movs	r0, #0
 800a85c:	e008      	b.n	800a870 <_printf_common+0xac>
 800a85e:	2301      	movs	r3, #1
 800a860:	4652      	mov	r2, sl
 800a862:	4649      	mov	r1, r9
 800a864:	4638      	mov	r0, r7
 800a866:	47c0      	blx	r8
 800a868:	3001      	adds	r0, #1
 800a86a:	d103      	bne.n	800a874 <_printf_common+0xb0>
 800a86c:	f04f 30ff 	mov.w	r0, #4294967295
 800a870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a874:	3501      	adds	r5, #1
 800a876:	e7c4      	b.n	800a802 <_printf_common+0x3e>
 800a878:	2030      	movs	r0, #48	; 0x30
 800a87a:	18e1      	adds	r1, r4, r3
 800a87c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a880:	1c5a      	adds	r2, r3, #1
 800a882:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a886:	4422      	add	r2, r4
 800a888:	3302      	adds	r3, #2
 800a88a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a88e:	e7c5      	b.n	800a81c <_printf_common+0x58>
 800a890:	2301      	movs	r3, #1
 800a892:	4622      	mov	r2, r4
 800a894:	4649      	mov	r1, r9
 800a896:	4638      	mov	r0, r7
 800a898:	47c0      	blx	r8
 800a89a:	3001      	adds	r0, #1
 800a89c:	d0e6      	beq.n	800a86c <_printf_common+0xa8>
 800a89e:	3601      	adds	r6, #1
 800a8a0:	e7d9      	b.n	800a856 <_printf_common+0x92>
	...

0800a8a4 <_printf_i>:
 800a8a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8a8:	460c      	mov	r4, r1
 800a8aa:	7e27      	ldrb	r7, [r4, #24]
 800a8ac:	4691      	mov	r9, r2
 800a8ae:	2f78      	cmp	r7, #120	; 0x78
 800a8b0:	4680      	mov	r8, r0
 800a8b2:	469a      	mov	sl, r3
 800a8b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a8b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a8ba:	d807      	bhi.n	800a8cc <_printf_i+0x28>
 800a8bc:	2f62      	cmp	r7, #98	; 0x62
 800a8be:	d80a      	bhi.n	800a8d6 <_printf_i+0x32>
 800a8c0:	2f00      	cmp	r7, #0
 800a8c2:	f000 80d9 	beq.w	800aa78 <_printf_i+0x1d4>
 800a8c6:	2f58      	cmp	r7, #88	; 0x58
 800a8c8:	f000 80a4 	beq.w	800aa14 <_printf_i+0x170>
 800a8cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a8d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a8d4:	e03a      	b.n	800a94c <_printf_i+0xa8>
 800a8d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a8da:	2b15      	cmp	r3, #21
 800a8dc:	d8f6      	bhi.n	800a8cc <_printf_i+0x28>
 800a8de:	a001      	add	r0, pc, #4	; (adr r0, 800a8e4 <_printf_i+0x40>)
 800a8e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a8e4:	0800a93d 	.word	0x0800a93d
 800a8e8:	0800a951 	.word	0x0800a951
 800a8ec:	0800a8cd 	.word	0x0800a8cd
 800a8f0:	0800a8cd 	.word	0x0800a8cd
 800a8f4:	0800a8cd 	.word	0x0800a8cd
 800a8f8:	0800a8cd 	.word	0x0800a8cd
 800a8fc:	0800a951 	.word	0x0800a951
 800a900:	0800a8cd 	.word	0x0800a8cd
 800a904:	0800a8cd 	.word	0x0800a8cd
 800a908:	0800a8cd 	.word	0x0800a8cd
 800a90c:	0800a8cd 	.word	0x0800a8cd
 800a910:	0800aa5f 	.word	0x0800aa5f
 800a914:	0800a981 	.word	0x0800a981
 800a918:	0800aa41 	.word	0x0800aa41
 800a91c:	0800a8cd 	.word	0x0800a8cd
 800a920:	0800a8cd 	.word	0x0800a8cd
 800a924:	0800aa81 	.word	0x0800aa81
 800a928:	0800a8cd 	.word	0x0800a8cd
 800a92c:	0800a981 	.word	0x0800a981
 800a930:	0800a8cd 	.word	0x0800a8cd
 800a934:	0800a8cd 	.word	0x0800a8cd
 800a938:	0800aa49 	.word	0x0800aa49
 800a93c:	680b      	ldr	r3, [r1, #0]
 800a93e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a942:	1d1a      	adds	r2, r3, #4
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	600a      	str	r2, [r1, #0]
 800a948:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a94c:	2301      	movs	r3, #1
 800a94e:	e0a4      	b.n	800aa9a <_printf_i+0x1f6>
 800a950:	6825      	ldr	r5, [r4, #0]
 800a952:	6808      	ldr	r0, [r1, #0]
 800a954:	062e      	lsls	r6, r5, #24
 800a956:	f100 0304 	add.w	r3, r0, #4
 800a95a:	d50a      	bpl.n	800a972 <_printf_i+0xce>
 800a95c:	6805      	ldr	r5, [r0, #0]
 800a95e:	600b      	str	r3, [r1, #0]
 800a960:	2d00      	cmp	r5, #0
 800a962:	da03      	bge.n	800a96c <_printf_i+0xc8>
 800a964:	232d      	movs	r3, #45	; 0x2d
 800a966:	426d      	negs	r5, r5
 800a968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a96c:	230a      	movs	r3, #10
 800a96e:	485e      	ldr	r0, [pc, #376]	; (800aae8 <_printf_i+0x244>)
 800a970:	e019      	b.n	800a9a6 <_printf_i+0x102>
 800a972:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a976:	6805      	ldr	r5, [r0, #0]
 800a978:	600b      	str	r3, [r1, #0]
 800a97a:	bf18      	it	ne
 800a97c:	b22d      	sxthne	r5, r5
 800a97e:	e7ef      	b.n	800a960 <_printf_i+0xbc>
 800a980:	680b      	ldr	r3, [r1, #0]
 800a982:	6825      	ldr	r5, [r4, #0]
 800a984:	1d18      	adds	r0, r3, #4
 800a986:	6008      	str	r0, [r1, #0]
 800a988:	0628      	lsls	r0, r5, #24
 800a98a:	d501      	bpl.n	800a990 <_printf_i+0xec>
 800a98c:	681d      	ldr	r5, [r3, #0]
 800a98e:	e002      	b.n	800a996 <_printf_i+0xf2>
 800a990:	0669      	lsls	r1, r5, #25
 800a992:	d5fb      	bpl.n	800a98c <_printf_i+0xe8>
 800a994:	881d      	ldrh	r5, [r3, #0]
 800a996:	2f6f      	cmp	r7, #111	; 0x6f
 800a998:	bf0c      	ite	eq
 800a99a:	2308      	moveq	r3, #8
 800a99c:	230a      	movne	r3, #10
 800a99e:	4852      	ldr	r0, [pc, #328]	; (800aae8 <_printf_i+0x244>)
 800a9a0:	2100      	movs	r1, #0
 800a9a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a9a6:	6866      	ldr	r6, [r4, #4]
 800a9a8:	2e00      	cmp	r6, #0
 800a9aa:	bfa8      	it	ge
 800a9ac:	6821      	ldrge	r1, [r4, #0]
 800a9ae:	60a6      	str	r6, [r4, #8]
 800a9b0:	bfa4      	itt	ge
 800a9b2:	f021 0104 	bicge.w	r1, r1, #4
 800a9b6:	6021      	strge	r1, [r4, #0]
 800a9b8:	b90d      	cbnz	r5, 800a9be <_printf_i+0x11a>
 800a9ba:	2e00      	cmp	r6, #0
 800a9bc:	d04d      	beq.n	800aa5a <_printf_i+0x1b6>
 800a9be:	4616      	mov	r6, r2
 800a9c0:	fbb5 f1f3 	udiv	r1, r5, r3
 800a9c4:	fb03 5711 	mls	r7, r3, r1, r5
 800a9c8:	5dc7      	ldrb	r7, [r0, r7]
 800a9ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a9ce:	462f      	mov	r7, r5
 800a9d0:	42bb      	cmp	r3, r7
 800a9d2:	460d      	mov	r5, r1
 800a9d4:	d9f4      	bls.n	800a9c0 <_printf_i+0x11c>
 800a9d6:	2b08      	cmp	r3, #8
 800a9d8:	d10b      	bne.n	800a9f2 <_printf_i+0x14e>
 800a9da:	6823      	ldr	r3, [r4, #0]
 800a9dc:	07df      	lsls	r7, r3, #31
 800a9de:	d508      	bpl.n	800a9f2 <_printf_i+0x14e>
 800a9e0:	6923      	ldr	r3, [r4, #16]
 800a9e2:	6861      	ldr	r1, [r4, #4]
 800a9e4:	4299      	cmp	r1, r3
 800a9e6:	bfde      	ittt	le
 800a9e8:	2330      	movle	r3, #48	; 0x30
 800a9ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a9ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a9f2:	1b92      	subs	r2, r2, r6
 800a9f4:	6122      	str	r2, [r4, #16]
 800a9f6:	464b      	mov	r3, r9
 800a9f8:	4621      	mov	r1, r4
 800a9fa:	4640      	mov	r0, r8
 800a9fc:	f8cd a000 	str.w	sl, [sp]
 800aa00:	aa03      	add	r2, sp, #12
 800aa02:	f7ff fedf 	bl	800a7c4 <_printf_common>
 800aa06:	3001      	adds	r0, #1
 800aa08:	d14c      	bne.n	800aaa4 <_printf_i+0x200>
 800aa0a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa0e:	b004      	add	sp, #16
 800aa10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa14:	4834      	ldr	r0, [pc, #208]	; (800aae8 <_printf_i+0x244>)
 800aa16:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aa1a:	680e      	ldr	r6, [r1, #0]
 800aa1c:	6823      	ldr	r3, [r4, #0]
 800aa1e:	f856 5b04 	ldr.w	r5, [r6], #4
 800aa22:	061f      	lsls	r7, r3, #24
 800aa24:	600e      	str	r6, [r1, #0]
 800aa26:	d514      	bpl.n	800aa52 <_printf_i+0x1ae>
 800aa28:	07d9      	lsls	r1, r3, #31
 800aa2a:	bf44      	itt	mi
 800aa2c:	f043 0320 	orrmi.w	r3, r3, #32
 800aa30:	6023      	strmi	r3, [r4, #0]
 800aa32:	b91d      	cbnz	r5, 800aa3c <_printf_i+0x198>
 800aa34:	6823      	ldr	r3, [r4, #0]
 800aa36:	f023 0320 	bic.w	r3, r3, #32
 800aa3a:	6023      	str	r3, [r4, #0]
 800aa3c:	2310      	movs	r3, #16
 800aa3e:	e7af      	b.n	800a9a0 <_printf_i+0xfc>
 800aa40:	6823      	ldr	r3, [r4, #0]
 800aa42:	f043 0320 	orr.w	r3, r3, #32
 800aa46:	6023      	str	r3, [r4, #0]
 800aa48:	2378      	movs	r3, #120	; 0x78
 800aa4a:	4828      	ldr	r0, [pc, #160]	; (800aaec <_printf_i+0x248>)
 800aa4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa50:	e7e3      	b.n	800aa1a <_printf_i+0x176>
 800aa52:	065e      	lsls	r6, r3, #25
 800aa54:	bf48      	it	mi
 800aa56:	b2ad      	uxthmi	r5, r5
 800aa58:	e7e6      	b.n	800aa28 <_printf_i+0x184>
 800aa5a:	4616      	mov	r6, r2
 800aa5c:	e7bb      	b.n	800a9d6 <_printf_i+0x132>
 800aa5e:	680b      	ldr	r3, [r1, #0]
 800aa60:	6826      	ldr	r6, [r4, #0]
 800aa62:	1d1d      	adds	r5, r3, #4
 800aa64:	6960      	ldr	r0, [r4, #20]
 800aa66:	600d      	str	r5, [r1, #0]
 800aa68:	0635      	lsls	r5, r6, #24
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	d501      	bpl.n	800aa72 <_printf_i+0x1ce>
 800aa6e:	6018      	str	r0, [r3, #0]
 800aa70:	e002      	b.n	800aa78 <_printf_i+0x1d4>
 800aa72:	0671      	lsls	r1, r6, #25
 800aa74:	d5fb      	bpl.n	800aa6e <_printf_i+0x1ca>
 800aa76:	8018      	strh	r0, [r3, #0]
 800aa78:	2300      	movs	r3, #0
 800aa7a:	4616      	mov	r6, r2
 800aa7c:	6123      	str	r3, [r4, #16]
 800aa7e:	e7ba      	b.n	800a9f6 <_printf_i+0x152>
 800aa80:	680b      	ldr	r3, [r1, #0]
 800aa82:	1d1a      	adds	r2, r3, #4
 800aa84:	600a      	str	r2, [r1, #0]
 800aa86:	681e      	ldr	r6, [r3, #0]
 800aa88:	2100      	movs	r1, #0
 800aa8a:	4630      	mov	r0, r6
 800aa8c:	6862      	ldr	r2, [r4, #4]
 800aa8e:	f000 f8d9 	bl	800ac44 <memchr>
 800aa92:	b108      	cbz	r0, 800aa98 <_printf_i+0x1f4>
 800aa94:	1b80      	subs	r0, r0, r6
 800aa96:	6060      	str	r0, [r4, #4]
 800aa98:	6863      	ldr	r3, [r4, #4]
 800aa9a:	6123      	str	r3, [r4, #16]
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aaa2:	e7a8      	b.n	800a9f6 <_printf_i+0x152>
 800aaa4:	4632      	mov	r2, r6
 800aaa6:	4649      	mov	r1, r9
 800aaa8:	4640      	mov	r0, r8
 800aaaa:	6923      	ldr	r3, [r4, #16]
 800aaac:	47d0      	blx	sl
 800aaae:	3001      	adds	r0, #1
 800aab0:	d0ab      	beq.n	800aa0a <_printf_i+0x166>
 800aab2:	6823      	ldr	r3, [r4, #0]
 800aab4:	079b      	lsls	r3, r3, #30
 800aab6:	d413      	bmi.n	800aae0 <_printf_i+0x23c>
 800aab8:	68e0      	ldr	r0, [r4, #12]
 800aaba:	9b03      	ldr	r3, [sp, #12]
 800aabc:	4298      	cmp	r0, r3
 800aabe:	bfb8      	it	lt
 800aac0:	4618      	movlt	r0, r3
 800aac2:	e7a4      	b.n	800aa0e <_printf_i+0x16a>
 800aac4:	2301      	movs	r3, #1
 800aac6:	4632      	mov	r2, r6
 800aac8:	4649      	mov	r1, r9
 800aaca:	4640      	mov	r0, r8
 800aacc:	47d0      	blx	sl
 800aace:	3001      	adds	r0, #1
 800aad0:	d09b      	beq.n	800aa0a <_printf_i+0x166>
 800aad2:	3501      	adds	r5, #1
 800aad4:	68e3      	ldr	r3, [r4, #12]
 800aad6:	9903      	ldr	r1, [sp, #12]
 800aad8:	1a5b      	subs	r3, r3, r1
 800aada:	42ab      	cmp	r3, r5
 800aadc:	dcf2      	bgt.n	800aac4 <_printf_i+0x220>
 800aade:	e7eb      	b.n	800aab8 <_printf_i+0x214>
 800aae0:	2500      	movs	r5, #0
 800aae2:	f104 0619 	add.w	r6, r4, #25
 800aae6:	e7f5      	b.n	800aad4 <_printf_i+0x230>
 800aae8:	0800b811 	.word	0x0800b811
 800aaec:	0800b822 	.word	0x0800b822

0800aaf0 <_sbrk_r>:
 800aaf0:	b538      	push	{r3, r4, r5, lr}
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	4d05      	ldr	r5, [pc, #20]	; (800ab0c <_sbrk_r+0x1c>)
 800aaf6:	4604      	mov	r4, r0
 800aaf8:	4608      	mov	r0, r1
 800aafa:	602b      	str	r3, [r5, #0]
 800aafc:	f7f7 f902 	bl	8001d04 <_sbrk>
 800ab00:	1c43      	adds	r3, r0, #1
 800ab02:	d102      	bne.n	800ab0a <_sbrk_r+0x1a>
 800ab04:	682b      	ldr	r3, [r5, #0]
 800ab06:	b103      	cbz	r3, 800ab0a <_sbrk_r+0x1a>
 800ab08:	6023      	str	r3, [r4, #0]
 800ab0a:	bd38      	pop	{r3, r4, r5, pc}
 800ab0c:	20000958 	.word	0x20000958

0800ab10 <__sread>:
 800ab10:	b510      	push	{r4, lr}
 800ab12:	460c      	mov	r4, r1
 800ab14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab18:	f000 f8ae 	bl	800ac78 <_read_r>
 800ab1c:	2800      	cmp	r0, #0
 800ab1e:	bfab      	itete	ge
 800ab20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab22:	89a3      	ldrhlt	r3, [r4, #12]
 800ab24:	181b      	addge	r3, r3, r0
 800ab26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab2a:	bfac      	ite	ge
 800ab2c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab2e:	81a3      	strhlt	r3, [r4, #12]
 800ab30:	bd10      	pop	{r4, pc}

0800ab32 <__swrite>:
 800ab32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab36:	461f      	mov	r7, r3
 800ab38:	898b      	ldrh	r3, [r1, #12]
 800ab3a:	4605      	mov	r5, r0
 800ab3c:	05db      	lsls	r3, r3, #23
 800ab3e:	460c      	mov	r4, r1
 800ab40:	4616      	mov	r6, r2
 800ab42:	d505      	bpl.n	800ab50 <__swrite+0x1e>
 800ab44:	2302      	movs	r3, #2
 800ab46:	2200      	movs	r2, #0
 800ab48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab4c:	f000 f868 	bl	800ac20 <_lseek_r>
 800ab50:	89a3      	ldrh	r3, [r4, #12]
 800ab52:	4632      	mov	r2, r6
 800ab54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab58:	81a3      	strh	r3, [r4, #12]
 800ab5a:	4628      	mov	r0, r5
 800ab5c:	463b      	mov	r3, r7
 800ab5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab66:	f000 b817 	b.w	800ab98 <_write_r>

0800ab6a <__sseek>:
 800ab6a:	b510      	push	{r4, lr}
 800ab6c:	460c      	mov	r4, r1
 800ab6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab72:	f000 f855 	bl	800ac20 <_lseek_r>
 800ab76:	1c43      	adds	r3, r0, #1
 800ab78:	89a3      	ldrh	r3, [r4, #12]
 800ab7a:	bf15      	itete	ne
 800ab7c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab86:	81a3      	strheq	r3, [r4, #12]
 800ab88:	bf18      	it	ne
 800ab8a:	81a3      	strhne	r3, [r4, #12]
 800ab8c:	bd10      	pop	{r4, pc}

0800ab8e <__sclose>:
 800ab8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab92:	f000 b813 	b.w	800abbc <_close_r>
	...

0800ab98 <_write_r>:
 800ab98:	b538      	push	{r3, r4, r5, lr}
 800ab9a:	4604      	mov	r4, r0
 800ab9c:	4608      	mov	r0, r1
 800ab9e:	4611      	mov	r1, r2
 800aba0:	2200      	movs	r2, #0
 800aba2:	4d05      	ldr	r5, [pc, #20]	; (800abb8 <_write_r+0x20>)
 800aba4:	602a      	str	r2, [r5, #0]
 800aba6:	461a      	mov	r2, r3
 800aba8:	f7f7 f852 	bl	8001c50 <_write>
 800abac:	1c43      	adds	r3, r0, #1
 800abae:	d102      	bne.n	800abb6 <_write_r+0x1e>
 800abb0:	682b      	ldr	r3, [r5, #0]
 800abb2:	b103      	cbz	r3, 800abb6 <_write_r+0x1e>
 800abb4:	6023      	str	r3, [r4, #0]
 800abb6:	bd38      	pop	{r3, r4, r5, pc}
 800abb8:	20000958 	.word	0x20000958

0800abbc <_close_r>:
 800abbc:	b538      	push	{r3, r4, r5, lr}
 800abbe:	2300      	movs	r3, #0
 800abc0:	4d05      	ldr	r5, [pc, #20]	; (800abd8 <_close_r+0x1c>)
 800abc2:	4604      	mov	r4, r0
 800abc4:	4608      	mov	r0, r1
 800abc6:	602b      	str	r3, [r5, #0]
 800abc8:	f7f7 f86c 	bl	8001ca4 <_close>
 800abcc:	1c43      	adds	r3, r0, #1
 800abce:	d102      	bne.n	800abd6 <_close_r+0x1a>
 800abd0:	682b      	ldr	r3, [r5, #0]
 800abd2:	b103      	cbz	r3, 800abd6 <_close_r+0x1a>
 800abd4:	6023      	str	r3, [r4, #0]
 800abd6:	bd38      	pop	{r3, r4, r5, pc}
 800abd8:	20000958 	.word	0x20000958

0800abdc <_fstat_r>:
 800abdc:	b538      	push	{r3, r4, r5, lr}
 800abde:	2300      	movs	r3, #0
 800abe0:	4d06      	ldr	r5, [pc, #24]	; (800abfc <_fstat_r+0x20>)
 800abe2:	4604      	mov	r4, r0
 800abe4:	4608      	mov	r0, r1
 800abe6:	4611      	mov	r1, r2
 800abe8:	602b      	str	r3, [r5, #0]
 800abea:	f7f7 f866 	bl	8001cba <_fstat>
 800abee:	1c43      	adds	r3, r0, #1
 800abf0:	d102      	bne.n	800abf8 <_fstat_r+0x1c>
 800abf2:	682b      	ldr	r3, [r5, #0]
 800abf4:	b103      	cbz	r3, 800abf8 <_fstat_r+0x1c>
 800abf6:	6023      	str	r3, [r4, #0]
 800abf8:	bd38      	pop	{r3, r4, r5, pc}
 800abfa:	bf00      	nop
 800abfc:	20000958 	.word	0x20000958

0800ac00 <_isatty_r>:
 800ac00:	b538      	push	{r3, r4, r5, lr}
 800ac02:	2300      	movs	r3, #0
 800ac04:	4d05      	ldr	r5, [pc, #20]	; (800ac1c <_isatty_r+0x1c>)
 800ac06:	4604      	mov	r4, r0
 800ac08:	4608      	mov	r0, r1
 800ac0a:	602b      	str	r3, [r5, #0]
 800ac0c:	f7f7 f864 	bl	8001cd8 <_isatty>
 800ac10:	1c43      	adds	r3, r0, #1
 800ac12:	d102      	bne.n	800ac1a <_isatty_r+0x1a>
 800ac14:	682b      	ldr	r3, [r5, #0]
 800ac16:	b103      	cbz	r3, 800ac1a <_isatty_r+0x1a>
 800ac18:	6023      	str	r3, [r4, #0]
 800ac1a:	bd38      	pop	{r3, r4, r5, pc}
 800ac1c:	20000958 	.word	0x20000958

0800ac20 <_lseek_r>:
 800ac20:	b538      	push	{r3, r4, r5, lr}
 800ac22:	4604      	mov	r4, r0
 800ac24:	4608      	mov	r0, r1
 800ac26:	4611      	mov	r1, r2
 800ac28:	2200      	movs	r2, #0
 800ac2a:	4d05      	ldr	r5, [pc, #20]	; (800ac40 <_lseek_r+0x20>)
 800ac2c:	602a      	str	r2, [r5, #0]
 800ac2e:	461a      	mov	r2, r3
 800ac30:	f7f7 f85c 	bl	8001cec <_lseek>
 800ac34:	1c43      	adds	r3, r0, #1
 800ac36:	d102      	bne.n	800ac3e <_lseek_r+0x1e>
 800ac38:	682b      	ldr	r3, [r5, #0]
 800ac3a:	b103      	cbz	r3, 800ac3e <_lseek_r+0x1e>
 800ac3c:	6023      	str	r3, [r4, #0]
 800ac3e:	bd38      	pop	{r3, r4, r5, pc}
 800ac40:	20000958 	.word	0x20000958

0800ac44 <memchr>:
 800ac44:	4603      	mov	r3, r0
 800ac46:	b510      	push	{r4, lr}
 800ac48:	b2c9      	uxtb	r1, r1
 800ac4a:	4402      	add	r2, r0
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	4618      	mov	r0, r3
 800ac50:	d101      	bne.n	800ac56 <memchr+0x12>
 800ac52:	2000      	movs	r0, #0
 800ac54:	e003      	b.n	800ac5e <memchr+0x1a>
 800ac56:	7804      	ldrb	r4, [r0, #0]
 800ac58:	3301      	adds	r3, #1
 800ac5a:	428c      	cmp	r4, r1
 800ac5c:	d1f6      	bne.n	800ac4c <memchr+0x8>
 800ac5e:	bd10      	pop	{r4, pc}

0800ac60 <__malloc_lock>:
 800ac60:	4801      	ldr	r0, [pc, #4]	; (800ac68 <__malloc_lock+0x8>)
 800ac62:	f7ff bb4b 	b.w	800a2fc <__retarget_lock_acquire_recursive>
 800ac66:	bf00      	nop
 800ac68:	20000950 	.word	0x20000950

0800ac6c <__malloc_unlock>:
 800ac6c:	4801      	ldr	r0, [pc, #4]	; (800ac74 <__malloc_unlock+0x8>)
 800ac6e:	f7ff bb46 	b.w	800a2fe <__retarget_lock_release_recursive>
 800ac72:	bf00      	nop
 800ac74:	20000950 	.word	0x20000950

0800ac78 <_read_r>:
 800ac78:	b538      	push	{r3, r4, r5, lr}
 800ac7a:	4604      	mov	r4, r0
 800ac7c:	4608      	mov	r0, r1
 800ac7e:	4611      	mov	r1, r2
 800ac80:	2200      	movs	r2, #0
 800ac82:	4d05      	ldr	r5, [pc, #20]	; (800ac98 <_read_r+0x20>)
 800ac84:	602a      	str	r2, [r5, #0]
 800ac86:	461a      	mov	r2, r3
 800ac88:	f7f6 ffc4 	bl	8001c14 <_read>
 800ac8c:	1c43      	adds	r3, r0, #1
 800ac8e:	d102      	bne.n	800ac96 <_read_r+0x1e>
 800ac90:	682b      	ldr	r3, [r5, #0]
 800ac92:	b103      	cbz	r3, 800ac96 <_read_r+0x1e>
 800ac94:	6023      	str	r3, [r4, #0]
 800ac96:	bd38      	pop	{r3, r4, r5, pc}
 800ac98:	20000958 	.word	0x20000958

0800ac9c <_init>:
 800ac9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac9e:	bf00      	nop
 800aca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aca2:	bc08      	pop	{r3}
 800aca4:	469e      	mov	lr, r3
 800aca6:	4770      	bx	lr

0800aca8 <_fini>:
 800aca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acaa:	bf00      	nop
 800acac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acae:	bc08      	pop	{r3}
 800acb0:	469e      	mov	lr, r3
 800acb2:	4770      	bx	lr
