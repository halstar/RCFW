
RCFW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac7c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bfc  0800ae60  0800ae60  0001ae60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba5c  0800ba5c  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800ba5c  0800ba5c  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ba5c  0800ba5c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba5c  0800ba5c  0001ba5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba60  0800ba60  0001ba60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800ba64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e4  20000080  0800bae4  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000964  0800bae4  00020964  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000194b7  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b4b  00000000  00000000  00039560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a0  00000000  00000000  0003d0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f8  00000000  00000000  0003e450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e594  00000000  00000000  0003f648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab30  00000000  00000000  0005dbdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a56a8  00000000  00000000  0007870c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011ddb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058f0  00000000  00000000  0011de08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000080 	.word	0x20000080
 8000200:	00000000 	.word	0x00000000
 8000204:	0800ae48 	.word	0x0800ae48

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000084 	.word	0x20000084
 8000220:	0800ae48 	.word	0x0800ae48

08000224 <__aeabi_frsub>:
 8000224:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000228:	e002      	b.n	8000230 <__addsf3>
 800022a:	bf00      	nop

0800022c <__aeabi_fsub>:
 800022c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000230 <__addsf3>:
 8000230:	0042      	lsls	r2, r0, #1
 8000232:	bf1f      	itttt	ne
 8000234:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000238:	ea92 0f03 	teqne	r2, r3
 800023c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000240:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000244:	d06a      	beq.n	800031c <__addsf3+0xec>
 8000246:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800024a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800024e:	bfc1      	itttt	gt
 8000250:	18d2      	addgt	r2, r2, r3
 8000252:	4041      	eorgt	r1, r0
 8000254:	4048      	eorgt	r0, r1
 8000256:	4041      	eorgt	r1, r0
 8000258:	bfb8      	it	lt
 800025a:	425b      	neglt	r3, r3
 800025c:	2b19      	cmp	r3, #25
 800025e:	bf88      	it	hi
 8000260:	4770      	bxhi	lr
 8000262:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000266:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800026a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800026e:	bf18      	it	ne
 8000270:	4240      	negne	r0, r0
 8000272:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000276:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800027a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800027e:	bf18      	it	ne
 8000280:	4249      	negne	r1, r1
 8000282:	ea92 0f03 	teq	r2, r3
 8000286:	d03f      	beq.n	8000308 <__addsf3+0xd8>
 8000288:	f1a2 0201 	sub.w	r2, r2, #1
 800028c:	fa41 fc03 	asr.w	ip, r1, r3
 8000290:	eb10 000c 	adds.w	r0, r0, ip
 8000294:	f1c3 0320 	rsb	r3, r3, #32
 8000298:	fa01 f103 	lsl.w	r1, r1, r3
 800029c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002a0:	d502      	bpl.n	80002a8 <__addsf3+0x78>
 80002a2:	4249      	negs	r1, r1
 80002a4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80002a8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80002ac:	d313      	bcc.n	80002d6 <__addsf3+0xa6>
 80002ae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002b2:	d306      	bcc.n	80002c2 <__addsf3+0x92>
 80002b4:	0840      	lsrs	r0, r0, #1
 80002b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80002ba:	f102 0201 	add.w	r2, r2, #1
 80002be:	2afe      	cmp	r2, #254	; 0xfe
 80002c0:	d251      	bcs.n	8000366 <__addsf3+0x136>
 80002c2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80002c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80002ca:	bf08      	it	eq
 80002cc:	f020 0001 	biceq.w	r0, r0, #1
 80002d0:	ea40 0003 	orr.w	r0, r0, r3
 80002d4:	4770      	bx	lr
 80002d6:	0049      	lsls	r1, r1, #1
 80002d8:	eb40 0000 	adc.w	r0, r0, r0
 80002dc:	3a01      	subs	r2, #1
 80002de:	bf28      	it	cs
 80002e0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80002e4:	d2ed      	bcs.n	80002c2 <__addsf3+0x92>
 80002e6:	fab0 fc80 	clz	ip, r0
 80002ea:	f1ac 0c08 	sub.w	ip, ip, #8
 80002ee:	ebb2 020c 	subs.w	r2, r2, ip
 80002f2:	fa00 f00c 	lsl.w	r0, r0, ip
 80002f6:	bfaa      	itet	ge
 80002f8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002fc:	4252      	neglt	r2, r2
 80002fe:	4318      	orrge	r0, r3
 8000300:	bfbc      	itt	lt
 8000302:	40d0      	lsrlt	r0, r2
 8000304:	4318      	orrlt	r0, r3
 8000306:	4770      	bx	lr
 8000308:	f092 0f00 	teq	r2, #0
 800030c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000310:	bf06      	itte	eq
 8000312:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000316:	3201      	addeq	r2, #1
 8000318:	3b01      	subne	r3, #1
 800031a:	e7b5      	b.n	8000288 <__addsf3+0x58>
 800031c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000320:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000324:	bf18      	it	ne
 8000326:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800032a:	d021      	beq.n	8000370 <__addsf3+0x140>
 800032c:	ea92 0f03 	teq	r2, r3
 8000330:	d004      	beq.n	800033c <__addsf3+0x10c>
 8000332:	f092 0f00 	teq	r2, #0
 8000336:	bf08      	it	eq
 8000338:	4608      	moveq	r0, r1
 800033a:	4770      	bx	lr
 800033c:	ea90 0f01 	teq	r0, r1
 8000340:	bf1c      	itt	ne
 8000342:	2000      	movne	r0, #0
 8000344:	4770      	bxne	lr
 8000346:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 800034a:	d104      	bne.n	8000356 <__addsf3+0x126>
 800034c:	0040      	lsls	r0, r0, #1
 800034e:	bf28      	it	cs
 8000350:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000354:	4770      	bx	lr
 8000356:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800035a:	bf3c      	itt	cc
 800035c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000360:	4770      	bxcc	lr
 8000362:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000366:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800036a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800036e:	4770      	bx	lr
 8000370:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000374:	bf16      	itet	ne
 8000376:	4608      	movne	r0, r1
 8000378:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800037c:	4601      	movne	r1, r0
 800037e:	0242      	lsls	r2, r0, #9
 8000380:	bf06      	itte	eq
 8000382:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000386:	ea90 0f01 	teqeq	r0, r1
 800038a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800038e:	4770      	bx	lr

08000390 <__aeabi_ui2f>:
 8000390:	f04f 0300 	mov.w	r3, #0
 8000394:	e004      	b.n	80003a0 <__aeabi_i2f+0x8>
 8000396:	bf00      	nop

08000398 <__aeabi_i2f>:
 8000398:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800039c:	bf48      	it	mi
 800039e:	4240      	negmi	r0, r0
 80003a0:	ea5f 0c00 	movs.w	ip, r0
 80003a4:	bf08      	it	eq
 80003a6:	4770      	bxeq	lr
 80003a8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80003ac:	4601      	mov	r1, r0
 80003ae:	f04f 0000 	mov.w	r0, #0
 80003b2:	e01c      	b.n	80003ee <__aeabi_l2f+0x2a>

080003b4 <__aeabi_ul2f>:
 80003b4:	ea50 0201 	orrs.w	r2, r0, r1
 80003b8:	bf08      	it	eq
 80003ba:	4770      	bxeq	lr
 80003bc:	f04f 0300 	mov.w	r3, #0
 80003c0:	e00a      	b.n	80003d8 <__aeabi_l2f+0x14>
 80003c2:	bf00      	nop

080003c4 <__aeabi_l2f>:
 80003c4:	ea50 0201 	orrs.w	r2, r0, r1
 80003c8:	bf08      	it	eq
 80003ca:	4770      	bxeq	lr
 80003cc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80003d0:	d502      	bpl.n	80003d8 <__aeabi_l2f+0x14>
 80003d2:	4240      	negs	r0, r0
 80003d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003d8:	ea5f 0c01 	movs.w	ip, r1
 80003dc:	bf02      	ittt	eq
 80003de:	4684      	moveq	ip, r0
 80003e0:	4601      	moveq	r1, r0
 80003e2:	2000      	moveq	r0, #0
 80003e4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003e8:	bf08      	it	eq
 80003ea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003ee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003f2:	fabc f28c 	clz	r2, ip
 80003f6:	3a08      	subs	r2, #8
 80003f8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003fc:	db10      	blt.n	8000420 <__aeabi_l2f+0x5c>
 80003fe:	fa01 fc02 	lsl.w	ip, r1, r2
 8000402:	4463      	add	r3, ip
 8000404:	fa00 fc02 	lsl.w	ip, r0, r2
 8000408:	f1c2 0220 	rsb	r2, r2, #32
 800040c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000410:	fa20 f202 	lsr.w	r2, r0, r2
 8000414:	eb43 0002 	adc.w	r0, r3, r2
 8000418:	bf08      	it	eq
 800041a:	f020 0001 	biceq.w	r0, r0, #1
 800041e:	4770      	bx	lr
 8000420:	f102 0220 	add.w	r2, r2, #32
 8000424:	fa01 fc02 	lsl.w	ip, r1, r2
 8000428:	f1c2 0220 	rsb	r2, r2, #32
 800042c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000430:	fa21 f202 	lsr.w	r2, r1, r2
 8000434:	eb43 0002 	adc.w	r0, r3, r2
 8000438:	bf08      	it	eq
 800043a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043e:	4770      	bx	lr

08000440 <__aeabi_fmul>:
 8000440:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000444:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000448:	bf1e      	ittt	ne
 800044a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800044e:	ea92 0f0c 	teqne	r2, ip
 8000452:	ea93 0f0c 	teqne	r3, ip
 8000456:	d06f      	beq.n	8000538 <__aeabi_fmul+0xf8>
 8000458:	441a      	add	r2, r3
 800045a:	ea80 0c01 	eor.w	ip, r0, r1
 800045e:	0240      	lsls	r0, r0, #9
 8000460:	bf18      	it	ne
 8000462:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000466:	d01e      	beq.n	80004a6 <__aeabi_fmul+0x66>
 8000468:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800046c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000470:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000474:	fba0 3101 	umull	r3, r1, r0, r1
 8000478:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800047c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000480:	bf3e      	ittt	cc
 8000482:	0049      	lslcc	r1, r1, #1
 8000484:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000488:	005b      	lslcc	r3, r3, #1
 800048a:	ea40 0001 	orr.w	r0, r0, r1
 800048e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000492:	2afd      	cmp	r2, #253	; 0xfd
 8000494:	d81d      	bhi.n	80004d2 <__aeabi_fmul+0x92>
 8000496:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800049a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800049e:	bf08      	it	eq
 80004a0:	f020 0001 	biceq.w	r0, r0, #1
 80004a4:	4770      	bx	lr
 80004a6:	f090 0f00 	teq	r0, #0
 80004aa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80004ae:	bf08      	it	eq
 80004b0:	0249      	lsleq	r1, r1, #9
 80004b2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80004b6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80004ba:	3a7f      	subs	r2, #127	; 0x7f
 80004bc:	bfc2      	ittt	gt
 80004be:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80004c2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80004c6:	4770      	bxgt	lr
 80004c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004cc:	f04f 0300 	mov.w	r3, #0
 80004d0:	3a01      	subs	r2, #1
 80004d2:	dc5d      	bgt.n	8000590 <__aeabi_fmul+0x150>
 80004d4:	f112 0f19 	cmn.w	r2, #25
 80004d8:	bfdc      	itt	le
 80004da:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80004de:	4770      	bxle	lr
 80004e0:	f1c2 0200 	rsb	r2, r2, #0
 80004e4:	0041      	lsls	r1, r0, #1
 80004e6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ea:	f1c2 0220 	rsb	r2, r2, #32
 80004ee:	fa00 fc02 	lsl.w	ip, r0, r2
 80004f2:	ea5f 0031 	movs.w	r0, r1, rrx
 80004f6:	f140 0000 	adc.w	r0, r0, #0
 80004fa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004fe:	bf08      	it	eq
 8000500:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000504:	4770      	bx	lr
 8000506:	f092 0f00 	teq	r2, #0
 800050a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800050e:	bf02      	ittt	eq
 8000510:	0040      	lsleq	r0, r0, #1
 8000512:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000516:	3a01      	subeq	r2, #1
 8000518:	d0f9      	beq.n	800050e <__aeabi_fmul+0xce>
 800051a:	ea40 000c 	orr.w	r0, r0, ip
 800051e:	f093 0f00 	teq	r3, #0
 8000522:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000526:	bf02      	ittt	eq
 8000528:	0049      	lsleq	r1, r1, #1
 800052a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800052e:	3b01      	subeq	r3, #1
 8000530:	d0f9      	beq.n	8000526 <__aeabi_fmul+0xe6>
 8000532:	ea41 010c 	orr.w	r1, r1, ip
 8000536:	e78f      	b.n	8000458 <__aeabi_fmul+0x18>
 8000538:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800053c:	ea92 0f0c 	teq	r2, ip
 8000540:	bf18      	it	ne
 8000542:	ea93 0f0c 	teqne	r3, ip
 8000546:	d00a      	beq.n	800055e <__aeabi_fmul+0x11e>
 8000548:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800054c:	bf18      	it	ne
 800054e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000552:	d1d8      	bne.n	8000506 <__aeabi_fmul+0xc6>
 8000554:	ea80 0001 	eor.w	r0, r0, r1
 8000558:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800055c:	4770      	bx	lr
 800055e:	f090 0f00 	teq	r0, #0
 8000562:	bf17      	itett	ne
 8000564:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000568:	4608      	moveq	r0, r1
 800056a:	f091 0f00 	teqne	r1, #0
 800056e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000572:	d014      	beq.n	800059e <__aeabi_fmul+0x15e>
 8000574:	ea92 0f0c 	teq	r2, ip
 8000578:	d101      	bne.n	800057e <__aeabi_fmul+0x13e>
 800057a:	0242      	lsls	r2, r0, #9
 800057c:	d10f      	bne.n	800059e <__aeabi_fmul+0x15e>
 800057e:	ea93 0f0c 	teq	r3, ip
 8000582:	d103      	bne.n	800058c <__aeabi_fmul+0x14c>
 8000584:	024b      	lsls	r3, r1, #9
 8000586:	bf18      	it	ne
 8000588:	4608      	movne	r0, r1
 800058a:	d108      	bne.n	800059e <__aeabi_fmul+0x15e>
 800058c:	ea80 0001 	eor.w	r0, r0, r1
 8000590:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000594:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000598:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800059c:	4770      	bx	lr
 800059e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005a2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80005a6:	4770      	bx	lr

080005a8 <__aeabi_fdiv>:
 80005a8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80005b0:	bf1e      	ittt	ne
 80005b2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80005b6:	ea92 0f0c 	teqne	r2, ip
 80005ba:	ea93 0f0c 	teqne	r3, ip
 80005be:	d069      	beq.n	8000694 <__aeabi_fdiv+0xec>
 80005c0:	eba2 0203 	sub.w	r2, r2, r3
 80005c4:	ea80 0c01 	eor.w	ip, r0, r1
 80005c8:	0249      	lsls	r1, r1, #9
 80005ca:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80005ce:	d037      	beq.n	8000640 <__aeabi_fdiv+0x98>
 80005d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005d4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80005d8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80005dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80005e0:	428b      	cmp	r3, r1
 80005e2:	bf38      	it	cc
 80005e4:	005b      	lslcc	r3, r3, #1
 80005e6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005ea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80005ee:	428b      	cmp	r3, r1
 80005f0:	bf24      	itt	cs
 80005f2:	1a5b      	subcs	r3, r3, r1
 80005f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80005f8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005fc:	bf24      	itt	cs
 80005fe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000602:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000606:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800060a:	bf24      	itt	cs
 800060c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000610:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000614:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000618:	bf24      	itt	cs
 800061a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800061e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000622:	011b      	lsls	r3, r3, #4
 8000624:	bf18      	it	ne
 8000626:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800062a:	d1e0      	bne.n	80005ee <__aeabi_fdiv+0x46>
 800062c:	2afd      	cmp	r2, #253	; 0xfd
 800062e:	f63f af50 	bhi.w	80004d2 <__aeabi_fmul+0x92>
 8000632:	428b      	cmp	r3, r1
 8000634:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000638:	bf08      	it	eq
 800063a:	f020 0001 	biceq.w	r0, r0, #1
 800063e:	4770      	bx	lr
 8000640:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000644:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000648:	327f      	adds	r2, #127	; 0x7f
 800064a:	bfc2      	ittt	gt
 800064c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000650:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000654:	4770      	bxgt	lr
 8000656:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800065a:	f04f 0300 	mov.w	r3, #0
 800065e:	3a01      	subs	r2, #1
 8000660:	e737      	b.n	80004d2 <__aeabi_fmul+0x92>
 8000662:	f092 0f00 	teq	r2, #0
 8000666:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800066a:	bf02      	ittt	eq
 800066c:	0040      	lsleq	r0, r0, #1
 800066e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000672:	3a01      	subeq	r2, #1
 8000674:	d0f9      	beq.n	800066a <__aeabi_fdiv+0xc2>
 8000676:	ea40 000c 	orr.w	r0, r0, ip
 800067a:	f093 0f00 	teq	r3, #0
 800067e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000682:	bf02      	ittt	eq
 8000684:	0049      	lsleq	r1, r1, #1
 8000686:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800068a:	3b01      	subeq	r3, #1
 800068c:	d0f9      	beq.n	8000682 <__aeabi_fdiv+0xda>
 800068e:	ea41 010c 	orr.w	r1, r1, ip
 8000692:	e795      	b.n	80005c0 <__aeabi_fdiv+0x18>
 8000694:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000698:	ea92 0f0c 	teq	r2, ip
 800069c:	d108      	bne.n	80006b0 <__aeabi_fdiv+0x108>
 800069e:	0242      	lsls	r2, r0, #9
 80006a0:	f47f af7d 	bne.w	800059e <__aeabi_fmul+0x15e>
 80006a4:	ea93 0f0c 	teq	r3, ip
 80006a8:	f47f af70 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006ac:	4608      	mov	r0, r1
 80006ae:	e776      	b.n	800059e <__aeabi_fmul+0x15e>
 80006b0:	ea93 0f0c 	teq	r3, ip
 80006b4:	d104      	bne.n	80006c0 <__aeabi_fdiv+0x118>
 80006b6:	024b      	lsls	r3, r1, #9
 80006b8:	f43f af4c 	beq.w	8000554 <__aeabi_fmul+0x114>
 80006bc:	4608      	mov	r0, r1
 80006be:	e76e      	b.n	800059e <__aeabi_fmul+0x15e>
 80006c0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80006c4:	bf18      	it	ne
 80006c6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80006ca:	d1ca      	bne.n	8000662 <__aeabi_fdiv+0xba>
 80006cc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80006d0:	f47f af5c 	bne.w	800058c <__aeabi_fmul+0x14c>
 80006d4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80006d8:	f47f af3c 	bne.w	8000554 <__aeabi_fmul+0x114>
 80006dc:	e75f      	b.n	800059e <__aeabi_fmul+0x15e>
 80006de:	bf00      	nop

080006e0 <__gesf2>:
 80006e0:	f04f 3cff 	mov.w	ip, #4294967295
 80006e4:	e006      	b.n	80006f4 <__cmpsf2+0x4>
 80006e6:	bf00      	nop

080006e8 <__lesf2>:
 80006e8:	f04f 0c01 	mov.w	ip, #1
 80006ec:	e002      	b.n	80006f4 <__cmpsf2+0x4>
 80006ee:	bf00      	nop

080006f0 <__cmpsf2>:
 80006f0:	f04f 0c01 	mov.w	ip, #1
 80006f4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80006f8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006fc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000700:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000704:	bf18      	it	ne
 8000706:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800070a:	d011      	beq.n	8000730 <__cmpsf2+0x40>
 800070c:	b001      	add	sp, #4
 800070e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000712:	bf18      	it	ne
 8000714:	ea90 0f01 	teqne	r0, r1
 8000718:	bf58      	it	pl
 800071a:	ebb2 0003 	subspl.w	r0, r2, r3
 800071e:	bf88      	it	hi
 8000720:	17c8      	asrhi	r0, r1, #31
 8000722:	bf38      	it	cc
 8000724:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000728:	bf18      	it	ne
 800072a:	f040 0001 	orrne.w	r0, r0, #1
 800072e:	4770      	bx	lr
 8000730:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000734:	d102      	bne.n	800073c <__cmpsf2+0x4c>
 8000736:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800073a:	d105      	bne.n	8000748 <__cmpsf2+0x58>
 800073c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000740:	d1e4      	bne.n	800070c <__cmpsf2+0x1c>
 8000742:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000746:	d0e1      	beq.n	800070c <__cmpsf2+0x1c>
 8000748:	f85d 0b04 	ldr.w	r0, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop

08000750 <__aeabi_cfrcmple>:
 8000750:	4684      	mov	ip, r0
 8000752:	4608      	mov	r0, r1
 8000754:	4661      	mov	r1, ip
 8000756:	e7ff      	b.n	8000758 <__aeabi_cfcmpeq>

08000758 <__aeabi_cfcmpeq>:
 8000758:	b50f      	push	{r0, r1, r2, r3, lr}
 800075a:	f7ff ffc9 	bl	80006f0 <__cmpsf2>
 800075e:	2800      	cmp	r0, #0
 8000760:	bf48      	it	mi
 8000762:	f110 0f00 	cmnmi.w	r0, #0
 8000766:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000768 <__aeabi_fcmpeq>:
 8000768:	f84d ed08 	str.w	lr, [sp, #-8]!
 800076c:	f7ff fff4 	bl	8000758 <__aeabi_cfcmpeq>
 8000770:	bf0c      	ite	eq
 8000772:	2001      	moveq	r0, #1
 8000774:	2000      	movne	r0, #0
 8000776:	f85d fb08 	ldr.w	pc, [sp], #8
 800077a:	bf00      	nop

0800077c <__aeabi_fcmplt>:
 800077c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000780:	f7ff ffea 	bl	8000758 <__aeabi_cfcmpeq>
 8000784:	bf34      	ite	cc
 8000786:	2001      	movcc	r0, #1
 8000788:	2000      	movcs	r0, #0
 800078a:	f85d fb08 	ldr.w	pc, [sp], #8
 800078e:	bf00      	nop

08000790 <__aeabi_fcmple>:
 8000790:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000794:	f7ff ffe0 	bl	8000758 <__aeabi_cfcmpeq>
 8000798:	bf94      	ite	ls
 800079a:	2001      	movls	r0, #1
 800079c:	2000      	movhi	r0, #0
 800079e:	f85d fb08 	ldr.w	pc, [sp], #8
 80007a2:	bf00      	nop

080007a4 <__aeabi_fcmpge>:
 80007a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007a8:	f7ff ffd2 	bl	8000750 <__aeabi_cfrcmple>
 80007ac:	bf94      	ite	ls
 80007ae:	2001      	movls	r0, #1
 80007b0:	2000      	movhi	r0, #0
 80007b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80007b6:	bf00      	nop

080007b8 <__aeabi_fcmpgt>:
 80007b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007bc:	f7ff ffc8 	bl	8000750 <__aeabi_cfrcmple>
 80007c0:	bf34      	ite	cc
 80007c2:	2001      	movcc	r0, #1
 80007c4:	2000      	movcs	r0, #0
 80007c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ca:	bf00      	nop

080007cc <__aeabi_f2iz>:
 80007cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80007d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80007d4:	d30f      	bcc.n	80007f6 <__aeabi_f2iz+0x2a>
 80007d6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80007da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80007de:	d90d      	bls.n	80007fc <__aeabi_f2iz+0x30>
 80007e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80007e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007e8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007ec:	fa23 f002 	lsr.w	r0, r3, r2
 80007f0:	bf18      	it	ne
 80007f2:	4240      	negne	r0, r0
 80007f4:	4770      	bx	lr
 80007f6:	f04f 0000 	mov.w	r0, #0
 80007fa:	4770      	bx	lr
 80007fc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000800:	d101      	bne.n	8000806 <__aeabi_f2iz+0x3a>
 8000802:	0242      	lsls	r2, r0, #9
 8000804:	d105      	bne.n	8000812 <__aeabi_f2iz+0x46>
 8000806:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800080a:	bf08      	it	eq
 800080c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000810:	4770      	bx	lr
 8000812:	f04f 0000 	mov.w	r0, #0
 8000816:	4770      	bx	lr

08000818 <__aeabi_f2uiz>:
 8000818:	0042      	lsls	r2, r0, #1
 800081a:	d20e      	bcs.n	800083a <__aeabi_f2uiz+0x22>
 800081c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000820:	d30b      	bcc.n	800083a <__aeabi_f2uiz+0x22>
 8000822:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000826:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800082a:	d409      	bmi.n	8000840 <__aeabi_f2uiz+0x28>
 800082c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000830:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000834:	fa23 f002 	lsr.w	r0, r3, r2
 8000838:	4770      	bx	lr
 800083a:	f04f 0000 	mov.w	r0, #0
 800083e:	4770      	bx	lr
 8000840:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000844:	d101      	bne.n	800084a <__aeabi_f2uiz+0x32>
 8000846:	0242      	lsls	r2, r0, #9
 8000848:	d102      	bne.n	8000850 <__aeabi_f2uiz+0x38>
 800084a:	f04f 30ff 	mov.w	r0, #4294967295
 800084e:	4770      	bx	lr
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop

08000858 <MAIN_displayRcfwBanner>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void MAIN_displayRcfwBanner(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* Used ASCII art generator from https://patorjk.com with font called "Colossal" */
  LOG_info("");
 800085c:	4914      	ldr	r1, [pc, #80]	; (80008b0 <MAIN_displayRcfwBanner+0x58>)
 800085e:	2001      	movs	r0, #1
 8000860:	f009 f83e 	bl	80098e0 <LOG_log>
  LOG_info("    8888888b.        .d8888b.       8888888888      888       888"  );
 8000864:	4913      	ldr	r1, [pc, #76]	; (80008b4 <MAIN_displayRcfwBanner+0x5c>)
 8000866:	2001      	movs	r0, #1
 8000868:	f009 f83a 	bl	80098e0 <LOG_log>
  LOG_info("    888   Y88b      d88P  Y88b      888             888   o   888"  );
 800086c:	4912      	ldr	r1, [pc, #72]	; (80008b8 <MAIN_displayRcfwBanner+0x60>)
 800086e:	2001      	movs	r0, #1
 8000870:	f009 f836 	bl	80098e0 <LOG_log>
  LOG_info("    888    888      888    888      888             888  d8b  888"  );
 8000874:	4911      	ldr	r1, [pc, #68]	; (80008bc <MAIN_displayRcfwBanner+0x64>)
 8000876:	2001      	movs	r0, #1
 8000878:	f009 f832 	bl	80098e0 <LOG_log>
  LOG_info("    888   d88P      888             8888888         888 d888b 888"  );
 800087c:	4910      	ldr	r1, [pc, #64]	; (80008c0 <MAIN_displayRcfwBanner+0x68>)
 800087e:	2001      	movs	r0, #1
 8000880:	f009 f82e 	bl	80098e0 <LOG_log>
  LOG_info("    8888888P\"       888             888             888d88888b888" );
 8000884:	490f      	ldr	r1, [pc, #60]	; (80008c4 <MAIN_displayRcfwBanner+0x6c>)
 8000886:	2001      	movs	r0, #1
 8000888:	f009 f82a 	bl	80098e0 <LOG_log>
  LOG_info("    888 T88b        888    888      888             88888P Y88888"  );
 800088c:	490e      	ldr	r1, [pc, #56]	; (80008c8 <MAIN_displayRcfwBanner+0x70>)
 800088e:	2001      	movs	r0, #1
 8000890:	f009 f826 	bl	80098e0 <LOG_log>
  LOG_info("    888  T88b       Y88b  d88P      888             8888P   Y8888"  );
 8000894:	490d      	ldr	r1, [pc, #52]	; (80008cc <MAIN_displayRcfwBanner+0x74>)
 8000896:	2001      	movs	r0, #1
 8000898:	f009 f822 	bl	80098e0 <LOG_log>
  LOG_info("    888   T88b       \"Y8888P\"       888             888P     Y888");
 800089c:	490c      	ldr	r1, [pc, #48]	; (80008d0 <MAIN_displayRcfwBanner+0x78>)
 800089e:	2001      	movs	r0, #1
 80008a0:	f009 f81e 	bl	80098e0 <LOG_log>
  LOG_info("");
 80008a4:	4902      	ldr	r1, [pc, #8]	; (80008b0 <MAIN_displayRcfwBanner+0x58>)
 80008a6:	2001      	movs	r0, #1
 80008a8:	f009 f81a 	bl	80098e0 <LOG_log>

  return;
 80008ac:	bf00      	nop
}
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	0800ae60 	.word	0x0800ae60
 80008b4:	0800ae64 	.word	0x0800ae64
 80008b8:	0800aea8 	.word	0x0800aea8
 80008bc:	0800aeec 	.word	0x0800aeec
 80008c0:	0800af30 	.word	0x0800af30
 80008c4:	0800af74 	.word	0x0800af74
 80008c8:	0800afb8 	.word	0x0800afb8
 80008cc:	0800affc 	.word	0x0800affc
 80008d0:	0800b040 	.word	0x0800b040

080008d4 <MAIN_updateLogLevel>:

static void MAIN_updateLogLevel(T_BLU_Data *p_data)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef l_time;
  RTC_DateTypeDef l_date;

  HAL_RTC_GetTime(&hrtc, &l_time, RTC_FORMAT_BCD);
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	2201      	movs	r2, #1
 80008e2:	4619      	mov	r1, r3
 80008e4:	4839      	ldr	r0, [pc, #228]	; (80009cc <MAIN_updateLogLevel+0xf8>)
 80008e6:	f004 f86b 	bl	80049c0 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &l_date, RTC_FORMAT_BCD);
 80008ea:	f107 0308 	add.w	r3, r7, #8
 80008ee:	2201      	movs	r2, #1
 80008f0:	4619      	mov	r1, r3
 80008f2:	4836      	ldr	r0, [pc, #216]	; (80009cc <MAIN_updateLogLevel+0xf8>)
 80008f4:	f004 fa68 	bl	8004dc8 <HAL_RTC_GetDate>

  switch (p_data->button)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	7c1b      	ldrb	r3, [r3, #16]
 80008fc:	3b05      	subs	r3, #5
 80008fe:	2b03      	cmp	r3, #3
 8000900:	d84c      	bhi.n	800099c <MAIN_updateLogLevel+0xc8>
 8000902:	a201      	add	r2, pc, #4	; (adr r2, 8000908 <MAIN_updateLogLevel+0x34>)
 8000904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000908:	08000919 	.word	0x08000919
 800090c:	08000997 	.word	0x08000997
 8000910:	08000955 	.word	0x08000955
 8000914:	08000991 	.word	0x08000991
  {
    case BLU_BUTTON_PAD_UP:
      if (g_MAIN_padUpPressedStartTime == 0)
 8000918:	4b2d      	ldr	r3, [pc, #180]	; (80009d0 <MAIN_updateLogLevel+0xfc>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d10a      	bne.n	8000936 <MAIN_updateLogLevel+0x62>
      {
        g_MAIN_padUpPressedStartTime = UTI_turnRtcTimeToSeconds(&l_time);
 8000920:	f107 030c 	add.w	r3, r7, #12
 8000924:	4618      	mov	r0, r3
 8000926:	f009 fa2f 	bl	8009d88 <UTI_turnRtcTimeToSeconds>
 800092a:	4603      	mov	r3, r0
 800092c:	4a28      	ldr	r2, [pc, #160]	; (80009d0 <MAIN_updateLogLevel+0xfc>)
 800092e:	6013      	str	r3, [r2, #0]

        LOG_increaseLevel();
 8000930:	f008 ffa6 	bl	8009880 <LOG_increaseLevel>
      }
      else
      {
        g_MAIN_padUpPressedStartTime = 0;
      }
      break;
 8000934:	e034      	b.n	80009a0 <MAIN_updateLogLevel+0xcc>
      else if (UTI_turnRtcTimeToSeconds(&l_time) - g_MAIN_padUpPressedStartTime < MAIN_PAD_BUTTON_PERIOD_IN_S)
 8000936:	f107 030c 	add.w	r3, r7, #12
 800093a:	4618      	mov	r0, r3
 800093c:	f009 fa24 	bl	8009d88 <UTI_turnRtcTimeToSeconds>
 8000940:	4602      	mov	r2, r0
 8000942:	4b23      	ldr	r3, [pc, #140]	; (80009d0 <MAIN_updateLogLevel+0xfc>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	1ad3      	subs	r3, r2, r3
 8000948:	2b01      	cmp	r3, #1
 800094a:	d929      	bls.n	80009a0 <MAIN_updateLogLevel+0xcc>
        g_MAIN_padUpPressedStartTime = 0;
 800094c:	4b20      	ldr	r3, [pc, #128]	; (80009d0 <MAIN_updateLogLevel+0xfc>)
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
      break;
 8000952:	e025      	b.n	80009a0 <MAIN_updateLogLevel+0xcc>

    case BLU_BUTTON_PAD_DOWN:
      if (g_MAIN_padDownPressedStartTime == 0)
 8000954:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <MAIN_updateLogLevel+0x100>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d10a      	bne.n	8000972 <MAIN_updateLogLevel+0x9e>
      {
        g_MAIN_padDownPressedStartTime = UTI_turnRtcTimeToSeconds(&l_time);
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	4618      	mov	r0, r3
 8000962:	f009 fa11 	bl	8009d88 <UTI_turnRtcTimeToSeconds>
 8000966:	4603      	mov	r3, r0
 8000968:	4a1a      	ldr	r2, [pc, #104]	; (80009d4 <MAIN_updateLogLevel+0x100>)
 800096a:	6013      	str	r3, [r2, #0]

        LOG_decreaseLevel();
 800096c:	f008 ffa0 	bl	80098b0 <LOG_decreaseLevel>
      }
      else
      {
        g_MAIN_padDownPressedStartTime = 0;
      }
      break;
 8000970:	e018      	b.n	80009a4 <MAIN_updateLogLevel+0xd0>
      else if (UTI_turnRtcTimeToSeconds(&l_time) - g_MAIN_padDownPressedStartTime < MAIN_PAD_BUTTON_PERIOD_IN_S)
 8000972:	f107 030c 	add.w	r3, r7, #12
 8000976:	4618      	mov	r0, r3
 8000978:	f009 fa06 	bl	8009d88 <UTI_turnRtcTimeToSeconds>
 800097c:	4602      	mov	r2, r0
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <MAIN_updateLogLevel+0x100>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	2b01      	cmp	r3, #1
 8000986:	d90d      	bls.n	80009a4 <MAIN_updateLogLevel+0xd0>
        g_MAIN_padDownPressedStartTime = 0;
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <MAIN_updateLogLevel+0x100>)
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
      break;
 800098e:	e009      	b.n	80009a4 <MAIN_updateLogLevel+0xd0>

    case BLU_BUTTON_PAD_LEFT:
      LOG_turnOff();
 8000990:	f008 ff52 	bl	8009838 <LOG_turnOff>
      break;
 8000994:	e007      	b.n	80009a6 <MAIN_updateLogLevel+0xd2>

    case BLU_BUTTON_PAD_RIGHT:
      LOG_turnOn();
 8000996:	f008 ff37 	bl	8009808 <LOG_turnOn>
      break;
 800099a:	e004      	b.n	80009a6 <MAIN_updateLogLevel+0xd2>

    default:
      ; /* Nothing to do */;
      break;
 800099c:	bf00      	nop
 800099e:	e002      	b.n	80009a6 <MAIN_updateLogLevel+0xd2>
      break;
 80009a0:	bf00      	nop
 80009a2:	e000      	b.n	80009a6 <MAIN_updateLogLevel+0xd2>
      break;
 80009a4:	bf00      	nop
  }

  if ((p_data->button != BLU_BUTTON_PAD_UP) && (p_data->button != BLU_BUTTON_PAD_DOWN))
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	7c1b      	ldrb	r3, [r3, #16]
 80009aa:	2b05      	cmp	r3, #5
 80009ac:	d00a      	beq.n	80009c4 <MAIN_updateLogLevel+0xf0>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	7c1b      	ldrb	r3, [r3, #16]
 80009b2:	2b07      	cmp	r3, #7
 80009b4:	d006      	beq.n	80009c4 <MAIN_updateLogLevel+0xf0>
  {
    g_MAIN_padUpPressedStartTime   = 0;
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MAIN_updateLogLevel+0xfc>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
    g_MAIN_padDownPressedStartTime = 0;
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <MAIN_updateLogLevel+0x100>)
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */;
  }

  return;
 80009c2:	bf00      	nop
 80009c4:	bf00      	nop
}
 80009c6:	3710      	adds	r7, #16
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200005f8 	.word	0x200005f8
 80009d0:	2000009c 	.word	0x2000009c
 80009d4:	200000a0 	.word	0x200000a0

080009d8 <MAIN_updateLedMode>:

static void MAIN_updateLedMode(T_DRV_MODE p_driveMode, uint32_t p_voltageInMv)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	6039      	str	r1, [r7, #0]
 80009e2:	71fb      	strb	r3, [r7, #7]
  /* Regarding LED mode, battery check is prioritary on user requests. */
  /* Ignore 0 value as we could get it at startup or while debugging.  */
  if ((p_voltageInMv != 0) && (p_voltageInMv < MAIN_MIN_BATTERY_LEVEL_IN_MV))
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d00d      	beq.n	8000a06 <MAIN_updateLedMode+0x2e>
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	f242 720f 	movw	r2, #9999	; 0x270f
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d808      	bhi.n	8000a06 <MAIN_updateLedMode+0x2e>
  {
    LOG_warning("Battery is getting low: %u mV", p_voltageInMv);
 80009f4:	683a      	ldr	r2, [r7, #0]
 80009f6:	4911      	ldr	r1, [pc, #68]	; (8000a3c <MAIN_updateLedMode+0x64>)
 80009f8:	2002      	movs	r0, #2
 80009fa:	f008 ff71 	bl	80098e0 <LOG_log>

    LED_setMode(LED_MODE_FORCED_OFF);
 80009fe:	2000      	movs	r0, #0
 8000a00:	f008 fe4c 	bl	800969c <LED_setMode>
 8000a04:	e016      	b.n	8000a34 <MAIN_updateLedMode+0x5c>
  }
  else
  {
    switch (p_driveMode)
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	d00e      	beq.n	8000a2a <MAIN_updateLedMode+0x52>
 8000a0c:	2b02      	cmp	r3, #2
 8000a0e:	dc10      	bgt.n	8000a32 <MAIN_updateLedMode+0x5a>
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d002      	beq.n	8000a1a <MAIN_updateLedMode+0x42>
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d004      	beq.n	8000a22 <MAIN_updateLedMode+0x4a>
        LED_setMode(LED_MODE_BLINK_FAST);
        break;

      default:
        ; /* Nothing to do */
        break;
 8000a18:	e00b      	b.n	8000a32 <MAIN_updateLedMode+0x5a>
        LED_setMode(LED_MODE_BLINK_SLOW);
 8000a1a:	2002      	movs	r0, #2
 8000a1c:	f008 fe3e 	bl	800969c <LED_setMode>
        break;
 8000a20:	e008      	b.n	8000a34 <MAIN_updateLedMode+0x5c>
        LED_setMode(LED_MODE_BLINK_MEDIUM);
 8000a22:	2003      	movs	r0, #3
 8000a24:	f008 fe3a 	bl	800969c <LED_setMode>
        break;
 8000a28:	e004      	b.n	8000a34 <MAIN_updateLedMode+0x5c>
        LED_setMode(LED_MODE_BLINK_FAST);
 8000a2a:	2004      	movs	r0, #4
 8000a2c:	f008 fe36 	bl	800969c <LED_setMode>
        break;
 8000a30:	e000      	b.n	8000a34 <MAIN_updateLedMode+0x5c>
        break;
 8000a32:	bf00      	nop
    }
  }

  return;
 8000a34:	bf00      	nop
}
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	0800b084 	.word	0x0800b084

08000a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	; 0x28
 8000a44:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a46:	f001 fa4b 	bl	8001ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a4a:	f000 f8e5 	bl	8000c18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4e:	f000 fce7 	bl	8001420 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000a52:	f000 f9c1 	bl	8000dd8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000a56:	f000 fc8f 	bl	8001378 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000a5a:	f000 fcb7 	bl	80013cc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000a5e:	f000 f933 	bl	8000cc8 <MX_ADC1_Init>
  MX_TIM8_Init();
 8000a62:	f000 fbc5 	bl	80011f0 <MX_TIM8_Init>
  MX_RTC_Init();
 8000a66:	f000 f96d 	bl	8000d44 <MX_RTC_Init>
  MX_TIM7_Init();
 8000a6a:	f000 fb8b 	bl	8001184 <MX_TIM7_Init>
  MX_TIM2_Init();
 8000a6e:	f000 fa03 	bl	8000e78 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a72:	f000 fa55 	bl	8000f20 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a76:	f000 faa7 	bl	8000fc8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000a7a:	f000 faf9 	bl	8001070 <MX_TIM5_Init>
  MX_TIM6_Init();
 8000a7e:	f000 fb4b 	bl	8001118 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  /* Setup global variables */
  g_MAIN_padUpPressedStartTime   = 0;
 8000a82:	4b51      	ldr	r3, [pc, #324]	; (8000bc8 <main+0x188>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
  g_MAIN_padDownPressedStartTime = 0;
 8000a88:	4b50      	ldr	r3, [pc, #320]	; (8000bcc <main+0x18c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]

  /* Setup console */
  CON_init(&huart1);
 8000a8e:	4850      	ldr	r0, [pc, #320]	; (8000bd0 <main+0x190>)
 8000a90:	f007 ffe2 	bl	8008a58 <CON_init>

  /* Setup and start using logs */
  LOG_init    (&hrtc          );
 8000a94:	484f      	ldr	r0, [pc, #316]	; (8000bd4 <main+0x194>)
 8000a96:	f008 fea9 	bl	80097ec <LOG_init>
  LOG_setLevel(LOG_LEVEL_DEBUG);
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f008 fee0 	bl	8009860 <LOG_setLevel>
  LOG_turnOn  (               );
 8000aa0:	f008 feb2 	bl	8009808 <LOG_turnOn>
  LOG_info    ("Starting RCFW");
 8000aa4:	494c      	ldr	r1, [pc, #304]	; (8000bd8 <main+0x198>)
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f008 ff1a 	bl	80098e0 <LOG_log>

  /* Display RCFW banner */
  MAIN_displayRcfwBanner();
 8000aac:	f7ff fed4 	bl	8000858 <MAIN_displayRcfwBanner>

  /* Initialize Timer 6 */
  HAL_TIM_Base_Start(&htim6);
 8000ab0:	484a      	ldr	r0, [pc, #296]	; (8000bdc <main+0x19c>)
 8000ab2:	f004 fd5f 	bl	8005574 <HAL_TIM_Base_Start>

  LOG_info("Started TIMER 6 (time measurement)");
 8000ab6:	494a      	ldr	r1, [pc, #296]	; (8000be0 <main+0x1a0>)
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f008 ff11 	bl	80098e0 <LOG_log>

  /* Initialize Timer 7 and delay function in utilities */
  HAL_TIM_Base_Start_IT(&htim7);
 8000abe:	4849      	ldr	r0, [pc, #292]	; (8000be4 <main+0x1a4>)
 8000ac0:	f004 fde2 	bl	8005688 <HAL_TIM_Base_Start_IT>
  UTI_init             (&htim7);
 8000ac4:	4847      	ldr	r0, [pc, #284]	; (8000be4 <main+0x1a4>)
 8000ac6:	f009 f931 	bl	8009d2c <UTI_init>

  LOG_info("Started TIMER 7 (utilities/delay)");
 8000aca:	4947      	ldr	r1, [pc, #284]	; (8000be8 <main+0x1a8>)
 8000acc:	2001      	movs	r0, #1
 8000ace:	f008 ff07 	bl	80098e0 <LOG_log>

  /* Initialize Timer 1 & green LED */
  HAL_TIM_Base_Start_IT(&htim1);
 8000ad2:	4846      	ldr	r0, [pc, #280]	; (8000bec <main+0x1ac>)
 8000ad4:	f004 fdd8 	bl	8005688 <HAL_TIM_Base_Start_IT>
  LED_setMode(LED_MODE_BLINK_FAST);
 8000ad8:	2004      	movs	r0, #4
 8000ada:	f008 fddf 	bl	800969c <LED_setMode>

  LOG_info("Started TIMER 1 (green LED)");
 8000ade:	4944      	ldr	r1, [pc, #272]	; (8000bf0 <main+0x1b0>)
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f008 fefd 	bl	80098e0 <LOG_log>

  /* Initialize Timers 2, 3, 4 & 5 */
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000ae6:	213c      	movs	r1, #60	; 0x3c
 8000ae8:	4842      	ldr	r0, [pc, #264]	; (8000bf4 <main+0x1b4>)
 8000aea:	f005 fa05 	bl	8005ef8 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000aee:	213c      	movs	r1, #60	; 0x3c
 8000af0:	4841      	ldr	r0, [pc, #260]	; (8000bf8 <main+0x1b8>)
 8000af2:	f005 fa01 	bl	8005ef8 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000af6:	213c      	movs	r1, #60	; 0x3c
 8000af8:	4840      	ldr	r0, [pc, #256]	; (8000bfc <main+0x1bc>)
 8000afa:	f005 f9fd 	bl	8005ef8 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 8000afe:	213c      	movs	r1, #60	; 0x3c
 8000b00:	483f      	ldr	r0, [pc, #252]	; (8000c00 <main+0x1c0>)
 8000b02:	f005 f9f9 	bl	8005ef8 <HAL_TIM_Encoder_Start_IT>

  LOG_info("Started TIMER 2, 3, 4, 5 (encoders)");
 8000b06:	493f      	ldr	r1, [pc, #252]	; (8000c04 <main+0x1c4>)
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f008 fee9 	bl	80098e0 <LOG_log>

  /* Initialize Timer 8 */
  HAL_TIM_Base_Start(&htim8);
 8000b0e:	483e      	ldr	r0, [pc, #248]	; (8000c08 <main+0x1c8>)
 8000b10:	f004 fd30 	bl	8005574 <HAL_TIM_Base_Start>

  LOG_info("Started TIMER 8 (PWM channels)");
 8000b14:	493d      	ldr	r1, [pc, #244]	; (8000c0c <main+0x1cc>)
 8000b16:	2001      	movs	r0, #1
 8000b18:	f008 fee2 	bl	80098e0 <LOG_log>

  /* Initialize battery monitor */
  BAT_init(&hadc1, &hrtc);
 8000b1c:	492d      	ldr	r1, [pc, #180]	; (8000bd4 <main+0x194>)
 8000b1e:	483c      	ldr	r0, [pc, #240]	; (8000c10 <main+0x1d0>)
 8000b20:	f007 fcfe 	bl	8008520 <BAT_init>

  /* Initialize PWM channels */
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000b24:	2100      	movs	r1, #0
 8000b26:	4838      	ldr	r0, [pc, #224]	; (8000c08 <main+0x1c8>)
 8000b28:	f004 ff1c 	bl	8005964 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000b2c:	2104      	movs	r1, #4
 8000b2e:	4836      	ldr	r0, [pc, #216]	; (8000c08 <main+0x1c8>)
 8000b30:	f004 ff18 	bl	8005964 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000b34:	2108      	movs	r1, #8
 8000b36:	4834      	ldr	r0, [pc, #208]	; (8000c08 <main+0x1c8>)
 8000b38:	f004 ff14 	bl	8005964 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8000b3c:	210c      	movs	r1, #12
 8000b3e:	4832      	ldr	r0, [pc, #200]	; (8000c08 <main+0x1c8>)
 8000b40:	f004 ff10 	bl	8005964 <HAL_TIM_PWM_Start>

  LOG_info("Started PWM channels");
 8000b44:	4933      	ldr	r1, [pc, #204]	; (8000c14 <main+0x1d4>)
 8000b46:	2001      	movs	r0, #1
 8000b48:	f008 feca 	bl	80098e0 <LOG_log>

  /* Initialize bluetooth control */
  BLU_init(DRV_MAXIMUM_SPEED);
 8000b4c:	2028      	movs	r0, #40	; 0x28
 8000b4e:	f007 fec9 	bl	80088e4 <BLU_init>

  /* Initialize driving module */
  DRV_init(&htim8, &htim2, &htim3, &htim4, &htim5);
 8000b52:	4b2b      	ldr	r3, [pc, #172]	; (8000c00 <main+0x1c0>)
 8000b54:	9300      	str	r3, [sp, #0]
 8000b56:	4b29      	ldr	r3, [pc, #164]	; (8000bfc <main+0x1bc>)
 8000b58:	4a27      	ldr	r2, [pc, #156]	; (8000bf8 <main+0x1b8>)
 8000b5a:	4926      	ldr	r1, [pc, #152]	; (8000bf4 <main+0x1b4>)
 8000b5c:	482a      	ldr	r0, [pc, #168]	; (8000c08 <main+0x1c8>)
 8000b5e:	f007 ff9f 	bl	8008aa0 <DRV_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  /* Initialize ime measurement for master board control */
  l_lastTime = __HAL_TIM_GET_COUNTER(&htim6);
 8000b62:	4b1e      	ldr	r3, [pc, #120]	; (8000bdc <main+0x19c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b68:	83fb      	strh	r3, [r7, #30]

  while (1)
  {
    CON_receiveData        (                );
 8000b6a:	f007 ff89 	bl	8008a80 <CON_receiveData>
    BLU_receiveData        (&l_bluetoothData);
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	4618      	mov	r0, r3
 8000b72:	f007 fedb 	bl	800892c <BLU_receiveData>
    DRV_updateFromBluetooth(&l_bluetoothData);
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f008 f8a9 	bl	8008cd0 <DRV_updateFromBluetooth>

    l_driveMode = DRV_getMode();
 8000b7e:	f008 fa53 	bl	8009028 <DRV_getMode>
 8000b82:	4603      	mov	r3, r0
 8000b84:	777b      	strb	r3, [r7, #29]

    BAT_update         (&l_voltageInMv            );
 8000b86:	463b      	mov	r3, r7
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f007 fcfd 	bl	8008588 <BAT_update>
    MAIN_updateLedMode (l_driveMode, l_voltageInMv);
 8000b8e:	683a      	ldr	r2, [r7, #0]
 8000b90:	7f7b      	ldrb	r3, [r7, #29]
 8000b92:	4611      	mov	r1, r2
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff ff1f 	bl	80009d8 <MAIN_updateLedMode>
    MAIN_updateLogLevel(&l_bluetoothData          );
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff fe99 	bl	80008d4 <MAIN_updateLogLevel>

    UTI_delayUs(MAIN_LOOP_DELAY_IN_MS);
 8000ba2:	f242 7010 	movw	r0, #10000	; 0x2710
 8000ba6:	f009 f8d5 	bl	8009d54 <UTI_delayUs>

    l_currentTime = __HAL_TIM_GET_COUNTER(&htim6);
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <main+0x19c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb0:	837b      	strh	r3, [r7, #26]
    l_deltaTime   = l_lastTime - l_currentTime;
 8000bb2:	8bfa      	ldrh	r2, [r7, #30]
 8000bb4:	8b7b      	ldrh	r3, [r7, #26]
 8000bb6:	1ad3      	subs	r3, r2, r3
 8000bb8:	833b      	strh	r3, [r7, #24]
    l_lastTime    = l_currentTime;
 8000bba:	8b7b      	ldrh	r3, [r7, #26]
 8000bbc:	83fb      	strh	r3, [r7, #30]

    DRV_updateFromMaster(l_deltaTime);
 8000bbe:	8b3b      	ldrh	r3, [r7, #24]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f008 f9c5 	bl	8008f50 <DRV_updateFromMaster>
    CON_receiveData        (                );
 8000bc6:	e7d0      	b.n	8000b6a <main+0x12a>
 8000bc8:	2000009c 	.word	0x2000009c
 8000bcc:	200000a0 	.word	0x200000a0
 8000bd0:	20000584 	.word	0x20000584
 8000bd4:	200005f8 	.word	0x200005f8
 8000bd8:	0800b0a4 	.word	0x0800b0a4
 8000bdc:	2000060c 	.word	0x2000060c
 8000be0:	0800b0b4 	.word	0x0800b0b4
 8000be4:	2000089c 	.word	0x2000089c
 8000be8:	0800b0d8 	.word	0x0800b0d8
 8000bec:	200006c0 	.word	0x200006c0
 8000bf0:	0800b0fc 	.word	0x0800b0fc
 8000bf4:	20000774 	.word	0x20000774
 8000bf8:	200004a0 	.word	0x200004a0
 8000bfc:	20000338 	.word	0x20000338
 8000c00:	200003ec 	.word	0x200003ec
 8000c04:	0800b118 	.word	0x0800b118
 8000c08:	20000284 	.word	0x20000284
 8000c0c:	0800b13c 	.word	0x0800b13c
 8000c10:	20000554 	.word	0x20000554
 8000c14:	0800b15c 	.word	0x0800b15c

08000c18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b096      	sub	sp, #88	; 0x58
 8000c1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c22:	2228      	movs	r2, #40	; 0x28
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f009 f91a 	bl	8009e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c2c:	f107 031c 	add.w	r3, r7, #28
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c3c:	1d3b      	adds	r3, r7, #4
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]
 8000c4a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000c4c:	230a      	movs	r3, #10
 8000c4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c50:	2301      	movs	r3, #1
 8000c52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c54:	2310      	movs	r3, #16
 8000c56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c64:	4618      	mov	r0, r3
 8000c66:	f002 fd2f 	bl	80036c8 <HAL_RCC_OscConfig>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000c70:	f000 fcd6 	bl	8001620 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c74:	230f      	movs	r3, #15
 8000c76:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c88:	f107 031c 	add.w	r3, r7, #28
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f003 f88a 	bl	8003da8 <HAL_RCC_ClockConfig>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000c9a:	f000 fcc1 	bl	8001620 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ca2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ca6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f003 faba 	bl	8004228 <HAL_RCCEx_PeriphCLKConfig>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000cba:	f000 fcb1 	bl	8001620 <Error_Handler>
  }
}
 8000cbe:	bf00      	nop
 8000cc0:	3758      	adds	r7, #88	; 0x58
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cd8:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <MX_ADC1_Init+0x74>)
 8000cda:	4a19      	ldr	r2, [pc, #100]	; (8000d40 <MX_ADC1_Init+0x78>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cde:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <MX_ADC1_Init+0x74>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ce4:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <MX_ADC1_Init+0x74>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cea:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <MX_ADC1_Init+0x74>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <MX_ADC1_Init+0x74>)
 8000cf2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000cf6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cf8:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <MX_ADC1_Init+0x74>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000cfe:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <MX_ADC1_Init+0x74>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d04:	480d      	ldr	r0, [pc, #52]	; (8000d3c <MX_ADC1_Init+0x74>)
 8000d06:	f001 f94d 	bl	8001fa4 <HAL_ADC_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000d10:	f000 fc86 	bl	8001620 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000d14:	2305      	movs	r3, #5
 8000d16:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	4619      	mov	r1, r3
 8000d24:	4805      	ldr	r0, [pc, #20]	; (8000d3c <MX_ADC1_Init+0x74>)
 8000d26:	f001 fcef 	bl	8002708 <HAL_ADC_ConfigChannel>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000d30:	f000 fc76 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	3710      	adds	r7, #16
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000554 	.word	0x20000554
 8000d40:	40012400 	.word	0x40012400

08000d44 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	460a      	mov	r2, r1
 8000d50:	801a      	strh	r2, [r3, #0]
 8000d52:	460a      	mov	r2, r1
 8000d54:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000d56:	2300      	movs	r3, #0
 8000d58:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d5a:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <MX_RTC_Init+0x8c>)
 8000d5c:	4a1d      	ldr	r2, [pc, #116]	; (8000dd4 <MX_RTC_Init+0x90>)
 8000d5e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000d60:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <MX_RTC_Init+0x8c>)
 8000d62:	f04f 32ff 	mov.w	r2, #4294967295
 8000d66:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8000d68:	4b19      	ldr	r3, [pc, #100]	; (8000dd0 <MX_RTC_Init+0x8c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d6e:	4818      	ldr	r0, [pc, #96]	; (8000dd0 <MX_RTC_Init+0x8c>)
 8000d70:	f003 fc76 	bl	8004660 <HAL_RTC_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 8000d7a:	f000 fc51 	bl	8001620 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	4619      	mov	r1, r3
 8000d90:	480f      	ldr	r0, [pc, #60]	; (8000dd0 <MX_RTC_Init+0x8c>)
 8000d92:	f003 fd2f 	bl	80047f4 <HAL_RTC_SetTime>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8000d9c:	f000 fc40 	bl	8001620 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000da0:	2301      	movs	r3, #1
 8000da2:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000da4:	2301      	movs	r3, #1
 8000da6:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 8000da8:	2301      	movs	r3, #1
 8000daa:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000db0:	463b      	mov	r3, r7
 8000db2:	2201      	movs	r2, #1
 8000db4:	4619      	mov	r1, r3
 8000db6:	4806      	ldr	r0, [pc, #24]	; (8000dd0 <MX_RTC_Init+0x8c>)
 8000db8:	f003 fee8 	bl	8004b8c <HAL_RTC_SetDate>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000dc2:	f000 fc2d 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200005f8 	.word	0x200005f8
 8000dd4:	40002800 	.word	0x40002800

08000dd8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dde:	f107 0308 	add.w	r3, r7, #8
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dec:	463b      	mov	r3, r7
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000df4:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <MX_TIM1_Init+0x98>)
 8000df6:	4a1f      	ldr	r2, [pc, #124]	; (8000e74 <MX_TIM1_Init+0x9c>)
 8000df8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7999;
 8000dfa:	4b1d      	ldr	r3, [pc, #116]	; (8000e70 <MX_TIM1_Init+0x98>)
 8000dfc:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e00:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e02:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <MX_TIM1_Init+0x98>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8000e08:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <MX_TIM1_Init+0x98>)
 8000e0a:	22f9      	movs	r2, #249	; 0xf9
 8000e0c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e0e:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <MX_TIM1_Init+0x98>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e14:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <MX_TIM1_Init+0x98>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <MX_TIM1_Init+0x98>)
 8000e1c:	2280      	movs	r2, #128	; 0x80
 8000e1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e20:	4813      	ldr	r0, [pc, #76]	; (8000e70 <MX_TIM1_Init+0x98>)
 8000e22:	f004 fad5 	bl	80053d0 <HAL_TIM_Base_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000e2c:	f000 fbf8 	bl	8001620 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e36:	f107 0308 	add.w	r3, r7, #8
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	480c      	ldr	r0, [pc, #48]	; (8000e70 <MX_TIM1_Init+0x98>)
 8000e3e:	f005 fbff 	bl	8006640 <HAL_TIM_ConfigClockSource>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000e48:	f000 fbea 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e54:	463b      	mov	r3, r7
 8000e56:	4619      	mov	r1, r3
 8000e58:	4805      	ldr	r0, [pc, #20]	; (8000e70 <MX_TIM1_Init+0x98>)
 8000e5a:	f006 fb4d 	bl	80074f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000e64:	f000 fbdc 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e68:	bf00      	nop
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	200006c0 	.word	0x200006c0
 8000e74:	40012c00 	.word	0x40012c00

08000e78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08c      	sub	sp, #48	; 0x30
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e7e:	f107 030c 	add.w	r3, r7, #12
 8000e82:	2224      	movs	r2, #36	; 0x24
 8000e84:	2100      	movs	r1, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f008 ffea 	bl	8009e60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e94:	4b21      	ldr	r3, [pc, #132]	; (8000f1c <MX_TIM2_Init+0xa4>)
 8000e96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <MX_TIM2_Init+0xa4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea2:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <MX_TIM2_Init+0xa4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000ea8:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <MX_TIM2_Init+0xa4>)
 8000eaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	; (8000f1c <MX_TIM2_Init+0xa4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000eb6:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <MX_TIM2_Init+0xa4>)
 8000eb8:	2280      	movs	r2, #128	; 0x80
 8000eba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000ecc:	230a      	movs	r3, #10
 8000ece:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	480d      	ldr	r0, [pc, #52]	; (8000f1c <MX_TIM2_Init+0xa4>)
 8000ee8:	f004 fe64 	bl	8005bb4 <HAL_TIM_Encoder_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000ef2:	f000 fb95 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	4619      	mov	r1, r3
 8000f02:	4806      	ldr	r0, [pc, #24]	; (8000f1c <MX_TIM2_Init+0xa4>)
 8000f04:	f006 faf8 	bl	80074f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000f0e:	f000 fb87 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f12:	bf00      	nop
 8000f14:	3730      	adds	r7, #48	; 0x30
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000774 	.word	0x20000774

08000f20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08c      	sub	sp, #48	; 0x30
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f26:	f107 030c 	add.w	r3, r7, #12
 8000f2a:	2224      	movs	r2, #36	; 0x24
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f008 ff96 	bl	8009e60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f3c:	4b20      	ldr	r3, [pc, #128]	; (8000fc0 <MX_TIM3_Init+0xa0>)
 8000f3e:	4a21      	ldr	r2, [pc, #132]	; (8000fc4 <MX_TIM3_Init+0xa4>)
 8000f40:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f42:	4b1f      	ldr	r3, [pc, #124]	; (8000fc0 <MX_TIM3_Init+0xa0>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f48:	4b1d      	ldr	r3, [pc, #116]	; (8000fc0 <MX_TIM3_Init+0xa0>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f4e:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <MX_TIM3_Init+0xa0>)
 8000f50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f54:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f56:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <MX_TIM3_Init+0xa0>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f5c:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <MX_TIM3_Init+0xa0>)
 8000f5e:	2280      	movs	r2, #128	; 0x80
 8000f60:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f62:	2303      	movs	r3, #3
 8000f64:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000f72:	230a      	movs	r3, #10
 8000f74:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f76:	2300      	movs	r3, #0
 8000f78:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000f86:	f107 030c 	add.w	r3, r7, #12
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <MX_TIM3_Init+0xa0>)
 8000f8e:	f004 fe11 	bl	8005bb4 <HAL_TIM_Encoder_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000f98:	f000 fb42 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <MX_TIM3_Init+0xa0>)
 8000faa:	f006 faa5 	bl	80074f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000fb4:	f000 fb34 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	3730      	adds	r7, #48	; 0x30
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	200004a0 	.word	0x200004a0
 8000fc4:	40000400 	.word	0x40000400

08000fc8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08c      	sub	sp, #48	; 0x30
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	2224      	movs	r2, #36	; 0x24
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f008 ff42 	bl	8009e60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fe4:	4b20      	ldr	r3, [pc, #128]	; (8001068 <MX_TIM4_Init+0xa0>)
 8000fe6:	4a21      	ldr	r2, [pc, #132]	; (800106c <MX_TIM4_Init+0xa4>)
 8000fe8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000fea:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <MX_TIM4_Init+0xa0>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff0:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <MX_TIM4_Init+0xa0>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <MX_TIM4_Init+0xa0>)
 8000ff8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ffc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffe:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <MX_TIM4_Init+0xa0>)
 8001000:	2200      	movs	r2, #0
 8001002:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001004:	4b18      	ldr	r3, [pc, #96]	; (8001068 <MX_TIM4_Init+0xa0>)
 8001006:	2280      	movs	r2, #128	; 0x80
 8001008:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800100a:	2303      	movs	r3, #3
 800100c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001012:	2301      	movs	r3, #1
 8001014:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800101a:	230a      	movs	r3, #10
 800101c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800101e:	2300      	movs	r3, #0
 8001020:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001022:	2301      	movs	r3, #1
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001026:	2300      	movs	r3, #0
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	4619      	mov	r1, r3
 8001034:	480c      	ldr	r0, [pc, #48]	; (8001068 <MX_TIM4_Init+0xa0>)
 8001036:	f004 fdbd 	bl	8005bb4 <HAL_TIM_Encoder_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001040:	f000 faee 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001044:	2300      	movs	r3, #0
 8001046:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001048:	2300      	movs	r3, #0
 800104a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	4619      	mov	r1, r3
 8001050:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_TIM4_Init+0xa0>)
 8001052:	f006 fa51 	bl	80074f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800105c:	f000 fae0 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001060:	bf00      	nop
 8001062:	3730      	adds	r7, #48	; 0x30
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000338 	.word	0x20000338
 800106c:	40000800 	.word	0x40000800

08001070 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08c      	sub	sp, #48	; 0x30
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001076:	f107 030c 	add.w	r3, r7, #12
 800107a:	2224      	movs	r2, #36	; 0x24
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f008 feee 	bl	8009e60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800108c:	4b20      	ldr	r3, [pc, #128]	; (8001110 <MX_TIM5_Init+0xa0>)
 800108e:	4a21      	ldr	r2, [pc, #132]	; (8001114 <MX_TIM5_Init+0xa4>)
 8001090:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001092:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <MX_TIM5_Init+0xa0>)
 8001094:	2200      	movs	r2, #0
 8001096:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001098:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <MX_TIM5_Init+0xa0>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800109e:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <MX_TIM5_Init+0xa0>)
 80010a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010a4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a6:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <MX_TIM5_Init+0xa0>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010ac:	4b18      	ldr	r3, [pc, #96]	; (8001110 <MX_TIM5_Init+0xa0>)
 80010ae:	2280      	movs	r2, #128	; 0x80
 80010b0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010b2:	2303      	movs	r3, #3
 80010b4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010ba:	2301      	movs	r3, #1
 80010bc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80010c2:	230a      	movs	r3, #10
 80010c4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010c6:	2300      	movs	r3, #0
 80010c8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010ca:	2301      	movs	r3, #1
 80010cc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80010d6:	f107 030c 	add.w	r3, r7, #12
 80010da:	4619      	mov	r1, r3
 80010dc:	480c      	ldr	r0, [pc, #48]	; (8001110 <MX_TIM5_Init+0xa0>)
 80010de:	f004 fd69 	bl	8005bb4 <HAL_TIM_Encoder_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80010e8:	f000 fa9a 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ec:	2300      	movs	r3, #0
 80010ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	4619      	mov	r1, r3
 80010f8:	4805      	ldr	r0, [pc, #20]	; (8001110 <MX_TIM5_Init+0xa0>)
 80010fa:	f006 f9fd 	bl	80074f8 <HAL_TIMEx_MasterConfigSynchronization>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001104:	f000 fa8c 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001108:	bf00      	nop
 800110a:	3730      	adds	r7, #48	; 0x30
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	200003ec 	.word	0x200003ec
 8001114:	40000c00 	.word	0x40000c00

08001118 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111e:	463b      	mov	r3, r7
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001126:	4b15      	ldr	r3, [pc, #84]	; (800117c <MX_TIM6_Init+0x64>)
 8001128:	4a15      	ldr	r2, [pc, #84]	; (8001180 <MX_TIM6_Init+0x68>)
 800112a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7;
 800112c:	4b13      	ldr	r3, [pc, #76]	; (800117c <MX_TIM6_Init+0x64>)
 800112e:	2207      	movs	r2, #7
 8001130:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <MX_TIM6_Init+0x64>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001138:	4b10      	ldr	r3, [pc, #64]	; (800117c <MX_TIM6_Init+0x64>)
 800113a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800113e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MX_TIM6_Init+0x64>)
 8001142:	2280      	movs	r2, #128	; 0x80
 8001144:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001146:	480d      	ldr	r0, [pc, #52]	; (800117c <MX_TIM6_Init+0x64>)
 8001148:	f004 f942 	bl	80053d0 <HAL_TIM_Base_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001152:	f000 fa65 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001156:	2300      	movs	r3, #0
 8001158:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800115e:	463b      	mov	r3, r7
 8001160:	4619      	mov	r1, r3
 8001162:	4806      	ldr	r0, [pc, #24]	; (800117c <MX_TIM6_Init+0x64>)
 8001164:	f006 f9c8 	bl	80074f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800116e:	f000 fa57 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	2000060c 	.word	0x2000060c
 8001180:	40001000 	.word	0x40001000

08001184 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800118a:	463b      	mov	r3, r7
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <MX_TIM7_Init+0x64>)
 8001194:	4a15      	ldr	r2, [pc, #84]	; (80011ec <MX_TIM7_Init+0x68>)
 8001196:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7;
 8001198:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <MX_TIM7_Init+0x64>)
 800119a:	2207      	movs	r2, #7
 800119c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119e:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <MX_TIM7_Init+0x64>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80011a4:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <MX_TIM7_Init+0x64>)
 80011a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011aa:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011ac:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <MX_TIM7_Init+0x64>)
 80011ae:	2280      	movs	r2, #128	; 0x80
 80011b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80011b2:	480d      	ldr	r0, [pc, #52]	; (80011e8 <MX_TIM7_Init+0x64>)
 80011b4:	f004 f90c 	bl	80053d0 <HAL_TIM_Base_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80011be:	f000 fa2f 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c2:	2300      	movs	r3, #0
 80011c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80011ca:	463b      	mov	r3, r7
 80011cc:	4619      	mov	r1, r3
 80011ce:	4806      	ldr	r0, [pc, #24]	; (80011e8 <MX_TIM7_Init+0x64>)
 80011d0:	f006 f992 	bl	80074f8 <HAL_TIMEx_MasterConfigSynchronization>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80011da:	f000 fa21 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	2000089c 	.word	0x2000089c
 80011ec:	40001400 	.word	0x40001400

080011f0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b096      	sub	sp, #88	; 0x58
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011f6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001204:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800120e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]
 800121e:	615a      	str	r2, [r3, #20]
 8001220:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	2220      	movs	r2, #32
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f008 fe19 	bl	8009e60 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800122e:	4b50      	ldr	r3, [pc, #320]	; (8001370 <MX_TIM8_Init+0x180>)
 8001230:	4a50      	ldr	r2, [pc, #320]	; (8001374 <MX_TIM8_Init+0x184>)
 8001232:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7;
 8001234:	4b4e      	ldr	r3, [pc, #312]	; (8001370 <MX_TIM8_Init+0x180>)
 8001236:	2207      	movs	r2, #7
 8001238:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123a:	4b4d      	ldr	r3, [pc, #308]	; (8001370 <MX_TIM8_Init+0x180>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 100;
 8001240:	4b4b      	ldr	r3, [pc, #300]	; (8001370 <MX_TIM8_Init+0x180>)
 8001242:	2264      	movs	r2, #100	; 0x64
 8001244:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001246:	4b4a      	ldr	r3, [pc, #296]	; (8001370 <MX_TIM8_Init+0x180>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800124c:	4b48      	ldr	r3, [pc, #288]	; (8001370 <MX_TIM8_Init+0x180>)
 800124e:	2200      	movs	r2, #0
 8001250:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001252:	4b47      	ldr	r3, [pc, #284]	; (8001370 <MX_TIM8_Init+0x180>)
 8001254:	2280      	movs	r2, #128	; 0x80
 8001256:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001258:	4845      	ldr	r0, [pc, #276]	; (8001370 <MX_TIM8_Init+0x180>)
 800125a:	f004 f8b9 	bl	80053d0 <HAL_TIM_Base_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001264:	f000 f9dc 	bl	8001620 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001268:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800126c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800126e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001272:	4619      	mov	r1, r3
 8001274:	483e      	ldr	r0, [pc, #248]	; (8001370 <MX_TIM8_Init+0x180>)
 8001276:	f005 f9e3 	bl	8006640 <HAL_TIM_ConfigClockSource>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001280:	f000 f9ce 	bl	8001620 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001284:	483a      	ldr	r0, [pc, #232]	; (8001370 <MX_TIM8_Init+0x180>)
 8001286:	f004 fa91 	bl	80057ac <HAL_TIM_PWM_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001290:	f000 f9c6 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800129c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012a0:	4619      	mov	r1, r3
 80012a2:	4833      	ldr	r0, [pc, #204]	; (8001370 <MX_TIM8_Init+0x180>)
 80012a4:	f006 f928 	bl	80074f8 <HAL_TIMEx_MasterConfigSynchronization>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 80012ae:	f000 f9b7 	bl	8001620 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b2:	2360      	movs	r3, #96	; 0x60
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ba:	2300      	movs	r3, #0
 80012bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012be:	2300      	movs	r3, #0
 80012c0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012c6:	2300      	movs	r3, #0
 80012c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012ca:	2300      	movs	r3, #0
 80012cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d2:	2200      	movs	r2, #0
 80012d4:	4619      	mov	r1, r3
 80012d6:	4826      	ldr	r0, [pc, #152]	; (8001370 <MX_TIM8_Init+0x180>)
 80012d8:	f005 f814 	bl	8006304 <HAL_TIM_PWM_ConfigChannel>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 80012e2:	f000 f99d 	bl	8001620 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ea:	2204      	movs	r2, #4
 80012ec:	4619      	mov	r1, r3
 80012ee:	4820      	ldr	r0, [pc, #128]	; (8001370 <MX_TIM8_Init+0x180>)
 80012f0:	f005 f808 	bl	8006304 <HAL_TIM_PWM_ConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 80012fa:	f000 f991 	bl	8001620 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001302:	2208      	movs	r2, #8
 8001304:	4619      	mov	r1, r3
 8001306:	481a      	ldr	r0, [pc, #104]	; (8001370 <MX_TIM8_Init+0x180>)
 8001308:	f004 fffc 	bl	8006304 <HAL_TIM_PWM_ConfigChannel>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 8001312:	f000 f985 	bl	8001620 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001316:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800131a:	220c      	movs	r2, #12
 800131c:	4619      	mov	r1, r3
 800131e:	4814      	ldr	r0, [pc, #80]	; (8001370 <MX_TIM8_Init+0x180>)
 8001320:	f004 fff0 	bl	8006304 <HAL_TIM_PWM_ConfigChannel>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 800132a:	f000 f979 	bl	8001620 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001342:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001346:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001348:	2300      	movs	r3, #0
 800134a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	4619      	mov	r1, r3
 8001350:	4807      	ldr	r0, [pc, #28]	; (8001370 <MX_TIM8_Init+0x180>)
 8001352:	f006 f9a1 	bl	8007698 <HAL_TIMEx_ConfigBreakDeadTime>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM8_Init+0x170>
  {
    Error_Handler();
 800135c:	f000 f960 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001360:	4803      	ldr	r0, [pc, #12]	; (8001370 <MX_TIM8_Init+0x180>)
 8001362:	f000 fb7f 	bl	8001a64 <HAL_TIM_MspPostInit>

}
 8001366:	bf00      	nop
 8001368:	3758      	adds	r7, #88	; 0x58
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000284 	.word	0x20000284
 8001374:	40013400 	.word	0x40013400

08001378 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <MX_USART1_UART_Init+0x4c>)
 800137e:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <MX_USART1_UART_Init+0x50>)
 8001380:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <MX_USART1_UART_Init+0x4c>)
 8001384:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001388:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <MX_USART1_UART_Init+0x4c>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <MX_USART1_UART_Init+0x4c>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <MX_USART1_UART_Init+0x4c>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800139c:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <MX_USART1_UART_Init+0x4c>)
 800139e:	220c      	movs	r2, #12
 80013a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <MX_USART1_UART_Init+0x4c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <MX_USART1_UART_Init+0x4c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_USART1_UART_Init+0x4c>)
 80013b0:	f006 fa5a 	bl	8007868 <HAL_UART_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013ba:	f000 f931 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000584 	.word	0x20000584
 80013c8:	40013800 	.word	0x40013800

080013cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <MX_USART2_UART_Init+0x4c>)
 80013d2:	4a12      	ldr	r2, [pc, #72]	; (800141c <MX_USART2_UART_Init+0x50>)
 80013d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <MX_USART2_UART_Init+0x4c>)
 80013d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <MX_USART2_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <MX_USART2_UART_Init+0x4c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <MX_USART2_UART_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <MX_USART2_UART_Init+0x4c>)
 80013f2:	220c      	movs	r2, #12
 80013f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <MX_USART2_UART_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <MX_USART2_UART_Init+0x4c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001402:	4805      	ldr	r0, [pc, #20]	; (8001418 <MX_USART2_UART_Init+0x4c>)
 8001404:	f006 fa30 	bl	8007868 <HAL_UART_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800140e:	f000 f907 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000828 	.word	0x20000828
 800141c:	40004400 	.word	0x40004400

08001420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001426:	f107 0310 	add.w	r3, r7, #16
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001434:	4b4e      	ldr	r3, [pc, #312]	; (8001570 <MX_GPIO_Init+0x150>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	4a4d      	ldr	r2, [pc, #308]	; (8001570 <MX_GPIO_Init+0x150>)
 800143a:	f043 0310 	orr.w	r3, r3, #16
 800143e:	6193      	str	r3, [r2, #24]
 8001440:	4b4b      	ldr	r3, [pc, #300]	; (8001570 <MX_GPIO_Init+0x150>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	f003 0310 	and.w	r3, r3, #16
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144c:	4b48      	ldr	r3, [pc, #288]	; (8001570 <MX_GPIO_Init+0x150>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	4a47      	ldr	r2, [pc, #284]	; (8001570 <MX_GPIO_Init+0x150>)
 8001452:	f043 0304 	orr.w	r3, r3, #4
 8001456:	6193      	str	r3, [r2, #24]
 8001458:	4b45      	ldr	r3, [pc, #276]	; (8001570 <MX_GPIO_Init+0x150>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001464:	4b42      	ldr	r3, [pc, #264]	; (8001570 <MX_GPIO_Init+0x150>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	4a41      	ldr	r2, [pc, #260]	; (8001570 <MX_GPIO_Init+0x150>)
 800146a:	f043 0308 	orr.w	r3, r3, #8
 800146e:	6193      	str	r3, [r2, #24]
 8001470:	4b3f      	ldr	r3, [pc, #252]	; (8001570 <MX_GPIO_Init+0x150>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	f003 0308 	and.w	r3, r3, #8
 8001478:	607b      	str	r3, [r7, #4]
 800147a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800147c:	4b3c      	ldr	r3, [pc, #240]	; (8001570 <MX_GPIO_Init+0x150>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	4a3b      	ldr	r2, [pc, #236]	; (8001570 <MX_GPIO_Init+0x150>)
 8001482:	f043 0320 	orr.w	r3, r3, #32
 8001486:	6193      	str	r3, [r2, #24]
 8001488:	4b39      	ldr	r3, [pc, #228]	; (8001570 <MX_GPIO_Init+0x150>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	f003 0320 	and.w	r3, r3, #32
 8001490:	603b      	str	r3, [r7, #0]
 8001492:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BLUE_LED_Pin|BLUETOOTH_SPI_CMD_Pin|BLUETOOTH_SPI_CS_Pin|MOTOR_FRONT_RIGHT_IN_1_Pin
 8001494:	2200      	movs	r2, #0
 8001496:	f243 013a 	movw	r1, #12346	; 0x303a
 800149a:	4836      	ldr	r0, [pc, #216]	; (8001574 <MX_GPIO_Init+0x154>)
 800149c:	f002 f8ae 	bl	80035fc <HAL_GPIO_WritePin>
                          |MOTOR_FRONT_RIGHT_IN_2_Pin|MOTOR_REAR_LEFT_IN_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUETOOTH_SPI_CLK_GPIO_Port, BLUETOOTH_SPI_CLK_Pin, GPIO_PIN_RESET);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2110      	movs	r1, #16
 80014a4:	4834      	ldr	r0, [pc, #208]	; (8001578 <MX_GPIO_Init+0x158>)
 80014a6:	f002 f8a9 	bl	80035fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_FRONT_LEFT_IN_1_Pin|MOTOR_FRONT_LEFT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_1_Pin, GPIO_PIN_RESET);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2133      	movs	r1, #51	; 0x33
 80014ae:	4833      	ldr	r0, [pc, #204]	; (800157c <MX_GPIO_Init+0x15c>)
 80014b0:	f002 f8a4 	bl	80035fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOTOR_REAR_LEFT_IN_1_GPIO_Port, MOTOR_REAR_LEFT_IN_1_Pin, GPIO_PIN_RESET);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2104      	movs	r1, #4
 80014b8:	4831      	ldr	r0, [pc, #196]	; (8001580 <MX_GPIO_Init+0x160>)
 80014ba:	f002 f89f 	bl	80035fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 80014be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c4:	2301      	movs	r3, #1
 80014c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2302      	movs	r3, #2
 80014ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	4619      	mov	r1, r3
 80014d6:	4827      	ldr	r0, [pc, #156]	; (8001574 <MX_GPIO_Init+0x154>)
 80014d8:	f001 fdfc 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLUETOOTH_SPI_CMD_Pin BLUETOOTH_SPI_CS_Pin MOTOR_FRONT_RIGHT_IN_1_Pin MOTOR_FRONT_RIGHT_IN_2_Pin
                           MOTOR_REAR_LEFT_IN_2_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_CMD_Pin|BLUETOOTH_SPI_CS_Pin|MOTOR_FRONT_RIGHT_IN_1_Pin|MOTOR_FRONT_RIGHT_IN_2_Pin
 80014dc:	f241 033a 	movw	r3, #4154	; 0x103a
 80014e0:	613b      	str	r3, [r7, #16]
                          |MOTOR_REAR_LEFT_IN_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e2:	2301      	movs	r3, #1
 80014e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ea:	2303      	movs	r3, #3
 80014ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ee:	f107 0310 	add.w	r3, r7, #16
 80014f2:	4619      	mov	r1, r3
 80014f4:	481f      	ldr	r0, [pc, #124]	; (8001574 <MX_GPIO_Init+0x154>)
 80014f6:	f001 fded 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUETOOTH_SPI_DAT_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_DAT_Pin;
 80014fa:	2304      	movs	r3, #4
 80014fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BLUETOOTH_SPI_DAT_GPIO_Port, &GPIO_InitStruct);
 8001506:	f107 0310 	add.w	r3, r7, #16
 800150a:	4619      	mov	r1, r3
 800150c:	4819      	ldr	r0, [pc, #100]	; (8001574 <MX_GPIO_Init+0x154>)
 800150e:	f001 fde1 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUETOOTH_SPI_CLK_Pin */
  GPIO_InitStruct.Pin = BLUETOOTH_SPI_CLK_Pin;
 8001512:	2310      	movs	r3, #16
 8001514:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001516:	2301      	movs	r3, #1
 8001518:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800151e:	2303      	movs	r3, #3
 8001520:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUETOOTH_SPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001522:	f107 0310 	add.w	r3, r7, #16
 8001526:	4619      	mov	r1, r3
 8001528:	4813      	ldr	r0, [pc, #76]	; (8001578 <MX_GPIO_Init+0x158>)
 800152a:	f001 fdd3 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_FRONT_LEFT_IN_1_Pin MOTOR_FRONT_LEFT_IN_2_Pin MOTOR_REAR_RIGHT_IN_2_Pin MOTOR_REAR_RIGHT_IN_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_FRONT_LEFT_IN_1_Pin|MOTOR_FRONT_LEFT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_2_Pin|MOTOR_REAR_RIGHT_IN_1_Pin;
 800152e:	2333      	movs	r3, #51	; 0x33
 8001530:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001532:	2301      	movs	r3, #1
 8001534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800153a:	2303      	movs	r3, #3
 800153c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153e:	f107 0310 	add.w	r3, r7, #16
 8001542:	4619      	mov	r1, r3
 8001544:	480d      	ldr	r0, [pc, #52]	; (800157c <MX_GPIO_Init+0x15c>)
 8001546:	f001 fdc5 	bl	80030d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_REAR_LEFT_IN_1_Pin */
  GPIO_InitStruct.Pin = MOTOR_REAR_LEFT_IN_1_Pin;
 800154a:	2304      	movs	r3, #4
 800154c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154e:	2301      	movs	r3, #1
 8001550:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001556:	2303      	movs	r3, #3
 8001558:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MOTOR_REAR_LEFT_IN_1_GPIO_Port, &GPIO_InitStruct);
 800155a:	f107 0310 	add.w	r3, r7, #16
 800155e:	4619      	mov	r1, r3
 8001560:	4807      	ldr	r0, [pc, #28]	; (8001580 <MX_GPIO_Init+0x160>)
 8001562:	f001 fdb7 	bl	80030d4 <HAL_GPIO_Init>

}
 8001566:	bf00      	nop
 8001568:	3720      	adds	r7, #32
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40021000 	.word	0x40021000
 8001574:	40011000 	.word	0x40011000
 8001578:	40010800 	.word	0x40010800
 800157c:	40010c00 	.word	0x40010c00
 8001580:	40011400 	.word	0x40011400

08001584 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  if ((htim == &htim2) || (htim == &htim3) || (htim == &htim4) || (htim == &htim5))
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a0b      	ldr	r2, [pc, #44]	; (80015bc <HAL_TIM_IC_CaptureCallback+0x38>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d00b      	beq.n	80015ac <HAL_TIM_IC_CaptureCallback+0x28>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d007      	beq.n	80015ac <HAL_TIM_IC_CaptureCallback+0x28>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4a09      	ldr	r2, [pc, #36]	; (80015c4 <HAL_TIM_IC_CaptureCallback+0x40>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d003      	beq.n	80015ac <HAL_TIM_IC_CaptureCallback+0x28>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a08      	ldr	r2, [pc, #32]	; (80015c8 <HAL_TIM_IC_CaptureCallback+0x44>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d103      	bne.n	80015b4 <HAL_TIM_IC_CaptureCallback+0x30>
  {
    DRV_updateEncoder(htim);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f007 fb4b 	bl	8008c48 <DRV_updateEncoder>
  else
  {
    ; /* Nothing to do */
  }

  return;
 80015b2:	bf00      	nop
 80015b4:	bf00      	nop
}
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000774 	.word	0x20000774
 80015c0:	200004a0 	.word	0x200004a0
 80015c4:	20000338 	.word	0x20000338
 80015c8:	200003ec 	.word	0x200003ec

080015cc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Check the handle of the timer triggering this callback and update LED */
  if (htim == &htim1)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d101      	bne.n	80015e0 <HAL_TIM_PeriodElapsedCallback+0x14>
  {
    LED_update();
 80015dc:	f008 f8a6 	bl	800972c <LED_update>
  }
  else
  {
    ; /* Nothing to do */
  }
}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	200006c0 	.word	0x200006c0

080015ec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Check the handle of the UART triggering this callback and actually receive date */
  if (huart == &huart1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a08      	ldr	r2, [pc, #32]	; (8001618 <HAL_UART_RxCpltCallback+0x2c>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d102      	bne.n	8001602 <HAL_UART_RxCpltCallback+0x16>
  {
    CON_receiveData();
 80015fc:	f007 fa40 	bl	8008a80 <CON_receiveData>
  }
  else
  {
    ; /* Nothing to do */
  }
}
 8001600:	e006      	b.n	8001610 <HAL_UART_RxCpltCallback+0x24>
  else if (huart == &huart2)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a05      	ldr	r2, [pc, #20]	; (800161c <HAL_UART_RxCpltCallback+0x30>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d102      	bne.n	8001610 <HAL_UART_RxCpltCallback+0x24>
    MAS_receiveData(&huart2);
 800160a:	4804      	ldr	r0, [pc, #16]	; (800161c <HAL_UART_RxCpltCallback+0x30>)
 800160c:	f008 f9b4 	bl	8009978 <MAS_receiveData>
}
 8001610:	bf00      	nop
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000584 	.word	0x20000584
 800161c:	20000828 	.word	0x20000828

08001620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001624:	b672      	cpsid	i
}
 8001626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  LOG_error("Error_Handler() triggered");
 8001628:	4902      	ldr	r1, [pc, #8]	; (8001634 <Error_Handler+0x14>)
 800162a:	2003      	movs	r0, #3
 800162c:	f008 f958 	bl	80098e0 <LOG_log>

  while (1)
 8001630:	e7fe      	b.n	8001630 <Error_Handler+0x10>
 8001632:	bf00      	nop
 8001634:	0800b174 	.word	0x0800b174

08001638 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
     LOG_error("Wrong parameters: %s@%d", file, line);
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	4904      	ldr	r1, [pc, #16]	; (8001658 <assert_failed+0x20>)
 8001648:	2003      	movs	r0, #3
 800164a:	f008 f949 	bl	80098e0 <LOG_log>

    return;
 800164e:	bf00      	nop
  /* USER CODE END 6 */
}
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	0800b190 	.word	0x0800b190

0800165c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001662:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <HAL_MspInit+0x5c>)
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	4a14      	ldr	r2, [pc, #80]	; (80016b8 <HAL_MspInit+0x5c>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6193      	str	r3, [r2, #24]
 800166e:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_MspInit+0x5c>)
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800167a:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <HAL_MspInit+0x5c>)
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	4a0e      	ldr	r2, [pc, #56]	; (80016b8 <HAL_MspInit+0x5c>)
 8001680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001684:	61d3      	str	r3, [r2, #28]
 8001686:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <HAL_MspInit+0x5c>)
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001692:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <HAL_MspInit+0x60>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	4a04      	ldr	r2, [pc, #16]	; (80016bc <HAL_MspInit+0x60>)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ae:	bf00      	nop
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	40021000 	.word	0x40021000
 80016bc:	40010000 	.word	0x40010000

080016c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b088      	sub	sp, #32
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c8:	f107 0310 	add.w	r3, r7, #16
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a14      	ldr	r2, [pc, #80]	; (800172c <HAL_ADC_MspInit+0x6c>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d121      	bne.n	8001724 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016e0:	4b13      	ldr	r3, [pc, #76]	; (8001730 <HAL_ADC_MspInit+0x70>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	4a12      	ldr	r2, [pc, #72]	; (8001730 <HAL_ADC_MspInit+0x70>)
 80016e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ea:	6193      	str	r3, [r2, #24]
 80016ec:	4b10      	ldr	r3, [pc, #64]	; (8001730 <HAL_ADC_MspInit+0x70>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f8:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <HAL_ADC_MspInit+0x70>)
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	4a0c      	ldr	r2, [pc, #48]	; (8001730 <HAL_ADC_MspInit+0x70>)
 80016fe:	f043 0304 	orr.w	r3, r3, #4
 8001702:	6193      	str	r3, [r2, #24]
 8001704:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <HAL_ADC_MspInit+0x70>)
 8001706:	699b      	ldr	r3, [r3, #24]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = BATTERY_ADC_Pin;
 8001710:	2320      	movs	r3, #32
 8001712:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001714:	2303      	movs	r3, #3
 8001716:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(BATTERY_ADC_GPIO_Port, &GPIO_InitStruct);
 8001718:	f107 0310 	add.w	r3, r7, #16
 800171c:	4619      	mov	r1, r3
 800171e:	4805      	ldr	r0, [pc, #20]	; (8001734 <HAL_ADC_MspInit+0x74>)
 8001720:	f001 fcd8 	bl	80030d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001724:	bf00      	nop
 8001726:	3720      	adds	r7, #32
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40012400 	.word	0x40012400
 8001730:	40021000 	.word	0x40021000
 8001734:	40010800 	.word	0x40010800

08001738 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0b      	ldr	r2, [pc, #44]	; (8001774 <HAL_RTC_MspInit+0x3c>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d110      	bne.n	800176c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800174a:	f001 ffb1 	bl	80036b0 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <HAL_RTC_MspInit+0x40>)
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	4a09      	ldr	r2, [pc, #36]	; (8001778 <HAL_RTC_MspInit+0x40>)
 8001754:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001758:	61d3      	str	r3, [r2, #28]
 800175a:	4b07      	ldr	r3, [pc, #28]	; (8001778 <HAL_RTC_MspInit+0x40>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001766:	4b05      	ldr	r3, [pc, #20]	; (800177c <HAL_RTC_MspInit+0x44>)
 8001768:	2201      	movs	r2, #1
 800176a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800176c:	bf00      	nop
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40002800 	.word	0x40002800
 8001778:	40021000 	.word	0x40021000
 800177c:	4242043c 	.word	0x4242043c

08001780 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a28      	ldr	r2, [pc, #160]	; (8001830 <HAL_TIM_Base_MspInit+0xb0>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d114      	bne.n	80017bc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001792:	4b28      	ldr	r3, [pc, #160]	; (8001834 <HAL_TIM_Base_MspInit+0xb4>)
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	4a27      	ldr	r2, [pc, #156]	; (8001834 <HAL_TIM_Base_MspInit+0xb4>)
 8001798:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800179c:	6193      	str	r3, [r2, #24]
 800179e:	4b25      	ldr	r3, [pc, #148]	; (8001834 <HAL_TIM_Base_MspInit+0xb4>)
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 4, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2104      	movs	r1, #4
 80017ae:	2019      	movs	r0, #25
 80017b0:	f001 fafe 	bl	8002db0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80017b4:	2019      	movs	r0, #25
 80017b6:	f001 fb27 	bl	8002e08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80017ba:	e034      	b.n	8001826 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM6)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a1d      	ldr	r2, [pc, #116]	; (8001838 <HAL_TIM_Base_MspInit+0xb8>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d10c      	bne.n	80017e0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80017c6:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <HAL_TIM_Base_MspInit+0xb4>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	4a1a      	ldr	r2, [pc, #104]	; (8001834 <HAL_TIM_Base_MspInit+0xb4>)
 80017cc:	f043 0310 	orr.w	r3, r3, #16
 80017d0:	61d3      	str	r3, [r2, #28]
 80017d2:	4b18      	ldr	r3, [pc, #96]	; (8001834 <HAL_TIM_Base_MspInit+0xb4>)
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	f003 0310 	and.w	r3, r3, #16
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	693b      	ldr	r3, [r7, #16]
}
 80017de:	e022      	b.n	8001826 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM7)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a15      	ldr	r2, [pc, #84]	; (800183c <HAL_TIM_Base_MspInit+0xbc>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d10c      	bne.n	8001804 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <HAL_TIM_Base_MspInit+0xb4>)
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	4a11      	ldr	r2, [pc, #68]	; (8001834 <HAL_TIM_Base_MspInit+0xb4>)
 80017f0:	f043 0320 	orr.w	r3, r3, #32
 80017f4:	61d3      	str	r3, [r2, #28]
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <HAL_TIM_Base_MspInit+0xb4>)
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	f003 0320 	and.w	r3, r3, #32
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
}
 8001802:	e010      	b.n	8001826 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM8)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a0d      	ldr	r2, [pc, #52]	; (8001840 <HAL_TIM_Base_MspInit+0xc0>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d10b      	bne.n	8001826 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <HAL_TIM_Base_MspInit+0xb4>)
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	4a08      	ldr	r2, [pc, #32]	; (8001834 <HAL_TIM_Base_MspInit+0xb4>)
 8001814:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001818:	6193      	str	r3, [r2, #24]
 800181a:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_TIM_Base_MspInit+0xb4>)
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	68bb      	ldr	r3, [r7, #8]
}
 8001826:	bf00      	nop
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40012c00 	.word	0x40012c00
 8001834:	40021000 	.word	0x40021000
 8001838:	40001000 	.word	0x40001000
 800183c:	40001400 	.word	0x40001400
 8001840:	40013400 	.word	0x40013400

08001844 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b090      	sub	sp, #64	; 0x40
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001862:	d157      	bne.n	8001914 <HAL_TIM_Encoder_MspInit+0xd0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001864:	4b78      	ldr	r3, [pc, #480]	; (8001a48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	4a77      	ldr	r2, [pc, #476]	; (8001a48 <HAL_TIM_Encoder_MspInit+0x204>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	61d3      	str	r3, [r2, #28]
 8001870:	4b75      	ldr	r3, [pc, #468]	; (8001a48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001872:	69db      	ldr	r3, [r3, #28]
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	62bb      	str	r3, [r7, #40]	; 0x28
 800187a:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187c:	4b72      	ldr	r3, [pc, #456]	; (8001a48 <HAL_TIM_Encoder_MspInit+0x204>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	4a71      	ldr	r2, [pc, #452]	; (8001a48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001882:	f043 0304 	orr.w	r3, r3, #4
 8001886:	6193      	str	r3, [r2, #24]
 8001888:	4b6f      	ldr	r3, [pc, #444]	; (8001a48 <HAL_TIM_Encoder_MspInit+0x204>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001894:	4b6c      	ldr	r3, [pc, #432]	; (8001a48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	4a6b      	ldr	r2, [pc, #428]	; (8001a48 <HAL_TIM_Encoder_MspInit+0x204>)
 800189a:	f043 0308 	orr.w	r3, r3, #8
 800189e:	6193      	str	r3, [r2, #24]
 80018a0:	4b69      	ldr	r3, [pc, #420]	; (8001a48 <HAL_TIM_Encoder_MspInit+0x204>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	f003 0308 	and.w	r3, r3, #8
 80018a8:	623b      	str	r3, [r7, #32]
 80018aa:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_1_IN_1_Pin;
 80018ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b2:	2300      	movs	r3, #0
 80018b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENCODER_1_IN_1_GPIO_Port, &GPIO_InitStruct);
 80018ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018be:	4619      	mov	r1, r3
 80018c0:	4862      	ldr	r0, [pc, #392]	; (8001a4c <HAL_TIM_Encoder_MspInit+0x208>)
 80018c2:	f001 fc07 	bl	80030d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER_1_IN_2_Pin;
 80018c6:	2308      	movs	r3, #8
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ca:	2300      	movs	r3, #0
 80018cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENCODER_1_IN_2_GPIO_Port, &GPIO_InitStruct);
 80018d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018d6:	4619      	mov	r1, r3
 80018d8:	485d      	ldr	r0, [pc, #372]	; (8001a50 <HAL_TIM_Encoder_MspInit+0x20c>)
 80018da:	f001 fbfb 	bl	80030d4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80018de:	4b5d      	ldr	r3, [pc, #372]	; (8001a54 <HAL_TIM_Encoder_MspInit+0x210>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80018ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018ee:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80018f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018fc:	4a55      	ldr	r2, [pc, #340]	; (8001a54 <HAL_TIM_Encoder_MspInit+0x210>)
 80018fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001900:	6053      	str	r3, [r2, #4]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2105      	movs	r1, #5
 8001906:	201c      	movs	r0, #28
 8001908:	f001 fa52 	bl	8002db0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800190c:	201c      	movs	r0, #28
 800190e:	f001 fa7b 	bl	8002e08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001912:	e094      	b.n	8001a3e <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM3)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a4f      	ldr	r2, [pc, #316]	; (8001a58 <HAL_TIM_Encoder_MspInit+0x214>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d12c      	bne.n	8001978 <HAL_TIM_Encoder_MspInit+0x134>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800191e:	4b4a      	ldr	r3, [pc, #296]	; (8001a48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	4a49      	ldr	r2, [pc, #292]	; (8001a48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001924:	f043 0302 	orr.w	r3, r3, #2
 8001928:	61d3      	str	r3, [r2, #28]
 800192a:	4b47      	ldr	r3, [pc, #284]	; (8001a48 <HAL_TIM_Encoder_MspInit+0x204>)
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	61fb      	str	r3, [r7, #28]
 8001934:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001936:	4b44      	ldr	r3, [pc, #272]	; (8001a48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	4a43      	ldr	r2, [pc, #268]	; (8001a48 <HAL_TIM_Encoder_MspInit+0x204>)
 800193c:	f043 0304 	orr.w	r3, r3, #4
 8001940:	6193      	str	r3, [r2, #24]
 8001942:	4b41      	ldr	r3, [pc, #260]	; (8001a48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	f003 0304 	and.w	r3, r3, #4
 800194a:	61bb      	str	r3, [r7, #24]
 800194c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENCODER_2_IN_1_Pin|ENCODER_2_IN_2_Pin;
 800194e:	23c0      	movs	r3, #192	; 0xc0
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001952:	2300      	movs	r3, #0
 8001954:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800195e:	4619      	mov	r1, r3
 8001960:	483a      	ldr	r0, [pc, #232]	; (8001a4c <HAL_TIM_Encoder_MspInit+0x208>)
 8001962:	f001 fbb7 	bl	80030d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	2105      	movs	r1, #5
 800196a:	201d      	movs	r0, #29
 800196c:	f001 fa20 	bl	8002db0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001970:	201d      	movs	r0, #29
 8001972:	f001 fa49 	bl	8002e08 <HAL_NVIC_EnableIRQ>
}
 8001976:	e062      	b.n	8001a3e <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM4)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a37      	ldr	r2, [pc, #220]	; (8001a5c <HAL_TIM_Encoder_MspInit+0x218>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d12c      	bne.n	80019dc <HAL_TIM_Encoder_MspInit+0x198>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001982:	4b31      	ldr	r3, [pc, #196]	; (8001a48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	4a30      	ldr	r2, [pc, #192]	; (8001a48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001988:	f043 0304 	orr.w	r3, r3, #4
 800198c:	61d3      	str	r3, [r2, #28]
 800198e:	4b2e      	ldr	r3, [pc, #184]	; (8001a48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800199a:	4b2b      	ldr	r3, [pc, #172]	; (8001a48 <HAL_TIM_Encoder_MspInit+0x204>)
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	4a2a      	ldr	r2, [pc, #168]	; (8001a48 <HAL_TIM_Encoder_MspInit+0x204>)
 80019a0:	f043 0308 	orr.w	r3, r3, #8
 80019a4:	6193      	str	r3, [r2, #24]
 80019a6:	4b28      	ldr	r3, [pc, #160]	; (8001a48 <HAL_TIM_Encoder_MspInit+0x204>)
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	f003 0308 	and.w	r3, r3, #8
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENCODER_3_IN_1_Pin|ENCODER_3_IN_2_Pin;
 80019b2:	23c0      	movs	r3, #192	; 0xc0
 80019b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b6:	2300      	movs	r3, #0
 80019b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c2:	4619      	mov	r1, r3
 80019c4:	4822      	ldr	r0, [pc, #136]	; (8001a50 <HAL_TIM_Encoder_MspInit+0x20c>)
 80019c6:	f001 fb85 	bl	80030d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80019ca:	2200      	movs	r2, #0
 80019cc:	2105      	movs	r1, #5
 80019ce:	201e      	movs	r0, #30
 80019d0:	f001 f9ee 	bl	8002db0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80019d4:	201e      	movs	r0, #30
 80019d6:	f001 fa17 	bl	8002e08 <HAL_NVIC_EnableIRQ>
}
 80019da:	e030      	b.n	8001a3e <HAL_TIM_Encoder_MspInit+0x1fa>
  else if(htim_encoder->Instance==TIM5)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a1f      	ldr	r2, [pc, #124]	; (8001a60 <HAL_TIM_Encoder_MspInit+0x21c>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d12b      	bne.n	8001a3e <HAL_TIM_Encoder_MspInit+0x1fa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80019e6:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <HAL_TIM_Encoder_MspInit+0x204>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	4a17      	ldr	r2, [pc, #92]	; (8001a48 <HAL_TIM_Encoder_MspInit+0x204>)
 80019ec:	f043 0308 	orr.w	r3, r3, #8
 80019f0:	61d3      	str	r3, [r2, #28]
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <HAL_TIM_Encoder_MspInit+0x204>)
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fe:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	4a11      	ldr	r2, [pc, #68]	; (8001a48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a04:	f043 0304 	orr.w	r3, r3, #4
 8001a08:	6193      	str	r3, [r2, #24]
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	; (8001a48 <HAL_TIM_Encoder_MspInit+0x204>)
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_4_IN_1_Pin|ENCODER_4_IN_2_Pin;
 8001a16:	2303      	movs	r3, #3
 8001a18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a26:	4619      	mov	r1, r3
 8001a28:	4808      	ldr	r0, [pc, #32]	; (8001a4c <HAL_TIM_Encoder_MspInit+0x208>)
 8001a2a:	f001 fb53 	bl	80030d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2105      	movs	r1, #5
 8001a32:	2032      	movs	r0, #50	; 0x32
 8001a34:	f001 f9bc 	bl	8002db0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001a38:	2032      	movs	r0, #50	; 0x32
 8001a3a:	f001 f9e5 	bl	8002e08 <HAL_NVIC_EnableIRQ>
}
 8001a3e:	bf00      	nop
 8001a40:	3740      	adds	r7, #64	; 0x40
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40010800 	.word	0x40010800
 8001a50:	40010c00 	.word	0x40010c00
 8001a54:	40010000 	.word	0x40010000
 8001a58:	40000400 	.word	0x40000400
 8001a5c:	40000800 	.word	0x40000800
 8001a60:	40000c00 	.word	0x40000c00

08001a64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b088      	sub	sp, #32
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	f107 0310 	add.w	r3, r7, #16
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM8)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a10      	ldr	r2, [pc, #64]	; (8001ac0 <HAL_TIM_MspPostInit+0x5c>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d118      	bne.n	8001ab6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a84:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <HAL_TIM_MspPostInit+0x60>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	4a0e      	ldr	r2, [pc, #56]	; (8001ac4 <HAL_TIM_MspPostInit+0x60>)
 8001a8a:	f043 0310 	orr.w	r3, r3, #16
 8001a8e:	6193      	str	r3, [r2, #24]
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <HAL_TIM_MspPostInit+0x60>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	f003 0310 	and.w	r3, r3, #16
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_FRONT_LEFT_PWM_Pin|MOTOR_FRONT_RIGHT_PWM_Pin|MOTOR_REAR_LEFT_PWM_Pin|MOTOR_REAR_RIGHT_PWM_Pin;
 8001a9c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001aa0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aaa:	f107 0310 	add.w	r3, r7, #16
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4805      	ldr	r0, [pc, #20]	; (8001ac8 <HAL_TIM_MspPostInit+0x64>)
 8001ab2:	f001 fb0f 	bl	80030d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001ab6:	bf00      	nop
 8001ab8:	3720      	adds	r7, #32
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40013400 	.word	0x40013400
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40011000 	.word	0x40011000

08001acc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	; 0x28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 0318 	add.w	r3, r7, #24
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a3f      	ldr	r2, [pc, #252]	; (8001be4 <HAL_UART_MspInit+0x118>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d13a      	bne.n	8001b62 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001aec:	4b3e      	ldr	r3, [pc, #248]	; (8001be8 <HAL_UART_MspInit+0x11c>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	4a3d      	ldr	r2, [pc, #244]	; (8001be8 <HAL_UART_MspInit+0x11c>)
 8001af2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af6:	6193      	str	r3, [r2, #24]
 8001af8:	4b3b      	ldr	r3, [pc, #236]	; (8001be8 <HAL_UART_MspInit+0x11c>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b04:	4b38      	ldr	r3, [pc, #224]	; (8001be8 <HAL_UART_MspInit+0x11c>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	4a37      	ldr	r2, [pc, #220]	; (8001be8 <HAL_UART_MspInit+0x11c>)
 8001b0a:	f043 0304 	orr.w	r3, r3, #4
 8001b0e:	6193      	str	r3, [r2, #24]
 8001b10:	4b35      	ldr	r3, [pc, #212]	; (8001be8 <HAL_UART_MspInit+0x11c>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b26:	2303      	movs	r3, #3
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2a:	f107 0318 	add.w	r3, r7, #24
 8001b2e:	4619      	mov	r1, r3
 8001b30:	482e      	ldr	r0, [pc, #184]	; (8001bec <HAL_UART_MspInit+0x120>)
 8001b32:	f001 facf 	bl	80030d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b44:	f107 0318 	add.w	r3, r7, #24
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4828      	ldr	r0, [pc, #160]	; (8001bec <HAL_UART_MspInit+0x120>)
 8001b4c:	f001 fac2 	bl	80030d4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8001b50:	2200      	movs	r2, #0
 8001b52:	2103      	movs	r1, #3
 8001b54:	2025      	movs	r0, #37	; 0x25
 8001b56:	f001 f92b 	bl	8002db0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b5a:	2025      	movs	r0, #37	; 0x25
 8001b5c:	f001 f954 	bl	8002e08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b60:	e03c      	b.n	8001bdc <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a22      	ldr	r2, [pc, #136]	; (8001bf0 <HAL_UART_MspInit+0x124>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d137      	bne.n	8001bdc <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b6c:	4b1e      	ldr	r3, [pc, #120]	; (8001be8 <HAL_UART_MspInit+0x11c>)
 8001b6e:	69db      	ldr	r3, [r3, #28]
 8001b70:	4a1d      	ldr	r2, [pc, #116]	; (8001be8 <HAL_UART_MspInit+0x11c>)
 8001b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b76:	61d3      	str	r3, [r2, #28]
 8001b78:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <HAL_UART_MspInit+0x11c>)
 8001b7a:	69db      	ldr	r3, [r3, #28]
 8001b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b84:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <HAL_UART_MspInit+0x11c>)
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	4a17      	ldr	r2, [pc, #92]	; (8001be8 <HAL_UART_MspInit+0x11c>)
 8001b8a:	f043 0304 	orr.w	r3, r3, #4
 8001b8e:	6193      	str	r3, [r2, #24]
 8001b90:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <HAL_UART_MspInit+0x11c>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b9c:	2304      	movs	r3, #4
 8001b9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba8:	f107 0318 	add.w	r3, r7, #24
 8001bac:	4619      	mov	r1, r3
 8001bae:	480f      	ldr	r0, [pc, #60]	; (8001bec <HAL_UART_MspInit+0x120>)
 8001bb0:	f001 fa90 	bl	80030d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bb4:	2308      	movs	r3, #8
 8001bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc0:	f107 0318 	add.w	r3, r7, #24
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4809      	ldr	r0, [pc, #36]	; (8001bec <HAL_UART_MspInit+0x120>)
 8001bc8:	f001 fa84 	bl	80030d4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2102      	movs	r1, #2
 8001bd0:	2026      	movs	r0, #38	; 0x26
 8001bd2:	f001 f8ed 	bl	8002db0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bd6:	2026      	movs	r0, #38	; 0x26
 8001bd8:	f001 f916 	bl	8002e08 <HAL_NVIC_EnableIRQ>
}
 8001bdc:	bf00      	nop
 8001bde:	3728      	adds	r7, #40	; 0x28
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40013800 	.word	0x40013800
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40010800 	.word	0x40010800
 8001bf0:	40004400 	.word	0x40004400

08001bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  LOG_error("NMI_Handler() triggered");
 8001bf8:	4902      	ldr	r1, [pc, #8]	; (8001c04 <NMI_Handler+0x10>)
 8001bfa:	2003      	movs	r0, #3
 8001bfc:	f007 fe70 	bl	80098e0 <LOG_log>
  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c00:	e7fe      	b.n	8001c00 <NMI_Handler+0xc>
 8001c02:	bf00      	nop
 8001c04:	0800b1a8 	.word	0x0800b1a8

08001c08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  LOG_error("HardFault_Handler() triggered");
 8001c0c:	4902      	ldr	r1, [pc, #8]	; (8001c18 <HardFault_Handler+0x10>)
 8001c0e:	2003      	movs	r0, #3
 8001c10:	f007 fe66 	bl	80098e0 <LOG_log>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c14:	e7fe      	b.n	8001c14 <HardFault_Handler+0xc>
 8001c16:	bf00      	nop
 8001c18:	0800b1c0 	.word	0x0800b1c0

08001c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  LOG_error("MemManage_Handler() triggered");
 8001c20:	4902      	ldr	r1, [pc, #8]	; (8001c2c <MemManage_Handler+0x10>)
 8001c22:	2003      	movs	r0, #3
 8001c24:	f007 fe5c 	bl	80098e0 <LOG_log>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <MemManage_Handler+0xc>
 8001c2a:	bf00      	nop
 8001c2c:	0800b1e0 	.word	0x0800b1e0

08001c30 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  LOG_error("BusFault_Handler() triggered");
 8001c34:	4902      	ldr	r1, [pc, #8]	; (8001c40 <BusFault_Handler+0x10>)
 8001c36:	2003      	movs	r0, #3
 8001c38:	f007 fe52 	bl	80098e0 <LOG_log>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <BusFault_Handler+0xc>
 8001c3e:	bf00      	nop
 8001c40:	0800b200 	.word	0x0800b200

08001c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
  LOG_error("UsageFault_Handler() triggered");
 8001c48:	4902      	ldr	r1, [pc, #8]	; (8001c54 <UsageFault_Handler+0x10>)
 8001c4a:	2003      	movs	r0, #3
 8001c4c:	f007 fe48 	bl	80098e0 <LOG_log>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c50:	e7fe      	b.n	8001c50 <UsageFault_Handler+0xc>
 8001c52:	bf00      	nop
 8001c54:	0800b220 	.word	0x0800b220

08001c58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SVCall_IRQn 0 */
  LOG_error("SVC_Handler() triggered");
 8001c5c:	4902      	ldr	r1, [pc, #8]	; (8001c68 <SVC_Handler+0x10>)
 8001c5e:	2003      	movs	r0, #3
 8001c60:	f007 fe3e 	bl	80098e0 <LOG_log>
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	0800b240 	.word	0x0800b240

08001c6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  LOG_error("DebugMon_Handler() triggered");
 8001c70:	4902      	ldr	r1, [pc, #8]	; (8001c7c <DebugMon_Handler+0x10>)
 8001c72:	2003      	movs	r0, #3
 8001c74:	f007 fe34 	bl	80098e0 <LOG_log>
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c78:	bf00      	nop
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	0800b258 	.word	0x0800b258

08001c80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  LOG_error("PendSV_Handler() triggered");
 8001c84:	4902      	ldr	r1, [pc, #8]	; (8001c90 <PendSV_Handler+0x10>)
 8001c86:	2003      	movs	r0, #3
 8001c88:	f007 fe2a 	bl	80098e0 <LOG_log>
  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	0800b278 	.word	0x0800b278

08001c94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c98:	f000 f968 	bl	8001f6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ca4:	4802      	ldr	r0, [pc, #8]	; (8001cb0 <TIM1_UP_IRQHandler+0x10>)
 8001ca6:	f004 fa05 	bl	80060b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	200006c0 	.word	0x200006c0

08001cb4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cb8:	4802      	ldr	r0, [pc, #8]	; (8001cc4 <TIM2_IRQHandler+0x10>)
 8001cba:	f004 f9fb 	bl	80060b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000774 	.word	0x20000774

08001cc8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ccc:	4802      	ldr	r0, [pc, #8]	; (8001cd8 <TIM3_IRQHandler+0x10>)
 8001cce:	f004 f9f1 	bl	80060b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	200004a0 	.word	0x200004a0

08001cdc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ce0:	4802      	ldr	r0, [pc, #8]	; (8001cec <TIM4_IRQHandler+0x10>)
 8001ce2:	f004 f9e7 	bl	80060b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20000338 	.word	0x20000338

08001cf0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cf4:	4802      	ldr	r0, [pc, #8]	; (8001d00 <USART1_IRQHandler+0x10>)
 8001cf6:	f005 ff3d 	bl	8007b74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000584 	.word	0x20000584

08001d04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d08:	4802      	ldr	r0, [pc, #8]	; (8001d14 <USART2_IRQHandler+0x10>)
 8001d0a:	f005 ff33 	bl	8007b74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000828 	.word	0x20000828

08001d18 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001d1c:	4802      	ldr	r0, [pc, #8]	; (8001d28 <TIM5_IRQHandler+0x10>)
 8001d1e:	f004 f9c9 	bl	80060b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	200003ec 	.word	0x200003ec

08001d2c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]
 8001d3c:	e00a      	b.n	8001d54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d3e:	f3af 8000 	nop.w
 8001d42:	4601      	mov	r1, r0
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	1c5a      	adds	r2, r3, #1
 8001d48:	60ba      	str	r2, [r7, #8]
 8001d4a:	b2ca      	uxtb	r2, r1
 8001d4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	3301      	adds	r3, #1
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	dbf0      	blt.n	8001d3e <_read+0x12>
	}

return len;
 8001d5c:	687b      	ldr	r3, [r7, #4]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  if ((file != STDOUT_FILENO) && (file != STDERR_FILENO))
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d00a      	beq.n	8001d90 <_write+0x28>
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d007      	beq.n	8001d90 <_write+0x28>
  {
    errno = EBADF;
 8001d80:	f008 f844 	bl	8009e0c <__errno>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2209      	movs	r2, #9
 8001d88:	601a      	str	r2, [r3, #0]
    return -1;
 8001d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8e:	e00f      	b.n	8001db0 <_write+0x48>
  }

  HAL_StatusTypeDef status = HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, 1000);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d98:	68b9      	ldr	r1, [r7, #8]
 8001d9a:	4807      	ldr	r0, [pc, #28]	; (8001db8 <_write+0x50>)
 8001d9c:	f005 fe28 	bl	80079f0 <HAL_UART_Transmit>
 8001da0:	4603      	mov	r3, r0
 8001da2:	75fb      	strb	r3, [r7, #23]
  return (status == HAL_OK ? len : 0);
 8001da4:	7dfb      	ldrb	r3, [r7, #23]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <_write+0x46>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	e000      	b.n	8001db0 <_write+0x48>
 8001dae:	2300      	movs	r3, #0

}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000584 	.word	0x20000584

08001dbc <_close>:

int _close(int file)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
	return -1;
 8001dc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr

08001dd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001de2:	605a      	str	r2, [r3, #4]
	return 0;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <_isatty>:

int _isatty(int file)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	return 1;
 8001df8:	2301      	movs	r3, #1
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr

08001e04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
	return 0;
 8001e10:	2300      	movs	r3, #0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr

08001e1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e24:	4a14      	ldr	r2, [pc, #80]	; (8001e78 <_sbrk+0x5c>)
 8001e26:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <_sbrk+0x60>)
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e30:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <_sbrk+0x64>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d102      	bne.n	8001e3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <_sbrk+0x64>)
 8001e3a:	4a12      	ldr	r2, [pc, #72]	; (8001e84 <_sbrk+0x68>)
 8001e3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e3e:	4b10      	ldr	r3, [pc, #64]	; (8001e80 <_sbrk+0x64>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d207      	bcs.n	8001e5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e4c:	f007 ffde 	bl	8009e0c <__errno>
 8001e50:	4603      	mov	r3, r0
 8001e52:	220c      	movs	r2, #12
 8001e54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e56:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5a:	e009      	b.n	8001e70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e5c:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <_sbrk+0x64>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e62:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <_sbrk+0x64>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4413      	add	r3, r2
 8001e6a:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <_sbrk+0x64>)
 8001e6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	2000c000 	.word	0x2000c000
 8001e7c:	00000400 	.word	0x00000400
 8001e80:	200000a4 	.word	0x200000a4
 8001e84:	20000968 	.word	0x20000968

08001e88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr

08001e94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e94:	480c      	ldr	r0, [pc, #48]	; (8001ec8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e96:	490d      	ldr	r1, [pc, #52]	; (8001ecc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e98:	4a0d      	ldr	r2, [pc, #52]	; (8001ed0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e9c:	e002      	b.n	8001ea4 <LoopCopyDataInit>

08001e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ea2:	3304      	adds	r3, #4

08001ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea8:	d3f9      	bcc.n	8001e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ed4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001eac:	4c0a      	ldr	r4, [pc, #40]	; (8001ed8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb0:	e001      	b.n	8001eb6 <LoopFillZerobss>

08001eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb4:	3204      	adds	r2, #4

08001eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb8:	d3fb      	bcc.n	8001eb2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001eba:	f7ff ffe5 	bl	8001e88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ebe:	f007 ffab 	bl	8009e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ec2:	f7fe fdbd 	bl	8000a40 <main>
  bx lr
 8001ec6:	4770      	bx	lr
  ldr r0, =_sdata
 8001ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ecc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001ed0:	0800ba64 	.word	0x0800ba64
  ldr r2, =_sbss
 8001ed4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001ed8:	20000964 	.word	0x20000964

08001edc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001edc:	e7fe      	b.n	8001edc <ADC1_2_IRQHandler>
	...

08001ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ee4:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <HAL_Init+0x28>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a07      	ldr	r2, [pc, #28]	; (8001f08 <HAL_Init+0x28>)
 8001eea:	f043 0310 	orr.w	r3, r3, #16
 8001eee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ef0:	2003      	movs	r0, #3
 8001ef2:	f000 ff3d 	bl	8002d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ef6:	2000      	movs	r0, #0
 8001ef8:	f000 f808 	bl	8001f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001efc:	f7ff fbae 	bl	800165c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40022000 	.word	0x40022000

08001f0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f14:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <HAL_InitTick+0x54>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <HAL_InitTick+0x58>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 ff84 	bl	8002e38 <HAL_SYSTICK_Config>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e00e      	b.n	8001f58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b0f      	cmp	r3, #15
 8001f3e:	d80a      	bhi.n	8001f56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f40:	2200      	movs	r2, #0
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	f04f 30ff 	mov.w	r0, #4294967295
 8001f48:	f000 ff32 	bl	8002db0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f4c:	4a06      	ldr	r2, [pc, #24]	; (8001f68 <HAL_InitTick+0x5c>)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	e000      	b.n	8001f58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20000000 	.word	0x20000000
 8001f64:	20000008 	.word	0x20000008
 8001f68:	20000004 	.word	0x20000004

08001f6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f70:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <HAL_IncTick+0x1c>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	461a      	mov	r2, r3
 8001f76:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <HAL_IncTick+0x20>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	4a03      	ldr	r2, [pc, #12]	; (8001f8c <HAL_IncTick+0x20>)
 8001f7e:	6013      	str	r3, [r2, #0]
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr
 8001f88:	20000008 	.word	0x20000008
 8001f8c:	20000950 	.word	0x20000950

08001f90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return uwTick;
 8001f94:	4b02      	ldr	r3, [pc, #8]	; (8001fa0 <HAL_GetTick+0x10>)
 8001f96:	681b      	ldr	r3, [r3, #0]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr
 8001fa0:	20000950 	.word	0x20000950

08001fa4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fac:	2300      	movs	r3, #0
 8001fae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e188      	b.n	80022d8 <HAL_ADC_Init+0x334>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a8c      	ldr	r2, [pc, #560]	; (80021fc <HAL_ADC_Init+0x258>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d00e      	beq.n	8001fee <HAL_ADC_Init+0x4a>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a8a      	ldr	r2, [pc, #552]	; (8002200 <HAL_ADC_Init+0x25c>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d009      	beq.n	8001fee <HAL_ADC_Init+0x4a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a89      	ldr	r2, [pc, #548]	; (8002204 <HAL_ADC_Init+0x260>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d004      	beq.n	8001fee <HAL_ADC_Init+0x4a>
 8001fe4:	f240 11b3 	movw	r1, #435	; 0x1b3
 8001fe8:	4887      	ldr	r0, [pc, #540]	; (8002208 <HAL_ADC_Init+0x264>)
 8001fea:	f7ff fb25 	bl	8001638 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d009      	beq.n	800200a <HAL_ADC_Init+0x66>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ffe:	d004      	beq.n	800200a <HAL_ADC_Init+0x66>
 8002000:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 8002004:	4880      	ldr	r0, [pc, #512]	; (8002208 <HAL_ADC_Init+0x264>)
 8002006:	f7ff fb17 	bl	8001638 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d009      	beq.n	8002026 <HAL_ADC_Init+0x82>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800201a:	d004      	beq.n	8002026 <HAL_ADC_Init+0x82>
 800201c:	f240 11b5 	movw	r1, #437	; 0x1b5
 8002020:	4879      	ldr	r0, [pc, #484]	; (8002208 <HAL_ADC_Init+0x264>)
 8002022:	f7ff fb09 	bl	8001638 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	7b1b      	ldrb	r3, [r3, #12]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d008      	beq.n	8002040 <HAL_ADC_Init+0x9c>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	7b1b      	ldrb	r3, [r3, #12]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d004      	beq.n	8002040 <HAL_ADC_Init+0x9c>
 8002036:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 800203a:	4873      	ldr	r0, [pc, #460]	; (8002208 <HAL_ADC_Init+0x264>)
 800203c:	f7ff fafc 	bl	8001638 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d044      	beq.n	80020d2 <HAL_ADC_Init+0x12e>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	69db      	ldr	r3, [r3, #28]
 800204c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002050:	d03f      	beq.n	80020d2 <HAL_ADC_Init+0x12e>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800205a:	d03a      	beq.n	80020d2 <HAL_ADC_Init+0x12e>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002064:	d035      	beq.n	80020d2 <HAL_ADC_Init+0x12e>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 800206e:	d030      	beq.n	80020d2 <HAL_ADC_Init+0x12e>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002078:	d02b      	beq.n	80020d2 <HAL_ADC_Init+0x12e>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d027      	beq.n	80020d2 <HAL_ADC_Init+0x12e>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800208a:	d022      	beq.n	80020d2 <HAL_ADC_Init+0x12e>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8002094:	d01d      	beq.n	80020d2 <HAL_ADC_Init+0x12e>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	f5b3 2f20 	cmp.w	r3, #655360	; 0xa0000
 800209e:	d018      	beq.n	80020d2 <HAL_ADC_Init+0x12e>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80020a8:	d013      	beq.n	80020d2 <HAL_ADC_Init+0x12e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80020b2:	d00e      	beq.n	80020d2 <HAL_ADC_Init+0x12e>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80020bc:	d009      	beq.n	80020d2 <HAL_ADC_Init+0x12e>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80020c6:	d004      	beq.n	80020d2 <HAL_ADC_Init+0x12e>
 80020c8:	f240 11b7 	movw	r1, #439	; 0x1b7
 80020cc:	484e      	ldr	r0, [pc, #312]	; (8002208 <HAL_ADC_Init+0x264>)
 80020ce:	f7ff fab3 	bl	8001638 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d02a      	beq.n	8002130 <HAL_ADC_Init+0x18c>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_ADC_Init+0x146>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	2b10      	cmp	r3, #16
 80020e8:	d904      	bls.n	80020f4 <HAL_ADC_Init+0x150>
 80020ea:	f240 11bb 	movw	r1, #443	; 0x1bb
 80020ee:	4846      	ldr	r0, [pc, #280]	; (8002208 <HAL_ADC_Init+0x264>)
 80020f0:	f7ff faa2 	bl	8001638 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	7d1b      	ldrb	r3, [r3, #20]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d008      	beq.n	800210e <HAL_ADC_Init+0x16a>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	7d1b      	ldrb	r3, [r3, #20]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d004      	beq.n	800210e <HAL_ADC_Init+0x16a>
 8002104:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8002108:	483f      	ldr	r0, [pc, #252]	; (8002208 <HAL_ADC_Init+0x264>)
 800210a:	f7ff fa95 	bl	8001638 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	7d1b      	ldrb	r3, [r3, #20]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00c      	beq.n	8002130 <HAL_ADC_Init+0x18c>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_ADC_Init+0x182>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	2b08      	cmp	r3, #8
 8002124:	d904      	bls.n	8002130 <HAL_ADC_Init+0x18c>
 8002126:	f240 11bf 	movw	r1, #447	; 0x1bf
 800212a:	4837      	ldr	r0, [pc, #220]	; (8002208 <HAL_ADC_Init+0x264>)
 800212c:	f7ff fa84 	bl	8001638 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002134:	2b00      	cmp	r3, #0
 8002136:	d109      	bne.n	800214c <HAL_ADC_Init+0x1a8>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff faba 	bl	80016c0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 fd01 	bl	8002b54 <ADC_ConversionStop_Disable>
 8002152:	4603      	mov	r3, r0
 8002154:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215a:	f003 0310 	and.w	r3, r3, #16
 800215e:	2b00      	cmp	r3, #0
 8002160:	f040 80b1 	bne.w	80022c6 <HAL_ADC_Init+0x322>
 8002164:	7dfb      	ldrb	r3, [r7, #23]
 8002166:	2b00      	cmp	r3, #0
 8002168:	f040 80ad 	bne.w	80022c6 <HAL_ADC_Init+0x322>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002170:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002174:	f023 0302 	bic.w	r3, r3, #2
 8002178:	f043 0202 	orr.w	r2, r3, #2
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	491e      	ldr	r1, [pc, #120]	; (8002204 <HAL_ADC_Init+0x260>)
 800218a:	428b      	cmp	r3, r1
 800218c:	d10a      	bne.n	80021a4 <HAL_ADC_Init+0x200>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002196:	d002      	beq.n	800219e <HAL_ADC_Init+0x1fa>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	e004      	b.n	80021a8 <HAL_ADC_Init+0x204>
 800219e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80021a2:	e001      	b.n	80021a8 <HAL_ADC_Init+0x204>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021a8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	7b1b      	ldrb	r3, [r3, #12]
 80021ae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80021b0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021c0:	d003      	beq.n	80021ca <HAL_ADC_Init+0x226>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d102      	bne.n	80021d0 <HAL_ADC_Init+0x22c>
 80021ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021ce:	e000      	b.n	80021d2 <HAL_ADC_Init+0x22e>
 80021d0:	2300      	movs	r3, #0
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	7d1b      	ldrb	r3, [r3, #20]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d121      	bne.n	8002224 <HAL_ADC_Init+0x280>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	7b1b      	ldrb	r3, [r3, #12]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d111      	bne.n	800220c <HAL_ADC_Init+0x268>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	3b01      	subs	r3, #1
 80021ee:	035a      	lsls	r2, r3, #13
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	e013      	b.n	8002224 <HAL_ADC_Init+0x280>
 80021fc:	40012400 	.word	0x40012400
 8002200:	40012800 	.word	0x40012800
 8002204:	40013c00 	.word	0x40013c00
 8002208:	0800b294 	.word	0x0800b294
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002210:	f043 0220 	orr.w	r2, r3, #32
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221c:	f043 0201 	orr.w	r2, r3, #1
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	430a      	orrs	r2, r1
 8002236:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	4b28      	ldr	r3, [pc, #160]	; (80022e0 <HAL_ADC_Init+0x33c>)
 8002240:	4013      	ands	r3, r2
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6812      	ldr	r2, [r2, #0]
 8002246:	68b9      	ldr	r1, [r7, #8]
 8002248:	430b      	orrs	r3, r1
 800224a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002254:	d003      	beq.n	800225e <HAL_ADC_Init+0x2ba>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d104      	bne.n	8002268 <HAL_ADC_Init+0x2c4>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	3b01      	subs	r3, #1
 8002264:	051b      	lsls	r3, r3, #20
 8002266:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	430a      	orrs	r2, r1
 800227a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	4b18      	ldr	r3, [pc, #96]	; (80022e4 <HAL_ADC_Init+0x340>)
 8002284:	4013      	ands	r3, r2
 8002286:	68ba      	ldr	r2, [r7, #8]
 8002288:	429a      	cmp	r2, r3
 800228a:	d10b      	bne.n	80022a4 <HAL_ADC_Init+0x300>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002296:	f023 0303 	bic.w	r3, r3, #3
 800229a:	f043 0201 	orr.w	r2, r3, #1
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022a2:	e018      	b.n	80022d6 <HAL_ADC_Init+0x332>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a8:	f023 0312 	bic.w	r3, r3, #18
 80022ac:	f043 0210 	orr.w	r2, r3, #16
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b8:	f043 0201 	orr.w	r2, r3, #1
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022c4:	e007      	b.n	80022d6 <HAL_ADC_Init+0x332>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ca:	f043 0210 	orr.w	r2, r3, #16
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3718      	adds	r7, #24
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	ffe1f7fd 	.word	0xffe1f7fd
 80022e4:	ff1f0efe 	.word	0xff1f0efe

080022e8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022f0:	2300      	movs	r3, #0
 80022f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a5a      	ldr	r2, [pc, #360]	; (8002464 <HAL_ADC_Start+0x17c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d00e      	beq.n	800231c <HAL_ADC_Start+0x34>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a59      	ldr	r2, [pc, #356]	; (8002468 <HAL_ADC_Start+0x180>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d009      	beq.n	800231c <HAL_ADC_Start+0x34>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a57      	ldr	r2, [pc, #348]	; (800246c <HAL_ADC_Start+0x184>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d004      	beq.n	800231c <HAL_ADC_Start+0x34>
 8002312:	f240 411b 	movw	r1, #1051	; 0x41b
 8002316:	4856      	ldr	r0, [pc, #344]	; (8002470 <HAL_ADC_Start+0x188>)
 8002318:	f7ff f98e 	bl	8001638 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_ADC_Start+0x42>
 8002326:	2302      	movs	r3, #2
 8002328:	e098      	b.n	800245c <HAL_ADC_Start+0x174>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 fbb4 	bl	8002aa0 <ADC_Enable>
 8002338:	4603      	mov	r3, r0
 800233a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	2b00      	cmp	r3, #0
 8002340:	f040 8087 	bne.w	8002452 <HAL_ADC_Start+0x16a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800234c:	f023 0301 	bic.w	r3, r3, #1
 8002350:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a42      	ldr	r2, [pc, #264]	; (8002468 <HAL_ADC_Start+0x180>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d105      	bne.n	800236e <HAL_ADC_Start+0x86>
 8002362:	4b40      	ldr	r3, [pc, #256]	; (8002464 <HAL_ADC_Start+0x17c>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d115      	bne.n	800239a <HAL_ADC_Start+0xb2>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002372:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002384:	2b00      	cmp	r3, #0
 8002386:	d026      	beq.n	80023d6 <HAL_ADC_Start+0xee>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002390:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002398:	e01d      	b.n	80023d6 <HAL_ADC_Start+0xee>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a2e      	ldr	r2, [pc, #184]	; (8002464 <HAL_ADC_Start+0x17c>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d004      	beq.n	80023ba <HAL_ADC_Start+0xd2>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a2c      	ldr	r2, [pc, #176]	; (8002468 <HAL_ADC_Start+0x180>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d10d      	bne.n	80023d6 <HAL_ADC_Start+0xee>
 80023ba:	4b2a      	ldr	r3, [pc, #168]	; (8002464 <HAL_ADC_Start+0x17c>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d007      	beq.n	80023d6 <HAL_ADC_Start+0xee>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d006      	beq.n	80023f0 <HAL_ADC_Start+0x108>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e6:	f023 0206 	bic.w	r2, r3, #6
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80023ee:	e002      	b.n	80023f6 <HAL_ADC_Start+0x10e>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f06f 0202 	mvn.w	r2, #2
 8002406:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002412:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002416:	d113      	bne.n	8002440 <HAL_ADC_Start+0x158>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800241c:	4a12      	ldr	r2, [pc, #72]	; (8002468 <HAL_ADC_Start+0x180>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d105      	bne.n	800242e <HAL_ADC_Start+0x146>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002422:	4b10      	ldr	r3, [pc, #64]	; (8002464 <HAL_ADC_Start+0x17c>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800242a:	2b00      	cmp	r3, #0
 800242c:	d108      	bne.n	8002440 <HAL_ADC_Start+0x158>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800243c:	609a      	str	r2, [r3, #8]
 800243e:	e00c      	b.n	800245a <HAL_ADC_Start+0x172>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	689a      	ldr	r2, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	e003      	b.n	800245a <HAL_ADC_Start+0x172>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800245a:	7bfb      	ldrb	r3, [r7, #15]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40012400 	.word	0x40012400
 8002468:	40012800 	.word	0x40012800
 800246c:	40013c00 	.word	0x40013c00
 8002470:	0800b294 	.word	0x0800b294

08002474 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002474:	b590      	push	{r4, r7, lr}
 8002476:	b087      	sub	sp, #28
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800247e:	2300      	movs	r3, #0
 8002480:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002486:	2300      	movs	r3, #0
 8002488:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a80      	ldr	r2, [pc, #512]	; (8002690 <HAL_ADC_PollForConversion+0x21c>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d00e      	beq.n	80024b2 <HAL_ADC_PollForConversion+0x3e>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a7e      	ldr	r2, [pc, #504]	; (8002694 <HAL_ADC_PollForConversion+0x220>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d009      	beq.n	80024b2 <HAL_ADC_PollForConversion+0x3e>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a7d      	ldr	r2, [pc, #500]	; (8002698 <HAL_ADC_PollForConversion+0x224>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d004      	beq.n	80024b2 <HAL_ADC_PollForConversion+0x3e>
 80024a8:	f240 41bd 	movw	r1, #1213	; 0x4bd
 80024ac:	487b      	ldr	r0, [pc, #492]	; (800269c <HAL_ADC_PollForConversion+0x228>)
 80024ae:	f7ff f8c3 	bl	8001638 <assert_failed>
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80024b2:	f7ff fd6d 	bl	8001f90 <HAL_GetTick>
 80024b6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00b      	beq.n	80024de <HAL_ADC_PollForConversion+0x6a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ca:	f043 0220 	orr.w	r2, r3, #32
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e0d3      	b.n	8002686 <HAL_ADC_PollForConversion+0x212>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d131      	bne.n	8002550 <HAL_ADC_PollForConversion+0xdc>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d12a      	bne.n	8002550 <HAL_ADC_PollForConversion+0xdc>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80024fa:	e021      	b.n	8002540 <HAL_ADC_PollForConversion+0xcc>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002502:	d01d      	beq.n	8002540 <HAL_ADC_PollForConversion+0xcc>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d007      	beq.n	800251a <HAL_ADC_PollForConversion+0xa6>
 800250a:	f7ff fd41 	bl	8001f90 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d212      	bcs.n	8002540 <HAL_ADC_PollForConversion+0xcc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d10b      	bne.n	8002540 <HAL_ADC_PollForConversion+0xcc>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252c:	f043 0204 	orr.w	r2, r3, #4
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e0a2      	b.n	8002686 <HAL_ADC_PollForConversion+0x212>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0d6      	beq.n	80024fc <HAL_ADC_PollForConversion+0x88>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800254e:	e070      	b.n	8002632 <HAL_ADC_PollForConversion+0x1be>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002550:	4b53      	ldr	r3, [pc, #332]	; (80026a0 <HAL_ADC_PollForConversion+0x22c>)
 8002552:	681c      	ldr	r4, [r3, #0]
 8002554:	2002      	movs	r0, #2
 8002556:	f001 ff7d 	bl	8004454 <HAL_RCCEx_GetPeriphCLKFreq>
 800255a:	4603      	mov	r3, r0
 800255c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6919      	ldr	r1, [r3, #16]
 8002566:	4b4f      	ldr	r3, [pc, #316]	; (80026a4 <HAL_ADC_PollForConversion+0x230>)
 8002568:	400b      	ands	r3, r1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d118      	bne.n	80025a0 <HAL_ADC_PollForConversion+0x12c>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68d9      	ldr	r1, [r3, #12]
 8002574:	4b4c      	ldr	r3, [pc, #304]	; (80026a8 <HAL_ADC_PollForConversion+0x234>)
 8002576:	400b      	ands	r3, r1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d111      	bne.n	80025a0 <HAL_ADC_PollForConversion+0x12c>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6919      	ldr	r1, [r3, #16]
 8002582:	4b4a      	ldr	r3, [pc, #296]	; (80026ac <HAL_ADC_PollForConversion+0x238>)
 8002584:	400b      	ands	r3, r1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d108      	bne.n	800259c <HAL_ADC_PollForConversion+0x128>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68d9      	ldr	r1, [r3, #12]
 8002590:	4b47      	ldr	r3, [pc, #284]	; (80026b0 <HAL_ADC_PollForConversion+0x23c>)
 8002592:	400b      	ands	r3, r1
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_ADC_PollForConversion+0x128>
 8002598:	2314      	movs	r3, #20
 800259a:	e020      	b.n	80025de <HAL_ADC_PollForConversion+0x16a>
 800259c:	2329      	movs	r3, #41	; 0x29
 800259e:	e01e      	b.n	80025de <HAL_ADC_PollForConversion+0x16a>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6919      	ldr	r1, [r3, #16]
 80025a6:	4b41      	ldr	r3, [pc, #260]	; (80026ac <HAL_ADC_PollForConversion+0x238>)
 80025a8:	400b      	ands	r3, r1
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d106      	bne.n	80025bc <HAL_ADC_PollForConversion+0x148>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68d9      	ldr	r1, [r3, #12]
 80025b4:	4b3e      	ldr	r3, [pc, #248]	; (80026b0 <HAL_ADC_PollForConversion+0x23c>)
 80025b6:	400b      	ands	r3, r1
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00d      	beq.n	80025d8 <HAL_ADC_PollForConversion+0x164>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6919      	ldr	r1, [r3, #16]
 80025c2:	4b3c      	ldr	r3, [pc, #240]	; (80026b4 <HAL_ADC_PollForConversion+0x240>)
 80025c4:	400b      	ands	r3, r1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d108      	bne.n	80025dc <HAL_ADC_PollForConversion+0x168>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68d9      	ldr	r1, [r3, #12]
 80025d0:	4b38      	ldr	r3, [pc, #224]	; (80026b4 <HAL_ADC_PollForConversion+0x240>)
 80025d2:	400b      	ands	r3, r1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_ADC_PollForConversion+0x168>
 80025d8:	2354      	movs	r3, #84	; 0x54
 80025da:	e000      	b.n	80025de <HAL_ADC_PollForConversion+0x16a>
 80025dc:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80025de:	fb02 f303 	mul.w	r3, r2, r3
 80025e2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80025e4:	e021      	b.n	800262a <HAL_ADC_PollForConversion+0x1b6>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ec:	d01a      	beq.n	8002624 <HAL_ADC_PollForConversion+0x1b0>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d007      	beq.n	8002604 <HAL_ADC_PollForConversion+0x190>
 80025f4:	f7ff fccc 	bl	8001f90 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	429a      	cmp	r2, r3
 8002602:	d20f      	bcs.n	8002624 <HAL_ADC_PollForConversion+0x1b0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	429a      	cmp	r2, r3
 800260a:	d90b      	bls.n	8002624 <HAL_ADC_PollForConversion+0x1b0>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002610:	f043 0204 	orr.w	r2, r3, #4
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e030      	b.n	8002686 <HAL_ADC_PollForConversion+0x212>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	3301      	adds	r3, #1
 8002628:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	429a      	cmp	r2, r3
 8002630:	d8d9      	bhi.n	80025e6 <HAL_ADC_PollForConversion+0x172>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f06f 0212 	mvn.w	r2, #18
 800263a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002640:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002652:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002656:	d115      	bne.n	8002684 <HAL_ADC_PollForConversion+0x210>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800265c:	2b00      	cmp	r3, #0
 800265e:	d111      	bne.n	8002684 <HAL_ADC_PollForConversion+0x210>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002664:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002670:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d105      	bne.n	8002684 <HAL_ADC_PollForConversion+0x210>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267c:	f043 0201 	orr.w	r2, r3, #1
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	371c      	adds	r7, #28
 800268a:	46bd      	mov	sp, r7
 800268c:	bd90      	pop	{r4, r7, pc}
 800268e:	bf00      	nop
 8002690:	40012400 	.word	0x40012400
 8002694:	40012800 	.word	0x40012800
 8002698:	40013c00 	.word	0x40013c00
 800269c:	0800b294 	.word	0x0800b294
 80026a0:	20000000 	.word	0x20000000
 80026a4:	24924924 	.word	0x24924924
 80026a8:	00924924 	.word	0x00924924
 80026ac:	12492492 	.word	0x12492492
 80026b0:	00492492 	.word	0x00492492
 80026b4:	00249249 	.word	0x00249249

080026b8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a0c      	ldr	r2, [pc, #48]	; (80026f8 <HAL_ADC_GetValue+0x40>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00e      	beq.n	80026e8 <HAL_ADC_GetValue+0x30>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a0b      	ldr	r2, [pc, #44]	; (80026fc <HAL_ADC_GetValue+0x44>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d009      	beq.n	80026e8 <HAL_ADC_GetValue+0x30>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a09      	ldr	r2, [pc, #36]	; (8002700 <HAL_ADC_GetValue+0x48>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d004      	beq.n	80026e8 <HAL_ADC_GetValue+0x30>
 80026de:	f240 61ef 	movw	r1, #1775	; 0x6ef
 80026e2:	4808      	ldr	r0, [pc, #32]	; (8002704 <HAL_ADC_GetValue+0x4c>)
 80026e4:	f7fe ffa8 	bl	8001638 <assert_failed>

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40012400 	.word	0x40012400
 80026fc:	40012800 	.word	0x40012800
 8002700:	40013c00 	.word	0x40013c00
 8002704:	0800b294 	.word	0x0800b294

08002708 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002712:	2300      	movs	r3, #0
 8002714:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002716:	2300      	movs	r3, #0
 8002718:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a8b      	ldr	r2, [pc, #556]	; (800294c <HAL_ADC_ConfigChannel+0x244>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d00e      	beq.n	8002742 <HAL_ADC_ConfigChannel+0x3a>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a89      	ldr	r2, [pc, #548]	; (8002950 <HAL_ADC_ConfigChannel+0x248>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d009      	beq.n	8002742 <HAL_ADC_ConfigChannel+0x3a>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a88      	ldr	r2, [pc, #544]	; (8002954 <HAL_ADC_ConfigChannel+0x24c>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d004      	beq.n	8002742 <HAL_ADC_ConfigChannel+0x3a>
 8002738:	f240 71dd 	movw	r1, #2013	; 0x7dd
 800273c:	4886      	ldr	r0, [pc, #536]	; (8002958 <HAL_ADC_ConfigChannel+0x250>)
 800273e:	f7fe ff7b 	bl	8001638 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d048      	beq.n	80027dc <HAL_ADC_ConfigChannel+0xd4>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d044      	beq.n	80027dc <HAL_ADC_ConfigChannel+0xd4>
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b02      	cmp	r3, #2
 8002758:	d040      	beq.n	80027dc <HAL_ADC_ConfigChannel+0xd4>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2b03      	cmp	r3, #3
 8002760:	d03c      	beq.n	80027dc <HAL_ADC_ConfigChannel+0xd4>
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2b04      	cmp	r3, #4
 8002768:	d038      	beq.n	80027dc <HAL_ADC_ConfigChannel+0xd4>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2b05      	cmp	r3, #5
 8002770:	d034      	beq.n	80027dc <HAL_ADC_ConfigChannel+0xd4>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2b06      	cmp	r3, #6
 8002778:	d030      	beq.n	80027dc <HAL_ADC_ConfigChannel+0xd4>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2b07      	cmp	r3, #7
 8002780:	d02c      	beq.n	80027dc <HAL_ADC_ConfigChannel+0xd4>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b08      	cmp	r3, #8
 8002788:	d028      	beq.n	80027dc <HAL_ADC_ConfigChannel+0xd4>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2b09      	cmp	r3, #9
 8002790:	d024      	beq.n	80027dc <HAL_ADC_ConfigChannel+0xd4>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2b0a      	cmp	r3, #10
 8002798:	d020      	beq.n	80027dc <HAL_ADC_ConfigChannel+0xd4>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2b0b      	cmp	r3, #11
 80027a0:	d01c      	beq.n	80027dc <HAL_ADC_ConfigChannel+0xd4>
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2b0c      	cmp	r3, #12
 80027a8:	d018      	beq.n	80027dc <HAL_ADC_ConfigChannel+0xd4>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2b0d      	cmp	r3, #13
 80027b0:	d014      	beq.n	80027dc <HAL_ADC_ConfigChannel+0xd4>
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2b0e      	cmp	r3, #14
 80027b8:	d010      	beq.n	80027dc <HAL_ADC_ConfigChannel+0xd4>
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2b0f      	cmp	r3, #15
 80027c0:	d00c      	beq.n	80027dc <HAL_ADC_ConfigChannel+0xd4>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2b10      	cmp	r3, #16
 80027c8:	d008      	beq.n	80027dc <HAL_ADC_ConfigChannel+0xd4>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2b11      	cmp	r3, #17
 80027d0:	d004      	beq.n	80027dc <HAL_ADC_ConfigChannel+0xd4>
 80027d2:	f240 71de 	movw	r1, #2014	; 0x7de
 80027d6:	4860      	ldr	r0, [pc, #384]	; (8002958 <HAL_ADC_ConfigChannel+0x250>)
 80027d8:	f7fe ff2e 	bl	8001638 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d040      	beq.n	8002866 <HAL_ADC_ConfigChannel+0x15e>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d03c      	beq.n	8002866 <HAL_ADC_ConfigChannel+0x15e>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d038      	beq.n	8002866 <HAL_ADC_ConfigChannel+0x15e>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d034      	beq.n	8002866 <HAL_ADC_ConfigChannel+0x15e>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b05      	cmp	r3, #5
 8002802:	d030      	beq.n	8002866 <HAL_ADC_ConfigChannel+0x15e>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b06      	cmp	r3, #6
 800280a:	d02c      	beq.n	8002866 <HAL_ADC_ConfigChannel+0x15e>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b07      	cmp	r3, #7
 8002812:	d028      	beq.n	8002866 <HAL_ADC_ConfigChannel+0x15e>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b08      	cmp	r3, #8
 800281a:	d024      	beq.n	8002866 <HAL_ADC_ConfigChannel+0x15e>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b09      	cmp	r3, #9
 8002822:	d020      	beq.n	8002866 <HAL_ADC_ConfigChannel+0x15e>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b0a      	cmp	r3, #10
 800282a:	d01c      	beq.n	8002866 <HAL_ADC_ConfigChannel+0x15e>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b0b      	cmp	r3, #11
 8002832:	d018      	beq.n	8002866 <HAL_ADC_ConfigChannel+0x15e>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b0c      	cmp	r3, #12
 800283a:	d014      	beq.n	8002866 <HAL_ADC_ConfigChannel+0x15e>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b0d      	cmp	r3, #13
 8002842:	d010      	beq.n	8002866 <HAL_ADC_ConfigChannel+0x15e>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b0e      	cmp	r3, #14
 800284a:	d00c      	beq.n	8002866 <HAL_ADC_ConfigChannel+0x15e>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2b0f      	cmp	r3, #15
 8002852:	d008      	beq.n	8002866 <HAL_ADC_ConfigChannel+0x15e>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b10      	cmp	r3, #16
 800285a:	d004      	beq.n	8002866 <HAL_ADC_ConfigChannel+0x15e>
 800285c:	f240 71df 	movw	r1, #2015	; 0x7df
 8002860:	483d      	ldr	r0, [pc, #244]	; (8002958 <HAL_ADC_ConfigChannel+0x250>)
 8002862:	f7fe fee9 	bl	8001638 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d020      	beq.n	80028b0 <HAL_ADC_ConfigChannel+0x1a8>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d01c      	beq.n	80028b0 <HAL_ADC_ConfigChannel+0x1a8>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d018      	beq.n	80028b0 <HAL_ADC_ConfigChannel+0x1a8>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	2b03      	cmp	r3, #3
 8002884:	d014      	beq.n	80028b0 <HAL_ADC_ConfigChannel+0x1a8>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2b04      	cmp	r3, #4
 800288c:	d010      	beq.n	80028b0 <HAL_ADC_ConfigChannel+0x1a8>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	2b05      	cmp	r3, #5
 8002894:	d00c      	beq.n	80028b0 <HAL_ADC_ConfigChannel+0x1a8>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	2b06      	cmp	r3, #6
 800289c:	d008      	beq.n	80028b0 <HAL_ADC_ConfigChannel+0x1a8>
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	2b07      	cmp	r3, #7
 80028a4:	d004      	beq.n	80028b0 <HAL_ADC_ConfigChannel+0x1a8>
 80028a6:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 80028aa:	482b      	ldr	r0, [pc, #172]	; (8002958 <HAL_ADC_ConfigChannel+0x250>)
 80028ac:	f7fe fec4 	bl	8001638 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <HAL_ADC_ConfigChannel+0x1b6>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e0e5      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x382>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b06      	cmp	r3, #6
 80028cc:	d81c      	bhi.n	8002908 <HAL_ADC_ConfigChannel+0x200>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	3b05      	subs	r3, #5
 80028e0:	221f      	movs	r2, #31
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43db      	mvns	r3, r3
 80028e8:	4019      	ands	r1, r3
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	6818      	ldr	r0, [r3, #0]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	3b05      	subs	r3, #5
 80028fa:	fa00 f203 	lsl.w	r2, r0, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	635a      	str	r2, [r3, #52]	; 0x34
 8002906:	e045      	b.n	8002994 <HAL_ADC_ConfigChannel+0x28c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	2b0c      	cmp	r3, #12
 800290e:	d825      	bhi.n	800295c <HAL_ADC_ConfigChannel+0x254>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	3b23      	subs	r3, #35	; 0x23
 8002922:	221f      	movs	r2, #31
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	4019      	ands	r1, r3
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	6818      	ldr	r0, [r3, #0]
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	3b23      	subs	r3, #35	; 0x23
 800293c:	fa00 f203 	lsl.w	r2, r0, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	631a      	str	r2, [r3, #48]	; 0x30
 8002948:	e024      	b.n	8002994 <HAL_ADC_ConfigChannel+0x28c>
 800294a:	bf00      	nop
 800294c:	40012400 	.word	0x40012400
 8002950:	40012800 	.word	0x40012800
 8002954:	40013c00 	.word	0x40013c00
 8002958:	0800b294 	.word	0x0800b294
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	3b41      	subs	r3, #65	; 0x41
 800296e:	221f      	movs	r2, #31
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	43db      	mvns	r3, r3
 8002976:	4019      	ands	r1, r3
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	6818      	ldr	r0, [r3, #0]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	3b41      	subs	r3, #65	; 0x41
 8002988:	fa00 f203 	lsl.w	r2, r0, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2b09      	cmp	r3, #9
 800299a:	d91c      	bls.n	80029d6 <HAL_ADC_ConfigChannel+0x2ce>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68d9      	ldr	r1, [r3, #12]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	4613      	mov	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	4413      	add	r3, r2
 80029ac:	3b1e      	subs	r3, #30
 80029ae:	2207      	movs	r2, #7
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	4019      	ands	r1, r3
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	6898      	ldr	r0, [r3, #8]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	4613      	mov	r3, r2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4413      	add	r3, r2
 80029c6:	3b1e      	subs	r3, #30
 80029c8:	fa00 f203 	lsl.w	r2, r0, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	60da      	str	r2, [r3, #12]
 80029d4:	e019      	b.n	8002a0a <HAL_ADC_ConfigChannel+0x302>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	6919      	ldr	r1, [r3, #16]
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	4613      	mov	r3, r2
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	4413      	add	r3, r2
 80029e6:	2207      	movs	r2, #7
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	43db      	mvns	r3, r3
 80029ee:	4019      	ands	r1, r3
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	6898      	ldr	r0, [r3, #8]
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	4613      	mov	r3, r2
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	4413      	add	r3, r2
 80029fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2b10      	cmp	r3, #16
 8002a10:	d003      	beq.n	8002a1a <HAL_ADC_ConfigChannel+0x312>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a16:	2b11      	cmp	r3, #17
 8002a18:	d132      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x378>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a1d      	ldr	r2, [pc, #116]	; (8002a94 <HAL_ADC_ConfigChannel+0x38c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d125      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x368>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d126      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x378>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a40:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2b10      	cmp	r3, #16
 8002a48:	d11a      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x378>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a4a:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <HAL_ADC_ConfigChannel+0x390>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a13      	ldr	r2, [pc, #76]	; (8002a9c <HAL_ADC_ConfigChannel+0x394>)
 8002a50:	fba2 2303 	umull	r2, r3, r2, r3
 8002a54:	0c9a      	lsrs	r2, r3, #18
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a60:	e002      	b.n	8002a68 <HAL_ADC_ConfigChannel+0x360>
          {
            wait_loop_index--;
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f9      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x35a>
 8002a6e:	e007      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x378>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a74:	f043 0220 	orr.w	r2, r3, #32
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40012400 	.word	0x40012400
 8002a98:	20000000 	.word	0x20000000
 8002a9c:	431bde83 	.word	0x431bde83

08002aa0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d040      	beq.n	8002b40 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f042 0201 	orr.w	r2, r2, #1
 8002acc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ace:	4b1f      	ldr	r3, [pc, #124]	; (8002b4c <ADC_Enable+0xac>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a1f      	ldr	r2, [pc, #124]	; (8002b50 <ADC_Enable+0xb0>)
 8002ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad8:	0c9b      	lsrs	r3, r3, #18
 8002ada:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002adc:	e002      	b.n	8002ae4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f9      	bne.n	8002ade <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002aea:	f7ff fa51 	bl	8001f90 <HAL_GetTick>
 8002aee:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002af0:	e01f      	b.n	8002b32 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002af2:	f7ff fa4d 	bl	8001f90 <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d918      	bls.n	8002b32 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d011      	beq.n	8002b32 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b12:	f043 0210 	orr.w	r2, r3, #16
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1e:	f043 0201 	orr.w	r2, r3, #1
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e007      	b.n	8002b42 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 0301 	and.w	r3, r3, #1
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d1d8      	bne.n	8002af2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20000000 	.word	0x20000000
 8002b50:	431bde83 	.word	0x431bde83

08002b54 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d12e      	bne.n	8002bcc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 0201 	bic.w	r2, r2, #1
 8002b7c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b7e:	f7ff fa07 	bl	8001f90 <HAL_GetTick>
 8002b82:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002b84:	e01b      	b.n	8002bbe <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b86:	f7ff fa03 	bl	8001f90 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d914      	bls.n	8002bbe <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d10d      	bne.n	8002bbe <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba6:	f043 0210 	orr.w	r2, r3, #16
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb2:	f043 0201 	orr.w	r2, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e007      	b.n	8002bce <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d0dc      	beq.n	8002b86 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002be8:	4b0c      	ldr	r3, [pc, #48]	; (8002c1c <__NVIC_SetPriorityGrouping+0x44>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bee:	68ba      	ldr	r2, [r7, #8]
 8002bf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c0a:	4a04      	ldr	r2, [pc, #16]	; (8002c1c <__NVIC_SetPriorityGrouping+0x44>)
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	60d3      	str	r3, [r2, #12]
}
 8002c10:	bf00      	nop
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	e000ed00 	.word	0xe000ed00

08002c20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c24:	4b04      	ldr	r3, [pc, #16]	; (8002c38 <__NVIC_GetPriorityGrouping+0x18>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	0a1b      	lsrs	r3, r3, #8
 8002c2a:	f003 0307 	and.w	r3, r3, #7
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	e000ed00 	.word	0xe000ed00

08002c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	db0b      	blt.n	8002c66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
 8002c50:	f003 021f 	and.w	r2, r3, #31
 8002c54:	4906      	ldr	r1, [pc, #24]	; (8002c70 <__NVIC_EnableIRQ+0x34>)
 8002c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5a:	095b      	lsrs	r3, r3, #5
 8002c5c:	2001      	movs	r0, #1
 8002c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr
 8002c70:	e000e100 	.word	0xe000e100

08002c74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	6039      	str	r1, [r7, #0]
 8002c7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	db0a      	blt.n	8002c9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	490c      	ldr	r1, [pc, #48]	; (8002cc0 <__NVIC_SetPriority+0x4c>)
 8002c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c92:	0112      	lsls	r2, r2, #4
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	440b      	add	r3, r1
 8002c98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c9c:	e00a      	b.n	8002cb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	4908      	ldr	r1, [pc, #32]	; (8002cc4 <__NVIC_SetPriority+0x50>)
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	3b04      	subs	r3, #4
 8002cac:	0112      	lsls	r2, r2, #4
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	761a      	strb	r2, [r3, #24]
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	e000e100 	.word	0xe000e100
 8002cc4:	e000ed00 	.word	0xe000ed00

08002cc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b089      	sub	sp, #36	; 0x24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f1c3 0307 	rsb	r3, r3, #7
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	bf28      	it	cs
 8002ce6:	2304      	movcs	r3, #4
 8002ce8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	3304      	adds	r3, #4
 8002cee:	2b06      	cmp	r3, #6
 8002cf0:	d902      	bls.n	8002cf8 <NVIC_EncodePriority+0x30>
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	3b03      	subs	r3, #3
 8002cf6:	e000      	b.n	8002cfa <NVIC_EncodePriority+0x32>
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	43da      	mvns	r2, r3
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	401a      	ands	r2, r3
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d10:	f04f 31ff 	mov.w	r1, #4294967295
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1a:	43d9      	mvns	r1, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d20:	4313      	orrs	r3, r2
         );
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3724      	adds	r7, #36	; 0x24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr

08002d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3b01      	subs	r3, #1
 8002d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d3c:	d301      	bcc.n	8002d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e00f      	b.n	8002d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d42:	4a0a      	ldr	r2, [pc, #40]	; (8002d6c <SysTick_Config+0x40>)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3b01      	subs	r3, #1
 8002d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d4a:	210f      	movs	r1, #15
 8002d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d50:	f7ff ff90 	bl	8002c74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d54:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <SysTick_Config+0x40>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d5a:	4b04      	ldr	r3, [pc, #16]	; (8002d6c <SysTick_Config+0x40>)
 8002d5c:	2207      	movs	r2, #7
 8002d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	e000e010 	.word	0xe000e010

08002d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b07      	cmp	r3, #7
 8002d7c:	d00f      	beq.n	8002d9e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b06      	cmp	r3, #6
 8002d82:	d00c      	beq.n	8002d9e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b05      	cmp	r3, #5
 8002d88:	d009      	beq.n	8002d9e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d006      	beq.n	8002d9e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d003      	beq.n	8002d9e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002d96:	2192      	movs	r1, #146	; 0x92
 8002d98:	4804      	ldr	r0, [pc, #16]	; (8002dac <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002d9a:	f7fe fc4d 	bl	8001638 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7ff ff1a 	bl	8002bd8 <__NVIC_SetPriorityGrouping>
}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	0800b2cc 	.word	0x0800b2cc

08002db0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
 8002dbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b0f      	cmp	r3, #15
 8002dc6:	d903      	bls.n	8002dd0 <HAL_NVIC_SetPriority+0x20>
 8002dc8:	21aa      	movs	r1, #170	; 0xaa
 8002dca:	480e      	ldr	r0, [pc, #56]	; (8002e04 <HAL_NVIC_SetPriority+0x54>)
 8002dcc:	f7fe fc34 	bl	8001638 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	2b0f      	cmp	r3, #15
 8002dd4:	d903      	bls.n	8002dde <HAL_NVIC_SetPriority+0x2e>
 8002dd6:	21ab      	movs	r1, #171	; 0xab
 8002dd8:	480a      	ldr	r0, [pc, #40]	; (8002e04 <HAL_NVIC_SetPriority+0x54>)
 8002dda:	f7fe fc2d 	bl	8001638 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dde:	f7ff ff1f 	bl	8002c20 <__NVIC_GetPriorityGrouping>
 8002de2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	68b9      	ldr	r1, [r7, #8]
 8002de8:	6978      	ldr	r0, [r7, #20]
 8002dea:	f7ff ff6d 	bl	8002cc8 <NVIC_EncodePriority>
 8002dee:	4602      	mov	r2, r0
 8002df0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002df4:	4611      	mov	r1, r2
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff ff3c 	bl	8002c74 <__NVIC_SetPriority>
}
 8002dfc:	bf00      	nop
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	0800b2cc 	.word	0x0800b2cc

08002e08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	da03      	bge.n	8002e22 <HAL_NVIC_EnableIRQ+0x1a>
 8002e1a:	21be      	movs	r1, #190	; 0xbe
 8002e1c:	4805      	ldr	r0, [pc, #20]	; (8002e34 <HAL_NVIC_EnableIRQ+0x2c>)
 8002e1e:	f7fe fc0b 	bl	8001638 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff ff08 	bl	8002c3c <__NVIC_EnableIRQ>
}
 8002e2c:	bf00      	nop
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	0800b2cc 	.word	0x0800b2cc

08002e38 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f7ff ff73 	bl	8002d2c <SysTick_Config>
 8002e46:	4603      	mov	r3, r0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d008      	beq.n	8002e78 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2204      	movs	r2, #4
 8002e6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e020      	b.n	8002eba <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 020e 	bic.w	r2, r2, #14
 8002e86:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0201 	bic.w	r2, r2, #1
 8002e96:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d005      	beq.n	8002ee6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2204      	movs	r2, #4
 8002ede:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	73fb      	strb	r3, [r7, #15]
 8002ee4:	e0d6      	b.n	8003094 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 020e 	bic.w	r2, r2, #14
 8002ef4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0201 	bic.w	r2, r2, #1
 8002f04:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	4b64      	ldr	r3, [pc, #400]	; (80030a0 <HAL_DMA_Abort_IT+0x1dc>)
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d958      	bls.n	8002fc4 <HAL_DMA_Abort_IT+0x100>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a63      	ldr	r2, [pc, #396]	; (80030a4 <HAL_DMA_Abort_IT+0x1e0>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d04f      	beq.n	8002fbc <HAL_DMA_Abort_IT+0xf8>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a61      	ldr	r2, [pc, #388]	; (80030a8 <HAL_DMA_Abort_IT+0x1e4>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d048      	beq.n	8002fb8 <HAL_DMA_Abort_IT+0xf4>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a60      	ldr	r2, [pc, #384]	; (80030ac <HAL_DMA_Abort_IT+0x1e8>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d040      	beq.n	8002fb2 <HAL_DMA_Abort_IT+0xee>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a5e      	ldr	r2, [pc, #376]	; (80030b0 <HAL_DMA_Abort_IT+0x1ec>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d038      	beq.n	8002fac <HAL_DMA_Abort_IT+0xe8>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a5d      	ldr	r2, [pc, #372]	; (80030b4 <HAL_DMA_Abort_IT+0x1f0>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d030      	beq.n	8002fa6 <HAL_DMA_Abort_IT+0xe2>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a5b      	ldr	r2, [pc, #364]	; (80030b8 <HAL_DMA_Abort_IT+0x1f4>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d028      	beq.n	8002fa0 <HAL_DMA_Abort_IT+0xdc>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a53      	ldr	r2, [pc, #332]	; (80030a0 <HAL_DMA_Abort_IT+0x1dc>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d020      	beq.n	8002f9a <HAL_DMA_Abort_IT+0xd6>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a57      	ldr	r2, [pc, #348]	; (80030bc <HAL_DMA_Abort_IT+0x1f8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d019      	beq.n	8002f96 <HAL_DMA_Abort_IT+0xd2>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a56      	ldr	r2, [pc, #344]	; (80030c0 <HAL_DMA_Abort_IT+0x1fc>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d012      	beq.n	8002f92 <HAL_DMA_Abort_IT+0xce>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a54      	ldr	r2, [pc, #336]	; (80030c4 <HAL_DMA_Abort_IT+0x200>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00a      	beq.n	8002f8c <HAL_DMA_Abort_IT+0xc8>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a53      	ldr	r2, [pc, #332]	; (80030c8 <HAL_DMA_Abort_IT+0x204>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d102      	bne.n	8002f86 <HAL_DMA_Abort_IT+0xc2>
 8002f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f84:	e01b      	b.n	8002fbe <HAL_DMA_Abort_IT+0xfa>
 8002f86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002f8a:	e018      	b.n	8002fbe <HAL_DMA_Abort_IT+0xfa>
 8002f8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f90:	e015      	b.n	8002fbe <HAL_DMA_Abort_IT+0xfa>
 8002f92:	2310      	movs	r3, #16
 8002f94:	e013      	b.n	8002fbe <HAL_DMA_Abort_IT+0xfa>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e011      	b.n	8002fbe <HAL_DMA_Abort_IT+0xfa>
 8002f9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f9e:	e00e      	b.n	8002fbe <HAL_DMA_Abort_IT+0xfa>
 8002fa0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002fa4:	e00b      	b.n	8002fbe <HAL_DMA_Abort_IT+0xfa>
 8002fa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002faa:	e008      	b.n	8002fbe <HAL_DMA_Abort_IT+0xfa>
 8002fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fb0:	e005      	b.n	8002fbe <HAL_DMA_Abort_IT+0xfa>
 8002fb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fb6:	e002      	b.n	8002fbe <HAL_DMA_Abort_IT+0xfa>
 8002fb8:	2310      	movs	r3, #16
 8002fba:	e000      	b.n	8002fbe <HAL_DMA_Abort_IT+0xfa>
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	4a43      	ldr	r2, [pc, #268]	; (80030cc <HAL_DMA_Abort_IT+0x208>)
 8002fc0:	6053      	str	r3, [r2, #4]
 8002fc2:	e057      	b.n	8003074 <HAL_DMA_Abort_IT+0x1b0>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a36      	ldr	r2, [pc, #216]	; (80030a4 <HAL_DMA_Abort_IT+0x1e0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d04f      	beq.n	800306e <HAL_DMA_Abort_IT+0x1aa>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a35      	ldr	r2, [pc, #212]	; (80030a8 <HAL_DMA_Abort_IT+0x1e4>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d048      	beq.n	800306a <HAL_DMA_Abort_IT+0x1a6>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a33      	ldr	r2, [pc, #204]	; (80030ac <HAL_DMA_Abort_IT+0x1e8>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d040      	beq.n	8003064 <HAL_DMA_Abort_IT+0x1a0>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a32      	ldr	r2, [pc, #200]	; (80030b0 <HAL_DMA_Abort_IT+0x1ec>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d038      	beq.n	800305e <HAL_DMA_Abort_IT+0x19a>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a30      	ldr	r2, [pc, #192]	; (80030b4 <HAL_DMA_Abort_IT+0x1f0>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d030      	beq.n	8003058 <HAL_DMA_Abort_IT+0x194>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a2f      	ldr	r2, [pc, #188]	; (80030b8 <HAL_DMA_Abort_IT+0x1f4>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d028      	beq.n	8003052 <HAL_DMA_Abort_IT+0x18e>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a26      	ldr	r2, [pc, #152]	; (80030a0 <HAL_DMA_Abort_IT+0x1dc>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d020      	beq.n	800304c <HAL_DMA_Abort_IT+0x188>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a2b      	ldr	r2, [pc, #172]	; (80030bc <HAL_DMA_Abort_IT+0x1f8>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d019      	beq.n	8003048 <HAL_DMA_Abort_IT+0x184>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a29      	ldr	r2, [pc, #164]	; (80030c0 <HAL_DMA_Abort_IT+0x1fc>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d012      	beq.n	8003044 <HAL_DMA_Abort_IT+0x180>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a28      	ldr	r2, [pc, #160]	; (80030c4 <HAL_DMA_Abort_IT+0x200>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d00a      	beq.n	800303e <HAL_DMA_Abort_IT+0x17a>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a26      	ldr	r2, [pc, #152]	; (80030c8 <HAL_DMA_Abort_IT+0x204>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d102      	bne.n	8003038 <HAL_DMA_Abort_IT+0x174>
 8003032:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003036:	e01b      	b.n	8003070 <HAL_DMA_Abort_IT+0x1ac>
 8003038:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800303c:	e018      	b.n	8003070 <HAL_DMA_Abort_IT+0x1ac>
 800303e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003042:	e015      	b.n	8003070 <HAL_DMA_Abort_IT+0x1ac>
 8003044:	2310      	movs	r3, #16
 8003046:	e013      	b.n	8003070 <HAL_DMA_Abort_IT+0x1ac>
 8003048:	2301      	movs	r3, #1
 800304a:	e011      	b.n	8003070 <HAL_DMA_Abort_IT+0x1ac>
 800304c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003050:	e00e      	b.n	8003070 <HAL_DMA_Abort_IT+0x1ac>
 8003052:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003056:	e00b      	b.n	8003070 <HAL_DMA_Abort_IT+0x1ac>
 8003058:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800305c:	e008      	b.n	8003070 <HAL_DMA_Abort_IT+0x1ac>
 800305e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003062:	e005      	b.n	8003070 <HAL_DMA_Abort_IT+0x1ac>
 8003064:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003068:	e002      	b.n	8003070 <HAL_DMA_Abort_IT+0x1ac>
 800306a:	2310      	movs	r3, #16
 800306c:	e000      	b.n	8003070 <HAL_DMA_Abort_IT+0x1ac>
 800306e:	2301      	movs	r3, #1
 8003070:	4a17      	ldr	r2, [pc, #92]	; (80030d0 <HAL_DMA_Abort_IT+0x20c>)
 8003072:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	4798      	blx	r3
    } 
  }
  return status;
 8003094:	7bfb      	ldrb	r3, [r7, #15]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40020080 	.word	0x40020080
 80030a4:	40020008 	.word	0x40020008
 80030a8:	4002001c 	.word	0x4002001c
 80030ac:	40020030 	.word	0x40020030
 80030b0:	40020044 	.word	0x40020044
 80030b4:	40020058 	.word	0x40020058
 80030b8:	4002006c 	.word	0x4002006c
 80030bc:	40020408 	.word	0x40020408
 80030c0:	4002041c 	.word	0x4002041c
 80030c4:	40020430 	.word	0x40020430
 80030c8:	40020444 	.word	0x40020444
 80030cc:	40020400 	.word	0x40020400
 80030d0:	40020000 	.word	0x40020000

080030d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b08a      	sub	sp, #40	; 0x28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030de:	2300      	movs	r3, #0
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80030e2:	2300      	movs	r3, #0
 80030e4:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4aa9      	ldr	r2, [pc, #676]	; (8003390 <HAL_GPIO_Init+0x2bc>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d01b      	beq.n	8003126 <HAL_GPIO_Init+0x52>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4aa8      	ldr	r2, [pc, #672]	; (8003394 <HAL_GPIO_Init+0x2c0>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d017      	beq.n	8003126 <HAL_GPIO_Init+0x52>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4aa7      	ldr	r2, [pc, #668]	; (8003398 <HAL_GPIO_Init+0x2c4>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d013      	beq.n	8003126 <HAL_GPIO_Init+0x52>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4aa6      	ldr	r2, [pc, #664]	; (800339c <HAL_GPIO_Init+0x2c8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d00f      	beq.n	8003126 <HAL_GPIO_Init+0x52>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4aa5      	ldr	r2, [pc, #660]	; (80033a0 <HAL_GPIO_Init+0x2cc>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d00b      	beq.n	8003126 <HAL_GPIO_Init+0x52>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4aa4      	ldr	r2, [pc, #656]	; (80033a4 <HAL_GPIO_Init+0x2d0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d007      	beq.n	8003126 <HAL_GPIO_Init+0x52>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4aa3      	ldr	r2, [pc, #652]	; (80033a8 <HAL_GPIO_Init+0x2d4>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d003      	beq.n	8003126 <HAL_GPIO_Init+0x52>
 800311e:	21bd      	movs	r1, #189	; 0xbd
 8003120:	48a2      	ldr	r0, [pc, #648]	; (80033ac <HAL_GPIO_Init+0x2d8>)
 8003122:	f7fe fa89 	bl	8001638 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	b29b      	uxth	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	d005      	beq.n	800313c <HAL_GPIO_Init+0x68>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	0c1b      	lsrs	r3, r3, #16
 8003136:	041b      	lsls	r3, r3, #16
 8003138:	2b00      	cmp	r3, #0
 800313a:	d003      	beq.n	8003144 <HAL_GPIO_Init+0x70>
 800313c:	21be      	movs	r1, #190	; 0xbe
 800313e:	489b      	ldr	r0, [pc, #620]	; (80033ac <HAL_GPIO_Init+0x2d8>)
 8003140:	f7fe fa7a 	bl	8001638 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 8235 	beq.w	80035b8 <HAL_GPIO_Init+0x4e4>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b01      	cmp	r3, #1
 8003154:	f000 8230 	beq.w	80035b8 <HAL_GPIO_Init+0x4e4>
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2b11      	cmp	r3, #17
 800315e:	f000 822b 	beq.w	80035b8 <HAL_GPIO_Init+0x4e4>
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b02      	cmp	r3, #2
 8003168:	f000 8226 	beq.w	80035b8 <HAL_GPIO_Init+0x4e4>
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2b12      	cmp	r3, #18
 8003172:	f000 8221 	beq.w	80035b8 <HAL_GPIO_Init+0x4e4>
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	4a8d      	ldr	r2, [pc, #564]	; (80033b0 <HAL_GPIO_Init+0x2dc>)
 800317c:	4293      	cmp	r3, r2
 800317e:	f000 821b 	beq.w	80035b8 <HAL_GPIO_Init+0x4e4>
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	4a8b      	ldr	r2, [pc, #556]	; (80033b4 <HAL_GPIO_Init+0x2e0>)
 8003188:	4293      	cmp	r3, r2
 800318a:	f000 8215 	beq.w	80035b8 <HAL_GPIO_Init+0x4e4>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	4a89      	ldr	r2, [pc, #548]	; (80033b8 <HAL_GPIO_Init+0x2e4>)
 8003194:	4293      	cmp	r3, r2
 8003196:	f000 820f 	beq.w	80035b8 <HAL_GPIO_Init+0x4e4>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	4a87      	ldr	r2, [pc, #540]	; (80033bc <HAL_GPIO_Init+0x2e8>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	f000 8209 	beq.w	80035b8 <HAL_GPIO_Init+0x4e4>
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	4a85      	ldr	r2, [pc, #532]	; (80033c0 <HAL_GPIO_Init+0x2ec>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	f000 8203 	beq.w	80035b8 <HAL_GPIO_Init+0x4e4>
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	4a83      	ldr	r2, [pc, #524]	; (80033c4 <HAL_GPIO_Init+0x2f0>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	f000 81fd 	beq.w	80035b8 <HAL_GPIO_Init+0x4e4>
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2b03      	cmp	r3, #3
 80031c4:	f000 81f8 	beq.w	80035b8 <HAL_GPIO_Init+0x4e4>
 80031c8:	21bf      	movs	r1, #191	; 0xbf
 80031ca:	4878      	ldr	r0, [pc, #480]	; (80033ac <HAL_GPIO_Init+0x2d8>)
 80031cc:	f7fe fa34 	bl	8001638 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031d0:	e1f2      	b.n	80035b8 <HAL_GPIO_Init+0x4e4>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80031d2:	2201      	movs	r2, #1
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	69fa      	ldr	r2, [r7, #28]
 80031e2:	4013      	ands	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	f040 81e1 	bne.w	80035b2 <HAL_GPIO_Init+0x4de>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a67      	ldr	r2, [pc, #412]	; (8003390 <HAL_GPIO_Init+0x2bc>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d01b      	beq.n	8003230 <HAL_GPIO_Init+0x15c>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a66      	ldr	r2, [pc, #408]	; (8003394 <HAL_GPIO_Init+0x2c0>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d017      	beq.n	8003230 <HAL_GPIO_Init+0x15c>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a65      	ldr	r2, [pc, #404]	; (8003398 <HAL_GPIO_Init+0x2c4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d013      	beq.n	8003230 <HAL_GPIO_Init+0x15c>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a64      	ldr	r2, [pc, #400]	; (800339c <HAL_GPIO_Init+0x2c8>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d00f      	beq.n	8003230 <HAL_GPIO_Init+0x15c>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a63      	ldr	r2, [pc, #396]	; (80033a0 <HAL_GPIO_Init+0x2cc>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d00b      	beq.n	8003230 <HAL_GPIO_Init+0x15c>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a62      	ldr	r2, [pc, #392]	; (80033a4 <HAL_GPIO_Init+0x2d0>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d007      	beq.n	8003230 <HAL_GPIO_Init+0x15c>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a61      	ldr	r2, [pc, #388]	; (80033a8 <HAL_GPIO_Init+0x2d4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d003      	beq.n	8003230 <HAL_GPIO_Init+0x15c>
 8003228:	21cd      	movs	r1, #205	; 0xcd
 800322a:	4860      	ldr	r0, [pc, #384]	; (80033ac <HAL_GPIO_Init+0x2d8>)
 800322c:	f7fe fa04 	bl	8001638 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	4a63      	ldr	r2, [pc, #396]	; (80033c4 <HAL_GPIO_Init+0x2f0>)
 8003236:	4293      	cmp	r3, r2
 8003238:	f000 80c6 	beq.w	80033c8 <HAL_GPIO_Init+0x2f4>
 800323c:	4a61      	ldr	r2, [pc, #388]	; (80033c4 <HAL_GPIO_Init+0x2f0>)
 800323e:	4293      	cmp	r3, r2
 8003240:	f200 80ec 	bhi.w	800341c <HAL_GPIO_Init+0x348>
 8003244:	4a5c      	ldr	r2, [pc, #368]	; (80033b8 <HAL_GPIO_Init+0x2e4>)
 8003246:	4293      	cmp	r3, r2
 8003248:	f000 80be 	beq.w	80033c8 <HAL_GPIO_Init+0x2f4>
 800324c:	4a5a      	ldr	r2, [pc, #360]	; (80033b8 <HAL_GPIO_Init+0x2e4>)
 800324e:	4293      	cmp	r3, r2
 8003250:	f200 80e4 	bhi.w	800341c <HAL_GPIO_Init+0x348>
 8003254:	4a5a      	ldr	r2, [pc, #360]	; (80033c0 <HAL_GPIO_Init+0x2ec>)
 8003256:	4293      	cmp	r3, r2
 8003258:	f000 80b6 	beq.w	80033c8 <HAL_GPIO_Init+0x2f4>
 800325c:	4a58      	ldr	r2, [pc, #352]	; (80033c0 <HAL_GPIO_Init+0x2ec>)
 800325e:	4293      	cmp	r3, r2
 8003260:	f200 80dc 	bhi.w	800341c <HAL_GPIO_Init+0x348>
 8003264:	4a53      	ldr	r2, [pc, #332]	; (80033b4 <HAL_GPIO_Init+0x2e0>)
 8003266:	4293      	cmp	r3, r2
 8003268:	f000 80ae 	beq.w	80033c8 <HAL_GPIO_Init+0x2f4>
 800326c:	4a51      	ldr	r2, [pc, #324]	; (80033b4 <HAL_GPIO_Init+0x2e0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	f200 80d4 	bhi.w	800341c <HAL_GPIO_Init+0x348>
 8003274:	4a51      	ldr	r2, [pc, #324]	; (80033bc <HAL_GPIO_Init+0x2e8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	f000 80a6 	beq.w	80033c8 <HAL_GPIO_Init+0x2f4>
 800327c:	4a4f      	ldr	r2, [pc, #316]	; (80033bc <HAL_GPIO_Init+0x2e8>)
 800327e:	4293      	cmp	r3, r2
 8003280:	f200 80cc 	bhi.w	800341c <HAL_GPIO_Init+0x348>
 8003284:	2b12      	cmp	r3, #18
 8003286:	d82b      	bhi.n	80032e0 <HAL_GPIO_Init+0x20c>
 8003288:	2b12      	cmp	r3, #18
 800328a:	f200 80c7 	bhi.w	800341c <HAL_GPIO_Init+0x348>
 800328e:	a201      	add	r2, pc, #4	; (adr r2, 8003294 <HAL_GPIO_Init+0x1c0>)
 8003290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003294:	080033c9 	.word	0x080033c9
 8003298:	080032e9 	.word	0x080032e9
 800329c:	0800333b 	.word	0x0800333b
 80032a0:	08003417 	.word	0x08003417
 80032a4:	0800341d 	.word	0x0800341d
 80032a8:	0800341d 	.word	0x0800341d
 80032ac:	0800341d 	.word	0x0800341d
 80032b0:	0800341d 	.word	0x0800341d
 80032b4:	0800341d 	.word	0x0800341d
 80032b8:	0800341d 	.word	0x0800341d
 80032bc:	0800341d 	.word	0x0800341d
 80032c0:	0800341d 	.word	0x0800341d
 80032c4:	0800341d 	.word	0x0800341d
 80032c8:	0800341d 	.word	0x0800341d
 80032cc:	0800341d 	.word	0x0800341d
 80032d0:	0800341d 	.word	0x0800341d
 80032d4:	0800341d 	.word	0x0800341d
 80032d8:	08003311 	.word	0x08003311
 80032dc:	08003365 	.word	0x08003365
 80032e0:	4a33      	ldr	r2, [pc, #204]	; (80033b0 <HAL_GPIO_Init+0x2dc>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d070      	beq.n	80033c8 <HAL_GPIO_Init+0x2f4>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80032e6:	e099      	b.n	800341c <HAL_GPIO_Init+0x348>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d00b      	beq.n	8003308 <HAL_GPIO_Init+0x234>
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d007      	beq.n	8003308 <HAL_GPIO_Init+0x234>
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	2b03      	cmp	r3, #3
 80032fe:	d003      	beq.n	8003308 <HAL_GPIO_Init+0x234>
 8003300:	21d5      	movs	r1, #213	; 0xd5
 8003302:	482a      	ldr	r0, [pc, #168]	; (80033ac <HAL_GPIO_Init+0x2d8>)
 8003304:	f7fe f998 	bl	8001638 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	623b      	str	r3, [r7, #32]
          break;
 800330e:	e086      	b.n	800341e <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	2b02      	cmp	r3, #2
 8003316:	d00b      	beq.n	8003330 <HAL_GPIO_Init+0x25c>
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d007      	beq.n	8003330 <HAL_GPIO_Init+0x25c>
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	2b03      	cmp	r3, #3
 8003326:	d003      	beq.n	8003330 <HAL_GPIO_Init+0x25c>
 8003328:	21dc      	movs	r1, #220	; 0xdc
 800332a:	4820      	ldr	r0, [pc, #128]	; (80033ac <HAL_GPIO_Init+0x2d8>)
 800332c:	f7fe f984 	bl	8001638 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	3304      	adds	r3, #4
 8003336:	623b      	str	r3, [r7, #32]
          break;
 8003338:	e071      	b.n	800341e <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	2b02      	cmp	r3, #2
 8003340:	d00b      	beq.n	800335a <HAL_GPIO_Init+0x286>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d007      	beq.n	800335a <HAL_GPIO_Init+0x286>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	2b03      	cmp	r3, #3
 8003350:	d003      	beq.n	800335a <HAL_GPIO_Init+0x286>
 8003352:	21e3      	movs	r1, #227	; 0xe3
 8003354:	4815      	ldr	r0, [pc, #84]	; (80033ac <HAL_GPIO_Init+0x2d8>)
 8003356:	f7fe f96f 	bl	8001638 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	3308      	adds	r3, #8
 8003360:	623b      	str	r3, [r7, #32]
          break;
 8003362:	e05c      	b.n	800341e <HAL_GPIO_Init+0x34a>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	2b02      	cmp	r3, #2
 800336a:	d00b      	beq.n	8003384 <HAL_GPIO_Init+0x2b0>
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d007      	beq.n	8003384 <HAL_GPIO_Init+0x2b0>
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	2b03      	cmp	r3, #3
 800337a:	d003      	beq.n	8003384 <HAL_GPIO_Init+0x2b0>
 800337c:	21ea      	movs	r1, #234	; 0xea
 800337e:	480b      	ldr	r0, [pc, #44]	; (80033ac <HAL_GPIO_Init+0x2d8>)
 8003380:	f7fe f95a 	bl	8001638 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	330c      	adds	r3, #12
 800338a:	623b      	str	r3, [r7, #32]
          break;
 800338c:	e047      	b.n	800341e <HAL_GPIO_Init+0x34a>
 800338e:	bf00      	nop
 8003390:	40010800 	.word	0x40010800
 8003394:	40010c00 	.word	0x40010c00
 8003398:	40011000 	.word	0x40011000
 800339c:	40011400 	.word	0x40011400
 80033a0:	40011800 	.word	0x40011800
 80033a4:	40011c00 	.word	0x40011c00
 80033a8:	40012000 	.word	0x40012000
 80033ac:	0800b308 	.word	0x0800b308
 80033b0:	10110000 	.word	0x10110000
 80033b4:	10210000 	.word	0x10210000
 80033b8:	10310000 	.word	0x10310000
 80033bc:	10120000 	.word	0x10120000
 80033c0:	10220000 	.word	0x10220000
 80033c4:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00b      	beq.n	80033e8 <HAL_GPIO_Init+0x314>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d007      	beq.n	80033e8 <HAL_GPIO_Init+0x314>
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d003      	beq.n	80033e8 <HAL_GPIO_Init+0x314>
 80033e0:	21f7      	movs	r1, #247	; 0xf7
 80033e2:	487c      	ldr	r0, [pc, #496]	; (80035d4 <HAL_GPIO_Init+0x500>)
 80033e4:	f7fe f928 	bl	8001638 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d102      	bne.n	80033f6 <HAL_GPIO_Init+0x322>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80033f0:	2304      	movs	r3, #4
 80033f2:	623b      	str	r3, [r7, #32]
          break;
 80033f4:	e013      	b.n	800341e <HAL_GPIO_Init+0x34a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d105      	bne.n	800340a <HAL_GPIO_Init+0x336>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033fe:	2308      	movs	r3, #8
 8003400:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69fa      	ldr	r2, [r7, #28]
 8003406:	611a      	str	r2, [r3, #16]
          break;
 8003408:	e009      	b.n	800341e <HAL_GPIO_Init+0x34a>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800340a:	2308      	movs	r3, #8
 800340c:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	69fa      	ldr	r2, [r7, #28]
 8003412:	615a      	str	r2, [r3, #20]
          break;
 8003414:	e003      	b.n	800341e <HAL_GPIO_Init+0x34a>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003416:	2300      	movs	r3, #0
 8003418:	623b      	str	r3, [r7, #32]
          break;
 800341a:	e000      	b.n	800341e <HAL_GPIO_Init+0x34a>
          break;
 800341c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	2bff      	cmp	r3, #255	; 0xff
 8003422:	d801      	bhi.n	8003428 <HAL_GPIO_Init+0x354>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	e001      	b.n	800342c <HAL_GPIO_Init+0x358>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3304      	adds	r3, #4
 800342c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	2bff      	cmp	r3, #255	; 0xff
 8003432:	d802      	bhi.n	800343a <HAL_GPIO_Init+0x366>
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	e002      	b.n	8003440 <HAL_GPIO_Init+0x36c>
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	3b08      	subs	r3, #8
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	210f      	movs	r1, #15
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	fa01 f303 	lsl.w	r3, r1, r3
 800344e:	43db      	mvns	r3, r3
 8003450:	401a      	ands	r2, r3
 8003452:	6a39      	ldr	r1, [r7, #32]
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	fa01 f303 	lsl.w	r3, r1, r3
 800345a:	431a      	orrs	r2, r3
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 80a2 	beq.w	80035b2 <HAL_GPIO_Init+0x4de>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800346e:	4b5a      	ldr	r3, [pc, #360]	; (80035d8 <HAL_GPIO_Init+0x504>)
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	4a59      	ldr	r2, [pc, #356]	; (80035d8 <HAL_GPIO_Init+0x504>)
 8003474:	f043 0301 	orr.w	r3, r3, #1
 8003478:	6193      	str	r3, [r2, #24]
 800347a:	4b57      	ldr	r3, [pc, #348]	; (80035d8 <HAL_GPIO_Init+0x504>)
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	60bb      	str	r3, [r7, #8]
 8003484:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003486:	4a55      	ldr	r2, [pc, #340]	; (80035dc <HAL_GPIO_Init+0x508>)
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	089b      	lsrs	r3, r3, #2
 800348c:	3302      	adds	r3, #2
 800348e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003492:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003496:	f003 0303 	and.w	r3, r3, #3
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	220f      	movs	r2, #15
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	43db      	mvns	r3, r3
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	4013      	ands	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a4c      	ldr	r2, [pc, #304]	; (80035e0 <HAL_GPIO_Init+0x50c>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d01f      	beq.n	80034f2 <HAL_GPIO_Init+0x41e>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a4b      	ldr	r2, [pc, #300]	; (80035e4 <HAL_GPIO_Init+0x510>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d019      	beq.n	80034ee <HAL_GPIO_Init+0x41a>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a4a      	ldr	r2, [pc, #296]	; (80035e8 <HAL_GPIO_Init+0x514>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d013      	beq.n	80034ea <HAL_GPIO_Init+0x416>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a49      	ldr	r2, [pc, #292]	; (80035ec <HAL_GPIO_Init+0x518>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d00d      	beq.n	80034e6 <HAL_GPIO_Init+0x412>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a48      	ldr	r2, [pc, #288]	; (80035f0 <HAL_GPIO_Init+0x51c>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d007      	beq.n	80034e2 <HAL_GPIO_Init+0x40e>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a47      	ldr	r2, [pc, #284]	; (80035f4 <HAL_GPIO_Init+0x520>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d101      	bne.n	80034de <HAL_GPIO_Init+0x40a>
 80034da:	2305      	movs	r3, #5
 80034dc:	e00a      	b.n	80034f4 <HAL_GPIO_Init+0x420>
 80034de:	2306      	movs	r3, #6
 80034e0:	e008      	b.n	80034f4 <HAL_GPIO_Init+0x420>
 80034e2:	2304      	movs	r3, #4
 80034e4:	e006      	b.n	80034f4 <HAL_GPIO_Init+0x420>
 80034e6:	2303      	movs	r3, #3
 80034e8:	e004      	b.n	80034f4 <HAL_GPIO_Init+0x420>
 80034ea:	2302      	movs	r3, #2
 80034ec:	e002      	b.n	80034f4 <HAL_GPIO_Init+0x420>
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <HAL_GPIO_Init+0x420>
 80034f2:	2300      	movs	r3, #0
 80034f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f6:	f002 0203 	and.w	r2, r2, #3
 80034fa:	0092      	lsls	r2, r2, #2
 80034fc:	4093      	lsls	r3, r2
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	4313      	orrs	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003504:	4935      	ldr	r1, [pc, #212]	; (80035dc <HAL_GPIO_Init+0x508>)
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	089b      	lsrs	r3, r3, #2
 800350a:	3302      	adds	r3, #2
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d006      	beq.n	800352c <HAL_GPIO_Init+0x458>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800351e:	4b36      	ldr	r3, [pc, #216]	; (80035f8 <HAL_GPIO_Init+0x524>)
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	4935      	ldr	r1, [pc, #212]	; (80035f8 <HAL_GPIO_Init+0x524>)
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	4313      	orrs	r3, r2
 8003528:	600b      	str	r3, [r1, #0]
 800352a:	e006      	b.n	800353a <HAL_GPIO_Init+0x466>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800352c:	4b32      	ldr	r3, [pc, #200]	; (80035f8 <HAL_GPIO_Init+0x524>)
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	43db      	mvns	r3, r3
 8003534:	4930      	ldr	r1, [pc, #192]	; (80035f8 <HAL_GPIO_Init+0x524>)
 8003536:	4013      	ands	r3, r2
 8003538:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d006      	beq.n	8003554 <HAL_GPIO_Init+0x480>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003546:	4b2c      	ldr	r3, [pc, #176]	; (80035f8 <HAL_GPIO_Init+0x524>)
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	492b      	ldr	r1, [pc, #172]	; (80035f8 <HAL_GPIO_Init+0x524>)
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	4313      	orrs	r3, r2
 8003550:	604b      	str	r3, [r1, #4]
 8003552:	e006      	b.n	8003562 <HAL_GPIO_Init+0x48e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003554:	4b28      	ldr	r3, [pc, #160]	; (80035f8 <HAL_GPIO_Init+0x524>)
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	43db      	mvns	r3, r3
 800355c:	4926      	ldr	r1, [pc, #152]	; (80035f8 <HAL_GPIO_Init+0x524>)
 800355e:	4013      	ands	r3, r2
 8003560:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d006      	beq.n	800357c <HAL_GPIO_Init+0x4a8>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800356e:	4b22      	ldr	r3, [pc, #136]	; (80035f8 <HAL_GPIO_Init+0x524>)
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	4921      	ldr	r1, [pc, #132]	; (80035f8 <HAL_GPIO_Init+0x524>)
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	4313      	orrs	r3, r2
 8003578:	608b      	str	r3, [r1, #8]
 800357a:	e006      	b.n	800358a <HAL_GPIO_Init+0x4b6>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800357c:	4b1e      	ldr	r3, [pc, #120]	; (80035f8 <HAL_GPIO_Init+0x524>)
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	43db      	mvns	r3, r3
 8003584:	491c      	ldr	r1, [pc, #112]	; (80035f8 <HAL_GPIO_Init+0x524>)
 8003586:	4013      	ands	r3, r2
 8003588:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d006      	beq.n	80035a4 <HAL_GPIO_Init+0x4d0>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003596:	4b18      	ldr	r3, [pc, #96]	; (80035f8 <HAL_GPIO_Init+0x524>)
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	4917      	ldr	r1, [pc, #92]	; (80035f8 <HAL_GPIO_Init+0x524>)
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	4313      	orrs	r3, r2
 80035a0:	60cb      	str	r3, [r1, #12]
 80035a2:	e006      	b.n	80035b2 <HAL_GPIO_Init+0x4de>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80035a4:	4b14      	ldr	r3, [pc, #80]	; (80035f8 <HAL_GPIO_Init+0x524>)
 80035a6:	68da      	ldr	r2, [r3, #12]
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	43db      	mvns	r3, r3
 80035ac:	4912      	ldr	r1, [pc, #72]	; (80035f8 <HAL_GPIO_Init+0x524>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	3301      	adds	r3, #1
 80035b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	fa22 f303 	lsr.w	r3, r2, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f47f ae05 	bne.w	80031d2 <HAL_GPIO_Init+0xfe>
  }
}
 80035c8:	bf00      	nop
 80035ca:	bf00      	nop
 80035cc:	3728      	adds	r7, #40	; 0x28
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	0800b308 	.word	0x0800b308
 80035d8:	40021000 	.word	0x40021000
 80035dc:	40010000 	.word	0x40010000
 80035e0:	40010800 	.word	0x40010800
 80035e4:	40010c00 	.word	0x40010c00
 80035e8:	40011000 	.word	0x40011000
 80035ec:	40011400 	.word	0x40011400
 80035f0:	40011800 	.word	0x40011800
 80035f4:	40011c00 	.word	0x40011c00
 80035f8:	40010400 	.word	0x40010400

080035fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	807b      	strh	r3, [r7, #2]
 8003608:	4613      	mov	r3, r2
 800360a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800360c:	887b      	ldrh	r3, [r7, #2]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d004      	beq.n	800361c <HAL_GPIO_WritePin+0x20>
 8003612:	887b      	ldrh	r3, [r7, #2]
 8003614:	0c1b      	lsrs	r3, r3, #16
 8003616:	041b      	lsls	r3, r3, #16
 8003618:	2b00      	cmp	r3, #0
 800361a:	d004      	beq.n	8003626 <HAL_GPIO_WritePin+0x2a>
 800361c:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8003620:	480e      	ldr	r0, [pc, #56]	; (800365c <HAL_GPIO_WritePin+0x60>)
 8003622:	f7fe f809 	bl	8001638 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8003626:	787b      	ldrb	r3, [r7, #1]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d007      	beq.n	800363c <HAL_GPIO_WritePin+0x40>
 800362c:	787b      	ldrb	r3, [r7, #1]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d004      	beq.n	800363c <HAL_GPIO_WritePin+0x40>
 8003632:	f240 11d5 	movw	r1, #469	; 0x1d5
 8003636:	4809      	ldr	r0, [pc, #36]	; (800365c <HAL_GPIO_WritePin+0x60>)
 8003638:	f7fd fffe 	bl	8001638 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 800363c:	787b      	ldrb	r3, [r7, #1]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003642:	887a      	ldrh	r2, [r7, #2]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003648:	e003      	b.n	8003652 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800364a:	887b      	ldrh	r3, [r7, #2]
 800364c:	041a      	lsls	r2, r3, #16
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	611a      	str	r2, [r3, #16]
}
 8003652:	bf00      	nop
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	0800b308 	.word	0x0800b308

08003660 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	460b      	mov	r3, r1
 800366a:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800366c:	887b      	ldrh	r3, [r7, #2]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d004      	beq.n	800367c <HAL_GPIO_TogglePin+0x1c>
 8003672:	887b      	ldrh	r3, [r7, #2]
 8003674:	0c1b      	lsrs	r3, r3, #16
 8003676:	041b      	lsls	r3, r3, #16
 8003678:	2b00      	cmp	r3, #0
 800367a:	d004      	beq.n	8003686 <HAL_GPIO_TogglePin+0x26>
 800367c:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 8003680:	480a      	ldr	r0, [pc, #40]	; (80036ac <HAL_GPIO_TogglePin+0x4c>)
 8003682:	f7fd ffd9 	bl	8001638 <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800368c:	887a      	ldrh	r2, [r7, #2]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	4013      	ands	r3, r2
 8003692:	041a      	lsls	r2, r3, #16
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	43d9      	mvns	r1, r3
 8003698:	887b      	ldrh	r3, [r7, #2]
 800369a:	400b      	ands	r3, r1
 800369c:	431a      	orrs	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	611a      	str	r2, [r3, #16]
}
 80036a2:	bf00      	nop
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	0800b308 	.word	0x0800b308

080036b0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80036b4:	4b03      	ldr	r3, [pc, #12]	; (80036c4 <HAL_PWR_EnableBkUpAccess+0x14>)
 80036b6:	2201      	movs	r2, #1
 80036b8:	601a      	str	r2, [r3, #0]
}
 80036ba:	bf00      	nop
 80036bc:	46bd      	mov	sp, r7
 80036be:	bc80      	pop	{r7}
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	420e0020 	.word	0x420e0020

080036c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e35c      	b.n	8003d94 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d01c      	beq.n	800371c <HAL_RCC_OscConfig+0x54>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d116      	bne.n	800371c <HAL_RCC_OscConfig+0x54>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d110      	bne.n	800371c <HAL_RCC_OscConfig+0x54>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10a      	bne.n	800371c <HAL_RCC_OscConfig+0x54>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0304 	and.w	r3, r3, #4
 800370e:	2b00      	cmp	r3, #0
 8003710:	d104      	bne.n	800371c <HAL_RCC_OscConfig+0x54>
 8003712:	f240 1167 	movw	r1, #359	; 0x167
 8003716:	48a5      	ldr	r0, [pc, #660]	; (80039ac <HAL_RCC_OscConfig+0x2e4>)
 8003718:	f7fd ff8e 	bl	8001638 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b00      	cmp	r3, #0
 8003726:	f000 809a 	beq.w	800385e <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00e      	beq.n	8003750 <HAL_RCC_OscConfig+0x88>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800373a:	d009      	beq.n	8003750 <HAL_RCC_OscConfig+0x88>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003744:	d004      	beq.n	8003750 <HAL_RCC_OscConfig+0x88>
 8003746:	f240 116d 	movw	r1, #365	; 0x16d
 800374a:	4898      	ldr	r0, [pc, #608]	; (80039ac <HAL_RCC_OscConfig+0x2e4>)
 800374c:	f7fd ff74 	bl	8001638 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003750:	4b97      	ldr	r3, [pc, #604]	; (80039b0 <HAL_RCC_OscConfig+0x2e8>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f003 030c 	and.w	r3, r3, #12
 8003758:	2b04      	cmp	r3, #4
 800375a:	d00c      	beq.n	8003776 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800375c:	4b94      	ldr	r3, [pc, #592]	; (80039b0 <HAL_RCC_OscConfig+0x2e8>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 030c 	and.w	r3, r3, #12
 8003764:	2b08      	cmp	r3, #8
 8003766:	d112      	bne.n	800378e <HAL_RCC_OscConfig+0xc6>
 8003768:	4b91      	ldr	r3, [pc, #580]	; (80039b0 <HAL_RCC_OscConfig+0x2e8>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003774:	d10b      	bne.n	800378e <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003776:	4b8e      	ldr	r3, [pc, #568]	; (80039b0 <HAL_RCC_OscConfig+0x2e8>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d06c      	beq.n	800385c <HAL_RCC_OscConfig+0x194>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d168      	bne.n	800385c <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e302      	b.n	8003d94 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003796:	d106      	bne.n	80037a6 <HAL_RCC_OscConfig+0xde>
 8003798:	4b85      	ldr	r3, [pc, #532]	; (80039b0 <HAL_RCC_OscConfig+0x2e8>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a84      	ldr	r2, [pc, #528]	; (80039b0 <HAL_RCC_OscConfig+0x2e8>)
 800379e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a2:	6013      	str	r3, [r2, #0]
 80037a4:	e02e      	b.n	8003804 <HAL_RCC_OscConfig+0x13c>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10c      	bne.n	80037c8 <HAL_RCC_OscConfig+0x100>
 80037ae:	4b80      	ldr	r3, [pc, #512]	; (80039b0 <HAL_RCC_OscConfig+0x2e8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a7f      	ldr	r2, [pc, #508]	; (80039b0 <HAL_RCC_OscConfig+0x2e8>)
 80037b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b8:	6013      	str	r3, [r2, #0]
 80037ba:	4b7d      	ldr	r3, [pc, #500]	; (80039b0 <HAL_RCC_OscConfig+0x2e8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a7c      	ldr	r2, [pc, #496]	; (80039b0 <HAL_RCC_OscConfig+0x2e8>)
 80037c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	e01d      	b.n	8003804 <HAL_RCC_OscConfig+0x13c>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037d0:	d10c      	bne.n	80037ec <HAL_RCC_OscConfig+0x124>
 80037d2:	4b77      	ldr	r3, [pc, #476]	; (80039b0 <HAL_RCC_OscConfig+0x2e8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a76      	ldr	r2, [pc, #472]	; (80039b0 <HAL_RCC_OscConfig+0x2e8>)
 80037d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	4b74      	ldr	r3, [pc, #464]	; (80039b0 <HAL_RCC_OscConfig+0x2e8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a73      	ldr	r2, [pc, #460]	; (80039b0 <HAL_RCC_OscConfig+0x2e8>)
 80037e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037e8:	6013      	str	r3, [r2, #0]
 80037ea:	e00b      	b.n	8003804 <HAL_RCC_OscConfig+0x13c>
 80037ec:	4b70      	ldr	r3, [pc, #448]	; (80039b0 <HAL_RCC_OscConfig+0x2e8>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a6f      	ldr	r2, [pc, #444]	; (80039b0 <HAL_RCC_OscConfig+0x2e8>)
 80037f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037f6:	6013      	str	r3, [r2, #0]
 80037f8:	4b6d      	ldr	r3, [pc, #436]	; (80039b0 <HAL_RCC_OscConfig+0x2e8>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a6c      	ldr	r2, [pc, #432]	; (80039b0 <HAL_RCC_OscConfig+0x2e8>)
 80037fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003802:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d013      	beq.n	8003834 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380c:	f7fe fbc0 	bl	8001f90 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003814:	f7fe fbbc 	bl	8001f90 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b64      	cmp	r3, #100	; 0x64
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e2b6      	b.n	8003d94 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003826:	4b62      	ldr	r3, [pc, #392]	; (80039b0 <HAL_RCC_OscConfig+0x2e8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0f0      	beq.n	8003814 <HAL_RCC_OscConfig+0x14c>
 8003832:	e014      	b.n	800385e <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003834:	f7fe fbac 	bl	8001f90 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800383c:	f7fe fba8 	bl	8001f90 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b64      	cmp	r3, #100	; 0x64
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e2a2      	b.n	8003d94 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800384e:	4b58      	ldr	r3, [pc, #352]	; (80039b0 <HAL_RCC_OscConfig+0x2e8>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1f0      	bne.n	800383c <HAL_RCC_OscConfig+0x174>
 800385a:	e000      	b.n	800385e <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800385c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d079      	beq.n	800395e <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d008      	beq.n	8003884 <HAL_RCC_OscConfig+0x1bc>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d004      	beq.n	8003884 <HAL_RCC_OscConfig+0x1bc>
 800387a:	f240 11a1 	movw	r1, #417	; 0x1a1
 800387e:	484b      	ldr	r0, [pc, #300]	; (80039ac <HAL_RCC_OscConfig+0x2e4>)
 8003880:	f7fd feda 	bl	8001638 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	2b1f      	cmp	r3, #31
 800388a:	d904      	bls.n	8003896 <HAL_RCC_OscConfig+0x1ce>
 800388c:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8003890:	4846      	ldr	r0, [pc, #280]	; (80039ac <HAL_RCC_OscConfig+0x2e4>)
 8003892:	f7fd fed1 	bl	8001638 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003896:	4b46      	ldr	r3, [pc, #280]	; (80039b0 <HAL_RCC_OscConfig+0x2e8>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f003 030c 	and.w	r3, r3, #12
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00b      	beq.n	80038ba <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038a2:	4b43      	ldr	r3, [pc, #268]	; (80039b0 <HAL_RCC_OscConfig+0x2e8>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f003 030c 	and.w	r3, r3, #12
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d11c      	bne.n	80038e8 <HAL_RCC_OscConfig+0x220>
 80038ae:	4b40      	ldr	r3, [pc, #256]	; (80039b0 <HAL_RCC_OscConfig+0x2e8>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d116      	bne.n	80038e8 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ba:	4b3d      	ldr	r3, [pc, #244]	; (80039b0 <HAL_RCC_OscConfig+0x2e8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d005      	beq.n	80038d2 <HAL_RCC_OscConfig+0x20a>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d001      	beq.n	80038d2 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e260      	b.n	8003d94 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d2:	4b37      	ldr	r3, [pc, #220]	; (80039b0 <HAL_RCC_OscConfig+0x2e8>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	4933      	ldr	r1, [pc, #204]	; (80039b0 <HAL_RCC_OscConfig+0x2e8>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038e6:	e03a      	b.n	800395e <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d020      	beq.n	8003932 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038f0:	4b30      	ldr	r3, [pc, #192]	; (80039b4 <HAL_RCC_OscConfig+0x2ec>)
 80038f2:	2201      	movs	r2, #1
 80038f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f6:	f7fe fb4b 	bl	8001f90 <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038fc:	e008      	b.n	8003910 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038fe:	f7fe fb47 	bl	8001f90 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e241      	b.n	8003d94 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003910:	4b27      	ldr	r3, [pc, #156]	; (80039b0 <HAL_RCC_OscConfig+0x2e8>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0f0      	beq.n	80038fe <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800391c:	4b24      	ldr	r3, [pc, #144]	; (80039b0 <HAL_RCC_OscConfig+0x2e8>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	4921      	ldr	r1, [pc, #132]	; (80039b0 <HAL_RCC_OscConfig+0x2e8>)
 800392c:	4313      	orrs	r3, r2
 800392e:	600b      	str	r3, [r1, #0]
 8003930:	e015      	b.n	800395e <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003932:	4b20      	ldr	r3, [pc, #128]	; (80039b4 <HAL_RCC_OscConfig+0x2ec>)
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003938:	f7fe fb2a 	bl	8001f90 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003940:	f7fe fb26 	bl	8001f90 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e220      	b.n	8003d94 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003952:	4b17      	ldr	r3, [pc, #92]	; (80039b0 <HAL_RCC_OscConfig+0x2e8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f0      	bne.n	8003940 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d048      	beq.n	80039fc <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d008      	beq.n	8003984 <HAL_RCC_OscConfig+0x2bc>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d004      	beq.n	8003984 <HAL_RCC_OscConfig+0x2bc>
 800397a:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 800397e:	480b      	ldr	r0, [pc, #44]	; (80039ac <HAL_RCC_OscConfig+0x2e4>)
 8003980:	f7fd fe5a 	bl	8001638 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d021      	beq.n	80039d0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800398c:	4b0a      	ldr	r3, [pc, #40]	; (80039b8 <HAL_RCC_OscConfig+0x2f0>)
 800398e:	2201      	movs	r2, #1
 8003990:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003992:	f7fe fafd 	bl	8001f90 <HAL_GetTick>
 8003996:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003998:	e010      	b.n	80039bc <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800399a:	f7fe faf9 	bl	8001f90 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	d909      	bls.n	80039bc <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 80039a8:	2303      	movs	r3, #3
 80039aa:	e1f3      	b.n	8003d94 <HAL_RCC_OscConfig+0x6cc>
 80039ac:	0800b344 	.word	0x0800b344
 80039b0:	40021000 	.word	0x40021000
 80039b4:	42420000 	.word	0x42420000
 80039b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039bc:	4b67      	ldr	r3, [pc, #412]	; (8003b5c <HAL_RCC_OscConfig+0x494>)
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0e8      	beq.n	800399a <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80039c8:	2001      	movs	r0, #1
 80039ca:	f000 fc0f 	bl	80041ec <RCC_Delay>
 80039ce:	e015      	b.n	80039fc <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039d0:	4b63      	ldr	r3, [pc, #396]	; (8003b60 <HAL_RCC_OscConfig+0x498>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039d6:	f7fe fadb 	bl	8001f90 <HAL_GetTick>
 80039da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039dc:	e008      	b.n	80039f0 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039de:	f7fe fad7 	bl	8001f90 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e1d1      	b.n	8003d94 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f0:	4b5a      	ldr	r3, [pc, #360]	; (8003b5c <HAL_RCC_OscConfig+0x494>)
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1f0      	bne.n	80039de <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 80c0 	beq.w	8003b8a <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00c      	beq.n	8003a30 <HAL_RCC_OscConfig+0x368>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d008      	beq.n	8003a30 <HAL_RCC_OscConfig+0x368>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	2b05      	cmp	r3, #5
 8003a24:	d004      	beq.n	8003a30 <HAL_RCC_OscConfig+0x368>
 8003a26:	f240 2111 	movw	r1, #529	; 0x211
 8003a2a:	484e      	ldr	r0, [pc, #312]	; (8003b64 <HAL_RCC_OscConfig+0x49c>)
 8003a2c:	f7fd fe04 	bl	8001638 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a30:	4b4a      	ldr	r3, [pc, #296]	; (8003b5c <HAL_RCC_OscConfig+0x494>)
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10d      	bne.n	8003a58 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a3c:	4b47      	ldr	r3, [pc, #284]	; (8003b5c <HAL_RCC_OscConfig+0x494>)
 8003a3e:	69db      	ldr	r3, [r3, #28]
 8003a40:	4a46      	ldr	r2, [pc, #280]	; (8003b5c <HAL_RCC_OscConfig+0x494>)
 8003a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a46:	61d3      	str	r3, [r2, #28]
 8003a48:	4b44      	ldr	r3, [pc, #272]	; (8003b5c <HAL_RCC_OscConfig+0x494>)
 8003a4a:	69db      	ldr	r3, [r3, #28]
 8003a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a50:	60bb      	str	r3, [r7, #8]
 8003a52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a54:	2301      	movs	r3, #1
 8003a56:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a58:	4b43      	ldr	r3, [pc, #268]	; (8003b68 <HAL_RCC_OscConfig+0x4a0>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d118      	bne.n	8003a96 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a64:	4b40      	ldr	r3, [pc, #256]	; (8003b68 <HAL_RCC_OscConfig+0x4a0>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a3f      	ldr	r2, [pc, #252]	; (8003b68 <HAL_RCC_OscConfig+0x4a0>)
 8003a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a70:	f7fe fa8e 	bl	8001f90 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a76:	e008      	b.n	8003a8a <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a78:	f7fe fa8a 	bl	8001f90 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b64      	cmp	r3, #100	; 0x64
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e184      	b.n	8003d94 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a8a:	4b37      	ldr	r3, [pc, #220]	; (8003b68 <HAL_RCC_OscConfig+0x4a0>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0f0      	beq.n	8003a78 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d106      	bne.n	8003aac <HAL_RCC_OscConfig+0x3e4>
 8003a9e:	4b2f      	ldr	r3, [pc, #188]	; (8003b5c <HAL_RCC_OscConfig+0x494>)
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	4a2e      	ldr	r2, [pc, #184]	; (8003b5c <HAL_RCC_OscConfig+0x494>)
 8003aa4:	f043 0301 	orr.w	r3, r3, #1
 8003aa8:	6213      	str	r3, [r2, #32]
 8003aaa:	e02d      	b.n	8003b08 <HAL_RCC_OscConfig+0x440>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10c      	bne.n	8003ace <HAL_RCC_OscConfig+0x406>
 8003ab4:	4b29      	ldr	r3, [pc, #164]	; (8003b5c <HAL_RCC_OscConfig+0x494>)
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	4a28      	ldr	r2, [pc, #160]	; (8003b5c <HAL_RCC_OscConfig+0x494>)
 8003aba:	f023 0301 	bic.w	r3, r3, #1
 8003abe:	6213      	str	r3, [r2, #32]
 8003ac0:	4b26      	ldr	r3, [pc, #152]	; (8003b5c <HAL_RCC_OscConfig+0x494>)
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	4a25      	ldr	r2, [pc, #148]	; (8003b5c <HAL_RCC_OscConfig+0x494>)
 8003ac6:	f023 0304 	bic.w	r3, r3, #4
 8003aca:	6213      	str	r3, [r2, #32]
 8003acc:	e01c      	b.n	8003b08 <HAL_RCC_OscConfig+0x440>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	2b05      	cmp	r3, #5
 8003ad4:	d10c      	bne.n	8003af0 <HAL_RCC_OscConfig+0x428>
 8003ad6:	4b21      	ldr	r3, [pc, #132]	; (8003b5c <HAL_RCC_OscConfig+0x494>)
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	4a20      	ldr	r2, [pc, #128]	; (8003b5c <HAL_RCC_OscConfig+0x494>)
 8003adc:	f043 0304 	orr.w	r3, r3, #4
 8003ae0:	6213      	str	r3, [r2, #32]
 8003ae2:	4b1e      	ldr	r3, [pc, #120]	; (8003b5c <HAL_RCC_OscConfig+0x494>)
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	4a1d      	ldr	r2, [pc, #116]	; (8003b5c <HAL_RCC_OscConfig+0x494>)
 8003ae8:	f043 0301 	orr.w	r3, r3, #1
 8003aec:	6213      	str	r3, [r2, #32]
 8003aee:	e00b      	b.n	8003b08 <HAL_RCC_OscConfig+0x440>
 8003af0:	4b1a      	ldr	r3, [pc, #104]	; (8003b5c <HAL_RCC_OscConfig+0x494>)
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	4a19      	ldr	r2, [pc, #100]	; (8003b5c <HAL_RCC_OscConfig+0x494>)
 8003af6:	f023 0301 	bic.w	r3, r3, #1
 8003afa:	6213      	str	r3, [r2, #32]
 8003afc:	4b17      	ldr	r3, [pc, #92]	; (8003b5c <HAL_RCC_OscConfig+0x494>)
 8003afe:	6a1b      	ldr	r3, [r3, #32]
 8003b00:	4a16      	ldr	r2, [pc, #88]	; (8003b5c <HAL_RCC_OscConfig+0x494>)
 8003b02:	f023 0304 	bic.w	r3, r3, #4
 8003b06:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d015      	beq.n	8003b3c <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b10:	f7fe fa3e 	bl	8001f90 <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b16:	e00a      	b.n	8003b2e <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b18:	f7fe fa3a 	bl	8001f90 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e132      	b.n	8003d94 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b2e:	4b0b      	ldr	r3, [pc, #44]	; (8003b5c <HAL_RCC_OscConfig+0x494>)
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d0ee      	beq.n	8003b18 <HAL_RCC_OscConfig+0x450>
 8003b3a:	e01d      	b.n	8003b78 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b3c:	f7fe fa28 	bl	8001f90 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b42:	e013      	b.n	8003b6c <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b44:	f7fe fa24 	bl	8001f90 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d90a      	bls.n	8003b6c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e11c      	b.n	8003d94 <HAL_RCC_OscConfig+0x6cc>
 8003b5a:	bf00      	nop
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	42420480 	.word	0x42420480
 8003b64:	0800b344 	.word	0x0800b344
 8003b68:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b6c:	4b8b      	ldr	r3, [pc, #556]	; (8003d9c <HAL_RCC_OscConfig+0x6d4>)
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1e5      	bne.n	8003b44 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b78:	7dfb      	ldrb	r3, [r7, #23]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d105      	bne.n	8003b8a <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b7e:	4b87      	ldr	r3, [pc, #540]	; (8003d9c <HAL_RCC_OscConfig+0x6d4>)
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	4a86      	ldr	r2, [pc, #536]	; (8003d9c <HAL_RCC_OscConfig+0x6d4>)
 8003b84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b88:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00c      	beq.n	8003bac <HAL_RCC_OscConfig+0x4e4>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d008      	beq.n	8003bac <HAL_RCC_OscConfig+0x4e4>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d004      	beq.n	8003bac <HAL_RCC_OscConfig+0x4e4>
 8003ba2:	f240 21af 	movw	r1, #687	; 0x2af
 8003ba6:	487e      	ldr	r0, [pc, #504]	; (8003da0 <HAL_RCC_OscConfig+0x6d8>)
 8003ba8:	f7fd fd46 	bl	8001638 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 80ee 	beq.w	8003d92 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bb6:	4b79      	ldr	r3, [pc, #484]	; (8003d9c <HAL_RCC_OscConfig+0x6d4>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f003 030c 	and.w	r3, r3, #12
 8003bbe:	2b08      	cmp	r3, #8
 8003bc0:	f000 80ce 	beq.w	8003d60 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	f040 80b2 	bne.w	8003d32 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d009      	beq.n	8003bea <HAL_RCC_OscConfig+0x522>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bde:	d004      	beq.n	8003bea <HAL_RCC_OscConfig+0x522>
 8003be0:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8003be4:	486e      	ldr	r0, [pc, #440]	; (8003da0 <HAL_RCC_OscConfig+0x6d8>)
 8003be6:	f7fd fd27 	bl	8001638 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d04a      	beq.n	8003c88 <HAL_RCC_OscConfig+0x5c0>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003bfa:	d045      	beq.n	8003c88 <HAL_RCC_OscConfig+0x5c0>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c00:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003c04:	d040      	beq.n	8003c88 <HAL_RCC_OscConfig+0x5c0>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003c0e:	d03b      	beq.n	8003c88 <HAL_RCC_OscConfig+0x5c0>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c18:	d036      	beq.n	8003c88 <HAL_RCC_OscConfig+0x5c0>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003c22:	d031      	beq.n	8003c88 <HAL_RCC_OscConfig+0x5c0>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c28:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003c2c:	d02c      	beq.n	8003c88 <HAL_RCC_OscConfig+0x5c0>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003c36:	d027      	beq.n	8003c88 <HAL_RCC_OscConfig+0x5c0>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c40:	d022      	beq.n	8003c88 <HAL_RCC_OscConfig+0x5c0>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003c4a:	d01d      	beq.n	8003c88 <HAL_RCC_OscConfig+0x5c0>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003c54:	d018      	beq.n	8003c88 <HAL_RCC_OscConfig+0x5c0>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003c5e:	d013      	beq.n	8003c88 <HAL_RCC_OscConfig+0x5c0>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c64:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c68:	d00e      	beq.n	8003c88 <HAL_RCC_OscConfig+0x5c0>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8003c72:	d009      	beq.n	8003c88 <HAL_RCC_OscConfig+0x5c0>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8003c7c:	d004      	beq.n	8003c88 <HAL_RCC_OscConfig+0x5c0>
 8003c7e:	f240 21b9 	movw	r1, #697	; 0x2b9
 8003c82:	4847      	ldr	r0, [pc, #284]	; (8003da0 <HAL_RCC_OscConfig+0x6d8>)
 8003c84:	f7fd fcd8 	bl	8001638 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c88:	4b46      	ldr	r3, [pc, #280]	; (8003da4 <HAL_RCC_OscConfig+0x6dc>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8e:	f7fe f97f 	bl	8001f90 <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c96:	f7fe f97b 	bl	8001f90 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e075      	b.n	8003d94 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ca8:	4b3c      	ldr	r3, [pc, #240]	; (8003d9c <HAL_RCC_OscConfig+0x6d4>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1f0      	bne.n	8003c96 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a1b      	ldr	r3, [r3, #32]
 8003cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cbc:	d116      	bne.n	8003cec <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d009      	beq.n	8003cda <HAL_RCC_OscConfig+0x612>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cce:	d004      	beq.n	8003cda <HAL_RCC_OscConfig+0x612>
 8003cd0:	f240 21cf 	movw	r1, #719	; 0x2cf
 8003cd4:	4832      	ldr	r0, [pc, #200]	; (8003da0 <HAL_RCC_OscConfig+0x6d8>)
 8003cd6:	f7fd fcaf 	bl	8001638 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003cda:	4b30      	ldr	r3, [pc, #192]	; (8003d9c <HAL_RCC_OscConfig+0x6d4>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	492d      	ldr	r1, [pc, #180]	; (8003d9c <HAL_RCC_OscConfig+0x6d4>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cec:	4b2b      	ldr	r3, [pc, #172]	; (8003d9c <HAL_RCC_OscConfig+0x6d4>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a19      	ldr	r1, [r3, #32]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	430b      	orrs	r3, r1
 8003cfe:	4927      	ldr	r1, [pc, #156]	; (8003d9c <HAL_RCC_OscConfig+0x6d4>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d04:	4b27      	ldr	r3, [pc, #156]	; (8003da4 <HAL_RCC_OscConfig+0x6dc>)
 8003d06:	2201      	movs	r2, #1
 8003d08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d0a:	f7fe f941 	bl	8001f90 <HAL_GetTick>
 8003d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d10:	e008      	b.n	8003d24 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d12:	f7fe f93d 	bl	8001f90 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e037      	b.n	8003d94 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d24:	4b1d      	ldr	r3, [pc, #116]	; (8003d9c <HAL_RCC_OscConfig+0x6d4>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0f0      	beq.n	8003d12 <HAL_RCC_OscConfig+0x64a>
 8003d30:	e02f      	b.n	8003d92 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d32:	4b1c      	ldr	r3, [pc, #112]	; (8003da4 <HAL_RCC_OscConfig+0x6dc>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d38:	f7fe f92a 	bl	8001f90 <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d40:	f7fe f926 	bl	8001f90 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e020      	b.n	8003d94 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d52:	4b12      	ldr	r3, [pc, #72]	; (8003d9c <HAL_RCC_OscConfig+0x6d4>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1f0      	bne.n	8003d40 <HAL_RCC_OscConfig+0x678>
 8003d5e:	e018      	b.n	8003d92 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e013      	b.n	8003d94 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d6c:	4b0b      	ldr	r3, [pc, #44]	; (8003d9c <HAL_RCC_OscConfig+0x6d4>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d106      	bne.n	8003d8e <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d001      	beq.n	8003d92 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e000      	b.n	8003d94 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3718      	adds	r7, #24
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	0800b344 	.word	0x0800b344
 8003da4:	42420060 	.word	0x42420060

08003da8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e176      	b.n	80040aa <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d116      	bne.n	8003df6 <HAL_RCC_ClockConfig+0x4e>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0302 	and.w	r3, r3, #2
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d110      	bne.n	8003df6 <HAL_RCC_ClockConfig+0x4e>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10a      	bne.n	8003df6 <HAL_RCC_ClockConfig+0x4e>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d104      	bne.n	8003df6 <HAL_RCC_ClockConfig+0x4e>
 8003dec:	f44f 714e 	mov.w	r1, #824	; 0x338
 8003df0:	4874      	ldr	r0, [pc, #464]	; (8003fc4 <HAL_RCC_ClockConfig+0x21c>)
 8003df2:	f7fd fc21 	bl	8001638 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00a      	beq.n	8003e12 <HAL_RCC_ClockConfig+0x6a>
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d007      	beq.n	8003e12 <HAL_RCC_ClockConfig+0x6a>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d004      	beq.n	8003e12 <HAL_RCC_ClockConfig+0x6a>
 8003e08:	f240 3139 	movw	r1, #825	; 0x339
 8003e0c:	486d      	ldr	r0, [pc, #436]	; (8003fc4 <HAL_RCC_ClockConfig+0x21c>)
 8003e0e:	f7fd fc13 	bl	8001638 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e12:	4b6d      	ldr	r3, [pc, #436]	; (8003fc8 <HAL_RCC_ClockConfig+0x220>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0307 	and.w	r3, r3, #7
 8003e1a:	683a      	ldr	r2, [r7, #0]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d910      	bls.n	8003e42 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e20:	4b69      	ldr	r3, [pc, #420]	; (8003fc8 <HAL_RCC_ClockConfig+0x220>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f023 0207 	bic.w	r2, r3, #7
 8003e28:	4967      	ldr	r1, [pc, #412]	; (8003fc8 <HAL_RCC_ClockConfig+0x220>)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e30:	4b65      	ldr	r3, [pc, #404]	; (8003fc8 <HAL_RCC_ClockConfig+0x220>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0307 	and.w	r3, r3, #7
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d001      	beq.n	8003e42 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e133      	b.n	80040aa <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d049      	beq.n	8003ee2 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0304 	and.w	r3, r3, #4
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d005      	beq.n	8003e66 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e5a:	4b5c      	ldr	r3, [pc, #368]	; (8003fcc <HAL_RCC_ClockConfig+0x224>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	4a5b      	ldr	r2, [pc, #364]	; (8003fcc <HAL_RCC_ClockConfig+0x224>)
 8003e60:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e64:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0308 	and.w	r3, r3, #8
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d005      	beq.n	8003e7e <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e72:	4b56      	ldr	r3, [pc, #344]	; (8003fcc <HAL_RCC_ClockConfig+0x224>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	4a55      	ldr	r2, [pc, #340]	; (8003fcc <HAL_RCC_ClockConfig+0x224>)
 8003e78:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003e7c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d024      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x128>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	2b80      	cmp	r3, #128	; 0x80
 8003e8c:	d020      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x128>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	2b90      	cmp	r3, #144	; 0x90
 8003e94:	d01c      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x128>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	2ba0      	cmp	r3, #160	; 0xa0
 8003e9c:	d018      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x128>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	2bb0      	cmp	r3, #176	; 0xb0
 8003ea4:	d014      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x128>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	2bc0      	cmp	r3, #192	; 0xc0
 8003eac:	d010      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x128>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	2bd0      	cmp	r3, #208	; 0xd0
 8003eb4:	d00c      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x128>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	2be0      	cmp	r3, #224	; 0xe0
 8003ebc:	d008      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x128>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2bf0      	cmp	r3, #240	; 0xf0
 8003ec4:	d004      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x128>
 8003ec6:	f240 315f 	movw	r1, #863	; 0x35f
 8003eca:	483e      	ldr	r0, [pc, #248]	; (8003fc4 <HAL_RCC_ClockConfig+0x21c>)
 8003ecc:	f7fd fbb4 	bl	8001638 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ed0:	4b3e      	ldr	r3, [pc, #248]	; (8003fcc <HAL_RCC_ClockConfig+0x224>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	493b      	ldr	r1, [pc, #236]	; (8003fcc <HAL_RCC_ClockConfig+0x224>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d051      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00c      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x168>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d008      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x168>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d004      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x168>
 8003f06:	f240 3166 	movw	r1, #870	; 0x366
 8003f0a:	482e      	ldr	r0, [pc, #184]	; (8003fc4 <HAL_RCC_ClockConfig+0x21c>)
 8003f0c:	f7fd fb94 	bl	8001638 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d107      	bne.n	8003f28 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f18:	4b2c      	ldr	r3, [pc, #176]	; (8003fcc <HAL_RCC_ClockConfig+0x224>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d115      	bne.n	8003f50 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e0c0      	b.n	80040aa <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d107      	bne.n	8003f40 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f30:	4b26      	ldr	r3, [pc, #152]	; (8003fcc <HAL_RCC_ClockConfig+0x224>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d109      	bne.n	8003f50 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e0b4      	b.n	80040aa <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f40:	4b22      	ldr	r3, [pc, #136]	; (8003fcc <HAL_RCC_ClockConfig+0x224>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e0ac      	b.n	80040aa <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f50:	4b1e      	ldr	r3, [pc, #120]	; (8003fcc <HAL_RCC_ClockConfig+0x224>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f023 0203 	bic.w	r2, r3, #3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	491b      	ldr	r1, [pc, #108]	; (8003fcc <HAL_RCC_ClockConfig+0x224>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f62:	f7fe f815 	bl	8001f90 <HAL_GetTick>
 8003f66:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f68:	e00a      	b.n	8003f80 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f6a:	f7fe f811 	bl	8001f90 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e094      	b.n	80040aa <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f80:	4b12      	ldr	r3, [pc, #72]	; (8003fcc <HAL_RCC_ClockConfig+0x224>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f003 020c 	and.w	r2, r3, #12
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d1eb      	bne.n	8003f6a <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f92:	4b0d      	ldr	r3, [pc, #52]	; (8003fc8 <HAL_RCC_ClockConfig+0x220>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d217      	bcs.n	8003fd0 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa0:	4b09      	ldr	r3, [pc, #36]	; (8003fc8 <HAL_RCC_ClockConfig+0x220>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f023 0207 	bic.w	r2, r3, #7
 8003fa8:	4907      	ldr	r1, [pc, #28]	; (8003fc8 <HAL_RCC_ClockConfig+0x220>)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb0:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <HAL_RCC_ClockConfig+0x220>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d008      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e073      	b.n	80040aa <HAL_RCC_ClockConfig+0x302>
 8003fc2:	bf00      	nop
 8003fc4:	0800b344 	.word	0x0800b344
 8003fc8:	40022000 	.word	0x40022000
 8003fcc:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d025      	beq.n	8004028 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d018      	beq.n	8004016 <HAL_RCC_ClockConfig+0x26e>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fec:	d013      	beq.n	8004016 <HAL_RCC_ClockConfig+0x26e>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003ff6:	d00e      	beq.n	8004016 <HAL_RCC_ClockConfig+0x26e>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004000:	d009      	beq.n	8004016 <HAL_RCC_ClockConfig+0x26e>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800400a:	d004      	beq.n	8004016 <HAL_RCC_ClockConfig+0x26e>
 800400c:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8004010:	4828      	ldr	r0, [pc, #160]	; (80040b4 <HAL_RCC_ClockConfig+0x30c>)
 8004012:	f7fd fb11 	bl	8001638 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004016:	4b28      	ldr	r3, [pc, #160]	; (80040b8 <HAL_RCC_ClockConfig+0x310>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	4925      	ldr	r1, [pc, #148]	; (80040b8 <HAL_RCC_ClockConfig+0x310>)
 8004024:	4313      	orrs	r3, r2
 8004026:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0308 	and.w	r3, r3, #8
 8004030:	2b00      	cmp	r3, #0
 8004032:	d026      	beq.n	8004082 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d018      	beq.n	800406e <HAL_RCC_ClockConfig+0x2c6>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004044:	d013      	beq.n	800406e <HAL_RCC_ClockConfig+0x2c6>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800404e:	d00e      	beq.n	800406e <HAL_RCC_ClockConfig+0x2c6>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004058:	d009      	beq.n	800406e <HAL_RCC_ClockConfig+0x2c6>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004062:	d004      	beq.n	800406e <HAL_RCC_ClockConfig+0x2c6>
 8004064:	f240 31ab 	movw	r1, #939	; 0x3ab
 8004068:	4812      	ldr	r0, [pc, #72]	; (80040b4 <HAL_RCC_ClockConfig+0x30c>)
 800406a:	f7fd fae5 	bl	8001638 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800406e:	4b12      	ldr	r3, [pc, #72]	; (80040b8 <HAL_RCC_ClockConfig+0x310>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	490e      	ldr	r1, [pc, #56]	; (80040b8 <HAL_RCC_ClockConfig+0x310>)
 800407e:	4313      	orrs	r3, r2
 8004080:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004082:	f000 f821 	bl	80040c8 <HAL_RCC_GetSysClockFreq>
 8004086:	4602      	mov	r2, r0
 8004088:	4b0b      	ldr	r3, [pc, #44]	; (80040b8 <HAL_RCC_ClockConfig+0x310>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	091b      	lsrs	r3, r3, #4
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	490a      	ldr	r1, [pc, #40]	; (80040bc <HAL_RCC_ClockConfig+0x314>)
 8004094:	5ccb      	ldrb	r3, [r1, r3]
 8004096:	fa22 f303 	lsr.w	r3, r2, r3
 800409a:	4a09      	ldr	r2, [pc, #36]	; (80040c0 <HAL_RCC_ClockConfig+0x318>)
 800409c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800409e:	4b09      	ldr	r3, [pc, #36]	; (80040c4 <HAL_RCC_ClockConfig+0x31c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fd ff32 	bl	8001f0c <HAL_InitTick>

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	0800b344 	.word	0x0800b344
 80040b8:	40021000 	.word	0x40021000
 80040bc:	0800b9ac 	.word	0x0800b9ac
 80040c0:	20000000 	.word	0x20000000
 80040c4:	20000004 	.word	0x20000004

080040c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040c8:	b490      	push	{r4, r7}
 80040ca:	b08a      	sub	sp, #40	; 0x28
 80040cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80040ce:	4b2a      	ldr	r3, [pc, #168]	; (8004178 <HAL_RCC_GetSysClockFreq+0xb0>)
 80040d0:	1d3c      	adds	r4, r7, #4
 80040d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80040d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80040d8:	f240 2301 	movw	r3, #513	; 0x201
 80040dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80040de:	2300      	movs	r3, #0
 80040e0:	61fb      	str	r3, [r7, #28]
 80040e2:	2300      	movs	r3, #0
 80040e4:	61bb      	str	r3, [r7, #24]
 80040e6:	2300      	movs	r3, #0
 80040e8:	627b      	str	r3, [r7, #36]	; 0x24
 80040ea:	2300      	movs	r3, #0
 80040ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80040f2:	4b22      	ldr	r3, [pc, #136]	; (800417c <HAL_RCC_GetSysClockFreq+0xb4>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	f003 030c 	and.w	r3, r3, #12
 80040fe:	2b04      	cmp	r3, #4
 8004100:	d002      	beq.n	8004108 <HAL_RCC_GetSysClockFreq+0x40>
 8004102:	2b08      	cmp	r3, #8
 8004104:	d003      	beq.n	800410e <HAL_RCC_GetSysClockFreq+0x46>
 8004106:	e02d      	b.n	8004164 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004108:	4b1d      	ldr	r3, [pc, #116]	; (8004180 <HAL_RCC_GetSysClockFreq+0xb8>)
 800410a:	623b      	str	r3, [r7, #32]
      break;
 800410c:	e02d      	b.n	800416a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	0c9b      	lsrs	r3, r3, #18
 8004112:	f003 030f 	and.w	r3, r3, #15
 8004116:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800411a:	4413      	add	r3, r2
 800411c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004120:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d013      	beq.n	8004154 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800412c:	4b13      	ldr	r3, [pc, #76]	; (800417c <HAL_RCC_GetSysClockFreq+0xb4>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	0c5b      	lsrs	r3, r3, #17
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800413a:	4413      	add	r3, r2
 800413c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004140:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	4a0e      	ldr	r2, [pc, #56]	; (8004180 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004146:	fb02 f203 	mul.w	r2, r2, r3
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004150:	627b      	str	r3, [r7, #36]	; 0x24
 8004152:	e004      	b.n	800415e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	4a0b      	ldr	r2, [pc, #44]	; (8004184 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004158:	fb02 f303 	mul.w	r3, r2, r3
 800415c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	623b      	str	r3, [r7, #32]
      break;
 8004162:	e002      	b.n	800416a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004164:	4b06      	ldr	r3, [pc, #24]	; (8004180 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004166:	623b      	str	r3, [r7, #32]
      break;
 8004168:	bf00      	nop
    }
  }
  return sysclockfreq;
 800416a:	6a3b      	ldr	r3, [r7, #32]
}
 800416c:	4618      	mov	r0, r3
 800416e:	3728      	adds	r7, #40	; 0x28
 8004170:	46bd      	mov	sp, r7
 8004172:	bc90      	pop	{r4, r7}
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	0800b37c 	.word	0x0800b37c
 800417c:	40021000 	.word	0x40021000
 8004180:	007a1200 	.word	0x007a1200
 8004184:	003d0900 	.word	0x003d0900

08004188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800418c:	4b02      	ldr	r3, [pc, #8]	; (8004198 <HAL_RCC_GetHCLKFreq+0x10>)
 800418e:	681b      	ldr	r3, [r3, #0]
}
 8004190:	4618      	mov	r0, r3
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr
 8004198:	20000000 	.word	0x20000000

0800419c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80041a0:	f7ff fff2 	bl	8004188 <HAL_RCC_GetHCLKFreq>
 80041a4:	4602      	mov	r2, r0
 80041a6:	4b05      	ldr	r3, [pc, #20]	; (80041bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	0a1b      	lsrs	r3, r3, #8
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	4903      	ldr	r1, [pc, #12]	; (80041c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041b2:	5ccb      	ldrb	r3, [r1, r3]
 80041b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40021000 	.word	0x40021000
 80041c0:	0800b9bc 	.word	0x0800b9bc

080041c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80041c8:	f7ff ffde 	bl	8004188 <HAL_RCC_GetHCLKFreq>
 80041cc:	4602      	mov	r2, r0
 80041ce:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	0adb      	lsrs	r3, r3, #11
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	4903      	ldr	r1, [pc, #12]	; (80041e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041da:	5ccb      	ldrb	r3, [r1, r3]
 80041dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	40021000 	.word	0x40021000
 80041e8:	0800b9bc 	.word	0x0800b9bc

080041ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80041f4:	4b0a      	ldr	r3, [pc, #40]	; (8004220 <RCC_Delay+0x34>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a0a      	ldr	r2, [pc, #40]	; (8004224 <RCC_Delay+0x38>)
 80041fa:	fba2 2303 	umull	r2, r3, r2, r3
 80041fe:	0a5b      	lsrs	r3, r3, #9
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	fb02 f303 	mul.w	r3, r2, r3
 8004206:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004208:	bf00      	nop
  }
  while (Delay --);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	1e5a      	subs	r2, r3, #1
 800420e:	60fa      	str	r2, [r7, #12]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1f9      	bne.n	8004208 <RCC_Delay+0x1c>
}
 8004214:	bf00      	nop
 8004216:	bf00      	nop
 8004218:	3714      	adds	r7, #20
 800421a:	46bd      	mov	sp, r7
 800421c:	bc80      	pop	{r7}
 800421e:	4770      	bx	lr
 8004220:	20000000 	.word	0x20000000
 8004224:	10624dd3 	.word	0x10624dd3

08004228 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004230:	2300      	movs	r3, #0
 8004232:	613b      	str	r3, [r7, #16]
 8004234:	2300      	movs	r3, #0
 8004236:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b00      	cmp	r3, #0
 8004242:	d11b      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d115      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10f      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x54>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0308 	and.w	r3, r3, #8
 8004264:	2b00      	cmp	r3, #0
 8004266:	d109      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0310 	and.w	r3, r3, #16
 8004270:	2b00      	cmp	r3, #0
 8004272:	d103      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004274:	216c      	movs	r1, #108	; 0x6c
 8004276:	4873      	ldr	r0, [pc, #460]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004278:	f7fd f9de 	bl	8001638 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 8095 	beq.w	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    FlagStatus pwrclkchanged = RESET;
 800428a:	2300      	movs	r3, #0
 800428c:	75fb      	strb	r3, [r7, #23]

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d012      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800429e:	d00d      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x94>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042a8:	d008      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x94>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042b2:	d003      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x94>
 80042b4:	2174      	movs	r1, #116	; 0x74
 80042b6:	4863      	ldr	r0, [pc, #396]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80042b8:	f7fd f9be 	bl	8001638 <assert_failed>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042bc:	4b62      	ldr	r3, [pc, #392]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10d      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042c8:	4b5f      	ldr	r3, [pc, #380]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	4a5e      	ldr	r2, [pc, #376]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80042ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042d2:	61d3      	str	r3, [r2, #28]
 80042d4:	4b5c      	ldr	r3, [pc, #368]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042dc:	60bb      	str	r3, [r7, #8]
 80042de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042e0:	2301      	movs	r3, #1
 80042e2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e4:	4b59      	ldr	r3, [pc, #356]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d118      	bne.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0xfa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042f0:	4b56      	ldr	r3, [pc, #344]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a55      	ldr	r2, [pc, #340]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 80042f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042fc:	f7fd fe48 	bl	8001f90 <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004302:	e008      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004304:	f7fd fe44 	bl	8001f90 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b64      	cmp	r3, #100	; 0x64
 8004310:	d901      	bls.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xee>
        {
          return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e092      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x214>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004316:	4b4d      	ldr	r3, [pc, #308]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0f0      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004322:	4b49      	ldr	r3, [pc, #292]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004324:	6a1b      	ldr	r3, [r3, #32]
 8004326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800432a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d02e      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	429a      	cmp	r2, r3
 800433e:	d027      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004340:	4b41      	ldr	r3, [pc, #260]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004348:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800434a:	4b41      	ldr	r3, [pc, #260]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 800434c:	2201      	movs	r2, #1
 800434e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004350:	4b3f      	ldr	r3, [pc, #252]	; (8004450 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004352:	2200      	movs	r2, #0
 8004354:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004356:	4a3c      	ldr	r2, [pc, #240]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d014      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004366:	f7fd fe13 	bl	8001f90 <HAL_GetTick>
 800436a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800436c:	e00a      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x15c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800436e:	f7fd fe0f 	bl	8001f90 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	f241 3288 	movw	r2, #5000	; 0x1388
 800437c:	4293      	cmp	r3, r2
 800437e:	d901      	bls.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x15c>
          {
            return HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	e05b      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x214>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004384:	4b30      	ldr	r3, [pc, #192]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d0ee      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x146>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004390:	4b2d      	ldr	r3, [pc, #180]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	492a      	ldr	r1, [pc, #168]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80043a2:	7dfb      	ldrb	r3, [r7, #23]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d105      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043a8:	4b27      	ldr	r3, [pc, #156]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80043aa:	69db      	ldr	r3, [r3, #28]
 80043ac:	4a26      	ldr	r2, [pc, #152]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80043ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d01f      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d012      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043d0:	d00d      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043da:	d008      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80043e4:	d003      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 80043e6:	21b9      	movs	r1, #185	; 0xb9
 80043e8:	4816      	ldr	r0, [pc, #88]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 80043ea:	f7fd f925 	bl	8001638 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043ee:	4b16      	ldr	r3, [pc, #88]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	4913      	ldr	r1, [pc, #76]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0310 	and.w	r3, r3, #16
 8004408:	2b00      	cmp	r3, #0
 800440a:	d016      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	695b      	ldr	r3, [r3, #20]
 8004410:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004414:	d008      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d004      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800441e:	f240 1115 	movw	r1, #277	; 0x115
 8004422:	4808      	ldr	r0, [pc, #32]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8004424:	f7fd f908 	bl	8001638 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004428:	4b07      	ldr	r3, [pc, #28]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	4904      	ldr	r1, [pc, #16]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x220>)
 8004436:	4313      	orrs	r3, r2
 8004438:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3718      	adds	r7, #24
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	0800b38c 	.word	0x0800b38c
 8004448:	40021000 	.word	0x40021000
 800444c:	40007000 	.word	0x40007000
 8004450:	42420440 	.word	0x42420440

08004454 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004454:	b590      	push	{r4, r7, lr}
 8004456:	b08d      	sub	sp, #52	; 0x34
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800445c:	4b7a      	ldr	r3, [pc, #488]	; (8004648 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>)
 800445e:	f107 040c 	add.w	r4, r7, #12
 8004462:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004464:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004468:	f240 2301 	movw	r3, #513	; 0x201
 800446c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800446e:	2300      	movs	r3, #0
 8004470:	627b      	str	r3, [r7, #36]	; 0x24
 8004472:	2300      	movs	r3, #0
 8004474:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004476:	2300      	movs	r3, #0
 8004478:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800447a:	2300      	movs	r3, #0
 800447c:	61fb      	str	r3, [r7, #28]
 800447e:	2300      	movs	r3, #0
 8004480:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b00      	cmp	r3, #0
 800448a:	d118      	bne.n	80044be <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d113      	bne.n	80044be <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10e      	bne.n	80044be <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f003 0308 	and.w	r3, r3, #8
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d109      	bne.n	80044be <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f003 0310 	and.w	r3, r3, #16
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d104      	bne.n	80044be <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
 80044b4:	f44f 71cb 	mov.w	r1, #406	; 0x196
 80044b8:	4864      	ldr	r0, [pc, #400]	; (800464c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>)
 80044ba:	f7fd f8bd 	bl	8001638 <assert_failed>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	3b01      	subs	r3, #1
 80044c2:	2b0f      	cmp	r3, #15
 80044c4:	f200 80b6 	bhi.w	8004634 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80044c8:	a201      	add	r2, pc, #4	; (adr r2, 80044d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>)
 80044ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ce:	bf00      	nop
 80044d0:	080045b3 	.word	0x080045b3
 80044d4:	08004619 	.word	0x08004619
 80044d8:	08004635 	.word	0x08004635
 80044dc:	080045a3 	.word	0x080045a3
 80044e0:	08004635 	.word	0x08004635
 80044e4:	08004635 	.word	0x08004635
 80044e8:	08004635 	.word	0x08004635
 80044ec:	080045ab 	.word	0x080045ab
 80044f0:	08004635 	.word	0x08004635
 80044f4:	08004635 	.word	0x08004635
 80044f8:	08004635 	.word	0x08004635
 80044fc:	08004635 	.word	0x08004635
 8004500:	08004635 	.word	0x08004635
 8004504:	08004635 	.word	0x08004635
 8004508:	08004635 	.word	0x08004635
 800450c:	08004511 	.word	0x08004511
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8004510:	4b4f      	ldr	r3, [pc, #316]	; (8004650 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004516:	4b4e      	ldr	r3, [pc, #312]	; (8004650 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800451e:	2b00      	cmp	r3, #0
 8004520:	f000 808a 	beq.w	8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	0c9b      	lsrs	r3, r3, #18
 8004528:	f003 030f 	and.w	r3, r3, #15
 800452c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004530:	4413      	add	r3, r2
 8004532:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004536:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d018      	beq.n	8004574 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004542:	4b43      	ldr	r3, [pc, #268]	; (8004650 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	0c5b      	lsrs	r3, r3, #17
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8004550:	4413      	add	r3, r2
 8004552:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004556:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00d      	beq.n	800457e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004562:	4a3c      	ldr	r2, [pc, #240]	; (8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x200>)
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	fbb2 f2f3 	udiv	r2, r2, r3
 800456a:	6a3b      	ldr	r3, [r7, #32]
 800456c:	fb02 f303 	mul.w	r3, r2, r3
 8004570:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004572:	e004      	b.n	800457e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	4a38      	ldr	r2, [pc, #224]	; (8004658 <HAL_RCCEx_GetPeriphCLKFreq+0x204>)
 8004578:	fb02 f303 	mul.w	r3, r2, r3
 800457c:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800457e:	4b34      	ldr	r3, [pc, #208]	; (8004650 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004586:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800458a:	d102      	bne.n	8004592 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 800458c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800458e:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8004590:	e052      	b.n	8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
          frequency = (pllclk * 2) / 3;
 8004592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	4a31      	ldr	r2, [pc, #196]	; (800465c <HAL_RCCEx_GetPeriphCLKFreq+0x208>)
 8004598:	fba2 2303 	umull	r2, r3, r2, r3
 800459c:	085b      	lsrs	r3, r3, #1
 800459e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80045a0:	e04a      	b.n	8004638 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80045a2:	f7ff fd91 	bl	80040c8 <HAL_RCC_GetSysClockFreq>
 80045a6:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80045a8:	e049      	b.n	800463e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80045aa:	f7ff fd8d 	bl	80040c8 <HAL_RCC_GetSysClockFreq>
 80045ae:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80045b0:	e045      	b.n	800463e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80045b2:	4b27      	ldr	r3, [pc, #156]	; (8004650 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045c2:	d108      	bne.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      {
        frequency = LSE_VALUE;
 80045ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80045d4:	e01f      	b.n	8004616 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045e0:	d109      	bne.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80045e2:	4b1b      	ldr	r3, [pc, #108]	; (8004650 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
      {
        frequency = LSI_VALUE;
 80045ee:	f649 4340 	movw	r3, #40000	; 0x9c40
 80045f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80045f4:	e00f      	b.n	8004616 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004600:	d11c      	bne.n	800463c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 8004602:	4b13      	ldr	r3, [pc, #76]	; (8004650 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d016      	beq.n	800463c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
      {
        frequency = HSE_VALUE / 128U;
 800460e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004612:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8004614:	e012      	b.n	800463c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
 8004616:	e011      	b.n	800463c <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004618:	f7ff fdd4 	bl	80041c4 <HAL_RCC_GetPCLK2Freq>
 800461c:	4602      	mov	r2, r0
 800461e:	4b0c      	ldr	r3, [pc, #48]	; (8004650 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	0b9b      	lsrs	r3, r3, #14
 8004624:	f003 0303 	and.w	r3, r3, #3
 8004628:	3301      	adds	r3, #1
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004630:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004632:	e004      	b.n	800463e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
    }
    default:
    {
      break;
 8004634:	bf00      	nop
 8004636:	e002      	b.n	800463e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
      break;
 8004638:	bf00      	nop
 800463a:	e000      	b.n	800463e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
      break;
 800463c:	bf00      	nop
    }
  }
  return (frequency);
 800463e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004640:	4618      	mov	r0, r3
 8004642:	3734      	adds	r7, #52	; 0x34
 8004644:	46bd      	mov	sp, r7
 8004646:	bd90      	pop	{r4, r7, pc}
 8004648:	0800b3c8 	.word	0x0800b3c8
 800464c:	0800b38c 	.word	0x0800b38c
 8004650:	40021000 	.word	0x40021000
 8004654:	007a1200 	.word	0x007a1200
 8004658:	003d0900 	.word	0x003d0900
 800465c:	aaaaaaab 	.word	0xaaaaaaab

08004660 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8004668:	2300      	movs	r3, #0
 800466a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e0b4      	b.n	80047e0 <HAL_RTC_Init+0x180>
  }

  /* Check the parameters */
  assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a5b      	ldr	r2, [pc, #364]	; (80047e8 <HAL_RTC_Init+0x188>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d004      	beq.n	800468a <HAL_RTC_Init+0x2a>
 8004680:	f240 111d 	movw	r1, #285	; 0x11d
 8004684:	4859      	ldr	r0, [pc, #356]	; (80047ec <HAL_RTC_Init+0x18c>)
 8004686:	f7fc ffd7 	bl	8001638 <assert_failed>
  assert_param(IS_RTC_CALIB_OUTPUT(hrtc->Init.OutPut));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d012      	beq.n	80046b8 <HAL_RTC_Init+0x58>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	2b80      	cmp	r3, #128	; 0x80
 8004698:	d00e      	beq.n	80046b8 <HAL_RTC_Init+0x58>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046a2:	d009      	beq.n	80046b8 <HAL_RTC_Init+0x58>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046ac:	d004      	beq.n	80046b8 <HAL_RTC_Init+0x58>
 80046ae:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80046b2:	484e      	ldr	r0, [pc, #312]	; (80047ec <HAL_RTC_Init+0x18c>)
 80046b4:	f7fc ffc0 	bl	8001638 <assert_failed>
  assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046c0:	d309      	bcc.n	80046d6 <HAL_RTC_Init+0x76>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ca:	d004      	beq.n	80046d6 <HAL_RTC_Init+0x76>
 80046cc:	f240 111f 	movw	r1, #287	; 0x11f
 80046d0:	4846      	ldr	r0, [pc, #280]	; (80047ec <HAL_RTC_Init+0x18c>)
 80046d2:	f7fc ffb1 	bl	8001638 <assert_failed>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	7c5b      	ldrb	r3, [r3, #17]
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d105      	bne.n	80046ec <HAL_RTC_Init+0x8c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7fd f826 	bl	8001738 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 fbca 	bl	8004e8c <HAL_RTC_WaitForSynchro>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d004      	beq.n	8004708 <HAL_RTC_Init+0xa8>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2204      	movs	r2, #4
 8004702:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e06b      	b.n	80047e0 <HAL_RTC_Init+0x180>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 fc83 	bl	8005014 <RTC_EnterInitMode>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d004      	beq.n	800471e <HAL_RTC_Init+0xbe>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2204      	movs	r2, #4
 8004718:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e060      	b.n	80047e0 <HAL_RTC_Init+0x180>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0207 	bic.w	r2, r2, #7
 800472c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d005      	beq.n	8004742 <HAL_RTC_Init+0xe2>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8004736:	4b2e      	ldr	r3, [pc, #184]	; (80047f0 <HAL_RTC_Init+0x190>)
 8004738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473a:	4a2d      	ldr	r2, [pc, #180]	; (80047f0 <HAL_RTC_Init+0x190>)
 800473c:	f023 0301 	bic.w	r3, r3, #1
 8004740:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8004742:	4b2b      	ldr	r3, [pc, #172]	; (80047f0 <HAL_RTC_Init+0x190>)
 8004744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004746:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	4928      	ldr	r1, [pc, #160]	; (80047f0 <HAL_RTC_Init+0x190>)
 8004750:	4313      	orrs	r3, r2
 8004752:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475c:	d003      	beq.n	8004766 <HAL_RTC_Init+0x106>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	e00e      	b.n	8004784 <HAL_RTC_Init+0x124>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8004766:	2001      	movs	r0, #1
 8004768:	f7ff fe74 	bl	8004454 <HAL_RCCEx_GetPeriphCLKFreq>
 800476c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d104      	bne.n	800477e <HAL_RTC_Init+0x11e>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2204      	movs	r2, #4
 8004778:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e030      	b.n	80047e0 <HAL_RTC_Init+0x180>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	3b01      	subs	r3, #1
 8004782:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f023 010f 	bic.w	r1, r3, #15
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	0c1a      	lsrs	r2, r3, #16
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	0c1b      	lsrs	r3, r3, #16
 80047a2:	041b      	lsls	r3, r3, #16
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	b291      	uxth	r1, r2
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	6812      	ldr	r2, [r2, #0]
 80047ac:	430b      	orrs	r3, r1
 80047ae:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 fc57 	bl	8005064 <RTC_ExitInitMode>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d004      	beq.n	80047c6 <HAL_RTC_Init+0x166>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2204      	movs	r2, #4
 80047c0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e00c      	b.n	80047e0 <HAL_RTC_Init+0x180>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80047de:	2300      	movs	r3, #0
  }
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	40002800 	.word	0x40002800
 80047ec:	0800b3d8 	.word	0x0800b3d8
 80047f0:	40006c00 	.word	0x40006c00

080047f4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80047f4:	b590      	push	{r4, r7, lr}
 80047f6:	b087      	sub	sp, #28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8004800:	2300      	movs	r3, #0
 8004802:	617b      	str	r3, [r7, #20]
 8004804:	2300      	movs	r3, #0
 8004806:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d002      	beq.n	8004814 <HAL_RTC_SetTime+0x20>
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e0cd      	b.n	80049b4 <HAL_RTC_SetTime+0x1c0>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d007      	beq.n	800482e <HAL_RTC_SetTime+0x3a>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d004      	beq.n	800482e <HAL_RTC_SetTime+0x3a>
 8004824:	f240 21ca 	movw	r1, #714	; 0x2ca
 8004828:	4864      	ldr	r0, [pc, #400]	; (80049bc <HAL_RTC_SetTime+0x1c8>)
 800482a:	f7fc ff05 	bl	8001638 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	7c1b      	ldrb	r3, [r3, #16]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d101      	bne.n	800483a <HAL_RTC_SetTime+0x46>
 8004836:	2302      	movs	r3, #2
 8004838:	e0bc      	b.n	80049b4 <HAL_RTC_SetTime+0x1c0>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2201      	movs	r2, #1
 800483e:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2202      	movs	r2, #2
 8004844:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d12e      	bne.n	80048aa <HAL_RTC_SetTime+0xb6>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	2b17      	cmp	r3, #23
 8004852:	d904      	bls.n	800485e <HAL_RTC_SetTime+0x6a>
 8004854:	f240 21d3 	movw	r1, #723	; 0x2d3
 8004858:	4858      	ldr	r0, [pc, #352]	; (80049bc <HAL_RTC_SetTime+0x1c8>)
 800485a:	f7fc feed 	bl	8001638 <assert_failed>
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	785b      	ldrb	r3, [r3, #1]
 8004862:	2b3b      	cmp	r3, #59	; 0x3b
 8004864:	d904      	bls.n	8004870 <HAL_RTC_SetTime+0x7c>
 8004866:	f44f 7135 	mov.w	r1, #724	; 0x2d4
 800486a:	4854      	ldr	r0, [pc, #336]	; (80049bc <HAL_RTC_SetTime+0x1c8>)
 800486c:	f7fc fee4 	bl	8001638 <assert_failed>
    assert_param(IS_RTC_SECONDS(sTime->Seconds));
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	789b      	ldrb	r3, [r3, #2]
 8004874:	2b3b      	cmp	r3, #59	; 0x3b
 8004876:	d904      	bls.n	8004882 <HAL_RTC_SetTime+0x8e>
 8004878:	f240 21d5 	movw	r1, #725	; 0x2d5
 800487c:	484f      	ldr	r0, [pc, #316]	; (80049bc <HAL_RTC_SetTime+0x1c8>)
 800487e:	f7fc fedb 	bl	8001638 <assert_failed>

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	461a      	mov	r2, r3
 8004888:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800488c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	785b      	ldrb	r3, [r3, #1]
 8004894:	4619      	mov	r1, r3
 8004896:	460b      	mov	r3, r1
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	1a5b      	subs	r3, r3, r1
 800489c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800489e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80048a4:	4413      	add	r3, r2
 80048a6:	617b      	str	r3, [r7, #20]
 80048a8:	e045      	b.n	8004936 <HAL_RTC_SetTime+0x142>
  }
  else
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 fc1d 	bl	80050ee <RTC_Bcd2ToByte>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b17      	cmp	r3, #23
 80048b8:	d904      	bls.n	80048c4 <HAL_RTC_SetTime+0xd0>
 80048ba:	f240 21dd 	movw	r1, #733	; 0x2dd
 80048be:	483f      	ldr	r0, [pc, #252]	; (80049bc <HAL_RTC_SetTime+0x1c8>)
 80048c0:	f7fc feba 	bl	8001638 <assert_failed>
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	785b      	ldrb	r3, [r3, #1]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f000 fc10 	bl	80050ee <RTC_Bcd2ToByte>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b3b      	cmp	r3, #59	; 0x3b
 80048d2:	d904      	bls.n	80048de <HAL_RTC_SetTime+0xea>
 80048d4:	f240 21de 	movw	r1, #734	; 0x2de
 80048d8:	4838      	ldr	r0, [pc, #224]	; (80049bc <HAL_RTC_SetTime+0x1c8>)
 80048da:	f7fc fead 	bl	8001638 <assert_failed>
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	789b      	ldrb	r3, [r3, #2]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fc03 	bl	80050ee <RTC_Bcd2ToByte>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b3b      	cmp	r3, #59	; 0x3b
 80048ec:	d904      	bls.n	80048f8 <HAL_RTC_SetTime+0x104>
 80048ee:	f240 21df 	movw	r1, #735	; 0x2df
 80048f2:	4832      	ldr	r0, [pc, #200]	; (80049bc <HAL_RTC_SetTime+0x1c8>)
 80048f4:	f7fc fea0 	bl	8001638 <assert_failed>

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	4618      	mov	r0, r3
 80048fe:	f000 fbf6 	bl	80050ee <RTC_Bcd2ToByte>
 8004902:	4603      	mov	r3, r0
 8004904:	461a      	mov	r2, r3
 8004906:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800490a:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	785b      	ldrb	r3, [r3, #1]
 8004912:	4618      	mov	r0, r3
 8004914:	f000 fbeb 	bl	80050ee <RTC_Bcd2ToByte>
 8004918:	4603      	mov	r3, r0
 800491a:	461a      	mov	r2, r3
 800491c:	4613      	mov	r3, r2
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	1a9b      	subs	r3, r3, r2
 8004922:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004924:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	789b      	ldrb	r3, [r3, #2]
 800492a:	4618      	mov	r0, r3
 800492c:	f000 fbdf 	bl	80050ee <RTC_Bcd2ToByte>
 8004930:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8004932:	4423      	add	r3, r4
 8004934:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004936:	6979      	ldr	r1, [r7, #20]
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f000 fb04 	bl	8004f46 <RTC_WriteTimeCounter>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d007      	beq.n	8004954 <HAL_RTC_SetTime+0x160>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2204      	movs	r2, #4
 8004948:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e02f      	b.n	80049b4 <HAL_RTC_SetTime+0x1c0>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 0205 	bic.w	r2, r2, #5
 8004962:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 fb15 	bl	8004f94 <RTC_ReadAlarmCounter>
 800496a:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004972:	d018      	beq.n	80049a6 <HAL_RTC_SetTime+0x1b2>
    {
      if (counter_alarm < counter_time)
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	429a      	cmp	r2, r3
 800497a:	d214      	bcs.n	80049a6 <HAL_RTC_SetTime+0x1b2>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004982:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004986:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004988:	6939      	ldr	r1, [r7, #16]
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f000 fb1b 	bl	8004fc6 <RTC_WriteAlarmCounter>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d007      	beq.n	80049a6 <HAL_RTC_SetTime+0x1b2>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2204      	movs	r2, #4
 800499a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e006      	b.n	80049b4 <HAL_RTC_SetTime+0x1c0>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2201      	movs	r2, #1
 80049aa:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80049b2:	2300      	movs	r3, #0
  }
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	371c      	adds	r7, #28
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd90      	pop	{r4, r7, pc}
 80049bc:	0800b3d8 	.word	0x0800b3d8

080049c0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b088      	sub	sp, #32
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	61bb      	str	r3, [r7, #24]
 80049d0:	2300      	movs	r3, #0
 80049d2:	61fb      	str	r3, [r7, #28]
 80049d4:	2300      	movs	r3, #0
 80049d6:	617b      	str	r3, [r7, #20]
 80049d8:	2300      	movs	r3, #0
 80049da:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d002      	beq.n	80049e8 <HAL_RTC_GetTime+0x28>
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d101      	bne.n	80049ec <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e0c0      	b.n	8004b6e <HAL_RTC_GetTime+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d007      	beq.n	8004a02 <HAL_RTC_GetTime+0x42>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d004      	beq.n	8004a02 <HAL_RTC_GetTime+0x42>
 80049f8:	f240 312d 	movw	r1, #813	; 0x32d
 80049fc:	485e      	ldr	r0, [pc, #376]	; (8004b78 <HAL_RTC_GetTime+0x1b8>)
 80049fe:	f7fc fe1b 	bl	8001638 <assert_failed>

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f003 0304 	and.w	r3, r3, #4
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d001      	beq.n	8004a14 <HAL_RTC_GetTime+0x54>
  {
    return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e0ac      	b.n	8004b6e <HAL_RTC_GetTime+0x1ae>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 fa66 	bl	8004ee6 <RTC_ReadTimeCounter>
 8004a1a:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	4a57      	ldr	r2, [pc, #348]	; (8004b7c <HAL_RTC_GetTime+0x1bc>)
 8004a20:	fba2 2303 	umull	r2, r3, r2, r3
 8004a24:	0adb      	lsrs	r3, r3, #11
 8004a26:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	4b54      	ldr	r3, [pc, #336]	; (8004b7c <HAL_RTC_GetTime+0x1bc>)
 8004a2c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a30:	0adb      	lsrs	r3, r3, #11
 8004a32:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004a36:	fb01 f303 	mul.w	r3, r1, r3
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	4a50      	ldr	r2, [pc, #320]	; (8004b80 <HAL_RTC_GetTime+0x1c0>)
 8004a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a42:	095b      	lsrs	r3, r3, #5
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	4a4b      	ldr	r2, [pc, #300]	; (8004b7c <HAL_RTC_GetTime+0x1bc>)
 8004a4e:	fba2 1203 	umull	r1, r2, r2, r3
 8004a52:	0ad2      	lsrs	r2, r2, #11
 8004a54:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8004a58:	fb01 f202 	mul.w	r2, r1, r2
 8004a5c:	1a9a      	subs	r2, r3, r2
 8004a5e:	4b48      	ldr	r3, [pc, #288]	; (8004b80 <HAL_RTC_GetTime+0x1c0>)
 8004a60:	fba3 1302 	umull	r1, r3, r3, r2
 8004a64:	0959      	lsrs	r1, r3, #5
 8004a66:	460b      	mov	r3, r1
 8004a68:	011b      	lsls	r3, r3, #4
 8004a6a:	1a5b      	subs	r3, r3, r1
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	1ad1      	subs	r1, r2, r3
 8004a70:	b2ca      	uxtb	r2, r1
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	2b17      	cmp	r3, #23
 8004a7a:	d955      	bls.n	8004b28 <HAL_RTC_GetTime+0x168>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	4a41      	ldr	r2, [pc, #260]	; (8004b84 <HAL_RTC_GetTime+0x1c4>)
 8004a80:	fba2 2303 	umull	r2, r3, r2, r3
 8004a84:	091b      	lsrs	r3, r3, #4
 8004a86:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8004a88:	6939      	ldr	r1, [r7, #16]
 8004a8a:	4b3e      	ldr	r3, [pc, #248]	; (8004b84 <HAL_RTC_GetTime+0x1c4>)
 8004a8c:	fba3 2301 	umull	r2, r3, r3, r1
 8004a90:	091a      	lsrs	r2, r3, #4
 8004a92:	4613      	mov	r3, r2
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	4413      	add	r3, r2
 8004a98:	00db      	lsls	r3, r3, #3
 8004a9a:	1aca      	subs	r2, r1, r3
 8004a9c:	b2d2      	uxtb	r2, r2
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 fa76 	bl	8004f94 <RTC_ReadAlarmCounter>
 8004aa8:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab0:	d008      	beq.n	8004ac4 <HAL_RTC_GetTime+0x104>
 8004ab2:	69fa      	ldr	r2, [r7, #28]
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d904      	bls.n	8004ac4 <HAL_RTC_GetTime+0x104>
    {
      counter_alarm -= counter_time;
 8004aba:	69fa      	ldr	r2, [r7, #28]
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	61fb      	str	r3, [r7, #28]
 8004ac2:	e002      	b.n	8004aca <HAL_RTC_GetTime+0x10a>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8004ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ac8:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	4a2e      	ldr	r2, [pc, #184]	; (8004b88 <HAL_RTC_GetTime+0x1c8>)
 8004ace:	fb02 f303 	mul.w	r3, r2, r3
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004ad8:	69b9      	ldr	r1, [r7, #24]
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 fa33 	bl	8004f46 <RTC_WriteTimeCounter>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <HAL_RTC_GetTime+0x12a>
    {
      return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e041      	b.n	8004b6e <HAL_RTC_GetTime+0x1ae>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af0:	d00c      	beq.n	8004b0c <HAL_RTC_GetTime+0x14c>
    {
      counter_alarm += counter_time;
 8004af2:	69fa      	ldr	r2, [r7, #28]
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	4413      	add	r3, r2
 8004af8:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004afa:	69f9      	ldr	r1, [r7, #28]
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 fa62 	bl	8004fc6 <RTC_WriteAlarmCounter>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00a      	beq.n	8004b1e <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e030      	b.n	8004b6e <HAL_RTC_GetTime+0x1ae>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004b0c:	69f9      	ldr	r1, [r7, #28]
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 fa59 	bl	8004fc6 <RTC_WriteAlarmCounter>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <HAL_RTC_GetTime+0x15e>
      {
        return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e027      	b.n	8004b6e <HAL_RTC_GetTime+0x1ae>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8004b1e:	6979      	ldr	r1, [r7, #20]
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 fb01 	bl	8005128 <RTC_DateUpdate>
 8004b26:	e003      	b.n	8004b30 <HAL_RTC_GetTime+0x170>
  }
  else
  {
    sTime->Hours = hours;
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d01a      	beq.n	8004b6c <HAL_RTC_GetTime+0x1ac>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f000 faba 	bl	80050b4 <RTC_ByteToBcd2>
 8004b40:	4603      	mov	r3, r0
 8004b42:	461a      	mov	r2, r3
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	785b      	ldrb	r3, [r3, #1]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f000 fab1 	bl	80050b4 <RTC_ByteToBcd2>
 8004b52:	4603      	mov	r3, r0
 8004b54:	461a      	mov	r2, r3
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	789b      	ldrb	r3, [r3, #2]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 faa8 	bl	80050b4 <RTC_ByteToBcd2>
 8004b64:	4603      	mov	r3, r0
 8004b66:	461a      	mov	r2, r3
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3720      	adds	r7, #32
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	0800b3d8 	.word	0x0800b3d8
 8004b7c:	91a2b3c5 	.word	0x91a2b3c5
 8004b80:	88888889 	.word	0x88888889
 8004b84:	aaaaaaab 	.word	0xaaaaaaab
 8004b88:	00015180 	.word	0x00015180

08004b8c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b088      	sub	sp, #32
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	61fb      	str	r3, [r7, #28]
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	61bb      	str	r3, [r7, #24]
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d002      	beq.n	8004bb0 <HAL_RTC_SetDate+0x24>
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e0fc      	b.n	8004dae <HAL_RTC_SetDate+0x222>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d007      	beq.n	8004bca <HAL_RTC_SetDate+0x3e>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d004      	beq.n	8004bca <HAL_RTC_SetDate+0x3e>
 8004bc0:	f44f 7167 	mov.w	r1, #924	; 0x39c
 8004bc4:	487c      	ldr	r0, [pc, #496]	; (8004db8 <HAL_RTC_SetDate+0x22c>)
 8004bc6:	f7fc fd37 	bl	8001638 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	7c1b      	ldrb	r3, [r3, #16]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d101      	bne.n	8004bd6 <HAL_RTC_SetDate+0x4a>
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	e0eb      	b.n	8004dae <HAL_RTC_SetDate+0x222>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2202      	movs	r2, #2
 8004be0:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d12f      	bne.n	8004c48 <HAL_RTC_SetDate+0xbc>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	78db      	ldrb	r3, [r3, #3]
 8004bec:	2b63      	cmp	r3, #99	; 0x63
 8004bee:	d904      	bls.n	8004bfa <HAL_RTC_SetDate+0x6e>
 8004bf0:	f240 31a5 	movw	r1, #933	; 0x3a5
 8004bf4:	4870      	ldr	r0, [pc, #448]	; (8004db8 <HAL_RTC_SetDate+0x22c>)
 8004bf6:	f7fc fd1f 	bl	8001638 <assert_failed>
    assert_param(IS_RTC_MONTH(sDate->Month));
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	785b      	ldrb	r3, [r3, #1]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <HAL_RTC_SetDate+0x7e>
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	785b      	ldrb	r3, [r3, #1]
 8004c06:	2b0c      	cmp	r3, #12
 8004c08:	d904      	bls.n	8004c14 <HAL_RTC_SetDate+0x88>
 8004c0a:	f240 31a6 	movw	r1, #934	; 0x3a6
 8004c0e:	486a      	ldr	r0, [pc, #424]	; (8004db8 <HAL_RTC_SetDate+0x22c>)
 8004c10:	f7fc fd12 	bl	8001638 <assert_failed>
    assert_param(IS_RTC_DATE(sDate->Date));
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	789b      	ldrb	r3, [r3, #2]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d003      	beq.n	8004c24 <HAL_RTC_SetDate+0x98>
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	789b      	ldrb	r3, [r3, #2]
 8004c20:	2b1f      	cmp	r3, #31
 8004c22:	d904      	bls.n	8004c2e <HAL_RTC_SetDate+0xa2>
 8004c24:	f240 31a7 	movw	r1, #935	; 0x3a7
 8004c28:	4863      	ldr	r0, [pc, #396]	; (8004db8 <HAL_RTC_SetDate+0x22c>)
 8004c2a:	f7fc fd05 	bl	8001638 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	78da      	ldrb	r2, [r3, #3]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	785a      	ldrb	r2, [r3, #1]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	789a      	ldrb	r2, [r3, #2]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	739a      	strb	r2, [r3, #14]
 8004c46:	e051      	b.n	8004cec <HAL_RTC_SetDate+0x160>
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	78db      	ldrb	r3, [r3, #3]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 fa4e 	bl	80050ee <RTC_Bcd2ToByte>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b63      	cmp	r3, #99	; 0x63
 8004c56:	d904      	bls.n	8004c62 <HAL_RTC_SetDate+0xd6>
 8004c58:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 8004c5c:	4856      	ldr	r0, [pc, #344]	; (8004db8 <HAL_RTC_SetDate+0x22c>)
 8004c5e:	f7fc fceb 	bl	8001638 <assert_failed>
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	785b      	ldrb	r3, [r3, #1]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 fa41 	bl	80050ee <RTC_Bcd2ToByte>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d007      	beq.n	8004c82 <HAL_RTC_SetDate+0xf6>
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	785b      	ldrb	r3, [r3, #1]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 fa39 	bl	80050ee <RTC_Bcd2ToByte>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b0c      	cmp	r3, #12
 8004c80:	d904      	bls.n	8004c8c <HAL_RTC_SetDate+0x100>
 8004c82:	f240 31b1 	movw	r1, #945	; 0x3b1
 8004c86:	484c      	ldr	r0, [pc, #304]	; (8004db8 <HAL_RTC_SetDate+0x22c>)
 8004c88:	f7fc fcd6 	bl	8001638 <assert_failed>
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	789b      	ldrb	r3, [r3, #2]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f000 fa2c 	bl	80050ee <RTC_Bcd2ToByte>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d007      	beq.n	8004cac <HAL_RTC_SetDate+0x120>
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	789b      	ldrb	r3, [r3, #2]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f000 fa24 	bl	80050ee <RTC_Bcd2ToByte>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b1f      	cmp	r3, #31
 8004caa:	d904      	bls.n	8004cb6 <HAL_RTC_SetDate+0x12a>
 8004cac:	f240 31b2 	movw	r1, #946	; 0x3b2
 8004cb0:	4841      	ldr	r0, [pc, #260]	; (8004db8 <HAL_RTC_SetDate+0x22c>)
 8004cb2:	f7fc fcc1 	bl	8001638 <assert_failed>

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	78db      	ldrb	r3, [r3, #3]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 fa17 	bl	80050ee <RTC_Bcd2ToByte>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	785b      	ldrb	r3, [r3, #1]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 fa0e 	bl	80050ee <RTC_Bcd2ToByte>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	789b      	ldrb	r3, [r3, #2]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 fa05 	bl	80050ee <RTC_Bcd2ToByte>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	7bdb      	ldrb	r3, [r3, #15]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	7b59      	ldrb	r1, [r3, #13]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	7b9b      	ldrb	r3, [r3, #14]
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	f000 faf0 	bl	80052e0 <RTC_WeekDayNum>
 8004d00:	4603      	mov	r3, r0
 8004d02:	461a      	mov	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	7b1a      	ldrb	r2, [r3, #12]
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 f8e8 	bl	8004ee6 <RTC_ReadTimeCounter>
 8004d16:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	4a28      	ldr	r2, [pc, #160]	; (8004dbc <HAL_RTC_SetDate+0x230>)
 8004d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d20:	0adb      	lsrs	r3, r3, #11
 8004d22:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	2b18      	cmp	r3, #24
 8004d28:	d93a      	bls.n	8004da0 <HAL_RTC_SetDate+0x214>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	4a24      	ldr	r2, [pc, #144]	; (8004dc0 <HAL_RTC_SetDate+0x234>)
 8004d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d32:	091b      	lsrs	r3, r3, #4
 8004d34:	4a23      	ldr	r2, [pc, #140]	; (8004dc4 <HAL_RTC_SetDate+0x238>)
 8004d36:	fb02 f303 	mul.w	r3, r2, r3
 8004d3a:	69fa      	ldr	r2, [r7, #28]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004d40:	69f9      	ldr	r1, [r7, #28]
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f000 f8ff 	bl	8004f46 <RTC_WriteTimeCounter>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d007      	beq.n	8004d5e <HAL_RTC_SetDate+0x1d2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2204      	movs	r2, #4
 8004d52:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e027      	b.n	8004dae <HAL_RTC_SetDate+0x222>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 f918 	bl	8004f94 <RTC_ReadAlarmCounter>
 8004d64:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6c:	d018      	beq.n	8004da0 <HAL_RTC_SetDate+0x214>
    {
      if (counter_alarm < counter_time)
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d214      	bcs.n	8004da0 <HAL_RTC_SetDate+0x214>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8004d7c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004d80:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004d82:	69b9      	ldr	r1, [r7, #24]
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f000 f91e 	bl	8004fc6 <RTC_WriteAlarmCounter>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d007      	beq.n	8004da0 <HAL_RTC_SetDate+0x214>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2204      	movs	r2, #4
 8004d94:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e006      	b.n	8004dae <HAL_RTC_SetDate+0x222>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2201      	movs	r2, #1
 8004da4:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3720      	adds	r7, #32
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	0800b3d8 	.word	0x0800b3d8
 8004dbc:	91a2b3c5 	.word	0x91a2b3c5
 8004dc0:	aaaaaaab 	.word	0xaaaaaaab
 8004dc4:	00015180 	.word	0x00015180

08004dc8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8004dd4:	f107 0314 	add.w	r3, r7, #20
 8004dd8:	2100      	movs	r1, #0
 8004dda:	460a      	mov	r2, r1
 8004ddc:	801a      	strh	r2, [r3, #0]
 8004dde:	460a      	mov	r2, r1
 8004de0:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d002      	beq.n	8004dee <HAL_RTC_GetDate+0x26>
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e045      	b.n	8004e7e <HAL_RTC_GetDate+0xb6>
  }

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d007      	beq.n	8004e08 <HAL_RTC_GetDate+0x40>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d004      	beq.n	8004e08 <HAL_RTC_GetDate+0x40>
 8004dfe:	f240 410e 	movw	r1, #1038	; 0x40e
 8004e02:	4821      	ldr	r0, [pc, #132]	; (8004e88 <HAL_RTC_GetDate+0xc0>)
 8004e04:	f7fc fc18 	bl	8001638 <assert_failed>

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8004e08:	f107 0314 	add.w	r3, r7, #20
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	4619      	mov	r1, r3
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f7ff fdd5 	bl	80049c0 <HAL_RTC_GetTime>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <HAL_RTC_GetDate+0x58>
  {
    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e02e      	b.n	8004e7e <HAL_RTC_GetDate+0xb6>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	7b1a      	ldrb	r2, [r3, #12]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	7bda      	ldrb	r2, [r3, #15]
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	7b5a      	ldrb	r2, [r3, #13]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	7b9a      	ldrb	r2, [r3, #14]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d01a      	beq.n	8004e7c <HAL_RTC_GetDate+0xb4>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	78db      	ldrb	r3, [r3, #3]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 f932 	bl	80050b4 <RTC_ByteToBcd2>
 8004e50:	4603      	mov	r3, r0
 8004e52:	461a      	mov	r2, r3
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	785b      	ldrb	r3, [r3, #1]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 f929 	bl	80050b4 <RTC_ByteToBcd2>
 8004e62:	4603      	mov	r3, r0
 8004e64:	461a      	mov	r2, r3
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	789b      	ldrb	r3, [r3, #2]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 f920 	bl	80050b4 <RTC_ByteToBcd2>
 8004e74:	4603      	mov	r3, r0
 8004e76:	461a      	mov	r2, r3
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3718      	adds	r7, #24
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	0800b3d8 	.word	0x0800b3d8

08004e8c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b084      	sub	sp, #16
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e01d      	b.n	8004ede <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 0208 	bic.w	r2, r2, #8
 8004eb0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8004eb2:	f7fd f86d 	bl	8001f90 <HAL_GetTick>
 8004eb6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004eb8:	e009      	b.n	8004ece <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004eba:	f7fd f869 	bl	8001f90 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ec8:	d901      	bls.n	8004ece <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e007      	b.n	8004ede <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f003 0308 	and.w	r3, r3, #8
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d0ee      	beq.n	8004eba <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b087      	sub	sp, #28
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	827b      	strh	r3, [r7, #18]
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	823b      	strh	r3, [r7, #16]
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	69db      	ldr	r3, [r3, #28]
 8004f0c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004f16:	8a7a      	ldrh	r2, [r7, #18]
 8004f18:	8a3b      	ldrh	r3, [r7, #16]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d008      	beq.n	8004f30 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8004f1e:	8a3b      	ldrh	r3, [r7, #16]
 8004f20:	041a      	lsls	r2, r3, #16
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	69db      	ldr	r3, [r3, #28]
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	e004      	b.n	8004f3a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8004f30:	8a7b      	ldrh	r3, [r7, #18]
 8004f32:	041a      	lsls	r2, r3, #16
 8004f34:	89fb      	ldrh	r3, [r7, #14]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8004f3a:	697b      	ldr	r3, [r7, #20]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	371c      	adds	r7, #28
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bc80      	pop	{r7}
 8004f44:	4770      	bx	lr

08004f46 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b084      	sub	sp, #16
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
 8004f4e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f50:	2300      	movs	r3, #0
 8004f52:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 f85d 	bl	8005014 <RTC_EnterInitMode>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d002      	beq.n	8004f66 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	73fb      	strb	r3, [r7, #15]
 8004f64:	e011      	b.n	8004f8a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	0c12      	lsrs	r2, r2, #16
 8004f6e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	b292      	uxth	r2, r2
 8004f78:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f872 	bl	8005064 <RTC_ExitInitMode>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	81fb      	strh	r3, [r7, #14]
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004fb4:	89fb      	ldrh	r3, [r7, #14]
 8004fb6:	041a      	lsls	r2, r3, #16
 8004fb8:	89bb      	ldrh	r3, [r7, #12]
 8004fba:	4313      	orrs	r3, r2
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bc80      	pop	{r7}
 8004fc4:	4770      	bx	lr

08004fc6 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b084      	sub	sp, #16
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
 8004fce:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 f81d 	bl	8005014 <RTC_EnterInitMode>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d002      	beq.n	8004fe6 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	73fb      	strb	r3, [r7, #15]
 8004fe4:	e011      	b.n	800500a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	683a      	ldr	r2, [r7, #0]
 8004fec:	0c12      	lsrs	r2, r2, #16
 8004fee:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	b292      	uxth	r2, r2
 8004ff8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f832 	bl	8005064 <RTC_ExitInitMode>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800500a:	7bfb      	ldrb	r3, [r7, #15]
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800501c:	2300      	movs	r3, #0
 800501e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8005020:	f7fc ffb6 	bl	8001f90 <HAL_GetTick>
 8005024:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005026:	e009      	b.n	800503c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005028:	f7fc ffb2 	bl	8001f90 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005036:	d901      	bls.n	800503c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e00f      	b.n	800505c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f003 0320 	and.w	r3, r3, #32
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0ee      	beq.n	8005028 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f042 0210 	orr.w	r2, r2, #16
 8005058:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800506c:	2300      	movs	r3, #0
 800506e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685a      	ldr	r2, [r3, #4]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 0210 	bic.w	r2, r2, #16
 800507e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8005080:	f7fc ff86 	bl	8001f90 <HAL_GetTick>
 8005084:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005086:	e009      	b.n	800509c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005088:	f7fc ff82 	bl	8001f90 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005096:	d901      	bls.n	800509c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e007      	b.n	80050ac <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f003 0320 	and.w	r3, r3, #32
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0ee      	beq.n	8005088 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	4603      	mov	r3, r0
 80050bc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80050be:	2300      	movs	r3, #0
 80050c0:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80050c2:	e005      	b.n	80050d0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	3301      	adds	r3, #1
 80050c8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80050ca:	79fb      	ldrb	r3, [r7, #7]
 80050cc:	3b0a      	subs	r3, #10
 80050ce:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80050d0:	79fb      	ldrb	r3, [r7, #7]
 80050d2:	2b09      	cmp	r3, #9
 80050d4:	d8f6      	bhi.n	80050c4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	011b      	lsls	r3, r3, #4
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	79fb      	ldrb	r3, [r7, #7]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	b2db      	uxtb	r3, r3
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3714      	adds	r7, #20
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bc80      	pop	{r7}
 80050ec:	4770      	bx	lr

080050ee <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b085      	sub	sp, #20
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	4603      	mov	r3, r0
 80050f6:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80050f8:	2300      	movs	r3, #0
 80050fa:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80050fc:	79fb      	ldrb	r3, [r7, #7]
 80050fe:	091b      	lsrs	r3, r3, #4
 8005100:	b2db      	uxtb	r3, r3
 8005102:	461a      	mov	r2, r3
 8005104:	4613      	mov	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	005b      	lsls	r3, r3, #1
 800510c:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800510e:	79fb      	ldrb	r3, [r7, #7]
 8005110:	f003 030f 	and.w	r3, r3, #15
 8005114:	b2da      	uxtb	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	b2db      	uxtb	r3, r3
 800511a:	4413      	add	r3, r2
 800511c:	b2db      	uxtb	r3, r3
}
 800511e:	4618      	mov	r0, r3
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	bc80      	pop	{r7}
 8005126:	4770      	bx	lr

08005128 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8005132:	2300      	movs	r3, #0
 8005134:	617b      	str	r3, [r7, #20]
 8005136:	2300      	movs	r3, #0
 8005138:	613b      	str	r3, [r7, #16]
 800513a:	2300      	movs	r3, #0
 800513c:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800513e:	2300      	movs	r3, #0
 8005140:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	7bdb      	ldrb	r3, [r3, #15]
 8005146:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	7b5b      	ldrb	r3, [r3, #13]
 800514c:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	7b9b      	ldrb	r3, [r3, #14]
 8005152:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8005154:	2300      	movs	r3, #0
 8005156:	60bb      	str	r3, [r7, #8]
 8005158:	e06f      	b.n	800523a <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d011      	beq.n	8005184 <RTC_DateUpdate+0x5c>
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	2b03      	cmp	r3, #3
 8005164:	d00e      	beq.n	8005184 <RTC_DateUpdate+0x5c>
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	2b05      	cmp	r3, #5
 800516a:	d00b      	beq.n	8005184 <RTC_DateUpdate+0x5c>
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	2b07      	cmp	r3, #7
 8005170:	d008      	beq.n	8005184 <RTC_DateUpdate+0x5c>
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	2b08      	cmp	r3, #8
 8005176:	d005      	beq.n	8005184 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	2b0a      	cmp	r3, #10
 800517c:	d002      	beq.n	8005184 <RTC_DateUpdate+0x5c>
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	2b0c      	cmp	r3, #12
 8005182:	d117      	bne.n	80051b4 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2b1e      	cmp	r3, #30
 8005188:	d803      	bhi.n	8005192 <RTC_DateUpdate+0x6a>
      {
        day++;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	3301      	adds	r3, #1
 800518e:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005190:	e050      	b.n	8005234 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	2b0c      	cmp	r3, #12
 8005196:	d005      	beq.n	80051a4 <RTC_DateUpdate+0x7c>
        {
          month++;
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	3301      	adds	r3, #1
 800519c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800519e:	2301      	movs	r3, #1
 80051a0:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80051a2:	e047      	b.n	8005234 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80051a4:	2301      	movs	r3, #1
 80051a6:	613b      	str	r3, [r7, #16]
          day = 1U;
 80051a8:	2301      	movs	r3, #1
 80051aa:	60fb      	str	r3, [r7, #12]
          year++;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	3301      	adds	r3, #1
 80051b0:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80051b2:	e03f      	b.n	8005234 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	2b04      	cmp	r3, #4
 80051b8:	d008      	beq.n	80051cc <RTC_DateUpdate+0xa4>
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	2b06      	cmp	r3, #6
 80051be:	d005      	beq.n	80051cc <RTC_DateUpdate+0xa4>
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	2b09      	cmp	r3, #9
 80051c4:	d002      	beq.n	80051cc <RTC_DateUpdate+0xa4>
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	2b0b      	cmp	r3, #11
 80051ca:	d10c      	bne.n	80051e6 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2b1d      	cmp	r3, #29
 80051d0:	d803      	bhi.n	80051da <RTC_DateUpdate+0xb2>
      {
        day++;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	3301      	adds	r3, #1
 80051d6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80051d8:	e02c      	b.n	8005234 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	3301      	adds	r3, #1
 80051de:	613b      	str	r3, [r7, #16]
        day = 1U;
 80051e0:	2301      	movs	r3, #1
 80051e2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80051e4:	e026      	b.n	8005234 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d123      	bne.n	8005234 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2b1b      	cmp	r3, #27
 80051f0:	d803      	bhi.n	80051fa <RTC_DateUpdate+0xd2>
      {
        day++;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	3301      	adds	r3, #1
 80051f6:	60fb      	str	r3, [r7, #12]
 80051f8:	e01c      	b.n	8005234 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2b1c      	cmp	r3, #28
 80051fe:	d111      	bne.n	8005224 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	b29b      	uxth	r3, r3
 8005204:	4618      	mov	r0, r3
 8005206:	f000 f839 	bl	800527c <RTC_IsLeapYear>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d003      	beq.n	8005218 <RTC_DateUpdate+0xf0>
        {
          day++;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	3301      	adds	r3, #1
 8005214:	60fb      	str	r3, [r7, #12]
 8005216:	e00d      	b.n	8005234 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	3301      	adds	r3, #1
 800521c:	613b      	str	r3, [r7, #16]
          day = 1U;
 800521e:	2301      	movs	r3, #1
 8005220:	60fb      	str	r3, [r7, #12]
 8005222:	e007      	b.n	8005234 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2b1d      	cmp	r3, #29
 8005228:	d104      	bne.n	8005234 <RTC_DateUpdate+0x10c>
      {
        month++;
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	3301      	adds	r3, #1
 800522e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005230:	2301      	movs	r3, #1
 8005232:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	3301      	adds	r3, #1
 8005238:	60bb      	str	r3, [r7, #8]
 800523a:	68ba      	ldr	r2, [r7, #8]
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	429a      	cmp	r2, r3
 8005240:	d38b      	bcc.n	800515a <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	b2da      	uxtb	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	b2da      	uxtb	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	b2da      	uxtb	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	b2db      	uxtb	r3, r3
 800525e:	68fa      	ldr	r2, [r7, #12]
 8005260:	b2d2      	uxtb	r2, r2
 8005262:	4619      	mov	r1, r3
 8005264:	6978      	ldr	r0, [r7, #20]
 8005266:	f000 f83b 	bl	80052e0 <RTC_WeekDayNum>
 800526a:	4603      	mov	r3, r0
 800526c:	461a      	mov	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	731a      	strb	r2, [r3, #12]
}
 8005272:	bf00      	nop
 8005274:	3718      	adds	r7, #24
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
	...

0800527c <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	4603      	mov	r3, r0
 8005284:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8005286:	88fb      	ldrh	r3, [r7, #6]
 8005288:	f003 0303 	and.w	r3, r3, #3
 800528c:	b29b      	uxth	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d001      	beq.n	8005296 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8005292:	2300      	movs	r3, #0
 8005294:	e01d      	b.n	80052d2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8005296:	88fb      	ldrh	r3, [r7, #6]
 8005298:	4a10      	ldr	r2, [pc, #64]	; (80052dc <RTC_IsLeapYear+0x60>)
 800529a:	fba2 1203 	umull	r1, r2, r2, r3
 800529e:	0952      	lsrs	r2, r2, #5
 80052a0:	2164      	movs	r1, #100	; 0x64
 80052a2:	fb01 f202 	mul.w	r2, r1, r2
 80052a6:	1a9b      	subs	r3, r3, r2
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e00f      	b.n	80052d2 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80052b2:	88fb      	ldrh	r3, [r7, #6]
 80052b4:	4a09      	ldr	r2, [pc, #36]	; (80052dc <RTC_IsLeapYear+0x60>)
 80052b6:	fba2 1203 	umull	r1, r2, r2, r3
 80052ba:	09d2      	lsrs	r2, r2, #7
 80052bc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80052c0:	fb01 f202 	mul.w	r2, r1, r2
 80052c4:	1a9b      	subs	r3, r3, r2
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e000      	b.n	80052d2 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80052d0:	2300      	movs	r3, #0
  }
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bc80      	pop	{r7}
 80052da:	4770      	bx	lr
 80052dc:	51eb851f 	.word	0x51eb851f

080052e0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	460b      	mov	r3, r1
 80052ea:	70fb      	strb	r3, [r7, #3]
 80052ec:	4613      	mov	r3, r2
 80052ee:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80052f0:	2300      	movs	r3, #0
 80052f2:	60bb      	str	r3, [r7, #8]
 80052f4:	2300      	movs	r3, #0
 80052f6:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80052fe:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005300:	78fb      	ldrb	r3, [r7, #3]
 8005302:	2b02      	cmp	r3, #2
 8005304:	d82d      	bhi.n	8005362 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8005306:	78fa      	ldrb	r2, [r7, #3]
 8005308:	4613      	mov	r3, r2
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	4413      	add	r3, r2
 800530e:	00db      	lsls	r3, r3, #3
 8005310:	1a9b      	subs	r3, r3, r2
 8005312:	4a2c      	ldr	r2, [pc, #176]	; (80053c4 <RTC_WeekDayNum+0xe4>)
 8005314:	fba2 2303 	umull	r2, r3, r2, r3
 8005318:	085a      	lsrs	r2, r3, #1
 800531a:	78bb      	ldrb	r3, [r7, #2]
 800531c:	441a      	add	r2, r3
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	441a      	add	r2, r3
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	3b01      	subs	r3, #1
 8005326:	089b      	lsrs	r3, r3, #2
 8005328:	441a      	add	r2, r3
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	3b01      	subs	r3, #1
 800532e:	4926      	ldr	r1, [pc, #152]	; (80053c8 <RTC_WeekDayNum+0xe8>)
 8005330:	fba1 1303 	umull	r1, r3, r1, r3
 8005334:	095b      	lsrs	r3, r3, #5
 8005336:	1ad2      	subs	r2, r2, r3
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	3b01      	subs	r3, #1
 800533c:	4922      	ldr	r1, [pc, #136]	; (80053c8 <RTC_WeekDayNum+0xe8>)
 800533e:	fba1 1303 	umull	r1, r3, r1, r3
 8005342:	09db      	lsrs	r3, r3, #7
 8005344:	4413      	add	r3, r2
 8005346:	1d1a      	adds	r2, r3, #4
 8005348:	4b20      	ldr	r3, [pc, #128]	; (80053cc <RTC_WeekDayNum+0xec>)
 800534a:	fba3 1302 	umull	r1, r3, r3, r2
 800534e:	1ad1      	subs	r1, r2, r3
 8005350:	0849      	lsrs	r1, r1, #1
 8005352:	440b      	add	r3, r1
 8005354:	0899      	lsrs	r1, r3, #2
 8005356:	460b      	mov	r3, r1
 8005358:	00db      	lsls	r3, r3, #3
 800535a:	1a5b      	subs	r3, r3, r1
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	60fb      	str	r3, [r7, #12]
 8005360:	e029      	b.n	80053b6 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8005362:	78fa      	ldrb	r2, [r7, #3]
 8005364:	4613      	mov	r3, r2
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	4413      	add	r3, r2
 800536a:	00db      	lsls	r3, r3, #3
 800536c:	1a9b      	subs	r3, r3, r2
 800536e:	4a15      	ldr	r2, [pc, #84]	; (80053c4 <RTC_WeekDayNum+0xe4>)
 8005370:	fba2 2303 	umull	r2, r3, r2, r3
 8005374:	085a      	lsrs	r2, r3, #1
 8005376:	78bb      	ldrb	r3, [r7, #2]
 8005378:	441a      	add	r2, r3
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	441a      	add	r2, r3
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	089b      	lsrs	r3, r3, #2
 8005382:	441a      	add	r2, r3
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	4910      	ldr	r1, [pc, #64]	; (80053c8 <RTC_WeekDayNum+0xe8>)
 8005388:	fba1 1303 	umull	r1, r3, r1, r3
 800538c:	095b      	lsrs	r3, r3, #5
 800538e:	1ad2      	subs	r2, r2, r3
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	490d      	ldr	r1, [pc, #52]	; (80053c8 <RTC_WeekDayNum+0xe8>)
 8005394:	fba1 1303 	umull	r1, r3, r1, r3
 8005398:	09db      	lsrs	r3, r3, #7
 800539a:	4413      	add	r3, r2
 800539c:	1c9a      	adds	r2, r3, #2
 800539e:	4b0b      	ldr	r3, [pc, #44]	; (80053cc <RTC_WeekDayNum+0xec>)
 80053a0:	fba3 1302 	umull	r1, r3, r3, r2
 80053a4:	1ad1      	subs	r1, r2, r3
 80053a6:	0849      	lsrs	r1, r1, #1
 80053a8:	440b      	add	r3, r1
 80053aa:	0899      	lsrs	r1, r3, #2
 80053ac:	460b      	mov	r3, r1
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	1a5b      	subs	r3, r3, r1
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	b2db      	uxtb	r3, r3
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	bc80      	pop	{r7}
 80053c2:	4770      	bx	lr
 80053c4:	38e38e39 	.word	0x38e38e39
 80053c8:	51eb851f 	.word	0x51eb851f
 80053cc:	24924925 	.word	0x24924925

080053d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e0b2      	b.n	8005548 <HAL_TIM_Base_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a5a      	ldr	r2, [pc, #360]	; (8005550 <HAL_TIM_Base_Init+0x180>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d027      	beq.n	800543c <HAL_TIM_Base_Init+0x6c>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a58      	ldr	r2, [pc, #352]	; (8005554 <HAL_TIM_Base_Init+0x184>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d022      	beq.n	800543c <HAL_TIM_Base_Init+0x6c>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053fe:	d01d      	beq.n	800543c <HAL_TIM_Base_Init+0x6c>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a54      	ldr	r2, [pc, #336]	; (8005558 <HAL_TIM_Base_Init+0x188>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d018      	beq.n	800543c <HAL_TIM_Base_Init+0x6c>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a53      	ldr	r2, [pc, #332]	; (800555c <HAL_TIM_Base_Init+0x18c>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d013      	beq.n	800543c <HAL_TIM_Base_Init+0x6c>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a51      	ldr	r2, [pc, #324]	; (8005560 <HAL_TIM_Base_Init+0x190>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d00e      	beq.n	800543c <HAL_TIM_Base_Init+0x6c>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a50      	ldr	r2, [pc, #320]	; (8005564 <HAL_TIM_Base_Init+0x194>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d009      	beq.n	800543c <HAL_TIM_Base_Init+0x6c>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a4e      	ldr	r2, [pc, #312]	; (8005568 <HAL_TIM_Base_Init+0x198>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d004      	beq.n	800543c <HAL_TIM_Base_Init+0x6c>
 8005432:	f240 1113 	movw	r1, #275	; 0x113
 8005436:	484d      	ldr	r0, [pc, #308]	; (800556c <HAL_TIM_Base_Init+0x19c>)
 8005438:	f7fc f8fe 	bl	8001638 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d014      	beq.n	800546e <HAL_TIM_Base_Init+0x9e>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	2b10      	cmp	r3, #16
 800544a:	d010      	beq.n	800546e <HAL_TIM_Base_Init+0x9e>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	2b20      	cmp	r3, #32
 8005452:	d00c      	beq.n	800546e <HAL_TIM_Base_Init+0x9e>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	2b40      	cmp	r3, #64	; 0x40
 800545a:	d008      	beq.n	800546e <HAL_TIM_Base_Init+0x9e>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	2b60      	cmp	r3, #96	; 0x60
 8005462:	d004      	beq.n	800546e <HAL_TIM_Base_Init+0x9e>
 8005464:	f44f 718a 	mov.w	r1, #276	; 0x114
 8005468:	4840      	ldr	r0, [pc, #256]	; (800556c <HAL_TIM_Base_Init+0x19c>)
 800546a:	f7fc f8e5 	bl	8001638 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00e      	beq.n	8005494 <HAL_TIM_Base_Init+0xc4>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800547e:	d009      	beq.n	8005494 <HAL_TIM_Base_Init+0xc4>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005488:	d004      	beq.n	8005494 <HAL_TIM_Base_Init+0xc4>
 800548a:	f240 1115 	movw	r1, #277	; 0x115
 800548e:	4837      	ldr	r0, [pc, #220]	; (800556c <HAL_TIM_Base_Init+0x19c>)
 8005490:	f7fc f8d2 	bl	8001638 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d008      	beq.n	80054ae <HAL_TIM_Base_Init+0xde>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	2b80      	cmp	r3, #128	; 0x80
 80054a2:	d004      	beq.n	80054ae <HAL_TIM_Base_Init+0xde>
 80054a4:	f44f 718b 	mov.w	r1, #278	; 0x116
 80054a8:	4830      	ldr	r0, [pc, #192]	; (800556c <HAL_TIM_Base_Init+0x19c>)
 80054aa:	f7fc f8c5 	bl	8001638 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d111      	bne.n	80054de <HAL_TIM_Base_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f001 ffc0 	bl	8007448 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d102      	bne.n	80054d6 <HAL_TIM_Base_Init+0x106>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a27      	ldr	r2, [pc, #156]	; (8005570 <HAL_TIM_Base_Init+0x1a0>)
 80054d4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2202      	movs	r2, #2
 80054e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	3304      	adds	r3, #4
 80054ee:	4619      	mov	r1, r3
 80054f0:	4610      	mov	r0, r2
 80054f2:	f001 fbff 	bl	8006cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3708      	adds	r7, #8
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	40012c00 	.word	0x40012c00
 8005554:	40013400 	.word	0x40013400
 8005558:	40000400 	.word	0x40000400
 800555c:	40000800 	.word	0x40000800
 8005560:	40000c00 	.word	0x40000c00
 8005564:	40001000 	.word	0x40001000
 8005568:	40001400 	.word	0x40001400
 800556c:	0800b410 	.word	0x0800b410
 8005570:	08001781 	.word	0x08001781

08005574 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a39      	ldr	r2, [pc, #228]	; (8005668 <HAL_TIM_Base_Start+0xf4>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d027      	beq.n	80055d6 <HAL_TIM_Base_Start+0x62>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a38      	ldr	r2, [pc, #224]	; (800566c <HAL_TIM_Base_Start+0xf8>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d022      	beq.n	80055d6 <HAL_TIM_Base_Start+0x62>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005598:	d01d      	beq.n	80055d6 <HAL_TIM_Base_Start+0x62>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a34      	ldr	r2, [pc, #208]	; (8005670 <HAL_TIM_Base_Start+0xfc>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d018      	beq.n	80055d6 <HAL_TIM_Base_Start+0x62>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a32      	ldr	r2, [pc, #200]	; (8005674 <HAL_TIM_Base_Start+0x100>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d013      	beq.n	80055d6 <HAL_TIM_Base_Start+0x62>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a31      	ldr	r2, [pc, #196]	; (8005678 <HAL_TIM_Base_Start+0x104>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d00e      	beq.n	80055d6 <HAL_TIM_Base_Start+0x62>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a2f      	ldr	r2, [pc, #188]	; (800567c <HAL_TIM_Base_Start+0x108>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d009      	beq.n	80055d6 <HAL_TIM_Base_Start+0x62>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a2e      	ldr	r2, [pc, #184]	; (8005680 <HAL_TIM_Base_Start+0x10c>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d004      	beq.n	80055d6 <HAL_TIM_Base_Start+0x62>
 80055cc:	f44f 71ca 	mov.w	r1, #404	; 0x194
 80055d0:	482c      	ldr	r0, [pc, #176]	; (8005684 <HAL_TIM_Base_Start+0x110>)
 80055d2:	f7fc f831 	bl	8001638 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d001      	beq.n	80055e6 <HAL_TIM_Base_Start+0x72>
  {
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e03c      	b.n	8005660 <HAL_TIM_Base_Start+0xec>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2202      	movs	r2, #2
 80055ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a1d      	ldr	r2, [pc, #116]	; (8005668 <HAL_TIM_Base_Start+0xf4>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d018      	beq.n	800562a <HAL_TIM_Base_Start+0xb6>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a1b      	ldr	r2, [pc, #108]	; (800566c <HAL_TIM_Base_Start+0xf8>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d013      	beq.n	800562a <HAL_TIM_Base_Start+0xb6>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800560a:	d00e      	beq.n	800562a <HAL_TIM_Base_Start+0xb6>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a17      	ldr	r2, [pc, #92]	; (8005670 <HAL_TIM_Base_Start+0xfc>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d009      	beq.n	800562a <HAL_TIM_Base_Start+0xb6>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a16      	ldr	r2, [pc, #88]	; (8005674 <HAL_TIM_Base_Start+0x100>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d004      	beq.n	800562a <HAL_TIM_Base_Start+0xb6>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a14      	ldr	r2, [pc, #80]	; (8005678 <HAL_TIM_Base_Start+0x104>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d111      	bne.n	800564e <HAL_TIM_Base_Start+0xda>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2b06      	cmp	r3, #6
 800563a:	d010      	beq.n	800565e <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0201 	orr.w	r2, r2, #1
 800564a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800564c:	e007      	b.n	800565e <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f042 0201 	orr.w	r2, r2, #1
 800565c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	40012c00 	.word	0x40012c00
 800566c:	40013400 	.word	0x40013400
 8005670:	40000400 	.word	0x40000400
 8005674:	40000800 	.word	0x40000800
 8005678:	40000c00 	.word	0x40000c00
 800567c:	40001000 	.word	0x40001000
 8005680:	40001400 	.word	0x40001400
 8005684:	0800b410 	.word	0x0800b410

08005688 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a3d      	ldr	r2, [pc, #244]	; (800578c <HAL_TIM_Base_Start_IT+0x104>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d027      	beq.n	80056ea <HAL_TIM_Base_Start_IT+0x62>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a3c      	ldr	r2, [pc, #240]	; (8005790 <HAL_TIM_Base_Start_IT+0x108>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d022      	beq.n	80056ea <HAL_TIM_Base_Start_IT+0x62>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ac:	d01d      	beq.n	80056ea <HAL_TIM_Base_Start_IT+0x62>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a38      	ldr	r2, [pc, #224]	; (8005794 <HAL_TIM_Base_Start_IT+0x10c>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d018      	beq.n	80056ea <HAL_TIM_Base_Start_IT+0x62>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a36      	ldr	r2, [pc, #216]	; (8005798 <HAL_TIM_Base_Start_IT+0x110>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d013      	beq.n	80056ea <HAL_TIM_Base_Start_IT+0x62>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a35      	ldr	r2, [pc, #212]	; (800579c <HAL_TIM_Base_Start_IT+0x114>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d00e      	beq.n	80056ea <HAL_TIM_Base_Start_IT+0x62>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a33      	ldr	r2, [pc, #204]	; (80057a0 <HAL_TIM_Base_Start_IT+0x118>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d009      	beq.n	80056ea <HAL_TIM_Base_Start_IT+0x62>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a32      	ldr	r2, [pc, #200]	; (80057a4 <HAL_TIM_Base_Start_IT+0x11c>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d004      	beq.n	80056ea <HAL_TIM_Base_Start_IT+0x62>
 80056e0:	f240 11cf 	movw	r1, #463	; 0x1cf
 80056e4:	4830      	ldr	r0, [pc, #192]	; (80057a8 <HAL_TIM_Base_Start_IT+0x120>)
 80056e6:	f7fb ffa7 	bl	8001638 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d001      	beq.n	80056fa <HAL_TIM_Base_Start_IT+0x72>
  {
    return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e044      	b.n	8005784 <HAL_TIM_Base_Start_IT+0xfc>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2202      	movs	r2, #2
 80056fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68da      	ldr	r2, [r3, #12]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f042 0201 	orr.w	r2, r2, #1
 8005710:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a1d      	ldr	r2, [pc, #116]	; (800578c <HAL_TIM_Base_Start_IT+0x104>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d018      	beq.n	800574e <HAL_TIM_Base_Start_IT+0xc6>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a1b      	ldr	r2, [pc, #108]	; (8005790 <HAL_TIM_Base_Start_IT+0x108>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d013      	beq.n	800574e <HAL_TIM_Base_Start_IT+0xc6>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800572e:	d00e      	beq.n	800574e <HAL_TIM_Base_Start_IT+0xc6>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a17      	ldr	r2, [pc, #92]	; (8005794 <HAL_TIM_Base_Start_IT+0x10c>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d009      	beq.n	800574e <HAL_TIM_Base_Start_IT+0xc6>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a16      	ldr	r2, [pc, #88]	; (8005798 <HAL_TIM_Base_Start_IT+0x110>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d004      	beq.n	800574e <HAL_TIM_Base_Start_IT+0xc6>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a14      	ldr	r2, [pc, #80]	; (800579c <HAL_TIM_Base_Start_IT+0x114>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d111      	bne.n	8005772 <HAL_TIM_Base_Start_IT+0xea>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f003 0307 	and.w	r3, r3, #7
 8005758:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2b06      	cmp	r3, #6
 800575e:	d010      	beq.n	8005782 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f042 0201 	orr.w	r2, r2, #1
 800576e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005770:	e007      	b.n	8005782 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f042 0201 	orr.w	r2, r2, #1
 8005780:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3710      	adds	r7, #16
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	40012c00 	.word	0x40012c00
 8005790:	40013400 	.word	0x40013400
 8005794:	40000400 	.word	0x40000400
 8005798:	40000800 	.word	0x40000800
 800579c:	40000c00 	.word	0x40000c00
 80057a0:	40001000 	.word	0x40001000
 80057a4:	40001400 	.word	0x40001400
 80057a8:	0800b410 	.word	0x0800b410

080057ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d101      	bne.n	80057be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e0b2      	b.n	8005924 <HAL_TIM_PWM_Init+0x178>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a5a      	ldr	r2, [pc, #360]	; (800592c <HAL_TIM_PWM_Init+0x180>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d027      	beq.n	8005818 <HAL_TIM_PWM_Init+0x6c>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a58      	ldr	r2, [pc, #352]	; (8005930 <HAL_TIM_PWM_Init+0x184>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d022      	beq.n	8005818 <HAL_TIM_PWM_Init+0x6c>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057da:	d01d      	beq.n	8005818 <HAL_TIM_PWM_Init+0x6c>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a54      	ldr	r2, [pc, #336]	; (8005934 <HAL_TIM_PWM_Init+0x188>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d018      	beq.n	8005818 <HAL_TIM_PWM_Init+0x6c>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a53      	ldr	r2, [pc, #332]	; (8005938 <HAL_TIM_PWM_Init+0x18c>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d013      	beq.n	8005818 <HAL_TIM_PWM_Init+0x6c>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a51      	ldr	r2, [pc, #324]	; (800593c <HAL_TIM_PWM_Init+0x190>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d00e      	beq.n	8005818 <HAL_TIM_PWM_Init+0x6c>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a50      	ldr	r2, [pc, #320]	; (8005940 <HAL_TIM_PWM_Init+0x194>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d009      	beq.n	8005818 <HAL_TIM_PWM_Init+0x6c>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a4e      	ldr	r2, [pc, #312]	; (8005944 <HAL_TIM_PWM_Init+0x198>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d004      	beq.n	8005818 <HAL_TIM_PWM_Init+0x6c>
 800580e:	f240 5113 	movw	r1, #1299	; 0x513
 8005812:	484d      	ldr	r0, [pc, #308]	; (8005948 <HAL_TIM_PWM_Init+0x19c>)
 8005814:	f7fb ff10 	bl	8001638 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d014      	beq.n	800584a <HAL_TIM_PWM_Init+0x9e>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	2b10      	cmp	r3, #16
 8005826:	d010      	beq.n	800584a <HAL_TIM_PWM_Init+0x9e>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	2b20      	cmp	r3, #32
 800582e:	d00c      	beq.n	800584a <HAL_TIM_PWM_Init+0x9e>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	2b40      	cmp	r3, #64	; 0x40
 8005836:	d008      	beq.n	800584a <HAL_TIM_PWM_Init+0x9e>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	2b60      	cmp	r3, #96	; 0x60
 800583e:	d004      	beq.n	800584a <HAL_TIM_PWM_Init+0x9e>
 8005840:	f240 5114 	movw	r1, #1300	; 0x514
 8005844:	4840      	ldr	r0, [pc, #256]	; (8005948 <HAL_TIM_PWM_Init+0x19c>)
 8005846:	f7fb fef7 	bl	8001638 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00e      	beq.n	8005870 <HAL_TIM_PWM_Init+0xc4>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800585a:	d009      	beq.n	8005870 <HAL_TIM_PWM_Init+0xc4>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005864:	d004      	beq.n	8005870 <HAL_TIM_PWM_Init+0xc4>
 8005866:	f240 5115 	movw	r1, #1301	; 0x515
 800586a:	4837      	ldr	r0, [pc, #220]	; (8005948 <HAL_TIM_PWM_Init+0x19c>)
 800586c:	f7fb fee4 	bl	8001638 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d008      	beq.n	800588a <HAL_TIM_PWM_Init+0xde>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	2b80      	cmp	r3, #128	; 0x80
 800587e:	d004      	beq.n	800588a <HAL_TIM_PWM_Init+0xde>
 8005880:	f240 5116 	movw	r1, #1302	; 0x516
 8005884:	4830      	ldr	r0, [pc, #192]	; (8005948 <HAL_TIM_PWM_Init+0x19c>)
 8005886:	f7fb fed7 	bl	8001638 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d111      	bne.n	80058ba <HAL_TIM_PWM_Init+0x10e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f001 fdd2 	bl	8007448 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d102      	bne.n	80058b2 <HAL_TIM_PWM_Init+0x106>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a27      	ldr	r2, [pc, #156]	; (800594c <HAL_TIM_PWM_Init+0x1a0>)
 80058b0:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2202      	movs	r2, #2
 80058be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681a      	ldr	r2, [r3, #0]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	3304      	adds	r3, #4
 80058ca:	4619      	mov	r1, r3
 80058cc:	4610      	mov	r0, r2
 80058ce:	f001 fa11 	bl	8006cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3708      	adds	r7, #8
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	40012c00 	.word	0x40012c00
 8005930:	40013400 	.word	0x40013400
 8005934:	40000400 	.word	0x40000400
 8005938:	40000800 	.word	0x40000800
 800593c:	40000c00 	.word	0x40000c00
 8005940:	40001000 	.word	0x40001000
 8005944:	40001400 	.word	0x40001400
 8005948:	0800b410 	.word	0x0800b410
 800594c:	08005951 	.word	0x08005951

08005950 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	bc80      	pop	{r7}
 8005960:	4770      	bx	lr
	...

08005964 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a8a      	ldr	r2, [pc, #552]	; (8005b9c <HAL_TIM_PWM_Start+0x238>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d10b      	bne.n	8005990 <HAL_TIM_PWM_Start+0x2c>
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d062      	beq.n	8005a44 <HAL_TIM_PWM_Start+0xe0>
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2b04      	cmp	r3, #4
 8005982:	d05f      	beq.n	8005a44 <HAL_TIM_PWM_Start+0xe0>
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	2b08      	cmp	r3, #8
 8005988:	d05c      	beq.n	8005a44 <HAL_TIM_PWM_Start+0xe0>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b0c      	cmp	r3, #12
 800598e:	d059      	beq.n	8005a44 <HAL_TIM_PWM_Start+0xe0>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a82      	ldr	r2, [pc, #520]	; (8005ba0 <HAL_TIM_PWM_Start+0x23c>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d10b      	bne.n	80059b2 <HAL_TIM_PWM_Start+0x4e>
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d051      	beq.n	8005a44 <HAL_TIM_PWM_Start+0xe0>
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	d04e      	beq.n	8005a44 <HAL_TIM_PWM_Start+0xe0>
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b08      	cmp	r3, #8
 80059aa:	d04b      	beq.n	8005a44 <HAL_TIM_PWM_Start+0xe0>
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	2b0c      	cmp	r3, #12
 80059b0:	d048      	beq.n	8005a44 <HAL_TIM_PWM_Start+0xe0>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059ba:	d10b      	bne.n	80059d4 <HAL_TIM_PWM_Start+0x70>
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d040      	beq.n	8005a44 <HAL_TIM_PWM_Start+0xe0>
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2b04      	cmp	r3, #4
 80059c6:	d03d      	beq.n	8005a44 <HAL_TIM_PWM_Start+0xe0>
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	2b08      	cmp	r3, #8
 80059cc:	d03a      	beq.n	8005a44 <HAL_TIM_PWM_Start+0xe0>
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	2b0c      	cmp	r3, #12
 80059d2:	d037      	beq.n	8005a44 <HAL_TIM_PWM_Start+0xe0>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a72      	ldr	r2, [pc, #456]	; (8005ba4 <HAL_TIM_PWM_Start+0x240>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d10b      	bne.n	80059f6 <HAL_TIM_PWM_Start+0x92>
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d02f      	beq.n	8005a44 <HAL_TIM_PWM_Start+0xe0>
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	2b04      	cmp	r3, #4
 80059e8:	d02c      	beq.n	8005a44 <HAL_TIM_PWM_Start+0xe0>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b08      	cmp	r3, #8
 80059ee:	d029      	beq.n	8005a44 <HAL_TIM_PWM_Start+0xe0>
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	2b0c      	cmp	r3, #12
 80059f4:	d026      	beq.n	8005a44 <HAL_TIM_PWM_Start+0xe0>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a6b      	ldr	r2, [pc, #428]	; (8005ba8 <HAL_TIM_PWM_Start+0x244>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d10b      	bne.n	8005a18 <HAL_TIM_PWM_Start+0xb4>
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d01e      	beq.n	8005a44 <HAL_TIM_PWM_Start+0xe0>
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b04      	cmp	r3, #4
 8005a0a:	d01b      	beq.n	8005a44 <HAL_TIM_PWM_Start+0xe0>
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	2b08      	cmp	r3, #8
 8005a10:	d018      	beq.n	8005a44 <HAL_TIM_PWM_Start+0xe0>
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b0c      	cmp	r3, #12
 8005a16:	d015      	beq.n	8005a44 <HAL_TIM_PWM_Start+0xe0>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a63      	ldr	r2, [pc, #396]	; (8005bac <HAL_TIM_PWM_Start+0x248>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d10b      	bne.n	8005a3a <HAL_TIM_PWM_Start+0xd6>
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00d      	beq.n	8005a44 <HAL_TIM_PWM_Start+0xe0>
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	2b04      	cmp	r3, #4
 8005a2c:	d00a      	beq.n	8005a44 <HAL_TIM_PWM_Start+0xe0>
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	2b08      	cmp	r3, #8
 8005a32:	d007      	beq.n	8005a44 <HAL_TIM_PWM_Start+0xe0>
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	2b0c      	cmp	r3, #12
 8005a38:	d004      	beq.n	8005a44 <HAL_TIM_PWM_Start+0xe0>
 8005a3a:	f240 5199 	movw	r1, #1433	; 0x599
 8005a3e:	485c      	ldr	r0, [pc, #368]	; (8005bb0 <HAL_TIM_PWM_Start+0x24c>)
 8005a40:	f7fb fdfa 	bl	8001638 <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d109      	bne.n	8005a5e <HAL_TIM_PWM_Start+0xfa>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	bf14      	ite	ne
 8005a56:	2301      	movne	r3, #1
 8005a58:	2300      	moveq	r3, #0
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	e022      	b.n	8005aa4 <HAL_TIM_PWM_Start+0x140>
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	2b04      	cmp	r3, #4
 8005a62:	d109      	bne.n	8005a78 <HAL_TIM_PWM_Start+0x114>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	bf14      	ite	ne
 8005a70:	2301      	movne	r3, #1
 8005a72:	2300      	moveq	r3, #0
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	e015      	b.n	8005aa4 <HAL_TIM_PWM_Start+0x140>
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2b08      	cmp	r3, #8
 8005a7c:	d109      	bne.n	8005a92 <HAL_TIM_PWM_Start+0x12e>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	bf14      	ite	ne
 8005a8a:	2301      	movne	r3, #1
 8005a8c:	2300      	moveq	r3, #0
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	e008      	b.n	8005aa4 <HAL_TIM_PWM_Start+0x140>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	bf14      	ite	ne
 8005a9e:	2301      	movne	r3, #1
 8005aa0:	2300      	moveq	r3, #0
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d001      	beq.n	8005aac <HAL_TIM_PWM_Start+0x148>
  {
    return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e072      	b.n	8005b92 <HAL_TIM_PWM_Start+0x22e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d104      	bne.n	8005abc <HAL_TIM_PWM_Start+0x158>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2202      	movs	r2, #2
 8005ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005aba:	e013      	b.n	8005ae4 <HAL_TIM_PWM_Start+0x180>
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	2b04      	cmp	r3, #4
 8005ac0:	d104      	bne.n	8005acc <HAL_TIM_PWM_Start+0x168>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2202      	movs	r2, #2
 8005ac6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005aca:	e00b      	b.n	8005ae4 <HAL_TIM_PWM_Start+0x180>
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	2b08      	cmp	r3, #8
 8005ad0:	d104      	bne.n	8005adc <HAL_TIM_PWM_Start+0x178>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2202      	movs	r2, #2
 8005ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ada:	e003      	b.n	8005ae4 <HAL_TIM_PWM_Start+0x180>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	6839      	ldr	r1, [r7, #0]
 8005aec:	4618      	mov	r0, r3
 8005aee:	f001 fc4b 	bl	8007388 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a29      	ldr	r2, [pc, #164]	; (8005b9c <HAL_TIM_PWM_Start+0x238>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d004      	beq.n	8005b06 <HAL_TIM_PWM_Start+0x1a2>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a27      	ldr	r2, [pc, #156]	; (8005ba0 <HAL_TIM_PWM_Start+0x23c>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d101      	bne.n	8005b0a <HAL_TIM_PWM_Start+0x1a6>
 8005b06:	2301      	movs	r3, #1
 8005b08:	e000      	b.n	8005b0c <HAL_TIM_PWM_Start+0x1a8>
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d007      	beq.n	8005b20 <HAL_TIM_PWM_Start+0x1bc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b1e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a1d      	ldr	r2, [pc, #116]	; (8005b9c <HAL_TIM_PWM_Start+0x238>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d018      	beq.n	8005b5c <HAL_TIM_PWM_Start+0x1f8>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a1c      	ldr	r2, [pc, #112]	; (8005ba0 <HAL_TIM_PWM_Start+0x23c>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d013      	beq.n	8005b5c <HAL_TIM_PWM_Start+0x1f8>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b3c:	d00e      	beq.n	8005b5c <HAL_TIM_PWM_Start+0x1f8>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a18      	ldr	r2, [pc, #96]	; (8005ba4 <HAL_TIM_PWM_Start+0x240>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d009      	beq.n	8005b5c <HAL_TIM_PWM_Start+0x1f8>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a16      	ldr	r2, [pc, #88]	; (8005ba8 <HAL_TIM_PWM_Start+0x244>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d004      	beq.n	8005b5c <HAL_TIM_PWM_Start+0x1f8>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a15      	ldr	r2, [pc, #84]	; (8005bac <HAL_TIM_PWM_Start+0x248>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d111      	bne.n	8005b80 <HAL_TIM_PWM_Start+0x21c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f003 0307 	and.w	r3, r3, #7
 8005b66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2b06      	cmp	r3, #6
 8005b6c:	d010      	beq.n	8005b90 <HAL_TIM_PWM_Start+0x22c>
    {
      __HAL_TIM_ENABLE(htim);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f042 0201 	orr.w	r2, r2, #1
 8005b7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b7e:	e007      	b.n	8005b90 <HAL_TIM_PWM_Start+0x22c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f042 0201 	orr.w	r2, r2, #1
 8005b8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b90:	2300      	movs	r3, #0
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	40012c00 	.word	0x40012c00
 8005ba0:	40013400 	.word	0x40013400
 8005ba4:	40000400 	.word	0x40000400
 8005ba8:	40000800 	.word	0x40000800
 8005bac:	40000c00 	.word	0x40000c00
 8005bb0:	0800b410 	.word	0x0800b410

08005bb4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d101      	bne.n	8005bc8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e192      	b.n	8005eee <HAL_TIM_Encoder_Init+0x33a>
  }

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a7d      	ldr	r2, [pc, #500]	; (8005dc4 <HAL_TIM_Encoder_Init+0x210>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d01d      	beq.n	8005c0e <HAL_TIM_Encoder_Init+0x5a>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a7c      	ldr	r2, [pc, #496]	; (8005dc8 <HAL_TIM_Encoder_Init+0x214>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d018      	beq.n	8005c0e <HAL_TIM_Encoder_Init+0x5a>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be4:	d013      	beq.n	8005c0e <HAL_TIM_Encoder_Init+0x5a>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a78      	ldr	r2, [pc, #480]	; (8005dcc <HAL_TIM_Encoder_Init+0x218>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d00e      	beq.n	8005c0e <HAL_TIM_Encoder_Init+0x5a>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a76      	ldr	r2, [pc, #472]	; (8005dd0 <HAL_TIM_Encoder_Init+0x21c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d009      	beq.n	8005c0e <HAL_TIM_Encoder_Init+0x5a>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a75      	ldr	r2, [pc, #468]	; (8005dd4 <HAL_TIM_Encoder_Init+0x220>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d004      	beq.n	8005c0e <HAL_TIM_Encoder_Init+0x5a>
 8005c04:	f640 318e 	movw	r1, #2958	; 0xb8e
 8005c08:	4873      	ldr	r0, [pc, #460]	; (8005dd8 <HAL_TIM_Encoder_Init+0x224>)
 8005c0a:	f7fb fd15 	bl	8001638 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d014      	beq.n	8005c40 <HAL_TIM_Encoder_Init+0x8c>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	2b10      	cmp	r3, #16
 8005c1c:	d010      	beq.n	8005c40 <HAL_TIM_Encoder_Init+0x8c>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	2b20      	cmp	r3, #32
 8005c24:	d00c      	beq.n	8005c40 <HAL_TIM_Encoder_Init+0x8c>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	2b40      	cmp	r3, #64	; 0x40
 8005c2c:	d008      	beq.n	8005c40 <HAL_TIM_Encoder_Init+0x8c>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	2b60      	cmp	r3, #96	; 0x60
 8005c34:	d004      	beq.n	8005c40 <HAL_TIM_Encoder_Init+0x8c>
 8005c36:	f640 318f 	movw	r1, #2959	; 0xb8f
 8005c3a:	4867      	ldr	r0, [pc, #412]	; (8005dd8 <HAL_TIM_Encoder_Init+0x224>)
 8005c3c:	f7fb fcfc 	bl	8001638 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00e      	beq.n	8005c66 <HAL_TIM_Encoder_Init+0xb2>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c50:	d009      	beq.n	8005c66 <HAL_TIM_Encoder_Init+0xb2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c5a:	d004      	beq.n	8005c66 <HAL_TIM_Encoder_Init+0xb2>
 8005c5c:	f44f 6139 	mov.w	r1, #2960	; 0xb90
 8005c60:	485d      	ldr	r0, [pc, #372]	; (8005dd8 <HAL_TIM_Encoder_Init+0x224>)
 8005c62:	f7fb fce9 	bl	8001638 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d008      	beq.n	8005c80 <HAL_TIM_Encoder_Init+0xcc>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	2b80      	cmp	r3, #128	; 0x80
 8005c74:	d004      	beq.n	8005c80 <HAL_TIM_Encoder_Init+0xcc>
 8005c76:	f640 3191 	movw	r1, #2961	; 0xb91
 8005c7a:	4857      	ldr	r0, [pc, #348]	; (8005dd8 <HAL_TIM_Encoder_Init+0x224>)
 8005c7c:	f7fb fcdc 	bl	8001638 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d00c      	beq.n	8005ca2 <HAL_TIM_Encoder_Init+0xee>
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d008      	beq.n	8005ca2 <HAL_TIM_Encoder_Init+0xee>
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2b03      	cmp	r3, #3
 8005c96:	d004      	beq.n	8005ca2 <HAL_TIM_Encoder_Init+0xee>
 8005c98:	f640 3192 	movw	r1, #2962	; 0xb92
 8005c9c:	484e      	ldr	r0, [pc, #312]	; (8005dd8 <HAL_TIM_Encoder_Init+0x224>)
 8005c9e:	f7fb fccb 	bl	8001638 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d00c      	beq.n	8005cc4 <HAL_TIM_Encoder_Init+0x110>
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d008      	beq.n	8005cc4 <HAL_TIM_Encoder_Init+0x110>
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	2b03      	cmp	r3, #3
 8005cb8:	d004      	beq.n	8005cc4 <HAL_TIM_Encoder_Init+0x110>
 8005cba:	f640 3193 	movw	r1, #2963	; 0xb93
 8005cbe:	4846      	ldr	r0, [pc, #280]	; (8005dd8 <HAL_TIM_Encoder_Init+0x224>)
 8005cc0:	f7fb fcba 	bl	8001638 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d00c      	beq.n	8005ce6 <HAL_TIM_Encoder_Init+0x132>
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d008      	beq.n	8005ce6 <HAL_TIM_Encoder_Init+0x132>
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	699b      	ldr	r3, [r3, #24]
 8005cd8:	2b03      	cmp	r3, #3
 8005cda:	d004      	beq.n	8005ce6 <HAL_TIM_Encoder_Init+0x132>
 8005cdc:	f640 3194 	movw	r1, #2964	; 0xb94
 8005ce0:	483d      	ldr	r0, [pc, #244]	; (8005dd8 <HAL_TIM_Encoder_Init+0x224>)
 8005ce2:	f7fb fca9 	bl	8001638 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC1Polarity));
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d008      	beq.n	8005d00 <HAL_TIM_Encoder_Init+0x14c>
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d004      	beq.n	8005d00 <HAL_TIM_Encoder_Init+0x14c>
 8005cf6:	f640 3195 	movw	r1, #2965	; 0xb95
 8005cfa:	4837      	ldr	r0, [pc, #220]	; (8005dd8 <HAL_TIM_Encoder_Init+0x224>)
 8005cfc:	f7fb fc9c 	bl	8001638 <assert_failed>
  assert_param(IS_TIM_ENCODERINPUT_POLARITY(sConfig->IC2Polarity));
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	695b      	ldr	r3, [r3, #20]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d008      	beq.n	8005d1a <HAL_TIM_Encoder_Init+0x166>
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d004      	beq.n	8005d1a <HAL_TIM_Encoder_Init+0x166>
 8005d10:	f640 3196 	movw	r1, #2966	; 0xb96
 8005d14:	4830      	ldr	r0, [pc, #192]	; (8005dd8 <HAL_TIM_Encoder_Init+0x224>)
 8005d16:	f7fb fc8f 	bl	8001638 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d010      	beq.n	8005d44 <HAL_TIM_Encoder_Init+0x190>
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	2b04      	cmp	r3, #4
 8005d28:	d00c      	beq.n	8005d44 <HAL_TIM_Encoder_Init+0x190>
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	2b08      	cmp	r3, #8
 8005d30:	d008      	beq.n	8005d44 <HAL_TIM_Encoder_Init+0x190>
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	2b0c      	cmp	r3, #12
 8005d38:	d004      	beq.n	8005d44 <HAL_TIM_Encoder_Init+0x190>
 8005d3a:	f640 3197 	movw	r1, #2967	; 0xb97
 8005d3e:	4826      	ldr	r0, [pc, #152]	; (8005dd8 <HAL_TIM_Encoder_Init+0x224>)
 8005d40:	f7fb fc7a 	bl	8001638 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	69db      	ldr	r3, [r3, #28]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d010      	beq.n	8005d6e <HAL_TIM_Encoder_Init+0x1ba>
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	69db      	ldr	r3, [r3, #28]
 8005d50:	2b04      	cmp	r3, #4
 8005d52:	d00c      	beq.n	8005d6e <HAL_TIM_Encoder_Init+0x1ba>
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	69db      	ldr	r3, [r3, #28]
 8005d58:	2b08      	cmp	r3, #8
 8005d5a:	d008      	beq.n	8005d6e <HAL_TIM_Encoder_Init+0x1ba>
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	69db      	ldr	r3, [r3, #28]
 8005d60:	2b0c      	cmp	r3, #12
 8005d62:	d004      	beq.n	8005d6e <HAL_TIM_Encoder_Init+0x1ba>
 8005d64:	f640 3198 	movw	r1, #2968	; 0xb98
 8005d68:	481b      	ldr	r0, [pc, #108]	; (8005dd8 <HAL_TIM_Encoder_Init+0x224>)
 8005d6a:	f7fb fc65 	bl	8001638 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	2b0f      	cmp	r3, #15
 8005d74:	d904      	bls.n	8005d80 <HAL_TIM_Encoder_Init+0x1cc>
 8005d76:	f640 3199 	movw	r1, #2969	; 0xb99
 8005d7a:	4817      	ldr	r0, [pc, #92]	; (8005dd8 <HAL_TIM_Encoder_Init+0x224>)
 8005d7c:	f7fb fc5c 	bl	8001638 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	2b0f      	cmp	r3, #15
 8005d86:	d904      	bls.n	8005d92 <HAL_TIM_Encoder_Init+0x1de>
 8005d88:	f640 319a 	movw	r1, #2970	; 0xb9a
 8005d8c:	4812      	ldr	r0, [pc, #72]	; (8005dd8 <HAL_TIM_Encoder_Init+0x224>)
 8005d8e:	f7fb fc53 	bl	8001638 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d120      	bne.n	8005de0 <HAL_TIM_Encoder_Init+0x22c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f001 fb4e 	bl	8007448 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d102      	bne.n	8005dba <HAL_TIM_Encoder_Init+0x206>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a09      	ldr	r2, [pc, #36]	; (8005ddc <HAL_TIM_Encoder_Init+0x228>)
 8005db8:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	4798      	blx	r3
 8005dc2:	e00d      	b.n	8005de0 <HAL_TIM_Encoder_Init+0x22c>
 8005dc4:	40012c00 	.word	0x40012c00
 8005dc8:	40013400 	.word	0x40013400
 8005dcc:	40000400 	.word	0x40000400
 8005dd0:	40000800 	.word	0x40000800
 8005dd4:	40000c00 	.word	0x40000c00
 8005dd8:	0800b410 	.word	0x0800b410
 8005ddc:	08001845 	.word	0x08001845
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2202      	movs	r2, #2
 8005de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	6812      	ldr	r2, [r2, #0]
 8005df2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005df6:	f023 0307 	bic.w	r3, r3, #7
 8005dfa:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	3304      	adds	r3, #4
 8005e04:	4619      	mov	r1, r3
 8005e06:	4610      	mov	r0, r2
 8005e08:	f000 ff74 	bl	8006cf4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6a1b      	ldr	r3, [r3, #32]
 8005e22:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e34:	f023 0303 	bic.w	r3, r3, #3
 8005e38:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	689a      	ldr	r2, [r3, #8]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	021b      	lsls	r3, r3, #8
 8005e44:	4313      	orrs	r3, r2
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005e52:	f023 030c 	bic.w	r3, r3, #12
 8005e56:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	68da      	ldr	r2, [r3, #12]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	021b      	lsls	r3, r3, #8
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	011a      	lsls	r2, r3, #4
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	6a1b      	ldr	r3, [r3, #32]
 8005e80:	031b      	lsls	r3, r3, #12
 8005e82:	4313      	orrs	r3, r2
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005e90:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	011b      	lsls	r3, r3, #4
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3718      	adds	r7, #24
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop

08005ef8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f08:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f10:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f18:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005f20:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a5d      	ldr	r2, [pc, #372]	; (800609c <HAL_TIM_Encoder_Start_IT+0x1a4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d01d      	beq.n	8005f68 <HAL_TIM_Encoder_Start_IT+0x70>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a5b      	ldr	r2, [pc, #364]	; (80060a0 <HAL_TIM_Encoder_Start_IT+0x1a8>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d018      	beq.n	8005f68 <HAL_TIM_Encoder_Start_IT+0x70>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f3e:	d013      	beq.n	8005f68 <HAL_TIM_Encoder_Start_IT+0x70>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a57      	ldr	r2, [pc, #348]	; (80060a4 <HAL_TIM_Encoder_Start_IT+0x1ac>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d00e      	beq.n	8005f68 <HAL_TIM_Encoder_Start_IT+0x70>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a56      	ldr	r2, [pc, #344]	; (80060a8 <HAL_TIM_Encoder_Start_IT+0x1b0>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d009      	beq.n	8005f68 <HAL_TIM_Encoder_Start_IT+0x70>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a54      	ldr	r2, [pc, #336]	; (80060ac <HAL_TIM_Encoder_Start_IT+0x1b4>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d004      	beq.n	8005f68 <HAL_TIM_Encoder_Start_IT+0x70>
 8005f5e:	f640 41e4 	movw	r1, #3300	; 0xce4
 8005f62:	4853      	ldr	r0, [pc, #332]	; (80060b0 <HAL_TIM_Encoder_Start_IT+0x1b8>)
 8005f64:	f7fb fb68 	bl	8001638 <assert_failed>

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d110      	bne.n	8005f90 <HAL_TIM_Encoder_Start_IT+0x98>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f6e:	7bfb      	ldrb	r3, [r7, #15]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d102      	bne.n	8005f7a <HAL_TIM_Encoder_Start_IT+0x82>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f74:	7b7b      	ldrb	r3, [r7, #13]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d001      	beq.n	8005f7e <HAL_TIM_Encoder_Start_IT+0x86>
    {
      return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e089      	b.n	8006092 <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2202      	movs	r2, #2
 8005f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2202      	movs	r2, #2
 8005f8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f8e:	e031      	b.n	8005ff4 <HAL_TIM_Encoder_Start_IT+0xfc>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	2b04      	cmp	r3, #4
 8005f94:	d110      	bne.n	8005fb8 <HAL_TIM_Encoder_Start_IT+0xc0>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f96:	7bbb      	ldrb	r3, [r7, #14]
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d102      	bne.n	8005fa2 <HAL_TIM_Encoder_Start_IT+0xaa>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f9c:	7b3b      	ldrb	r3, [r7, #12]
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d001      	beq.n	8005fa6 <HAL_TIM_Encoder_Start_IT+0xae>
    {
      return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e075      	b.n	8006092 <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2202      	movs	r2, #2
 8005faa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2202      	movs	r2, #2
 8005fb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fb6:	e01d      	b.n	8005ff4 <HAL_TIM_Encoder_Start_IT+0xfc>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d108      	bne.n	8005fd0 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fbe:	7bbb      	ldrb	r3, [r7, #14]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d105      	bne.n	8005fd0 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005fc4:	7b7b      	ldrb	r3, [r7, #13]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d102      	bne.n	8005fd0 <HAL_TIM_Encoder_Start_IT+0xd8>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005fca:	7b3b      	ldrb	r3, [r7, #12]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d001      	beq.n	8005fd4 <HAL_TIM_Encoder_Start_IT+0xdc>
    {
      return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e05e      	b.n	8006092 <HAL_TIM_Encoder_Start_IT+0x19a>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2202      	movs	r2, #2
 8005fe0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2202      	movs	r2, #2
 8005ff0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <HAL_TIM_Encoder_Start_IT+0x10a>
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	2b04      	cmp	r3, #4
 8005ffe:	d010      	beq.n	8006022 <HAL_TIM_Encoder_Start_IT+0x12a>
 8006000:	e01f      	b.n	8006042 <HAL_TIM_Encoder_Start_IT+0x14a>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2201      	movs	r2, #1
 8006008:	2100      	movs	r1, #0
 800600a:	4618      	mov	r0, r3
 800600c:	f001 f9bc 	bl	8007388 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68da      	ldr	r2, [r3, #12]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f042 0202 	orr.w	r2, r2, #2
 800601e:	60da      	str	r2, [r3, #12]
      break;
 8006020:	e02e      	b.n	8006080 <HAL_TIM_Encoder_Start_IT+0x188>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2201      	movs	r2, #1
 8006028:	2104      	movs	r1, #4
 800602a:	4618      	mov	r0, r3
 800602c:	f001 f9ac 	bl	8007388 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68da      	ldr	r2, [r3, #12]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f042 0204 	orr.w	r2, r2, #4
 800603e:	60da      	str	r2, [r3, #12]
      break;
 8006040:	e01e      	b.n	8006080 <HAL_TIM_Encoder_Start_IT+0x188>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2201      	movs	r2, #1
 8006048:	2100      	movs	r1, #0
 800604a:	4618      	mov	r0, r3
 800604c:	f001 f99c 	bl	8007388 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2201      	movs	r2, #1
 8006056:	2104      	movs	r1, #4
 8006058:	4618      	mov	r0, r3
 800605a:	f001 f995 	bl	8007388 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68da      	ldr	r2, [r3, #12]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f042 0202 	orr.w	r2, r2, #2
 800606c:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68da      	ldr	r2, [r3, #12]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f042 0204 	orr.w	r2, r2, #4
 800607c:	60da      	str	r2, [r3, #12]
      break;
 800607e:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f042 0201 	orr.w	r2, r2, #1
 800608e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	40012c00 	.word	0x40012c00
 80060a0:	40013400 	.word	0x40013400
 80060a4:	40000400 	.word	0x40000400
 80060a8:	40000800 	.word	0x40000800
 80060ac:	40000c00 	.word	0x40000c00
 80060b0:	0800b410 	.word	0x0800b410

080060b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	f003 0302 	and.w	r3, r3, #2
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d128      	bne.n	800611c <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	f003 0302 	and.w	r3, r3, #2
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d121      	bne.n	800611c <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f06f 0202 	mvn.w	r2, #2
 80060e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	f003 0303 	and.w	r3, r3, #3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d005      	beq.n	8006102 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	4798      	blx	r3
 8006100:	e009      	b.n	8006116 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	f003 0304 	and.w	r3, r3, #4
 8006126:	2b04      	cmp	r3, #4
 8006128:	d128      	bne.n	800617c <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	f003 0304 	and.w	r3, r3, #4
 8006134:	2b04      	cmp	r3, #4
 8006136:	d121      	bne.n	800617c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f06f 0204 	mvn.w	r2, #4
 8006140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2202      	movs	r2, #2
 8006146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006152:	2b00      	cmp	r3, #0
 8006154:	d005      	beq.n	8006162 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	4798      	blx	r3
 8006160:	e009      	b.n	8006176 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	f003 0308 	and.w	r3, r3, #8
 8006186:	2b08      	cmp	r3, #8
 8006188:	d128      	bne.n	80061dc <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	f003 0308 	and.w	r3, r3, #8
 8006194:	2b08      	cmp	r3, #8
 8006196:	d121      	bne.n	80061dc <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f06f 0208 	mvn.w	r2, #8
 80061a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2204      	movs	r2, #4
 80061a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	69db      	ldr	r3, [r3, #28]
 80061ae:	f003 0303 	and.w	r3, r3, #3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d005      	beq.n	80061c2 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	4798      	blx	r3
 80061c0:	e009      	b.n	80061d6 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	f003 0310 	and.w	r3, r3, #16
 80061e6:	2b10      	cmp	r3, #16
 80061e8:	d128      	bne.n	800623c <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	f003 0310 	and.w	r3, r3, #16
 80061f4:	2b10      	cmp	r3, #16
 80061f6:	d121      	bne.n	800623c <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f06f 0210 	mvn.w	r2, #16
 8006200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2208      	movs	r2, #8
 8006206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006212:	2b00      	cmp	r3, #0
 8006214:	d005      	beq.n	8006222 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	4798      	blx	r3
 8006220:	e009      	b.n	8006236 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	2b01      	cmp	r3, #1
 8006248:	d110      	bne.n	800626c <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	f003 0301 	and.w	r3, r3, #1
 8006254:	2b01      	cmp	r3, #1
 8006256:	d109      	bne.n	800626c <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f06f 0201 	mvn.w	r2, #1
 8006260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006276:	2b80      	cmp	r3, #128	; 0x80
 8006278:	d110      	bne.n	800629c <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006284:	2b80      	cmp	r3, #128	; 0x80
 8006286:	d109      	bne.n	800629c <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062a6:	2b40      	cmp	r3, #64	; 0x40
 80062a8:	d110      	bne.n	80062cc <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b4:	2b40      	cmp	r3, #64	; 0x40
 80062b6:	d109      	bne.n	80062cc <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	f003 0320 	and.w	r3, r3, #32
 80062d6:	2b20      	cmp	r3, #32
 80062d8:	d110      	bne.n	80062fc <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	f003 0320 	and.w	r3, r3, #32
 80062e4:	2b20      	cmp	r3, #32
 80062e6:	d109      	bne.n	80062fc <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f06f 0220 	mvn.w	r2, #32
 80062f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062fc:	bf00      	nop
 80062fe:	3708      	adds	r7, #8
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d010      	beq.n	8006338 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b04      	cmp	r3, #4
 800631a:	d00d      	beq.n	8006338 <HAL_TIM_PWM_ConfigChannel+0x34>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2b08      	cmp	r3, #8
 8006320:	d00a      	beq.n	8006338 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b0c      	cmp	r3, #12
 8006326:	d007      	beq.n	8006338 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2b3c      	cmp	r3, #60	; 0x3c
 800632c:	d004      	beq.n	8006338 <HAL_TIM_PWM_ConfigChannel+0x34>
 800632e:	f241 0127 	movw	r1, #4135	; 0x1027
 8006332:	4890      	ldr	r0, [pc, #576]	; (8006574 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006334:	f7fb f980 	bl	8001638 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b60      	cmp	r3, #96	; 0x60
 800633e:	d008      	beq.n	8006352 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2b70      	cmp	r3, #112	; 0x70
 8006346:	d004      	beq.n	8006352 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8006348:	f241 0128 	movw	r1, #4136	; 0x1028
 800634c:	4889      	ldr	r0, [pc, #548]	; (8006574 <HAL_TIM_PWM_ConfigChannel+0x270>)
 800634e:	f7fb f973 	bl	8001638 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d008      	beq.n	800636c <HAL_TIM_PWM_ConfigChannel+0x68>
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	2b02      	cmp	r3, #2
 8006360:	d004      	beq.n	800636c <HAL_TIM_PWM_ConfigChannel+0x68>
 8006362:	f241 0129 	movw	r1, #4137	; 0x1029
 8006366:	4883      	ldr	r0, [pc, #524]	; (8006574 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006368:	f7fb f966 	bl	8001638 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d008      	beq.n	8006386 <HAL_TIM_PWM_ConfigChannel+0x82>
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	2b04      	cmp	r3, #4
 800637a:	d004      	beq.n	8006386 <HAL_TIM_PWM_ConfigChannel+0x82>
 800637c:	f241 012a 	movw	r1, #4138	; 0x102a
 8006380:	487c      	ldr	r0, [pc, #496]	; (8006574 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006382:	f7fb f959 	bl	8001638 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800638c:	2b01      	cmp	r3, #1
 800638e:	d101      	bne.n	8006394 <HAL_TIM_PWM_ConfigChannel+0x90>
 8006390:	2302      	movs	r3, #2
 8006392:	e145      	b.n	8006620 <HAL_TIM_PWM_ConfigChannel+0x31c>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2b0c      	cmp	r3, #12
 80063a0:	f200 8138 	bhi.w	8006614 <HAL_TIM_PWM_ConfigChannel+0x310>
 80063a4:	a201      	add	r2, pc, #4	; (adr r2, 80063ac <HAL_TIM_PWM_ConfigChannel+0xa8>)
 80063a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063aa:	bf00      	nop
 80063ac:	080063e1 	.word	0x080063e1
 80063b0:	08006615 	.word	0x08006615
 80063b4:	08006615 	.word	0x08006615
 80063b8:	08006615 	.word	0x08006615
 80063bc:	08006467 	.word	0x08006467
 80063c0:	08006615 	.word	0x08006615
 80063c4:	08006615 	.word	0x08006615
 80063c8:	08006615 	.word	0x08006615
 80063cc:	080064ef 	.word	0x080064ef
 80063d0:	08006615 	.word	0x08006615
 80063d4:	08006615 	.word	0x08006615
 80063d8:	08006615 	.word	0x08006615
 80063dc:	0800658d 	.word	0x0800658d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a64      	ldr	r2, [pc, #400]	; (8006578 <HAL_TIM_PWM_ConfigChannel+0x274>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d01d      	beq.n	8006426 <HAL_TIM_PWM_ConfigChannel+0x122>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a63      	ldr	r2, [pc, #396]	; (800657c <HAL_TIM_PWM_ConfigChannel+0x278>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d018      	beq.n	8006426 <HAL_TIM_PWM_ConfigChannel+0x122>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063fc:	d013      	beq.n	8006426 <HAL_TIM_PWM_ConfigChannel+0x122>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a5f      	ldr	r2, [pc, #380]	; (8006580 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d00e      	beq.n	8006426 <HAL_TIM_PWM_ConfigChannel+0x122>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a5d      	ldr	r2, [pc, #372]	; (8006584 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d009      	beq.n	8006426 <HAL_TIM_PWM_ConfigChannel+0x122>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a5c      	ldr	r2, [pc, #368]	; (8006588 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d004      	beq.n	8006426 <HAL_TIM_PWM_ConfigChannel+0x122>
 800641c:	f241 0134 	movw	r1, #4148	; 0x1034
 8006420:	4854      	ldr	r0, [pc, #336]	; (8006574 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006422:	f7fb f909 	bl	8001638 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68b9      	ldr	r1, [r7, #8]
 800642c:	4618      	mov	r0, r3
 800642e:	f000 fcdb 	bl	8006de8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	699a      	ldr	r2, [r3, #24]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f042 0208 	orr.w	r2, r2, #8
 8006440:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	699a      	ldr	r2, [r3, #24]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f022 0204 	bic.w	r2, r2, #4
 8006450:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	6999      	ldr	r1, [r3, #24]
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	691a      	ldr	r2, [r3, #16]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	430a      	orrs	r2, r1
 8006462:	619a      	str	r2, [r3, #24]
      break;
 8006464:	e0d7      	b.n	8006616 <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a43      	ldr	r2, [pc, #268]	; (8006578 <HAL_TIM_PWM_ConfigChannel+0x274>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d01d      	beq.n	80064ac <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a41      	ldr	r2, [pc, #260]	; (800657c <HAL_TIM_PWM_ConfigChannel+0x278>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d018      	beq.n	80064ac <HAL_TIM_PWM_ConfigChannel+0x1a8>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006482:	d013      	beq.n	80064ac <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a3d      	ldr	r2, [pc, #244]	; (8006580 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d00e      	beq.n	80064ac <HAL_TIM_PWM_ConfigChannel+0x1a8>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a3c      	ldr	r2, [pc, #240]	; (8006584 <HAL_TIM_PWM_ConfigChannel+0x280>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d009      	beq.n	80064ac <HAL_TIM_PWM_ConfigChannel+0x1a8>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a3a      	ldr	r2, [pc, #232]	; (8006588 <HAL_TIM_PWM_ConfigChannel+0x284>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d004      	beq.n	80064ac <HAL_TIM_PWM_ConfigChannel+0x1a8>
 80064a2:	f241 0145 	movw	r1, #4165	; 0x1045
 80064a6:	4833      	ldr	r0, [pc, #204]	; (8006574 <HAL_TIM_PWM_ConfigChannel+0x270>)
 80064a8:	f7fb f8c6 	bl	8001638 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68b9      	ldr	r1, [r7, #8]
 80064b2:	4618      	mov	r0, r3
 80064b4:	f000 fd32 	bl	8006f1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	699a      	ldr	r2, [r3, #24]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	699a      	ldr	r2, [r3, #24]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6999      	ldr	r1, [r3, #24]
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	021a      	lsls	r2, r3, #8
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	430a      	orrs	r2, r1
 80064ea:	619a      	str	r2, [r3, #24]
      break;
 80064ec:	e093      	b.n	8006616 <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a21      	ldr	r2, [pc, #132]	; (8006578 <HAL_TIM_PWM_ConfigChannel+0x274>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d01d      	beq.n	8006534 <HAL_TIM_PWM_ConfigChannel+0x230>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a1f      	ldr	r2, [pc, #124]	; (800657c <HAL_TIM_PWM_ConfigChannel+0x278>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d018      	beq.n	8006534 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800650a:	d013      	beq.n	8006534 <HAL_TIM_PWM_ConfigChannel+0x230>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a1b      	ldr	r2, [pc, #108]	; (8006580 <HAL_TIM_PWM_ConfigChannel+0x27c>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d00e      	beq.n	8006534 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a1a      	ldr	r2, [pc, #104]	; (8006584 <HAL_TIM_PWM_ConfigChannel+0x280>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d009      	beq.n	8006534 <HAL_TIM_PWM_ConfigChannel+0x230>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a18      	ldr	r2, [pc, #96]	; (8006588 <HAL_TIM_PWM_ConfigChannel+0x284>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d004      	beq.n	8006534 <HAL_TIM_PWM_ConfigChannel+0x230>
 800652a:	f241 0156 	movw	r1, #4182	; 0x1056
 800652e:	4811      	ldr	r0, [pc, #68]	; (8006574 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8006530:	f7fb f882 	bl	8001638 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68b9      	ldr	r1, [r7, #8]
 800653a:	4618      	mov	r0, r3
 800653c:	f000 fd8c 	bl	8007058 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	69da      	ldr	r2, [r3, #28]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f042 0208 	orr.w	r2, r2, #8
 800654e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	69da      	ldr	r2, [r3, #28]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f022 0204 	bic.w	r2, r2, #4
 800655e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	69d9      	ldr	r1, [r3, #28]
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	691a      	ldr	r2, [r3, #16]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	430a      	orrs	r2, r1
 8006570:	61da      	str	r2, [r3, #28]
      break;
 8006572:	e050      	b.n	8006616 <HAL_TIM_PWM_ConfigChannel+0x312>
 8006574:	0800b410 	.word	0x0800b410
 8006578:	40012c00 	.word	0x40012c00
 800657c:	40013400 	.word	0x40013400
 8006580:	40000400 	.word	0x40000400
 8006584:	40000800 	.word	0x40000800
 8006588:	40000c00 	.word	0x40000c00
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a25      	ldr	r2, [pc, #148]	; (8006628 <HAL_TIM_PWM_ConfigChannel+0x324>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d01d      	beq.n	80065d2 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a24      	ldr	r2, [pc, #144]	; (800662c <HAL_TIM_PWM_ConfigChannel+0x328>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d018      	beq.n	80065d2 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065a8:	d013      	beq.n	80065d2 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a20      	ldr	r2, [pc, #128]	; (8006630 <HAL_TIM_PWM_ConfigChannel+0x32c>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d00e      	beq.n	80065d2 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a1e      	ldr	r2, [pc, #120]	; (8006634 <HAL_TIM_PWM_ConfigChannel+0x330>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d009      	beq.n	80065d2 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a1d      	ldr	r2, [pc, #116]	; (8006638 <HAL_TIM_PWM_ConfigChannel+0x334>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d004      	beq.n	80065d2 <HAL_TIM_PWM_ConfigChannel+0x2ce>
 80065c8:	f241 0167 	movw	r1, #4199	; 0x1067
 80065cc:	481b      	ldr	r0, [pc, #108]	; (800663c <HAL_TIM_PWM_ConfigChannel+0x338>)
 80065ce:	f7fb f833 	bl	8001638 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68b9      	ldr	r1, [r7, #8]
 80065d8:	4618      	mov	r0, r3
 80065da:	f000 fddb 	bl	8007194 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	69da      	ldr	r2, [r3, #28]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	69da      	ldr	r2, [r3, #28]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	69d9      	ldr	r1, [r3, #28]
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	021a      	lsls	r2, r3, #8
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	430a      	orrs	r2, r1
 8006610:	61da      	str	r2, [r3, #28]
      break;
 8006612:	e000      	b.n	8006616 <HAL_TIM_PWM_ConfigChannel+0x312>
    }

    default:
      break;
 8006614:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	40012c00 	.word	0x40012c00
 800662c:	40013400 	.word	0x40013400
 8006630:	40000400 	.word	0x40000400
 8006634:	40000800 	.word	0x40000800
 8006638:	40000c00 	.word	0x40000c00
 800663c:	0800b410 	.word	0x0800b410

08006640 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006650:	2b01      	cmp	r3, #1
 8006652:	d101      	bne.n	8006658 <HAL_TIM_ConfigClockSource+0x18>
 8006654:	2302      	movs	r3, #2
 8006656:	e2f5      	b.n	8006c44 <HAL_TIM_ConfigClockSource+0x604>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2202      	movs	r2, #2
 8006664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006670:	d029      	beq.n	80066c6 <HAL_TIM_ConfigClockSource+0x86>
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800667a:	d024      	beq.n	80066c6 <HAL_TIM_ConfigClockSource+0x86>
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d020      	beq.n	80066c6 <HAL_TIM_ConfigClockSource+0x86>
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2b10      	cmp	r3, #16
 800668a:	d01c      	beq.n	80066c6 <HAL_TIM_ConfigClockSource+0x86>
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b20      	cmp	r3, #32
 8006692:	d018      	beq.n	80066c6 <HAL_TIM_ConfigClockSource+0x86>
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2b30      	cmp	r3, #48	; 0x30
 800669a:	d014      	beq.n	80066c6 <HAL_TIM_ConfigClockSource+0x86>
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2b40      	cmp	r3, #64	; 0x40
 80066a2:	d010      	beq.n	80066c6 <HAL_TIM_ConfigClockSource+0x86>
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2b50      	cmp	r3, #80	; 0x50
 80066aa:	d00c      	beq.n	80066c6 <HAL_TIM_ConfigClockSource+0x86>
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2b60      	cmp	r3, #96	; 0x60
 80066b2:	d008      	beq.n	80066c6 <HAL_TIM_ConfigClockSource+0x86>
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2b70      	cmp	r3, #112	; 0x70
 80066ba:	d004      	beq.n	80066c6 <HAL_TIM_ConfigClockSource+0x86>
 80066bc:	f241 4132 	movw	r1, #5170	; 0x1432
 80066c0:	487c      	ldr	r0, [pc, #496]	; (80068b4 <HAL_TIM_ConfigClockSource+0x274>)
 80066c2:	f7fa ffb9 	bl	8001638 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80066d4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066dc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066ee:	f000 80f1 	beq.w	80068d4 <HAL_TIM_ConfigClockSource+0x294>
 80066f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066f6:	f200 8299 	bhi.w	8006c2c <HAL_TIM_ConfigClockSource+0x5ec>
 80066fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066fe:	d02d      	beq.n	800675c <HAL_TIM_ConfigClockSource+0x11c>
 8006700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006704:	f200 8292 	bhi.w	8006c2c <HAL_TIM_ConfigClockSource+0x5ec>
 8006708:	2b70      	cmp	r3, #112	; 0x70
 800670a:	d05d      	beq.n	80067c8 <HAL_TIM_ConfigClockSource+0x188>
 800670c:	2b70      	cmp	r3, #112	; 0x70
 800670e:	f200 828d 	bhi.w	8006c2c <HAL_TIM_ConfigClockSource+0x5ec>
 8006712:	2b60      	cmp	r3, #96	; 0x60
 8006714:	f000 81a5 	beq.w	8006a62 <HAL_TIM_ConfigClockSource+0x422>
 8006718:	2b60      	cmp	r3, #96	; 0x60
 800671a:	f200 8287 	bhi.w	8006c2c <HAL_TIM_ConfigClockSource+0x5ec>
 800671e:	2b50      	cmp	r3, #80	; 0x50
 8006720:	f000 8149 	beq.w	80069b6 <HAL_TIM_ConfigClockSource+0x376>
 8006724:	2b50      	cmp	r3, #80	; 0x50
 8006726:	f200 8281 	bhi.w	8006c2c <HAL_TIM_ConfigClockSource+0x5ec>
 800672a:	2b40      	cmp	r3, #64	; 0x40
 800672c:	f000 81fc 	beq.w	8006b28 <HAL_TIM_ConfigClockSource+0x4e8>
 8006730:	2b40      	cmp	r3, #64	; 0x40
 8006732:	f200 827b 	bhi.w	8006c2c <HAL_TIM_ConfigClockSource+0x5ec>
 8006736:	2b30      	cmp	r3, #48	; 0x30
 8006738:	f000 824c 	beq.w	8006bd4 <HAL_TIM_ConfigClockSource+0x594>
 800673c:	2b30      	cmp	r3, #48	; 0x30
 800673e:	f200 8275 	bhi.w	8006c2c <HAL_TIM_ConfigClockSource+0x5ec>
 8006742:	2b20      	cmp	r3, #32
 8006744:	f000 8246 	beq.w	8006bd4 <HAL_TIM_ConfigClockSource+0x594>
 8006748:	2b20      	cmp	r3, #32
 800674a:	f200 826f 	bhi.w	8006c2c <HAL_TIM_ConfigClockSource+0x5ec>
 800674e:	2b00      	cmp	r3, #0
 8006750:	f000 8240 	beq.w	8006bd4 <HAL_TIM_ConfigClockSource+0x594>
 8006754:	2b10      	cmp	r3, #16
 8006756:	f000 823d 	beq.w	8006bd4 <HAL_TIM_ConfigClockSource+0x594>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800675a:	e267      	b.n	8006c2c <HAL_TIM_ConfigClockSource+0x5ec>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a55      	ldr	r2, [pc, #340]	; (80068b8 <HAL_TIM_ConfigClockSource+0x278>)
 8006762:	4293      	cmp	r3, r2
 8006764:	f000 8264 	beq.w	8006c30 <HAL_TIM_ConfigClockSource+0x5f0>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a53      	ldr	r2, [pc, #332]	; (80068bc <HAL_TIM_ConfigClockSource+0x27c>)
 800676e:	4293      	cmp	r3, r2
 8006770:	f000 825e 	beq.w	8006c30 <HAL_TIM_ConfigClockSource+0x5f0>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800677c:	f000 8258 	beq.w	8006c30 <HAL_TIM_ConfigClockSource+0x5f0>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a4e      	ldr	r2, [pc, #312]	; (80068c0 <HAL_TIM_ConfigClockSource+0x280>)
 8006786:	4293      	cmp	r3, r2
 8006788:	f000 8252 	beq.w	8006c30 <HAL_TIM_ConfigClockSource+0x5f0>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a4c      	ldr	r2, [pc, #304]	; (80068c4 <HAL_TIM_ConfigClockSource+0x284>)
 8006792:	4293      	cmp	r3, r2
 8006794:	f000 824c 	beq.w	8006c30 <HAL_TIM_ConfigClockSource+0x5f0>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a4a      	ldr	r2, [pc, #296]	; (80068c8 <HAL_TIM_ConfigClockSource+0x288>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	f000 8246 	beq.w	8006c30 <HAL_TIM_ConfigClockSource+0x5f0>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a48      	ldr	r2, [pc, #288]	; (80068cc <HAL_TIM_ConfigClockSource+0x28c>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	f000 8240 	beq.w	8006c30 <HAL_TIM_ConfigClockSource+0x5f0>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a46      	ldr	r2, [pc, #280]	; (80068d0 <HAL_TIM_ConfigClockSource+0x290>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	f000 823a 	beq.w	8006c30 <HAL_TIM_ConfigClockSource+0x5f0>
 80067bc:	f241 413e 	movw	r1, #5182	; 0x143e
 80067c0:	483c      	ldr	r0, [pc, #240]	; (80068b4 <HAL_TIM_ConfigClockSource+0x274>)
 80067c2:	f7fa ff39 	bl	8001638 <assert_failed>
      break;
 80067c6:	e233      	b.n	8006c30 <HAL_TIM_ConfigClockSource+0x5f0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a3a      	ldr	r2, [pc, #232]	; (80068b8 <HAL_TIM_ConfigClockSource+0x278>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d01d      	beq.n	800680e <HAL_TIM_ConfigClockSource+0x1ce>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a39      	ldr	r2, [pc, #228]	; (80068bc <HAL_TIM_ConfigClockSource+0x27c>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d018      	beq.n	800680e <HAL_TIM_ConfigClockSource+0x1ce>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067e4:	d013      	beq.n	800680e <HAL_TIM_ConfigClockSource+0x1ce>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a35      	ldr	r2, [pc, #212]	; (80068c0 <HAL_TIM_ConfigClockSource+0x280>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d00e      	beq.n	800680e <HAL_TIM_ConfigClockSource+0x1ce>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a33      	ldr	r2, [pc, #204]	; (80068c4 <HAL_TIM_ConfigClockSource+0x284>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d009      	beq.n	800680e <HAL_TIM_ConfigClockSource+0x1ce>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a32      	ldr	r2, [pc, #200]	; (80068c8 <HAL_TIM_ConfigClockSource+0x288>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d004      	beq.n	800680e <HAL_TIM_ConfigClockSource+0x1ce>
 8006804:	f241 4145 	movw	r1, #5189	; 0x1445
 8006808:	482a      	ldr	r0, [pc, #168]	; (80068b4 <HAL_TIM_ConfigClockSource+0x274>)
 800680a:	f7fa ff15 	bl	8001638 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d013      	beq.n	800683e <HAL_TIM_ConfigClockSource+0x1fe>
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800681e:	d00e      	beq.n	800683e <HAL_TIM_ConfigClockSource+0x1fe>
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006828:	d009      	beq.n	800683e <HAL_TIM_ConfigClockSource+0x1fe>
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006832:	d004      	beq.n	800683e <HAL_TIM_ConfigClockSource+0x1fe>
 8006834:	f241 4148 	movw	r1, #5192	; 0x1448
 8006838:	481e      	ldr	r0, [pc, #120]	; (80068b4 <HAL_TIM_ConfigClockSource+0x274>)
 800683a:	f7fa fefd 	bl	8001638 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006846:	d014      	beq.n	8006872 <HAL_TIM_ConfigClockSource+0x232>
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d010      	beq.n	8006872 <HAL_TIM_ConfigClockSource+0x232>
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00c      	beq.n	8006872 <HAL_TIM_ConfigClockSource+0x232>
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	2b02      	cmp	r3, #2
 800685e:	d008      	beq.n	8006872 <HAL_TIM_ConfigClockSource+0x232>
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	2b0a      	cmp	r3, #10
 8006866:	d004      	beq.n	8006872 <HAL_TIM_ConfigClockSource+0x232>
 8006868:	f241 4149 	movw	r1, #5193	; 0x1449
 800686c:	4811      	ldr	r0, [pc, #68]	; (80068b4 <HAL_TIM_ConfigClockSource+0x274>)
 800686e:	f7fa fee3 	bl	8001638 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	2b0f      	cmp	r3, #15
 8006878:	d904      	bls.n	8006884 <HAL_TIM_ConfigClockSource+0x244>
 800687a:	f241 414a 	movw	r1, #5194	; 0x144a
 800687e:	480d      	ldr	r0, [pc, #52]	; (80068b4 <HAL_TIM_ConfigClockSource+0x274>)
 8006880:	f7fa feda 	bl	8001638 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6818      	ldr	r0, [r3, #0]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	6899      	ldr	r1, [r3, #8]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	685a      	ldr	r2, [r3, #4]
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	f000 fd59 	bl	800734a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80068a6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	609a      	str	r2, [r3, #8]
      break;
 80068b0:	e1bf      	b.n	8006c32 <HAL_TIM_ConfigClockSource+0x5f2>
 80068b2:	bf00      	nop
 80068b4:	0800b410 	.word	0x0800b410
 80068b8:	40012c00 	.word	0x40012c00
 80068bc:	40013400 	.word	0x40013400
 80068c0:	40000400 	.word	0x40000400
 80068c4:	40000800 	.word	0x40000800
 80068c8:	40000c00 	.word	0x40000c00
 80068cc:	40001000 	.word	0x40001000
 80068d0:	40001400 	.word	0x40001400
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a8d      	ldr	r2, [pc, #564]	; (8006b10 <HAL_TIM_ConfigClockSource+0x4d0>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d01d      	beq.n	800691a <HAL_TIM_ConfigClockSource+0x2da>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a8c      	ldr	r2, [pc, #560]	; (8006b14 <HAL_TIM_ConfigClockSource+0x4d4>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d018      	beq.n	800691a <HAL_TIM_ConfigClockSource+0x2da>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068f0:	d013      	beq.n	800691a <HAL_TIM_ConfigClockSource+0x2da>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a88      	ldr	r2, [pc, #544]	; (8006b18 <HAL_TIM_ConfigClockSource+0x4d8>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d00e      	beq.n	800691a <HAL_TIM_ConfigClockSource+0x2da>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a86      	ldr	r2, [pc, #536]	; (8006b1c <HAL_TIM_ConfigClockSource+0x4dc>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d009      	beq.n	800691a <HAL_TIM_ConfigClockSource+0x2da>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a85      	ldr	r2, [pc, #532]	; (8006b20 <HAL_TIM_ConfigClockSource+0x4e0>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d004      	beq.n	800691a <HAL_TIM_ConfigClockSource+0x2da>
 8006910:	f241 415d 	movw	r1, #5213	; 0x145d
 8006914:	4883      	ldr	r0, [pc, #524]	; (8006b24 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006916:	f7fa fe8f 	bl	8001638 <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d013      	beq.n	800694a <HAL_TIM_ConfigClockSource+0x30a>
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800692a:	d00e      	beq.n	800694a <HAL_TIM_ConfigClockSource+0x30a>
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006934:	d009      	beq.n	800694a <HAL_TIM_ConfigClockSource+0x30a>
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800693e:	d004      	beq.n	800694a <HAL_TIM_ConfigClockSource+0x30a>
 8006940:	f44f 51a3 	mov.w	r1, #5216	; 0x1460
 8006944:	4877      	ldr	r0, [pc, #476]	; (8006b24 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006946:	f7fa fe77 	bl	8001638 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006952:	d014      	beq.n	800697e <HAL_TIM_ConfigClockSource+0x33e>
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d010      	beq.n	800697e <HAL_TIM_ConfigClockSource+0x33e>
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00c      	beq.n	800697e <HAL_TIM_ConfigClockSource+0x33e>
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	2b02      	cmp	r3, #2
 800696a:	d008      	beq.n	800697e <HAL_TIM_ConfigClockSource+0x33e>
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	2b0a      	cmp	r3, #10
 8006972:	d004      	beq.n	800697e <HAL_TIM_ConfigClockSource+0x33e>
 8006974:	f241 4161 	movw	r1, #5217	; 0x1461
 8006978:	486a      	ldr	r0, [pc, #424]	; (8006b24 <HAL_TIM_ConfigClockSource+0x4e4>)
 800697a:	f7fa fe5d 	bl	8001638 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	2b0f      	cmp	r3, #15
 8006984:	d904      	bls.n	8006990 <HAL_TIM_ConfigClockSource+0x350>
 8006986:	f241 4162 	movw	r1, #5218	; 0x1462
 800698a:	4866      	ldr	r0, [pc, #408]	; (8006b24 <HAL_TIM_ConfigClockSource+0x4e4>)
 800698c:	f7fa fe54 	bl	8001638 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6818      	ldr	r0, [r3, #0]
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	6899      	ldr	r1, [r3, #8]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	685a      	ldr	r2, [r3, #4]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	f000 fcd3 	bl	800734a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	689a      	ldr	r2, [r3, #8]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069b2:	609a      	str	r2, [r3, #8]
      break;
 80069b4:	e13d      	b.n	8006c32 <HAL_TIM_ConfigClockSource+0x5f2>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a55      	ldr	r2, [pc, #340]	; (8006b10 <HAL_TIM_ConfigClockSource+0x4d0>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d01d      	beq.n	80069fc <HAL_TIM_ConfigClockSource+0x3bc>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a53      	ldr	r2, [pc, #332]	; (8006b14 <HAL_TIM_ConfigClockSource+0x4d4>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d018      	beq.n	80069fc <HAL_TIM_ConfigClockSource+0x3bc>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069d2:	d013      	beq.n	80069fc <HAL_TIM_ConfigClockSource+0x3bc>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a4f      	ldr	r2, [pc, #316]	; (8006b18 <HAL_TIM_ConfigClockSource+0x4d8>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d00e      	beq.n	80069fc <HAL_TIM_ConfigClockSource+0x3bc>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a4e      	ldr	r2, [pc, #312]	; (8006b1c <HAL_TIM_ConfigClockSource+0x4dc>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d009      	beq.n	80069fc <HAL_TIM_ConfigClockSource+0x3bc>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a4c      	ldr	r2, [pc, #304]	; (8006b20 <HAL_TIM_ConfigClockSource+0x4e0>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d004      	beq.n	80069fc <HAL_TIM_ConfigClockSource+0x3bc>
 80069f2:	f241 4171 	movw	r1, #5233	; 0x1471
 80069f6:	484b      	ldr	r0, [pc, #300]	; (8006b24 <HAL_TIM_ConfigClockSource+0x4e4>)
 80069f8:	f7fa fe1e 	bl	8001638 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a04:	d014      	beq.n	8006a30 <HAL_TIM_ConfigClockSource+0x3f0>
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d010      	beq.n	8006a30 <HAL_TIM_ConfigClockSource+0x3f0>
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00c      	beq.n	8006a30 <HAL_TIM_ConfigClockSource+0x3f0>
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d008      	beq.n	8006a30 <HAL_TIM_ConfigClockSource+0x3f0>
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	2b0a      	cmp	r3, #10
 8006a24:	d004      	beq.n	8006a30 <HAL_TIM_ConfigClockSource+0x3f0>
 8006a26:	f241 4174 	movw	r1, #5236	; 0x1474
 8006a2a:	483e      	ldr	r0, [pc, #248]	; (8006b24 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006a2c:	f7fa fe04 	bl	8001638 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	2b0f      	cmp	r3, #15
 8006a36:	d904      	bls.n	8006a42 <HAL_TIM_ConfigClockSource+0x402>
 8006a38:	f241 4175 	movw	r1, #5237	; 0x1475
 8006a3c:	4839      	ldr	r0, [pc, #228]	; (8006b24 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006a3e:	f7fa fdfb 	bl	8001638 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6818      	ldr	r0, [r3, #0]
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	6859      	ldr	r1, [r3, #4]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	f000 fc04 	bl	800725c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2150      	movs	r1, #80	; 0x50
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f000 fc5b 	bl	8007316 <TIM_ITRx_SetConfig>
      break;
 8006a60:	e0e7      	b.n	8006c32 <HAL_TIM_ConfigClockSource+0x5f2>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a2a      	ldr	r2, [pc, #168]	; (8006b10 <HAL_TIM_ConfigClockSource+0x4d0>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d01d      	beq.n	8006aa8 <HAL_TIM_ConfigClockSource+0x468>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a28      	ldr	r2, [pc, #160]	; (8006b14 <HAL_TIM_ConfigClockSource+0x4d4>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d018      	beq.n	8006aa8 <HAL_TIM_ConfigClockSource+0x468>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a7e:	d013      	beq.n	8006aa8 <HAL_TIM_ConfigClockSource+0x468>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a24      	ldr	r2, [pc, #144]	; (8006b18 <HAL_TIM_ConfigClockSource+0x4d8>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d00e      	beq.n	8006aa8 <HAL_TIM_ConfigClockSource+0x468>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a23      	ldr	r2, [pc, #140]	; (8006b1c <HAL_TIM_ConfigClockSource+0x4dc>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d009      	beq.n	8006aa8 <HAL_TIM_ConfigClockSource+0x468>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a21      	ldr	r2, [pc, #132]	; (8006b20 <HAL_TIM_ConfigClockSource+0x4e0>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d004      	beq.n	8006aa8 <HAL_TIM_ConfigClockSource+0x468>
 8006a9e:	f241 4181 	movw	r1, #5249	; 0x1481
 8006aa2:	4820      	ldr	r0, [pc, #128]	; (8006b24 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006aa4:	f7fa fdc8 	bl	8001638 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ab0:	d014      	beq.n	8006adc <HAL_TIM_ConfigClockSource+0x49c>
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d010      	beq.n	8006adc <HAL_TIM_ConfigClockSource+0x49c>
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00c      	beq.n	8006adc <HAL_TIM_ConfigClockSource+0x49c>
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d008      	beq.n	8006adc <HAL_TIM_ConfigClockSource+0x49c>
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	2b0a      	cmp	r3, #10
 8006ad0:	d004      	beq.n	8006adc <HAL_TIM_ConfigClockSource+0x49c>
 8006ad2:	f241 4184 	movw	r1, #5252	; 0x1484
 8006ad6:	4813      	ldr	r0, [pc, #76]	; (8006b24 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006ad8:	f7fa fdae 	bl	8001638 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	2b0f      	cmp	r3, #15
 8006ae2:	d904      	bls.n	8006aee <HAL_TIM_ConfigClockSource+0x4ae>
 8006ae4:	f241 4185 	movw	r1, #5253	; 0x1485
 8006ae8:	480e      	ldr	r0, [pc, #56]	; (8006b24 <HAL_TIM_ConfigClockSource+0x4e4>)
 8006aea:	f7fa fda5 	bl	8001638 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6818      	ldr	r0, [r3, #0]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	6859      	ldr	r1, [r3, #4]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	461a      	mov	r2, r3
 8006afc:	f000 fbdc 	bl	80072b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2160      	movs	r1, #96	; 0x60
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 fc05 	bl	8007316 <TIM_ITRx_SetConfig>
      break;
 8006b0c:	e091      	b.n	8006c32 <HAL_TIM_ConfigClockSource+0x5f2>
 8006b0e:	bf00      	nop
 8006b10:	40012c00 	.word	0x40012c00
 8006b14:	40013400 	.word	0x40013400
 8006b18:	40000400 	.word	0x40000400
 8006b1c:	40000800 	.word	0x40000800
 8006b20:	40000c00 	.word	0x40000c00
 8006b24:	0800b410 	.word	0x0800b410
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a47      	ldr	r2, [pc, #284]	; (8006c4c <HAL_TIM_ConfigClockSource+0x60c>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d01d      	beq.n	8006b6e <HAL_TIM_ConfigClockSource+0x52e>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a46      	ldr	r2, [pc, #280]	; (8006c50 <HAL_TIM_ConfigClockSource+0x610>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d018      	beq.n	8006b6e <HAL_TIM_ConfigClockSource+0x52e>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b44:	d013      	beq.n	8006b6e <HAL_TIM_ConfigClockSource+0x52e>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a42      	ldr	r2, [pc, #264]	; (8006c54 <HAL_TIM_ConfigClockSource+0x614>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d00e      	beq.n	8006b6e <HAL_TIM_ConfigClockSource+0x52e>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a40      	ldr	r2, [pc, #256]	; (8006c58 <HAL_TIM_ConfigClockSource+0x618>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d009      	beq.n	8006b6e <HAL_TIM_ConfigClockSource+0x52e>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a3f      	ldr	r2, [pc, #252]	; (8006c5c <HAL_TIM_ConfigClockSource+0x61c>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d004      	beq.n	8006b6e <HAL_TIM_ConfigClockSource+0x52e>
 8006b64:	f241 4191 	movw	r1, #5265	; 0x1491
 8006b68:	483d      	ldr	r0, [pc, #244]	; (8006c60 <HAL_TIM_ConfigClockSource+0x620>)
 8006b6a:	f7fa fd65 	bl	8001638 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b76:	d014      	beq.n	8006ba2 <HAL_TIM_ConfigClockSource+0x562>
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d010      	beq.n	8006ba2 <HAL_TIM_ConfigClockSource+0x562>
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00c      	beq.n	8006ba2 <HAL_TIM_ConfigClockSource+0x562>
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d008      	beq.n	8006ba2 <HAL_TIM_ConfigClockSource+0x562>
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	2b0a      	cmp	r3, #10
 8006b96:	d004      	beq.n	8006ba2 <HAL_TIM_ConfigClockSource+0x562>
 8006b98:	f241 4194 	movw	r1, #5268	; 0x1494
 8006b9c:	4830      	ldr	r0, [pc, #192]	; (8006c60 <HAL_TIM_ConfigClockSource+0x620>)
 8006b9e:	f7fa fd4b 	bl	8001638 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	2b0f      	cmp	r3, #15
 8006ba8:	d904      	bls.n	8006bb4 <HAL_TIM_ConfigClockSource+0x574>
 8006baa:	f241 4195 	movw	r1, #5269	; 0x1495
 8006bae:	482c      	ldr	r0, [pc, #176]	; (8006c60 <HAL_TIM_ConfigClockSource+0x620>)
 8006bb0:	f7fa fd42 	bl	8001638 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6818      	ldr	r0, [r3, #0]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	6859      	ldr	r1, [r3, #4]
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	f000 fb4b 	bl	800725c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2140      	movs	r1, #64	; 0x40
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f000 fba2 	bl	8007316 <TIM_ITRx_SetConfig>
      break;
 8006bd2:	e02e      	b.n	8006c32 <HAL_TIM_ConfigClockSource+0x5f2>
        assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a1c      	ldr	r2, [pc, #112]	; (8006c4c <HAL_TIM_ConfigClockSource+0x60c>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d01d      	beq.n	8006c1a <HAL_TIM_ConfigClockSource+0x5da>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a1b      	ldr	r2, [pc, #108]	; (8006c50 <HAL_TIM_ConfigClockSource+0x610>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d018      	beq.n	8006c1a <HAL_TIM_ConfigClockSource+0x5da>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bf0:	d013      	beq.n	8006c1a <HAL_TIM_ConfigClockSource+0x5da>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a17      	ldr	r2, [pc, #92]	; (8006c54 <HAL_TIM_ConfigClockSource+0x614>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d00e      	beq.n	8006c1a <HAL_TIM_ConfigClockSource+0x5da>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a15      	ldr	r2, [pc, #84]	; (8006c58 <HAL_TIM_ConfigClockSource+0x618>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d009      	beq.n	8006c1a <HAL_TIM_ConfigClockSource+0x5da>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a14      	ldr	r2, [pc, #80]	; (8006c5c <HAL_TIM_ConfigClockSource+0x61c>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d004      	beq.n	8006c1a <HAL_TIM_ConfigClockSource+0x5da>
 8006c10:	f241 41a4 	movw	r1, #5284	; 0x14a4
 8006c14:	4812      	ldr	r0, [pc, #72]	; (8006c60 <HAL_TIM_ConfigClockSource+0x620>)
 8006c16:	f7fa fd0f 	bl	8001638 <assert_failed>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4619      	mov	r1, r3
 8006c24:	4610      	mov	r0, r2
 8006c26:	f000 fb76 	bl	8007316 <TIM_ITRx_SetConfig>
        break;
 8006c2a:	e002      	b.n	8006c32 <HAL_TIM_ConfigClockSource+0x5f2>
      break;
 8006c2c:	bf00      	nop
 8006c2e:	e000      	b.n	8006c32 <HAL_TIM_ConfigClockSource+0x5f2>
      break;
 8006c30:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3710      	adds	r7, #16
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	40012c00 	.word	0x40012c00
 8006c50:	40013400 	.word	0x40013400
 8006c54:	40000400 	.word	0x40000400
 8006c58:	40000800 	.word	0x40000800
 8006c5c:	40000c00 	.word	0x40000c00
 8006c60:	0800b410 	.word	0x0800b410

08006c64 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bc80      	pop	{r7}
 8006c74:	4770      	bx	lr

08006c76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c76:	b480      	push	{r7}
 8006c78:	b083      	sub	sp, #12
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c7e:	bf00      	nop
 8006c80:	370c      	adds	r7, #12
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bc80      	pop	{r7}
 8006c86:	4770      	bx	lr

08006c88 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006c90:	bf00      	nop
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bc80      	pop	{r7}
 8006c98:	4770      	bx	lr

08006c9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b083      	sub	sp, #12
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ca2:	bf00      	nop
 8006ca4:	370c      	adds	r7, #12
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bc80      	pop	{r7}
 8006caa:	4770      	bx	lr

08006cac <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bc80      	pop	{r7}
 8006cbc:	4770      	bx	lr

08006cbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b083      	sub	sp, #12
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cc6:	bf00      	nop
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bc80      	pop	{r7}
 8006cce:	4770      	bx	lr

08006cd0 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8006cd8:	bf00      	nop
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bc80      	pop	{r7}
 8006ce0:	4770      	bx	lr

08006ce2 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b083      	sub	sp, #12
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006cea:	bf00      	nop
 8006cec:	370c      	adds	r7, #12
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bc80      	pop	{r7}
 8006cf2:	4770      	bx	lr

08006cf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a33      	ldr	r2, [pc, #204]	; (8006dd4 <TIM_Base_SetConfig+0xe0>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d013      	beq.n	8006d34 <TIM_Base_SetConfig+0x40>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a32      	ldr	r2, [pc, #200]	; (8006dd8 <TIM_Base_SetConfig+0xe4>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d00f      	beq.n	8006d34 <TIM_Base_SetConfig+0x40>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d1a:	d00b      	beq.n	8006d34 <TIM_Base_SetConfig+0x40>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a2f      	ldr	r2, [pc, #188]	; (8006ddc <TIM_Base_SetConfig+0xe8>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d007      	beq.n	8006d34 <TIM_Base_SetConfig+0x40>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a2e      	ldr	r2, [pc, #184]	; (8006de0 <TIM_Base_SetConfig+0xec>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d003      	beq.n	8006d34 <TIM_Base_SetConfig+0x40>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a2d      	ldr	r2, [pc, #180]	; (8006de4 <TIM_Base_SetConfig+0xf0>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d108      	bne.n	8006d46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	4a22      	ldr	r2, [pc, #136]	; (8006dd4 <TIM_Base_SetConfig+0xe0>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d013      	beq.n	8006d76 <TIM_Base_SetConfig+0x82>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a21      	ldr	r2, [pc, #132]	; (8006dd8 <TIM_Base_SetConfig+0xe4>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d00f      	beq.n	8006d76 <TIM_Base_SetConfig+0x82>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d5c:	d00b      	beq.n	8006d76 <TIM_Base_SetConfig+0x82>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a1e      	ldr	r2, [pc, #120]	; (8006ddc <TIM_Base_SetConfig+0xe8>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d007      	beq.n	8006d76 <TIM_Base_SetConfig+0x82>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a1d      	ldr	r2, [pc, #116]	; (8006de0 <TIM_Base_SetConfig+0xec>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d003      	beq.n	8006d76 <TIM_Base_SetConfig+0x82>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a1c      	ldr	r2, [pc, #112]	; (8006de4 <TIM_Base_SetConfig+0xf0>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d108      	bne.n	8006d88 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	689a      	ldr	r2, [r3, #8]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a09      	ldr	r2, [pc, #36]	; (8006dd4 <TIM_Base_SetConfig+0xe0>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d003      	beq.n	8006dbc <TIM_Base_SetConfig+0xc8>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4a08      	ldr	r2, [pc, #32]	; (8006dd8 <TIM_Base_SetConfig+0xe4>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d103      	bne.n	8006dc4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	691a      	ldr	r2, [r3, #16]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	615a      	str	r2, [r3, #20]
}
 8006dca:	bf00      	nop
 8006dcc:	3714      	adds	r7, #20
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bc80      	pop	{r7}
 8006dd2:	4770      	bx	lr
 8006dd4:	40012c00 	.word	0x40012c00
 8006dd8:	40013400 	.word	0x40013400
 8006ddc:	40000400 	.word	0x40000400
 8006de0:	40000800 	.word	0x40000800
 8006de4:	40000c00 	.word	0x40000c00

08006de8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b086      	sub	sp, #24
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	f023 0201 	bic.w	r2, r3, #1
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	699b      	ldr	r3, [r3, #24]
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f023 0303 	bic.w	r3, r3, #3
 8006e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	f023 0302 	bic.w	r3, r3, #2
 8006e30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a34      	ldr	r2, [pc, #208]	; (8006f10 <TIM_OC1_SetConfig+0x128>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d003      	beq.n	8006e4c <TIM_OC1_SetConfig+0x64>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a33      	ldr	r2, [pc, #204]	; (8006f14 <TIM_OC1_SetConfig+0x12c>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d119      	bne.n	8006e80 <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d008      	beq.n	8006e66 <TIM_OC1_SetConfig+0x7e>
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	2b08      	cmp	r3, #8
 8006e5a:	d004      	beq.n	8006e66 <TIM_OC1_SetConfig+0x7e>
 8006e5c:	f641 2141 	movw	r1, #6721	; 0x1a41
 8006e60:	482d      	ldr	r0, [pc, #180]	; (8006f18 <TIM_OC1_SetConfig+0x130>)
 8006e62:	f7fa fbe9 	bl	8001638 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f023 0308 	bic.w	r3, r3, #8
 8006e6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	f023 0304 	bic.w	r3, r3, #4
 8006e7e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a23      	ldr	r2, [pc, #140]	; (8006f10 <TIM_OC1_SetConfig+0x128>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d003      	beq.n	8006e90 <TIM_OC1_SetConfig+0xa8>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a22      	ldr	r2, [pc, #136]	; (8006f14 <TIM_OC1_SetConfig+0x12c>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d12d      	bne.n	8006eec <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e98:	d008      	beq.n	8006eac <TIM_OC1_SetConfig+0xc4>
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	699b      	ldr	r3, [r3, #24]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d004      	beq.n	8006eac <TIM_OC1_SetConfig+0xc4>
 8006ea2:	f641 214e 	movw	r1, #6734	; 0x1a4e
 8006ea6:	481c      	ldr	r0, [pc, #112]	; (8006f18 <TIM_OC1_SetConfig+0x130>)
 8006ea8:	f7fa fbc6 	bl	8001638 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	695b      	ldr	r3, [r3, #20]
 8006eb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eb4:	d008      	beq.n	8006ec8 <TIM_OC1_SetConfig+0xe0>
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d004      	beq.n	8006ec8 <TIM_OC1_SetConfig+0xe0>
 8006ebe:	f641 214f 	movw	r1, #6735	; 0x1a4f
 8006ec2:	4815      	ldr	r0, [pc, #84]	; (8006f18 <TIM_OC1_SetConfig+0x130>)
 8006ec4:	f7fa fbb8 	bl	8001638 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ece:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ed6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	695b      	ldr	r3, [r3, #20]
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	693a      	ldr	r2, [r7, #16]
 8006ef0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	685a      	ldr	r2, [r3, #4]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	697a      	ldr	r2, [r7, #20]
 8006f04:	621a      	str	r2, [r3, #32]
}
 8006f06:	bf00      	nop
 8006f08:	3718      	adds	r7, #24
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	bf00      	nop
 8006f10:	40012c00 	.word	0x40012c00
 8006f14:	40013400 	.word	0x40013400
 8006f18:	0800b410 	.word	0x0800b410

08006f1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b086      	sub	sp, #24
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	f023 0210 	bic.w	r2, r3, #16
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	021b      	lsls	r3, r3, #8
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	f023 0320 	bic.w	r3, r3, #32
 8006f66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	011b      	lsls	r3, r3, #4
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a35      	ldr	r2, [pc, #212]	; (800704c <TIM_OC2_SetConfig+0x130>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d003      	beq.n	8006f84 <TIM_OC2_SetConfig+0x68>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a34      	ldr	r2, [pc, #208]	; (8007050 <TIM_OC2_SetConfig+0x134>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d11a      	bne.n	8006fba <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d008      	beq.n	8006f9e <TIM_OC2_SetConfig+0x82>
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	2b08      	cmp	r3, #8
 8006f92:	d004      	beq.n	8006f9e <TIM_OC2_SetConfig+0x82>
 8006f94:	f641 218c 	movw	r1, #6796	; 0x1a8c
 8006f98:	482e      	ldr	r0, [pc, #184]	; (8007054 <TIM_OC2_SetConfig+0x138>)
 8006f9a:	f7fa fb4d 	bl	8001638 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fa4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	011b      	lsls	r3, r3, #4
 8006fac:	697a      	ldr	r2, [r7, #20]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fb8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a23      	ldr	r2, [pc, #140]	; (800704c <TIM_OC2_SetConfig+0x130>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d003      	beq.n	8006fca <TIM_OC2_SetConfig+0xae>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a22      	ldr	r2, [pc, #136]	; (8007050 <TIM_OC2_SetConfig+0x134>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d12f      	bne.n	800702a <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fd2:	d008      	beq.n	8006fe6 <TIM_OC2_SetConfig+0xca>
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	699b      	ldr	r3, [r3, #24]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d004      	beq.n	8006fe6 <TIM_OC2_SetConfig+0xca>
 8006fdc:	f641 219a 	movw	r1, #6810	; 0x1a9a
 8006fe0:	481c      	ldr	r0, [pc, #112]	; (8007054 <TIM_OC2_SetConfig+0x138>)
 8006fe2:	f7fa fb29 	bl	8001638 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	695b      	ldr	r3, [r3, #20]
 8006fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fee:	d008      	beq.n	8007002 <TIM_OC2_SetConfig+0xe6>
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	695b      	ldr	r3, [r3, #20]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d004      	beq.n	8007002 <TIM_OC2_SetConfig+0xe6>
 8006ff8:	f641 219b 	movw	r1, #6811	; 0x1a9b
 8006ffc:	4815      	ldr	r0, [pc, #84]	; (8007054 <TIM_OC2_SetConfig+0x138>)
 8006ffe:	f7fa fb1b 	bl	8001638 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	695b      	ldr	r3, [r3, #20]
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	693a      	ldr	r2, [r7, #16]
 800701a:	4313      	orrs	r3, r2
 800701c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	699b      	ldr	r3, [r3, #24]
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	693a      	ldr	r2, [r7, #16]
 8007026:	4313      	orrs	r3, r2
 8007028:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	685a      	ldr	r2, [r3, #4]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	621a      	str	r2, [r3, #32]
}
 8007044:	bf00      	nop
 8007046:	3718      	adds	r7, #24
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	40012c00 	.word	0x40012c00
 8007050:	40013400 	.word	0x40013400
 8007054:	0800b410 	.word	0x0800b410

08007058 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	69db      	ldr	r3, [r3, #28]
 800707e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f023 0303 	bic.w	r3, r3, #3
 800708e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	4313      	orrs	r3, r2
 8007098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	021b      	lsls	r3, r3, #8
 80070a8:	697a      	ldr	r2, [r7, #20]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a35      	ldr	r2, [pc, #212]	; (8007188 <TIM_OC3_SetConfig+0x130>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d003      	beq.n	80070be <TIM_OC3_SetConfig+0x66>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a34      	ldr	r2, [pc, #208]	; (800718c <TIM_OC3_SetConfig+0x134>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d11a      	bne.n	80070f4 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d008      	beq.n	80070d8 <TIM_OC3_SetConfig+0x80>
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	2b08      	cmp	r3, #8
 80070cc:	d004      	beq.n	80070d8 <TIM_OC3_SetConfig+0x80>
 80070ce:	f641 21d7 	movw	r1, #6871	; 0x1ad7
 80070d2:	482f      	ldr	r0, [pc, #188]	; (8007190 <TIM_OC3_SetConfig+0x138>)
 80070d4:	f7fa fab0 	bl	8001638 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	021b      	lsls	r3, r3, #8
 80070e6:	697a      	ldr	r2, [r7, #20]
 80070e8:	4313      	orrs	r3, r2
 80070ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a24      	ldr	r2, [pc, #144]	; (8007188 <TIM_OC3_SetConfig+0x130>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d003      	beq.n	8007104 <TIM_OC3_SetConfig+0xac>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a23      	ldr	r2, [pc, #140]	; (800718c <TIM_OC3_SetConfig+0x134>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d12f      	bne.n	8007164 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800710c:	d008      	beq.n	8007120 <TIM_OC3_SetConfig+0xc8>
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	699b      	ldr	r3, [r3, #24]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d004      	beq.n	8007120 <TIM_OC3_SetConfig+0xc8>
 8007116:	f641 21e4 	movw	r1, #6884	; 0x1ae4
 800711a:	481d      	ldr	r0, [pc, #116]	; (8007190 <TIM_OC3_SetConfig+0x138>)
 800711c:	f7fa fa8c 	bl	8001638 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	695b      	ldr	r3, [r3, #20]
 8007124:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007128:	d008      	beq.n	800713c <TIM_OC3_SetConfig+0xe4>
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	695b      	ldr	r3, [r3, #20]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d004      	beq.n	800713c <TIM_OC3_SetConfig+0xe4>
 8007132:	f641 21e5 	movw	r1, #6885	; 0x1ae5
 8007136:	4816      	ldr	r0, [pc, #88]	; (8007190 <TIM_OC3_SetConfig+0x138>)
 8007138:	f7fa fa7e 	bl	8001638 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007142:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800714a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	695b      	ldr	r3, [r3, #20]
 8007150:	011b      	lsls	r3, r3, #4
 8007152:	693a      	ldr	r2, [r7, #16]
 8007154:	4313      	orrs	r3, r2
 8007156:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	011b      	lsls	r3, r3, #4
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	4313      	orrs	r3, r2
 8007162:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	693a      	ldr	r2, [r7, #16]
 8007168:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	685a      	ldr	r2, [r3, #4]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	621a      	str	r2, [r3, #32]
}
 800717e:	bf00      	nop
 8007180:	3718      	adds	r7, #24
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	40012c00 	.word	0x40012c00
 800718c:	40013400 	.word	0x40013400
 8007190:	0800b410 	.word	0x0800b410

08007194 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b086      	sub	sp, #24
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a1b      	ldr	r3, [r3, #32]
 80071ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	69db      	ldr	r3, [r3, #28]
 80071ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	021b      	lsls	r3, r3, #8
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	031b      	lsls	r3, r3, #12
 80071e6:	693a      	ldr	r2, [r7, #16]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4a18      	ldr	r2, [pc, #96]	; (8007250 <TIM_OC4_SetConfig+0xbc>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d003      	beq.n	80071fc <TIM_OC4_SetConfig+0x68>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4a17      	ldr	r2, [pc, #92]	; (8007254 <TIM_OC4_SetConfig+0xc0>)
 80071f8:	4293      	cmp	r3, r2
 80071fa:	d117      	bne.n	800722c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	695b      	ldr	r3, [r3, #20]
 8007200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007204:	d008      	beq.n	8007218 <TIM_OC4_SetConfig+0x84>
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	695b      	ldr	r3, [r3, #20]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d004      	beq.n	8007218 <TIM_OC4_SetConfig+0x84>
 800720e:	f641 3123 	movw	r1, #6947	; 0x1b23
 8007212:	4811      	ldr	r0, [pc, #68]	; (8007258 <TIM_OC4_SetConfig+0xc4>)
 8007214:	f7fa fa10 	bl	8001638 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800721e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	695b      	ldr	r3, [r3, #20]
 8007224:	019b      	lsls	r3, r3, #6
 8007226:	697a      	ldr	r2, [r7, #20]
 8007228:	4313      	orrs	r3, r2
 800722a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	697a      	ldr	r2, [r7, #20]
 8007230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	693a      	ldr	r2, [r7, #16]
 8007244:	621a      	str	r2, [r3, #32]
}
 8007246:	bf00      	nop
 8007248:	3718      	adds	r7, #24
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	40012c00 	.word	0x40012c00
 8007254:	40013400 	.word	0x40013400
 8007258:	0800b410 	.word	0x0800b410

0800725c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800725c:	b480      	push	{r7}
 800725e:	b087      	sub	sp, #28
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6a1b      	ldr	r3, [r3, #32]
 800726c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	f023 0201 	bic.w	r2, r3, #1
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	699b      	ldr	r3, [r3, #24]
 800727e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007286:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	011b      	lsls	r3, r3, #4
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	4313      	orrs	r3, r2
 8007290:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	f023 030a 	bic.w	r3, r3, #10
 8007298:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	4313      	orrs	r3, r2
 80072a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	693a      	ldr	r2, [r7, #16]
 80072a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	697a      	ldr	r2, [r7, #20]
 80072ac:	621a      	str	r2, [r3, #32]
}
 80072ae:	bf00      	nop
 80072b0:	371c      	adds	r7, #28
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bc80      	pop	{r7}
 80072b6:	4770      	bx	lr

080072b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b087      	sub	sp, #28
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6a1b      	ldr	r3, [r3, #32]
 80072c8:	f023 0210 	bic.w	r2, r3, #16
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	699b      	ldr	r3, [r3, #24]
 80072d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6a1b      	ldr	r3, [r3, #32]
 80072da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	031b      	lsls	r3, r3, #12
 80072e8:	697a      	ldr	r2, [r7, #20]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	011b      	lsls	r3, r3, #4
 80072fa:	693a      	ldr	r2, [r7, #16]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	697a      	ldr	r2, [r7, #20]
 8007304:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	621a      	str	r2, [r3, #32]
}
 800730c:	bf00      	nop
 800730e:	371c      	adds	r7, #28
 8007310:	46bd      	mov	sp, r7
 8007312:	bc80      	pop	{r7}
 8007314:	4770      	bx	lr

08007316 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007316:	b480      	push	{r7}
 8007318:	b085      	sub	sp, #20
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
 800731e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800732c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800732e:	683a      	ldr	r2, [r7, #0]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	4313      	orrs	r3, r2
 8007334:	f043 0307 	orr.w	r3, r3, #7
 8007338:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	609a      	str	r2, [r3, #8]
}
 8007340:	bf00      	nop
 8007342:	3714      	adds	r7, #20
 8007344:	46bd      	mov	sp, r7
 8007346:	bc80      	pop	{r7}
 8007348:	4770      	bx	lr

0800734a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800734a:	b480      	push	{r7}
 800734c:	b087      	sub	sp, #28
 800734e:	af00      	add	r7, sp, #0
 8007350:	60f8      	str	r0, [r7, #12]
 8007352:	60b9      	str	r1, [r7, #8]
 8007354:	607a      	str	r2, [r7, #4]
 8007356:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007364:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	021a      	lsls	r2, r3, #8
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	431a      	orrs	r2, r3
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	4313      	orrs	r3, r2
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	4313      	orrs	r3, r2
 8007376:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	609a      	str	r2, [r3, #8]
}
 800737e:	bf00      	nop
 8007380:	371c      	adds	r7, #28
 8007382:	46bd      	mov	sp, r7
 8007384:	bc80      	pop	{r7}
 8007386:	4770      	bx	lr

08007388 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	4a26      	ldr	r2, [pc, #152]	; (8007430 <TIM_CCxChannelCmd+0xa8>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d018      	beq.n	80073ce <TIM_CCxChannelCmd+0x46>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	4a25      	ldr	r2, [pc, #148]	; (8007434 <TIM_CCxChannelCmd+0xac>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d014      	beq.n	80073ce <TIM_CCxChannelCmd+0x46>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073aa:	d010      	beq.n	80073ce <TIM_CCxChannelCmd+0x46>
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	4a22      	ldr	r2, [pc, #136]	; (8007438 <TIM_CCxChannelCmd+0xb0>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d00c      	beq.n	80073ce <TIM_CCxChannelCmd+0x46>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	4a21      	ldr	r2, [pc, #132]	; (800743c <TIM_CCxChannelCmd+0xb4>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d008      	beq.n	80073ce <TIM_CCxChannelCmd+0x46>
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	4a20      	ldr	r2, [pc, #128]	; (8007440 <TIM_CCxChannelCmd+0xb8>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d004      	beq.n	80073ce <TIM_CCxChannelCmd+0x46>
 80073c4:	f641 5109 	movw	r1, #7433	; 0x1d09
 80073c8:	481e      	ldr	r0, [pc, #120]	; (8007444 <TIM_CCxChannelCmd+0xbc>)
 80073ca:	f7fa f935 	bl	8001638 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d010      	beq.n	80073f6 <TIM_CCxChannelCmd+0x6e>
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	2b04      	cmp	r3, #4
 80073d8:	d00d      	beq.n	80073f6 <TIM_CCxChannelCmd+0x6e>
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	2b08      	cmp	r3, #8
 80073de:	d00a      	beq.n	80073f6 <TIM_CCxChannelCmd+0x6e>
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	2b0c      	cmp	r3, #12
 80073e4:	d007      	beq.n	80073f6 <TIM_CCxChannelCmd+0x6e>
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	2b3c      	cmp	r3, #60	; 0x3c
 80073ea:	d004      	beq.n	80073f6 <TIM_CCxChannelCmd+0x6e>
 80073ec:	f641 510a 	movw	r1, #7434	; 0x1d0a
 80073f0:	4814      	ldr	r0, [pc, #80]	; (8007444 <TIM_CCxChannelCmd+0xbc>)
 80073f2:	f7fa f921 	bl	8001638 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	f003 031f 	and.w	r3, r3, #31
 80073fc:	2201      	movs	r2, #1
 80073fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007402:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6a1a      	ldr	r2, [r3, #32]
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	43db      	mvns	r3, r3
 800740c:	401a      	ands	r2, r3
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6a1a      	ldr	r2, [r3, #32]
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	f003 031f 	and.w	r3, r3, #31
 800741c:	6879      	ldr	r1, [r7, #4]
 800741e:	fa01 f303 	lsl.w	r3, r1, r3
 8007422:	431a      	orrs	r2, r3
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	621a      	str	r2, [r3, #32]
}
 8007428:	bf00      	nop
 800742a:	3718      	adds	r7, #24
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}
 8007430:	40012c00 	.word	0x40012c00
 8007434:	40013400 	.word	0x40013400
 8007438:	40000400 	.word	0x40000400
 800743c:	40000800 	.word	0x40000800
 8007440:	40000c00 	.word	0x40000c00
 8007444:	0800b410 	.word	0x0800b410

08007448 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a1c      	ldr	r2, [pc, #112]	; (80074c4 <TIM_ResetCallback+0x7c>)
 8007454:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a1b      	ldr	r2, [pc, #108]	; (80074c8 <TIM_ResetCallback+0x80>)
 800745c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a1a      	ldr	r2, [pc, #104]	; (80074cc <TIM_ResetCallback+0x84>)
 8007464:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a19      	ldr	r2, [pc, #100]	; (80074d0 <TIM_ResetCallback+0x88>)
 800746c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a18      	ldr	r2, [pc, #96]	; (80074d4 <TIM_ResetCallback+0x8c>)
 8007474:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a17      	ldr	r2, [pc, #92]	; (80074d8 <TIM_ResetCallback+0x90>)
 800747c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4a16      	ldr	r2, [pc, #88]	; (80074dc <TIM_ResetCallback+0x94>)
 8007484:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a15      	ldr	r2, [pc, #84]	; (80074e0 <TIM_ResetCallback+0x98>)
 800748c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a14      	ldr	r2, [pc, #80]	; (80074e4 <TIM_ResetCallback+0x9c>)
 8007494:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	4a13      	ldr	r2, [pc, #76]	; (80074e8 <TIM_ResetCallback+0xa0>)
 800749c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a12      	ldr	r2, [pc, #72]	; (80074ec <TIM_ResetCallback+0xa4>)
 80074a4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4a11      	ldr	r2, [pc, #68]	; (80074f0 <TIM_ResetCallback+0xa8>)
 80074ac:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a10      	ldr	r2, [pc, #64]	; (80074f4 <TIM_ResetCallback+0xac>)
 80074b4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80074b8:	bf00      	nop
 80074ba:	370c      	adds	r7, #12
 80074bc:	46bd      	mov	sp, r7
 80074be:	bc80      	pop	{r7}
 80074c0:	4770      	bx	lr
 80074c2:	bf00      	nop
 80074c4:	080015cd 	.word	0x080015cd
 80074c8:	08006c65 	.word	0x08006c65
 80074cc:	08006cbf 	.word	0x08006cbf
 80074d0:	08006cd1 	.word	0x08006cd1
 80074d4:	08001585 	.word	0x08001585
 80074d8:	08006c89 	.word	0x08006c89
 80074dc:	08006c77 	.word	0x08006c77
 80074e0:	08006c9b 	.word	0x08006c9b
 80074e4:	08006cad 	.word	0x08006cad
 80074e8:	08006ce3 	.word	0x08006ce3
 80074ec:	08007831 	.word	0x08007831
 80074f0:	08007843 	.word	0x08007843
 80074f4:	08007855 	.word	0x08007855

080074f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a5c      	ldr	r2, [pc, #368]	; (8007678 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d027      	beq.n	800755c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a5a      	ldr	r2, [pc, #360]	; (800767c <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d022      	beq.n	800755c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800751e:	d01d      	beq.n	800755c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a56      	ldr	r2, [pc, #344]	; (8007680 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d018      	beq.n	800755c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a55      	ldr	r2, [pc, #340]	; (8007684 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d013      	beq.n	800755c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a53      	ldr	r2, [pc, #332]	; (8007688 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d00e      	beq.n	800755c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a52      	ldr	r2, [pc, #328]	; (800768c <HAL_TIMEx_MasterConfigSynchronization+0x194>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d009      	beq.n	800755c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a50      	ldr	r2, [pc, #320]	; (8007690 <HAL_TIMEx_MasterConfigSynchronization+0x198>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d004      	beq.n	800755c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007552:	f240 7186 	movw	r1, #1926	; 0x786
 8007556:	484f      	ldr	r0, [pc, #316]	; (8007694 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 8007558:	f7fa f86e 	bl	8001638 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d020      	beq.n	80075a6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2b10      	cmp	r3, #16
 800756a:	d01c      	beq.n	80075a6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2b20      	cmp	r3, #32
 8007572:	d018      	beq.n	80075a6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2b30      	cmp	r3, #48	; 0x30
 800757a:	d014      	beq.n	80075a6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2b40      	cmp	r3, #64	; 0x40
 8007582:	d010      	beq.n	80075a6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2b50      	cmp	r3, #80	; 0x50
 800758a:	d00c      	beq.n	80075a6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	2b60      	cmp	r3, #96	; 0x60
 8007592:	d008      	beq.n	80075a6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2b70      	cmp	r3, #112	; 0x70
 800759a:	d004      	beq.n	80075a6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800759c:	f240 7187 	movw	r1, #1927	; 0x787
 80075a0:	483c      	ldr	r0, [pc, #240]	; (8007694 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 80075a2:	f7fa f849 	bl	8001638 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	2b80      	cmp	r3, #128	; 0x80
 80075ac:	d008      	beq.n	80075c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d004      	beq.n	80075c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075b6:	f44f 61f1 	mov.w	r1, #1928	; 0x788
 80075ba:	4836      	ldr	r0, [pc, #216]	; (8007694 <HAL_TIMEx_MasterConfigSynchronization+0x19c>)
 80075bc:	f7fa f83c 	bl	8001638 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d101      	bne.n	80075ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80075ca:	2302      	movs	r3, #2
 80075cc:	e050      	b.n	8007670 <HAL_TIMEx_MasterConfigSynchronization+0x178>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2202      	movs	r2, #2
 80075da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a1a      	ldr	r2, [pc, #104]	; (8007678 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d018      	beq.n	8007644 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a19      	ldr	r2, [pc, #100]	; (800767c <HAL_TIMEx_MasterConfigSynchronization+0x184>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d013      	beq.n	8007644 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007624:	d00e      	beq.n	8007644 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a15      	ldr	r2, [pc, #84]	; (8007680 <HAL_TIMEx_MasterConfigSynchronization+0x188>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d009      	beq.n	8007644 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a13      	ldr	r2, [pc, #76]	; (8007684 <HAL_TIMEx_MasterConfigSynchronization+0x18c>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d004      	beq.n	8007644 <HAL_TIMEx_MasterConfigSynchronization+0x14c>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a12      	ldr	r2, [pc, #72]	; (8007688 <HAL_TIMEx_MasterConfigSynchronization+0x190>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d10c      	bne.n	800765e <HAL_TIMEx_MasterConfigSynchronization+0x166>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800764a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	4313      	orrs	r3, r2
 8007654:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68ba      	ldr	r2, [r7, #8]
 800765c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2201      	movs	r2, #1
 8007662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}
 8007678:	40012c00 	.word	0x40012c00
 800767c:	40013400 	.word	0x40013400
 8007680:	40000400 	.word	0x40000400
 8007684:	40000800 	.word	0x40000800
 8007688:	40000c00 	.word	0x40000c00
 800768c:	40001000 	.word	0x40001000
 8007690:	40001400 	.word	0x40001400
 8007694:	0800b448 	.word	0x0800b448

08007698 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80076a2:	2300      	movs	r3, #0
 80076a4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a5e      	ldr	r2, [pc, #376]	; (8007824 <HAL_TIMEx_ConfigBreakDeadTime+0x18c>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d009      	beq.n	80076c4 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a5c      	ldr	r2, [pc, #368]	; (8007828 <HAL_TIMEx_ConfigBreakDeadTime+0x190>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d004      	beq.n	80076c4 <HAL_TIMEx_ConfigBreakDeadTime+0x2c>
 80076ba:	f240 71c3 	movw	r1, #1987	; 0x7c3
 80076be:	485b      	ldr	r0, [pc, #364]	; (800782c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80076c0:	f7f9 ffba 	bl	8001638 <assert_failed>
  assert_param(IS_TIM_OSSR_STATE(sBreakDeadTimeConfig->OffStateRunMode));
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076cc:	d008      	beq.n	80076e0 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d004      	beq.n	80076e0 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 80076d6:	f240 71c4 	movw	r1, #1988	; 0x7c4
 80076da:	4854      	ldr	r0, [pc, #336]	; (800782c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80076dc:	f7f9 ffac 	bl	8001638 <assert_failed>
  assert_param(IS_TIM_OSSI_STATE(sBreakDeadTimeConfig->OffStateIDLEMode));
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076e8:	d008      	beq.n	80076fc <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d004      	beq.n	80076fc <HAL_TIMEx_ConfigBreakDeadTime+0x64>
 80076f2:	f240 71c5 	movw	r1, #1989	; 0x7c5
 80076f6:	484d      	ldr	r0, [pc, #308]	; (800782c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 80076f8:	f7f9 ff9e 	bl	8001638 <assert_failed>
  assert_param(IS_TIM_LOCK_LEVEL(sBreakDeadTimeConfig->LockLevel));
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d013      	beq.n	800772c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800770c:	d00e      	beq.n	800772c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007716:	d009      	beq.n	800772c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007720:	d004      	beq.n	800772c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
 8007722:	f240 71c6 	movw	r1, #1990	; 0x7c6
 8007726:	4841      	ldr	r0, [pc, #260]	; (800782c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007728:	f7f9 ff86 	bl	8001638 <assert_failed>
  assert_param(IS_TIM_DEADTIME(sBreakDeadTimeConfig->DeadTime));
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	2bff      	cmp	r3, #255	; 0xff
 8007732:	d904      	bls.n	800773e <HAL_TIMEx_ConfigBreakDeadTime+0xa6>
 8007734:	f240 71c7 	movw	r1, #1991	; 0x7c7
 8007738:	483c      	ldr	r0, [pc, #240]	; (800782c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800773a:	f7f9 ff7d 	bl	8001638 <assert_failed>
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007746:	d008      	beq.n	800775a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d004      	beq.n	800775a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007750:	f44f 61f9 	mov.w	r1, #1992	; 0x7c8
 8007754:	4835      	ldr	r0, [pc, #212]	; (800782c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007756:	f7f9 ff6f 	bl	8001638 <assert_failed>
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d009      	beq.n	8007776 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800776a:	d004      	beq.n	8007776 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800776c:	f240 71c9 	movw	r1, #1993	; 0x7c9
 8007770:	482e      	ldr	r0, [pc, #184]	; (800782c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 8007772:	f7f9 ff61 	bl	8001638 <assert_failed>
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	69db      	ldr	r3, [r3, #28]
 800777a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800777e:	d008      	beq.n	8007792 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	69db      	ldr	r3, [r3, #28]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d004      	beq.n	8007792 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8007788:	f240 71ca 	movw	r1, #1994	; 0x7ca
 800778c:	4827      	ldr	r0, [pc, #156]	; (800782c <HAL_TIMEx_ConfigBreakDeadTime+0x194>)
 800778e:	f7f9 ff53 	bl	8001638 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007798:	2b01      	cmp	r3, #1
 800779a:	d101      	bne.n	80077a0 <HAL_TIMEx_ConfigBreakDeadTime+0x108>
 800779c:	2302      	movs	r3, #2
 800779e:	e03d      	b.n	800781c <HAL_TIMEx_ConfigBreakDeadTime+0x184>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	68db      	ldr	r3, [r3, #12]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	4313      	orrs	r3, r2
 80077c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4313      	orrs	r3, r2
 80077de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	695b      	ldr	r3, [r3, #20]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	69db      	ldr	r3, [r3, #28]
 8007806:	4313      	orrs	r3, r2
 8007808:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68fa      	ldr	r2, [r7, #12]
 8007810:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	3710      	adds	r7, #16
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	40012c00 	.word	0x40012c00
 8007828:	40013400 	.word	0x40013400
 800782c:	0800b448 	.word	0x0800b448

08007830 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007838:	bf00      	nop
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	bc80      	pop	{r7}
 8007840:	4770      	bx	lr

08007842 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007842:	b480      	push	{r7}
 8007844:	b083      	sub	sp, #12
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800784a:	bf00      	nop
 800784c:	370c      	adds	r7, #12
 800784e:	46bd      	mov	sp, r7
 8007850:	bc80      	pop	{r7}
 8007852:	4770      	bx	lr

08007854 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800785c:	bf00      	nop
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	bc80      	pop	{r7}
 8007864:	4770      	bx	lr
	...

08007868 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d101      	bne.n	800787a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007876:	2301      	movs	r3, #1
 8007878:	e0a7      	b.n	80079ca <HAL_UART_Init+0x162>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	699b      	ldr	r3, [r3, #24]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d02c      	beq.n	80078dc <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a53      	ldr	r2, [pc, #332]	; (80079d4 <HAL_UART_Init+0x16c>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d00e      	beq.n	80078aa <HAL_UART_Init+0x42>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a51      	ldr	r2, [pc, #324]	; (80079d8 <HAL_UART_Init+0x170>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d009      	beq.n	80078aa <HAL_UART_Init+0x42>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a50      	ldr	r2, [pc, #320]	; (80079dc <HAL_UART_Init+0x174>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d004      	beq.n	80078aa <HAL_UART_Init+0x42>
 80078a0:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 80078a4:	484e      	ldr	r0, [pc, #312]	; (80079e0 <HAL_UART_Init+0x178>)
 80078a6:	f7f9 fec7 	bl	8001638 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	699b      	ldr	r3, [r3, #24]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d032      	beq.n	8007918 <HAL_UART_Init+0xb0>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078ba:	d02d      	beq.n	8007918 <HAL_UART_Init+0xb0>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	699b      	ldr	r3, [r3, #24]
 80078c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078c4:	d028      	beq.n	8007918 <HAL_UART_Init+0xb0>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	699b      	ldr	r3, [r3, #24]
 80078ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078ce:	d023      	beq.n	8007918 <HAL_UART_Init+0xb0>
 80078d0:	f240 116d 	movw	r1, #365	; 0x16d
 80078d4:	4842      	ldr	r0, [pc, #264]	; (80079e0 <HAL_UART_Init+0x178>)
 80078d6:	f7f9 feaf 	bl	8001638 <assert_failed>
 80078da:	e01d      	b.n	8007918 <HAL_UART_Init+0xb0>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a3c      	ldr	r2, [pc, #240]	; (80079d4 <HAL_UART_Init+0x16c>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d018      	beq.n	8007918 <HAL_UART_Init+0xb0>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a3b      	ldr	r2, [pc, #236]	; (80079d8 <HAL_UART_Init+0x170>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d013      	beq.n	8007918 <HAL_UART_Init+0xb0>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a39      	ldr	r2, [pc, #228]	; (80079dc <HAL_UART_Init+0x174>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d00e      	beq.n	8007918 <HAL_UART_Init+0xb0>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a39      	ldr	r2, [pc, #228]	; (80079e4 <HAL_UART_Init+0x17c>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d009      	beq.n	8007918 <HAL_UART_Init+0xb0>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a37      	ldr	r2, [pc, #220]	; (80079e8 <HAL_UART_Init+0x180>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d004      	beq.n	8007918 <HAL_UART_Init+0xb0>
 800790e:	f240 1171 	movw	r1, #369	; 0x171
 8007912:	4833      	ldr	r0, [pc, #204]	; (80079e0 <HAL_UART_Init+0x178>)
 8007914:	f7f9 fe90 	bl	8001638 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d009      	beq.n	8007934 <HAL_UART_Init+0xcc>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007928:	d004      	beq.n	8007934 <HAL_UART_Init+0xcc>
 800792a:	f240 1173 	movw	r1, #371	; 0x173
 800792e:	482c      	ldr	r0, [pc, #176]	; (80079e0 <HAL_UART_Init+0x178>)
 8007930:	f7f9 fe82 	bl	8001638 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800793a:	b2db      	uxtb	r3, r3
 800793c:	2b00      	cmp	r3, #0
 800793e:	d111      	bne.n	8007964 <HAL_UART_Init+0xfc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fb0d 	bl	8007f68 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007952:	2b00      	cmp	r3, #0
 8007954:	d102      	bne.n	800795c <HAL_UART_Init+0xf4>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a24      	ldr	r2, [pc, #144]	; (80079ec <HAL_UART_Init+0x184>)
 800795a:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2224      	movs	r2, #36	; 0x24
 8007968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68da      	ldr	r2, [r3, #12]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800797a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 fd01 	bl	8008384 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	691a      	ldr	r2, [r3, #16]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007990:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	695a      	ldr	r2, [r3, #20]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80079a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68da      	ldr	r2, [r3, #12]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80079b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2200      	movs	r2, #0
 80079b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2220      	movs	r2, #32
 80079bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2220      	movs	r2, #32
 80079c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3708      	adds	r7, #8
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	40013800 	.word	0x40013800
 80079d8:	40004400 	.word	0x40004400
 80079dc:	40004800 	.word	0x40004800
 80079e0:	0800b484 	.word	0x0800b484
 80079e4:	40004c00 	.word	0x40004c00
 80079e8:	40005000 	.word	0x40005000
 80079ec:	08001acd 	.word	0x08001acd

080079f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b08a      	sub	sp, #40	; 0x28
 80079f4:	af02      	add	r7, sp, #8
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	603b      	str	r3, [r7, #0]
 80079fc:	4613      	mov	r3, r2
 80079fe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007a00:	2300      	movs	r3, #0
 8007a02:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	2b20      	cmp	r3, #32
 8007a0e:	d17c      	bne.n	8007b0a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d002      	beq.n	8007a1c <HAL_UART_Transmit+0x2c>
 8007a16:	88fb      	ldrh	r3, [r7, #6]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d101      	bne.n	8007a20 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e075      	b.n	8007b0c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d101      	bne.n	8007a2e <HAL_UART_Transmit+0x3e>
 8007a2a:	2302      	movs	r3, #2
 8007a2c:	e06e      	b.n	8007b0c <HAL_UART_Transmit+0x11c>
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2201      	movs	r2, #1
 8007a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2221      	movs	r2, #33	; 0x21
 8007a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a44:	f7fa faa4 	bl	8001f90 <HAL_GetTick>
 8007a48:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	88fa      	ldrh	r2, [r7, #6]
 8007a4e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	88fa      	ldrh	r2, [r7, #6]
 8007a54:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a5e:	d108      	bne.n	8007a72 <HAL_UART_Transmit+0x82>
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	691b      	ldr	r3, [r3, #16]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d104      	bne.n	8007a72 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	61bb      	str	r3, [r7, #24]
 8007a70:	e003      	b.n	8007a7a <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a76:	2300      	movs	r3, #0
 8007a78:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007a82:	e02a      	b.n	8007ada <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	2180      	movs	r1, #128	; 0x80
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f000 faa0 	bl	8007fd4 <UART_WaitOnFlagUntilTimeout>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d001      	beq.n	8007a9e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	e036      	b.n	8007b0c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d10b      	bne.n	8007abc <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	881b      	ldrh	r3, [r3, #0]
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ab2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	3302      	adds	r3, #2
 8007ab8:	61bb      	str	r3, [r7, #24]
 8007aba:	e007      	b.n	8007acc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	781a      	ldrb	r2, [r3, #0]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	3b01      	subs	r3, #1
 8007ad4:	b29a      	uxth	r2, r3
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1cf      	bne.n	8007a84 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	9300      	str	r3, [sp, #0]
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	2200      	movs	r2, #0
 8007aec:	2140      	movs	r1, #64	; 0x40
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f000 fa70 	bl	8007fd4 <UART_WaitOnFlagUntilTimeout>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d001      	beq.n	8007afe <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007afa:	2303      	movs	r3, #3
 8007afc:	e006      	b.n	8007b0c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2220      	movs	r2, #32
 8007b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	e000      	b.n	8007b0c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007b0a:	2302      	movs	r3, #2
  }
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3720      	adds	r7, #32
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	4613      	mov	r3, r2
 8007b20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	2b20      	cmp	r3, #32
 8007b2c:	d11d      	bne.n	8007b6a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d002      	beq.n	8007b3a <HAL_UART_Receive_IT+0x26>
 8007b34:	88fb      	ldrh	r3, [r7, #6]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e016      	b.n	8007b6c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d101      	bne.n	8007b4c <HAL_UART_Receive_IT+0x38>
 8007b48:	2302      	movs	r3, #2
 8007b4a:	e00f      	b.n	8007b6c <HAL_UART_Receive_IT+0x58>
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007b5a:	88fb      	ldrh	r3, [r7, #6]
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	68b9      	ldr	r1, [r7, #8]
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f000 fa81 	bl	8008068 <UART_Start_Receive_IT>
 8007b66:	4603      	mov	r3, r0
 8007b68:	e000      	b.n	8007b6c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007b6a:	2302      	movs	r3, #2
  }
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b08a      	sub	sp, #40	; 0x28
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	695b      	ldr	r3, [r3, #20]
 8007b92:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007b94:	2300      	movs	r3, #0
 8007b96:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9e:	f003 030f 	and.w	r3, r3, #15
 8007ba2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10d      	bne.n	8007bc6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bac:	f003 0320 	and.w	r3, r3, #32
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d008      	beq.n	8007bc6 <HAL_UART_IRQHandler+0x52>
 8007bb4:	6a3b      	ldr	r3, [r7, #32]
 8007bb6:	f003 0320 	and.w	r3, r3, #32
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d003      	beq.n	8007bc6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 fb34 	bl	800822c <UART_Receive_IT>
      return;
 8007bc4:	e180      	b.n	8007ec8 <HAL_UART_IRQHandler+0x354>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f000 80b4 	beq.w	8007d36 <HAL_UART_IRQHandler+0x1c2>
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	f003 0301 	and.w	r3, r3, #1
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d105      	bne.n	8007be4 <HAL_UART_IRQHandler+0x70>
 8007bd8:	6a3b      	ldr	r3, [r7, #32]
 8007bda:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f000 80a9 	beq.w	8007d36 <HAL_UART_IRQHandler+0x1c2>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be6:	f003 0301 	and.w	r3, r3, #1
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00a      	beq.n	8007c04 <HAL_UART_IRQHandler+0x90>
 8007bee:	6a3b      	ldr	r3, [r7, #32]
 8007bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d005      	beq.n	8007c04 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfc:	f043 0201 	orr.w	r2, r3, #1
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c06:	f003 0304 	and.w	r3, r3, #4
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00a      	beq.n	8007c24 <HAL_UART_IRQHandler+0xb0>
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	f003 0301 	and.w	r3, r3, #1
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d005      	beq.n	8007c24 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1c:	f043 0202 	orr.w	r2, r3, #2
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c26:	f003 0302 	and.w	r3, r3, #2
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d00a      	beq.n	8007c44 <HAL_UART_IRQHandler+0xd0>
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	f003 0301 	and.w	r3, r3, #1
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d005      	beq.n	8007c44 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c3c:	f043 0204 	orr.w	r2, r3, #4
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c46:	f003 0308 	and.w	r3, r3, #8
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00f      	beq.n	8007c6e <HAL_UART_IRQHandler+0xfa>
 8007c4e:	6a3b      	ldr	r3, [r7, #32]
 8007c50:	f003 0320 	and.w	r3, r3, #32
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d104      	bne.n	8007c62 <HAL_UART_IRQHandler+0xee>
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	f003 0301 	and.w	r3, r3, #1
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d005      	beq.n	8007c6e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c66:	f043 0208 	orr.w	r2, r3, #8
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	f000 8123 	beq.w	8007ebe <HAL_UART_IRQHandler+0x34a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7a:	f003 0320 	and.w	r3, r3, #32
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d007      	beq.n	8007c92 <HAL_UART_IRQHandler+0x11e>
 8007c82:	6a3b      	ldr	r3, [r7, #32]
 8007c84:	f003 0320 	and.w	r3, r3, #32
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d002      	beq.n	8007c92 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 facd 	bl	800822c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	695b      	ldr	r3, [r3, #20]
 8007c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	bf14      	ite	ne
 8007ca0:	2301      	movne	r3, #1
 8007ca2:	2300      	moveq	r3, #0
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cac:	f003 0308 	and.w	r3, r3, #8
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d102      	bne.n	8007cba <HAL_UART_IRQHandler+0x146>
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d033      	beq.n	8007d22 <HAL_UART_IRQHandler+0x1ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fa0d 	bl	80080da <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	695b      	ldr	r3, [r3, #20]
 8007cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d024      	beq.n	8007d18 <HAL_UART_IRQHandler+0x1a4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	695a      	ldr	r2, [r3, #20]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cdc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d013      	beq.n	8007d0e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cea:	4a79      	ldr	r2, [pc, #484]	; (8007ed0 <HAL_UART_IRQHandler+0x35c>)
 8007cec:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7fb f8e6 	bl	8002ec4 <HAL_DMA_Abort_IT>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d019      	beq.n	8007d32 <HAL_UART_IRQHandler+0x1be>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d08:	4610      	mov	r0, r2
 8007d0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d0c:	e011      	b.n	8007d32 <HAL_UART_IRQHandler+0x1be>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d16:	e00c      	b.n	8007d32 <HAL_UART_IRQHandler+0x1be>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d20:	e007      	b.n	8007d32 <HAL_UART_IRQHandler+0x1be>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007d30:	e0c5      	b.n	8007ebe <HAL_UART_IRQHandler+0x34a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d32:	bf00      	nop
    return;
 8007d34:	e0c3      	b.n	8007ebe <HAL_UART_IRQHandler+0x34a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	f040 80a3 	bne.w	8007e86 <HAL_UART_IRQHandler+0x312>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d42:	f003 0310 	and.w	r3, r3, #16
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f000 809d 	beq.w	8007e86 <HAL_UART_IRQHandler+0x312>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007d4c:	6a3b      	ldr	r3, [r7, #32]
 8007d4e:	f003 0310 	and.w	r3, r3, #16
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	f000 8097 	beq.w	8007e86 <HAL_UART_IRQHandler+0x312>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d58:	2300      	movs	r3, #0
 8007d5a:	60fb      	str	r3, [r7, #12]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	60fb      	str	r3, [r7, #12]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	60fb      	str	r3, [r7, #12]
 8007d6c:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	695b      	ldr	r3, [r3, #20]
 8007d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d04f      	beq.n	8007e1c <HAL_UART_IRQHandler+0x2a8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007d86:	8a3b      	ldrh	r3, [r7, #16]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f000 809a 	beq.w	8007ec2 <HAL_UART_IRQHandler+0x34e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d92:	8a3a      	ldrh	r2, [r7, #16]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	f080 8094 	bcs.w	8007ec2 <HAL_UART_IRQHandler+0x34e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	8a3a      	ldrh	r2, [r7, #16]
 8007d9e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da4:	699b      	ldr	r3, [r3, #24]
 8007da6:	2b20      	cmp	r3, #32
 8007da8:	d02b      	beq.n	8007e02 <HAL_UART_IRQHandler+0x28e>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68da      	ldr	r2, [r3, #12]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007db8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	695a      	ldr	r2, [r3, #20]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f022 0201 	bic.w	r2, r2, #1
 8007dc8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	695a      	ldr	r2, [r3, #20]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dd8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2220      	movs	r2, #32
 8007dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	68da      	ldr	r2, [r3, #12]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f022 0210 	bic.w	r2, r2, #16
 8007df6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f7fb f827 	bl	8002e50 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 8007e0e:	b292      	uxth	r2, r2
 8007e10:	1a8a      	subs	r2, r1, r2
 8007e12:	b292      	uxth	r2, r2
 8007e14:	4611      	mov	r1, r2
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif
      }
      return;
 8007e1a:	e052      	b.n	8007ec2 <HAL_UART_IRQHandler+0x34e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d048      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x352>
          &&(nb_rx_data > 0U) )
 8007e34:	8a7b      	ldrh	r3, [r7, #18]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d045      	beq.n	8007ec6 <HAL_UART_IRQHandler+0x352>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	68da      	ldr	r2, [r3, #12]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007e48:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	695a      	ldr	r2, [r3, #20]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	f022 0201 	bic.w	r2, r2, #1
 8007e58:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2220      	movs	r2, #32
 8007e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	68da      	ldr	r2, [r3, #12]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f022 0210 	bic.w	r2, r2, #16
 8007e76:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e7c:	8a7a      	ldrh	r2, [r7, #18]
 8007e7e:	4611      	mov	r1, r2
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif
      }
      return;
 8007e84:	e01f      	b.n	8007ec6 <HAL_UART_IRQHandler+0x352>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d008      	beq.n	8007ea2 <HAL_UART_IRQHandler+0x32e>
 8007e90:	6a3b      	ldr	r3, [r7, #32]
 8007e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d003      	beq.n	8007ea2 <HAL_UART_IRQHandler+0x32e>
  {
    UART_Transmit_IT(huart);
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 f95e 	bl	800815c <UART_Transmit_IT>
    return;
 8007ea0:	e012      	b.n	8007ec8 <HAL_UART_IRQHandler+0x354>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00d      	beq.n	8007ec8 <HAL_UART_IRQHandler+0x354>
 8007eac:	6a3b      	ldr	r3, [r7, #32]
 8007eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d008      	beq.n	8007ec8 <HAL_UART_IRQHandler+0x354>
  {
    UART_EndTransmit_IT(huart);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f99f 	bl	80081fa <UART_EndTransmit_IT>
    return;
 8007ebc:	e004      	b.n	8007ec8 <HAL_UART_IRQHandler+0x354>
    return;
 8007ebe:	bf00      	nop
 8007ec0:	e002      	b.n	8007ec8 <HAL_UART_IRQHandler+0x354>
      return;
 8007ec2:	bf00      	nop
 8007ec4:	e000      	b.n	8007ec8 <HAL_UART_IRQHandler+0x354>
      return;
 8007ec6:	bf00      	nop
  }
}
 8007ec8:	3728      	adds	r7, #40	; 0x28
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	08008133 	.word	0x08008133

08007ed4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007edc:	bf00      	nop
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bc80      	pop	{r7}
 8007ee4:	4770      	bx	lr

08007ee6 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007ee6:	b480      	push	{r7}
 8007ee8:	b083      	sub	sp, #12
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007eee:	bf00      	nop
 8007ef0:	370c      	adds	r7, #12
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bc80      	pop	{r7}
 8007ef6:	4770      	bx	lr

08007ef8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007f00:	bf00      	nop
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bc80      	pop	{r7}
 8007f08:	4770      	bx	lr

08007f0a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f0a:	b480      	push	{r7}
 8007f0c:	b083      	sub	sp, #12
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007f12:	bf00      	nop
 8007f14:	370c      	adds	r7, #12
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bc80      	pop	{r7}
 8007f1a:	4770      	bx	lr

08007f1c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8007f24:	bf00      	nop
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bc80      	pop	{r7}
 8007f2c:	4770      	bx	lr

08007f2e <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8007f2e:	b480      	push	{r7}
 8007f30:	b083      	sub	sp, #12
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8007f36:	bf00      	nop
 8007f38:	370c      	adds	r7, #12
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bc80      	pop	{r7}
 8007f3e:	4770      	bx	lr

08007f40 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007f48:	bf00      	nop
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bc80      	pop	{r7}
 8007f50:	4770      	bx	lr

08007f52 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f52:	b480      	push	{r7}
 8007f54:	b083      	sub	sp, #12
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f5e:	bf00      	nop
 8007f60:	370c      	adds	r7, #12
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bc80      	pop	{r7}
 8007f66:	4770      	bx	lr

08007f68 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	4a0f      	ldr	r2, [pc, #60]	; (8007fb0 <UART_InitCallbacksToDefault+0x48>)
 8007f74:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a0e      	ldr	r2, [pc, #56]	; (8007fb4 <UART_InitCallbacksToDefault+0x4c>)
 8007f7a:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	4a0e      	ldr	r2, [pc, #56]	; (8007fb8 <UART_InitCallbacksToDefault+0x50>)
 8007f80:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a0d      	ldr	r2, [pc, #52]	; (8007fbc <UART_InitCallbacksToDefault+0x54>)
 8007f86:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a0d      	ldr	r2, [pc, #52]	; (8007fc0 <UART_InitCallbacksToDefault+0x58>)
 8007f8c:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4a0c      	ldr	r2, [pc, #48]	; (8007fc4 <UART_InitCallbacksToDefault+0x5c>)
 8007f92:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4a0c      	ldr	r2, [pc, #48]	; (8007fc8 <UART_InitCallbacksToDefault+0x60>)
 8007f98:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a0b      	ldr	r2, [pc, #44]	; (8007fcc <UART_InitCallbacksToDefault+0x64>)
 8007f9e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a0b      	ldr	r2, [pc, #44]	; (8007fd0 <UART_InitCallbacksToDefault+0x68>)
 8007fa4:	669a      	str	r2, [r3, #104]	; 0x68

}
 8007fa6:	bf00      	nop
 8007fa8:	370c      	adds	r7, #12
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bc80      	pop	{r7}
 8007fae:	4770      	bx	lr
 8007fb0:	08007ee7 	.word	0x08007ee7
 8007fb4:	08007ed5 	.word	0x08007ed5
 8007fb8:	08007ef9 	.word	0x08007ef9
 8007fbc:	080015ed 	.word	0x080015ed
 8007fc0:	08007f0b 	.word	0x08007f0b
 8007fc4:	08007f1d 	.word	0x08007f1d
 8007fc8:	08007f2f 	.word	0x08007f2f
 8007fcc:	08007f41 	.word	0x08007f41
 8007fd0:	08007f53 	.word	0x08007f53

08007fd4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	603b      	str	r3, [r7, #0]
 8007fe0:	4613      	mov	r3, r2
 8007fe2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fe4:	e02c      	b.n	8008040 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fec:	d028      	beq.n	8008040 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d007      	beq.n	8008004 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ff4:	f7f9 ffcc 	bl	8001f90 <HAL_GetTick>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	69ba      	ldr	r2, [r7, #24]
 8008000:	429a      	cmp	r2, r3
 8008002:	d21d      	bcs.n	8008040 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	68da      	ldr	r2, [r3, #12]
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008012:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	695a      	ldr	r2, [r3, #20]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f022 0201 	bic.w	r2, r2, #1
 8008022:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2220      	movs	r2, #32
 8008028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2220      	movs	r2, #32
 8008030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2200      	movs	r2, #0
 8008038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800803c:	2303      	movs	r3, #3
 800803e:	e00f      	b.n	8008060 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	4013      	ands	r3, r2
 800804a:	68ba      	ldr	r2, [r7, #8]
 800804c:	429a      	cmp	r2, r3
 800804e:	bf0c      	ite	eq
 8008050:	2301      	moveq	r3, #1
 8008052:	2300      	movne	r3, #0
 8008054:	b2db      	uxtb	r3, r3
 8008056:	461a      	mov	r2, r3
 8008058:	79fb      	ldrb	r3, [r7, #7]
 800805a:	429a      	cmp	r2, r3
 800805c:	d0c3      	beq.n	8007fe6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	4613      	mov	r3, r2
 8008074:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	68ba      	ldr	r2, [r7, #8]
 800807a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	88fa      	ldrh	r2, [r7, #6]
 8008080:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	88fa      	ldrh	r2, [r7, #6]
 8008086:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2200      	movs	r2, #0
 800808c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2222      	movs	r2, #34	; 0x22
 8008092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	2200      	movs	r2, #0
 800809a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68da      	ldr	r2, [r3, #12]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080ac:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	695a      	ldr	r2, [r3, #20]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f042 0201 	orr.w	r2, r2, #1
 80080bc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	68da      	ldr	r2, [r3, #12]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f042 0220 	orr.w	r2, r2, #32
 80080cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3714      	adds	r7, #20
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bc80      	pop	{r7}
 80080d8:	4770      	bx	lr

080080da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080da:	b480      	push	{r7}
 80080dc:	b083      	sub	sp, #12
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	68da      	ldr	r2, [r3, #12]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80080f0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	695a      	ldr	r2, [r3, #20]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f022 0201 	bic.w	r2, r2, #1
 8008100:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008106:	2b01      	cmp	r3, #1
 8008108:	d107      	bne.n	800811a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	68da      	ldr	r2, [r3, #12]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f022 0210 	bic.w	r2, r2, #16
 8008118:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2220      	movs	r2, #32
 800811e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008128:	bf00      	nop
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	bc80      	pop	{r7}
 8008130:	4770      	bx	lr

08008132 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b084      	sub	sp, #16
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2200      	movs	r2, #0
 8008144:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008154:	bf00      	nop
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800816a:	b2db      	uxtb	r3, r3
 800816c:	2b21      	cmp	r3, #33	; 0x21
 800816e:	d13e      	bne.n	80081ee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008178:	d114      	bne.n	80081a4 <UART_Transmit_IT+0x48>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d110      	bne.n	80081a4 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a1b      	ldr	r3, [r3, #32]
 8008186:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	881b      	ldrh	r3, [r3, #0]
 800818c:	461a      	mov	r2, r3
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008196:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6a1b      	ldr	r3, [r3, #32]
 800819c:	1c9a      	adds	r2, r3, #2
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	621a      	str	r2, [r3, #32]
 80081a2:	e008      	b.n	80081b6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6a1b      	ldr	r3, [r3, #32]
 80081a8:	1c59      	adds	r1, r3, #1
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	6211      	str	r1, [r2, #32]
 80081ae:	781a      	ldrb	r2, [r3, #0]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	3b01      	subs	r3, #1
 80081be:	b29b      	uxth	r3, r3
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	4619      	mov	r1, r3
 80081c4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d10f      	bne.n	80081ea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	68da      	ldr	r2, [r3, #12]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68da      	ldr	r2, [r3, #12]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80081ea:	2300      	movs	r3, #0
 80081ec:	e000      	b.n	80081f0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80081ee:	2302      	movs	r3, #2
  }
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3714      	adds	r7, #20
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bc80      	pop	{r7}
 80081f8:	4770      	bx	lr

080081fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b082      	sub	sp, #8
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68da      	ldr	r2, [r3, #12]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008210:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2220      	movs	r2, #32
 8008216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008222:	2300      	movs	r3, #0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3708      	adds	r7, #8
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b086      	sub	sp, #24
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800823a:	b2db      	uxtb	r3, r3
 800823c:	2b22      	cmp	r3, #34	; 0x22
 800823e:	f040 809b 	bne.w	8008378 <UART_Receive_IT+0x14c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800824a:	d117      	bne.n	800827c <UART_Receive_IT+0x50>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d113      	bne.n	800827c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008254:	2300      	movs	r3, #0
 8008256:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800825c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	b29b      	uxth	r3, r3
 8008266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800826a:	b29a      	uxth	r2, r3
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008274:	1c9a      	adds	r2, r3, #2
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	629a      	str	r2, [r3, #40]	; 0x28
 800827a:	e026      	b.n	80082ca <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008280:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8008282:	2300      	movs	r3, #0
 8008284:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800828e:	d007      	beq.n	80082a0 <UART_Receive_IT+0x74>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d10a      	bne.n	80082ae <UART_Receive_IT+0x82>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	691b      	ldr	r3, [r3, #16]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d106      	bne.n	80082ae <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	b2da      	uxtb	r2, r3
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	701a      	strb	r2, [r3, #0]
 80082ac:	e008      	b.n	80082c0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	b2db      	uxtb	r3, r3
 80082b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082ba:	b2da      	uxtb	r2, r3
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c4:	1c5a      	adds	r2, r3, #1
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	3b01      	subs	r3, #1
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	4619      	mov	r1, r3
 80082d8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d14a      	bne.n	8008374 <UART_Receive_IT+0x148>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68da      	ldr	r2, [r3, #12]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f022 0220 	bic.w	r2, r2, #32
 80082ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	68da      	ldr	r2, [r3, #12]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	695a      	ldr	r2, [r3, #20]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f022 0201 	bic.w	r2, r2, #1
 800830c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2220      	movs	r2, #32
 8008312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800831a:	2b01      	cmp	r3, #1
 800831c:	d124      	bne.n	8008368 <UART_Receive_IT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68da      	ldr	r2, [r3, #12]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f022 0210 	bic.w	r2, r2, #16
 8008332:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f003 0310 	and.w	r3, r3, #16
 800833e:	2b10      	cmp	r3, #16
 8008340:	d10a      	bne.n	8008358 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008342:	2300      	movs	r3, #0
 8008344:	60fb      	str	r3, [r7, #12]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	60fb      	str	r3, [r7, #12]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	60fb      	str	r3, [r7, #12]
 8008356:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8008360:	4611      	mov	r1, r2
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	4798      	blx	r3
 8008366:	e003      	b.n	8008370 <UART_Receive_IT+0x144>
      else
      {
       /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	4798      	blx	r3
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008370:	2300      	movs	r3, #0
 8008372:	e002      	b.n	800837a <UART_Receive_IT+0x14e>
    }
    return HAL_OK;
 8008374:	2300      	movs	r3, #0
 8008376:	e000      	b.n	800837a <UART_Receive_IT+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8008378:	2302      	movs	r3, #2
  }
}
 800837a:	4618      	mov	r0, r3
 800837c:	3718      	adds	r7, #24
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}
	...

08008384 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	4a5f      	ldr	r2, [pc, #380]	; (8008510 <UART_SetConfig+0x18c>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d904      	bls.n	80083a0 <UART_SetConfig+0x1c>
 8008396:	f640 6153 	movw	r1, #3667	; 0xe53
 800839a:	485e      	ldr	r0, [pc, #376]	; (8008514 <UART_SetConfig+0x190>)
 800839c:	f7f9 f94c 	bl	8001638 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	68db      	ldr	r3, [r3, #12]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d009      	beq.n	80083bc <UART_SetConfig+0x38>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	68db      	ldr	r3, [r3, #12]
 80083ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083b0:	d004      	beq.n	80083bc <UART_SetConfig+0x38>
 80083b2:	f640 6154 	movw	r1, #3668	; 0xe54
 80083b6:	4857      	ldr	r0, [pc, #348]	; (8008514 <UART_SetConfig+0x190>)
 80083b8:	f7f9 f93e 	bl	8001638 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00e      	beq.n	80083e2 <UART_SetConfig+0x5e>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	691b      	ldr	r3, [r3, #16]
 80083c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083cc:	d009      	beq.n	80083e2 <UART_SetConfig+0x5e>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80083d6:	d004      	beq.n	80083e2 <UART_SetConfig+0x5e>
 80083d8:	f640 6155 	movw	r1, #3669	; 0xe55
 80083dc:	484d      	ldr	r0, [pc, #308]	; (8008514 <UART_SetConfig+0x190>)
 80083de:	f7f9 f92b 	bl	8001638 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	695a      	ldr	r2, [r3, #20]
 80083e6:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80083ea:	4013      	ands	r3, r2
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d103      	bne.n	80083f8 <UART_SetConfig+0x74>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	695b      	ldr	r3, [r3, #20]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d104      	bne.n	8008402 <UART_SetConfig+0x7e>
 80083f8:	f640 6156 	movw	r1, #3670	; 0xe56
 80083fc:	4845      	ldr	r0, [pc, #276]	; (8008514 <UART_SetConfig+0x190>)
 80083fe:	f7f9 f91b 	bl	8001638 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	691b      	ldr	r3, [r3, #16]
 8008408:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	68da      	ldr	r2, [r3, #12]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	430a      	orrs	r2, r1
 8008416:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	689a      	ldr	r2, [r3, #8]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	431a      	orrs	r2, r3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	4313      	orrs	r3, r2
 8008428:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008434:	f023 030c 	bic.w	r3, r3, #12
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	6812      	ldr	r2, [r2, #0]
 800843c:	68b9      	ldr	r1, [r7, #8]
 800843e:	430b      	orrs	r3, r1
 8008440:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	695b      	ldr	r3, [r3, #20]
 8008448:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	699a      	ldr	r2, [r3, #24]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	430a      	orrs	r2, r1
 8008456:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a2e      	ldr	r2, [pc, #184]	; (8008518 <UART_SetConfig+0x194>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d103      	bne.n	800846a <UART_SetConfig+0xe6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008462:	f7fb feaf 	bl	80041c4 <HAL_RCC_GetPCLK2Freq>
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	e002      	b.n	8008470 <UART_SetConfig+0xec>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800846a:	f7fb fe97 	bl	800419c <HAL_RCC_GetPCLK1Freq>
 800846e:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	4613      	mov	r3, r2
 8008474:	009b      	lsls	r3, r3, #2
 8008476:	4413      	add	r3, r2
 8008478:	009a      	lsls	r2, r3, #2
 800847a:	441a      	add	r2, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	fbb2 f3f3 	udiv	r3, r2, r3
 8008486:	4a25      	ldr	r2, [pc, #148]	; (800851c <UART_SetConfig+0x198>)
 8008488:	fba2 2303 	umull	r2, r3, r2, r3
 800848c:	095b      	lsrs	r3, r3, #5
 800848e:	0119      	lsls	r1, r3, #4
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	4613      	mov	r3, r2
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	4413      	add	r3, r2
 8008498:	009a      	lsls	r2, r3, #2
 800849a:	441a      	add	r2, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80084a6:	4b1d      	ldr	r3, [pc, #116]	; (800851c <UART_SetConfig+0x198>)
 80084a8:	fba3 0302 	umull	r0, r3, r3, r2
 80084ac:	095b      	lsrs	r3, r3, #5
 80084ae:	2064      	movs	r0, #100	; 0x64
 80084b0:	fb00 f303 	mul.w	r3, r0, r3
 80084b4:	1ad3      	subs	r3, r2, r3
 80084b6:	011b      	lsls	r3, r3, #4
 80084b8:	3332      	adds	r3, #50	; 0x32
 80084ba:	4a18      	ldr	r2, [pc, #96]	; (800851c <UART_SetConfig+0x198>)
 80084bc:	fba2 2303 	umull	r2, r3, r2, r3
 80084c0:	095b      	lsrs	r3, r3, #5
 80084c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084c6:	4419      	add	r1, r3
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	4613      	mov	r3, r2
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	4413      	add	r3, r2
 80084d0:	009a      	lsls	r2, r3, #2
 80084d2:	441a      	add	r2, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	fbb2 f2f3 	udiv	r2, r2, r3
 80084de:	4b0f      	ldr	r3, [pc, #60]	; (800851c <UART_SetConfig+0x198>)
 80084e0:	fba3 0302 	umull	r0, r3, r3, r2
 80084e4:	095b      	lsrs	r3, r3, #5
 80084e6:	2064      	movs	r0, #100	; 0x64
 80084e8:	fb00 f303 	mul.w	r3, r0, r3
 80084ec:	1ad3      	subs	r3, r2, r3
 80084ee:	011b      	lsls	r3, r3, #4
 80084f0:	3332      	adds	r3, #50	; 0x32
 80084f2:	4a0a      	ldr	r2, [pc, #40]	; (800851c <UART_SetConfig+0x198>)
 80084f4:	fba2 2303 	umull	r2, r3, r2, r3
 80084f8:	095b      	lsrs	r3, r3, #5
 80084fa:	f003 020f 	and.w	r2, r3, #15
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	440a      	add	r2, r1
 8008504:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008506:	bf00      	nop
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	0044aa20 	.word	0x0044aa20
 8008514:	0800b484 	.word	0x0800b484
 8008518:	40013800 	.word	0x40013800
 800851c:	51eb851f 	.word	0x51eb851f

08008520 <BAT_init>:
static ADC_HandleTypeDef *g_BAT_adcHandle;
static RTC_HandleTypeDef *g_BAT_rtcHandle;
static RTC_TimeTypeDef    g_BAT_lastReadTime;

void BAT_init(ADC_HandleTypeDef *p_adcHandle, RTC_HandleTypeDef *p_rtcHandle)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
  RTC_TimeTypeDef l_time;
  RTC_DateTypeDef l_date;

  LOG_info("Initializing battery check");
 800852a:	4913      	ldr	r1, [pc, #76]	; (8008578 <BAT_init+0x58>)
 800852c:	2001      	movs	r0, #1
 800852e:	f001 f9d7 	bl	80098e0 <LOG_log>

  g_BAT_adcHandle = p_adcHandle;
 8008532:	4a12      	ldr	r2, [pc, #72]	; (800857c <BAT_init+0x5c>)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6013      	str	r3, [r2, #0]
  g_BAT_rtcHandle = p_rtcHandle;
 8008538:	4a11      	ldr	r2, [pc, #68]	; (8008580 <BAT_init+0x60>)
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	6013      	str	r3, [r2, #0]

  HAL_RTC_GetTime(g_BAT_rtcHandle, &l_time, RTC_FORMAT_BCD);
 800853e:	4b10      	ldr	r3, [pc, #64]	; (8008580 <BAT_init+0x60>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f107 010c 	add.w	r1, r7, #12
 8008546:	2201      	movs	r2, #1
 8008548:	4618      	mov	r0, r3
 800854a:	f7fc fa39 	bl	80049c0 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(g_BAT_rtcHandle, &l_date, RTC_FORMAT_BCD);
 800854e:	4b0c      	ldr	r3, [pc, #48]	; (8008580 <BAT_init+0x60>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f107 0108 	add.w	r1, r7, #8
 8008556:	2201      	movs	r2, #1
 8008558:	4618      	mov	r0, r3
 800855a:	f7fc fc35 	bl	8004dc8 <HAL_RTC_GetDate>

  g_BAT_lastReadTime = l_time;
 800855e:	4b09      	ldr	r3, [pc, #36]	; (8008584 <BAT_init+0x64>)
 8008560:	f107 020c 	add.w	r2, r7, #12
 8008564:	6812      	ldr	r2, [r2, #0]
 8008566:	4611      	mov	r1, r2
 8008568:	8019      	strh	r1, [r3, #0]
 800856a:	3302      	adds	r3, #2
 800856c:	0c12      	lsrs	r2, r2, #16
 800856e:	701a      	strb	r2, [r3, #0]

  return;
 8008570:	bf00      	nop
}
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}
 8008578:	0800b4c0 	.word	0x0800b4c0
 800857c:	200000a8 	.word	0x200000a8
 8008580:	200000ac 	.word	0x200000ac
 8008584:	200000b0 	.word	0x200000b0

08008588 <BAT_update>:

void BAT_update(uint32_t *p_voltageInMv)
{
 8008588:	b590      	push	{r4, r7, lr}
 800858a:	b087      	sub	sp, #28
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef l_time;
  RTC_DateTypeDef l_date;
  uint32_t        l_adcRawData;
  float           l_voltageInV;

  HAL_RTC_GetTime(g_BAT_rtcHandle, &l_time, RTC_FORMAT_BCD);
 8008590:	4b32      	ldr	r3, [pc, #200]	; (800865c <BAT_update+0xd4>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f107 010c 	add.w	r1, r7, #12
 8008598:	2201      	movs	r2, #1
 800859a:	4618      	mov	r0, r3
 800859c:	f7fc fa10 	bl	80049c0 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(g_BAT_rtcHandle, &l_date, RTC_FORMAT_BCD);
 80085a0:	4b2e      	ldr	r3, [pc, #184]	; (800865c <BAT_update+0xd4>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f107 0108 	add.w	r1, r7, #8
 80085a8:	2201      	movs	r2, #1
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7fc fc0c 	bl	8004dc8 <HAL_RTC_GetDate>

  if (UTI_turnRtcTimeToSeconds(&l_time) - UTI_turnRtcTimeToSeconds(&g_BAT_lastReadTime) >= BAT_POLLING_PERIOD_IN_S)
 80085b0:	f107 030c 	add.w	r3, r7, #12
 80085b4:	4618      	mov	r0, r3
 80085b6:	f001 fbe7 	bl	8009d88 <UTI_turnRtcTimeToSeconds>
 80085ba:	4604      	mov	r4, r0
 80085bc:	4828      	ldr	r0, [pc, #160]	; (8008660 <BAT_update+0xd8>)
 80085be:	f001 fbe3 	bl	8009d88 <UTI_turnRtcTimeToSeconds>
 80085c2:	4603      	mov	r3, r0
 80085c4:	1ae3      	subs	r3, r4, r3
 80085c6:	2b09      	cmp	r3, #9
 80085c8:	dd43      	ble.n	8008652 <BAT_update+0xca>
  {
    g_BAT_lastReadTime = l_time;
 80085ca:	4b25      	ldr	r3, [pc, #148]	; (8008660 <BAT_update+0xd8>)
 80085cc:	f107 020c 	add.w	r2, r7, #12
 80085d0:	6812      	ldr	r2, [r2, #0]
 80085d2:	4611      	mov	r1, r2
 80085d4:	8019      	strh	r1, [r3, #0]
 80085d6:	3302      	adds	r3, #2
 80085d8:	0c12      	lsrs	r2, r2, #16
 80085da:	701a      	strb	r2, [r3, #0]

    HAL_ADC_Start                  (g_BAT_adcHandle);
 80085dc:	4b21      	ldr	r3, [pc, #132]	; (8008664 <BAT_update+0xdc>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7f9 fe81 	bl	80022e8 <HAL_ADC_Start>
    HAL_ADC_PollForConversion      (g_BAT_adcHandle, HAL_MAX_DELAY);
 80085e6:	4b1f      	ldr	r3, [pc, #124]	; (8008664 <BAT_update+0xdc>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f04f 31ff 	mov.w	r1, #4294967295
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7f9 ff40 	bl	8002474 <HAL_ADC_PollForConversion>
    l_adcRawData = HAL_ADC_GetValue(g_BAT_adcHandle);
 80085f4:	4b1b      	ldr	r3, [pc, #108]	; (8008664 <BAT_update+0xdc>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4618      	mov	r0, r3
 80085fa:	f7fa f85d 	bl	80026b8 <HAL_ADC_GetValue>
 80085fe:	6178      	str	r0, [r7, #20]

    /* Apply conversion based on STM32 reference voltage & resolution */
    l_voltageInV  = (l_adcRawData * 3.30f ) / 4096.0f;
 8008600:	6978      	ldr	r0, [r7, #20]
 8008602:	f7f7 fec5 	bl	8000390 <__aeabi_ui2f>
 8008606:	4603      	mov	r3, r0
 8008608:	4917      	ldr	r1, [pc, #92]	; (8008668 <BAT_update+0xe0>)
 800860a:	4618      	mov	r0, r3
 800860c:	f7f7 ff18 	bl	8000440 <__aeabi_fmul>
 8008610:	4603      	mov	r3, r0
 8008612:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8008616:	4618      	mov	r0, r3
 8008618:	f7f7 ffc6 	bl	80005a8 <__aeabi_fdiv>
 800861c:	4603      	mov	r3, r0
 800861e:	613b      	str	r3, [r7, #16]

    /* Consider voltage divider used between the battery & the ADC input */
    l_voltageInV *= 11.0f;
 8008620:	4912      	ldr	r1, [pc, #72]	; (800866c <BAT_update+0xe4>)
 8008622:	6938      	ldr	r0, [r7, #16]
 8008624:	f7f7 ff0c 	bl	8000440 <__aeabi_fmul>
 8008628:	4603      	mov	r3, r0
 800862a:	613b      	str	r3, [r7, #16]

    *p_voltageInMv = (uint32_t)(l_voltageInV * 1000.0f);
 800862c:	4910      	ldr	r1, [pc, #64]	; (8008670 <BAT_update+0xe8>)
 800862e:	6938      	ldr	r0, [r7, #16]
 8008630:	f7f7 ff06 	bl	8000440 <__aeabi_fmul>
 8008634:	4603      	mov	r3, r0
 8008636:	4618      	mov	r0, r3
 8008638:	f7f8 f8ee 	bl	8000818 <__aeabi_f2uiz>
 800863c:	4602      	mov	r2, r0
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	601a      	str	r2, [r3, #0]

    LOG_debug("Battery level: %u mV", *p_voltageInMv);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	461a      	mov	r2, r3
 8008648:	490a      	ldr	r1, [pc, #40]	; (8008674 <BAT_update+0xec>)
 800864a:	2000      	movs	r0, #0
 800864c:	f001 f948 	bl	80098e0 <LOG_log>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8008650:	bf00      	nop
 8008652:	bf00      	nop
}
 8008654:	371c      	adds	r7, #28
 8008656:	46bd      	mov	sp, r7
 8008658:	bd90      	pop	{r4, r7, pc}
 800865a:	bf00      	nop
 800865c:	200000ac 	.word	0x200000ac
 8008660:	200000b0 	.word	0x200000b0
 8008664:	200000a8 	.word	0x200000a8
 8008668:	40533333 	.word	0x40533333
 800866c:	41300000 	.word	0x41300000
 8008670:	447a0000 	.word	0x447a0000
 8008674:	0800b4dc 	.word	0x0800b4dc

08008678 <BLU_sendCommand>:
static void         BLU_readData     (uint8_t *p_buffer                                                );
static T_BLU_BUTTON BLU_getButton    (uint8_t *p_buffer                                                );
static int32_t      BLU_normalizeData(uint32_t p_rawData, uint32_t p_maxValue, bool p_isInversionNeeded);

static void BLU_sendCommand(uint8_t p_command)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	4603      	mov	r3, r0
 8008680:	71fb      	strb	r3, [r7, #7]
  volatile uint16_t l_bitValue;

  for (l_bitValue = 0x01; l_bitValue < 0x0100; l_bitValue <<= 1)
 8008682:	2301      	movs	r3, #1
 8008684:	81fb      	strh	r3, [r7, #14]
 8008686:	e030      	b.n	80086ea <BLU_sendCommand+0x72>
  {
    if ((l_bitValue & p_command) != 0)
 8008688:	89fb      	ldrh	r3, [r7, #14]
 800868a:	b29b      	uxth	r3, r3
 800868c:	461a      	mov	r2, r3
 800868e:	79fb      	ldrb	r3, [r7, #7]
 8008690:	4013      	ands	r3, r2
 8008692:	2b00      	cmp	r3, #0
 8008694:	d006      	beq.n	80086a4 <BLU_sendCommand+0x2c>
    {
      SET_BIT(GPIOC->ODR, BLUETOOTH_SPI_CMD_Pin);
 8008696:	4b1a      	ldr	r3, [pc, #104]	; (8008700 <BLU_sendCommand+0x88>)
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	4a19      	ldr	r2, [pc, #100]	; (8008700 <BLU_sendCommand+0x88>)
 800869c:	f043 0302 	orr.w	r3, r3, #2
 80086a0:	60d3      	str	r3, [r2, #12]
 80086a2:	e005      	b.n	80086b0 <BLU_sendCommand+0x38>
    }
    else
    {
      CLEAR_BIT(GPIOC->ODR, BLUETOOTH_SPI_CMD_Pin);
 80086a4:	4b16      	ldr	r3, [pc, #88]	; (8008700 <BLU_sendCommand+0x88>)
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	4a15      	ldr	r2, [pc, #84]	; (8008700 <BLU_sendCommand+0x88>)
 80086aa:	f023 0302 	bic.w	r3, r3, #2
 80086ae:	60d3      	str	r3, [r2, #12]
    }

    SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 80086b0:	4b14      	ldr	r3, [pc, #80]	; (8008704 <BLU_sendCommand+0x8c>)
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	4a13      	ldr	r2, [pc, #76]	; (8008704 <BLU_sendCommand+0x8c>)
 80086b6:	f043 0310 	orr.w	r3, r3, #16
 80086ba:	60d3      	str	r3, [r2, #12]
    UTI_delayUs(5);
 80086bc:	2005      	movs	r0, #5
 80086be:	f001 fb49 	bl	8009d54 <UTI_delayUs>
    CLEAR_BIT(GPIOA->ODR, BLUETOOTH_SPI_CLK_Pin);
 80086c2:	4b10      	ldr	r3, [pc, #64]	; (8008704 <BLU_sendCommand+0x8c>)
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	4a0f      	ldr	r2, [pc, #60]	; (8008704 <BLU_sendCommand+0x8c>)
 80086c8:	f023 0310 	bic.w	r3, r3, #16
 80086cc:	60d3      	str	r3, [r2, #12]
    UTI_delayUs(5);
 80086ce:	2005      	movs	r0, #5
 80086d0:	f001 fb40 	bl	8009d54 <UTI_delayUs>
    SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 80086d4:	4b0b      	ldr	r3, [pc, #44]	; (8008704 <BLU_sendCommand+0x8c>)
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	4a0a      	ldr	r2, [pc, #40]	; (8008704 <BLU_sendCommand+0x8c>)
 80086da:	f043 0310 	orr.w	r3, r3, #16
 80086de:	60d3      	str	r3, [r2, #12]
  for (l_bitValue = 0x01; l_bitValue < 0x0100; l_bitValue <<= 1)
 80086e0:	89fb      	ldrh	r3, [r7, #14]
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	005b      	lsls	r3, r3, #1
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	81fb      	strh	r3, [r7, #14]
 80086ea:	89fb      	ldrh	r3, [r7, #14]
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	2bff      	cmp	r3, #255	; 0xff
 80086f0:	d9ca      	bls.n	8008688 <BLU_sendCommand+0x10>
  }
  UTI_delayUs(16);
 80086f2:	2010      	movs	r0, #16
 80086f4:	f001 fb2e 	bl	8009d54 <UTI_delayUs>

  return;
 80086f8:	bf00      	nop
}
 80086fa:	3710      	adds	r7, #16
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	40011000 	.word	0x40011000
 8008704:	40010800 	.word	0x40010800

08008708 <BLU_readData>:

static void BLU_readData(uint8_t *p_buffer)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  volatile uint8_t  l_index;
  volatile uint16_t l_bitValue;

  /* Reset buffer */
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 8008710:	2300      	movs	r3, #0
 8008712:	73fb      	strb	r3, [r7, #15]
 8008714:	e00b      	b.n	800872e <BLU_readData+0x26>
  {
    p_buffer[l_index] = 0x00;
 8008716:	7bfb      	ldrb	r3, [r7, #15]
 8008718:	b2db      	uxtb	r3, r3
 800871a:	461a      	mov	r2, r3
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4413      	add	r3, r2
 8008720:	2200      	movs	r2, #0
 8008722:	701a      	strb	r2, [r3, #0]
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 8008724:	7bfb      	ldrb	r3, [r7, #15]
 8008726:	b2db      	uxtb	r3, r3
 8008728:	3301      	adds	r3, #1
 800872a:	b2db      	uxtb	r3, r3
 800872c:	73fb      	strb	r3, [r7, #15]
 800872e:	7bfb      	ldrb	r3, [r7, #15]
 8008730:	b2db      	uxtb	r3, r3
 8008732:	2b06      	cmp	r3, #6
 8008734:	d9ef      	bls.n	8008716 <BLU_readData+0xe>
  }

  CLEAR_BIT(GPIOC->ODR, BLUETOOTH_SPI_CS_Pin);
 8008736:	4b2e      	ldr	r3, [pc, #184]	; (80087f0 <BLU_readData+0xe8>)
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	4a2d      	ldr	r2, [pc, #180]	; (80087f0 <BLU_readData+0xe8>)
 800873c:	f023 0308 	bic.w	r3, r3, #8
 8008740:	60d3      	str	r3, [r2, #12]

  BLU_sendCommand(0x01);
 8008742:	2001      	movs	r0, #1
 8008744:	f7ff ff98 	bl	8008678 <BLU_sendCommand>
  BLU_sendCommand(0x42);
 8008748:	2042      	movs	r0, #66	; 0x42
 800874a:	f7ff ff95 	bl	8008678 <BLU_sendCommand>

  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 800874e:	2300      	movs	r3, #0
 8008750:	73fb      	strb	r3, [r7, #15]
 8008752:	e03f      	b.n	80087d4 <BLU_readData+0xcc>
  {
    for (l_bitValue = 0x01; l_bitValue < 0x100; l_bitValue <<= 1)
 8008754:	2301      	movs	r3, #1
 8008756:	81bb      	strh	r3, [r7, #12]
 8008758:	e030      	b.n	80087bc <BLU_readData+0xb4>
    {
      SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 800875a:	4b26      	ldr	r3, [pc, #152]	; (80087f4 <BLU_readData+0xec>)
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	4a25      	ldr	r2, [pc, #148]	; (80087f4 <BLU_readData+0xec>)
 8008760:	f043 0310 	orr.w	r3, r3, #16
 8008764:	60d3      	str	r3, [r2, #12]
      UTI_delayUs(5);
 8008766:	2005      	movs	r0, #5
 8008768:	f001 faf4 	bl	8009d54 <UTI_delayUs>
      CLEAR_BIT(GPIOA->ODR, BLUETOOTH_SPI_CLK_Pin);
 800876c:	4b21      	ldr	r3, [pc, #132]	; (80087f4 <BLU_readData+0xec>)
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	4a20      	ldr	r2, [pc, #128]	; (80087f4 <BLU_readData+0xec>)
 8008772:	f023 0310 	bic.w	r3, r3, #16
 8008776:	60d3      	str	r3, [r2, #12]
      UTI_delayUs(5);
 8008778:	2005      	movs	r0, #5
 800877a:	f001 faeb 	bl	8009d54 <UTI_delayUs>
      SET_BIT(GPIOA->ODR  , BLUETOOTH_SPI_CLK_Pin);
 800877e:	4b1d      	ldr	r3, [pc, #116]	; (80087f4 <BLU_readData+0xec>)
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	4a1c      	ldr	r2, [pc, #112]	; (80087f4 <BLU_readData+0xec>)
 8008784:	f043 0310 	orr.w	r3, r3, #16
 8008788:	60d3      	str	r3, [r2, #12]

      if (READ_BIT(GPIOC->IDR, BLUETOOTH_SPI_DAT_Pin) != GPIO_PIN_RESET)
 800878a:	4b19      	ldr	r3, [pc, #100]	; (80087f0 <BLU_readData+0xe8>)
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	f003 0304 	and.w	r3, r3, #4
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00d      	beq.n	80087b2 <BLU_readData+0xaa>
      {
        p_buffer[l_index] |= l_bitValue;
 8008796:	89bb      	ldrh	r3, [r7, #12]
 8008798:	b29a      	uxth	r2, r3
 800879a:	7bfb      	ldrb	r3, [r7, #15]
 800879c:	b2d8      	uxtb	r0, r3
 800879e:	4601      	mov	r1, r0
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	440b      	add	r3, r1
 80087a4:	7819      	ldrb	r1, [r3, #0]
 80087a6:	b2d2      	uxtb	r2, r2
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4403      	add	r3, r0
 80087ac:	430a      	orrs	r2, r1
 80087ae:	b2d2      	uxtb	r2, r2
 80087b0:	701a      	strb	r2, [r3, #0]
    for (l_bitValue = 0x01; l_bitValue < 0x100; l_bitValue <<= 1)
 80087b2:	89bb      	ldrh	r3, [r7, #12]
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	005b      	lsls	r3, r3, #1
 80087b8:	b29b      	uxth	r3, r3
 80087ba:	81bb      	strh	r3, [r7, #12]
 80087bc:	89bb      	ldrh	r3, [r7, #12]
 80087be:	b29b      	uxth	r3, r3
 80087c0:	2bff      	cmp	r3, #255	; 0xff
 80087c2:	d9ca      	bls.n	800875a <BLU_readData+0x52>
      else
      {
        ; /* Nothing to do */
      }
    }
      UTI_delayUs(16);
 80087c4:	2010      	movs	r0, #16
 80087c6:	f001 fac5 	bl	8009d54 <UTI_delayUs>
  for (l_index = 0; l_index < BLU_DATA_BUFFER_LENGTH; l_index++)
 80087ca:	7bfb      	ldrb	r3, [r7, #15]
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	3301      	adds	r3, #1
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	73fb      	strb	r3, [r7, #15]
 80087d4:	7bfb      	ldrb	r3, [r7, #15]
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	2b06      	cmp	r3, #6
 80087da:	d9bb      	bls.n	8008754 <BLU_readData+0x4c>
  }

  SET_BIT(GPIOC->ODR, BLUETOOTH_SPI_CS_Pin);
 80087dc:	4b04      	ldr	r3, [pc, #16]	; (80087f0 <BLU_readData+0xe8>)
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	4a03      	ldr	r2, [pc, #12]	; (80087f0 <BLU_readData+0xe8>)
 80087e2:	f043 0308 	orr.w	r3, r3, #8
 80087e6:	60d3      	str	r3, [r2, #12]

  return;
 80087e8:	bf00      	nop
}
 80087ea:	3710      	adds	r7, #16
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	40011000 	.word	0x40011000
 80087f4:	40010800 	.word	0x40010800

080087f8 <BLU_getButton>:

static T_BLU_BUTTON BLU_getButton(uint8_t *p_buffer)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b085      	sub	sp, #20
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  uint16_t l_buttonRawValue;
  uint8_t  l_index;

  l_buttonRawValue = (p_buffer[BLU_BUTTON_HIGH_OFFSET] << 8) | p_buffer[BLU_BUTTON_LOW_OFFSET];
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	3302      	adds	r3, #2
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	021b      	lsls	r3, r3, #8
 8008808:	b21a      	sxth	r2, r3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	3301      	adds	r3, #1
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	b21b      	sxth	r3, r3
 8008812:	4313      	orrs	r3, r2
 8008814:	b21b      	sxth	r3, r3
 8008816:	81bb      	strh	r3, [r7, #12]

  /* Ignore BLU_BUTTON_NONE value as it is not directly coded in raw data */
  for (l_index = BLU_BUTTON_SELECT; l_index < BLU_BUTTON_COUNT_VALUE; l_index++)
 8008818:	2301      	movs	r3, #1
 800881a:	73fb      	strb	r3, [r7, #15]
 800881c:	e00d      	b.n	800883a <BLU_getButton+0x42>
  {
    /* Stop decoding button data on 1st match (do not deal with multiple presses case) */
    if ((l_buttonRawValue & (1 << (l_index - 1))) == 0)
 800881e:	89ba      	ldrh	r2, [r7, #12]
 8008820:	7bfb      	ldrb	r3, [r7, #15]
 8008822:	3b01      	subs	r3, #1
 8008824:	fa42 f303 	asr.w	r3, r2, r3
 8008828:	f003 0301 	and.w	r3, r3, #1
 800882c:	2b00      	cmp	r3, #0
 800882e:	d101      	bne.n	8008834 <BLU_getButton+0x3c>
    {
      return l_index;
 8008830:	7bfb      	ldrb	r3, [r7, #15]
 8008832:	e006      	b.n	8008842 <BLU_getButton+0x4a>
  for (l_index = BLU_BUTTON_SELECT; l_index < BLU_BUTTON_COUNT_VALUE; l_index++)
 8008834:	7bfb      	ldrb	r3, [r7, #15]
 8008836:	3301      	adds	r3, #1
 8008838:	73fb      	strb	r3, [r7, #15]
 800883a:	7bfb      	ldrb	r3, [r7, #15]
 800883c:	2b10      	cmp	r3, #16
 800883e:	d9ee      	bls.n	800881e <BLU_getButton+0x26>
    {
      ; /* Nothing to do */
    }
  }

  return BLU_BUTTON_NONE;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3714      	adds	r7, #20
 8008846:	46bd      	mov	sp, r7
 8008848:	bc80      	pop	{r7}
 800884a:	4770      	bx	lr

0800884c <BLU_normalizeData>:

static int32_t BLU_normalizeData(uint32_t p_rawData, uint32_t p_maxValue, bool p_isInversionNeeded)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b086      	sub	sp, #24
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	4613      	mov	r3, r2
 8008858:	71fb      	strb	r3, [r7, #7]
  float l_normalizedData;

  l_normalizedData = p_rawData - 128.0f;
 800885a:	68f8      	ldr	r0, [r7, #12]
 800885c:	f7f7 fd98 	bl	8000390 <__aeabi_ui2f>
 8008860:	4603      	mov	r3, r0
 8008862:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 8008866:	4618      	mov	r0, r3
 8008868:	f7f7 fce0 	bl	800022c <__aeabi_fsub>
 800886c:	4603      	mov	r3, r0
 800886e:	617b      	str	r3, [r7, #20]

  if (l_normalizedData > 0.0f)
 8008870:	f04f 0100 	mov.w	r1, #0
 8008874:	6978      	ldr	r0, [r7, #20]
 8008876:	f7f7 ff9f 	bl	80007b8 <__aeabi_fcmpgt>
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d00f      	beq.n	80088a0 <BLU_normalizeData+0x54>
  {
    l_normalizedData *= (float)p_maxValue / 127.0f;
 8008880:	68b8      	ldr	r0, [r7, #8]
 8008882:	f7f7 fd85 	bl	8000390 <__aeabi_ui2f>
 8008886:	4603      	mov	r3, r0
 8008888:	4915      	ldr	r1, [pc, #84]	; (80088e0 <BLU_normalizeData+0x94>)
 800888a:	4618      	mov	r0, r3
 800888c:	f7f7 fe8c 	bl	80005a8 <__aeabi_fdiv>
 8008890:	4603      	mov	r3, r0
 8008892:	4619      	mov	r1, r3
 8008894:	6978      	ldr	r0, [r7, #20]
 8008896:	f7f7 fdd3 	bl	8000440 <__aeabi_fmul>
 800889a:	4603      	mov	r3, r0
 800889c:	617b      	str	r3, [r7, #20]
 800889e:	e00f      	b.n	80088c0 <BLU_normalizeData+0x74>
  }
  else
  {
    l_normalizedData *= (float)p_maxValue / 128.0f;
 80088a0:	68b8      	ldr	r0, [r7, #8]
 80088a2:	f7f7 fd75 	bl	8000390 <__aeabi_ui2f>
 80088a6:	4603      	mov	r3, r0
 80088a8:	f04f 4186 	mov.w	r1, #1124073472	; 0x43000000
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7f7 fe7b 	bl	80005a8 <__aeabi_fdiv>
 80088b2:	4603      	mov	r3, r0
 80088b4:	4619      	mov	r1, r3
 80088b6:	6978      	ldr	r0, [r7, #20]
 80088b8:	f7f7 fdc2 	bl	8000440 <__aeabi_fmul>
 80088bc:	4603      	mov	r3, r0
 80088be:	617b      	str	r3, [r7, #20]
  }

  if (p_isInversionNeeded == true)
 80088c0:	79fb      	ldrb	r3, [r7, #7]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d003      	beq.n	80088ce <BLU_normalizeData+0x82>
  {
    l_normalizedData *= -1.0f;
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80088cc:	617b      	str	r3, [r7, #20]
  else
  {
    ; /* Nothing to do */
  }

  return (int32_t)l_normalizedData;
 80088ce:	6978      	ldr	r0, [r7, #20]
 80088d0:	f7f7 ff7c 	bl	80007cc <__aeabi_f2iz>
 80088d4:	4603      	mov	r3, r0
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3718      	adds	r7, #24
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	42fe0000 	.word	0x42fe0000

080088e4 <BLU_init>:

void BLU_init(uint32_t p_maxDataValue)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing bluetooth control");
 80088ec:	490c      	ldr	r1, [pc, #48]	; (8008920 <BLU_init+0x3c>)
 80088ee:	2001      	movs	r0, #1
 80088f0:	f000 fff6 	bl	80098e0 <LOG_log>

  g_BLU_maxDataValue = p_maxDataValue;
 80088f4:	4a0b      	ldr	r2, [pc, #44]	; (8008924 <BLU_init+0x40>)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6013      	str	r3, [r2, #0]

  g_BLU_lastData.leftX  = BLU_DATA_DEFAUT_DIRECTION;
 80088fa:	4b0b      	ldr	r3, [pc, #44]	; (8008928 <BLU_init+0x44>)
 80088fc:	2280      	movs	r2, #128	; 0x80
 80088fe:	601a      	str	r2, [r3, #0]
  g_BLU_lastData.leftY  = BLU_DATA_DEFAUT_DIRECTION;
 8008900:	4b09      	ldr	r3, [pc, #36]	; (8008928 <BLU_init+0x44>)
 8008902:	2280      	movs	r2, #128	; 0x80
 8008904:	605a      	str	r2, [r3, #4]
  g_BLU_lastData.rightX = BLU_DATA_DEFAUT_DIRECTION;
 8008906:	4b08      	ldr	r3, [pc, #32]	; (8008928 <BLU_init+0x44>)
 8008908:	2280      	movs	r2, #128	; 0x80
 800890a:	609a      	str	r2, [r3, #8]
  g_BLU_lastData.rightY = BLU_DATA_DEFAUT_DIRECTION;
 800890c:	4b06      	ldr	r3, [pc, #24]	; (8008928 <BLU_init+0x44>)
 800890e:	2280      	movs	r2, #128	; 0x80
 8008910:	60da      	str	r2, [r3, #12]
  g_BLU_lastData.button = BLU_BUTTON_NONE;
 8008912:	4b05      	ldr	r3, [pc, #20]	; (8008928 <BLU_init+0x44>)
 8008914:	2200      	movs	r2, #0
 8008916:	741a      	strb	r2, [r3, #16]

  return;
 8008918:	bf00      	nop
}
 800891a:	3708      	adds	r7, #8
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	0800b4f4 	.word	0x0800b4f4
 8008924:	200000b4 	.word	0x200000b4
 8008928:	200000b8 	.word	0x200000b8

0800892c <BLU_receiveData>:

void BLU_receiveData(T_BLU_Data *p_data)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b088      	sub	sp, #32
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  T_BLU_BUTTON l_button;

  // LOG_info("Receiving Bluetooth data");

  /* Read raw data */
  BLU_readData(l_buffer);
 8008934:	f107 0308 	add.w	r3, r7, #8
 8008938:	4618      	mov	r0, r3
 800893a:	f7ff fee5 	bl	8008708 <BLU_readData>

  /* Start and decode raw data */
  l_leftX  = l_buffer[BLU_LEFT_X_OFFSET ];
 800893e:	7b7b      	ldrb	r3, [r7, #13]
 8008940:	61fb      	str	r3, [r7, #28]
  l_leftY  = l_buffer[BLU_LEFT_Y_OFFSET ];
 8008942:	7bbb      	ldrb	r3, [r7, #14]
 8008944:	61bb      	str	r3, [r7, #24]
  l_rightX = l_buffer[BLU_RIGHT_X_OFFSET];
 8008946:	7afb      	ldrb	r3, [r7, #11]
 8008948:	617b      	str	r3, [r7, #20]
  l_rightY = l_buffer[BLU_RIGHT_Y_OFFSET];
 800894a:	7b3b      	ldrb	r3, [r7, #12]
 800894c:	613b      	str	r3, [r7, #16]
  l_button = BLU_getButton(l_buffer);
 800894e:	f107 0308 	add.w	r3, r7, #8
 8008952:	4618      	mov	r0, r3
 8008954:	f7ff ff50 	bl	80087f8 <BLU_getButton>
 8008958:	4603      	mov	r3, r0
 800895a:	73fb      	strb	r3, [r7, #15]

  /* Deal with startup condition, while read data is not valid yet */
  if  ((l_leftX == 255 && l_leftY == 255 && l_rightX == 255 && l_rightY ==255)
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	2bff      	cmp	r3, #255	; 0xff
 8008960:	d108      	bne.n	8008974 <BLU_receiveData+0x48>
 8008962:	69bb      	ldr	r3, [r7, #24]
 8008964:	2bff      	cmp	r3, #255	; 0xff
 8008966:	d105      	bne.n	8008974 <BLU_receiveData+0x48>
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	2bff      	cmp	r3, #255	; 0xff
 800896c:	d102      	bne.n	8008974 <BLU_receiveData+0x48>
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	2bff      	cmp	r3, #255	; 0xff
 8008972:	d00b      	beq.n	800898c <BLU_receiveData+0x60>
    || (l_leftX ==   0 && l_leftY ==   0 && l_rightX ==   0 && l_rightY ==  0))
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d113      	bne.n	80089a2 <BLU_receiveData+0x76>
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d110      	bne.n	80089a2 <BLU_receiveData+0x76>
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d10d      	bne.n	80089a2 <BLU_receiveData+0x76>
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d10a      	bne.n	80089a2 <BLU_receiveData+0x76>
  {
    l_leftX  = BLU_DATA_DEFAUT_DIRECTION;
 800898c:	2380      	movs	r3, #128	; 0x80
 800898e:	61fb      	str	r3, [r7, #28]
    l_leftY  = BLU_DATA_DEFAUT_DIRECTION;
 8008990:	2380      	movs	r3, #128	; 0x80
 8008992:	61bb      	str	r3, [r7, #24]
    l_rightX = BLU_DATA_DEFAUT_DIRECTION;
 8008994:	2380      	movs	r3, #128	; 0x80
 8008996:	617b      	str	r3, [r7, #20]
    l_rightY = BLU_DATA_DEFAUT_DIRECTION;
 8008998:	2380      	movs	r3, #128	; 0x80
 800899a:	613b      	str	r3, [r7, #16]
    l_button = BLU_BUTTON_NONE;
 800899c:	2300      	movs	r3, #0
 800899e:	73fb      	strb	r3, [r7, #15]
 80089a0:	e043      	b.n	8008a2a <BLU_receiveData+0xfe>
  }
  /* Use a confirmation mechanism, on 2 cycles, as glitches are observed */
  else if ((l_leftX  == g_BLU_lastData.leftX) &&
 80089a2:	4b2b      	ldr	r3, [pc, #172]	; (8008a50 <BLU_receiveData+0x124>)
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	69fb      	ldr	r3, [r7, #28]
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d13e      	bne.n	8008a2a <BLU_receiveData+0xfe>
           (l_leftY  == g_BLU_lastData.leftY) &&
 80089ac:	4b28      	ldr	r3, [pc, #160]	; (8008a50 <BLU_receiveData+0x124>)
 80089ae:	685a      	ldr	r2, [r3, #4]
 80089b0:	69bb      	ldr	r3, [r7, #24]
  else if ((l_leftX  == g_BLU_lastData.leftX) &&
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d139      	bne.n	8008a2a <BLU_receiveData+0xfe>
           (l_rightX == g_BLU_lastData.rightX) &&
 80089b6:	4b26      	ldr	r3, [pc, #152]	; (8008a50 <BLU_receiveData+0x124>)
 80089b8:	689a      	ldr	r2, [r3, #8]
 80089ba:	697b      	ldr	r3, [r7, #20]
           (l_leftY  == g_BLU_lastData.leftY) &&
 80089bc:	429a      	cmp	r2, r3
 80089be:	d134      	bne.n	8008a2a <BLU_receiveData+0xfe>
           (l_rightY == g_BLU_lastData.rightY) &&
 80089c0:	4b23      	ldr	r3, [pc, #140]	; (8008a50 <BLU_receiveData+0x124>)
 80089c2:	68da      	ldr	r2, [r3, #12]
 80089c4:	693b      	ldr	r3, [r7, #16]
           (l_rightX == g_BLU_lastData.rightX) &&
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d12f      	bne.n	8008a2a <BLU_receiveData+0xfe>
           (l_button == g_BLU_lastData.button))
 80089ca:	4b21      	ldr	r3, [pc, #132]	; (8008a50 <BLU_receiveData+0x124>)
 80089cc:	7c1b      	ldrb	r3, [r3, #16]
           (l_rightY == g_BLU_lastData.rightY) &&
 80089ce:	7bfa      	ldrb	r2, [r7, #15]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d12a      	bne.n	8008a2a <BLU_receiveData+0xfe>
  {
    /* Normalize directions data in range [-100..100] */
    p_data->leftX  = BLU_normalizeData(l_leftX , g_BLU_maxDataValue, false);
 80089d4:	4b1f      	ldr	r3, [pc, #124]	; (8008a54 <BLU_receiveData+0x128>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	2200      	movs	r2, #0
 80089da:	4619      	mov	r1, r3
 80089dc:	69f8      	ldr	r0, [r7, #28]
 80089de:	f7ff ff35 	bl	800884c <BLU_normalizeData>
 80089e2:	4602      	mov	r2, r0
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	601a      	str	r2, [r3, #0]
    p_data->leftY  = BLU_normalizeData(l_leftY , g_BLU_maxDataValue, true );
 80089e8:	4b1a      	ldr	r3, [pc, #104]	; (8008a54 <BLU_receiveData+0x128>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2201      	movs	r2, #1
 80089ee:	4619      	mov	r1, r3
 80089f0:	69b8      	ldr	r0, [r7, #24]
 80089f2:	f7ff ff2b 	bl	800884c <BLU_normalizeData>
 80089f6:	4602      	mov	r2, r0
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	605a      	str	r2, [r3, #4]
    p_data->rightX = BLU_normalizeData(l_rightX, g_BLU_maxDataValue, false);
 80089fc:	4b15      	ldr	r3, [pc, #84]	; (8008a54 <BLU_receiveData+0x128>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2200      	movs	r2, #0
 8008a02:	4619      	mov	r1, r3
 8008a04:	6978      	ldr	r0, [r7, #20]
 8008a06:	f7ff ff21 	bl	800884c <BLU_normalizeData>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	609a      	str	r2, [r3, #8]
    p_data->rightY = BLU_normalizeData(l_rightY, g_BLU_maxDataValue, true );
 8008a10:	4b10      	ldr	r3, [pc, #64]	; (8008a54 <BLU_receiveData+0x128>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2201      	movs	r2, #1
 8008a16:	4619      	mov	r1, r3
 8008a18:	6938      	ldr	r0, [r7, #16]
 8008a1a:	f7ff ff17 	bl	800884c <BLU_normalizeData>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	60da      	str	r2, [r3, #12]
    p_data->button = l_button;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	7bfa      	ldrb	r2, [r7, #15]
 8008a28:	741a      	strb	r2, [r3, #16]
  {
    ; /* Nothing to do */
  }

  /* Saved received data for later use in confirmation mechanism */
  g_BLU_lastData.leftX  = l_leftX;
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	4a08      	ldr	r2, [pc, #32]	; (8008a50 <BLU_receiveData+0x124>)
 8008a2e:	6013      	str	r3, [r2, #0]
  g_BLU_lastData.leftY  = l_leftY;
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	4a07      	ldr	r2, [pc, #28]	; (8008a50 <BLU_receiveData+0x124>)
 8008a34:	6053      	str	r3, [r2, #4]
  g_BLU_lastData.rightX = l_rightX;
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	4a05      	ldr	r2, [pc, #20]	; (8008a50 <BLU_receiveData+0x124>)
 8008a3a:	6093      	str	r3, [r2, #8]
  g_BLU_lastData.rightY = l_rightY;
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	4a04      	ldr	r2, [pc, #16]	; (8008a50 <BLU_receiveData+0x124>)
 8008a40:	60d3      	str	r3, [r2, #12]
  g_BLU_lastData.button = l_button;
 8008a42:	4a03      	ldr	r2, [pc, #12]	; (8008a50 <BLU_receiveData+0x124>)
 8008a44:	7bfb      	ldrb	r3, [r7, #15]
 8008a46:	7413      	strb	r3, [r2, #16]

  return;
 8008a48:	bf00      	nop
}
 8008a4a:	3720      	adds	r7, #32
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	200000b8 	.word	0x200000b8
 8008a54:	200000b4 	.word	0x200000b4

08008a58 <CON_init>:

static UART_HandleTypeDef *g_CON_uartHandle;
static uint8_t             g_CON_rxBuffer[12] = {0};

void CON_init(UART_HandleTypeDef *p_uartHandle)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing console");
 8008a60:	4905      	ldr	r1, [pc, #20]	; (8008a78 <CON_init+0x20>)
 8008a62:	2001      	movs	r0, #1
 8008a64:	f000 ff3c 	bl	80098e0 <LOG_log>

  g_CON_uartHandle = p_uartHandle;
 8008a68:	4a04      	ldr	r2, [pc, #16]	; (8008a7c <CON_init+0x24>)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6013      	str	r3, [r2, #0]

  return;
 8008a6e:	bf00      	nop
}
 8008a70:	3708      	adds	r7, #8
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	0800b514 	.word	0x0800b514
 8008a7c:	200000cc 	.word	0x200000cc

08008a80 <CON_receiveData>:

void CON_receiveData(void)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	af00      	add	r7, sp, #0
  HAL_UART_Receive_IT(g_CON_uartHandle, g_CON_rxBuffer, 12);
 8008a84:	4b04      	ldr	r3, [pc, #16]	; (8008a98 <CON_receiveData+0x18>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	220c      	movs	r2, #12
 8008a8a:	4904      	ldr	r1, [pc, #16]	; (8008a9c <CON_receiveData+0x1c>)
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f7ff f841 	bl	8007b14 <HAL_UART_Receive_IT>

  /* Resend received data (echo) */
//  HAL_UART_Transmit(CON_uartHandle, CON_rxBuffer, 12, 100);

  return;
 8008a92:	bf00      	nop
}
 8008a94:	bd80      	pop	{r7, pc}
 8008a96:	bf00      	nop
 8008a98:	200000cc 	.word	0x200000cc
 8008a9c:	200000d0 	.word	0x200000d0

08008aa0 <DRV_init>:
void DRV_init(TIM_HandleTypeDef *p_pwmTimerHandle,
              TIM_HandleTypeDef *p_rearLeftEncoderTimerHandle,
              TIM_HandleTypeDef *p_rearRightEncoderTimerHandle,
              TIM_HandleTypeDef *p_frontRightEncoderTimerHandle,
              TIM_HandleTypeDef *p_frontLeftEncoderTimerHandle)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b088      	sub	sp, #32
 8008aa4:	af04      	add	r7, sp, #16
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
 8008aac:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing Drive module");
 8008aae:	494f      	ldr	r1, [pc, #316]	; (8008bec <DRV_init+0x14c>)
 8008ab0:	2001      	movs	r0, #1
 8008ab2:	f000 ff15 	bl	80098e0 <LOG_log>

  /* Setup PIDs (with a 0 speed & stopped direction, at this point) */
  PID_init(&g_DRV_pidFrontRight, 1, 1, 1, 0, -100, 100, 0.5);
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	9303      	str	r3, [sp, #12]
 8008aba:	2364      	movs	r3, #100	; 0x64
 8008abc:	9302      	str	r3, [sp, #8]
 8008abe:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008ac2:	9301      	str	r3, [sp, #4]
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	9300      	str	r3, [sp, #0]
 8008ac8:	2301      	movs	r3, #1
 8008aca:	2201      	movs	r2, #1
 8008acc:	2101      	movs	r1, #1
 8008ace:	4848      	ldr	r0, [pc, #288]	; (8008bf0 <DRV_init+0x150>)
 8008ad0:	f001 f83c 	bl	8009b4c <PID_init>
  PID_init(&g_DRV_pidFrontLeft , 1, 1, 1, 0, -100, 100, 0.5);
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	9303      	str	r3, [sp, #12]
 8008ad8:	2364      	movs	r3, #100	; 0x64
 8008ada:	9302      	str	r3, [sp, #8]
 8008adc:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008ae0:	9301      	str	r3, [sp, #4]
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	9300      	str	r3, [sp, #0]
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	2201      	movs	r2, #1
 8008aea:	2101      	movs	r1, #1
 8008aec:	4841      	ldr	r0, [pc, #260]	; (8008bf4 <DRV_init+0x154>)
 8008aee:	f001 f82d 	bl	8009b4c <PID_init>
  PID_init(&g_DRV_pidRearLeft  , 1, 1, 1, 0, -100, 100, 0.5);
 8008af2:	2300      	movs	r3, #0
 8008af4:	9303      	str	r3, [sp, #12]
 8008af6:	2364      	movs	r3, #100	; 0x64
 8008af8:	9302      	str	r3, [sp, #8]
 8008afa:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008afe:	9301      	str	r3, [sp, #4]
 8008b00:	2300      	movs	r3, #0
 8008b02:	9300      	str	r3, [sp, #0]
 8008b04:	2301      	movs	r3, #1
 8008b06:	2201      	movs	r2, #1
 8008b08:	2101      	movs	r1, #1
 8008b0a:	483b      	ldr	r0, [pc, #236]	; (8008bf8 <DRV_init+0x158>)
 8008b0c:	f001 f81e 	bl	8009b4c <PID_init>
  PID_init(&g_DRV_pidRearRight , 1, 1, 1, 0, -100, 100, 0.5);
 8008b10:	2300      	movs	r3, #0
 8008b12:	9303      	str	r3, [sp, #12]
 8008b14:	2364      	movs	r3, #100	; 0x64
 8008b16:	9302      	str	r3, [sp, #8]
 8008b18:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008b1c:	9301      	str	r3, [sp, #4]
 8008b1e:	2300      	movs	r3, #0
 8008b20:	9300      	str	r3, [sp, #0]
 8008b22:	2301      	movs	r3, #1
 8008b24:	2201      	movs	r2, #1
 8008b26:	2101      	movs	r1, #1
 8008b28:	4834      	ldr	r0, [pc, #208]	; (8008bfc <DRV_init+0x15c>)
 8008b2a:	f001 f80f 	bl	8009b4c <PID_init>

  /* Setup motors */
  MTR_init(&g_DRV_motorFrontRight,
 8008b2e:	2304      	movs	r3, #4
 8008b30:	9303      	str	r3, [sp, #12]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	9302      	str	r3, [sp, #8]
 8008b36:	2320      	movs	r3, #32
 8008b38:	9301      	str	r3, [sp, #4]
 8008b3a:	4b31      	ldr	r3, [pc, #196]	; (8008c00 <DRV_init+0x160>)
 8008b3c:	9300      	str	r3, [sp, #0]
 8008b3e:	2310      	movs	r3, #16
 8008b40:	4a2f      	ldr	r2, [pc, #188]	; (8008c00 <DRV_init+0x160>)
 8008b42:	4930      	ldr	r1, [pc, #192]	; (8008c04 <DRV_init+0x164>)
 8008b44:	4830      	ldr	r0, [pc, #192]	; (8008c08 <DRV_init+0x168>)
 8008b46:	f000 ff27 	bl	8009998 <MTR_init>
           MOTOR_FRONT_RIGHT_IN_2_GPIO_Port,
           MOTOR_FRONT_RIGHT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_2);

  MTR_init(&g_DRV_motorFrontLeft,
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	9303      	str	r3, [sp, #12]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	9302      	str	r3, [sp, #8]
 8008b52:	2302      	movs	r3, #2
 8008b54:	9301      	str	r3, [sp, #4]
 8008b56:	4b2d      	ldr	r3, [pc, #180]	; (8008c0c <DRV_init+0x16c>)
 8008b58:	9300      	str	r3, [sp, #0]
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	4a2b      	ldr	r2, [pc, #172]	; (8008c0c <DRV_init+0x16c>)
 8008b5e:	492c      	ldr	r1, [pc, #176]	; (8008c10 <DRV_init+0x170>)
 8008b60:	482c      	ldr	r0, [pc, #176]	; (8008c14 <DRV_init+0x174>)
 8008b62:	f000 ff19 	bl	8009998 <MTR_init>
           MOTOR_FRONT_LEFT_IN_2_GPIO_Port,
           MOTOR_FRONT_LEFT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_1);

  MTR_init(&g_DRV_motorRearLeft,
 8008b66:	230c      	movs	r3, #12
 8008b68:	9303      	str	r3, [sp, #12]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	9302      	str	r3, [sp, #8]
 8008b6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b72:	9301      	str	r3, [sp, #4]
 8008b74:	4b22      	ldr	r3, [pc, #136]	; (8008c00 <DRV_init+0x160>)
 8008b76:	9300      	str	r3, [sp, #0]
 8008b78:	2304      	movs	r3, #4
 8008b7a:	4a27      	ldr	r2, [pc, #156]	; (8008c18 <DRV_init+0x178>)
 8008b7c:	4927      	ldr	r1, [pc, #156]	; (8008c1c <DRV_init+0x17c>)
 8008b7e:	4828      	ldr	r0, [pc, #160]	; (8008c20 <DRV_init+0x180>)
 8008b80:	f000 ff0a 	bl	8009998 <MTR_init>
           MOTOR_REAR_LEFT_IN_2_GPIO_Port,
           MOTOR_REAR_LEFT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_4);

  MTR_init(&g_DRV_motorRearRight,
 8008b84:	2308      	movs	r3, #8
 8008b86:	9303      	str	r3, [sp, #12]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	9302      	str	r3, [sp, #8]
 8008b8c:	2310      	movs	r3, #16
 8008b8e:	9301      	str	r3, [sp, #4]
 8008b90:	4b1e      	ldr	r3, [pc, #120]	; (8008c0c <DRV_init+0x16c>)
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	2320      	movs	r3, #32
 8008b96:	4a1d      	ldr	r2, [pc, #116]	; (8008c0c <DRV_init+0x16c>)
 8008b98:	4922      	ldr	r1, [pc, #136]	; (8008c24 <DRV_init+0x184>)
 8008b9a:	4823      	ldr	r0, [pc, #140]	; (8008c28 <DRV_init+0x188>)
 8008b9c:	f000 fefc 	bl	8009998 <MTR_init>
           MOTOR_REAR_RIGHT_IN_2_Pin,
           p_pwmTimerHandle,
           TIM_CHANNEL_3);

  /* Setup encoders */
  ENC_init(&g_DRV_encoderFrontRight, DRV_FRONT_RIGHT_MOTOR_NAME, true , p_frontRightEncoderTimerHandle);
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	4917      	ldr	r1, [pc, #92]	; (8008c04 <DRV_init+0x164>)
 8008ba6:	4821      	ldr	r0, [pc, #132]	; (8008c2c <DRV_init+0x18c>)
 8008ba8:	f000 fd24 	bl	80095f4 <ENC_init>
  ENC_init(&g_DRV_encoderFrontLeft , DRV_FRONT_LEFT_MOTOR_NAME , false, p_frontLeftEncoderTimerHandle );
 8008bac:	69bb      	ldr	r3, [r7, #24]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	4917      	ldr	r1, [pc, #92]	; (8008c10 <DRV_init+0x170>)
 8008bb2:	481f      	ldr	r0, [pc, #124]	; (8008c30 <DRV_init+0x190>)
 8008bb4:	f000 fd1e 	bl	80095f4 <ENC_init>
  ENC_init(&g_DRV_encoderRearLeft  , DRV_REAR_LEFT_MOTOR_NAME  , false, p_rearLeftEncoderTimerHandle  );
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	4917      	ldr	r1, [pc, #92]	; (8008c1c <DRV_init+0x17c>)
 8008bbe:	481d      	ldr	r0, [pc, #116]	; (8008c34 <DRV_init+0x194>)
 8008bc0:	f000 fd18 	bl	80095f4 <ENC_init>
  ENC_init(&g_DRV_encoderRearRight , DRV_REAR_RIGHT_MOTOR_NAME , true , p_rearRightEncoderTimerHandle );
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	4916      	ldr	r1, [pc, #88]	; (8008c24 <DRV_init+0x184>)
 8008bca:	481b      	ldr	r0, [pc, #108]	; (8008c38 <DRV_init+0x198>)
 8008bcc:	f000 fd12 	bl	80095f4 <ENC_init>

  /* Activate motors by default (de-activating them is used for debug  */
  g_DRV_areMotorsOn = true;
 8008bd0:	4b1a      	ldr	r3, [pc, #104]	; (8008c3c <DRV_init+0x19c>)
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	701a      	strb	r2, [r3, #0]

  /* Considered that drive is inactive when the code starts */
  g_DRV_isActive = false;
 8008bd6:	4b1a      	ldr	r3, [pc, #104]	; (8008c40 <DRV_init+0x1a0>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	701a      	strb	r2, [r3, #0]

  /* Start with master board control mode. BLink green LED accordingly */
  g_DRV_mode = DRV_MODE_MASTER_BOARD_CONTROL;
 8008bdc:	4b19      	ldr	r3, [pc, #100]	; (8008c44 <DRV_init+0x1a4>)
 8008bde:	2202      	movs	r2, #2
 8008be0:	701a      	strb	r2, [r3, #0]

  return;
 8008be2:	bf00      	nop
}
 8008be4:	3710      	adds	r7, #16
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	0800b52c 	.word	0x0800b52c
 8008bf0:	200000e0 	.word	0x200000e0
 8008bf4:	20000110 	.word	0x20000110
 8008bf8:	20000140 	.word	0x20000140
 8008bfc:	20000170 	.word	0x20000170
 8008c00:	40011000 	.word	0x40011000
 8008c04:	0800b548 	.word	0x0800b548
 8008c08:	200001a0 	.word	0x200001a0
 8008c0c:	40010c00 	.word	0x40010c00
 8008c10:	0800b554 	.word	0x0800b554
 8008c14:	200001c4 	.word	0x200001c4
 8008c18:	40011400 	.word	0x40011400
 8008c1c:	0800b560 	.word	0x0800b560
 8008c20:	200001e8 	.word	0x200001e8
 8008c24:	0800b56c 	.word	0x0800b56c
 8008c28:	2000020c 	.word	0x2000020c
 8008c2c:	20000230 	.word	0x20000230
 8008c30:	2000023c 	.word	0x2000023c
 8008c34:	20000248 	.word	0x20000248
 8008c38:	20000254 	.word	0x20000254
 8008c3c:	200000dc 	.word	0x200000dc
 8008c40:	200000dd 	.word	0x200000dd
 8008c44:	200000de 	.word	0x200000de

08008c48 <DRV_updateEncoder>:

void DRV_updateEncoder(TIM_HandleTypeDef *p_encoderTimerHandle)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  int16_t l_count;

  l_count = __HAL_TIM_GET_COUNTER(p_encoderTimerHandle);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c56:	81fb      	strh	r3, [r7, #14]

  /* Check the handle of the triggering timer and update encoder accordingly */
  if (p_encoderTimerHandle == g_DRV_encoderRearLeft.timerHandle)
 8008c58:	4b19      	ldr	r3, [pc, #100]	; (8008cc0 <DRV_updateEncoder+0x78>)
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d106      	bne.n	8008c70 <DRV_updateEncoder+0x28>
  {
    ENC_update(&g_DRV_encoderRearLeft, l_count);
 8008c62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008c66:	4619      	mov	r1, r3
 8008c68:	4815      	ldr	r0, [pc, #84]	; (8008cc0 <DRV_updateEncoder+0x78>)
 8008c6a:	f000 fcef 	bl	800964c <ENC_update>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8008c6e:	e023      	b.n	8008cb8 <DRV_updateEncoder+0x70>
  else if (p_encoderTimerHandle == g_DRV_encoderRearRight.timerHandle)
 8008c70:	4b14      	ldr	r3, [pc, #80]	; (8008cc4 <DRV_updateEncoder+0x7c>)
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d106      	bne.n	8008c88 <DRV_updateEncoder+0x40>
    ENC_update(&g_DRV_encoderRearRight, l_count);
 8008c7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008c7e:	4619      	mov	r1, r3
 8008c80:	4810      	ldr	r0, [pc, #64]	; (8008cc4 <DRV_updateEncoder+0x7c>)
 8008c82:	f000 fce3 	bl	800964c <ENC_update>
  return;
 8008c86:	e017      	b.n	8008cb8 <DRV_updateEncoder+0x70>
  else if (p_encoderTimerHandle == g_DRV_encoderFrontRight.timerHandle)
 8008c88:	4b0f      	ldr	r3, [pc, #60]	; (8008cc8 <DRV_updateEncoder+0x80>)
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d106      	bne.n	8008ca0 <DRV_updateEncoder+0x58>
    ENC_update(&g_DRV_encoderFrontRight, l_count);
 8008c92:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008c96:	4619      	mov	r1, r3
 8008c98:	480b      	ldr	r0, [pc, #44]	; (8008cc8 <DRV_updateEncoder+0x80>)
 8008c9a:	f000 fcd7 	bl	800964c <ENC_update>
  return;
 8008c9e:	e00b      	b.n	8008cb8 <DRV_updateEncoder+0x70>
  else if (p_encoderTimerHandle == g_DRV_encoderFrontLeft.timerHandle)
 8008ca0:	4b0a      	ldr	r3, [pc, #40]	; (8008ccc <DRV_updateEncoder+0x84>)
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d106      	bne.n	8008cb8 <DRV_updateEncoder+0x70>
    ENC_update(&g_DRV_encoderFrontLeft, l_count);
 8008caa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008cae:	4619      	mov	r1, r3
 8008cb0:	4806      	ldr	r0, [pc, #24]	; (8008ccc <DRV_updateEncoder+0x84>)
 8008cb2:	f000 fccb 	bl	800964c <ENC_update>
  return;
 8008cb6:	bf00      	nop
 8008cb8:	bf00      	nop
}
 8008cba:	3710      	adds	r7, #16
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	20000248 	.word	0x20000248
 8008cc4:	20000254 	.word	0x20000254
 8008cc8:	20000230 	.word	0x20000230
 8008ccc:	2000023c 	.word	0x2000023c

08008cd0 <DRV_updateFromBluetooth>:

void DRV_updateFromBluetooth(T_BLU_Data *p_bluetoothData)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  uint32_t l_speed;

  /* Check possible requested mode change */
  switch (p_bluetoothData->button)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	7c1b      	ldrb	r3, [r3, #16]
 8008cdc:	3b01      	subs	r3, #1
 8008cde:	2b0f      	cmp	r3, #15
 8008ce0:	d861      	bhi.n	8008da6 <DRV_updateFromBluetooth+0xd6>
 8008ce2:	a201      	add	r2, pc, #4	; (adr r2, 8008ce8 <DRV_updateFromBluetooth+0x18>)
 8008ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce8:	08008d71 	.word	0x08008d71
 8008cec:	08008da7 	.word	0x08008da7
 8008cf0:	08008da7 	.word	0x08008da7
 8008cf4:	08008d89 	.word	0x08008d89
 8008cf8:	08008da7 	.word	0x08008da7
 8008cfc:	08008da7 	.word	0x08008da7
 8008d00:	08008da7 	.word	0x08008da7
 8008d04:	08008da7 	.word	0x08008da7
 8008d08:	08008da7 	.word	0x08008da7
 8008d0c:	08008da7 	.word	0x08008da7
 8008d10:	08008da7 	.word	0x08008da7
 8008d14:	08008da7 	.word	0x08008da7
 8008d18:	08008da7 	.word	0x08008da7
 8008d1c:	08008d59 	.word	0x08008d59
 8008d20:	08008d41 	.word	0x08008d41
 8008d24:	08008d29 	.word	0x08008d29
  {
    case BLU_BUTTON_PINK_SQUARE:
      if (g_DRV_mode != DRV_MODE_MANUAL_FIXED_SPEED)
 8008d28:	4b82      	ldr	r3, [pc, #520]	; (8008f34 <DRV_updateFromBluetooth+0x264>)
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d03c      	beq.n	8008daa <DRV_updateFromBluetooth+0xda>
      {
        LOG_info("Drive mode now DRV_MODE_MANUAL_FIXED_SPEED");
 8008d30:	4981      	ldr	r1, [pc, #516]	; (8008f38 <DRV_updateFromBluetooth+0x268>)
 8008d32:	2001      	movs	r0, #1
 8008d34:	f000 fdd4 	bl	80098e0 <LOG_log>
        g_DRV_mode = DRV_MODE_MANUAL_FIXED_SPEED;
 8008d38:	4b7e      	ldr	r3, [pc, #504]	; (8008f34 <DRV_updateFromBluetooth+0x264>)
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8008d3e:	e034      	b.n	8008daa <DRV_updateFromBluetooth+0xda>

    case BLU_BUTTON_BLUE_CROSS:
      if (g_DRV_mode != DRV_MODE_MANUAL_VARIABLE_SPEED)
 8008d40:	4b7c      	ldr	r3, [pc, #496]	; (8008f34 <DRV_updateFromBluetooth+0x264>)
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d032      	beq.n	8008dae <DRV_updateFromBluetooth+0xde>
      {
        LOG_info("Drive mode now DRV_MODE_MANUAL_VARIABLE_SPEED");
 8008d48:	497c      	ldr	r1, [pc, #496]	; (8008f3c <DRV_updateFromBluetooth+0x26c>)
 8008d4a:	2001      	movs	r0, #1
 8008d4c:	f000 fdc8 	bl	80098e0 <LOG_log>
        g_DRV_mode = DRV_MODE_MANUAL_VARIABLE_SPEED;
 8008d50:	4b78      	ldr	r3, [pc, #480]	; (8008f34 <DRV_updateFromBluetooth+0x264>)
 8008d52:	2201      	movs	r2, #1
 8008d54:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8008d56:	e02a      	b.n	8008dae <DRV_updateFromBluetooth+0xde>

    case BLU_BUTTON_RED_CIRCLE:
      if (g_DRV_mode != DRV_MODE_MASTER_BOARD_CONTROL)
 8008d58:	4b76      	ldr	r3, [pc, #472]	; (8008f34 <DRV_updateFromBluetooth+0x264>)
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	2b02      	cmp	r3, #2
 8008d5e:	d028      	beq.n	8008db2 <DRV_updateFromBluetooth+0xe2>
      {
        LOG_info("Drive mode now DRV_MODE_MASTER_BOARD_CONTROL");
 8008d60:	4977      	ldr	r1, [pc, #476]	; (8008f40 <DRV_updateFromBluetooth+0x270>)
 8008d62:	2001      	movs	r0, #1
 8008d64:	f000 fdbc 	bl	80098e0 <LOG_log>
        g_DRV_mode = DRV_MODE_MASTER_BOARD_CONTROL;
 8008d68:	4b72      	ldr	r3, [pc, #456]	; (8008f34 <DRV_updateFromBluetooth+0x264>)
 8008d6a:	2202      	movs	r2, #2
 8008d6c:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8008d6e:	e020      	b.n	8008db2 <DRV_updateFromBluetooth+0xe2>

    case BLU_BUTTON_SELECT:
      if (g_DRV_areMotorsOn == true)
 8008d70:	4b74      	ldr	r3, [pc, #464]	; (8008f44 <DRV_updateFromBluetooth+0x274>)
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d01e      	beq.n	8008db6 <DRV_updateFromBluetooth+0xe6>
      {
        LOG_info("Drive turning motor OFF");
 8008d78:	4973      	ldr	r1, [pc, #460]	; (8008f48 <DRV_updateFromBluetooth+0x278>)
 8008d7a:	2001      	movs	r0, #1
 8008d7c:	f000 fdb0 	bl	80098e0 <LOG_log>
        g_DRV_areMotorsOn = false;
 8008d80:	4b70      	ldr	r3, [pc, #448]	; (8008f44 <DRV_updateFromBluetooth+0x274>)
 8008d82:	2200      	movs	r2, #0
 8008d84:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8008d86:	e016      	b.n	8008db6 <DRV_updateFromBluetooth+0xe6>

    case BLU_BUTTON_START:
      if (g_DRV_areMotorsOn == false)
 8008d88:	4b6e      	ldr	r3, [pc, #440]	; (8008f44 <DRV_updateFromBluetooth+0x274>)
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	f083 0301 	eor.w	r3, r3, #1
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d011      	beq.n	8008dba <DRV_updateFromBluetooth+0xea>
      {
        LOG_info("Drive turning motors ON");
 8008d96:	496d      	ldr	r1, [pc, #436]	; (8008f4c <DRV_updateFromBluetooth+0x27c>)
 8008d98:	2001      	movs	r0, #1
 8008d9a:	f000 fda1 	bl	80098e0 <LOG_log>
        g_DRV_areMotorsOn = true;
 8008d9e:	4b69      	ldr	r3, [pc, #420]	; (8008f44 <DRV_updateFromBluetooth+0x274>)
 8008da0:	2201      	movs	r2, #1
 8008da2:	701a      	strb	r2, [r3, #0]
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 8008da4:	e009      	b.n	8008dba <DRV_updateFromBluetooth+0xea>

    default:
      ; /* Nothing to do */
      break;
 8008da6:	bf00      	nop
 8008da8:	e008      	b.n	8008dbc <DRV_updateFromBluetooth+0xec>
      break;
 8008daa:	bf00      	nop
 8008dac:	e006      	b.n	8008dbc <DRV_updateFromBluetooth+0xec>
      break;
 8008dae:	bf00      	nop
 8008db0:	e004      	b.n	8008dbc <DRV_updateFromBluetooth+0xec>
      break;
 8008db2:	bf00      	nop
 8008db4:	e002      	b.n	8008dbc <DRV_updateFromBluetooth+0xec>
      break;
 8008db6:	bf00      	nop
 8008db8:	e000      	b.n	8008dbc <DRV_updateFromBluetooth+0xec>
      break;
 8008dba:	bf00      	nop
  }

  /* Master board control mode is an automated mode, so that we will */
  /* ignore any direction/button press received via bluetooth.       */
  if (g_DRV_mode == DRV_MODE_MASTER_BOARD_CONTROL)
 8008dbc:	4b5d      	ldr	r3, [pc, #372]	; (8008f34 <DRV_updateFromBluetooth+0x264>)
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	2b02      	cmp	r3, #2
 8008dc2:	f000 80b3 	beq.w	8008f2c <DRV_updateFromBluetooth+0x25c>
    ; /* Nothing to do */
  }
  /* Manual mode, applying directions received by bluetooth */
  else
  {
    if (p_bluetoothData->leftY > DRV_JOYSTICKS_THRESHOLD)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	2b0a      	cmp	r3, #10
 8008dcc:	dd0c      	ble.n	8008de8 <DRV_updateFromBluetooth+0x118>
    {
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->leftY;
 8008dce:	4b59      	ldr	r3, [pc, #356]	; (8008f34 <DRV_updateFromBluetooth+0x264>)
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d002      	beq.n	8008ddc <DRV_updateFromBluetooth+0x10c>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	e000      	b.n	8008dde <DRV_updateFromBluetooth+0x10e>
 8008ddc:	2314      	movs	r3, #20
 8008dde:	60fb      	str	r3, [r7, #12]

      DRV_moveForward(l_speed);
 8008de0:	68f8      	ldr	r0, [r7, #12]
 8008de2:	f000 f957 	bl	8009094 <DRV_moveForward>
      /* Most of the time, we will get here */
      DRV_sleep();
    }
  }

  return;
 8008de6:	e0a1      	b.n	8008f2c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightY > DRV_JOYSTICKS_THRESHOLD)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	68db      	ldr	r3, [r3, #12]
 8008dec:	2b0a      	cmp	r3, #10
 8008dee:	dd0c      	ble.n	8008e0a <DRV_updateFromBluetooth+0x13a>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->rightY;
 8008df0:	4b50      	ldr	r3, [pc, #320]	; (8008f34 <DRV_updateFromBluetooth+0x264>)
 8008df2:	781b      	ldrb	r3, [r3, #0]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d002      	beq.n	8008dfe <DRV_updateFromBluetooth+0x12e>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	e000      	b.n	8008e00 <DRV_updateFromBluetooth+0x130>
 8008dfe:	2314      	movs	r3, #20
 8008e00:	60fb      	str	r3, [r7, #12]
      DRV_moveForward(l_speed);
 8008e02:	68f8      	ldr	r0, [r7, #12]
 8008e04:	f000 f946 	bl	8009094 <DRV_moveForward>
  return;
 8008e08:	e090      	b.n	8008f2c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->leftY < -DRV_JOYSTICKS_THRESHOLD)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	f113 0f0a 	cmn.w	r3, #10
 8008e12:	da0d      	bge.n	8008e30 <DRV_updateFromBluetooth+0x160>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->leftY;
 8008e14:	4b47      	ldr	r3, [pc, #284]	; (8008f34 <DRV_updateFromBluetooth+0x264>)
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d003      	beq.n	8008e24 <DRV_updateFromBluetooth+0x154>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	425b      	negs	r3, r3
 8008e22:	e000      	b.n	8008e26 <DRV_updateFromBluetooth+0x156>
 8008e24:	2314      	movs	r3, #20
 8008e26:	60fb      	str	r3, [r7, #12]
      DRV_moveBackward(l_speed);
 8008e28:	68f8      	ldr	r0, [r7, #12]
 8008e2a:	f000 f97b 	bl	8009124 <DRV_moveBackward>
  return;
 8008e2e:	e07d      	b.n	8008f2c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightY < -DRV_JOYSTICKS_THRESHOLD)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	f113 0f0a 	cmn.w	r3, #10
 8008e38:	da0d      	bge.n	8008e56 <DRV_updateFromBluetooth+0x186>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->rightY;
 8008e3a:	4b3e      	ldr	r3, [pc, #248]	; (8008f34 <DRV_updateFromBluetooth+0x264>)
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d003      	beq.n	8008e4a <DRV_updateFromBluetooth+0x17a>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	425b      	negs	r3, r3
 8008e48:	e000      	b.n	8008e4c <DRV_updateFromBluetooth+0x17c>
 8008e4a:	2314      	movs	r3, #20
 8008e4c:	60fb      	str	r3, [r7, #12]
      DRV_moveBackward(l_speed);
 8008e4e:	68f8      	ldr	r0, [r7, #12]
 8008e50:	f000 f968 	bl	8009124 <DRV_moveBackward>
  return;
 8008e54:	e06a      	b.n	8008f2c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->leftX < -DRV_JOYSTICKS_THRESHOLD)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f113 0f0a 	cmn.w	r3, #10
 8008e5e:	da0d      	bge.n	8008e7c <DRV_updateFromBluetooth+0x1ac>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->leftX;
 8008e60:	4b34      	ldr	r3, [pc, #208]	; (8008f34 <DRV_updateFromBluetooth+0x264>)
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d003      	beq.n	8008e70 <DRV_updateFromBluetooth+0x1a0>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	425b      	negs	r3, r3
 8008e6e:	e000      	b.n	8008e72 <DRV_updateFromBluetooth+0x1a2>
 8008e70:	2314      	movs	r3, #20
 8008e72:	60fb      	str	r3, [r7, #12]
      DRV_turnLeft(l_speed);
 8008e74:	68f8      	ldr	r0, [r7, #12]
 8008e76:	f000 fa9d 	bl	80093b4 <DRV_turnLeft>
  return;
 8008e7a:	e057      	b.n	8008f2c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->leftX > DRV_JOYSTICKS_THRESHOLD)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2b0a      	cmp	r3, #10
 8008e82:	dd0c      	ble.n	8008e9e <DRV_updateFromBluetooth+0x1ce>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->leftX;
 8008e84:	4b2b      	ldr	r3, [pc, #172]	; (8008f34 <DRV_updateFromBluetooth+0x264>)
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d002      	beq.n	8008e92 <DRV_updateFromBluetooth+0x1c2>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	e000      	b.n	8008e94 <DRV_updateFromBluetooth+0x1c4>
 8008e92:	2314      	movs	r3, #20
 8008e94:	60fb      	str	r3, [r7, #12]
      DRV_turnRight(l_speed);
 8008e96:	68f8      	ldr	r0, [r7, #12]
 8008e98:	f000 fad4 	bl	8009444 <DRV_turnRight>
  return;
 8008e9c:	e046      	b.n	8008f2c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightX < -DRV_JOYSTICKS_THRESHOLD)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	f113 0f0a 	cmn.w	r3, #10
 8008ea6:	da0d      	bge.n	8008ec4 <DRV_updateFromBluetooth+0x1f4>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : -p_bluetoothData->rightX;
 8008ea8:	4b22      	ldr	r3, [pc, #136]	; (8008f34 <DRV_updateFromBluetooth+0x264>)
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d003      	beq.n	8008eb8 <DRV_updateFromBluetooth+0x1e8>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	425b      	negs	r3, r3
 8008eb6:	e000      	b.n	8008eba <DRV_updateFromBluetooth+0x1ea>
 8008eb8:	2314      	movs	r3, #20
 8008eba:	60fb      	str	r3, [r7, #12]
      DRV_translateLeft(l_speed);
 8008ebc:	68f8      	ldr	r0, [r7, #12]
 8008ebe:	f000 fb09 	bl	80094d4 <DRV_translateLeft>
  return;
 8008ec2:	e033      	b.n	8008f2c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->rightX > DRV_JOYSTICKS_THRESHOLD)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	2b0a      	cmp	r3, #10
 8008eca:	dd0c      	ble.n	8008ee6 <DRV_updateFromBluetooth+0x216>
      l_speed = g_DRV_mode == DRV_MODE_MANUAL_FIXED_SPEED ? DRV_JOYSTICKS_FIXED_SPEED : p_bluetoothData->rightX;
 8008ecc:	4b19      	ldr	r3, [pc, #100]	; (8008f34 <DRV_updateFromBluetooth+0x264>)
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d002      	beq.n	8008eda <DRV_updateFromBluetooth+0x20a>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	e000      	b.n	8008edc <DRV_updateFromBluetooth+0x20c>
 8008eda:	2314      	movs	r3, #20
 8008edc:	60fb      	str	r3, [r7, #12]
      DRV_translateRight(l_speed);
 8008ede:	68f8      	ldr	r0, [r7, #12]
 8008ee0:	f000 fb40 	bl	8009564 <DRV_translateRight>
  return;
 8008ee4:	e022      	b.n	8008f2c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_L1)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	7c1b      	ldrb	r3, [r3, #16]
 8008eea:	2b0b      	cmp	r3, #11
 8008eec:	d103      	bne.n	8008ef6 <DRV_updateFromBluetooth+0x226>
      DRV_moveForwardLeft(DRV_BUTTONS_FIXED_SPEED);
 8008eee:	2028      	movs	r0, #40	; 0x28
 8008ef0:	f000 f9a0 	bl	8009234 <DRV_moveForwardLeft>
  return;
 8008ef4:	e01a      	b.n	8008f2c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_L2)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	7c1b      	ldrb	r3, [r3, #16]
 8008efa:	2b09      	cmp	r3, #9
 8008efc:	d103      	bne.n	8008f06 <DRV_updateFromBluetooth+0x236>
      DRV_moveBackwardRight(DRV_BUTTONS_FIXED_SPEED);
 8008efe:	2028      	movs	r0, #40	; 0x28
 8008f00:	f000 f9d8 	bl	80092b4 <DRV_moveBackwardRight>
  return;
 8008f04:	e012      	b.n	8008f2c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_R1)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	7c1b      	ldrb	r3, [r3, #16]
 8008f0a:	2b0c      	cmp	r3, #12
 8008f0c:	d103      	bne.n	8008f16 <DRV_updateFromBluetooth+0x246>
      DRV_moveForwardRight(DRV_BUTTONS_FIXED_SPEED);
 8008f0e:	2028      	movs	r0, #40	; 0x28
 8008f10:	f000 f950 	bl	80091b4 <DRV_moveForwardRight>
  return;
 8008f14:	e00a      	b.n	8008f2c <DRV_updateFromBluetooth+0x25c>
    else if (p_bluetoothData->button == BLU_BUTTON_R2)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	7c1b      	ldrb	r3, [r3, #16]
 8008f1a:	2b0a      	cmp	r3, #10
 8008f1c:	d103      	bne.n	8008f26 <DRV_updateFromBluetooth+0x256>
      DRV_moveBackwardLeft(DRV_BUTTONS_FIXED_SPEED);
 8008f1e:	2028      	movs	r0, #40	; 0x28
 8008f20:	f000 fa08 	bl	8009334 <DRV_moveBackwardLeft>
  return;
 8008f24:	e002      	b.n	8008f2c <DRV_updateFromBluetooth+0x25c>
      DRV_sleep();
 8008f26:	f000 f889 	bl	800903c <DRV_sleep>
  return;
 8008f2a:	bf00      	nop
 8008f2c:	bf00      	nop
}
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	200000de 	.word	0x200000de
 8008f38:	0800b578 	.word	0x0800b578
 8008f3c:	0800b5a4 	.word	0x0800b5a4
 8008f40:	0800b5d4 	.word	0x0800b5d4
 8008f44:	200000dc 	.word	0x200000dc
 8008f48:	0800b604 	.word	0x0800b604
 8008f4c:	0800b61c 	.word	0x0800b61c

08008f50 <DRV_updateFromMaster>:

void DRV_updateFromMaster(uint16_t p_deltaTime)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b08a      	sub	sp, #40	; 0x28
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	4603      	mov	r3, r0
 8008f58:	80fb      	strh	r3, [r7, #6]
  int32_t l_pidSpeedFrontLeft;
  int32_t l_pidSpeedRearRight;
  int32_t l_pidSpeedRearLeft;

  /* Ignore master board data only whenever a manual mode is selected */
  if (g_DRV_mode != DRV_MODE_MASTER_BOARD_CONTROL)
 8008f5a:	4b26      	ldr	r3, [pc, #152]	; (8008ff4 <DRV_updateFromMaster+0xa4>)
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	2b02      	cmp	r3, #2
 8008f60:	d144      	bne.n	8008fec <DRV_updateFromMaster+0x9c>
    ; /* Nothing to do */
  }
  else
  {
    /* Get measurements */
    l_measuredSpeedFrontRight = ENC_getCount(&g_DRV_encoderFrontRight);
 8008f62:	4825      	ldr	r0, [pc, #148]	; (8008ff8 <DRV_updateFromMaster+0xa8>)
 8008f64:	f000 fb8e 	bl	8009684 <ENC_getCount>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	627b      	str	r3, [r7, #36]	; 0x24
    l_measuredSpeedFrontLeft  = ENC_getCount(&g_DRV_encoderFrontLeft );
 8008f6c:	4823      	ldr	r0, [pc, #140]	; (8008ffc <DRV_updateFromMaster+0xac>)
 8008f6e:	f000 fb89 	bl	8009684 <ENC_getCount>
 8008f72:	4603      	mov	r3, r0
 8008f74:	623b      	str	r3, [r7, #32]
    l_measuredSpeedRearRight  = ENC_getCount(&g_DRV_encoderRearRight );
 8008f76:	4822      	ldr	r0, [pc, #136]	; (8009000 <DRV_updateFromMaster+0xb0>)
 8008f78:	f000 fb84 	bl	8009684 <ENC_getCount>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	61fb      	str	r3, [r7, #28]
    l_measuredSpeedRearLeft   = ENC_getCount(&g_DRV_encoderRearLeft  );
 8008f80:	4820      	ldr	r0, [pc, #128]	; (8009004 <DRV_updateFromMaster+0xb4>)
 8008f82:	f000 fb7f 	bl	8009684 <ENC_getCount>
 8008f86:	4603      	mov	r3, r0
 8008f88:	61bb      	str	r3, [r7, #24]

    /* Update PIDs */
    l_pidSpeedFrontRight = PID_update(&g_DRV_pidFrontRight, l_measuredSpeedFrontRight, p_deltaTime);
 8008f8a:	88fb      	ldrh	r3, [r7, #6]
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f90:	481d      	ldr	r0, [pc, #116]	; (8009008 <DRV_updateFromMaster+0xb8>)
 8008f92:	f000 fe2f 	bl	8009bf4 <PID_update>
 8008f96:	6178      	str	r0, [r7, #20]
    l_pidSpeedFrontLeft  = PID_update(&g_DRV_pidFrontLeft , l_measuredSpeedFrontLeft , p_deltaTime);
 8008f98:	88fb      	ldrh	r3, [r7, #6]
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	6a39      	ldr	r1, [r7, #32]
 8008f9e:	481b      	ldr	r0, [pc, #108]	; (800900c <DRV_updateFromMaster+0xbc>)
 8008fa0:	f000 fe28 	bl	8009bf4 <PID_update>
 8008fa4:	6138      	str	r0, [r7, #16]
    l_pidSpeedRearRight  = PID_update(&g_DRV_pidRearRight , l_measuredSpeedRearRight , p_deltaTime);
 8008fa6:	88fb      	ldrh	r3, [r7, #6]
 8008fa8:	461a      	mov	r2, r3
 8008faa:	69f9      	ldr	r1, [r7, #28]
 8008fac:	4818      	ldr	r0, [pc, #96]	; (8009010 <DRV_updateFromMaster+0xc0>)
 8008fae:	f000 fe21 	bl	8009bf4 <PID_update>
 8008fb2:	60f8      	str	r0, [r7, #12]
    l_pidSpeedRearLeft   = PID_update(&g_DRV_pidRearLeft  , l_measuredSpeedRearLeft  , p_deltaTime);
 8008fb4:	88fb      	ldrh	r3, [r7, #6]
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	69b9      	ldr	r1, [r7, #24]
 8008fba:	4816      	ldr	r0, [pc, #88]	; (8009014 <DRV_updateFromMaster+0xc4>)
 8008fbc:	f000 fe1a 	bl	8009bf4 <PID_update>
 8008fc0:	60b8      	str	r0, [r7, #8]

    /* Update motors */
    MTR_setSpeed(&g_DRV_motorFrontRight, l_pidSpeedFrontRight);
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	4814      	ldr	r0, [pc, #80]	; (8009018 <DRV_updateFromMaster+0xc8>)
 8008fc8:	f000 fd82 	bl	8009ad0 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_pidSpeedFrontLeft );
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	4619      	mov	r1, r3
 8008fd0:	4812      	ldr	r0, [pc, #72]	; (800901c <DRV_updateFromMaster+0xcc>)
 8008fd2:	f000 fd7d 	bl	8009ad0 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_pidSpeedRearRight );
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	4619      	mov	r1, r3
 8008fda:	4811      	ldr	r0, [pc, #68]	; (8009020 <DRV_updateFromMaster+0xd0>)
 8008fdc:	f000 fd78 	bl	8009ad0 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_pidSpeedRearLeft  );
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	480f      	ldr	r0, [pc, #60]	; (8009024 <DRV_updateFromMaster+0xd4>)
 8008fe6:	f000 fd73 	bl	8009ad0 <MTR_setSpeed>
  }

  return;
 8008fea:	bf00      	nop
 8008fec:	bf00      	nop
}
 8008fee:	3728      	adds	r7, #40	; 0x28
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}
 8008ff4:	200000de 	.word	0x200000de
 8008ff8:	20000230 	.word	0x20000230
 8008ffc:	2000023c 	.word	0x2000023c
 8009000:	20000254 	.word	0x20000254
 8009004:	20000248 	.word	0x20000248
 8009008:	200000e0 	.word	0x200000e0
 800900c:	20000110 	.word	0x20000110
 8009010:	20000170 	.word	0x20000170
 8009014:	20000140 	.word	0x20000140
 8009018:	200001a0 	.word	0x200001a0
 800901c:	200001c4 	.word	0x200001c4
 8009020:	2000020c 	.word	0x2000020c
 8009024:	200001e8 	.word	0x200001e8

08009028 <DRV_getMode>:

T_DRV_MODE DRV_getMode(void)
{
 8009028:	b480      	push	{r7}
 800902a:	af00      	add	r7, sp, #0
  return g_DRV_mode;
 800902c:	4b02      	ldr	r3, [pc, #8]	; (8009038 <DRV_getMode+0x10>)
 800902e:	781b      	ldrb	r3, [r3, #0]
}
 8009030:	4618      	mov	r0, r3
 8009032:	46bd      	mov	sp, r7
 8009034:	bc80      	pop	{r7}
 8009036:	4770      	bx	lr
 8009038:	200000de 	.word	0x200000de

0800903c <DRV_sleep>:

static void DRV_sleep(void)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	af00      	add	r7, sp, #0
  if (g_DRV_isActive == true)
 8009040:	4b0e      	ldr	r3, [pc, #56]	; (800907c <DRV_sleep+0x40>)
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d017      	beq.n	8009078 <DRV_sleep+0x3c>
  {
    LOG_debug("Drive going to sleep");
 8009048:	490d      	ldr	r1, [pc, #52]	; (8009080 <DRV_sleep+0x44>)
 800904a:	2000      	movs	r0, #0
 800904c:	f000 fc48 	bl	80098e0 <LOG_log>

    MTR_setSpeed(&g_DRV_motorFrontRight, 0);
 8009050:	2100      	movs	r1, #0
 8009052:	480c      	ldr	r0, [pc, #48]	; (8009084 <DRV_sleep+0x48>)
 8009054:	f000 fd3c 	bl	8009ad0 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , 0);
 8009058:	2100      	movs	r1, #0
 800905a:	480b      	ldr	r0, [pc, #44]	; (8009088 <DRV_sleep+0x4c>)
 800905c:	f000 fd38 	bl	8009ad0 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , 0);
 8009060:	2100      	movs	r1, #0
 8009062:	480a      	ldr	r0, [pc, #40]	; (800908c <DRV_sleep+0x50>)
 8009064:	f000 fd34 	bl	8009ad0 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , 0);
 8009068:	2100      	movs	r1, #0
 800906a:	4809      	ldr	r0, [pc, #36]	; (8009090 <DRV_sleep+0x54>)
 800906c:	f000 fd30 	bl	8009ad0 <MTR_setSpeed>

    g_DRV_isActive = false;
 8009070:	4b02      	ldr	r3, [pc, #8]	; (800907c <DRV_sleep+0x40>)
 8009072:	2200      	movs	r2, #0
 8009074:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 8009076:	bf00      	nop
 8009078:	bf00      	nop
}
 800907a:	bd80      	pop	{r7, pc}
 800907c:	200000dd 	.word	0x200000dd
 8009080:	0800b634 	.word	0x0800b634
 8009084:	200001a0 	.word	0x200001a0
 8009088:	200001c4 	.word	0x200001c4
 800908c:	2000020c 	.word	0x2000020c
 8009090:	200001e8 	.word	0x200001e8

08009094 <DRV_moveForward>:

static void DRV_moveForward(uint32_t p_speed)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward @%u", l_speed);
 80090a0:	68fa      	ldr	r2, [r7, #12]
 80090a2:	4919      	ldr	r1, [pc, #100]	; (8009108 <DRV_moveForward+0x74>)
 80090a4:	2000      	movs	r0, #0
 80090a6:	f000 fc1b 	bl	80098e0 <LOG_log>

  g_DRV_isActive = true;
 80090aa:	4b18      	ldr	r3, [pc, #96]	; (800910c <DRV_moveForward+0x78>)
 80090ac:	2201      	movs	r2, #1
 80090ae:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD);
 80090b0:	2101      	movs	r1, #1
 80090b2:	4817      	ldr	r0, [pc, #92]	; (8009110 <DRV_moveForward+0x7c>)
 80090b4:	f000 fca0 	bl	80099f8 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD);
 80090b8:	2101      	movs	r1, #1
 80090ba:	4816      	ldr	r0, [pc, #88]	; (8009114 <DRV_moveForward+0x80>)
 80090bc:	f000 fc9c 	bl	80099f8 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD);
 80090c0:	2101      	movs	r1, #1
 80090c2:	4815      	ldr	r0, [pc, #84]	; (8009118 <DRV_moveForward+0x84>)
 80090c4:	f000 fc98 	bl	80099f8 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD);
 80090c8:	2101      	movs	r1, #1
 80090ca:	4814      	ldr	r0, [pc, #80]	; (800911c <DRV_moveForward+0x88>)
 80090cc:	f000 fc94 	bl	80099f8 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 80090d0:	4b13      	ldr	r3, [pc, #76]	; (8009120 <DRV_moveForward+0x8c>)
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	f083 0301 	eor.w	r3, r3, #1
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d110      	bne.n	8009100 <DRV_moveForward+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 80090de:	68f9      	ldr	r1, [r7, #12]
 80090e0:	480b      	ldr	r0, [pc, #44]	; (8009110 <DRV_moveForward+0x7c>)
 80090e2:	f000 fcf5 	bl	8009ad0 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 80090e6:	68f9      	ldr	r1, [r7, #12]
 80090e8:	480a      	ldr	r0, [pc, #40]	; (8009114 <DRV_moveForward+0x80>)
 80090ea:	f000 fcf1 	bl	8009ad0 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 80090ee:	68f9      	ldr	r1, [r7, #12]
 80090f0:	4809      	ldr	r0, [pc, #36]	; (8009118 <DRV_moveForward+0x84>)
 80090f2:	f000 fced 	bl	8009ad0 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 80090f6:	68f9      	ldr	r1, [r7, #12]
 80090f8:	4808      	ldr	r0, [pc, #32]	; (800911c <DRV_moveForward+0x88>)
 80090fa:	f000 fce9 	bl	8009ad0 <MTR_setSpeed>
  }

  return;
 80090fe:	bf00      	nop
 8009100:	bf00      	nop
}
 8009102:	3710      	adds	r7, #16
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	0800b64c 	.word	0x0800b64c
 800910c:	200000dd 	.word	0x200000dd
 8009110:	200001a0 	.word	0x200001a0
 8009114:	200001c4 	.word	0x200001c4
 8009118:	2000020c 	.word	0x2000020c
 800911c:	200001e8 	.word	0x200001e8
 8009120:	200000dc 	.word	0x200000dc

08009124 <DRV_moveBackward>:

static void DRV_moveBackward(uint32_t p_speed)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward @%u", l_speed);
 8009130:	68fa      	ldr	r2, [r7, #12]
 8009132:	4919      	ldr	r1, [pc, #100]	; (8009198 <DRV_moveBackward+0x74>)
 8009134:	2000      	movs	r0, #0
 8009136:	f000 fbd3 	bl	80098e0 <LOG_log>

  g_DRV_isActive = true;
 800913a:	4b18      	ldr	r3, [pc, #96]	; (800919c <DRV_moveBackward+0x78>)
 800913c:	2201      	movs	r2, #1
 800913e:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 8009140:	2102      	movs	r1, #2
 8009142:	4817      	ldr	r0, [pc, #92]	; (80091a0 <DRV_moveBackward+0x7c>)
 8009144:	f000 fc58 	bl	80099f8 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 8009148:	2102      	movs	r1, #2
 800914a:	4816      	ldr	r0, [pc, #88]	; (80091a4 <DRV_moveBackward+0x80>)
 800914c:	f000 fc54 	bl	80099f8 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 8009150:	2102      	movs	r1, #2
 8009152:	4815      	ldr	r0, [pc, #84]	; (80091a8 <DRV_moveBackward+0x84>)
 8009154:	f000 fc50 	bl	80099f8 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 8009158:	2102      	movs	r1, #2
 800915a:	4814      	ldr	r0, [pc, #80]	; (80091ac <DRV_moveBackward+0x88>)
 800915c:	f000 fc4c 	bl	80099f8 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009160:	4b13      	ldr	r3, [pc, #76]	; (80091b0 <DRV_moveBackward+0x8c>)
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	f083 0301 	eor.w	r3, r3, #1
 8009168:	b2db      	uxtb	r3, r3
 800916a:	2b00      	cmp	r3, #0
 800916c:	d110      	bne.n	8009190 <DRV_moveBackward+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800916e:	68f9      	ldr	r1, [r7, #12]
 8009170:	480b      	ldr	r0, [pc, #44]	; (80091a0 <DRV_moveBackward+0x7c>)
 8009172:	f000 fcad 	bl	8009ad0 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 8009176:	68f9      	ldr	r1, [r7, #12]
 8009178:	480a      	ldr	r0, [pc, #40]	; (80091a4 <DRV_moveBackward+0x80>)
 800917a:	f000 fca9 	bl	8009ad0 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800917e:	68f9      	ldr	r1, [r7, #12]
 8009180:	4809      	ldr	r0, [pc, #36]	; (80091a8 <DRV_moveBackward+0x84>)
 8009182:	f000 fca5 	bl	8009ad0 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 8009186:	68f9      	ldr	r1, [r7, #12]
 8009188:	4808      	ldr	r0, [pc, #32]	; (80091ac <DRV_moveBackward+0x88>)
 800918a:	f000 fca1 	bl	8009ad0 <MTR_setSpeed>
  }

  return;
 800918e:	bf00      	nop
 8009190:	bf00      	nop
}
 8009192:	3710      	adds	r7, #16
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}
 8009198:	0800b660 	.word	0x0800b660
 800919c:	200000dd 	.word	0x200000dd
 80091a0:	200001a0 	.word	0x200001a0
 80091a4:	200001c4 	.word	0x200001c4
 80091a8:	2000020c 	.word	0x2000020c
 80091ac:	200001e8 	.word	0x200001e8
 80091b0:	200000dc 	.word	0x200000dc

080091b4 <DRV_moveForwardRight>:

static void DRV_moveForwardRight (uint32_t p_speed)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward-right @%u", l_speed);
 80091c0:	68fa      	ldr	r2, [r7, #12]
 80091c2:	4915      	ldr	r1, [pc, #84]	; (8009218 <DRV_moveForwardRight+0x64>)
 80091c4:	2000      	movs	r0, #0
 80091c6:	f000 fb8b 	bl	80098e0 <LOG_log>

  g_DRV_isActive = true;
 80091ca:	4b14      	ldr	r3, [pc, #80]	; (800921c <DRV_moveForwardRight+0x68>)
 80091cc:	2201      	movs	r2, #1
 80091ce:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontLeft, MTR_DIRECTION_FORWARD);
 80091d0:	2101      	movs	r1, #1
 80091d2:	4813      	ldr	r0, [pc, #76]	; (8009220 <DRV_moveForwardRight+0x6c>)
 80091d4:	f000 fc10 	bl	80099f8 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight, MTR_DIRECTION_FORWARD);
 80091d8:	2101      	movs	r1, #1
 80091da:	4812      	ldr	r0, [pc, #72]	; (8009224 <DRV_moveForwardRight+0x70>)
 80091dc:	f000 fc0c 	bl	80099f8 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 80091e0:	4b11      	ldr	r3, [pc, #68]	; (8009228 <DRV_moveForwardRight+0x74>)
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	f083 0301 	eor.w	r3, r3, #1
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d110      	bne.n	8009210 <DRV_moveForwardRight+0x5c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight,       0);
 80091ee:	2100      	movs	r1, #0
 80091f0:	480e      	ldr	r0, [pc, #56]	; (800922c <DRV_moveForwardRight+0x78>)
 80091f2:	f000 fc6d 	bl	8009ad0 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 80091f6:	68f9      	ldr	r1, [r7, #12]
 80091f8:	4809      	ldr	r0, [pc, #36]	; (8009220 <DRV_moveForwardRight+0x6c>)
 80091fa:	f000 fc69 	bl	8009ad0 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 80091fe:	68f9      	ldr	r1, [r7, #12]
 8009200:	4808      	ldr	r0, [pc, #32]	; (8009224 <DRV_moveForwardRight+0x70>)
 8009202:	f000 fc65 	bl	8009ad0 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  ,       0);
 8009206:	2100      	movs	r1, #0
 8009208:	4809      	ldr	r0, [pc, #36]	; (8009230 <DRV_moveForwardRight+0x7c>)
 800920a:	f000 fc61 	bl	8009ad0 <MTR_setSpeed>
  }

  return;
 800920e:	bf00      	nop
 8009210:	bf00      	nop
}
 8009212:	3710      	adds	r7, #16
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}
 8009218:	0800b674 	.word	0x0800b674
 800921c:	200000dd 	.word	0x200000dd
 8009220:	200001c4 	.word	0x200001c4
 8009224:	2000020c 	.word	0x2000020c
 8009228:	200000dc 	.word	0x200000dc
 800922c:	200001a0 	.word	0x200001a0
 8009230:	200001e8 	.word	0x200001e8

08009234 <DRV_moveForwardLeft>:

static void DRV_moveForwardLeft  (uint32_t p_speed)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving forward-left @%u", l_speed);
 8009240:	68fa      	ldr	r2, [r7, #12]
 8009242:	4915      	ldr	r1, [pc, #84]	; (8009298 <DRV_moveForwardLeft+0x64>)
 8009244:	2000      	movs	r0, #0
 8009246:	f000 fb4b 	bl	80098e0 <LOG_log>

  g_DRV_isActive = true;
 800924a:	4b14      	ldr	r3, [pc, #80]	; (800929c <DRV_moveForwardLeft+0x68>)
 800924c:	2201      	movs	r2, #1
 800924e:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD);
 8009250:	2101      	movs	r1, #1
 8009252:	4813      	ldr	r0, [pc, #76]	; (80092a0 <DRV_moveForwardLeft+0x6c>)
 8009254:	f000 fbd0 	bl	80099f8 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD);
 8009258:	2101      	movs	r1, #1
 800925a:	4812      	ldr	r0, [pc, #72]	; (80092a4 <DRV_moveForwardLeft+0x70>)
 800925c:	f000 fbcc 	bl	80099f8 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009260:	4b11      	ldr	r3, [pc, #68]	; (80092a8 <DRV_moveForwardLeft+0x74>)
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	f083 0301 	eor.w	r3, r3, #1
 8009268:	b2db      	uxtb	r3, r3
 800926a:	2b00      	cmp	r3, #0
 800926c:	d110      	bne.n	8009290 <DRV_moveForwardLeft+0x5c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800926e:	68f9      	ldr	r1, [r7, #12]
 8009270:	480b      	ldr	r0, [pc, #44]	; (80092a0 <DRV_moveForwardLeft+0x6c>)
 8009272:	f000 fc2d 	bl	8009ad0 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft ,       0);
 8009276:	2100      	movs	r1, #0
 8009278:	480c      	ldr	r0, [pc, #48]	; (80092ac <DRV_moveForwardLeft+0x78>)
 800927a:	f000 fc29 	bl	8009ad0 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight ,       0);
 800927e:	2100      	movs	r1, #0
 8009280:	480b      	ldr	r0, [pc, #44]	; (80092b0 <DRV_moveForwardLeft+0x7c>)
 8009282:	f000 fc25 	bl	8009ad0 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 8009286:	68f9      	ldr	r1, [r7, #12]
 8009288:	4806      	ldr	r0, [pc, #24]	; (80092a4 <DRV_moveForwardLeft+0x70>)
 800928a:	f000 fc21 	bl	8009ad0 <MTR_setSpeed>
  }

  return;
 800928e:	bf00      	nop
 8009290:	bf00      	nop
}
 8009292:	3710      	adds	r7, #16
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}
 8009298:	0800b690 	.word	0x0800b690
 800929c:	200000dd 	.word	0x200000dd
 80092a0:	200001a0 	.word	0x200001a0
 80092a4:	200001e8 	.word	0x200001e8
 80092a8:	200000dc 	.word	0x200000dc
 80092ac:	200001c4 	.word	0x200001c4
 80092b0:	2000020c 	.word	0x2000020c

080092b4 <DRV_moveBackwardRight>:

static void DRV_moveBackwardRight(uint32_t p_speed)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward-right @%u", l_speed);
 80092c0:	68fa      	ldr	r2, [r7, #12]
 80092c2:	4915      	ldr	r1, [pc, #84]	; (8009318 <DRV_moveBackwardRight+0x64>)
 80092c4:	2000      	movs	r0, #0
 80092c6:	f000 fb0b 	bl	80098e0 <LOG_log>

  g_DRV_isActive = true;
 80092ca:	4b14      	ldr	r3, [pc, #80]	; (800931c <DRV_moveBackwardRight+0x68>)
 80092cc:	2201      	movs	r2, #1
 80092ce:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 80092d0:	2102      	movs	r1, #2
 80092d2:	4813      	ldr	r0, [pc, #76]	; (8009320 <DRV_moveBackwardRight+0x6c>)
 80092d4:	f000 fb90 	bl	80099f8 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 80092d8:	2102      	movs	r1, #2
 80092da:	4812      	ldr	r0, [pc, #72]	; (8009324 <DRV_moveBackwardRight+0x70>)
 80092dc:	f000 fb8c 	bl	80099f8 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 80092e0:	4b11      	ldr	r3, [pc, #68]	; (8009328 <DRV_moveBackwardRight+0x74>)
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	f083 0301 	eor.w	r3, r3, #1
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d110      	bne.n	8009310 <DRV_moveBackwardRight+0x5c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 80092ee:	68f9      	ldr	r1, [r7, #12]
 80092f0:	480b      	ldr	r0, [pc, #44]	; (8009320 <DRV_moveBackwardRight+0x6c>)
 80092f2:	f000 fbed 	bl	8009ad0 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft ,       0);
 80092f6:	2100      	movs	r1, #0
 80092f8:	480c      	ldr	r0, [pc, #48]	; (800932c <DRV_moveBackwardRight+0x78>)
 80092fa:	f000 fbe9 	bl	8009ad0 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight ,       0);
 80092fe:	2100      	movs	r1, #0
 8009300:	480b      	ldr	r0, [pc, #44]	; (8009330 <DRV_moveBackwardRight+0x7c>)
 8009302:	f000 fbe5 	bl	8009ad0 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 8009306:	68f9      	ldr	r1, [r7, #12]
 8009308:	4806      	ldr	r0, [pc, #24]	; (8009324 <DRV_moveBackwardRight+0x70>)
 800930a:	f000 fbe1 	bl	8009ad0 <MTR_setSpeed>
  }

  return;
 800930e:	bf00      	nop
 8009310:	bf00      	nop
}
 8009312:	3710      	adds	r7, #16
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}
 8009318:	0800b6a8 	.word	0x0800b6a8
 800931c:	200000dd 	.word	0x200000dd
 8009320:	200001a0 	.word	0x200001a0
 8009324:	200001e8 	.word	0x200001e8
 8009328:	200000dc 	.word	0x200000dc
 800932c:	200001c4 	.word	0x200001c4
 8009330:	2000020c 	.word	0x2000020c

08009334 <DRV_moveBackwardLeft>:

static void DRV_moveBackwardLeft (uint32_t p_speed)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	60fb      	str	r3, [r7, #12]

  LOG_debug("Moving backward-left @%u", l_speed);
 8009340:	68fa      	ldr	r2, [r7, #12]
 8009342:	4915      	ldr	r1, [pc, #84]	; (8009398 <DRV_moveBackwardLeft+0x64>)
 8009344:	2000      	movs	r0, #0
 8009346:	f000 facb 	bl	80098e0 <LOG_log>

  g_DRV_isActive = true;
 800934a:	4b14      	ldr	r3, [pc, #80]	; (800939c <DRV_moveBackwardLeft+0x68>)
 800934c:	2201      	movs	r2, #1
 800934e:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontLeft, MTR_DIRECTION_BACKWARD);
 8009350:	2102      	movs	r1, #2
 8009352:	4813      	ldr	r0, [pc, #76]	; (80093a0 <DRV_moveBackwardLeft+0x6c>)
 8009354:	f000 fb50 	bl	80099f8 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight, MTR_DIRECTION_BACKWARD);
 8009358:	2102      	movs	r1, #2
 800935a:	4812      	ldr	r0, [pc, #72]	; (80093a4 <DRV_moveBackwardLeft+0x70>)
 800935c:	f000 fb4c 	bl	80099f8 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009360:	4b11      	ldr	r3, [pc, #68]	; (80093a8 <DRV_moveBackwardLeft+0x74>)
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	f083 0301 	eor.w	r3, r3, #1
 8009368:	b2db      	uxtb	r3, r3
 800936a:	2b00      	cmp	r3, #0
 800936c:	d110      	bne.n	8009390 <DRV_moveBackwardLeft+0x5c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight,       0);
 800936e:	2100      	movs	r1, #0
 8009370:	480e      	ldr	r0, [pc, #56]	; (80093ac <DRV_moveBackwardLeft+0x78>)
 8009372:	f000 fbad 	bl	8009ad0 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 8009376:	68f9      	ldr	r1, [r7, #12]
 8009378:	4809      	ldr	r0, [pc, #36]	; (80093a0 <DRV_moveBackwardLeft+0x6c>)
 800937a:	f000 fba9 	bl	8009ad0 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800937e:	68f9      	ldr	r1, [r7, #12]
 8009380:	4808      	ldr	r0, [pc, #32]	; (80093a4 <DRV_moveBackwardLeft+0x70>)
 8009382:	f000 fba5 	bl	8009ad0 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  ,       0);
 8009386:	2100      	movs	r1, #0
 8009388:	4809      	ldr	r0, [pc, #36]	; (80093b0 <DRV_moveBackwardLeft+0x7c>)
 800938a:	f000 fba1 	bl	8009ad0 <MTR_setSpeed>
  }

  return;
 800938e:	bf00      	nop
 8009390:	bf00      	nop
}
 8009392:	3710      	adds	r7, #16
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}
 8009398:	0800b6c4 	.word	0x0800b6c4
 800939c:	200000dd 	.word	0x200000dd
 80093a0:	200001c4 	.word	0x200001c4
 80093a4:	2000020c 	.word	0x2000020c
 80093a8:	200000dc 	.word	0x200000dc
 80093ac:	200001a0 	.word	0x200001a0
 80093b0:	200001e8 	.word	0x200001e8

080093b4 <DRV_turnLeft>:

static void DRV_turnLeft(uint32_t p_speed)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	60fb      	str	r3, [r7, #12]

  LOG_debug("Turning left @%u", l_speed);
 80093c0:	68fa      	ldr	r2, [r7, #12]
 80093c2:	4919      	ldr	r1, [pc, #100]	; (8009428 <DRV_turnLeft+0x74>)
 80093c4:	2000      	movs	r0, #0
 80093c6:	f000 fa8b 	bl	80098e0 <LOG_log>

  g_DRV_isActive = true;
 80093ca:	4b18      	ldr	r3, [pc, #96]	; (800942c <DRV_turnLeft+0x78>)
 80093cc:	2201      	movs	r2, #1
 80093ce:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD );
 80093d0:	2101      	movs	r1, #1
 80093d2:	4817      	ldr	r0, [pc, #92]	; (8009430 <DRV_turnLeft+0x7c>)
 80093d4:	f000 fb10 	bl	80099f8 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 80093d8:	2102      	movs	r1, #2
 80093da:	4816      	ldr	r0, [pc, #88]	; (8009434 <DRV_turnLeft+0x80>)
 80093dc:	f000 fb0c 	bl	80099f8 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD );
 80093e0:	2101      	movs	r1, #1
 80093e2:	4815      	ldr	r0, [pc, #84]	; (8009438 <DRV_turnLeft+0x84>)
 80093e4:	f000 fb08 	bl	80099f8 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 80093e8:	2102      	movs	r1, #2
 80093ea:	4814      	ldr	r0, [pc, #80]	; (800943c <DRV_turnLeft+0x88>)
 80093ec:	f000 fb04 	bl	80099f8 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 80093f0:	4b13      	ldr	r3, [pc, #76]	; (8009440 <DRV_turnLeft+0x8c>)
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	f083 0301 	eor.w	r3, r3, #1
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d110      	bne.n	8009420 <DRV_turnLeft+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 80093fe:	68f9      	ldr	r1, [r7, #12]
 8009400:	480b      	ldr	r0, [pc, #44]	; (8009430 <DRV_turnLeft+0x7c>)
 8009402:	f000 fb65 	bl	8009ad0 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 8009406:	68f9      	ldr	r1, [r7, #12]
 8009408:	480a      	ldr	r0, [pc, #40]	; (8009434 <DRV_turnLeft+0x80>)
 800940a:	f000 fb61 	bl	8009ad0 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800940e:	68f9      	ldr	r1, [r7, #12]
 8009410:	4809      	ldr	r0, [pc, #36]	; (8009438 <DRV_turnLeft+0x84>)
 8009412:	f000 fb5d 	bl	8009ad0 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 8009416:	68f9      	ldr	r1, [r7, #12]
 8009418:	4808      	ldr	r0, [pc, #32]	; (800943c <DRV_turnLeft+0x88>)
 800941a:	f000 fb59 	bl	8009ad0 <MTR_setSpeed>
  }

  return;
 800941e:	bf00      	nop
 8009420:	bf00      	nop
}
 8009422:	3710      	adds	r7, #16
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}
 8009428:	0800b6e0 	.word	0x0800b6e0
 800942c:	200000dd 	.word	0x200000dd
 8009430:	200001a0 	.word	0x200001a0
 8009434:	200001c4 	.word	0x200001c4
 8009438:	2000020c 	.word	0x2000020c
 800943c:	200001e8 	.word	0x200001e8
 8009440:	200000dc 	.word	0x200000dc

08009444 <DRV_turnRight>:

static void DRV_turnRight(uint32_t p_speed)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b084      	sub	sp, #16
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	60fb      	str	r3, [r7, #12]

  LOG_debug("Turning right @%u", l_speed);
 8009450:	68fa      	ldr	r2, [r7, #12]
 8009452:	4919      	ldr	r1, [pc, #100]	; (80094b8 <DRV_turnRight+0x74>)
 8009454:	2000      	movs	r0, #0
 8009456:	f000 fa43 	bl	80098e0 <LOG_log>

  g_DRV_isActive = true;
 800945a:	4b18      	ldr	r3, [pc, #96]	; (80094bc <DRV_turnRight+0x78>)
 800945c:	2201      	movs	r2, #1
 800945e:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 8009460:	2102      	movs	r1, #2
 8009462:	4817      	ldr	r0, [pc, #92]	; (80094c0 <DRV_turnRight+0x7c>)
 8009464:	f000 fac8 	bl	80099f8 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD );
 8009468:	2101      	movs	r1, #1
 800946a:	4816      	ldr	r0, [pc, #88]	; (80094c4 <DRV_turnRight+0x80>)
 800946c:	f000 fac4 	bl	80099f8 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 8009470:	2102      	movs	r1, #2
 8009472:	4815      	ldr	r0, [pc, #84]	; (80094c8 <DRV_turnRight+0x84>)
 8009474:	f000 fac0 	bl	80099f8 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD );
 8009478:	2101      	movs	r1, #1
 800947a:	4814      	ldr	r0, [pc, #80]	; (80094cc <DRV_turnRight+0x88>)
 800947c:	f000 fabc 	bl	80099f8 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009480:	4b13      	ldr	r3, [pc, #76]	; (80094d0 <DRV_turnRight+0x8c>)
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	f083 0301 	eor.w	r3, r3, #1
 8009488:	b2db      	uxtb	r3, r3
 800948a:	2b00      	cmp	r3, #0
 800948c:	d110      	bne.n	80094b0 <DRV_turnRight+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800948e:	68f9      	ldr	r1, [r7, #12]
 8009490:	480b      	ldr	r0, [pc, #44]	; (80094c0 <DRV_turnRight+0x7c>)
 8009492:	f000 fb1d 	bl	8009ad0 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 8009496:	68f9      	ldr	r1, [r7, #12]
 8009498:	480a      	ldr	r0, [pc, #40]	; (80094c4 <DRV_turnRight+0x80>)
 800949a:	f000 fb19 	bl	8009ad0 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800949e:	68f9      	ldr	r1, [r7, #12]
 80094a0:	4809      	ldr	r0, [pc, #36]	; (80094c8 <DRV_turnRight+0x84>)
 80094a2:	f000 fb15 	bl	8009ad0 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 80094a6:	68f9      	ldr	r1, [r7, #12]
 80094a8:	4808      	ldr	r0, [pc, #32]	; (80094cc <DRV_turnRight+0x88>)
 80094aa:	f000 fb11 	bl	8009ad0 <MTR_setSpeed>
  }

  return;
 80094ae:	bf00      	nop
 80094b0:	bf00      	nop
}
 80094b2:	3710      	adds	r7, #16
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}
 80094b8:	0800b6f4 	.word	0x0800b6f4
 80094bc:	200000dd 	.word	0x200000dd
 80094c0:	200001a0 	.word	0x200001a0
 80094c4:	200001c4 	.word	0x200001c4
 80094c8:	2000020c 	.word	0x2000020c
 80094cc:	200001e8 	.word	0x200001e8
 80094d0:	200000dc 	.word	0x200000dc

080094d4 <DRV_translateLeft>:

static void DRV_translateLeft(uint32_t p_speed)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	60fb      	str	r3, [r7, #12]

  LOG_debug("Translating left @%u", l_speed);
 80094e0:	68fa      	ldr	r2, [r7, #12]
 80094e2:	4919      	ldr	r1, [pc, #100]	; (8009548 <DRV_translateLeft+0x74>)
 80094e4:	2000      	movs	r0, #0
 80094e6:	f000 f9fb 	bl	80098e0 <LOG_log>

  g_DRV_isActive = true;
 80094ea:	4b18      	ldr	r3, [pc, #96]	; (800954c <DRV_translateLeft+0x78>)
 80094ec:	2201      	movs	r2, #1
 80094ee:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_FORWARD );
 80094f0:	2101      	movs	r1, #1
 80094f2:	4817      	ldr	r0, [pc, #92]	; (8009550 <DRV_translateLeft+0x7c>)
 80094f4:	f000 fa80 	bl	80099f8 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_BACKWARD);
 80094f8:	2102      	movs	r1, #2
 80094fa:	4816      	ldr	r0, [pc, #88]	; (8009554 <DRV_translateLeft+0x80>)
 80094fc:	f000 fa7c 	bl	80099f8 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_BACKWARD);
 8009500:	2102      	movs	r1, #2
 8009502:	4815      	ldr	r0, [pc, #84]	; (8009558 <DRV_translateLeft+0x84>)
 8009504:	f000 fa78 	bl	80099f8 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_FORWARD );
 8009508:	2101      	movs	r1, #1
 800950a:	4814      	ldr	r0, [pc, #80]	; (800955c <DRV_translateLeft+0x88>)
 800950c:	f000 fa74 	bl	80099f8 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 8009510:	4b13      	ldr	r3, [pc, #76]	; (8009560 <DRV_translateLeft+0x8c>)
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	f083 0301 	eor.w	r3, r3, #1
 8009518:	b2db      	uxtb	r3, r3
 800951a:	2b00      	cmp	r3, #0
 800951c:	d110      	bne.n	8009540 <DRV_translateLeft+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 800951e:	68f9      	ldr	r1, [r7, #12]
 8009520:	480b      	ldr	r0, [pc, #44]	; (8009550 <DRV_translateLeft+0x7c>)
 8009522:	f000 fad5 	bl	8009ad0 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 8009526:	68f9      	ldr	r1, [r7, #12]
 8009528:	480a      	ldr	r0, [pc, #40]	; (8009554 <DRV_translateLeft+0x80>)
 800952a:	f000 fad1 	bl	8009ad0 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 800952e:	68f9      	ldr	r1, [r7, #12]
 8009530:	4809      	ldr	r0, [pc, #36]	; (8009558 <DRV_translateLeft+0x84>)
 8009532:	f000 facd 	bl	8009ad0 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 8009536:	68f9      	ldr	r1, [r7, #12]
 8009538:	4808      	ldr	r0, [pc, #32]	; (800955c <DRV_translateLeft+0x88>)
 800953a:	f000 fac9 	bl	8009ad0 <MTR_setSpeed>
  }

  return;
 800953e:	bf00      	nop
 8009540:	bf00      	nop
}
 8009542:	3710      	adds	r7, #16
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}
 8009548:	0800b708 	.word	0x0800b708
 800954c:	200000dd 	.word	0x200000dd
 8009550:	200001a0 	.word	0x200001a0
 8009554:	200001c4 	.word	0x200001c4
 8009558:	2000020c 	.word	0x2000020c
 800955c:	200001e8 	.word	0x200001e8
 8009560:	200000dc 	.word	0x200000dc

08009564 <DRV_translateRight>:

static void DRV_translateRight(uint32_t p_speed)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b084      	sub	sp, #16
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
  uint32_t l_speed = p_speed;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	60fb      	str	r3, [r7, #12]

  LOG_debug("Translating right @%u", l_speed);
 8009570:	68fa      	ldr	r2, [r7, #12]
 8009572:	4919      	ldr	r1, [pc, #100]	; (80095d8 <DRV_translateRight+0x74>)
 8009574:	2000      	movs	r0, #0
 8009576:	f000 f9b3 	bl	80098e0 <LOG_log>

  g_DRV_isActive = true;
 800957a:	4b18      	ldr	r3, [pc, #96]	; (80095dc <DRV_translateRight+0x78>)
 800957c:	2201      	movs	r2, #1
 800957e:	701a      	strb	r2, [r3, #0]

  MTR_setDirection(&g_DRV_motorFrontRight, MTR_DIRECTION_BACKWARD);
 8009580:	2102      	movs	r1, #2
 8009582:	4817      	ldr	r0, [pc, #92]	; (80095e0 <DRV_translateRight+0x7c>)
 8009584:	f000 fa38 	bl	80099f8 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorFrontLeft , MTR_DIRECTION_FORWARD );
 8009588:	2101      	movs	r1, #1
 800958a:	4816      	ldr	r0, [pc, #88]	; (80095e4 <DRV_translateRight+0x80>)
 800958c:	f000 fa34 	bl	80099f8 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearRight , MTR_DIRECTION_FORWARD );
 8009590:	2101      	movs	r1, #1
 8009592:	4815      	ldr	r0, [pc, #84]	; (80095e8 <DRV_translateRight+0x84>)
 8009594:	f000 fa30 	bl	80099f8 <MTR_setDirection>
  MTR_setDirection(&g_DRV_motorRearLeft  , MTR_DIRECTION_BACKWARD);
 8009598:	2102      	movs	r1, #2
 800959a:	4814      	ldr	r0, [pc, #80]	; (80095ec <DRV_translateRight+0x88>)
 800959c:	f000 fa2c 	bl	80099f8 <MTR_setDirection>

  if (g_DRV_areMotorsOn == false)
 80095a0:	4b13      	ldr	r3, [pc, #76]	; (80095f0 <DRV_translateRight+0x8c>)
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	f083 0301 	eor.w	r3, r3, #1
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d110      	bne.n	80095d0 <DRV_translateRight+0x6c>
  {
    ; /* Nothing to do */
  }
  else
  {
    MTR_setSpeed(&g_DRV_motorFrontRight, l_speed);
 80095ae:	68f9      	ldr	r1, [r7, #12]
 80095b0:	480b      	ldr	r0, [pc, #44]	; (80095e0 <DRV_translateRight+0x7c>)
 80095b2:	f000 fa8d 	bl	8009ad0 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorFrontLeft , l_speed);
 80095b6:	68f9      	ldr	r1, [r7, #12]
 80095b8:	480a      	ldr	r0, [pc, #40]	; (80095e4 <DRV_translateRight+0x80>)
 80095ba:	f000 fa89 	bl	8009ad0 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearRight , l_speed);
 80095be:	68f9      	ldr	r1, [r7, #12]
 80095c0:	4809      	ldr	r0, [pc, #36]	; (80095e8 <DRV_translateRight+0x84>)
 80095c2:	f000 fa85 	bl	8009ad0 <MTR_setSpeed>
    MTR_setSpeed(&g_DRV_motorRearLeft  , l_speed);
 80095c6:	68f9      	ldr	r1, [r7, #12]
 80095c8:	4808      	ldr	r0, [pc, #32]	; (80095ec <DRV_translateRight+0x88>)
 80095ca:	f000 fa81 	bl	8009ad0 <MTR_setSpeed>
  }

  return;
 80095ce:	bf00      	nop
 80095d0:	bf00      	nop
}
 80095d2:	3710      	adds	r7, #16
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	0800b720 	.word	0x0800b720
 80095dc:	200000dd 	.word	0x200000dd
 80095e0:	200001a0 	.word	0x200001a0
 80095e4:	200001c4 	.word	0x200001c4
 80095e8:	2000020c 	.word	0x2000020c
 80095ec:	200001e8 	.word	0x200001e8
 80095f0:	200000dc 	.word	0x200000dc

080095f4 <ENC_init>:
#include "encoder.h"

#include "log.h"

void ENC_init(T_ENC_Handle *p_handle, char *p_name, bool p_invertOnUpdate, TIM_HandleTypeDef *p_encoderTimerHandle)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	603b      	str	r3, [r7, #0]
 8009600:	4613      	mov	r3, r2
 8009602:	71fb      	strb	r3, [r7, #7]
  LOG_info("Initializing Encoder module for %s", p_name);
 8009604:	68ba      	ldr	r2, [r7, #8]
 8009606:	490a      	ldr	r1, [pc, #40]	; (8009630 <ENC_init+0x3c>)
 8009608:	2001      	movs	r0, #1
 800960a:	f000 f969 	bl	80098e0 <LOG_log>

  p_handle->name           = p_name;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	68ba      	ldr	r2, [r7, #8]
 8009612:	601a      	str	r2, [r3, #0]
  p_handle->invertOnUpdate = p_invertOnUpdate;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	79fa      	ldrb	r2, [r7, #7]
 8009618:	719a      	strb	r2, [r3, #6]
  p_handle->timerHandle    = p_encoderTimerHandle;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	683a      	ldr	r2, [r7, #0]
 800961e:	609a      	str	r2, [r3, #8]

  ENC_reset(p_handle);
 8009620:	68f8      	ldr	r0, [r7, #12]
 8009622:	f000 f807 	bl	8009634 <ENC_reset>

  return;
 8009626:	bf00      	nop
}
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop
 8009630:	0800b738 	.word	0x0800b738

08009634 <ENC_reset>:

void ENC_reset(T_ENC_Handle *p_handle)
{
 8009634:	b480      	push	{r7}
 8009636:	b083      	sub	sp, #12
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  p_handle->value = 0;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	809a      	strh	r2, [r3, #4]

  return;
 8009642:	bf00      	nop
}
 8009644:	370c      	adds	r7, #12
 8009646:	46bd      	mov	sp, r7
 8009648:	bc80      	pop	{r7}
 800964a:	4770      	bx	lr

0800964c <ENC_update>:

void ENC_update(T_ENC_Handle *p_handle, int16_t p_value)
{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	460b      	mov	r3, r1
 8009656:	807b      	strh	r3, [r7, #2]
  if (p_handle->invertOnUpdate == false)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	799b      	ldrb	r3, [r3, #6]
 800965c:	f083 0301 	eor.w	r3, r3, #1
 8009660:	b2db      	uxtb	r3, r3
 8009662:	2b00      	cmp	r3, #0
 8009664:	d003      	beq.n	800966e <ENC_update+0x22>
  {
    p_handle->value = p_value;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	887a      	ldrh	r2, [r7, #2]
 800966a:	809a      	strh	r2, [r3, #4]
  else
  {
    p_handle->value = -p_value;
  }

  return;
 800966c:	e006      	b.n	800967c <ENC_update+0x30>
    p_handle->value = -p_value;
 800966e:	887b      	ldrh	r3, [r7, #2]
 8009670:	425b      	negs	r3, r3
 8009672:	b29b      	uxth	r3, r3
 8009674:	b21a      	sxth	r2, r3
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	809a      	strh	r2, [r3, #4]
  return;
 800967a:	bf00      	nop
}
 800967c:	370c      	adds	r7, #12
 800967e:	46bd      	mov	sp, r7
 8009680:	bc80      	pop	{r7}
 8009682:	4770      	bx	lr

08009684 <ENC_getCount>:

int16_t ENC_getCount(T_ENC_Handle *p_handle)
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  return p_handle->value;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 8009692:	4618      	mov	r0, r3
 8009694:	370c      	adds	r7, #12
 8009696:	46bd      	mov	sp, r7
 8009698:	bc80      	pop	{r7}
 800969a:	4770      	bx	lr

0800969c <LED_setMode>:
#include "log.h"

static T_LED_MODE g_LED_mode = LED_MODE_BLINK_SLOW;

void LED_setMode(T_LED_MODE p_mode)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	4603      	mov	r3, r0
 80096a4:	71fb      	strb	r3, [r7, #7]
  if (p_mode != g_LED_mode)
 80096a6:	4b1b      	ldr	r3, [pc, #108]	; (8009714 <LED_setMode+0x78>)
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	79fa      	ldrb	r2, [r7, #7]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d02d      	beq.n	800970c <LED_setMode+0x70>
  {
    switch (p_mode)
 80096b0:	79fb      	ldrb	r3, [r7, #7]
 80096b2:	2b04      	cmp	r3, #4
 80096b4:	d825      	bhi.n	8009702 <LED_setMode+0x66>
 80096b6:	a201      	add	r2, pc, #4	; (adr r2, 80096bc <LED_setMode+0x20>)
 80096b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096bc:	080096d1 	.word	0x080096d1
 80096c0:	080096db 	.word	0x080096db
 80096c4:	080096e5 	.word	0x080096e5
 80096c8:	080096ef 	.word	0x080096ef
 80096cc:	080096f9 	.word	0x080096f9
    {
      case LED_MODE_FORCED_OFF:
        LOG_info("Turning LED OFF");
 80096d0:	4911      	ldr	r1, [pc, #68]	; (8009718 <LED_setMode+0x7c>)
 80096d2:	2001      	movs	r0, #1
 80096d4:	f000 f904 	bl	80098e0 <LOG_log>
        break;
 80096d8:	e014      	b.n	8009704 <LED_setMode+0x68>

      case LED_MODE_FORCED_ON:
        LOG_info("Turning LED ON");
 80096da:	4910      	ldr	r1, [pc, #64]	; (800971c <LED_setMode+0x80>)
 80096dc:	2001      	movs	r0, #1
 80096de:	f000 f8ff 	bl	80098e0 <LOG_log>
        break;
 80096e2:	e00f      	b.n	8009704 <LED_setMode+0x68>

      case LED_MODE_BLINK_SLOW:
        LOG_info("Setting LED to blink slow");
 80096e4:	490e      	ldr	r1, [pc, #56]	; (8009720 <LED_setMode+0x84>)
 80096e6:	2001      	movs	r0, #1
 80096e8:	f000 f8fa 	bl	80098e0 <LOG_log>
        break;
 80096ec:	e00a      	b.n	8009704 <LED_setMode+0x68>

      case LED_MODE_BLINK_MEDIUM:
        LOG_info("Setting LED to blink medium");
 80096ee:	490d      	ldr	r1, [pc, #52]	; (8009724 <LED_setMode+0x88>)
 80096f0:	2001      	movs	r0, #1
 80096f2:	f000 f8f5 	bl	80098e0 <LOG_log>
        break;
 80096f6:	e005      	b.n	8009704 <LED_setMode+0x68>

      case LED_MODE_BLINK_FAST:
        LOG_info("Setting LED to blink fast");
 80096f8:	490b      	ldr	r1, [pc, #44]	; (8009728 <LED_setMode+0x8c>)
 80096fa:	2001      	movs	r0, #1
 80096fc:	f000 f8f0 	bl	80098e0 <LOG_log>
        break;
 8009700:	e000      	b.n	8009704 <LED_setMode+0x68>

      default:
        ; /* Nothing to do */
        break;
 8009702:	bf00      	nop
    }

    g_LED_mode = p_mode;
 8009704:	4a03      	ldr	r2, [pc, #12]	; (8009714 <LED_setMode+0x78>)
 8009706:	79fb      	ldrb	r3, [r7, #7]
 8009708:	7013      	strb	r3, [r2, #0]
  else
  {
    ; /* Nothong to do */
  }

  return;
 800970a:	bf00      	nop
 800970c:	bf00      	nop
}
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}
 8009714:	20000009 	.word	0x20000009
 8009718:	0800b75c 	.word	0x0800b75c
 800971c:	0800b76c 	.word	0x0800b76c
 8009720:	0800b77c 	.word	0x0800b77c
 8009724:	0800b798 	.word	0x0800b798
 8009728:	0800b7b4 	.word	0x0800b7b4

0800972c <LED_update>:
{
  return g_LED_mode;
}

void LED_update(void)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	af00      	add	r7, sp, #0
  static uint32_t l_blinkCounter = 0;

  switch (g_LED_mode)
 8009730:	4b2a      	ldr	r3, [pc, #168]	; (80097dc <LED_update+0xb0>)
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	2b04      	cmp	r3, #4
 8009736:	d849      	bhi.n	80097cc <LED_update+0xa0>
 8009738:	a201      	add	r2, pc, #4	; (adr r2, 8009740 <LED_update+0x14>)
 800973a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800973e:	bf00      	nop
 8009740:	08009755 	.word	0x08009755
 8009744:	08009763 	.word	0x08009763
 8009748:	08009771 	.word	0x08009771
 800974c:	0800979f 	.word	0x0800979f
 8009750:	080097c1 	.word	0x080097c1
  {
    case LED_MODE_FORCED_OFF:
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 8009754:	2201      	movs	r2, #1
 8009756:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800975a:	4821      	ldr	r0, [pc, #132]	; (80097e0 <LED_update+0xb4>)
 800975c:	f7f9 ff4e 	bl	80035fc <HAL_GPIO_WritePin>
      break;
 8009760:	e039      	b.n	80097d6 <LED_update+0xaa>

    case LED_MODE_FORCED_ON:
      HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8009762:	2200      	movs	r2, #0
 8009764:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009768:	481d      	ldr	r0, [pc, #116]	; (80097e0 <LED_update+0xb4>)
 800976a:	f7f9 ff47 	bl	80035fc <HAL_GPIO_WritePin>
      break;
 800976e:	e032      	b.n	80097d6 <LED_update+0xaa>

    case LED_MODE_BLINK_SLOW:
      l_blinkCounter++;
 8009770:	4b1c      	ldr	r3, [pc, #112]	; (80097e4 <LED_update+0xb8>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	3301      	adds	r3, #1
 8009776:	4a1b      	ldr	r2, [pc, #108]	; (80097e4 <LED_update+0xb8>)
 8009778:	6013      	str	r3, [r2, #0]
      if (l_blinkCounter % 5 == 0)
 800977a:	4b1a      	ldr	r3, [pc, #104]	; (80097e4 <LED_update+0xb8>)
 800977c:	6819      	ldr	r1, [r3, #0]
 800977e:	4b1a      	ldr	r3, [pc, #104]	; (80097e8 <LED_update+0xbc>)
 8009780:	fba3 2301 	umull	r2, r3, r3, r1
 8009784:	089a      	lsrs	r2, r3, #2
 8009786:	4613      	mov	r3, r2
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	4413      	add	r3, r2
 800978c:	1aca      	subs	r2, r1, r3
 800978e:	2a00      	cmp	r2, #0
 8009790:	d11e      	bne.n	80097d0 <LED_update+0xa4>
      {
        HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8009792:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009796:	4812      	ldr	r0, [pc, #72]	; (80097e0 <LED_update+0xb4>)
 8009798:	f7f9 ff62 	bl	8003660 <HAL_GPIO_TogglePin>
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 800979c:	e018      	b.n	80097d0 <LED_update+0xa4>

    case LED_MODE_BLINK_MEDIUM:
      l_blinkCounter++;
 800979e:	4b11      	ldr	r3, [pc, #68]	; (80097e4 <LED_update+0xb8>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	3301      	adds	r3, #1
 80097a4:	4a0f      	ldr	r2, [pc, #60]	; (80097e4 <LED_update+0xb8>)
 80097a6:	6013      	str	r3, [r2, #0]
      if (l_blinkCounter % 2 == 0)
 80097a8:	4b0e      	ldr	r3, [pc, #56]	; (80097e4 <LED_update+0xb8>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f003 0301 	and.w	r3, r3, #1
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d10f      	bne.n	80097d4 <LED_update+0xa8>
      {
        HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 80097b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80097b8:	4809      	ldr	r0, [pc, #36]	; (80097e0 <LED_update+0xb4>)
 80097ba:	f7f9 ff51 	bl	8003660 <HAL_GPIO_TogglePin>
      }
      else
      {
        ; /* Nothing to do */
      }
      break;
 80097be:	e009      	b.n	80097d4 <LED_update+0xa8>

    case LED_MODE_BLINK_FAST:
      HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 80097c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80097c4:	4806      	ldr	r0, [pc, #24]	; (80097e0 <LED_update+0xb4>)
 80097c6:	f7f9 ff4b 	bl	8003660 <HAL_GPIO_TogglePin>
      break;
 80097ca:	e004      	b.n	80097d6 <LED_update+0xaa>

    default:
      ; /* Nothing to do */
      break;
 80097cc:	bf00      	nop
 80097ce:	e002      	b.n	80097d6 <LED_update+0xaa>
      break;
 80097d0:	bf00      	nop
 80097d2:	e000      	b.n	80097d6 <LED_update+0xaa>
      break;
 80097d4:	bf00      	nop
  }

  return;
 80097d6:	bf00      	nop
}
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	20000009 	.word	0x20000009
 80097e0:	40011000 	.word	0x40011000
 80097e4:	20000260 	.word	0x20000260
 80097e8:	cccccccd 	.word	0xcccccccd

080097ec <LOG_init>:
{
  "DEBUG", "INFO", "WARNING", "ERROR"
};

void LOG_init(RTC_HandleTypeDef *p_rctHandle)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  g_LOG_rtcHandle = p_rctHandle;
 80097f4:	4a03      	ldr	r2, [pc, #12]	; (8009804 <LOG_init+0x18>)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6013      	str	r3, [r2, #0]

  return;
 80097fa:	bf00      	nop
}
 80097fc:	370c      	adds	r7, #12
 80097fe:	46bd      	mov	sp, r7
 8009800:	bc80      	pop	{r7}
 8009802:	4770      	bx	lr
 8009804:	20000268 	.word	0x20000268

08009808 <LOG_turnOn>:

void LOG_turnOn(void)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	af00      	add	r7, sp, #0
  if (g_LOG_isOn == false)
 800980c:	4b08      	ldr	r3, [pc, #32]	; (8009830 <LOG_turnOn+0x28>)
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	f083 0301 	eor.w	r3, r3, #1
 8009814:	b2db      	uxtb	r3, r3
 8009816:	2b00      	cmp	r3, #0
 8009818:	d007      	beq.n	800982a <LOG_turnOn+0x22>
  {
    g_LOG_isOn = true;
 800981a:	4b05      	ldr	r3, [pc, #20]	; (8009830 <LOG_turnOn+0x28>)
 800981c:	2201      	movs	r2, #1
 800981e:	701a      	strb	r2, [r3, #0]

    LOG_info("Turning LOG ON");
 8009820:	4904      	ldr	r1, [pc, #16]	; (8009834 <LOG_turnOn+0x2c>)
 8009822:	2001      	movs	r0, #1
 8009824:	f000 f85c 	bl	80098e0 <LOG_log>
  else
  {
    ; /* Nothing to do */
  }

  return;
 8009828:	bf00      	nop
 800982a:	bf00      	nop
}
 800982c:	bd80      	pop	{r7, pc}
 800982e:	bf00      	nop
 8009830:	20000264 	.word	0x20000264
 8009834:	0800b7f0 	.word	0x0800b7f0

08009838 <LOG_turnOff>:

void LOG_turnOff(void)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	af00      	add	r7, sp, #0
  if (g_LOG_isOn == true)
 800983c:	4b06      	ldr	r3, [pc, #24]	; (8009858 <LOG_turnOff+0x20>)
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d007      	beq.n	8009854 <LOG_turnOff+0x1c>
  {
    LOG_info("Turning LOG OFF");
 8009844:	4905      	ldr	r1, [pc, #20]	; (800985c <LOG_turnOff+0x24>)
 8009846:	2001      	movs	r0, #1
 8009848:	f000 f84a 	bl	80098e0 <LOG_log>

    g_LOG_isOn = false;
 800984c:	4b02      	ldr	r3, [pc, #8]	; (8009858 <LOG_turnOff+0x20>)
 800984e:	2200      	movs	r2, #0
 8009850:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 8009852:	bf00      	nop
 8009854:	bf00      	nop
}
 8009856:	bd80      	pop	{r7, pc}
 8009858:	20000264 	.word	0x20000264
 800985c:	0800b800 	.word	0x0800b800

08009860 <LOG_setLevel>:

void LOG_setLevel(T_LOG_LEVEL p_level)
{
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
 8009866:	4603      	mov	r3, r0
 8009868:	71fb      	strb	r3, [r7, #7]
  g_LOG_level = p_level;
 800986a:	4a04      	ldr	r2, [pc, #16]	; (800987c <LOG_setLevel+0x1c>)
 800986c:	79fb      	ldrb	r3, [r7, #7]
 800986e:	7013      	strb	r3, [r2, #0]

  return;
 8009870:	bf00      	nop
}
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	bc80      	pop	{r7}
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	20000265 	.word	0x20000265

08009880 <LOG_increaseLevel>:

void LOG_increaseLevel(void)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	af00      	add	r7, sp, #0
  /* Display more detailed logs */
  if (g_LOG_level > LOG_LEVEL_DEBUG)
 8009884:	4b08      	ldr	r3, [pc, #32]	; (80098a8 <LOG_increaseLevel+0x28>)
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d00a      	beq.n	80098a2 <LOG_increaseLevel+0x22>
  {
    LOG_info("Increasing LOG level");
 800988c:	4907      	ldr	r1, [pc, #28]	; (80098ac <LOG_increaseLevel+0x2c>)
 800988e:	2001      	movs	r0, #1
 8009890:	f000 f826 	bl	80098e0 <LOG_log>

    g_LOG_level--;
 8009894:	4b04      	ldr	r3, [pc, #16]	; (80098a8 <LOG_increaseLevel+0x28>)
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	3b01      	subs	r3, #1
 800989a:	b2da      	uxtb	r2, r3
 800989c:	4b02      	ldr	r3, [pc, #8]	; (80098a8 <LOG_increaseLevel+0x28>)
 800989e:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 80098a0:	bf00      	nop
 80098a2:	bf00      	nop
}
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	20000265 	.word	0x20000265
 80098ac:	0800b810 	.word	0x0800b810

080098b0 <LOG_decreaseLevel>:

void LOG_decreaseLevel(void)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	af00      	add	r7, sp, #0
  /* Display less detailed logs */
  if (g_LOG_level < LOG_LEVEL_ERROR)
 80098b4:	4b08      	ldr	r3, [pc, #32]	; (80098d8 <LOG_decreaseLevel+0x28>)
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	2b02      	cmp	r3, #2
 80098ba:	d80a      	bhi.n	80098d2 <LOG_decreaseLevel+0x22>
  {
    LOG_info("Decreasing LOG level");
 80098bc:	4907      	ldr	r1, [pc, #28]	; (80098dc <LOG_decreaseLevel+0x2c>)
 80098be:	2001      	movs	r0, #1
 80098c0:	f000 f80e 	bl	80098e0 <LOG_log>

    g_LOG_level++;
 80098c4:	4b04      	ldr	r3, [pc, #16]	; (80098d8 <LOG_decreaseLevel+0x28>)
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	3301      	adds	r3, #1
 80098ca:	b2da      	uxtb	r2, r3
 80098cc:	4b02      	ldr	r3, [pc, #8]	; (80098d8 <LOG_decreaseLevel+0x28>)
 80098ce:	701a      	strb	r2, [r3, #0]
  else
  {
    ; /* Nothing to do */
  }

  return;
 80098d0:	bf00      	nop
 80098d2:	bf00      	nop
}
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	20000265 	.word	0x20000265
 80098dc:	0800b828 	.word	0x0800b828

080098e0 <LOG_log>:

void LOG_log(T_LOG_LEVEL p_level, const char *p_format, ...)
{
 80098e0:	b40e      	push	{r1, r2, r3}
 80098e2:	b580      	push	{r7, lr}
 80098e4:	b089      	sub	sp, #36	; 0x24
 80098e6:	af02      	add	r7, sp, #8
 80098e8:	4603      	mov	r3, r0
 80098ea:	71fb      	strb	r3, [r7, #7]
  va_list         l_argumentsList;
  RTC_TimeTypeDef l_time;
  RTC_DateTypeDef l_date;

  if ((g_LOG_isOn == true) && (p_level >= g_LOG_level))
 80098ec:	4b1c      	ldr	r3, [pc, #112]	; (8009960 <LOG_log+0x80>)
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d02d      	beq.n	8009950 <LOG_log+0x70>
 80098f4:	4b1b      	ldr	r3, [pc, #108]	; (8009964 <LOG_log+0x84>)
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	79fa      	ldrb	r2, [r7, #7]
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d328      	bcc.n	8009950 <LOG_log+0x70>
  {
    HAL_RTC_GetTime(g_LOG_rtcHandle, &l_time, RTC_FORMAT_BCD);
 80098fe:	4b1a      	ldr	r3, [pc, #104]	; (8009968 <LOG_log+0x88>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f107 0110 	add.w	r1, r7, #16
 8009906:	2201      	movs	r2, #1
 8009908:	4618      	mov	r0, r3
 800990a:	f7fb f859 	bl	80049c0 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(g_LOG_rtcHandle, &l_date, RTC_FORMAT_BCD);
 800990e:	4b16      	ldr	r3, [pc, #88]	; (8009968 <LOG_log+0x88>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f107 010c 	add.w	r1, r7, #12
 8009916:	2201      	movs	r2, #1
 8009918:	4618      	mov	r0, r3
 800991a:	f7fb fa55 	bl	8004dc8 <HAL_RTC_GetDate>

    va_start(l_argumentsList, p_format);
 800991e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009922:	617b      	str	r3, [r7, #20]

    (void)printf("%-7s - %02x:%02x:%02x - ", g_LOG_levelStrings[p_level], l_time.Hours, l_time.Minutes, l_time.Seconds);
 8009924:	79fb      	ldrb	r3, [r7, #7]
 8009926:	4a11      	ldr	r2, [pc, #68]	; (800996c <LOG_log+0x8c>)
 8009928:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800992c:	7c3b      	ldrb	r3, [r7, #16]
 800992e:	461a      	mov	r2, r3
 8009930:	7c7b      	ldrb	r3, [r7, #17]
 8009932:	4618      	mov	r0, r3
 8009934:	7cbb      	ldrb	r3, [r7, #18]
 8009936:	9300      	str	r3, [sp, #0]
 8009938:	4603      	mov	r3, r0
 800993a:	480d      	ldr	r0, [pc, #52]	; (8009970 <LOG_log+0x90>)
 800993c:	f000 fa98 	bl	8009e70 <iprintf>
    (void)vprintf(p_format, l_argumentsList);
 8009940:	6979      	ldr	r1, [r7, #20]
 8009942:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009944:	f000 fb22 	bl	8009f8c <viprintf>
    (void)printf("\r\n");
 8009948:	480a      	ldr	r0, [pc, #40]	; (8009974 <LOG_log+0x94>)
 800994a:	f000 fb17 	bl	8009f7c <puts>
  else
  {
    ; /* Nothing to do */
  }

  return;
 800994e:	bf00      	nop
 8009950:	bf00      	nop
}
 8009952:	371c      	adds	r7, #28
 8009954:	46bd      	mov	sp, r7
 8009956:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800995a:	b003      	add	sp, #12
 800995c:	4770      	bx	lr
 800995e:	bf00      	nop
 8009960:	20000264 	.word	0x20000264
 8009964:	20000265 	.word	0x20000265
 8009968:	20000268 	.word	0x20000268
 800996c:	2000000c 	.word	0x2000000c
 8009970:	0800b840 	.word	0x0800b840
 8009974:	0800b85c 	.word	0x0800b85c

08009978 <MAS_receiveData>:
#include "stm32f1xx_hal.h"

static uint8_t g_MAS_rxBuffer[12] = {0};

void MAS_receiveData(UART_HandleTypeDef *p_huart)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(p_huart, g_MAS_rxBuffer, 1);
 8009980:	2201      	movs	r2, #1
 8009982:	4904      	ldr	r1, [pc, #16]	; (8009994 <MAS_receiveData+0x1c>)
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f7fe f8c5 	bl	8007b14 <HAL_UART_Receive_IT>

  return;
 800998a:	bf00      	nop
}
 800998c:	3708      	adds	r7, #8
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	2000026c 	.word	0x2000026c

08009998 <MTR_init>:
              uint32_t           p_dirPin1,
              GPIO_TypeDef      *p_dirPin2Port,
              uint32_t           p_dirPin2,
              TIM_HandleTypeDef *p_pwmTimerHandle,
              uint32_t           p_pwmChannel)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b084      	sub	sp, #16
 800999c:	af00      	add	r7, sp, #0
 800999e:	60f8      	str	r0, [r7, #12]
 80099a0:	60b9      	str	r1, [r7, #8]
 80099a2:	607a      	str	r2, [r7, #4]
 80099a4:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing Motor module for %s", p_name);
 80099a6:	68ba      	ldr	r2, [r7, #8]
 80099a8:	4912      	ldr	r1, [pc, #72]	; (80099f4 <MTR_init+0x5c>)
 80099aa:	2001      	movs	r0, #1
 80099ac:	f7ff ff98 	bl	80098e0 <LOG_log>

  p_handle->name           = p_name;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	68ba      	ldr	r2, [r7, #8]
 80099b4:	601a      	str	r2, [r3, #0]
  p_handle->dirPin1Port    = p_dirPin1Port;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	605a      	str	r2, [r3, #4]
  p_handle->dirPin1        = p_dirPin1;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	683a      	ldr	r2, [r7, #0]
 80099c0:	609a      	str	r2, [r3, #8]
  p_handle->dirPin2Port    = p_dirPin2Port;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	69ba      	ldr	r2, [r7, #24]
 80099c6:	60da      	str	r2, [r3, #12]
  p_handle->dirPin2        = p_dirPin2;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	69fa      	ldr	r2, [r7, #28]
 80099cc:	611a      	str	r2, [r3, #16]
  p_handle->pwmTimerHandle = p_pwmTimerHandle;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	6a3a      	ldr	r2, [r7, #32]
 80099d2:	61da      	str	r2, [r3, #28]
  p_handle->pwmChannel     = p_pwmChannel;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099d8:	621a      	str	r2, [r3, #32]

  MTR_setDirection(p_handle, MTR_DIRECTION_STOP);
 80099da:	2100      	movs	r1, #0
 80099dc:	68f8      	ldr	r0, [r7, #12]
 80099de:	f000 f80b 	bl	80099f8 <MTR_setDirection>
  MTR_setSpeed    (p_handle, 0                 );
 80099e2:	2100      	movs	r1, #0
 80099e4:	68f8      	ldr	r0, [r7, #12]
 80099e6:	f000 f873 	bl	8009ad0 <MTR_setSpeed>

  return;
 80099ea:	bf00      	nop
}
 80099ec:	3710      	adds	r7, #16
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	bf00      	nop
 80099f4:	0800b860 	.word	0x0800b860

080099f8 <MTR_setDirection>:

void MTR_setDirection(T_MTR_Handle *p_handle, T_MTR_DIRECTION p_direction)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	460b      	mov	r3, r1
 8009a02:	70fb      	strb	r3, [r7, #3]
  if (p_direction == p_handle->direction)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	7d1b      	ldrb	r3, [r3, #20]
 8009a08:	78fa      	ldrb	r2, [r7, #3]
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d056      	beq.n	8009abc <MTR_setDirection+0xc4>
  {
    ; /* Nothing to do */
  }
  else
  {
    if (p_direction == MTR_DIRECTION_STOP)
 8009a0e:	78fb      	ldrb	r3, [r7, #3]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d119      	bne.n	8009a48 <MTR_setDirection+0x50>
    {
      LOG_debug("%s motor STOP", p_handle->name);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	461a      	mov	r2, r3
 8009a1a:	492a      	ldr	r1, [pc, #168]	; (8009ac4 <MTR_setDirection+0xcc>)
 8009a1c:	2000      	movs	r0, #0
 8009a1e:	f7ff ff5f 	bl	80098e0 <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_RESET);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6858      	ldr	r0, [r3, #4]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	689b      	ldr	r3, [r3, #8]
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	4619      	mov	r1, r3
 8009a30:	f7f9 fde4 	bl	80035fc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_RESET);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	68d8      	ldr	r0, [r3, #12]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	691b      	ldr	r3, [r3, #16]
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	2200      	movs	r2, #0
 8009a40:	4619      	mov	r1, r3
 8009a42:	f7f9 fddb 	bl	80035fc <HAL_GPIO_WritePin>
 8009a46:	e035      	b.n	8009ab4 <MTR_setDirection+0xbc>
    }
    else if (p_direction == MTR_DIRECTION_FORWARD)
 8009a48:	78fb      	ldrb	r3, [r7, #3]
 8009a4a:	2b01      	cmp	r3, #1
 8009a4c:	d119      	bne.n	8009a82 <MTR_setDirection+0x8a>
    {
      LOG_debug("%s motor go FORWARD", p_handle->name);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	461a      	mov	r2, r3
 8009a54:	491c      	ldr	r1, [pc, #112]	; (8009ac8 <MTR_setDirection+0xd0>)
 8009a56:	2000      	movs	r0, #0
 8009a58:	f7ff ff42 	bl	80098e0 <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_RESET);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6858      	ldr	r0, [r3, #4]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	2200      	movs	r2, #0
 8009a68:	4619      	mov	r1, r3
 8009a6a:	f7f9 fdc7 	bl	80035fc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_SET  );
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	68d8      	ldr	r0, [r3, #12]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	691b      	ldr	r3, [r3, #16]
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	2201      	movs	r2, #1
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	f7f9 fdbe 	bl	80035fc <HAL_GPIO_WritePin>
 8009a80:	e018      	b.n	8009ab4 <MTR_setDirection+0xbc>
    }
    else
    {
      LOG_debug("%s motor go BACKWARD", p_handle->name);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	461a      	mov	r2, r3
 8009a88:	4910      	ldr	r1, [pc, #64]	; (8009acc <MTR_setDirection+0xd4>)
 8009a8a:	2000      	movs	r0, #0
 8009a8c:	f7ff ff28 	bl	80098e0 <LOG_log>

      HAL_GPIO_WritePin(p_handle->dirPin1Port, p_handle->dirPin1, GPIO_PIN_SET  );
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6858      	ldr	r0, [r3, #4]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	f7f9 fdad 	bl	80035fc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(p_handle->dirPin2Port, p_handle->dirPin2, GPIO_PIN_RESET);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	68d8      	ldr	r0, [r3, #12]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	691b      	ldr	r3, [r3, #16]
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	2200      	movs	r2, #0
 8009aae:	4619      	mov	r1, r3
 8009ab0:	f7f9 fda4 	bl	80035fc <HAL_GPIO_WritePin>
    }

    p_handle->direction = p_direction;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	78fa      	ldrb	r2, [r7, #3]
 8009ab8:	751a      	strb	r2, [r3, #20]
  }

  return;
 8009aba:	bf00      	nop
 8009abc:	bf00      	nop
}
 8009abe:	3708      	adds	r7, #8
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}
 8009ac4:	0800b884 	.word	0x0800b884
 8009ac8:	0800b894 	.word	0x0800b894
 8009acc:	0800b8a8 	.word	0x0800b8a8

08009ad0 <MTR_setSpeed>:

void MTR_setSpeed(T_MTR_Handle *p_handle, uint32_t p_speed)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b082      	sub	sp, #8
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	6039      	str	r1, [r7, #0]
  if (p_speed == p_handle->speed)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	699b      	ldr	r3, [r3, #24]
 8009ade:	683a      	ldr	r2, [r7, #0]
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d02d      	beq.n	8009b40 <MTR_setSpeed+0x70>
  {
    ; /* Nothing to do */
  }
  else
  {
    LOG_debug("Setting  %s motor p_speed to %u", p_handle->name, p_speed);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681a      	ldr	r2, [r3, #0]
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	4917      	ldr	r1, [pc, #92]	; (8009b48 <MTR_setSpeed+0x78>)
 8009aec:	2000      	movs	r0, #0
 8009aee:	f7ff fef7 	bl	80098e0 <LOG_log>

    __HAL_TIM_SET_COMPARE(p_handle->pwmTimerHandle, p_handle->pwmChannel, p_speed);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6a1b      	ldr	r3, [r3, #32]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d105      	bne.n	8009b06 <MTR_setSpeed+0x36>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	69db      	ldr	r3, [r3, #28]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	683a      	ldr	r2, [r7, #0]
 8009b02:	635a      	str	r2, [r3, #52]	; 0x34
 8009b04:	e018      	b.n	8009b38 <MTR_setSpeed+0x68>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6a1b      	ldr	r3, [r3, #32]
 8009b0a:	2b04      	cmp	r3, #4
 8009b0c:	d105      	bne.n	8009b1a <MTR_setSpeed+0x4a>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	69db      	ldr	r3, [r3, #28]
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	6393      	str	r3, [r2, #56]	; 0x38
 8009b18:	e00e      	b.n	8009b38 <MTR_setSpeed+0x68>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a1b      	ldr	r3, [r3, #32]
 8009b1e:	2b08      	cmp	r3, #8
 8009b20:	d105      	bne.n	8009b2e <MTR_setSpeed+0x5e>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	69db      	ldr	r3, [r3, #28]
 8009b26:	681a      	ldr	r2, [r3, #0]
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8009b2c:	e004      	b.n	8009b38 <MTR_setSpeed+0x68>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	69db      	ldr	r3, [r3, #28]
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	6413      	str	r3, [r2, #64]	; 0x40

    p_handle->speed = p_speed;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	683a      	ldr	r2, [r7, #0]
 8009b3c:	619a      	str	r2, [r3, #24]
  }

  return;
 8009b3e:	bf00      	nop
 8009b40:	bf00      	nop
}
 8009b42:	3708      	adds	r7, #8
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	0800b8c0 	.word	0x0800b8c0

08009b4c <PID_init>:

#include "utils.h"
#include "log.h"

void PID_init(T_PID_Handle *p_handle, int32_t p_kp, int32_t p_ki, int32_t p_kd, int32_t p_targetValue, int32_t p_minValue, int32_t p_maxValue, int32_t p_antiWindUpFactor)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	60b9      	str	r1, [r7, #8]
 8009b56:	607a      	str	r2, [r7, #4]
 8009b58:	603b      	str	r3, [r7, #0]
  LOG_info("Initializing PID");
 8009b5a:	4919      	ldr	r1, [pc, #100]	; (8009bc0 <PID_init+0x74>)
 8009b5c:	2001      	movs	r0, #1
 8009b5e:	f7ff febf 	bl	80098e0 <LOG_log>

  p_handle->kp              = p_kp;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	68ba      	ldr	r2, [r7, #8]
 8009b66:	601a      	str	r2, [r3, #0]
  p_handle->ki              = p_ki;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	605a      	str	r2, [r3, #4]
  p_handle->kd              = p_kd;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	683a      	ldr	r2, [r7, #0]
 8009b72:	609a      	str	r2, [r3, #8]
  p_handle->targetValue     = p_targetValue;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	69ba      	ldr	r2, [r7, #24]
 8009b78:	60da      	str	r2, [r3, #12]
  p_handle->minValue        = p_minValue;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	69fa      	ldr	r2, [r7, #28]
 8009b7e:	611a      	str	r2, [r3, #16]
  p_handle->maxValue        = p_maxValue;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	6a3a      	ldr	r2, [r7, #32]
 8009b84:	615a      	str	r2, [r3, #20]
  p_handle->antiWindUpValue = p_antiWindUpFactor * UTI_MAX(abs(p_handle->minValue), abs(p_handle->maxValue));
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	695b      	ldr	r3, [r3, #20]
 8009b8a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8009b8e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	691b      	ldr	r3, [r3, #16]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	bfb8      	it	lt
 8009b9a:	425b      	neglt	r3, r3
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	bfb8      	it	lt
 8009ba0:	4613      	movlt	r3, r2
 8009ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ba4:	fb02 f203 	mul.w	r2, r2, r3
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	619a      	str	r2, [r3, #24]

  PID_reset  (p_handle);
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f000 f809 	bl	8009bc4 <PID_reset>
  PID_logInfo(p_handle);
 8009bb2:	68f8      	ldr	r0, [r7, #12]
 8009bb4:	f000 f87e 	bl	8009cb4 <PID_logInfo>

  return;
 8009bb8:	bf00      	nop
}
 8009bba:	3710      	adds	r7, #16
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	0800b8e0 	.word	0x0800b8e0

08009bc4 <PID_reset>:

void PID_reset(T_PID_Handle *p_handle)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  p_handle->pValue        = 0;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	61da      	str	r2, [r3, #28]
  p_handle->iValue        = 0;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	621a      	str	r2, [r3, #32]
  p_handle->dValue        = 0;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	625a      	str	r2, [r3, #36]	; 0x24
  p_handle->computedValue = 0;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2200      	movs	r2, #0
 8009be2:	629a      	str	r2, [r3, #40]	; 0x28
  p_handle->lastError     = 0;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2200      	movs	r2, #0
 8009be8:	62da      	str	r2, [r3, #44]	; 0x2c

  return;
 8009bea:	bf00      	nop
}
 8009bec:	370c      	adds	r7, #12
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bc80      	pop	{r7}
 8009bf2:	4770      	bx	lr

08009bf4 <PID_update>:
{
  return p_handle->antiWindUpValue;
}

int32_t PID_update(T_PID_Handle *p_handle, int32_t p_currentValue, uint32_t p_timeDelta)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b088      	sub	sp, #32
 8009bf8:	af02      	add	r7, sp, #8
 8009bfa:	60f8      	str	r0, [r7, #12]
 8009bfc:	60b9      	str	r1, [r7, #8]
 8009bfe:	607a      	str	r2, [r7, #4]
  int32_t l_currentError;

  l_currentError = p_handle->targetValue - p_currentValue;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	68da      	ldr	r2, [r3, #12]
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	1ad3      	subs	r3, r2, r3
 8009c08:	617b      	str	r3, [r7, #20]

  p_handle->pValue    =  l_currentError;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	697a      	ldr	r2, [r7, #20]
 8009c0e:	61da      	str	r2, [r3, #28]
  p_handle->iValue   +=  l_currentError * p_timeDelta;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	6a1b      	ldr	r3, [r3, #32]
 8009c14:	4619      	mov	r1, r3
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	fb02 f303 	mul.w	r3, r2, r3
 8009c1e:	440b      	add	r3, r1
 8009c20:	461a      	mov	r2, r3
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	621a      	str	r2, [r3, #32]
  p_handle->iValue    =  UTI_clampIntValue(p_handle->iValue, -p_handle->antiWindUpValue, p_handle->antiWindUpValue, false, 0);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	6a18      	ldr	r0, [r3, #32]
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	699b      	ldr	r3, [r3, #24]
 8009c2e:	4259      	negs	r1, r3
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	699a      	ldr	r2, [r3, #24]
 8009c34:	2300      	movs	r3, #0
 8009c36:	9300      	str	r3, [sp, #0]
 8009c38:	2300      	movs	r3, #0
 8009c3a:	f000 f8c0 	bl	8009dbe <UTI_clampIntValue>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	621a      	str	r2, [r3, #32]
  p_handle->dValue    = (l_currentError - p_handle->lastError) / p_timeDelta;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c48:	697a      	ldr	r2, [r7, #20]
 8009c4a:	1ad3      	subs	r3, r2, r3
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c54:	461a      	mov	r2, r3
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	625a      	str	r2, [r3, #36]	; 0x24
  p_handle->lastError =  l_currentError;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	697a      	ldr	r2, [r7, #20]
 8009c5e:	62da      	str	r2, [r3, #44]	; 0x2c

  p_handle->computedValue = p_handle->kp * p_handle->pValue + p_handle->ki * p_handle->iValue + p_handle->kd * p_handle->dValue;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	68fa      	ldr	r2, [r7, #12]
 8009c66:	69d2      	ldr	r2, [r2, #28]
 8009c68:	fb02 f203 	mul.w	r2, r2, r3
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	68f9      	ldr	r1, [r7, #12]
 8009c72:	6a09      	ldr	r1, [r1, #32]
 8009c74:	fb01 f303 	mul.w	r3, r1, r3
 8009c78:	441a      	add	r2, r3
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	68f9      	ldr	r1, [r7, #12]
 8009c80:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8009c82:	fb01 f303 	mul.w	r3, r1, r3
 8009c86:	441a      	add	r2, r3
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	629a      	str	r2, [r3, #40]	; 0x28
  p_handle->computedValue = UTI_clampIntValue(p_handle->computedValue, p_handle->minValue, p_handle->maxValue, false, 0);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	6919      	ldr	r1, [r3, #16]
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	695a      	ldr	r2, [r3, #20]
 8009c98:	2300      	movs	r3, #0
 8009c9a:	9300      	str	r3, [sp, #0]
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	f000 f88e 	bl	8009dbe <UTI_clampIntValue>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	629a      	str	r2, [r3, #40]	; 0x28

  return p_currentValue;
 8009ca8:	68bb      	ldr	r3, [r7, #8]
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3718      	adds	r7, #24
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
	...

08009cb4 <PID_logInfo>:

void PID_logInfo(T_PID_Handle *p_handle)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af02      	add	r7, sp, #8
 8009cba:	6078      	str	r0, [r7, #4]
  LOG_info(" kp = %4d -  ki = %4d -     kd = %4d", p_handle->kp         , p_handle->ki      , p_handle->kd             );
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6859      	ldr	r1, [r3, #4]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	9300      	str	r3, [sp, #0]
 8009cca:	460b      	mov	r3, r1
 8009ccc:	4913      	ldr	r1, [pc, #76]	; (8009d1c <PID_logInfo+0x68>)
 8009cce:	2001      	movs	r0, #1
 8009cd0:	f7ff fe06 	bl	80098e0 <LOG_log>
  LOG_info("  p = %4d -   i = %4d -      d = %4d", p_handle->pValue     , p_handle->iValue  , p_handle->dValue         );
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	69da      	ldr	r2, [r3, #28]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6a19      	ldr	r1, [r3, #32]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce0:	9300      	str	r3, [sp, #0]
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	490e      	ldr	r1, [pc, #56]	; (8009d20 <PID_logInfo+0x6c>)
 8009ce6:	2001      	movs	r0, #1
 8009ce8:	f7ff fdfa 	bl	80098e0 <LOG_log>
  LOG_info("min = %4d - max = %4d - a.w.up = %4d", p_handle->minValue   , p_handle->maxValue, p_handle->antiWindUpValue);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	691a      	ldr	r2, [r3, #16]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6959      	ldr	r1, [r3, #20]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	699b      	ldr	r3, [r3, #24]
 8009cf8:	9300      	str	r3, [sp, #0]
 8009cfa:	460b      	mov	r3, r1
 8009cfc:	4909      	ldr	r1, [pc, #36]	; (8009d24 <PID_logInfo+0x70>)
 8009cfe:	2001      	movs	r0, #1
 8009d00:	f7ff fdee 	bl	80098e0 <LOG_log>
  LOG_info("  t = %4d - val = %4d               ", p_handle->targetValue, p_handle->computedValue                      );
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	68da      	ldr	r2, [r3, #12]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d0c:	4906      	ldr	r1, [pc, #24]	; (8009d28 <PID_logInfo+0x74>)
 8009d0e:	2001      	movs	r0, #1
 8009d10:	f7ff fde6 	bl	80098e0 <LOG_log>

  return;
 8009d14:	bf00      	nop
}
 8009d16:	3708      	adds	r7, #8
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}
 8009d1c:	0800b8f4 	.word	0x0800b8f4
 8009d20:	0800b91c 	.word	0x0800b91c
 8009d24:	0800b944 	.word	0x0800b944
 8009d28:	0800b96c 	.word	0x0800b96c

08009d2c <UTI_init>:
#include "log.h"

static TIM_HandleTypeDef *g_UTI_delayTimerHandle;

void UTI_init(TIM_HandleTypeDef *p_delayTimerHandle)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  LOG_info("Initializing utilities");
 8009d34:	4905      	ldr	r1, [pc, #20]	; (8009d4c <UTI_init+0x20>)
 8009d36:	2001      	movs	r0, #1
 8009d38:	f7ff fdd2 	bl	80098e0 <LOG_log>

  g_UTI_delayTimerHandle = p_delayTimerHandle;
 8009d3c:	4a04      	ldr	r2, [pc, #16]	; (8009d50 <UTI_init+0x24>)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6013      	str	r3, [r2, #0]

  return;
 8009d42:	bf00      	nop
}
 8009d44:	3708      	adds	r7, #8
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	0800b994 	.word	0x0800b994
 8009d50:	20000278 	.word	0x20000278

08009d54 <UTI_delayUs>:

void UTI_delayUs(uint16_t p_delay)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	80fb      	strh	r3, [r7, #6]
  /* Reset the micro-seconds counter */
  __HAL_TIM_SET_COUNTER(g_UTI_delayTimerHandle, 0);
 8009d5e:	4b09      	ldr	r3, [pc, #36]	; (8009d84 <UTI_delayUs+0x30>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2200      	movs	r2, #0
 8009d66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Wait for the counter to reach the input micro-seconds number */
  while (__HAL_TIM_GET_COUNTER(g_UTI_delayTimerHandle) < p_delay)
 8009d68:	bf00      	nop
 8009d6a:	4b06      	ldr	r3, [pc, #24]	; (8009d84 <UTI_delayUs+0x30>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d72:	88fb      	ldrh	r3, [r7, #6]
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d3f8      	bcc.n	8009d6a <UTI_delayUs+0x16>
  {
    ; /* Nothing to do */
  }

  return;
 8009d78:	bf00      	nop
}
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bc80      	pop	{r7}
 8009d80:	4770      	bx	lr
 8009d82:	bf00      	nop
 8009d84:	20000278 	.word	0x20000278

08009d88 <UTI_turnRtcTimeToSeconds>:

  return;
}

uint32_t UTI_turnRtcTimeToSeconds(RTC_TimeTypeDef *p_time)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  return p_time->Hours * 3600 + p_time->Minutes * 60 + p_time->Seconds;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	781b      	ldrb	r3, [r3, #0]
 8009d94:	461a      	mov	r2, r3
 8009d96:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8009d9a:	fb03 f202 	mul.w	r2, r3, r2
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	785b      	ldrb	r3, [r3, #1]
 8009da2:	4619      	mov	r1, r3
 8009da4:	460b      	mov	r3, r1
 8009da6:	011b      	lsls	r3, r3, #4
 8009da8:	1a5b      	subs	r3, r3, r1
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	4413      	add	r3, r2
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	7892      	ldrb	r2, [r2, #2]
 8009db2:	4413      	add	r3, r2
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	370c      	adds	r7, #12
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bc80      	pop	{r7}
 8009dbc:	4770      	bx	lr

08009dbe <UTI_clampIntValue>:

int32_t UTI_clampIntValue(int32_t p_value, int32_t p_minValue, int32_t p_maxValue, bool p_clampToNearest, int32_t p_clampValue)
{
 8009dbe:	b480      	push	{r7}
 8009dc0:	b087      	sub	sp, #28
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	60f8      	str	r0, [r7, #12]
 8009dc6:	60b9      	str	r1, [r7, #8]
 8009dc8:	607a      	str	r2, [r7, #4]
 8009dca:	70fb      	strb	r3, [r7, #3]
  int32_t l_returnValue;

  if (p_value < p_minValue)
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	da08      	bge.n	8009de6 <UTI_clampIntValue+0x28>
  {
    if (p_clampToNearest == true)
 8009dd4:	78fb      	ldrb	r3, [r7, #3]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d002      	beq.n	8009de0 <UTI_clampIntValue+0x22>
    {
      l_returnValue = p_minValue;
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	617b      	str	r3, [r7, #20]
 8009dde:	e00e      	b.n	8009dfe <UTI_clampIntValue+0x40>
    }
    else
    {
      l_returnValue = p_clampValue;
 8009de0:	6a3b      	ldr	r3, [r7, #32]
 8009de2:	617b      	str	r3, [r7, #20]
 8009de4:	e00b      	b.n	8009dfe <UTI_clampIntValue+0x40>
    }
  }
  else if (p_value > p_maxValue)
 8009de6:	68fa      	ldr	r2, [r7, #12]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	429a      	cmp	r2, r3
 8009dec:	dd07      	ble.n	8009dfe <UTI_clampIntValue+0x40>
  {
    if (p_clampToNearest == true)
 8009dee:	78fb      	ldrb	r3, [r7, #3]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d002      	beq.n	8009dfa <UTI_clampIntValue+0x3c>
    {
      l_returnValue = p_maxValue;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	617b      	str	r3, [r7, #20]
 8009df8:	e001      	b.n	8009dfe <UTI_clampIntValue+0x40>
    }
    else
    {
      l_returnValue = p_clampValue;
 8009dfa:	6a3b      	ldr	r3, [r7, #32]
 8009dfc:	617b      	str	r3, [r7, #20]
  else
  {
    ; /* Nothing to do */
  }

  return l_returnValue;
 8009dfe:	697b      	ldr	r3, [r7, #20]
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	371c      	adds	r7, #28
 8009e04:	46bd      	mov	sp, r7
 8009e06:	bc80      	pop	{r7}
 8009e08:	4770      	bx	lr
	...

08009e0c <__errno>:
 8009e0c:	4b01      	ldr	r3, [pc, #4]	; (8009e14 <__errno+0x8>)
 8009e0e:	6818      	ldr	r0, [r3, #0]
 8009e10:	4770      	bx	lr
 8009e12:	bf00      	nop
 8009e14:	2000001c 	.word	0x2000001c

08009e18 <__libc_init_array>:
 8009e18:	b570      	push	{r4, r5, r6, lr}
 8009e1a:	2600      	movs	r6, #0
 8009e1c:	4d0c      	ldr	r5, [pc, #48]	; (8009e50 <__libc_init_array+0x38>)
 8009e1e:	4c0d      	ldr	r4, [pc, #52]	; (8009e54 <__libc_init_array+0x3c>)
 8009e20:	1b64      	subs	r4, r4, r5
 8009e22:	10a4      	asrs	r4, r4, #2
 8009e24:	42a6      	cmp	r6, r4
 8009e26:	d109      	bne.n	8009e3c <__libc_init_array+0x24>
 8009e28:	f001 f80e 	bl	800ae48 <_init>
 8009e2c:	2600      	movs	r6, #0
 8009e2e:	4d0a      	ldr	r5, [pc, #40]	; (8009e58 <__libc_init_array+0x40>)
 8009e30:	4c0a      	ldr	r4, [pc, #40]	; (8009e5c <__libc_init_array+0x44>)
 8009e32:	1b64      	subs	r4, r4, r5
 8009e34:	10a4      	asrs	r4, r4, #2
 8009e36:	42a6      	cmp	r6, r4
 8009e38:	d105      	bne.n	8009e46 <__libc_init_array+0x2e>
 8009e3a:	bd70      	pop	{r4, r5, r6, pc}
 8009e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e40:	4798      	blx	r3
 8009e42:	3601      	adds	r6, #1
 8009e44:	e7ee      	b.n	8009e24 <__libc_init_array+0xc>
 8009e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e4a:	4798      	blx	r3
 8009e4c:	3601      	adds	r6, #1
 8009e4e:	e7f2      	b.n	8009e36 <__libc_init_array+0x1e>
 8009e50:	0800ba5c 	.word	0x0800ba5c
 8009e54:	0800ba5c 	.word	0x0800ba5c
 8009e58:	0800ba5c 	.word	0x0800ba5c
 8009e5c:	0800ba60 	.word	0x0800ba60

08009e60 <memset>:
 8009e60:	4603      	mov	r3, r0
 8009e62:	4402      	add	r2, r0
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d100      	bne.n	8009e6a <memset+0xa>
 8009e68:	4770      	bx	lr
 8009e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8009e6e:	e7f9      	b.n	8009e64 <memset+0x4>

08009e70 <iprintf>:
 8009e70:	b40f      	push	{r0, r1, r2, r3}
 8009e72:	4b0a      	ldr	r3, [pc, #40]	; (8009e9c <iprintf+0x2c>)
 8009e74:	b513      	push	{r0, r1, r4, lr}
 8009e76:	681c      	ldr	r4, [r3, #0]
 8009e78:	b124      	cbz	r4, 8009e84 <iprintf+0x14>
 8009e7a:	69a3      	ldr	r3, [r4, #24]
 8009e7c:	b913      	cbnz	r3, 8009e84 <iprintf+0x14>
 8009e7e:	4620      	mov	r0, r4
 8009e80:	f000 fa74 	bl	800a36c <__sinit>
 8009e84:	ab05      	add	r3, sp, #20
 8009e86:	4620      	mov	r0, r4
 8009e88:	9a04      	ldr	r2, [sp, #16]
 8009e8a:	68a1      	ldr	r1, [r4, #8]
 8009e8c:	9301      	str	r3, [sp, #4]
 8009e8e:	f000 fc3f 	bl	800a710 <_vfiprintf_r>
 8009e92:	b002      	add	sp, #8
 8009e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e98:	b004      	add	sp, #16
 8009e9a:	4770      	bx	lr
 8009e9c:	2000001c 	.word	0x2000001c

08009ea0 <_puts_r>:
 8009ea0:	b570      	push	{r4, r5, r6, lr}
 8009ea2:	460e      	mov	r6, r1
 8009ea4:	4605      	mov	r5, r0
 8009ea6:	b118      	cbz	r0, 8009eb0 <_puts_r+0x10>
 8009ea8:	6983      	ldr	r3, [r0, #24]
 8009eaa:	b90b      	cbnz	r3, 8009eb0 <_puts_r+0x10>
 8009eac:	f000 fa5e 	bl	800a36c <__sinit>
 8009eb0:	69ab      	ldr	r3, [r5, #24]
 8009eb2:	68ac      	ldr	r4, [r5, #8]
 8009eb4:	b913      	cbnz	r3, 8009ebc <_puts_r+0x1c>
 8009eb6:	4628      	mov	r0, r5
 8009eb8:	f000 fa58 	bl	800a36c <__sinit>
 8009ebc:	4b2c      	ldr	r3, [pc, #176]	; (8009f70 <_puts_r+0xd0>)
 8009ebe:	429c      	cmp	r4, r3
 8009ec0:	d120      	bne.n	8009f04 <_puts_r+0x64>
 8009ec2:	686c      	ldr	r4, [r5, #4]
 8009ec4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ec6:	07db      	lsls	r3, r3, #31
 8009ec8:	d405      	bmi.n	8009ed6 <_puts_r+0x36>
 8009eca:	89a3      	ldrh	r3, [r4, #12]
 8009ecc:	0598      	lsls	r0, r3, #22
 8009ece:	d402      	bmi.n	8009ed6 <_puts_r+0x36>
 8009ed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ed2:	f000 fae9 	bl	800a4a8 <__retarget_lock_acquire_recursive>
 8009ed6:	89a3      	ldrh	r3, [r4, #12]
 8009ed8:	0719      	lsls	r1, r3, #28
 8009eda:	d51d      	bpl.n	8009f18 <_puts_r+0x78>
 8009edc:	6923      	ldr	r3, [r4, #16]
 8009ede:	b1db      	cbz	r3, 8009f18 <_puts_r+0x78>
 8009ee0:	3e01      	subs	r6, #1
 8009ee2:	68a3      	ldr	r3, [r4, #8]
 8009ee4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	60a3      	str	r3, [r4, #8]
 8009eec:	bb39      	cbnz	r1, 8009f3e <_puts_r+0x9e>
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	da38      	bge.n	8009f64 <_puts_r+0xc4>
 8009ef2:	4622      	mov	r2, r4
 8009ef4:	210a      	movs	r1, #10
 8009ef6:	4628      	mov	r0, r5
 8009ef8:	f000 f85e 	bl	8009fb8 <__swbuf_r>
 8009efc:	3001      	adds	r0, #1
 8009efe:	d011      	beq.n	8009f24 <_puts_r+0x84>
 8009f00:	250a      	movs	r5, #10
 8009f02:	e011      	b.n	8009f28 <_puts_r+0x88>
 8009f04:	4b1b      	ldr	r3, [pc, #108]	; (8009f74 <_puts_r+0xd4>)
 8009f06:	429c      	cmp	r4, r3
 8009f08:	d101      	bne.n	8009f0e <_puts_r+0x6e>
 8009f0a:	68ac      	ldr	r4, [r5, #8]
 8009f0c:	e7da      	b.n	8009ec4 <_puts_r+0x24>
 8009f0e:	4b1a      	ldr	r3, [pc, #104]	; (8009f78 <_puts_r+0xd8>)
 8009f10:	429c      	cmp	r4, r3
 8009f12:	bf08      	it	eq
 8009f14:	68ec      	ldreq	r4, [r5, #12]
 8009f16:	e7d5      	b.n	8009ec4 <_puts_r+0x24>
 8009f18:	4621      	mov	r1, r4
 8009f1a:	4628      	mov	r0, r5
 8009f1c:	f000 f89e 	bl	800a05c <__swsetup_r>
 8009f20:	2800      	cmp	r0, #0
 8009f22:	d0dd      	beq.n	8009ee0 <_puts_r+0x40>
 8009f24:	f04f 35ff 	mov.w	r5, #4294967295
 8009f28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f2a:	07da      	lsls	r2, r3, #31
 8009f2c:	d405      	bmi.n	8009f3a <_puts_r+0x9a>
 8009f2e:	89a3      	ldrh	r3, [r4, #12]
 8009f30:	059b      	lsls	r3, r3, #22
 8009f32:	d402      	bmi.n	8009f3a <_puts_r+0x9a>
 8009f34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f36:	f000 fab8 	bl	800a4aa <__retarget_lock_release_recursive>
 8009f3a:	4628      	mov	r0, r5
 8009f3c:	bd70      	pop	{r4, r5, r6, pc}
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	da04      	bge.n	8009f4c <_puts_r+0xac>
 8009f42:	69a2      	ldr	r2, [r4, #24]
 8009f44:	429a      	cmp	r2, r3
 8009f46:	dc06      	bgt.n	8009f56 <_puts_r+0xb6>
 8009f48:	290a      	cmp	r1, #10
 8009f4a:	d004      	beq.n	8009f56 <_puts_r+0xb6>
 8009f4c:	6823      	ldr	r3, [r4, #0]
 8009f4e:	1c5a      	adds	r2, r3, #1
 8009f50:	6022      	str	r2, [r4, #0]
 8009f52:	7019      	strb	r1, [r3, #0]
 8009f54:	e7c5      	b.n	8009ee2 <_puts_r+0x42>
 8009f56:	4622      	mov	r2, r4
 8009f58:	4628      	mov	r0, r5
 8009f5a:	f000 f82d 	bl	8009fb8 <__swbuf_r>
 8009f5e:	3001      	adds	r0, #1
 8009f60:	d1bf      	bne.n	8009ee2 <_puts_r+0x42>
 8009f62:	e7df      	b.n	8009f24 <_puts_r+0x84>
 8009f64:	250a      	movs	r5, #10
 8009f66:	6823      	ldr	r3, [r4, #0]
 8009f68:	1c5a      	adds	r2, r3, #1
 8009f6a:	6022      	str	r2, [r4, #0]
 8009f6c:	701d      	strb	r5, [r3, #0]
 8009f6e:	e7db      	b.n	8009f28 <_puts_r+0x88>
 8009f70:	0800b9e8 	.word	0x0800b9e8
 8009f74:	0800ba08 	.word	0x0800ba08
 8009f78:	0800b9c8 	.word	0x0800b9c8

08009f7c <puts>:
 8009f7c:	4b02      	ldr	r3, [pc, #8]	; (8009f88 <puts+0xc>)
 8009f7e:	4601      	mov	r1, r0
 8009f80:	6818      	ldr	r0, [r3, #0]
 8009f82:	f7ff bf8d 	b.w	8009ea0 <_puts_r>
 8009f86:	bf00      	nop
 8009f88:	2000001c 	.word	0x2000001c

08009f8c <viprintf>:
 8009f8c:	4b09      	ldr	r3, [pc, #36]	; (8009fb4 <viprintf+0x28>)
 8009f8e:	b570      	push	{r4, r5, r6, lr}
 8009f90:	681c      	ldr	r4, [r3, #0]
 8009f92:	4605      	mov	r5, r0
 8009f94:	460e      	mov	r6, r1
 8009f96:	b124      	cbz	r4, 8009fa2 <viprintf+0x16>
 8009f98:	69a3      	ldr	r3, [r4, #24]
 8009f9a:	b913      	cbnz	r3, 8009fa2 <viprintf+0x16>
 8009f9c:	4620      	mov	r0, r4
 8009f9e:	f000 f9e5 	bl	800a36c <__sinit>
 8009fa2:	4633      	mov	r3, r6
 8009fa4:	462a      	mov	r2, r5
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	68a1      	ldr	r1, [r4, #8]
 8009faa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009fae:	f000 bbaf 	b.w	800a710 <_vfiprintf_r>
 8009fb2:	bf00      	nop
 8009fb4:	2000001c 	.word	0x2000001c

08009fb8 <__swbuf_r>:
 8009fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fba:	460e      	mov	r6, r1
 8009fbc:	4614      	mov	r4, r2
 8009fbe:	4605      	mov	r5, r0
 8009fc0:	b118      	cbz	r0, 8009fca <__swbuf_r+0x12>
 8009fc2:	6983      	ldr	r3, [r0, #24]
 8009fc4:	b90b      	cbnz	r3, 8009fca <__swbuf_r+0x12>
 8009fc6:	f000 f9d1 	bl	800a36c <__sinit>
 8009fca:	4b21      	ldr	r3, [pc, #132]	; (800a050 <__swbuf_r+0x98>)
 8009fcc:	429c      	cmp	r4, r3
 8009fce:	d12b      	bne.n	800a028 <__swbuf_r+0x70>
 8009fd0:	686c      	ldr	r4, [r5, #4]
 8009fd2:	69a3      	ldr	r3, [r4, #24]
 8009fd4:	60a3      	str	r3, [r4, #8]
 8009fd6:	89a3      	ldrh	r3, [r4, #12]
 8009fd8:	071a      	lsls	r2, r3, #28
 8009fda:	d52f      	bpl.n	800a03c <__swbuf_r+0x84>
 8009fdc:	6923      	ldr	r3, [r4, #16]
 8009fde:	b36b      	cbz	r3, 800a03c <__swbuf_r+0x84>
 8009fe0:	6923      	ldr	r3, [r4, #16]
 8009fe2:	6820      	ldr	r0, [r4, #0]
 8009fe4:	b2f6      	uxtb	r6, r6
 8009fe6:	1ac0      	subs	r0, r0, r3
 8009fe8:	6963      	ldr	r3, [r4, #20]
 8009fea:	4637      	mov	r7, r6
 8009fec:	4283      	cmp	r3, r0
 8009fee:	dc04      	bgt.n	8009ffa <__swbuf_r+0x42>
 8009ff0:	4621      	mov	r1, r4
 8009ff2:	4628      	mov	r0, r5
 8009ff4:	f000 f926 	bl	800a244 <_fflush_r>
 8009ff8:	bb30      	cbnz	r0, 800a048 <__swbuf_r+0x90>
 8009ffa:	68a3      	ldr	r3, [r4, #8]
 8009ffc:	3001      	adds	r0, #1
 8009ffe:	3b01      	subs	r3, #1
 800a000:	60a3      	str	r3, [r4, #8]
 800a002:	6823      	ldr	r3, [r4, #0]
 800a004:	1c5a      	adds	r2, r3, #1
 800a006:	6022      	str	r2, [r4, #0]
 800a008:	701e      	strb	r6, [r3, #0]
 800a00a:	6963      	ldr	r3, [r4, #20]
 800a00c:	4283      	cmp	r3, r0
 800a00e:	d004      	beq.n	800a01a <__swbuf_r+0x62>
 800a010:	89a3      	ldrh	r3, [r4, #12]
 800a012:	07db      	lsls	r3, r3, #31
 800a014:	d506      	bpl.n	800a024 <__swbuf_r+0x6c>
 800a016:	2e0a      	cmp	r6, #10
 800a018:	d104      	bne.n	800a024 <__swbuf_r+0x6c>
 800a01a:	4621      	mov	r1, r4
 800a01c:	4628      	mov	r0, r5
 800a01e:	f000 f911 	bl	800a244 <_fflush_r>
 800a022:	b988      	cbnz	r0, 800a048 <__swbuf_r+0x90>
 800a024:	4638      	mov	r0, r7
 800a026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a028:	4b0a      	ldr	r3, [pc, #40]	; (800a054 <__swbuf_r+0x9c>)
 800a02a:	429c      	cmp	r4, r3
 800a02c:	d101      	bne.n	800a032 <__swbuf_r+0x7a>
 800a02e:	68ac      	ldr	r4, [r5, #8]
 800a030:	e7cf      	b.n	8009fd2 <__swbuf_r+0x1a>
 800a032:	4b09      	ldr	r3, [pc, #36]	; (800a058 <__swbuf_r+0xa0>)
 800a034:	429c      	cmp	r4, r3
 800a036:	bf08      	it	eq
 800a038:	68ec      	ldreq	r4, [r5, #12]
 800a03a:	e7ca      	b.n	8009fd2 <__swbuf_r+0x1a>
 800a03c:	4621      	mov	r1, r4
 800a03e:	4628      	mov	r0, r5
 800a040:	f000 f80c 	bl	800a05c <__swsetup_r>
 800a044:	2800      	cmp	r0, #0
 800a046:	d0cb      	beq.n	8009fe0 <__swbuf_r+0x28>
 800a048:	f04f 37ff 	mov.w	r7, #4294967295
 800a04c:	e7ea      	b.n	800a024 <__swbuf_r+0x6c>
 800a04e:	bf00      	nop
 800a050:	0800b9e8 	.word	0x0800b9e8
 800a054:	0800ba08 	.word	0x0800ba08
 800a058:	0800b9c8 	.word	0x0800b9c8

0800a05c <__swsetup_r>:
 800a05c:	4b32      	ldr	r3, [pc, #200]	; (800a128 <__swsetup_r+0xcc>)
 800a05e:	b570      	push	{r4, r5, r6, lr}
 800a060:	681d      	ldr	r5, [r3, #0]
 800a062:	4606      	mov	r6, r0
 800a064:	460c      	mov	r4, r1
 800a066:	b125      	cbz	r5, 800a072 <__swsetup_r+0x16>
 800a068:	69ab      	ldr	r3, [r5, #24]
 800a06a:	b913      	cbnz	r3, 800a072 <__swsetup_r+0x16>
 800a06c:	4628      	mov	r0, r5
 800a06e:	f000 f97d 	bl	800a36c <__sinit>
 800a072:	4b2e      	ldr	r3, [pc, #184]	; (800a12c <__swsetup_r+0xd0>)
 800a074:	429c      	cmp	r4, r3
 800a076:	d10f      	bne.n	800a098 <__swsetup_r+0x3c>
 800a078:	686c      	ldr	r4, [r5, #4]
 800a07a:	89a3      	ldrh	r3, [r4, #12]
 800a07c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a080:	0719      	lsls	r1, r3, #28
 800a082:	d42c      	bmi.n	800a0de <__swsetup_r+0x82>
 800a084:	06dd      	lsls	r5, r3, #27
 800a086:	d411      	bmi.n	800a0ac <__swsetup_r+0x50>
 800a088:	2309      	movs	r3, #9
 800a08a:	6033      	str	r3, [r6, #0]
 800a08c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a090:	f04f 30ff 	mov.w	r0, #4294967295
 800a094:	81a3      	strh	r3, [r4, #12]
 800a096:	e03e      	b.n	800a116 <__swsetup_r+0xba>
 800a098:	4b25      	ldr	r3, [pc, #148]	; (800a130 <__swsetup_r+0xd4>)
 800a09a:	429c      	cmp	r4, r3
 800a09c:	d101      	bne.n	800a0a2 <__swsetup_r+0x46>
 800a09e:	68ac      	ldr	r4, [r5, #8]
 800a0a0:	e7eb      	b.n	800a07a <__swsetup_r+0x1e>
 800a0a2:	4b24      	ldr	r3, [pc, #144]	; (800a134 <__swsetup_r+0xd8>)
 800a0a4:	429c      	cmp	r4, r3
 800a0a6:	bf08      	it	eq
 800a0a8:	68ec      	ldreq	r4, [r5, #12]
 800a0aa:	e7e6      	b.n	800a07a <__swsetup_r+0x1e>
 800a0ac:	0758      	lsls	r0, r3, #29
 800a0ae:	d512      	bpl.n	800a0d6 <__swsetup_r+0x7a>
 800a0b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0b2:	b141      	cbz	r1, 800a0c6 <__swsetup_r+0x6a>
 800a0b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0b8:	4299      	cmp	r1, r3
 800a0ba:	d002      	beq.n	800a0c2 <__swsetup_r+0x66>
 800a0bc:	4630      	mov	r0, r6
 800a0be:	f000 fa59 	bl	800a574 <_free_r>
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	6363      	str	r3, [r4, #52]	; 0x34
 800a0c6:	89a3      	ldrh	r3, [r4, #12]
 800a0c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a0cc:	81a3      	strh	r3, [r4, #12]
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	6063      	str	r3, [r4, #4]
 800a0d2:	6923      	ldr	r3, [r4, #16]
 800a0d4:	6023      	str	r3, [r4, #0]
 800a0d6:	89a3      	ldrh	r3, [r4, #12]
 800a0d8:	f043 0308 	orr.w	r3, r3, #8
 800a0dc:	81a3      	strh	r3, [r4, #12]
 800a0de:	6923      	ldr	r3, [r4, #16]
 800a0e0:	b94b      	cbnz	r3, 800a0f6 <__swsetup_r+0x9a>
 800a0e2:	89a3      	ldrh	r3, [r4, #12]
 800a0e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a0e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0ec:	d003      	beq.n	800a0f6 <__swsetup_r+0x9a>
 800a0ee:	4621      	mov	r1, r4
 800a0f0:	4630      	mov	r0, r6
 800a0f2:	f000 f9ff 	bl	800a4f4 <__smakebuf_r>
 800a0f6:	89a0      	ldrh	r0, [r4, #12]
 800a0f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0fc:	f010 0301 	ands.w	r3, r0, #1
 800a100:	d00a      	beq.n	800a118 <__swsetup_r+0xbc>
 800a102:	2300      	movs	r3, #0
 800a104:	60a3      	str	r3, [r4, #8]
 800a106:	6963      	ldr	r3, [r4, #20]
 800a108:	425b      	negs	r3, r3
 800a10a:	61a3      	str	r3, [r4, #24]
 800a10c:	6923      	ldr	r3, [r4, #16]
 800a10e:	b943      	cbnz	r3, 800a122 <__swsetup_r+0xc6>
 800a110:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a114:	d1ba      	bne.n	800a08c <__swsetup_r+0x30>
 800a116:	bd70      	pop	{r4, r5, r6, pc}
 800a118:	0781      	lsls	r1, r0, #30
 800a11a:	bf58      	it	pl
 800a11c:	6963      	ldrpl	r3, [r4, #20]
 800a11e:	60a3      	str	r3, [r4, #8]
 800a120:	e7f4      	b.n	800a10c <__swsetup_r+0xb0>
 800a122:	2000      	movs	r0, #0
 800a124:	e7f7      	b.n	800a116 <__swsetup_r+0xba>
 800a126:	bf00      	nop
 800a128:	2000001c 	.word	0x2000001c
 800a12c:	0800b9e8 	.word	0x0800b9e8
 800a130:	0800ba08 	.word	0x0800ba08
 800a134:	0800b9c8 	.word	0x0800b9c8

0800a138 <__sflush_r>:
 800a138:	898a      	ldrh	r2, [r1, #12]
 800a13a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a13e:	4605      	mov	r5, r0
 800a140:	0710      	lsls	r0, r2, #28
 800a142:	460c      	mov	r4, r1
 800a144:	d458      	bmi.n	800a1f8 <__sflush_r+0xc0>
 800a146:	684b      	ldr	r3, [r1, #4]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	dc05      	bgt.n	800a158 <__sflush_r+0x20>
 800a14c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a14e:	2b00      	cmp	r3, #0
 800a150:	dc02      	bgt.n	800a158 <__sflush_r+0x20>
 800a152:	2000      	movs	r0, #0
 800a154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a158:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a15a:	2e00      	cmp	r6, #0
 800a15c:	d0f9      	beq.n	800a152 <__sflush_r+0x1a>
 800a15e:	2300      	movs	r3, #0
 800a160:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a164:	682f      	ldr	r7, [r5, #0]
 800a166:	602b      	str	r3, [r5, #0]
 800a168:	d032      	beq.n	800a1d0 <__sflush_r+0x98>
 800a16a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a16c:	89a3      	ldrh	r3, [r4, #12]
 800a16e:	075a      	lsls	r2, r3, #29
 800a170:	d505      	bpl.n	800a17e <__sflush_r+0x46>
 800a172:	6863      	ldr	r3, [r4, #4]
 800a174:	1ac0      	subs	r0, r0, r3
 800a176:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a178:	b10b      	cbz	r3, 800a17e <__sflush_r+0x46>
 800a17a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a17c:	1ac0      	subs	r0, r0, r3
 800a17e:	2300      	movs	r3, #0
 800a180:	4602      	mov	r2, r0
 800a182:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a184:	4628      	mov	r0, r5
 800a186:	6a21      	ldr	r1, [r4, #32]
 800a188:	47b0      	blx	r6
 800a18a:	1c43      	adds	r3, r0, #1
 800a18c:	89a3      	ldrh	r3, [r4, #12]
 800a18e:	d106      	bne.n	800a19e <__sflush_r+0x66>
 800a190:	6829      	ldr	r1, [r5, #0]
 800a192:	291d      	cmp	r1, #29
 800a194:	d82c      	bhi.n	800a1f0 <__sflush_r+0xb8>
 800a196:	4a2a      	ldr	r2, [pc, #168]	; (800a240 <__sflush_r+0x108>)
 800a198:	40ca      	lsrs	r2, r1
 800a19a:	07d6      	lsls	r6, r2, #31
 800a19c:	d528      	bpl.n	800a1f0 <__sflush_r+0xb8>
 800a19e:	2200      	movs	r2, #0
 800a1a0:	6062      	str	r2, [r4, #4]
 800a1a2:	6922      	ldr	r2, [r4, #16]
 800a1a4:	04d9      	lsls	r1, r3, #19
 800a1a6:	6022      	str	r2, [r4, #0]
 800a1a8:	d504      	bpl.n	800a1b4 <__sflush_r+0x7c>
 800a1aa:	1c42      	adds	r2, r0, #1
 800a1ac:	d101      	bne.n	800a1b2 <__sflush_r+0x7a>
 800a1ae:	682b      	ldr	r3, [r5, #0]
 800a1b0:	b903      	cbnz	r3, 800a1b4 <__sflush_r+0x7c>
 800a1b2:	6560      	str	r0, [r4, #84]	; 0x54
 800a1b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1b6:	602f      	str	r7, [r5, #0]
 800a1b8:	2900      	cmp	r1, #0
 800a1ba:	d0ca      	beq.n	800a152 <__sflush_r+0x1a>
 800a1bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a1c0:	4299      	cmp	r1, r3
 800a1c2:	d002      	beq.n	800a1ca <__sflush_r+0x92>
 800a1c4:	4628      	mov	r0, r5
 800a1c6:	f000 f9d5 	bl	800a574 <_free_r>
 800a1ca:	2000      	movs	r0, #0
 800a1cc:	6360      	str	r0, [r4, #52]	; 0x34
 800a1ce:	e7c1      	b.n	800a154 <__sflush_r+0x1c>
 800a1d0:	6a21      	ldr	r1, [r4, #32]
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	4628      	mov	r0, r5
 800a1d6:	47b0      	blx	r6
 800a1d8:	1c41      	adds	r1, r0, #1
 800a1da:	d1c7      	bne.n	800a16c <__sflush_r+0x34>
 800a1dc:	682b      	ldr	r3, [r5, #0]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d0c4      	beq.n	800a16c <__sflush_r+0x34>
 800a1e2:	2b1d      	cmp	r3, #29
 800a1e4:	d001      	beq.n	800a1ea <__sflush_r+0xb2>
 800a1e6:	2b16      	cmp	r3, #22
 800a1e8:	d101      	bne.n	800a1ee <__sflush_r+0xb6>
 800a1ea:	602f      	str	r7, [r5, #0]
 800a1ec:	e7b1      	b.n	800a152 <__sflush_r+0x1a>
 800a1ee:	89a3      	ldrh	r3, [r4, #12]
 800a1f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1f4:	81a3      	strh	r3, [r4, #12]
 800a1f6:	e7ad      	b.n	800a154 <__sflush_r+0x1c>
 800a1f8:	690f      	ldr	r7, [r1, #16]
 800a1fa:	2f00      	cmp	r7, #0
 800a1fc:	d0a9      	beq.n	800a152 <__sflush_r+0x1a>
 800a1fe:	0793      	lsls	r3, r2, #30
 800a200:	bf18      	it	ne
 800a202:	2300      	movne	r3, #0
 800a204:	680e      	ldr	r6, [r1, #0]
 800a206:	bf08      	it	eq
 800a208:	694b      	ldreq	r3, [r1, #20]
 800a20a:	eba6 0807 	sub.w	r8, r6, r7
 800a20e:	600f      	str	r7, [r1, #0]
 800a210:	608b      	str	r3, [r1, #8]
 800a212:	f1b8 0f00 	cmp.w	r8, #0
 800a216:	dd9c      	ble.n	800a152 <__sflush_r+0x1a>
 800a218:	4643      	mov	r3, r8
 800a21a:	463a      	mov	r2, r7
 800a21c:	4628      	mov	r0, r5
 800a21e:	6a21      	ldr	r1, [r4, #32]
 800a220:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a222:	47b0      	blx	r6
 800a224:	2800      	cmp	r0, #0
 800a226:	dc06      	bgt.n	800a236 <__sflush_r+0xfe>
 800a228:	89a3      	ldrh	r3, [r4, #12]
 800a22a:	f04f 30ff 	mov.w	r0, #4294967295
 800a22e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a232:	81a3      	strh	r3, [r4, #12]
 800a234:	e78e      	b.n	800a154 <__sflush_r+0x1c>
 800a236:	4407      	add	r7, r0
 800a238:	eba8 0800 	sub.w	r8, r8, r0
 800a23c:	e7e9      	b.n	800a212 <__sflush_r+0xda>
 800a23e:	bf00      	nop
 800a240:	20400001 	.word	0x20400001

0800a244 <_fflush_r>:
 800a244:	b538      	push	{r3, r4, r5, lr}
 800a246:	690b      	ldr	r3, [r1, #16]
 800a248:	4605      	mov	r5, r0
 800a24a:	460c      	mov	r4, r1
 800a24c:	b913      	cbnz	r3, 800a254 <_fflush_r+0x10>
 800a24e:	2500      	movs	r5, #0
 800a250:	4628      	mov	r0, r5
 800a252:	bd38      	pop	{r3, r4, r5, pc}
 800a254:	b118      	cbz	r0, 800a25e <_fflush_r+0x1a>
 800a256:	6983      	ldr	r3, [r0, #24]
 800a258:	b90b      	cbnz	r3, 800a25e <_fflush_r+0x1a>
 800a25a:	f000 f887 	bl	800a36c <__sinit>
 800a25e:	4b14      	ldr	r3, [pc, #80]	; (800a2b0 <_fflush_r+0x6c>)
 800a260:	429c      	cmp	r4, r3
 800a262:	d11b      	bne.n	800a29c <_fflush_r+0x58>
 800a264:	686c      	ldr	r4, [r5, #4]
 800a266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d0ef      	beq.n	800a24e <_fflush_r+0xa>
 800a26e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a270:	07d0      	lsls	r0, r2, #31
 800a272:	d404      	bmi.n	800a27e <_fflush_r+0x3a>
 800a274:	0599      	lsls	r1, r3, #22
 800a276:	d402      	bmi.n	800a27e <_fflush_r+0x3a>
 800a278:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a27a:	f000 f915 	bl	800a4a8 <__retarget_lock_acquire_recursive>
 800a27e:	4628      	mov	r0, r5
 800a280:	4621      	mov	r1, r4
 800a282:	f7ff ff59 	bl	800a138 <__sflush_r>
 800a286:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a288:	4605      	mov	r5, r0
 800a28a:	07da      	lsls	r2, r3, #31
 800a28c:	d4e0      	bmi.n	800a250 <_fflush_r+0xc>
 800a28e:	89a3      	ldrh	r3, [r4, #12]
 800a290:	059b      	lsls	r3, r3, #22
 800a292:	d4dd      	bmi.n	800a250 <_fflush_r+0xc>
 800a294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a296:	f000 f908 	bl	800a4aa <__retarget_lock_release_recursive>
 800a29a:	e7d9      	b.n	800a250 <_fflush_r+0xc>
 800a29c:	4b05      	ldr	r3, [pc, #20]	; (800a2b4 <_fflush_r+0x70>)
 800a29e:	429c      	cmp	r4, r3
 800a2a0:	d101      	bne.n	800a2a6 <_fflush_r+0x62>
 800a2a2:	68ac      	ldr	r4, [r5, #8]
 800a2a4:	e7df      	b.n	800a266 <_fflush_r+0x22>
 800a2a6:	4b04      	ldr	r3, [pc, #16]	; (800a2b8 <_fflush_r+0x74>)
 800a2a8:	429c      	cmp	r4, r3
 800a2aa:	bf08      	it	eq
 800a2ac:	68ec      	ldreq	r4, [r5, #12]
 800a2ae:	e7da      	b.n	800a266 <_fflush_r+0x22>
 800a2b0:	0800b9e8 	.word	0x0800b9e8
 800a2b4:	0800ba08 	.word	0x0800ba08
 800a2b8:	0800b9c8 	.word	0x0800b9c8

0800a2bc <std>:
 800a2bc:	2300      	movs	r3, #0
 800a2be:	b510      	push	{r4, lr}
 800a2c0:	4604      	mov	r4, r0
 800a2c2:	e9c0 3300 	strd	r3, r3, [r0]
 800a2c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a2ca:	6083      	str	r3, [r0, #8]
 800a2cc:	8181      	strh	r1, [r0, #12]
 800a2ce:	6643      	str	r3, [r0, #100]	; 0x64
 800a2d0:	81c2      	strh	r2, [r0, #14]
 800a2d2:	6183      	str	r3, [r0, #24]
 800a2d4:	4619      	mov	r1, r3
 800a2d6:	2208      	movs	r2, #8
 800a2d8:	305c      	adds	r0, #92	; 0x5c
 800a2da:	f7ff fdc1 	bl	8009e60 <memset>
 800a2de:	4b05      	ldr	r3, [pc, #20]	; (800a2f4 <std+0x38>)
 800a2e0:	6224      	str	r4, [r4, #32]
 800a2e2:	6263      	str	r3, [r4, #36]	; 0x24
 800a2e4:	4b04      	ldr	r3, [pc, #16]	; (800a2f8 <std+0x3c>)
 800a2e6:	62a3      	str	r3, [r4, #40]	; 0x28
 800a2e8:	4b04      	ldr	r3, [pc, #16]	; (800a2fc <std+0x40>)
 800a2ea:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a2ec:	4b04      	ldr	r3, [pc, #16]	; (800a300 <std+0x44>)
 800a2ee:	6323      	str	r3, [r4, #48]	; 0x30
 800a2f0:	bd10      	pop	{r4, pc}
 800a2f2:	bf00      	nop
 800a2f4:	0800acbd 	.word	0x0800acbd
 800a2f8:	0800acdf 	.word	0x0800acdf
 800a2fc:	0800ad17 	.word	0x0800ad17
 800a300:	0800ad3b 	.word	0x0800ad3b

0800a304 <_cleanup_r>:
 800a304:	4901      	ldr	r1, [pc, #4]	; (800a30c <_cleanup_r+0x8>)
 800a306:	f000 b8af 	b.w	800a468 <_fwalk_reent>
 800a30a:	bf00      	nop
 800a30c:	0800a245 	.word	0x0800a245

0800a310 <__sfmoreglue>:
 800a310:	b570      	push	{r4, r5, r6, lr}
 800a312:	2568      	movs	r5, #104	; 0x68
 800a314:	1e4a      	subs	r2, r1, #1
 800a316:	4355      	muls	r5, r2
 800a318:	460e      	mov	r6, r1
 800a31a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a31e:	f000 f975 	bl	800a60c <_malloc_r>
 800a322:	4604      	mov	r4, r0
 800a324:	b140      	cbz	r0, 800a338 <__sfmoreglue+0x28>
 800a326:	2100      	movs	r1, #0
 800a328:	e9c0 1600 	strd	r1, r6, [r0]
 800a32c:	300c      	adds	r0, #12
 800a32e:	60a0      	str	r0, [r4, #8]
 800a330:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a334:	f7ff fd94 	bl	8009e60 <memset>
 800a338:	4620      	mov	r0, r4
 800a33a:	bd70      	pop	{r4, r5, r6, pc}

0800a33c <__sfp_lock_acquire>:
 800a33c:	4801      	ldr	r0, [pc, #4]	; (800a344 <__sfp_lock_acquire+0x8>)
 800a33e:	f000 b8b3 	b.w	800a4a8 <__retarget_lock_acquire_recursive>
 800a342:	bf00      	nop
 800a344:	2000095c 	.word	0x2000095c

0800a348 <__sfp_lock_release>:
 800a348:	4801      	ldr	r0, [pc, #4]	; (800a350 <__sfp_lock_release+0x8>)
 800a34a:	f000 b8ae 	b.w	800a4aa <__retarget_lock_release_recursive>
 800a34e:	bf00      	nop
 800a350:	2000095c 	.word	0x2000095c

0800a354 <__sinit_lock_acquire>:
 800a354:	4801      	ldr	r0, [pc, #4]	; (800a35c <__sinit_lock_acquire+0x8>)
 800a356:	f000 b8a7 	b.w	800a4a8 <__retarget_lock_acquire_recursive>
 800a35a:	bf00      	nop
 800a35c:	20000957 	.word	0x20000957

0800a360 <__sinit_lock_release>:
 800a360:	4801      	ldr	r0, [pc, #4]	; (800a368 <__sinit_lock_release+0x8>)
 800a362:	f000 b8a2 	b.w	800a4aa <__retarget_lock_release_recursive>
 800a366:	bf00      	nop
 800a368:	20000957 	.word	0x20000957

0800a36c <__sinit>:
 800a36c:	b510      	push	{r4, lr}
 800a36e:	4604      	mov	r4, r0
 800a370:	f7ff fff0 	bl	800a354 <__sinit_lock_acquire>
 800a374:	69a3      	ldr	r3, [r4, #24]
 800a376:	b11b      	cbz	r3, 800a380 <__sinit+0x14>
 800a378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a37c:	f7ff bff0 	b.w	800a360 <__sinit_lock_release>
 800a380:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a384:	6523      	str	r3, [r4, #80]	; 0x50
 800a386:	4b13      	ldr	r3, [pc, #76]	; (800a3d4 <__sinit+0x68>)
 800a388:	4a13      	ldr	r2, [pc, #76]	; (800a3d8 <__sinit+0x6c>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a38e:	42a3      	cmp	r3, r4
 800a390:	bf08      	it	eq
 800a392:	2301      	moveq	r3, #1
 800a394:	4620      	mov	r0, r4
 800a396:	bf08      	it	eq
 800a398:	61a3      	streq	r3, [r4, #24]
 800a39a:	f000 f81f 	bl	800a3dc <__sfp>
 800a39e:	6060      	str	r0, [r4, #4]
 800a3a0:	4620      	mov	r0, r4
 800a3a2:	f000 f81b 	bl	800a3dc <__sfp>
 800a3a6:	60a0      	str	r0, [r4, #8]
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	f000 f817 	bl	800a3dc <__sfp>
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	2104      	movs	r1, #4
 800a3b2:	60e0      	str	r0, [r4, #12]
 800a3b4:	6860      	ldr	r0, [r4, #4]
 800a3b6:	f7ff ff81 	bl	800a2bc <std>
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	2109      	movs	r1, #9
 800a3be:	68a0      	ldr	r0, [r4, #8]
 800a3c0:	f7ff ff7c 	bl	800a2bc <std>
 800a3c4:	2202      	movs	r2, #2
 800a3c6:	2112      	movs	r1, #18
 800a3c8:	68e0      	ldr	r0, [r4, #12]
 800a3ca:	f7ff ff77 	bl	800a2bc <std>
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	61a3      	str	r3, [r4, #24]
 800a3d2:	e7d1      	b.n	800a378 <__sinit+0xc>
 800a3d4:	0800b9c4 	.word	0x0800b9c4
 800a3d8:	0800a305 	.word	0x0800a305

0800a3dc <__sfp>:
 800a3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3de:	4607      	mov	r7, r0
 800a3e0:	f7ff ffac 	bl	800a33c <__sfp_lock_acquire>
 800a3e4:	4b1e      	ldr	r3, [pc, #120]	; (800a460 <__sfp+0x84>)
 800a3e6:	681e      	ldr	r6, [r3, #0]
 800a3e8:	69b3      	ldr	r3, [r6, #24]
 800a3ea:	b913      	cbnz	r3, 800a3f2 <__sfp+0x16>
 800a3ec:	4630      	mov	r0, r6
 800a3ee:	f7ff ffbd 	bl	800a36c <__sinit>
 800a3f2:	3648      	adds	r6, #72	; 0x48
 800a3f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a3f8:	3b01      	subs	r3, #1
 800a3fa:	d503      	bpl.n	800a404 <__sfp+0x28>
 800a3fc:	6833      	ldr	r3, [r6, #0]
 800a3fe:	b30b      	cbz	r3, 800a444 <__sfp+0x68>
 800a400:	6836      	ldr	r6, [r6, #0]
 800a402:	e7f7      	b.n	800a3f4 <__sfp+0x18>
 800a404:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a408:	b9d5      	cbnz	r5, 800a440 <__sfp+0x64>
 800a40a:	4b16      	ldr	r3, [pc, #88]	; (800a464 <__sfp+0x88>)
 800a40c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a410:	60e3      	str	r3, [r4, #12]
 800a412:	6665      	str	r5, [r4, #100]	; 0x64
 800a414:	f000 f847 	bl	800a4a6 <__retarget_lock_init_recursive>
 800a418:	f7ff ff96 	bl	800a348 <__sfp_lock_release>
 800a41c:	2208      	movs	r2, #8
 800a41e:	4629      	mov	r1, r5
 800a420:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a424:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a428:	6025      	str	r5, [r4, #0]
 800a42a:	61a5      	str	r5, [r4, #24]
 800a42c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a430:	f7ff fd16 	bl	8009e60 <memset>
 800a434:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a438:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a43c:	4620      	mov	r0, r4
 800a43e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a440:	3468      	adds	r4, #104	; 0x68
 800a442:	e7d9      	b.n	800a3f8 <__sfp+0x1c>
 800a444:	2104      	movs	r1, #4
 800a446:	4638      	mov	r0, r7
 800a448:	f7ff ff62 	bl	800a310 <__sfmoreglue>
 800a44c:	4604      	mov	r4, r0
 800a44e:	6030      	str	r0, [r6, #0]
 800a450:	2800      	cmp	r0, #0
 800a452:	d1d5      	bne.n	800a400 <__sfp+0x24>
 800a454:	f7ff ff78 	bl	800a348 <__sfp_lock_release>
 800a458:	230c      	movs	r3, #12
 800a45a:	603b      	str	r3, [r7, #0]
 800a45c:	e7ee      	b.n	800a43c <__sfp+0x60>
 800a45e:	bf00      	nop
 800a460:	0800b9c4 	.word	0x0800b9c4
 800a464:	ffff0001 	.word	0xffff0001

0800a468 <_fwalk_reent>:
 800a468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a46c:	4606      	mov	r6, r0
 800a46e:	4688      	mov	r8, r1
 800a470:	2700      	movs	r7, #0
 800a472:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a476:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a47a:	f1b9 0901 	subs.w	r9, r9, #1
 800a47e:	d505      	bpl.n	800a48c <_fwalk_reent+0x24>
 800a480:	6824      	ldr	r4, [r4, #0]
 800a482:	2c00      	cmp	r4, #0
 800a484:	d1f7      	bne.n	800a476 <_fwalk_reent+0xe>
 800a486:	4638      	mov	r0, r7
 800a488:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a48c:	89ab      	ldrh	r3, [r5, #12]
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d907      	bls.n	800a4a2 <_fwalk_reent+0x3a>
 800a492:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a496:	3301      	adds	r3, #1
 800a498:	d003      	beq.n	800a4a2 <_fwalk_reent+0x3a>
 800a49a:	4629      	mov	r1, r5
 800a49c:	4630      	mov	r0, r6
 800a49e:	47c0      	blx	r8
 800a4a0:	4307      	orrs	r7, r0
 800a4a2:	3568      	adds	r5, #104	; 0x68
 800a4a4:	e7e9      	b.n	800a47a <_fwalk_reent+0x12>

0800a4a6 <__retarget_lock_init_recursive>:
 800a4a6:	4770      	bx	lr

0800a4a8 <__retarget_lock_acquire_recursive>:
 800a4a8:	4770      	bx	lr

0800a4aa <__retarget_lock_release_recursive>:
 800a4aa:	4770      	bx	lr

0800a4ac <__swhatbuf_r>:
 800a4ac:	b570      	push	{r4, r5, r6, lr}
 800a4ae:	460e      	mov	r6, r1
 800a4b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4b4:	4614      	mov	r4, r2
 800a4b6:	2900      	cmp	r1, #0
 800a4b8:	461d      	mov	r5, r3
 800a4ba:	b096      	sub	sp, #88	; 0x58
 800a4bc:	da07      	bge.n	800a4ce <__swhatbuf_r+0x22>
 800a4be:	2300      	movs	r3, #0
 800a4c0:	602b      	str	r3, [r5, #0]
 800a4c2:	89b3      	ldrh	r3, [r6, #12]
 800a4c4:	061a      	lsls	r2, r3, #24
 800a4c6:	d410      	bmi.n	800a4ea <__swhatbuf_r+0x3e>
 800a4c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4cc:	e00e      	b.n	800a4ec <__swhatbuf_r+0x40>
 800a4ce:	466a      	mov	r2, sp
 800a4d0:	f000 fc5a 	bl	800ad88 <_fstat_r>
 800a4d4:	2800      	cmp	r0, #0
 800a4d6:	dbf2      	blt.n	800a4be <__swhatbuf_r+0x12>
 800a4d8:	9a01      	ldr	r2, [sp, #4]
 800a4da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a4de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a4e2:	425a      	negs	r2, r3
 800a4e4:	415a      	adcs	r2, r3
 800a4e6:	602a      	str	r2, [r5, #0]
 800a4e8:	e7ee      	b.n	800a4c8 <__swhatbuf_r+0x1c>
 800a4ea:	2340      	movs	r3, #64	; 0x40
 800a4ec:	2000      	movs	r0, #0
 800a4ee:	6023      	str	r3, [r4, #0]
 800a4f0:	b016      	add	sp, #88	; 0x58
 800a4f2:	bd70      	pop	{r4, r5, r6, pc}

0800a4f4 <__smakebuf_r>:
 800a4f4:	898b      	ldrh	r3, [r1, #12]
 800a4f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a4f8:	079d      	lsls	r5, r3, #30
 800a4fa:	4606      	mov	r6, r0
 800a4fc:	460c      	mov	r4, r1
 800a4fe:	d507      	bpl.n	800a510 <__smakebuf_r+0x1c>
 800a500:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a504:	6023      	str	r3, [r4, #0]
 800a506:	6123      	str	r3, [r4, #16]
 800a508:	2301      	movs	r3, #1
 800a50a:	6163      	str	r3, [r4, #20]
 800a50c:	b002      	add	sp, #8
 800a50e:	bd70      	pop	{r4, r5, r6, pc}
 800a510:	466a      	mov	r2, sp
 800a512:	ab01      	add	r3, sp, #4
 800a514:	f7ff ffca 	bl	800a4ac <__swhatbuf_r>
 800a518:	9900      	ldr	r1, [sp, #0]
 800a51a:	4605      	mov	r5, r0
 800a51c:	4630      	mov	r0, r6
 800a51e:	f000 f875 	bl	800a60c <_malloc_r>
 800a522:	b948      	cbnz	r0, 800a538 <__smakebuf_r+0x44>
 800a524:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a528:	059a      	lsls	r2, r3, #22
 800a52a:	d4ef      	bmi.n	800a50c <__smakebuf_r+0x18>
 800a52c:	f023 0303 	bic.w	r3, r3, #3
 800a530:	f043 0302 	orr.w	r3, r3, #2
 800a534:	81a3      	strh	r3, [r4, #12]
 800a536:	e7e3      	b.n	800a500 <__smakebuf_r+0xc>
 800a538:	4b0d      	ldr	r3, [pc, #52]	; (800a570 <__smakebuf_r+0x7c>)
 800a53a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a53c:	89a3      	ldrh	r3, [r4, #12]
 800a53e:	6020      	str	r0, [r4, #0]
 800a540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a544:	81a3      	strh	r3, [r4, #12]
 800a546:	9b00      	ldr	r3, [sp, #0]
 800a548:	6120      	str	r0, [r4, #16]
 800a54a:	6163      	str	r3, [r4, #20]
 800a54c:	9b01      	ldr	r3, [sp, #4]
 800a54e:	b15b      	cbz	r3, 800a568 <__smakebuf_r+0x74>
 800a550:	4630      	mov	r0, r6
 800a552:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a556:	f000 fc29 	bl	800adac <_isatty_r>
 800a55a:	b128      	cbz	r0, 800a568 <__smakebuf_r+0x74>
 800a55c:	89a3      	ldrh	r3, [r4, #12]
 800a55e:	f023 0303 	bic.w	r3, r3, #3
 800a562:	f043 0301 	orr.w	r3, r3, #1
 800a566:	81a3      	strh	r3, [r4, #12]
 800a568:	89a0      	ldrh	r0, [r4, #12]
 800a56a:	4305      	orrs	r5, r0
 800a56c:	81a5      	strh	r5, [r4, #12]
 800a56e:	e7cd      	b.n	800a50c <__smakebuf_r+0x18>
 800a570:	0800a305 	.word	0x0800a305

0800a574 <_free_r>:
 800a574:	b538      	push	{r3, r4, r5, lr}
 800a576:	4605      	mov	r5, r0
 800a578:	2900      	cmp	r1, #0
 800a57a:	d043      	beq.n	800a604 <_free_r+0x90>
 800a57c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a580:	1f0c      	subs	r4, r1, #4
 800a582:	2b00      	cmp	r3, #0
 800a584:	bfb8      	it	lt
 800a586:	18e4      	addlt	r4, r4, r3
 800a588:	f000 fc40 	bl	800ae0c <__malloc_lock>
 800a58c:	4a1e      	ldr	r2, [pc, #120]	; (800a608 <_free_r+0x94>)
 800a58e:	6813      	ldr	r3, [r2, #0]
 800a590:	4610      	mov	r0, r2
 800a592:	b933      	cbnz	r3, 800a5a2 <_free_r+0x2e>
 800a594:	6063      	str	r3, [r4, #4]
 800a596:	6014      	str	r4, [r2, #0]
 800a598:	4628      	mov	r0, r5
 800a59a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a59e:	f000 bc3b 	b.w	800ae18 <__malloc_unlock>
 800a5a2:	42a3      	cmp	r3, r4
 800a5a4:	d90a      	bls.n	800a5bc <_free_r+0x48>
 800a5a6:	6821      	ldr	r1, [r4, #0]
 800a5a8:	1862      	adds	r2, r4, r1
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	bf01      	itttt	eq
 800a5ae:	681a      	ldreq	r2, [r3, #0]
 800a5b0:	685b      	ldreq	r3, [r3, #4]
 800a5b2:	1852      	addeq	r2, r2, r1
 800a5b4:	6022      	streq	r2, [r4, #0]
 800a5b6:	6063      	str	r3, [r4, #4]
 800a5b8:	6004      	str	r4, [r0, #0]
 800a5ba:	e7ed      	b.n	800a598 <_free_r+0x24>
 800a5bc:	461a      	mov	r2, r3
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	b10b      	cbz	r3, 800a5c6 <_free_r+0x52>
 800a5c2:	42a3      	cmp	r3, r4
 800a5c4:	d9fa      	bls.n	800a5bc <_free_r+0x48>
 800a5c6:	6811      	ldr	r1, [r2, #0]
 800a5c8:	1850      	adds	r0, r2, r1
 800a5ca:	42a0      	cmp	r0, r4
 800a5cc:	d10b      	bne.n	800a5e6 <_free_r+0x72>
 800a5ce:	6820      	ldr	r0, [r4, #0]
 800a5d0:	4401      	add	r1, r0
 800a5d2:	1850      	adds	r0, r2, r1
 800a5d4:	4283      	cmp	r3, r0
 800a5d6:	6011      	str	r1, [r2, #0]
 800a5d8:	d1de      	bne.n	800a598 <_free_r+0x24>
 800a5da:	6818      	ldr	r0, [r3, #0]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	4401      	add	r1, r0
 800a5e0:	6011      	str	r1, [r2, #0]
 800a5e2:	6053      	str	r3, [r2, #4]
 800a5e4:	e7d8      	b.n	800a598 <_free_r+0x24>
 800a5e6:	d902      	bls.n	800a5ee <_free_r+0x7a>
 800a5e8:	230c      	movs	r3, #12
 800a5ea:	602b      	str	r3, [r5, #0]
 800a5ec:	e7d4      	b.n	800a598 <_free_r+0x24>
 800a5ee:	6820      	ldr	r0, [r4, #0]
 800a5f0:	1821      	adds	r1, r4, r0
 800a5f2:	428b      	cmp	r3, r1
 800a5f4:	bf01      	itttt	eq
 800a5f6:	6819      	ldreq	r1, [r3, #0]
 800a5f8:	685b      	ldreq	r3, [r3, #4]
 800a5fa:	1809      	addeq	r1, r1, r0
 800a5fc:	6021      	streq	r1, [r4, #0]
 800a5fe:	6063      	str	r3, [r4, #4]
 800a600:	6054      	str	r4, [r2, #4]
 800a602:	e7c9      	b.n	800a598 <_free_r+0x24>
 800a604:	bd38      	pop	{r3, r4, r5, pc}
 800a606:	bf00      	nop
 800a608:	2000027c 	.word	0x2000027c

0800a60c <_malloc_r>:
 800a60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a60e:	1ccd      	adds	r5, r1, #3
 800a610:	f025 0503 	bic.w	r5, r5, #3
 800a614:	3508      	adds	r5, #8
 800a616:	2d0c      	cmp	r5, #12
 800a618:	bf38      	it	cc
 800a61a:	250c      	movcc	r5, #12
 800a61c:	2d00      	cmp	r5, #0
 800a61e:	4606      	mov	r6, r0
 800a620:	db01      	blt.n	800a626 <_malloc_r+0x1a>
 800a622:	42a9      	cmp	r1, r5
 800a624:	d903      	bls.n	800a62e <_malloc_r+0x22>
 800a626:	230c      	movs	r3, #12
 800a628:	6033      	str	r3, [r6, #0]
 800a62a:	2000      	movs	r0, #0
 800a62c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a62e:	f000 fbed 	bl	800ae0c <__malloc_lock>
 800a632:	4921      	ldr	r1, [pc, #132]	; (800a6b8 <_malloc_r+0xac>)
 800a634:	680a      	ldr	r2, [r1, #0]
 800a636:	4614      	mov	r4, r2
 800a638:	b99c      	cbnz	r4, 800a662 <_malloc_r+0x56>
 800a63a:	4f20      	ldr	r7, [pc, #128]	; (800a6bc <_malloc_r+0xb0>)
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	b923      	cbnz	r3, 800a64a <_malloc_r+0x3e>
 800a640:	4621      	mov	r1, r4
 800a642:	4630      	mov	r0, r6
 800a644:	f000 fb2a 	bl	800ac9c <_sbrk_r>
 800a648:	6038      	str	r0, [r7, #0]
 800a64a:	4629      	mov	r1, r5
 800a64c:	4630      	mov	r0, r6
 800a64e:	f000 fb25 	bl	800ac9c <_sbrk_r>
 800a652:	1c43      	adds	r3, r0, #1
 800a654:	d123      	bne.n	800a69e <_malloc_r+0x92>
 800a656:	230c      	movs	r3, #12
 800a658:	4630      	mov	r0, r6
 800a65a:	6033      	str	r3, [r6, #0]
 800a65c:	f000 fbdc 	bl	800ae18 <__malloc_unlock>
 800a660:	e7e3      	b.n	800a62a <_malloc_r+0x1e>
 800a662:	6823      	ldr	r3, [r4, #0]
 800a664:	1b5b      	subs	r3, r3, r5
 800a666:	d417      	bmi.n	800a698 <_malloc_r+0x8c>
 800a668:	2b0b      	cmp	r3, #11
 800a66a:	d903      	bls.n	800a674 <_malloc_r+0x68>
 800a66c:	6023      	str	r3, [r4, #0]
 800a66e:	441c      	add	r4, r3
 800a670:	6025      	str	r5, [r4, #0]
 800a672:	e004      	b.n	800a67e <_malloc_r+0x72>
 800a674:	6863      	ldr	r3, [r4, #4]
 800a676:	42a2      	cmp	r2, r4
 800a678:	bf0c      	ite	eq
 800a67a:	600b      	streq	r3, [r1, #0]
 800a67c:	6053      	strne	r3, [r2, #4]
 800a67e:	4630      	mov	r0, r6
 800a680:	f000 fbca 	bl	800ae18 <__malloc_unlock>
 800a684:	f104 000b 	add.w	r0, r4, #11
 800a688:	1d23      	adds	r3, r4, #4
 800a68a:	f020 0007 	bic.w	r0, r0, #7
 800a68e:	1ac2      	subs	r2, r0, r3
 800a690:	d0cc      	beq.n	800a62c <_malloc_r+0x20>
 800a692:	1a1b      	subs	r3, r3, r0
 800a694:	50a3      	str	r3, [r4, r2]
 800a696:	e7c9      	b.n	800a62c <_malloc_r+0x20>
 800a698:	4622      	mov	r2, r4
 800a69a:	6864      	ldr	r4, [r4, #4]
 800a69c:	e7cc      	b.n	800a638 <_malloc_r+0x2c>
 800a69e:	1cc4      	adds	r4, r0, #3
 800a6a0:	f024 0403 	bic.w	r4, r4, #3
 800a6a4:	42a0      	cmp	r0, r4
 800a6a6:	d0e3      	beq.n	800a670 <_malloc_r+0x64>
 800a6a8:	1a21      	subs	r1, r4, r0
 800a6aa:	4630      	mov	r0, r6
 800a6ac:	f000 faf6 	bl	800ac9c <_sbrk_r>
 800a6b0:	3001      	adds	r0, #1
 800a6b2:	d1dd      	bne.n	800a670 <_malloc_r+0x64>
 800a6b4:	e7cf      	b.n	800a656 <_malloc_r+0x4a>
 800a6b6:	bf00      	nop
 800a6b8:	2000027c 	.word	0x2000027c
 800a6bc:	20000280 	.word	0x20000280

0800a6c0 <__sfputc_r>:
 800a6c0:	6893      	ldr	r3, [r2, #8]
 800a6c2:	b410      	push	{r4}
 800a6c4:	3b01      	subs	r3, #1
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	6093      	str	r3, [r2, #8]
 800a6ca:	da07      	bge.n	800a6dc <__sfputc_r+0x1c>
 800a6cc:	6994      	ldr	r4, [r2, #24]
 800a6ce:	42a3      	cmp	r3, r4
 800a6d0:	db01      	blt.n	800a6d6 <__sfputc_r+0x16>
 800a6d2:	290a      	cmp	r1, #10
 800a6d4:	d102      	bne.n	800a6dc <__sfputc_r+0x1c>
 800a6d6:	bc10      	pop	{r4}
 800a6d8:	f7ff bc6e 	b.w	8009fb8 <__swbuf_r>
 800a6dc:	6813      	ldr	r3, [r2, #0]
 800a6de:	1c58      	adds	r0, r3, #1
 800a6e0:	6010      	str	r0, [r2, #0]
 800a6e2:	7019      	strb	r1, [r3, #0]
 800a6e4:	4608      	mov	r0, r1
 800a6e6:	bc10      	pop	{r4}
 800a6e8:	4770      	bx	lr

0800a6ea <__sfputs_r>:
 800a6ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ec:	4606      	mov	r6, r0
 800a6ee:	460f      	mov	r7, r1
 800a6f0:	4614      	mov	r4, r2
 800a6f2:	18d5      	adds	r5, r2, r3
 800a6f4:	42ac      	cmp	r4, r5
 800a6f6:	d101      	bne.n	800a6fc <__sfputs_r+0x12>
 800a6f8:	2000      	movs	r0, #0
 800a6fa:	e007      	b.n	800a70c <__sfputs_r+0x22>
 800a6fc:	463a      	mov	r2, r7
 800a6fe:	4630      	mov	r0, r6
 800a700:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a704:	f7ff ffdc 	bl	800a6c0 <__sfputc_r>
 800a708:	1c43      	adds	r3, r0, #1
 800a70a:	d1f3      	bne.n	800a6f4 <__sfputs_r+0xa>
 800a70c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a710 <_vfiprintf_r>:
 800a710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a714:	460d      	mov	r5, r1
 800a716:	4614      	mov	r4, r2
 800a718:	4698      	mov	r8, r3
 800a71a:	4606      	mov	r6, r0
 800a71c:	b09d      	sub	sp, #116	; 0x74
 800a71e:	b118      	cbz	r0, 800a728 <_vfiprintf_r+0x18>
 800a720:	6983      	ldr	r3, [r0, #24]
 800a722:	b90b      	cbnz	r3, 800a728 <_vfiprintf_r+0x18>
 800a724:	f7ff fe22 	bl	800a36c <__sinit>
 800a728:	4b89      	ldr	r3, [pc, #548]	; (800a950 <_vfiprintf_r+0x240>)
 800a72a:	429d      	cmp	r5, r3
 800a72c:	d11b      	bne.n	800a766 <_vfiprintf_r+0x56>
 800a72e:	6875      	ldr	r5, [r6, #4]
 800a730:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a732:	07d9      	lsls	r1, r3, #31
 800a734:	d405      	bmi.n	800a742 <_vfiprintf_r+0x32>
 800a736:	89ab      	ldrh	r3, [r5, #12]
 800a738:	059a      	lsls	r2, r3, #22
 800a73a:	d402      	bmi.n	800a742 <_vfiprintf_r+0x32>
 800a73c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a73e:	f7ff feb3 	bl	800a4a8 <__retarget_lock_acquire_recursive>
 800a742:	89ab      	ldrh	r3, [r5, #12]
 800a744:	071b      	lsls	r3, r3, #28
 800a746:	d501      	bpl.n	800a74c <_vfiprintf_r+0x3c>
 800a748:	692b      	ldr	r3, [r5, #16]
 800a74a:	b9eb      	cbnz	r3, 800a788 <_vfiprintf_r+0x78>
 800a74c:	4629      	mov	r1, r5
 800a74e:	4630      	mov	r0, r6
 800a750:	f7ff fc84 	bl	800a05c <__swsetup_r>
 800a754:	b1c0      	cbz	r0, 800a788 <_vfiprintf_r+0x78>
 800a756:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a758:	07dc      	lsls	r4, r3, #31
 800a75a:	d50e      	bpl.n	800a77a <_vfiprintf_r+0x6a>
 800a75c:	f04f 30ff 	mov.w	r0, #4294967295
 800a760:	b01d      	add	sp, #116	; 0x74
 800a762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a766:	4b7b      	ldr	r3, [pc, #492]	; (800a954 <_vfiprintf_r+0x244>)
 800a768:	429d      	cmp	r5, r3
 800a76a:	d101      	bne.n	800a770 <_vfiprintf_r+0x60>
 800a76c:	68b5      	ldr	r5, [r6, #8]
 800a76e:	e7df      	b.n	800a730 <_vfiprintf_r+0x20>
 800a770:	4b79      	ldr	r3, [pc, #484]	; (800a958 <_vfiprintf_r+0x248>)
 800a772:	429d      	cmp	r5, r3
 800a774:	bf08      	it	eq
 800a776:	68f5      	ldreq	r5, [r6, #12]
 800a778:	e7da      	b.n	800a730 <_vfiprintf_r+0x20>
 800a77a:	89ab      	ldrh	r3, [r5, #12]
 800a77c:	0598      	lsls	r0, r3, #22
 800a77e:	d4ed      	bmi.n	800a75c <_vfiprintf_r+0x4c>
 800a780:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a782:	f7ff fe92 	bl	800a4aa <__retarget_lock_release_recursive>
 800a786:	e7e9      	b.n	800a75c <_vfiprintf_r+0x4c>
 800a788:	2300      	movs	r3, #0
 800a78a:	9309      	str	r3, [sp, #36]	; 0x24
 800a78c:	2320      	movs	r3, #32
 800a78e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a792:	2330      	movs	r3, #48	; 0x30
 800a794:	f04f 0901 	mov.w	r9, #1
 800a798:	f8cd 800c 	str.w	r8, [sp, #12]
 800a79c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a95c <_vfiprintf_r+0x24c>
 800a7a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a7a4:	4623      	mov	r3, r4
 800a7a6:	469a      	mov	sl, r3
 800a7a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7ac:	b10a      	cbz	r2, 800a7b2 <_vfiprintf_r+0xa2>
 800a7ae:	2a25      	cmp	r2, #37	; 0x25
 800a7b0:	d1f9      	bne.n	800a7a6 <_vfiprintf_r+0x96>
 800a7b2:	ebba 0b04 	subs.w	fp, sl, r4
 800a7b6:	d00b      	beq.n	800a7d0 <_vfiprintf_r+0xc0>
 800a7b8:	465b      	mov	r3, fp
 800a7ba:	4622      	mov	r2, r4
 800a7bc:	4629      	mov	r1, r5
 800a7be:	4630      	mov	r0, r6
 800a7c0:	f7ff ff93 	bl	800a6ea <__sfputs_r>
 800a7c4:	3001      	adds	r0, #1
 800a7c6:	f000 80aa 	beq.w	800a91e <_vfiprintf_r+0x20e>
 800a7ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7cc:	445a      	add	r2, fp
 800a7ce:	9209      	str	r2, [sp, #36]	; 0x24
 800a7d0:	f89a 3000 	ldrb.w	r3, [sl]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	f000 80a2 	beq.w	800a91e <_vfiprintf_r+0x20e>
 800a7da:	2300      	movs	r3, #0
 800a7dc:	f04f 32ff 	mov.w	r2, #4294967295
 800a7e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7e4:	f10a 0a01 	add.w	sl, sl, #1
 800a7e8:	9304      	str	r3, [sp, #16]
 800a7ea:	9307      	str	r3, [sp, #28]
 800a7ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7f0:	931a      	str	r3, [sp, #104]	; 0x68
 800a7f2:	4654      	mov	r4, sl
 800a7f4:	2205      	movs	r2, #5
 800a7f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7fa:	4858      	ldr	r0, [pc, #352]	; (800a95c <_vfiprintf_r+0x24c>)
 800a7fc:	f000 faf8 	bl	800adf0 <memchr>
 800a800:	9a04      	ldr	r2, [sp, #16]
 800a802:	b9d8      	cbnz	r0, 800a83c <_vfiprintf_r+0x12c>
 800a804:	06d1      	lsls	r1, r2, #27
 800a806:	bf44      	itt	mi
 800a808:	2320      	movmi	r3, #32
 800a80a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a80e:	0713      	lsls	r3, r2, #28
 800a810:	bf44      	itt	mi
 800a812:	232b      	movmi	r3, #43	; 0x2b
 800a814:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a818:	f89a 3000 	ldrb.w	r3, [sl]
 800a81c:	2b2a      	cmp	r3, #42	; 0x2a
 800a81e:	d015      	beq.n	800a84c <_vfiprintf_r+0x13c>
 800a820:	4654      	mov	r4, sl
 800a822:	2000      	movs	r0, #0
 800a824:	f04f 0c0a 	mov.w	ip, #10
 800a828:	9a07      	ldr	r2, [sp, #28]
 800a82a:	4621      	mov	r1, r4
 800a82c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a830:	3b30      	subs	r3, #48	; 0x30
 800a832:	2b09      	cmp	r3, #9
 800a834:	d94e      	bls.n	800a8d4 <_vfiprintf_r+0x1c4>
 800a836:	b1b0      	cbz	r0, 800a866 <_vfiprintf_r+0x156>
 800a838:	9207      	str	r2, [sp, #28]
 800a83a:	e014      	b.n	800a866 <_vfiprintf_r+0x156>
 800a83c:	eba0 0308 	sub.w	r3, r0, r8
 800a840:	fa09 f303 	lsl.w	r3, r9, r3
 800a844:	4313      	orrs	r3, r2
 800a846:	46a2      	mov	sl, r4
 800a848:	9304      	str	r3, [sp, #16]
 800a84a:	e7d2      	b.n	800a7f2 <_vfiprintf_r+0xe2>
 800a84c:	9b03      	ldr	r3, [sp, #12]
 800a84e:	1d19      	adds	r1, r3, #4
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	9103      	str	r1, [sp, #12]
 800a854:	2b00      	cmp	r3, #0
 800a856:	bfbb      	ittet	lt
 800a858:	425b      	neglt	r3, r3
 800a85a:	f042 0202 	orrlt.w	r2, r2, #2
 800a85e:	9307      	strge	r3, [sp, #28]
 800a860:	9307      	strlt	r3, [sp, #28]
 800a862:	bfb8      	it	lt
 800a864:	9204      	strlt	r2, [sp, #16]
 800a866:	7823      	ldrb	r3, [r4, #0]
 800a868:	2b2e      	cmp	r3, #46	; 0x2e
 800a86a:	d10c      	bne.n	800a886 <_vfiprintf_r+0x176>
 800a86c:	7863      	ldrb	r3, [r4, #1]
 800a86e:	2b2a      	cmp	r3, #42	; 0x2a
 800a870:	d135      	bne.n	800a8de <_vfiprintf_r+0x1ce>
 800a872:	9b03      	ldr	r3, [sp, #12]
 800a874:	3402      	adds	r4, #2
 800a876:	1d1a      	adds	r2, r3, #4
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	9203      	str	r2, [sp, #12]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	bfb8      	it	lt
 800a880:	f04f 33ff 	movlt.w	r3, #4294967295
 800a884:	9305      	str	r3, [sp, #20]
 800a886:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a96c <_vfiprintf_r+0x25c>
 800a88a:	2203      	movs	r2, #3
 800a88c:	4650      	mov	r0, sl
 800a88e:	7821      	ldrb	r1, [r4, #0]
 800a890:	f000 faae 	bl	800adf0 <memchr>
 800a894:	b140      	cbz	r0, 800a8a8 <_vfiprintf_r+0x198>
 800a896:	2340      	movs	r3, #64	; 0x40
 800a898:	eba0 000a 	sub.w	r0, r0, sl
 800a89c:	fa03 f000 	lsl.w	r0, r3, r0
 800a8a0:	9b04      	ldr	r3, [sp, #16]
 800a8a2:	3401      	adds	r4, #1
 800a8a4:	4303      	orrs	r3, r0
 800a8a6:	9304      	str	r3, [sp, #16]
 800a8a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8ac:	2206      	movs	r2, #6
 800a8ae:	482c      	ldr	r0, [pc, #176]	; (800a960 <_vfiprintf_r+0x250>)
 800a8b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8b4:	f000 fa9c 	bl	800adf0 <memchr>
 800a8b8:	2800      	cmp	r0, #0
 800a8ba:	d03f      	beq.n	800a93c <_vfiprintf_r+0x22c>
 800a8bc:	4b29      	ldr	r3, [pc, #164]	; (800a964 <_vfiprintf_r+0x254>)
 800a8be:	bb1b      	cbnz	r3, 800a908 <_vfiprintf_r+0x1f8>
 800a8c0:	9b03      	ldr	r3, [sp, #12]
 800a8c2:	3307      	adds	r3, #7
 800a8c4:	f023 0307 	bic.w	r3, r3, #7
 800a8c8:	3308      	adds	r3, #8
 800a8ca:	9303      	str	r3, [sp, #12]
 800a8cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ce:	443b      	add	r3, r7
 800a8d0:	9309      	str	r3, [sp, #36]	; 0x24
 800a8d2:	e767      	b.n	800a7a4 <_vfiprintf_r+0x94>
 800a8d4:	460c      	mov	r4, r1
 800a8d6:	2001      	movs	r0, #1
 800a8d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8dc:	e7a5      	b.n	800a82a <_vfiprintf_r+0x11a>
 800a8de:	2300      	movs	r3, #0
 800a8e0:	f04f 0c0a 	mov.w	ip, #10
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	3401      	adds	r4, #1
 800a8e8:	9305      	str	r3, [sp, #20]
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8f0:	3a30      	subs	r2, #48	; 0x30
 800a8f2:	2a09      	cmp	r2, #9
 800a8f4:	d903      	bls.n	800a8fe <_vfiprintf_r+0x1ee>
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d0c5      	beq.n	800a886 <_vfiprintf_r+0x176>
 800a8fa:	9105      	str	r1, [sp, #20]
 800a8fc:	e7c3      	b.n	800a886 <_vfiprintf_r+0x176>
 800a8fe:	4604      	mov	r4, r0
 800a900:	2301      	movs	r3, #1
 800a902:	fb0c 2101 	mla	r1, ip, r1, r2
 800a906:	e7f0      	b.n	800a8ea <_vfiprintf_r+0x1da>
 800a908:	ab03      	add	r3, sp, #12
 800a90a:	9300      	str	r3, [sp, #0]
 800a90c:	462a      	mov	r2, r5
 800a90e:	4630      	mov	r0, r6
 800a910:	4b15      	ldr	r3, [pc, #84]	; (800a968 <_vfiprintf_r+0x258>)
 800a912:	a904      	add	r1, sp, #16
 800a914:	f3af 8000 	nop.w
 800a918:	4607      	mov	r7, r0
 800a91a:	1c78      	adds	r0, r7, #1
 800a91c:	d1d6      	bne.n	800a8cc <_vfiprintf_r+0x1bc>
 800a91e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a920:	07d9      	lsls	r1, r3, #31
 800a922:	d405      	bmi.n	800a930 <_vfiprintf_r+0x220>
 800a924:	89ab      	ldrh	r3, [r5, #12]
 800a926:	059a      	lsls	r2, r3, #22
 800a928:	d402      	bmi.n	800a930 <_vfiprintf_r+0x220>
 800a92a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a92c:	f7ff fdbd 	bl	800a4aa <__retarget_lock_release_recursive>
 800a930:	89ab      	ldrh	r3, [r5, #12]
 800a932:	065b      	lsls	r3, r3, #25
 800a934:	f53f af12 	bmi.w	800a75c <_vfiprintf_r+0x4c>
 800a938:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a93a:	e711      	b.n	800a760 <_vfiprintf_r+0x50>
 800a93c:	ab03      	add	r3, sp, #12
 800a93e:	9300      	str	r3, [sp, #0]
 800a940:	462a      	mov	r2, r5
 800a942:	4630      	mov	r0, r6
 800a944:	4b08      	ldr	r3, [pc, #32]	; (800a968 <_vfiprintf_r+0x258>)
 800a946:	a904      	add	r1, sp, #16
 800a948:	f000 f882 	bl	800aa50 <_printf_i>
 800a94c:	e7e4      	b.n	800a918 <_vfiprintf_r+0x208>
 800a94e:	bf00      	nop
 800a950:	0800b9e8 	.word	0x0800b9e8
 800a954:	0800ba08 	.word	0x0800ba08
 800a958:	0800b9c8 	.word	0x0800b9c8
 800a95c:	0800ba28 	.word	0x0800ba28
 800a960:	0800ba32 	.word	0x0800ba32
 800a964:	00000000 	.word	0x00000000
 800a968:	0800a6eb 	.word	0x0800a6eb
 800a96c:	0800ba2e 	.word	0x0800ba2e

0800a970 <_printf_common>:
 800a970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a974:	4616      	mov	r6, r2
 800a976:	4699      	mov	r9, r3
 800a978:	688a      	ldr	r2, [r1, #8]
 800a97a:	690b      	ldr	r3, [r1, #16]
 800a97c:	4607      	mov	r7, r0
 800a97e:	4293      	cmp	r3, r2
 800a980:	bfb8      	it	lt
 800a982:	4613      	movlt	r3, r2
 800a984:	6033      	str	r3, [r6, #0]
 800a986:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a98a:	460c      	mov	r4, r1
 800a98c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a990:	b10a      	cbz	r2, 800a996 <_printf_common+0x26>
 800a992:	3301      	adds	r3, #1
 800a994:	6033      	str	r3, [r6, #0]
 800a996:	6823      	ldr	r3, [r4, #0]
 800a998:	0699      	lsls	r1, r3, #26
 800a99a:	bf42      	ittt	mi
 800a99c:	6833      	ldrmi	r3, [r6, #0]
 800a99e:	3302      	addmi	r3, #2
 800a9a0:	6033      	strmi	r3, [r6, #0]
 800a9a2:	6825      	ldr	r5, [r4, #0]
 800a9a4:	f015 0506 	ands.w	r5, r5, #6
 800a9a8:	d106      	bne.n	800a9b8 <_printf_common+0x48>
 800a9aa:	f104 0a19 	add.w	sl, r4, #25
 800a9ae:	68e3      	ldr	r3, [r4, #12]
 800a9b0:	6832      	ldr	r2, [r6, #0]
 800a9b2:	1a9b      	subs	r3, r3, r2
 800a9b4:	42ab      	cmp	r3, r5
 800a9b6:	dc28      	bgt.n	800aa0a <_printf_common+0x9a>
 800a9b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a9bc:	1e13      	subs	r3, r2, #0
 800a9be:	6822      	ldr	r2, [r4, #0]
 800a9c0:	bf18      	it	ne
 800a9c2:	2301      	movne	r3, #1
 800a9c4:	0692      	lsls	r2, r2, #26
 800a9c6:	d42d      	bmi.n	800aa24 <_printf_common+0xb4>
 800a9c8:	4649      	mov	r1, r9
 800a9ca:	4638      	mov	r0, r7
 800a9cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a9d0:	47c0      	blx	r8
 800a9d2:	3001      	adds	r0, #1
 800a9d4:	d020      	beq.n	800aa18 <_printf_common+0xa8>
 800a9d6:	6823      	ldr	r3, [r4, #0]
 800a9d8:	68e5      	ldr	r5, [r4, #12]
 800a9da:	f003 0306 	and.w	r3, r3, #6
 800a9de:	2b04      	cmp	r3, #4
 800a9e0:	bf18      	it	ne
 800a9e2:	2500      	movne	r5, #0
 800a9e4:	6832      	ldr	r2, [r6, #0]
 800a9e6:	f04f 0600 	mov.w	r6, #0
 800a9ea:	68a3      	ldr	r3, [r4, #8]
 800a9ec:	bf08      	it	eq
 800a9ee:	1aad      	subeq	r5, r5, r2
 800a9f0:	6922      	ldr	r2, [r4, #16]
 800a9f2:	bf08      	it	eq
 800a9f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	bfc4      	itt	gt
 800a9fc:	1a9b      	subgt	r3, r3, r2
 800a9fe:	18ed      	addgt	r5, r5, r3
 800aa00:	341a      	adds	r4, #26
 800aa02:	42b5      	cmp	r5, r6
 800aa04:	d11a      	bne.n	800aa3c <_printf_common+0xcc>
 800aa06:	2000      	movs	r0, #0
 800aa08:	e008      	b.n	800aa1c <_printf_common+0xac>
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	4652      	mov	r2, sl
 800aa0e:	4649      	mov	r1, r9
 800aa10:	4638      	mov	r0, r7
 800aa12:	47c0      	blx	r8
 800aa14:	3001      	adds	r0, #1
 800aa16:	d103      	bne.n	800aa20 <_printf_common+0xb0>
 800aa18:	f04f 30ff 	mov.w	r0, #4294967295
 800aa1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa20:	3501      	adds	r5, #1
 800aa22:	e7c4      	b.n	800a9ae <_printf_common+0x3e>
 800aa24:	2030      	movs	r0, #48	; 0x30
 800aa26:	18e1      	adds	r1, r4, r3
 800aa28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aa2c:	1c5a      	adds	r2, r3, #1
 800aa2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa32:	4422      	add	r2, r4
 800aa34:	3302      	adds	r3, #2
 800aa36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa3a:	e7c5      	b.n	800a9c8 <_printf_common+0x58>
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	4622      	mov	r2, r4
 800aa40:	4649      	mov	r1, r9
 800aa42:	4638      	mov	r0, r7
 800aa44:	47c0      	blx	r8
 800aa46:	3001      	adds	r0, #1
 800aa48:	d0e6      	beq.n	800aa18 <_printf_common+0xa8>
 800aa4a:	3601      	adds	r6, #1
 800aa4c:	e7d9      	b.n	800aa02 <_printf_common+0x92>
	...

0800aa50 <_printf_i>:
 800aa50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa54:	460c      	mov	r4, r1
 800aa56:	7e27      	ldrb	r7, [r4, #24]
 800aa58:	4691      	mov	r9, r2
 800aa5a:	2f78      	cmp	r7, #120	; 0x78
 800aa5c:	4680      	mov	r8, r0
 800aa5e:	469a      	mov	sl, r3
 800aa60:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aa62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa66:	d807      	bhi.n	800aa78 <_printf_i+0x28>
 800aa68:	2f62      	cmp	r7, #98	; 0x62
 800aa6a:	d80a      	bhi.n	800aa82 <_printf_i+0x32>
 800aa6c:	2f00      	cmp	r7, #0
 800aa6e:	f000 80d9 	beq.w	800ac24 <_printf_i+0x1d4>
 800aa72:	2f58      	cmp	r7, #88	; 0x58
 800aa74:	f000 80a4 	beq.w	800abc0 <_printf_i+0x170>
 800aa78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aa7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa80:	e03a      	b.n	800aaf8 <_printf_i+0xa8>
 800aa82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa86:	2b15      	cmp	r3, #21
 800aa88:	d8f6      	bhi.n	800aa78 <_printf_i+0x28>
 800aa8a:	a001      	add	r0, pc, #4	; (adr r0, 800aa90 <_printf_i+0x40>)
 800aa8c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800aa90:	0800aae9 	.word	0x0800aae9
 800aa94:	0800aafd 	.word	0x0800aafd
 800aa98:	0800aa79 	.word	0x0800aa79
 800aa9c:	0800aa79 	.word	0x0800aa79
 800aaa0:	0800aa79 	.word	0x0800aa79
 800aaa4:	0800aa79 	.word	0x0800aa79
 800aaa8:	0800aafd 	.word	0x0800aafd
 800aaac:	0800aa79 	.word	0x0800aa79
 800aab0:	0800aa79 	.word	0x0800aa79
 800aab4:	0800aa79 	.word	0x0800aa79
 800aab8:	0800aa79 	.word	0x0800aa79
 800aabc:	0800ac0b 	.word	0x0800ac0b
 800aac0:	0800ab2d 	.word	0x0800ab2d
 800aac4:	0800abed 	.word	0x0800abed
 800aac8:	0800aa79 	.word	0x0800aa79
 800aacc:	0800aa79 	.word	0x0800aa79
 800aad0:	0800ac2d 	.word	0x0800ac2d
 800aad4:	0800aa79 	.word	0x0800aa79
 800aad8:	0800ab2d 	.word	0x0800ab2d
 800aadc:	0800aa79 	.word	0x0800aa79
 800aae0:	0800aa79 	.word	0x0800aa79
 800aae4:	0800abf5 	.word	0x0800abf5
 800aae8:	680b      	ldr	r3, [r1, #0]
 800aaea:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aaee:	1d1a      	adds	r2, r3, #4
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	600a      	str	r2, [r1, #0]
 800aaf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aaf8:	2301      	movs	r3, #1
 800aafa:	e0a4      	b.n	800ac46 <_printf_i+0x1f6>
 800aafc:	6825      	ldr	r5, [r4, #0]
 800aafe:	6808      	ldr	r0, [r1, #0]
 800ab00:	062e      	lsls	r6, r5, #24
 800ab02:	f100 0304 	add.w	r3, r0, #4
 800ab06:	d50a      	bpl.n	800ab1e <_printf_i+0xce>
 800ab08:	6805      	ldr	r5, [r0, #0]
 800ab0a:	600b      	str	r3, [r1, #0]
 800ab0c:	2d00      	cmp	r5, #0
 800ab0e:	da03      	bge.n	800ab18 <_printf_i+0xc8>
 800ab10:	232d      	movs	r3, #45	; 0x2d
 800ab12:	426d      	negs	r5, r5
 800ab14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab18:	230a      	movs	r3, #10
 800ab1a:	485e      	ldr	r0, [pc, #376]	; (800ac94 <_printf_i+0x244>)
 800ab1c:	e019      	b.n	800ab52 <_printf_i+0x102>
 800ab1e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ab22:	6805      	ldr	r5, [r0, #0]
 800ab24:	600b      	str	r3, [r1, #0]
 800ab26:	bf18      	it	ne
 800ab28:	b22d      	sxthne	r5, r5
 800ab2a:	e7ef      	b.n	800ab0c <_printf_i+0xbc>
 800ab2c:	680b      	ldr	r3, [r1, #0]
 800ab2e:	6825      	ldr	r5, [r4, #0]
 800ab30:	1d18      	adds	r0, r3, #4
 800ab32:	6008      	str	r0, [r1, #0]
 800ab34:	0628      	lsls	r0, r5, #24
 800ab36:	d501      	bpl.n	800ab3c <_printf_i+0xec>
 800ab38:	681d      	ldr	r5, [r3, #0]
 800ab3a:	e002      	b.n	800ab42 <_printf_i+0xf2>
 800ab3c:	0669      	lsls	r1, r5, #25
 800ab3e:	d5fb      	bpl.n	800ab38 <_printf_i+0xe8>
 800ab40:	881d      	ldrh	r5, [r3, #0]
 800ab42:	2f6f      	cmp	r7, #111	; 0x6f
 800ab44:	bf0c      	ite	eq
 800ab46:	2308      	moveq	r3, #8
 800ab48:	230a      	movne	r3, #10
 800ab4a:	4852      	ldr	r0, [pc, #328]	; (800ac94 <_printf_i+0x244>)
 800ab4c:	2100      	movs	r1, #0
 800ab4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab52:	6866      	ldr	r6, [r4, #4]
 800ab54:	2e00      	cmp	r6, #0
 800ab56:	bfa8      	it	ge
 800ab58:	6821      	ldrge	r1, [r4, #0]
 800ab5a:	60a6      	str	r6, [r4, #8]
 800ab5c:	bfa4      	itt	ge
 800ab5e:	f021 0104 	bicge.w	r1, r1, #4
 800ab62:	6021      	strge	r1, [r4, #0]
 800ab64:	b90d      	cbnz	r5, 800ab6a <_printf_i+0x11a>
 800ab66:	2e00      	cmp	r6, #0
 800ab68:	d04d      	beq.n	800ac06 <_printf_i+0x1b6>
 800ab6a:	4616      	mov	r6, r2
 800ab6c:	fbb5 f1f3 	udiv	r1, r5, r3
 800ab70:	fb03 5711 	mls	r7, r3, r1, r5
 800ab74:	5dc7      	ldrb	r7, [r0, r7]
 800ab76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ab7a:	462f      	mov	r7, r5
 800ab7c:	42bb      	cmp	r3, r7
 800ab7e:	460d      	mov	r5, r1
 800ab80:	d9f4      	bls.n	800ab6c <_printf_i+0x11c>
 800ab82:	2b08      	cmp	r3, #8
 800ab84:	d10b      	bne.n	800ab9e <_printf_i+0x14e>
 800ab86:	6823      	ldr	r3, [r4, #0]
 800ab88:	07df      	lsls	r7, r3, #31
 800ab8a:	d508      	bpl.n	800ab9e <_printf_i+0x14e>
 800ab8c:	6923      	ldr	r3, [r4, #16]
 800ab8e:	6861      	ldr	r1, [r4, #4]
 800ab90:	4299      	cmp	r1, r3
 800ab92:	bfde      	ittt	le
 800ab94:	2330      	movle	r3, #48	; 0x30
 800ab96:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ab9a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ab9e:	1b92      	subs	r2, r2, r6
 800aba0:	6122      	str	r2, [r4, #16]
 800aba2:	464b      	mov	r3, r9
 800aba4:	4621      	mov	r1, r4
 800aba6:	4640      	mov	r0, r8
 800aba8:	f8cd a000 	str.w	sl, [sp]
 800abac:	aa03      	add	r2, sp, #12
 800abae:	f7ff fedf 	bl	800a970 <_printf_common>
 800abb2:	3001      	adds	r0, #1
 800abb4:	d14c      	bne.n	800ac50 <_printf_i+0x200>
 800abb6:	f04f 30ff 	mov.w	r0, #4294967295
 800abba:	b004      	add	sp, #16
 800abbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abc0:	4834      	ldr	r0, [pc, #208]	; (800ac94 <_printf_i+0x244>)
 800abc2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800abc6:	680e      	ldr	r6, [r1, #0]
 800abc8:	6823      	ldr	r3, [r4, #0]
 800abca:	f856 5b04 	ldr.w	r5, [r6], #4
 800abce:	061f      	lsls	r7, r3, #24
 800abd0:	600e      	str	r6, [r1, #0]
 800abd2:	d514      	bpl.n	800abfe <_printf_i+0x1ae>
 800abd4:	07d9      	lsls	r1, r3, #31
 800abd6:	bf44      	itt	mi
 800abd8:	f043 0320 	orrmi.w	r3, r3, #32
 800abdc:	6023      	strmi	r3, [r4, #0]
 800abde:	b91d      	cbnz	r5, 800abe8 <_printf_i+0x198>
 800abe0:	6823      	ldr	r3, [r4, #0]
 800abe2:	f023 0320 	bic.w	r3, r3, #32
 800abe6:	6023      	str	r3, [r4, #0]
 800abe8:	2310      	movs	r3, #16
 800abea:	e7af      	b.n	800ab4c <_printf_i+0xfc>
 800abec:	6823      	ldr	r3, [r4, #0]
 800abee:	f043 0320 	orr.w	r3, r3, #32
 800abf2:	6023      	str	r3, [r4, #0]
 800abf4:	2378      	movs	r3, #120	; 0x78
 800abf6:	4828      	ldr	r0, [pc, #160]	; (800ac98 <_printf_i+0x248>)
 800abf8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800abfc:	e7e3      	b.n	800abc6 <_printf_i+0x176>
 800abfe:	065e      	lsls	r6, r3, #25
 800ac00:	bf48      	it	mi
 800ac02:	b2ad      	uxthmi	r5, r5
 800ac04:	e7e6      	b.n	800abd4 <_printf_i+0x184>
 800ac06:	4616      	mov	r6, r2
 800ac08:	e7bb      	b.n	800ab82 <_printf_i+0x132>
 800ac0a:	680b      	ldr	r3, [r1, #0]
 800ac0c:	6826      	ldr	r6, [r4, #0]
 800ac0e:	1d1d      	adds	r5, r3, #4
 800ac10:	6960      	ldr	r0, [r4, #20]
 800ac12:	600d      	str	r5, [r1, #0]
 800ac14:	0635      	lsls	r5, r6, #24
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	d501      	bpl.n	800ac1e <_printf_i+0x1ce>
 800ac1a:	6018      	str	r0, [r3, #0]
 800ac1c:	e002      	b.n	800ac24 <_printf_i+0x1d4>
 800ac1e:	0671      	lsls	r1, r6, #25
 800ac20:	d5fb      	bpl.n	800ac1a <_printf_i+0x1ca>
 800ac22:	8018      	strh	r0, [r3, #0]
 800ac24:	2300      	movs	r3, #0
 800ac26:	4616      	mov	r6, r2
 800ac28:	6123      	str	r3, [r4, #16]
 800ac2a:	e7ba      	b.n	800aba2 <_printf_i+0x152>
 800ac2c:	680b      	ldr	r3, [r1, #0]
 800ac2e:	1d1a      	adds	r2, r3, #4
 800ac30:	600a      	str	r2, [r1, #0]
 800ac32:	681e      	ldr	r6, [r3, #0]
 800ac34:	2100      	movs	r1, #0
 800ac36:	4630      	mov	r0, r6
 800ac38:	6862      	ldr	r2, [r4, #4]
 800ac3a:	f000 f8d9 	bl	800adf0 <memchr>
 800ac3e:	b108      	cbz	r0, 800ac44 <_printf_i+0x1f4>
 800ac40:	1b80      	subs	r0, r0, r6
 800ac42:	6060      	str	r0, [r4, #4]
 800ac44:	6863      	ldr	r3, [r4, #4]
 800ac46:	6123      	str	r3, [r4, #16]
 800ac48:	2300      	movs	r3, #0
 800ac4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac4e:	e7a8      	b.n	800aba2 <_printf_i+0x152>
 800ac50:	4632      	mov	r2, r6
 800ac52:	4649      	mov	r1, r9
 800ac54:	4640      	mov	r0, r8
 800ac56:	6923      	ldr	r3, [r4, #16]
 800ac58:	47d0      	blx	sl
 800ac5a:	3001      	adds	r0, #1
 800ac5c:	d0ab      	beq.n	800abb6 <_printf_i+0x166>
 800ac5e:	6823      	ldr	r3, [r4, #0]
 800ac60:	079b      	lsls	r3, r3, #30
 800ac62:	d413      	bmi.n	800ac8c <_printf_i+0x23c>
 800ac64:	68e0      	ldr	r0, [r4, #12]
 800ac66:	9b03      	ldr	r3, [sp, #12]
 800ac68:	4298      	cmp	r0, r3
 800ac6a:	bfb8      	it	lt
 800ac6c:	4618      	movlt	r0, r3
 800ac6e:	e7a4      	b.n	800abba <_printf_i+0x16a>
 800ac70:	2301      	movs	r3, #1
 800ac72:	4632      	mov	r2, r6
 800ac74:	4649      	mov	r1, r9
 800ac76:	4640      	mov	r0, r8
 800ac78:	47d0      	blx	sl
 800ac7a:	3001      	adds	r0, #1
 800ac7c:	d09b      	beq.n	800abb6 <_printf_i+0x166>
 800ac7e:	3501      	adds	r5, #1
 800ac80:	68e3      	ldr	r3, [r4, #12]
 800ac82:	9903      	ldr	r1, [sp, #12]
 800ac84:	1a5b      	subs	r3, r3, r1
 800ac86:	42ab      	cmp	r3, r5
 800ac88:	dcf2      	bgt.n	800ac70 <_printf_i+0x220>
 800ac8a:	e7eb      	b.n	800ac64 <_printf_i+0x214>
 800ac8c:	2500      	movs	r5, #0
 800ac8e:	f104 0619 	add.w	r6, r4, #25
 800ac92:	e7f5      	b.n	800ac80 <_printf_i+0x230>
 800ac94:	0800ba39 	.word	0x0800ba39
 800ac98:	0800ba4a 	.word	0x0800ba4a

0800ac9c <_sbrk_r>:
 800ac9c:	b538      	push	{r3, r4, r5, lr}
 800ac9e:	2300      	movs	r3, #0
 800aca0:	4d05      	ldr	r5, [pc, #20]	; (800acb8 <_sbrk_r+0x1c>)
 800aca2:	4604      	mov	r4, r0
 800aca4:	4608      	mov	r0, r1
 800aca6:	602b      	str	r3, [r5, #0]
 800aca8:	f7f7 f8b8 	bl	8001e1c <_sbrk>
 800acac:	1c43      	adds	r3, r0, #1
 800acae:	d102      	bne.n	800acb6 <_sbrk_r+0x1a>
 800acb0:	682b      	ldr	r3, [r5, #0]
 800acb2:	b103      	cbz	r3, 800acb6 <_sbrk_r+0x1a>
 800acb4:	6023      	str	r3, [r4, #0]
 800acb6:	bd38      	pop	{r3, r4, r5, pc}
 800acb8:	20000960 	.word	0x20000960

0800acbc <__sread>:
 800acbc:	b510      	push	{r4, lr}
 800acbe:	460c      	mov	r4, r1
 800acc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acc4:	f000 f8ae 	bl	800ae24 <_read_r>
 800acc8:	2800      	cmp	r0, #0
 800acca:	bfab      	itete	ge
 800accc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800acce:	89a3      	ldrhlt	r3, [r4, #12]
 800acd0:	181b      	addge	r3, r3, r0
 800acd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800acd6:	bfac      	ite	ge
 800acd8:	6563      	strge	r3, [r4, #84]	; 0x54
 800acda:	81a3      	strhlt	r3, [r4, #12]
 800acdc:	bd10      	pop	{r4, pc}

0800acde <__swrite>:
 800acde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ace2:	461f      	mov	r7, r3
 800ace4:	898b      	ldrh	r3, [r1, #12]
 800ace6:	4605      	mov	r5, r0
 800ace8:	05db      	lsls	r3, r3, #23
 800acea:	460c      	mov	r4, r1
 800acec:	4616      	mov	r6, r2
 800acee:	d505      	bpl.n	800acfc <__swrite+0x1e>
 800acf0:	2302      	movs	r3, #2
 800acf2:	2200      	movs	r2, #0
 800acf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acf8:	f000 f868 	bl	800adcc <_lseek_r>
 800acfc:	89a3      	ldrh	r3, [r4, #12]
 800acfe:	4632      	mov	r2, r6
 800ad00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad04:	81a3      	strh	r3, [r4, #12]
 800ad06:	4628      	mov	r0, r5
 800ad08:	463b      	mov	r3, r7
 800ad0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad12:	f000 b817 	b.w	800ad44 <_write_r>

0800ad16 <__sseek>:
 800ad16:	b510      	push	{r4, lr}
 800ad18:	460c      	mov	r4, r1
 800ad1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad1e:	f000 f855 	bl	800adcc <_lseek_r>
 800ad22:	1c43      	adds	r3, r0, #1
 800ad24:	89a3      	ldrh	r3, [r4, #12]
 800ad26:	bf15      	itete	ne
 800ad28:	6560      	strne	r0, [r4, #84]	; 0x54
 800ad2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ad2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ad32:	81a3      	strheq	r3, [r4, #12]
 800ad34:	bf18      	it	ne
 800ad36:	81a3      	strhne	r3, [r4, #12]
 800ad38:	bd10      	pop	{r4, pc}

0800ad3a <__sclose>:
 800ad3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad3e:	f000 b813 	b.w	800ad68 <_close_r>
	...

0800ad44 <_write_r>:
 800ad44:	b538      	push	{r3, r4, r5, lr}
 800ad46:	4604      	mov	r4, r0
 800ad48:	4608      	mov	r0, r1
 800ad4a:	4611      	mov	r1, r2
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	4d05      	ldr	r5, [pc, #20]	; (800ad64 <_write_r+0x20>)
 800ad50:	602a      	str	r2, [r5, #0]
 800ad52:	461a      	mov	r2, r3
 800ad54:	f7f7 f808 	bl	8001d68 <_write>
 800ad58:	1c43      	adds	r3, r0, #1
 800ad5a:	d102      	bne.n	800ad62 <_write_r+0x1e>
 800ad5c:	682b      	ldr	r3, [r5, #0]
 800ad5e:	b103      	cbz	r3, 800ad62 <_write_r+0x1e>
 800ad60:	6023      	str	r3, [r4, #0]
 800ad62:	bd38      	pop	{r3, r4, r5, pc}
 800ad64:	20000960 	.word	0x20000960

0800ad68 <_close_r>:
 800ad68:	b538      	push	{r3, r4, r5, lr}
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	4d05      	ldr	r5, [pc, #20]	; (800ad84 <_close_r+0x1c>)
 800ad6e:	4604      	mov	r4, r0
 800ad70:	4608      	mov	r0, r1
 800ad72:	602b      	str	r3, [r5, #0]
 800ad74:	f7f7 f822 	bl	8001dbc <_close>
 800ad78:	1c43      	adds	r3, r0, #1
 800ad7a:	d102      	bne.n	800ad82 <_close_r+0x1a>
 800ad7c:	682b      	ldr	r3, [r5, #0]
 800ad7e:	b103      	cbz	r3, 800ad82 <_close_r+0x1a>
 800ad80:	6023      	str	r3, [r4, #0]
 800ad82:	bd38      	pop	{r3, r4, r5, pc}
 800ad84:	20000960 	.word	0x20000960

0800ad88 <_fstat_r>:
 800ad88:	b538      	push	{r3, r4, r5, lr}
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	4d06      	ldr	r5, [pc, #24]	; (800ada8 <_fstat_r+0x20>)
 800ad8e:	4604      	mov	r4, r0
 800ad90:	4608      	mov	r0, r1
 800ad92:	4611      	mov	r1, r2
 800ad94:	602b      	str	r3, [r5, #0]
 800ad96:	f7f7 f81c 	bl	8001dd2 <_fstat>
 800ad9a:	1c43      	adds	r3, r0, #1
 800ad9c:	d102      	bne.n	800ada4 <_fstat_r+0x1c>
 800ad9e:	682b      	ldr	r3, [r5, #0]
 800ada0:	b103      	cbz	r3, 800ada4 <_fstat_r+0x1c>
 800ada2:	6023      	str	r3, [r4, #0]
 800ada4:	bd38      	pop	{r3, r4, r5, pc}
 800ada6:	bf00      	nop
 800ada8:	20000960 	.word	0x20000960

0800adac <_isatty_r>:
 800adac:	b538      	push	{r3, r4, r5, lr}
 800adae:	2300      	movs	r3, #0
 800adb0:	4d05      	ldr	r5, [pc, #20]	; (800adc8 <_isatty_r+0x1c>)
 800adb2:	4604      	mov	r4, r0
 800adb4:	4608      	mov	r0, r1
 800adb6:	602b      	str	r3, [r5, #0]
 800adb8:	f7f7 f81a 	bl	8001df0 <_isatty>
 800adbc:	1c43      	adds	r3, r0, #1
 800adbe:	d102      	bne.n	800adc6 <_isatty_r+0x1a>
 800adc0:	682b      	ldr	r3, [r5, #0]
 800adc2:	b103      	cbz	r3, 800adc6 <_isatty_r+0x1a>
 800adc4:	6023      	str	r3, [r4, #0]
 800adc6:	bd38      	pop	{r3, r4, r5, pc}
 800adc8:	20000960 	.word	0x20000960

0800adcc <_lseek_r>:
 800adcc:	b538      	push	{r3, r4, r5, lr}
 800adce:	4604      	mov	r4, r0
 800add0:	4608      	mov	r0, r1
 800add2:	4611      	mov	r1, r2
 800add4:	2200      	movs	r2, #0
 800add6:	4d05      	ldr	r5, [pc, #20]	; (800adec <_lseek_r+0x20>)
 800add8:	602a      	str	r2, [r5, #0]
 800adda:	461a      	mov	r2, r3
 800addc:	f7f7 f812 	bl	8001e04 <_lseek>
 800ade0:	1c43      	adds	r3, r0, #1
 800ade2:	d102      	bne.n	800adea <_lseek_r+0x1e>
 800ade4:	682b      	ldr	r3, [r5, #0]
 800ade6:	b103      	cbz	r3, 800adea <_lseek_r+0x1e>
 800ade8:	6023      	str	r3, [r4, #0]
 800adea:	bd38      	pop	{r3, r4, r5, pc}
 800adec:	20000960 	.word	0x20000960

0800adf0 <memchr>:
 800adf0:	4603      	mov	r3, r0
 800adf2:	b510      	push	{r4, lr}
 800adf4:	b2c9      	uxtb	r1, r1
 800adf6:	4402      	add	r2, r0
 800adf8:	4293      	cmp	r3, r2
 800adfa:	4618      	mov	r0, r3
 800adfc:	d101      	bne.n	800ae02 <memchr+0x12>
 800adfe:	2000      	movs	r0, #0
 800ae00:	e003      	b.n	800ae0a <memchr+0x1a>
 800ae02:	7804      	ldrb	r4, [r0, #0]
 800ae04:	3301      	adds	r3, #1
 800ae06:	428c      	cmp	r4, r1
 800ae08:	d1f6      	bne.n	800adf8 <memchr+0x8>
 800ae0a:	bd10      	pop	{r4, pc}

0800ae0c <__malloc_lock>:
 800ae0c:	4801      	ldr	r0, [pc, #4]	; (800ae14 <__malloc_lock+0x8>)
 800ae0e:	f7ff bb4b 	b.w	800a4a8 <__retarget_lock_acquire_recursive>
 800ae12:	bf00      	nop
 800ae14:	20000958 	.word	0x20000958

0800ae18 <__malloc_unlock>:
 800ae18:	4801      	ldr	r0, [pc, #4]	; (800ae20 <__malloc_unlock+0x8>)
 800ae1a:	f7ff bb46 	b.w	800a4aa <__retarget_lock_release_recursive>
 800ae1e:	bf00      	nop
 800ae20:	20000958 	.word	0x20000958

0800ae24 <_read_r>:
 800ae24:	b538      	push	{r3, r4, r5, lr}
 800ae26:	4604      	mov	r4, r0
 800ae28:	4608      	mov	r0, r1
 800ae2a:	4611      	mov	r1, r2
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	4d05      	ldr	r5, [pc, #20]	; (800ae44 <_read_r+0x20>)
 800ae30:	602a      	str	r2, [r5, #0]
 800ae32:	461a      	mov	r2, r3
 800ae34:	f7f6 ff7a 	bl	8001d2c <_read>
 800ae38:	1c43      	adds	r3, r0, #1
 800ae3a:	d102      	bne.n	800ae42 <_read_r+0x1e>
 800ae3c:	682b      	ldr	r3, [r5, #0]
 800ae3e:	b103      	cbz	r3, 800ae42 <_read_r+0x1e>
 800ae40:	6023      	str	r3, [r4, #0]
 800ae42:	bd38      	pop	{r3, r4, r5, pc}
 800ae44:	20000960 	.word	0x20000960

0800ae48 <_init>:
 800ae48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae4a:	bf00      	nop
 800ae4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae4e:	bc08      	pop	{r3}
 800ae50:	469e      	mov	lr, r3
 800ae52:	4770      	bx	lr

0800ae54 <_fini>:
 800ae54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae56:	bf00      	nop
 800ae58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae5a:	bc08      	pop	{r3}
 800ae5c:	469e      	mov	lr, r3
 800ae5e:	4770      	bx	lr
